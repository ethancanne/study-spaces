/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={5318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},1859:(e,t,n)=>{"use strict";n.d(t,{Z:()=>re});var r=n(1526),o=Math.abs,i=String.fromCharCode,a=Object.assign;function s(e){return e.trim()}function l(e,t,n){return e.replace(t,n)}function u(e,t){return e.indexOf(t)}function c(e,t){return 0|e.charCodeAt(t)}function d(e,t,n){return e.slice(t,n)}function p(e){return e.length}function f(e){return e.length}function h(e,t){return t.push(e),e}var m=1,g=1,y=0,A=0,b=0,v="";function C(e,t,n,r,o,i,a){return{value:e,root:t,parent:n,type:r,props:o,children:i,line:m,column:g,length:a,return:""}}function w(e,t){return a(C("",null,null,"",null,null,0),e,{length:-e.length},t)}function x(){return b=A>0?c(v,--A):0,g--,10===b&&(g=1,m--),b}function E(){return b=A<y?c(v,A++):0,g++,10===b&&(g=1,m++),b}function k(){return c(v,A)}function B(){return A}function S(e,t){return d(v,e,t)}function O(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function T(e){return m=g=1,y=p(v=e),A=0,[]}function D(e){return v="",e}function N(e){return s(S(A-1,R(91===e?e+2:40===e?e+1:e)))}function I(e){for(;(b=k())&&b<33;)E();return O(e)>2||O(b)>3?"":" "}function P(e,t){for(;--t&&E()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return S(e,B()+(t<6&&32==k()&&32==E()))}function R(e){for(;E();)switch(b){case e:return A;case 34:case 39:34!==e&&39!==e&&R(b);break;case 40:41===e&&R(e);break;case 92:E()}return A}function M(e,t){for(;E()&&e+b!==57&&(e+b!==84||47!==k()););return"/*"+S(t,A-1)+"*"+i(47===e?e:E())}function Z(e){for(;!O(k());)E();return S(e,A)}var _="-ms-",j="-moz-",z="-webkit-",L="comm",U="rule",F="decl",Y="@keyframes";function $(e,t){for(var n="",r=f(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function W(e,t,n,r){switch(e.type){case"@import":case F:return e.return=e.return||e.value;case L:return"";case Y:return e.return=e.value+"{"+$(e.children,r)+"}";case U:e.value=e.props.join(",")}return p(n=$(e.children,r))?e.return=e.value+"{"+n+"}":""}function V(e,t){switch(function(e,t){return(((t<<2^c(e,0))<<2^c(e,1))<<2^c(e,2))<<2^c(e,3)}(e,t)){case 5103:return z+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return z+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return z+e+j+e+_+e+e;case 6828:case 4268:return z+e+_+e+e;case 6165:return z+e+_+"flex-"+e+e;case 5187:return z+e+l(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return z+e+_+"flex-item-"+l(e,/flex-|-self/,"")+e;case 4675:return z+e+_+"flex-line-pack"+l(e,/align-content|flex-|-self/,"")+e;case 5548:return z+e+_+l(e,"shrink","negative")+e;case 5292:return z+e+_+l(e,"basis","preferred-size")+e;case 6060:return z+"box-"+l(e,"-grow","")+z+e+_+l(e,"grow","positive")+e;case 4554:return z+l(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return l(l(l(e,/(zoom-|grab)/,z+"$1"),/(image-set)/,z+"$1"),e,"")+e;case 5495:case 3959:return l(e,/(image-set\([^]*)/,z+"$1$`$1");case 4968:return l(l(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+z+e+e;case 4095:case 3583:case 4068:case 2532:return l(e,/(.+)-inline(.+)/,z+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(p(e)-1-t>6)switch(c(e,t+1)){case 109:if(45!==c(e,t+4))break;case 102:return l(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+j+(108==c(e,t+3)?"$3":"$2-$3"))+e;case 115:return~u(e,"stretch")?V(l(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==c(e,t+1))break;case 6444:switch(c(e,p(e)-3-(~u(e,"!important")&&10))){case 107:return l(e,":",":"+z)+e;case 101:return l(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+z+(45===c(e,14)?"inline-":"")+"box$3$1"+z+"$2$3$1"+_+"$2box$3")+e}break;case 5936:switch(c(e,t+11)){case 114:return z+e+_+l(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return z+e+_+l(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return z+e+_+l(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return z+e+_+e+e}return e}function q(e){return D(G("",null,null,null,[""],e=T(e),0,[0],e))}function G(e,t,n,r,o,a,s,c,d){for(var f=0,m=0,g=s,y=0,A=0,b=0,v=1,C=1,w=1,S=0,O="",T=o,D=a,R=r,_=O;C;)switch(b=S,S=E()){case 40:if(108!=b&&58==_.charCodeAt(g-1)){-1!=u(_+=l(N(S),"&","&\f"),"&\f")&&(w=-1);break}case 34:case 39:case 91:_+=N(S);break;case 9:case 10:case 13:case 32:_+=I(b);break;case 92:_+=P(B()-1,7);continue;case 47:switch(k()){case 42:case 47:h(Q(M(E(),B()),t,n),d);break;default:_+="/"}break;case 123*v:c[f++]=p(_)*w;case 125*v:case 59:case 0:switch(S){case 0:case 125:C=0;case 59+m:A>0&&p(_)-g&&h(A>32?K(_+";",r,n,g-1):K(l(_," ","")+";",r,n,g-2),d);break;case 59:_+=";";default:if(h(R=H(_,t,n,f,m,o,c,O,T=[],D=[],g),a),123===S)if(0===m)G(_,t,R,R,T,a,g,c,D);else switch(y){case 100:case 109:case 115:G(e,R,R,r&&h(H(e,R,R,0,0,o,c,O,o,T=[],g),D),o,D,g,c,r?T:D);break;default:G(_,R,R,R,[""],D,0,c,D)}}f=m=A=0,v=w=1,O=_="",g=s;break;case 58:g=1+p(_),A=b;default:if(v<1)if(123==S)--v;else if(125==S&&0==v++&&125==x())continue;switch(_+=i(S),S*v){case 38:w=m>0?1:(_+="\f",-1);break;case 44:c[f++]=(p(_)-1)*w,w=1;break;case 64:45===k()&&(_+=N(E())),y=k(),m=g=p(O=_+=Z(B())),S++;break;case 45:45===b&&2==p(_)&&(v=0)}}return a}function H(e,t,n,r,i,a,u,c,p,h,m){for(var g=i-1,y=0===i?a:[""],A=f(y),b=0,v=0,w=0;b<r;++b)for(var x=0,E=d(e,g+1,g=o(v=u[b])),k=e;x<A;++x)(k=s(v>0?y[x]+" "+E:l(E,/&\f/g,y[x])))&&(p[w++]=k);return C(e,t,n,0===i?U:c,p,h,m)}function Q(e,t,n){return C(e,t,n,L,i(b),d(e,2,-2),0)}function K(e,t,n,r){return C(e,t,n,F,d(e,0,r),d(e,r+1,-1),r)}var X=function(e,t,n){for(var r=0,o=0;r=o,o=k(),38===r&&12===o&&(t[n]=1),!O(o);)E();return S(e,A)},J=new WeakMap,ee=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||J.get(n))&&!r){J.set(e,!0);for(var o=[],a=function(e,t){return D(function(e,t){var n=-1,r=44;do{switch(O(r)){case 0:38===r&&12===k()&&(t[n]=1),e[n]+=X(A-1,t,n);break;case 2:e[n]+=N(r);break;case 4:if(44===r){e[++n]=58===k()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=i(r)}}while(r=E());return e}(T(e),t))}(t,o),s=n.props,l=0,u=0;l<a.length;l++)for(var c=0;c<s.length;c++,u++)e.props[u]=o[l]?a[l].replace(/&\f/g,s[c]):s[c]+" "+a[l]}}},te=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case F:e.return=V(e.value,e.length);break;case Y:return $([w(e,{value:l(e.value,"@","@"+z)})],r);case U:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return $([w(e,{props:[l(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return $([w(e,{props:[l(t,/:(plac\w+)/,":-webkit-input-$1")]}),w(e,{props:[l(t,/:(plac\w+)/,":-moz-$1")]}),w(e,{props:[l(t,/:(plac\w+)/,_+"input-$1")]})],r)}return""}))}}];const re=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,i,a=e.stylisPlugins||ne,s={},l=[];o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)s[t[n]]=!0;l.push(e)}));var u,c,d,p,h=[W,(p=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&p(e)})],m=(c=[ee,te].concat(a,h),d=f(c),function(e,t,n,r){for(var o="",i=0;i<d;i++)o+=c[i](e,t,n,r)||"";return o});i=function(e,t,n,r){u=n,$(q(e?e+"{"+t.styles+"}":t.styles),m),r&&(g.inserted[t.name]=!0)};var g={key:t,sheet:new r.m({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:s,registered:{},insert:i};return g.sheet.hydrate(l),g}},7866:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}},5638:(e,t,n)=>{"use strict";n.d(t,{T:()=>s,w:()=>a});var r=n(7294),o=n(1859),i=(n(4199),(0,r.createContext)("undefined"!=typeof HTMLElement?(0,o.Z)({key:"css"}):null));i.Provider;var a=function(e){return(0,r.forwardRef)((function(t,n){var o=(0,r.useContext)(i);return e(t,o,n)}))},s=(0,r.createContext)({})},4199:(e,t,n)=>{"use strict";n.d(t,{O:()=>m});const r=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},o={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var i=n(7866),a=/[A-Z]|^ms/g,s=/_EMO_([^_]+?)_([^]*?)_EMO_/g,l=function(e){return 45===e.charCodeAt(1)},u=function(e){return null!=e&&"boolean"!=typeof e},c=(0,i.Z)((function(e){return l(e)?e:e.replace(a,"-$&").toLowerCase()})),d=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(s,(function(e,t,n){return f={name:t,styles:n,next:f},t}))}return 1===o[e]||l(e)||"number"!=typeof t||0===t?t:t+"px"};function p(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return f={name:n.name,styles:n.styles,next:f},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)f={name:r.name,styles:r.styles,next:f},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=p(e,t,n[o])+";";else for(var i in n){var a=n[i];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=i+"{"+t[a]+"}":u(a)&&(r+=c(i)+":"+d(i,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=p(e,t,a);switch(i){case"animation":case"animationName":r+=c(i)+":"+s+";";break;default:r+=i+"{"+s+"}"}}else for(var l=0;l<a.length;l++)u(a[l])&&(r+=c(i)+":"+d(i,a[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=f,i=n(e);return f=o,p(e,t,i)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var f,h=/label:\s*([^\s;\n{]+)\s*(;|$)/g,m=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var o=!0,i="";f=void 0;var a=e[0];null==a||void 0===a.raw?(o=!1,i+=p(n,t,a)):i+=a[0];for(var s=1;s<e.length;s++)i+=p(n,t,e[s]),o&&(i+=a[s]);h.lastIndex=0;for(var l,u="";null!==(l=h.exec(i));)u+="-"+l[1];return{name:r(i)+u,styles:i,next:f}}},1526:(e,t,n)=>{"use strict";n.d(t,{m:()=>r});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}()},444:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}n.d(t,{f:()=>r,M:()=>o});var o=function(e,t,n){var r=e.key+"-"+t.name;if(!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles),void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}}},7192:(e,t,n)=>{"use strict";function r(e,t,n){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>(r&&(n&&n[r]&&e.push(n[r]),e.push(t(r))),e)),[]).join(" ")})),r}n.d(t,{Z:()=>r})},9981:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const r=e=>e,o=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})()},8979:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(9981);const o={active:"Mui-active",checked:"Mui-checked",completed:"Mui-completed",disabled:"Mui-disabled",error:"Mui-error",expanded:"Mui-expanded",focused:"Mui-focused",focusVisible:"Mui-focusVisible",required:"Mui-required",selected:"Mui-selected"};function i(e,t){return o[t]||`${r.Z.generate(e)}-${t}`}},6087:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(8979);function o(e,t){const n={};return t.forEach((t=>{n[t]=(0,r.Z)(e,t)})),n}},9584:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M18 11v2h4v-2h-4zm-2 6.61c.96.71 2.21 1.65 3.2 2.39.4-.53.8-1.07 1.2-1.6-.99-.74-2.24-1.68-3.2-2.4-.4.54-.8 1.08-1.2 1.61zM20.4 5.6c-.4-.53-.8-1.07-1.2-1.6-.99.74-2.24 1.68-3.2 2.4.4.53.8 1.07 1.2 1.6.96-.72 2.21-1.65 3.2-2.4zM4 9c-1.1 0-2 .9-2 2v2c0 1.1.9 2 2 2h1v4h2v-4h1l5 3V6L8 9H4zm11.5 3c0-1.33-.58-2.53-1.5-3.35v6.69c.92-.81 1.5-2.01 1.5-3.34z"}),"Campaign");t.Z=a},888:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckCircle");t.Z=a},4603:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"}),"Comment");t.Z=a},9572:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"}),"Error");t.Z=a},3570:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M17 10H7v2h10v-2zm2-7h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zm-5-5H7v2h7v-2z"}),"EventNote");t.Z=a},4721:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"}),"Info");t.Z=a},8571:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"}),"People");t.Z=a},3094:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M11.07 12.85c.77-1.39 2.25-2.21 3.11-3.44.91-1.29.4-3.7-2.18-3.7-1.69 0-2.52 1.28-2.87 2.34L6.54 6.96C7.25 4.83 9.18 3 11.99 3c2.35 0 3.96 1.07 4.78 2.41.7 1.15 1.11 3.3.03 4.9-1.2 1.77-2.35 2.31-2.97 3.45-.25.46-.35.76-.35 2.24h-2.89c-.01-.78-.13-2.05.48-3.15zM14 20c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2z"}),"QuestionMark");t.Z=a},2761:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}),"Search");t.Z=a},4938:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(5637)},3023:(e,t)=>{"use strict";if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},6607:(e,t,n)=>{"use strict";n(3023)},4345:(e,t,n)=>{"use strict";n.d(t,{Z:()=>ne});var r=n(7462),o=n(3366),i=n(9766),a=n(4869),s=n(1387),l=n(1796);const u={black:"#000",white:"#fff"},c={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},d="#f3e5f5",p="#ce93d8",f="#ba68c8",h="#ab47bc",m="#9c27b0",g="#7b1fa2",y="#e57373",A="#ef5350",b="#f44336",v="#d32f2f",C="#c62828",w="#ffb74d",x="#ffa726",E="#ff9800",k="#f57c00",B="#e65100",S="#e3f2fd",O="#90caf9",T="#42a5f5",D="#1976d2",N="#1565c0",I="#4fc3f7",P="#29b6f6",R="#03a9f4",M="#0288d1",Z="#01579b",_="#81c784",j="#66bb6a",z="#4caf50",L="#388e3c",U="#2e7d32",F="#1b5e20",Y=["mode","contrastThreshold","tonalOffset"],$={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:u.white,default:u.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},W={text:{primary:u.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:u.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function V(e,t,n,r){const o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,l.$n)(e.main,o):"dark"===t&&(e.dark=(0,l._j)(e.main,i)))}const q=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],G={textTransform:"uppercase"},H='"Roboto", "Helvetica", "Arial", sans-serif';function Q(e,t){const n="function"==typeof t?t(e):t,{fontFamily:a=H,fontSize:s=14,fontWeightLight:l=300,fontWeightRegular:u=400,fontWeightMedium:c=500,fontWeightBold:d=700,htmlFontSize:p=16,allVariants:f,pxToRem:h}=n,m=(0,o.Z)(n,q),g=s/14,y=h||(e=>e/p*g+"rem"),A=(e,t,n,o,i)=>{return(0,r.Z)({fontFamily:a,fontWeight:e,fontSize:y(t),lineHeight:n},a===H?{letterSpacing:(s=o/t,Math.round(1e5*s)/1e5+"em")}:{},i,f);var s},b={h1:A(l,96,1.167,-1.5),h2:A(l,60,1.2,-.5),h3:A(u,48,1.167,0),h4:A(u,34,1.235,.25),h5:A(u,24,1.334,0),h6:A(c,20,1.6,.15),subtitle1:A(u,16,1.75,.15),subtitle2:A(c,14,1.57,.1),body1:A(u,16,1.5,.15),body2:A(u,14,1.43,.15),button:A(c,14,1.75,.4,G),caption:A(u,12,1.66,.4),overline:A(u,12,2.66,1,G)};return(0,i.Z)((0,r.Z)({htmlFontSize:p,pxToRem:y,fontFamily:a,fontSize:s,fontWeightLight:l,fontWeightRegular:u,fontWeightMedium:c,fontWeightBold:d},b),m,{clone:!1})}function K(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const X=["none",K(0,2,1,-1,0,1,1,0,0,1,3,0),K(0,3,1,-2,0,2,2,0,0,1,5,0),K(0,3,3,-2,0,3,4,0,0,1,8,0),K(0,2,4,-1,0,4,5,0,0,1,10,0),K(0,3,5,-1,0,5,8,0,0,1,14,0),K(0,3,5,-1,0,6,10,0,0,1,18,0),K(0,4,5,-2,0,7,10,1,0,2,16,1),K(0,5,5,-3,0,8,10,1,0,3,14,2),K(0,5,6,-3,0,9,12,1,0,3,16,2),K(0,6,6,-3,0,10,14,1,0,4,18,3),K(0,6,7,-4,0,11,15,1,0,4,20,3),K(0,7,8,-4,0,12,17,2,0,5,22,4),K(0,7,8,-4,0,13,19,2,0,5,24,4),K(0,7,9,-4,0,14,21,2,0,5,26,4),K(0,8,9,-5,0,15,22,2,0,6,28,5),K(0,8,10,-5,0,16,24,2,0,6,30,5),K(0,8,11,-5,0,17,26,2,0,6,32,5),K(0,9,11,-5,0,18,28,2,0,7,34,6),K(0,9,12,-6,0,19,29,2,0,7,36,6),K(0,10,13,-6,0,20,31,3,0,8,38,7),K(0,10,13,-6,0,21,33,3,0,8,40,7),K(0,10,14,-6,0,22,35,3,0,8,42,7),K(0,11,14,-7,0,23,36,3,0,9,44,8),K(0,11,15,-7,0,24,38,3,0,9,46,8)];var J=n(6067);const ee={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},te=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const ne=function(e={},...t){const{mixins:n={},palette:q={},transitions:G={},typography:H={}}=e,K=(0,o.Z)(e,te),ne=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:a=.2}=e,q=(0,o.Z)(e,Y),G=e.primary||function(e="light"){return"dark"===e?{main:O,light:S,dark:T}:{main:D,light:T,dark:N}}(t),H=e.secondary||function(e="light"){return"dark"===e?{main:p,light:d,dark:h}:{main:m,light:f,dark:g}}(t),Q=e.error||function(e="light"){return"dark"===e?{main:b,light:y,dark:v}:{main:v,light:A,dark:C}}(t),K=e.info||function(e="light"){return"dark"===e?{main:P,light:I,dark:M}:{main:M,light:R,dark:Z}}(t),X=e.success||function(e="light"){return"dark"===e?{main:j,light:_,dark:L}:{main:U,light:z,dark:F}}(t),J=e.warning||function(e="light"){return"dark"===e?{main:x,light:w,dark:k}:{main:"#ed6c02",light:E,dark:B}}(t);function ee(e){return(0,l.mi)(e,W.text.primary)>=n?W.text.primary:$.text.primary}const te=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:i=700})=>{if(!(e=(0,r.Z)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,s.Z)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,s.Z)(12,t?` (${t})`:"",JSON.stringify(e.main)));return V(e,"light",o,a),V(e,"dark",i,a),e.contrastText||(e.contrastText=ee(e.main)),e},ne={dark:W,light:$};return(0,i.Z)((0,r.Z)({common:u,mode:t,primary:te({color:G,name:"primary"}),secondary:te({color:H,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:te({color:Q,name:"error"}),warning:te({color:J,name:"warning"}),info:te({color:K,name:"info"}),success:te({color:X,name:"success"}),grey:c,contrastThreshold:n,getContrastText:ee,augmentColor:te,tonalOffset:a},ne[t]),q)}(q),re=(0,a.Z)(e);let oe=(0,i.Z)(re,{mixins:(ie=re.breakpoints,re.spacing,ae=n,(0,r.Z)({toolbar:{minHeight:56,[`${ie.up("xs")} and (orientation: landscape)`]:{minHeight:48},[ie.up("sm")]:{minHeight:64}}},ae)),palette:ne,shadows:X.slice(),typography:Q(ne,H),transitions:(0,J.ZP)(G),zIndex:(0,r.Z)({},ee)});var ie,ae;return oe=(0,i.Z)(oe,K),oe=t.reduce(((e,t)=>(0,i.Z)(e,t)),oe),oe}},6067:(e,t,n)=>{"use strict";n.d(t,{x9:()=>s,ZP:()=>c});var r=n(3366),o=n(7462);const i=["duration","easing","delay"],a={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},s={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function l(e){return`${Math.round(e)}ms`}function u(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function c(e){const t=(0,o.Z)({},a,e.easing),n=(0,o.Z)({},s,e.duration);return(0,o.Z)({getAutoHeightDuration:u,create:(e=["all"],o={})=>{const{duration:a=n.standard,easing:s=t.easeInOut,delay:u=0}=o;return(0,r.Z)(o,i),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:l(a)} ${s} ${"string"==typeof u?u:l(u)}`)).join(",")}},e,{easing:t,duration:n})}},247:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(4345).Z)()},9602:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>w,FO:()=>b,Dz:()=>v});var r=n(7462),o=n(3366),i=n(9868),a=n(4869),s=n(6523),l=n(8320);const u=["variant"];function c(e){return 0===e.length}function d(e){const{variant:t}=e,n=(0,o.Z)(e,u);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?c(r)?e[t]:(0,l.Z)(e[t]):`${c(r)?t:(0,l.Z)(t)}${(0,l.Z)(e[t].toString())}`})),r}const p=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],f=["theme"],h=["theme"];function m(e){return 0===Object.keys(e).length}function g(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const y=(0,a.Z)();var A=n(247);const b=e=>g(e)&&"classes"!==e,v=g,C=function(e={}){const{defaultTheme:t=y,rootShouldForwardProp:n=g,slotShouldForwardProp:a=g}=e;return(e,l={})=>{const{name:u,slot:c,skipVariantsResolver:y,skipSx:A,overridesResolver:b}=l,v=(0,o.Z)(l,p),C=void 0!==y?y:c&&"Root"!==c||!1,w=A||!1;let x=g;"Root"===c?x=n:c&&(x=a);const E=(0,i.ZP)(e,(0,r.Z)({shouldForwardProp:x,label:void 0},v)),k=(e,...n)=>{const i=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:i}=n,a=(0,o.Z)(n,f);return e((0,r.Z)({theme:m(i)?t:i},a))}:e)):[];let a=e;u&&b&&i.push((e=>{const n=m(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(u,n);if(r){const t={};return Object.entries(r).forEach((([n,r])=>{t[n]="function"==typeof r?r(e):r})),b(e,t)}return null})),u&&!C&&i.push((e=>{const n=m(e.theme)?t:e.theme;return((e,t,n,r)=>{var o,i;const{ownerState:a={}}=e,s=[],l=null==n||null==(o=n.components)||null==(i=o[r])?void 0:i.variants;return l&&l.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{a[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&s.push(t[d(n.props)])})),s})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=d(e.props);r[t]=e.style})),r})(u,n),n,u)})),w||i.push((e=>{const n=m(e.theme)?t:e.theme;return(0,s.Z)((0,r.Z)({},e,{theme:n}))}));const l=i.length-n.length;if(Array.isArray(e)&&l>0){const t=new Array(l).fill("");a=[...e,...t],a.raw=[...e.raw,...t]}else"function"==typeof e&&(a=n=>{let{theme:i}=n,a=(0,o.Z)(n,h);return e((0,r.Z)({theme:m(i)?t:i},a))});return E(a,...i)};return E.withConfig&&(k.withConfig=E.withConfig),k}}({defaultTheme:A.Z,rootShouldForwardProp:b}),w=C},4368:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7462);var o=n(7878),i=n(247);function a({props:e,name:t}){return function({props:e,name:t,defaultTheme:n}){return function(e){const{theme:t,name:n,props:o}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?function(e,t){const n=(0,r.Z)({},t);return Object.keys(e).forEach((t=>{void 0===n[t]&&(n[t]=e[t])})),n}(t.components[n].defaultProps,o):o}({theme:(0,o.Z)(n),name:t,props:e})}({props:e,name:t,defaultTheme:i.Z})}},8216:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(8320).Z},5949:(e,t,n)=>{"use strict";n.d(t,{Z:()=>A});var r=n(7462),o=n(7294),i=n(3366),a=(n(5697),n(6010)),s=n(7192),l=n(8216),u=n(4368),c=n(9602),d=n(8979);function p(e){return(0,d.Z)("MuiSvgIcon",e)}(0,n(6087).Z)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var f=n(5893);const h=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],m=(0,c.ZP)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${(0,l.Z)(n.color)}`],t[`fontSize${(0,l.Z)(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,o,i,a,s,l,u,c,d,p,f,h,m,g,y,A;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(o=e.transitions)||null==(i=o.duration)?void 0:i.shorter}),fontSize:{inherit:"inherit",small:(null==(a=e.typography)||null==(s=a.pxToRem)?void 0:s.call(a,20))||"1.25rem",medium:(null==(l=e.typography)||null==(u=l.pxToRem)?void 0:u.call(l,24))||"1.5rem",large:(null==(c=e.typography)||null==(d=c.pxToRem)?void 0:d.call(c,35))||"2.1875"}[t.fontSize],color:null!=(p=null==(f=e.palette)||null==(h=f[t.color])?void 0:h.main)?p:{action:null==(m=e.palette)||null==(g=m.action)?void 0:g.active,disabled:null==(y=e.palette)||null==(A=y.action)?void 0:A.disabled,inherit:void 0}[t.color]}})),g=o.forwardRef((function(e,t){const n=(0,u.Z)({props:e,name:"MuiSvgIcon"}),{children:o,className:c,color:d="inherit",component:g="svg",fontSize:y="medium",htmlColor:A,inheritViewBox:b=!1,titleAccess:v,viewBox:C="0 0 24 24"}=n,w=(0,i.Z)(n,h),x=(0,r.Z)({},n,{color:d,component:g,fontSize:y,inheritViewBox:b,viewBox:C}),E={};b||(E.viewBox=C);const k=(e=>{const{color:t,fontSize:n,classes:r}=e,o={root:["root","inherit"!==t&&`color${(0,l.Z)(t)}`,`fontSize${(0,l.Z)(n)}`]};return(0,s.Z)(o,p,r)})(x);return(0,f.jsxs)(m,(0,r.Z)({as:g,className:(0,a.Z)(k.root,c),ownerState:x,focusable:"false",color:A,"aria-hidden":!v||void 0,role:v?"img":void 0,ref:t},E,w,{children:[o,v?(0,f.jsx)("title",{children:v}):null]}))}));g.muiName="SvgIcon";const y=g;function A(e,t){const n=(n,o)=>(0,f.jsx)(y,(0,r.Z)({"data-testid":`${t}Icon`,ref:o},n,{children:e}));return n.muiName=y.muiName,o.memo(o.forwardRef(n))}},7144:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7596).Z},5637:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>r.Z,createChainedFunction:()=>o,createSvgIcon:()=>i.Z,debounce:()=>a.Z,deprecatedPropType:()=>s,isMuiElement:()=>l.Z,ownerDocument:()=>u.Z,ownerWindow:()=>c.Z,requirePropFactory:()=>d,setRef:()=>p,unstable_ClassNameGenerator:()=>w.Z,unstable_useEnhancedEffect:()=>f.Z,unstable_useId:()=>g,unsupportedProp:()=>y,useControlled:()=>A.Z,useEventCallback:()=>b.Z,useForkRef:()=>v.Z,useIsFocusVisible:()=>C.Z});var r=n(8216);const o=n(9064).Z;var i=n(5949),a=n(7144);const s=function(e,t){return()=>null};var l=n(8502),u=n(8038),c=n(5340);n(7462);const d=function(e,t){return()=>null},p=n(7960).Z;var f=n(8974),h=n(7294);let m=0;const g=function(e){const[t,n]=h.useState(e),r=e||t;return h.useEffect((()=>{null==t&&(m+=1,n(`mui-${m}`))}),[t]),r},y=function(e,t,n,r,o){return null};var A=n(9299),b=n(2068),v=n(1705),C=n(9674),w=n(9981)},8502:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);const o=function(e,t){return r.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}},8038:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7094).Z},5340:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(8290).Z},9299:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(8925).Z},8974:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(6600).Z},2068:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(3633).Z},1705:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(67).Z},9674:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(9962).Z},9868:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>A});var r=n(7294),o=n(7462),i=n(7866),a=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const s=(0,i.Z)((function(e){return a.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var l=n(5638),u=n(444),c=n(4199),d=s,p=function(e){return"theme"!==e},f=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?d:p},h=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},m=function(){return null};var g=function e(t,n){var i,a,s=t.__emotion_real===t,d=s&&t.__emotion_base||t;void 0!==n&&(i=n.label,a=n.target);var p=h(t,n,s),g=p||f(d),y=!g("as");return function(){var A=arguments,b=s&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==i&&b.push("label:"+i+";"),null==A[0]||void 0===A[0].raw)b.push.apply(b,A);else{b.push(A[0][0]);for(var v=A.length,C=1;C<v;C++)b.push(A[C],A[0][C])}var w=(0,l.w)((function(e,t,n){var o=y&&e.as||d,i="",s=[],h=e;if(null==e.theme){for(var A in h={},e)h[A]=e[A];h.theme=(0,r.useContext)(l.T)}"string"==typeof e.className?i=(0,u.f)(t.registered,s,e.className):null!=e.className&&(i=e.className+" ");var v=(0,c.O)(b.concat(s),t.registered,h);(0,u.M)(t,v,"string"==typeof o),i+=t.key+"-"+v.name,void 0!==a&&(i+=" "+a);var C=y&&void 0===p?f(o):g,w={};for(var x in e)y&&"as"===x||C(x)&&(w[x]=e[x]);w.className=i,w.ref=n;var E=(0,r.createElement)(o,w),k=(0,r.createElement)(m,null);return(0,r.createElement)(r.Fragment,null,k,E)}));return w.displayName=void 0!==i?i:"Styled("+("string"==typeof d?d:d.displayName||d.name||"Component")+")",w.defaultProps=t.defaultProps,w.__emotion_real=w,w.__emotion_base=d,w.__emotion_styles=b,w.__emotion_forwardProp=p,Object.defineProperty(w,"toString",{value:function(){return"."+a}}),w.withComponent=function(t,r){return e(t,(0,o.Z)({},n,r,{shouldForwardProp:h(w,r,!0)})).apply(void 0,b)},w}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){g[e]=g(e)}));const y=g;function A(e,t){return y(e,t)}},5408:(e,t,n)=>{"use strict";n.d(t,{VO:()=>r,k9:()=>i,W8:()=>a,L7:()=>s}),n(5697);const r={xs:0,sm:600,md:900,lg:1200,xl:1536},o={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${r[e]}px)`};function i(e,t,n){const i=e.theme||{};if(Array.isArray(t)){const e=i.breakpoints||o;return t.reduce(((r,o,i)=>(r[e.up(e.keys[i])]=n(t[i]),r)),{})}if("object"==typeof t){const e=i.breakpoints||o;return Object.keys(t).reduce(((o,i)=>{if(-1!==Object.keys(e.values||r).indexOf(i))o[e.up(i)]=n(t[i],i);else{const e=i;o[e]=t[e]}return o}),{})}return n(t)}function a(e={}){var t;return(null==e||null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function s(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}},1796:(e,t,n)=>{"use strict";n.d(t,{mi:()=>l,Fq:()=>u,_j:()=>c,$n:()=>d});var r=n(1387);function o(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function i(e){if(e.type)return e;if("#"===e.charAt(0))return i(function(e){e=e.substr(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,r.Z)(9,e));let o,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),o=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].substr(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o))throw new Error((0,r.Z)(10,o))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:o}}function a(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function s(e){let t="hsl"===(e=i(e)).type?i(function(e){e=i(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,s=r*Math.min(o,1-o),l=(e,t=(e+n/30)%12)=>o-s*Math.max(Math.min(t-3,9-t,1),-1);let u="rgb";const c=[Math.round(255*l(0)),Math.round(255*l(8)),Math.round(255*l(4))];return"hsla"===e.type&&(u+="a",c.push(t[3])),a({type:u,values:c})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function l(e,t){const n=s(e),r=s(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e,t){return e=i(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,a(e)}function c(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return a(e)}function d(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return a(e)}},4869:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(7462),o=n(3366),i=n(9766);const a=["values","unit","step"],s={borderRadius:4};var l=n(2605);const u=["breakpoints","palette","spacing","shape"],c=function(e={},...t){const{breakpoints:n={},palette:c={},spacing:d,shape:p={}}=e,f=(0,o.Z)(e,u),h=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:i=5}=e,s=(0,o.Z)(e,a),l=Object.keys(t);function u(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function c(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-i/100}${n})`}function d(e,r){const o=l.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[l[o]]?t[l[o]]:r)-i/100}${n})`}return(0,r.Z)({keys:l,values:t,up:u,down:c,between:d,only:function(e){return l.indexOf(e)+1<l.length?d(e,l[l.indexOf(e)+1]):u(e)},not:function(e){const t=l.indexOf(e);return 0===t?u(l[1]):t===l.length-1?c(l[t]):d(e,l[l.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},s)}(n),m=function(e=8){if(e.mui)return e;const t=(0,l.hB)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(d);let g=(0,i.Z)({breakpoints:h,direction:"ltr",components:{},palette:(0,r.Z)({mode:"light"},c),spacing:m,shape:(0,r.Z)({},s,p)},f);return g=t.reduce(((e,t)=>(0,i.Z)(e,t)),g),g}},4178:(e,t,n)=>{"use strict";n.d(t,{Z:()=>Q,G:()=>H});var r=n(4844),o=n(7730);const i=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,o.Z)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var a=n(2605),s=n(5408);function l(e){return"number"!=typeof e?e:`${e}px solid`}const u=(0,r.Z)({prop:"border",themeKey:"borders",transform:l}),c=(0,r.Z)({prop:"borderTop",themeKey:"borders",transform:l}),d=(0,r.Z)({prop:"borderRight",themeKey:"borders",transform:l}),p=(0,r.Z)({prop:"borderBottom",themeKey:"borders",transform:l}),f=(0,r.Z)({prop:"borderLeft",themeKey:"borders",transform:l}),h=(0,r.Z)({prop:"borderColor",themeKey:"palette"}),m=(0,r.Z)({prop:"borderTopColor",themeKey:"palette"}),g=(0,r.Z)({prop:"borderRightColor",themeKey:"palette"}),y=(0,r.Z)({prop:"borderBottomColor",themeKey:"palette"}),A=(0,r.Z)({prop:"borderLeftColor",themeKey:"palette"}),b=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,a.eI)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,a.NA)(t,e)});return(0,s.k9)(e,e.borderRadius,n)}return null};b.propTypes={},b.filterProps=["borderRadius"];const v=i(u,c,d,p,f,h,m,g,y,A,b),C=i((0,r.Z)({prop:"displayPrint",cssProperty:!1,transform:e=>({"@media print":{display:e}})}),(0,r.Z)({prop:"display"}),(0,r.Z)({prop:"overflow"}),(0,r.Z)({prop:"textOverflow"}),(0,r.Z)({prop:"visibility"}),(0,r.Z)({prop:"whiteSpace"})),w=i((0,r.Z)({prop:"flexBasis"}),(0,r.Z)({prop:"flexDirection"}),(0,r.Z)({prop:"flexWrap"}),(0,r.Z)({prop:"justifyContent"}),(0,r.Z)({prop:"alignItems"}),(0,r.Z)({prop:"alignContent"}),(0,r.Z)({prop:"order"}),(0,r.Z)({prop:"flex"}),(0,r.Z)({prop:"flexGrow"}),(0,r.Z)({prop:"flexShrink"}),(0,r.Z)({prop:"alignSelf"}),(0,r.Z)({prop:"justifyItems"}),(0,r.Z)({prop:"justifySelf"})),x=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,a.eI)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,a.NA)(t,e)});return(0,s.k9)(e,e.gap,n)}return null};x.propTypes={},x.filterProps=["gap"];const E=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,a.eI)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,a.NA)(t,e)});return(0,s.k9)(e,e.columnGap,n)}return null};E.propTypes={},E.filterProps=["columnGap"];const k=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,a.eI)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,a.NA)(t,e)});return(0,s.k9)(e,e.rowGap,n)}return null};k.propTypes={},k.filterProps=["rowGap"];const B=i(x,E,k,(0,r.Z)({prop:"gridColumn"}),(0,r.Z)({prop:"gridRow"}),(0,r.Z)({prop:"gridAutoFlow"}),(0,r.Z)({prop:"gridAutoColumns"}),(0,r.Z)({prop:"gridAutoRows"}),(0,r.Z)({prop:"gridTemplateColumns"}),(0,r.Z)({prop:"gridTemplateRows"}),(0,r.Z)({prop:"gridTemplateAreas"}),(0,r.Z)({prop:"gridArea"})),S=i((0,r.Z)({prop:"position"}),(0,r.Z)({prop:"zIndex",themeKey:"zIndex"}),(0,r.Z)({prop:"top"}),(0,r.Z)({prop:"right"}),(0,r.Z)({prop:"bottom"}),(0,r.Z)({prop:"left"})),O=i((0,r.Z)({prop:"color",themeKey:"palette"}),(0,r.Z)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"}),(0,r.Z)({prop:"backgroundColor",themeKey:"palette"})),T=(0,r.Z)({prop:"boxShadow",themeKey:"shadows"});function D(e){return e<=1&&0!==e?100*e+"%":e}const N=(0,r.Z)({prop:"width",transform:D}),I=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,o;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(o=r.values)?void 0:o[t])||s.VO[t]||D(t)}};return(0,s.k9)(e,e.maxWidth,t)}return null};I.filterProps=["maxWidth"];const P=(0,r.Z)({prop:"minWidth",transform:D}),R=(0,r.Z)({prop:"height",transform:D}),M=(0,r.Z)({prop:"maxHeight",transform:D}),Z=(0,r.Z)({prop:"minHeight",transform:D}),_=((0,r.Z)({prop:"size",cssProperty:"width",transform:D}),(0,r.Z)({prop:"size",cssProperty:"height",transform:D}),i(N,I,P,R,M,Z,(0,r.Z)({prop:"boxSizing"}))),j=(0,r.Z)({prop:"fontFamily",themeKey:"typography"}),z=(0,r.Z)({prop:"fontSize",themeKey:"typography"}),L=(0,r.Z)({prop:"fontStyle",themeKey:"typography"}),U=(0,r.Z)({prop:"fontWeight",themeKey:"typography"}),F=(0,r.Z)({prop:"letterSpacing"}),Y=(0,r.Z)({prop:"textTransform"}),$=(0,r.Z)({prop:"lineHeight"}),W=(0,r.Z)({prop:"textAlign"}),V=i((0,r.Z)({prop:"typography",cssProperty:!1,themeKey:"typography"}),j,z,L,U,F,$,W,Y),q={borders:v.filterProps,display:C.filterProps,flexbox:w.filterProps,grid:B.filterProps,positions:S.filterProps,palette:O.filterProps,shadows:T.filterProps,sizing:_.filterProps,spacing:a.ZP.filterProps,typography:V.filterProps},G={borders:v,display:C,flexbox:w,grid:B,positions:S,palette:O,shadows:T,sizing:_,spacing:a.ZP,typography:V},H=Object.keys(q).reduce(((e,t)=>(q[t].forEach((n=>{e[n]=G[t]})),e)),{}),Q=function(e,t,n){const r={[e]:t,theme:n},o=H[e];return o?o(r):{[e]:t}}},7730:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9766);const o=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},2605:(e,t,n)=>{"use strict";n.d(t,{hB:()=>h,eI:()=>f,ZP:()=>v,NA:()=>m});var r=n(5408),o=n(4844),i=n(7730);const a={m:"margin",p:"padding"},s={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},l={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},u=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!l[e])return[e];e=l[e]}const[t,n]=e.split(""),r=a[t],o=s[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),c=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],d=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],p=[...c,...d];function f(e,t,n,r){const i=(0,o.D)(e,t)||n;return"number"==typeof i?e=>"string"==typeof e?e:i*e:Array.isArray(i)?e=>"string"==typeof e?e:i[e]:"function"==typeof i?i:()=>{}}function h(e){return f(e,"spacing",8)}function m(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function g(e,t){const n=h(e.theme);return Object.keys(e).map((o=>function(e,t,n,o){if(-1===t.indexOf(n))return null;const i=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=m(t,n),e)),{})}(u(n),o),a=e[n];return(0,r.k9)(e,a,i)}(e,t,o,n))).reduce(i.Z,{})}function y(e){return g(e,c)}function A(e){return g(e,d)}function b(e){return g(e,p)}y.propTypes={},y.filterProps=c,A.propTypes={},A.filterProps=d,b.propTypes={},b.filterProps=p;const v=b},4844:(e,t,n)=>{"use strict";n.d(t,{D:()=>i,Z:()=>s});var r=n(8320),o=n(5408);function i(e,t){return t&&"string"==typeof t?t.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e):null}function a(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:i(e,n)||r,t&&(o=t(o)),o}const s=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:s,transform:l}=e,u=e=>{if(null==e[t])return null;const u=e[t],c=i(e.theme,s)||{};return(0,o.k9)(e,u,(e=>{let o=a(c,l,e);return e===o&&"string"==typeof e&&(o=a(c,l,`${t}${"default"===e?"":(0,r.Z)(e)}`,e)),!1===n?o:{[n]:o}}))};return u.propTypes={},u.filterProps=[t],u}},6523:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7730),o=n(4178),i=n(5408);function a(e){const{sx:t,theme:n={}}=e||{};if(!t)return null;function s(e){let t=e;if("function"==typeof e)t=e(n);else if("object"!=typeof e)return e;const s=(0,i.W8)(n.breakpoints),l=Object.keys(s);let u=s;return Object.keys(t).forEach((e=>{const s="function"==typeof(l=t[e])?l(n):l;var l;if(null!=s)if("object"==typeof s)if(o.G[e])u=(0,r.Z)(u,(0,o.Z)(e,s,n));else{const t=(0,i.k9)({theme:n},s,(t=>({[e]:t})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(t,s)?u=(0,r.Z)(u,t):u[e]=a({sx:s,theme:n})}else u=(0,r.Z)(u,(0,o.Z)(e,s,n))})),(0,i.L7)(l,u)}return Array.isArray(t)?t.map(s):s(t)}a.filterProps=["sx"];const s=a},7878:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4869),o=n(7294);const i=o.createContext(null),a=(0,r.Z)(),s=function(e=a){return function(e=null){const t=o.useContext(i);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(e)}},8320:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(1387);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},9064:(e,t,n)=>{"use strict";function r(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}n.d(t,{Z:()=>r})},7596:(e,t,n)=>{"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,{Z:()=>r})},9766:(e,t,n)=>{"use strict";n.d(t,{P:()=>o,Z:()=>i});var r=n(7462);function o(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function i(e,t,n={clone:!0}){const a=n.clone?(0,r.Z)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach((r=>{"__proto__"!==r&&(o(t[r])&&r in e&&o(e[r])?a[r]=i(e[r],t[r],n):a[r]=t[r])})),a}},1387:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},7094:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{Z:()=>r})},8290:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7094);function o(e){return(0,r.Z)(e).defaultView||window}},7960:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},8925:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o({controlled:e,default:t,name:n,state:o="value"}){const{current:i}=r.useRef(void 0!==e),[a,s]=r.useState(t);return[i?e:a,r.useCallback((e=>{i||s(e)}),[])]}},6600:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);const o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect},3633:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o=n(6600);function i(e){const t=r.useRef(e);return(0,o.Z)((()=>{t.current=e})),r.useCallback(((...e)=>(0,t.current)(...e)),[])}},67:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o=n(7960);function i(e,t){return r.useMemo((()=>null==e&&null==t?null:n=>{(0,o.Z)(e,n),(0,o.Z)(t,n)}),[e,t])}},9962:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(7294);let o,i=!0,a=!1;const s={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function l(e){e.metaKey||e.altKey||e.ctrlKey||(i=!0)}function u(){i=!1}function c(){"hidden"===this.visibilityState&&a&&(i=!0)}function d(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",l,!0),t.addEventListener("mousedown",u,!0),t.addEventListener("pointerdown",u,!0),t.addEventListener("touchstart",u,!0),t.addEventListener("visibilitychange",c,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return i||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!s[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(a=!0,window.clearTimeout(o),o=window.setTimeout((()=>{a=!1}),100),t.current=!1,!0)},ref:e}}},3063:(e,t)=>{function n(e){if(e)return function(e){for(var t in n.prototype)e[t]=n.prototype[t];return e}(e)}t.Q=n,n.prototype.on=n.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},n.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},n.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t)}return this},n.prototype.emitReserved=n.prototype.emit,n.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},n.prototype.hasListeners=function(e){return!!this.listeners(e).length}},9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),i=n(4372),a=n(5327),s=n(4097),l=n(4109),u=n(3464),c=n(5061),d=n(5655),p=n(5263);e.exports=function(e){return new Promise((function(t,n){var f,h=e.data,m=e.headers,g=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(f),e.signal&&e.signal.removeEventListener("abort",f)}r.isFormData(h)&&delete m["Content-Type"];var A=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",v=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(b+":"+v)}var C=s(e.baseURL,e.url);function w(){if(A){var r="getAllResponseHeaders"in A?l(A.getAllResponseHeaders()):null,i={data:g&&"text"!==g&&"json"!==g?A.response:A.responseText,status:A.status,statusText:A.statusText,headers:r,config:e,request:A};o((function(e){t(e),y()}),(function(e){n(e),y()}),i),A=null}}if(A.open(e.method.toUpperCase(),a(C,e.params,e.paramsSerializer),!0),A.timeout=e.timeout,"onloadend"in A?A.onloadend=w:A.onreadystatechange=function(){A&&4===A.readyState&&(0!==A.status||A.responseURL&&0===A.responseURL.indexOf("file:"))&&setTimeout(w)},A.onabort=function(){A&&(n(c("Request aborted",e,"ECONNABORTED",A)),A=null)},A.onerror=function(){n(c("Network Error",e,null,A)),A=null},A.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||d.transitional;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",A)),A=null},r.isStandardBrowserEnv()){var x=(e.withCredentials||u(C))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;x&&(m[e.xsrfHeaderName]=x)}"setRequestHeader"in A&&r.forEach(m,(function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete m[t]:A.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(A.withCredentials=!!e.withCredentials),g&&"json"!==g&&(A.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&A.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&A.upload&&A.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(f=function(e){A&&(n(!e||e&&e.type?new p("canceled"):e),A.abort(),A=null)},e.cancelToken&&e.cancelToken.subscribe(f),e.signal&&(e.signal.aborted?f():e.signal.addEventListener("abort",f))),h||(h=null),A.send(h)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),i=n(321),a=n(7185),s=function e(t){var n=new i(t),s=o(i.prototype.request,n);return r.extend(s,i.prototype,n),r.extend(s,n),s.create=function(n){return e(a(t,n))},s}(n(5655));s.Axios=i,s.Cancel=n(5263),s.CancelToken=n(4972),s.isCancel=n(6502),s.VERSION=n(7288).version,s.all=function(e){return Promise.all(e)},s.spread=n(8713),s.isAxiosError=n(6268),e.exports=s,e.exports.default=s},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var r=n(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),i=n(782),a=n(3572),s=n(7185),l=n(4875),u=l.validators;function c(e){this.defaults=e,this.interceptors={request:new i,response:new i}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;void 0!==t&&l.assertOptions(t,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var n=[],r=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(r=r&&t.synchronous,n.unshift(t.fulfilled,t.rejected))}));var o,i=[];if(this.interceptors.response.forEach((function(e){i.push(e.fulfilled,e.rejected)})),!r){var c=[a,void 0];for(Array.prototype.unshift.apply(c,n),c=c.concat(i),o=Promise.resolve(e);c.length;)o=o.then(c.shift(),c.shift());return o}for(var d=e;n.length;){var p=n.shift(),f=n.shift();try{d=p(d)}catch(e){f(e);break}}try{o=a(d)}catch(e){return Promise.reject(e)}for(;i.length;)o=o.then(i.shift(),i.shift());return o},c.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},5061:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),i=n(6502),a=n(5655),s=n(5263);function l(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new s("canceled")}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function a(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function s(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function l(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var u={url:a,method:a,data:a,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:l};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||i,o=t(e);r.isUndefined(o)&&t!==l||(n[e]=o)})),n}},6026:(e,t,n)=>{"use strict";var r=n(5061);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5655);e.exports=function(e,t,n){var i=this||o;return r.forEach(n,(function(n){e=n.call(i,e,t)})),e}},5655:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),i=n(481),a={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(l=n(5448)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(s(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||u.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,a=!n&&"json"===this.responseType;if(a||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw i(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(a)})),e.exports=u},7288:e=>{e.exports={version:"0.23.0"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},3464:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4875:(e,t,n)=>{"use strict";var r=n(7288).version,o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var i={};o.transitional=function(e,t,n){function o(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,a){if(!1===e)throw new Error(o(r," has been removed"+(t?" in "+t:"")));return t&&!i[r]&&(i[r]=!0,console.warn(o(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,a)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var i=r[o],a=t[i];if(a){var s=e[i],l=void 0===s||a(s,i,e);if(!0!==l)throw new TypeError("option "+i+" must be "+l)}else if(!0!==n)throw Error("Unknown option "+i)}},validators:o}},4867:(e,t,n)=>{"use strict";var r=n(1849),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:l,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},1407:e=>{e.exports={Connect:"connection",Disconnect:"disconnected",Error:"connect_error",InvalidUserId:"invalid user id",Message:"message",MessageFailure:"message send error"}},5269:e=>{e.exports={InPerson:"In person",Mixed:"In person or online",Online:"Online"}},9114:e=>{e.exports={Announcement:"Announcement",Discussion:"Discussion",Question:"Question",Problem:"Problem",Meeting:"Meeting"}},5106:e=>{e.exports={Any:"Any",History:"History",Literature:"Literature",Math:"Math",Science:"Science"}},4193:e=>{function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var r,o={Am:"AM",Pm:"PM"},i=[];(r=Array(12).keys(),function(e){if(Array.isArray(e))return n(e)}(r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e){["00","15","30","45"].map((function(t){i.push("".concat(e,":").concat(t))}))}));var a=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.hour=t,this.minute=n,this.partOfDay=r}var n,r,i;return n=e,i=[{key:"parse24HourTimeString",value:function(t){var n=(t=String(t)).indexOf(":"),r=parseInt(t.slice(0,n)),i=t.length,a=parseInt(t.slice(n+1,i)),s=void 0;return r<12?(s=o.Am,0==r&&(r=12)):(s=o.Pm,r>12&&(24==r?(r=11,a=45):r-=12)),new e(r=r<10?"0".concat(r):"".concat(r),a=a<10?"0".concat(a):"".concat(a),s)}},{key:"parseTimeString",value:function(t){var n=t.indexOf(":"),r=t.slice(0,n),o=t.length-2;return new e(r,t.slice(n+1,o),t.slice(o,t.length))}}],(r=[{key:"equals",value:function(e){var t=this.hour==e.hour,n=this.minute==e.minute,r=this.partOfDay==e.partOfDay;return t&&n&&r}},{key:"isAfter",value:function(e){var t=!1,n=parseInt(this.hour),r=parseInt(e.hour),i=parseInt(this.minute),a=parseInt(e.minute);return this.partOfDay===e.partOfDay?(this.partOfDay===o.Am&&(n%=12,r%=12),t=n>r||!(n<r)&&i>a):t=this.partOfDay>e.partOfDay,t}},{key:"isBetween",value:function(e,t){var n=this.isAfter(e),r=t.isAfter(this);return n&&r}},{key:"toString",value:function(){return"".concat(this.hour,":").concat(this.minute).concat(this.partOfDay)}}])&&t(n.prototype,r),i&&t(n,i),e}();e.exports={Days:{Monday:"Monday",Tuesday:"Tuesday",Wednesday:"Wednesday",Thursday:"Thursday",Friday:"Friday",Saturday:"Saturday",Sunday:"Sunday"},MeetingFrequencies:{Daily:"Daily",Monthly:"Monthly",OneTime:"One-time",Weekly:"Weekly",Yearly:"Yearly"},PartOfDay:o,Times:i,Time:a}},4308:e=>{e.exports={Account:{ErrorChangingEmail:"An error occurred while attempting to change the email.",ErrorChangingPassword:"An error occurred while attempting to change the password.",ErrorCreateAccount:"An error occurred while attempting to create an account.",ErrorDeleteAccount:"An error occurred while attempting to delete an account.",ErrorInvalidPasswordInput:"The passwords provided were invalid.",ErrorSendingEmail:"There was an error sending your verification email.",ErrorSettingToken:"There was an error setting the verification token",ErrorUploadProfilePicture:"The file type selected is not supported.",EmailSent:"Verification email sent.",NotOver18:"You need to be 18 or older to create an account.",InvalidEmail:"The email address entered is not valid.",IncorrectPassword:"The password provided is incorrect.",InvalidAccountInput:"One or more fields have been left empty.",SuccessAccountCreated:"The account was created successfully.",SuccessAccountDeleted:"The account was deleted successfully",SuccessAccountSetup:"The account was setup successfully.",SuccessChangingEmail:"The email was changed successfully",SuccessChangingPassword:"The password was changed successfully",SuccessLogin:"The login was successful.",SuccessUpdateAuthenticationToken:"The authentication token has been successfully updated.",UnverifiedUserWasFound:"The unverified user was found.",UserAlreadyExists:"A user with that email address already exists.",UserNotFound:"The user was not found.",PasswordsMustMatch:"The passwords entered must match.",PasswordTooShort:"The password must be at least 6 characters.",InactiveAccount:"The account requested is not active."},Message:{ErrorAddConversation:"An error occurrred while attempting to add a conversation. ",ErrorConversationExists:"The conversation requested already exists.",ErrorGetConversation:"An error occurred while attempting to get the conversation.",ErrorGetReceiver:"An error occurred while attempting to get the receiver.",ErrorCreateConversation:"An error occurred while attempting to create the conversation.",GetConversations:{Error:"An error occurred while attempting to get all conversations for a user.",Success:"All conversations were found for a user."},SuccessGetConversation:"Conversation returned successfully.",SuccessCreateConversation:"Conversation created successfully."},StudyGroup:{AddOneTimeMeeting:{Error:"An error occured while attempting to add a one-time meeting.",InvalidInput:"One or more required fields is empty.",Success:"The one-time meeting was added successfully."},CreatePost:{Error:"An error occurred while attempting to create a post.",InvalidAttachment:"The file attached is of an unsupported format.",InvalidInput:"One or more required fields is empty.",Success:"The post was created successfully."},ErrorCreateStudyGroup:"An error occurred while attempting to create a study group.",ErrorDeleteStudyGroup:"An error occurred while attempting to delete a study group.",ErrorDeleteMeeting:"An error occurred while attempting to delete a meeting.",ErrorEditMeeting:"An error occurred while attempting to edit the meeting.",ErrorGetStudyGroup:"An error occurred while attempting to get a study group.",ErrorGroupIsPrivate:"The study group requested to join is private.",ErrorLeaveStudyGroup:"The study group you are trying to leave was not found.",ErrorJoinStudyGroup:"An error occurred while attempting to join a study group.",ErrorRemoveUser:"There was an error removing user from the study group.",ErrorRemoveStudyGroup:"There was an error removing study group from the user.",InvalidEditStudyGroup:"One or more required fields is empty.",StudyGroupIsNotActive:"The requested study group is not active.",MeetingNotFound:"The requested meeting was not found.",StudyGroupNotFound:"The requested study group was not found.",SuccessDeleteMeeting:"The meeting was deleted successfully.",SuccessStudyGroupCreated:"The study group was created successfully.",SuccessStudyGroupDeleted:"The study group was deleted successfully.",SuccessStudyGroupEdited:"The study group was edited successfully",SuccessStudyGroupJoined:"The study group was joined successfully.",SuccessStudyGroupLeft:"The study group was left successfully.",SuccessStudyGroupRetrieved:"The study group was retrieved successfully.",SuccessStudyGroupsRetrieved:"The study groups were retrieved sucessfully.",ErrorGettingSearchResults:"An error ocurred while attempting to get search results.",UserAlreadyJoined:"The study group cannot be joined again.",UserNotAssociatedWithSchoolOfStudyGroup:"The study group cannot be joined because you are not a part of this school.",UserNotInStudyGroup:"The requesting user is not a member of the study group.",UserNotOwner:"The requesting user is not the owner of the study group.",ErrorNullStudyGroupInput:"One or more required fields are empty.",SetRecurringMeeting:{Error:"An error occurred while attempting to set the recurring meeting.",InvalidInput:"One or more required fields is empty.",Success:"The recurring meeting was set successfully."}},Report:{EmailSent:"Report email was sent.",EmptyField:"Empty field received. Please include a comment about why you are reporting this item."}}},2239:e=>{e.exports={Account:{ChangeEmail:"/api/account/change-email",ChangePassword:"/api/account/change-password",CreateAccount:"/api/account/create",Delete:"/api/account/delete",GetUnverifiedUser:"/api/account/get-unverified-user",Login:"/api/account/login",SetupAccount:"/api/account/setup",UpdateAuthenticationToken:"/api/account/update-authentication-token",VerifyEmailChange:"/api/account/verify-email-change"},Message:{GetConversation:"/api/message/get-conversation",GetConversations:"/api/message/get-conversations",CreateConversation:"/api/message/create-conversation"},Report:{SendReport:"/api/report/send-report"},StaticResources:{Index:"/*"},Search:{GetSearchResults:"/api/search/get"},StudyGroup:{AddOneTimeMeeting:"/api/study-group/add-one-time-meeting",CreatePost:"/api/study-group/create-post",CreateStudyGroup:"/api/study-group/create",DeleteMeeting:"/api/study-group/delete-meeting",DeleteStudyGroup:"/api/study-group/delete",EditStudyGroup:"/api/study-group/edit-study-group",EditMeeting:"/api/study-group/edit-meeting",GetUserStudyGroups:"/api/study-group/get-all",GetStudyGroup:"/api/study-group/get",JoinStudyGroup:"/api/study-group/join",SetRecurringMeeting:"/api/study-group/set-recurring-meeting",LeaveStudyGroup:"/api/study-group/leave"}}},4158:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(4308),a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n;return t=e,n=[{key:"isDefined",value:function(e){return"undefined"!==r(e)&&null!=e}},{key:"isError",value:function(e){return e instanceof Error}},{key:"isUndefined",value:function(e){return"undefined"===r(e)}},{key:"validateChangeEmail",value:function(t,n,r){var o=!0,a=i.Account.InvalidAccountInput,s=t.body.newEmail;return 0===s.length&&(o=!1),e.validateEmail(s)||(o=!1,a=i.Account.InvalidEmail),o?r():(n.json({message:a}),n.end())}},{key:"validateCreateAccountInput",value:function(t,n,r){var o=!0,a=i.Account.InvalidAccountInput,s=t.body,l=s.email,u=s.password,c=s.password_confirmation;return 0!==l.length&&0!==u.length&&0!==c.length||(o=!1),e.validateEmail(l)||(o=!1,a=i.Account.InvalidEmail),u.length<6&&(o=!1,a=i.Account.PasswordTooShort),u!==c&&(o=!1,a=i.Account.PasswordsMustMatch),o?(t.confirmPassword=c,r()):(n.json({message:a}),n.end())}},{key:"validateCreatePost",value:function(e,t,n){var r=!0,o=i.StudyGroup.CreatePost.InvalidInput,a=e.body,s=a.title,l=a.category;return null!=s&&0!==s.length&&null!=l&&0!==l.length||(r=!1),r?(e.body.type=e.body.category,n()):(t.json({message:o}),t.end())}},{key:"validateCreateStudyGroupInput",value:function(e,t,n){var r=!0,o=e.body,a=o.description,s=(o.groupColor,o.isOnlineGroup,o.isTutorGroup,o.name);return o.subject,null!=s&&0!==s.length&&""!=s&&null!=a&&0!==a.length||(r=!1),r?n():(t.json({message:i.StudyGroup.ErrorNullStudyGroupInput}),t.end())}},{key:"validateEditMeeting",value:function(t,n,r){var o=!0,a=i.StudyGroup.InvalidAccountInput,s=t.body,l=s.date,u=s.time;return(e.isUndefined(l)||e.isUndefined(u))&&(o=!1),o?r():(n.json({message:a}),n.end())}},{key:"validateEditStudyGroup",value:function(e,t,n){var r=!0,o=i.StudyGroup.InvalidEditStudyGroup,a=e.body,s=(a.course,a.description),l=(a.groupColor,a.isOnlineGroup,a.isTutorGroup,a.name);return a.subject,null!=l&&0!==l.length&&""!=l&&null!=s&&0!==s.length||(r=!1),r?n():(t.json({message:o}),t.end())}},{key:"validateEmail",value:function(e){return!!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(e)}},{key:"validateOneTimeMeeting",value:function(t,n,r){var o=!0,a=i.StudyGroup.AddOneTimeMeeting.InvalidInput,s=t.body,l=s.date,u=s.time;return s.day,s.details,s.location,s.roomNumber,(e.isUndefined(l)||e.isUndefined(u)||0===l.length||0===u.length)&&(o=!1),o?r():(n.json({message:a}),n.end())}},{key:"validateSetRecurringMeeting",value:function(t,n,r){var o=!0,a=i.StudyGroup.SetRecurringMeeting.InvalidInput,s=t.body,l=(s.day,s.frequency),u=s.time,c=s.date;return(null==l||null==u||0===l.length||0===u.length||e.isUndefined(c))&&(o=!1),o?r():(n.json({message:a}),n.end())}},{key:"validateSetupAccount",value:function(e,t,n){var r=!0,o=i.Account.InvalidAccountInput,a=e.body,s=a.areaCode,l=a.name;return null!=s&&0!==s.length&&null!=l&&0!==l.length||(r=!1),r?n():(t.json({message:o}),t.end())}},{key:"validatePasswordInput",value:function(e,t,n){var r=e.body.currentPassword,o=e.body.newPassword;return""===r||""===o?(t.json({message:i.Account.ErrorInvalidPasswordInput}),t.end()):n()}}],null&&o(t.prototype,null),n&&o(t,n),e}();e.exports=a},3010:e=>{function t(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=t,t.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},t.prototype.reset=function(){this.attempts=0},t.prototype.setMin=function(e){this.ms=e},t.prototype.setMax=function(e){this.max=e},t.prototype.setJitter=function(e){this.jitter=e}},6010:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:()=>o})},6108:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap);"]),a.push([e.id,'*{font-family:"Merriweather", serif;overflow-x:hidden;margin:0;padding:0;box-sizing:border-box;scrollbar-width:none;-ms-overflow-style:none}* ::-webkit-scrollbar{width:0px;background:transparent}html{background-color:#f9f5f1;background-image:url("https://www.flipnational.org/wp-content/uploads/2018/03/CAE-Website-Full-Background-Texture1902x1200-9.jpg");background-position:center;background-repeat:no-repeat;background-size:cover;height:100%;position:fixed;width:100%;height:100%;top:0;left:0;overflow-y:hidden}html body{overflow:hidden;height:100%}html body #root{height:100%}html body #root .container{height:100%;display:flex;flex-direction:column;overflow:hidden}\n',"",{version:3,sources:["webpack://./Client/src/App.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAGA,EACI,iCAAkC,CAClC,iBAAkB,CAClB,QAAS,CACT,SAAU,CACV,qBAAsB,CAKtB,oBAAqB,CACrB,uBAAwB,CAX5B,sBAOQ,SAAU,CACV,sBAAuB,CAC1B,KAKD,wBCjB2B,CDmB3B,kIAAmI,CAGnI,0BAA2B,CAC3B,2BAA4B,CAC5B,qBAAsB,CAEtB,WAAY,CACZ,cAAe,CACf,UAAW,CACX,WAAY,CACZ,KAAM,CACN,MAAO,CACP,iBAAkB,CAhBtB,UAmBQ,eAAgB,CAChB,WAAY,CApBpB,gBAsBY,WAAY,CAtBxB,2BAwBgB,WAAY,CACZ,YAAa,CACb,qBAAsB,CACtB,eAAgB",sourcesContent:['@import "./globals.scss";\n@import url("https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap");\n\n* {\n    font-family: "Merriweather", serif;\n    overflow-x: hidden;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    ::-webkit-scrollbar {\n        width: 0px;\n        background: transparent;\n    }\n    scrollbar-width: none; /* Firefox */\n    -ms-overflow-style: none; /* IE 10+ */\n}\nhtml {\n    background-color: $main-background-color;\n    /* The image used */\n    background-image: url("https://www.flipnational.org/wp-content/uploads/2018/03/CAE-Website-Full-Background-Texture1902x1200-9.jpg");\n\n    /* Center and scale the image nicely */\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n\n    height: 100%;\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    overflow-y: hidden;\n\n    body {\n        overflow: hidden;\n        height: 100%;\n        #root {\n            height: 100%;\n            .container {\n                height: 100%;\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n            }\n        }\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},2668:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".account-page .infos{display:flex;flex-direction:column;padding-bottom:150px;padding-top:20px}.account-page .infos .user-info{padding:10px;background-color:rgba(255,255,255,0.434);backdrop-filter:blur(3px);-webkit-backdrop-filter:blur(3px);border-radius:4px;border-bottom:#d4aa8c 3px solid;box-shadow:rgba(6,6,6,0.132) 2px 2px 10px;margin:5px 20px 5px 20px;display:flex;align-items:center;justify-content:center}.account-page .infos .user-info h1{flex:1;font-size:15px;text-align:left}.account-page .infos .user-info p{font-size:17px}.account-page .edit-account-buttons{display:flex;position:fixed;bottom:0;left:0;width:100%;height:5em;background-color:white;box-shadow:rgba(0,0,0,0.151) -20px 0 20px}\n","",{version:3,sources:["webpack://./Client/src/Pages/Account/Account.scss"],names:[],mappings:"AACA,qBAEQ,YAAa,CACb,qBAAsB,CA2BtB,oBAAqB,CACrB,gBAAiB,CA/BzB,gCAMY,YAAa,CACb,wCAA4C,CAC5C,yBAA0B,CAC1B,iCAAkC,CAElC,iBAAkB,CAElB,+BAAsC,CACtC,yCAA6C,CAC7C,wBAAyB,CACzB,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAlBnC,mCAqBgB,MAAO,CACP,cAAe,CACf,eAAgB,CAvBhC,kCA2BgB,cAAe,CA3B/B,oCAkCQ,YAAa,CACb,cAAe,CACf,QAAS,CACT,MAAO,CACP,UAAW,CACX,UAAW,CACX,sBAAuB,CACvB,yCAA6C",sourcesContent:['@import "../../globals.scss";\r\n.account-page {\r\n    .infos {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        .user-info {\r\n            padding: 10px;\r\n            background-color: rgba(255, 255, 255, 0.434);\r\n            backdrop-filter: blur(3px);\r\n            -webkit-backdrop-filter: blur(3px);\r\n\r\n            border-radius: 4px;\r\n\r\n            border-bottom: $border-color 3px solid;\r\n            box-shadow: rgba(6, 6, 6, 0.132) 2px 2px 10px;\r\n            margin: 5px 20px 5px 20px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            h1 {\r\n                flex: 1;\r\n                font-size: 15px;\r\n                text-align: left;\r\n            }\r\n\r\n            p {\r\n                font-size: 17px;\r\n            }\r\n        }\r\n        padding-bottom: 150px;\r\n        padding-top: 20px;\r\n    }\r\n    .edit-account-buttons {\r\n        display: flex;\r\n        position: fixed;\r\n        bottom: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 5em;\r\n        background-color: white;\r\n        box-shadow: rgba(0, 0, 0, 0.151) -20px 0 20px;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const s=a},1338:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.HomePage{width:100%;height:100%}.HomePage .subtitle{position:absolute;font-size:80px;margin:100px;overflow-x:visible;font-weight:300;color:rgba(58,58,58,0.872);font-weight:900;font-size:90px}.HomePage::after{content:"";width:94%;height:80px;background-color:#ffda5a;position:absolute;z-index:-2;top:7em;right:0}@media (max-width: 950px){.HomePage{display:block;padding:0;margin:0}.HomePage::after{display:none}.HomePage .subtitle{display:none}}\n',"",{version:3,sources:["webpack://./Client/src/Pages/Home/Home.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,UACI,UAAW,CACX,WAAY,CAFhB,oBAKQ,iBAAkB,CAClB,cAAe,CACf,YAAa,CACb,kBAAmB,CACnB,eAAgB,CAChB,0BAA8B,CAC9B,eAAgB,CAChB,cAAe,CAZvB,iBAgBQ,UAAW,CACX,SAAU,CACV,WAAY,CACZ,wBCfiB,CDgBjB,iBAAkB,CAClB,UAAW,CACX,OAAQ,CACR,OAAQ,CACX,0BAxBL,UA4BY,aAAc,CACd,SAAU,CACV,QAAS,CA9BrB,iBAiCY,YAAa,CAjCzB,oBAoCY,YAAa,CAChB",sourcesContent:['@import "../../globals.scss";\n.HomePage {\n    width: 100%;\n    height: 100%;\n\n    .subtitle {\n        position: absolute;\n        font-size: 80px;\n        margin: 100px;\n        overflow-x: visible;\n        font-weight: 300;\n        color: rgba(58, 58, 58, 0.872);\n        font-weight: 900;\n        font-size: 90px;\n    }\n\n    &::after {\n        content: "";\n        width: 94%;\n        height: 80px;\n        background-color: $highlight-color;\n        position: absolute;\n        z-index: -2;\n        top: 7em;\n        right: 0;\n    }\n\n    @media (max-width: $mobile-width) {\n        & {\n            display: block;\n            padding: 0;\n            margin: 0;\n        }\n        &::after {\n            display: none;\n        }\n        .subtitle {\n            display: none;\n        }\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},8505:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".message-page{display:flex;flex-direction:column;height:100%;position:relative}.message-page .message-area{flex:1;display:flex;align-items:center;justify-content:center}.message-page .guest-message{display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;width:100%}.message-page .guest-message h1{margin:20px;padding:10px;background-color:#ffda5a}.message-page .guest-message p{padding:10px;color:#575757;font-size:20px}.message-page .open-chats-view-button-container{position:absolute;display:none;top:5px;right:0;z-index:0}@media (max-width: 950px){.message-page .open-chats-view-button-container{display:block}}\n","",{version:3,sources:["webpack://./Client/src/Pages/Message/Message.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,cACI,YAAa,CACb,qBAAsB,CACtB,WAAY,CAEZ,iBAAkB,CALtB,4BAQQ,MAAO,CACP,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAX/B,6BAeQ,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CAEvB,WAAY,CACZ,UAAW,CArBnB,gCAwBY,WAAY,CACZ,YAAa,CACb,wBCtBa,CDJzB,+BA6BY,YAAa,CACb,aAAsB,CACtB,cAAe,CA/B3B,gDAoCQ,iBAAkB,CAClB,YAAa,CACb,OAAQ,CACR,OAAQ,CACR,SAAU,CAIb,0BA5CL,gDA0CY,aAAc,CAErB",sourcesContent:['@import "../../globals.scss";\n.message-page {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n\n    position: relative;\n\n    .message-area {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .guest-message {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n\n        height: 100%;\n        width: 100%;\n\n        h1 {\n            margin: 20px;\n            padding: 10px;\n            background-color: $highlight-color;\n        }\n        p {\n            padding: 10px;\n            color: rgb(87, 87, 87);\n            font-size: 20px;\n        }\n    }\n\n    .open-chats-view-button-container {\n        position: absolute;\n        display: none;\n        top: 5px;\n        right: 0;\n        z-index: 0;\n        @include mobile {\n            display: block;\n        }\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},4739:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".page{animation:page-load-up 0.3s ease-out;padding-top:0px;position:fixed;left:0;width:100%;height:100%;top:0em;flex:1}.page.showingPageTitle{padding-top:10em}.page .page-title{padding:40px;display:flex;align-items:center;overflow:hidden;height:6em;position:fixed;top:0;left:0;width:100%;margin-top:4em;background-color:rgba(103,78,48,0.084);backdrop-filter:blur(10px);-webkit-backdrop-filter:blur(10px);color:rgba(0,0,0,0.858);text-shadow:rgba(0,0,0,0.123) 0 3px 1px;z-index:0;box-shadow:inset 0px 0px 10px rgba(0,0,0,0.123)}@media (max-width: 950px){.page .page-title{padding:40px}}.page .page-title h1{background-color:#ffda5a;padding:0 20px 0 20px;text-align:left}@keyframes page-load-up{0%{opacity:0;margin-top:20px}100%{opacity:1;margin-top:00px}}\n","",{version:3,sources:["webpack://./Client/src/Pages/Page.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,MACI,oCAAqC,CACrC,eAAgB,CAChB,cAAe,CACf,MAAO,CACP,UAAW,CACX,WAAY,CACZ,OAAQ,CAIR,MAAO,CAXX,uBASQ,gBAAiB,CATzB,kBAaQ,YAAa,CAIb,YAAa,CACb,kBAAmB,CACnB,eAAgB,CAChB,UAAW,CAEX,cAAe,CACf,KAAM,CACN,MAAO,CACP,UAAW,CACX,cAAe,CAEf,sCAA0C,CAC1C,0BAA2B,CAC3B,kCAAmC,CAEnC,uBAA2B,CAC3B,uCAA2C,CAC3C,SAAU,CACV,+CAAmD,CAStD,0BA5CL,kBAeY,YAAa,CA6BpB,CA5CL,qBAsCY,wBClCa,CDmCb,qBAAsB,CAEtB,eAAgB,CAEnB,wBAIL,GACI,SAAU,CACV,eAAgB,CAEpB,KACI,SAAU,CACV,eAAgB,CAAA",sourcesContent:['@import "../globals.scss";\r\n.page {\r\n    animation: page-load-up 0.3s ease-out;\r\n    padding-top: 0px;\r\n    position: fixed;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0em;\r\n    &.showingPageTitle {\r\n        padding-top: 10em;\r\n    }\r\n    flex: 1;\r\n    .page-title {\r\n        padding: 40px;\r\n        @include mobile {\r\n            padding: 40px;\r\n        }\r\n        display: flex;\r\n        align-items: center;\r\n        overflow: hidden;\r\n        height: 6em;\r\n\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        margin-top: 4em;\r\n\r\n        background-color: rgba(103, 78, 48, 0.084);\r\n        backdrop-filter: blur(10px);\r\n        -webkit-backdrop-filter: blur(10px);\r\n\r\n        color: rgba(0, 0, 0, 0.858);\r\n        text-shadow: rgba(0, 0, 0, 0.123) 0 3px 1px;\r\n        z-index: 0;\r\n        box-shadow: inset 0px 0px 10px rgba(0, 0, 0, 0.123);\r\n\r\n        h1 {\r\n            background-color: $highlight-color;\r\n            padding: 0 20px 0 20px;\r\n            // width: 150px;\r\n            text-align: left;\r\n            // padding-right: 20px;\r\n        }\r\n    }\r\n}\r\n@keyframes page-load-up {\r\n    0% {\r\n        opacity: 0;\r\n        margin-top: 20px;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        margin-top: 00px;\r\n    }\r\n}\r\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},4455:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".search-page{display:flex;flex-direction:column;height:100%;position:relative}.search-page .search-area{flex:1;display:flex;align-items:center;justify-content:center}.search-page .open-search-filter-button-container{position:fixed;display:none;bottom:0;right:0}@media (max-width: 950px){.search-page .open-search-filter-button-container{display:block}}\n","",{version:3,sources:["webpack://./Client/src/Pages/Search/Search.scss"],names:[],mappings:"AACA,aACI,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,iBAAkB,CAJtB,0BAOQ,MAAO,CACP,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAV/B,kDAaQ,cAAe,CACf,YAAa,CACb,QAAS,CACT,OAAQ,CAIX,0BApBL,kDAkBY,aAAc,CAErB",sourcesContent:['@import "../../globals.scss";\n.search-page {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    position: relative;\n\n    .search-area {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    .open-search-filter-button-container {\n        position: fixed;\n        display: none;\n        bottom: 0;\n        right: 0;\n        @include mobile {\n            display: block;\n        }\n    }\n}\n'],sourceRoot:""}]);const s=a},2977:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".study-group-page{height:100%;overflow:hidden;display:flex;flex-direction:column}.study-group-page .page-title-study-group{padding:40px;margin:80px 20px 0 20px;border:white 6px solid;display:flex;align-items:center;overflow:hidden;height:6em;background-color:rgba(103,78,48,0.084);backdrop-filter:blur(10px);-webkit-backdrop-filter:blur(10px);color:rgba(0,0,0,0.858);text-shadow:rgba(0,0,0,0.123) 0 3px 1px;z-index:39;box-shadow:0px 0px 10px rgba(0,0,0,0.123)}.study-group-page .page-title-study-group h1{padding:0 20px 0 20px;text-align:left;color:white}.study-group-page .main-view{flex:1;display:flex;flex-direction:row;overflow:hidden}\n","",{version:3,sources:["webpack://./Client/src/Pages/StudyGroup/StudyGroup.scss"],names:[],mappings:"AACA,kBACI,WAAY,CACZ,eAAgB,CAChB,YAAa,CACb,qBAAsB,CAJ1B,0CAQQ,YAAa,CACb,uBAAwB,CACxB,sBAAuB,CACvB,YAAa,CACb,kBAAmB,CACnB,eAAgB,CAChB,UAAW,CACX,sCAA0C,CAC1C,0BAA2B,CAC3B,kCAAmC,CAEnC,uBAA2B,CAC3B,uCAA2C,CAC3C,UAAW,CACX,yCAA6C,CAtBrD,6CAyBY,qBAAsB,CAEtB,eAAgB,CAChB,WAAY,CA5BxB,6BAkCQ,MAAO,CACP,YAAa,CACb,kBAAmB,CAEnB,eAAgB",sourcesContent:['@import "../../globals.scss";\r\n.study-group-page {\r\n    height: 100%;\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n    // overflow: hidden;\r\n\r\n    .page-title-study-group {\r\n        padding: 40px;\r\n        margin: 80px 20px 0 20px;\r\n        border: white 6px solid;\r\n        display: flex;\r\n        align-items: center;\r\n        overflow: hidden;\r\n        height: 6em;\r\n        background-color: rgba(103, 78, 48, 0.084);\r\n        backdrop-filter: blur(10px);\r\n        -webkit-backdrop-filter: blur(10px);\r\n\r\n        color: rgba(0, 0, 0, 0.858);\r\n        text-shadow: rgba(0, 0, 0, 0.123) 0 3px 1px;\r\n        z-index: 39;\r\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.123);\r\n\r\n        h1 {\r\n            padding: 0 20px 0 20px;\r\n            // width: 150px;\r\n            text-align: left;\r\n            color: white;\r\n            // padding-right: 20px;\r\n        }\r\n    }\r\n\r\n    .main-view {\r\n        flex: 1;\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        overflow: hidden;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const s=a},4221:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.study-page{position:relative;overflow-y:visible;display:flex;flex-direction:column;height:100%;overflow:hidden}.study-page .guest-message{display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;width:100%}.study-page .guest-message h1{margin:20px;padding:10px;background-color:#ffda5a}.study-page .guest-message p{padding:10px;color:#575757;font-size:20px}.study-page .add-button{position:fixed;top:10.5em;right:5em;z-index:8;overflow:hidden;height:40px;width:40px;border-radius:20px;color:white;border:none;background-color:#deb56b;box-shadow:0px 2px 20px rgba(109,109,109,0.582);cursor:pointer}.study-page .add-button::after{content:"+";font-size:44px;position:absolute;top:-8.5px;left:14%}.study-page .study-groups-container{display:flex;align-items:flex-start;justify-content:flex-start;flex-wrap:wrap;padding:10px;overflow-y:auto}@media (max-width: 950px){.study-page .study-groups-container{display:block}}\n',"",{version:3,sources:["webpack://./Client/src/Pages/Study/Study.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,YACI,iBAAkB,CAClB,kBAAmB,CACnB,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,eAAgB,CANpB,2BASQ,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CAEvB,WAAY,CACZ,UAAW,CAfnB,8BAkBY,WAAY,CACZ,YAAa,CACb,wBChBa,CDJzB,6BAuBY,YAAa,CACb,aAAsB,CACtB,cAAe,CAzB3B,wBA+BQ,cAAe,CACf,UAAW,CACX,SAAU,CACV,SAAU,CACV,eAAgB,CAGhB,WAAY,CACZ,UAAW,CACX,kBAAmB,CAGnB,WAAY,CAGZ,WAAY,CACZ,wBAAoC,CACpC,+CAAmD,CACnD,cAAe,CAjDvB,+BAqDY,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,QAAS,CAzDrB,oCA8DQ,YAAa,CACb,sBAAuB,CACvB,0BAA2B,CAC3B,cAAe,CAEf,YAAa,CACb,eAAgB,CAKnB,0BAzEL,oCAuEY,aAAc,CAErB",sourcesContent:['@import "../../globals.scss";\n.study-page {\n    position: relative;\n    overflow-y: visible;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    overflow: hidden;\n\n    .guest-message {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n\n        height: 100%;\n        width: 100%;\n\n        h1 {\n            margin: 20px;\n            padding: 10px;\n            background-color: $highlight-color;\n        }\n        p {\n            padding: 10px;\n            color: rgb(87, 87, 87);\n            font-size: 20px;\n        }\n    }\n\n    .add-button {\n        //Position\n        position: fixed;\n        top: 10.5em;\n        right: 5em;\n        z-index: 8;\n        overflow: hidden;\n\n        //Size\n        height: 40px;\n        width: 40px;\n        border-radius: 20px;\n\n        //text design\n        color: white;\n\n        //box Design\n        border: none;\n        background-color: rgb(222, 181, 107);\n        box-shadow: 0px 2px 20px rgba(109, 109, 109, 0.582);\n        cursor: pointer;\n\n        //Plus sign\n        &::after {\n            content: "+";\n            font-size: 44px;\n            position: absolute;\n            top: -8.5px;\n            left: 14%;\n        }\n    }\n\n    .study-groups-container {\n        display: flex;\n        align-items: flex-start;\n        justify-content: flex-start;\n        flex-wrap: wrap;\n\n        padding: 10px;\n        overflow-y: auto;\n\n        @include mobile {\n            display: block;\n        }\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},2131:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".confirmation-container p{padding:20px;font-size:30px}\n","",{version:3,sources:["webpack://./Client/src/Views/ConfirmationForm/ConfirmationForm.scss"],names:[],mappings:"AAAA,0BAEQ,YAAa,CACb,cAAe",sourcesContent:[".confirmation-container {\n    p {\n        padding: 20px;\n        font-size: 30px;\n    }\n}\n"],sourceRoot:""}]);const s=a},4487:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".auth-view{padding:3em 1em 1em 1em;background-color:rgba(255,255,255,0.646);backdrop-filter:blur(20px);-webkit-backdrop-filter:blur(20px);box-shadow:0px 3px 4px rgba(128,128,128,0.377);width:30em;overflow:auto;text-align:center;margin:50px 90px 0 0;animation:auth-view-load 0.3s ease-out;transition:all 1s;position:absolute;right:0;display:flex;flex-direction:column;justify-content:space-around}.auth-view h1{text-align:center;overflow:hidden}.auth-view p{padding-top:10px;color:#4f4f4f;overflow:hidden}.auth-view .error-message{color:rgba(136,17,17,0.63);font-size:15px;font-style:italic}.auth-view .other-options{padding-top:20px;text-align:center;display:flex;flex-direction:column}.auth-view .other-options p{font-size:10px;color:darkgray;margin-bottom:-10px}@media (max-width: 950px){.auth-view{width:100%;height:100%;margin:0;animation:auth-view-load-mobile 0.3s ease-out}}@keyframes auth-view-load{0%{opacity:0;margin-top:40px}100%{opacity:1;margin-top:50px}}@keyframes auth-view-load-mobile{0%{opacity:0;margin-top:-20px}100%{opacity:1;margin-top:0px}}\n","",{version:3,sources:["webpack://./Client/src/Views/Home/AuthView.scss"],names:[],mappings:"AACA,WACI,uBAAwB,CACxB,wCAA4C,CAC5C,0BAA2B,CAC3B,kCAAmC,CAEnC,8CAAkD,CAClD,UAAW,CACX,aAAc,CAWd,iBAAkB,CAClB,oBAAqB,CACrB,sCAAuC,CACvC,iBAAkB,CAClB,iBAAkB,CAClB,OAAQ,CAER,YAAa,CACb,qBAAsB,CACtB,4BAA6B,CA5BjC,cAUQ,iBAAkB,CAClB,eAAgB,CAXxB,aAcQ,gBAAiB,CACjB,aAAsB,CACtB,eAAgB,CAhBxB,0BA+BQ,0BAA8B,CAC9B,cAAe,CACf,iBAAkB,CAjC1B,0BAqCQ,gBAAiB,CACjB,iBAAkB,CAClB,YAAa,CACb,qBAAsB,CAxC9B,4BA2CY,cAAe,CACf,cAAe,CACf,mBAAoB,CACvB,0BA9CT,WAkDQ,UAAW,CACX,WAAY,CACZ,QAAS,CACT,6CAA8C,CAErD,CAED,0BACI,GACI,SAAU,CACV,eAAgB,CAEpB,KACI,SAAU,CACV,eAAgB,CAAA,CAGxB,iCACI,GACI,SAAU,CACV,gBAAiB,CAErB,KACI,SAAU,CACV,cAAe,CAAA",sourcesContent:['@import "../../globals.scss";\r\n.auth-view {\r\n    padding: 3em 1em 1em 1em;\r\n    background-color: rgba(255, 255, 255, 0.646);\r\n    backdrop-filter: blur(20px);\r\n    -webkit-backdrop-filter: blur(20px);\r\n\r\n    box-shadow: 0px 3px 4px rgba(128, 128, 128, 0.377);\r\n    width: 30em;\r\n    overflow: auto;\r\n    h1 {\r\n        text-align: center;\r\n        overflow: hidden;\r\n    }\r\n    p {\r\n        padding-top: 10px;\r\n        color: rgb(79, 79, 79);\r\n        overflow: hidden;\r\n    }\r\n\r\n    text-align: center;\r\n    margin: 50px 90px 0 0;\r\n    animation: auth-view-load 0.3s ease-out;\r\n    transition: all 1s;\r\n    position: absolute;\r\n    right: 0;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n\r\n    .error-message {\r\n        color: rgba(136, 17, 17, 0.63);\r\n        font-size: 15px;\r\n        font-style: italic;\r\n    }\r\n\r\n    .other-options {\r\n        padding-top: 20px;\r\n        text-align: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        p {\r\n            font-size: 10px;\r\n            color: darkgray;\r\n            margin-bottom: -10px;\r\n        }\r\n    }\r\n\r\n    @include mobile {\r\n        width: 100%;\r\n        height: 100%;\r\n        margin: 0;\r\n        animation: auth-view-load-mobile 0.3s ease-out;\r\n    }\r\n}\r\n\r\n@keyframes auth-view-load {\r\n    0% {\r\n        opacity: 0;\r\n        margin-top: 40px;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        margin-top: 50px;\r\n    }\r\n}\r\n@keyframes auth-view-load-mobile {\r\n    0% {\r\n        opacity: 0;\r\n        margin-top: -20px;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        margin-top: 0px;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const s=a},8677:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=a},535:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".chats-view{flex:20%;min-width:300px;max-width:300px;height:100%;box-shadow:10px 0px 20px rgba(0,0,0,0.043);border-right:#d4aa8c 5px solid;background-color:#fff;z-index:4;overflow:auto}@media (max-width: 950px){.chats-view{padding:40px 0px 20px 20px}}.chats-view .chatItem{cursor:pointer;overflow:hidden;transition:all 0.2s;min-width:300px;height:70px;width:16.6em;display:flex;align-items:center;justify-content:space-between;padding:15px;margin:20px 10px 20px 0px}@media (max-width: 950px){.chats-view .chatItem{min-width:100%}}.chats-view .chatItem p{font-size:14px;text-align:right}.chats-view .chatItem img{text-align:left}.chats-view .chatItem.chatActive{border-right:#d4aa8c 10px solid;margin-right:0;background-color:rgba(249,232,232,0);font-weight:900;box-shadow:rgba(0,0,0,0) 0px 0px 20px;color:black}\n","",{version:3,sources:["webpack://./Client/src/Views/Message/ChatsView.scss"],names:[],mappings:"AACA,YACI,QAAS,CACT,eAAgB,CAChB,eAAgB,CAChB,WAAY,CACZ,0CAA8C,CAC9C,8BAAqC,CACrC,qBAAoC,CACpC,SAAU,CACV,aAAc,CA2CjB,0BApDD,YAWQ,0BAA2B,CAyClC,CApDD,sBAeQ,cAAe,CACf,eAAgB,CAEhB,mBAAoB,CACpB,eAAgB,CAKhB,WAAY,CACZ,YAAa,CAEb,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAS9B,YAAa,CACb,yBAA0B,CAY7B,0BAnDL,sBAsBY,cAAe,CA6BtB,CAnDL,wBAgCY,cAAe,CACf,gBAAiB,CAjC7B,0BAoCY,eAAgB,CApC5B,iCA2CY,+BAAsC,CAEtC,cAAe,CACf,oCAAwC,CACxC,eAAgB,CAChB,qCAAyC,CACzC,WAAY",sourcesContent:['@import "../../globals.scss";\r\n.chats-view {\r\n    flex: 20%;\r\n    min-width: 300px;\r\n    max-width: 300px;\r\n    height: 100%;\r\n    box-shadow: 10px 0px 20px rgba(0, 0, 0, 0.043);\r\n    border-right: $border-color 5px solid;\r\n    background-color: rgb(255, 255, 255);\r\n    z-index: 4;\r\n    overflow: auto;\r\n    @include mobile {\r\n        padding: 40px 0px 20px 20px;\r\n    }\r\n\r\n    .chatItem {\r\n        cursor: pointer;\r\n        overflow: hidden;\r\n\r\n        transition: all 0.2s;\r\n        min-width: 300px;\r\n\r\n        @include mobile {\r\n            min-width: 100%;\r\n        }\r\n        height: 70px;\r\n        width: 16.6em;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n\r\n        p {\r\n            font-size: 14px;\r\n            text-align: right;\r\n        }\r\n        img {\r\n            text-align: left;\r\n        }\r\n        padding: 15px;\r\n        margin: 20px 10px 20px 0px;\r\n        // background-color: rgba(255, 255, 255, 0.879);\r\n        // box-shadow: 0 0 20px rgba(0, 0, 0, 0.096);\r\n        &.chatActive {\r\n            border-right: $border-color 10px solid;\r\n            // width: 16em;\r\n            margin-right: 0;\r\n            background-color: rgba(249, 232, 232, 0);\r\n            font-weight: 900;\r\n            box-shadow: rgba(0, 0, 0, 0) 0px 0px 20px;\r\n            color: black;\r\n        }\r\n    }\r\n}\r\n'],sourceRoot:""}]);const s=a},4159:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".conversation-view{flex:80%;display:flex;flex-direction:column;background-color:rgba(198,198,198,0.199);height:100%;width:100%;backdrop-filter:blur(3px);-webkit-backdrop-filter:blur(3px);z-index:0;overflow:visible;position:relative}.conversation-view .currentConversationInfo{position:absolute;z-index:30;top:0;width:100%;display:flex;align-items:center;padding:20px;border-bottom:#f0e1d6 3px solid;backdrop-filter:blur(3px);-webkit-backdrop-filter:blur(3px);background-color:rgba(255,255,255,0.781)}.conversation-view .currentConversationInfo h1{margin-left:20px;font-size:15px}.conversation-view .messages-view{overflow-y:visible;flex:80%;padding-top:7em;-ms-overflow-style:none;scrollbar-width:none}.conversation-view .messages-view::-webkit-scrollbar{display:none}.conversation-view .messages-view .message-container{position:relative;margin-left:20px;margin-bottom:20px}.conversation-view .messages-view .message-container .message-box{display:flex;animation:messageFloatIn 0.2s ease-in}.conversation-view .messages-view .message-container .message-box.receiving-msg img{width:30px;height:30px;border-width:3px;position:absolute;bottom:0}.conversation-view .messages-view .message-container .message-box.receiving-msg .message-content{max-width:600px;word-wrap:break-word;background-color:#fff;box-shadow:rgba(0,0,0,0.027) 0px 0px 20px;padding:20px;margin-left:40px}.conversation-view .messages-view .message-container .message-box.sending-msg{justify-content:flex-end;-webkit-justify-content:flex-end}.conversation-view .messages-view .message-container .message-box.sending-msg .message-content{background-color:#e2c5b1;padding:20px;max-width:600px;word-wrap:break-word;margin-right:40px;color:white}.conversation-view .messages-view .message-container .message-timestamp{font-size:10px;color:rgba(0,0,0,0.536)}.conversation-view .messages-view .message-container .message-timestamp.sending-msg{margin-top:10px;margin-right:40px;text-align:right}.conversation-view .messages-view .message-container .message-timestamp.receiving-msg{margin-top:10px;margin-left:40px;text-align:left}.conversation-view .send-message-form{flex:20%;width:100%;background-color:rgba(255,255,255,0.781);box-shadow:rgba(0,0,0,0.057) 0px 0 20px}.conversation-view .send-message-form .send-btn{flex:30%}@keyframes messageFloatIn{0%{margin-top:30px;opacity:0.1}100%{margin-top:0;opacity:1}}\n","",{version:3,sources:["webpack://./Client/src/Views/Message/ConversationView.scss"],names:[],mappings:"AACA,mBACI,QAAS,CACT,YAAa,CACb,qBAAsB,CACtB,wCAA4C,CAC5C,WAAY,CACZ,UAAW,CACX,yBAA0B,CAC1B,iCAAkC,CAElC,SAAU,CACV,gBAAiB,CACjB,iBAAkB,CAZtB,4CAeQ,iBAAkB,CAClB,UAAW,CACX,KAAM,CACN,UAAW,CAEX,YAAa,CACb,kBAAmB,CACnB,YAAa,CACb,+BAAoD,CACpD,yBAA0B,CAC1B,iCAAkC,CAElC,wCAA4C,CA3BpD,+CA6BY,gBAAiB,CACjB,cAAe,CA9B3B,kCAmCQ,kBAAmB,CACnB,QAAS,CACT,eAAgB,CAIhB,uBAAwB,CACxB,oBAAqB,CA1C7B,qDAuCY,YAAa,CAvCzB,qDA6CY,iBAAkB,CAClB,gBAAiB,CACjB,kBAAmB,CA/C/B,kEAiDgB,YAAa,CACb,qCAAsC,CAlDtD,oFAsDwB,UAAW,CACX,WAAY,CACZ,gBAAiB,CAEjB,iBAAkB,CAClB,QAAS,CA3DjC,iGA8DwB,eAAgB,CAChB,oBAAqB,CAErB,qBAAoC,CACpC,yCAA6C,CAC7C,YAAa,CACb,gBAAiB,CApEzC,8EAwEoB,wBAAyB,CACzB,gCAAiC,CAzErD,+FA4EwB,wBAA6C,CAE7C,YAAa,CACb,eAAgB,CAChB,oBAAqB,CAErB,iBAAkB,CAClB,WAAY,CAnFpC,wEAwFgB,cAAe,CAEf,uBAA2B,CA1F3C,oFA6FoB,eAAgB,CAChB,iBAAkB,CAClB,gBAAiB,CA/FrC,sFAkGoB,eAAgB,CAChB,gBAAiB,CACjB,eAAgB,CApGpC,sCA4GQ,QAAS,CACT,UAAW,CACX,wCAA4C,CAE5C,uCAA2C,CAhHnD,gDAmHY,QAAS,CACZ,0BAKL,GACI,eAAgB,CAChB,WAAY,CAEhB,KACI,YAAa,CACb,SAAU,CAAA",sourcesContent:['@import "../../globals.scss";\r\n.conversation-view {\r\n    flex: 80%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: rgba(198, 198, 198, 0.199);\r\n    height: 100%;\r\n    width: 100%;\r\n    backdrop-filter: blur(3px);\r\n    -webkit-backdrop-filter: blur(3px);\r\n\r\n    z-index: 0;\r\n    overflow: visible;\r\n    position: relative;\r\n\r\n    .currentConversationInfo {\r\n        position: absolute;\r\n        z-index: 30;\r\n        top: 0;\r\n        width: 100%;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 20px;\r\n        border-bottom: lighten($border-color, 20%) 3px solid;\r\n        backdrop-filter: blur(3px);\r\n        -webkit-backdrop-filter: blur(3px);\r\n\r\n        background-color: rgba(255, 255, 255, 0.781);\r\n        h1 {\r\n            margin-left: 20px;\r\n            font-size: 15px;\r\n        }\r\n    }\r\n\r\n    .messages-view {\r\n        overflow-y: visible;\r\n        flex: 80%;\r\n        padding-top: 7em;\r\n        &::-webkit-scrollbar {\r\n            display: none;\r\n        }\r\n        -ms-overflow-style: none;\r\n        scrollbar-width: none;\r\n\r\n        .message-container {\r\n            position: relative;\r\n            margin-left: 20px;\r\n            margin-bottom: 20px;\r\n            .message-box {\r\n                display: flex;\r\n                animation: messageFloatIn 0.2s ease-in;\r\n\r\n                &.receiving-msg {\r\n                    img {\r\n                        width: 30px;\r\n                        height: 30px;\r\n                        border-width: 3px;\r\n\r\n                        position: absolute;\r\n                        bottom: 0;\r\n                    }\r\n                    .message-content {\r\n                        max-width: 600px;\r\n                        word-wrap: break-word;\r\n\r\n                        background-color: rgb(255, 255, 255);\r\n                        box-shadow: rgba(0, 0, 0, 0.027) 0px 0px 20px;\r\n                        padding: 20px;\r\n                        margin-left: 40px;\r\n                    }\r\n                }\r\n                &.sending-msg {\r\n                    justify-content: flex-end;\r\n                    -webkit-justify-content: flex-end;\r\n\r\n                    .message-content {\r\n                        background-color: lighten($border-color, 10%);\r\n\r\n                        padding: 20px;\r\n                        max-width: 600px;\r\n                        word-wrap: break-word;\r\n\r\n                        margin-right: 40px;\r\n                        color: white;\r\n                    }\r\n                }\r\n            }\r\n            .message-timestamp {\r\n                font-size: 10px;\r\n\r\n                color: rgba(0, 0, 0, 0.536);\r\n\r\n                &.sending-msg {\r\n                    margin-top: 10px;\r\n                    margin-right: 40px;\r\n                    text-align: right;\r\n                }\r\n                &.receiving-msg {\r\n                    margin-top: 10px;\r\n                    margin-left: 40px;\r\n                    text-align: left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    .send-message-form {\r\n        // height: 100px;\r\n        flex: 20%;\r\n        width: 100%;\r\n        background-color: rgba(255, 255, 255, 0.781);\r\n\r\n        box-shadow: rgba(0, 0, 0, 0.057) 0px 0 20px;\r\n        // padding: 20px;\r\n        .send-btn {\r\n            flex: 30%;\r\n        }\r\n    }\r\n}\r\n\r\n@keyframes messageFloatIn {\r\n    0% {\r\n        margin-top: 30px;\r\n        opacity: 0.1;\r\n    }\r\n    100% {\r\n        margin-top: 0;\r\n        opacity: 1;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const s=a},8690:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".notification{opacity:0;position:fixed;bottom:-100px;right:20px;margin-left:20px;backdrop-filter:blur(10px);-webkit-backdrop-filter:blur(10px);padding:20px 20px 20px 0px;transition:all 0.4s ease-in-out;box-shadow:rgba(0,0,0,0.064) 5px 5px 5px;text-shadow:rgba(0,0,0,0.064) 5px 5px 5px;z-index:2020020;display:flex;align-items:center;justify-content:space-around}@media (max-width: 950px){.notification{border-top:white 2px solid;width:100%;box-shadow:0px 0px 10px rgba(0,0,0,0.194)}}.notification h1{font-size:24px;font-weight:900;text-align:left;flex:80%}@media (max-width: 950px){.notification h1{font-size:15px;flex:75%}}.notification .icon{font-size:40px;text-align:left;flex:20%}@media (max-width: 950px){.notification .icon{font-size:30px;flex:15%}}.notification.error{background-color:rgba(167,77,77,0.646);color:white}.notification.success{background-color:rgba(51,121,69,0.646);color:white}.notification.active{opacity:1;bottom:30px}@media (max-width: 950px){.notification.active{bottom:0px;right:0}}\n","",{version:3,sources:["webpack://./Client/src/Views/Notification/Notification.scss"],names:[],mappings:"AACA,cACI,SAAU,CACV,cAAe,CACf,aAAc,CACd,UAAW,CACX,gBAAiB,CAEjB,0BAA2B,CAC3B,kCAAmC,CAEnC,0BAA2B,CAS3B,+BAAgC,CAChC,wCAA4C,CAC5C,yCAA6C,CAE7C,eAAgB,CAEhB,YAAa,CACb,kBAAmB,CACnB,4BAA6B,CAyChC,0BApED,cAaQ,0BAA2B,CAC3B,UAAW,CAEX,yCAA6C,CAoDpD,CApED,iBA8BQ,cAAe,CACf,eAAgB,CAEhB,eAAgB,CAChB,QAAS,CAKZ,0BAvCL,iBAoCY,cAAe,CACf,QAAS,CAEhB,CAvCL,oBA0CQ,cAAe,CACf,eAAgB,CAChB,QAAS,CAKZ,0BAjDL,oBA8CY,cAAe,CACf,QAAS,CAEhB,CAjDL,oBAoDQ,sCAA0C,CAC1C,WAAY,CArDpB,sBAwDQ,sCAA0C,CAC1C,WAAY,CAzDpB,qBA4DQ,SAAU,CACV,WAAY,CAMf,0BAnEL,qBAgEY,UAAW,CACX,OAAQ,CAEf",sourcesContent:['@import "../../globals.scss";\n.notification {\n    opacity: 0;\n    position: fixed;\n    bottom: -100px;\n    right: 20px;\n    margin-left: 20px;\n\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n\n    padding: 20px 20px 20px 0px;\n\n    @include mobile {\n        border-top: white 2px solid;\n        width: 100%;\n\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.194);\n    }\n\n    transition: all 0.4s ease-in-out;\n    box-shadow: rgba(0, 0, 0, 0.064) 5px 5px 5px;\n    text-shadow: rgba(0, 0, 0, 0.064) 5px 5px 5px;\n\n    z-index: 2020020;\n\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n\n    h1 {\n        font-size: 24px;\n        font-weight: 900;\n\n        text-align: left;\n        flex: 80%;\n        @include mobile {\n            font-size: 15px;\n            flex: 75%;\n        }\n    }\n\n    .icon {\n        font-size: 40px;\n        text-align: left;\n        flex: 20%;\n        @include mobile {\n            font-size: 30px;\n            flex: 15%;\n        }\n    }\n\n    &.error {\n        background-color: rgba(167, 77, 77, 0.646);\n        color: white;\n    }\n    &.success {\n        background-color: rgba(51, 121, 69, 0.646);\n        color: white;\n    }\n    &.active {\n        opacity: 1;\n        bottom: 30px;\n\n        @include mobile {\n            bottom: 0px;\n            right: 0;\n        }\n    }\n}\n'],sourceRoot:""}]);const s=a},4336:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.popup-wrapper{position:relative}.popup{position:fixed;overflow-y:scroll;width:60vw;height:auto;top:10%;left:20%;transform:translate(-50%, 0);z-index:9999;background-color:white;box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5);border-radius:5px;transform:scale(0.9);opacity:0;transition:all 0.3s ease-in-out;pointer-events:none;overflow-y:auto}@media (max-width: 950px){.popup{border-radius:0px;top:0;left:0;width:100%;height:100%}}.popup-top{padding:20px 30px 0 30px;height:70px;overflow-y:hidden;border-bottom:#d4aa8c 5px solid;background-color:rgba(255,255,255,0);backdrop-filter:blur(3px);-webkit-backdrop-filter:blur(3px);padding-bottom:15px}.popup-top h1{color:black;flex:90%;font-size:25px;font-weight:800}#popup-close-button{border:none;position:absolute;top:14px;right:17px;z-index:9000;background-color:rgba(116,11,11,0);width:40px;height:40px;font-family:"Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;font-size:20px;font-weight:100;color:#000;cursor:pointer}.popup-body{padding:20px;max-height:70vh}@media (max-width: 950px){.popup-body{max-height:100%}}.active{transform:scale(1);pointer-events:all;opacity:1}.background{width:100vw;height:100vh;position:fixed;top:0;z-index:9990;background-color:#ffffff70;backdrop-filter:blur(5px);-webkit-backdrop-filter:blur(5px);pointer-events:none;transition:all 0.3s;opacity:0}.background.active{pointer-events:all;opacity:1}\n',"",{version:3,sources:["webpack://./Client/src/Views/Popup/Popup.scss"],names:[],mappings:"AAEA,eACI,iBAAkB,CACrB,OAGG,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,OAAQ,CACR,QAAS,CACT,4BAA6B,CAC7B,YAAa,CACb,sBAAuB,CAEvB,iGAA6G,CAC7G,iBAAkB,CAClB,oBAAqB,CACrB,SAAU,CACV,+BAAgC,CAChC,mBAAoB,CACpB,eAAgB,CAQnB,0BAzBD,OAmBQ,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,UAAW,CACX,WAAY,CAEnB,CAED,WACI,wBAAyB,CACzB,WAAY,CACZ,iBAAkB,CAElB,+BAAsC,CACtC,oCAAwC,CACxC,yBAA0B,CAC1B,iCAAkC,CAElC,mBAAoB,CAVxB,cAaQ,WAAY,CACZ,QAAS,CACT,cAAe,CACf,eAAgB,CACnB,oBAID,WAAY,CACZ,iBAAkB,CAClB,QAAS,CACT,UAAW,CACX,YAAa,CACb,kCAAsC,CACtC,UAAW,CACX,WAAY,CACZ,4EAA6E,CAC7E,cAAe,CACf,eAAgB,CAChB,UAAmB,CACnB,cAAe,CAClB,YAGG,YAAa,CACb,eAAgB,CAInB,0BAND,YAIQ,eAAgB,CAEvB,CAED,QACI,kBAAmB,CACnB,kBAAmB,CACnB,SAAU,CACb,YAGG,WAAY,CACZ,YAAa,CACb,cAAe,CACf,KAAM,CACN,YAAa,CACb,0BAA2B,CAC3B,yBAA0B,CAC1B,iCAAkC,CAElC,mBAAoB,CACpB,mBAAoB,CACpB,SAAU,CAZd,mBAeQ,kBAAmB,CACnB,SAAU",sourcesContent:['@import "../../globals.scss";\r\n\r\n.popup-wrapper {\r\n    position: relative;\r\n}\r\n\r\n.popup {\r\n    position: fixed;\r\n    overflow-y: scroll;\r\n    width: 60vw;\r\n    height: auto;\r\n    top: 10%;\r\n    left: 20%;\r\n    transform: translate(-50%, 0);\r\n    z-index: 9999;\r\n    background-color: white;\r\n\r\n    box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3), 0 1px 2px rgba(0, 0, 0, 0.5);\r\n    border-radius: 5px;\r\n    transform: scale(0.9);\r\n    opacity: 0;\r\n    transition: all 0.3s ease-in-out;\r\n    pointer-events: none;\r\n    overflow-y: auto;\r\n    @include mobile {\r\n        border-radius: 0px;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n}\r\n\r\n.popup-top {\r\n    padding: 20px 30px 0 30px;\r\n    height: 70px;\r\n    overflow-y: hidden;\r\n\r\n    border-bottom: $border-color 5px solid;\r\n    background-color: rgba(255, 255, 255, 0);\r\n    backdrop-filter: blur(3px);\r\n    -webkit-backdrop-filter: blur(3px);\r\n\r\n    padding-bottom: 15px;\r\n\r\n    h1 {\r\n        color: black;\r\n        flex: 90%;\r\n        font-size: 25px;\r\n        font-weight: 800;\r\n    }\r\n}\r\n\r\n#popup-close-button {\r\n    border: none;\r\n    position: absolute;\r\n    top: 14px;\r\n    right: 17px;\r\n    z-index: 9000;\r\n    background-color: rgba(116, 11, 11, 0);\r\n    width: 40px;\r\n    height: 40px;\r\n    font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;\r\n    font-size: 20px;\r\n    font-weight: 100;\r\n    color: rgb(0, 0, 0);\r\n    cursor: pointer;\r\n}\r\n\r\n.popup-body {\r\n    padding: 20px;\r\n    max-height: 70vh;\r\n    @include mobile {\r\n        max-height: 100%;\r\n    }\r\n}\r\n\r\n.active {\r\n    transform: scale(1);\r\n    pointer-events: all;\r\n    opacity: 1;\r\n}\r\n\r\n.background {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    z-index: 9990;\r\n    background-color: #ffffff70;\r\n    backdrop-filter: blur(5px);\r\n    -webkit-backdrop-filter: blur(5px);\r\n\r\n    pointer-events: none;\r\n    transition: all 0.3s;\r\n    opacity: 0;\r\n\r\n    &.active {\r\n        pointer-events: all;\r\n        opacity: 1;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const s=a},6555:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".report-view{padding:20px}.report-view h1{font-size:20px}\n","",{version:3,sources:["webpack://./Client/src/Views/Report/ReportView.scss"],names:[],mappings:"AAAA,aACI,YAAa,CADjB,gBAGQ,cAAe",sourcesContent:[".report-view {\n    padding: 20px;\n    h1 {\n        font-size: 20px;\n    }\n}\n"],sourceRoot:""}]);const s=a},610:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".search-results{flex:70%;background-color:rgba(255,255,255,0.199);height:100%;backdrop-filter:blur(3px);-webkit-backdrop-filter:blur(3px);padding:10px 20px 80px 10px;z-index:0;overflow-y:scroll}\n","",{version:3,sources:["webpack://./Client/src/Views/Search/SearchResults.scss"],names:[],mappings:"AAAA,gBACI,QAAS,CACT,wCAA4C,CAC5C,WAAY,CACZ,yBAA0B,CAC1B,iCAAkC,CAElC,2BAA4B,CAC5B,SAAU,CACV,iBAAkB",sourcesContent:[".search-results {\r\n    flex: 70%;\r\n    background-color: rgba(255, 255, 255, 0.199);\r\n    height: 100%;\r\n    backdrop-filter: blur(3px);\r\n    -webkit-backdrop-filter: blur(3px);\r\n\r\n    padding: 10px 20px 80px 10px;\r\n    z-index: 0;\r\n    overflow-y: scroll;\r\n}\r\n"],sourceRoot:""}]);const s=a},6891:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".search-view{flex:30%;height:100%;box-shadow:10px 0px 20px rgba(0,0,0,0.071);border-right:#d4aa8c 5px solid;background-color:#fff;z-index:4;overflow:auto;padding:20px 20px 20px 20px;min-width:400px}@media (max-width: 950px){.search-view{min-width:100%}}\n","",{version:3,sources:["webpack://./Client/src/Views/Search/SearchView.scss"],names:[],mappings:"AAEA,aACI,QAAS,CACT,WAAY,CACZ,0CAA8C,CAC9C,8BAAqC,CACrC,qBAAoC,CACpC,SAAU,CACV,aAAc,CACd,2BAA4B,CAC5B,eAAgB,CAInB,0BAbD,aAWQ,cAAe,CAEtB",sourcesContent:['@import "../../globals.scss";\n\n.search-view {\n    flex: 30%;\n    height: 100%;\n    box-shadow: 10px 0px 20px rgba(0, 0, 0, 0.071);\n    border-right: $border-color 5px solid;\n    background-color: rgb(255, 255, 255);\n    z-index: 4;\n    overflow: auto;\n    padding: 20px 20px 20px 20px;\n    min-width: 400px;\n    @include mobile {\n        min-width: 100%;\n    }\n}\n'],sourceRoot:""}]);const s=a},9879:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.side-view{transition:all 0.5s cubic-bezier(0.075, 0.82, 0.165, 1);z-index:100}@media (max-width: 950px){.side-view{position:absolute !important;height:100%;top:0;width:100%;overflow:auto}.side-view.left{left:-105%}.side-view.right{right:-105%}.side-view.showing.right{right:0}.side-view.showing.left{left:0}}.side-view .close-side-view-btn{border:none;position:absolute;top:14px;right:17px;z-index:9000;background-color:rgba(116,11,11,0);width:40px;height:40px;font-family:"Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;font-size:20px;font-weight:100;color:#000;cursor:pointer;display:none}@media (max-width: 950px){.side-view .close-side-view-btn{display:block}}\n',"",{version:3,sources:["webpack://./Client/src/Views/SideView/SideView.scss"],names:[],mappings:"AACA,WACI,uDAAwD,CACxD,WAAY,CAgDf,0BAlDD,WAKQ,4BAA6B,CAC7B,WAAY,CAEZ,KAAM,CAQN,UAAW,CACX,aAAc,CAjBtB,gBAUY,UAAW,CAVvB,iBAaY,WAAY,CAbxB,yBAqBgB,OAAQ,CArBxB,wBAwBgB,MAAO,CACV,CAzBb,gCA8BQ,WAAY,CACZ,iBAAkB,CAClB,QAAS,CACT,UAAW,CACX,YAAa,CACb,kCAAsC,CACtC,UAAW,CACX,WAAY,CACZ,4EAA6E,CAC7E,cAAe,CACf,eAAgB,CAChB,UAAmB,CACnB,cAAe,CAEf,YAAa,CAKhB,0BAjDL,gCA+CY,aAAc,CAErB",sourcesContent:['@import "../../globals.scss";\n.side-view {\n    transition: all 0.5s cubic-bezier(0.075, 0.82, 0.165, 1);\n    z-index: 100;\n\n    @include mobile {\n        position: absolute !important;\n        height: 100%;\n\n        top: 0;\n        &.left {\n            left: -105%;\n        }\n        &.right {\n            right: -105%;\n        }\n\n        width: 100%;\n        overflow: auto;\n\n        &.showing {\n            &.right {\n                right: 0;\n            }\n            &.left {\n                left: 0;\n            }\n        }\n    }\n\n    .close-side-view-btn {\n        border: none;\n        position: absolute;\n        top: 14px;\n        right: 17px;\n        z-index: 9000;\n        background-color: rgba(116, 11, 11, 0);\n        width: 40px;\n        height: 40px;\n        font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;\n        font-size: 20px;\n        font-weight: 100;\n        color: rgb(0, 0, 0);\n        cursor: pointer;\n\n        display: none;\n\n        @include mobile {\n            display: block;\n        }\n    }\n}\n'],sourceRoot:""}]);const s=a},6057:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".details-container{overflow-y:scroll;flex:0.2;min-width:16em;background-color:#fff;box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5);border-radius:5px;display:flex;flex-direction:column;margin:20px;position:relative}@media (max-width: 950px){.details-container{display:block;margin:0;height:92%;margin-top:4em}}.details-container .meetinginfo-container{padding:30px;width:100%;font-weight:bold;box-shadow:10px 0 10px rgba(0,0,0,0.173)}.details-container .meetinginfo-container h1{background-color:#ffda5a;font-size:20px;margin-bottom:10px}.details-container .meetinginfo-container .meetinginfo-description{font-weight:normal;font-size:15px}.details-container .description-container{padding:30px 20px 0 20px;font-weight:bold;width:100%}.details-container .description-container h1{font-size:15px;margin-bottom:10px}.details-container .description-container .details-description{font-weight:normal;word-wrap:break-word;width:100%;font-size:15px}.details-container .buttons{position:absolute;bottom:20px;display:flex;align-items:center;justify-content:center;width:100%}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/DetailsView/DetailsView.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,mBACI,iBAAkB,CAClB,QAAS,CACT,cAAe,CACf,qBAAoC,CAEpC,iGAA6G,CAC7G,iBAAkB,CAClB,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,iBAAkB,CAwDrB,0BAnED,mBAcQ,aAAc,CACd,QAAS,CACT,UAAW,CACX,cAAe,CAkDtB,CAnED,0CAyBQ,YAAa,CACb,UAAW,CAEX,gBAAiB,CACjB,wCAA4C,CA7BpD,6CA+BY,wBC3Ba,CD4Bb,cAAe,CACf,kBAAmB,CAjC/B,mEAqCY,kBAAmB,CACnB,cAAe,CAtC3B,0CA2CQ,wBAAyB,CACzB,gBAAiB,CACjB,UAAW,CA7CnB,6CA+CY,cAAe,CACf,kBAAmB,CAhD/B,+DAoDY,kBAAmB,CACnB,oBAAqB,CACrB,UAAW,CACX,cAAe,CAvD3B,4BA2DQ,iBAAkB,CAClB,WAAY,CAEZ,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,UAAW",sourcesContent:['@import "../../../globals.scss";\n.details-container {\n    overflow-y: scroll;\n    flex: 0.2;\n    min-width: 16em;\n    background-color: rgb(255, 255, 255);\n\n    box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3), 0 1px 2px rgba(0, 0, 0, 0.5);\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    margin: 20px;\n    position: relative;\n\n    @include mobile {\n        display: block;\n        margin: 0;\n        height: 92%;\n        margin-top: 4em;\n    }\n\n    // display: flex;\n    // flex-direction: column;\n    // align-items: center;\n\n    .meetinginfo-container {\n        padding: 30px;\n        width: 100%;\n\n        font-weight: bold;\n        box-shadow: 10px 0 10px rgba(0, 0, 0, 0.173);\n        h1 {\n            background-color: $highlight-color;\n            font-size: 20px;\n            margin-bottom: 10px;\n        }\n\n        .meetinginfo-description {\n            font-weight: normal;\n            font-size: 15px;\n        }\n    }\n\n    .description-container {\n        padding: 30px 20px 0 20px;\n        font-weight: bold;\n        width: 100%;\n        h1 {\n            font-size: 15px;\n            margin-bottom: 10px;\n        }\n\n        .details-description {\n            font-weight: normal;\n            word-wrap: break-word;\n            width: 100%;\n            font-size: 15px;\n        }\n    }\n    .buttons {\n        position: absolute;\n        bottom: 20px;\n        // margin-left: 75px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},5092:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".feed-container{overflow:visible;overflow-y:scroll;flex:0.6;backdrop-filter:blur(3px);-webkit-backdrop-filter:blur(3px);overflow:auto;padding:20px;scrollbar-width:none}.feed-container .no-posts-message{display:flex;align-items:center;justify-content:space-evenly;flex-direction:column;height:100%;width:100%;padding-top:40px;text-align:center}.feed-container .no-posts-message h1{font-size:50px;margin-bottom:20px}.feed-container .no-posts-message p{font-size:20px}@media (max-width: 950px){.feed-container{flex:1;padding:25px}}.feed-container .posts-container{padding-bottom:30px;overflow:visible}.options-container{position:fixed;z-index:9;bottom:0;right:300px;width:100%;text-align:right}.options-container .open-view-buttons{display:none}@media (max-width: 950px){.options-container .open-view-buttons{display:block}}@media (max-width: 950px){.options-container{position:fixed;bottom:0px;right:0;width:100%;display:flex}}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/Feed/FeedView.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,gBAEI,gBAAiB,CACjB,iBAAkB,CAClB,QAAS,CACT,yBAA0B,CAC1B,iCAAkC,CAElC,aAAc,CACd,YAAa,CAEb,oBAAqB,CAXzB,kCAcQ,YAAa,CACb,kBAAmB,CACnB,4BAA6B,CAC7B,qBAAsB,CACtB,WAAY,CACZ,UAAW,CACX,gBAAiB,CACjB,iBAAkB,CArB1B,qCAuBY,cAAe,CACf,kBAAmB,CAxB/B,oCA4BY,cAAe,CAClB,0BA7BT,gBAiCQ,MAAO,CACP,YAAa,CAMpB,CAxCD,iCAqCQ,mBAAoB,CACpB,gBAAiB,CACpB,mBAID,cAAe,CACf,SAAU,CACV,QAAS,CACT,WAAY,CACZ,UAAW,CACX,gBAAiB,CANrB,sCASQ,YAAa,CAIhB,0BAbL,sCAWY,aAAc,CAErB,CC9CD,0BDiCJ,mBAgBQ,cAAe,CACf,UAAW,CACX,OAAQ,CACR,UAAW,CACX,YAAa,CAEpB",sourcesContent:['@import "../../../globals.scss";\r\n.feed-container {\r\n    // position: relative;\r\n    overflow: visible;\r\n    overflow-y: scroll;\r\n    flex: 0.6;\r\n    backdrop-filter: blur(3px);\r\n    -webkit-backdrop-filter: blur(3px);\r\n\r\n    overflow: auto;\r\n    padding: 20px;\r\n\r\n    scrollbar-width: none;\r\n\r\n    .no-posts-message {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-evenly;\r\n        flex-direction: column;\r\n        height: 100%;\r\n        width: 100%;\r\n        padding-top: 40px;\r\n        text-align: center;\r\n        h1 {\r\n            font-size: 50px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        p {\r\n            font-size: 20px;\r\n        }\r\n    }\r\n\r\n    @include mobile {\r\n        flex: 1;\r\n        padding: 25px;\r\n    }\r\n    .posts-container {\r\n        padding-bottom: 30px;\r\n        overflow: visible;\r\n    }\r\n}\r\n\r\n.options-container {\r\n    position: fixed;\r\n    z-index: 9;\r\n    bottom: 0;\r\n    right: 300px;\r\n    width: 100%;\r\n    text-align: right;\r\n\r\n    .open-view-buttons {\r\n        display: none;\r\n        @include mobile {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    @include mobile {\r\n        position: fixed;\r\n        bottom: 0px;\r\n        right: 0;\r\n        width: 100%;\r\n        display: flex;\r\n    }\r\n}\r\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},1888:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".members-container{background-color:#fff;backdrop-filter:blur(3px);-webkit-backdrop-filter:blur(3px);box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5);border-radius:5px;margin:20px;overflow-y:scroll;flex:0.2;min-width:16em}@media (max-width: 950px){.members-container{display:block;margin:0;height:92%;margin-top:4em}}.members-container .member{padding:10px;background-color:#fff;display:flex;align-items:center;transition:all 0.2s;border-left:0px solid}.members-container .member p{padding-left:20px}.members-container .member:first-child{background-color:#fafafa}.members-container .member:nth-child(2n+3){background-color:#f4f4f4}.members-container .member:hover{border-left:10px solid;color:black;cursor:pointer;overflow:hidden}.members-container .member.owner{margin-bottom:20px}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/Members/MembersView.scss"],names:[],mappings:"AACA,mBACI,qBAAoC,CACpC,yBAA0B,CAC1B,iCAAkC,CAElC,iGAA6G,CAC7G,iBAAkB,CAClB,WAAY,CACZ,iBAAkB,CAClB,QAAS,CACT,cAAe,CA0ClB,0BApDD,mBAaQ,aAAc,CACd,QAAS,CACT,UAAW,CACX,cAAe,CAoCtB,CApDD,2BAoBQ,YAAa,CACb,qBAAoC,CACpC,YAAa,CACb,kBAAmB,CACnB,mBAAoB,CACpB,qBAAsB,CAzB9B,6BA6BY,iBAAkB,CA7B9B,uCAiCY,wBAAoC,CAjChD,2CAoCY,wBAAoC,CApChD,iCAwCY,sBAAuB,CAEvB,WAAY,CACZ,cAAe,CACf,eAAgB,CA5C5B,iCAgDY,kBAAmB",sourcesContent:['@import "../../../globals.scss";\r\n.members-container {\r\n    background-color: rgb(255, 255, 255);\r\n    backdrop-filter: blur(3px);\r\n    -webkit-backdrop-filter: blur(3px);\r\n\r\n    box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3), 0 1px 2px rgba(0, 0, 0, 0.5);\r\n    border-radius: 5px;\r\n    margin: 20px;\r\n    overflow-y: scroll;\r\n    flex: 0.2;\r\n    min-width: 16em;\r\n\r\n    @include mobile {\r\n        display: block;\r\n        margin: 0;\r\n        height: 92%;\r\n        margin-top: 4em;\r\n    }\r\n\r\n    .member {\r\n        padding: 10px;\r\n        background-color: rgb(255, 255, 255);\r\n        display: flex;\r\n        align-items: center;\r\n        transition: all 0.2s;\r\n        border-left: 0px solid;\r\n        // word-wrap: break-word;\r\n\r\n        p {\r\n            padding-left: 20px;\r\n        }\r\n\r\n        &:first-child {\r\n            background-color: rgb(250, 250, 250);\r\n        }\r\n        &:nth-child(2n + 3) {\r\n            background-color: rgb(244, 244, 244);\r\n        }\r\n\r\n        &:hover {\r\n            border-left: 10px solid;\r\n            // background-color: rgb(244, 244, 244);\r\n            color: black;\r\n            cursor: pointer;\r\n            overflow: hidden;\r\n        }\r\n\r\n        &.owner {\r\n            margin-bottom: 20px;\r\n            // border-width: 20px;\r\n        }\r\n    }\r\n}\r\n'],sourceRoot:""}]);const s=a},8338:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".member-details{padding:60px}.member-details .member-primary-info{display:flex;align-items:center;justify-content:center}.member-details .member-primary-info img{max-width:100px;max-height:100px;min-width:100px;min-height:100px;border-radius:50px;margin-right:30px}.member-details .member-primary-info h1{font-weight:900}.member-details .member-secondary-info{padding-top:50px;display:flex;justify-content:space-evenly}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/Members/ViewMemberView.scss"],names:[],mappings:"AAAA,gBACI,YAAa,CADjB,qCAGQ,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAL/B,yCAQY,eAAgB,CAChB,gBAAiB,CACjB,eAAgB,CAChB,gBAAiB,CACjB,kBAAmB,CACnB,iBAAkB,CAb9B,wCAgBY,eAAgB,CAhB5B,uCAoBQ,gBAAiB,CAEjB,YAAa,CACb,4BAA6B",sourcesContent:[".member-details {\r\n    padding: 60px;\r\n    .member-primary-info {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        img {\r\n            max-width: 100px;\r\n            max-height: 100px;\r\n            min-width: 100px;\r\n            min-height: 100px;\r\n            border-radius: 50px;\r\n            margin-right: 30px;\r\n        }\r\n        h1 {\r\n            font-weight: 900;\r\n        }\r\n    }\r\n    .member-secondary-info {\r\n        padding-top: 50px;\r\n        // padding-bottom: 30px;\r\n        display: flex;\r\n        justify-content: space-evenly;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const s=a},9068:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".view-meeting-top{display:flex;justify-content:start;align-items:center}.view-meeting-top h1{font-size:18px;background-color:black;padding:5px;color:white}.view-meeting-top .top-icon{font-size:30px;width:30px;margin-right:10px}hr{margin-left:20px;margin-right:20px;height:0.5px;background-color:rgba(0,0,0,0.283);border:none}.meeting-container{margin:40px 40px 40px 40px}.meeting-container.next-meeting-container{background-color:rgba(0,0,0,0.036);padding:20px}.meeting-container h1{font-size:25px;font-weight:100}.meeting-container .meeting{display:flex;justify-content:space-evenly;align-items:start}.meeting-container .meeting span{font-weight:900}.meeting-container .meeting p{padding:2px 0px 2px 0}.meeting-container .meeting .meeting-time{padding:10px 0px 10px 0;flex:0.5}.meeting-container .meeting .meeting-details{padding:10px 0px 10px 0;flex:0.5}.one-time-meetings-container{margin:40px 40px 40px 40px}.one-time-meetings-container h1{font-size:25px;font-weight:100}.one-time-meetings-container .one-time-meeting-container{display:flex;align-items:center;border-bottom:solid rgba(0,0,0,0.144) 0.5px}.one-time-meetings-container .one-time-meeting{flex:1;padding:10px 0 10px 0;margin:10px 0 10px 0}.one-time-meetings-container .one-time-meeting span{font-weight:900;padding-right:20px}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/ViewMeetingView/ViewMeetingView.scss"],names:[],mappings:"AAAA,kBACI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CAHvB,qBAKQ,cAAe,CACf,sBAAuB,CACvB,WAAY,CACZ,WAAY,CARpB,4BAWQ,cAAe,CACf,UAAW,CACX,iBAAkB,CACrB,GAID,gBAAiB,CACjB,iBAAkB,CAClB,YAAa,CACb,kCAAsC,CACtC,WAAY,CACf,mBA6BG,0BAA2B,CA5B/B,0CAEQ,kCAAsC,CACtC,YAAa,CAHrB,sBAMQ,cAAe,CACf,eAAgB,CAPxB,4BAUQ,YAAa,CACb,4BAA6B,CAC7B,iBAAkB,CAZ1B,iCAcY,eAAgB,CAd5B,8BAiBY,qBAAsB,CAjBlC,0CAoBY,uBAAwB,CACxB,QAAS,CArBrB,6CAwBY,uBAAwB,CACxB,QAAS,CACZ,6BASL,0BAA2B,CAL/B,gCAEQ,cAAe,CACf,eAAgB,CAHxB,yDAOQ,YAAa,CACb,kBAAmB,CACnB,2CAA+C,CATvD,+CAYQ,MAAO,CACP,qBAAsB,CACtB,oBAAqB,CAd7B,oDAgBY,eAAgB,CAChB,kBAAmB",sourcesContent:[".view-meeting-top {\n    display: flex;\n    justify-content: start;\n    align-items: center;\n    h1 {\n        font-size: 18px;\n        background-color: black;\n        padding: 5px;\n        color: white;\n    }\n    .top-icon {\n        font-size: 30px;\n        width: 30px;\n        margin-right: 10px;\n    }\n}\n\nhr {\n    margin-left: 20px;\n    margin-right: 20px;\n    height: 0.5px;\n    background-color: rgba(0, 0, 0, 0.283);\n    border: none;\n}\n.meeting-container {\n    &.next-meeting-container {\n        background-color: rgba(0, 0, 0, 0.036);\n        padding: 20px;\n    }\n    h1 {\n        font-size: 25px;\n        font-weight: 100;\n    }\n    .meeting {\n        display: flex;\n        justify-content: space-evenly;\n        align-items: start;\n        span {\n            font-weight: 900;\n        }\n        p {\n            padding: 2px 0px 2px 0;\n        }\n        .meeting-time {\n            padding: 10px 0px 10px 0;\n            flex: 0.5;\n        }\n        .meeting-details {\n            padding: 10px 0px 10px 0;\n            flex: 0.5;\n        }\n    }\n    margin: 40px 40px 40px 40px;\n}\n.one-time-meetings-container {\n    h1 {\n        font-size: 25px;\n        font-weight: 100;\n    }\n    margin: 40px 40px 40px 40px;\n    .one-time-meeting-container {\n        display: flex;\n        align-items: center;\n        border-bottom: solid rgba(0, 0, 0, 0.144) 0.5px;\n    }\n    .one-time-meeting {\n        flex: 1;\n        padding: 10px 0 10px 0;\n        margin: 10px 0 10px 0;\n        span {\n            font-weight: 900;\n            padding-right: 20px;\n        }\n    }\n}\n"],sourceRoot:""}]);const s=a},116:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".view-post-top{display:flex;justify-content:start;align-items:center;position:absolute;top:0px;left:0px;width:100%;height:5em;padding-left:30px;padding-top:30px;background-color:rgba(255,255,255,0.543);backdrop-filter:blur(5px);-webkit-backdrop-filter:blur(5px);border-bottom:1px whitesmoke solid;padding-bottom:20px}.view-post-top h1{font-size:18px;background-color:black;padding:5px;color:white}.view-post-top .top-icon{font-size:30px;width:30px;margin-right:10px}.post-contents{margin:20px;margin-top:90px}.post-contents .post-title{word-wrap:break-word;font-size:35px;padding-bottom:20px}.post-contents .post-body{display:flex;background-color:rgba(232,231,231,0.221);padding:30px;margin-bottom:20px;border-bottom:#d4aa8c 5px solid}@media (max-width: 950px){.post-contents .post-body{flex-direction:column}}.post-contents .post-body .post-message{flex:70%;margin-bottom:20px}.post-contents .post-body .post-attachment{flex:30%;object-fit:contain}.post-contents .post-creator{cursor:pointer;align-items:center;justify-content:end;display:flex}.post-contents .post-creator p{font-size:10px;font-weight:100;padding-right:20px}.responses-container{border-top:rgba(0,0,0,0.214) 0.5px solid;padding-top:20px}.responses-container h1{margin-left:25px;font-size:13px;font-weight:400}.responses-container .response{margin:25px;background-color:rgba(0,0,0,0.014);padding:20px;display:flex;align-content:center;justify-content:space-between}.responses-container .response p{font-size:15px}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/ViewPostView/ViewPostView.scss"],names:[],mappings:"AACA,eACI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,iBAAkB,CAElB,OAAQ,CACR,QAAS,CACT,UAAW,CACX,UAAW,CAEX,iBAAkB,CAClB,gBAAiB,CACjB,wCAA4C,CAC5C,yBAA0B,CAC1B,iCAAkC,CAElC,kCAAmC,CAYnC,mBAAoB,CA7BxB,kBAmBQ,cAAe,CACf,sBAAuB,CACvB,WAAY,CACZ,WAAY,CAtBpB,yBAyBQ,cAAe,CACf,UAAW,CACX,iBAAkB,CACrB,eAKD,WAAY,CACZ,eAAgB,CAFpB,2BAIQ,oBAAqB,CACrB,cAAe,CACf,mBAAoB,CAN5B,0BASQ,YAAa,CACb,wCAA4C,CAC5C,YAAa,CACb,kBAAmB,CACnB,+BAAsC,CAazC,0BA1BL,0BAgBY,qBAAsB,CAU7B,CA1BL,wCAmBY,QAAS,CACT,kBAAmB,CApB/B,2CAuBY,QAAS,CACT,kBAAmB,CAxB/B,6BA6BQ,cAAe,CACf,kBAAmB,CACnB,mBAAoB,CAMpB,YAAa,CArCrB,+BAiCY,cAAe,CACf,eAAgB,CAChB,kBAAmB,CACtB,qBAML,wCAA4C,CAC5C,gBAAiB,CAHrB,wBAMQ,gBAAiB,CACjB,cAAe,CACf,eAAgB,CARxB,+BAWQ,WAAY,CACZ,kCAAsC,CACtC,YAAa,CACb,YAAa,CACb,oBAAqB,CACrB,6BAA8B,CAhBtC,iCAkBY,cAAe",sourcesContent:['@import "../../../globals.scss";\r\n.view-post-top {\r\n    display: flex;\r\n    justify-content: start;\r\n    align-items: center;\r\n    position: absolute;\r\n\r\n    top: 0px;\r\n    left: 0px;\r\n    width: 100%;\r\n    height: 5em;\r\n\r\n    padding-left: 30px;\r\n    padding-top: 30px;\r\n    background-color: rgba(255, 255, 255, 0.543);\r\n    backdrop-filter: blur(5px);\r\n    -webkit-backdrop-filter: blur(5px);\r\n\r\n    border-bottom: 1px whitesmoke solid;\r\n    h1 {\r\n        font-size: 18px;\r\n        background-color: black;\r\n        padding: 5px;\r\n        color: white;\r\n    }\r\n    .top-icon {\r\n        font-size: 30px;\r\n        width: 30px;\r\n        margin-right: 10px;\r\n    }\r\n    padding-bottom: 20px;\r\n}\r\n\r\n.post-contents {\r\n    margin: 20px;\r\n    margin-top: 90px;\r\n    .post-title {\r\n        word-wrap: break-word;\r\n        font-size: 35px;\r\n        padding-bottom: 20px;\r\n    }\r\n    .post-body {\r\n        display: flex;\r\n        background-color: rgba(232, 231, 231, 0.221);\r\n        padding: 30px;\r\n        margin-bottom: 20px;\r\n        border-bottom: $border-color 5px solid;\r\n\r\n        @include mobile {\r\n            flex-direction: column;\r\n        }\r\n        .post-message {\r\n            flex: 70%;\r\n            margin-bottom: 20px;\r\n        }\r\n        .post-attachment {\r\n            flex: 30%;\r\n            object-fit: contain;\r\n        }\r\n    }\r\n\r\n    .post-creator {\r\n        cursor: pointer;\r\n        align-items: center;\r\n        justify-content: end;\r\n        p {\r\n            font-size: 10px;\r\n            font-weight: 100;\r\n            padding-right: 20px;\r\n        }\r\n        display: flex;\r\n    }\r\n}\r\n.responses-container {\r\n    // margin: 20px;\r\n    border-top: rgba(0, 0, 0, 0.214) 0.5px solid;\r\n    padding-top: 20px;\r\n\r\n    h1 {\r\n        margin-left: 25px;\r\n        font-size: 13px;\r\n        font-weight: 400;\r\n    }\r\n    .response {\r\n        margin: 25px;\r\n        background-color: rgba(0, 0, 0, 0.014);\r\n        padding: 20px;\r\n        display: flex;\r\n        align-content: center;\r\n        justify-content: space-between;\r\n        p {\r\n            font-size: 15px;\r\n        }\r\n    }\r\n}\r\n'],sourceRoot:""}]);const s=a},5935:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".join-group-container{display:flex;flex-direction:column}.join-group-container .sub-info{display:flex;flex-wrap:wrap}.join-group-container .info{padding:20px}.join-group-container .info p{word-wrap:normal}.join-group-container .group-popup-title{width:100%;margin:-20px;height:5em;padding-left:30px;color:white;position:absolute;box-shadow:inset 0 10px 20px rgba(0,0,0,0.262);display:flex;align-items:center;justify-content:center}.join-group-container .group-popup-title h1{width:100%;text-align:left}.join-group-container .popup-info-fields{margin-top:5em}\n","",{version:3,sources:["webpack://./Client/src/Views/Study/joinStudyGroupView/JoinStudyGroupView.scss"],names:[],mappings:"AAAA,sBACI,YAAa,CACb,qBAAsB,CAF1B,gCAIQ,YAAa,CACb,cAAe,CALvB,4BAQQ,YAAa,CARrB,8BAUY,gBAAiB,CAV7B,yCAeQ,UAAW,CACX,YAAa,CACb,UAAW,CACX,iBAAkB,CAClB,WAAY,CACZ,iBAAkB,CAClB,8CAAkD,CAElD,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAzB/B,4CA4BY,UAAW,CACX,eAAgB,CA7B5B,yCAkCQ,cAAe",sourcesContent:[".join-group-container {\n    display: flex;\n    flex-direction: column;\n    .sub-info {\n        display: flex;\n        flex-wrap: wrap;\n    }\n    .info {\n        padding: 20px;\n        p {\n            word-wrap: normal;\n        }\n    }\n\n    .group-popup-title {\n        width: 100%;\n        margin: -20px;\n        height: 5em;\n        padding-left: 30px;\n        color: white;\n        position: absolute;\n        box-shadow: inset 0 10px 20px rgba(0, 0, 0, 0.262);\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        h1 {\n            width: 100%;\n            text-align: left;\n        }\n    }\n\n    .popup-info-fields {\n        margin-top: 5em;\n    }\n}\n"],sourceRoot:""}]);const s=a},1918:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".study-group-view{min-width:200px;min-height:200px;padding:30px 20px 80px 20px;overflow:none;box-shadow:0px 10px 10px #0000000a;margin:30px;position:relative;animation:float-in-group 0.3s ease-out;box-shadow:rgba(0,0,0,0.173) 5px 5px 20px;border-radius:5px;display:flex;align-items:center;justify-content:center}.study-group-view .group-title{color:#fff;font-size:30px;text-shadow:rgba(0,0,0,0.705) 3px 5px 5px 10px;text-align:center}.study-group-view .group-view-sub-details{position:absolute;top:5px;right:5px;display:flex}.study-group-view .group-view-sub-details p{background-color:rgba(255,255,255,0.349);backdrop-filter:blur(5px);-webkit-backdrop-filter:blur(5px);color:#fff;border-radius:7px;font-size:10px;padding:3px;margin-left:5px;text-shadow:rgba(0,0,0,0.705) 3px 5px 5px 10px}.study-group-view .group-view-details{display:flex;flex-wrap:wrap;position:absolute;bottom:0;left:0;width:100%;padding:20px;background-color:rgba(255,255,255,0.982);box-shadow:-10px 0px 20px rgba(0,0,0,0.139);border-top:#e3e3e3 solid 3px}.study-group-view .group-view-details p{font-size:10px;color:#545454;margin:0px 10px 0 10px}@keyframes float-in-group{0%{margin-top:50px;opacity:0}100%{margin-top:30px;opacity:1}}\n","",{version:3,sources:["webpack://./Client/src/Views/Study/studyGroupView/StudyGroupView.scss"],names:[],mappings:"AAAA,kBACI,eAAgB,CAChB,gBAAiB,CACjB,2BAA4B,CAC5B,aAAc,CACd,kCAAmC,CACnC,WAAY,CACZ,iBAAkB,CAClB,sCAAuC,CAEvC,yCAA6C,CAC7C,iBAAkB,CAElB,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAf3B,+BAkBQ,UAAyB,CACzB,cAAe,CACf,8CAAkD,CAClD,iBAAkB,CArB1B,0CAwBQ,iBAAkB,CAClB,OAAQ,CACR,SAAU,CACV,YAAa,CA3BrB,4CA6BY,wCAA4C,CAC5C,yBAA0B,CAC1B,iCAAkC,CAElC,UAAyB,CACzB,iBAAkB,CAClB,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,8CAAkD,CAtC9D,sCA0CQ,YAAa,CACb,cAAe,CACf,iBAAkB,CAClB,QAAS,CACT,MAAO,CACP,UAAW,CACX,YAAa,CACb,wCAA4C,CAC5C,2CAA+C,CAC/C,4BAAwC,CAnDhD,wCAsDY,cAAe,CACf,aAAsB,CACtB,sBAAuB,CAC1B,0BAKL,GACI,eAAgB,CAChB,SAAU,CAEd,KACI,eAAgB,CAChB,SAAU,CAAA",sourcesContent:[".study-group-view {\r\n    min-width: 200px;\r\n    min-height: 200px;\r\n    padding: 30px 20px 80px 20px;\r\n    overflow: none;\r\n    box-shadow: 0px 10px 10px #0000000a;\r\n    margin: 30px;\r\n    position: relative;\r\n    animation: float-in-group 0.3s ease-out;\r\n\r\n    box-shadow: rgba(0, 0, 0, 0.173) 5px 5px 20px;\r\n    border-radius: 5px;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    .group-title {\r\n        color: rgb(255, 255, 255);\r\n        font-size: 30px;\r\n        text-shadow: rgba(0, 0, 0, 0.705) 3px 5px 5px 10px;\r\n        text-align: center;\r\n    }\r\n    .group-view-sub-details {\r\n        position: absolute;\r\n        top: 5px;\r\n        right: 5px;\r\n        display: flex;\r\n        p {\r\n            background-color: rgba(255, 255, 255, 0.349);\r\n            backdrop-filter: blur(5px);\r\n            -webkit-backdrop-filter: blur(5px);\r\n\r\n            color: rgb(255, 255, 255);\r\n            border-radius: 7px;\r\n            font-size: 10px;\r\n            padding: 3px;\r\n            margin-left: 5px;\r\n            text-shadow: rgba(0, 0, 0, 0.705) 3px 5px 5px 10px;\r\n        }\r\n    }\r\n    .group-view-details {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        padding: 20px;\r\n        background-color: rgba(255, 255, 255, 0.982);\r\n        box-shadow: -10px 0px 20px rgba(0, 0, 0, 0.139);\r\n        border-top: rgb(227, 227, 227) solid 3px;\r\n\r\n        p {\r\n            font-size: 10px;\r\n            color: rgb(84, 84, 84);\r\n            margin: 0px 10px 0 10px;\r\n        }\r\n    }\r\n}\r\n\r\n@keyframes float-in-group {\r\n    0% {\r\n        margin-top: 50px;\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        margin-top: 30px;\r\n        opacity: 1;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const s=a},3680:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.inline{display:flex;flex-direction:row;background-color:whitesmoke;padding:10px}.inline #left{flex:50%}.inline #right{flex:50%}.photo{background-color:whitesmoke}.photo img{width:90px;text-align:left}input[type="file"]{border:none;padding:25px;appearance:none}input[type="checkbox"]{-webkit-appearance:none;appearance:none;background-color:white;margin:0;box-shadow:1px 1px 1px #ebebeb;font:inherit;color:currentColor;width:1.2em;height:1.2em;border-radius:0.15em;transform:translateY(-0.075em);display:grid;place-content:center}input[type="checkbox"]::before{content:"";width:0.65em;height:0.65em;clip-path:polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);transform:scale(0);transform-origin:bottom left;transition:120ms transform ease-in-out;box-shadow:inset 1em 1em #028a22;background-color:CanvasText}input[type="checkbox"]:checked::before{transform:scale(1)}.imgPreview{width:100%;padding:20px}\n',"",{version:3,sources:["webpack://./Client/src/components/AccountSetupForm/AccountSetupForm.scss"],names:[],mappings:"AAAA,QACI,YAAa,CACb,kBAAmB,CACnB,2BAA4B,CAC5B,YAAa,CAJjB,cAMQ,QAAS,CANjB,eASQ,QAAS,CACZ,OAID,2BAA4B,CADhC,WAGQ,UAAW,CACX,eAAgB,CACnB,mBAID,WAAY,CACZ,YAAa,CACb,eAAgB,CACnB,uBAIG,uBAAwB,CAExB,eAAgB,CAEhB,sBAAuB,CAEvB,QAAS,CACT,8BAA0C,CAE1C,YAAa,CACb,kBAAmB,CACnB,WAAY,CACZ,YAAa,CACb,oBAAqB,CACrB,8BAA+B,CAE/B,YAAa,CACb,oBAAqB,CACxB,+BAGG,UAAW,CACX,YAAa,CACb,aAAc,CACd,sEAAuE,CACvE,kBAAmB,CACnB,4BAA6B,CAC7B,sCAAuC,CACvC,gCAAyC,CAEzC,2BAA4B,CAC/B,uCAGG,kBAAmB,CACtB,YAGG,UAAW,CACX,YAAa",sourcesContent:['.inline {\n    display: flex;\n    flex-direction: row;\n    background-color: whitesmoke;\n    padding: 10px;\n    #left {\n        flex: 50%;\n    }\n    #right {\n        flex: 50%;\n    }\n}\n\n.photo {\n    background-color: whitesmoke;\n    img {\n        width: 90px;\n        text-align: left;\n    }\n}\n\ninput[type="file"] {\n    border: none;\n    padding: 25px;\n    appearance: none;\n}\n\ninput[type="checkbox"] {\n    /* Add if not using autoprefixer */\n    -webkit-appearance: none;\n    /* Remove most all native input styles */\n    appearance: none;\n    /* For iOS < 15 */\n    background-color: white;\n    /* Not removed via appearance */\n    margin: 0;\n    box-shadow: 1px 1px 1px rgb(235, 235, 235);\n\n    font: inherit;\n    color: currentColor;\n    width: 1.2em;\n    height: 1.2em;\n    border-radius: 0.15em;\n    transform: translateY(-0.075em);\n\n    display: grid;\n    place-content: center;\n}\n\ninput[type="checkbox"]::before {\n    content: "";\n    width: 0.65em;\n    height: 0.65em;\n    clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);\n    transform: scale(0);\n    transform-origin: bottom left;\n    transition: 120ms transform ease-in-out;\n    box-shadow: inset 1em 1em rgb(2, 138, 34);\n    /* Windows High Contrast Mode */\n    background-color: CanvasText;\n}\n\ninput[type="checkbox"]:checked::before {\n    transform: scale(1);\n}\n\n.imgPreview {\n    width: 100%;\n    padding: 20px;\n}\n'],sourceRoot:""}]);const s=a},4497:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=a},7965:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".create-study-group-form{display:flex;flex-direction:column;justify-content:center}.side-by-side{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.side-by-side>*{width:200px;flex:1}\n","",{version:3,sources:["webpack://./Client/src/components/CreateStudyGroupForm/CreateStudyGroupForm.scss"],names:[],mappings:"AAAA,yBACI,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CAC1B,cAEG,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,kBAAmB,CAJvB,gBAOQ,WAAY,CACZ,MAAO",sourcesContent:[".create-study-group-form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n.side-by-side {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n    > * {\n        width: 200px;\n        flex: 1;\n    }\n}\n"],sourceRoot:""}]);const s=a},1985:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".post-container{position:relative;width:100%;padding-bottom:10px;margin-bottom:45px;overflow:visible}.post-container .post-top{display:flex;justify-content:start;align-items:center;position:absolute;top:30px;left:30px;width:100%;padding-bottom:20px}.post-container .post-top h1{font-size:18px;background-color:black;padding:5px;color:white}.post-container .post-top .top-icon{font-size:30px;width:30px;margin-right:10px}.post-container .post-creator{cursor:pointer;position:absolute;bottom:0px;right:20px}.post-container .post-inner{overflow:visible}.post-container .post-inner .post-details{padding:20px;box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5);position:relative;overflow:visible;cursor:pointer;width:87%;display:flex;flex-direction:column;justify-content:center;padding-top:80px}@media (max-width: 950px){.post-container .post-inner .post-details{flex-direction:column}}.post-container .post-inner .post-details .post-inner-content{flex:90%;display:flex;flex-direction:column}.post-container .post-inner .post-details .post-inner-content .post-title{font-size:30px;padding:10px;top:30px;left:30px;word-wrap:break-word}.post-container .post-inner .post-details .post-inner-content .post-body{padding:5px 10px 10px 10px;word-wrap:break-word;color:#262626;padding-bottom:15px}.post-container .post-inner .post-details hr{height:2px;margin:10px;background-color:#d4aa8c}.post-container .post-inner .post-details .attachment{object-fit:contain;margin-top:10px;width:100%;max-height:400px}.post-container .post-metainfo{position:absolute;bottom:-36px;right:8%;display:flex;justify-content:end;text-align:right;color:#484848;padding:20px;padding-right:50px}.post-container .post-metainfo .post-date{text-align:right;font-size:11px}.post-container .post-metainfo .post-response-count{font-size:11px;width:15em;margin-right:10px;text-align:right}.post-container .post-metainfo .post-response-count span{font-weight:900}\n","",{version:3,sources:["webpack://./Client/src/components/Feed/Post.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,gBACI,iBAAkB,CAClB,UAAW,CACX,mBAAoB,CACpB,kBAAmB,CAEnB,gBAAiB,CANrB,0BAQQ,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,iBAAkB,CAClB,QAAS,CACT,SAAU,CACV,UAAW,CAaX,mBAAoB,CA3B5B,6BAiBY,cAAe,CACf,sBAAuB,CACvB,WAAY,CACZ,WAAY,CApBxB,oCAuBY,cAAe,CACf,UAAW,CACX,iBAAkB,CAzB9B,8BA+BQ,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,UAAW,CAlCnB,4BAqCQ,gBAAiB,CArCzB,0CAuCY,YAAa,CACb,iGACgC,CAGhC,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CAEf,SAAU,CAEV,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CACvB,gBAAiB,CAsCpB,0BA3FT,0CAwDgB,qBAAsB,CAmC7B,CA3FT,8DA4DgB,QAAS,CAgBT,YAAa,CACb,qBAAsB,CA7EtC,0EA8DoB,cAAe,CACf,YAAa,CACb,QAAS,CACT,SAAU,CACV,oBAAqB,CAlEzC,yEAqEoB,0BAA2B,CAE3B,oBAAqB,CACrB,aAAsB,CAEtB,mBAAoB,CA1ExC,6CAiFgB,UAAW,CACX,WAAY,CACZ,wBChFM,CDHtB,sDAsFgB,kBAAmB,CACnB,eAAgB,CAChB,UAAW,CACX,gBAAiB,CAzFjC,+BA8FQ,iBAAkB,CAClB,YAAa,CACb,QAAS,CACT,YAAa,CACb,mBAAoB,CAEpB,gBAAiB,CAEjB,aAAsB,CACtB,YAAa,CACb,kBAAmB,CAxG3B,0CA2GY,gBAAiB,CACjB,cAAe,CA5G3B,oDAgHY,cAAe,CACf,UAAW,CACX,iBAAkB,CAClB,gBAAiB,CAnH7B,yDAsHgB,eAAgB",sourcesContent:['@import "../../globals.scss";\r\n.post-container {\r\n    position: relative;\r\n    width: 100%;\r\n    padding-bottom: 10px;\r\n    margin-bottom: 45px;\r\n\r\n    overflow: visible;\r\n    .post-top {\r\n        display: flex;\r\n        justify-content: start;\r\n        align-items: center;\r\n        position: absolute;\r\n        top: 30px;\r\n        left: 30px;\r\n        width: 100%;\r\n\r\n        h1 {\r\n            font-size: 18px;\r\n            background-color: black;\r\n            padding: 5px;\r\n            color: white;\r\n        }\r\n        .top-icon {\r\n            font-size: 30px;\r\n            width: 30px;\r\n            margin-right: 10px;\r\n        }\r\n        padding-bottom: 20px;\r\n    }\r\n\r\n    .post-creator {\r\n        cursor: pointer;\r\n        position: absolute;\r\n        bottom: 0px;\r\n        right: 20px;\r\n    }\r\n    .post-inner {\r\n        overflow: visible;\r\n        .post-details {\r\n            padding: 20px;\r\n            box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3),\r\n                0 1px 2px rgba(0, 0, 0, 0.5);\r\n\r\n            // border-radius: 5px;\r\n            position: relative;\r\n            overflow: visible;\r\n            cursor: pointer;\r\n\r\n            width: 87%;\r\n\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            padding-top: 80px;\r\n\r\n            @include mobile {\r\n                flex-direction: column;\r\n            }\r\n\r\n            .post-inner-content {\r\n                flex: 90%;\r\n                .post-title {\r\n                    font-size: 30px;\r\n                    padding: 10px;\r\n                    top: 30px;\r\n                    left: 30px;\r\n                    word-wrap: break-word;\r\n                }\r\n                .post-body {\r\n                    padding: 5px 10px 10px 10px;\r\n                    // width: 90px;\r\n                    word-wrap: break-word;\r\n                    color: rgb(38, 38, 38);\r\n\r\n                    padding-bottom: 15px;\r\n                }\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n\r\n            hr {\r\n                height: 2px;\r\n                margin: 10px;\r\n                background-color: $border-color;\r\n            }\r\n            .attachment {\r\n                object-fit: contain;\r\n                margin-top: 10px;\r\n                width: 100%;\r\n                max-height: 400px;\r\n            }\r\n        }\r\n    }\r\n    .post-metainfo {\r\n        position: absolute;\r\n        bottom: -36px;\r\n        right: 8%;\r\n        display: flex;\r\n        justify-content: end;\r\n\r\n        text-align: right;\r\n\r\n        color: rgb(72, 72, 72);\r\n        padding: 20px;\r\n        padding-right: 50px;\r\n\r\n        .post-date {\r\n            text-align: right;\r\n            font-size: 11px;\r\n        }\r\n\r\n        .post-response-count {\r\n            font-size: 11px;\r\n            width: 15em;\r\n            margin-right: 10px;\r\n            text-align: right;\r\n\r\n            span {\r\n                font-weight: 900;\r\n            }\r\n        }\r\n    }\r\n}\r\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},8841:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".loading{width:100%;height:100%;display:flex;align-items:center;justify-content:center;overflow:hidden;padding:50px}\n","",{version:3,sources:["webpack://./Client/src/components/Loading/Loading.scss"],names:[],mappings:"AAAA,SACI,UAAW,CACX,WAAY,CACZ,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,eAAgB,CAChB,YAAa",sourcesContent:[".loading {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    padding: 50px;\n}\n"],sourceRoot:""}]);const s=a},2440:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=a},417:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".profile-picture{max-width:50px;max-height:50px;border-radius:27px;object-fit:cover;overflow:hidden;border:#d4aa8c 4px solid}.profile-picture-initial{align-items:center;background:#f9f5f1;border:4px solid #d4aa8c;border-radius:27px;display:flex;font-weight:bold;height:50px;justify-content:center;width:50px}\n","",{version:3,sources:["webpack://./Client/src/components/ProfilePicture/ProfilePicture.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,iBACI,cAAe,CACf,eAAgB,CAChB,kBAAmB,CACnB,gBAAiB,CACjB,eAAgB,CAChB,wBAA+B,CAClC,yBAEG,kBAAmB,CACnB,kBAA8B,CAC9B,wBCX0B,CDY1B,kBAAmB,CACnB,YAAa,CACb,gBAAiB,CACjB,WAAY,CACZ,sBAAuB,CACvB,UAAW",sourcesContent:['@import "../../globals.scss";\r\n.profile-picture {\r\n    max-width: 50px;\r\n    max-height: 50px;\r\n    border-radius: 27px;\r\n    object-fit: cover;\r\n    overflow: hidden;\r\n    border: $border-color 4px solid;\r\n}\r\n.profile-picture-initial {\r\n    align-items: center;\r\n    background: rgb(249, 245, 241);\r\n    border: 4px solid $primary-button-color;\r\n    border-radius: 27px;\r\n    display: flex;\r\n    font-weight: bold;\r\n    height: 50px;\r\n    justify-content: center;\r\n    width: 50px;\r\n}\r\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},8225:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".search-form{display:flex;flex-direction:column;justify-content:center}\n","",{version:3,sources:["webpack://./Client/src/components/SearchForm/SearchForm.scss"],names:[],mappings:"AAAA,aACI,YAAa,CACb,qBAAsB,CACtB,sBAAuB",sourcesContent:[".search-form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n"],sourceRoot:""}]);const s=a},9010:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".listing-container{background-color:#ffffff23;box-shadow:rgba(120,120,120,0.249) 3px 5px 5px 1px;display:flex;height:80px;margin:5px 10px 10px 10px;border-radius:10px;cursor:pointer;overflow:hidden;animation:float-in-listing 0.3s ease-out}.listing-container .title-photo-container{display:flex;align-items:center;border-left:#ffffff7c 5px solid;box-shadow:rgba(48,48,48,0.153) 10px 10px 20px;overflow:hidden;padding:20px;color:white;font-size:10px}@media (max-width: 950px){.listing-container .title-photo-container{font-size:8px;width:150px}}.listing-container .group-info-container{display:flex;align-items:center;justify-content:space-evenly;overflow:hidden}.listing-container .group-info-container .group-info-item{padding:5px 15px 5px 15px;border-left:rgba(125,125,125,0.345) 2px solid}.listing-container .group-info-container .group-info-item p{color:gray;font-size:8px}.listing-container .group-info-container .group-info-item h2{font-size:14px;white-space:nowrap}.listing-container .group-info-container .group-info-item#owner-info{border-left:none}.listing-container .group-info-container .group-info-item#owner-info h2{white-space:unset;word-wrap:break-word;max-width:100px}@media (max-width: 950px){.listing-container .group-info-container .group-info-item#courseCode-info{display:none}.listing-container .group-info-container .group-info-item#school-info{display:none}.listing-container .group-info-container .group-info-item#schedule-info{display:none}}@keyframes float-in-listing{0%{margin-top:50px;opacity:0}100%{margin-top:5px;opacity:1}}\n","",{version:3,sources:["webpack://./Client/src/components/SearchListing/SearchListing.scss"],names:[],mappings:"AAEA,mBACI,0BAA2B,CAC3B,kDAAsD,CACtD,YAAa,CACb,WAAY,CACZ,yBAA0B,CAC1B,kBAAmB,CACnB,cAAe,CACf,eAAgB,CAEhB,wCAAyC,CAV7C,0CAaQ,YAAa,CACb,kBAAmB,CACnB,+BAAgC,CAChC,8CAAkD,CAClD,eAAgB,CAChB,YAAa,CACb,WAAY,CACZ,cAAe,CAMlB,0BA1BL,0CAuBY,aAAc,CACd,WAAY,CAEnB,CA1BL,yCA4BQ,YAAa,CACb,kBAAmB,CACnB,4BAA6B,CAC7B,eAAgB,CA/BxB,0DA8DY,yBAA0B,CAC1B,6CAAiD,CA/D7D,4DAmCgB,UAAW,CACX,aAAc,CApC9B,6DAuCgB,cAAe,CACf,kBAAmB,CAxCnC,qEAiDgB,gBAAiB,CAjDjC,wEA4CoB,iBAAkB,CAElB,oBAAqB,CACrB,eAAgB,CACnB,0BAhDjB,0EAqDoB,YAAa,CArDjC,sEAwDoB,YAAa,CAxDjC,wEA2DoB,YAAa,CAChB,CAQjB,4BACI,GACI,eAAgB,CAChB,SAAU,CAEd,KACI,cAAe,CACf,SAAU,CAAA",sourcesContent:['@import "../../globals.scss";\n\n.listing-container {\n    background-color: #ffffff23;\n    box-shadow: rgba(120, 120, 120, 0.249) 3px 5px 5px 1px;\n    display: flex;\n    height: 80px;\n    margin: 5px 10px 10px 10px;\n    border-radius: 10px;\n    cursor: pointer;\n    overflow: hidden;\n\n    animation: float-in-listing 0.3s ease-out;\n\n    .title-photo-container {\n        display: flex;\n        align-items: center;\n        border-left: #ffffff7c 5px solid;\n        box-shadow: rgba(48, 48, 48, 0.153) 10px 10px 20px;\n        overflow: hidden;\n        padding: 20px;\n        color: white;\n        font-size: 10px;\n\n        @include mobile {\n            font-size: 8px;\n            width: 150px;\n        }\n    }\n    .group-info-container {\n        display: flex;\n        align-items: center;\n        justify-content: space-evenly;\n        overflow: hidden;\n\n        .group-info-item {\n            p {\n                color: gray;\n                font-size: 8px;\n            }\n            h2 {\n                font-size: 14px;\n                white-space: nowrap;\n            }\n            &#owner-info {\n                h2 {\n                    white-space: unset;\n\n                    word-wrap: break-word;\n                    max-width: 100px;\n                }\n                border-left: none;\n            }\n            @include mobile {\n                &#courseCode-info {\n                    display: none;\n                }\n                &#school-info {\n                    display: none;\n                }\n                &#schedule-info {\n                    display: none;\n                }\n            }\n            padding: 5px 15px 5px 15px;\n            border-left: rgba(125, 125, 125, 0.345) 2px solid;\n        }\n    }\n}\n\n@keyframes float-in-listing {\n    0% {\n        margin-top: 50px;\n        opacity: 0;\n    }\n    100% {\n        margin-top: 5px;\n        opacity: 1;\n    }\n}\n'],sourceRoot:""}]);const s=a},7955:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.menu{background-color:white;display:flex;flex-direction:column;padding:20px;width:400px;transition:all 0.3s cubic-bezier(0.075, 0.82, 0.165, 1);border-radius:4px;pointer-events:none;position:absolute;top:-10.5em;right:2em;z-index:10;box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5)}@media (max-width: 950px){.menu{height:85%;width:70%;display:flex;position:fixed;top:5em;right:-80%}}.menu.isShowing{top:5em;pointer-events:all;overflow:visible}@media (max-width: 950px){.menu.isShowing{border-bottom:none;border-left:#d4aa8c 5px solid;right:0;right:20px}}.menu .links{display:none;overflow:visible}@media (max-width: 950px){.menu .links{display:flex;flex:50%;flex-direction:column;align-items:center;justify-content:center}.menu .links .nav-item{text-decoration:none;width:100%;margin:10px;overflow:visible;display:flex;align-items:center;justify-content:center}.menu .links .nav-item p{padding:20px;height:100%;width:200px;color:black;font-size:20px;transition:all 0.4s;text-align:center}.menu .links .nav-item:active p{background-color:#ffe58d}.menu .links .nav-item.active p{background-color:#ffda5a;position:relative;overflow:visible;transition:all 0.4s}.menu .links .nav-item.active::after{content:"";position:absolute;left:-1.5em;width:20px;height:100%;top:0;background-color:#d4aa8c;animation:rise 0.2s ease-in-out}}.menu .user-actions{display:flex;flex-direction:column}.menu .user-actions .user-info{display:none}@media (max-width: 950px){.menu .user-actions .user-info{display:flex;padding:20px;align-items:center}.menu .user-actions .user-info .name-and-school{flex:80%}.menu .user-actions .user-info .name-and-school .school{font-size:14px;padding-right:10px}.menu .user-actions .user-info .name-and-school .name{font-size:14px;font-weight:800;padding-right:10px}.menu .user-actions .user-info .profile-pic-container{justify-content:end}.menu .user-actions .user-info .profile-pic-container img{width:60px;height:60px;border-radius:30px}}@media (max-width: 950px){.menu .user-actions{flex:50%;justify-content:end}}.background.menu-background{z-index:9}\n',"",{version:3,sources:["webpack://./Client/src/components/TopBar/Menu.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAEA,MACI,sBAAuB,CACvB,YAAa,CACb,qBAAsB,CACtB,YAAa,CACb,WAAY,CACZ,uDAAwD,CACxD,iBAAkB,CAClB,mBAAoB,CACpB,iBAAkB,CAClB,WAAY,CACZ,SAAU,CACV,UAAW,CACX,iGAA6G,CA2HhH,0BAxID,MAgBQ,UAAW,CACX,SAAU,CAEV,YAAa,CACb,cAAe,CACf,OAAQ,CACR,UAAW,CAkHlB,CAxID,gBA0BQ,OAAQ,CACR,kBAAmB,CACnB,gBAAiB,CASpB,0BArCL,gBA+BY,kBAAmB,CACnB,6BAAoC,CACpC,OAAQ,CAER,UAAW,CAElB,CArCL,aAwCQ,YAAa,CACb,gBAAiB,CAoDpB,0BA7FL,aA2CY,YAAa,CACb,QAAS,CACT,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CA/CnC,uBAkDgB,oBAAqB,CACrB,UAAW,CAEX,WAAY,CACZ,gBAAiB,CACjB,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAzDvC,yBA2DoB,YAAa,CACb,WAAY,CACZ,WAAY,CACZ,WAAY,CACZ,cAAe,CACf,mBAAoB,CACpB,iBAAkB,CAjEtC,gCAsEwB,wBAAiE,CAtEzF,gCA2EwB,wBCxEC,CDyED,iBAAkB,CAClB,gBAAiB,CACjB,mBAAoB,CA9E5C,qCAiFwB,UAAW,CACX,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,WAAY,CACZ,KAAM,CACN,wBCrFF,CDsFE,+BAAgC,CACnC,CAzFrB,oBAgGQ,YAAa,CACb,qBAAsB,CAjG9B,+BAoGY,YAAa,CA6BhB,0BAjIT,+BAsGgB,YAAa,CACb,YAAa,CACb,kBAAmB,CAxGnC,gDA2GoB,QAAS,CA3G7B,wDA6GwB,cAAe,CAEf,kBAAmB,CA/G3C,sDAkHwB,cAAe,CACf,eAAgB,CAChB,kBAAmB,CApH3C,sDAyHoB,mBAAoB,CAzHxC,0DA2HwB,UAAW,CACX,WAAY,CACZ,kBAAmB,CACtB,CCtHjB,0BDRJ,oBAoIY,QAAS,CACT,mBAAoB,CAE3B,CAGL,4BAEQ,SAAU",sourcesContent:['@import "../../globals.scss";\n\n.menu {\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    padding: 20px;\n    width: 400px;\n    transition: all 0.3s cubic-bezier(0.075, 0.82, 0.165, 1);\n    border-radius: 4px;\n    pointer-events: none;\n    position: absolute;\n    top: -10.5em;\n    right: 2em;\n    z-index: 10;\n    box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3), 0 1px 2px rgba(0, 0, 0, 0.5);\n\n    @include mobile {\n        height: 85%;\n        width: 70%;\n\n        display: flex;\n        position: fixed;\n        top: 5em;\n        right: -80%;\n    }\n\n    &.isShowing {\n        top: 5em;\n        pointer-events: all;\n        overflow: visible;\n\n        @include mobile {\n            border-bottom: none;\n            border-left: $border-color 5px solid;\n            right: 0;\n\n            right: 20px;\n        }\n    }\n\n    .links {\n        display: none;\n        overflow: visible;\n        @include mobile {\n            display: flex;\n            flex: 50%;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n\n            .nav-item {\n                text-decoration: none;\n                width: 100%;\n                // background-color: wheat;\n                margin: 10px;\n                overflow: visible;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                p {\n                    padding: 20px;\n                    height: 100%;\n                    width: 200px;\n                    color: black;\n                    font-size: 20px;\n                    transition: all 0.4s;\n                    text-align: center;\n                }\n\n                &:active {\n                    p {\n                        background-color: lighten($color: $highlight-color, $amount: 10%);\n                    }\n                }\n                &.active {\n                    p {\n                        background-color: $highlight-color;\n                        position: relative;\n                        overflow: visible;\n                        transition: all 0.4s;\n                    }\n                    &::after {\n                        content: "";\n                        position: absolute;\n                        left: -1.5em;\n                        width: 20px;\n                        height: 100%;\n                        top: 0;\n                        background-color: $border-color;\n                        animation: rise 0.2s ease-in-out;\n                    }\n                }\n            }\n        }\n    }\n\n    .user-actions {\n        display: flex;\n        flex-direction: column;\n\n        .user-info {\n            display: none;\n            @include mobile {\n                display: flex;\n                padding: 20px;\n                align-items: center;\n\n                .name-and-school {\n                    flex: 80%;\n                    .school {\n                        font-size: 14px;\n                        // border-right: black 1px solid;\n                        padding-right: 10px;\n                    }\n                    .name {\n                        font-size: 14px;\n                        font-weight: 800;\n                        padding-right: 10px;\n                        // border-right: black 1px solid;\n                    }\n                }\n                .profile-pic-container {\n                    justify-content: end;\n                    img {\n                        width: 60px;\n                        height: 60px;\n                        border-radius: 30px;\n                    }\n                }\n            }\n        }\n\n        @include mobile {\n            flex: 50%;\n            justify-content: end;\n        }\n    }\n}\n\n.background {\n    &.menu-background {\n        z-index: 9;\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},3189:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.top-bar{border-bottom:#d4aa8c 5px solid;position:fixed;top:0;left:0;width:100%;overflow:visible;z-index:20;background-color:white;transition:all 0.4s}.top-bar .wrapper{padding:10px 30px;height:3.7em;display:flex;align-items:center;justify-content:space-between;overflow-y:hidden}.top-bar .wrapper .left{display:flex;flex-direction:row;align-items:center}.top-bar .wrapper .left h1{font-size:20px;padding-right:20px;color:black}.top-bar .wrapper .left .nav-item{margin:20px;padding:5px 10px 5px 10px;height:100%;text-decoration:none;color:black;font-size:15px;transition:all 0.4s}@media (max-width: 950px){.top-bar .wrapper .left .nav-item{display:none}}.top-bar .wrapper .left .nav-item:active{background-color:#ffe58d}.top-bar .wrapper .left .nav-item.active{background-color:#ffda5a;position:relative;overflow:visible;transition:all 0.4s}.top-bar .wrapper .left .nav-item.active::after{content:"";position:absolute;left:0;bottom:-15px;width:100%;height:4px;background-color:#d4aa8c;animation:rise 0.2s ease-in-out}.top-bar .wrapper .right .userInfoContainer{display:flex;flex-direction:row;align-items:center;cursor:pointer}.top-bar .wrapper .right .userInfoContainer .school{font-size:14px;border-right:black 1px solid;padding-right:10px}.top-bar .wrapper .right .userInfoContainer .name{font-size:14px;font-weight:800;padding-left:10px;padding-right:10px}@media (max-width: 950px){.top-bar .wrapper .right .userInfoContainer{display:none}}.top-bar .wrapper .right .hamburger{width:20px;height:15px;margin-right:10px;display:none;flex-direction:column;justify-content:space-between;cursor:pointer}@media (max-width: 950px){.top-bar .wrapper .right .hamburger{display:flex}}.top-bar .wrapper .right .hamburger span{height:2px;width:100%;background-color:black;transform-origin:left;transition:0.5s all ease}.top-bar .wrapper .right .hamburger.activeHamburger span:first-child{transform:rotate(40deg)}.top-bar .wrapper .right .hamburger.activeHamburger span:nth-child(2){opacity:0}.top-bar .wrapper .right .hamburger.activeHamburger span:last-child{transform:rotate(-40deg)}@keyframes rise{0%{bottom:-17px}100%{bottom:-15px}}\n',"",{version:3,sources:["webpack://./Client/src/components/TopBar/TopBar.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAEA,SACI,+BAAsC,CAEtC,cAAe,CACf,KAAM,CACN,MAAO,CACP,UAAW,CACX,gBAAiB,CACjB,UAAW,CACX,sBAAuB,CACvB,mBAAoB,CAVxB,kBAaQ,iBAAkB,CAClB,YAAa,CAEb,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,iBAAkB,CAnB1B,wBAsBY,YAAa,CACb,kBAAmB,CACnB,kBAAmB,CAxB/B,2BA0BgB,cAAe,CACf,kBAAmB,CACnB,WAAY,CA5B5B,kCA+BgB,WAAY,CACZ,yBAA0B,CAC1B,WAAY,CACZ,oBAAqB,CACrB,WAAY,CACZ,cAAe,CACf,mBAAoB,CA0BvB,0BA/Db,kCAwCoB,YAAa,CAuBpB,CA/Db,yCA4CoB,wBAAiE,CA5CrF,yCA+CoB,wBC5CK,CD6CL,iBAAkB,CAClB,gBAAiB,CACjB,mBAAoB,CAlDxC,gDAqDwB,UAAW,CACX,iBAAkB,CAClB,MAAO,CACP,YAAa,CACb,UAAW,CACX,UAAW,CACX,wBCzDF,CD0DE,+BAAgC,CA5DxD,4CAmEgB,YAAa,CACb,kBAAmB,CACnB,kBAAmB,CACnB,cAAe,CAtE/B,oDAyEoB,cAAe,CACf,4BAA6B,CAC7B,kBAAmB,CA3EvC,kDA8EoB,cAAe,CACf,eAAgB,CAChB,iBAAkB,CAClB,kBAAmB,CACtB,0BAlFjB,4CAqFoB,YAAa,CAEpB,CAvFb,oCA0FgB,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,YAAa,CAMb,qBAAsB,CACtB,6BAA8B,CAC9B,cAAe,CAsBlB,0BA3Hb,oCAgGoB,YAAa,CA2BpB,CA3Hb,yCAwGoB,UAAW,CACX,UAAW,CACX,sBAAuB,CACvB,qBAAsB,CACtB,wBAAyB,CA5G7C,qEAiH4B,uBAAwB,CAjHpD,sEAoH4B,SAAU,CApHtC,oEAuH4B,wBAAyB,CAC5B,gBASrB,GACI,YAAa,CAEjB,KACI,YAAa,CAAA",sourcesContent:['@import "../../globals.scss";\n\n.top-bar {\n    border-bottom: $border-color 5px solid;\n\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    overflow: visible;\n    z-index: 20;\n    background-color: white;\n    transition: all 0.4s;\n\n    .wrapper {\n        padding: 10px 30px;\n        height: 3.7em;\n\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        overflow-y: hidden;\n\n        .left {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n            h1 {\n                font-size: 20px;\n                padding-right: 20px;\n                color: black;\n            }\n            .nav-item {\n                margin: 20px;\n                padding: 5px 10px 5px 10px;\n                height: 100%;\n                text-decoration: none;\n                color: black;\n                font-size: 15px;\n                transition: all 0.4s;\n\n                @include mobile {\n                    display: none;\n                }\n\n                &:active {\n                    background-color: lighten($color: $highlight-color, $amount: 10%);\n                }\n                &.active {\n                    background-color: $highlight-color;\n                    position: relative;\n                    overflow: visible;\n                    transition: all 0.4s;\n\n                    &::after {\n                        content: "";\n                        position: absolute;\n                        left: 0;\n                        bottom: -15px;\n                        width: 100%;\n                        height: 4px;\n                        background-color: $border-color;\n                        animation: rise 0.2s ease-in-out;\n                    }\n                }\n            }\n        }\n        .right {\n            .userInfoContainer {\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                cursor: pointer;\n\n                .school {\n                    font-size: 14px;\n                    border-right: black 1px solid;\n                    padding-right: 10px;\n                }\n                .name {\n                    font-size: 14px;\n                    font-weight: 800;\n                    padding-left: 10px;\n                    padding-right: 10px;\n                }\n\n                @include mobile {\n                    display: none;\n                }\n            }\n\n            .hamburger {\n                width: 20px;\n                height: 15px;\n                margin-right: 10px;\n                display: none;\n\n                @include mobile {\n                    display: flex;\n                }\n\n                flex-direction: column;\n                justify-content: space-between;\n                cursor: pointer;\n\n                span {\n                    height: 2px;\n                    width: 100%;\n                    background-color: black;\n                    transform-origin: left;\n                    transition: 0.5s all ease;\n                }\n                &.activeHamburger {\n                    span {\n                        &:first-child {\n                            transform: rotate(40deg);\n                        }\n                        &:nth-child(2) {\n                            opacity: 0;\n                        }\n                        &:last-child {\n                            transform: rotate(-40deg);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@keyframes rise {\n    0% {\n        bottom: -17px;\n    }\n    100% {\n        bottom: -15px;\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},5057:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.Form{display:flex;flex-direction:column}.Label{color:#acacac;font-size:11px;padding-bottom:10px;font-weight:600;text-align:center;width:100%}.InputField{padding:10px;margin:10px;display:flex;flex-direction:column;border:none;overflow-x:visible}.InputField .Label{text-align:left}.InputField .Input{box-shadow:0px 5px 10px rgba(128,128,128,0.171);padding:10px;border:none;border-bottom:rgba(211,211,211,0.591) 8px solid;transition-property:border-bottom;transition-duration:0.2s;border-radius:5px}.InputField .Input:focus{border:none;border-bottom:rgba(139,79,11,0.616) 8px solid;outline-width:0}.InputField .dropdown{padding:5px 5px 5px 5px;border-radius:5px;font-size:16px;box-shadow:0px 5px 10px rgba(128,128,128,0.171);border:none;border-bottom:rgba(211,211,211,0.591) 8px solid;transition-property:border-bottom;height:40px;cursor:pointer;transition-duration:0.2s;-webkit-appearance:none;-moz-appearance:none;background:url("https://icons.deanishe.net/static/icons/fontawesome/444444/angle-down-256.png") 96%/15% no-repeat #fff;background-color:white;background-size:20px}.InputField .dropdown:focus{border:none;border-bottom:rgba(139,79,11,0.616) 8px solid;outline-width:0}.InputField .color-picker{border:none;height:50px;min-width:200px;position:relative}.InputField .color-picker::after{content:"(Click to Change)";position:absolute;color:white;margin-left:auto;margin-right:auto;top:33%;left:0;right:0;text-align:center}.Button{box-shadow:0 2px 5px rgba(0,0,0,0.1),0 1px 2px rgba(0,0,0,0.05);transition:all 0.2s ease-out;border-radius:5px;border:none;font-weight:900;text-align:center;min-height:3em;max-height:3em;flex:1;padding:0 20px 0 20px;margin:20px;cursor:pointer}.Button.ButtonDestructive{background-color:#933232;color:white}.Button.ButtonPrimary{background-color:#d4aa8c;color:white}.Button.ButtonCreation{background-color:#72ba72;color:white}.Button:active{box-shadow:0 2px 5px rgba(0,0,0,0),0 1px 2px rgba(0,0,0,0.05);transform:scale(0.98)}.ToggleField{display:flex;flex-direction:row;background-color:white;box-shadow:0px 5px 10px rgba(128,128,128,0.171);justify-content:space-between;align-items:center;padding:10px;margin:20px}.ToggleField .Label{text-align:left;font-size:12px;margin-top:10px}.ToggleField .Toggle{position:relative;display:inline-block;width:80px;padding:10px;height:34px}.ToggleField .Toggle input{opacity:0;width:0;height:0}.ToggleField .slider{position:absolute;border-radius:34px;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#e8e8e8;-webkit-transition:0.4s;transition:0.4s}.ToggleField .slider:before{position:absolute;border-radius:50%;content:"";height:26px;width:26px;left:4px;bottom:4px;background-color:rgba(143,28,28,0.482);-webkit-transition:0.4s;transition:0.4s}.ToggleField input:checked+.slider:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);background-color:rgba(0,128,0,0.452);transform:translateX(26px)}\n',"",{version:3,sources:["webpack://./Client/src/core/core.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAGA,MACI,YAAa,CACb,qBAAsB,CACzB,OAEG,aAAyB,CACzB,cAAe,CACf,mBAAoB,CACpB,eAAgB,CAChB,iBAAkB,CAClB,UAAW,CACd,YAGG,YAAa,CACb,WAAY,CACZ,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,kBAAmB,CANvB,mBASQ,eAAgB,CATxB,mBAYQ,+CAAmD,CACnD,YAAa,CACb,WAAY,CACZ,+CAAmD,CACnD,iCAAkC,CAClC,wBAAyB,CACzB,iBAAkB,CAlB1B,yBAqBQ,WAAY,CACZ,6CAAiD,CACjD,eAAgB,CAvBxB,sBA4BQ,uBAAwB,CACxB,iBAAkB,CAElB,cAAe,CACf,+CAAmD,CACnD,WAAY,CACZ,+CAAmD,CACnD,iCAAkC,CAClC,WAAY,CAEZ,cAAe,CAEf,wBAAyB,CACzB,uBAAwB,CACxB,oBAAqB,CAErB,sHACgC,CAChC,sBAAuB,CACvB,oBAAqB,CA/C7B,4BAmDQ,WAAY,CACZ,6CAAiD,CACjD,eAAgB,CArDxB,0BAyDQ,WAAY,CACZ,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CA5D1B,iCA8DY,2BAA4B,CAC5B,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CAClB,OAAQ,CACR,MAAO,CACP,OAAQ,CACR,iBAAkB,CACrB,QAKL,+DAAuE,CAEvE,4BAA6B,CAE7B,iBAAkB,CAClB,WAAY,CAEZ,eAAgB,CAChB,iBAAkB,CAElB,cAAe,CACf,cAAe,CACf,MAAO,CACP,qBAAsB,CAEtB,WAAY,CACZ,cAAe,CAjBnB,0BAoBQ,wBC5G0B,CD6G1B,WAAY,CArBpB,sBAwBQ,wBClHsB,CDmHtB,WAAY,CAzBpB,uBA4BQ,wBCrHuB,CDsHvB,WAAY,CA7BpB,eAiCQ,6DAAqE,CACrE,qBAAsB,CACzB,aAKD,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,+CAAmD,CACnD,6BAA8B,CAC9B,kBAAmB,CACnB,YAAa,CACb,WAAY,CARhB,oBAUQ,eAAgB,CAEhB,cAAe,CACf,eAAgB,CAbxB,qBAiBQ,iBAAkB,CAClB,oBAAqB,CACrB,UAAW,CACX,YAAa,CACb,WAAY,CArBpB,2BAyBQ,SAAU,CACV,OAAQ,CACR,QAAS,CA3BjB,qBA+BQ,iBAAkB,CAClB,kBAAmB,CACnB,cAAe,CACf,KAAM,CACN,MAAO,CACP,OAAQ,CACR,QAAS,CACT,wBAAoC,CACpC,uBAAwB,CACxB,eAAgB,CAxCxB,4BA4CQ,iBAAkB,CAClB,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,UAAW,CACX,QAAS,CACT,UAAW,CACX,sCAA0C,CAC1C,uBAAwB,CACxB,eAAgB,CArDxB,0CAwDQ,kCAAmC,CACnC,8BAA+B,CAC/B,oCAAwC,CACxC,0BAA2B",sourcesContent:['//Input Field\n@import "../globals.scss";\n\n.Form {\n    display: flex;\n    flex-direction: column;\n}\n.Label {\n    color: rgb(172, 172, 172);\n    font-size: 11px;\n    padding-bottom: 10px;\n    font-weight: 600;\n    text-align: center;\n    width: 100%;\n}\n\n.InputField {\n    padding: 10px;\n    margin: 10px;\n    display: flex;\n    flex-direction: column;\n    border: none;\n    overflow-x: visible;\n\n    .Label {\n        text-align: left;\n    }\n    .Input {\n        box-shadow: 0px 5px 10px rgba(128, 128, 128, 0.171);\n        padding: 10px;\n        border: none;\n        border-bottom: rgba(211, 211, 211, 0.591) 8px solid;\n        transition-property: border-bottom;\n        transition-duration: 0.2s;\n        border-radius: 5px;\n    }\n    .Input:focus {\n        border: none;\n        border-bottom: rgba(139, 79, 11, 0.616) 8px solid;\n        outline-width: 0;\n    }\n\n    //Dropdown\n    .dropdown {\n        padding: 5px 5px 5px 5px;\n        border-radius: 5px;\n\n        font-size: 16px;\n        box-shadow: 0px 5px 10px rgba(128, 128, 128, 0.171);\n        border: none;\n        border-bottom: rgba(211, 211, 211, 0.591) 8px solid;\n        transition-property: border-bottom;\n        height: 40px;\n\n        cursor: pointer;\n\n        transition-duration: 0.2s;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        // appearance: none;\n        background: url("https://icons.deanishe.net/static/icons/fontawesome/444444/angle-down-256.png") 96% / 15%\n            no-repeat rgb(255, 255, 255);\n        background-color: white;\n        background-size: 20px;\n    }\n\n    .dropdown:focus {\n        border: none;\n        border-bottom: rgba(139, 79, 11, 0.616) 8px solid;\n        outline-width: 0;\n    }\n\n    .color-picker {\n        border: none;\n        height: 50px;\n        min-width: 200px;\n        position: relative;\n        &::after {\n            content: "(Click to Change)";\n            position: absolute;\n            color: white;\n            margin-left: auto;\n            margin-right: auto;\n            top: 33%;\n            left: 0;\n            right: 0;\n            text-align: center;\n        }\n    }\n}\n\n.Button {\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.05);\n\n    transition: all 0.2s ease-out;\n\n    border-radius: 5px;\n    border: none;\n\n    font-weight: 900;\n    text-align: center;\n\n    min-height: 3em;\n    max-height: 3em;\n    flex: 1;\n    padding: 0 20px 0 20px;\n\n    margin: 20px;\n    cursor: pointer;\n\n    &.ButtonDestructive {\n        background-color: $destructive-button-color;\n        color: white;\n    }\n    &.ButtonPrimary {\n        background-color: $primary-button-color;\n        color: white;\n    }\n    &.ButtonCreation {\n        background-color: $creation-button-color;\n        color: white;\n    }\n\n    &:active {\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0), 0 1px 2px rgba(0, 0, 0, 0.05);\n        transform: scale(0.98);\n    }\n}\n\n//Toggle Switch\n.ToggleField {\n    display: flex;\n    flex-direction: row;\n    background-color: white;\n    box-shadow: 0px 5px 10px rgba(128, 128, 128, 0.171);\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    margin: 20px;\n    .Label {\n        text-align: left;\n        // width: 90px;\n        font-size: 12px;\n        margin-top: 10px;\n    }\n\n    .Toggle {\n        position: relative;\n        display: inline-block;\n        width: 80px;\n        padding: 10px;\n        height: 34px;\n    }\n\n    .Toggle input {\n        opacity: 0;\n        width: 0;\n        height: 0;\n    }\n\n    .slider {\n        position: absolute;\n        border-radius: 34px;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: rgb(232, 232, 232);\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n    }\n\n    .slider:before {\n        position: absolute;\n        border-radius: 50%;\n        content: "";\n        height: 26px;\n        width: 26px;\n        left: 4px;\n        bottom: 4px;\n        background-color: rgba(143, 28, 28, 0.482);\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n    }\n    input:checked + .slider:before {\n        -webkit-transform: translateX(26px);\n        -ms-transform: translateX(26px);\n        background-color: rgba(0, 128, 0, 0.452);\n        transform: translateX(26px);\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 950px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},8058:e=>{try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=f(n);o&&o!==h&&e(t,o,r)}var a=c(n);d&&(a=a.concat(d(n)));for(var s=l(t),m=l(n),g=0;g<a.length;++g){var y=a[g];if(!(i[y]||r&&r[y]||m&&m[y]||s&&s[y])){var A=p(n,y);try{u(t,y,A)}catch(e){}}}}return t}},5826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,l=o(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(l[c]=a[c]);if(t){s=t(a);for(var d=0;d<s.length;d++)r.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},1830:(e,t)=>{t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},4187:e=>{var t=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var r,o,i=e,a=e.indexOf("["),s=e.indexOf("]");-1!=a&&-1!=s&&(e=e.substring(0,a)+e.substring(a,s).replace(/:/g,";")+e.substring(s,e.length));for(var l,u,c=t.exec(e||""),d={},p=14;p--;)d[n[p]]=c[p]||"";return-1!=a&&-1!=s&&(d.source=i,d.host=d.host.substring(1,d.host.length-1).replace(/;/g,":"),d.authority=d.authority.replace("[","").replace("]","").replace(/;/g,":"),d.ipv6uri=!0),d.pathNames=(r=d.path,o=r.replace(/\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||o.splice(0,1),"/"==r.substr(r.length-1,1)&&o.splice(o.length-1,1),o),d.queryKey=(l=d.query,u={},l.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,n){t&&(u[t]=n)})),u),d}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,h={},m={};function g(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var A=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function v(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(m,e)||!f.call(h,e)&&(p.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(A,b);y[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(A,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(A,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var C=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,x=60106,E=60107,k=60108,B=60114,S=60109,O=60110,T=60112,D=60113,N=60120,I=60115,P=60116,R=60121,M=60128,Z=60129,_=60130,j=60131;if("function"==typeof Symbol&&Symbol.for){var z=Symbol.for;w=z("react.element"),x=z("react.portal"),E=z("react.fragment"),k=z("react.strict_mode"),B=z("react.profiler"),S=z("react.provider"),O=z("react.context"),T=z("react.forward_ref"),D=z("react.suspense"),N=z("react.suspense_list"),I=z("react.memo"),P=z("react.lazy"),R=z("react.block"),z("react.scope"),M=z("react.opaque.id"),Z=z("react.debug_trace_mode"),_=z("react.offscreen"),j=z("react.legacy_hidden")}var L,U="function"==typeof Symbol&&Symbol.iterator;function F(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=U&&e[U]||e["@@iterator"])?e:null}function Y(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var $=!1;function W(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Y(e):""}function V(e){switch(e.tag){case 5:return Y(e.type);case 16:return Y("Lazy");case 13:return Y("Suspense");case 19:return Y("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 22:return W(e.type._render,!1);case 1:return W(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case x:return"Portal";case B:return"Profiler";case k:return"StrictMode";case D:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case I:return q(e.type);case R:return q(e._render);case P:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function G(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&v(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function ue(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ge=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Ae={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function ve(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Ae.hasOwnProperty(e)&&Ae[e]?(""+t).trim():t+"px"}function Ce(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ve(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Ae).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ae[t]=Ae[e]}))}));var we=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Be=null,Se=null,Oe=null;function Te(e){if(e=no(e)){if("function"!=typeof Be)throw Error(a(280));var t=e.stateNode;t&&(t=oo(t),Be(e.stateNode,e.type,t))}}function De(e){Se?Oe?Oe.push(e):Oe=[e]:Se=e}function Ne(){if(Se){var e=Se,t=Oe;if(Oe=Se=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Ie(e,t){return e(t)}function Pe(e,t,n,r,o){return e(t,n,r,o)}function Re(){}var Me=Ie,Ze=!1,_e=!1;function je(){null===Se&&null===Oe||(Re(),Ne())}function ze(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Le=!1;if(d)try{var Ue={};Object.defineProperty(Ue,"passive",{get:function(){Le=!0}}),window.addEventListener("test",Ue,Ue),window.removeEventListener("test",Ue,Ue)}catch(me){Le=!1}function Fe(e,t,n,r,o,i,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Ye=!1,$e=null,We=!1,Ve=null,qe={onError:function(e){Ye=!0,$e=e}};function Ge(e,t,n,r,o,i,a,s,l){Ye=!1,$e=null,Fe.apply(qe,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(He(e)!==e)throw Error(a(188))}function Xe(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ke(o),e;if(i===r)return Ke(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,st=null,lt=null,ut=new Map,ct=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=ft(t,n,r,o,i),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=to(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function At(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&yt(at)&&(at=null),null!==st&&yt(st)&&(st=null),null!==lt&&yt(lt)&&(lt=null),ut.forEach(At),ct.forEach(At)}function vt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function Ct(e){function t(t){return vt(t,e)}if(0<it.length){vt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&vt(at,e),null!==st&&vt(st,e),null!==lt&&vt(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)gt(n),null===n.blockedOn&&dt.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},Et={},kt={};function Bt(e){if(Et[e])return Et[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in kt)return Et[e]=n[t];return e}d&&(kt=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var St=Bt("animationend"),Ot=Bt("animationiteration"),Tt=Bt("animationstart"),Dt=Bt("transitionend"),Nt=new Map,It=new Map,Pt=["abort","abort",St,"animationEnd",Ot,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Dt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),It.set(r,t),Nt.set(r,o),u(o,[r])}}(0,i.unstable_now)();var Mt=8;function Zt(e){if(0!=(1&e))return Mt=15,1;if(0!=(2&e))return Mt=14,2;if(0!=(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!=(32&e)?(Mt=11,32):0!=(t=192&e)?(Mt=10,t):0!=(256&e)?(Mt=9,256):0!=(t=3584&e)?(Mt=8,t):0!=(4096&e)?(Mt=7,4096):0!=(t=4186112&e)?(Mt=6,t):0!=(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!=(134217728&e)?(Mt=3,134217728):0!=(t=805306368&e)?(Mt=2,t):0!=(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function _t(e,t){var n=e.pendingLanes;if(0===n)return Mt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==i)r=i,o=Mt=15;else if(0!=(i=134217727&n)){var l=i&~a;0!==l?(r=Zt(l),o=Mt):0!=(s&=i)&&(r=Zt(s),o=Mt)}else 0!=(i=n&~a)?(r=Zt(i),o=Mt):0!==s&&(r=Zt(s),o=Mt);if(0===r)return 0;if(r=n&((0>(r=31-Yt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Zt(t),o<=Mt)return t;Mt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Yt(t)),r|=e[n],t&=~o;return r}function jt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function zt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Lt(24&~t))?zt(10,t):e;case 10:return 0===(e=Lt(192&~t))?zt(8,t):e;case 8:return 0===(e=Lt(3584&~t))&&0===(e=Lt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Lt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Lt(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ft(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Yt(t)]=n}var Yt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/Wt|0)|0},$t=Math.log,Wt=Math.LN2,Vt=i.unstable_UserBlockingPriority,qt=i.unstable_runWithPriority,Gt=!0;function Ht(e,t,n,r){Ze||Re();var o=Kt,i=Ze;Ze=!0;try{Pe(o,e,t,n,r)}finally{(Ze=i)||je()}}function Qt(e,t,n,r){qt(Vt,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){var o;if(Gt)if((o=0==(4&t))&&0<it.length&&-1<pt.indexOf(e))e=ft(null,e,t,n,r),it.push(e);else{var i=Xt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<pt.indexOf(e))return e=ft(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return st=mt(st,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ut.set(i,mt(ut.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Rr(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=ke(r);if(null!==(o=to(o))){var i=He(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Qe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Rr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,un,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},pn=sn(dn),fn=o({},dn,{view:0,detail:0}),hn=sn(fn),mn=o({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),gn=sn(mn),yn=sn(o({},mn,{dataTransfer:0})),An=sn(o({},fn,{relatedTarget:0})),bn=sn(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Cn=sn(vn),wn=sn(o({},dn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function Sn(){return Bn}var On=o({},fn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=sn(On),Dn=sn(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=sn(o({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sn})),In=sn(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=sn(Pn),Mn=[9,13,27,32],Zn=d&&"CompositionEvent"in window,_n=null;d&&"documentMode"in document&&(_n=document.documentMode);var jn=d&&"TextEvent"in window&&!_n,zn=d&&(!Zn||_n&&8<_n&&11>=_n),Ln=String.fromCharCode(32),Un=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Yn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function qn(e,t,n,r){De(r),0<(t=Zr(t,"onChange")).length&&(n=new pn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,Hn=null;function Qn(e){Or(e,0)}function Kn(e){if(K(ro(e)))return e}function Xn(e,t){if("change"===e)return t}var Jn=!1;if(d){var er;if(d){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Gn&&(Gn.detachEvent("onpropertychange",or),Hn=Gn=null)}function or(e){if("value"===e.propertyName&&Kn(Hn)){var t=[];if(qn(t,Hn,e,ke(e)),e=Qn,Ze)e(t);else{Ze=!0;try{Ie(e,t)}finally{Ze=!1,je()}}}}function ir(e,t,n){"focusin"===e?(rr(),Hn=n,(Gn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Hn)}function sr(e,t){if("click"===e)return Kn(t)}function lr(e,t){if("input"===e||"change"===e)return Kn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function dr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!ur(e[n[r]],t[n[r]]))return!1;return!0}function pr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=pr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=pr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function gr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yr=d&&"documentMode"in document&&11>=document.documentMode,Ar=null,br=null,vr=null,Cr=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Cr||null==Ar||Ar!==X(r)||(r="selectionStart"in(r=Ar)&&gr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&dr(vr,r)||(vr=r,0<(r=Zr(br,"onSelect")).length&&(t=new pn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Ar)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Pt,2);for(var xr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Er=0;Er<xr.length;Er++)It.set(xr[Er],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Br=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function Sr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,s,l,u){if(Ge.apply(this,arguments),Ye){if(!Ye)throw Error(a(198));var c=$e;Ye=!1,$e=null,We||(We=!0,Ve=c)}}(r,t,void 0,e),e.currentTarget=null}function Or(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==i&&o.isPropagationStopped())break e;Sr(o,s,u),i=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==i&&o.isPropagationStopped())break e;Sr(o,s,u),i=l}}}if(We)throw e=Ve,We=!1,Ve=null,e}function Tr(e,t){var n=io(t),r=e+"__bubble";n.has(r)||(Pr(t,e,2,!1),n.add(r))}var Dr="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[Dr]||(e[Dr]=!0,s.forEach((function(t){Br.has(t)||Ir(t,!1,e,null),Ir(t,!0,e,null)})))}function Ir(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Br.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=io(i),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(o|=4),Pr(i,e,o,t),a.add(s))}function Pr(e,t,n,r){var o=It.get(t);switch(void 0===o?2:o){case 0:o=Ht;break;case 1:o=Qt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Le||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=to(s)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(_e)return e();_e=!0;try{Me(e,t,n)}finally{_e=!1,je()}}((function(){var r=i,o=ke(n),a=[];e:{var s=Nt.get(e);if(void 0!==s){var l=pn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Tn;break;case"focusin":u="focus",l=An;break;case"focusout":u="blur",l=An;break;case"beforeblur":case"afterblur":l=An;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Nn;break;case St:case Ot:case Tt:l=bn;break;case Dt:l=In;break;case"scroll":l=hn;break;case"wheel":l=Rn;break;case"copy":case"cut":case"paste":l=Cn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Dn}var c=0!=(4&t),d=!c&&"scroll"===e,p=c?null!==s?s+"Capture":null:s;c=[];for(var f,h=r;null!==h;){var m=(f=h).stateNode;if(5===f.tag&&null!==m&&(f=m,null!==p&&null!=(m=ze(h,p))&&c.push(Mr(h,m,f))),d)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,o),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!to(u)&&!u[Jr])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?to(u):null)&&(u!==(d=He(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=gn,m="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Dn,m="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==l?s:ro(l),f=null==u?s:ro(u),(s=new c(m,h+"leave",l,n,o)).target=d,s.relatedTarget=f,m=null,to(o)===r&&((c=new c(p,h+"enter",u,n,o)).target=f,c.relatedTarget=d,m=c),d=m,l&&u)e:{for(p=u,h=0,f=c=l;f;f=_r(f))h++;for(f=0,m=p;m;m=_r(m))f++;for(;0<h-f;)c=_r(c),h--;for(;0<f-h;)p=_r(p),f--;for(;h--;){if(c===p||null!==p&&c===p.alternate)break e;c=_r(c),p=_r(p)}c=null}else c=null;null!==l&&jr(a,s,l,c,!1),null!==u&&null!==d&&jr(a,d,u,c,!0)}if("select"===(l=(s=r?ro(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=Xn;else if(Vn(s))if(Jn)g=lr;else{g=ar;var y=ir}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=sr);switch(g&&(g=g(e,r))?qn(a,g,n,o):(y&&y(e,s,r),"focusout"===e&&(y=s._wrapperState)&&y.controlled&&"number"===s.type&&oe(s,"number",s.value)),y=r?ro(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(Ar=y,br=r,vr=null);break;case"focusout":vr=br=Ar=null;break;case"mousedown":Cr=!0;break;case"contextmenu":case"mouseup":case"dragend":Cr=!1,wr(a,n,o);break;case"selectionchange":if(yr)break;case"keydown":case"keyup":wr(a,n,o)}var A;if(Zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(zn&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(A=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,$n=!0)),0<(y=Zr(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:y}),(A||null!==(A=Yn(n)))&&(b.data=A))),(A=jn?function(e,t){switch(e){case"compositionend":return Yn(t);case"keypress":return 32!==t.which?null:(Un=!0,Ln);case"textInput":return(e=t.data)===Ln&&Un?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!Zn&&Fn(e,t)?(e=nn(),tn=en=Jt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Zr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=A)}Or(a,t)}))}function Mr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Zr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=ze(e,n))&&r.unshift(Mr(e,i,o)),null!=(i=ze(e,t))&&r.push(Mr(e,i,o))),e=e.return}return r}function _r(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function jr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,o?null!=(l=ze(n,i))&&a.unshift(Mr(n,l,s)):o||null!=(l=ze(n,i))&&a.push(Mr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function zr(){}var Lr=null,Ur=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var $r="function"==typeof setTimeout?setTimeout:void 0,Wr="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function qr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Gr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Hr=0,Qr=Math.random().toString(36).slice(2),Kr="__reactFiber$"+Qr,Xr="__reactProps$"+Qr,Jr="__reactContainer$"+Qr,eo="__reactEvents$"+Qr;function to(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Gr(e);null!==e;){if(n=e[Kr])return n;e=Gr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Kr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function oo(e){return e[Xr]||null}function io(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var ao=[],so=-1;function lo(e){return{current:e}}function uo(e){0>so||(e.current=ao[so],ao[so]=null,so--)}function co(e,t){so++,ao[so]=e.current,e.current=t}var po={},fo=lo(po),ho=lo(!1),mo=po;function go(e,t){var n=e.type.contextTypes;if(!n)return po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function yo(e){return null!=e.childContextTypes}function Ao(){uo(ho),uo(fo)}function bo(e,t,n){if(fo.current!==po)throw Error(a(168));co(fo,t),co(ho,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,q(t)||"Unknown",i));return o({},n,r)}function Co(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||po,mo=fo.current,co(fo,e),co(ho,ho.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=vo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,uo(ho),uo(fo),co(fo,e)):uo(ho),co(ho,n)}var xo=null,Eo=null,ko=i.unstable_runWithPriority,Bo=i.unstable_scheduleCallback,So=i.unstable_cancelCallback,Oo=i.unstable_shouldYield,To=i.unstable_requestPaint,Do=i.unstable_now,No=i.unstable_getCurrentPriorityLevel,Io=i.unstable_ImmediatePriority,Po=i.unstable_UserBlockingPriority,Ro=i.unstable_NormalPriority,Mo=i.unstable_LowPriority,Zo=i.unstable_IdlePriority,_o={},jo=void 0!==To?To:function(){},zo=null,Lo=null,Uo=!1,Fo=Do(),Yo=1e4>Fo?Do:function(){return Do()-Fo};function $o(){switch(No()){case Io:return 99;case Po:return 98;case Ro:return 97;case Mo:return 96;case Zo:return 95;default:throw Error(a(332))}}function Wo(e){switch(e){case 99:return Io;case 98:return Po;case 97:return Ro;case 96:return Mo;case 95:return Zo;default:throw Error(a(332))}}function Vo(e,t){return e=Wo(e),ko(e,t)}function qo(e,t,n){return e=Wo(e),Bo(e,t,n)}function Go(){if(null!==Lo){var e=Lo;Lo=null,So(e)}Ho()}function Ho(){if(!Uo&&null!==zo){Uo=!0;var e=0;try{var t=zo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zo=null}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),Bo(Io,Go),t}finally{Uo=!1}}}var Qo=C.ReactCurrentBatchConfig;function Ko(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Xo=lo(null),Jo=null,ei=null,ti=null;function ni(){ti=ei=Jo=null}function ri(e){var t=Xo.current;uo(Xo),e.type._context._currentValue=t}function oi(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ii(e,t){Jo=e,ti=ei=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Za=!0),e.firstContext=null)}function ai(e,t){if(ti!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ti=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ei){if(null===Jo)throw Error(a(308));ei=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ei=ei.next=t;return e._currentValue}var si=!1;function li(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ui(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ci(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function di(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function pi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function fi(e,t,n,r){var i=e.updateQueue;si=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?a=c:s.next=c,s=u;var d=e.alternate;if(null!==d){var p=(d=d.updateQueue).lastBaseUpdate;p!==s&&(null===p?d.firstBaseUpdate=c:p.next=c,d.lastBaseUpdate=u)}}if(null!==a){for(p=i.baseState,s=0,d=c=u=null;;){l=a.lane;var f=a.eventTime;if((r&l)===l){null!==d&&(d=d.next={eventTime:f,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(l=t,f=n,m.tag){case 1:if("function"==typeof(h=m.payload)){p=h.call(f,p,l);break e}p=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(f,p,l):h))break e;p=o({},p,l);break e;case 2:si=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else f={eventTime:f,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(c=d=f,u=p):d=d.next=f,s|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===d&&(u=p),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=d,js|=s,e.lanes=s,e.memoizedState=p}}function hi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var mi=(new r.Component).refs;function gi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var yi={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ul(),o=cl(e),i=ci(r,o);i.payload=t,null!=n&&(i.callback=n),di(e,i),dl(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ul(),o=cl(e),i=ci(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),di(e,i),dl(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ul(),r=cl(e),o=ci(n,r);o.tag=2,null!=t&&(o.callback=t),di(e,o),dl(e,r,n)}};function Ai(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&dr(n,r)&&dr(o,i))}function bi(e,t,n){var r=!1,o=po,i=t.contextType;return"object"==typeof i&&null!==i?i=ai(i):(o=yo(t)?mo:fo.current,i=(r=null!=(r=t.contextTypes))?go(e,o):po),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=yi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function vi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&yi.enqueueReplaceState(t,t.state,null)}function Ci(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,li(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ai(i):(i=yo(t)?mo:fo.current,o.context=go(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(gi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&yi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var wi=Array.isArray;function xi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ei(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ki(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Yl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=ql(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=xi(e,t,n),r.return=e,r):((r=$l(n.type,n.key,n.props,null,e.mode,r)).ref=xi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Wl(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ql(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=$l(t.type,t.key,t.props,null,e.mode,n)).ref=xi(e,null,t),n.return=e,n;case x:return(t=Gl(t,e.mode,n)).return=e,t}if(wi(t)||F(t))return(t=Wl(t,e.mode,n,null)).return=e,t;Ei(e,t)}return null}function f(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?n.type===E?d(e,t,n.props.children,r,o):u(e,t,n,r):null;case x:return n.key===o?c(e,t,n,r):null}if(wi(n)||F(n))return null!==o?null:d(e,t,n,r,null);Ei(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?n:r.key)||null,r.type===E?d(t,e,r.props.children,o,r.key):u(t,e,r,o);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(wi(r)||F(r))return d(t,e=e.get(n)||null,r,o,null);Ei(t,r)}return null}function m(o,a,s,l){for(var u=null,c=null,d=a,m=a=0,g=null;null!==d&&m<s.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var y=f(o,d,s[m],l);if(null===y){null===d&&(d=g);break}e&&d&&null===y.alternate&&t(o,d),a=i(y,a,m),null===c?u=y:c.sibling=y,c=y,d=g}if(m===s.length)return n(o,d),u;if(null===d){for(;m<s.length;m++)null!==(d=p(o,s[m],l))&&(a=i(d,a,m),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(o,d);m<s.length;m++)null!==(g=h(d,o,m,s[m],l))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(o,e)})),u}function g(o,s,l,u){var c=F(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var d=c=null,m=s,g=s=0,y=null,A=l.next();null!==m&&!A.done;g++,A=l.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=f(o,m,A.value,u);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),s=i(b,s,g),null===d?c=b:d.sibling=b,d=b,m=y}if(A.done)return n(o,m),c;if(null===m){for(;!A.done;g++,A=l.next())null!==(A=p(o,A.value,u))&&(s=i(A,s,g),null===d?c=A:d.sibling=A,d=A);return c}for(m=r(o,m);!A.done;g++,A=l.next())null!==(A=h(m,o,g,A.value,u))&&(e&&null!==A.alternate&&m.delete(null===A.key?g:A.key),s=i(A,s,g),null===d?c=A:d.sibling=A,d=A);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,l){var u="object"==typeof i&&null!==i&&i.type===E&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case w:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(i.type===E){n(e,u.sibling),(r=o(u,i.props.children)).return=e,e=r;break e}}else if(u.elementType===i.type){n(e,u.sibling),(r=o(u,i.props)).ref=xi(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===E?((r=Wl(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=$l(i.type,i.key,i.props,null,e.mode,l)).ref=xi(e,r,i),l.return=e,e=l)}return s(e);case x:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gl(i,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=ql(i,e.mode,l)).return=e,e=r),s(e);if(wi(i))return m(e,r,i,l);if(F(i))return g(e,r,i,l);if(c&&Ei(e,i),void 0===i&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,q(e.type)||"Component"))}return n(e,r)}}var Bi=ki(!0),Si=ki(!1),Oi={},Ti=lo(Oi),Di=lo(Oi),Ni=lo(Oi);function Ii(e){if(e===Oi)throw Error(a(174));return e}function Pi(e,t){switch(co(Ni,t),co(Di,e),co(Ti,Oi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:fe(null,"");break;default:t=fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Ti),co(Ti,t)}function Ri(){uo(Ti),uo(Di),uo(Ni)}function Mi(e){Ii(Ni.current);var t=Ii(Ti.current),n=fe(t,e.type);t!==n&&(co(Di,e),co(Ti,n))}function Zi(e){Di.current===e&&(uo(Ti),uo(Di))}var _i=lo(0);function ji(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var zi=null,Li=null,Ui=!1;function Fi(e,t){var n=Ul(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Yi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function $i(e){if(Ui){var t=Li;if(t){var n=t;if(!Yi(e,t)){if(!(t=qr(n.nextSibling))||!Yi(e,t))return e.flags=-1025&e.flags|2,Ui=!1,void(zi=e);Fi(zi,n)}zi=e,Li=qr(t.firstChild)}else e.flags=-1025&e.flags|2,Ui=!1,zi=e}}function Wi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;zi=e}function Vi(e){if(e!==zi)return!1;if(!Ui)return Wi(e),Ui=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Yr(t,e.memoizedProps))for(t=Li;t;)Fi(e,t),t=qr(t.nextSibling);if(Wi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Li=qr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Li=null}}else Li=zi?qr(e.stateNode.nextSibling):null;return!0}function qi(){Li=zi=null,Ui=!1}var Gi=[];function Hi(){for(var e=0;e<Gi.length;e++)Gi[e]._workInProgressVersionPrimary=null;Gi.length=0}var Qi=C.ReactCurrentDispatcher,Ki=C.ReactCurrentBatchConfig,Xi=0,Ji=null,ea=null,ta=null,na=!1,ra=!1;function oa(){throw Error(a(321))}function ia(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function aa(e,t,n,r,o,i){if(Xi=i,Ji=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qi.current=null===e||null===e.memoizedState?Ia:Pa,e=n(r,o),ra){i=0;do{if(ra=!1,!(25>i))throw Error(a(301));i+=1,ta=ea=null,t.updateQueue=null,Qi.current=Ra,e=n(r,o)}while(ra)}if(Qi.current=Na,t=null!==ea&&null!==ea.next,Xi=0,ta=ea=Ji=null,na=!1,t)throw Error(a(300));return e}function sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Ji.memoizedState=ta=e:ta=ta.next=e,ta}function la(){if(null===ea){var e=Ji.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Ji.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Ji.memoizedState=ta=e:ta=ta.next=e}return ta}function ua(e,t){return"function"==typeof t?t(e):t}function ca(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ea,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=s=i=null,u=o;do{var c=u.lane;if((Xi&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=d,i=r):l=l.next=d,Ji.lanes|=c,js|=c}u=u.next}while(null!==u&&u!==o);null===l?i=r:l.next=s,ur(r,t.memoizedState)||(Za=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function da(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{i=e(i,s.action),s=s.next}while(s!==o);ur(i,t.memoizedState)||(Za=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function pa(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Xi&e)===e)&&(t._workInProgressVersionPrimary=r,Gi.push(t))),e)return n(t._source);throw Gi.push(t),Error(a(350))}function fa(e,t,n,r){var o=Ds;if(null===o)throw Error(a(349));var i=t._getVersion,s=i(t._source),l=Qi.current,u=l.useState((function(){return pa(o,t,n)})),c=u[1],d=u[0];u=ta;var p=e.memoizedState,f=p.refs,h=f.getSnapshot,m=p.source;p=p.subscribe;var g=Ji;return e.memoizedState={refs:f,source:t,subscribe:r},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=c;var e=i(t._source);if(!ur(s,e)){e=n(t._source),ur(d,e)||(c(e),e=cl(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var l=31-Yt(a),u=1<<l;r[l]|=e,a&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=f.getSnapshot,n=f.setSnapshot;try{n(e(t._source));var r=cl(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(h,n)&&ur(m,t)&&ur(p,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:d}).dispatch=c=Da.bind(null,Ji,e),u.queue=e,u.baseQueue=null,d=pa(o,t,n),u.memoizedState=u.baseState=d),d}function ha(e,t,n){return fa(la(),e,t,n)}function ma(e){var t=sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:e}).dispatch=Da.bind(null,Ji,e),[t.memoizedState,e]}function ga(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ji.updateQueue)?(t={lastEffect:null},Ji.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ya(e){return e={current:e},sa().memoizedState=e}function Aa(){return la().memoizedState}function ba(e,t,n,r){var o=sa();Ji.flags|=e,o.memoizedState=ga(1|t,n,void 0,void 0===r?null:r)}function va(e,t,n,r){var o=la();r=void 0===r?null:r;var i=void 0;if(null!==ea){var a=ea.memoizedState;if(i=a.destroy,null!==r&&ia(r,a.deps))return void ga(t,n,i,r)}Ji.flags|=e,o.memoizedState=ga(1|t,n,i,r)}function Ca(e,t){return ba(516,4,e,t)}function wa(e,t){return va(516,4,e,t)}function xa(e,t){return va(4,2,e,t)}function Ea(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ka(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,Ea.bind(null,t,e),n)}function Ba(){}function Sa(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Oa(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ta(e,t){var n=$o();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Ki.transition;Ki.transition=1;try{e(!1),t()}finally{Ki.transition=n}}))}function Da(e,t,n){var r=ul(),o=cl(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Ji||null!==a&&a===Ji)ra=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(i.eagerReducer=a,i.eagerState=l,ur(l,s))return}catch(e){}dl(e,o,r)}}var Na={readContext:ai,useCallback:oa,useContext:oa,useEffect:oa,useImperativeHandle:oa,useLayoutEffect:oa,useMemo:oa,useReducer:oa,useRef:oa,useState:oa,useDebugValue:oa,useDeferredValue:oa,useTransition:oa,useMutableSource:oa,useOpaqueIdentifier:oa,unstable_isNewReconciler:!1},Ia={readContext:ai,useCallback:function(e,t){return sa().memoizedState=[e,void 0===t?null:t],e},useContext:ai,useEffect:Ca,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,Ea.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,2,e,t)},useMemo:function(e,t){var n=sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Da.bind(null,Ji,e),[r.memoizedState,e]},useRef:ya,useState:ma,useDebugValue:Ba,useDeferredValue:function(e){var t=ma(e),n=t[0],r=t[1];return Ca((function(){var t=Ki.transition;Ki.transition=1;try{r(e)}finally{Ki.transition=t}}),[e]),n},useTransition:function(){var e=ma(!1),t=e[0];return ya(e=Ta.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=sa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},fa(r,e,t,n)},useOpaqueIdentifier:function(){if(Ui){var e=!1,t=function(e){return{$$typeof:M,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Hr++).toString(36))),Error(a(355))})),n=ma(t)[1];return 0==(2&Ji.mode)&&(Ji.flags|=516,ga(5,(function(){n("r:"+(Hr++).toString(36))}),void 0,null)),t}return ma(t="r:"+(Hr++).toString(36)),t},unstable_isNewReconciler:!1},Pa={readContext:ai,useCallback:Sa,useContext:ai,useEffect:wa,useImperativeHandle:ka,useLayoutEffect:xa,useMemo:Oa,useReducer:ca,useRef:Aa,useState:function(){return ca(ua)},useDebugValue:Ba,useDeferredValue:function(e){var t=ca(ua),n=t[0],r=t[1];return wa((function(){var t=Ki.transition;Ki.transition=1;try{r(e)}finally{Ki.transition=t}}),[e]),n},useTransition:function(){var e=ca(ua)[0];return[Aa().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return ca(ua)[0]},unstable_isNewReconciler:!1},Ra={readContext:ai,useCallback:Sa,useContext:ai,useEffect:wa,useImperativeHandle:ka,useLayoutEffect:xa,useMemo:Oa,useReducer:da,useRef:Aa,useState:function(){return da(ua)},useDebugValue:Ba,useDeferredValue:function(e){var t=da(ua),n=t[0],r=t[1];return wa((function(){var t=Ki.transition;Ki.transition=1;try{r(e)}finally{Ki.transition=t}}),[e]),n},useTransition:function(){var e=da(ua)[0];return[Aa().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return da(ua)[0]},unstable_isNewReconciler:!1},Ma=C.ReactCurrentOwner,Za=!1;function _a(e,t,n,r){t.child=null===e?Si(t,null,n,r):Bi(t,e.child,n,r)}function ja(e,t,n,r,o){n=n.render;var i=t.ref;return ii(t,o),r=aa(e,t,n,r,i,o),null===e||Za?(t.flags|=1,_a(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function za(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Fl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=$l(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,La(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:dr)(o,r)&&e.ref===t.ref)?ns(e,t,i):(t.flags|=1,(e=Yl(a,r)).ref=t.ref,e.return=t,t.child=e)}function La(e,t,n,r,o,i){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(Za=!1,0==(i&o))return t.lanes=e.lanes,ns(e,t,i);0!=(16384&e.flags)&&(Za=!0)}return Ya(e,t,n,r,i)}function Ua(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bl(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bl(0,e),null;t.memoizedState={baseLanes:0},bl(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,bl(0,r);return _a(e,t,o,n),t.child}function Fa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ya(e,t,n,r,o){var i=yo(n)?mo:fo.current;return i=go(t,i),ii(t,o),n=aa(e,t,n,r,i,o),null===e||Za?(t.flags|=1,_a(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function $a(e,t,n,r,o){if(yo(n)){var i=!0;Co(t)}else i=!1;if(ii(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),bi(t,n,r),Ci(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?ai(u):go(t,u=yo(n)?mo:fo.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&vi(t,a,r,u),si=!1;var p=t.memoizedState;a.state=p,fi(t,r,a,o),l=t.memoizedState,s!==r||p!==l||ho.current||si?("function"==typeof c&&(gi(t,n,c,r),l=t.memoizedState),(s=si||Ai(t,n,s,r,p,l,u))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ui(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Ko(t.type,s),a.props=u,d=t.pendingProps,p=a.context,l="object"==typeof(l=n.contextType)&&null!==l?ai(l):go(t,l=yo(n)?mo:fo.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||p!==l)&&vi(t,a,r,l),si=!1,p=t.memoizedState,a.state=p,fi(t,r,a,o);var h=t.memoizedState;s!==d||p!==h||ho.current||si?("function"==typeof f&&(gi(t,n,f,r),h=t.memoizedState),(u=si||Ai(t,n,u,r,p,h,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),r=!1)}return Wa(e,t,n,r,i,o)}function Wa(e,t,n,r,o,i){Fa(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&wo(t,n,!1),ns(e,t,i);r=t.stateNode,Ma.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Bi(t,e.child,null,i),t.child=Bi(t,null,s,i)):_a(e,t,s,i),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Pi(e,t.containerInfo)}var qa,Ga,Ha,Qa={dehydrated:null,retryLane:0};function Ka(e,t,n){var r,o=t.pendingProps,i=_i.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),co(_i,1&i),null===e?(void 0!==o.fallback&&$i(t),e=o.children,i=o.fallback,a?(e=Xa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,e):"number"==typeof o.unstable_expectedLoadTime?(e=Xa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Yl(a,s),null!==e?r=Yl(e,r):(r=Wl(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Qa,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Yl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Xa(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Vl(t,o,0,null),n=Wl(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oi(e.return,t)}function es(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function ts(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(_a(e,t,r.children,n),0!=(2&(r=_i.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(_i,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ji(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),es(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ji(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}es(t,!0,n,null,i,t.lastEffect);break;case"together":es(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ns(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),js|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Yl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Yl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rs(e,t){if(!Ui)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function os(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return yo(t.type)&&Ao(),null;case 3:return Ri(),uo(ho),uo(fo),Hi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Zi(t);var i=Ii(Ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Ga(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ii(Ti.current),Vi(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Kr]=t,r[Xr]=s,n){case"dialog":Tr("cancel",r),Tr("close",r);break;case"iframe":case"object":case"embed":Tr("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)Tr(kr[e],r);break;case"source":Tr("error",r);break;case"img":case"image":case"link":Tr("error",r),Tr("load",r);break;case"details":Tr("toggle",r);break;case"input":ee(r,s),Tr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Tr("invalid",r);break;case"textarea":le(r,s),Tr("invalid",r)}for(var u in xe(n,s),e=null,s)s.hasOwnProperty(u)&&(i=s[u],"children"===u?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(u)&&null!=i&&"onScroll"===u&&Tr("scroll",r));switch(n){case"input":Q(r),re(r,s,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=zr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===i.nodeType?i:i.ownerDocument,e===de&&(e=pe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Kr]=t,e[Xr]=r,qa(e,t),t.stateNode=e,u=Ee(n,r),n){case"dialog":Tr("cancel",e),Tr("close",e),i=r;break;case"iframe":case"object":case"embed":Tr("load",e),i=r;break;case"video":case"audio":for(i=0;i<kr.length;i++)Tr(kr[i],e);i=r;break;case"source":Tr("error",e),i=r;break;case"img":case"image":case"link":Tr("error",e),Tr("load",e),i=r;break;case"details":Tr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Tr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Tr("invalid",e);break;case"textarea":le(e,r),i=se(e,r),Tr("invalid",e);break;default:i=r}xe(n,i);var c=i;for(s in c)if(c.hasOwnProperty(s)){var d=c[s];"style"===s?Ce(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&ge(e,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&ye(e,d):"number"==typeof d&&ye(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Tr("scroll",e):null!=d&&v(e,s,d,u))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=zr)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ii(Ni.current),Ii(Ti.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return uo(_i),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&_i.current)?0===Ms&&(Ms=3):(0!==Ms&&3!==Ms||(Ms=4),null===Ds||0==(134217727&js)&&0==(134217727&zs)||ml(Ds,Is))),(r||n)&&(t.flags|=4),null);case 4:return Ri(),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return ri(t),null;case 19:if(uo(_i),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=r.rendering))if(s)rs(r,!1);else{if(0!==Ms||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=ji(e))){for(t.flags|=64,rs(r,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(_i,1&_i.current|2),t.child}e=e.sibling}null!==r.tail&&Yo()>Ys&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=ji(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rs(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Ui)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Yo()-r.renderingStartTime>Ys&&1073741824!==n&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Yo(),n.sibling=null,t=_i.current,co(_i,s?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function is(e){switch(e.tag){case 1:yo(e.type)&&Ao();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ri(),uo(ho),uo(fo),Hi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Zi(e),null;case 13:return uo(_i),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return uo(_i),null;case 4:return Ri(),null;case 10:return ri(e),null;case 23:case 24:return vl(),null;default:return null}}function as(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ss(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}qa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ga=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ii(Ti.current);var a,s=null;switch(n){case"input":i=J(e,i),r=J(e,r),s=[];break;case"option":i=ie(e,i),r=ie(e,r),s=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),s=[];break;case"textarea":i=se(e,i),r=se(e,r),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=zr)}for(d in xe(n,r),n=null,i)if(!r.hasOwnProperty(d)&&i.hasOwnProperty(d)&&null!=i[d])if("style"===d){var u=i[d];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=i?i[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Tr("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===M?c.toString():(s=s||[]).push(d,c))}n&&(s=s||[]).push("style",n);var d=s;(t.updateQueue=d)&&(t.flags|=4)}},Ha=function(e,t,n,r){n!==r&&(t.flags|=4)};var ls="function"==typeof WeakMap?WeakMap:Map;function us(e,t,n){(n=ci(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qs||(qs=!0,Gs=r),ss(0,t)},n}function cs(e,t,n){(n=ci(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ss(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hs?Hs=new Set([this]):Hs.add(this),ss(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ds="function"==typeof WeakSet?WeakSet:Set;function ps(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){_l(e,t)}else t.current=null}function fs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo))}throw Error(a(163))}function hs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Rl(n,e),Pl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&hi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}hi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Ct(n)))))}throw Error(a(163))}function ms(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=ve("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function gs(e,t){if(Eo&&"function"==typeof Eo.onCommitFiberUnmount)try{Eo.onCommitFiberUnmount(xo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Rl(t,n);else{r=t;try{o()}catch(e){_l(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ps(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){_l(t,e)}break;case 5:ps(t);break;case 4:ws(e,t)}}function ys(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function As(e){return 5===e.tag||3===e.tag||4===e.tag}function bs(e){e:{for(var t=e.return;null!==t;){if(As(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||As(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vs(e,n,t):Cs(e,n,t)}function vs(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=zr));else if(4!==r&&null!==(e=e.child))for(vs(e,t,n),e=e.sibling;null!==e;)vs(e,t,n),e=e.sibling}function Cs(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Cs(e,t,n),e=e.sibling;null!==e;)Cs(e,t,n),e=e.sibling}function ws(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var s=e,l=o,u=l;;)if(gs(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=o.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(gs(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function xs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<i.length;o+=2){var s=i[o],l=i[o+1];"style"===s?Ce(n,l):"dangerouslySetInnerHTML"===s?ge(n,l):"children"===s?ye(n,l):v(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Ct(n.containerInfo)));case 13:return null!==t.memoizedState&&(Fs=Yo(),ms(t.child,!0)),void Es(t);case 19:return void Es(t);case 23:case 24:return void ms(t,null!==t.memoizedState)}throw Error(a(163))}function Es(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ds),t.forEach((function(t){var r=zl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ks(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Bs=Math.ceil,Ss=C.ReactCurrentDispatcher,Os=C.ReactCurrentOwner,Ts=0,Ds=null,Ns=null,Is=0,Ps=0,Rs=lo(0),Ms=0,Zs=null,_s=0,js=0,zs=0,Ls=0,Us=null,Fs=0,Ys=1/0;function $s(){Ys=Yo()+500}var Ws,Vs=null,qs=!1,Gs=null,Hs=null,Qs=!1,Ks=null,Xs=90,Js=[],el=[],tl=null,nl=0,rl=null,ol=-1,il=0,al=0,sl=null,ll=!1;function ul(){return 0!=(48&Ts)?Yo():-1!==ol?ol:ol=Yo()}function cl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===$o()?1:2;if(0===il&&(il=_s),0!==Qo.transition){0!==al&&(al=null!==Us?Us.pendingLanes:0),e=il;var t=4186112&~al;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=$o(),e=zt(0!=(4&Ts)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),il)}function dl(e,t,n){if(50<nl)throw nl=0,rl=null,Error(a(185));if(null===(e=pl(e,t)))return null;Ft(e,t,n),e===Ds&&(zs|=t,4===Ms&&ml(e,Is));var r=$o();1===t?0!=(8&Ts)&&0==(48&Ts)?gl(e):(fl(e,n),0===Ts&&($s(),Go())):(0==(4&Ts)||98!==r&&99!==r||(null===tl?tl=new Set([e]):tl.add(e)),fl(e,n)),Us=e}function pl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function fl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Yt(s),u=1<<l,c=i[l];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,Zt(u);var d=Mt;i[l]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=_t(e,e===Ds?Is:0),t=Mt,0===r)null!==n&&(n!==_o&&So(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==_o&&So(n)}15===t?(n=gl.bind(null,e),null===zo?(zo=[n],Lo=Bo(Io,Ho)):zo.push(n),n=_o):14===t?n=qo(99,gl.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=qo(n,hl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hl(e){if(ol=-1,al=il=0,0!=(48&Ts))throw Error(a(327));var t=e.callbackNode;if(Il()&&e.callbackNode!==t)return null;var n=_t(e,e===Ds?Is:0);if(0===n)return null;var r=n,o=Ts;Ts|=16;var i=xl();for(Ds===e&&Is===r||($s(),Cl(e,r));;)try{Bl();break}catch(t){wl(e,t)}if(ni(),Ss.current=i,Ts=o,null!==Ns?r=0:(Ds=null,Is=0,r=Ms),0!=(_s&zs))Cl(e,0);else if(0!==r){if(2===r&&(Ts|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=jt(e))&&(r=El(e,n))),1===r)throw t=Zs,Cl(e,0),ml(e,n),fl(e,Yo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Tl(e);break;case 3:if(ml(e,n),(62914560&n)===n&&10<(r=Fs+500-Yo())){if(0!==_t(e,0))break;if(((o=e.suspendedLanes)&n)!==n){ul(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=$r(Tl.bind(null,e),r);break}Tl(e);break;case 4:if(ml(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var s=31-Yt(n);i=1<<s,(s=r[s])>o&&(o=s),n&=~i}if(n=o,10<(n=(120>(n=Yo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Bs(n/1960))-n)){e.timeoutHandle=$r(Tl.bind(null,e),n);break}Tl(e);break;default:throw Error(a(329))}}return fl(e,Yo()),e.callbackNode===t?hl.bind(null,e):null}function ml(e,t){for(t&=~Ls,t&=~zs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Yt(t),r=1<<n;e[n]=-1,t&=~r}}function gl(e){if(0!=(48&Ts))throw Error(a(327));if(Il(),e===Ds&&0!=(e.expiredLanes&Is)){var t=Is,n=El(e,t);0!=(_s&zs)&&(n=El(e,t=_t(e,t)))}else n=El(e,t=_t(e,0));if(0!==e.tag&&2===n&&(Ts|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=jt(e))&&(n=El(e,t))),1===n)throw n=Zs,Cl(e,0),ml(e,t),fl(e,Yo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tl(e),fl(e,Yo()),null}function yl(e,t){var n=Ts;Ts|=1;try{return e(t)}finally{0===(Ts=n)&&($s(),Go())}}function Al(e,t){var n=Ts;Ts&=-2,Ts|=8;try{return e(t)}finally{0===(Ts=n)&&($s(),Go())}}function bl(e,t){co(Rs,Ps),Ps|=t,_s|=t}function vl(){Ps=Rs.current,uo(Rs)}function Cl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Wr(n)),null!==Ns)for(n=Ns.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ao();break;case 3:Ri(),uo(ho),uo(fo),Hi();break;case 5:Zi(r);break;case 4:Ri();break;case 13:case 19:uo(_i);break;case 10:ri(r);break;case 23:case 24:vl()}n=n.return}Ds=e,Ns=Yl(e.current,null),Is=Ps=_s=t,Ms=0,Zs=null,Ls=zs=js=0}function wl(e,t){for(;;){var n=Ns;try{if(ni(),Qi.current=Na,na){for(var r=Ji.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}na=!1}if(Xi=0,ta=ea=Ji=null,ra=!1,Os.current=null,null===n||null===n.return){Ms=1,Zs=t,Ns=null;break}e:{var i=e,a=n.return,s=n,l=t;if(t=Is,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&_i.current),p=a;do{var f;if(f=13===p.tag){var h=p.memoizedState;if(null!==h)f=null!==h.dehydrated;else{var m=p.memoizedProps;f=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!d)}}if(f){var g=p.updateQueue;if(null===g){var y=new Set;y.add(u),p.updateQueue=y}else g.add(u);if(0==(2&p.mode)){if(p.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var A=ci(-1,1);A.tag=2,di(s,A)}s.lanes|=1;break e}l=void 0,s=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new ls,l=new Set,b.set(u,l)):void 0===(l=b.get(u))&&(l=new Set,b.set(u,l)),!l.has(s)){l.add(s);var v=jl.bind(null,i,u,s);u.then(v,v)}p.flags|=4096,p.lanes=t;break e}p=p.return}while(null!==p);l=Error((q(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ms&&(Ms=2),l=as(l,s),p=a;do{switch(p.tag){case 3:i=l,p.flags|=4096,t&=-t,p.lanes|=t,pi(p,us(0,i,t));break e;case 1:i=l;var C=p.type,w=p.stateNode;if(0==(64&p.flags)&&("function"==typeof C.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Hs||!Hs.has(w)))){p.flags|=4096,t&=-t,p.lanes|=t,pi(p,cs(p,i,t));break e}}p=p.return}while(null!==p)}Ol(n)}catch(e){t=e,Ns===n&&null!==n&&(Ns=n=n.return);continue}break}}function xl(){var e=Ss.current;return Ss.current=Na,null===e?Na:e}function El(e,t){var n=Ts;Ts|=16;var r=xl();for(Ds===e&&Is===t||Cl(e,t);;)try{kl();break}catch(t){wl(e,t)}if(ni(),Ts=n,Ss.current=r,null!==Ns)throw Error(a(261));return Ds=null,Is=0,Ms}function kl(){for(;null!==Ns;)Sl(Ns)}function Bl(){for(;null!==Ns&&!Oo();)Sl(Ns)}function Sl(e){var t=Ws(e.alternate,e,Ps);e.memoizedProps=e.pendingProps,null===t?Ol(e):Ns=t,Os.current=null}function Ol(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=os(n,t,Ps)))return void(Ns=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ps)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=is(t)))return n.flags&=2047,void(Ns=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ns=t);Ns=t=e}while(null!==t);0===Ms&&(Ms=5)}function Tl(e){var t=$o();return Vo(99,Dl.bind(null,e,t)),null}function Dl(e,t){do{Il()}while(null!==Ks);if(0!=(48&Ts))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<i;){var u=31-Yt(i),c=1<<u;o[u]=0,s[u]=-1,l[u]=-1,i&=~c}if(null!==tl&&0==(24&r)&&tl.has(e)&&tl.delete(e),e===Ds&&(Ns=Ds=null,Is=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ts,Ts|=32,Os.current=null,Lr=Gt,gr(s=mr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,i=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var d=0,p=-1,f=-1,h=0,m=0,g=s,y=null;t:for(;;){for(var A;g!==l||0!==i&&3!==g.nodeType||(p=d+i),g!==u||0!==c&&3!==g.nodeType||(f=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(A=g.firstChild);)y=g,g=A;for(;;){if(g===s)break t;if(y===l&&++h===i&&(p=d),y===u&&++m===c&&(f=d),null!==(A=g.nextSibling))break;y=(g=y).parentNode}g=A}l=-1===p||-1===f?null:{start:p,end:f}}else l=null;l=l||{start:0,end:0}}else l=null;Ur={focusedElem:s,selectionRange:l},Gt=!1,sl=null,ll=!1,Vs=r;do{try{Nl()}catch(e){if(null===Vs)throw Error(a(330));_l(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);sl=null,Vs=r;do{try{for(s=e;null!==Vs;){var b=Vs.flags;if(16&b&&ye(Vs.stateNode,""),128&b){var v=Vs.alternate;if(null!==v){var C=v.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(1038&b){case 2:bs(Vs),Vs.flags&=-3;break;case 6:bs(Vs),Vs.flags&=-3,xs(Vs.alternate,Vs);break;case 1024:Vs.flags&=-1025;break;case 1028:Vs.flags&=-1025,xs(Vs.alternate,Vs);break;case 4:xs(Vs.alternate,Vs);break;case 8:ws(s,l=Vs);var w=l.alternate;ys(l),null!==w&&ys(w)}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(a(330));_l(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);if(C=Ur,v=mr(),b=C.focusedElem,s=C.selectionRange,v!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==s&&gr(b)&&(v=s.start,void 0===(C=s.end)&&(C=v),"selectionStart"in b?(b.selectionStart=v,b.selectionEnd=Math.min(C,b.value.length)):(C=(v=b.ownerDocument||document)&&v.defaultView||window).getSelection&&(C=C.getSelection(),l=b.textContent.length,w=Math.min(s.start,l),s=void 0===s.end?w:Math.min(s.end,l),!C.extend&&w>s&&(l=s,s=w,w=l),l=fr(b,w),i=fr(b,s),l&&i&&(1!==C.rangeCount||C.anchorNode!==l.node||C.anchorOffset!==l.offset||C.focusNode!==i.node||C.focusOffset!==i.offset)&&((v=v.createRange()).setStart(l.node,l.offset),C.removeAllRanges(),w>s?(C.addRange(v),C.extend(i.node,i.offset)):(v.setEnd(i.node,i.offset),C.addRange(v))))),v=[];for(C=b;C=C.parentNode;)1===C.nodeType&&v.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<v.length;b++)(C=v[b]).element.scrollLeft=C.left,C.element.scrollTop=C.top}Gt=!!Lr,Ur=Lr=null,e.current=n,Vs=r;do{try{for(b=e;null!==Vs;){var x=Vs.flags;if(36&x&&hs(b,Vs.alternate,Vs),128&x){v=void 0;var E=Vs.ref;if(null!==E){var k=Vs.stateNode;Vs.tag,v=k,"function"==typeof E?E(v):E.current=v}}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(a(330));_l(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);Vs=null,jo(),Ts=o}else e.current=n;if(Qs)Qs=!1,Ks=e,Xs=t;else for(Vs=r;null!==Vs;)t=Vs.nextEffect,Vs.nextEffect=null,8&Vs.flags&&((x=Vs).sibling=null,x.stateNode=null),Vs=t;if(0===(r=e.pendingLanes)&&(Hs=null),1===r?e===rl?nl++:(nl=0,rl=e):nl=0,n=n.stateNode,Eo&&"function"==typeof Eo.onCommitFiberRoot)try{Eo.onCommitFiberRoot(xo,n,void 0,64==(64&n.current.flags))}catch(e){}if(fl(e,Yo()),qs)throw qs=!1,e=Gs,Gs=null,e;return 0!=(8&Ts)||Go(),null}function Nl(){for(;null!==Vs;){var e=Vs.alternate;ll||null===sl||(0!=(8&Vs.flags)?Je(Vs,sl)&&(ll=!0):13===Vs.tag&&ks(e,Vs)&&Je(Vs,sl)&&(ll=!0));var t=Vs.flags;0!=(256&t)&&fs(e,Vs),0==(512&t)||Qs||(Qs=!0,qo(97,(function(){return Il(),null}))),Vs=Vs.nextEffect}}function Il(){if(90!==Xs){var e=97<Xs?97:Xs;return Xs=90,Vo(e,Ml)}return!1}function Pl(e,t){Js.push(t,e),Qs||(Qs=!0,qo(97,(function(){return Il(),null})))}function Rl(e,t){el.push(t,e),Qs||(Qs=!0,qo(97,(function(){return Il(),null})))}function Ml(){if(null===Ks)return!1;var e=Ks;if(Ks=null,0!=(48&Ts))throw Error(a(331));var t=Ts;Ts|=32;var n=el;el=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===i)throw Error(a(330));_l(i,e)}}for(n=Js,Js=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===i)throw Error(a(330));_l(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ts=t,Go(),!0}function Zl(e,t,n){di(e,t=us(0,t=as(n,t),1)),t=ul(),null!==(e=pl(e,1))&&(Ft(e,1,t),fl(e,t))}function _l(e,t){if(3===e.tag)Zl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Zl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r))){var o=cs(n,e=as(t,e),1);if(di(n,o),o=ul(),null!==(n=pl(n,1)))Ft(n,1,o),fl(n,o);else if("function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function jl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ul(),e.pingedLanes|=e.suspendedLanes&n,Ds===e&&(Is&n)===n&&(4===Ms||3===Ms&&(62914560&Is)===Is&&500>Yo()-Fs?Cl(e,0):Ls|=n),fl(e,t)}function zl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===$o()?1:2:(0===il&&(il=_s),0===(t=Lt(62914560&~il))&&(t=4194304))),n=ul(),null!==(e=pl(e,t))&&(Ft(e,t,n),fl(e,n))}function Ll(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ul(e,t,n,r){return new Ll(e,t,n,r)}function Fl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Yl(e,t){var n=e.alternate;return null===n?((n=Ul(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function $l(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)Fl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case E:return Wl(n.children,o,i,t);case Z:s=8,o|=16;break;case k:s=8,o|=1;break;case B:return(e=Ul(12,n,t,8|o)).elementType=B,e.type=B,e.lanes=i,e;case D:return(e=Ul(13,n,t,o)).type=D,e.elementType=D,e.lanes=i,e;case N:return(e=Ul(19,n,t,o)).elementType=N,e.lanes=i,e;case _:return Vl(n,o,i,t);case j:return(e=Ul(24,n,t,o)).elementType=j,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:s=10;break e;case O:s=9;break e;case T:s=11;break e;case I:s=14;break e;case P:s=16,r=null;break e;case R:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ul(s,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Wl(e,t,n,r){return(e=Ul(7,e,r,t)).lanes=n,e}function Vl(e,t,n,r){return(e=Ul(23,e,r,t)).elementType=_,e.lanes=n,e}function ql(e,t,n){return(e=Ul(6,e,null,t)).lanes=n,e}function Gl(e,t,n){return(t=Ul(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function Ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Kl(e,t,n,r){var o=t.current,i=ul(),s=cl(o);e:if(n){t:{if(He(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(yo(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(yo(u)){n=vo(n,u,l);break e}}n=l}else n=po;return null===t.context?t.context=n:t.pendingContext=n,(t=ci(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),di(o,t),dl(o,s,i),s}function Xl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Jl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function eu(e,t){Jl(e,t),(e=e.alternate)&&Jl(e,t)}function tu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Hl(e,t,null!=n&&!0===n.hydrate),t=Ul(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,li(t),e[Jr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ru(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=Xl(a);s.call(e)}}Kl(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Xl(a);l.call(e)}}Al((function(){Kl(t,a,e,o)}))}return Xl(a)}function ou(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(t))throw Error(a(200));return Ql(e,t,null,n)}Ws=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)Za=!0;else{if(0==(n&r)){switch(Za=!1,t.tag){case 3:Va(t),qi();break;case 5:Mi(t);break;case 1:yo(t.type)&&Co(t);break;case 4:Pi(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ka(e,t,n):(co(_i,1&_i.current),null!==(t=ns(e,t,n))?t.sibling:null);co(_i,1&_i.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ts(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(_i,_i.current),r)break;return null;case 23:case 24:return t.lanes=0,Ua(e,t,n)}return ns(e,t,n)}Za=0!=(16384&e.flags)}else Za=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=go(t,fo.current),ii(t,n),o=aa(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,yo(r)){var i=!0;Co(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,li(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&gi(t,r,s,e),o.updater=yi,t.stateNode=o,o._reactInternals=t,Ci(t,r,e,n),t=Wa(null,t,r,!0,i,n)}else t.tag=0,_a(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Fl(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===I)return 14}return 2}(o),e=Ko(o,e),i){case 0:t=Ya(null,t,o,e,n);break e;case 1:t=$a(null,t,o,e,n);break e;case 11:t=ja(null,t,o,e,n);break e;case 14:t=za(null,t,o,Ko(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ya(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,$a(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ui(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)qi(),t=ns(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Li=qr(t.stateNode.containerInfo.firstChild),zi=t,i=Ui=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Gi.push(i);for(n=Si(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else _a(e,t,r,n),qi();t=t.child}return t;case 5:return Mi(t),null===e&&$i(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,Yr(r,o)?s=null:null!==i&&Yr(r,i)&&(t.flags|=16),Fa(e,t),_a(e,t,s,n),t.child;case 6:return null===e&&$i(t),null;case 13:return Ka(e,t,n);case 4:return Pi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Bi(t,null,r,n):_a(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return _a(e,t,t.pendingProps,n),t.child;case 8:case 12:return _a(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,s=t.memoizedProps,i=o.value;var l=t.type._context;if(co(Xo,l._currentValue),l._currentValue=i,null!==s)if(l=s.value,0==(i=ur(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(s.children===o.children&&!ho.current){t=ns(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===l.tag&&((c=ci(-1,n&-n)).tag=2,di(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),oi(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}_a(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ii(t,n),r=r(o=ai(o,i.unstable_observedBits)),t.flags|=1,_a(e,t,r,n),t.child;case 14:return i=Ko(o=t.type,t.pendingProps),za(e,t,o,i=Ko(o.type,i),r,n);case 15:return La(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,yo(r)?(e=!0,Co(t)):e=!1,ii(t,n),bi(t,r,o),Ci(t,r,o,n),Wa(null,t,r,!0,e,n);case 19:return ts(e,t,n);case 23:case 24:return Ua(e,t,n)}throw Error(a(156,t.tag))},tu.prototype.render=function(e){Kl(e,this._internalRoot,null,null)},tu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Kl(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(dl(e,4,ul()),eu(e,4))},tt=function(e){13===e.tag&&(dl(e,67108864,ul()),eu(e,67108864))},nt=function(e){if(13===e.tag){var t=ul(),n=cl(e);dl(e,n,t),eu(e,n)}},rt=function(e,t){return t()},Be=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(a(90));K(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Ie=yl,Pe=function(e,t,n,r,o){var i=Ts;Ts|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ts=i)&&($s(),Go())}},Re=function(){0==(49&Ts)&&(function(){if(null!==tl){var e=tl;tl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,fl(e,Yo())}))}Go()}(),Il())},Me=function(e,t){var n=Ts;Ts|=2;try{return e(t)}finally{0===(Ts=n)&&($s(),Go())}};var iu={Events:[no,ro,oo,De,Ne,Il,{current:!1}]},au={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},su={bundleType:au.bundleType,version:au.version,rendererPackageName:au.rendererPackageName,rendererConfig:au.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:C.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:au.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lu.isDisabled&&lu.supportsFiber)try{xo=lu.inject(su),Eo=lu}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=iu,t.createPortal=ou,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ts;if(0!=(48&n))return e(t);Ts|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ts=n,Go()}},t.hydrate=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nu(e))throw Error(a(40));return!!e._reactRootContainer&&(Al((function(){ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=yl,t.unstable_createPortal=function(e,t){return ou(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ru(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},2495:function(e){e.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(36)),i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={files:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"handleChange",value:function(e){for(var t=this,n=e.target.files,r=[],o=function(){var e=n[i],o=new FileReader;o.readAsDataURL(e),o.onload=function(){var i={name:e.name,type:e.type,size:Math.round(e.size/1e3)+" kB",base64:o.result,file:e};r.push(i),r.length==n.length&&(t.props.multiple?t.props.onDone(r):t.props.onDone(r[0]))}},i=0;i<n.length;i++)o()}},{key:"render",value:function(){return o.default.createElement("input",{type:"file",onChange:this.handleChange.bind(this),multiple:this.props.multiple})}}]),t}(o.default.Component);t.default=i,i.defaultProps={multiple:!1}},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(u===setTimeout)return setTimeout(e,0);if((u===n||!u)&&setTimeout)return u=setTimeout,setTimeout(e,0);try{return u(e,0)}catch(t){try{return u.call(null,e,0)}catch(t){return u.call(this,e,0)}}}function i(){h&&p&&(h=!1,p.length?f=p.concat(f):m=-1,f.length&&a())}function a(){if(!h){var e=o(i);h=!0;for(var t=f.length;t;){for(p=f,f=[];++m<t;)p&&p[m].run();m=-1,t=f.length}p=null,h=!1,function(e){if(c===clearTimeout)return clearTimeout(e);if((c===r||!c)&&clearTimeout)return c=clearTimeout,clearTimeout(e);try{c(e)}catch(t){try{return c.call(null,e)}catch(t){return c.call(this,e)}}}(e)}}function s(e,t){this.fun=e,this.array=t}function l(){}var u,c,d=e.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:n}catch(e){u=n}try{c="function"==typeof clearTimeout?clearTimeout:r}catch(e){c=r}}();var p,f=[],h=!1,m=-1;d.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new s(e,t)),1!==f.length||h||o(a)},s.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=l,d.addListener=l,d.once=l,d.off=l,d.removeListener=l,d.removeAllListeners=l,d.emit=l,d.prependListener=l,d.prependOnceListener=l,d.listeners=function(e){return[]},d.binding=function(e){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(e){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(e,t,n){(function(t){"use strict";var n=function(e){};"production"!==t.env.NODE_ENV&&(n=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")}),e.exports=function(e,t,r,o,i,a,s,l){if(n(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[r,o,i,a,s,l],d=0;(u=new Error(t.replace(/%s/g,(function(){return c[d++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var r=n(9);if("production"!==t.env.NODE_ENV){var o=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,(function(){return n[o++]}));"undefined"!=typeof console&&console.error(i);try{throw new Error(i)}catch(e){}};r=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];o.apply(void 0,[t].concat(r))}}}e.exports=r}).call(t,n(1))},function(e,t,n){(function(t){"use strict";function r(e){if("production"!==t.env.NODE_ENV&&f.call(e,"ref")){var n=Object.getOwnPropertyDescriptor(e,"ref").get;if(n&&n.isReactWarning)return!1}return void 0!==e.ref}function o(e){if("production"!==t.env.NODE_ENV&&f.call(e,"key")){var n=Object.getOwnPropertyDescriptor(e,"key").get;if(n&&n.isReactWarning)return!1}return void 0!==e.key}function i(e,n){var r=function(){s||(s=!0,"production"!==t.env.NODE_ENV&&d(!1,"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",n))};r.isReactWarning=!0,Object.defineProperty(e,"key",{get:r,configurable:!0})}function a(e,n){var r=function(){l||(l=!0,"production"!==t.env.NODE_ENV&&d(!1,"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",n))};r.isReactWarning=!0,Object.defineProperty(e,"ref",{get:r,configurable:!0})}var s,l,u=n(6),c=n(7),d=n(3),p=n(8),f=Object.prototype.hasOwnProperty,h=n(15),m={key:!0,ref:!0,__self:!0,__source:!0},g=function(e,n,r,o,i,a,s){var l={$$typeof:h,type:e,key:n,ref:r,props:s,_owner:a};return"production"!==t.env.NODE_ENV&&(l._store={},p?(Object.defineProperty(l._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(l,"_self",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(l,"_source",{configurable:!1,enumerable:!1,writable:!1,value:i})):(l._store.validated=!1,l._self=o,l._source=i),Object.freeze&&(Object.freeze(l.props),Object.freeze(l))),l};g.createElement=function(e,n,s){var l,u={},d=null,p=null,y=null,A=null;if(null!=n)for(l in r(n)&&(p=n.ref),o(n)&&(d=""+n.key),y=void 0===n.__self?null:n.__self,A=void 0===n.__source?null:n.__source,n)f.call(n,l)&&!m.hasOwnProperty(l)&&(u[l]=n[l]);var b=arguments.length-2;if(1===b)u.children=s;else if(b>1){for(var v=Array(b),C=0;C<b;C++)v[C]=arguments[C+2];"production"!==t.env.NODE_ENV&&Object.freeze&&Object.freeze(v),u.children=v}if(e&&e.defaultProps){var w=e.defaultProps;for(l in w)void 0===u[l]&&(u[l]=w[l])}if("production"!==t.env.NODE_ENV&&(d||p)&&(void 0===u.$$typeof||u.$$typeof!==h)){var x="function"==typeof e?e.displayName||e.name||"Unknown":e;d&&i(u,x),p&&a(u,x)}return g(e,d,p,y,A,c.current,u)},g.createFactory=function(e){var t=g.createElement.bind(null,e);return t.type=e,t},g.cloneAndReplaceKey=function(e,t){return g(e.type,t,e.ref,e._self,e._source,e._owner,e.props)},g.cloneElement=function(e,t,n){var i,a,s=u({},e.props),l=e.key,d=e.ref,p=e._self,h=e._source,y=e._owner;if(null!=t)for(i in r(t)&&(d=t.ref,y=c.current),o(t)&&(l=""+t.key),e.type&&e.type.defaultProps&&(a=e.type.defaultProps),t)f.call(t,i)&&!m.hasOwnProperty(i)&&(void 0===t[i]&&void 0!==a?s[i]=a[i]:s[i]=t[i]);var A=arguments.length-2;if(1===A)s.children=n;else if(A>1){for(var b=Array(A),v=0;v<A;v++)b[v]=arguments[v+2];s.children=b}return g(e.type,l,d,p,h,y,s)},g.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===h},e.exports=g}).call(t,n(1))},function(e,t){"use strict";e.exports=function(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o=new Error(n);throw o.name="Invariant Violation",o.framesToPop=1,o}},function(e,t){"use strict";function n(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;var r=Object.getOwnPropertyNames(t).map((function(e){return t[e]}));if("0123456789"!==r.join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var a,s,l=n(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))o.call(a,c)&&(l[c]=a[c]);if(r){s=r(a);for(var d=0;d<s.length;d++)i.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},function(e,t){"use strict";e.exports={current:null}},function(e,t,n){(function(t){"use strict";var n=!1;if("production"!==t.env.NODE_ENV)try{Object.defineProperty({},"x",{get:function(){}}),n=!0}catch(e){}e.exports=n}).call(t,n(1))},function(e,t){"use strict";function n(e){return function(){return e}}var r=function(){};r.thatReturns=n,r.thatReturnsFalse=n(!1),r.thatReturnsTrue=n(!0),r.thatReturnsNull=n(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){(function(t){"use strict";function r(e){var t=Function.prototype.toString,n=Object.prototype.hasOwnProperty,r=RegExp("^"+t.call(n).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");try{var o=t.call(e);return r.test(o)}catch(e){return!1}}function o(e){var t=u(e);if(t){var n=t.childIDs;c(e),n.forEach(o)}}function i(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")}function a(e){return null==e?"#empty":"string"==typeof e||"number"==typeof e?"#text":"string"==typeof e.type?e.type:e.type.displayName||e.type.name||"Unknown"}function s(e){var n,r=B.getDisplayName(e),o=B.getElement(e),a=B.getOwnerID(e);return a&&(n=B.getDisplayName(a)),"production"!==t.env.NODE_ENV&&A(o,"ReactComponentTreeHook: Missing React element for debugID %s when building stack",e),i(r,o&&o._source,n)}var l,u,c,d,p,f,h,m=n(5),g=n(7),y=n(2),A=n(3);if("function"==typeof Array.from&&"function"==typeof Map&&r(Map)&&null!=Map.prototype&&"function"==typeof Map.prototype.keys&&r(Map.prototype.keys)&&"function"==typeof Set&&r(Set)&&null!=Set.prototype&&"function"==typeof Set.prototype.keys&&r(Set.prototype.keys)){var b=new Map,v=new Set;l=function(e,t){b.set(e,t)},u=function(e){return b.get(e)},c=function(e){b.delete(e)},d=function(){return Array.from(b.keys())},p=function(e){v.add(e)},f=function(e){v.delete(e)},h=function(){return Array.from(v.keys())}}else{var C={},w={},x=function(e){return"."+e},E=function(e){return parseInt(e.substr(1),10)};l=function(e,t){var n=x(e);C[n]=t},u=function(e){var t=x(e);return C[t]},c=function(e){var t=x(e);delete C[t]},d=function(){return Object.keys(C).map(E)},p=function(e){var t=x(e);w[t]=!0},f=function(e){var t=x(e);delete w[t]},h=function(){return Object.keys(w).map(E)}}var k=[],B={onSetChildren:function(e,n){var r=u(e);r||("production"!==t.env.NODE_ENV?y(!1,"Item must have been set"):m("144")),r.childIDs=n;for(var o=0;o<n.length;o++){var i=n[o],a=u(i);a||("production"!==t.env.NODE_ENV?y(!1,"Expected hook events to fire for the child before its parent includes it in onSetChildren()."):m("140")),null==a.childIDs&&"object"==typeof a.element&&null!=a.element&&("production"!==t.env.NODE_ENV?y(!1,"Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren()."):m("141")),a.isMounted||("production"!==t.env.NODE_ENV?y(!1,"Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren()."):m("71")),null==a.parentID&&(a.parentID=e),a.parentID!==e&&("production"!==t.env.NODE_ENV?y(!1,"Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).",i,a.parentID,e):m("142",i,a.parentID,e))}},onBeforeMountComponent:function(e,t,n){l(e,{element:t,parentID:n,text:null,childIDs:[],isMounted:!1,updateCount:0})},onBeforeUpdateComponent:function(e,t){var n=u(e);n&&n.isMounted&&(n.element=t)},onMountComponent:function(e){var n=u(e);n||("production"!==t.env.NODE_ENV?y(!1,"Item must have been set"):m("144")),n.isMounted=!0,0===n.parentID&&p(e)},onUpdateComponent:function(e){var t=u(e);t&&t.isMounted&&t.updateCount++},onUnmountComponent:function(e){var t=u(e);t&&(t.isMounted=!1,0===t.parentID&&f(e)),k.push(e)},purgeUnmountedComponents:function(){if(!B._preventPurging){for(var e=0;e<k.length;e++)o(k[e]);k.length=0}},isMounted:function(e){var t=u(e);return!!t&&t.isMounted},getCurrentStackAddendum:function(e){var t="";if(e){var n=a(e),r=e._owner;t+=i(n,e._source,r&&r.getName())}var o=g.current,s=o&&o._debugID;return t+B.getStackAddendumByID(s)},getStackAddendumByID:function(e){for(var t="";e;)t+=s(e),e=B.getParentID(e);return t},getChildIDs:function(e){var t=u(e);return t?t.childIDs:[]},getDisplayName:function(e){var t=B.getElement(e);return t?a(t):null},getElement:function(e){var t=u(e);return t?t.element:null},getOwnerID:function(e){var t=B.getElement(e);return t&&t._owner?t._owner._debugID:null},getParentID:function(e){var t=u(e);return t?t.parentID:null},getSource:function(e){var t=u(e),n=t?t.element:null;return null!=n?n._source:null},getText:function(e){var t=B.getElement(e);return"string"==typeof t?t:"number"==typeof t?""+t:null},getUpdateCount:function(e){var t=u(e);return t?t.updateCount:0},getRootIDs:h,getRegisteredIDs:d,pushNonStandardWarningStack:function(e,t){if("function"==typeof console.reactStack){var n=[],r=g.current,o=r&&r._debugID;try{for(e&&n.push({name:o?B.getDisplayName(o):null,fileName:t?t.fileName:null,lineNumber:t?t.lineNumber:null});o;){var i=B.getElement(o),a=B.getParentID(o),s=B.getOwnerID(o),l=s?B.getDisplayName(s):null,u=i&&i._source;n.push({name:l,fileName:u?u.fileName:null,lineNumber:u?u.lineNumber:null}),o=a}}catch(e){}console.reactStack(n)}},popNonStandardWarningStack:function(){"function"==typeof console.reactStackEnd&&console.reactStackEnd()}};e.exports=B}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var n=function(){};if("production"!==t.env.NODE_ENV){var r=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,(function(){return n[o++]}));"undefined"!=typeof console&&console.warn(i);try{throw new Error(i)}catch(e){}};n=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!e){for(var n=arguments.length,o=Array(n>2?n-2:0),i=2;i<n;i++)o[i-2]=arguments[i];r.apply(void 0,[t].concat(o))}}}e.exports=n}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&Object.freeze(n),e.exports=n}).call(t,n(1))},function(e,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){(function(t){"use strict";function r(e,t,n){this.props=e,this.context=t,this.refs=c,this.updater=n||l}function o(e,t,n){this.props=e,this.context=t,this.refs=c,this.updater=n||l}function i(){}var a=n(5),s=n(6),l=n(17),u=n(8),c=n(12),d=n(2),p=n(11);if(r.prototype.isReactComponent={},r.prototype.setState=function(e,n){"object"!=typeof e&&"function"!=typeof e&&null!=e&&("production"!==t.env.NODE_ENV?d(!1,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):a("85")),this.updater.enqueueSetState(this,e),n&&this.updater.enqueueCallback(this,n,"setState")},r.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")},"production"!==t.env.NODE_ENV){var f={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},h=function(e,t){u&&Object.defineProperty(r.prototype,e,{get:function(){p(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var m in f)f.hasOwnProperty(m)&&h(m,f[m])}i.prototype=r.prototype,o.prototype=new i,o.prototype.constructor=o,s(o.prototype,r.prototype),o.prototype.isPureReactComponent=!0,e.exports={Component:r,PureComponent:o}}).call(t,n(1))},function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=n},function(e,t,n){(function(t){"use strict";function r(){if(u.current){var e=u.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e){if(null!=e&&void 0!==e.__source){var t=e.__source;return" Check your code at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+"."}return""}function i(e){var t=r();if(!t){var n="string"==typeof e?e:e.displayName||e.name;n&&(t=" Check the top-level render call using <"+n+">.")}return t}function a(e,n){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var r=y.uniqueKey||(y.uniqueKey={}),o=i(n);if(!r[o]){r[o]=!0;var a="";e&&e._owner&&e._owner!==u.current&&(a=" It was passed a child from "+e._owner.getName()+"."),"production"!==t.env.NODE_ENV&&m(!1,'Each child in an array or iterator should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.%s',o,a,c.getCurrentStackAddendum(e))}}}function s(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];d.isValidElement(r)&&a(r,t)}else if(d.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var o=h(e);if(o&&o!==e.entries)for(var i,s=o.call(e);!(i=s.next()).done;)d.isValidElement(i.value)&&a(i.value,t)}}function l(e){var n=e.type;if("function"==typeof n){var r=n.displayName||n.name;n.propTypes&&p(n.propTypes,e.props,"prop",r,e,null),"function"==typeof n.getDefaultProps&&"production"!==t.env.NODE_ENV&&m(n.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}var u=n(7),c=n(10),d=n(4),p=n(32),f=n(8),h=n(18),m=n(3),g=n(11),y={},A={createElement:function(e,n,i){var a="string"==typeof e||"function"==typeof e;if(!a&&"function"!=typeof e&&"string"!=typeof e){var u="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(u+=" You likely forgot to export your component from the file it's defined in.");var p=o(n);u+=p||r(),u+=c.getCurrentStackAddendum();var f=null!=n&&void 0!==n.__source?n.__source:null;c.pushNonStandardWarningStack(!0,f),"production"!==t.env.NODE_ENV&&m(!1,"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",null==e?e:typeof e,u),c.popNonStandardWarningStack()}var h=d.createElement.apply(this,arguments);if(null==h)return h;if(a)for(var g=2;g<arguments.length;g++)s(arguments[g],e);return l(h),h},createFactory:function(e){var n=A.createElement.bind(null,e);return n.type=e,"production"!==t.env.NODE_ENV&&f&&Object.defineProperty(n,"type",{enumerable:!1,get:function(){return g(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),n},cloneElement:function(e,t,n){for(var r=d.cloneElement.apply(this,arguments),o=2;o<arguments.length;o++)s(arguments[o],r.type);return l(r),r}};e.exports=A}).call(t,n(1))},function(e,t,n){(function(t){"use strict";function r(e,n){if("production"!==t.env.NODE_ENV){var r=e.constructor;"production"!==t.env.NODE_ENV&&o(!1,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.",n,n,r&&(r.displayName||r.name)||"ReactClass")}}var o=n(3),i={isMounted:function(e){return!1},enqueueCallback:function(e,t){},enqueueForceUpdate:function(e){r(e,"forceUpdate")},enqueueReplaceState:function(e,t){r(e,"replaceState")},enqueueSetState:function(e,t){r(e,"setState")}};e.exports=i}).call(t,n(1))},function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.iterator,r="@@iterator";e.exports=function(e){var t=e&&(n&&e[n]||e[r]);if("function"==typeof t)return t}},function(e,t,n){(function(t){"use strict";var r=n(6),o=n(12),i=n(2);if("production"!==t.env.NODE_ENV)var a=n(3);var s,l="mixins";s="production"!==t.env.NODE_ENV?{prop:"prop",context:"context",childContext:"child context"}:{},e.exports=function(e,n,u){function c(e,n,r){for(var o in n)n.hasOwnProperty(o)&&"production"!==t.env.NODE_ENV&&a("function"==typeof n[o],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e.displayName||"ReactClass",s[r],o)}function d(e,t){var n=A.hasOwnProperty(t)?A[t]:null;w.hasOwnProperty(t)&&i("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t),e&&i("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t)}function p(e,r){if(r){i("function"!=typeof r,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),i(!n(r),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var o=e.prototype,s=o.__reactAutoBindPairs;for(var u in r.hasOwnProperty(l)&&b.mixins(e,r.mixins),r)if(r.hasOwnProperty(u)&&u!==l){var c=r[u],p=o.hasOwnProperty(u);if(d(p,u),b.hasOwnProperty(u))b[u](e,c);else{var f=A.hasOwnProperty(u);if("function"!=typeof c||f||p||!1===r.autobind)if(p){var g=A[u];i(f&&("DEFINE_MANY_MERGED"===g||"DEFINE_MANY"===g),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",g,u),"DEFINE_MANY_MERGED"===g?o[u]=h(o[u],c):"DEFINE_MANY"===g&&(o[u]=m(o[u],c))}else o[u]=c,"production"!==t.env.NODE_ENV&&"function"==typeof c&&r.displayName&&(o[u].displayName=r.displayName+"_"+u);else s.push(u,c),o[u]=c}}}else if("production"!==t.env.NODE_ENV){var y=typeof r,v="object"===y&&null!==r;"production"!==t.env.NODE_ENV&&a(v,"%s: You're attempting to include a mixin that is either null or not an object. Check the mixins included by the component, as well as any mixins they include themselves. Expected object but got %s.",e.displayName||"ReactClass",null===r?null:y)}}function f(e,t){for(var n in i(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),t)t.hasOwnProperty(n)&&(i(void 0===e[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),e[n]=t[n]);return e}function h(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return f(o,n),f(o,r),o}}function m(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function g(e,n){var r=n.bind(e);if("production"!==t.env.NODE_ENV){r.__reactBoundContext=e,r.__reactBoundMethod=n,r.__reactBoundArguments=null;var o=e.constructor.displayName,i=r.bind;r.bind=function(s){for(var l=arguments.length,u=Array(l>1?l-1:0),c=1;c<l;c++)u[c-1]=arguments[c];if(s!==e&&null!==s)"production"!==t.env.NODE_ENV&&a(!1,"bind(): React component methods may only be bound to the component instance. See %s",o);else if(!u.length)return"production"!==t.env.NODE_ENV&&a(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",o),r;var d=i.apply(r,arguments);return d.__reactBoundContext=e,d.__reactBoundMethod=n,d.__reactBoundArguments=u,d}}return r}var y=[],A={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},b={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)p(e,t[n])},childContextTypes:function(e,n){"production"!==t.env.NODE_ENV&&c(e,n,"childContext"),e.childContextTypes=r({},e.childContextTypes,n)},contextTypes:function(e,n){"production"!==t.env.NODE_ENV&&c(e,n,"context"),e.contextTypes=r({},e.contextTypes,n)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=h(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,n){"production"!==t.env.NODE_ENV&&c(e,n,"prop"),e.propTypes=r({},e.propTypes,n)},statics:function(e,t){!function(e,t){if(t)for(var n in t){var r=t[n];t.hasOwnProperty(n)&&(i(!(n in b),'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n),i(!(n in e),"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),e[n]=r)}}(e,t)},autobind:function(){}},v={componentDidMount:function(){this.__isMounted=!0}},C={componentWillUnmount:function(){this.__isMounted=!1}},w={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e,t)},isMounted:function(){return"production"!==t.env.NODE_ENV&&(a(this.__didWarnIsMounted,"%s: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",this.constructor&&this.constructor.displayName||this.name||"Component"),this.__didWarnIsMounted=!0),!!this.__isMounted}},x=function(){};return r(x.prototype,e.prototype,w),function(e){var n=function(e,r,s){"production"!==t.env.NODE_ENV&&a(this instanceof n,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"),this.__reactAutoBindPairs.length&&function(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var r=t[n],o=t[n+1];e[r]=g(e,o)}}(this),this.props=e,this.context=r,this.refs=o,this.updater=s||u,this.state=null;var l=this.getInitialState?this.getInitialState():null;"production"!==t.env.NODE_ENV&&void 0===l&&this.getInitialState._isMockFunction&&(l=null),i("object"==typeof l&&!Array.isArray(l),"%s.getInitialState(): must return an object or null",n.displayName||"ReactCompositeComponent"),this.state=l};for(var r in n.prototype=new x,n.prototype.constructor=n,n.prototype.__reactAutoBindPairs=[],y.forEach(p.bind(null,n)),p(n,v),p(n,e),p(n,C),n.getDefaultProps&&(n.defaultProps=n.getDefaultProps()),"production"!==t.env.NODE_ENV&&(n.getDefaultProps&&(n.getDefaultProps.isReactClassApproved={}),n.prototype.getInitialState&&(n.prototype.getInitialState.isReactClassApproved={})),i(n.prototype.render,"createClass(...): Class specification must implement a `render` method."),"production"!==t.env.NODE_ENV&&(a(!n.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",e.displayName||"A component"),a(!n.prototype.componentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",e.displayName||"A component")),A)n.prototype[r]||(n.prototype[r]=null);return n}}}).call(t,n(1))},function(e,t,n){(function(t){"use strict";if("production"!==t.env.NODE_ENV)var r=n(2),o=n(3),i=n(13),a={};e.exports=function(e,n,s,l,u){if("production"!==t.env.NODE_ENV)for(var c in e)if(e.hasOwnProperty(c)){var d;try{r("function"==typeof e[c],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",l||"React class",s,c),d=e[c](n,c,l,s,null,i)}catch(e){d=e}if(o(!d||d instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",l||"React class",s,c,typeof d),d instanceof Error&&!(d.message in a)){a[d.message]=!0;var p=u?u():"";o(!1,"Failed %s type: %s%s",s,d.message,null!=p?p:"")}}}}).call(t,n(1))},function(e,t,n){"use strict";var r=n(22);e.exports=function(e){return r(e,!1)}},function(e,t,n){(function(t){"use strict";var r=n(9),o=n(2),i=n(3),a=n(13),s=n(20);e.exports=function(e,n){function l(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function u(e){this.message=e,this.stack=""}function c(e){function r(r,c,d,p,f,h,m){if(p=p||A,h=h||d,m!==a)if(n)o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else if("production"!==t.env.NODE_ENV&&"undefined"!=typeof console){var g=p+":"+d;!s[g]&&l<3&&(i(!1,"You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",h,p),s[g]=!0,l++)}return null==c[d]?r?new u(null===c[d]?"The "+f+" `"+h+"` is marked as required in `"+p+"`, but its value is `null`.":"The "+f+" `"+h+"` is marked as required in `"+p+"`, but its value is `undefined`."):null:e(c,d,p,f,h)}if("production"!==t.env.NODE_ENV)var s={},l=0;var c=r.bind(null,!1);return c.isRequired=r.bind(null,!0),c}function d(e){return c((function(t,n,r,o,i,a){var s=t[n];return f(s)!==e?new u("Invalid "+o+" `"+i+"` of type `"+h(s)+"` supplied to `"+r+"`, expected `"+e+"`."):null}))}function p(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(p);if(null===t||e(t))return!0;var n=function(e){var t=e&&(g&&e[g]||e[y]);if("function"==typeof t)return t}(t);if(!n)return!1;var r,o=n.call(t);if(n!==t.entries){for(;!(r=o.next()).done;)if(!p(r.value))return!1}else for(;!(r=o.next()).done;){var i=r.value;if(i&&!p(i[1]))return!1}return!0;default:return!1}}function f(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||"Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol}(t,e)?"symbol":t}function h(e){if(null==e)return""+e;var t=f(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function m(e){var t=h(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}var g="function"==typeof Symbol&&Symbol.iterator,y="@@iterator",A="<<anonymous>>",b={array:d("array"),bool:d("boolean"),func:d("function"),number:d("number"),object:d("object"),string:d("string"),symbol:d("symbol"),any:c(r.thatReturnsNull),arrayOf:function(e){return c((function(t,n,r,o,i){if("function"!=typeof e)return new u("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var s=t[n];if(!Array.isArray(s))return new u("Invalid "+o+" `"+i+"` of type `"+f(s)+"` supplied to `"+r+"`, expected an array.");for(var l=0;l<s.length;l++){var c=e(s,l,r,o,i+"["+l+"]",a);if(c instanceof Error)return c}return null}))},element:c((function(t,n,r,o,i){var a=t[n];return e(a)?null:new u("Invalid "+o+" `"+i+"` of type `"+f(a)+"` supplied to `"+r+"`, expected a single ReactElement.")})),instanceOf:function(e){return c((function(t,n,r,o,i){if(!(t[n]instanceof e)){var a=e.name||A;return new u("Invalid "+o+" `"+i+"` of type `"+function(e){return e.constructor&&e.constructor.name?e.constructor.name:A}(t[n])+"` supplied to `"+r+"`, expected instance of `"+a+"`.")}return null}))},node:c((function(e,t,n,r,o){return p(e[t])?null:new u("Invalid "+r+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.")})),objectOf:function(e){return c((function(t,n,r,o,i){if("function"!=typeof e)return new u("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var s=t[n],l=f(s);if("object"!==l)return new u("Invalid "+o+" `"+i+"` of type `"+l+"` supplied to `"+r+"`, expected an object.");for(var c in s)if(s.hasOwnProperty(c)){var d=e(s,c,r,o,i+"."+c,a);if(d instanceof Error)return d}return null}))},oneOf:function(e){return Array.isArray(e)?c((function(t,n,r,o,i){for(var a=t[n],s=0;s<e.length;s++)if(l(a,e[s]))return null;return new u("Invalid "+o+" `"+i+"` of value `"+a+"` supplied to `"+r+"`, expected one of "+JSON.stringify(e)+".")})):("production"!==t.env.NODE_ENV&&i(!1,"Invalid argument supplied to oneOf, expected an instance of array."),r.thatReturnsNull)},oneOfType:function(e){if(!Array.isArray(e))return"production"!==t.env.NODE_ENV&&i(!1,"Invalid argument supplied to oneOfType, expected an instance of array."),r.thatReturnsNull;for(var n=0;n<e.length;n++){var o=e[n];if("function"!=typeof o)return i(!1,"Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",m(o),n),r.thatReturnsNull}return c((function(t,n,r,o,i){for(var s=0;s<e.length;s++)if(null==(0,e[s])(t,n,r,o,i,a))return null;return new u("Invalid "+o+" `"+i+"` supplied to `"+r+"`.")}))},shape:function(e){return c((function(t,n,r,o,i){var s=t[n],l=f(s);if("object"!==l)return new u("Invalid "+o+" `"+i+"` of type `"+l+"` supplied to `"+r+"`, expected `object`.");for(var c in e){var d=e[c];if(d){var p=d(s,c,r,o,i+"."+c,a);if(p)return p}}return null}))}};return u.prototype=Error.prototype,b.checkPropTypes=s,b.PropTypes=b,b}}).call(t,n(1))},function(e,t){"use strict";var n={escape:function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))},unescape:function(e){var t={"=0":"=","=2":":"};return(""+("."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1))).replace(/(=0|=2)/g,(function(e){return t[e]}))}};e.exports=n},function(e,t,n){(function(t){"use strict";var r=n(5),o=n(2),i=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},a=function(e){var n=this;e instanceof n||("production"!==t.env.NODE_ENV?o(!1,"Trying to release an instance into a pool of a different type."):r("25")),e.destructor(),n.instancePool.length<n.poolSize&&n.instancePool.push(e)},s=i,l={addPoolingTo:function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||s,n.poolSize||(n.poolSize=10),n.release=a,n},oneArgumentPooler:i,twoArgumentPooler:function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},threeArgumentPooler:function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},fourArgumentPooler:function(e,t,n,r){var o=this;if(o.instancePool.length){var i=o.instancePool.pop();return o.call(i,e,t,n,r),i}return new o(e,t,n,r)}};e.exports=l}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var r=n(6),o=n(14),i=n(26),a=n(27),s=n(4),l=n(29),u=n(31),c=n(33),d=n(34),p=s.createElement,f=s.createFactory,h=s.cloneElement;if("production"!==t.env.NODE_ENV){var m=n(11),g=n(8),y=n(16),A=!1;p=y.createElement,f=y.createFactory,h=y.cloneElement}var b=r,v=function(e){return e};if("production"!==t.env.NODE_ENV){var C=!1,w=!1;b=function(){return m(C,"React.__spread is deprecated and should not be used. Use Object.assign directly or another helper function with similar semantics. You may be seeing this warning due to your compiler. See https://fb.me/react-spread-deprecation for more details."),C=!0,r.apply(null,arguments)},v=function(e){return m(w,"React.createMixin is deprecated and should not be used. In React v16.0, it will be removed. You can use this mixin directly instead. See https://fb.me/createmixin-was-never-implemented for more info."),w=!0,e}}var x={Children:{map:i.map,forEach:i.forEach,count:i.count,toArray:i.toArray,only:d},Component:o.Component,PureComponent:o.PureComponent,createElement:p,cloneElement:h,isValidElement:s.isValidElement,PropTypes:l,createClass:c,createFactory:f,createMixin:v,DOM:a,version:u,__spread:b};if("production"!==t.env.NODE_ENV){var E=!1;g&&(Object.defineProperty(x,"PropTypes",{get:function(){return m(A,"Accessing PropTypes via the main React package is deprecated, and will be removed in  React v16.0. Use the latest available v15.* prop-types package from npm instead. For info on usage, compatibility, migration and more, see https://fb.me/prop-types-docs"),A=!0,l}}),Object.defineProperty(x,"createClass",{get:function(){return m(E,"Accessing createClass via the main React package is deprecated, and will be removed in React v16.0. Use a plain JavaScript class instead. If you're not yet ready to migrate, create-react-class v15.* is available on npm as a temporary, drop-in replacement. For more info see https://fb.me/react-create-class"),E=!0,c}})),x.DOM={};var k=!1;Object.keys(a).forEach((function(e){x.DOM[e]=function(){return k||(m(!1,"Accessing factories like React.DOM.%s has been deprecated and will be removed in v16.0+. Use the react-dom-factories package instead.  Version 1.0 provides a drop-in replacement. For more info, see https://fb.me/react-dom-factories",e),k=!0),a[e].apply(a,arguments)}}))}e.exports=x}).call(t,n(1))},function(e,t,n){"use strict";function r(e){return(""+e).replace(g,"$&/")}function o(e,t){this.func=e,this.context=t,this.count=0}function i(e,t,n){var r=e.func,o=e.context;r.call(o,t,e.count++)}function a(e,t,n,r){this.result=e,this.keyPrefix=t,this.func=n,this.context=r,this.count=0}function s(e,t,n){var o=e.result,i=e.keyPrefix,a=e.func,s=e.context,u=a.call(s,t,e.count++);Array.isArray(u)?l(u,o,n,p.thatReturnsArgument):null!=u&&(d.isValidElement(u)&&(u=d.cloneAndReplaceKey(u,i+(!u.key||t&&t.key===u.key?"":r(u.key)+"/")+n)),o.push(u))}function l(e,t,n,o,i){var l="";null!=n&&(l=r(n)+"/");var u=a.getPooled(t,l,o,i);f(e,s,u),a.release(u)}function u(e,t,n){return null}var c=n(24),d=n(4),p=n(9),f=n(35),h=c.twoArgumentPooler,m=c.fourArgumentPooler,g=/\/+/g;o.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},c.addPoolingTo(o,h),a.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},c.addPoolingTo(a,m);var y={forEach:function(e,t,n){if(null==e)return e;var r=o.getPooled(t,n);f(e,i,r),o.release(r)},map:function(e,t,n){if(null==e)return e;var r=[];return l(e,r,null,t,n),r},mapIntoWithKeyPrefixInternal:l,count:function(e,t){return f(e,u,null)},toArray:function(e){var t=[];return l(e,t,null,p.thatReturnsArgument),t}};e.exports=y},function(e,t,n){(function(t){"use strict";var r=n(4).createFactory;"production"!==t.env.NODE_ENV&&(r=n(16).createFactory);var o={a:r("a"),abbr:r("abbr"),address:r("address"),area:r("area"),article:r("article"),aside:r("aside"),audio:r("audio"),b:r("b"),base:r("base"),bdi:r("bdi"),bdo:r("bdo"),big:r("big"),blockquote:r("blockquote"),body:r("body"),br:r("br"),button:r("button"),canvas:r("canvas"),caption:r("caption"),cite:r("cite"),code:r("code"),col:r("col"),colgroup:r("colgroup"),data:r("data"),datalist:r("datalist"),dd:r("dd"),del:r("del"),details:r("details"),dfn:r("dfn"),dialog:r("dialog"),div:r("div"),dl:r("dl"),dt:r("dt"),em:r("em"),embed:r("embed"),fieldset:r("fieldset"),figcaption:r("figcaption"),figure:r("figure"),footer:r("footer"),form:r("form"),h1:r("h1"),h2:r("h2"),h3:r("h3"),h4:r("h4"),h5:r("h5"),h6:r("h6"),head:r("head"),header:r("header"),hgroup:r("hgroup"),hr:r("hr"),html:r("html"),i:r("i"),iframe:r("iframe"),img:r("img"),input:r("input"),ins:r("ins"),kbd:r("kbd"),keygen:r("keygen"),label:r("label"),legend:r("legend"),li:r("li"),link:r("link"),main:r("main"),map:r("map"),mark:r("mark"),menu:r("menu"),menuitem:r("menuitem"),meta:r("meta"),meter:r("meter"),nav:r("nav"),noscript:r("noscript"),object:r("object"),ol:r("ol"),optgroup:r("optgroup"),option:r("option"),output:r("output"),p:r("p"),param:r("param"),picture:r("picture"),pre:r("pre"),progress:r("progress"),q:r("q"),rp:r("rp"),rt:r("rt"),ruby:r("ruby"),s:r("s"),samp:r("samp"),script:r("script"),section:r("section"),select:r("select"),small:r("small"),source:r("source"),span:r("span"),strong:r("strong"),style:r("style"),sub:r("sub"),summary:r("summary"),sup:r("sup"),table:r("table"),tbody:r("tbody"),td:r("td"),textarea:r("textarea"),tfoot:r("tfoot"),th:r("th"),thead:r("thead"),time:r("time"),title:r("title"),tr:r("tr"),track:r("track"),u:r("u"),ul:r("ul"),var:r("var"),video:r("video"),wbr:r("wbr"),circle:r("circle"),clipPath:r("clipPath"),defs:r("defs"),ellipse:r("ellipse"),g:r("g"),image:r("image"),line:r("line"),linearGradient:r("linearGradient"),mask:r("mask"),path:r("path"),pattern:r("pattern"),polygon:r("polygon"),polyline:r("polyline"),radialGradient:r("radialGradient"),rect:r("rect"),stop:r("stop"),svg:r("svg"),text:r("text"),tspan:r("tspan")};e.exports=o}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),e.exports=n}).call(t,n(1))},function(e,t,n){"use strict";var r=n(4).isValidElement,o=n(21);e.exports=o(r)},function(e,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){"use strict";e.exports="15.6.1"},function(e,t,n){(function(t){"use strict";var r,o=n(5),i=n(28),a=n(30),s=n(2),l=n(3);void 0!==t&&t.env&&"test"===t.env.NODE_ENV&&(r=n(10));var u={};e.exports=function(e,c,d,p,f,h){for(var m in e)if(e.hasOwnProperty(m)){var g;try{"function"!=typeof e[m]&&("production"!==t.env.NODE_ENV?s(!1,"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",p||"React class",i[d],m):o("84",p||"React class",i[d],m)),g=e[m](c,m,p,d,null,a)}catch(e){g=e}if("production"!==t.env.NODE_ENV&&l(!g||g instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",p||"React class",i[d],m,typeof g),g instanceof Error&&!(g.message in u)){u[g.message]=!0;var y="";"production"!==t.env.NODE_ENV&&(r||(r=n(10)),null!==h?y=r.getStackAddendumByID(h):null!==f&&(y=r.getCurrentStackAddendum(f))),"production"!==t.env.NODE_ENV&&l(!1,"Failed %s type: %s%s",d,g.message,y)}}}}).call(t,n(1))},function(e,t,n){"use strict";var r=n(14).Component,o=n(4).isValidElement,i=n(17),a=n(19);e.exports=a(r,o,i)},function(e,t,n){(function(t){"use strict";var r=n(5),o=n(4),i=n(2);e.exports=function(e){return o.isValidElement(e)||("production"!==t.env.NODE_ENV?i(!1,"React.Children.only expected to receive a single React element child."):r("143")),e}}).call(t,n(1))},function(e,t,n){(function(t){"use strict";function r(e,t){return e&&"object"==typeof e&&null!=e.key?c.escape(e.key):t.toString(36)}function o(e,n,m,g){var y=typeof e;if("undefined"!==y&&"boolean"!==y||(e=null),null===e||"string"===y||"number"===y||"object"===y&&e.$$typeof===s)return m(g,e,""===n?p+r(e,0):n),1;var A,b=0,v=""===n?p:n+f;if(Array.isArray(e))for(var C=0;C<e.length;C++)b+=o(A=e[C],v+r(A,C),m,g);else{var w=l(e);if(w){var x,E=w.call(e);if(w!==e.entries)for(var k=0;!(x=E.next()).done;)b+=o(A=x.value,v+r(A,k++),m,g);else{if("production"!==t.env.NODE_ENV){var B="";if(a.current){var S=a.current.getName();S&&(B=" Check the render method of `"+S+"`.")}"production"!==t.env.NODE_ENV&&d(h,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead.%s",B),h=!0}for(;!(x=E.next()).done;){var O=x.value;O&&(b+=o(A=O[1],v+c.escape(O[0])+f+r(A,0),m,g))}}}else if("object"===y){var T="";if("production"!==t.env.NODE_ENV&&(T=" If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.",e._isReactElement&&(T=" It looks like you're using an element created by a different version of React. Make sure to use only one copy of React."),a.current)){var D=a.current.getName();D&&(T+=" Check the render method of `"+D+"`.")}var N=String(e);"production"!==t.env.NODE_ENV?u(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===N?"object with keys {"+Object.keys(e).join(", ")+"}":N,T):i("31","[object Object]"===N?"object with keys {"+Object.keys(e).join(", ")+"}":N,T)}}return b}var i=n(5),a=n(7),s=n(15),l=n(18),u=n(2),c=n(23),d=n(3),p=".",f=":",h=!1;e.exports=function(e,t,n){return null==e?0:o(e,"",t,n)}}).call(t,n(1))},function(e,t,n){"use strict";e.exports=n(25)}])},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,A=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,v=n?Symbol.for("react.scope"):60119;function C(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case i:case s:case a:case f:return e;default:switch(e=e&&e.$$typeof){case u:case p:case g:case m:case l:return e;default:return t}}case o:return t}}}function w(e){return C(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=l,t.Element=r,t.ForwardRef=p,t.Fragment=i,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=s,t.StrictMode=a,t.Suspense=f,t.isAsyncMode=function(e){return w(e)||C(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return C(e)===u},t.isContextProvider=function(e){return C(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return C(e)===p},t.isFragment=function(e){return C(e)===i},t.isLazy=function(e){return C(e)===g},t.isMemo=function(e){return C(e)===m},t.isPortal=function(e){return C(e)===o},t.isProfiler=function(e){return C(e)===s},t.isStrictMode=function(e){return C(e)===a},t.isSuspense=function(e){return C(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===s||e===a||e===f||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===u||e.$$typeof===p||e.$$typeof===A||e.$$typeof===b||e.$$typeof===v||e.$$typeof===y)},t.typeOf=C},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},8359:(e,t)=>{"use strict";if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},2973:(e,t,n)=>{"use strict";n(8359)},9658:(e,t,n)=>{var r=n(5826);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],i=0;i<t.length;i++)o.push(e(t[i],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",d(r)),n)}(t,n,o):function(e,t,n){return p(i(e,n),t,n)}(t,n,o)},e.exports.parse=i,e.exports.compile=function(e,t){return s(i(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,s="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var d=n[0],p=n[1],f=n.index;if(s+=e.slice(a,f),a=f+d.length,p)s+=p[1];else{var h=e[a],m=n[2],g=n[3],y=n[4],A=n[5],b=n[6],v=n[7];s&&(r.push(s),s="");var C=null!=m&&null!=h&&h!==m,w="+"===b||"*"===b,x="?"===b||"*"===b,E=n[2]||c,k=y||A;r.push({name:g||i++,prefix:m||"",delimiter:E,optional:x,repeat:w,partial:C,asterisk:!!v,pattern:k?u(k):v?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",d(t)));return function(t,o){for(var i="",s=t||{},l=(o||{}).pretty?a:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var d,p=s[c.name];if(null==p){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var f=0;f<p.length;f++){if(d=l(p[f]),!n[u].test(d))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(d)+"`");i+=(0===f?c.prefix:c.delimiter)+d}}else{if(d=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(p),!n[u].test(d))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+d+'"');i+=c.prefix+d}}else i+=c}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function d(e){return e&&e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)a+=l(u);else{var p=l(u.prefix),f="(?:"+u.pattern+")";t.push(u),u.repeat&&(f+="(?:"+p+f+")*"),a+=f=u.optional?u.partial?p+"("+f+")?":"(?:"+p+"("+f+"))?":p+"("+f+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,d(n)),t)}},5251:(e,t,n)=>{"use strict";n(7418);var r=n(7294),o=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),t.Fragment=i("react.fragment")}var a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s=Object.prototype.hasOwnProperty,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,i={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)s.call(t,r)&&!l.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:c,props:i,_owner:a.current}}t.jsx=u,t.jsxs=u},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),i=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function A(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var b=A.prototype=new y;b.constructor=A,r(b,g.prototype),b.isPureReactComponent=!0;var v={current:null},C=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,i={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&!w.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:s,props:i,_owner:v.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var k=/\/+/g;function B(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function S(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+B(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(k,"$&/")+"/"),S(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(k,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+B(s=e[u],u);l+=S(s,t,n,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=S(s=s.value,t,n,c=r+B(s,u++),a);else if("object"===s)throw t=""+e,Error(f(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function O(e,t,n){if(null==e)return e;var r=[],o=0;return S(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var D={current:null};function N(){var e=D.current;if(null===e)throw Error(f(321));return e}var I={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:v,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(f(143));return e}},t.Component=g,t.PureComponent=A,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,n){if(null==e)throw Error(f(267,e));var i=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=v.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)C.call(t,c)&&!w.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];i.children=u}return{$$typeof:o,type:e.type,key:a,ref:s,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},5666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),a=new O(r||[]);return i._invoke=function(e,t,n){var r=d;return function(o,i){if(r===f)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return D()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=k(a,n);if(s){if(s===m)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var l=c(e,t,n);if("normal"===l.type){if(r=n.done?h:p,l.arg===m)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=h,n.method="throw",n.arg=l.arg)}}}(e,n,a),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",p="suspendedYield",f="executing",h="completed",m={};function g(){}function y(){}function A(){}var b={};l(b,i,(function(){return this}));var v=Object.getPrototypeOf,C=v&&v(v(T([])));C&&C!==n&&r.call(C,i)&&(b=C);var w=A.prototype=g.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,i,a,s){var l=c(e[o],e,i);if("throw"!==l.type){var u=l.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(d).then((function(e){u.value=e,a(u)}),(function(e){return n("throw",e,a,s)}))}s(l.arg)}var o;this._invoke=function(e,r){function i(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(i,i):i()}}function k(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,k(e,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,m;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function B(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function S(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(B,this),this.reset(!0)}function T(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:D}}function D(){return{value:t,done:!0}}return y.prototype=A,l(w,"constructor",A),l(A,"constructor",y),y.displayName=l(A,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,A):(e.__proto__=A,l(e,s,"GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},x(E.prototype),l(E.prototype,a,(function(){return this})),e.AsyncIterator=E,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new E(u(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},x(w),l(w,s,"Generator"),l(w,i,(function(){return this})),l(w,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=T,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(S),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var l=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),S(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;S(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:T(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,g=null,y=-1,A=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):A=0<e?Math.floor(1e3/e):5};var v=new MessageChannel,C=v.port2;v.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+A;try{g(!0,e)?C.postMessage(null):(m=!1,g=null)}catch(e){throw C.postMessage(null),e}}else m=!1},n=function(e){g=e,m||(m=!0,C.postMessage(null))},r=function(e,n){y=p((function(){e(t.unstable_now())}),n)},o=function(){f(y),y=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<k(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],s=i+1,l=e[s];if(void 0!==a&&0>k(a,n))void 0!==l&&0>k(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>k(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var B=[],S=[],O=1,T=null,D=3,N=!1,I=!1,P=!1;function R(e){for(var t=x(S);null!==t;){if(null===t.callback)E(S);else{if(!(t.startTime<=e))break;E(S),t.sortIndex=t.expirationTime,w(B,t)}t=x(S)}}function M(e){if(P=!1,R(e),!I)if(null!==x(B))I=!0,n(Z);else{var t=x(S);null!==t&&r(M,t.startTime-e)}}function Z(e,n){I=!1,P&&(P=!1,o()),N=!0;var i=D;try{for(R(n),T=x(B);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=T.callback;if("function"==typeof a){T.callback=null,D=T.priorityLevel;var s=a(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?T.callback=s:T===x(B)&&E(B),R(n)}else E(B);T=x(B)}if(null!==T)var l=!0;else{var u=x(S);null!==u&&r(M,u.startTime-n),l=!1}return l}finally{T=null,D=i,N=!1}}var _=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){I||N||(I=!0,n(Z))},t.unstable_getCurrentPriorityLevel=function(){return D},t.unstable_getFirstCallbackNode=function(){return x(B)},t.unstable_next=function(e){switch(D){case 1:case 2:case 3:var t=3;break;default:t=D}var n=D;D=t;try{return e()}finally{D=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=_,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=D;D=e;try{return t()}finally{D=n}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:O++,callback:i,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,w(S,e),null===x(B)&&e===x(S)&&(P?o():P=!0,r(M,a-s))):(e.sortIndex=l,w(B,e),I||N||(I=!0,n(Z))),e},t.unstable_wrapCallback=function(e){var t=D;return function(){var n=D;D=t;try{return e.apply(this,arguments)}finally{D=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=i[u]||0,d="".concat(u," ").concat(c);i[u]=c+1;var p=n(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var h=o(f,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=r(e,o),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},2281:e=>{"use strict";var t,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},o=0,i=0;function a(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function s(){var e=a(+new Date);return e!==t?(o=0,t=e):e+"."+a(o++)}for(;i<64;i++)r[n[i]]=i;s.encode=a,s.decode=function(e){var t=0;for(i=0;i<e.length;i++)t=64*t+r[e.charAt(i)];return t},e.exports=s},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{"use strict";n.d(r,{h:()=>Mm});var e={};n.r(e),n.d(e,{Decoder:()=>Eh,Encoder:()=>xh,PacketType:()=>wh,protocol:()=>Ch});var t=n(7294),o=n(3935),i=n(3379),a=n.n(i),s=n(7795),l=n.n(s),u=n(569),c=n.n(u),d=n(3565),p=n.n(d),f=n(9216),h=n.n(f),m=n(4589),g=n.n(m),y=n(6108),A={};A.styleTagTransform=g(),A.setAttributes=p(),A.insert=c().bind(null,"head"),A.domAPI=l(),A.insertStyleElement=h(),a()(y.Z,A),y.Z&&y.Z.locals&&y.Z.locals;var b=n(9669),v=n.n(b);function C(e,t){return C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},C(e,t)}function w(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,C(e,t)}n(5666);var x=n(5697),E=n.n(x),k=n(7462);function B(e){return"/"===e.charAt(0)}function S(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}function O(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}const T=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=O(t),o=O(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};const D=function(e,t){if(!e)throw new Error("Invariant failed")};function N(e){return"/"===e.charAt(0)?e:"/"+e}function I(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function P(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function R(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function M(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e),o.state=t):(void 0===(o=(0,k.Z)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&B(e),a=t&&B(t),s=i||a;if(e&&B(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var l=o[o.length-1];n="."===l||".."===l||""===l}else n=!1;for(var u=0,c=o.length;c>=0;c--){var d=o[c];"."===d?S(o,c):".."===d?(S(o,c),u++):u&&(S(o,c),u--)}if(!s)for(;u--;u)o.unshift("..");!s||""===o[0]||o[0]&&B(o[0])||o.unshift("");var p=o.join("/");return n&&"/"!==p.substr(-1)&&(p+="/"),p}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function Z(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var _=!("undefined"==typeof window||!window.document||!window.document.createElement);function j(e,t){t(window.confirm(e))}var z="popstate",L="hashchange";function U(){try{return window.history.state||{}}catch(e){return{}}}function F(e){void 0===e&&(e={}),_||D(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,s=void 0!==a&&a,l=i.getUserConfirmation,u=void 0===l?j:l,c=i.keyLength,d=void 0===c?6:c,p=e.basename?P(N(e.basename)):"";function f(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return p&&(i=I(i,p)),M(i,r,n)}function h(){return Math.random().toString(36).substr(2,d)}var m=Z();function g(e){(0,k.Z)(T,e),T.length=n.length,m.notifyListeners(T.location,T.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||v(f(e.state))}function A(){v(f(U()))}var b=!1;function v(e){b?(b=!1,g()):m.confirmTransitionTo(e,"POP",u,(function(t){t?g({action:"POP",location:e}):function(e){var t=T.location,n=w.indexOf(t.key);-1===n&&(n=0);var r=w.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,E(o))}(e)}))}var C=f(U()),w=[C.key];function x(e){return p+R(e)}function E(e){n.go(e)}var B=0;function S(e){1===(B+=e)&&1===e?(window.addEventListener(z,y),o&&window.addEventListener(L,A)):0===B&&(window.removeEventListener(z,y),o&&window.removeEventListener(L,A))}var O=!1,T={length:n.length,action:"POP",location:C,createHref:x,push:function(e,t){var o="PUSH",i=M(e,t,h(),T.location);m.confirmTransitionTo(i,o,u,(function(e){if(e){var t=x(i),a=i.key,l=i.state;if(r)if(n.pushState({key:a,state:l},null,t),s)window.location.href=t;else{var u=w.indexOf(T.location.key),c=w.slice(0,u+1);c.push(i.key),w=c,g({action:o,location:i})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",i=M(e,t,h(),T.location);m.confirmTransitionTo(i,o,u,(function(e){if(e){var t=x(i),a=i.key,l=i.state;if(r)if(n.replaceState({key:a,state:l},null,t),s)window.location.replace(t);else{var u=w.indexOf(T.location.key);-1!==u&&(w[u]=i.key),g({action:o,location:i})}else window.location.replace(t)}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return O||(S(1),O=!0),function(){return O&&(O=!1,S(-1)),t()}},listen:function(e){var t=m.appendListener(e);return S(1),function(){S(-1),t()}}};return T}var Y=1073741823,$="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function W(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const V=t.createContext||function(e,n){var r,o,i,a="__create-react-context-"+(($[i="__global_unique_id__"]=($[i]||0)+1)+"__"),s=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=W(t.props.value),t}w(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?t=0:(t="function"==typeof n?n(r,o):Y,0!=(t|=0)&&this.emitter.set(e.value,t))}var i,a},r.render=function(){return this.props.children},t}(t.Component);s.childContextTypes=((r={})[a]=E().object.isRequired,r);var l=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}w(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?Y:t},r.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?Y:e},r.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},r.getValue=function(){return this.context[a]?this.context[a].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(t.Component);return l.contextTypes=((o={})[a]=E().object,o),{Provider:s,Consumer:l}};var q=n(9658),G=n.n(q),H=(n(9864),n(3366)),Q=(n(8679),function(e){var t=V();return t.displayName=e,t}),K=Q("Router-History"),X=Q("Router"),J=function(e){function n(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}w(n,e),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},r.render=function(){return t.createElement(X.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},t.createElement(K.Provider,{children:this.props.children||null,value:this.props.history}))},n}(t.Component);t.Component;var ee=function(e){function t(){return e.apply(this,arguments)||this}w(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(t.Component),te={},ne=0;function re(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(te[e])return te[e];var t=G().compile(e);return ne<1e4&&(te[e]=t,ne++),t}(e)(t,{pretty:!0})}function oe(e){var n=e.computedMatch,r=e.to,o=e.push,i=void 0!==o&&o;return t.createElement(X.Consumer,null,(function(e){e||D(!1);var o=e.history,a=e.staticContext,s=i?o.push:o.replace,l=M(n?"string"==typeof r?re(r,n.params):(0,k.Z)({},r,{pathname:re(r.pathname,n.params)}):r);return a?(s(l),null):t.createElement(ee,{onMount:function(){s(l)},onUpdate:function(e,t){var n,r,o=M(t.to);n=o,r=(0,k.Z)({},l,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&T(n.state,r.state)||s(l)},to:r})}))}var ie={},ae=0;function se(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,s=void 0!==a&&a,l=n.sensitive,u=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ie[n]||(ie[n]={});if(r[e])return r[e];var o=[],i={regexp:G()(e,o,t),keys:o};return ae<1e4&&(r[e]=i,ae++),i}(n,{end:i,strict:s,sensitive:u}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var c=l[0],d=l.slice(1),p=e===c;return i&&!p?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=d[n],e}),{})}}),null)}var le=function(e){function n(){return e.apply(this,arguments)||this}return w(n,e),n.prototype.render=function(){var e=this;return t.createElement(X.Consumer,null,(function(n){n||D(!1);var r=e.props.location||n.location,o=e.props.computedMatch?e.props.computedMatch:e.props.path?se(r.pathname,e.props):n.match,i=(0,k.Z)({},n,{location:r,match:o}),a=e.props,s=a.children,l=a.component,u=a.render;return Array.isArray(s)&&function(e){return 0===t.Children.count(e)}(s)&&(s=null),t.createElement(X.Provider,{value:i},i.match?s?"function"==typeof s?s(i):s:l?t.createElement(l,i):u?u(i):null:"function"==typeof s?s(i):null)}))},n}(t.Component);t.Component;var ue=function(e){function n(){return e.apply(this,arguments)||this}return w(n,e),n.prototype.render=function(){var e=this;return t.createElement(X.Consumer,null,(function(n){n||D(!1);var r,o,i=e.props.location||n.location;return t.Children.forEach(e.props.children,(function(e){if(null==o&&t.isValidElement(e)){r=e;var a=e.props.path||e.props.from;o=a?se(i.pathname,(0,k.Z)({},e.props,{path:a})):n.match}})),o?t.cloneElement(r,{location:i,computedMatch:o}):null}))},n}(t.Component),ce=t.useContext;function de(){return ce(K)}var pe=function(e){function n(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=F(t.props),t}return w(n,e),n.prototype.render=function(){return t.createElement(J,{history:this.history,children:this.props.children})},n}(t.Component);t.Component;var fe=function(e,t){return"function"==typeof e?e(t):e},he=function(e,t){return"string"==typeof e?M(e,null,null,t):e},me=function(e){return e},ge=t.forwardRef;void 0===ge&&(ge=me);var ye=ge((function(e,n){var r=e.innerRef,o=e.navigate,i=e.onClick,a=(0,H.Z)(e,["innerRef","navigate","onClick"]),s=a.target,l=(0,k.Z)({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return l.ref=me!==ge&&n||r,t.createElement("a",l)})),Ae=ge((function(e,n){var r=e.component,o=void 0===r?ye:r,i=e.replace,a=e.to,s=e.innerRef,l=(0,H.Z)(e,["component","replace","to","innerRef"]);return t.createElement(X.Consumer,null,(function(e){e||D(!1);var r=e.history,u=he(fe(a,e.location),e.location),c=u?r.createHref(u):"",d=(0,k.Z)({},l,{href:c,navigate:function(){var t=fe(a,e.location),n=R(e.location)===R(he(t));(i||n?r.replace:r.push)(t)}});return me!==ge?d.ref=n||s:d.innerRef=s,t.createElement(o,d)}))})),be=function(e){return e},ve=t.forwardRef;void 0===ve&&(ve=be),ve((function(e,n){var r=e["aria-current"],o=void 0===r?"page":r,i=e.activeClassName,a=void 0===i?"active":i,s=e.activeStyle,l=e.className,u=e.exact,c=e.isActive,d=e.location,p=e.sensitive,f=e.strict,h=e.style,m=e.to,g=e.innerRef,y=(0,H.Z)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return t.createElement(X.Consumer,null,(function(e){e||D(!1);var r=d||e.location,i=he(fe(m,r),r),A=i.pathname,b=A&&A.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),v=b?se(r.pathname,{path:b,exact:u,sensitive:p,strict:f}):null,C=!!(c?c(v,r):v),w="function"==typeof l?l(C):l,x="function"==typeof h?h(C):h;C&&(w=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(w,a),x=(0,k.Z)({},x,s));var E=(0,k.Z)({"aria-current":C&&o||null,className:w,style:x,to:i},y);return be!==ve?E.ref=n||g:E.innerRef=g,t.createElement(Ae,E)}))}));var Ce=t.createContext(null),we=function(e){e()},xe=function(){return we},Ee={notify:function(){},get:function(){return[]}};function ke(e,t){var n,r=Ee;function o(){a.onStateChange&&a.onStateChange()}function i(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){var e=xe(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}var a={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=Ee)},getListeners:function(){return r}};return a}var Be="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?t.useLayoutEffect:t.useEffect;const Se=function(e){var n=e.store,r=e.context,o=e.children,i=(0,t.useMemo)((function(){var e=ke(n);return e.onStateChange=e.notifyNestedSubs,{store:n,subscription:e}}),[n]),a=(0,t.useMemo)((function(){return n.getState()}),[n]);Be((function(){var e=i.subscription;return e.trySubscribe(),a!==n.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,a]);var s=r||Ce;return t.createElement(s.Provider,{value:i},o)};function Oe(){return(0,t.useContext)(Ce)}function Te(e){void 0===e&&(e=Ce);var n=e===Ce?Oe:function(){return(0,t.useContext)(e)};return function(){return n().store}}n(2973);var De=Te();function Ne(e){void 0===e&&(e=Ce);var t=e===Ce?De:Te(e);return function(){return t().dispatch}}var Ie=Ne(),Pe=function(e,t){return e===t};function Re(e){void 0===e&&(e=Ce);var n=e===Ce?Oe:function(){return(0,t.useContext)(e)};return function(e,r){void 0===r&&(r=Pe);var o=n(),i=function(e,n,r,o){var i,a=(0,t.useReducer)((function(e){return e+1}),0)[1],s=(0,t.useMemo)((function(){return ke(r,o)}),[r,o]),l=(0,t.useRef)(),u=(0,t.useRef)(),c=(0,t.useRef)(),d=(0,t.useRef)(),p=r.getState();try{if(e!==u.current||p!==c.current||l.current){var f=e(p);i=void 0!==d.current&&n(f,d.current)?d.current:f}else i=d.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return Be((function(){u.current=e,c.current=p,d.current=i,l.current=void 0})),Be((function(){function e(){try{var e=r.getState();if(e===c.current)return;var t=u.current(e);if(n(t,d.current))return;d.current=t,c.current=e}catch(e){l.current=e}a()}return s.onStateChange=e,s.trySubscribe(),e(),function(){return s.tryUnsubscribe()}}),[r,s]),i}(e,r,o.store,o.subscription);return(0,t.useDebugValue)(i),i}}var Me,Ze=Re();Me=o.unstable_batchedUpdates,we=Me;var _e="SIGN_IN",je="SIGN_OUT",ze="CREATE_ACCOUNT",Le="SET_USER",Ue="SHOW_CREATE_STUDY_GROUP_POPUP",Fe="SHOW_JOIN_STUDY_GROUP_POPUP",Ye="SHOW_EDIT_STUDY_GROUP_POPUP",$e="SHOW_CREATE_MEETING_STUDY_GROUP_POPUP",We="SHOW_CREATE_POST_STUDY_GROUP_POPUP",Ve="SHOW_VIEW_POST_STUDY_GROUP_POPUP",qe="SHOW_VIEW_MEETINGS_STUDY_GROUP_POPUP",Ge="SHOW_VIEW_MEMBER_POPUP",He="SHOW_INPUT_POPUP",Qe="SHOW_CONFIRMATION_POPUP",Ke="REPORT_POPUP",Xe="CLOSE_POPUP",Je="ADD_STUDY_GROUP",et="LOAD_STUDY_GROUPS",tt="POPULATE_SEARCH",nt="CLEAR_STUDY_GROUPS",rt="SHOW_ERROR_NOTIFICATION",ot="SHOW_SUCCESS_NOTIFICATION",it="HIDE_NOTIFICATION",at="START_LOADING",st="STOP_LOADING",lt=function(e){return{type:_e,payload:e}},ut=function(){return{type:je}},ct=function(e){return{type:ze,payload:{unverifiedUser:e}}},dt=function(e){return{type:Le,payload:{user:e}}},pt=function(e){return{type:qe,payload:e}},ft=function(e){return{type:Ge,payload:e}},ht=function(e,t,n,r,o){return{type:He,payload:{title:e,label:t,defaultInput:n,callback:r,label2:o}}},mt=function(e,t,n){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"Yes",i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"No";return{type:Qe,payload:{callback:e,title:t,message:n,isConfirmation:r,firstButtonTitle:o,secondButtonTitle:i}}},gt=function(e,t){return{type:Ke,payload:{type:e,reportData:t}}},yt=function(){return{type:Xe}},At=function(e){return{type:Je,payload:{group:e}}},bt=function(){return{type:nt}},vt=function(e){return{type:rt,payload:{message:e}}},Ct=function(e){return{type:ot,payload:{message:e}}},wt=function(){return{type:at}},xt=function(){return{type:st}},Et=n(4336),kt={};kt.styleTagTransform=g(),kt.setAttributes=p(),kt.insert=c().bind(null,"head"),kt.domAPI=l(),kt.insertStyleElement=h(),a()(Et.Z,kt),Et.Z&&Et.Z.locals&&Et.Z.locals;var Bt=n(7965),St={};function Ot(){return Ot=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ot.apply(this,arguments)}St.styleTagTransform=g(),St.setAttributes=p(),St.insert=c().bind(null,"head"),St.domAPI=l(),St.insertStyleElement=h(),a()(Bt.Z,St),Bt.Z&&Bt.Z.locals&&Bt.Z.locals;const Tt=function(e){return t.createElement("form",Ot({className:"Form"},e),e.children)};var Dt=n(5057),Nt={};Nt.styleTagTransform=g(),Nt.setAttributes=p(),Nt.insert=c().bind(null,"head"),Nt.domAPI=l(),Nt.insertStyleElement=h(),a()(Dt.Z,Nt),Dt.Z&&Dt.Z.locals&&Dt.Z.locals;const It="Primary",Pt="Creation",Rt="Destructive";function Mt(){return Mt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Mt.apply(this,arguments)}const Zt=function(e){var n;switch(e.type){case It:n="ButtonPrimary";break;case Pt:n="ButtonCreation";break;case Rt:n="ButtonDestructive";break;default:n="ButtonPrimary"}return t.createElement("button",Mt({className:n+" Button"},e),e.children)};function _t(){return _t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_t.apply(this,arguments)}const jt=function(e){return t.createElement("fieldset",_t({className:"InputField",style:e.style},e),e.children)};function zt(){return zt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},zt.apply(this,arguments)}const Lt=function(e){return t.createElement("label",zt({className:"Label"},e),e.children)};var Ut=n(2239),Ft=n.n(Ut),Yt=n(4158),$t=n.n(Yt);function Wt(){return Wt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Wt.apply(this,arguments)}const Vt=function(e){var n=$t().isDefined(e.type)?e.type:"text";return t.createElement(t.Fragment,null,e.isTextArea?t.createElement("textarea",Wt({className:"Input",value:e.value,onChange:e.onChange,type:n},e)):t.createElement("input",Wt({className:"Input",value:e.value,onChange:e.onChange,type:n},e)))};function qt(){return qt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},qt.apply(this,arguments)}const Gt=function(e){return t.createElement("div",qt({className:"ToggleField"},e),e.children)},Ht=function(e){return t.createElement("label",{className:"Toggle"},console.log(e.value),t.createElement("input",{type:"checkbox",checked:e.value?"checked":"",value:e.value,onChange:e.onChange}),t.createElement("span",{className:"slider"}))};var Qt=n(4308),Kt=n.n(Qt);const Xt=function(e){return(0,t.useEffect)((function(){console.log(e.options)}),[]),t.createElement("select",{className:"dropdown",onChange:e.onChange,value:e.value},e.options.map((function(e){return t.createElement("option",{value:e},e)})))},Jt=function(e){return t.createElement("input",{className:"color-picker",onChange:e.onChange,type:"color",value:e.value})};var en=n(5106),tn=n.n(en);const nn=function(e){return t.createElement("div",null,t.createElement(Tt,{onSubmit:e.submitCreateStudyGroup,className:"create-study-group-form"},t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Study Group Name"),t.createElement(Vt,{value:e.name,onChange:e.updateNameField,type:"text"})),t.createElement(jt,null,t.createElement(Lt,null,"Color"),t.createElement(Jt,{value:e.groupColor,onChange:e.updateGroupColor,type:"color"}))),t.createElement(jt,null,t.createElement(Lt,null,"Description"),t.createElement(Vt,{value:e.description,onChange:e.updateDescriptionField,type:"text",isTextArea:!0})),t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Subject"),t.createElement(Xt,{value:e.subject,options:Object.keys(tn()),onChange:e.updateSubjectField})),t.createElement(jt,null,t.createElement(Lt,null,"Privacy"),t.createElement(Xt,{value:e.privacy,options:["Public"],onChange:e.updatePrivacy})),t.createElement(jt,null,t.createElement(Lt,null,"Course Code"),t.createElement(Vt,{value:e.courseCode,onChange:e.updateCourseCodeField,type:"text"}))),t.createElement("div",{className:"side-by-side"},""!==e.userSchool&&e.userSchool&&t.createElement(Gt,null,t.createElement(Lt,null,"Is this group associated with ",e.userSchool,"?"),t.createElement(Ht,{onChange:e.updateIsAssociatedWithSchool,value:e.isAssociatedWithSchool})),t.createElement(Gt,null,t.createElement(Lt,null,"Is this an online group?"),console.log("Is Online?",e.isOnlineGroup),t.createElement(Ht,{onChange:e.updateIsOnlineGroup,value:e.isOnlineGroup})),t.createElement(Gt,null,t.createElement(Lt,null,"Is this a tutor group?"),t.createElement(Ht,{onChange:e.updateIsTutorGroup,value:e.isTutorGroup}))),t.createElement(Zt,{type:Pt},"Submit")))};class rn extends Error{}let on;class an{constructor(e,t){if(this.duration=t&&t.duration||0,this.generators=t&&t.generators&&t.generators.slice()||[],!Number.isInteger(this.duration)||this.duration<0)throw new rn("duration must be a non-negative integer")}static set adapter(e){if(on)throw new Error(`"${on.name}" has already been configured.`);on=e}static get adapter(){if(!on)throw new Error("No date adapter has been configured. See rSchedule docs.");return on}static isDate(e){throw sn("isDate()")}static fromDate(e,t){throw sn("fromDate()")}static fromJSON(e){throw sn("fromJSON()")}static fromDateTime(e){throw sn("fromDateTime()")}toISOString(){return this.set("timezone","UTC").toDateTime().toISOString()}toDateTime(){return cn.fromJSON(Object.assign(Object.assign({},this.toJSON()),{generators:this.generators}))}}function sn(e){return new Error(`You must implement the "${e}" method for this DateAdapter class`)}var ln;an.hasTimezoneSupport=!1,function(e){e.WEEKDAYS=["SU","MO","TU","WE","TH","FR","SA"],e.MILLISECONDS_IN_SECOND=1e3,e.MILLISECONDS_IN_MINUTE=60*e.MILLISECONDS_IN_SECOND,e.MILLISECONDS_IN_HOUR=60*e.MILLISECONDS_IN_MINUTE,e.MILLISECONDS_IN_DAY=24*e.MILLISECONDS_IN_HOUR,e.MILLISECONDS_IN_WEEK=7*e.MILLISECONDS_IN_DAY}(ln||(ln={}));class un extends Error{}class cn{constructor(e,t,n,r){if(this.date=new Date(e),this.timezone=t||null,this.duration=n||0,this.generators=r&&r.slice()||[],!Number.isInteger(this.duration)||this.duration<0)throw new un("duration must be a non-negative integer");this.assertIsValid()}static fromJSON(e){const t=new Date(Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond));return new cn(t,e.timezone,e.duration,e.generators)}static fromDateAdapter(e){return cn.fromJSON(Object.assign(Object.assign({},e.toJSON()),{generators:e.generators}))}get end(){if(this.duration)return this._end||(this._end=this.add(this.duration,"millisecond")),this._end}isEqual(e){return!!e&&(dn(this,e),this.valueOf()===e.valueOf())}isBefore(e){return dn(this,e),this.valueOf()<e.valueOf()}isBeforeOrEqual(e){return dn(this,e),this.valueOf()<=e.valueOf()}isAfter(e){return dn(this,e),this.valueOf()>e.valueOf()}isAfterOrEqual(e){return dn(this,e),this.valueOf()>=e.valueOf()}isOccurring(e){if(!this.duration)throw new Error("DateTime#isOccurring() is only applicable to DateTimes with durations");return dn(this,e),e.isAfterOrEqual(this)&&e.isBeforeOrEqual(this.add(this.duration,"millisecond"))}add(e,t){switch(t){case"generator":{const t=this.generators.slice();return t.unshift(e),new cn(this.date,this.timezone,this.duration,t)}case"year":return this.forkDateTime(Cn(this.date,e));case"month":return this.forkDateTime(wn(this.date,e));case"week":return this.forkDateTime(xn(this.date,e));case"day":return this.forkDateTime(En(this.date,e));case"hour":return this.forkDateTime(kn(this.date,e));case"minute":return this.forkDateTime(Bn(this.date,e));case"second":return this.forkDateTime(Sn(this.date,e));case"millisecond":return this.forkDateTime(On(this.date,e));default:throw new Error("Invalid unit provided to `DateTime#add`")}}subtract(e,t){switch(t){case"year":return this.forkDateTime(function(e,t){return Cn(e,-t)}(this.date,e));case"month":return this.forkDateTime(function(e,t){return wn(e,-t)}(this.date,e));case"week":return this.forkDateTime(function(e,t){return xn(e,-t)}(this.date,e));case"day":return this.forkDateTime(Tn(this.date,e));case"hour":return this.forkDateTime(function(e,t){return kn(e,-t)}(this.date,e));case"minute":return this.forkDateTime(function(e,t){return Bn(e,-t)}(this.date,e));case"second":return this.forkDateTime(function(e,t){return Sn(e,-t)}(this.date,e));case"millisecond":return this.forkDateTime(function(e,t){return On(e,-t)}(this.date,e));default:throw new Error("Invalid unit provided to `DateTime#subtract`")}}get(e){switch(e){case"year":return this.date.getUTCFullYear();case"month":return this.date.getUTCMonth()+1;case"yearday":return function(e){const t=new Date(Date.UTC(e.getUTCFullYear(),0,1)),n=e.valueOf()-t.valueOf();return 1+Math.floor(n/ln.MILLISECONDS_IN_DAY)}(this.date);case"weekday":return ln.WEEKDAYS[this.date.getUTCDay()];case"day":return this.date.getUTCDate();case"hour":return this.date.getUTCHours();case"minute":return this.date.getUTCMinutes();case"second":return this.date.getUTCSeconds();case"millisecond":return this.date.getUTCMilliseconds();default:throw new Error("Invalid unit provided to `DateTime#set`")}}set(e,t){if("duration"===e)return new cn(this.date,this.timezone,t,this.generators);if("generators"===e)return new cn(this.date,this.timezone,this.duration,t);let n=new Date(this.date);switch(e){case"year":n.setUTCFullYear(t);break;case"month":{const e=yn(t,n.getUTCFullYear());n.getUTCDate()>e?(n.setUTCDate(1),n.setUTCMonth(t),n=Tn(n,1)):n.setUTCMonth(t-1);break}case"day":n.setUTCDate(t);break;case"hour":n.setUTCHours(t);break;case"minute":n.setUTCMinutes(t);break;case"second":n.setUTCSeconds(t);break;case"millisecond":n.setUTCMilliseconds(t);break;default:throw new Error("Invalid unit provided to `DateTime#set`")}return this.forkDateTime(n)}granularity(e,t={}){let n=this.forkDateTime(this.date);switch(e){case"year":n=n.set("month",1);case"month":n=n.set("day",1);break;case"week":n=function(e,t){const n=hn(t).indexOf(e.get("weekday"));return e.subtract(n,"day")}(n,t.weekStart)}switch(e){case"year":case"month":case"week":case"day":n=n.set("hour",0);case"hour":n=n.set("minute",0);case"minute":n=n.set("second",0);case"second":n=n.set("millisecond",0);case"millisecond":return n;default:throw new Error("Invalid granularity provided to `DateTime#granularity`: "+e)}}endGranularity(e,t={}){let n=this.forkDateTime(this.date);switch(e){case"year":n=n.set("month",12);case"month":n=n.set("day",yn(n.get("month"),n.get("year")));break;case"week":n=function(e,t){const n=hn(t).indexOf(e.get("weekday"));return e.add(6-n,"day")}(n,t.weekStart)}switch(e){case"year":case"month":case"week":case"day":n=n.set("hour",23);case"hour":n=n.set("minute",59);case"minute":n=n.set("second",59);case"second":n=n.set("millisecond",999);case"millisecond":return n;default:throw new Error("Invalid granularity provided to `DateTime#granularity`: "+e)}}toISOString(){return this.date.toISOString()}toDateTime(){return this}toJSON(){const e={timezone:this.timezone,year:this.get("year"),month:this.get("month"),day:this.get("day"),hour:this.get("hour"),minute:this.get("minute"),second:this.get("second"),millisecond:this.get("millisecond")};return this.duration&&(e.duration=this.duration),e}valueOf(){return this.date.valueOf()}assertIsValid(){if(isNaN(this.valueOf()))throw new un("DateTime has invalid date.");return!0}forkDateTime(e){return new cn(e,this.timezone,this.duration,this.generators)}}function dn(e,t){if(e.timezone!==t.timezone)throw new un("Attempted to compare a datetime to another date in a different timezone: "+JSON.stringify(e)+" and "+JSON.stringify(t));return!0}function pn(e,t){if(e.isAfter(t))return 1;if(e.isBefore(t))return-1;if(e.duration&&t.duration){if(e.duration>t.duration)return 1;if(e.duration<t.duration)return-1}return 0}function fn(e){return Array.from(new Map(e.map((e=>[e.toISOString(),e]))).values())}function hn(e="SU"){const t=ln.WEEKDAYS.slice();let n=t.indexOf(e);for(;0!==n;)mn(t),n--;return t}function mn(e,t="first"){return 0===e.length||("first"===t?e.push(e.shift()):e.unshift(e.pop())),e}function gn(e,t){if(e===t)return 0;const n=ln.WEEKDAYS.indexOf(e)-ln.WEEKDAYS.indexOf(t);return n>0?7-n:Math.abs(n)}function yn(e,t){return{1:31,2:An(t),3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}[e]}function An(e){return function(e){return e%400==0||e%4==0&&e%100!=0}(e)?29:28}function bn(e){if(null===e||!0===e||!1===e)return NaN;const t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function vn(e,t){if(arguments.length<2)throw new TypeError("2 arguments required, but only "+arguments.length+" present");const n=e.valueOf(),r=bn(t);return new Date(n+r)}function Cn(e,t){return wn(e,12*bn(t))}function wn(e,t){const n=bn(t),r=(e=new Date(e)).getUTCMonth()+n,o=new Date(0);o.setUTCFullYear(e.getUTCFullYear(),r,1),o.setUTCHours(0,0,0,0);const i=yn(o.getUTCMonth()+1,o.getUTCFullYear());return e.setUTCMonth(r,Math.min(i,e.getUTCDate())),e}function xn(e,t){return En(e,7*bn(t))}function En(e,t){return On(e,bn(t)*ln.MILLISECONDS_IN_DAY)}function kn(e,t){return vn(e,bn(t)*ln.MILLISECONDS_IN_HOUR)}function Bn(e,t){return vn(e,bn(t)*ln.MILLISECONDS_IN_MINUTE)}function Sn(e,t){return vn(e,bn(t)*ln.MILLISECONDS_IN_SECOND)}function On(e,t){const n=bn(t),r=e.getTime();return new Date(r+n)}function Tn(e,t){return En(e,-t)}class Dn extends Error{}class Nn extends Error{}function In(e,t){return e>t?1:t>e?-1:0}function Pn(e){return JSON.parse(JSON.stringify(e))}function Rn(e,t){return e instanceof cn?e.timezone!==t?an.adapter.fromDateTime(e).set("timezone",t).toDateTime():e:e instanceof an?e.set("timezone",t).toDateTime():an.adapter.fromDate(e).set("timezone",t).toDateTime()}function Mn(e,t){return e.timezone!==t?an.adapter.fromDateTime(e).set("timezone",t).toDateTime():e}class Zn extends Error{}function _n(e){const t=Pn(e);return t.start=e.start,e.end&&(t.end=e.end),t}class jn extends Error{}class zn{constructor(e){this.date=e}}class Ln{constructor(e){this.date=e}}class Un{constructor(e,t,n){this.options=t,this.args=n,this.rules=[],this.iterator=void 0===this.options.count?this.iterate():this.args.reverse?this.iterateWithReverseCount():this.iterateWithCount(),this.options=Object.assign(Object.assign({},Pn(t)),{start:t.start,end:t.end}),this.reverse=void 0===this.options.count&&n.reverse||!1;const{start:r,end:o}=this.normalizeDateTimeArgs(n);if(void 0!==t.count?this.start=t.start:r&&t.start?this.start=r.isAfterOrEqual(t.start)?r:t.start:this.start=r||t.start,o&&t.end?this.end=o.isBeforeOrEqual(t.end)?o:t.end:this.end=o||t.end,this.args.reverse&&void 0===t.count&&!this.end)throw new Error("When iterating in reverse, the rule must have an `end` or `count` property or you must provide an `end` argument.");this.isInfinite=!this.end&&void 0===this.options.count,this.hasDuration=!!this.options.duration,this.rules=Array.isArray(e)?e:e(this)}[Symbol.iterator](){return this.iterator}next(e){return this.iterator.next(e)}*iterateWithReverseCount(){let e;const t=Array.from(this.iterateWithCount()).reverse().slice();let n=t.shift();for(;n;)if(e&&e.skipToDate&&n.isAfter(e.skipToDate))n=t.shift();else{if(e=yield n,e&&e.skipToDate&&e.skipToDate.isAfterOrEqual(n))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");n=t.shift()}}*iterateWithCount(){if(0===this.options.count)return;const e=this.iterate(),t=this.args.start||this.start;let n,r=e.next().value,o=1;for(;r&&o<=this.options.count;)if(o++,r.isBefore(t))r=e.next().value;else if(n&&n.skipToDate&&r.isBefore(n.skipToDate))r=e.next().value;else{if(n=yield r,n&&n.skipToDate&&n.skipToDate.isBeforeOrEqual(r))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");r=e.next().value}}*iterate(){let e=this.start;this.reverse&&(e=this.end);let t=this.nextDate(e);for(;t;){const e=yield this.normalizeRunOutput(t);if(e&&e.skipToDate){if(this.reverse?e.skipToDate.isAfterOrEqual(t):e.skipToDate.isBeforeOrEqual(t))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");t=this.nextDate(e.skipToDate)}else t=this.nextDate(this.reverse?t.subtract(1,"millisecond"):t.add(1,"millisecond"))}}nextDate(e){let t=this.runRules(e.set("generators",[]));if(this.isDatePastEnd(t.date))return null;let n=0;for(;t instanceof Ln&&n<50;){if(t=this.runRules(t.date),this.isDatePastEnd(t.date))return null;n++}if(t instanceof Ln)throw new jn(`Failed to find a matching occurrence in ${n} iterations. Last iterated date: "${t.date.toISOString()}"`);if(this.reverse?e.isBefore(t.date):e.isAfter(t.date))throw new jn("An error occurred in a recurrence rule. If this happened using the rSchedule provided recurrence rules, you should open an issue in the rSchedule repo. The maintainer is going to want to know how to recreate the error.");return t.date}runRules(e){let t=new zn(e);for(const e of this.rules){if(t instanceof Ln)return t;t=e.run(t.date)}return t}isDatePastEnd(e){return this.reverse?e.isBefore(this.start):this.end&&e.isAfter(this.end)}normalizeRunOutput(e){return this.hasDuration?e.set("duration",this.options.duration):e}normalizeDateTimeArgs(e){return{start:e.start&&Mn(e.start,this.options.start.timezone),end:e.end&&Mn(e.end,this.options.start.timezone)}}}class Fn{constructor(e={}){this.timezone=void 0!==e.timezone?e.timezone:null,this.maxDuration=e.maxDuration||0}get firstDate(){if(void 0!==this._firstDate)return this._firstDate;const e=this._run().next().value;return this._firstDate=e?this.dateAdapter.fromDateTime(e):null,this._firstDate}get lastDate(){if(void 0!==this._lastDate)return this._lastDate;if(this.isInfinite)return this._lastDate=null,null;const e=this._run({reverse:!0}).next().value;return this._lastDate=e?this.dateAdapter.fromDateTime(e):null,this._lastDate}pipe(...e){return e.reduce(((e,t)=>t({base:e,timezone:this.timezone})),this)}occurrences(e={}){return new Yn(this,this.normalizeOccurrencesArgs(e))}collections(e={}){return new Wn(this,this.normalizeCollectionsArgs(e))}occursBetween(e,t,n={}){const r=this.normalizeDateInput(e),o=this.normalizeDateInput(t);if(this.hasDuration&&!n.excludeEnds){const e=this.getMaxDuration("occursBetween",n),t=this._run({start:r.subtract(e,"millisecond"),end:o,reverse:!0});for(const e of t)if(!e.end.isBefore(r))return!0;return!1}for(const e of this._run({start:r,end:o})){if(n.excludeEnds){if(e.isEqual(r))continue;if(e.isEqual(o))break}return!0}return!1}occursOn(e){const t=this.normalizeOccursOnArgs(e);if(t.weekday){if(this.isInfinite&&!t.before)throw new Dn("When calling `occursOn()` with a `weekday` argument and an occurrence object that has infinite occurrences, you must include a `before` argument as well.");const e=t.after&&(t.excludeEnds?t.after.add(1,"day"):t.after),n=t.before&&(t.excludeEnds?t.before.subtract(1,"day"):t.before),r=this._run({start:e,end:n});let o=r.next().value;if(!o)return!1;for(;o;){if(o.get("weekday")===t.weekday)return!0;o=r.next({skipToDate:o.add(gn(o.get("weekday"),t.weekday),"day").granularity("day")}).value}return!1}if(!t.date)throw new Dn('"occursOn()" must be called with either a "date" or "weekday" argument');if(this.hasDuration){const e=this.getMaxDuration("occursOn",t),n=this._run({start:t.date.subtract(e,"millisecond"),end:t.date});for(const e of n)if(!e.end.isBefore(t.date))return!e.isAfter(t.date);return!1}for(const e of this._run({start:t.date,end:t.date}))return!!e;return!1}occursAfter(e,t={}){const n=this.normalizeDateInput(e);if(this.hasDuration&&!t.excludeStart){const e=this.getMaxDuration("occursAfter",t),r=this._run({start:n.subtract(e,"millisecond")});for(const e of r)if(!e.end.isBefore(n))return!0;return!1}for(const e of this._run({start:n}))if(!t.excludeStart||!e.isEqual(n))return!0;return!1}occursBefore(e,t={}){const n=this.normalizeDateInput(e);if(this.hasDuration&&t.excludeStart){for(const e of this._run({end:n,reverse:!0}))if(!e.end.isAfterOrEqual(n))return!0;return!1}for(const e of this._run({end:n,reverse:!0}))if(!t.excludeStart||!e.isEqual(n))return!0;return!1}get dateAdapter(){return an.adapter}normalizeOccurrencesArgs(e){return Object.assign(Object.assign({},e),{start:this.normalizeDateInput(e.start),end:this.normalizeDateInput(e.end)})}normalizeCollectionsArgs(e){if(void 0!==e.reverse)throw new Dn("`collections()` does not support the `reverse` option at this time.");return Object.assign(Object.assign({},e),{start:this.normalizeDateInput(e.start),end:this.normalizeDateInput(e.end)})}normalizeOccursOnArgs(e={}){return Object.assign(Object.assign({},e),{date:this.normalizeDateInput(e.date),after:this.normalizeDateInput(e.after),before:this.normalizeDateInput(e.before),excludeDates:e.excludeDates&&e.excludeDates.map((e=>this.normalizeDateInput(e)))})}normalizeRunArgs(e){return Object.assign(Object.assign({},e),{start:this.normalizeDateInput(e.start),end:this.normalizeDateInput(e.end)})}normalizeDateInput(e){return e?Rn(e,this.timezone):void 0}normalizeDateInputToAdapter(e){if(e)return function(e){return e instanceof cn?an.adapter.fromDateTime(e):e instanceof an?e:an.adapter.fromDate(e)}(e)}normalizeRunOutput(e){return Mn(e,this.timezone)}getMaxDuration(e,t){const n=t.maxDuration||this.maxDuration;if(!Number.isInteger(n))throw new Dn(`When an occurrence generator has a duration, a 'maxDuration' argument must be supplied to ${e}().`);return n}}class Yn{constructor(e,t){this.iterable=e,this.args=t,this[Symbol.iterator]=()=>this.occurrenceIterator(),this.iterator=e._run(t),this.isInfinite=e.isInfinite}next(e){return this.occurrenceIterator(e).next()}toArray(){if(this.args.end||this.args.take||!this.isInfinite)return Array.from(this.occurrenceIterator());throw new Nn("OccurrenceIterator#toArray() can only be called if the iterator is not infinite, or you provide and `end` argument, or you provide a `take` argument.")}*occurrenceIterator(e){let t=this.normalizeRunArgs(e),n=this.iterator.next(t).value;for(;n;){const e=yield this.normalizeDateOutput(n);t=this.normalizeRunArgs(e),n=this.iterator.next(t).value}}normalizeRunArgs(e){return{skipToDate:this.normalizeDateInput(e&&e.skipToDate)}}normalizeDateInput(e){return e?Rn(e,this.iterable.timezone):void 0}normalizeDateOutput(e){if(e)return e?an.adapter.fromDateTime(e):void 0}}class $n{constructor(e=[],t,n,r){this.dates=e,this.granularity=t,this.periodStart=n,this.periodEnd=r}}class Wn{constructor(e,t){if(this.iterable=e,this.args=t,this.granularity="year",this[Symbol.iterator]=()=>this.iterator,t.granularity&&(this.granularity=t.granularity,"week"===this.granularity&&!t.weekStart))throw new Error('"week" granularity requires `weekStart` arg');if(t.weekStart&&(this.weekStart=t.weekStart),t.reverse)throw new Error("`OccurrenceGenerator#collections()` does not support iterating in reverse. Though `OccurrenceGenerator#occurrences()` does support iterating in reverse.");this.args=Object.assign(Object.assign({},t),{start:t.start||e._run().next().value,end:t.end&&this.getPeriod(t.end).end}),this.startDate=this.args.start&&this.normalizeDateOutput(this.getPeriod(this.args.start).start)||null,this.iterator=this.collectionIterator()}next(){return this.iterator.next()}toArray(){if(this.args.end||this.args.take||!this.iterable.isInfinite){const e=[];for(const t of this.collectionIterator())e.push(t);return e}throw new Nn("CollectionIterator#toArray() can only be called if the iterator is not infinite, or you provide and `end` argument, or you provide a `take` argument.")}normalizeDateOutput(e){if(e)return an.adapter.fromDateTime(e)}*collectionIterator(){if(!this.startDate)return;let e=this.occurrenceIterator(),t=e.next().value;if(!t)return;let n=this.getPeriod(this.args.start),r=[],o=0;for(;t&&(void 0===this.args.take||this.args.take>o);){for(;t&&t.isBeforeOrEqual(n.end);)r.push(t),t=e.next().value;if(yield new $n(r.map((e=>this.normalizeDateOutput(e))),this.granularity,this.normalizeDateOutput(n.start),this.normalizeDateOutput(n.end)),!t)return;r=[],n=this.args.skipEmptyPeriods?this.getPeriod(t):this.getPeriod(this.incrementPeriod(n.period)),"month"===this.granularity&&this.weekStart&&(e=this.iterable._run({start:n.start,end:this.args.end}),t=e.next().value),o++}}getPeriod(e){let t,n,r;return"month"===this.granularity&&this.weekStart?(t=e.granularity("month").granularity("week",{weekStart:this.weekStart}),n=e.endGranularity("month").endGranularity("week",{weekStart:this.weekStart}),r=e.granularity("month")):(t=e.granularity(this.granularity,{weekStart:this.weekStart}),n=e.endGranularity(this.granularity,{weekStart:this.weekStart}),r=t),{start:t,end:n,period:r}}incrementPeriod(e){return e.add(1,this.granularity)}occurrenceIterator(){let e=this.args.start||this.iterable._run().next().value;return e?(e=this.getPeriod(e).start,this.iterable._run({start:e,end:this.args.end})):this.iterable._run(this.args)}}class Vn extends Fn{constructor(e,t){super(t),this.streams=e,this.config=t,this.timezone=t.timezone,this.streams=e.map((e=>e instanceof Vn?e:e.set("timezone",this.timezone))),this.isInfinite=this.calculateIsInfinite(),this.hasDuration=this.calculateHasDuration()}normalizeDateInput(e){if(e)return Rn(e,this.timezone)}normalizeRunOutput(e){return Mn(e,this.timezone)}}class qn{constructor(e,t){this.runArgs=t,this.stream=e._run(this.runArgs),this.next()}next(e){const{done:t,value:n}=this.stream.next(e);return this.done="boolean"!=typeof t||t,this.value=n,{done:t,value:n}}}function Gn(e,t={},n={}){if(n.skipToDate&&0!==e.length){if(t.reverse?e.every((e=>e.value.isBeforeOrEqual(n.skipToDate))):e.every((e=>e.value.isAfterOrEqual(n.skipToDate))))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");for(const r of e)r.done||(t.reverse?r.value.isBeforeOrEqual(n.skipToDate):r.value.isAfterOrEqual(n.skipToDate))||r.next(n)}}function Hn(e,t){return e.done&&t.done?0:e.done?1:t.done?-1:e.value.isAfter(t.value)?1:-1}function Qn(e,t){return e.done&&t.done?0:e.done?-1:t.done?1:e.value.isAfter(t.value)?-1:1}function Kn(e,t={},n={}){return Gn(e,t,n),e.sort(t.reverse?Qn:Hn).filter((e=>!e.done)).shift()}function Xn(...e){return t=>new Jn(e,t)}class Jn extends Vn{set(e,t){return new Jn(this.streams.map((e=>e.set("timezone",t))),Object.assign(Object.assign({},this.config),{base:this.config.base&&this.config.base.set("timezone",t),timezone:t}))}*_run(e={}){const t=this.streams.map((t=>new qn(t,e)));if(this.config.base&&t.push(new qn(this.config.base,e)),0===t.length)return;let n=Kn(t,e);for(;n&&!n.done;){const r=yield this.normalizeRunOutput(n.value);r&&r.skipToDate||n.next(),n=Kn(t,e,r)}}calculateIsInfinite(){return this.config.base&&this.config.base.isInfinite||this.streams.some((e=>e.isInfinite))}calculateHasDuration(){const e=this.streams.every((e=>e.hasDuration));return this.config.base?this.config.base.hasDuration&&e:e}}class er extends Fn{constructor(e={}){super(e),this.adapters=[],this.isInfinite=!1,this.maxDuration=0,this.datetimes=[],this.data=e.data,e.dates&&(this.adapters=e.dates.map((t=>{let n=this.normalizeDateInputToAdapter(t);return e.duration&&!n.duration&&(n=n.set("duration",e.duration)),n.set("timezone",this.timezone)})),this.datetimes=this.adapters.map((e=>e.toDateTime()))),this.hasDuration=this.datetimes.every((e=>!!e.duration)),this.hasDuration&&(this.maxDuration=this.adapters.reduce(((e,t)=>t.duration>e?t.duration:e),0))}get length(){return this.adapters.length}get firstDate(){return this.adapters[0]||null}get lastDate(){return this.adapters[this.length-1]||null}occurrences(e={}){return new Yn(this,this.normalizeOccurrencesArgs(e))}collections(e={}){return new Wn(this,this.normalizeCollectionsArgs(e))}add(e){return new er({dates:[...this.adapters,e],timezone:this.timezone,data:this.data})}remove(e){const t=this.adapters.slice(),n=this.normalizeDateInputToAdapter(e),r=t.findIndex((e=>e.valueOf()===n.valueOf()));return r>=0&&t.splice(r,1),new er({dates:t,timezone:this.timezone,data:this.data})}set(e,t,n={}){let r=this.timezone,o=this.adapters.slice();if("timezone"===e){if(t===this.timezone)return this;n.keepLocalTime&&(o=this.adapters.map((e=>{const n=e.toJSON();return n.timezone=t,this.dateAdapter.fromJSON(n)}))),r=t}else if("dates"===e)o=t;else{if("duration"!==e)throw new Dn(`Unexpected prop argument "${e}". Accepted values are "timezone" or "dates"`);o=o.map((e=>e.set("duration",t||0)))}return new er({dates:o,data:this.data,timezone:r})}filter(e){return new er({dates:this.adapters.filter(e),data:this.data,timezone:this.timezone})}*_run(e={}){let t=this.datetimes.sort(pn);e.start&&(t=t.filter((t=>t.isAfterOrEqual(e.start)))),e.end&&(t=t.filter((t=>t.isBeforeOrEqual(e.end)))),e.reverse&&(t=t.slice().reverse()),e.take&&(t=t.slice(0,e.take));const n=t.slice();let r,o=n.shift();for(;o;)if(r&&r.skipToDate&&(e.reverse?r.skipToDate.isBefore(o):r.skipToDate.isAfter(o)))o=n.shift();else{if(o=o.add(this,"generator"),r=yield this.normalizeRunOutput(o),r&&r.skipToDate&&(e.reverse?r.skipToDate.isAfterOrEqual(o):r.skipToDate.isBeforeOrEqual(o)))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");o=n.shift()}}}class tr extends Error{}let nr;class rr{constructor(e,t){if(this.duration=t&&t.duration||0,this.generators=t&&t.generators&&t.generators.slice()||[],!Number.isInteger(this.duration)||this.duration<0)throw new tr("duration must be a non-negative integer")}static set adapter(e){if(nr)throw new Error(`"${nr.name}" has already been configured.`);nr=e}static get adapter(){if(!nr)throw new Error("No date adapter has been configured. See rSchedule docs.");return nr}static isDate(e){throw or("isDate()")}static fromDate(e,t){throw or("fromDate()")}static fromJSON(e){throw or("fromJSON()")}static fromDateTime(e){throw or("fromDateTime()")}toISOString(){return this.set("timezone","UTC").toDateTime().toISOString()}toDateTime(){return sr.fromJSON(Object.assign(Object.assign({},this.toJSON()),{generators:this.generators}))}}function or(e){return new Error(`You must implement the "${e}" method for this DateAdapter class`)}var ir;rr.hasTimezoneSupport=!1,function(e){e.WEEKDAYS=["SU","MO","TU","WE","TH","FR","SA"],e.MILLISECONDS_IN_SECOND=1e3,e.MILLISECONDS_IN_MINUTE=60*e.MILLISECONDS_IN_SECOND,e.MILLISECONDS_IN_HOUR=60*e.MILLISECONDS_IN_MINUTE,e.MILLISECONDS_IN_DAY=24*e.MILLISECONDS_IN_HOUR,e.MILLISECONDS_IN_WEEK=7*e.MILLISECONDS_IN_DAY}(ir||(ir={}));class ar extends Error{}class sr{constructor(e,t,n,r){if(this.date=new Date(e),this.timezone=t||null,this.duration=n||0,this.generators=r&&r.slice()||[],!Number.isInteger(this.duration)||this.duration<0)throw new ar("duration must be a non-negative integer");this.assertIsValid()}static fromJSON(e){const t=new Date(Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond));return new sr(t,e.timezone,e.duration,e.generators)}static fromDateAdapter(e){return sr.fromJSON(Object.assign(Object.assign({},e.toJSON()),{generators:e.generators}))}get end(){if(this.duration)return this._end||(this._end=this.add(this.duration,"millisecond")),this._end}isEqual(e){return!!e&&(lr(this,e),this.valueOf()===e.valueOf())}isBefore(e){return lr(this,e),this.valueOf()<e.valueOf()}isBeforeOrEqual(e){return lr(this,e),this.valueOf()<=e.valueOf()}isAfter(e){return lr(this,e),this.valueOf()>e.valueOf()}isAfterOrEqual(e){return lr(this,e),this.valueOf()>=e.valueOf()}isOccurring(e){if(!this.duration)throw new Error("DateTime#isOccurring() is only applicable to DateTimes with durations");return lr(this,e),e.isAfterOrEqual(this)&&e.isBeforeOrEqual(this.add(this.duration,"millisecond"))}add(e,t){switch(t){case"generator":{const t=this.generators.slice();return t.unshift(e),new sr(this.date,this.timezone,this.duration,t)}case"year":return this.forkDateTime(mr(this.date,e));case"month":return this.forkDateTime(gr(this.date,e));case"week":return this.forkDateTime(yr(this.date,e));case"day":return this.forkDateTime(Ar(this.date,e));case"hour":return this.forkDateTime(br(this.date,e));case"minute":return this.forkDateTime(vr(this.date,e));case"second":return this.forkDateTime(Cr(this.date,e));case"millisecond":return this.forkDateTime(wr(this.date,e));default:throw new Error("Invalid unit provided to `DateTime#add`")}}subtract(e,t){switch(t){case"year":return this.forkDateTime(function(e,t){return mr(e,-t)}(this.date,e));case"month":return this.forkDateTime(function(e,t){return gr(e,-t)}(this.date,e));case"week":return this.forkDateTime(function(e,t){return yr(e,-t)}(this.date,e));case"day":return this.forkDateTime(xr(this.date,e));case"hour":return this.forkDateTime(function(e,t){return br(e,-t)}(this.date,e));case"minute":return this.forkDateTime(function(e,t){return vr(e,-t)}(this.date,e));case"second":return this.forkDateTime(function(e,t){return Cr(e,-t)}(this.date,e));case"millisecond":return this.forkDateTime(function(e,t){return wr(e,-t)}(this.date,e));default:throw new Error("Invalid unit provided to `DateTime#subtract`")}}get(e){switch(e){case"year":return this.date.getUTCFullYear();case"month":return this.date.getUTCMonth()+1;case"yearday":return function(e){const t=new Date(Date.UTC(e.getUTCFullYear(),0,1)),n=e.valueOf()-t.valueOf();return 1+Math.floor(n/ir.MILLISECONDS_IN_DAY)}(this.date);case"weekday":return ir.WEEKDAYS[this.date.getUTCDay()];case"day":return this.date.getUTCDate();case"hour":return this.date.getUTCHours();case"minute":return this.date.getUTCMinutes();case"second":return this.date.getUTCSeconds();case"millisecond":return this.date.getUTCMilliseconds();default:throw new Error("Invalid unit provided to `DateTime#set`")}}set(e,t){if("duration"===e)return new sr(this.date,this.timezone,t,this.generators);if("generators"===e)return new sr(this.date,this.timezone,this.duration,t);let n=new Date(this.date);switch(e){case"year":n.setUTCFullYear(t);break;case"month":{const e=dr(t,n.getUTCFullYear());n.getUTCDate()>e?(n.setUTCDate(1),n.setUTCMonth(t),n=xr(n,1)):n.setUTCMonth(t-1);break}case"day":n.setUTCDate(t);break;case"hour":n.setUTCHours(t);break;case"minute":n.setUTCMinutes(t);break;case"second":n.setUTCSeconds(t);break;case"millisecond":n.setUTCMilliseconds(t);break;default:throw new Error("Invalid unit provided to `DateTime#set`")}return this.forkDateTime(n)}granularity(e,t={}){let n=this.forkDateTime(this.date);switch(e){case"year":n=n.set("month",1);case"month":n=n.set("day",1);break;case"week":n=function(e,t){const n=ur(t).indexOf(e.get("weekday"));return e.subtract(n,"day")}(n,t.weekStart)}switch(e){case"year":case"month":case"week":case"day":n=n.set("hour",0);case"hour":n=n.set("minute",0);case"minute":n=n.set("second",0);case"second":n=n.set("millisecond",0);case"millisecond":return n;default:throw new Error("Invalid granularity provided to `DateTime#granularity`: "+e)}}endGranularity(e,t={}){let n=this.forkDateTime(this.date);switch(e){case"year":n=n.set("month",12);case"month":n=n.set("day",dr(n.get("month"),n.get("year")));break;case"week":n=function(e,t){const n=ur(t).indexOf(e.get("weekday"));return e.add(6-n,"day")}(n,t.weekStart)}switch(e){case"year":case"month":case"week":case"day":n=n.set("hour",23);case"hour":n=n.set("minute",59);case"minute":n=n.set("second",59);case"second":n=n.set("millisecond",999);case"millisecond":return n;default:throw new Error("Invalid granularity provided to `DateTime#granularity`: "+e)}}toISOString(){return this.date.toISOString()}toDateTime(){return this}toJSON(){const e={timezone:this.timezone,year:this.get("year"),month:this.get("month"),day:this.get("day"),hour:this.get("hour"),minute:this.get("minute"),second:this.get("second"),millisecond:this.get("millisecond")};return this.duration&&(e.duration=this.duration),e}valueOf(){return this.date.valueOf()}assertIsValid(){if(isNaN(this.valueOf()))throw new ar("DateTime has invalid date.");return!0}forkDateTime(e){return new sr(e,this.timezone,this.duration,this.generators)}}function lr(e,t){if(e.timezone!==t.timezone)throw new ar("Attempted to compare a datetime to another date in a different timezone: "+JSON.stringify(e)+" and "+JSON.stringify(t));return!0}function ur(e="SU"){const t=ir.WEEKDAYS.slice();let n=t.indexOf(e);for(;0!==n;)cr(t),n--;return t}function cr(e,t="first"){return 0===e.length||("first"===t?e.push(e.shift()):e.unshift(e.pop())),e}function dr(e,t){return{1:31,2:pr(t),3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}[e]}function pr(e){return function(e){return e%400==0||e%4==0&&e%100!=0}(e)?29:28}function fr(e){if(null===e||!0===e||!1===e)return NaN;const t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function hr(e,t){if(arguments.length<2)throw new TypeError("2 arguments required, but only "+arguments.length+" present");const n=e.valueOf(),r=fr(t);return new Date(n+r)}function mr(e,t){return gr(e,12*fr(t))}function gr(e,t){const n=fr(t),r=(e=new Date(e)).getUTCMonth()+n,o=new Date(0);o.setUTCFullYear(e.getUTCFullYear(),r,1),o.setUTCHours(0,0,0,0);const i=dr(o.getUTCMonth()+1,o.getUTCFullYear());return e.setUTCMonth(r,Math.min(i,e.getUTCDate())),e}function yr(e,t){return Ar(e,7*fr(t))}function Ar(e,t){return wr(e,fr(t)*ir.MILLISECONDS_IN_DAY)}function br(e,t){return hr(e,fr(t)*ir.MILLISECONDS_IN_HOUR)}function vr(e,t){return hr(e,fr(t)*ir.MILLISECONDS_IN_MINUTE)}function Cr(e,t){return hr(e,fr(t)*ir.MILLISECONDS_IN_SECOND)}function wr(e,t){const n=fr(t),r=e.getTime();return new Date(r+n)}function xr(e,t){return Ar(e,-t)}function Er(e,t){return e.timezone!==t?rr.adapter.fromDateTime(e).set("timezone",t).toDateTime():e}class kr extends Fn{constructor(e,t,n={}){super(n),this.recurrenceRules=e,this.options=_n(t),this.normOptions=function(e,t){const n=function(e){let t,n;if(e.start instanceof cn)t=e.start;else if(e.start instanceof an)t=e.start.toDateTime();else{if(!an.adapter.isDate(e.start))throw new Zn('"start" must be either a `DateAdapter` instance or an instance of the date a DateAdapter is wrapping (e.g. `StandardDateAdapter` wraps a `Date`)');t=an.adapter.fromDate(e.start).toDateTime()}if(e.end)if(e.end instanceof cn)n=e.end;else if(e.end instanceof an)n=e.end.toDateTime();else{if(!an.adapter.isDate(e.end))throw new Zn('"end" must be either be `undefined`, a `DateAdapter` instance, or an instance of the date a DateAdapter is wrapping (e.g. `StandardDateAdapter` wraps a `Date`)');n=an.adapter.fromDate(e.end).toDateTime()}if(void 0!==e.duration){if(!Number.isInteger(e.duration))throw new Zn('"duration" expects a whole number');if(e.duration<=0)throw new Zn('"duration" must be greater than 0')}if(void 0!==e.count){if(!Number.isInteger(e.count))throw new Zn('"count" must be a whole number');if(e.count<0)throw new Zn('"count" must be greater than 0')}if(void 0!==e.end&&void 0!==e.count)throw new Zn('"end" and "count" cannot both be present');return{start:t,end:n,count:e.count,duration:e.duration}}(t),r=Pn(t);return e.forEach((e=>{e.normalizeOptions(r,n)})),Object.keys(n).forEach((e=>{void 0===n[e]&&delete n[e]})),n}(this.recurrenceRules,this.options),this.timezone=void 0!==n.timezone?n.timezone:this.normOptions.start.timezone,this.data=n.data,this.hasDuration=!!t.duration,this.hasDuration&&(this.duration=t.duration),this.isInfinite=void 0===this.normOptions.end&&void 0===this.normOptions.count}occurrences(e={}){return new Yn(this,this.normalizeOccurrencesArgs(e))}collections(e={}){return new Wn(this,this.normalizeCollectionsArgs(e))}*_run(e={}){const t=this.normalizeRunArgs(e),n=new Un((r=this.recurrenceRules,e=>r.reduce(((t,n)=>{const r=n.get(e);return r&&t.push(r),t}),[])),this.normOptions,t);var r;let o=n.next().value,i=0;for(;o&&(void 0===t.take||i<t.take);){i++,o=o.add(this,"generator");const e=yield this.normalizeRunOutput(o);o=(null==e?void 0:e.skipToDate)?n.next(Object.assign(Object.assign({},e),{skipToDate:Er(e.skipToDate,n.start.timezone)})).value:n.next(e).value}}}class Br extends kr{constructor(e,t={}){super(Br.recurrenceRules,e,t)}set(e,t,n={}){let r=_n(this.options),o=this.timezone;if("timezone"===e){if(t===this.timezone&&!n.keepLocalTime)return this;if(n.keepLocalTime){const e=this.normalizeDateInput(r.start).toJSON();e.timezone=t;const n=this.dateAdapter.fromJSON(e);r.start=r.start instanceof this.dateAdapter?n:r.start instanceof cn?n.toDateTime():n.date}o=t}else"options"===e?r=t:r[e]=t;return new Br(r,{data:this.data,maxDuration:this.maxDuration,timezone:o})}}Br.recurrenceRules=[];class Sr extends Fn{constructor(e){super(e),this.data=e.data}occurrences(e={}){return new Yn(this,this.normalizeOccurrencesArgs(e))}collections(e={}){return new Wn(this,this.normalizeCollectionsArgs(e))}*_run(e={}){const t=e.take;delete e.take;const n=this.occurrenceStream._run(e);let r=n.next().value,o=0;for(;r&&(void 0===t||t>o);){r=r.add(this,"generator");const e=yield this.normalizeRunOutput(r);r=n.next(e).value,o++}}}function Or(...e){return t=>new Tr(e,t)}class Tr extends Vn{set(e,t){return new Tr(this.streams.map((e=>e.set("timezone",t))),Object.assign(Object.assign({},this.config),{base:this.config.base&&this.config.base.set("timezone",t),timezone:t}))}*_run(e={}){if(!this.config.base)return;const t=new qn(this.config.base,e),n=new qn(new Jn(this.streams,{timezone:this.config.timezone}),e);for(Dr(t,n,e);!t.done;){const r=yield this.normalizeRunOutput(t.value);r&&r.skipToDate||t.next(),Dr(t,n,e,r)}}calculateIsInfinite(){return!(!this.config.base||!this.config.base.isInfinite)}calculateHasDuration(){return!(!this.config.base||!this.config.base.hasDuration)}}function Dr(e,t,n={},r={}){for(Gn([e,t],n,r),Nr(e,t,n);!e.done&&!t.done&&e.value.isEqual(t.value);)e.next(),Nr(e,t,n)}function Nr(e,t,n={}){if(n.reverse)for(;!t.done&&!e.done&&t.value.isAfter(e.value);)t.next();else for(;!t.done&&!e.done&&t.value.isBefore(e.value);)t.next()}class Ir extends Vn{set(e,t){return new Ir([],Object.assign(Object.assign({},this.config),{base:this.config.base&&this.config.base.set("timezone",t),timezone:t}))}*_run(e={}){if(!this.config.base)return;const t=new qn(this.config.base,e);for(;!t.done;){const e=yield this.normalizeRunOutput(t.value),n=t.value;for(t.next(e);(!e||!e.skipToDate)&&!t.done&&t.value.isEqual(n);)t.next()}}calculateIsInfinite(){return!(!this.config.base||!this.config.base.isInfinite)}calculateHasDuration(){return!(!this.config.base||!this.config.base.hasDuration)}}class Pr extends Sr{constructor(e={}){super(e),this.rrules=[],this.exrules=[];for(const t of["rrules","exrules"]){const n=e[t];n&&(this[t]=n.map((e=>e instanceof Br?e.set("timezone",this.timezone):new Br(e,{timezone:this.timezone}))))}for(const t of["rdates","exdates"]){const n=e[t];this[t]=n?n instanceof er?n.set("timezone",this.timezone):new er({dates:n,timezone:this.timezone}):new er({timezone:this.timezone})}this.hasDuration=this.rrules.every((e=>e.hasDuration))&&this.exrules.every((e=>e.hasDuration))&&this.rdates.hasDuration&&this.exdates.hasDuration,this.isInfinite=this.rrules.some((e=>e.isInfinite)),this.occurrenceStream=[Xn(...this.rrules),Or(...this.exrules),Xn(this.rdates),Or(this.exdates),e=>new Ir([],e)].reduce(((e,t)=>t({base:e,timezone:this.timezone})),void 0)}add(e,t){const n=this.rrules.slice(),r=this.exrules.slice();let o=this.rdates,i=this.exdates;switch(e){case"rrule":n.push(t);break;case"exrule":r.push(t);break;case"rdate":o=this.rdates.add(t);break;case"exdate":i=this.exdates.add(t)}return new Pr({timezone:this.timezone,data:this.data,rrules:n,exrules:r,rdates:o,exdates:i})}remove(e,t){let n=this.rrules,r=this.exrules,o=this.rdates,i=this.exdates;switch(e){case"rrule":n=n.filter((e=>e!==t));break;case"exrule":r=r.filter((e=>e!==t));break;case"rdate":o=this.rdates.remove(t);break;case"exdate":i=this.exdates.remove(t)}return new Pr({timezone:this.timezone,data:this.data,rrules:n,exrules:r,rdates:o,exdates:i})}set(e,t,n={}){let r=this.timezone,o=this.rrules,i=this.exrules,a=this.rdates,s=this.exdates;switch(e){case"timezone":if(t===this.timezone&&!n.keepLocalTime)return this;n.keepLocalTime&&(o=o.map((e=>e.set("timezone",t,n))),i=i.map((e=>e.set("timezone",t,n))),a=a.set("timezone",t,n),s=s.set("timezone",t,n)),r=t;break;case"rrules":o=t;break;case"exrules":i=t;break;case"rdates":a=t;break;case"exdates":s=t}return new Pr({timezone:r,data:this.data,rrules:o,exrules:i,rdates:a,exdates:s})}}Error,Error;class Rr{constructor(e){this.processor=e,this.start=e.start,this.end=e.end,this.options=e.options}}class Mr extends Rr{constructor(e,t){super(e),this.initDate=t,this.intervalUnit=function(e){switch(e){case"YEARLY":return"year";case"MONTHLY":return"month";case"WEEKLY":return"week";case"DAILY":return"day";case"HOURLY":return"hour";case"MINUTELY":return"minute";case"SECONDLY":return"second";case"MILLISECONDLY":return"millisecond";default:throw new Error("unknown freq passed to freqToGranularity()")}}(this.options.frequency),this.firstIntervalStartDate=this.normalizedStartDate(this.options.start),this.intervalStartDate=this.firstIntervalStartDate,this.intervalEndDate=this.normalizedEndDate(this.firstIntervalStartDate),this.skipToInterval(this.initDate)}run(e){return this.validateDate(new zn(e))}validateDate(e){const{date:t}=e;return e instanceof zn&&this.dateIsWithinInterval(t)?e:(this.skipToInterval(t),new Ln(this.dateIsWithinInterval(t)?t:this.setToCurrentInterval()))}setToCurrentInterval(){return this.intervalStartDate}normalizedStartDate(e){return"WEEKLY"===this.options.frequency?e.granularity("week",{weekStart:this.options.weekStart}):e.granularity(this.intervalUnit)}normalizedEndDate(e){switch(this.options.frequency){case"YEARLY":return e.add(1,"year");case"MONTHLY":return e.add(1,"month");case"WEEKLY":return e.add(1,"week");case"DAILY":return e.add(1,"day");case"HOURLY":return e.add(1,"hour");case"MINUTELY":return e.add(1,"minute");case"SECONDLY":return e.add(1,"second");case"MILLISECONDLY":return e.add(1,"millisecond");default:throw new Error(`Unknown frequency ${this.options.frequency}`)}}skipToInterval(e){const t=this.intervalDifference(e);this.intervalStartDate=this.firstIntervalStartDate.add(t,this.intervalUnit),this.intervalEndDate=this.normalizedEndDate(this.intervalStartDate)}dateIsWithinInterval(e){return this.intervalStartDate.isBeforeOrEqual(e)&&this.intervalEndDate.isAfter(e)}intervalDifference(e){return Zr({first:this.firstIntervalStartDate,second:e,unit:this.intervalUnit,interval:this.options.interval,weekStart:this.options.weekStart,direction:"after"})}}function Zr({first:e,second:t,unit:n,interval:r,weekStart:o,direction:i}){let a=(()=>{let r,i;switch(n){case"year":return i=12*(t.get("year")-e.get("year")),i=i+t.get("month")-e.get("month"),Math.floor(i/12);case"month":return i=12*(t.get("year")-e.get("year")),i=i+t.get("month")-e.get("month"),i;case"week":e=e.granularity("week",{weekStart:o}),r=ln.MILLISECONDS_IN_WEEK;break;case"day":r=ln.MILLISECONDS_IN_DAY;break;case"hour":r=ln.MILLISECONDS_IN_HOUR;break;case"minute":r=ln.MILLISECONDS_IN_MINUTE;break;case"second":r=ln.MILLISECONDS_IN_SECOND;break;case"millisecond":r=1;break;default:throw new Error("Unexpected `unit` value")}const a=t.valueOf()-e.valueOf();return Math.floor(a/r)})();return a=("after"===i?Math.ceil:Math.floor)(a/r)*r,a}class _r extends Mr{setToCurrentInterval(){return this.intervalEndDate.subtract(1,"millisecond")}intervalDifference(e){return Zr({first:this.firstIntervalStartDate,second:e,unit:this.intervalUnit,interval:this.options.interval,weekStart:this.options.weekStart,direction:"before"})}}const jr=["MILLISECONDLY","SECONDLY","MINUTELY","HOURLY","DAILY","WEEKLY","MONTHLY","YEARLY"],zr={name:"FrequencyRule",get:e=>void 0!==e.options.byMillisecondOfSecond||"MILLISECONDLY"!==e.options.frequency?null:e.reverse?new _r(e,e.end):new Mr(e,e.start),normalizeOptions:(e,t)=>{if(!jr.includes(e.frequency))throw new Zn(`"frequency" must be one of ${JSON.stringify(jr)}`);if(void 0!==e.interval){if(!Number.isInteger(e.interval))throw new Zn('"interval" expects a whole number');if(e.interval<1)throw new Zn('"interval" cannot be less than 1')}if(void 0!==e.weekStart&&!ln.WEEKDAYS.includes(e.weekStart))throw new Zn(`"weekStart" must be one of ${JSON.stringify(ln.WEEKDAYS)}`);t.frequency=e.frequency,t.interval=e.interval||1,t.weekStart=e.weekStart||"MO"},deps:()=>[zr]};function Lr(e){return Array.isArray(e)&&e.length>0}const Ur=new WeakMap;class Fr extends Rr{constructor(e){super(e),Ur.has(this.processor)||Ur.set(this.processor,new Mr(e,e.start)),this.frequency=Ur.get(this.processor)}validateDate(e){return this.frequency.validateDate(e)}}class Yr extends Rr{constructor(e){super(e),Ur.has(this.processor)||Ur.set(this.processor,new _r(e,e.end)),this.frequency=Ur.get(this.processor)}validateDate(e){return this.frequency.validateDate(e)}}class $r extends Yr{run(e){const t=e.get(this.granularity);for(const n of this.option)if(!(t<n))return t===n?this.validateDate(new zn(e)):this.validateDate(new Ln(e.endGranularity(this.baseGranularity).set(this.granularity,n)));return this.validateDate(new Ln(e.endGranularity(this.baseGranularity).subtract(1,this.baseGranularity).set(this.granularity,this.option[0])))}}class Wr extends $r{constructor(){super(...arguments),this.baseGranularity="second",this.granularity="millisecond",this.option=this.options.byMillisecondOfSecond.slice().reverse()}}class Vr extends Fr{run(e){const t=e.get(this.granularity);for(const n of this.option)if(!(t>n))return t===n?this.validateDate(new zn(e)):this.validateDate(new Ln(e.granularity(this.baseGranularity).set(this.granularity,n)));return this.validateDate(new Ln(e.granularity(this.baseGranularity).add(1,this.baseGranularity).set(this.granularity,this.option[0])))}}class qr extends Vr{constructor(){super(...arguments),this.baseGranularity="second",this.granularity="millisecond",this.option=this.options.byMillisecondOfSecond}}const Gr={name:"ByMillisecondOfSecond",get:e=>void 0===e.options.byMillisecondOfSecond?null:e.reverse?new Wr(e):new qr(e),normalizeOptions:(e,t)=>{if(void 0!==e.byMillisecondOfSecond){if(!Lr(e.byMillisecondOfSecond))throw new Zn('"byMillisecondOfSecond" expects a non-empty array');if(e.byMillisecondOfSecond.some((e=>e<0||e>999)))throw new Zn('"byMillisecondOfSecond" values must be >= 0 && <= 999');t.byMillisecondOfSecond=e.byMillisecondOfSecond,t.byMillisecondOfSecond.sort(In)}else"MILLISECONDLY"!==e.frequency&&(t.byMillisecondOfSecond=[t.start.get("millisecond")])},deps:()=>[zr,Gr]};class Hr extends $r{constructor(){super(...arguments),this.baseGranularity="minute",this.granularity="second",this.option=this.options.bySecondOfMinute.slice().reverse()}}class Qr extends Vr{constructor(){super(...arguments),this.baseGranularity="minute",this.granularity="second",this.option=this.options.bySecondOfMinute}}const Kr={name:"BySecondOfMinute",get:e=>void 0===e.options.bySecondOfMinute?null:e.reverse?new Hr(e):new Qr(e),normalizeOptions:(e,t)=>{if(void 0!==e.bySecondOfMinute){if(!Lr(e.bySecondOfMinute))throw new Zn('"bySecondOfMinute" expects a non-empty array');if(e.bySecondOfMinute.some((e=>e<0||e>60)))throw new Zn('"bySecondOfMinute" values must be >= 0 && <= 60');t.bySecondOfMinute=e.bySecondOfMinute,t.bySecondOfMinute.sort(In)}else["SECONDLY","MILLISECONDLY"].includes(e.frequency)||(t.bySecondOfMinute=[t.start.get("second")])},deps:()=>[zr,Kr,Gr]};class Xr extends $r{constructor(){super(...arguments),this.baseGranularity="hour",this.granularity="minute",this.option=this.options.byMinuteOfHour.slice().reverse()}}class Jr extends Vr{constructor(){super(...arguments),this.baseGranularity="hour",this.granularity="minute",this.option=this.options.byMinuteOfHour}}const eo={name:"ByMinuteOfHour",get:e=>void 0===e.options.byMinuteOfHour?null:e.reverse?new Xr(e):new Jr(e),normalizeOptions:(e,t)=>{if(void 0!==e.byMinuteOfHour){if(!Lr(e.byMinuteOfHour))throw new Zn('"byMinuteOfHour" expects a non-empty array');if(e.byMinuteOfHour.some((e=>e<0||e>59)))throw new Zn('"byMinuteOfHour" values must be >= 0 && <= 59');t.byMinuteOfHour=e.byMinuteOfHour,t.byMinuteOfHour.sort(In)}else["MINUTELY","SECONDLY","MILLISECONDLY"].includes(e.frequency)||(t.byMinuteOfHour=[t.start.get("minute")])},deps:()=>[zr,eo,Kr,Gr]};class to extends $r{constructor(){super(...arguments),this.baseGranularity="day",this.granularity="hour",this.option=this.options.byHourOfDay.slice().reverse()}}class no extends Vr{constructor(){super(...arguments),this.baseGranularity="day",this.granularity="hour",this.option=this.options.byHourOfDay}}const ro={name:"ByHourOfDay",get:e=>void 0===e.options.byHourOfDay?null:e.reverse?new to(e):new no(e),normalizeOptions:(e,t)=>{if(void 0!==e.byHourOfDay){if(!Lr(e.byHourOfDay))throw new Zn('"byHourOfDay" expects a non-empty array');if(e.byHourOfDay.some((e=>e<0||e>23)))throw new Zn('"byHourOfDay" values must be >= 0 && <= 23');t.byHourOfDay=e.byHourOfDay,t.byHourOfDay.sort(In)}else["YEARLY","MONTHLY","WEEKLY","DAILY"].includes(e.frequency)&&(t.byHourOfDay=[t.start.get("hour")])},deps:()=>[zr,ro,eo,Kr,Gr]};function oo(e,t){return e.add(gn(e.get("weekday"),t),"day")}function io(e,t,n){let r=e.set("day",1);return n<0&&(r=r.add(1,"month")),r=oo(r,t),n<0?r.add(n,"week"):r.add(n-1,"week")}class ao extends Fr{run(e){const t=so(e,this.options.byDayOfMonth,this.options.byDayOfWeek),n=e.get("day");for(const r of t)if(!(n>r))return n===r?this.validateDate(new zn(e)):this.validateDate(new Ln(e.granularity("month").set("day",r)));let r,o=e,i=0;for(;!r&&i<30;)o=o.granularity("month").add(1,"month"),r=so(o,this.options.byDayOfMonth,this.options.byDayOfWeek)[0],i++;if(i>=13)throw new jn("byDayOfMonth Infinite while loop");return this.validateDate(new Ln(o.set("day",r)))}}function so(e,t,n){const r=e.endGranularity("month").get("day");let o=t.filter((e=>r>=Math.abs(e))).map((e=>e>0?e:r+e+1));if(n){const t=e.granularity("month"),r=[];n.forEach((n=>{if("string"==typeof n)return void r.push(...o.filter((e=>t.set("day",e).get("weekday")===n)));const i=io(e,...n).get("day");o.includes(i)&&r.push(i)})),o=Array.from(new Set(r))}return o.sort(((e,t)=>e>t?1:e<t?-1:0))}class lo extends Yr{run(e){const t=so(e,this.options.byDayOfMonth,this.options.byDayOfWeek).reverse(),n=e.get("day");for(const r of t)if(!(n<r))return n===r?this.validateDate(new zn(e)):this.validateDate(new Ln(e.endGranularity("month").set("day",r)));let r,o=e,i=0;for(;!r&&i<30;)o=o.endGranularity("month").subtract(1,"month"),r=so(o,this.options.byDayOfMonth,this.options.byDayOfWeek).pop(),i++;if(i>=13)throw new jn("byDayOfMonth Infinite while loop");return this.validateDate(new Ln(o.set("day",r)))}}const uo={name:"ByDayOfMonth",get:e=>void 0===e.options.byDayOfMonth?null:e.reverse?new lo(e):new ao(e),normalizeOptions:(e,t)=>{if(void 0!==e.byDayOfMonth){if("WEEKLY"===e.frequency)throw new Zn('when "frequency" is "WEEKLY", "byDayOfMonth" cannot be present');if(!Lr(e.byDayOfMonth))throw new Zn('"byDayOfMonth" expects a non-empty array');if(e.byDayOfMonth.some((e=>0===e||e<-31||e>31)))throw new Zn('"byDayOfMonth" values must be `num !== 0 && num <= 31 && num >= -31`');t.byDayOfMonth=e.byDayOfMonth.slice()}else Lr(e.byDayOfWeek)||Lr(e.byDayOfYear)||!["YEARLY","MONTHLY"].includes(e.frequency)||(t.byDayOfMonth=[t.start.get("day")])},deps:()=>[zr,uo,ro,eo,Kr,Gr]};function co(e,t,n){let r=e.set("month",1).set("day",1);return n<0&&(r=r.add(1,"year")),r=oo(r,t),n<0?r.add(n,"week"):r.add(n-1,"week")}function po(e,t){const n=gn(e.get("weekday"),t);return e.subtract(0===n?0:7-n,"day")}class fo extends Yr{run(e){return"YEARLY"===this.options.frequency?void 0===this.options.byMonthOfYear?this.expandYearly(e):this.expandMonthly(e):"MONTHLY"===this.options.frequency?this.expandMonthly(e):this.expand(e)}expandYearly(e){let t=ho(e,this.options.byDayOfWeek)[0],n=0,r=e;for(;!t&&n<28;)n++,r=r.granularity("year").subtract(1,"millisecond"),t=ho(r,this.options.byDayOfWeek)[0];if(!t)throw new jn("The byDayOfWeek rule appears to contain an impossible combination");return this.result(e,t)}expandMonthly(e){let t=mo(e,this.options.byDayOfWeek)[0],n=0,r=e;for(;!t&&n<50;)n++,r=r.granularity("month").subtract(1,"millisecond"),t=mo(r,this.options.byDayOfWeek)[0];if(!t)throw new jn("The byDayOfWeek rule appears to contain an impossible combination");return this.result(e,t)}expand(e){const t=this.options.byDayOfWeek.map((t=>po(e,t))).sort(pn).pop();return this.result(e,t)}result(e,t){return t.isEqual(e)?this.validateDate(new zn(e)):this.validateDate(new Ln(t.endGranularity("day")))}}function ho(e,t){return fn([...t.filter((e=>Array.isArray(e))).map((t=>co(e,...t))),...t.filter((e=>"string"==typeof e)).map((t=>po(e,t))).filter((t=>t.get("year")===e.get("year")))]).filter((t=>t.isBeforeOrEqual(e))).sort(pn).reverse()}function mo(e,t){return fn([...t.filter((e=>Array.isArray(e))).map((t=>io(e,...t))),...t.filter((e=>"string"==typeof e)).map((t=>po(e,t))).filter((t=>t.get("year")===e.get("year")&&t.get("month")===e.get("month")))]).filter((t=>t.isBeforeOrEqual(e))).sort(pn).reverse()}class go extends Fr{run(e){return"YEARLY"===this.options.frequency?void 0===this.options.byMonthOfYear?this.expandYearly(e):this.expandMonthly(e):"MONTHLY"===this.options.frequency?this.expandMonthly(e):this.expand(e)}expandYearly(e){let t=yo(e,this.options.byDayOfWeek)[0],n=0,r=e;for(;!t&&n<28;)n++,r=r.granularity("year").add(1,"year"),t=yo(r,this.options.byDayOfWeek)[0];if(!t)throw new jn("The byDayOfWeek rule appears to contain an impossible combination");return this.result(e,t)}expandMonthly(e){let t=Ao(e,this.options.byDayOfWeek)[0],n=0,r=e;for(;!t&&n<50;)n++,r=r.granularity("month").add(1,"month"),t=Ao(r,this.options.byDayOfWeek)[0];if(!t)throw new jn("The byDayOfWeek rule appears to contain an impossible combination");return this.result(e,t)}expand(e){const t=this.options.byDayOfWeek.map((t=>oo(e,t))).sort(pn)[0];return this.result(e,t)}result(e,t){return t.isEqual(e)?this.validateDate(new zn(e)):this.validateDate(new Ln(t.granularity("day")))}}function yo(e,t){return fn([...t.filter((e=>Array.isArray(e))).map((t=>co(e,...t))),...t.filter((e=>"string"==typeof e)).map((t=>oo(e,t))).filter((t=>t.get("year")===e.get("year")))]).filter((t=>t.isAfterOrEqual(e))).sort(pn)}function Ao(e,t){return fn([...t.filter((e=>Array.isArray(e))).map((t=>io(e,...t))),...t.filter((e=>"string"==typeof e)).map((t=>oo(e,t))).filter((t=>t.get("year")===e.get("year")&&t.get("month")===e.get("month")))]).filter((t=>t.isAfterOrEqual(e))).sort(pn)}const bo={name:"ByDayOfWeek",get:e=>void 0===e.options.byDayOfWeek?null:e.reverse?new fo(e):new go(e),normalizeOptions:(e,t)=>{if(void 0!==e.byDayOfWeek){if(!Lr(e.byDayOfWeek))throw new Zn('"byDayOfWeek" expects a non-empty array');const n=e.byDayOfWeek.find((e=>Array.isArray(e)?!ln.WEEKDAYS.includes(e[0]):!ln.WEEKDAYS.includes(e)));if(n)throw new Zn(`"byDayOfWeek" expects weedays in the form ${JSON.stringify(ln.WEEKDAYS)} but "${n}" was provided`);if(!["YEARLY","MONTHLY"].includes(e.frequency)&&e.byDayOfWeek.some((e=>Array.isArray(e))))throw new Zn('"byDayOfWeek" can only include a numeric value (i.e. `[string, number]`) when the "frequency" is either "MONTHLY" or "YEARLY"');if("MONTHLY"===e.frequency&&e.byDayOfWeek.some((e=>Array.isArray(e)&&(e[1]<-31||0===e[1]||e[1]>31))))throw new Zn('when "frequency" is "MONTHLY", each "byDayOfWeek" can optionally only have a numeric value >= -31 and <= 31 and !== 0');if("YEARLY"===e.frequency&&e.byDayOfWeek.some((e=>Array.isArray(e)&&(e[1]<-366||0===e[1]||e[1]>366))))throw new Zn('when "frequency" is "YEARLY", each "byDayOfWeek" can optionally only have a numeric value >= -366 and <= 366 and !== 0');t.byDayOfWeek=e.byDayOfWeek}else Lr(e.byDayOfMonth)||"WEEKLY"!==e.frequency||(t.byDayOfWeek=[t.start.get("weekday")])},deps:()=>[zr,bo,ro,eo,Kr,Gr]};class vo extends Yr{constructor(){super(...arguments),this.option=this.processor.options.byMonthOfYear.slice().reverse()}run(e){const t=e.get("month");for(const n of this.option)if(!(t<n))return t===n?this.validateDate(new zn(e)):this.validateDate(new Ln(e.endGranularity("year").set("month",n)));return this.validateDate(new Ln(e.endGranularity("year").subtract(1,"year").set("month",this.option[0])))}}class Co extends Fr{run(e){const t=e.get("month");for(const n of this.options.byMonthOfYear)if(!(t>n))return t===n?this.validateDate(new zn(e)):this.validateDate(new Ln(e.granularity("year").set("month",n)));return this.validateDate(new Ln(e.granularity("year").add(1,"year").set("month",this.options.byMonthOfYear[0])))}}const wo={name:"ByMonthOfYear",get:e=>void 0===e.options.byMonthOfYear?null:e.reverse?new vo(e):new Co(e),normalizeOptions:(e,t)=>{if(void 0!==e.byMonthOfYear){if(!Lr(e.byMonthOfYear))throw new Zn('"byMonthOfYear" expects a non-empty array');if(e.byMonthOfYear.some((e=>e<1||e>12)))throw new Zn('"byMonthOfYear" values must be `num >= 1 && num >= 12`');t.byMonthOfYear=e.byMonthOfYear.slice(),t.byMonthOfYear.sort(In)}else Lr(e.byDayOfMonth)||Lr(e.byDayOfWeek)||Lr(e.byDayOfYear)||"YEARLY"!==e.frequency||(t.byMonthOfYear=[t.start.get("month")])},deps:()=>[zr,wo,uo,ro,eo,Kr,Gr]},xo=[zr,wo,uo,bo,ro,eo,Kr,Gr];class Eo extends an{constructor(e,t={}){if(super(void 0,t),!["UTC",null,void 0].includes(t.timezone))throw new rn(`StandardDateAdapter only supports "UTC" and local time zones but "${t.timezone}" was provided.`);this._date=new Date(e),this.timezone=void 0!==t.timezone?t.timezone:null,this.assertIsValid()}static isDate(e){return"[object Date]"===Object.prototype.toString.call(e)}static fromDate(e,t){return new Eo(e,t)}static fromJSON(e){const t=[e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond];switch(e.timezone){case"UTC":return new Eo(new Date(Date.UTC(...t)),{timezone:"UTC",duration:e.duration});case null:return new Eo(new Date(...t),{timezone:null,duration:e.duration});default:throw new rn(`The \`StandardDateAdapter\` only supports datetimes in UTC or LOCAL (null) time. You provided a JSON object with timezone "${e.timezone}".`)}}static fromDateTime(e){const t=Eo.fromJSON(e.toJSON());return t.generators.push(...e.generators),t}get date(){return new Date(this._date)}get end(){if(this.duration)return this._end||(this._end=Eo.fromDateTime(this.toDateTime().add(this.duration,"millisecond")).date),this._end}set(e,t){if("timezone"===e)return this.timezone===t?this:new Eo(this._date,{timezone:t,duration:this.duration,generators:this.generators});if("duration"===e)return this.duration===t?this:new Eo(this._date,{timezone:this.timezone,duration:t,generators:this.generators});throw new Dn(`Unknown prop "${e}" for StandardDateAdapter#set()`)}valueOf(){return this._date.valueOf()}toJSON(){let e;return e="UTC"===this.timezone?{timezone:this.timezone,year:this._date.getUTCFullYear(),month:this._date.getUTCMonth()+1,day:this._date.getUTCDate(),hour:this._date.getUTCHours(),minute:this._date.getUTCMinutes(),second:this._date.getUTCSeconds(),millisecond:this._date.getUTCMilliseconds()}:{timezone:this.timezone,year:this._date.getFullYear(),month:this._date.getMonth()+1,day:this._date.getDate(),hour:this._date.getHours(),minute:this._date.getMinutes(),second:this._date.getSeconds(),millisecond:this._date.getMilliseconds()},this.duration&&(e.duration=this.duration),e}assertIsValid(){if(!Eo.isDate(this._date)||isNaN(this._date.valueOf()))throw new rn("StandardDateAdapter has invalid date.");if(![null,"UTC"].includes(this.timezone))throw new rn(`StandardDateAdapter only supports local (null) and UTC timezones but "${this.timezone}" was specified.`);if(this.duration&&this.duration<=0)throw new rn("If provided, duration must be greater than 0.");return!0}}function ko(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Bo(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){ko(i,r,o,a,s,"next",e)}function s(e){ko(i,r,o,a,s,"throw",e)}a(void 0)}))}}Eo.hasTimezoneSupport=!1,an.adapter=Eo,Br.recurrenceRules=xo;var So=function(){var e=Bo(regeneratorRuntime.mark((function e(t,n,r,o,i){var a,s,l,u=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=u.length>5&&void 0!==u[5]?u[5]:function(){},s=!(u.length>6&&void 0!==u[6])||u[6],e.prev=2,i&&(v().defaults.headers.common.Authorization=localStorage.getItem("token")),Mm.dispatch(wt()),e.next=7,v().post(t,n);case 7:l=e.sent,e.next=15;break;case 10:e.prev=10,e.t0=e.catch(2),console.log(e.t0),s&&Mm.dispatch(vt(o||"Cannot connect to the server, please try again later.")),a(null,"There was a problem connecting to the server: "+e.t0);case 15:return e.prev=15,Mm.dispatch(xt()),$t().isDefined(l.data)?r===l.data.message?(s&&Mm.dispatch(Ct(l.data.message)),a(l.data)):(s&&Mm.dispatch(vt(l.data.message)),a(null,l.data.message)):(Mm.dispatch(vt("There was an error, the server sent undefined results")),a(null,"There was an error, the server sent undefined results")),e.finish(15);case 20:case"end":return e.stop()}}),e,null,[[2,10,15,20]])})));return function(t,n,r,o,i){return e.apply(this,arguments)}}(),Oo=function(){var e=Bo(regeneratorRuntime.mark((function e(t,n,r,o){var i,a,s,l=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=l.length>4&&void 0!==l[4]?l[4]:function(){},a=!(l.length>5&&void 0!==l[5])||l[5],e.prev=2,o&&(v().defaults.headers.common.Authorization=localStorage.getItem("token")),Mm.dispatch(wt()),e.next=7,v().get(t);case 7:s=e.sent,e.next=15;break;case 10:e.prev=10,e.t0=e.catch(2),console.log(e.t0),a&&Mm.dispatch(vt(r||"Cannot connect to the server, please try again later.")),i(null,"There was a problem connecting to the server: "+e.t0);case 15:return e.prev=15,Mm.dispatch(xt()),$t().isDefined(s.data)?n===s.data.message?(a&&Mm.dispatch(Ct(s.data.message)),i(s.data)):(a&&Mm.dispatch(vt(s.data.message)),i(null,s.data.message)):(Mm.dispatch(vt("There was an error, the server sent undefined results")),i(null,"There was an error, the server sent undefined results")),e.finish(15);case 20:case"end":return e.stop()}}),e,null,[[2,10,15,20]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),To=function(){var e=Bo(regeneratorRuntime.mark((function e(t,n,r,o,i){var a,s,l,u=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=u.length>5&&void 0!==u[5]?u[5]:function(){},s=!(u.length>6&&void 0!==u[6])||u[6],e.prev=2,i&&(v().defaults.headers.common.Authorization=localStorage.getItem("token")),Mm.dispatch(wt()),e.next=7,v().delete(t,{data:n});case 7:l=e.sent,e.next=14;break;case 10:e.prev=10,e.t0=e.catch(2),a(null,"There was a problem connecting to the server: "+e.t0),s&&Mm.dispatch(vt(o||"Cannot connect to the server, please try again later."));case 14:return e.prev=14,Mm.dispatch(xt()),$t().isDefined(l.data)?r===l.data.message?(a(l.data),s&&Mm.dispatch(Ct(l.data.message))):(a(null,l.data.message),s&&Mm.dispatch(vt(l.data.message))):(a(null,"There was an error, the server sent undefined results"),Mm.dispatch(vt("There was an error, the server sent undefined results"))),e.finish(14);case 19:case"end":return e.stop()}}),e,null,[[2,10,14,19]])})));return function(t,n,r,o,i){return e.apply(this,arguments)}}(),Do=function(){var e=Bo(regeneratorRuntime.mark((function e(t,n,r,o,i){var a,s,l=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=l.length>5&&void 0!==l[5]?l[5]:function(){},e.prev=1,i&&(v().defaults.headers.common.Authorization=localStorage.getItem("token")),Mm.dispatch(wt()),e.next=6,v().post(t,n,{headers:{"Content-Type":"multipart/form-data"}});case 6:s=e.sent,e.next=14;break;case 9:e.prev=9,e.t0=e.catch(1),console.log(e.t0),Mm.dispatch(vt(o||"Cannot connect to the server, please try again later.")),a(null,"There was a problem connecting to the server: "+e.t0);case 14:return e.prev=14,Mm.dispatch(xt()),$t().isDefined(s.data)?r===s.data.message?(Mm.dispatch(Ct(s.data.message)),a(s.data)):(Mm.dispatch(vt(s.data.message)),a(null,s.data.message)):(Mm.dispatch(vt("There was an error, the server sent undefined results")),a(null,"There was an error, the server sent undefined results")),e.finish(14);case 19:case"end":return e.stop()}}),e,null,[[1,9,14,19]])})));return function(t,n,r,o,i){return e.apply(this,arguments)}}(),No=function(e){var t={};if(e.meetings&&0!==e.meetings.length&&(t=e.meetings[0],e.meetings.forEach((function(e){new Date(e.date)<=new Date(t.date)&&new Date(e.date)>=new Date&&(t=e),console.log(t)}))),e.recurringMeeting){var n,r=new Date(e.recurringMeeting.date);return console.log("START DATE",r,e.recurringMeeting),n=new Pr({rrules:[{frequency:e.recurringMeeting.frequency.toUpperCase(),start:r,end:new Date(r.getFullYear()+5,r.getMonth(),r.getDate())}]}).occurrences().toArray().filter((function(e){return e.date>=new Date})).map((function(e){var t=e.date;return new Date(t).toLocaleDateString()}))[0],e.recurringMeeting.date=n,0!==e.meetings.length&&new Date(n)>new Date(t.date)?t:e.recurringMeeting}return t},Io=function(){Mm.dispatch(ut()),Mm.dispatch(Ct("You have been successfully signed out.")),Mm.dispatch(bt())};function Po(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ro(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Mo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Zo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const _o=function(){var e,n=Ie(),r=Ze((function(e){return e.authReducer.user})),o=Mo((0,t.useState)(""),2),i=o[0],a=o[1],s=Mo((0,t.useState)(""),2),l=s[0],u=s[1],c=Mo((0,t.useState)(tn().Any),2),d=c[0],p=c[1],f=Mo((0,t.useState)("Public"),2),h=f[0],m=f[1],g=Mo((0,t.useState)(""),2),y=g[0],A=g[1],b=Mo((0,t.useState)(!1),2),v=b[0],C=b[1],w=Mo((0,t.useState)(!1),2),x=w[0],E=w[1],k=Mo((0,t.useState)(!1),2),B=k[0],S=k[1],O=Mo((0,t.useState)("#000000"),2),T=O[0],D=O[1],N=Mo((0,t.useState)(""),2),I=(N[0],N[1],function(){var e,t=(e=regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.next=4,So(Ft().StudyGroup.CreateStudyGroup,{name:i,groupColor:T,description:l,subject:d,privacySetting:h,course:y,school:v?r.school:"",isTutorGroup:x,isOnlineGroup:B},Kt().StudyGroup.SuccessStudyGroupCreated,Kt().StudyGroup.ErrorCreateStudyGroup,!0,(function(e,t){t||(n(At(e.newStudyGroup)),n(yt()))}));case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Ro(i,r,o,a,s,"next",e)}function s(e){Ro(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}());return t.createElement("div",{className:"create-studygroup-view"},t.createElement(nn,(Po(e={submitCreateStudyGroup:I,name:i,description:l,subject:d,privacy:h,courseCode:y,isAssociatedWithSchool:v,isTutorGroup:x,isOnlineGroup:B,groupColor:T,updateNameField:function(e){a(e.target.value)},updateDescriptionField:function(e){u(e.target.value)},updateSubjectField:function(e){p(e.target.options[e.target.selectedIndex].value)},updatePrivacy:function(e){m(e.target.options[e.target.selectedIndex].value)},updateCourseCodeField:function(e){A(e.target.value)},updateIsAssociatedWithSchool:function(e){C(e.target.checked)},updateIsTutorGroup:function(e){E(e.target.checked)},updateIsOnlineGroup:function(e){S(e.target.checked)},updateGroupColor:function(e){D(e.target.value)}},"submitCreateStudyGroup",I),Po(e,"userSchool",r.school),e)))};var jo=n(5935),zo={};function Lo(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Uo(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Lo(i,r,o,a,s,"next",e)}function s(e){Lo(i,r,o,a,s,"throw",e)}a(void 0)}))}}zo.styleTagTransform=g(),zo.setAttributes=p(),zo.insert=c().bind(null,"head"),zo.domAPI=l(),zo.insertStyleElement=h(),a()(jo.Z,zo),jo.Z&&jo.Z.locals&&jo.Z.locals;const Fo=function(e){var n=e.group,r=e.isLoggedIn,o=n.name,i=n.school,a=n.owner,s=n.subject,l=n.course,u=n.isTutorGroup,c=n.isOnlineGroup,d=n.groupColor,p=n.description,f=n._id,h=(Ze((function(e){return e.authReducer.user})),Ie()),m=de(),g=function(){var e=Uo(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),console.log("Submitting"),e.next=5,So(Ft().StudyGroup.JoinStudyGroup,{studyGroupId:f},Kt().StudyGroup.SuccessStudyGroupJoined,null,!0,(function(e,t){t||(h(At(n)),h(yt()))}));case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),y=function(){var e=Uo(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.next=4,So(Ft().Message.CreateConversation,{receiverId:a._id},Kt().Message.SuccessCreateConversation,null,!0,(function(e,t){m.push("/message"),h(yt())}));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return t.createElement("div",{className:"join-group-container"},t.createElement("div",{className:"group-popup-title",style:{backgroundColor:"".concat(d,"70")}},t.createElement("h1",null,o)),t.createElement("div",{className:"popup-info-fields"},t.createElement("div",{className:"info"},t.createElement(Lt,null,"Description"),t.createElement("p",null,p)),t.createElement("div",{className:"sub-info"},t.createElement("div",{className:"info"},t.createElement(Lt,null,"Owner"),t.createElement("p",null,a.name)),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Course Code"),t.createElement("p",null,l)),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Subject"),t.createElement("p",null,s)),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Associated With"),t.createElement("p",null,i)),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Type"),t.createElement("p",null,u?t.createElement("p",null,"Tutor"):t.createElement("p",null,"Group"))),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Meeting Format"),t.createElement("p",null,c?t.createElement("p",null,"Online"):t.createElement("p",null,"In Person"))),n.recurringMeeting&&t.createElement("div",{className:"info"},n.isOnlineGroup?t.createElement(Lt,null,"Meets ",t.createElement("strong",null,"Online"),":"):t.createElement(Lt,null,"Meets ",t.createElement("strong",null,"In-Person"),":"),t.createElement("p",null,n.recurringMeeting.frequency," on ",n.recurringMeeting.day," at"," ",n.recurringMeeting.time)))),r?t.createElement("div",{className:"side-by-side"},t.createElement(Zt,{type:It,onClick:y},"Message Study Group Owner"),t.createElement(Zt,{type:Pt,onClick:g},"Join")):t.createElement("p",null,"Please login or signup to join this study group or message its owner."))};var Yo=n(8677),$o={};function Wo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Vo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Vo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}$o.styleTagTransform=g(),$o.setAttributes=p(),$o.insert=c().bind(null,"head"),$o.domAPI=l(),$o.insertStyleElement=h(),a()(Yo.Z,$o),Yo.Z&&Yo.Z.locals&&Yo.Z.locals;const qo=function(e){var n=e.label,r=e.defaultInput,o=void 0===r?"":r,i=e.callback,a=e.label2,s=void 0===a?"":a,l=(Ie(),Wo((0,t.useState)(o),2)),u=l[0],c=l[1],d=Wo((0,t.useState)(o),2),p=d[0],f=d[1];return t.createElement(Tt,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),i(u,p),c("")}},t.createElement(jt,null,t.createElement(Lt,null,n),t.createElement(Vt,{onChange:function(e){c(e.target.value)},value:u})),""!==s&&t.createElement(jt,null,t.createElement(Lt,null,s),t.createElement(Vt,{onChange:function(e){f(e.target.value)},value:p})),t.createElement(Zt,{type:Pt},"Done"))};var Go=n(2131),Ho={};Ho.styleTagTransform=g(),Ho.setAttributes=p(),Ho.insert=c().bind(null,"head"),Ho.domAPI=l(),Ho.insertStyleElement=h(),a()(Go.Z,Ho),Go.Z&&Go.Z.locals&&Go.Z.locals;const Qo=function(e){var n=e.callback,r=e.message,o=e.isConfirmation,i=e.firstButtonTitle,a=e.secondButtonTitle,s=Ie();return t.createElement("div",{className:"confirmation-container"},t.createElement("p",null,r),t.createElement("div",{className:"side-by-side"},t.createElement(Zt,{onClick:function(){s(yt()),n(!0)},type:o?Rt:It},i||"Yes"),t.createElement(Zt,{onClick:function(){s(yt()),n(!1)},type:It},a||"No")))},Ko={Login:"Login",ForgotPassword:"Forgot password",CreateAccount:"Create account",VerificationEmailConfirmation:"Verification email confirmation",AccountSetup:"Account setup"},Xo={StudyGroup:{Join:"Join Study Group",Create:"Create Study Group",Edit:"Edit Study Group",CreateMeeting:"Create Meeting",CreatePost:"Create Post",ViewPost:"View Post",ViewMeetings:"View Meetings",ViewMember:"View Member"},Input:"Input Information",Confirmation:"Confirm",Report:"Report"};function Jo(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function ei(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ti(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ti(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ti(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ni=function(e){var n=e.group,r=Ie(),o=de(),i=ei((0,t.useState)(n.name),2),a=i[0],s=i[1],l=ei((0,t.useState)(n.description),2),u=l[0],c=l[1],d=ei((0,t.useState)(n.subject),2),p=d[0],f=d[1],h=ei((0,t.useState)(n.privacySetting),2),m=h[0],g=h[1],y=ei((0,t.useState)(n.course),2),A=y[0],b=y[1],v=ei((0,t.useState)(n.isTutorGroup),2),C=v[0],w=v[1],x=ei((0,t.useState)(n.isOnlineGroup),2),E=x[0],k=x[1],B=ei((0,t.useState)(n.groupColor),2),S=B[0],O=B[1],T=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.next=4,So(Ft().StudyGroup.EditStudyGroup,{studyGroupId:n._id,name:a,groupColor:S,description:u,subject:p,privacySetting:m,course:A,isTutorGroup:C,isOnlineGroup:E},Kt().StudyGroup.SuccessStudyGroupEdited,null,!0,(function(e,t){t||(o.go(0),r(yt()))}));case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Jo(i,r,o,a,s,"next",e)}function s(e){Jo(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return t.createElement("div",{className:"edit-studygroup-view"},console.log("GROUP::::::::::",n),t.createElement(nn,{submitCreateStudyGroup:T,name:a,description:u,subject:p,privacy:m,courseCode:A,isTutorGroup:C,isOnlineGroup:E,groupColor:S,updateNameField:function(e){s(e.target.value)},updateDescriptionField:function(e){c(e.target.value)},updateSubjectField:function(e){f(e.target.options[e.target.selectedIndex].value)},updatePrivacy:function(e){g(e.target.options[e.target.selectedIndex].value)},updateCourseCodeField:function(e){b(e.target.value)},updateIsTutorGroup:function(e){w(e.target.checked)},updateIsOnlineGroup:function(e){k(e.target.checked)},updateGroupColor:function(e){O(e.target.value)},userSchool:null}))};var ri=n(4193);function oi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ii=function(e){var n,r=e.date,o=e.time,i=e.frequency,a=e.details,s=e.location,l=e.roomNumber,u=e.updateDateField,c=e.updateTimeField,d=e.updateFrequencyField,p=e.updateDetailsField,f=e.updateLocationField,h=e.updateRoomNumberField,m=e.submitCreateMeeting,g=e.isRecurringMeeting;return t.createElement("div",{className:"create-meeting-form"},t.createElement(Tt,{onSubmit:m},t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Date"),t.createElement(Vt,{value:r,onChange:u,type:"date"})),t.createElement(jt,null,t.createElement(Lt,null,"Time"),t.createElement(Vt,{value:o,onChange:c,type:"time"})),g&&t.createElement(jt,null,t.createElement(Lt,null,"Frequency"),t.createElement(Xt,{options:(n=Object.values(ri.MeetingFrequencies),function(e){if(Array.isArray(e))return oi(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return oi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?oi(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),value:i,onChange:d}))),t.createElement(jt,null,t.createElement(Lt,null,"Details"),t.createElement(Vt,{value:a,onChange:p,isTextArea:!0})),t.createElement(jt,null,t.createElement(Lt,null,"Location"),t.createElement(Vt,{value:s,onChange:f})),t.createElement(jt,null,t.createElement(Lt,null,"Room Number (if applicable)"),t.createElement(Vt,{value:l,onChange:h})),t.createElement(Zt,{type:Pt},"Create")))};function ai(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return si(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?si(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function si(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const li=function(e){var n=e.group,r=e.isRecurringMeeting,o=Ie(),i=de(),a=ai((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.date.replace("/","-"):""),2),s=a[0],l=a[1],u=ai((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.time:""),2),c=u[0],d=u[1],p=ai((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.frequency:ri.MeetingFrequencies.Daily),2),f=p[0],h=p[1],m=ai((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.details:""),2),g=m[0],y=m[1],A=ai((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.location:""),2),b=A[0],v=A[1],C=ai((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.roomNumber:""),2),w=C[0],x=C[1];return t.createElement(t.Fragment,null,t.createElement(ii,{date:s,time:c,frequency:f,details:g,location:b,roomNumber:w,updateDateField:function(e){l(e.target.value)},updateTimeField:function(e){d(e.target.value)},updateFrequencyField:function(e){h(e.target.value)},updateDetailsField:function(e){y(e.target.value)},updateLocationField:function(e){v(e.target.value)},updateRoomNumberField:function(e){x(e.target.value)},submitCreateMeeting:function(e){e.preventDefault(),e.stopPropagation(),r?So(Ft().StudyGroup.SetRecurringMeeting,{day:new Date(s).getDay(),date:s.replace(/-/g,"/"),time:ri.Time.parse24HourTimeString(c).toString(),frequency:f,details:g,location:b,roomNumber:w,studyGroupId:n._id},Kt().StudyGroup.SetRecurringMeeting.Success,null,!0,(function(e,t){t||(o(yt()),i.go(0))})):So(Ft().StudyGroup.AddOneTimeMeeting,{day:new Date(s).getDay(),date:s.replace(/-/g,"/"),time:ri.Time.parse24HourTimeString(c).toString(),details:g,location:b,roomNumber:w,studyGroupId:n._id},Kt().StudyGroup.AddOneTimeMeeting.Success,null,!0,(function(e,t){t||(o(yt()),i.go(0))}))},isRecurringMeeting:r}))},ui=function(e){var n=e.title,r=e.body,o=e.category,i=e.attachment,a=e.updateTitleField,s=e.updateBodyField,l=e.updateCategoryField,u=e.updateAttachment,c=e.submitCreatePost;return t.createElement("div",{className:"create-meeting-form"},t.createElement(Tt,{onSubmit:c},t.createElement(jt,null,t.createElement(Lt,null,"Title"),t.createElement(Vt,{value:n,onChange:a})),t.createElement(jt,null,t.createElement(Lt,null,"Body"),t.createElement(Vt,{value:r,onChange:s,isTextArea:!0})),t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Category"),t.createElement(Xt,{value:o,onChange:l,options:["Problem","Discussion","Question","Announcement"]})),t.createElement(jt,null,t.createElement(Lt,null,"Image"),t.createElement("div",{className:"photo"},t.createElement("input",{type:"file",id:"fileInput right",accept:".png, .jpg, .jpeg",name:"profilePicture",onChange:u}),t.createElement("img",{className:"imgPreview",id:"left",src:i,alt:""})))),t.createElement(Zt,{type:Pt},"Create")))};var ci=n(9114),di=n.n(ci);function pi(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function fi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return hi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?hi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const mi=function(e){var n=e.group,r=fi((0,t.useState)(""),2),o=r[0],i=r[1],a=fi((0,t.useState)(""),2),s=a[0],l=a[1],u=fi((0,t.useState)(di().Problem),2),c=u[0],d=u[1],p=fi((0,t.useState)(""),2),f=p[0],h=p[1],m=de(),g=Ie(),y=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),(r=new FormData).append("title",o),r.append("message",s),r.append("category",c),r.append("attachment",f),r.append("studyGroupId",n._id),e.next=10,Do(Ft().StudyGroup.CreatePost,r,Kt().StudyGroup.CreatePost.Success,null,!0,(function(e,t){t||(g(yt()),m.go(0))}));case 10:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){pi(i,r,o,a,s,"next",e)}function s(e){pi(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return t.createElement(ui,{title:o,body:s,category:c,attachment:f,updateTitleField:function(e){i(e.target.value)},updateBodyField:function(e){l(e.target.value)},updateCategoryField:function(e){d(e.target.value)},updateAttachment:function(e){h(e.target.files[0])},submitCreatePost:y})};var gi=n(116),yi={};yi.styleTagTransform=g(),yi.setAttributes=p(),yi.insert=c().bind(null,"head"),yi.domAPI=l(),yi.insertStyleElement=h(),a()(gi.Z,yi),gi.Z&&gi.Z.locals&&gi.Z.locals;var Ai=n(417),bi={};bi.styleTagTransform=g(),bi.setAttributes=p(),bi.insert=c().bind(null,"head"),bi.domAPI=l(),bi.insertStyleElement=h(),a()(Ai.Z,bi),Ai.Z&&Ai.Z.locals&&Ai.Z.locals;const vi=function(e){var n=e.image,r=e.name;return n?t.createElement("img",{className:"profile-picture",src:"data:image/png;charset=utf-8;base64,"+n,alt:""}):t.createElement("div",{className:"profile-picture-initial"},r?r[0]:"")};var Ci=n(1985),wi={};wi.styleTagTransform=g(),wi.setAttributes=p(),wi.insert=c().bind(null,"head"),wi.domAPI=l(),wi.insertStyleElement=h(),a()(Ci.Z,wi),Ci.Z&&Ci.Z.locals&&Ci.Z.locals;var xi=n(3094),Ei=n(9584),ki=n(4603),Bi=n(9572),Si=n(3570),Oi=function(e){var n,r;switch(e.type){case di().Question:n=t.createElement(xi.Z,{className:"top-icon",style:{color:e.color}}),r="Answer";break;case di().Announcement:n=t.createElement(Ei.Z,{className:"top-icon",style:{color:e.color}}),r="Comment";break;case di().Discussion:n=t.createElement(ki.Z,{className:"top-icon",style:{color:e.color}}),r="Reply";break;case di().Problem:n=t.createElement(Bi.Z,{className:"top-icon",style:{color:e.color}}),r="Solution";break;case di().Meeting:n=t.createElement(Si.Z,{className:"top-icon",style:{color:e.color}})}return{icon:n,responseType:r}};const Ti=function(e){var n=Ie();return console.log(e),t.createElement("div",{className:"post-container"},t.createElement("div",{className:"post-inner"},t.createElement("div",{className:"post-details",style:{backgroundColor:e.type!==di().Meeting?"rgba(255, 255, 255, 0.9)":e.color+"10",border:e.type===di().Meeting&&"white 9px solid"},onClick:function(){e.type!==di().Meeting?n({type:Ve,payload:e}):n(pt(e.group))}},t.createElement("div",{className:"post-inner-content"},t.createElement("div",{className:"post-top"},Oi(e).icon,t.createElement("h1",{style:{backgroundColor:e.color}},e.type)),t.createElement("h1",{className:"post-title"},e.title),t.createElement("p",{className:"post-body"}," ",e.message)),e.attachment&&""!==e.attachment?t.createElement(t.Fragment,null,t.createElement("hr",null),t.createElement("img",{className:"attachment",src:"data:image/png;charset=utf-8;base64,"+e.attachment,alt:""})):""),t.createElement("div",{className:"post-metainfo"},t.createElement("p",{className:"post-date"},e.timestamp&&new Date(e.timestamp).toLocaleDateString()))),t.createElement("div",{className:"post-creator",onClick:function(){return n(ft(e.creator))}},t.createElement(vi,{image:e.creator.profilePicture,name:e.creator.name})))};function Di(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ni=function(e){var n=e.post,r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Di(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Di(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(""),2),o=(r[0],r[1],Ie());return t.createElement("div",null,t.createElement("div",{className:"view-post-top"},Oi(n).icon,t.createElement("h1",{style:{backgroundColor:n.color}},n.type)),t.createElement("div",{className:"post-contents"},t.createElement("h1",{className:"post-title"},n.title),t.createElement("div",{className:"post-body"},t.createElement("p",{className:"post-message"},n.message),n.attachment&&t.createElement("img",{className:"post-attachment",src:"data:image/png;charset=utf-8;base64,"+n.attachment})),t.createElement("div",{className:"post-creator",onClick:function(){return o(ft(n.creator))}},t.createElement("p",null,n.creator.name),t.createElement(vi,{image:n.creator.profilePicture}))),t.createElement(Zt,{onClick:function(){o(gt("Post",n))}},"Report"))};var Ii=n(8841),Pi={};Pi.styleTagTransform=g(),Pi.setAttributes=p(),Pi.insert=c().bind(null,"head"),Pi.domAPI=l(),Pi.insertStyleElement=h(),a()(Ii.Z,Pi),Ii.Z&&Ii.Z.locals&&Ii.Z.locals;var Ri=n(6010),Mi=n(7192),Zi=(n(1859),n(5638)),_i=n(444),ji=n(4199),zi=n(1526),Li=(0,Zi.w)((function(e,n){var r=e.styles,o=(0,ji.O)([r],void 0,(0,t.useContext)(Zi.T)),i=(0,t.useRef)();return(0,t.useLayoutEffect)((function(){var e=n.key+"-global",t=new zi.m({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,a=document.querySelector('style[data-emotion="'+e+" "+o.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==a&&(r=!0,a.setAttribute("data-emotion",e),t.hydrate([a])),i.current=[t,r],function(){t.flush()}}),[n]),(0,t.useLayoutEffect)((function(){var e=i.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==o.next&&(0,_i.M)(n,o.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",o,t,!1)}}),[n,o.name]),null}));function Ui(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,ji.O)(t)}var Fi=function(){var e=Ui.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},Yi=n(8216),$i=n(4368),Wi=n(9602),Vi=n(8979),qi=n(6087);function Gi(e){return(0,Vi.Z)("MuiCircularProgress",e)}(0,qi.Z)("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);var Hi=n(5893);const Qi=["className","color","disableShrink","size","style","thickness","value","variant"];let Ki,Xi,Ji,ea,ta=e=>e;const na=Fi(Ki||(Ki=ta`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)),ra=Fi(Xi||(Xi=ta`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)),oa=(0,Wi.ZP)("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`color${(0,Yi.Z)(n.color)}`]]}})((({ownerState:e,theme:t})=>(0,k.Z)({display:"inline-block"},"determinate"===e.variant&&{transition:t.transitions.create("transform")},"inherit"!==e.color&&{color:t.palette[e.color].main})),(({ownerState:e})=>"indeterminate"===e.variant&&Ui(Ji||(Ji=ta`
      animation: ${0} 1.4s linear infinite;
    `),na))),ia=(0,Wi.ZP)("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({display:"block"}),aa=(0,Wi.ZP)("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.circle,t[`circle${(0,Yi.Z)(n.variant)}`],n.disableShrink&&t.circleDisableShrink]}})((({ownerState:e,theme:t})=>(0,k.Z)({stroke:"currentColor"},"determinate"===e.variant&&{transition:t.transitions.create("stroke-dashoffset")},"indeterminate"===e.variant&&{strokeDasharray:"80px, 200px",strokeDashoffset:0})),(({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink&&Ui(ea||(ea=ta`
      animation: ${0} 1.4s ease-in-out infinite;
    `),ra))),sa=t.forwardRef((function(e,t){const n=(0,$i.Z)({props:e,name:"MuiCircularProgress"}),{className:r,color:o="primary",disableShrink:i=!1,size:a=40,style:s,thickness:l=3.6,value:u=0,variant:c="indeterminate"}=n,d=(0,H.Z)(n,Qi),p=(0,k.Z)({},n,{color:o,disableShrink:i,size:a,thickness:l,value:u,variant:c}),f=(e=>{const{classes:t,variant:n,color:r,disableShrink:o}=e,i={root:["root",n,`color${(0,Yi.Z)(r)}`],svg:["svg"],circle:["circle",`circle${(0,Yi.Z)(n)}`,o&&"circleDisableShrink"]};return(0,Mi.Z)(i,Gi,t)})(p),h={},m={},g={};if("determinate"===c){const e=2*Math.PI*((44-l)/2);h.strokeDasharray=e.toFixed(3),g["aria-valuenow"]=Math.round(u),h.strokeDashoffset=`${((100-u)/100*e).toFixed(3)}px`,m.transform="rotate(-90deg)"}return(0,Hi.jsx)(oa,(0,k.Z)({className:(0,Ri.Z)(f.root,r),style:(0,k.Z)({width:a,height:a},m,s),ownerState:p,ref:t,role:"progressbar"},g,d,{children:(0,Hi.jsx)(ia,{className:f.svg,ownerState:p,viewBox:"22 22 44 44",children:(0,Hi.jsx)(aa,{className:f.circle,style:h,ownerState:p,cx:44,cy:44,r:(44-l)/2,fill:"none",strokeWidth:l})})}))}));var la=n(9868),ua=n(6523),ca=n(9766),da=n(4178);const pa=["sx"];var fa=n(7878);const ha=["className","component"];var ma=n(9981);const ga=function(e={}){const{defaultTheme:n,defaultClassName:r="MuiBox-root",generateClassName:o}=e,i=(0,la.ZP)("div")(ua.Z);return t.forwardRef((function(e,t){const a=(0,fa.Z)(n),s=function(e){const{sx:t}=e,n=(0,H.Z)(e,pa),{systemProps:r,otherProps:o}=(e=>{const t={systemProps:{},otherProps:{}};return Object.keys(e).forEach((n=>{da.G[n]?t.systemProps[n]=e[n]:t.otherProps[n]=e[n]})),t})(n);let i;return i=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,ca.P)(n)?(0,k.Z)({},r,n):r}:(0,k.Z)({},r,t),(0,k.Z)({},o,{sx:i})}(e),{className:l,component:u="div"}=s,c=(0,H.Z)(s,ha);return(0,Hi.jsx)(i,(0,k.Z)({as:u,ref:t,className:(0,Ri.Z)(l,o?o(r):r),theme:a},c))}))}({defaultTheme:(0,n(4345).Z)(),defaultClassName:"MuiBox-root",generateClassName:ma.Z.generate}),ya=ga,Aa=function(){return t.createElement("div",{className:"loading"},t.createElement(ya,{sx:{overflow:"hidden"}},t.createElement(sa,{sx:{color:"#d4aa8c"}})))};var ba=n(9068),va={};function Ca(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function wa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}va.styleTagTransform=g(),va.setAttributes=p(),va.insert=c().bind(null,"head"),va.domAPI=l(),va.insertStyleElement=h(),a()(ba.Z,va),ba.Z&&ba.Z.locals&&ba.Z.locals;const xa=function(e){var n=e.group,r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return wa(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wa(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)("All Clear!"),2),o=r[0],i=r[1],a=Ze((function(e){return e.authReducer.user})),s=Ie(),l=de();(0,t.useEffect)((function(){i(No(n))}),[]);return t.createElement("div",null,t.createElement("div",{className:"view-meeting-top"},t.createElement(Si.Z,{className:"top-icon",style:{color:n.groupColor}}),t.createElement("h1",{style:{backgroundColor:n.groupColor}},"Meeting Schedule for ",n.name)),t.createElement("div",{className:"meeting-container next-meeting-container"},t.createElement("h1",null,"Next Meeting:"),t.createElement("div",{className:"meeting"},t.createElement("div",{className:"meeting-time"},t.createElement("p",null,t.createElement("span",null,"Date: ")," ",o.date),t.createElement("p",null,t.createElement("span",null,"Time: "),o.time),t.createElement("p",null,t.createElement("span",null,"Location: "),o.location)),t.createElement("div",{className:"meeting-details"},t.createElement("p",null,t.createElement("span",null,"Details: "),o.details)))),t.createElement("hr",null),n.recurringMeeting&&t.createElement("div",{className:"meeting-container"},t.createElement("h1",null,"Recurring Schedule:"),t.createElement("div",{className:"meeting"},t.createElement("div",{className:"meeting-time"},t.createElement("p",null,t.createElement("span",null,"Frequency: ")," ",function(){if(n.recurringMeeting){if(n.recurringMeeting.frequency===ri.MeetingFrequencies.Daily)return t.createElement(t.Fragment,null,"Every day");if(n.recurringMeeting.frequency===ri.MeetingFrequencies.Weekly)return t.createElement(t.Fragment,null,"Every ",n.recurringMeeting.day);if(n.recurringMeeting.frequency===ri.MeetingFrequencies.Monthly)return t.createElement(t.Fragment,null,"On the ",new Date(n.recurringMeeting.date).getDate,"th of every month.");if(n.recurringMeeting.frequency===ri.MeetingFrequencies.Yearly)return t.createElement(t.Fragment,null,"On ",n.recurringMeeting.date," of every year.")}}()),t.createElement("p",null,t.createElement("span",null,"Time: "),n.recurringMeeting.time),t.createElement("p",null,t.createElement("span",null,"Location: "),n.recurringMeeting.location)),t.createElement("div",{className:"meeting-details"},t.createElement("p",null,t.createElement("span",null,"Details: "),n.recurringMeeting.details)))),t.createElement("hr",null),t.createElement("div",{className:"one-time-meetings-container"},t.createElement("h1",null,"One-time Meetings:"),n.owner&&n.owner._id===a._id&&n.meetings.map((function(e){return t.createElement("div",{className:"one-time-meeting-container"},t.createElement("div",{className:"one-time-meeting"},t.createElement("p",null,t.createElement("span",null,"Date"),e.date),t.createElement("p",null,t.createElement("span",null,"Time"),e.time)),t.createElement("div",{className:"delete-meeting-container"},t.createElement(Zt,{onClick:function(){var t;t=e._id,s(mt(function(){var e,r=(e=regeneratorRuntime.mark((function e(r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!r){e.next=5;break}return e.next=3,To(Ft().StudyGroup.DeleteMeeting,{studyGroupId:n._id,meetingId:t},Kt().StudyGroup.SuccessDeleteMeeting,null,!0,(function(e,t){t||l.go(0)}));case 3:e.next=6;break;case 5:s(pt(n));case 6:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Ca(i,r,o,a,s,"next",e)}function s(e){Ca(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return r.apply(this,arguments)}}(),"Confirm Deletion","Are you sure you want to delete the meeting?"))}},"Delete")))}))))};var Ea=n(8338),ka={};ka.styleTagTransform=g(),ka.setAttributes=p(),ka.insert=c().bind(null,"head"),ka.domAPI=l(),ka.insertStyleElement=h(),a()(Ea.Z,ka),Ea.Z&&Ea.Z.locals&&Ea.Z.locals;const Ba=function(e){var n=e.member,r=Ie(),o=de();return t.createElement("div",{className:"view-members-view-container"},t.createElement("div",{className:"member-details"},t.createElement("div",{className:"member-primary-info"},t.createElement(vi,{image:n.profilePicture,name:n.name}),t.createElement("h1",null,n.name)),t.createElement("div",{className:"member-secondary-info"},t.createElement("p",null,n.email))),t.createElement("hr",null),t.createElement("div",{className:"options side-by-side"},t.createElement(Zt,{type:Pt,onClick:function(){So(Ft().Message.CreateConversation,{receiverId:n._id},Kt().Message.SuccessCreateConversation,null,!0,(function(e,t){o.push("/message"),r(yt())}))}},"Message"),t.createElement(Zt,{type:Rt,onClick:function(){return r(gt("User",n))}},"Report")))};var Sa=n(6555),Oa={};function Ta(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Oa.styleTagTransform=g(),Oa.setAttributes=p(),Oa.insert=c().bind(null,"head"),Oa.domAPI=l(),Oa.insertStyleElement=h(),a()(Sa.Z,Oa),Sa.Z&&Sa.Z.locals&&Sa.Z.locals;const Da=function(e){var n=e.type,r=e.reportData,o=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ta(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ta(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(""),2),i=o[0],a=o[1],s=Ie();return t.createElement("div",{className:"report-view"},t.createElement("h1",null,"Please add a comment for the reason you are reporting this ",n),t.createElement(Tt,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),console.log(r),So(Ft().Report.SendReport,{id:r._id,comment:i,reportType:n},Kt().Report.EmailSent,null,!0,(function(e,t){t||s(yt())}))}},t.createElement(jt,null,t.createElement(Lt,null,"Comments:"),t.createElement(Vt,{onChange:function(e){return a(e.target.value)},value:i,isTextArea:!0})),t.createElement(Zt,{type:Pt},"Done")))},Na=function(e){var n=Ze((function(e){return e.popupReducer})),r=n.view,o=n.payload,i=n.showTop,a=Ze((function(e){return e.notificationReducer.loading})),s=Ie(),l=t.createElement(t.Fragment,null);switch(r){case Xo.StudyGroup.Create:l=t.createElement(_o,null);break;case Xo.StudyGroup.Join:l=t.createElement(Fo,{group:o,isLoggedIn:e.isLoggedIn});break;case Xo.StudyGroup.Edit:l=t.createElement(ni,{group:o});break;case Xo.StudyGroup.CreateMeeting:l=t.createElement(li,{group:o.group,isRecurringMeeting:o.isRecurringMeeting});break;case Xo.StudyGroup.CreatePost:l=t.createElement(mi,{group:o});break;case Xo.StudyGroup.ViewPost:l=t.createElement(Ni,{post:o});break;case Xo.StudyGroup.ViewMeetings:l=t.createElement(xa,{group:o});break;case Xo.StudyGroup.ViewMember:l=t.createElement(Ba,{member:o});break;case Xo.Input:l=t.createElement(qo,{label:o.label,defaultInput:o.defaultInput,callback:o.callback,label2:o.label2});break;case Xo.Confirmation:l=t.createElement(Qo,{callback:o.callback,title:o.title,message:o.message,isConfirmation:o.isConfirmation,firstButtonTitle:o.firstButtonTitle,secondButtonTitle:o.secondButtonTitle});break;case Xo.Report:l=t.createElement(Da,{type:o.type,reportData:o.reportData})}return t.createElement("div",{className:"popup-wrapper"},t.createElement("div",{className:"background "+(e.isShowing?"active":""),onClick:function(){return s(yt())}}),t.createElement("div",{className:"popup "+(e.isShowing?"active":"")},i&&t.createElement("div",{className:"popup-top"},t.createElement("h1",null,o.title||r)),a?t.createElement(Aa,null):t.createElement("div",{className:"popup-body"},t.createElement("button",{id:"popup-close-button",onClick:function(){return s(yt())}},"X"),e.children?e.children:l)))};var Ia=n(8690),Pa={};Pa.styleTagTransform=g(),Pa.setAttributes=p(),Pa.insert=c().bind(null,"head"),Pa.domAPI=l(),Pa.insertStyleElement=h(),a()(Ia.Z,Pa),Ia.Z&&Ia.Z.locals&&Ia.Z.locals;const Ra="ERROR",Ma="SUCCESS";var Za=n(888);const _a=function(e){var n=Ze((function(e){return e.notificationReducer.type})),r=Ze((function(e){return e.notificationReducer.message})),o=Ie(),i="",a=t.createElement(t.Fragment,null),s=(0,t.useRef)(),l=function(){clearTimeout(s.current),s.current=setTimeout((function(){o({type:it}),clearTimeout(s.current)}),5e3)};switch(n){case Ra:l(),i="error",a=t.createElement(Bi.Z,{className:"icon"});break;case Ma:l(),i="success",a=t.createElement(Za.Z,{className:"icon"})}return t.createElement("div",{className:"notification "+i+" "+(e.isShowing?"active":"")},a,t.createElement("h1",null,r||"No Message"))};var ja=n(1338),za={};za.styleTagTransform=g(),za.setAttributes=p(),za.insert=c().bind(null,"head"),za.domAPI=l(),za.insertStyleElement=h(),a()(ja.Z,za),ja.Z&&ja.Z.locals&&ja.Z.locals;var La=n(3189),Ua={};Ua.styleTagTransform=g(),Ua.setAttributes=p(),Ua.insert=c().bind(null,"head"),Ua.domAPI=l(),Ua.insertStyleElement=h(),a()(La.Z,Ua),La.Z&&La.Z.locals&&La.Z.locals;var Fa=n(7955),Ya={};Ya.styleTagTransform=g(),Ya.setAttributes=p(),Ya.insert=c().bind(null,"head"),Ya.domAPI=l(),Ya.insertStyleElement=h(),a()(Fa.Z,Ya),Fa.Z&&Fa.Z.locals&&Fa.Z.locals;const $a=function(e){var n=e.isShowing,r=e.setIsShowing,o=e.currentPage,i=e.user,a=Ze((function(e){return e.authReducer.isLoggedIn})),s=Ie(),l=de(),u=function(e){e&&(Io(),r(!1),l.push("/study"))};return t.createElement(t.Fragment,null,t.createElement("div",{className:n?"isShowing menu":"menu"},t.createElement("div",{className:"links"},t.createElement(Ae,{to:"/study",className:"study"===o?"active nav-item":"nav-item"},t.createElement("p",null,"Study")),t.createElement(Ae,{to:"/search",className:"search"===o?"active nav-item":"nav-item"},t.createElement("p",null,"Search")),t.createElement(Ae,{to:"/message",className:"message"===o?"active nav-item":"nav-item"},t.createElement("p",null,"Message"))),a?t.createElement("div",{className:"user-actions"},t.createElement("div",{className:"user-info"},t.createElement("div",{className:"name-and-school"},t.createElement("p",{className:"name"},i.name),t.createElement("p",{className:"school"},i.school)),t.createElement("div",{className:"profile-pic-container"},t.createElement(vi,{image:i.profilePicture}))),t.createElement(Zt,{onClick:function(){return s(mt(u,"Confirm Sign Out","Are you sure you want to sign out of Study Spaces?  You will be missed."))}},"Log out"),t.createElement(Zt,{type:It,onClick:function(){return l.push("/account")}},"Account")):t.createElement(Ae,{to:"/"},t.createElement(Zt,{type:Pt},"Log in"))),t.createElement("div",{className:n?"active background menu-background":"background menu-background"}))};function Wa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Va=function(e){var n=e.currentPage,r=e.color,o=Ze((function(e){return e.authReducer})),i=o.user,a=o.isLoggedIn,s=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wa(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wa(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(!1),2),l=s[0],u=s[1];return t.createElement(t.Fragment,null,t.createElement("div",{className:"top-bar"},t.createElement("div",{className:"wrapper",style:{borderColor:r}},t.createElement("div",{className:"left"},t.createElement(Ae,{to:"/",style:{textDecoration:"none"}},t.createElement("h1",null,"Study Spaces")),t.createElement(Ae,{to:"/study",className:"study"===n?"active nav-item":"nav-item"},t.createElement("p",null,"Study")),t.createElement(Ae,{to:"/search",className:"search"===n?"active nav-item":"nav-item"},t.createElement("p",null,"Search")),t.createElement(Ae,{to:"/message",className:"message"===n?"active nav-item":"nav-item"},t.createElement("p",null,"Message"))),a?t.createElement("div",{className:"right",onClick:function(){u(!l),console.log(l)}},t.createElement("div",{className:"userInfoContainer"},t.createElement("p",{className:"school"},i.school),t.createElement("p",{className:"name"},i.name),t.createElement(vi,{image:i.profilePicture,name:i.name})),t.createElement("div",{className:"hamburger "+(l&&"activeHamburger"),onClick:function(){u(!l)}},t.createElement("span",{className:"line1"}),t.createElement("span",{className:"line2"}),t.createElement("span",{className:"line3"}))):t.createElement(Ae,{to:"/"},t.createElement(Zt,{type:Pt},"Log in")))),t.createElement($a,{isShowing:l,setIsShowing:u,currentPage:n,user:i}))};var qa=n(4739),Ga={};Ga.styleTagTransform=g(),Ga.setAttributes=p(),Ga.insert=c().bind(null,"head"),Ga.domAPI=l(),Ga.insertStyleElement=h(),a()(qa.Z,Ga),qa.Z&&qa.Z.locals&&qa.Z.locals;const Ha=function(e){var n=e.currentPage,r=e.topBar,o=e.showingPageTitle,i=e.children;return t.createElement("div",null,r&&t.createElement(Va,{currentPage:n}),t.createElement("div",{className:void 0===o?"page showingPageTitle":"page"},i))};var Qa=n(2440),Ka={};Ka.styleTagTransform=g(),Ka.setAttributes=p(),Ka.insert=c().bind(null,"head"),Ka.domAPI=l(),Ka.insertStyleElement=h(),a()(Qa.Z,Ka),Qa.Z&&Qa.Z.locals&&Qa.Z.locals;const Xa=function(e){return t.createElement("div",{className:"login-form"},t.createElement(Tt,{onSubmit:e.submitLogin},t.createElement(jt,null,t.createElement(Lt,null,"Email"),t.createElement(Vt,{value:e.email,onChange:e.updateEmailField,type:"email"})),t.createElement(jt,null,t.createElement(Lt,null,"Password"),t.createElement(Vt,{value:e.password,onChange:e.updatePasswordField,type:"password"})),t.createElement(Zt,{type:It},"Sign in")))};var Ja=n(4487),es={};es.styleTagTransform=g(),es.setAttributes=p(),es.insert=c().bind(null,"head"),es.domAPI=l(),es.insertStyleElement=h(),a()(Ja.Z,es),Ja.Z&&Ja.Z.locals&&Ja.Z.locals;const ts=function(e){var n=Ze((function(e){return e.notificationReducer.loading}));return t.createElement("div",{className:"auth-view"},n?t.createElement(Aa,null):t.createElement(t.Fragment,null,t.createElement("h1",null,"Study Spaces"),e.children))};function ns(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function rs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return os(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?os(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function os(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const is=function(e){var n=rs((0,t.useState)(""),2),r=n[0],o=n[1],i=rs((0,t.useState)(""),2),a=i[0],s=i[1],l=Ie(),u=de(),c=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.next=4,So(Ft().Account.Login,{email:r,password:a},Kt().Account.SuccessLogin,"Error logging in: Cannot connect to the server",!1,(function(e,t){if(!t){var n=e.authenticationToken,r=e.authenticationTokenExpirationDate,o=e.user;l(lt({authenticationToken:n,authenticationTokenExpirationDate:r,user:o}))}}));case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){ns(i,r,o,a,s,"next",e)}function s(e){ns(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return t.createElement(ts,null,t.createElement(Xa,{email:r,password:a,submitLogin:c,updateEmailField:function(e){o(e.target.value)},updatePasswordField:function(e){s(e.target.value)}}),t.createElement("div",{className:"other-options"},t.createElement("div",{className:"side-by-side"},t.createElement("div",null,t.createElement("p",null,"Don't have an account?"),t.createElement(Zt,{type:Pt,onClick:function(t){e.setHomeView(Ko.CreateAccount)}},"Sign Up")),t.createElement("div",null,t.createElement("p",null,"Just looking to browse?"),t.createElement(Zt,{type:It,onClick:function(){return u.push("/search")}},"Search")))))};var as=n(4497),ss={};ss.styleTagTransform=g(),ss.setAttributes=p(),ss.insert=c().bind(null,"head"),ss.domAPI=l(),ss.insertStyleElement=h(),a()(as.Z,ss),as.Z&&as.Z.locals&&as.Z.locals;const ls=function(e){return t.createElement("div",{className:"create-account-form"},t.createElement(Tt,{onSubmit:e.submitAccountCreation},t.createElement(jt,null,t.createElement(Lt,null,"Email"),t.createElement(Vt,{value:e.email,onChange:e.updateEmailField,type:"email"})),t.createElement(jt,null,t.createElement(Lt,null,"Password"),t.createElement(Vt,{value:e.password,onChange:e.updatePasswordField,type:"password"})),t.createElement(jt,null,t.createElement(Lt,null,"Confirm Password"),t.createElement(Vt,{value:e.confirmPassword,onChange:e.updateConfirmPasswordField,type:"password"})),e.loginDidFail,t.createElement(Zt,{type:Pt},"Next")))};function us(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function cs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ds(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ds(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ds(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ps=function(e){var n="",r=cs((0,t.useState)(n),2),o=r[0],i=r[1],a=cs((0,t.useState)(n),2),s=a[0],l=a[1],u=cs((0,t.useState)(n),2),c=u[0],d=u[1],p=Ie(),f=function(){var t,r=(t=regeneratorRuntime.mark((function t(r){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r.preventDefault(),r.stopPropagation(),s!==n||c!==n||o!==n){t.next=5;break}return p(vt("Please fill in the information")),t.abrupt("return");case 5:if(s===c){t.next=8;break}return p(vt("Passwords don't match")),t.abrupt("return");case 8:return t.next=10,So(Ft().Account.CreateAccount,{email:o,password:s,password_confirmation:c},Kt().Account.SuccessAccountCreated,null,!1,(function(t,n){if(!n){var r=t.unverifiedUser;p(ct(r)),e.setHomeView(Ko.VerificationEmailConfirmation)}}));case 10:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(e){us(i,r,o,a,s,"next",e)}function s(e){us(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return r.apply(this,arguments)}}();return t.createElement(ts,null,t.createElement("p",null,"Create Your Account"),t.createElement(ls,{email:o,password:s,confirmPassword:c,submitAccountCreation:f,updateEmailField:function(e){i(e.target.value)},updatePasswordField:function(e){l(e.target.value)},updateConfirmPasswordField:function(e){d(e.target.value)}}),t.createElement("div",{className:"other-options"},t.createElement("p",null,"Already have an account?"),t.createElement(Zt,{type:It,onClick:function(t){e.setHomeView(Ko.Login)}},"Sign In")))},fs=function(e){var n=Ze((function(e){return e.authReducer.unverifiedUser}));return t.createElement(ts,null,t.createElement("h1",null,"You're almost there!"),t.createElement("p",null,"Check your email: ",t.createElement("strong",null,n.email)," for a link to continue the signup process"),t.createElement(Zt,{onClick:function(){e.setHomeView(Ko.Login)}},"Return"))};var hs=n(3680),ms={};ms.styleTagTransform=g(),ms.setAttributes=p(),ms.insert=c().bind(null,"head"),ms.domAPI=l(),ms.insertStyleElement=h(),a()(hs.Z,ms),hs.Z&&hs.Z.locals&&hs.Z.locals,n(2495);const gs=function(e){return t.createElement("div",null,t.createElement(Tt,{onSubmit:e.submitAccountSetup},t.createElement(jt,null,t.createElement(Lt,null,"Full Name"),t.createElement(Vt,{value:e.name,onChange:e.updateNameField,type:"text"})),t.createElement(jt,null,t.createElement(Lt,null,"Area Code"),t.createElement(Vt,{value:e.areaCode,onChange:e.updateAreaCodeField,type:"text"})),t.createElement(jt,null,t.createElement("div",{className:"inline"},t.createElement(Lt,{className:"left Label"},"Are you 18 or older"),t.createElement(Vt,{className:"right",value:e.is18OrOver,onChange:e.updateIs18OrOver,type:"checkbox"}))),t.createElement(jt,null,t.createElement(Lt,null,"Profile Picture"),t.createElement("div",{className:"photo"},t.createElement("input",{type:"file",id:"fileInput right",accept:".png, .jpg, .jpeg",name:"profilePicture",onChange:e.updateProfilePicture}),t.createElement("img",{className:"imgPreview",id:"left",src:e.profilePicture,alt:""}))),t.createElement(Zt,{type:Pt},"Create Account")))};function ys(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function As(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){ys(i,r,o,a,s,"next",e)}function s(e){ys(i,r,o,a,s,"throw",e)}a(void 0)}))}}function bs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return vs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?vs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Cs=function(e){var n=bs((0,t.useState)(!1),2),r=n[0],o=n[1],i=bs((0,t.useState)(""),2),a=i[0],s=i[1],l=bs((0,t.useState)(""),2),u=l[0],c=l[1],d=bs((0,t.useState)(!1),2),p=d[0],f=d[1],h=bs((0,t.useState)(""),2),m=h[0],g=h[1],y=bs((0,t.useState)({}),2),A=y[0],b=y[1],v=e.verificationToken,C=Ie();(0,t.useEffect)(As(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,w(v);case 2:case"end":return e.stop()}}),e)}))),[]);var w=function(){var e=As(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,So(Ft().Account.GetUnverifiedUser,{verificationToken:t},Kt().Account.UnverifiedUserWasFound,null,!0,(function(e,t){t||(b(e.unverifiedUser),o(!0))}));case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),x=function(){var e=As(regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),t.stopPropagation(),(n=new FormData).append("profilePicture",m),n.append("verificationToken",v),n.append("user",A),n.append("name",a),n.append("areaCode",u),n.append("is18OrOver",p),p){e.next=13;break}return console.log("NOT 18"),C(vt("You need to be 18 or older to sign up")),e.abrupt("return");case 13:return e.next=15,Do(Ft().Account.SetupAccount,n,Kt().Account.SuccessAccountSetup,null,!1,(function(e,t){if(!t){var n=e.authenticationToken,r=e.authenticationTokenExpirationDate,o=e.user;e.studyGroups,C(lt({authenticationToken:n,authenticationTokenExpirationDate:r,user:o})),C(Ct("Successfully signed in: "+o.name))}}));case 15:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return t.createElement(ts,null,t.createElement("h3",null,"Setup Your Account"),t.createElement("p",null,A.email),r?t.createElement("div",null,t.createElement(gs,{user:A,name:a,areaCode:u,is18OrOver:p,profilePicture:m,updateNameField:function(e){s(e.target.value)},updateAreaCodeField:function(e){c(e.target.value)},updateIs18OrOver:function(e){f(e.target.checked)},updateProfilePicture:function(e){g(e.target.files[0])},submitAccountSetup:x})):t.createElement("h1",null,"You shouldn't be here!"),t.createElement("div",{className:"other-options"},t.createElement("p",null,"Already have an account?"),t.createElement(Zt,{type:Pt,onClick:function(){e.setHomeView(Ko.Login)}},"Sign In")))};function ws(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const xs=function(e){var n=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ws(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ws(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(e.homeView?e.homeView:Ko.Login),2),r=n[0],o=n[1],i=t.createElement(t.Fragment,null);switch(r){case Ko.Login:i=t.createElement(is,{setHomeView:o});break;case Ko.CreateAccount:i=t.createElement(ps,{setHomeView:o});break;case Ko.VerificationEmailConfirmation:i=t.createElement(fs,{setHomeView:o});break;case Ko.AccountSetup:i=t.createElement(Cs,{setHomeView:o,verificationToken:e.match.params.verificationToken})}return t.createElement(Ha,{topBar:!1,showingPageTitle:!1},t.createElement("div",{className:"HomePage"},t.createElement("h1",{className:"subtitle"},"Study ",t.createElement("br",null)," with ",t.createElement("br",null)," excellence."),t.createElement("div",null,e.children?e.children:i)))};var Es=n(4221),ks={};ks.styleTagTransform=g(),ks.setAttributes=p(),ks.insert=c().bind(null,"head"),ks.domAPI=l(),ks.insertStyleElement=h(),a()(Es.Z,ks),Es.Z&&Es.Z.locals&&Es.Z.locals;var Bs=n(1918),Ss={};Ss.styleTagTransform=g(),Ss.setAttributes=p(),Ss.insert=c().bind(null,"head"),Ss.domAPI=l(),Ss.insertStyleElement=h(),a()(Bs.Z,Ss),Bs.Z&&Bs.Z.locals&&Bs.Z.locals;const Os=function(e){var n=e.group,r=n.name,o=(n.school,n.owner),i=(n.subject,n.course),a=n.isTutorGroup,s=n.isOnlineGroup,l=n.groupColor,u=(n.description,n._id);return t.createElement(Ae,{to:"/group/"+u,style:{textDecoration:"none"}},t.createElement("div",{className:"study-group-view",style:{border:"".concat(l," 4px solid"),backgroundColor:l+"99",textDecoration:"none"}},t.createElement("h1",{className:"group-title"},r),t.createElement("div",{className:"group-view-sub-details"},t.createElement("p",null,a?"Tutor":"Group"),t.createElement("p",null,s?"Online":"In-person")),t.createElement("div",{className:"group-view-details"},t.createElement("p",null,"Owner: ",o.name),t.createElement("p",null,"Course Code: ",i))))};function Ts(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Ds(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Ts(i,r,o,a,s,"next",e)}function s(e){Ts(i,r,o,a,s,"throw",e)}a(void 0)}))}}const Ns=function(e){var n=Ze((function(e){return e.notificationReducer.loading})),r=Ze((function(e){return e.authReducer.isLoggedIn})),o=Ze((function(e){return e.studyGroupsReducer.studyGroups})),i=Ie();(0,t.useEffect)((function(){function t(){return(t=Ds(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a();case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function n(){return(n=Ds(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,s(e.match.params.verificationToken);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}console.log(o),r&&0===o.length&&function(){t.apply(this,arguments)}(),e.isVerifyingEmail&&r&&function(){n.apply(this,arguments)}()}),[]);var a=function(){var e=Ds(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("Running"),e.next=3,Oo(Ft().StudyGroup.GetUserStudyGroups,Kt().StudyGroup.SuccessStudyGroupsRetrieved,"There's been an error loading your study groups.  Please try again later. ",!0,(function(e,t){t&&console.log(t);var n=e.studyGroups;n&&n.map((function(e){i({type:et,payload:{groups:n}})}))}),!1);case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),s=function(){var e=Ds(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,So(Ft().Account.VerifyEmailChange,{verificationToken:t},Kt().Account.SuccessChangingEmail,null,!1,(function(e,t){t||i(dt(e.user))}));case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return t.createElement(Ha,{topBar:!0,currentPage:"study"},t.createElement("div",{className:"study-page"},t.createElement("div",{className:"page-title"},t.createElement("h1",null,"Study")),r?t.createElement("div",null,t.createElement(Zt,{className:"add-button",onClick:function(){return i({type:Ue})}}),n?t.createElement(Aa,null):t.createElement("div",{className:"study-groups-container"},$t().isDefined(o)&&o.map((function(e){return t.createElement(Os,{group:e})})))):t.createElement("div",{className:"guest-message"},t.createElement("h1",null,"You are currently browsing Study Spaces as a guest!"),t.createElement("p",null,"Please sign-up or log-in to be able to join and create study groups"),t.createElement("p",null,"Feel free to use our search tool to discover study groups in your area."))))};var Is=n(4455),Ps={};Ps.styleTagTransform=g(),Ps.setAttributes=p(),Ps.insert=c().bind(null,"head"),Ps.domAPI=l(),Ps.insertStyleElement=h(),a()(Is.Z,Ps),Is.Z&&Is.Z.locals&&Is.Z.locals;var Rs=n(6891),Ms={};Ms.styleTagTransform=g(),Ms.setAttributes=p(),Ms.insert=c().bind(null,"head"),Ms.domAPI=l(),Ms.insertStyleElement=h(),a()(Rs.Z,Ms),Rs.Z&&Rs.Z.locals&&Rs.Z.locals;var Zs=n(8225),_s={};_s.styleTagTransform=g(),_s.setAttributes=p(),_s.insert=c().bind(null,"head"),_s.domAPI=l(),_s.insertStyleElement=h(),a()(Zs.Z,_s),Zs.Z&&Zs.Z.locals&&Zs.Z.locals;var js=n(5269),zs=n.n(js);function Ls(e){return(0,Vi.Z)("MuiSlider",e)}const Us=(0,qi.Z)("MuiSlider",["root","active","focusVisible","disabled","dragging","marked","vertical","trackInverted","trackFalse","rail","track","mark","markActive","markLabel","markLabelActive","thumb","valueLabel","valueLabelOpen","valueLabelCircle","valueLabelLabel"]),Fs=function(e){const{children:n,className:r,value:o,theme:i}=e,a=(e=>{const{open:t}=e;return{offset:(0,Ri.Z)(t&&Us.valueLabelOpen),circle:Us.valueLabelCircle,label:Us.valueLabelLabel}})(e);return t.cloneElement(n,{className:(0,Ri.Z)(n.props.className)},(0,Hi.jsxs)(t.Fragment,{children:[n.props.children,(0,Hi.jsx)("span",{className:(0,Ri.Z)(a.offset,r),theme:i,"aria-hidden":!0,children:(0,Hi.jsx)("span",{className:a.circle,children:(0,Hi.jsx)("span",{className:a.label,children:o})})})]}))},Ys=function(e){return"string"==typeof e};function $s(e,t={},n){return Ys(e)?t:(0,k.Z)({},t,{ownerState:(0,k.Z)({},t.ownerState,n)})}var Ws=n(7094),Vs=n(8925),qs=n(9962),Gs=n(67),Hs=n(6600),Qs=n(3633);const Ks={border:0,clip:"rect(0 0 0 0)",height:"1px",margin:-1,overflow:"hidden",padding:0,position:"absolute",whiteSpace:"nowrap",width:"1px"};function Xs(e,t){return e-t}function Js(e,t,n){return null==e?t:Math.min(Math.max(t,e),n)}function el(e,t){var n;const{index:r}=null!=(n=e.reduce(((e,n,r)=>{const o=Math.abs(t-n);return null===e||o<e.distance||o===e.distance?{distance:o,index:r}:e}),null))?n:{};return r}function tl(e,t){if(void 0!==t.current&&e.changedTouches){const n=e;for(let e=0;e<n.changedTouches.length;e+=1){const r=n.changedTouches[e];if(r.identifier===t.current)return{x:r.clientX,y:r.clientY}}return!1}return{x:e.clientX,y:e.clientY}}function nl(e,t,n){return 100*(e-t)/(n-t)}function rl({values:e,newValue:t,index:n}){const r=e.slice();return r[n]=t,r.sort(Xs)}function ol({sliderRef:e,activeIndex:t,setActive:n}){var r,o;const i=(0,Ws.Z)(e.current);var a;null!=(r=e.current)&&r.contains(i.activeElement)&&Number(null==i||null==(o=i.activeElement)?void 0:o.getAttribute("data-index"))===t||null==(a=e.current)||a.querySelector(`[type="range"][data-index="${t}"]`).focus(),n&&n(t)}const il={horizontal:{offset:e=>({left:`${e}%`}),leap:e=>({width:`${e}%`})},"horizontal-reverse":{offset:e=>({right:`${e}%`}),leap:e=>({width:`${e}%`})},vertical:{offset:e=>({bottom:`${e}%`}),leap:e=>({height:`${e}%`})}},al=e=>e;let sl;function ll(){return void 0===sl&&(sl="undefined"==typeof CSS||"function"!=typeof CSS.supports||CSS.supports("touch-action","none")),sl}function ul(e){const{ref:n,"aria-labelledby":r,defaultValue:o,disableSwap:i=!1,disabled:a=!1,marks:s=!1,max:l=100,min:u=0,name:c,onChange:d,onChangeCommitted:p,orientation:f="horizontal",scale:h=al,step:m=1,tabIndex:g,value:y,isRtl:A=!1}=e,b=t.useRef(),[v,C]=t.useState(-1),[w,x]=t.useState(-1),[E,B]=t.useState(!1),S=t.useRef(0),[O,T]=(0,Vs.Z)({controlled:y,default:null!=o?o:u,name:"Slider"}),D=d&&((e,t,n)=>{const r=e.nativeEvent||e,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:t,name:c}}),d(o,t,n)}),N=Array.isArray(O);let I=N?O.slice().sort(Xs):[O];I=I.map((e=>Js(e,u,l)));const P=!0===s&&null!==m?[...Array(Math.floor((l-u)/m)+1)].map(((e,t)=>({value:u+m*t}))):s||[],R=P.map((e=>e.value)),{isFocusVisibleRef:M,onBlur:Z,onFocus:_,ref:j}=(0,qs.Z)(),[z,L]=t.useState(-1),U=t.useRef(),F=(0,Gs.Z)(j,U),Y=(0,Gs.Z)(n,F),$=e=>t=>{var n;const r=Number(t.currentTarget.getAttribute("data-index"));_(t),!0===M.current&&L(r),x(r),null==e||null==(n=e.onFocus)||n.call(e,t)},W=e=>t=>{var n;Z(t),!1===M.current&&L(-1),x(-1),null==e||null==(n=e.onBlur)||n.call(e,t)};(0,Hs.Z)((()=>{var e;a&&U.current.contains(document.activeElement)&&(null==(e=document.activeElement)||e.blur())}),[a]),a&&-1!==v&&C(-1),a&&-1!==z&&L(-1);const V=e=>t=>{var n;null==(n=e.onChange)||n.call(e,t);const r=Number(t.currentTarget.getAttribute("data-index")),o=I[r],a=R.indexOf(o);let s=t.target.valueAsNumber;if(P&&null==m&&(s=s<o?R[a-1]:R[a+1]),s=Js(s,u,l),P&&null==m){const e=R.indexOf(I[r]);s=s<I[r]?R[e-1]:R[e+1]}if(N){i&&(s=Js(s,I[r-1]||-1/0,I[r+1]||1/0));const e=s;s=rl({values:I,newValue:s,index:r});let t=r;i||(t=s.indexOf(e)),ol({sliderRef:U,activeIndex:t})}T(s),L(r),D&&D(t,s,r),p&&p(t,s)},q=t.useRef();let G=f;A&&"horizontal"===f&&(G+="-reverse");const H=({finger:e,move:t=!1,values:n})=>{const{current:r}=U,{width:o,height:a,bottom:s,left:c}=r.getBoundingClientRect();let d,p;if(d=0===G.indexOf("vertical")?(s-e.y)/a:(e.x-c)/o,-1!==G.indexOf("-reverse")&&(d=1-d),p=function(e,t,n){return(n-t)*e+t}(d,u,l),m)p=function(e,t,n){const r=Math.round((e-n)/t)*t+n;return Number(r.toFixed(function(e){if(Math.abs(e)<1){const t=e.toExponential().split("e-"),n=t[0].split(".")[1];return(n?n.length:0)+parseInt(t[1],10)}const t=e.toString().split(".")[1];return t?t.length:0}(t)))}(p,m,u);else{const e=el(R,p);p=R[e]}p=Js(p,u,l);let f=0;if(N){f=t?q.current:el(n,p),i&&(p=Js(p,n[f-1]||-1/0,n[f+1]||1/0));const e=p;p=rl({values:n,newValue:p,index:f}),i&&t||(f=p.indexOf(e),q.current=f)}return{newValue:p,activeIndex:f}},Q=(0,Qs.Z)((e=>{const t=tl(e,b);if(!t)return;if(S.current+=1,"mousemove"===e.type&&0===e.buttons)return void K(e);const{newValue:n,activeIndex:r}=H({finger:t,move:!0,values:I});ol({sliderRef:U,activeIndex:r,setActive:C}),T(n),!E&&S.current>2&&B(!0),D&&D(e,n,r)})),K=(0,Qs.Z)((e=>{const t=tl(e,b);if(B(!1),!t)return;const{newValue:n}=H({finger:t,values:I});C(-1),"touchend"===e.type&&x(-1),p&&p(e,n),b.current=void 0,J()})),X=(0,Qs.Z)((e=>{ll()||e.preventDefault();const t=e.changedTouches[0];null!=t&&(b.current=t.identifier);const n=tl(e,b);if(!1!==n){const{newValue:t,activeIndex:r}=H({finger:n,values:I});ol({sliderRef:U,activeIndex:r,setActive:C}),T(t),D&&D(e,t,r)}S.current=0;const r=(0,Ws.Z)(U.current);r.addEventListener("touchmove",Q),r.addEventListener("touchend",K)})),J=t.useCallback((()=>{const e=(0,Ws.Z)(U.current);e.removeEventListener("mousemove",Q),e.removeEventListener("mouseup",K),e.removeEventListener("touchmove",Q),e.removeEventListener("touchend",K)}),[K,Q]);t.useEffect((()=>{const{current:e}=U;return e.addEventListener("touchstart",X,{passive:ll()}),()=>{e.removeEventListener("touchstart",X,{passive:ll()}),J()}}),[J,X]),t.useEffect((()=>{a&&J()}),[a,J]);const ee=e=>t=>{var n;if(null==(n=e.onMouseDown)||n.call(e,t),t.defaultPrevented)return;if(0!==t.button)return;t.preventDefault();const r=tl(t,b);if(!1!==r){const{newValue:e,activeIndex:n}=H({finger:r,values:I});ol({sliderRef:U,activeIndex:n,setActive:C}),T(e),D&&D(t,e,n)}S.current=0;const o=(0,Ws.Z)(U.current);o.addEventListener("mousemove",Q),o.addEventListener("mouseup",K)},te=nl(N?I[0]:u,u,l),ne=nl(I[I.length-1],u,l)-te,re=e=>t=>{var n;null==(n=e.onMouseOver)||n.call(e,t);const r=Number(t.currentTarget.getAttribute("data-index"));x(r)},oe=e=>t=>{var n;null==(n=e.onMouseLeave)||n.call(e,t),x(-1)};return{axis:G,axisProps:il,getRootProps:e=>{const t={onMouseDown:ee(e||{})},n=(0,k.Z)({},e,t);return(0,k.Z)({ref:Y},n)},getHiddenInputProps:t=>{const n={onChange:V(t||{}),onFocus:$(t||{}),onBlur:W(t||{})},o=(0,k.Z)({},t,n);return(0,k.Z)({tabIndex:g,"aria-labelledby":r,"aria-orientation":f,"aria-valuemax":h(l),"aria-valuemin":h(u),name:c,type:"range",min:e.min,max:e.max,step:e.step,disabled:a},o,{style:(0,k.Z)({},Ks,{direction:A?"rtl":"ltr",width:"100%",height:"100%"})})},getThumbProps:e=>{const t={onMouseOver:re(e||{}),onMouseLeave:oe(e||{})},n=(0,k.Z)({},e,t);return(0,k.Z)({},n)},dragging:E,marks:P,values:I,active:v,focusVisible:z,open:w,range:N,trackOffset:te,trackLeap:ne}}const cl=["aria-label","aria-valuetext","className","component","classes","disableSwap","disabled","getAriaLabel","getAriaValueText","marks","max","min","name","onChange","onChangeCommitted","onMouseDown","orientation","scale","step","tabIndex","track","value","valueLabelDisplay","valueLabelFormat","isRtl","components","componentsProps"],dl=e=>e,pl=({children:e})=>e,fl=t.forwardRef((function(e,n){var r,o,i,a,s,l,u;const{"aria-label":c,"aria-valuetext":d,className:p,component:f,classes:h,disableSwap:m=!1,disabled:g=!1,getAriaLabel:y,getAriaValueText:A,marks:b=!1,max:v=100,min:C=0,onMouseDown:w,orientation:x="horizontal",scale:E=dl,step:B=1,track:S="normal",valueLabelDisplay:O="off",valueLabelFormat:T=dl,isRtl:D=!1,components:N={},componentsProps:I={}}=e,P=(0,H.Z)(e,cl),R=(0,k.Z)({},e,{mark:b,classes:h,disabled:g,isRtl:D,max:v,min:C,orientation:x,scale:E,step:B,track:S,valueLabelDisplay:O,valueLabelFormat:T}),{axisProps:M,getRootProps:Z,getHiddenInputProps:_,getThumbProps:j,open:z,active:L,axis:U,range:F,focusVisible:Y,dragging:$,marks:W,values:V,trackOffset:q,trackLeap:G}=ul((0,k.Z)({},R,{ref:n}));R.marked=W.length>0&&W.some((e=>e.label)),R.dragging=$;const Q=null!=(r=null!=f?f:N.Root)?r:"span",K=$s(Q,(0,k.Z)({},P,I.root),R),X=null!=(o=N.Rail)?o:"span",J=$s(X,I.rail,R),ee=null!=(i=N.Track)?i:"span",te=$s(ee,I.track,R),ne=(0,k.Z)({},M[U].offset(q),M[U].leap(G)),re=null!=(a=N.Thumb)?a:"span",oe=$s(re,I.thumb,R),ie=null!=(s=N.ValueLabel)?s:Fs,ae=$s(ie,I.valueLabel,R),se=null!=(l=N.Mark)?l:"span",le=$s(se,I.mark,R),ue=null!=(u=N.MarkLabel)?u:"span",ce=$s(ue,I.markLabel,R),de=N.Input||"input",pe=$s(de,I.input,R),fe=_(),he=(e=>{const{disabled:t,dragging:n,marked:r,orientation:o,track:i,classes:a}=e,s={root:["root",t&&"disabled",n&&"dragging",r&&"marked","vertical"===o&&"vertical","inverted"===i&&"trackInverted",!1===i&&"trackFalse"],rail:["rail"],track:["track"],mark:["mark"],markActive:["markActive"],markLabel:["markLabel"],markLabelActive:["markLabelActive"],valueLabel:["valueLabel"],thumb:["thumb",t&&"disabled"],active:["active"],disabled:["disabled"],focusVisible:["focusVisible"]};return(0,Mi.Z)(s,Ls,a)})(R);return(0,Hi.jsxs)(Q,(0,k.Z)({},K,Z({onMouseDown:w}),{className:(0,Ri.Z)(he.root,K.className,p),children:[(0,Hi.jsx)(X,(0,k.Z)({},J,{className:(0,Ri.Z)(he.rail,J.className)})),(0,Hi.jsx)(ee,(0,k.Z)({},te,{className:(0,Ri.Z)(he.track,te.className),style:(0,k.Z)({},ne,te.style)})),W.map(((e,n)=>{const r=nl(e.value,C,v),o=M[U].offset(r);let i;return i=!1===S?-1!==V.indexOf(e.value):"normal"===S&&(F?e.value>=V[0]&&e.value<=V[V.length-1]:e.value<=V[0])||"inverted"===S&&(F?e.value<=V[0]||e.value>=V[V.length-1]:e.value>=V[0]),(0,Hi.jsxs)(t.Fragment,{children:[(0,Hi.jsx)(se,(0,k.Z)({"data-index":n},le,!Ys(se)&&{markActive:i},{style:(0,k.Z)({},o,le.style),className:(0,Ri.Z)(he.mark,le.className,i&&he.markActive)})),null!=e.label?(0,Hi.jsx)(ue,(0,k.Z)({"aria-hidden":!0,"data-index":n},ce,!Ys(ue)&&{markLabelActive:i},{style:(0,k.Z)({},o,ce.style),className:(0,Ri.Z)(he.markLabel,ce.className,i&&he.markLabelActive),children:e.label})):null]},e.value)})),V.map(((e,n)=>{const r=nl(e,C,v),o=M[U].offset(r),i="off"===O?pl:ie;return(0,Hi.jsx)(t.Fragment,{children:(0,Hi.jsx)(i,(0,k.Z)({},!Ys(i)&&{valueLabelFormat:T,valueLabelDisplay:O,value:"function"==typeof T?T(E(e),n):T,index:n,open:z===n||L===n||"on"===O,disabled:g},ae,{className:(0,Ri.Z)(he.valueLabel,ae.className),children:(0,Hi.jsx)(re,(0,k.Z)({"data-index":n},oe,j(),{className:(0,Ri.Z)(he.thumb,oe.className,L===n&&he.active,Y===n&&he.focusVisible)},!Ys(re)&&{ownerState:(0,k.Z)({},R,oe.ownerState)},{style:(0,k.Z)({},o,{pointerEvents:m&&L!==n?"none":void 0},oe.style),children:(0,Hi.jsx)(de,(0,k.Z)({},fe,{"data-index":n,"aria-label":y?y(n):c,"aria-valuenow":E(e),"aria-valuetext":A?A(E(e),n):d,value:V[n]},!Ys(de)&&{ownerState:(0,k.Z)({},R,pe.ownerState)},pe,{style:(0,k.Z)({},fe.style,pe.style)}))}))}))},n)}))]}))})),hl=fl;var ml=n(1796),gl=n(247);function yl(){return(0,fa.Z)(gl.Z)}const Al=e=>!e||!Ys(e),bl=["component","components","componentsProps","color","size"],vl=(0,k.Z)({},Us,(0,qi.Z)("MuiSlider",["colorPrimary","colorSecondary","thumbColorPrimary","thumbColorSecondary","sizeSmall","thumbSizeSmall"])),Cl=(0,Wi.ZP)("span",{name:"MuiSlider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,r=!0===n.marksProp&&null!==n.step?[...Array(Math.floor((n.max-n.min)/n.step)+1)].map(((e,t)=>({value:n.min+n.step*t}))):n.marksProp||[],o=r.length>0&&r.some((e=>e.label));return[t.root,t[`color${(0,Yi.Z)(n.color)}`],"medium"!==n.size&&t[`size${(0,Yi.Z)(n.size)}`],o&&t.marked,"vertical"===n.orientation&&t.vertical,"inverted"===n.track&&t.trackInverted,!1===n.track&&t.trackFalse]}})((({theme:e,ownerState:t})=>(0,k.Z)({borderRadius:12,boxSizing:"content-box",display:"inline-block",position:"relative",cursor:"pointer",touchAction:"none",color:e.palette[t.color].main,WebkitTapHighlightColor:"transparent"},"horizontal"===t.orientation&&(0,k.Z)({height:4,width:"100%",padding:"13px 0","@media (pointer: coarse)":{padding:"20px 0"}},"small"===t.size&&{height:2},t.marked&&{marginBottom:20}),"vertical"===t.orientation&&(0,k.Z)({height:"100%",width:4,padding:"0 13px","@media (pointer: coarse)":{padding:"0 20px"}},"small"===t.size&&{width:2},t.marked&&{marginRight:44}),{"@media print":{colorAdjust:"exact"},[`&.${vl.disabled}`]:{pointerEvents:"none",cursor:"default",color:e.palette.grey[400]},[`&.${vl.dragging}`]:{[`& .${vl.thumb}, & .${vl.track}`]:{transition:"none"}}}))),wl=(0,Wi.ZP)("span",{name:"MuiSlider",slot:"Rail",overridesResolver:(e,t)=>t.rail})((({ownerState:e})=>(0,k.Z)({display:"block",position:"absolute",borderRadius:"inherit",backgroundColor:"currentColor",opacity:.38},"horizontal"===e.orientation&&{width:"100%",height:"inherit",top:"50%",transform:"translateY(-50%)"},"vertical"===e.orientation&&{height:"100%",width:"inherit",left:"50%",transform:"translateX(-50%)"},"inverted"===e.track&&{opacity:1}))),xl=(0,Wi.ZP)("span",{name:"MuiSlider",slot:"Track",overridesResolver:(e,t)=>t.track})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?(0,ml.$n)(e.palette[t.color].main,.62):(0,ml._j)(e.palette[t.color].main,.5);return(0,k.Z)({display:"block",position:"absolute",borderRadius:"inherit",border:"1px solid currentColor",backgroundColor:"currentColor",transition:e.transitions.create(["left","width","bottom","height"],{duration:e.transitions.duration.shortest})},"small"===t.size&&{border:"none"},"horizontal"===t.orientation&&{height:"inherit",top:"50%",transform:"translateY(-50%)"},"vertical"===t.orientation&&{width:"inherit",left:"50%",transform:"translateX(-50%)"},!1===t.track&&{display:"none"},"inverted"===t.track&&{backgroundColor:n,borderColor:n})})),El=(0,Wi.ZP)("span",{name:"MuiSlider",slot:"Thumb",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.thumb,t[`thumbColor${(0,Yi.Z)(n.color)}`],"medium"!==n.size&&t[`thumbSize${(0,Yi.Z)(n.size)}`]]}})((({theme:e,ownerState:t})=>(0,k.Z)({position:"absolute",width:20,height:20,boxSizing:"border-box",borderRadius:"50%",outline:0,backgroundColor:"currentColor",display:"flex",alignItems:"center",justifyContent:"center",transition:e.transitions.create(["box-shadow","left","bottom"],{duration:e.transitions.duration.shortest})},"small"===t.size&&{width:12,height:12},"horizontal"===t.orientation&&{top:"50%",transform:"translate(-50%, -50%)"},"vertical"===t.orientation&&{left:"50%",transform:"translate(-50%, 50%)"},{"&:before":(0,k.Z)({position:"absolute",content:'""',borderRadius:"inherit",width:"100%",height:"100%",boxShadow:e.shadows[2]},"small"===t.size&&{boxShadow:"none"}),"&::after":{position:"absolute",content:'""',borderRadius:"50%",width:42,height:42,top:"50%",left:"50%",transform:"translate(-50%, -50%)"},[`&:hover, &.${vl.focusVisible}`]:{boxShadow:`0px 0px 0px 8px ${(0,ml.Fq)(e.palette[t.color].main,.16)}`,"@media (hover: none)":{boxShadow:"none"}},[`&.${vl.active}`]:{boxShadow:`0px 0px 0px 14px ${(0,ml.Fq)(e.palette[t.color].main,.16)}`},[`&.${vl.disabled}`]:{"&:hover":{boxShadow:"none"}}}))),kl=(0,Wi.ZP)(Fs,{name:"MuiSlider",slot:"ValueLabel",overridesResolver:(e,t)=>t.valueLabel})((({theme:e,ownerState:t})=>(0,k.Z)({[`&.${vl.valueLabelOpen}`]:{transform:"translateY(-100%) scale(1)"},zIndex:1,whiteSpace:"nowrap"},e.typography.body2,{fontWeight:500,transition:e.transitions.create(["transform"],{duration:e.transitions.duration.shortest}),top:-10,transformOrigin:"bottom center",transform:"translateY(-100%) scale(0)",position:"absolute",backgroundColor:e.palette.grey[600],borderRadius:2,color:e.palette.common.white,display:"flex",alignItems:"center",justifyContent:"center",padding:"0.25rem 0.75rem"},"small"===t.size&&{fontSize:e.typography.pxToRem(12),padding:"0.25rem 0.5rem"},{"&:before":{position:"absolute",content:'""',width:8,height:8,bottom:0,left:"50%",transform:"translate(-50%, 50%) rotate(45deg)",backgroundColor:"inherit"}}))),Bl=(0,Wi.ZP)("span",{name:"MuiSlider",slot:"Mark",shouldForwardProp:e=>(0,Wi.Dz)(e)&&"markActive"!==e,overridesResolver:(e,t)=>t.mark})((({theme:e,ownerState:t,markActive:n})=>(0,k.Z)({position:"absolute",width:2,height:2,borderRadius:1,backgroundColor:"currentColor"},"horizontal"===t.orientation&&{top:"50%",transform:"translate(-1px, -50%)"},"vertical"===t.orientation&&{left:"50%",transform:"translate(-50%, 1px)"},n&&{backgroundColor:e.palette.background.paper,opacity:.8}))),Sl=(0,Wi.ZP)("span",{name:"MuiSlider",slot:"MarkLabel",shouldForwardProp:e=>(0,Wi.Dz)(e)&&"markLabelActive"!==e,overridesResolver:(e,t)=>t.markLabel})((({theme:e,ownerState:t,markLabelActive:n})=>(0,k.Z)({},e.typography.body2,{color:e.palette.text.secondary,position:"absolute",whiteSpace:"nowrap"},"horizontal"===t.orientation&&{top:30,transform:"translateX(-50%)","@media (pointer: coarse)":{top:40}},"vertical"===t.orientation&&{left:36,transform:"translateY(50%)","@media (pointer: coarse)":{left:44}},n&&{color:e.palette.text.primary}))),Ol=t.forwardRef((function(e,t){var n,r,o,i;const a=(0,$i.Z)({props:e,name:"MuiSlider"}),s="rtl"===yl().direction,{component:l="span",components:u={},componentsProps:c={},color:d="primary",size:p="medium"}=a,f=(0,H.Z)(a,bl),h=(e=>{const{color:t,size:n,classes:r={}}=e;return(0,k.Z)({},r,{root:(0,Ri.Z)(r.root,Ls(`color${(0,Yi.Z)(t)}`),r[`color${(0,Yi.Z)(t)}`],n&&[Ls(`size${(0,Yi.Z)(n)}`),r[`size${(0,Yi.Z)(n)}`]]),thumb:(0,Ri.Z)(r.thumb,Ls(`thumbColor${(0,Yi.Z)(t)}`),r[`thumbColor${(0,Yi.Z)(t)}`],n&&[Ls(`thumbSize${(0,Yi.Z)(n)}`),r[`thumbSize${(0,Yi.Z)(n)}`]])})})((0,k.Z)({},a,{color:d,size:p}));return(0,Hi.jsx)(hl,(0,k.Z)({},f,{isRtl:s,components:(0,k.Z)({Root:Cl,Rail:wl,Track:xl,Thumb:El,ValueLabel:kl,Mark:Bl,MarkLabel:Sl},u),componentsProps:(0,k.Z)({},c,{root:(0,k.Z)({},c.root,Al(u.Root)&&{as:l,ownerState:(0,k.Z)({},null==(n=c.root)?void 0:n.ownerState,{color:d,size:p})}),thumb:(0,k.Z)({},c.thumb,Al(u.Thumb)&&{ownerState:(0,k.Z)({},null==(r=c.thumb)?void 0:r.ownerState,{color:d,size:p})}),track:(0,k.Z)({},c.track,Al(u.Track)&&{ownerState:(0,k.Z)({},null==(o=c.track)?void 0:o.ownerState,{color:d,size:p})}),valueLabel:(0,k.Z)({},c.valueLabel,Al(u.ValueLabel)&&{ownerState:(0,k.Z)({},null==(i=c.valueLabel)?void 0:i.ownerState,{color:d,size:p})})}),classes:h,ref:t}))}));function Tl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Dl=function(e){var n=e.updateTimeRange,r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Tl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Tl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(t.useState([0,1440]),2),o=r[0],i=r[1];return t.createElement(ya,{sx:{width:"100%",height:"90px",overflow:"hidden"}},t.createElement(Ol,{sx:{height:"40px",color:"rgba(139, 79, 11, 0.616)",overflow:"hidden"},value:o,onChange:function(e,t){var r=t[0]/60,o=Math.floor(r),a=60*(r-o),s=Math.round(a),l=t[1]/60,u=Math.floor(l),c=60*(l-u),d=Math.round(c);s<10&&(s+="0"),d<10&&(d+="0");var p=o>=12?"PM":"AM",f=u>=12?"PM":"AM",h=(u=u%12||12)+":"+d+f;"12:00PM"===h&&(h="11:45PM"),n([(o=o%12||12)+":"+s+p,h]),i(t)},step:15,min:0,max:1440}))},Nl=["children","classes","className","label","notched"],Il=(0,Wi.ZP)("fieldset")({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),Pl=(0,Wi.ZP)("legend",{skipSx:!0})((({ownerState:e,theme:t})=>(0,k.Z)({float:"unset"},void 0===e.label&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},void 0!==e.label&&(0,k.Z)({display:"block",width:"auto",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})})))),Rl=t.createContext();function Ml(){return t.useContext(Rl)}function Zl({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}function _l(e){return(0,Vi.Z)("MuiOutlinedInput",e)}const jl=(0,qi.Z)("MuiOutlinedInput",["root","colorSecondary","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","notchedOutline","input","inputSizeSmall","inputMultiline","inputAdornedStart","inputAdornedEnd"]);var zl=n(1387),Ll=n(8290),Ul=n(7596);const Fl=["onChange","maxRows","minRows","style","value"];function Yl(e,t){return parseInt(e[t],10)||0}const $l={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},Wl=t.forwardRef((function(e,n){const{onChange:r,maxRows:o,minRows:i=1,style:a,value:s}=e,l=(0,H.Z)(e,Fl),{current:u}=t.useRef(null!=s),c=t.useRef(null),d=(0,Gs.Z)(n,c),p=t.useRef(null),f=t.useRef(0),[h,m]=t.useState({}),g=t.useCallback((()=>{const t=c.current,n=(0,Ll.Z)(t).getComputedStyle(t);if("0px"===n.width)return;const r=p.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const a=n["box-sizing"],s=Yl(n,"padding-bottom")+Yl(n,"padding-top"),l=Yl(n,"border-bottom-width")+Yl(n,"border-top-width"),u=r.scrollHeight;r.value="x";const d=r.scrollHeight;let h=u;i&&(h=Math.max(Number(i)*d,h)),o&&(h=Math.min(Number(o)*d,h)),h=Math.max(h,d);const g=h+("border-box"===a?s+l:0),y=Math.abs(h-u)<=1;m((e=>f.current<20&&(g>0&&Math.abs((e.outerHeightStyle||0)-g)>1||e.overflow!==y)?(f.current+=1,{overflow:y,outerHeightStyle:g}):e))}),[o,i,e.placeholder]);return t.useEffect((()=>{const e=(0,Ul.Z)((()=>{f.current=0,g()})),t=(0,Ll.Z)(c.current);let n;return t.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(n=new ResizeObserver(e),n.observe(c.current)),()=>{e.clear(),t.removeEventListener("resize",e),n&&n.disconnect()}}),[g]),(0,Hs.Z)((()=>{g()})),t.useEffect((()=>{f.current=0}),[s]),(0,Hi.jsxs)(t.Fragment,{children:[(0,Hi.jsx)("textarea",(0,k.Z)({value:s,onChange:e=>{f.current=0,u||g(),r&&r(e)},ref:d,rows:i,style:(0,k.Z)({height:h.outerHeightStyle,overflow:h.overflow?"hidden":null},a)},l)),(0,Hi.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:p,tabIndex:-1,style:(0,k.Z)({},$l,a,{padding:0})})]})}));var Vl=n(1705),ql=n(8974);function Gl(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,Hi.jsx)(Li,{styles:r})}const Hl=function(e){return(0,Hi.jsx)(Gl,(0,k.Z)({},e,{defaultTheme:gl.Z}))};function Ql(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Kl(e,t=!1){return e&&(Ql(e.value)&&""!==e.value||t&&Ql(e.defaultValue)&&""!==e.defaultValue)}function Xl(e){return(0,Vi.Z)("MuiInputBase",e)}const Jl=(0,qi.Z)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),eu=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","startAdornment","type","value"],tu=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${(0,Yi.Z)(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},nu=(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},ru=(0,Wi.ZP)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:tu})((({theme:e,ownerState:t})=>(0,k.Z)({},e.typography.body1,{color:e.palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${Jl.disabled}`]:{color:e.palette.text.disabled,cursor:"default"}},t.multiline&&(0,k.Z)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),ou=(0,Wi.ZP)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:nu})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r={color:"currentColor",opacity:n?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},o={opacity:"0 !important"},i={opacity:n?.42:.5};return(0,k.Z)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${Jl.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":i,"&:focus::-moz-placeholder":i,"&:focus:-ms-input-placeholder":i,"&:focus::-ms-input-placeholder":i},[`&.${Jl.disabled}`]:{opacity:1,WebkitTextFillColor:e.palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),iu=(0,Hi.jsx)(Hl,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),au=t.forwardRef((function(e,n){const r=(0,$i.Z)({props:e,name:"MuiInputBase"}),{"aria-describedby":o,autoComplete:i,autoFocus:a,className:s,components:l={},componentsProps:u={},defaultValue:c,disabled:d,disableInjectingGlobalStyles:p,endAdornment:f,fullWidth:h=!1,id:m,inputComponent:g="input",inputProps:y={},inputRef:A,maxRows:b,minRows:v,multiline:C=!1,name:w,onBlur:x,onChange:E,onClick:B,onFocus:S,onKeyDown:O,onKeyUp:T,placeholder:D,readOnly:N,renderSuffix:I,rows:P,startAdornment:R,type:M="text",value:Z}=r,_=(0,H.Z)(r,eu),j=null!=y.value?y.value:Z,{current:z}=t.useRef(null!=j),L=t.useRef(),U=t.useCallback((e=>{}),[]),F=(0,Vl.Z)(y.ref,U),Y=(0,Vl.Z)(A,F),$=(0,Vl.Z)(L,Y),[W,V]=t.useState(!1),q=Ml(),G=Zl({props:r,muiFormControl:q,states:["color","disabled","error","hiddenLabel","size","required","filled"]});G.focused=q?q.focused:W,t.useEffect((()=>{!q&&d&&W&&(V(!1),x&&x())}),[q,d,W,x]);const Q=q&&q.onFilled,K=q&&q.onEmpty,X=t.useCallback((e=>{Kl(e)?Q&&Q():K&&K()}),[Q,K]);(0,ql.Z)((()=>{z&&X({value:j})}),[j,X,z]),t.useEffect((()=>{X(L.current)}),[]);let J=g,ee=y;C&&"input"===J&&(ee=P?(0,k.Z)({type:void 0,minRows:P,maxRows:P},ee):(0,k.Z)({type:void 0,maxRows:b,minRows:v},ee),J=Wl),t.useEffect((()=>{q&&q.setAdornedStart(Boolean(R))}),[q,R]);const te=(0,k.Z)({},r,{color:G.color||"primary",disabled:G.disabled,endAdornment:f,error:G.error,focused:G.focused,formControl:q,fullWidth:h,hiddenLabel:G.hiddenLabel,multiline:C,size:G.size,startAdornment:R,type:M}),ne=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:i,focused:a,formControl:s,fullWidth:l,hiddenLabel:u,multiline:c,size:d,startAdornment:p,type:f}=e,h={root:["root",`color${(0,Yi.Z)(n)}`,r&&"disabled",o&&"error",l&&"fullWidth",a&&"focused",s&&"formControl","small"===d&&"sizeSmall",c&&"multiline",p&&"adornedStart",i&&"adornedEnd",u&&"hiddenLabel"],input:["input",r&&"disabled","search"===f&&"inputTypeSearch",c&&"inputMultiline","small"===d&&"inputSizeSmall",u&&"inputHiddenLabel",p&&"inputAdornedStart",i&&"inputAdornedEnd"]};return(0,Mi.Z)(h,Xl,t)})(te),re=l.Root||ru,oe=u.root||{},ie=l.Input||ou;return ee=(0,k.Z)({},ee,u.input),(0,Hi.jsxs)(t.Fragment,{children:[!p&&iu,(0,Hi.jsxs)(re,(0,k.Z)({},oe,!Ys(re)&&{ownerState:(0,k.Z)({},te,oe.ownerState)},{ref:n,onClick:e=>{L.current&&e.currentTarget===e.target&&L.current.focus(),B&&B(e)}},_,{className:(0,Ri.Z)(ne.root,oe.className,s),children:[R,(0,Hi.jsx)(Rl.Provider,{value:null,children:(0,Hi.jsx)(ie,(0,k.Z)({ownerState:te,"aria-invalid":G.error,"aria-describedby":o,autoComplete:i,autoFocus:a,defaultValue:c,disabled:G.disabled,id:m,onAnimationStart:e=>{X("mui-auto-fill-cancel"===e.animationName?L.current:{value:"x"})},name:w,placeholder:D,readOnly:N,required:G.required,rows:P,value:j,onKeyDown:O,onKeyUp:T,type:M},ee,!Ys(ie)&&{as:J,ownerState:(0,k.Z)({},te,ee.ownerState)},{ref:$,className:(0,Ri.Z)(ne.input,ee.className),onBlur:e=>{x&&x(e),y.onBlur&&y.onBlur(e),q&&q.onBlur?q.onBlur(e):V(!1)},onChange:(e,...t)=>{if(!z){const t=e.target||L.current;if(null==t)throw new Error((0,zl.Z)(1));X({value:t.value})}y.onChange&&y.onChange(e,...t),E&&E(e,...t)},onFocus:e=>{G.disabled?e.stopPropagation():(S&&S(e),y.onFocus&&y.onFocus(e),q&&q.onFocus?q.onFocus(e):V(!0))}}))}),f,I?I((0,k.Z)({},G,{startAdornment:R})):null]}))]})})),su=au,lu=["components","fullWidth","inputComponent","label","multiline","notched","type"],uu=(0,Wi.ZP)(ru,{shouldForwardProp:e=>(0,Wi.FO)(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:tu})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return(0,k.Z)({position:"relative",borderRadius:e.shape.borderRadius,[`&:hover .${jl.notchedOutline}`]:{borderColor:e.palette.text.primary},"@media (hover: none)":{[`&:hover .${jl.notchedOutline}`]:{borderColor:n}},[`&.${jl.focused} .${jl.notchedOutline}`]:{borderColor:e.palette[t.color].main,borderWidth:2},[`&.${jl.error} .${jl.notchedOutline}`]:{borderColor:e.palette.error.main},[`&.${jl.disabled} .${jl.notchedOutline}`]:{borderColor:e.palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&(0,k.Z)({padding:"16.5px 14px"},"small"===t.size&&{padding:"8.5px 14px"}))})),cu=(0,Wi.ZP)((function(e){const{className:t,label:n,notched:r}=e,o=(0,H.Z)(e,Nl),i=(0,k.Z)({},e,{notched:r,label:n});return(0,Hi.jsx)(Il,(0,k.Z)({"aria-hidden":!0,className:t,ownerState:i},o,{children:(0,Hi.jsx)(Pl,{ownerState:i,children:n?(0,Hi.jsx)("span",{children:n}):(0,Hi.jsx)("span",{className:"notranslate",dangerouslySetInnerHTML:{__html:"&#8203;"}})})}))}),{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})((({theme:e})=>({borderColor:"light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"}))),du=(0,Wi.ZP)(ou,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:nu})((({theme:e,ownerState:t})=>(0,k.Z)({padding:"16.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},"small"===t.size&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0}))),pu=t.forwardRef((function(e,n){var r;const o=(0,$i.Z)({props:e,name:"MuiOutlinedInput"}),{components:i={},fullWidth:a=!1,inputComponent:s="input",label:l,multiline:u=!1,notched:c,type:d="text"}=o,p=(0,H.Z)(o,lu),f=(e=>{const{classes:t}=e,n=(0,Mi.Z)({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},_l,t);return(0,k.Z)({},t,n)})(o),h=Zl({props:o,muiFormControl:Ml(),states:["required"]});return(0,Hi.jsx)(su,(0,k.Z)({components:(0,k.Z)({Root:uu,Input:du},i),renderSuffix:e=>(0,Hi.jsx)(cu,{className:f.notchedOutline,label:l&&h.required?r||(r=(0,Hi.jsxs)(t.Fragment,{children:[l," ","*"]})):l,notched:void 0!==c?c:Boolean(e.startAdornment||e.filled||e.focused)}),fullWidth:a,inputComponent:s,multiline:u,ref:n,type:d},p,{classes:(0,k.Z)({},f,{notchedOutline:null})}))}));pu.muiName="Input";const fu=pu,hu=t.createContext({});var mu=n(2068),gu=n(9674);const yu=t.createContext(null);function Au(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function bu(e,t,n){return null!=n[t]?n[t]:e.props[t]}function vu(e,n,r){var o=Au(e.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var s={};for(var l in t){if(o[l])for(r=0;r<o[l].length;r++){var u=o[l][r];s[o[l][r]]=n(u)}s[l]=n(l)}for(r=0;r<i.length;r++)s[i[r]]=n(i[r]);return s}(n,o);return Object.keys(i).forEach((function(a){var s=i[a];if((0,t.isValidElement)(s)){var l=a in n,u=a in o,c=n[a],d=(0,t.isValidElement)(c)&&!c.props.in;!u||l&&!d?u||!l||d?u&&l&&(0,t.isValidElement)(c)&&(i[a]=(0,t.cloneElement)(s,{onExited:r.bind(null,s),in:c.props.in,exit:bu(s,"exit",e),enter:bu(s,"enter",e)})):i[a]=(0,t.cloneElement)(s,{in:!1}):i[a]=(0,t.cloneElement)(s,{onExited:r.bind(null,s),in:!0,exit:bu(s,"exit",e),enter:bu(s,"enter",e)})}})),i}var Cu=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},wu=function(e){function n(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}w(n,e);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(e,n){var r,o,i=n.children,a=n.handleExited;return{children:n.firstRender?(r=e,o=a,Au(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:bu(e,"appear",r),enter:bu(e,"enter",r),exit:bu(e,"exit",r)})}))):vu(e,i,a),firstRender:!1}},r.handleExited=function(e,t){var n=Au(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,k.Z)({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var e=this.props,n=e.component,r=e.childFactory,o=(0,H.Z)(e,["component","childFactory"]),i=this.state.contextValue,a=Cu(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?t.createElement(yu.Provider,{value:i},a):t.createElement(yu.Provider,{value:i},t.createElement(n,o,a))},n}(t.Component);wu.propTypes={},wu.defaultProps={component:"div",childFactory:function(e){return e}};const xu=wu,Eu=(0,qi.Z)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),ku=["center","classes","className"];let Bu,Su,Ou,Tu,Du=e=>e;const Nu=Fi(Bu||(Bu=Du`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),Iu=Fi(Su||(Su=Du`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),Pu=Fi(Ou||(Ou=Du`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),Ru=(0,Wi.ZP)("span",{name:"MuiTouchRipple",slot:"Root",skipSx:!0})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),Mu=(0,Wi.ZP)((function(e){const{className:n,classes:r,pulsate:o=!1,rippleX:i,rippleY:a,rippleSize:s,in:l,onExited:u,timeout:c}=e,[d,p]=t.useState(!1),f=(0,Ri.Z)(n,r.ripple,r.rippleVisible,o&&r.ripplePulsate),h={width:s,height:s,top:-s/2+a,left:-s/2+i},m=(0,Ri.Z)(r.child,d&&r.childLeaving,o&&r.childPulsate);return l||d||p(!0),t.useEffect((()=>{if(!l&&null!=u){const e=setTimeout(u,c);return()=>{clearTimeout(e)}}}),[u,l,c]),(0,Hi.jsx)("span",{className:f,style:h,children:(0,Hi.jsx)("span",{className:m})})}),{name:"MuiTouchRipple",slot:"Ripple"})(Tu||(Tu=Du`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Eu.rippleVisible,Nu,550,(({theme:e})=>e.transitions.easing.easeInOut),Eu.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),Eu.child,Eu.childLeaving,Iu,550,(({theme:e})=>e.transitions.easing.easeInOut),Eu.childPulsate,Pu,(({theme:e})=>e.transitions.easing.easeInOut)),Zu=t.forwardRef((function(e,n){const r=(0,$i.Z)({props:e,name:"MuiTouchRipple"}),{center:o=!1,classes:i={},className:a}=r,s=(0,H.Z)(r,ku),[l,u]=t.useState([]),c=t.useRef(0),d=t.useRef(null);t.useEffect((()=>{d.current&&(d.current(),d.current=null)}),[l]);const p=t.useRef(!1),f=t.useRef(null),h=t.useRef(null),m=t.useRef(null);t.useEffect((()=>()=>{clearTimeout(f.current)}),[]);const g=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:a}=e;u((e=>[...e,(0,Hi.jsx)(Mu,{classes:{ripple:(0,Ri.Z)(i.ripple,Eu.ripple),rippleVisible:(0,Ri.Z)(i.rippleVisible,Eu.rippleVisible),ripplePulsate:(0,Ri.Z)(i.ripplePulsate,Eu.ripplePulsate),child:(0,Ri.Z)(i.child,Eu.child),childLeaving:(0,Ri.Z)(i.childLeaving,Eu.childLeaving),childPulsate:(0,Ri.Z)(i.childPulsate,Eu.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},c.current)])),c.current+=1,d.current=a}),[i]),y=t.useCallback(((e={},t={},n)=>{const{pulsate:r=!1,center:i=o||t.pulsate,fakeElement:a=!1}=t;if("mousedown"===e.type&&p.current)return void(p.current=!1);"touchstart"===e.type&&(p.current=!0);const s=a?null:m.current,l=s?s.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,d;if(i||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(l.width/2),c=Math.round(l.height/2);else{const{clientX:t,clientY:n}=e.touches?e.touches[0]:e;u=Math.round(t-l.left),c=Math.round(n-l.top)}if(i)d=Math.sqrt((2*l.width**2+l.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((s?s.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((s?s.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}e.touches?null===h.current&&(h.current=()=>{g({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})},f.current=setTimeout((()=>{h.current&&(h.current(),h.current=null)}),80)):g({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})}),[o,g]),A=t.useCallback((()=>{y({},{pulsate:!0})}),[y]),b=t.useCallback(((e,t)=>{if(clearTimeout(f.current),"touchend"===e.type&&h.current)return h.current(),h.current=null,void(f.current=setTimeout((()=>{b(e,t)})));h.current=null,u((e=>e.length>0?e.slice(1):e)),d.current=t}),[]);return t.useImperativeHandle(n,(()=>({pulsate:A,start:y,stop:b})),[A,y,b]),(0,Hi.jsx)(Ru,(0,k.Z)({className:(0,Ri.Z)(i.root,Eu.root,a),ref:m},s,{children:(0,Hi.jsx)(xu,{component:null,exit:!0,children:l})}))})),_u=Zu;function ju(e){return(0,Vi.Z)("MuiButtonBase",e)}const zu=(0,qi.Z)("MuiButtonBase",["root","disabled","focusVisible"]),Lu=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","type"],Uu=(0,Wi.ZP)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${zu.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Fu=t.forwardRef((function(e,n){const r=(0,$i.Z)({props:e,name:"MuiButtonBase"}),{action:o,centerRipple:i=!1,children:a,className:s,component:l="button",disabled:u=!1,disableRipple:c=!1,disableTouchRipple:d=!1,focusRipple:p=!1,LinkComponent:f="a",onBlur:h,onClick:m,onContextMenu:g,onDragLeave:y,onFocus:A,onFocusVisible:b,onKeyDown:v,onKeyUp:C,onMouseDown:w,onMouseLeave:x,onMouseUp:E,onTouchEnd:B,onTouchMove:S,onTouchStart:O,tabIndex:T=0,TouchRippleProps:D,type:N}=r,I=(0,H.Z)(r,Lu),P=t.useRef(null),R=t.useRef(null),{isFocusVisibleRef:M,onFocus:Z,onBlur:_,ref:j}=(0,gu.Z)(),[z,L]=t.useState(!1);function U(e,t,n=d){return(0,mu.Z)((r=>(t&&t(r),!n&&R.current&&R.current[e](r),!0)))}u&&z&&L(!1),t.useImperativeHandle(o,(()=>({focusVisible:()=>{L(!0),P.current.focus()}})),[]),t.useEffect((()=>{z&&p&&!c&&R.current.pulsate()}),[c,p,z]);const F=U("start",w),Y=U("stop",g),$=U("stop",y),W=U("stop",E),V=U("stop",(e=>{z&&e.preventDefault(),x&&x(e)})),q=U("start",O),G=U("stop",B),Q=U("stop",S),K=U("stop",(e=>{_(e),!1===M.current&&L(!1),h&&h(e)}),!1),X=(0,mu.Z)((e=>{P.current||(P.current=e.currentTarget),Z(e),!0===M.current&&(L(!0),b&&b(e)),A&&A(e)})),J=()=>{const e=P.current;return l&&"button"!==l&&!("A"===e.tagName&&e.href)},ee=t.useRef(!1),te=(0,mu.Z)((e=>{p&&!ee.current&&z&&R.current&&" "===e.key&&(ee.current=!0,R.current.stop(e,(()=>{R.current.start(e)}))),e.target===e.currentTarget&&J()&&" "===e.key&&e.preventDefault(),v&&v(e),e.target===e.currentTarget&&J()&&"Enter"===e.key&&!u&&(e.preventDefault(),m&&m(e))})),ne=(0,mu.Z)((e=>{p&&" "===e.key&&R.current&&z&&!e.defaultPrevented&&(ee.current=!1,R.current.stop(e,(()=>{R.current.pulsate(e)}))),C&&C(e),m&&e.target===e.currentTarget&&J()&&" "===e.key&&!e.defaultPrevented&&m(e)}));let re=l;"button"===re&&(I.href||I.to)&&(re=f);const oe={};"button"===re?(oe.type=void 0===N?"button":N,oe.disabled=u):(I.href||I.to||(oe.role="button"),u&&(oe["aria-disabled"]=u));const ie=(0,Vl.Z)(j,P),ae=(0,Vl.Z)(n,ie),[se,le]=t.useState(!1);t.useEffect((()=>{le(!0)}),[]);const ue=se&&!c&&!u,ce=(0,k.Z)({},r,{centerRipple:i,component:l,disabled:u,disableRipple:c,disableTouchRipple:d,focusRipple:p,tabIndex:T,focusVisible:z}),de=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,i={root:["root",t&&"disabled",n&&"focusVisible"]},a=(0,Mi.Z)(i,ju,o);return n&&r&&(a.root+=` ${r}`),a})(ce);return(0,Hi.jsxs)(Uu,(0,k.Z)({as:re,className:(0,Ri.Z)(de.root,s),ownerState:ce,onBlur:K,onClick:m,onContextMenu:Y,onFocus:X,onKeyDown:te,onKeyUp:ne,onMouseDown:F,onMouseLeave:V,onMouseUp:W,onDragLeave:$,onTouchEnd:G,onTouchMove:Q,onTouchStart:q,ref:ae,tabIndex:u?-1:T,type:N},oe,I,{children:[a,ue?(0,Hi.jsx)(_u,(0,k.Z)({ref:R,center:i},D)):null]}))})),Yu=(0,qi.Z)("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]),$u=(0,qi.Z)("MuiListItemIcon",["root","alignItemsFlexStart"]),Wu=(0,qi.Z)("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]);function Vu(e){return(0,Vi.Z)("MuiMenuItem",e)}const qu=(0,qi.Z)("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]),Gu=["autoFocus","component","dense","divider","disableGutters","focusVisibleClassName","role","tabIndex"],Hu=(0,Wi.ZP)(Fu,{shouldForwardProp:e=>(0,Wi.FO)(e)||"classes"===e,name:"MuiMenuItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,n.divider&&t.divider,!n.disableGutters&&t.gutters]}})((({theme:e,ownerState:t})=>(0,k.Z)({},e.typography.body1,{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.divider&&{borderBottom:`1px solid ${e.palette.divider}`,backgroundClip:"padding-box"},{"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${qu.selected}`]:{backgroundColor:(0,ml.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${qu.focusVisible}`]:{backgroundColor:(0,ml.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${qu.selected}:hover`]:{backgroundColor:(0,ml.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:(0,ml.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${qu.focusVisible}`]:{backgroundColor:e.palette.action.focus},[`&.${qu.disabled}`]:{opacity:e.palette.action.disabledOpacity},[`& + .${Yu.root}`]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},[`& + .${Yu.inset}`]:{marginLeft:52},[`& .${Wu.root}`]:{marginTop:0,marginBottom:0},[`& .${Wu.inset}`]:{paddingLeft:36},[`& .${$u.root}`]:{minWidth:36}},!t.dense&&{[e.breakpoints.up("sm")]:{minHeight:"auto"}},t.dense&&(0,k.Z)({minHeight:32,paddingTop:4,paddingBottom:4},e.typography.body2,{[`& .${$u.root} svg`]:{fontSize:"1.25rem"}})))),Qu=t.forwardRef((function(e,n){const r=(0,$i.Z)({props:e,name:"MuiMenuItem"}),{autoFocus:o=!1,component:i="li",dense:a=!1,divider:s=!1,disableGutters:l=!1,focusVisibleClassName:u,role:c="menuitem",tabIndex:d}=r,p=(0,H.Z)(r,Gu),f=t.useContext(hu),h={dense:a||f.dense||!1,disableGutters:l},m=t.useRef(null);(0,ql.Z)((()=>{o&&m.current&&m.current.focus()}),[o]);const g=(0,k.Z)({},r,{dense:h.dense,divider:s,disableGutters:l}),y=(e=>{const{disabled:t,dense:n,divider:r,disableGutters:o,selected:i,classes:a}=e,s={root:["root",n&&"dense",t&&"disabled",!o&&"gutters",r&&"divider",i&&"selected"]},l=(0,Mi.Z)(s,Vu,a);return(0,k.Z)({},a,l)})(r),A=(0,Vl.Z)(m,n);let b;return r.disabled||(b=void 0!==d?d:-1),(0,Hi.jsx)(hu.Provider,{value:h,children:(0,Hi.jsx)(Hu,(0,k.Z)({ref:A,role:c,tabIndex:b,component:i,focusVisibleClassName:(0,Ri.Z)(y.focusVisible,u)},p,{ownerState:g,classes:y}))})})),Ku=Qu;var Xu=n(8502);function Ju(e){return(0,Vi.Z)("MuiFormControl",e)}(0,qi.Z)("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const ec=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],tc=(0,Wi.ZP)("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,k.Z)({},t.root,t[`margin${(0,Yi.Z)(e.margin)}`],e.fullWidth&&t.fullWidth)})((({ownerState:e})=>(0,k.Z)({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},"normal"===e.margin&&{marginTop:16,marginBottom:8},"dense"===e.margin&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"}))),nc=t.forwardRef((function(e,n){const r=(0,$i.Z)({props:e,name:"MuiFormControl"}),{children:o,className:i,color:a="primary",component:s="div",disabled:l=!1,error:u=!1,focused:c,fullWidth:d=!1,hiddenLabel:p=!1,margin:f="none",required:h=!1,size:m="medium",variant:g="outlined"}=r,y=(0,H.Z)(r,ec),A=(0,k.Z)({},r,{color:a,component:s,disabled:l,error:u,fullWidth:d,hiddenLabel:p,margin:f,required:h,size:m,variant:g}),b=(e=>{const{classes:t,margin:n,fullWidth:r}=e,o={root:["root","none"!==n&&`margin${(0,Yi.Z)(n)}`,r&&"fullWidth"]};return(0,Mi.Z)(o,Ju,t)})(A),[v,C]=t.useState((()=>{let e=!1;return o&&t.Children.forEach(o,(t=>{if(!(0,Xu.Z)(t,["Input","Select"]))return;const n=(0,Xu.Z)(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)})),e})),[w,x]=t.useState((()=>{let e=!1;return o&&t.Children.forEach(o,(t=>{(0,Xu.Z)(t,["Input","Select"])&&Kl(t.props,!0)&&(e=!0)})),e})),[E,B]=t.useState(!1);l&&E&&B(!1);const S=void 0===c||l?E:c,O=t.useCallback((()=>{x(!0)}),[]),T={adornedStart:v,setAdornedStart:C,color:a,disabled:l,error:u,filled:w,focused:S,fullWidth:d,hiddenLabel:p,size:m,onBlur:()=>{B(!1)},onEmpty:t.useCallback((()=>{x(!1)}),[]),onFilled:O,onFocus:()=>{B(!0)},registerEffect:void 0,required:h,variant:g};return(0,Hi.jsx)(Rl.Provider,{value:T,children:(0,Hi.jsx)(tc,(0,k.Z)({as:s,ownerState:A,className:(0,Ri.Z)(b.root,i),ref:n},y,{children:o}))})}));n(6607);var rc=n(8038);function oc(e){return(0,Vi.Z)("MuiList",e)}(0,qi.Z)("MuiList",["root","padding","dense","subheader"]);const ic=["children","className","component","dense","disablePadding","subheader"],ac=(0,Wi.ZP)("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})((({ownerState:e})=>(0,k.Z)({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0}))),sc=t.forwardRef((function(e,n){const r=(0,$i.Z)({props:e,name:"MuiList"}),{children:o,className:i,component:a="ul",dense:s=!1,disablePadding:l=!1,subheader:u}=r,c=(0,H.Z)(r,ic),d=t.useMemo((()=>({dense:s})),[s]),p=(0,k.Z)({},r,{component:a,dense:s,disablePadding:l}),f=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e,i={root:["root",!n&&"padding",r&&"dense",o&&"subheader"]};return(0,Mi.Z)(i,oc,t)})(p);return(0,Hi.jsx)(hu.Provider,{value:d,children:(0,Hi.jsxs)(ac,(0,k.Z)({as:a,className:(0,Ri.Z)(f.root,i),ref:n,ownerState:p},c,{children:[u,o]}))})})),lc=sc;function uc(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}const cc=uc,dc=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function pc(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function fc(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function hc(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function mc(e,t,n,r,o,i){let a=!1,s=o(e,t,!!t&&n);for(;s;){if(s===e.firstChild){if(a)return!1;a=!0}const t=!r&&(s.disabled||"true"===s.getAttribute("aria-disabled"));if(s.hasAttribute("tabindex")&&hc(s,i)&&!t)return s.focus(),!0;s=o(e,s,n)}return!1}const gc=t.forwardRef((function(e,n){const{actions:r,autoFocus:o=!1,autoFocusItem:i=!1,children:a,className:s,disabledItemsFocusable:l=!1,disableListWrap:u=!1,onKeyDown:c,variant:d="selectedMenu"}=e,p=(0,H.Z)(e,dc),f=t.useRef(null),h=t.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});(0,ql.Z)((()=>{o&&f.current.focus()}),[o]),t.useImperativeHandle(r,(()=>({adjustStyleForScrollbar:(e,t)=>{const n=!f.current.style.width;if(e.clientHeight<f.current.clientHeight&&n){const n=`${cc((0,rc.Z)(e))}px`;f.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=n,f.current.style.width=`calc(100% + ${n})`}return f.current}})),[]);const m=(0,Vl.Z)(f,n);let g=-1;t.Children.forEach(a,((e,n)=>{t.isValidElement(e)&&(e.props.disabled||("selectedMenu"===d&&e.props.selected||-1===g)&&(g=n))}));const y=t.Children.map(a,((e,n)=>{if(n===g){const n={};return i&&(n.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===d&&(n.tabIndex=0),t.cloneElement(e,n)}return e}));return(0,Hi.jsx)(lc,(0,k.Z)({role:"menu",ref:m,className:s,onKeyDown:e=>{const t=f.current,n=e.key,r=(0,rc.Z)(t).activeElement;if("ArrowDown"===n)e.preventDefault(),mc(t,r,u,l,pc);else if("ArrowUp"===n)e.preventDefault(),mc(t,r,u,l,fc);else if("Home"===n)e.preventDefault(),mc(t,null,u,l,pc);else if("End"===n)e.preventDefault(),mc(t,null,u,l,fc);else if(1===n.length){const o=h.current,i=n.toLowerCase(),a=performance.now();o.keys.length>0&&(a-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&i!==o.keys[0]&&(o.repeating=!1)),o.lastTime=a,o.keys.push(i);const s=r&&!o.repeating&&hc(r,o);o.previousKeyMatched&&(s||mc(t,r,!1,l,pc,o))?e.preventDefault():o.previousKeyMatched=!1}c&&c(e)},tabIndex:o?0:-1},p,{children:y}))})),yc=gc;function Ac(e){return(0,Vi.Z)("MuiPaper",e)}(0,qi.Z)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const bc=["className","component","elevation","square","variant"],vc=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)},Cc=(0,Wi.ZP)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>(0,k.Z)({backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${e.palette.divider}`},"elevation"===t.variant&&(0,k.Z)({boxShadow:e.shadows[t.elevation]},"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${(0,ml.Fq)("#fff",vc(t.elevation))}, ${(0,ml.Fq)("#fff",vc(t.elevation))})`})))),wc=t.forwardRef((function(e,t){const n=(0,$i.Z)({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:i=1,square:a=!1,variant:s="elevation"}=n,l=(0,H.Z)(n,bc),u=(0,k.Z)({},n,{component:o,elevation:i,square:a,variant:s}),c=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e,i={root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]};return(0,Mi.Z)(i,Ac,o)})(u);return(0,Hi.jsx)(Cc,(0,k.Z)({as:o,ownerState:u,className:(0,Ri.Z)(c.root,r),ref:t},l))}));var xc=n(7144),Ec=n(5340);var kc="unmounted",Bc="exited",Sc="entering",Oc="entered",Tc="exiting",Dc=function(e){function n(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o=Bc,r.appearStatus=Sc):o=Oc:o=t.unmountOnExit||t.mountOnEnter?kc:Bc,r.state={status:o},r.nextCallback=null,r}w(n,e),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===kc?{status:Bc}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Sc&&n!==Oc&&(t=Sc):n!==Sc&&n!==Oc||(t=Tc)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),t===Sc?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===Bc&&this.setState({status:kc})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,i=this.props.nodeRef?[r]:[o.findDOMNode(this),r],a=i[0],s=i[1],l=this.getTimeouts(),u=r?l.appear:l.enter;e||n?(this.props.onEnter(a,s),this.safeSetState({status:Sc},(function(){t.props.onEntering(a,s),t.onTransitionEnd(u,(function(){t.safeSetState({status:Oc},(function(){t.props.onEntered(a,s)}))}))}))):this.safeSetState({status:Oc},(function(){t.props.onEntered(a)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:o.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Tc},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Bc},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Bc},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:o.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=i[0],s=i[1];this.props.addEndListener(a,s)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var e=this.state.status;if(e===kc)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,(0,H.Z)(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return t.createElement(yu.Provider,{value:null},"function"==typeof r?r(e,o):t.cloneElement(t.Children.only(r),o))},n}(t.Component);function Nc(){}Dc.contextType=yu,Dc.propTypes={},Dc.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Nc,onEntering:Nc,onEntered:Nc,onExit:Nc,onExiting:Nc,onExited:Nc},Dc.UNMOUNTED=kc,Dc.EXITED=Bc,Dc.ENTERING=Sc,Dc.ENTERED=Oc,Dc.EXITING=Tc;const Ic=Dc,Pc=e=>e.scrollTop;function Rc(e,t){var n,r;const{timeout:o,easing:i,style:a={}}=e;return{duration:null!=(n=a.transitionDuration)?n:"number"==typeof o?o:o[t.mode]||0,easing:null!=(r=a.transitionTimingFunction)?r:"object"==typeof i?i[t.mode]:i,delay:a.transitionDelay}}const Mc=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Zc(e){return`scale(${e}, ${e**2})`}const _c={entering:{opacity:1,transform:Zc(1)},entered:{opacity:1,transform:"none"}},jc=t.forwardRef((function(e,n){const{addEndListener:r,appear:o=!0,children:i,easing:a,in:s,onEnter:l,onEntered:u,onEntering:c,onExit:d,onExited:p,onExiting:f,style:h,timeout:m="auto",TransitionComponent:g=Ic}=e,y=(0,H.Z)(e,Mc),A=t.useRef(),b=t.useRef(),v=yl(),C=t.useRef(null),w=(0,Vl.Z)(i.ref,n),x=(0,Vl.Z)(C,w),E=e=>t=>{if(e){const n=C.current;void 0===t?e(n):e(n,t)}},B=E(c),S=E(((e,t)=>{Pc(e);const{duration:n,delay:r,easing:o}=Rc({style:h,timeout:m,easing:a},{mode:"enter"});let i;"auto"===m?(i=v.transitions.getAutoHeightDuration(e.clientHeight),b.current=i):i=n,e.style.transition=[v.transitions.create("opacity",{duration:i,delay:r}),v.transitions.create("transform",{duration:.666*i,delay:r,easing:o})].join(","),l&&l(e,t)})),O=E(u),T=E(f),D=E((e=>{const{duration:t,delay:n,easing:r}=Rc({style:h,timeout:m,easing:a},{mode:"exit"});let o;"auto"===m?(o=v.transitions.getAutoHeightDuration(e.clientHeight),b.current=o):o=t,e.style.transition=[v.transitions.create("opacity",{duration:o,delay:n}),v.transitions.create("transform",{duration:.666*o,delay:n||.333*o,easing:r})].join(","),e.style.opacity="0",e.style.transform=Zc(.75),d&&d(e)})),N=E(p);return t.useEffect((()=>()=>{clearTimeout(A.current)}),[]),(0,Hi.jsx)(g,(0,k.Z)({appear:o,in:s,nodeRef:C,onEnter:S,onEntered:O,onEntering:B,onExit:D,onExited:N,onExiting:T,addEndListener:e=>{"auto"===m&&(A.current=setTimeout(e,b.current||0)),r&&r(C.current,e)},timeout:"auto"===m?null:m},y,{children:(e,n)=>t.cloneElement(i,(0,k.Z)({style:(0,k.Z)({opacity:0,transform:Zc(.75),visibility:"exited"!==e||s?void 0:"hidden"},_c[e],h,i.props.style),ref:x},n))}))}));jc.muiSupportAuto=!0;const zc=jc;var Lc=n(9064),Uc=n(7960);const Fc=t.forwardRef((function(e,n){const{children:r,container:i,disablePortal:a=!1}=e,[s,l]=t.useState(null),u=(0,Gs.Z)(t.isValidElement(r)?r.ref:null,n);return(0,Hs.Z)((()=>{a||l(function(e){return"function"==typeof e?e():e}(i)||document.body)}),[i,a]),(0,Hs.Z)((()=>{if(s&&!a)return(0,Uc.Z)(n,s),()=>{(0,Uc.Z)(n,null)}}),[n,s,a]),a?t.isValidElement(r)?t.cloneElement(r,{ref:u}):r:s?o.createPortal(r,s):s}));function Yc(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function $c(e){return parseInt((0,Ll.Z)(e).getComputedStyle(e).paddingRight,10)||0}function Wc(e,t,n,r=[],o){const i=[t,n,...r],a=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(e=>{-1===i.indexOf(e)&&-1===a.indexOf(e.tagName)&&Yc(e,o)}))}function Vc(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const qc=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function Gc(e){const t=[],n=[];return Array.from(e.querySelectorAll(qc)).forEach(((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex"),10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function Hc(){return!0}const Qc=function(e){const{children:n,disableAutoFocus:r=!1,disableEnforceFocus:o=!1,disableRestoreFocus:i=!1,getTabbable:a=Gc,isEnabled:s=Hc,open:l}=e,u=t.useRef(),c=t.useRef(null),d=t.useRef(null),p=t.useRef(null),f=t.useRef(null),h=t.useRef(!1),m=t.useRef(null),g=(0,Gs.Z)(n.ref,m),y=t.useRef(null);t.useEffect((()=>{l&&m.current&&(h.current=!r)}),[r,l]),t.useEffect((()=>{if(!l||!m.current)return;const e=(0,Ws.Z)(m.current);return m.current.contains(e.activeElement)||(m.current.hasAttribute("tabIndex")||m.current.setAttribute("tabIndex",-1),h.current&&m.current.focus()),()=>{i||(p.current&&p.current.focus&&(u.current=!0,p.current.focus()),p.current=null)}}),[l]),t.useEffect((()=>{if(!l||!m.current)return;const e=(0,Ws.Z)(m.current),t=t=>{const{current:n}=m;if(null!==n)if(e.hasFocus()&&!o&&s()&&!u.current){if(!n.contains(e.activeElement)){if(t&&f.current!==t.target||e.activeElement!==f.current)f.current=null;else if(null!==f.current)return;if(!h.current)return;let o=[];if(e.activeElement!==c.current&&e.activeElement!==d.current||(o=a(m.current)),o.length>0){var r,i;const e=Boolean((null==(r=y.current)?void 0:r.shiftKey)&&"Tab"===(null==(i=y.current)?void 0:i.key)),t=o[0],n=o[o.length-1];e?n.focus():t.focus()}else n.focus()}}else u.current=!1},n=t=>{y.current=t,!o&&s()&&"Tab"===t.key&&e.activeElement===m.current&&t.shiftKey&&(u.current=!0,d.current.focus())};e.addEventListener("focusin",t),e.addEventListener("keydown",n,!0);const r=setInterval((()=>{"BODY"===e.activeElement.tagName&&t()}),50);return()=>{clearInterval(r),e.removeEventListener("focusin",t),e.removeEventListener("keydown",n,!0)}}),[r,o,i,s,l,a]);const A=e=>{null===p.current&&(p.current=e.relatedTarget),h.current=!0};return(0,Hi.jsxs)(t.Fragment,{children:[(0,Hi.jsx)("div",{tabIndex:0,onFocus:A,ref:c,"data-test":"sentinelStart"}),t.cloneElement(n,{ref:g,onFocus:e=>{null===p.current&&(p.current=e.relatedTarget),h.current=!0,f.current=e.target;const t=n.props.onFocus;t&&t(e)}}),(0,Hi.jsx)("div",{tabIndex:0,onFocus:A,ref:d,"data-test":"sentinelEnd"})]})};function Kc(e){return(0,Vi.Z)("MuiModal",e)}(0,qi.Z)("MuiModal",["root","hidden"]);const Xc=["BackdropComponent","BackdropProps","children","classes","className","closeAfterTransition","component","components","componentsProps","container","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onKeyDown","open","theme","onTransitionEnter","onTransitionExited"],Jc=new class{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Yc(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);Wc(t,e.mount,e.modalRef,r,!0);const o=Vc(this.containers,(e=>e.container===t));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=Vc(this.containers,(t=>-1!==t.modals.indexOf(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=(0,Ws.Z)(e);return t.body===e?(0,Ll.Z)(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=uc((0,Ws.Z)(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${$c(r)+e}px`;const t=(0,Ws.Z)(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${$c(t)+e}px`}))}const e=r.parentElement,t=(0,Ll.Z)(r),o="HTML"===(null==e?void 0:e.nodeName)&&"scroll"===t.getComputedStyle(e).overflowY?e:r;n.push({value:o.style.overflow,property:"overflow",el:o},{value:o.style.overflowX,property:"overflow-x",el:o},{value:o.style.overflowY,property:"overflow-y",el:o}),o.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e){const t=this.modals.indexOf(e);if(-1===t)return t;const n=Vc(this.containers,(t=>-1!==t.modals.indexOf(e))),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&Yc(e.modalRef,!0),Wc(r.container,e.mount,e.modalRef,r.hiddenSiblings,!1),this.containers.splice(n,1);else{const e=r.modals[r.modals.length-1];e.modalRef&&Yc(e.modalRef,!1)}return t}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}},ed=t.forwardRef((function(e,n){const{BackdropComponent:r,BackdropProps:o,children:i,classes:a,className:s,closeAfterTransition:l=!1,component:u="div",components:c={},componentsProps:d={},container:p,disableAutoFocus:f=!1,disableEnforceFocus:h=!1,disableEscapeKeyDown:m=!1,disablePortal:g=!1,disableRestoreFocus:y=!1,disableScrollLock:A=!1,hideBackdrop:b=!1,keepMounted:v=!1,manager:C=Jc,onBackdropClick:w,onClose:x,onKeyDown:E,open:B,theme:S,onTransitionEnter:O,onTransitionExited:T}=e,D=(0,H.Z)(e,Xc),[N,I]=t.useState(!0),P=t.useRef({}),R=t.useRef(null),M=t.useRef(null),Z=(0,Gs.Z)(M,n),_=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(e),j=()=>(P.current.modalRef=M.current,P.current.mountNode=R.current,P.current),z=()=>{C.mount(j(),{disableScrollLock:A}),M.current.scrollTop=0},L=(0,Qs.Z)((()=>{const e=function(e){return"function"==typeof e?e():e}(p)||(0,Ws.Z)(R.current).body;C.add(j(),e),M.current&&z()})),U=t.useCallback((()=>C.isTopModal(j())),[C]),F=(0,Qs.Z)((e=>{R.current=e,e&&(B&&U()?z():Yc(M.current,!0))})),Y=t.useCallback((()=>{C.remove(j())}),[C]);t.useEffect((()=>()=>{Y()}),[Y]),t.useEffect((()=>{B?L():_&&l||Y()}),[B,Y,_,l,L]);const $=(0,k.Z)({},e,{classes:a,closeAfterTransition:l,disableAutoFocus:f,disableEnforceFocus:h,disableEscapeKeyDown:m,disablePortal:g,disableRestoreFocus:y,disableScrollLock:A,exited:N,hideBackdrop:b,keepMounted:v}),W=(e=>{const{open:t,exited:n,classes:r}=e,o={root:["root",!t&&n&&"hidden"]};return(0,Mi.Z)(o,Kc,r)})($);if(!v&&!B&&(!_||N))return null;const V={};void 0===i.props.tabIndex&&(V.tabIndex="-1"),_&&(V.onEnter=(0,Lc.Z)((()=>{I(!1),O&&O()}),i.props.onEnter),V.onExited=(0,Lc.Z)((()=>{I(!0),T&&T(),l&&Y()}),i.props.onExited));const q=c.Root||u,G=d.root||{};return(0,Hi.jsx)(Fc,{ref:F,container:p,disablePortal:g,children:(0,Hi.jsxs)(q,(0,k.Z)({role:"presentation"},G,!Ys(q)&&{as:u,ownerState:(0,k.Z)({},$,G.ownerState),theme:S},D,{ref:Z,onKeyDown:e=>{E&&E(e),"Escape"===e.key&&U()&&(m||(e.stopPropagation(),x&&x(e,"escapeKeyDown")))},className:(0,Ri.Z)(W.root,G.className,s),children:[!b&&r?(0,Hi.jsx)(r,(0,k.Z)({open:B,onClick:e=>{e.target===e.currentTarget&&(w&&w(e),x&&x(e,"backdropClick"))}},o)):null,(0,Hi.jsx)(Qc,{disableEnforceFocus:h,disableAutoFocus:f,disableRestoreFocus:y,isEnabled:U,open:B,children:t.cloneElement(i,V)})]}))})}));function td(e){return(0,Vi.Z)("MuiBackdrop",e)}(0,qi.Z)("MuiBackdrop",["root","invisible"]);const nd=["classes","className","invisible","component","components","componentsProps","theme"],rd=t.forwardRef((function(e,t){const{classes:n,className:r,invisible:o=!1,component:i="div",components:a={},componentsProps:s={},theme:l}=e,u=(0,H.Z)(e,nd),c=(0,k.Z)({},e,{classes:n,invisible:o}),d=(e=>{const{classes:t,invisible:n}=e,r={root:["root",n&&"invisible"]};return(0,Mi.Z)(r,td,t)})(c),p=a.Root||i,f=s.root||{};return(0,Hi.jsx)(p,(0,k.Z)({"aria-hidden":!0},f,!Ys(p)&&{as:i,ownerState:(0,k.Z)({},c,f.ownerState),theme:l},{ref:t},u,{className:(0,Ri.Z)(d.root,f.className,r)}))}));var od=n(6067);const id=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],ad={entering:{opacity:1},entered:{opacity:1}},sd={enter:od.x9.enteringScreen,exit:od.x9.leavingScreen},ld=t.forwardRef((function(e,n){const{addEndListener:r,appear:o=!0,children:i,easing:a,in:s,onEnter:l,onEntered:u,onEntering:c,onExit:d,onExited:p,onExiting:f,style:h,timeout:m=sd,TransitionComponent:g=Ic}=e,y=(0,H.Z)(e,id),A=yl(),b=t.useRef(null),v=(0,Vl.Z)(i.ref,n),C=(0,Vl.Z)(b,v),w=e=>t=>{if(e){const n=b.current;void 0===t?e(n):e(n,t)}},x=w(c),E=w(((e,t)=>{Pc(e);const n=Rc({style:h,timeout:m,easing:a},{mode:"enter"});e.style.webkitTransition=A.transitions.create("opacity",n),e.style.transition=A.transitions.create("opacity",n),l&&l(e,t)})),B=w(u),S=w(f),O=w((e=>{const t=Rc({style:h,timeout:m,easing:a},{mode:"exit"});e.style.webkitTransition=A.transitions.create("opacity",t),e.style.transition=A.transitions.create("opacity",t),d&&d(e)})),T=w(p);return(0,Hi.jsx)(g,(0,k.Z)({appear:o,in:s,nodeRef:b,onEnter:E,onEntered:B,onEntering:x,onExit:O,onExited:T,onExiting:S,addEndListener:e=>{r&&r(b.current,e)},timeout:m},y,{children:(e,n)=>t.cloneElement(i,(0,k.Z)({style:(0,k.Z)({opacity:0,visibility:"exited"!==e||s?void 0:"hidden"},ad[e],h,i.props.style),ref:C},n))}))})),ud=["children","components","componentsProps","className","invisible","open","transitionDuration","TransitionComponent"],cd=(0,Wi.ZP)("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})((({ownerState:e})=>(0,k.Z)({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"}))),dd=t.forwardRef((function(e,t){var n;const r=(0,$i.Z)({props:e,name:"MuiBackdrop"}),{children:o,components:i={},componentsProps:a={},className:s,invisible:l=!1,open:u,transitionDuration:c,TransitionComponent:d=ld}=r,p=(0,H.Z)(r,ud),f=(e=>{const{classes:t}=e;return t})((0,k.Z)({},r,{invisible:l}));return(0,Hi.jsx)(d,(0,k.Z)({in:u,timeout:c},p,{children:(0,Hi.jsx)(rd,{className:s,invisible:l,components:(0,k.Z)({Root:cd},i),componentsProps:{root:(0,k.Z)({},a.root,(!i.Root||!Ys(i.Root))&&{ownerState:(0,k.Z)({},null==(n=a.root)?void 0:n.ownerState)})},classes:f,ref:t,children:o})}))})),pd=["BackdropComponent","closeAfterTransition","children","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted"],fd=(0,Wi.ZP)("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})((({theme:e,ownerState:t})=>(0,k.Z)({position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"}))),hd=(0,Wi.ZP)(dd,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),md=t.forwardRef((function(e,n){var r;const o=(0,$i.Z)({name:"MuiModal",props:e}),{BackdropComponent:i=hd,closeAfterTransition:a=!1,children:s,components:l={},componentsProps:u={},disableAutoFocus:c=!1,disableEnforceFocus:d=!1,disableEscapeKeyDown:p=!1,disablePortal:f=!1,disableRestoreFocus:h=!1,disableScrollLock:m=!1,hideBackdrop:g=!1,keepMounted:y=!1}=o,A=(0,H.Z)(o,pd),[b,v]=t.useState(!0),C={closeAfterTransition:a,disableAutoFocus:c,disableEnforceFocus:d,disableEscapeKeyDown:p,disablePortal:f,disableRestoreFocus:h,disableScrollLock:m,hideBackdrop:g,keepMounted:y},w=(0,k.Z)({},o,C,{exited:b}).classes;return(0,Hi.jsx)(ed,(0,k.Z)({components:(0,k.Z)({Root:fd},l),componentsProps:{root:(0,k.Z)({},u.root,(!l.Root||!Ys(l.Root))&&{ownerState:(0,k.Z)({},null==(r=u.root)?void 0:r.ownerState)})},BackdropComponent:i,onTransitionEnter:()=>v(!1),onTransitionExited:()=>v(!0),ref:n},A,{classes:w},C,{children:s}))}));function gd(e){return(0,Vi.Z)("MuiPopover",e)}(0,qi.Z)("MuiPopover",["root","paper"]);const yd=["onEntering"],Ad=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"];function bd(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function vd(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function Cd(e){return[e.horizontal,e.vertical].map((e=>"number"==typeof e?`${e}px`:e)).join(" ")}function wd(e){return"function"==typeof e?e():e}const xd=(0,Wi.ZP)(md,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Ed=(0,Wi.ZP)(wc,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),kd=t.forwardRef((function(e,n){const r=(0,$i.Z)({props:e,name:"MuiPopover"}),{action:o,anchorEl:i,anchorOrigin:a={vertical:"top",horizontal:"left"},anchorPosition:s,anchorReference:l="anchorEl",children:u,className:c,container:d,elevation:p=8,marginThreshold:f=16,open:h,PaperProps:m={},transformOrigin:g={vertical:"top",horizontal:"left"},TransitionComponent:y=zc,transitionDuration:A="auto",TransitionProps:{onEntering:b}={}}=r,v=(0,H.Z)(r.TransitionProps,yd),C=(0,H.Z)(r,Ad),w=t.useRef(),x=(0,Vl.Z)(w,m.ref),E=(0,k.Z)({},r,{anchorOrigin:a,anchorReference:l,elevation:p,marginThreshold:f,PaperProps:m,transformOrigin:g,TransitionComponent:y,transitionDuration:A,TransitionProps:v}),B=(e=>{const{classes:t}=e;return(0,Mi.Z)({root:["root"],paper:["paper"]},gd,t)})(E),S=t.useCallback((()=>{if("anchorPosition"===l)return s;const e=wd(i),t=(e&&1===e.nodeType?e:(0,rc.Z)(w.current).body).getBoundingClientRect();return{top:t.top+bd(t,a.vertical),left:t.left+vd(t,a.horizontal)}}),[i,a.horizontal,a.vertical,s,l]),O=t.useCallback((e=>({vertical:bd(e,g.vertical),horizontal:vd(e,g.horizontal)})),[g.horizontal,g.vertical]),T=t.useCallback((e=>{const t={width:e.offsetWidth,height:e.offsetHeight},n=O(t);if("none"===l)return{top:null,left:null,transformOrigin:Cd(n)};const r=S();let o=r.top-n.vertical,a=r.left-n.horizontal;const s=o+t.height,u=a+t.width,c=(0,Ec.Z)(wd(i)),d=c.innerHeight-f,p=c.innerWidth-f;if(o<f){const e=o-f;o-=e,n.vertical+=e}else if(s>d){const e=s-d;o-=e,n.vertical+=e}if(a<f){const e=a-f;a-=e,n.horizontal+=e}else if(u>p){const e=u-p;a-=e,n.horizontal+=e}return{top:`${Math.round(o)}px`,left:`${Math.round(a)}px`,transformOrigin:Cd(n)}}),[i,l,S,O,f]),D=t.useCallback((()=>{const e=w.current;if(!e)return;const t=T(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}),[T]);t.useEffect((()=>{h&&D()})),t.useImperativeHandle(o,(()=>h?{updatePosition:()=>{D()}}:null),[h,D]),t.useEffect((()=>{if(!h)return;const e=(0,xc.Z)((()=>{D()})),t=(0,Ec.Z)(i);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[i,h,D]);let N=A;"auto"!==A||y.muiSupportAuto||(N=void 0);const I=d||(i?(0,rc.Z)(wd(i)).body:void 0);return(0,Hi.jsx)(xd,(0,k.Z)({BackdropProps:{invisible:!0},className:(0,Ri.Z)(B.root,c),container:I,open:h,ref:n,ownerState:E},C,{children:(0,Hi.jsx)(y,(0,k.Z)({appear:!0,in:h,onEntering:(e,t)=>{b&&b(e,t),D()},timeout:N},v,{children:(0,Hi.jsx)(Ed,(0,k.Z)({elevation:p},m,{ref:x,className:(0,Ri.Z)(B.paper,m.className),children:u}))}))}))}));function Bd(e){return(0,Vi.Z)("MuiMenu",e)}(0,qi.Z)("MuiMenu",["root","paper","list"]);const Sd=["onEntering"],Od=["autoFocus","children","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"],Td={vertical:"top",horizontal:"right"},Dd={vertical:"top",horizontal:"left"},Nd=(0,Wi.ZP)(kd,{shouldForwardProp:e=>(0,Wi.FO)(e)||"classes"===e,name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Id=(0,Wi.ZP)(wc,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),Pd=(0,Wi.ZP)(yc,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),Rd=t.forwardRef((function(e,n){const r=(0,$i.Z)({props:e,name:"MuiMenu"}),{autoFocus:o=!0,children:i,disableAutoFocusItem:a=!1,MenuListProps:s={},onClose:l,open:u,PaperProps:c={},PopoverClasses:d,transitionDuration:p="auto",TransitionProps:{onEntering:f}={},variant:h="selectedMenu"}=r,m=(0,H.Z)(r.TransitionProps,Sd),g=(0,H.Z)(r,Od),y=yl(),A="rtl"===y.direction,b=(0,k.Z)({},r,{autoFocus:o,disableAutoFocusItem:a,MenuListProps:s,onEntering:f,PaperProps:c,transitionDuration:p,TransitionProps:m,variant:h}),v=(e=>{const{classes:t}=e;return(0,Mi.Z)({root:["root"],paper:["paper"],list:["list"]},Bd,t)})(b),C=o&&!a&&u,w=t.useRef(null);let x=-1;return t.Children.map(i,((e,n)=>{t.isValidElement(e)&&(e.props.disabled||("selectedMenu"===h&&e.props.selected||-1===x)&&(x=n))})),(0,Hi.jsx)(Nd,(0,k.Z)({classes:d,onClose:l,anchorOrigin:{vertical:"bottom",horizontal:A?"right":"left"},transformOrigin:A?Td:Dd,PaperProps:(0,k.Z)({component:Id},c,{classes:(0,k.Z)({},c.classes,{root:v.paper})}),className:v.root,open:u,ref:n,transitionDuration:p,TransitionProps:(0,k.Z)({onEntering:(e,t)=>{w.current&&w.current.adjustStyleForScrollbar(e,y),f&&f(e,t)}},m),ownerState:b},g,{children:(0,Hi.jsx)(Pd,(0,k.Z)({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),l&&l(e,"tabKeyDown"))},actions:w,autoFocus:o&&(-1===x||a),autoFocusItem:C,variant:h},s,{className:(0,Ri.Z)(v.list,s.className),children:i}))}))})),Md=Rd;function Zd(e){return(0,Vi.Z)("MuiNativeSelect",e)}const _d=(0,qi.Z)("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput"]),jd=["className","disabled","IconComponent","inputRef","variant"],zd=({ownerState:e,theme:t})=>(0,k.Z)({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":{backgroundColor:"light"===t.palette.mode?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},[`&.${_d.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:t.palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},"filled"===e.variant&&{"&&&":{paddingRight:32}},"outlined"===e.variant&&{borderRadius:t.shape.borderRadius,"&:focus":{borderRadius:t.shape.borderRadius},"&&&":{paddingRight:32}}),Ld=(0,Wi.ZP)("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:Wi.FO,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],{[`&.${_d.multiple}`]:t.multiple}]}})(zd),Ud=({ownerState:e,theme:t})=>(0,k.Z)({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:t.palette.action.active,[`&.${_d.disabled}`]:{color:t.palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},"filled"===e.variant&&{right:7},"outlined"===e.variant&&{right:7}),Fd=(0,Wi.ZP)("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,Yi.Z)(n.variant)}`],n.open&&t.iconOpen]}})(Ud),Yd=t.forwardRef((function(e,n){const{className:r,disabled:o,IconComponent:i,inputRef:a,variant:s="standard"}=e,l=(0,H.Z)(e,jd),u=(0,k.Z)({},e,{disabled:o,variant:s}),c=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:i}=e,a={select:["select",n,r&&"disabled",o&&"multiple"],icon:["icon",`icon${(0,Yi.Z)(n)}`,i&&"iconOpen",r&&"disabled"]};return(0,Mi.Z)(a,Zd,t)})(u);return(0,Hi.jsxs)(t.Fragment,{children:[(0,Hi.jsx)(Ld,(0,k.Z)({ownerState:u,className:(0,Ri.Z)(c.select,r),disabled:o,ref:a||n},l)),e.multiple?null:(0,Hi.jsx)(Fd,{as:i,ownerState:u,className:c.icon})]})}));var $d=n(9299);function Wd(e){return(0,Vi.Z)("MuiSelect",e)}const Vd=(0,qi.Z)("MuiSelect",["select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput"]),qd=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],Gd=(0,Wi.ZP)("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`&.${Vd.select}`]:t.select},{[`&.${Vd.select}`]:t[n.variant]},{[`&.${Vd.multiple}`]:t.multiple}]}})(zd,{[`&.${Vd.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),Hd=(0,Wi.ZP)("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,Yi.Z)(n.variant)}`],n.open&&t.iconOpen]}})(Ud),Qd=(0,Wi.ZP)("input",{shouldForwardProp:e=>(0,Wi.Dz)(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function Kd(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function Xd(e){return null==e||"string"==typeof e&&!e.trim()}const Jd=t.forwardRef((function(e,n){const{"aria-describedby":r,"aria-label":o,autoFocus:i,autoWidth:a,children:s,className:l,defaultOpen:u,defaultValue:c,disabled:d,displayEmpty:p,IconComponent:f,inputRef:h,labelId:m,MenuProps:g={},multiple:y,name:A,onBlur:b,onChange:v,onClose:C,onFocus:w,onOpen:x,open:E,readOnly:B,renderValue:S,SelectDisplayProps:O={},tabIndex:T,value:D,variant:N="standard"}=e,I=(0,H.Z)(e,qd),[P,R]=(0,$d.Z)({controlled:D,default:c,name:"Select"}),[M,Z]=(0,$d.Z)({controlled:E,default:u,name:"Select"}),_=t.useRef(null),j=t.useRef(null),[z,L]=t.useState(null),{current:U}=t.useRef(null!=E),[F,Y]=t.useState(),$=(0,Vl.Z)(n,h),W=t.useCallback((e=>{j.current=e,e&&L(e)}),[]);t.useImperativeHandle($,(()=>({focus:()=>{j.current.focus()},node:_.current,value:P})),[P]),t.useEffect((()=>{u&&M&&z&&!U&&(Y(a?null:z.clientWidth),j.current.focus())}),[z,a]),t.useEffect((()=>{i&&j.current.focus()}),[i]),t.useEffect((()=>{const e=(0,rc.Z)(j.current).getElementById(m);if(e){const t=()=>{getSelection().isCollapsed&&j.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}}),[m]);const V=(e,t)=>{e?x&&x(t):C&&C(t),U||(Y(a?null:z.clientWidth),Z(e))},q=t.Children.toArray(s),G=e=>t=>{let n;if(t.currentTarget.hasAttribute("tabindex")){if(y){n=Array.isArray(P)?P.slice():[];const t=P.indexOf(e.props.value);-1===t?n.push(e.props.value):n.splice(t,1)}else n=e.props.value;if(e.props.onClick&&e.props.onClick(t),P!==n&&(R(n),v)){const r=t.nativeEvent||t,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:n,name:A}}),v(o,e)}y||V(!1,t)}},Q=null!==z&&M;let K,X;delete I["aria-invalid"];const J=[];let ee=!1,te=!1;(Kl({value:P})||p)&&(S?K=S(P):ee=!0);const ne=q.map((e=>{if(!t.isValidElement(e))return null;let n;if(y){if(!Array.isArray(P))throw new Error((0,zl.Z)(2));n=P.some((t=>Kd(t,e.props.value))),n&&ee&&J.push(e.props.children)}else n=Kd(P,e.props.value),n&&ee&&(X=e.props.children);return n&&(te=!0),t.cloneElement(e,{"aria-selected":n?"true":"false",onClick:G(e),onKeyUp:t=>{" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:n,value:void 0,"data-value":e.props.value})}));ee&&(K=y?0===J.length?null:J.reduce(((e,t,n)=>(e.push(t),n<J.length-1&&e.push(", "),e)),[]):X);let re,oe=F;!a&&U&&z&&(oe=z.clientWidth),re=void 0!==T?T:d?null:0;const ie=O.id||(A?`mui-component-select-${A}`:void 0),ae=(0,k.Z)({},e,{variant:N,value:P,open:Q}),se=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:i}=e,a={select:["select",n,r&&"disabled",o&&"multiple"],icon:["icon",`icon${(0,Yi.Z)(n)}`,i&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]};return(0,Mi.Z)(a,Wd,t)})(ae);return(0,Hi.jsxs)(t.Fragment,{children:[(0,Hi.jsx)(Gd,(0,k.Z)({ref:W,tabIndex:re,role:"button","aria-disabled":d?"true":void 0,"aria-expanded":Q?"true":"false","aria-haspopup":"listbox","aria-label":o,"aria-labelledby":[m,ie].filter(Boolean).join(" ")||void 0,"aria-describedby":r,onKeyDown:e=>{B||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),V(!0,e))},onMouseDown:d||B?null:e=>{0===e.button&&(e.preventDefault(),j.current.focus(),V(!0,e))},onBlur:e=>{!Q&&b&&(Object.defineProperty(e,"target",{writable:!0,value:{value:P,name:A}}),b(e))},onFocus:w},O,{ownerState:ae,className:(0,Ri.Z)(se.select,l,O.className),id:ie,children:Xd(K)?(0,Hi.jsx)("span",{className:"notranslate",dangerouslySetInnerHTML:{__html:"&#8203;"}}):K})),(0,Hi.jsx)(Qd,(0,k.Z)({value:Array.isArray(P)?P.join(","):P,name:A,ref:_,"aria-hidden":!0,onChange:e=>{const t=q.map((e=>e.props.value)).indexOf(e.target.value);if(-1===t)return;const n=q[t];R(n.props.value),v&&v(e,n)},tabIndex:-1,disabled:d,className:se.nativeInput,autoFocus:i,ownerState:ae},I)),(0,Hi.jsx)(Hd,{as:f,className:se.icon,ownerState:ae}),(0,Hi.jsx)(Md,(0,k.Z)({id:`menu-${A||""}`,anchorEl:z,open:Q,onClose:e=>{V(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},g,{MenuListProps:(0,k.Z)({"aria-labelledby":m,role:"listbox",disableListWrap:!0},g.MenuListProps),PaperProps:(0,k.Z)({},g.PaperProps,{style:(0,k.Z)({minWidth:oe},null!=g.PaperProps?g.PaperProps.style:null)}),children:ne}))]})})),ep=Jd;var tp=n(5949);const np=(0,tp.Z)((0,Hi.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown");function rp(e){return(0,Vi.Z)("MuiInput",e)}const op=(0,qi.Z)("MuiInput",["root","formControl","focused","disabled","colorSecondary","underline","error","sizeSmall","multiline","fullWidth","input","inputSizeSmall","inputMultiline","inputTypeSearch"]),ip=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","type"],ap=(0,Wi.ZP)(ru,{shouldForwardProp:e=>(0,Wi.FO)(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...tu(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return(0,k.Z)({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${e.palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${op.focused}:after`]:{transform:"scaleX(1)"},[`&.${op.error}:after`]:{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:`1px solid ${n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${op.disabled}):before`]:{borderBottom:`2px solid ${e.palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${n}`}},[`&.${op.disabled}:before`]:{borderBottomStyle:"dotted"}})})),sp=(0,Wi.ZP)(ou,{name:"MuiInput",slot:"Input",overridesResolver:nu})({}),lp=t.forwardRef((function(e,t){const n=(0,$i.Z)({props:e,name:"MuiInput"}),{disableUnderline:r,components:o={},componentsProps:i,fullWidth:a=!1,inputComponent:s="input",multiline:l=!1,type:u="text"}=n,c=(0,H.Z)(n,ip),d=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},o=(0,Mi.Z)(r,rp,t);return(0,k.Z)({},t,o)})(n),p={root:{ownerState:{disableUnderline:r}}},f=i?(0,ca.Z)(i,p):p;return(0,Hi.jsx)(su,(0,k.Z)({components:(0,k.Z)({Root:ap,Input:sp},o),componentsProps:f,fullWidth:a,inputComponent:s,multiline:l,ref:t,type:u},c,{classes:d}))}));lp.muiName="Input";const up=lp;function cp(e){return(0,Vi.Z)("MuiFilledInput",e)}const dp=(0,qi.Z)("MuiFilledInput",["root","colorSecondary","underline","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","hiddenLabel","input","inputSizeSmall","inputHiddenLabel","inputMultiline","inputAdornedStart","inputAdornedEnd"]),pp=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","type"],fp=(0,Wi.ZP)(ru,{shouldForwardProp:e=>(0,Wi.FO)(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...tu(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=n?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",o=n?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)";return(0,k.Z)({position:"relative",backgroundColor:o,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:n?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:o}},[`&.${dp.focused}`]:{backgroundColor:o},[`&.${dp.disabled}`]:{backgroundColor:n?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${e.palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${dp.focused}:after`]:{transform:"scaleX(1)"},[`&.${dp.error}:after`]:{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:`1px solid ${r}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${dp.disabled}):before`]:{borderBottom:`1px solid ${e.palette.text.primary}`},[`&.${dp.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&(0,k.Z)({padding:"25px 12px 8px"},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17}))})),hp=(0,Wi.ZP)(ou,{name:"MuiFilledInput",slot:"Input",overridesResolver:nu})((({theme:e,ownerState:t})=>(0,k.Z)({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12,"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9}))),mp=t.forwardRef((function(e,t){const n=(0,$i.Z)({props:e,name:"MuiFilledInput"}),{components:r={},componentsProps:o,fullWidth:i=!1,inputComponent:a="input",multiline:s=!1,type:l="text"}=n,u=(0,H.Z)(n,pp),c=(0,k.Z)({},n,{fullWidth:i,inputComponent:a,multiline:s,type:l}),d=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},o=(0,Mi.Z)(r,cp,t);return(0,k.Z)({},t,o)})(n),p={root:{ownerState:c},input:{ownerState:c}},f=o?(0,ca.Z)(o,p):p;return(0,Hi.jsx)(su,(0,k.Z)({components:(0,k.Z)({Root:fp,Input:hp},r),componentsProps:f,fullWidth:i,inputComponent:a,multiline:s,ref:t,type:l},u,{classes:d}))}));mp.muiName="Input";const gp=mp;var yp,Ap;const bp=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],vp=t.forwardRef((function(e,n){const r=(0,$i.Z)({name:"MuiSelect",props:e}),{autoWidth:o=!1,children:i,classes:a={},className:s,defaultOpen:l=!1,displayEmpty:u=!1,IconComponent:c=np,id:d,input:p,inputProps:f,label:h,labelId:m,MenuProps:g,multiple:y=!1,native:A=!1,onClose:b,onOpen:v,open:C,renderValue:w,SelectDisplayProps:x,variant:E="outlined"}=r,B=(0,H.Z)(r,bp),S=A?Yd:ep,O=Zl({props:r,muiFormControl:Ml(),states:["variant"]}).variant||E,T=p||{standard:yp||(yp=(0,Hi.jsx)(up,{})),outlined:(0,Hi.jsx)(fu,{label:h}),filled:Ap||(Ap=(0,Hi.jsx)(gp,{}))}[O],D=(e=>{const{classes:t}=e;return t})((0,k.Z)({},r,{classes:a})),N=(0,Vl.Z)(n,T.ref);return t.cloneElement(T,(0,k.Z)({inputComponent:S,inputProps:(0,k.Z)({children:i,IconComponent:c,variant:O,type:void 0,multiple:y},A?{id:d}:{autoWidth:o,defaultOpen:l,displayEmpty:u,labelId:m,MenuProps:g,onClose:b,onOpen:v,open:C,renderValue:w,SelectDisplayProps:(0,k.Z)({id:d},x)},f,{classes:f?(0,ca.Z)(D,f.classes):D},p?p.props.inputProps:{})},y&&A&&"outlined"===O?{notched:!0}:{},{ref:N,className:(0,Ri.Z)(T.props.className,s)},B))}));vp.muiName="Select";const Cp=vp,wp=(0,tp.Z)((0,Hi.jsx)("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"}),"Cancel");function xp(e){return(0,Vi.Z)("MuiChip",e)}const Ep=(0,qi.Z)("MuiChip",["root","sizeSmall","sizeMedium","colorPrimary","colorSecondary","disabled","clickable","clickableColorPrimary","clickableColorSecondary","deletable","deletableColorPrimary","deletableColorSecondary","outlined","filled","outlinedPrimary","outlinedSecondary","avatar","avatarSmall","avatarMedium","avatarColorPrimary","avatarColorSecondary","icon","iconSmall","iconMedium","iconColorPrimary","iconColorSecondary","label","labelSmall","labelMedium","deleteIcon","deleteIconSmall","deleteIconMedium","deleteIconColorPrimary","deleteIconColorSecondary","deleteIconOutlinedColorPrimary","deleteIconOutlinedColorSecondary","focusVisible"]),kp=["avatar","className","clickable","color","component","deleteIcon","disabled","icon","label","onClick","onDelete","onKeyDown","onKeyUp","size","variant"],Bp=(0,Wi.ZP)("div",{name:"MuiChip",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,{color:r,clickable:o,onDelete:i,size:a,variant:s}=n;return[{[`& .${Ep.avatar}`]:t.avatar},{[`& .${Ep.avatar}`]:t[`avatar${(0,Yi.Z)(a)}`]},{[`& .${Ep.avatar}`]:t[`avatarColor${(0,Yi.Z)(r)}`]},{[`& .${Ep.icon}`]:t.icon},{[`& .${Ep.icon}`]:t[`icon${(0,Yi.Z)(a)}`]},{[`& .${Ep.icon}`]:t[`iconColor${(0,Yi.Z)(r)}`]},{[`& .${Ep.deleteIcon}`]:t.deleteIcon},{[`& .${Ep.deleteIcon}`]:t[`deleteIcon${(0,Yi.Z)(a)}`]},{[`& .${Ep.deleteIcon}`]:t[`deleteIconColor${(0,Yi.Z)(r)}`]},{[`& .${Ep.deleteIcon}`]:t[`deleteIconOutlinedColor${(0,Yi.Z)(r)}`]},t.root,t[`size${(0,Yi.Z)(a)}`],t[`color${(0,Yi.Z)(r)}`],o&&t.clickable,o&&"default"!==r&&t[`clickableColor${(0,Yi.Z)(r)})`],i&&t.deletable,i&&"default"!==r&&t[`deletableColor${(0,Yi.Z)(r)}`],t[s],"outlined"===s&&t[`outlined${(0,Yi.Z)(r)}`]]}})((({theme:e,ownerState:t})=>{const n=(0,ml.Fq)(e.palette.text.primary,.26);return(0,k.Z)({fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:e.palette.text.primary,backgroundColor:e.palette.action.selected,borderRadius:16,whiteSpace:"nowrap",transition:e.transitions.create(["background-color","box-shadow"]),cursor:"default",outline:0,textDecoration:"none",border:0,padding:0,verticalAlign:"middle",boxSizing:"border-box",[`&.${Ep.disabled}`]:{opacity:e.palette.action.disabledOpacity,pointerEvents:"none"},[`& .${Ep.avatar}`]:{marginLeft:5,marginRight:-6,width:24,height:24,color:"light"===e.palette.mode?e.palette.grey[700]:e.palette.grey[300],fontSize:e.typography.pxToRem(12)},[`& .${Ep.avatarColorPrimary}`]:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.dark},[`& .${Ep.avatarColorSecondary}`]:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.dark},[`& .${Ep.avatarSmall}`]:{marginLeft:4,marginRight:-4,width:18,height:18,fontSize:e.typography.pxToRem(10)},[`& .${Ep.icon}`]:(0,k.Z)({color:"light"===e.palette.mode?e.palette.grey[700]:e.palette.grey[300],marginLeft:5,marginRight:-6},"small"===t.size&&{fontSize:18,marginLeft:4,marginRight:-4},"default"!==t.color&&{color:"inherit"}),[`& .${Ep.deleteIcon}`]:(0,k.Z)({WebkitTapHighlightColor:"transparent",color:n,fontSize:22,cursor:"pointer",margin:"0 5px 0 -6px","&:hover":{color:(0,ml.Fq)(n,.4)}},"small"===t.size&&{fontSize:16,marginRight:4,marginLeft:-4},"default"!==t.color&&{color:(0,ml.Fq)(e.palette[t.color].contrastText,.7),"&:hover, &:active":{color:e.palette[t.color].contrastText}})},"small"===t.size&&{height:24},"default"!==t.color&&{backgroundColor:e.palette[t.color].main,color:e.palette[t.color].contrastText},t.onDelete&&{[`&.${Ep.focusVisible}`]:{backgroundColor:(0,ml.Fq)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},t.onDelete&&"default"!==t.color&&{[`&.${Ep.focusVisible}`]:{backgroundColor:e.palette[t.color].dark}})}),(({theme:e,ownerState:t})=>(0,k.Z)({},t.clickable&&{userSelect:"none",WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover":{backgroundColor:(0,ml.Fq)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity)},[`&.${Ep.focusVisible}`]:{backgroundColor:(0,ml.Fq)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)},"&:active":{boxShadow:e.shadows[1]}},t.clickable&&"default"!==t.color&&{[`&:hover, &.${Ep.focusVisible}`]:{backgroundColor:e.palette[t.color].dark}})),(({theme:e,ownerState:t})=>(0,k.Z)({},"outlined"===t.variant&&{backgroundColor:"transparent",border:`1px solid ${"light"===e.palette.mode?e.palette.grey[400]:e.palette.grey[700]}`,[`&.${Ep.clickable}:hover`]:{backgroundColor:e.palette.action.hover},[`&.${Ep.focusVisible}`]:{backgroundColor:e.palette.action.focus},[`& .${Ep.avatar}`]:{marginLeft:4},[`& .${Ep.avatarSmall}`]:{marginLeft:2},[`& .${Ep.icon}`]:{marginLeft:4},[`& .${Ep.iconSmall}`]:{marginLeft:2},[`& .${Ep.deleteIcon}`]:{marginRight:5},[`& .${Ep.deleteIconSmall}`]:{marginRight:3}},"outlined"===t.variant&&"default"!==t.color&&{color:e.palette[t.color].main,border:`1px solid ${(0,ml.Fq)(e.palette[t.color].main,.7)}`,[`&.${Ep.clickable}:hover`]:{backgroundColor:(0,ml.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity)},[`&.${Ep.focusVisible}`]:{backgroundColor:(0,ml.Fq)(e.palette[t.color].main,e.palette.action.focusOpacity)},[`& .${Ep.deleteIcon}`]:{color:(0,ml.Fq)(e.palette[t.color].main,.7),"&:hover, &:active":{color:e.palette[t.color].main}}}))),Sp=(0,Wi.ZP)("span",{name:"MuiChip",slot:"Label",overridesResolver:(e,t)=>{const{ownerState:n}=e,{size:r}=n;return[t.label,t[`label${(0,Yi.Z)(r)}`]]}})((({ownerState:e})=>(0,k.Z)({overflow:"hidden",textOverflow:"ellipsis",paddingLeft:12,paddingRight:12,whiteSpace:"nowrap"},"small"===e.size&&{paddingLeft:8,paddingRight:8})));function Op(e){return"Backspace"===e.key||"Delete"===e.key}const Tp=t.forwardRef((function(e,n){const r=(0,$i.Z)({props:e,name:"MuiChip"}),{avatar:o,className:i,clickable:a,color:s="default",component:l,deleteIcon:u,disabled:c=!1,icon:d,label:p,onClick:f,onDelete:h,onKeyDown:m,onKeyUp:g,size:y="medium",variant:A="filled"}=r,b=(0,H.Z)(r,kp),v=t.useRef(null),C=(0,Vl.Z)(v,n),w=e=>{e.stopPropagation(),h&&h(e)},x=!(!1===a||!f)||a,E="small"===y,B=x||h?Fu:l||"div",S=(0,k.Z)({},r,{component:B,disabled:c,size:y,color:s,onDelete:!!h,clickable:x,variant:A}),O=(e=>{const{classes:t,disabled:n,size:r,color:o,onDelete:i,clickable:a,variant:s}=e,l={root:["root",s,n&&"disabled",`size${(0,Yi.Z)(r)}`,`color${(0,Yi.Z)(o)}`,a&&"clickable",a&&`clickableColor${(0,Yi.Z)(o)}`,i&&"deletable",i&&`deletableColor${(0,Yi.Z)(o)}`,`${s}${(0,Yi.Z)(o)}`],label:["label",`label${(0,Yi.Z)(r)}`],avatar:["avatar",`avatar${(0,Yi.Z)(r)}`,`avatarColor${(0,Yi.Z)(o)}`],icon:["icon",`icon${(0,Yi.Z)(r)}`,`iconColor${(0,Yi.Z)(o)}`],deleteIcon:["deleteIcon",`deleteIcon${(0,Yi.Z)(r)}`,`deleteIconColor${(0,Yi.Z)(o)}`,`deleteIconOutlinedColor${(0,Yi.Z)(o)}`]};return(0,Mi.Z)(l,xp,t)})(S),T=B===Fu?(0,k.Z)({component:l||"div",focusVisibleClassName:O.focusVisible},h&&{disableRipple:!0}):{};let D=null;if(h){const e=(0,Ri.Z)("default"!==s&&("outlined"===A?O[`deleteIconOutlinedColor${(0,Yi.Z)(s)}`]:O[`deleteIconColor${(0,Yi.Z)(s)}`]),E&&O.deleteIconSmall);D=u&&t.isValidElement(u)?t.cloneElement(u,{className:(0,Ri.Z)(u.props.className,O.deleteIcon,e),onClick:w}):(0,Hi.jsx)(wp,{className:(0,Ri.Z)(O.deleteIcon,e),onClick:w})}let N=null;o&&t.isValidElement(o)&&(N=t.cloneElement(o,{className:(0,Ri.Z)(O.avatar,o.props.className)}));let I=null;return d&&t.isValidElement(d)&&(I=t.cloneElement(d,{className:(0,Ri.Z)(O.icon,d.props.className)})),(0,Hi.jsxs)(Bp,(0,k.Z)({as:B,className:(0,Ri.Z)(O.root,i),disabled:!(!x||!c)||void 0,onClick:f,onKeyDown:e=>{e.currentTarget===e.target&&Op(e)&&e.preventDefault(),m&&m(e)},onKeyUp:e=>{e.currentTarget===e.target&&(h&&Op(e)?h(e):"Escape"===e.key&&v.current&&v.current.blur()),g&&g(e)},ref:C,ownerState:S},T,b,{children:[N||I,(0,Hi.jsx)(Sp,{className:(0,Ri.Z)(O.label),ownerState:S,children:p}),D]}))}));function Dp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Np={PaperProps:{style:{maxHeight:224,width:250}}};function Ip(e,t,n){return{fontWeight:-1===t.indexOf(e)?n.typography.fontWeightRegular:n.typography.fontWeightMedium}}const Pp=function(e){var n=e.items,r=e.setItems,o=yl(),i=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Dp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Dp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)([]),2),a=i[0],s=i[1];return t.createElement("div",null,t.createElement(nc,{sx:{width:"100%"}},t.createElement(Cp,{labelId:"demo-multiple-chip-label",id:"demo-multiple-chip",multiple:!0,value:a,onChange:function(e){var t=e.target.value;s("string"==typeof t?t.split(","):t),r("string"==typeof t?t.split(","):t)},input:t.createElement(fu,{id:"select-multiple-chip"}),renderValue:function(e){return t.createElement(ya,{sx:{display:"flex",flexWrap:"wrap",gap:.5}},e.map((function(e){return t.createElement(Tp,{key:e,label:e})})))},MenuProps:Np},n.map((function(e){return t.createElement(Ku,{key:e,value:e,style:Ip(e,a,o)},e)})))))};function Rp(e){return function(e){if(Array.isArray(e))return Mp(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Mp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Mp(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Mp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Zp=function(e){var n=e.searchTerm,r=e.subject,o=e.isAssociatedWithSchool,i=e.meetingFormat,a=e.type,s=e.timeRange,l=(e.days,e.meetingFrequencies,e.updateSearchTerm),u=e.updateSubject,c=e.updateIsAssociatedWithSchool,d=e.updateMeetingFormat,p=e.updateType,f=e.updateTimeRange,h=e.updateDays,m=e.updateMeetingFrequencies,g=e.submitSearch,y=e.userSchool;return t.createElement("div",null,t.createElement(Tt,{onSubmit:g,className:"search-form"},t.createElement(jt,null,t.createElement(Lt,null,"Search Term"),t.createElement(Vt,{value:n,onChange:l})),t.createElement(jt,null,t.createElement(Lt,null,"Category"),t.createElement(Xt,{options:Object.keys(tn()),value:r,onChange:u})),t.createElement(jt,null,t.createElement(Lt,null,"Meeting Frequency"),t.createElement(Pp,{items:Rp(Object.values(ri.MeetingFrequencies)),setItems:m})),t.createElement(jt,null,t.createElement(Lt,null,"Meeting Days"),t.createElement(Pp,{items:Rp(Object.values(ri.Days)),setItems:h})),t.createElement(jt,null,t.createElement(Lt,null,"Meeting Time Range"),t.createElement("h4",null,s[0]," to ",s[1]),t.createElement(Dl,{updateTimeRange:f})),t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Meeting Format"),t.createElement(Xt,{options:Rp(Object.values(zs())),onChange:d,value:i})),t.createElement(jt,null,t.createElement(Lt,null,"Type"),t.createElement(Xt,{options:["Group","Tutor","Mixed"],onChange:p,value:a}))),""!==y&&t.createElement(Gt,null,t.createElement(Lt,null,"Show Only Groups Associated with ",y,"?"),t.createElement(Ht,{value:o,onChange:c,type:"checkbox"})),t.createElement(Zt,{type:It},"Search")))};var _p=n(9879),jp={};jp.styleTagTransform=g(),jp.setAttributes=p(),jp.insert=c().bind(null,"head"),jp.domAPI=l(),jp.insertStyleElement=h(),a()(_p.Z,jp),_p.Z&&_p.Z.locals&&_p.Z.locals;const zp=function(e){var n=e.direction||"left";return t.createElement("div",{className:e.sideViewIsShowing?e.nameOfClass+" "+n+" side-view showing":e.nameOfClass+" "+n+" side-view"},console.log(n),t.createElement("button",{className:"close-side-view-btn",onClick:function(){e.setSideViewIsShowing(!1)}},"X"),e.children)};function Lp(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Up(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Fp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Fp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Fp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Yp=function(e){var n=e.searchViewIsShowing,r=e.setSearchViewIsShowing,o=Up((0,t.useState)(""),2),i=o[0],a=o[1],s=Up((0,t.useState)(tn().Any),2),l=s[0],u=s[1],c=Up((0,t.useState)(!1),2),d=c[0],p=c[1],f=Up((0,t.useState)(zs().Mixed),2),h=f[0],m=f[1],g=Up((0,t.useState)("Mixed"),2),y=g[0],A=g[1],b=Up((0,t.useState)(["12:00AM","11:45PM"]),2),v=b[0],C=b[1],w=Up((0,t.useState)([]),2),x=w[0],E=w[1],k=Up((0,t.useState)([]),2),B=k[0],S=k[1],O=Ie(),T=Ze((function(e){return e.authReducer.user||""})),D=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t&&(t.preventDefault(),t.stopPropagation()),r(!1),e.next=4,So(Ft().Search.GetSearchResults,{searchTerm:i,subject:l,school:d?T.school:"",meetingFormat:h,meetingFrequencies:B,type:y,startTime:ri.Time.parseTimeString(v[0]),endTime:ri.Time.parseTimeString(v[1]),days:x},Kt().StudyGroup.SuccessStudyGroupsRetrieved,null,!0,(function(e,t){var n;t||O((n=e.studyGroups,{type:tt,payload:{groups:n}}))}),!1);case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Lp(i,r,o,a,s,"next",e)}function s(e){Lp(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return(0,t.useEffect)((function(){D()}),[]),t.createElement(zp,{setSideViewIsShowing:r,sideViewIsShowing:n,nameOfClass:"search-view"},t.createElement("div",null,t.createElement(Zp,{searchTerm:i,subject:l,isAssociatedWithSchool:d,meetingFormat:h,type:y,timeRange:v,days:x,meetingFrequencies:B,updateSearchTerm:function(e){a(e.target.value)},updateSubject:function(e){u(e.target.value)},updateIsAssociatedWithSchool:function(e){p(e.target.checked)},updateMeetingFormat:function(e){m(e.target.options[e.target.selectedIndex].value)},updateType:function(e){A(e.target.options[e.target.selectedIndex].value)},updateTimeRange:function(e){C(e)},updateDays:function(e){E(e)},updateMeetingFrequencies:function(e){S(e)},submitSearch:D,userSchool:T.school||""})))};var $p=n(610),Wp={};Wp.styleTagTransform=g(),Wp.setAttributes=p(),Wp.insert=c().bind(null,"head"),Wp.domAPI=l(),Wp.insertStyleElement=h(),a()($p.Z,Wp),$p.Z&&$p.Z.locals&&$p.Z.locals;var Vp=n(9010),qp={};qp.styleTagTransform=g(),qp.setAttributes=p(),qp.insert=c().bind(null,"head"),qp.domAPI=l(),qp.insertStyleElement=h(),a()(Vp.Z,qp),Vp.Z&&Vp.Z.locals&&Vp.Z.locals;const Gp=function(e){var n=e.group,r=Ie();return(0,t.useEffect)((function(){console.log(n)}),[]),t.createElement("div",{className:"listing-container",style:{border:"".concat(n.groupColor," 5px solid")},onClick:function(){return r(function(e){return{type:Fe,payload:e}}(n))}},t.createElement("div",{className:"title-photo-container",style:{backgroundColor:n.groupColor}},t.createElement("h1",{className:"group-title"},n.name)),t.createElement("div",{className:"group-info-container"},t.createElement("div",{className:"group-info-item",id:"owner-info"},n.isTutorGroup?t.createElement("p",null,t.createElement("strong",null,"Tutor:")):t.createElement("p",null,t.createElement("strong",null,"Owner:")),t.createElement("h2",null,n.owner.name)),t.createElement("div",{className:"group-info-item",id:"school-info"},t.createElement("p",null,"School:"),t.createElement("h2",null,n.school?n.school:"None")),t.createElement("div",{className:"group-info-item",id:"subject-info"},t.createElement("p",null,"Subject:"),t.createElement("h2",null,n.subject)),t.createElement("div",{className:"group-info-item",id:"courseCode-info"},t.createElement("p",null,"Course Code:"),t.createElement("h2",null,n.course?n.course:"None")),n.recurringMeeting&&t.createElement("div",{className:"group-info-item",id:"schedule-info"},n.isOnlineGroup?t.createElement("p",null,"Meets ",t.createElement("strong",null,"Online"),":"):t.createElement("p",null,"Meets ",t.createElement("strong",null,"In-Person"),":"),t.createElement("h2",null,n.recurringMeeting.frequency," on ",n.recurringMeeting.day," at"," ",n.recurringMeeting.time))))},Hp=function(e){e.searchViewIsShowing;var n=Ze((function(e){return e.studyGroupsReducer.search})),r=Ze((function(e){return e.notificationReducer.loading}));return t.createElement("div",{className:"search-results"},r?t.createElement(Aa,null):n.map((function(e){return t.createElement(Gp,{group:e,key:e._id})})))};var Qp=n(2761);function Kp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xp=function(){var e=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(!1),2),n=e[0],r=e[1];return t.createElement(t.Fragment,null,t.createElement(Ha,{topBar:!0,currentPage:"search"},t.createElement("div",{className:"search-page"},t.createElement("div",{className:"page-title"},t.createElement("h1",null,"Search")),t.createElement("div",{className:"search-area"},t.createElement(Yp,{searchViewIsShowing:n,setSearchViewIsShowing:r}),t.createElement(Hp,null)),t.createElement("div",{className:"open-search-filter-button-container"},t.createElement(Zt,{onClick:function(){r(!n)}},t.createElement(Qp.Z,null))))))};var Jp=n(2977),ef={};ef.styleTagTransform=g(),ef.setAttributes=p(),ef.insert=c().bind(null,"head"),ef.domAPI=l(),ef.insertStyleElement=h(),a()(Jp.Z,ef),Jp.Z&&Jp.Z.locals&&Jp.Z.locals;var tf=n(1888),nf={};nf.styleTagTransform=g(),nf.setAttributes=p(),nf.insert=c().bind(null,"head"),nf.domAPI=l(),nf.insertStyleElement=h(),a()(tf.Z,nf),tf.Z&&tf.Z.locals&&tf.Z.locals;const rf=function(e){var n=e.group,r=e.membersViewIsShowing,o=e.setMembersViewIsShowing,i=Ie();return t.createElement(zp,{nameOfClass:"members-container",setSideViewIsShowing:o,sideViewIsShowing:r},t.createElement("div",null,t.createElement(Lt,{style:{padding:"10px"}},"Owner"),t.createElement("div",{className:"member owner",onClick:function(){return i(ft(n.owner))},style:{borderColor:n.groupColor}},n.owner&&t.createElement(t.Fragment,null,t.createElement(vi,{image:n.owner.profilePicture,name:n.owner.name}),t.createElement("p",null,n.owner.name)," ")),t.createElement(Lt,{style:{padding:"10px"}},"Members"),n.members&&n.members.map((function(e){return t.createElement("div",{className:"member",onClick:function(){return i(ft(e))},style:{borderColor:n.groupColor}},t.createElement(vi,{image:e.profilePicture,name:e.name}),t.createElement("p",null,e.name))}))))};var of=n(6057),af={};function sf(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function lf(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){sf(i,r,o,a,s,"next",e)}function s(e){sf(i,r,o,a,s,"throw",e)}a(void 0)}))}}af.styleTagTransform=g(),af.setAttributes=p(),af.insert=c().bind(null,"head"),af.domAPI=l(),af.insertStyleElement=h(),a()(of.Z,af),of.Z&&of.Z.locals&&of.Z.locals;const uf=function(e){var n=e.group,r=e.detailsViewIsShowing,o=e.setDetailsViewIsShowing,i=Ze((function(e){return e.authReducer.user})),a=Ie(),s=de(),l=function(){var e=lf(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t){e.next=3;break}return e.next=3,To(Ft().StudyGroup.DeleteStudyGroup,{studyGroupId:n._id},Kt().StudyGroup.SuccessStudyGroupDeleted,null,!0,(function(e,t){t||s.push("/")}));case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),u=function(){var e=lf(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t){e.next=3;break}return e.next=3,So(Ft().StudyGroup.LeaveStudyGroup,{studyGroupId:n._id},Kt().StudyGroup.SuccessStudyGroupLeft,null,!0,(function(e,t){t||s.push("/")}));case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return t.createElement(zp,{nameOfClass:"details-container",direction:"right",setSideViewIsShowing:o,sideViewIsShowing:r},t.createElement("div",null,t.createElement("div",{className:"meetinginfo-container",onClick:function(){return a(pt(n))}},t.createElement("h1",null,"Next Meeting"),t.createElement("div",{className:"meetinginfo-description"},t.createElement("p",null,"Date: ",t.createElement("strong",null,n&&No(n).date)),t.createElement("p",null,"Time: ",t.createElement("strong",null,n&&No(n).time)))),t.createElement("div",{className:"description-container"},t.createElement("h1",null,"Group Description"),t.createElement("p",{className:"details-description"},n.description)),t.createElement("div",{className:"buttons"},n.owner&&n.owner._id===i._id&&t.createElement(t.Fragment,null,t.createElement(Zt,{onClick:function(){return a(function(e){return{type:Ye,payload:e}}(n))}},"EDIT"),t.createElement(Zt,{onClick:function(){a(mt(l,"Confirm Deletion","Are you sure you want to delete the study group: "+n.name+"?")),a(bt())}},"Delete")),n.owner&&n.owner._id!==i._id&&t.createElement(t.Fragment,null,t.createElement(Zt,{onClick:function(){a(mt(u,"Confirm Leave","Are you sure you want to leave the study group: "+n.name+"?")),a(bt())}},"Leave Group")),n.owner&&n.owner._id!==i._id&&t.createElement(t.Fragment,null,t.createElement(Zt,{onClick:function(){a(gt("Study Group",n))}},"Report")))))};var cf=n(5092),df={};df.styleTagTransform=g(),df.setAttributes=p(),df.insert=c().bind(null,"head"),df.domAPI=l(),df.insertStyleElement=h(),a()(cf.Z,df),cf.Z&&cf.Z.locals&&cf.Z.locals;var pf=n(8571),ff=n(4721);const hf=function(e){var n=e.group,r=e.setDetailsViewIsShowing,o=e.setMembersViewIsShowing,i=e.membersViewIsShowing,a=e.detailsViewIsShowing,s=Ie(),l=Ze((function(e){return e.authReducer.user})),u=(0,t.useRef)();(0,t.useEffect)((function(){u.current.scrollTop=u.current.scrollHeight,console.log("running")}),[n.posts]);var c=function(e){s(function(e,t){return{type:$e,payload:{group:e,isRecurringMeeting:t}}}(n,e))};return t.createElement(t.Fragment,null,t.createElement("div",{className:"feed-container",ref:u},t.createElement("div",{className:"posts-container"},n.posts&&0!==n.posts.length?n.posts.map((function(e){return t.createElement(Ti,{attachment:e.attachment,title:e.title,message:e.message,creator:e.creator,_id:e._id,timestamp:e.createdAt,type:e.type,color:n.groupColor,responses:e.responses,group:n})})):t.createElement("div",{className:"no-posts-message"},t.createElement("h1",null,"Welcome!"),t.createElement("p",null,"Start the conversation by creating the first post!")))),t.createElement("div",{className:"options-container"},t.createElement("div",{className:"open-view-buttons"},t.createElement(Zt,{onClick:function(){o(!i)}},t.createElement(pf.Z,null))),t.createElement(Zt,{onClick:function(){return s(function(e){return{type:We,payload:e}}(n))}},"Start Post"),n.owner&&l._id===n.owner._id&&t.createElement(Zt,{onClick:function(){return s(mt(c,"Choose Meeting","Which meeting would you like to create",!1,"Recurring Meeting","One-time Meeting"))}},"Schedule Meeting"),t.createElement("div",{className:"open-view-buttons"},t.createElement(Zt,{onClick:function(){r(!a)}},t.createElement(ff.Z,null)))))};function mf(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function gf(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){mf(i,r,o,a,s,"next",e)}function s(e){mf(i,r,o,a,s,"throw",e)}a(void 0)}))}}function yf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Af(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Af(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Af(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const bf=function(e){Ie(),Ze((function(e){return e.authReducer.user}));var n=Ze((function(e){return e.notificationReducer.loading})),r=e.match.params.id,o=yf((0,t.useState)({}),2),i=o[0],a=o[1],s=yf((0,t.useState)("All Clear"),2),l=(s[0],s[1],yf((0,t.useState)(!1),2)),u=l[0],c=l[1],d=yf((0,t.useState)(!1),2),p=d[0],f=d[1];(0,t.useEffect)((function(){function e(){return(e=gf(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,h();case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[]);var h=function(){var e=gf(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Oo(Ft().StudyGroup.GetStudyGroup+"?studyGroupId="+r,Kt().StudyGroup.SuccessStudyGroupRetrieved,Kt().StudyGroup.ErrorGetStudyGroup,!0,(function(e,t){t||a(e.studyGroup)}),!1);case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return t.createElement("div",null,t.createElement(Ha,{topBar:!0,currentPage:"study",showingPageTitle:!1},t.createElement("div",{className:"study-group-page"},t.createElement("div",{className:"page-title-study-group",style:{backgroundColor:i.groupColor+"90"}},t.createElement(Ae,{to:"/"},t.createElement(Zt,{style:{marginLeft:"0px",backgroundColor:i.groupColor}},"<")),t.createElement("h1",null,i.name)),t.createElement("div",{className:"main-view"},n?t.createElement(Aa,null):t.createElement(t.Fragment,null,t.createElement(rf,{group:i,setMembersViewIsShowing:c,membersViewIsShowing:u}),t.createElement(hf,{group:i,setDetailsViewIsShowing:f,setMembersViewIsShowing:c,detailsViewIsShowing:p,membersViewIsShowing:u}),t.createElement(uf,{group:i,setDetailsViewIsShowing:f,detailsViewIsShowing:p}))))))};var vf=n(2668),Cf={};function wf(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function xf(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){wf(i,r,o,a,s,"next",e)}function s(e){wf(i,r,o,a,s,"throw",e)}a(void 0)}))}}Cf.styleTagTransform=g(),Cf.setAttributes=p(),Cf.insert=c().bind(null,"head"),Cf.domAPI=l(),Cf.insertStyleElement=h(),a()(vf.Z,Cf),vf.Z&&vf.Z.locals&&vf.Z.locals;const Ef=function(){var e=Ie(),n=Ze((function(e){return e.authReducer})).user,r=(Ze((function(e){return e.notificationReducer.loading})),function(){var t=xf(regeneratorRuntime.mark((function t(n,r){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,So(Ft().Account.ChangeEmail,{newEmail:n,currentPassword:r},Kt().Account.EmailSent,null,!0,(function(t,n){n||e(yt())}));case 2:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}()),o=function(){var t=xf(regeneratorRuntime.mark((function t(n,r){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,So(Ft().Account.ChangePassword,{currentPassword:n,newPassword:r},Kt().Account.SuccessChangingPassword,null,!0,(function(t,n){n||e(yt())}));case 2:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}(),i=function(){var t=xf(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,To(Ft().Account.Delete,{currentPassword:n},Kt().Account.SuccessAccountDeleted,null,!0,(function(t,n){n||(e(ut()),e(yt()),Io())}));case 2:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement(Ha,{topBar:!0,currentPage:""},t.createElement("div",{className:"page-title"},t.createElement("h1",null,"Account")),t.createElement("div",{className:"account-page"},t.createElement("div",{className:"infos"},t.createElement("div",{className:"user-info"},t.createElement("h1",null,"Full Name:"),t.createElement("p",{className:"name"},n.name)),t.createElement("div",{className:"user-info"},t.createElement("h1",null,"Email:"),t.createElement("p",{className:"email"},n.email)),t.createElement("div",{className:"user-info"},t.createElement("h1",null,"Area Code:"),t.createElement("p",{className:"areaCode"},n.areaCode)),t.createElement("div",{className:"user-info"},t.createElement("h1",null,"Profile Picture:"),t.createElement(vi,{image:n.profilePicture,name:n.name}))),t.createElement("div",{className:"edit-account-buttons"},t.createElement(Zt,{type:It,onClick:function(){return e(ht("Change Email","New Email","",r,"Current Password"))}},"Change Email"),t.createElement(Zt,{type:It,onClick:function(){return e(ht("Change Password","Current Password","",o,"New Password"))}},"Change Password"),t.createElement(Zt,{type:Rt,onClick:function(){return e(ht("Confirm Password to Delete Account","Confirm your password","",i))}},"Delete Account")))))};var kf=n(8505),Bf={};Bf.styleTagTransform=g(),Bf.setAttributes=p(),Bf.insert=c().bind(null,"head"),Bf.domAPI=l(),Bf.insertStyleElement=h(),a()(kf.Z,Bf),kf.Z&&kf.Z.locals&&kf.Z.locals;var Sf=n(4187),Of=n(8058);const Tf="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function Df(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||Of))return new XMLHttpRequest}catch(e){}if(!t)try{return new(Tf[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}function Nf(e,...t){return t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{})}const If=setTimeout,Pf=clearTimeout;function Rf(e,t){t.useNativeTimers?(e.setTimeoutFn=If.bind(Tf),e.clearTimeoutFn=Pf.bind(Tf)):(e.setTimeoutFn=setTimeout.bind(Tf),e.clearTimeoutFn=clearTimeout.bind(Tf))}var Mf=n(3063);const Zf=Object.create(null);Zf.open="0",Zf.close="1",Zf.ping="2",Zf.pong="3",Zf.message="4",Zf.upgrade="5",Zf.noop="6";const _f=Object.create(null);Object.keys(Zf).forEach((e=>{_f[Zf[e]]=e}));const jf={type:"error",data:"parser error"},zf="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),Lf="function"==typeof ArrayBuffer,Uf=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)},Ff=({type:e,data:t},n,r)=>{return zf&&t instanceof Blob?n?r(t):Uf(t,r):Lf&&(t instanceof ArrayBuffer||(o=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(o):o&&o.buffer instanceof ArrayBuffer))?n?r(t):Uf(new Blob([t]),r):r(Zf[e]+(t||""));var o};for(var Yf="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",$f="undefined"==typeof Uint8Array?[]:new Uint8Array(256),Wf=0;Wf<Yf.length;Wf++)$f[Yf.charCodeAt(Wf)]=Wf;const Vf="function"==typeof ArrayBuffer,qf=(e,t)=>{if(Vf){const n=function(e){var t,n,r,o,i,a=.75*e.length,s=e.length,l=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var u=new ArrayBuffer(a),c=new Uint8Array(u);for(t=0;t<s;t+=4)n=$f[e.charCodeAt(t)],r=$f[e.charCodeAt(t+1)],o=$f[e.charCodeAt(t+2)],i=$f[e.charCodeAt(t+3)],c[l++]=n<<2|r>>4,c[l++]=(15&r)<<4|o>>2,c[l++]=(3&o)<<6|63&i;return u}(e);return Gf(n,t)}return{base64:!0,data:e}},Gf=(e,t)=>"blob"===t&&e instanceof ArrayBuffer?new Blob([e]):e,Hf=(e,t)=>{if("string"!=typeof e)return{type:"message",data:Gf(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:qf(e.substring(1),t)}:_f[n]?e.length>1?{type:_f[n],data:e.substring(1)}:{type:_f[n]}:jf},Qf=String.fromCharCode(30);class Kf extends Mf.Q{constructor(e){super(),this.writable=!1,Rf(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t){const n=new Error(e);return n.type="TransportError",n.description=t,super.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState&&this.write(e)}onOpen(){this.readyState="open",this.writable=!0,super.emit("open")}onData(e){const t=Hf(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emit("packet",e)}onClose(){this.readyState="closed",super.emit("close")}}var Xf=n(2281),Jf=n(1830);class eh extends Kf{constructor(){super(...arguments),this.polling=!1}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(e++,this.once("pollComplete",(function(){--e||t()}))),this.writable||(e++,this.once("drain",(function(){--e||t()})))}else t()}poll(){this.polling=!0,this.doPoll(),this.emit("poll")}onData(e){((e,t)=>{const n=e.split(Qf),r=[];for(let e=0;e<n.length;e++){const o=Hf(n[e],t);if(r.push(o),"error"===o.type)break}return r})(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose(),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const e=()=>{this.write([{type:"close"}])};"open"===this.readyState?e():this.once("open",e)}write(e){this.writable=!1,((e,t)=>{const n=e.length,r=new Array(n);let o=0;e.forEach(((e,i)=>{Ff(e,!1,(e=>{r[i]=e,++o===n&&t(r.join(Qf))}))}))})(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=Xf()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port);const r=Jf.encode(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}}function th(){}const nh=null!=new Df({xdomain:!1}).responseType;class rh extends Mf.Q{constructor(e,t){super(),Rf(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=Nf(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new Df(e);try{t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=rh.requestsCount++,rh.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(e){this.emit("data",e),this.onSuccess()}onError(e){this.emit("error",e),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=th,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete rh.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&this.onData(e)}abort(){this.cleanup()}}function oh(){for(let e in rh.requests)rh.requests.hasOwnProperty(e)&&rh.requests[e].abort()}rh.requestsCount=0,rh.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",oh):"function"==typeof addEventListener&&addEventListener("onpagehide"in Tf?"pagehide":"unload",oh,!1));const ih="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),ah=Tf.WebSocket||Tf.MozWebSocket,sh="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class lh extends Kf{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=sh?{}:Nf(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=sh?new ah(e,t,n):t?new ah(e,t):new ah(e)}catch(e){return this.emit("error",e)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;Ff(n,this.supportsBinary,(e=>{try{this.ws.send(e)}catch(e){}r&&ih((()=>{this.writable=!0,this.emit("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=Xf()),this.supportsBinary||(e.b64=1);const r=Jf.encode(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}check(){return!(!ah||"__initialize"in ah&&this.name===lh.prototype.name)}}const uh={websocket:lh,polling:class extends eh{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=nh&&!t}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new rh(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",(e=>{this.onError("xhr post error",e)}))}doPoll(){const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(e=>{this.onError("xhr poll error",e)})),this.pollXhr=e}}};class ch extends Mf.Q{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=Sf(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=Sf(t.host).host),Rf(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=Jf.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){const t=function(e){const t={};for(let n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=4,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new uh[e](n)}open(){let e;if(this.opts.rememberUpgrade&&ch.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){this.transport&&this.transport.removeAllListeners(),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(e){let t=this.createTransport(e),n=!1;ch.priorWebsocketSuccess=!1;const r=()=>{n||(t.send([{type:"ping",data:"probe"}]),t.once("packet",(e=>{if(!n)if("pong"===e.type&&"probe"===e.data){if(this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;ch.priorWebsocketSuccess="websocket"===t.name,this.transport.pause((()=>{n||"closed"!==this.readyState&&(u(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{const e=new Error("probe error");e.transport=t.name,this.emitReserved("upgradeError",e)}})))};function o(){n||(n=!0,u(),t.close(),t=null)}const i=e=>{const n=new Error("probe error: "+e);n.transport=t.name,o(),this.emitReserved("upgradeError",n)};function a(){i("transport closed")}function s(){i("socket closed")}function l(e){t&&e.name!==t.name&&o()}const u=()=>{t.removeListener("open",r),t.removeListener("error",i),t.removeListener("close",a),this.off("close",s),this.off("upgrading",l)};t.once("open",r),t.once("error",i),t.once("close",a),this.once("close",s),this.once("upgrading",l),t.open()}onOpen(){if(this.readyState="open",ch.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emitReserved("flush"))}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const o={type:e,data:t,options:n};this.emitReserved("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(e){ch.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}ch.protocol=4,ch.protocol;const dh="function"==typeof ArrayBuffer,ph=Object.prototype.toString,fh="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===ph.call(Blob),hh="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===ph.call(File);function mh(e){return dh&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||fh&&e instanceof Blob||hh&&e instanceof File}function gh(e,t){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let t=0,n=e.length;t<n;t++)if(gh(e[t]))return!0;return!1}if(mh(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return gh(e.toJSON(),!0);for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&gh(e[t]))return!0;return!1}function yh(e){const t=[],n=e.data,r=e;return r.data=Ah(n,t),r.attachments=t.length,{packet:r,buffers:t}}function Ah(e,t){if(!e)return e;if(mh(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=Ah(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=Ah(e[r],t));return n}return e}function bh(e,t){return e.data=vh(e.data,t),e.attachments=void 0,e}function vh(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=vh(e[n],t);else if("object"==typeof e)for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(e[n]=vh(e[n],t));return e}const Ch=5;var wh;!function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(wh||(wh={}));class xh{encode(e){return e.type!==wh.EVENT&&e.type!==wh.ACK||!gh(e)?[this.encodeAsString(e)]:(e.type=e.type===wh.EVENT?wh.BINARY_EVENT:wh.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==wh.BINARY_EVENT&&e.type!==wh.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),t}encodeAsBinary(e){const t=yh(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}}class Eh extends Mf.Q{constructor(){super()}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===wh.BINARY_EVENT||t.type===wh.BINARY_ACK?(this.reconstructor=new kh(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t);else{if(!mh(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===wh[n.type])throw new Error("unknown packet type "+n.type);if(n.type===wh.BINARY_EVENT||n.type===wh.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const o=e.substring(r,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(o)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!Eh.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return n}static isPayloadValid(e,t){switch(e){case wh.CONNECT:return"object"==typeof t;case wh.DISCONNECT:return void 0===t;case wh.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case wh.EVENT:case wh.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case wh.ACK:case wh.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}class kh{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=bh(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function Bh(e,t,n){return e.on(t,n),function(){e.off(t,n)}}const Sh=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Oh extends Mf.Q{constructor(e,t,n){super(),this.connected=!1,this.disconnected=!0,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const e=this.io;this.subs=[Bh(e,"open",this.onopen.bind(this)),Bh(e,"packet",this.onpacket.bind(this)),Bh(e,"error",this.onerror.bind(this)),Bh(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(Sh.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:wh.EVENT,data:t,options:{}};if(n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++,r=t.pop();this._registerAckCallback(e,r),n.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!r||!this.connected)||(this.connected?this.packet(n):this.sendBuffer.push(n)),this.flags={},this}_registerAckCallback(e,t){const n=this.flags.timeout;if(void 0===n)return void(this.acks[e]=t);const r=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&this.sendBuffer.splice(t,1);t.call(this,new Error("operation has timed out"))}),n);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...e])}}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){"function"==typeof this.auth?this.auth((e=>{this.packet({type:wh.CONNECT,data:e})})):this.packet({type:wh.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e){this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",e)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case wh.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case wh.EVENT:case wh.BINARY_EVENT:this.onevent(e);break;case wh.ACK:case wh.BINARY_ACK:this.onack(e);break;case wh.DISCONNECT:this.ondisconnect();break;case wh.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];null!=e.id&&t.push(this.ack(e.id)),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...r){n||(n=!0,t.packet({type:wh.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t&&(t.apply(this,e.data),delete this.acks[e.id])}onconnect(e){this.id=e,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>this.packet(e))),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:wh.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}var Th=n(3010);class Dh extends Mf.Q{constructor(t,n){var r;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(n=t,t=void 0),(n=n||{}).path=n.path||"/socket.io",this.opts=n,Rf(this,n),this.reconnection(!1!==n.reconnection),this.reconnectionAttempts(n.reconnectionAttempts||1/0),this.reconnectionDelay(n.reconnectionDelay||1e3),this.reconnectionDelayMax(n.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(r=n.randomizationFactor)&&void 0!==r?r:.5),this.backoff=new Th({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==n.timeout?2e4:n.timeout),this._readyState="closed",this.uri=t;const o=n.parser||e;this.encoder=new o.Encoder,this.decoder=new o.Decoder,this._autoConnect=!1!==n.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(~this._readyState.indexOf("open"))return this;this.engine=new ch(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const r=Bh(t,"open",(function(){n.onopen(),e&&e()})),o=Bh(t,"error",(t=>{n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;0===e&&r();const n=this.setTimeoutFn((()=>{r(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(r),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(Bh(e,"ping",this.onping.bind(this)),Bh(e,"data",this.ondata.bind(this)),Bh(e,"error",this.onerror.bind(this)),Bh(e,"close",this.onclose.bind(this)),Bh(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new Oh(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return;this._close()}_packet(e){const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();this._reconnecting=!0;const n=this.setTimeoutFn((()=>{e.skipReconnect||(this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):e.onreconnect()})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}const Nh={};function Ih(e,t){"object"==typeof e&&(t=e,e=void 0);const n=function(e,t="",n){let r=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(e=void 0!==n?n.protocol+"//"+e:"https://"+e),r=Sf(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const o=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+o+":"+r.port+t,r.href=r.protocol+"://"+o+(n&&n.port===r.port?"":":"+r.port),r}(e,(t=t||{}).path||"/socket.io"),r=n.source,o=n.id,i=n.path,a=Nh[o]&&i in Nh[o].nsps;let s;return t.forceNew||t["force new connection"]||!1===t.multiplex||a?s=new Dh(r,t):(Nh[o]||(Nh[o]=new Dh(r,t)),s=Nh[o]),n.query&&!t.query&&(t.query=n.queryKey),s.socket(n.path,t)}Object.assign(Ih,{Manager:Dh,Socket:Oh,io:Ih,connect:Ih});var Ph=n(4159),Rh={};Rh.styleTagTransform=g(),Rh.setAttributes=p(),Rh.insert=c().bind(null,"head"),Rh.domAPI=l(),Rh.insertStyleElement=h(),a()(Ph.Z,Rh),Ph.Z&&Ph.Z.locals&&Ph.Z.locals;var Mh=n(1407),Zh=n.n(Mh);function _h(e){return function(e){if(Array.isArray(e))return Uh(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Lh(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jh(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function zh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||Lh(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lh(e,t){if(e){if("string"==typeof e)return Uh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Uh(e,t):void 0}}function Uh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Fh=function(e){var n=e.conversation,r=(0,t.useRef)(),o=Ie(),i=Ze((function(e){return e.authReducer.user})),a=Ze((function(e){return e.notificationReducer.loading})),s=n.participants&&(String(n.participants[0]._id)!==i._id?n.participants[0]:n.participants[1]),l=s&&s._id,u=i._id,c=zh((0,t.useState)({}),2),d=c[0],p=c[1],f=zh((0,t.useState)(""),2),h=f[0],m=f[1],g=zh((0,t.useState)([]),2),y=g[0],A=g[1],b=function(){var e,t=(e=regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,So(Ft().Message.GetConversation,{receiverId:s._id},Kt().Message.SuccessGetConversation,null,!0,(function(e,t){t||A(e.conversation.messages)}),!1);case 2:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){jh(i,r,o,a,s,"next",e)}function s(e){jh(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();return(0,t.useEffect)((function(){n.participants&&b()}),[n]),(0,t.useEffect)((function(){if(s){var e=Ih("https://liberty-studyspaces.herokuapp.com",{autoConnect:!1});e.auth={id:u},e.on(Zh().Message,(function(e){var t=e.message,n=e.senderId,r=e.createdAt,o=_h(y);n===l&&(o.push({value:t,senderId:n,createdAt:r}),A(o))})),e.on(Zh().MessageFailure,(function(e){console.log(e),o(vt(e))})),e.connect(),p(e),r.current.scrollTop=r.current.scrollHeight}}),[y]),t.createElement("div",{className:"conversation-view"},s&&t.createElement(t.Fragment,null,t.createElement("div",{className:"currentConversationInfo"},t.createElement(vi,{image:s.profilePicture,name:s.name}),t.createElement("h1",null,s&&s.name)),a?t.createElement(Aa,null):t.createElement(t.Fragment,null,t.createElement("div",{className:"messages-view",ref:r},y.map((function(e){return t.createElement("div",{className:"message-container"},t.createElement("div",{className:e.senderId!==u?"message-box receiving-msg":"message-box sending-msg"},e.senderId!==u&&t.createElement(vi,{image:s.profilePicture,name:s.name}),t.createElement("p",{className:"message-content"},e.value)),t.createElement("p",{className:e.senderId!==u?"message-timestamp receiving-msg":"message-timestamp sending-msg"},new Date(e.createdAt).toLocaleString()))}))),t.createElement("div",{className:"send-message-form"},t.createElement(Tt,null,t.createElement("div",{className:"side-by-side"},t.createElement(jt,{style:{flex:"50%",overflow:"hidden"}},t.createElement(Lt,null,"Message"),t.createElement(Vt,{value:h,onChange:function(e){m(e.target.value)}})),t.createElement(Zt,{type:Pt,onClick:function(e){if(e.preventDefault(),console.log(h,l),h.length>0){var t=_h(y);t.push({value:h,senderId:u,createdAt:new Date}),A(t),d.emit(Zh().Message,{message:h,receiverId:l,createdAt:new Date}),m("")}}},"Send")))))))};var Yh=n(535),$h={};function Wh(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Vh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}$h.styleTagTransform=g(),$h.setAttributes=p(),$h.insert=c().bind(null,"head"),$h.domAPI=l(),$h.insertStyleElement=h(),a()(Yh.Z,$h),Yh.Z&&Yh.Z.locals&&Yh.Z.locals;const qh=function(e){var n=e.setSelectedConversation,r=e.chatsViewIsShowing,o=e.setChatsViewIsShowing,i=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Vh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Vh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)([]),2),a=i[0],s=i[1],l=Ze((function(e){return e.authReducer.user})),u=Ze((function(e){return e.notificationReducer.loading})),c=function(){var e,t=(e=regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,So(Ft().Message.GetConversations,{},Kt().Message.GetConversations.Success,null,!0,(function(e,t){t||(console.log(e),s(e.conversations))}),!1);case 2:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Wh(i,r,o,a,s,"next",e)}function s(e){Wh(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();return(0,t.useEffect)((function(){c()}),[]),t.createElement(zp,{setSideViewIsShowing:o,sideViewIsShowing:r,nameOfClass:"chats-view"},u?t.createElement(Aa,null):t.createElement("div",null,a.map((function(e){return t.createElement("div",{className:"chatItem "+(e.active&&"chatActive"),onClick:function(){a.forEach((function(e){e.active=!1})),e.active=!0,n(e),o(!1)}},t.createElement(vi,{image:String(e.participants[0]._id)!==l._id?e.participants[0].profilePicture:e.participants[1].profilePicture,name:String(e.participants[0]._id)!==l._id?e.participants[0].name:e.participants[1].name}),t.createElement("p",null,String(e.participants[0]._id)!==l._id?e.participants[0].name:e.participants[1].name))}))))};function Gh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Hh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(1407);const Qh=function(e){var n=Gh((0,t.useState)(!1),2),r=n[0],o=n[1],i=Gh((0,t.useState)({}),2),a=i[0],s=i[1],l=Ze((function(e){return e.authReducer.isLoggedIn}));return t.createElement(Ha,{currentPage:"message",topBar:!0},t.createElement("div",{className:"message-page"},t.createElement("div",{className:"page-title"},t.createElement("h1",null,"Message")),l?t.createElement(t.Fragment,null,t.createElement("script",{src:"/socket.io/socket.io.js"}),t.createElement("div",{className:"message-area"},t.createElement(qh,{setSelectedConversation:s,setChatsViewIsShowing:o,chatsViewIsShowing:r}),t.createElement(Fh,{conversation:a}))):t.createElement("div",{className:"guest-message"},t.createElement("h1",null,"You are currently browsing Study Spaces as a guest!"),t.createElement("p",null,"Please sign-up or log-in to be able to message users"),t.createElement("p",null,"Feel free to use our search tool to discover study groups in your area.")),t.createElement("div",{className:"open-chats-view-button-container"},t.createElement(Zt,{onClick:function(){o(!r)}},t.createElement(pf.Z,null)))))};function Kh(){return Kh=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Kh.apply(this,arguments)}function Xh(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Jh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const em=function(e){var n=Ze((function(e){return e.authReducer.isLoggedIn})),r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Jh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Jh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(!1),2),o=(r[0],r[1]),i=Ie(),a=Ze((function(e){return e.popupReducer.isShowing})),s=Ze((function(e){return e.notificationReducer.isShowing}));(0,t.useEffect)((function(){return function(){o(!0),l()}}),[]);var l=function(){var e,t=(e=regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!n){e.next=3;break}return e.next=3,Oo(Ft().Account.UpdateAuthenticationToken,Kt().Account.SuccessUpdateAuthenticationToken,null,!0,(function(e,t){if(t)i(ut());else{var n=e.authenticationToken,r=e.authenticationTokenExpirationDate,o=e.user;i(lt({authenticationToken:n,authenticationTokenExpirationDate:r,user:o}))}}));case 3:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Xh(i,r,o,a,s,"next",e)}function s(e){Xh(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(pe,null,t.createElement(Na,{isShowing:a,isLoggedIn:n}),t.createElement(_a,{isShowing:s}),t.createElement("div",{className:"container"},t.createElement(ue,null,t.createElement(le,{exact:!0,path:"/"},n?t.createElement(oe,{to:"/study"}):t.createElement(xs,null)),t.createElement(le,{path:"/verify/:verificationToken",render:function(e){var r=Ko.AccountSetup;return n?t.createElement(t.Fragment,null,t.createElement(oe,{to:"/study"})):t.createElement(xs,Kh({},e,{homeView:r}))}}),t.createElement(le,{path:"/verifyEmail/:verificationToken",render:function(e){var r=Ko.Login;return n?t.createElement(t.Fragment,null,t.createElement(Ns,Kh({},e,{isVerifyingEmail:!0}))):t.createElement(xs,Kh({},e,{homeView:r}))}}),t.createElement(le,{exact:!0,path:"/study"},t.createElement(Ns,null)),t.createElement(le,{exact:!0,path:"/search"},t.createElement(Xp,null)),t.createElement(le,{exact:!0,path:"/message"},t.createElement(Qh,null)),t.createElement(le,{path:"/group/:id",render:function(e){return n?t.createElement(t.Fragment,null,t.createElement(bf,e)):t.createElement(oe,{to:"/"})}}),t.createElement(le,{exact:!0,path:"/account",render:function(e){return n?t.createElement(t.Fragment,null,t.createElement(Ef,null)):t.createElement(oe,{to:"/"})}}),t.createElement(le,{path:"*",render:function(e){return t.createElement(oe,{to:"/"})}}))))};function tm(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function nm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function rm(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?nm(Object(n),!0).forEach((function(t){tm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):nm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function om(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var im="function"==typeof Symbol&&Symbol.observable||"@@observable",am=function(){return Math.random().toString(36).substring(7).split("").join(".")},sm={INIT:"@@redux/INIT"+am(),REPLACE:"@@redux/REPLACE"+am(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+am()}};function lm(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function um(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(om(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(om(1));return n(um)(e,t)}if("function"!=typeof e)throw new Error(om(2));var o=e,i=t,a=[],s=a,l=!1;function u(){s===a&&(s=a.slice())}function c(){if(l)throw new Error(om(3));return i}function d(e){if("function"!=typeof e)throw new Error(om(4));if(l)throw new Error(om(5));var t=!0;return u(),s.push(e),function(){if(t){if(l)throw new Error(om(6));t=!1,u();var n=s.indexOf(e);s.splice(n,1),a=null}}}function p(e){if(!lm(e))throw new Error(om(7));if(void 0===e.type)throw new Error(om(8));if(l)throw new Error(om(9));try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=s,n=0;n<t.length;n++)(0,t[n])();return e}function f(e){if("function"!=typeof e)throw new Error(om(10));o=e,p({type:sm.REPLACE})}function h(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(om(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[im]=function(){return this},e}return p({type:sm.INIT}),(r={dispatch:p,subscribe:d,getState:c,replaceReducer:f})[im]=h,r}function cm(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function dm(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var pm=dm();pm.withExtraArgument=dm;const fm=pm;function hm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mm(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hm(Object(n),!0).forEach((function(t){gm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function gm(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ym=JSON.parse(localStorage.getItem("user")),Am=Date.now(),bm=new Date(localStorage.getItem("authenticationTokenExpirationDate")),vm=ym?{isLoggedIn:Am<bm,user:ym}:{isLoggedIn:!1};function Cm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function wm(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Cm(Object(n),!0).forEach((function(t){xm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Cm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function xm(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Em(e){return function(e){if(Array.isArray(e))return km(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return km(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?km(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function km(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Bm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Sm(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Bm(Object(n),!0).forEach((function(t){Om(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Bm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Om(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Tm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Dm(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Tm(Object(n),!0).forEach((function(t){Nm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Tm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Nm(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Im=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:sm.INIT}))throw new Error(om(12));if(void 0===n(void 0,{type:sm.PROBE_UNKNOWN_ACTION()}))throw new Error(om(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},s=0;s<a.length;s++){var l=a[s],u=n[l],c=e[l],d=u(c,t);if(void 0===d)throw t&&t.type,new Error(om(14));o[l]=d,r=r||d!==c}return(r=r||a.length!==Object.keys(e).length)?o:e}}({authReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:vm,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case _e:return localStorage.setItem("token",t.payload.authenticationToken),localStorage.setItem("authenticationTokenExpirationDate",t.payload.authenticationTokenExpirationDate),localStorage.setItem("user",JSON.stringify(t.payload.user)),mm(mm({},e),{},{user:t.payload.user,isLoggedIn:!0});case je:return localStorage.clear(),mm(mm({},e),{},{user:{},isLoggedIn:!1});case ze:return mm(mm({},e),{},{unverifiedUser:t.payload.unverifiedUser});case Le:return mm(mm({},e),{},{user:t.payload.user});default:return e}},popupReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{view:"",isShowing:!1,payload:{},showTop:!0},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Ue:return wm(wm({},e),{},{view:Xo.StudyGroup.Create,isShowing:!0,payload:{},showTop:!0});case Fe:return wm(wm({},e),{},{view:Xo.StudyGroup.Join,isShowing:!0,payload:t.payload,showTop:!1});case Ye:return wm(wm({},e),{},{view:Xo.StudyGroup.Edit,isShowing:!0,payload:t.payload,showTop:!0});case $e:return wm(wm({},e),{},{view:Xo.StudyGroup.CreateMeeting,isShowing:!0,payload:t.payload,showTop:!0});case We:return wm(wm({},e),{},{view:Xo.StudyGroup.CreatePost,isShowing:!0,payload:t.payload,showTop:!0});case Ve:return wm(wm({},e),{},{view:Xo.StudyGroup.ViewPost,isShowing:!0,showTop:!1,payload:t.payload});case qe:return wm(wm({},e),{},{view:Xo.StudyGroup.ViewMeetings,isShowing:!0,showTop:!1,payload:t.payload});case Ge:return wm(wm({},e),{},{view:Xo.StudyGroup.ViewMember,isShowing:!0,showTop:!1,payload:t.payload});case He:return wm(wm({},e),{},{view:Xo.Input,isShowing:!0,payload:t.payload,showTop:!0});case Qe:return wm(wm({},e),{},{view:Xo.Confirmation,isShowing:!0,payload:t.payload,showTop:!0});case Ke:return wm(wm({},e),{},{view:Xo.Report,isShowing:!0,payload:t.payload,showTop:!0});case Xe:return wm(wm({},e),{},{isShowing:!1,view:""});default:return e}},studyGroupsReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{studyGroups:[],search:[]},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Je:return Sm(Sm({},e),{},{studyGroups:[].concat(Em(e.studyGroups),[t.payload.group])});case et:return Sm(Sm({},e),{},{studyGroups:t.payload.groups});case tt:return Sm(Sm({},e),{},{search:Em(t.payload.groups)});case nt:return Sm(Sm({},e),{},{studyGroups:[]});default:return e}},notificationReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{isShowing:!1,loading:!1},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case rt:return Dm(Dm({},e),{},{type:Ra,isShowing:!0,message:t.payload.message});case ot:return Dm(Dm({},e),{},{type:Ma,isShowing:!0,message:t.payload.message});case it:return Dm(Dm({},e),{},{isShowing:!1});case at:return Dm(Dm({},e),{},{loading:!0});case st:return Dm(Dm({},e),{},{loading:!1});default:return e}}});const Pm=Im;var Rm={},Mm=$t().isDefined(window.__REDUX_DEVTOOLS_EXTENSION__)&&$t().isDefined(window.__REDUX_DEVTOOLS_EXTENSION__())?um(Pm,Rm,cm(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(om(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=cm.apply(void 0,i)(n.dispatch),rm(rm({},n),{},{dispatch:r})}}}(fm),window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__())):um(Pm,Rm);o.render(t.createElement(Se,{store:Mm},t.createElement(t.StrictMode,null,t.createElement(em,null))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcs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dGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9VdGlsaXR5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9FbnVtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUHJlZml4ZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUGFyc2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9jYWNoZS9kaXN0L2Vtb3Rpb24tY2FjaGUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLWVsZW1lbnQtNjk5ZTY5MDguYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9oYXNoLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9lbW90aW9uLXNlcmlhbGl6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2hlZXQvZGlzdC9lbW90aW9uLXNoZWV0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91dGlscy9kaXN0L2Vtb3Rpb24tdXRpbHMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcy9jb21wb3NlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL2dlbmVyYXRlVXRpbGl0eUNsYXNzL0NsYXNzTmFtZUdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL2dlbmVyYXRlVXRpbGl0eUNsYXNzL2dlbmVyYXRlVXRpbGl0eUNsYXNzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0NhbXBhaWduLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0NoZWNrQ2lyY2xlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0NvbW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXJyb3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXZlbnROb3RlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0luZm8uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvUGVvcGxlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL1F1ZXN0aW9uTWFyay5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9TZWFyY2guanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9wdXJwbGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRyYW5zaXRpb25zLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wcm9wc1RvQ2xhc3NLZXkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVTdHlsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3N0eWxlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vcmVzb2x2ZVByb3BzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3ZnSWNvbi9zdmdJY29uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvZGVwcmVjYXRlZFByb3BUeXBlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvcmVxdWlyZVByb3BGYWN0b3J5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9yZXF1aXJlUHJvcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvc2V0UmVmLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VJZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VJZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91bnN1cHBvcnRlZFByb3AuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Vuc3VwcG9ydGVkUHJvcC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9pc011aUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2lzTXVpRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUNvbnRyb2xsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvYmFzZS9kaXN0L2Vtb3Rpb24tc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9kaXN0L2Vtb3Rpb24tc3R5bGVkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9icmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbG9yTWFuaXB1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL3NoYXBlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JvcmRlcnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9kaXNwbGF5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vZmxleGJveC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2dyaWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wb3NpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc2hhZG93cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9nZXRUaGVtZVZhbHVlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zcGFjaW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvdXNlVGhlbWUvVGhlbWVDb250ZXh0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVdpdGhvdXREZWZhdWx0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy91c2VUaGVtZS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9zZXRSZWYuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUNvbnRyb2xsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VFdmVudENhbGxiYWNrLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VJc0ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9TZXJ2ZXIvRXZlbnRzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL1NlcnZlci9Nb2RlbHMvTWVldGluZ0Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vU2VydmVyL01vZGVscy9Qb3N0VHlwZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vU2VydmVyL01vZGVscy9TdWJqZWN0cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9TZXJ2ZXIvTW9kZWxzL1RpbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL1NlcnZlci9WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2JhY2tvMi9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL0FwcC5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvQWNjb3VudC9BY2NvdW50LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9Ib21lL0hvbWUuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL01lc3NhZ2UvTWVzc2FnZS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvUGFnZS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU2VhcmNoL1NlYXJjaC5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHlHcm91cC9TdHVkeUdyb3VwLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9TdHVkeS9TdHVkeS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvQ29uZmlybWF0aW9uRm9ybS9Db25maXJtYXRpb25Gb3JtLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ib21lL0F1dGhWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9JbnB1dC9JbnB1dFZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL01lc3NhZ2UvQ2hhdHNWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9NZXNzYWdlL0NvbnZlcnNhdGlvblZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL05vdGlmaWNhdGlvbi9Ob3RpZmljYXRpb24uc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1BvcHVwL1BvcHVwLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9SZXBvcnQvUmVwb3J0Vmlldy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFJlc3VsdHMuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1NlYXJjaC9TZWFyY2hWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TaWRlVmlldy9TaWRlVmlldy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9EZXRhaWxzVmlldy9EZXRhaWxzVmlldy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9GZWVkL0ZlZWRWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL01lbWJlcnMvTWVtYmVyc1ZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvTWVtYmVycy9WaWV3TWVtYmVyVmlldy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9WaWV3TWVldGluZ1ZpZXcvVmlld01lZXRpbmdWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL1ZpZXdQb3N0Vmlldy9WaWV3UG9zdFZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5L2pvaW5TdHVkeUdyb3VwVmlldy9Kb2luU3R1ZHlHcm91cFZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5L3N0dWR5R3JvdXBWaWV3L1N0dWR5R3JvdXBWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0FjY291bnRTZXR1cEZvcm0vQWNjb3VudFNldHVwRm9ybS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVBY2NvdW50Rm9ybS9DcmVhdGVBY2NvdW50Rm9ybS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVTdHVkeUdyb3VwRm9ybS9DcmVhdGVTdHVkeUdyb3VwRm9ybS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9GZWVkL1Bvc3Quc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvTG9hZGluZy9Mb2FkaW5nLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0xvZ2luRm9ybS9Mb2dpbkZvcm0uc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvUHJvZmlsZVBpY3R1cmUvUHJvZmlsZVBpY3R1cmUuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1NlYXJjaExpc3RpbmcvU2VhcmNoTGlzdGluZy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvTWVudS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL2NvcmUuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9oYXMtY29ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZpbGUtYmFzZTY0L2J1aWxkL2J1aWxkLm1pbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvQXBwLnNjc3M/NDE4NSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2VzbS92YWx1ZS1lcXVhbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JhdGNoLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVJlZHV4Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZURpc3BhdGNoLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9zdGF0ZS9jb25zdGFudHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvc3RhdGUvYWN0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1BvcHVwL1BvcHVwLnNjc3M/ZWU1NSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQ3JlYXRlU3R1ZHlHcm91cEZvcm0vQ3JlYXRlU3R1ZHlHcm91cEZvcm0uc2Nzcz81ZDBhIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9Gb3JtL0Zvcm0uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL2NvcmUuc2Nzcz9iM2RiIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9CdXR0b24vQnV0dG9uVHlwZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL0J1dHRvbi9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL0lucHV0RmllbGQvSW5wdXRGaWVsZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvTGFiZWwvTGFiZWwuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9Ub2dnbGVGaWVsZC9Ub2dnbGVGaWVsZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvVG9nZ2xlL1RvZ2dsZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvRHJvcGRvd24vRHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL0NvbG9yUGlja2VyL0NvbG9yUGlja2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVTdHVkeUdyb3VwRm9ybS9DcmVhdGVTdHVkeUdyb3VwRm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQHJzY2hlZHVsZS9jb3JlL2VzMjAxNS9tYWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AcnNjaGVkdWxlL2NvcmUvZXMyMDE1L2dlbmVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0Byc2NoZWR1bGUvY29yZS9lczIwMTUvcnVsZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0Byc2NoZWR1bGUvc3RhbmRhcmQtZGF0ZS1hZGFwdGVyL2VzMjAxNS9tYWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AcnNjaGVkdWxlL3N0YW5kYXJkLWRhdGUtYWRhcHRlci9lczIwMTUvc2V0dXAuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L0hlbHBlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5L0NyZWF0ZVN0dWR5R3JvdXBWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHkvam9pblN0dWR5R3JvdXBWaWV3L0pvaW5TdHVkeUdyb3VwVmlldy5zY3NzPzMxZTQiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9qb2luU3R1ZHlHcm91cFZpZXcvSm9pblN0dWR5R3JvdXBWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvSW5wdXQvSW5wdXRWaWV3LnNjc3M/ODQwNSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0lucHV0L0lucHV0Vmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0NvbmZpcm1hdGlvbkZvcm0vQ29uZmlybWF0aW9uRm9ybS5zY3NzPzc4OTEiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Db25maXJtYXRpb25Gb3JtL0NvbmZpcm1hdGlvbkZvcm0uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9WaWV3cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvRWRpdFN0dWR5R3JvdXAvRWRpdFN0dWR5R3JvdXBWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVNZWV0aW5nRm9ybS9DcmVhdGVNZWV0aW5nRm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvQ3JlYXRlTWVldGluZ1ZpZXcvQ3JlYXRlTWVldGluZ1ZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0NyZWF0ZVBvc3RGb3JtL0NyZWF0ZVBvc3RGb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9DcmVhdGVQb3N0Vmlldy9DcmVhdGVQb3N0Vmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvVmlld1Bvc3RWaWV3L1ZpZXdQb3N0Vmlldy5zY3NzPzdlZjIiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlLnNjc3M/YWQ2ZSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvUHJvZmlsZVBpY3R1cmUvUHJvZmlsZVBpY3R1cmUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0ZlZWQvUG9zdC5zY3NzP2UwZGIiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0ZlZWQvUG9zdC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvVmlld1Bvc3RWaWV3L1ZpZXdQb3N0Vmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1JlcG9ydC9SZXBvcnRUeXBlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvTG9hZGluZy9Mb2FkaW5nLnNjc3M/ODk2MSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NpcmN1bGFyUHJvZ3Jlc3MvY2lyY3VsYXJQcm9ncmVzc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2lyY3VsYXJQcm9ncmVzcy9DaXJjdWxhclByb2dyZXNzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L2V4dGVuZFN4UHJvcC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZUJveC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Cb3gvQm94LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Mb2FkaW5nL0xvYWRpbmcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL1ZpZXdNZWV0aW5nVmlldy9WaWV3TWVldGluZ1ZpZXcuc2Nzcz85YzA0Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9WaWV3TWVldGluZ1ZpZXcvVmlld01lZXRpbmdWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9NZW1iZXJzL1ZpZXdNZW1iZXJWaWV3LnNjc3M/YjNlZiIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvTWVtYmVycy9WaWV3TWVtYmVyVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1JlcG9ydC9SZXBvcnRWaWV3LnNjc3M/ODQ2ZiIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1JlcG9ydC9SZXBvcnRWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvUG9wdXAvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ob3RpZmljYXRpb24vTm90aWZpY2F0aW9uLnNjc3M/MzRhZCIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL05vdGlmaWNhdGlvbi9ub3RpZmljYXRpb25UeXBlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL05vdGlmaWNhdGlvbi9Ob3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9Ib21lL0hvbWUuc2Nzcz83ZmI4Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyLnNjc3M/N2IyYyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvVG9wQmFyL01lbnUuc2Nzcz9jY2I1Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvTWVudS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvVG9wQmFyL1RvcEJhci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL1BhZ2Uuc2Nzcz9lZDlhIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvUGFnZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvTG9naW5Gb3JtL0xvZ2luRm9ybS5zY3NzPzgyMmQiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0xvZ2luRm9ybS9Mb2dpbkZvcm0uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ib21lL0F1dGhWaWV3LnNjc3M/NzQzOSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0hvbWUvQXV0aFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ib21lL0xvZ2luVmlldy9Mb2dpblZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0NyZWF0ZUFjY291bnRGb3JtL0NyZWF0ZUFjY291bnRGb3JtLnNjc3M/YTk2NCIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQ3JlYXRlQWNjb3VudEZvcm0vQ3JlYXRlQWNjb3VudEZvcm0uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ib21lL0NyZWF0ZUFjY291bnRWaWV3L0NyZWF0ZUFjY291bnRWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvSG9tZS9WZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvblZpZXcvVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb25WaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9BY2NvdW50U2V0dXBGb3JtL0FjY291bnRTZXR1cEZvcm0uc2Nzcz80MTVlIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9BY2NvdW50U2V0dXBGb3JtL0FjY291bnRTZXR1cEZvcm0uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ib21lL0FjY291bnRTZXR1cFZpZXcvQWNjb3VudFNldHVwVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL0hvbWUvSG9tZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL1N0dWR5L1N0dWR5LnNjc3M/OTY1NSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5L3N0dWR5R3JvdXBWaWV3L1N0dWR5R3JvdXBWaWV3LnNjc3M/ZjQ0MSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5L3N0dWR5R3JvdXBWaWV3L1N0dWR5R3JvdXBWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHkvU3R1ZHkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9TZWFyY2gvU2VhcmNoLnNjc3M/Y2FhMiIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1NlYXJjaC9TZWFyY2hWaWV3LnNjc3M/YjkwZSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtLnNjc3M/ZWNmMSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1NsaWRlclVuc3R5bGVkL3NsaWRlclVuc3R5bGVkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1NsaWRlclVuc3R5bGVkL1NsaWRlclZhbHVlTGFiZWxVbnN0eWxlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL2lzSG9zdENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL2FwcGVuZE93bmVyU3RhdGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Zpc3VhbGx5SGlkZGVuLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvU2xpZGVyVW5zdHlsZWQvdXNlU2xpZGVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvU2xpZGVyVW5zdHlsZWQvU2xpZGVyVW5zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3Nob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TbGlkZXIvU2xpZGVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9SYW5nZS9UaW1lUmFuZ2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvT3V0bGluZWRJbnB1dC9Ob3RjaGVkT3V0bGluZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9PdXRsaW5lZElucHV0L291dGxpbmVkSW5wdXRDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvVGV4dGFyZWFBdXRvc2l6ZS9UZXh0YXJlYUF1dG9zaXplLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvR2xvYmFsU3R5bGVzL0dsb2JhbFN0eWxlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9HbG9iYWxTdHlsZXMvR2xvYmFsU3R5bGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0QmFzZS91dGlscy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dEJhc2UvaW5wdXRCYXNlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dEJhc2UvSW5wdXRCYXNlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXQvT3V0bGluZWRJbnB1dC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0L0xpc3RDb250ZXh0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvdG91Y2hSaXBwbGVDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvVG91Y2hSaXBwbGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9SaXBwbGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9idXR0b25CYXNlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL0J1dHRvbkJhc2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRGl2aWRlci9kaXZpZGVyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbUljb24vbGlzdEl0ZW1JY29uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbVRleHQvbGlzdEl0ZW1UZXh0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9NZW51SXRlbS9tZW51SXRlbUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudUl0ZW0vTWVudUl0ZW0uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3QvbGlzdENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdC9MaXN0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZXRTY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2dldFNjcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudUxpc3QvTWVudUxpc3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFwZXIvcGFwZXJDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BhcGVyL1BhcGVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3RyYW5zaXRpb25zL3V0aWxzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dyb3cvR3Jvdy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1BvcnRhbC9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9Nb2RhbFVuc3R5bGVkL01vZGFsTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1Vuc3RhYmxlX1RyYXBGb2N1cy9VbnN0YWJsZV9UcmFwRm9jdXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9Nb2RhbFVuc3R5bGVkL21vZGFsVW5zdHlsZWRDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvTW9kYWxVbnN0eWxlZC9Nb2RhbFVuc3R5bGVkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvQmFja2Ryb3BVbnN0eWxlZC9iYWNrZHJvcFVuc3R5bGVkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL0JhY2tkcm9wVW5zdHlsZWQvQmFja2Ryb3BVbnN0eWxlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9GYWRlL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQmFja2Ryb3AvQmFja2Ryb3AuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTW9kYWwvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUG9wb3Zlci9wb3BvdmVyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Qb3BvdmVyL1BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudS9tZW51Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9NZW51L01lbnUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTmF0aXZlU2VsZWN0L25hdGl2ZVNlbGVjdENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NlbGVjdC9zZWxlY3RDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NlbGVjdC9TZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dC9pbnB1dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRmlsbGVkSW5wdXQvZmlsbGVkSW5wdXRDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZpbGxlZElucHV0L0ZpbGxlZElucHV0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NlbGVjdC9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaGlwL2NoaXBDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NoaXAvQ2hpcC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvRHJvcGRvd24vTXVsdGlwbGVEcm9wZG93bi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2lkZVZpZXcvU2lkZVZpZXcuc2Nzcz8xNDUyIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2lkZVZpZXcvU2lkZVZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TZWFyY2gvU2VhcmNoVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1NlYXJjaC9TZWFyY2hSZXN1bHRzLnNjc3M/NDAyOSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoTGlzdGluZy9TZWFyY2hMaXN0aW5nLnNjc3M/OWI2ZSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoTGlzdGluZy9TZWFyY2hMaXN0aW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFJlc3VsdFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9TZWFyY2gvU2VhcmNoLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHlHcm91cC9TdHVkeUdyb3VwLnNjc3M/MGY3MyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvTWVtYmVycy9NZW1iZXJzVmlldy5zY3NzP2E2OTgiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL01lbWJlcnMvTWVtYmVyc1ZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL0RldGFpbHNWaWV3L0RldGFpbHNWaWV3LnNjc3M/YWViZiIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvRGV0YWlsc1ZpZXcvRGV0YWlsc1ZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL0ZlZWQvRmVlZFZpZXcuc2Nzcz8wNTI3Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9GZWVkL0ZlZWRWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHlHcm91cC9TdHVkeUdyb3VwLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvQWNjb3VudC9BY2NvdW50LnNjc3M/NmRjYSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL0FjY291bnQvQWNjb3VudC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL01lc3NhZ2UvTWVzc2FnZS5zY3NzP2IzZmEiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL2dsb2JhbFRoaXMuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy94bWxodHRwcmVxdWVzdC5icm93c2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS91dGlsLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2VzbS9jb21tb25zLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2VzbS9lbmNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQHNvY2tldC5pby9iYXNlNjQtYXJyYXlidWZmZXIvZGlzdC9iYXNlNjQtYXJyYXlidWZmZXIuZXM1LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2VzbS9kZWNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9idWlsZC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS90cmFuc3BvcnRzL3dlYnNvY2tldC1jb25zdHJ1Y3Rvci5icm93c2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS90cmFuc3BvcnRzL3dlYnNvY2tldC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vc29ja2V0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9idWlsZC9lc20vaXMtYmluYXJ5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2J1aWxkL2VzbS9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYnVpbGQvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9vbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vc29ja2V0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9tYW5hZ2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vdXJsLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvTWVzc2FnZS9Db252ZXJzYXRpb25WaWV3LnNjc3M/ZGRjMyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL01lc3NhZ2UvQ29udmVyc2F0aW9uVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL01lc3NhZ2UvQ2hhdHNWaWV3LnNjc3M/ZDJlOSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL01lc3NhZ2UvQ2hhdHNWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvTWVzc2FnZS9NZXNzYWdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvQXBwLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvc3RhdGUvcmVkdWNlcnMvYXV0aFJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9zdGF0ZS9yZWR1Y2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL3JlZHVjZXJzL3BvcHVwUmVkdWNlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL3JlZHVjZXJzL3N0dWR5R3JvdXBzUmVkdWNlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL3JlZHVjZXJzL25vdGlmaWNhdGlvblJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFic1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgdmFyIGZyb20gPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCB2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaCAodmFsdWUsIGxlbmd0aCkge1xuXHRyZXR1cm4gKCgoKCgoKGxlbmd0aCA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMCkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAxKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDIpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS50cmltKClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7UmVnRXhwfSBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtzdHJpbmc/fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2ggKHZhbHVlLCBwYXR0ZXJuKSB7XG5cdHJldHVybiAodmFsdWUgPSBwYXR0ZXJuLmV4ZWModmFsdWUpKSA/IHZhbHVlWzBdIDogdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApfSBwYXR0ZXJuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2UgKHZhbHVlLCBwYXR0ZXJuLCByZXBsYWNlbWVudCkge1xuXHRyZXR1cm4gdmFsdWUucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluZGV4b2YgKHZhbHVlLCBzZWFyY2gpIHtcblx0cmV0dXJuIHZhbHVlLmluZGV4T2Yoc2VhcmNoKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyYXQgKHZhbHVlLCBpbmRleCkge1xuXHRyZXR1cm4gdmFsdWUuY2hhckNvZGVBdChpbmRleCkgfCAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnN0ciAodmFsdWUsIGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHZhbHVlLnNsaWNlKGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJsZW4gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueVtdfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2l6ZW9mICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kICh2YWx1ZSwgYXJyYXkpIHtcblx0cmV0dXJuIGFycmF5LnB1c2godmFsdWUpLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFycmF5XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZSAoYXJyYXksIGNhbGxiYWNrKSB7XG5cdHJldHVybiBhcnJheS5tYXAoY2FsbGJhY2spLmpvaW4oJycpXG59XG4iLCJpbXBvcnQge2Zyb20sIHRyaW0sIGNoYXJhdCwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgYXNzaWdufSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbmV4cG9ydCB2YXIgbGluZSA9IDFcbmV4cG9ydCB2YXIgY29sdW1uID0gMVxuZXhwb3J0IHZhciBsZW5ndGggPSAwXG5leHBvcnQgdmFyIHBvc2l0aW9uID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXIgPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlcnMgPSAnJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSByb290XG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW10gfCBzdHJpbmd9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdFtdIHwgc3RyaW5nfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9kZSAodmFsdWUsIHJvb3QsIHBhcmVudCwgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0cmV0dXJuIHt2YWx1ZTogdmFsdWUsIHJvb3Q6IHJvb3QsIHBhcmVudDogcGFyZW50LCB0eXBlOiB0eXBlLCBwcm9wczogcHJvcHMsIGNoaWxkcmVuOiBjaGlsZHJlbiwgbGluZTogbGluZSwgY29sdW1uOiBjb2x1bW4sIGxlbmd0aDogbGVuZ3RoLCByZXR1cm46ICcnfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkgKHJvb3QsIHByb3BzKSB7XG5cdHJldHVybiBhc3NpZ24obm9kZSgnJywgbnVsbCwgbnVsbCwgJycsIG51bGwsIG51bGwsIDApLCByb290LCB7bGVuZ3RoOiAtcm9vdC5sZW5ndGh9LCBwcm9wcylcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyICgpIHtcblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXYgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA+IDAgPyBjaGFyYXQoY2hhcmFjdGVycywgLS1wb3NpdGlvbikgOiAwXG5cblx0aWYgKGNvbHVtbi0tLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUtLVxuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXh0ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPCBsZW5ndGggPyBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24rKykgOiAwXG5cblx0aWYgKGNvbHVtbisrLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUrK1xuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZWVrICgpIHtcblx0cmV0dXJuIGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbilcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXJldCAoKSB7XG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xpY2UgKGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHN1YnN0cihjaGFyYWN0ZXJzLCBiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbiAodHlwZSkge1xuXHRzd2l0Y2ggKHR5cGUpIHtcblx0XHQvLyBcXDAgXFx0IFxcbiBcXHIgXFxzIHdoaXRlc3BhY2UgdG9rZW5cblx0XHRjYXNlIDA6IGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdHJldHVybiA1XG5cdFx0Ly8gISArICwgLyA+IEAgfiBpc29sYXRlIHRva2VuXG5cdFx0Y2FzZSAzMzogY2FzZSA0MzogY2FzZSA0NDogY2FzZSA0NzogY2FzZSA2MjogY2FzZSA2NDogY2FzZSAxMjY6XG5cdFx0Ly8gOyB7IH0gYnJlYWtwb2ludCB0b2tlblxuXHRcdGNhc2UgNTk6IGNhc2UgMTIzOiBjYXNlIDEyNTpcblx0XHRcdHJldHVybiA0XG5cdFx0Ly8gOiBhY2NvbXBhbmllZCB0b2tlblxuXHRcdGNhc2UgNTg6XG5cdFx0XHRyZXR1cm4gM1xuXHRcdC8vIFwiICcgKCBbIG9wZW5pbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgNDA6IGNhc2UgOTE6XG5cdFx0XHRyZXR1cm4gMlxuXHRcdC8vICkgXSBjbG9zaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDQxOiBjYXNlIDkzOlxuXHRcdFx0cmV0dXJuIDFcblx0fVxuXG5cdHJldHVybiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gbGluZSA9IGNvbHVtbiA9IDEsIGxlbmd0aCA9IHN0cmxlbihjaGFyYWN0ZXJzID0gdmFsdWUpLCBwb3NpdGlvbiA9IDAsIFtdXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gY2hhcmFjdGVycyA9ICcnLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ICh0eXBlKSB7XG5cdHJldHVybiB0cmltKHNsaWNlKHBvc2l0aW9uIC0gMSwgZGVsaW1pdGVyKHR5cGUgPT09IDkxID8gdHlwZSArIDIgOiB0eXBlID09PSA0MCA/IHR5cGUgKyAxIDogdHlwZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZSAodmFsdWUpIHtcblx0cmV0dXJuIGRlYWxsb2ModG9rZW5pemVyKGFsbG9jKHZhbHVlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoaXRlc3BhY2UgKHR5cGUpIHtcblx0d2hpbGUgKGNoYXJhY3RlciA9IHBlZWsoKSlcblx0XHRpZiAoY2hhcmFjdGVyIDwgMzMpXG5cdFx0XHRuZXh0KClcblx0XHRlbHNlXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiB0b2tlbih0eXBlKSA+IDIgfHwgdG9rZW4oY2hhcmFjdGVyKSA+IDMgPyAnJyA6ICcgJ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplciAoY2hpbGRyZW4pIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcblx0XHRcdGNhc2UgMDogYXBwZW5kKGlkZW50aWZpZXIocG9zaXRpb24gLSAxKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6IGFwcGVuZChkZWxpbWl0KGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0ZGVmYXVsdDogYXBwZW5kKGZyb20oY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0fVxuXG5cdHJldHVybiBjaGlsZHJlblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGluZyAoaW5kZXgsIGNvdW50KSB7XG5cdHdoaWxlICgtLWNvdW50ICYmIG5leHQoKSlcblx0XHQvLyBub3QgMC05IEEtRiBhLWZcblx0XHRpZiAoY2hhcmFjdGVyIDwgNDggfHwgY2hhcmFjdGVyID4gMTAyIHx8IChjaGFyYWN0ZXIgPiA1NyAmJiBjaGFyYWN0ZXIgPCA2NSkgfHwgKGNoYXJhY3RlciA+IDcwICYmIGNoYXJhY3RlciA8IDk3KSlcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBjYXJldCgpICsgKGNvdW50IDwgNiAmJiBwZWVrKCkgPT0gMzIgJiYgbmV4dCgpID09IDMyKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdGVyICh0eXBlKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoIChjaGFyYWN0ZXIpIHtcblx0XHRcdC8vIF0gKSBcIiAnXG5cdFx0XHRjYXNlIHR5cGU6XG5cdFx0XHRcdHJldHVybiBwb3NpdGlvblxuXHRcdFx0Ly8gXCIgJ1xuXHRcdFx0Y2FzZSAzNDogY2FzZSAzOTpcblx0XHRcdFx0aWYgKHR5cGUgIT09IDM0ICYmIHR5cGUgIT09IDM5KVxuXHRcdFx0XHRcdGRlbGltaXRlcihjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAodHlwZSA9PT0gNDEpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKHR5cGUpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXFxuXHRcdFx0Y2FzZSA5Mjpcblx0XHRcdFx0bmV4dCgpXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnRlciAodHlwZSwgaW5kZXgpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHQvLyAvL1xuXHRcdGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0NyArIDEwKVxuXHRcdFx0YnJlYWtcblx0XHQvLyAvKlxuXHRcdGVsc2UgaWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQyICsgNDIgJiYgcGVlaygpID09PSA0Nylcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuICcvKicgKyBzbGljZShpbmRleCwgcG9zaXRpb24gLSAxKSArICcqJyArIGZyb20odHlwZSA9PT0gNDcgPyB0eXBlIDogbmV4dCgpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpZmllciAoaW5kZXgpIHtcblx0d2hpbGUgKCF0b2tlbihwZWVrKCkpKVxuXHRcdG5leHQoKVxuXG5cdHJldHVybiBzbGljZShpbmRleCwgcG9zaXRpb24pXG59XG4iLCJleHBvcnQgdmFyIE1TID0gJy1tcy0nXG5leHBvcnQgdmFyIE1PWiA9ICctbW96LSdcbmV4cG9ydCB2YXIgV0VCS0lUID0gJy13ZWJraXQtJ1xuXG5leHBvcnQgdmFyIENPTU1FTlQgPSAnY29tbSdcbmV4cG9ydCB2YXIgUlVMRVNFVCA9ICdydWxlJ1xuZXhwb3J0IHZhciBERUNMQVJBVElPTiA9ICdkZWNsJ1xuXG5leHBvcnQgdmFyIFBBR0UgPSAnQHBhZ2UnXG5leHBvcnQgdmFyIE1FRElBID0gJ0BtZWRpYSdcbmV4cG9ydCB2YXIgSU1QT1JUID0gJ0BpbXBvcnQnXG5leHBvcnQgdmFyIENIQVJTRVQgPSAnQGNoYXJzZXQnXG5leHBvcnQgdmFyIFZJRVdQT1JUID0gJ0B2aWV3cG9ydCdcbmV4cG9ydCB2YXIgU1VQUE9SVFMgPSAnQHN1cHBvcnRzJ1xuZXhwb3J0IHZhciBET0NVTUVOVCA9ICdAZG9jdW1lbnQnXG5leHBvcnQgdmFyIE5BTUVTUEFDRSA9ICdAbmFtZXNwYWNlJ1xuZXhwb3J0IHZhciBLRVlGUkFNRVMgPSAnQGtleWZyYW1lcydcbmV4cG9ydCB2YXIgRk9OVF9GQUNFID0gJ0Bmb250LWZhY2UnXG5leHBvcnQgdmFyIENPVU5URVJfU1RZTEUgPSAnQGNvdW50ZXItc3R5bGUnXG5leHBvcnQgdmFyIEZPTlRfRkVBVFVSRV9WQUxVRVMgPSAnQGZvbnQtZmVhdHVyZS12YWx1ZXMnXG4iLCJpbXBvcnQge0lNUE9SVCwgQ09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT04sIEtFWUZSQU1FU30gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHtzdHJsZW4sIHNpemVvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplIChjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0dmFyIG91dHB1dCA9ICcnXG5cdHZhciBsZW5ndGggPSBzaXplb2YoY2hpbGRyZW4pXG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRvdXRwdXQgKz0gY2FsbGJhY2soY2hpbGRyZW5baV0sIGksIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRyZXR1cm4gb3V0cHV0XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBERUNMQVJBVElPTjogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC5yZXR1cm4gfHwgZWxlbWVudC52YWx1ZVxuXHRcdGNhc2UgQ09NTUVOVDogcmV0dXJuICcnXG5cdFx0Y2FzZSBLRVlGUkFNRVM6IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spICsgJ30nXG5cdFx0Y2FzZSBSVUxFU0VUOiBlbGVtZW50LnZhbHVlID0gZWxlbWVudC5wcm9wcy5qb2luKCcsJylcblx0fVxuXG5cdHJldHVybiBzdHJsZW4oY2hpbGRyZW4gPSBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spKSA/IGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIGNoaWxkcmVuICsgJ30nIDogJydcbn1cbiIsImltcG9ydCB7TVMsIE1PWiwgV0VCS0lUfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge2hhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCByZXBsYWNlfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXggKHZhbHVlLCBsZW5ndGgpIHtcblx0c3dpdGNoIChoYXNoKHZhbHVlLCBsZW5ndGgpKSB7XG5cdFx0Ly8gY29sb3ItYWRqdXN0XG5cdFx0Y2FzZSA1MTAzOlxuXHRcdFx0cmV0dXJuIFdFQktJVCArICdwcmludC0nICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIGFuaW1hdGlvbiwgYW5pbWF0aW9uLShkZWxheXxkaXJlY3Rpb258ZHVyYXRpb258ZmlsbC1tb2RlfGl0ZXJhdGlvbi1jb3VudHxuYW1lfHBsYXktc3RhdGV8dGltaW5nLWZ1bmN0aW9uKVxuXHRcdGNhc2UgNTczNzogY2FzZSA0MjAxOiBjYXNlIDMxNzc6IGNhc2UgMzQzMzogY2FzZSAxNjQxOiBjYXNlIDQ0NTc6IGNhc2UgMjkyMTpcblx0XHQvLyB0ZXh0LWRlY29yYXRpb24sIGZpbHRlciwgY2xpcC1wYXRoLCBiYWNrZmFjZS12aXNpYmlsaXR5LCBjb2x1bW4sIGJveC1kZWNvcmF0aW9uLWJyZWFrXG5cdFx0Y2FzZSA1NTcyOiBjYXNlIDYzNTY6IGNhc2UgNTg0NDogY2FzZSAzMTkxOiBjYXNlIDY2NDU6IGNhc2UgMzAwNTpcblx0XHQvLyBtYXNrLCBtYXNrLWltYWdlLCBtYXNrLShtb2RlfGNsaXB8c2l6ZSksIG1hc2stKHJlcGVhdHxvcmlnaW4pLCBtYXNrLXBvc2l0aW9uLCBtYXNrLWNvbXBvc2l0ZSxcblx0XHRjYXNlIDYzOTE6IGNhc2UgNTg3OTogY2FzZSA1NjIzOiBjYXNlIDYxMzU6IGNhc2UgNDU5OTogY2FzZSA0ODU1OlxuXHRcdC8vIGJhY2tncm91bmQtY2xpcCwgY29sdW1ucywgY29sdW1uLShjb3VudHxmaWxsfGdhcHxydWxlfHJ1bGUtY29sb3J8cnVsZS1zdHlsZXxydWxlLXdpZHRofHNwYW58d2lkdGgpXG5cdFx0Y2FzZSA0MjE1OiBjYXNlIDYzODk6IGNhc2UgNTEwOTogY2FzZSA1MzY1OiBjYXNlIDU2MjE6IGNhc2UgMzgyOTpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gYXBwZWFyYW5jZSwgdXNlci1zZWxlY3QsIHRyYW5zZm9ybSwgaHlwaGVucywgdGV4dC1zaXplLWFkanVzdFxuXHRcdGNhc2UgNTM0OTogY2FzZSA0MjQ2OiBjYXNlIDQ4MTA6IGNhc2UgNjk2ODogY2FzZSAyNzU2OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWVcblx0XHQvLyBmbGV4LCBmbGV4LWRpcmVjdGlvblxuXHRcdGNhc2UgNjgyODogY2FzZSA0MjY4OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gb3JkZXJcblx0XHRjYXNlIDYxNjU6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LScgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gYWxpZ24taXRlbXNcblx0XHRjYXNlIDUxODc6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyByZXBsYWNlKHZhbHVlLCAvKFxcdyspLisoOlteXSspLywgV0VCS0lUICsgJ2JveC0kMSQyJyArIE1TICsgJ2ZsZXgtJDEkMicpICsgdmFsdWVcblx0XHQvLyBhbGlnbi1zZWxmXG5cdFx0Y2FzZSA1NDQzOlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1pdGVtLScgKyByZXBsYWNlKHZhbHVlLCAvZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZVxuXHRcdC8vIGFsaWduLWNvbnRlbnRcblx0XHRjYXNlIDQ2NzU6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWxpbmUtcGFjaycgKyByZXBsYWNlKHZhbHVlLCAvYWxpZ24tY29udGVudHxmbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlXG5cdFx0Ly8gZmxleC1zaHJpbmtcblx0XHRjYXNlIDU1NDg6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIHZhbHVlXG5cdFx0Ly8gZmxleC1iYXNpc1xuXHRcdGNhc2UgNTI5Mjpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyB2YWx1ZVxuXHRcdC8vIGZsZXgtZ3Jvd1xuXHRcdGNhc2UgNjA2MDpcblx0XHRcdHJldHVybiBXRUJLSVQgKyAnYm94LScgKyByZXBsYWNlKHZhbHVlLCAnLWdyb3cnLCAnJykgKyBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2dyb3cnLCAncG9zaXRpdmUnKSArIHZhbHVlXG5cdFx0Ly8gdHJhbnNpdGlvblxuXHRcdGNhc2UgNDU1NDpcblx0XHRcdHJldHVybiBXRUJLSVQgKyByZXBsYWNlKHZhbHVlLCAvKFteLV0pKHRyYW5zZm9ybSkvZywgJyQxJyArIFdFQktJVCArICckMicpICsgdmFsdWVcblx0XHQvLyBjdXJzb3Jcblx0XHRjYXNlIDYxODc6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZShyZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oem9vbS18Z3JhYikvLCBXRUJLSVQgKyAnJDEnKSwgLyhpbWFnZS1zZXQpLywgV0VCS0lUICsgJyQxJyksIHZhbHVlLCAnJykgKyB2YWx1ZVxuXHRcdC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2Vcblx0XHRjYXNlIDU0OTU6IGNhc2UgMzk1OTpcblx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAvKGltYWdlLXNldFxcKFteXSopLywgV0VCS0lUICsgJyQxJyArICckYCQxJylcblx0XHQvLyBqdXN0aWZ5LWNvbnRlbnRcblx0XHRjYXNlIDQ5Njg6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZShyZXBsYWNlKHZhbHVlLCAvKC4rOikoZmxleC0pPyguKikvLCBXRUJLSVQgKyAnYm94LXBhY2s6JDMnICsgTVMgKyAnZmxleC1wYWNrOiQzJyksIC9zListYlteO10rLywgJ2p1c3RpZnknKSArIFdFQktJVCArIHZhbHVlICsgdmFsdWVcblx0XHQvLyAobWFyZ2lufHBhZGRpbmcpLWlubGluZS0oc3RhcnR8ZW5kKVxuXHRcdGNhc2UgNDA5NTogY2FzZSAzNTgzOiBjYXNlIDQwNjg6IGNhc2UgMjUzMjpcblx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rKS1pbmxpbmUoLispLywgV0VCS0lUICsgJyQxJDInKSArIHZhbHVlXG5cdFx0Ly8gKG1pbnxtYXgpPyh3aWR0aHxoZWlnaHR8aW5saW5lLXNpemV8YmxvY2stc2l6ZSlcblx0XHRjYXNlIDgxMTY6IGNhc2UgNzA1OTogY2FzZSA1NzUzOiBjYXNlIDU1MzU6XG5cdFx0Y2FzZSA1NDQ1OiBjYXNlIDU3MDE6IGNhc2UgNDkzMzogY2FzZSA0Njc3OlxuXHRcdGNhc2UgNTUzMzogY2FzZSA1Nzg5OiBjYXNlIDUwMjE6IGNhc2UgNDc2NTpcblx0XHRcdC8vIHN0cmV0Y2gsIG1heC1jb250ZW50LCBtaW4tY29udGVudCwgZmlsbC1hdmFpbGFibGVcblx0XHRcdGlmIChzdHJsZW4odmFsdWUpIC0gMSAtIGxlbmd0aCA+IDYpXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSkge1xuXHRcdFx0XHRcdC8vIChtKWF4LWNvbnRlbnQsIChtKWluLWNvbnRlbnRcblx0XHRcdFx0XHRjYXNlIDEwOTpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDQpICE9PSA0NSlcblx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAoZilpbGwtYXZhaWxhYmxlLCAoZilpdC1jb250ZW50XG5cdFx0XHRcdFx0Y2FzZSAxMDI6XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKC4rKS0oW15dKykvLCAnJDEnICsgV0VCS0lUICsgJyQyLSQzJyArICckMScgKyBNT1ogKyAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAzKSA9PSAxMDggPyAnJDMnIDogJyQyLSQzJykpICsgdmFsdWVcblx0XHRcdFx0XHQvLyAocyl0cmV0Y2hcblx0XHRcdFx0XHRjYXNlIDExNTpcblx0XHRcdFx0XHRcdHJldHVybiB+aW5kZXhvZih2YWx1ZSwgJ3N0cmV0Y2gnKSA/IHByZWZpeChyZXBsYWNlKHZhbHVlLCAnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBsZW5ndGgpICsgdmFsdWUgOiB2YWx1ZVxuXHRcdFx0XHR9XG5cdFx0XHRicmVha1xuXHRcdC8vIHBvc2l0aW9uOiBzdGlja3lcblx0XHRjYXNlIDQ5NDk6XG5cdFx0XHQvLyAocyl0aWNreT9cblx0XHRcdGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpICE9PSAxMTUpXG5cdFx0XHRcdGJyZWFrXG5cdFx0Ly8gZGlzcGxheTogKGZsZXh8aW5saW5lLWZsZXgpXG5cdFx0Y2FzZSA2NDQ0OlxuXHRcdFx0c3dpdGNoIChjaGFyYXQodmFsdWUsIHN0cmxlbih2YWx1ZSkgLSAzIC0gKH5pbmRleG9mKHZhbHVlLCAnIWltcG9ydGFudCcpICYmIDEwKSkpIHtcblx0XHRcdFx0Ly8gc3RpYyhrKXlcblx0XHRcdFx0Y2FzZSAxMDc6XG5cdFx0XHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsICc6JywgJzonICsgV0VCS0lUKSArIHZhbHVlXG5cdFx0XHRcdC8vIChpbmxpbmUtKT9mbChlKXhcblx0XHRcdFx0Y2FzZSAxMDE6XG5cdFx0XHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLis6KShbXjshXSspKDt8IS4rKT8vLCAnJDEnICsgV0VCS0lUICsgKGNoYXJhdCh2YWx1ZSwgMTQpID09PSA0NSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gkMycgKyAnJDEnICsgV0VCS0lUICsgJyQyJDMnICsgJyQxJyArIE1TICsgJyQyYm94JDMnKSArIHZhbHVlXG5cdFx0XHR9XG5cdFx0XHRicmVha1xuXHRcdC8vIHdyaXRpbmctbW9kZVxuXHRcdGNhc2UgNTkzNjpcblx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxMSkpIHtcblx0XHRcdFx0Ly8gdmVydGljYWwtbChyKVxuXHRcdFx0XHRjYXNlIDExNDpcblx0XHRcdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiJykgKyB2YWx1ZVxuXHRcdFx0XHQvLyB2ZXJ0aWNhbC1yKGwpXG5cdFx0XHRcdGNhc2UgMTA4OlxuXHRcdFx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGItcmwnKSArIHZhbHVlXG5cdFx0XHRcdC8vIGhvcml6b250YWwoLSl0YlxuXHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAnbHInKSArIHZhbHVlXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZVxuXHR9XG5cblx0cmV0dXJuIHZhbHVlXG59XG4iLCJpbXBvcnQge0NPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge2FicywgdHJpbSwgZnJvbSwgc2l6ZW9mLCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCByZXBsYWNlLCBpbmRleG9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge25vZGUsIGNoYXIsIHByZXYsIG5leHQsIHBlZWssIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmFjdGVycy5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50KSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSAnLydcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8ge1xuXHRcdFx0Y2FzZSAxMjMgKiB2YXJpYWJsZTpcblx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gc3RybGVuKGNoYXJhY3RlcnMpICogYW1wZXJzYW5kXG5cdFx0XHQvLyB9IDsgXFwwXG5cdFx0XHRjYXNlIDEyNSAqIHZhcmlhYmxlOiBjYXNlIDU5OiBjYXNlIDA6XG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHRcdFx0Ly8gXFwwIH1cblx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgMTI1OiBzY2FubmluZyA9IDBcblx0XHRcdFx0XHQvLyA7XG5cdFx0XHRcdFx0Y2FzZSA1OSArIG9mZnNldDpcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSA+IDAgJiYgKHN0cmxlbihjaGFyYWN0ZXJzKSAtIGxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChwcm9wZXJ0eSA+IDMyID8gZGVjbGFyYXRpb24oY2hhcmFjdGVycyArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAxKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChhdHJ1bGUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGQgbSBzXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDEwMDogY2FzZSAxMDk6IGNhc2UgMTE1OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZSh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJ1bGUgJiYgYXBwZW5kKHJ1bGVzZXQodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCAwLCAwLCBydWxlcywgcG9pbnRzLCB0eXBlLCBydWxlcywgcHJvcHMgPSBbXSwgbGVuZ3RoKSwgY2hpbGRyZW4pLCBydWxlcywgY2hpbGRyZW4sIGxlbmd0aCwgcG9pbnRzLCBydWxlID8gcHJvcHMgOiBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIFsnJ10sIGNoaWxkcmVuLCAwLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGluZGV4ID0gb2Zmc2V0ID0gcHJvcGVydHkgPSAwLCB2YXJpYWJsZSA9IGFtcGVyc2FuZCA9IDEsIHR5cGUgPSBjaGFyYWN0ZXJzID0gJycsIGxlbmd0aCA9IHBzZXVkb1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gOlxuXHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0bGVuZ3RoID0gMSArIHN0cmxlbihjaGFyYWN0ZXJzKSwgcHJvcGVydHkgPSBwcmV2aW91c1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYgKHZhcmlhYmxlIDwgMSlcblx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09IDEyMylcblx0XHRcdFx0XHRcdC0tdmFyaWFibGVcblx0XHRcdFx0XHRlbHNlIGlmIChjaGFyYWN0ZXIgPT0gMTI1ICYmIHZhcmlhYmxlKysgPT0gMCAmJiBwcmV2KCkgPT0gMTI1KVxuXHRcdFx0XHRcdFx0Y29udGludWVcblxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3RlcnMgKz0gZnJvbShjaGFyYWN0ZXIpLCBjaGFyYWN0ZXIgKiB2YXJpYWJsZSkge1xuXHRcdFx0XHRcdC8vICZcblx0XHRcdFx0XHRjYXNlIDM4OlxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gb2Zmc2V0ID4gMCA/IDEgOiAoY2hhcmFjdGVycyArPSAnXFxmJywgLTEpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vICxcblx0XHRcdFx0XHRjYXNlIDQ0OlxuXHRcdFx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gKHN0cmxlbihjaGFyYWN0ZXJzKSAtIDEpICogYW1wZXJzYW5kLCBhbXBlcnNhbmQgPSAxXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEBcblx0XHRcdFx0XHRjYXNlIDY0OlxuXHRcdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdFx0aWYgKHBlZWsoKSA9PT0gNDUpXG5cdFx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChuZXh0KCkpXG5cblx0XHRcdFx0XHRcdGF0cnVsZSA9IHBlZWsoKSwgb2Zmc2V0ID0gbGVuZ3RoID0gc3RybGVuKHR5cGUgPSBjaGFyYWN0ZXJzICs9IGlkZW50aWZpZXIoY2FyZXQoKSkpLCBjaGFyYWN0ZXIrK1xuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0Y2FzZSA0NTpcblx0XHRcdFx0XHRcdGlmIChwcmV2aW91cyA9PT0gNDUgJiYgc3RybGVuKGNoYXJhY3RlcnMpID09IDIpXG5cdFx0XHRcdFx0XHRcdHZhcmlhYmxlID0gMFxuXHRcdFx0XHR9XG5cdFx0fVxuXG5cdHJldHVybiBydWxlc2V0c1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwcm9wc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzZXQgKHZhbHVlLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKSB7XG5cdHZhciBwb3N0ID0gb2Zmc2V0IC0gMVxuXHR2YXIgcnVsZSA9IG9mZnNldCA9PT0gMCA/IHJ1bGVzIDogWycnXVxuXHR2YXIgc2l6ZSA9IHNpemVvZihydWxlKVxuXG5cdGZvciAodmFyIGkgPSAwLCBqID0gMCwgayA9IDA7IGkgPCBpbmRleDsgKytpKVxuXHRcdGZvciAodmFyIHggPSAwLCB5ID0gc3Vic3RyKHZhbHVlLCBwb3N0ICsgMSwgcG9zdCA9IGFicyhqID0gcG9pbnRzW2ldKSksIHogPSB2YWx1ZTsgeCA8IHNpemU7ICsreClcblx0XHRcdGlmICh6ID0gdHJpbShqID4gMCA/IHJ1bGVbeF0gKyAnICcgKyB5IDogcmVwbGFjZSh5LCAvJlxcZi9nLCBydWxlW3hdKSkpXG5cdFx0XHRcdHByb3BzW2srK10gPSB6XG5cblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgb2Zmc2V0ID09PSAwID8gUlVMRVNFVCA6IHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50ICh2YWx1ZSwgcm9vdCwgcGFyZW50KSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIENPTU1FTlQsIGZyb20oY2hhcigpKSwgc3Vic3RyKHZhbHVlLCAyLCAtMiksIDApXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY2xhcmF0aW9uICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBsZW5ndGgpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgREVDTEFSQVRJT04sIHN1YnN0cih2YWx1ZSwgMCwgbGVuZ3RoKSwgc3Vic3RyKHZhbHVlLCBsZW5ndGggKyAxLCAtMSksIGxlbmd0aClcbn1cbiIsImltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5pbXBvcnQgeyBkZWFsbG9jLCBhbGxvYywgbmV4dCwgdG9rZW4sIGZyb20sIHBlZWssIGRlbGltaXQsIHNsaWNlLCBwb3NpdGlvbiwgc3RyaW5naWZ5LCBDT01NRU5ULCBydWxlc2hlZXQsIG1pZGRsZXdhcmUsIHByZWZpeGVyLCBzZXJpYWxpemUsIGNvbXBpbGUgfSBmcm9tICdzdHlsaXMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIGxhc3QgPSBmdW5jdGlvbiBsYXN0KGFycikge1xuICByZXR1cm4gYXJyLmxlbmd0aCA/IGFyclthcnIubGVuZ3RoIC0gMV0gOiBudWxsO1xufTsgLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RoeXN1bHRhbi9zdHlsaXMuanMvYmxvYi9lNjg0M2MzNzNlYmNiYmZhZGUyNWViY2MyM2Y1NDBlZDg1MDhkYTBhL3NyYy9Ub2tlbml6ZXIuanMjTDIzOS1MMjQ0XG5cblxudmFyIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyA9IGZ1bmN0aW9uIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhiZWdpbiwgcG9pbnRzLCBpbmRleCkge1xuICB2YXIgcHJldmlvdXMgPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gMDtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHByZXZpb3VzID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHBlZWsoKTsgLy8gJlxcZlxuXG4gICAgaWYgKHByZXZpb3VzID09PSAzOCAmJiBjaGFyYWN0ZXIgPT09IDEyKSB7XG4gICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbmV4dCgpO1xuICB9XG5cbiAgcmV0dXJuIHNsaWNlKGJlZ2luLCBwb3NpdGlvbik7XG59O1xuXG52YXIgdG9SdWxlcyA9IGZ1bmN0aW9uIHRvUnVsZXMocGFyc2VkLCBwb2ludHMpIHtcbiAgLy8gcHJldGVuZCB3ZSd2ZSBzdGFydGVkIHdpdGggYSBjb21tYVxuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGNoYXJhY3RlciA9IDQ0O1xuXG4gIGRvIHtcbiAgICBzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgLy8gJlxcZlxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSAzOCAmJiBwZWVrKCkgPT09IDEyKSB7XG4gICAgICAgICAgLy8gdGhpcyBpcyBub3QgMTAwJSBjb3JyZWN0LCB3ZSBkb24ndCBhY2NvdW50IGZvciBsaXRlcmFsIHNlcXVlbmNlcyBoZXJlIC0gbGlrZSBmb3IgZXhhbXBsZSBxdW90ZWQgc3RyaW5nc1xuICAgICAgICAgIC8vIHN0eWxpcyBpbnNlcnRzIFxcZiBhZnRlciAmIHRvIGtub3cgd2hlbiAmIHdoZXJlIGl0IHNob3VsZCByZXBsYWNlIHRoaXMgc2VxdWVuY2Ugd2l0aCB0aGUgY29udGV4dCBzZWxlY3RvclxuICAgICAgICAgIC8vIGFuZCB3aGVuIGl0IHNob3VsZCBqdXN0IGNvbmNhdGVuYXRlIHRoZSBvdXRlciBhbmQgaW5uZXIgc2VsZWN0b3JzXG4gICAgICAgICAgLy8gaXQncyB2ZXJ5IHVubGlrZWx5IGZvciB0aGlzIHNlcXVlbmNlIHRvIGFjdHVhbGx5IGFwcGVhciBpbiBhIGRpZmZlcmVudCBjb250ZXh0LCBzbyB3ZSBqdXN0IGxldmVyYWdlIHRoaXMgZmFjdCBoZXJlXG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhwb3NpdGlvbiAtIDEsIHBvaW50cywgaW5kZXgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGRlbGltaXQoY2hhcmFjdGVyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgLy8gY29tbWFcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gNDQpIHtcbiAgICAgICAgICAvLyBjb2xvblxuICAgICAgICAgIHBhcnNlZFsrK2luZGV4XSA9IHBlZWsoKSA9PT0gNTggPyAnJlxcZicgOiAnJztcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gcGFyc2VkW2luZGV4XS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgLy8gZmFsbHRocm91Z2hcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBmcm9tKGNoYXJhY3Rlcik7XG4gICAgfVxuICB9IHdoaWxlIChjaGFyYWN0ZXIgPSBuZXh0KCkpO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG52YXIgZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKSB7XG4gIHJldHVybiBkZWFsbG9jKHRvUnVsZXMoYWxsb2ModmFsdWUpLCBwb2ludHMpKTtcbn07IC8vIFdlYWtTZXQgd291bGQgYmUgbW9yZSBhcHByb3ByaWF0ZSwgYnV0IG9ubHkgV2Vha01hcCBpcyBzdXBwb3J0ZWQgaW4gSUUxMVxuXG5cbnZhciBmaXhlZEVsZW1lbnRzID0gLyogI19fUFVSRV9fICovbmV3IFdlYWtNYXAoKTtcbnZhciBjb21wYXQgPSBmdW5jdGlvbiBjb21wYXQoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScgfHwgIWVsZW1lbnQucGFyZW50IHx8IC8vIHBvc2l0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGNvbnRhaW5zIHBzZXVkb1xuICAvLyBuZWdhdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBoYXMgYmVlbiBhbHJlYWR5IHByZWZpeGVkXG4gIGVsZW1lbnQubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWUsXG4gICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgdmFyIGlzSW1wbGljaXRSdWxlID0gZWxlbWVudC5jb2x1bW4gPT09IHBhcmVudC5jb2x1bW4gJiYgZWxlbWVudC5saW5lID09PSBwYXJlbnQubGluZTtcblxuICB3aGlsZSAocGFyZW50LnR5cGUgIT09ICdydWxlJykge1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgaWYgKCFwYXJlbnQpIHJldHVybjtcbiAgfSAvLyBzaG9ydC1jaXJjdWl0IGZvciB0aGUgc2ltcGxlc3QgY2FzZVxuXG5cbiAgaWYgKGVsZW1lbnQucHJvcHMubGVuZ3RoID09PSAxICYmIHZhbHVlLmNoYXJDb2RlQXQoMCkgIT09IDU4XG4gIC8qIGNvbG9uICovXG4gICYmICFmaXhlZEVsZW1lbnRzLmdldChwYXJlbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGlmIHRoaXMgaXMgYW4gaW1wbGljaXRseSBpbnNlcnRlZCBydWxlICh0aGUgb25lIGVhZ2VybHkgaW5zZXJ0ZWQgYXQgdGhlIGVhY2ggbmV3IG5lc3RlZCBsZXZlbClcbiAgLy8gdGhlbiB0aGUgcHJvcHMgaGFzIGFscmVhZHkgYmVlbiBtYW5pcHVsYXRlZCBiZWZvcmVoYW5kIGFzIHRoZXkgdGhhdCBhcnJheSBpcyBzaGFyZWQgYmV0d2VlbiBpdCBhbmQgaXRzIFwicnVsZSBwYXJlbnRcIlxuXG5cbiAgaWYgKGlzSW1wbGljaXRSdWxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZml4ZWRFbGVtZW50cy5zZXQoZWxlbWVudCwgdHJ1ZSk7XG4gIHZhciBwb2ludHMgPSBbXTtcbiAgdmFyIHJ1bGVzID0gZ2V0UnVsZXModmFsdWUsIHBvaW50cyk7XG4gIHZhciBwYXJlbnRSdWxlcyA9IHBhcmVudC5wcm9wcztcblxuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFyZW50UnVsZXMubGVuZ3RoOyBqKyssIGsrKykge1xuICAgICAgZWxlbWVudC5wcm9wc1trXSA9IHBvaW50c1tpXSA/IHJ1bGVzW2ldLnJlcGxhY2UoLyZcXGYvZywgcGFyZW50UnVsZXNbal0pIDogcGFyZW50UnVsZXNbal0gKyBcIiBcIiArIHJ1bGVzW2ldO1xuICAgIH1cbiAgfVxufTtcbnZhciByZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZTtcblxuICAgIGlmICggLy8gY2hhcmNvZGUgZm9yIGxcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDApID09PSAxMDggJiYgLy8gY2hhcmNvZGUgZm9yIGJcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDIpID09PSA5OCkge1xuICAgICAgLy8gdGhpcyBpZ25vcmVzIGxhYmVsXG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gJyc7XG4gICAgICBlbGVtZW50LnZhbHVlID0gJyc7XG4gICAgfVxuICB9XG59O1xudmFyIGlnbm9yZUZsYWcgPSAnZW1vdGlvbi1kaXNhYmxlLXNlcnZlci1yZW5kZXJpbmctdW5zYWZlLXNlbGVjdG9yLXdhcm5pbmctcGxlYXNlLWRvLW5vdC11c2UtdGhpcy10aGUtd2FybmluZy1leGlzdHMtZm9yLWEtcmVhc29uJztcblxudmFyIGlzSWdub3JpbmdDb21tZW50ID0gZnVuY3Rpb24gaXNJZ25vcmluZ0NvbW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gISFlbGVtZW50ICYmIGVsZW1lbnQudHlwZSA9PT0gJ2NvbW0nICYmIGVsZW1lbnQuY2hpbGRyZW4uaW5kZXhPZihpZ25vcmVGbGFnKSA+IC0xO1xufTtcblxudmFyIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtID0gZnVuY3Rpb24gY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oY2FjaGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScpIHJldHVybjtcbiAgICB2YXIgdW5zYWZlUHNldWRvQ2xhc3NlcyA9IGVsZW1lbnQudmFsdWUubWF0Y2goLyg6Zmlyc3R8Om50aHw6bnRoLWxhc3QpLWNoaWxkL2cpO1xuXG4gICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzZXMgJiYgY2FjaGUuY29tcGF0ICE9PSB0cnVlKSB7XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSBpbmRleCA+IDAgPyBjaGlsZHJlbltpbmRleCAtIDFdIDogbnVsbDtcblxuICAgICAgaWYgKHByZXZFbGVtZW50ICYmIGlzSWdub3JpbmdDb21tZW50KGxhc3QocHJldkVsZW1lbnQuY2hpbGRyZW4pKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGlzSW1wb3J0UnVsZSA9IGZ1bmN0aW9uIGlzSW1wb3J0UnVsZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1ICYmIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDApID09PSA2NDtcbn07XG5cbnZhciBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMgPSBmdW5jdGlvbiBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKCFpc0ltcG9ydFJ1bGUoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59OyAvLyB1c2UgdGhpcyB0byByZW1vdmUgaW5jb3JyZWN0IGVsZW1lbnRzIGZyb20gZnVydGhlciBwcm9jZXNzaW5nXG4vLyBzbyB0aGV5IGRvbid0IGdldCBoYW5kZWQgdG8gdGhlIGBzaGVldGAgKG9yIGFueXRoaW5nIGVsc2UpXG4vLyBhcyB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGxlYWQgdG8gYWRkaXRpb25hbCBsb2dzIHdoaWNoIGluIHR1cm4gY291bGQgYmUgb3ZlcmhlbG1pbmcgdG8gdGhlIHVzZXJcblxuXG52YXIgbnVsbGlmeUVsZW1lbnQgPSBmdW5jdGlvbiBudWxsaWZ5RWxlbWVudChlbGVtZW50KSB7XG4gIGVsZW1lbnQudHlwZSA9ICcnO1xuICBlbGVtZW50LnZhbHVlID0gJyc7XG4gIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgZWxlbWVudC5jaGlsZHJlbiA9ICcnO1xuICBlbGVtZW50LnByb3BzID0gJyc7XG59O1xuXG52YXIgaW5jb3JyZWN0SW1wb3J0QWxhcm0gPSBmdW5jdGlvbiBpbmNvcnJlY3RJbXBvcnRBbGFybShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgaWYgKCFpc0ltcG9ydFJ1bGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWxlbWVudC5wYXJlbnQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIG5lc3RlZCBpbnNpZGUgb3RoZXIgcnVsZXMuIFBsZWFzZSBtb3ZlIGl0IHRvIHRoZSB0b3AgbGV2ZWwgYW5kIHB1dCBpdCBiZWZvcmUgcmVndWxhciBydWxlcy4gS2VlcCBpbiBtaW5kIHRoYXQgdGhleSBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBnbG9iYWwgc3R5bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfSBlbHNlIGlmIChpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgYWZ0ZXIgb3RoZXIgcnVsZXMuIFBsZWFzZSBwdXQgeW91ciBgQGltcG9ydGAgcnVsZXMgYmVmb3JlIHlvdXIgb3RoZXIgcnVsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFN0eWxpc1BsdWdpbnMgPSBbcHJlZml4ZXJdO1xuXG52YXIgY3JlYXRlQ2FjaGUgPSBmdW5jdGlvbiBjcmVhdGVDYWNoZShvcHRpb25zKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAha2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGhhdmUgdG8gY29uZmlndXJlIGBrZXlgIGZvciB5b3VyIGNhY2hlLiBQbGVhc2UgbWFrZSBzdXJlIGl0J3MgdW5pcXVlIChhbmQgbm90IGVxdWFsIHRvICdjc3MnKSBhcyBpdCdzIHVzZWQgZm9yIGxpbmtpbmcgc3R5bGVzIHRvIHlvdXIgY2FjaGUuXFxuXCIgKyBcIklmIG11bHRpcGxlIGNhY2hlcyBzaGFyZSB0aGUgc2FtZSBrZXkgdGhleSBtaWdodCBcXFwiZmlnaHRcXFwiIGZvciBlYWNoIG90aGVyJ3Mgc3R5bGUgZWxlbWVudHMuXCIpO1xuICB9XG5cbiAgaWYgKCBrZXkgPT09ICdjc3MnKSB7XG4gICAgdmFyIHNzclN0eWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25dOm5vdChbZGF0YS1zXSlcIik7IC8vIGdldCBTU1JlZCBzdHlsZXMgb3V0IG9mIHRoZSB3YXkgb2YgUmVhY3QncyBoeWRyYXRpb25cbiAgICAvLyBkb2N1bWVudC5oZWFkIGlzIGEgc2FmZSBwbGFjZSB0byBtb3ZlIHRoZW0gdG8odGhvdWdoIG5vdGUgZG9jdW1lbnQuaGVhZCBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIGxhc3QgcGxhY2UgdGhleSB3aWxsIGJlKVxuICAgIC8vIG5vdGUgdGhpcyB2ZXJ5IHZlcnkgaW50ZW50aW9uYWxseSB0YXJnZXRzIGFsbCBzdHlsZSBlbGVtZW50cyByZWdhcmRsZXNzIG9mIHRoZSBrZXkgdG8gZW5zdXJlXG4gICAgLy8gdGhhdCBjcmVhdGluZyBhIGNhY2hlIHdvcmtzIGluc2lkZSBvZiByZW5kZXIgb2YgYSBSZWFjdCBjb21wb25lbnRcblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc3NyU3R5bGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gd2Ugd2FudCB0byBvbmx5IG1vdmUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIHNwYWNlIGluIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlIHZhbHVlXG4gICAgICAvLyBiZWNhdXNlIHRoYXQgaW5kaWNhdGVzIHRoYXQgaXQgaXMgYW4gRW1vdGlvbiAxMSBzZXJ2ZXItc2lkZSByZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgICAgLy8gd2hpbGUgd2Ugd2lsbCBhbHJlYWR5IGlnbm9yZSBFbW90aW9uIDExIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBiZWNhdXNlIG9mIHRoZSA6bm90KFtkYXRhLXNdKSBwYXJ0IGluIHRoZSBzZWxlY3RvclxuICAgICAgLy8gRW1vdGlvbiAxMCBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgZGlkIG5vdCBoYXZlIGRhdGEtcyAoYnV0IGltcG9ydGFudGx5IGRpZCBub3QgaGF2ZSBhIHNwYWNlIGluIHRoZWlyIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGVzKVxuICAgICAgLy8gc28gY2hlY2tpbmcgZm9yIHRoZSBzcGFjZSBlbnN1cmVzIHRoYXQgbG9hZGluZyBFbW90aW9uIDExIGFmdGVyIEVtb3Rpb24gMTAgaGFzIGluc2VydGVkIHNvbWUgc3R5bGVzXG4gICAgICAvLyB3aWxsIG5vdCByZXN1bHQgaW4gdGhlIEVtb3Rpb24gMTAgc3R5bGVzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgdmFyIGRhdGFFbW90aW9uQXR0cmlidXRlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicpO1xuXG4gICAgICBpZiAoZGF0YUVtb3Rpb25BdHRyaWJ1dGUuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBzdHlsaXNQbHVnaW5zID0gb3B0aW9ucy5zdHlsaXNQbHVnaW5zIHx8IGRlZmF1bHRTdHlsaXNQbHVnaW5zO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGlmICgvW15hLXotXS8udGVzdChrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbW90aW9uIGtleSBtdXN0IG9ubHkgY29udGFpbiBsb3dlciBjYXNlIGFscGhhYmV0aWNhbCBjaGFyYWN0ZXJzIGFuZCAtIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIHBhc3NlZFwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5zZXJ0ZWQgPSB7fTsgLy8gJEZsb3dGaXhNZVxuXG4gIHZhciBjb250YWluZXI7XG4gIHZhciBub2Rlc1RvSHlkcmF0ZSA9IFtdO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoIC8vIHRoaXMgbWVhbnMgd2Ugd2lsbCBpZ25vcmUgZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhIHNwYWNlIGluIHRoZW0gd2hpY2hcbiAgICAvLyBtZWFucyB0aGF0IHRoZSBzdHlsZSBlbGVtZW50cyB3ZSdyZSBsb29raW5nIGF0IGFyZSBvbmx5IEVtb3Rpb24gMTEgc2VydmVyLXJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl49XFxcIlwiICsga2V5ICsgXCIgXFxcIl1cIiksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXR0cmliID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb25cIikuc3BsaXQoJyAnKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGF0dHJpYi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnNlcnRlZFthdHRyaWJbaV1dID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZXNUb0h5ZHJhdGUucHVzaChub2RlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfaW5zZXJ0O1xuXG4gIHZhciBvbW5pcHJlc2VudFBsdWdpbnMgPSBbY29tcGF0LCByZW1vdmVMYWJlbF07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBvbW5pcHJlc2VudFBsdWdpbnMucHVzaChjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSh7XG4gICAgICBnZXQgY29tcGF0KCkge1xuICAgICAgICByZXR1cm4gY2FjaGUuY29tcGF0O1xuICAgICAgfVxuXG4gICAgfSksIGluY29ycmVjdEltcG9ydEFsYXJtKTtcbiAgfVxuXG4gIHtcbiAgICB2YXIgY3VycmVudFNoZWV0O1xuICAgIHZhciBmaW5hbGl6aW5nUGx1Z2lucyA9IFtzdHJpbmdpZnksIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKCFlbGVtZW50LnJvb3QpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnRbXCJyZXR1cm5cIl0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudmFsdWUgJiYgZWxlbWVudC50eXBlICE9PSBDT01NRU5UKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGVtcHR5IHJ1bGUgaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXG4gICAgICAgICAgLy8gc28gQGVtb3Rpb24vamVzdCBjYW4gZ3JhYiBga2V5YCBmcm9tIHRoZSAoSlMpRE9NIGZvciBjYWNoZXMgd2l0aG91dCBhbnkgcnVsZXMgaW5zZXJ0ZWQgeWV0XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50LnZhbHVlICsgXCJ7fVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gOiBydWxlc2hlZXQoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQocnVsZSk7XG4gICAgfSldO1xuICAgIHZhciBzZXJpYWxpemVyID0gbWlkZGxld2FyZShvbW5pcHJlc2VudFBsdWdpbnMuY29uY2F0KHN0eWxpc1BsdWdpbnMsIGZpbmFsaXppbmdQbHVnaW5zKSk7XG5cbiAgICB2YXIgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHN0eWxlcykge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZShjb21waWxlKHN0eWxlcyksIHNlcmlhbGl6ZXIpO1xuICAgIH07XG5cbiAgICBfaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHNlbGVjdG9yLCBzZXJpYWxpemVkLCBzaGVldCwgc2hvdWxkQ2FjaGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldCA9IHNoZWV0O1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN1cnJlbnRTaGVldCA9IHtcbiAgICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgICAgICAgICBzaGVldC5pbnNlcnQocnVsZSArIHNlcmlhbGl6ZWQubWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN0eWxpcyhzZWxlY3RvciA/IHNlbGVjdG9yICsgXCJ7XCIgKyBzZXJpYWxpemVkLnN0eWxlcyArIFwifVwiIDogc2VyaWFsaXplZC5zdHlsZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeSxcbiAgICAgIHByZXBlbmQ6IG9wdGlvbnMucHJlcGVuZCxcbiAgICAgIGluc2VydGlvblBvaW50OiBvcHRpb25zLmluc2VydGlvblBvaW50XG4gICAgfSksXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgaW5zZXJ0ZWQ6IGluc2VydGVkLFxuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydDogX2luc2VydFxuICB9O1xuICBjYWNoZS5zaGVldC5oeWRyYXRlKG5vZGVzVG9IeWRyYXRlKTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ2FjaGU7XG4iLCJpbXBvcnQge01TLCBNT1osIFdFQktJVCwgUlVMRVNFVCwgS0VZRlJBTUVTLCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHttYXRjaCwgY2hhcmF0LCBzdWJzdHIsIHN0cmxlbiwgc2l6ZW9mLCByZXBsYWNlLCBjb21iaW5lfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge2NvcHksIHRva2VuaXplfSBmcm9tICcuL1Rva2VuaXplci5qcydcbmltcG9ydCB7c2VyaWFsaXplfSBmcm9tICcuL1NlcmlhbGl6ZXIuanMnXG5pbXBvcnQge3ByZWZpeH0gZnJvbSAnLi9QcmVmaXhlci5qcydcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uW119IGNvbGxlY3Rpb25cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlkZGxld2FyZSAoY29sbGVjdGlvbikge1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNvbGxlY3Rpb24pXG5cblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdFx0dmFyIG91dHB1dCA9ICcnXG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdFx0b3V0cHV0ICs9IGNvbGxlY3Rpb25baV0oZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRcdHJldHVybiBvdXRwdXRcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzaGVldCAoY2FsbGJhY2spIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0aWYgKCFlbGVtZW50LnJvb3QpXG5cdFx0XHRpZiAoZWxlbWVudCA9IGVsZW1lbnQucmV0dXJuKVxuXHRcdFx0XHRjYWxsYmFjayhlbGVtZW50KVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhlciAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRpZiAoZWxlbWVudC5sZW5ndGggPiAtMSlcblx0XHRpZiAoIWVsZW1lbnQucmV0dXJuKVxuXHRcdFx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBERUNMQVJBVElPTjogZWxlbWVudC5yZXR1cm4gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgpXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7dmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpfSldLCBjYWxsYmFjaylcblx0XHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRcdGlmIChlbGVtZW50Lmxlbmd0aClcblx0XHRcdFx0XHRcdHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV19KVxuXHRcdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJydcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVzcGFjZSAoZWxlbWVudCkge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdGVsZW1lbnQucHJvcHMgPSBlbGVtZW50LnByb3BzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbWJpbmUodG9rZW5pemUodmFsdWUpLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjaGlsZHJlbikge1xuXHRcdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCAwKSkge1xuXHRcdFx0XHRcdFx0Ly8gXFxmXG5cdFx0XHRcdFx0XHRjYXNlIDEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3Vic3RyKHZhbHVlLCAxLCBzdHJsZW4odmFsdWUpKVxuXHRcdFx0XHRcdFx0Ly8gXFwwICggKyA+IH5cblx0XHRcdFx0XHRcdGNhc2UgMDogY2FzZSA0MDogY2FzZSA0MzogY2FzZSA2MjogY2FzZSAxMjY6XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gOlxuXHRcdFx0XHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuWysraW5kZXhdID09PSAnZ2xvYmFsJylcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltpbmRleF0gPSAnJywgY2hpbGRyZW5bKytpbmRleF0gPSAnXFxmJyArIHN1YnN0cihjaGlsZHJlbltpbmRleF0sIGluZGV4ID0gMSwgLTEpXG5cdFx0XHRcdFx0XHQvLyBcXHNcblx0XHRcdFx0XHRcdGNhc2UgMzI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IGVsZW1lbnQgPSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNpemVvZihjaGlsZHJlbikgPiAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgaW5kZXggPSBzaXplb2YoY2hpbGRyZW4pIC0gMTogY2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAyID8gdmFsdWUgKyBlbGVtZW50ICsgZWxlbWVudCA6IHZhbHVlICsgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdH1cbn1cbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIGZvcndhcmRSZWYsIGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3ZWFrTWVtb2l6ZSBmcm9tICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIEVtb3Rpb25DYWNoZUNvbnRleHQgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVDb250ZXh0KCAvLyB3ZSdyZSBkb2luZyB0aGlzIHRvIGF2b2lkIHByZWNvbnN0cnVjdCdzIGRlYWQgY29kZSBlbGltaW5hdGlvbiBpbiB0aGlzIG9uZSBjYXNlXG4vLyBiZWNhdXNlIHRoaXMgbW9kdWxlIGlzIHByaW1hcmlseSBpbnRlbmRlZCBmb3IgdGhlIGJyb3dzZXIgYW5kIG5vZGVcbi8vIGJ1dCBpdCdzIGFsc28gcmVxdWlyZWQgaW4gcmVhY3QgbmF0aXZlIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cyBzb21ldGltZXNcbi8vIGFuZCB3ZSBjb3VsZCBoYXZlIGEgc3BlY2lhbCBidWlsZCBqdXN0IGZvciB0aGF0XG4vLyBidXQgdGhpcyBpcyBtdWNoIGVhc2llciBhbmQgdGhlIG5hdGl2ZSBwYWNrYWdlc1xuLy8gbWlnaHQgdXNlIGEgZGlmZmVyZW50IHRoZW1lIGNvbnRleHQgaW4gdGhlIGZ1dHVyZSBhbnl3YXlcbnR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyAvKiAjX19QVVJFX18gKi9jcmVhdGVDYWNoZSh7XG4gIGtleTogJ2Nzcydcbn0pIDogbnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb25DYWNoZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNhY2hlQ29udGV4dCc7XG59XG5cbnZhciBDYWNoZVByb3ZpZGVyID0gRW1vdGlvbkNhY2hlQ29udGV4dC5Qcm92aWRlcjtcbnZhciBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB1c2VFbW90aW9uQ2FjaGUoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xufTtcblxudmFyIHdpdGhFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlKGZ1bmMpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICAvLyB0aGUgY2FjaGUgd2lsbCBuZXZlciBiZSBudWxsIGluIHRoZSBicm93c2VyXG4gICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbiAgICByZXR1cm4gZnVuYyhwcm9wcywgY2FjaGUsIHJlZik7XG4gIH0pO1xufTtcblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZSA9IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZShsaW5lKSB7XG4gIC8vIFY4XG4gIHZhciBtYXRjaCA9IC9eXFxzK2F0XFxzKyhbQS1aYS16MC05JC5dKylcXHMvLmV4ZWMobGluZSk7XG5cbiAgaWYgKG1hdGNoKSB7XG4gICAgLy8gVGhlIG1hdGNoIG1heSBiZSBzb21ldGhpbmcgbGlrZSAnT2JqZWN0LmNyZWF0ZUVtb3Rpb25Qcm9wcydcbiAgICB2YXIgcGFydHMgPSBtYXRjaFsxXS5zcGxpdCgnLicpO1xuICAgIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbiAgfSAvLyBTYWZhcmkgLyBGaXJlZm94XG5cblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIG1hdGNoWzFdO1xuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIGludGVybmFsUmVhY3RGdW5jdGlvbk5hbWVzID0gLyogI19fUFVSRV9fICovbmV3IFNldChbJ3JlbmRlcldpdGhIb29rcycsICdwcm9jZXNzQ2hpbGQnLCAnZmluaXNoQ2xhc3NDb21wb25lbnQnLCAncmVuZGVyVG9TdHJpbmcnXSk7IC8vIFRoZXNlIGlkZW50aWZpZXJzIGNvbWUgZnJvbSBlcnJvciBzdGFja3MsIHNvIHRoZXkgaGF2ZSB0byBiZSB2YWxpZCBKU1xuLy8gaWRlbnRpZmllcnMsIHRodXMgd2Ugb25seSBuZWVkIHRvIHJlcGxhY2Ugd2hhdCBpcyBhIHZhbGlkIGNoYXJhY3RlciBmb3IgSlMsXG4vLyBidXQgbm90IGZvciBDU1MuXG5cbnZhciBzYW5pdGl6ZUlkZW50aWZpZXIgPSBmdW5jdGlvbiBzYW5pdGl6ZUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gaWRlbnRpZmllci5yZXBsYWNlKC9cXCQvZywgJy0nKTtcbn07XG5cbnZhciBnZXRMYWJlbEZyb21TdGFja1RyYWNlID0gZnVuY3Rpb24gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShzdGFja1RyYWNlKSB7XG4gIGlmICghc3RhY2tUcmFjZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGxpbmVzID0gc3RhY2tUcmFjZS5zcGxpdCgnXFxuJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZXNbaV0pOyAvLyBUaGUgZmlyc3QgbGluZSBvZiBWOCBzdGFjayB0cmFjZXMgaXMganVzdCBcIkVycm9yXCJcblxuICAgIGlmICghZnVuY3Rpb25OYW1lKSBjb250aW51ZTsgLy8gSWYgd2UgcmVhY2ggb25lIG9mIHRoZXNlLCB3ZSBoYXZlIGdvbmUgdG9vIGZhciBhbmQgc2hvdWxkIHF1aXRcblxuICAgIGlmIChpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcy5oYXMoZnVuY3Rpb25OYW1lKSkgYnJlYWs7IC8vIFRoZSBjb21wb25lbnQgbmFtZSBpcyB0aGUgZmlyc3QgZnVuY3Rpb24gaW4gdGhlIHN0YWNrIHRoYXQgc3RhcnRzIHdpdGggYW5cbiAgICAvLyB1cHBlcmNhc2UgbGV0dGVyXG5cbiAgICBpZiAoL15bQS1aXS8udGVzdChmdW5jdGlvbk5hbWUpKSByZXR1cm4gc2FuaXRpemVJZGVudGlmaWVyKGZ1bmN0aW9uTmFtZSk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIHR5cGVQcm9wTmFtZSA9ICdfX0VNT1RJT05fVFlQRV9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBsYWJlbFByb3BOYW1lID0gJ19fRU1PVElPTl9MQUJFTF9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBjcmVhdGVFbW90aW9uUHJvcHMgPSBmdW5jdGlvbiBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHByb3BzLmNzcyA9PT0gJ3N0cmluZycgJiYgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBjc3MgZGVjbGFyYXRpb25cbiAgcHJvcHMuY3NzLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmdzIGFyZSBub3QgYWxsb3dlZCBhcyBjc3MgcHJvcCB2YWx1ZXMsIHBsZWFzZSB3cmFwIGl0IGluIGEgY3NzIHRlbXBsYXRlIGxpdGVyYWwgZnJvbSAnQGVtb3Rpb24vcmVhY3QnIGxpa2UgdGhpczogY3NzYFwiICsgcHJvcHMuY3NzICsgXCJgXCIpO1xuICB9XG5cbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlOyAvLyBGb3IgcGVyZm9ybWFuY2UsIG9ubHkgY2FsbCBnZXRMYWJlbEZyb21TdGFja1RyYWNlIGluIGRldmVsb3BtZW50IGFuZCB3aGVuXG4gIC8vIHRoZSBsYWJlbCBoYXNuJ3QgYWxyZWFkeSBiZWVuIGNvbXB1dGVkXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISFwcm9wcy5jc3MgJiYgKHR5cGVvZiBwcm9wcy5jc3MgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwcm9wcy5jc3MubmFtZSAhPT0gJ3N0cmluZycgfHwgcHJvcHMuY3NzLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkpIHtcbiAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbEZyb21TdGFja1RyYWNlKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICBpZiAobGFiZWwpIG5ld1Byb3BzW2xhYmVsUHJvcE5hbWVdID0gbGFiZWw7XG4gIH1cblxuICByZXR1cm4gbmV3UHJvcHM7XG59O1xuXG52YXIgTm9vcCA9IGZ1bmN0aW9uIE5vb3AoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcnVsZXMgPSBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyk7XG4gIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgdmFyIGVsZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KHR5cGUsIG5ld1Byb3BzKTtcbiAgdmFyIHBvc3NpYmx5U3R5bGVFbGVtZW50ID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTm9vcCwgbnVsbCk7XG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIHBvc3NpYmx5U3R5bGVFbGVtZW50LCBlbGUpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59XG5cbmV4cG9ydCB7IENhY2hlUHJvdmlkZXIgYXMgQywgRW1vdGlvbiBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd25Qcm9wZXJ0eSBhcyBoLCB1c2VUaGVtZSBhcyB1LCB3aXRoRW1vdGlvbkNhY2hlIGFzIHcgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hYXBwbGVieS9zbWhhc2hlci9ibG9iLzYxYTA1MzBmMjgyNzdmMmU4NTBiZmMzOTYwMGNlNjFkMDJiNTE4ZGUvc3JjL011cm11ckhhc2gyLmNwcCNMMzctTDg2XG5mdW5jdGlvbiBtdXJtdXIyKHN0cikge1xuICAvLyAnbScgYW5kICdyJyBhcmUgbWl4aW5nIGNvbnN0YW50cyBnZW5lcmF0ZWQgb2ZmbGluZS5cbiAgLy8gVGhleSdyZSBub3QgcmVhbGx5ICdtYWdpYycsIHRoZXkganVzdCBoYXBwZW4gdG8gd29yayB3ZWxsLlxuICAvLyBjb25zdCBtID0gMHg1YmQxZTk5NTtcbiAgLy8gY29uc3QgciA9IDI0O1xuICAvLyBJbml0aWFsaXplIHRoZSBoYXNoXG4gIHZhciBoID0gMDsgLy8gTWl4IDQgYnl0ZXMgYXQgYSB0aW1lIGludG8gdGhlIGhhc2hcblxuICB2YXIgayxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcblxuICBmb3IgKDsgbGVuID49IDQ7ICsraSwgbGVuIC09IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gICAgayBePVxuICAgIC8qIGsgPj4+IHI6ICovXG4gICAgayA+Pj4gMjQ7XG4gICAgaCA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNikgXlxuICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIEhhbmRsZSB0aGUgbGFzdCBmZXcgYnl0ZXMgb2YgdGhlIGlucHV0IGFycmF5XG5cblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9XG4gICAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIERvIGEgZmV3IGZpbmFsIG1peGVzIG9mIHRoZSBoYXNoIHRvIGVuc3VyZSB0aGUgbGFzdCBmZXdcbiAgLy8gYnl0ZXMgYXJlIHdlbGwtaW5jb3Jwb3JhdGVkLlxuXG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9XG4gIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgcmV0dXJuICgoaCBeIGggPj4+IDE1KSA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtdXJtdXIyO1xuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyhhdHRyfGNvdW50ZXJzP3x1cmx8KCgocmVwZWF0aW5nLSk/KGxpbmVhcnxyYWRpYWwpKXxjb25pYyktZ3JhZGllbnQpXFwofChuby0pPyhvcGVufGNsb3NlKS1xdW90ZS87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG4gIHZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG4gIHZhciBoeXBoZW5hdGVkQ2FjaGUgPSB7fTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIGlmIChwcm9jZXNzZWQgIT09ICcnICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEgJiYgaHlwaGVuYXRlZENhY2hlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaHlwaGVuYXRlZENhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzaW5nIGtlYmFiLWNhc2UgZm9yIGNzcyBwcm9wZXJ0aWVzIGluIG9iamVjdHMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIFwiICsga2V5LnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoc3RyLCBfY2hhcikge1xuICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pICsgXCI/XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24udG9TdHJpbmcoKSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggQGVtb3Rpb24vYmFiZWwtcGx1Z2luLicpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAge1xuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5hbmltID09PSAxKSB7XG4gICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgbmFtZTogaW50ZXJwb2xhdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3R5bGVzOiBpbnRlcnBvbGF0aW9uLnN0eWxlcyxcbiAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRpb24ubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBpbnRlcnBvbGF0aW9uLm5leHQ7XG5cbiAgICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHRoaW5nIGV2ZXIgYnV0IHRoaXMgaXMgYSBwcmV0dHkgcmFyZSBjYXNlXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUgd2lsbCBiZSB2ZXJ5IGZldyBpdGVyYXRpb25zIG9mIHRoaXMgZ2VuZXJhbGx5XG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXh0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBuZXh0LnN0eWxlcyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3R5bGVzID0gaW50ZXJwb2xhdGlvbi5zdHlsZXMgKyBcIjtcIjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24ubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0eWxlcyArPSBpbnRlcnBvbGF0aW9uLm1hcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICBpZiAobWVyZ2VkUHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBwcmV2aW91c0N1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcyk7XG4gICAgICAgICAgY3Vyc29yID0gcHJldmlvdXNDdXJzb3I7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Z1bmN0aW9ucyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgaW4gY3NzIGNhbGxzIHdpbGwgYmUgc3RyaW5naWZpZWQuXFxuJyArICdJZiB5b3Ugd2FudCB0byBoYXZlIGEgY3NzIGNhbGwgYmFzZWQgb24gcHJvcHMsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNzcyBjYWxsIGxpa2UgdGhpc1xcbicgKyAnbGV0IGR5bmFtaWNTdHlsZSA9IChwcm9wcykgPT4gY3NzYGNvbG9yOiAke3Byb3BzLmNvbG9yfWBcXG4nICsgJ0l0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgd2l0aCBwcm9wcyBvciBpbnRlcnBvbGF0ZWQgaW4gYSBzdHlsZWQgY2FsbCBsaWtlIHRoaXNcXG4nICsgXCJsZXQgU29tZUNvbXBvbmVudCA9IHN0eWxlZCgnZGl2JylgJHtkeW5hbWljU3R5bGV9YFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gW107XG4gICAgICAgIHZhciByZXBsYWNlZCA9IGludGVycG9sYXRpb24ucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICB2YXIgZmFrZVZhck5hbWUgPSBcImFuaW1hdGlvblwiICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgICAgbWF0Y2hlZC5wdXNoKFwiY29uc3QgXCIgKyBmYWtlVmFyTmFtZSArIFwiID0ga2V5ZnJhbWVzYFwiICsgcDIucmVwbGFjZSgvXkBrZXlmcmFtZXMgYW5pbWF0aW9uLVxcdysvLCAnJykgKyBcImBcIik7XG4gICAgICAgICAgcmV0dXJuIFwiJHtcIiArIGZha2VWYXJOYW1lICsgXCJ9XCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2BrZXlmcmFtZXNgIG91dHB1dCBnb3QgaW50ZXJwb2xhdGVkIGludG8gcGxhaW4gc3RyaW5nLCBwbGVhc2Ugd3JhcCBpdCB3aXRoIGBjc3NgLlxcblxcbicgKyAnSW5zdGVhZCBvZiBkb2luZyB0aGlzOlxcblxcbicgKyBbXS5jb25jYXQobWF0Y2hlZCwgW1wiYFwiICsgcmVwbGFjZWQgKyBcImBcIl0pLmpvaW4oJ1xcbicpICsgJ1xcblxcbllvdSBzaG91bGQgd3JhcCBpdCB3aXRoIGBjc3NgIGxpa2UgdGhpczpcXG5cXG4nICsgKFwiY3NzYFwiICsgcmVwbGFjZWQgKyBcImBcIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICB9IC8vIGZpbmFsaXplIHN0cmluZyB2YWx1ZXMgKHJlZ3VsYXIgc3RyaW5ncyBhbmQgZnVuY3Rpb25zIGludGVycG9sYXRlZCBpbnRvIGNzcyBjYWxscylcblxuXG4gIGlmIChyZWdpc3RlcmVkID09IG51bGwpIHtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHZhciBjYWNoZWQgPSByZWdpc3RlcmVkW2ludGVycG9sYXRpb25dO1xuICByZXR1cm4gY2FjaGVkICE9PSB1bmRlZmluZWQgPyBjYWNoZWQgOiBpbnRlcnBvbGF0aW9uO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmopIHtcbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9ialtpXSkgKyBcIjtcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtfa2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWQgIT0gbnVsbCAmJiByZWdpc3RlcmVkW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbdmFsdWVdICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9rZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIEBlbW90aW9uL2JhYmVsLXBsdWdpbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWVbMF0gPT09ICdzdHJpbmcnICYmIChyZWdpc3RlcmVkID09IG51bGwgfHwgcmVnaXN0ZXJlZFt2YWx1ZVswXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdmFsdWUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlW19pXSkpIHtcbiAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlW19pXSkgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGludGVycG9sYXRlZCA9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHZhbHVlKTtcblxuICAgICAgICAgIHN3aXRjaCAoX2tleSkge1xuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIGludGVycG9sYXRlZCArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfa2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIGludGVycG9sYXRlZCArIFwifVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqKDt8JCkvZztcbnZhciBzb3VyY2VNYXBQYXR0ZXJuO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzb3VyY2VNYXBQYXR0ZXJuID0gL1xcL1xcKiNcXHNzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb25cXC9qc29uO1xcUytcXHMrXFwqXFwvL2c7XG59IC8vIHRoaXMgaXMgdGhlIGN1cnNvciBmb3Iga2V5ZnJhbWVzXG4vLyBrZXlmcmFtZXMgYXJlIHN0b3JlZCBvbiB0aGUgU2VyaWFsaXplZFN0eWxlcyBvYmplY3QgYXMgYSBsaW5rZWQgbGlzdFxuXG5cbnZhciBjdXJzb3I7XG52YXIgc2VyaWFsaXplU3R5bGVzID0gZnVuY3Rpb24gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIHJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiYgYXJnc1swXSAhPT0gbnVsbCAmJiBhcmdzWzBdLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFyZ3NbMF07XG4gIH1cblxuICB2YXIgc3RyaW5nTW9kZSA9IHRydWU7XG4gIHZhciBzdHlsZXMgPSAnJztcbiAgY3Vyc29yID0gdW5kZWZpbmVkO1xuICB2YXIgc3RyaW5ncyA9IGFyZ3NbMF07XG5cbiAgaWYgKHN0cmluZ3MgPT0gbnVsbCB8fCBzdHJpbmdzLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RyaW5nTW9kZSA9IGZhbHNlO1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBzdHJpbmdzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgIH1cblxuICAgIHN0eWxlcyArPSBzdHJpbmdzWzBdO1xuICB9IC8vIHdlIHN0YXJ0IGF0IDEgc2luY2Ugd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBmaXJzdCBhcmdcblxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBhcmdzW2ldKTtcblxuICAgIGlmIChzdHJpbmdNb2RlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcyArPSBzdHJpbmdzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzb3VyY2VNYXA7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBzdHlsZXMgPSBzdHlsZXMucmVwbGFjZShzb3VyY2VNYXBQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHNvdXJjZU1hcCA9IG1hdGNoO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9IC8vIHVzaW5nIGEgZ2xvYmFsIHJlZ2V4IHdpdGggLmV4ZWMgaXMgc3RhdGVmdWwgc28gbGFzdEluZGV4IGhhcyB0byBiZSByZXNldCBlYWNoIHRpbWVcblxuXG4gIGxhYmVsUGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICB2YXIgaWRlbnRpZmllck5hbWUgPSAnJztcbiAgdmFyIG1hdGNoOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViODA5YzJjZjI5NDk4MDBhMGY2MWZiNVxuXG4gIHdoaWxlICgobWF0Y2ggPSBsYWJlbFBhdHRlcm4uZXhlYyhzdHlsZXMpKSAhPT0gbnVsbCkge1xuICAgIGlkZW50aWZpZXJOYW1lICs9ICctJyArIC8vICRGbG93Rml4TWUgd2Uga25vdyBpdCdzIG5vdCBudWxsXG4gICAgbWF0Y2hbMV07XG4gIH1cblxuICB2YXIgbmFtZSA9IGhhc2hTdHJpbmcoc3R5bGVzKSArIGlkZW50aWZpZXJOYW1lO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZSBTZXJpYWxpemVkU3R5bGVzIHR5cGUgZG9lc24ndCBoYXZlIHRvU3RyaW5nIHByb3BlcnR5IChhbmQgd2UgZG9uJ3Qgd2FudCB0byBhZGQgaXQpXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgIG1hcDogc291cmNlTWFwLFxuICAgICAgbmV4dDogY3Vyc29yLFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJZb3UgaGF2ZSB0cmllZCB0byBzdHJpbmdpZnkgb2JqZWN0IHJldHVybmVkIGZyb20gYGNzc2AgZnVuY3Rpb24uIEl0IGlzbid0IHN1cHBvc2VkIHRvIGJlIHVzZWQgZGlyZWN0bHkgKGUuZy4gYXMgdmFsdWUgb2YgdGhlIGBjbGFzc05hbWVgIHByb3ApLCBidXQgcmF0aGVyIGhhbmRlZCB0byBlbW90aW9uIHNvIGl0IGNhbiBoYW5kbGUgaXQgKGUuZy4gYXMgdmFsdWUgb2YgYGNzc2AgcHJvcCkuXCI7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICBuZXh0OiBjdXJzb3JcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9O1xuIiwiLypcblxuQmFzZWQgb2ZmIGdsYW1vcidzIFN0eWxlU2hlZXQsIHRoYW5rcyBTdW5pbCDinaTvuI9cblxuaGlnaCBwZXJmb3JtYW5jZSBTdHlsZVNoZWV0IGZvciBjc3MtaW4tanMgc3lzdGVtc1xuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXNcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG5cbi8vIHVzYWdlXG5cbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCdcblxubGV0IHN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCh7IGtleTogJycsIGNvbnRhaW5lcjogZG9jdW1lbnQuaGVhZCB9KVxuXG5zdHlsZVNoZWV0Lmluc2VydCgnI2JveCB7IGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgfScpXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0XG5cbnN0eWxlU2hlZXQuZmx1c2goKVxuLSBlbXB0aWVzIHRoZSBzdHlsZXNoZWV0IG9mIGFsbCBpdHMgY29udGVudHNcblxuKi9cbi8vICRGbG93Rml4TWVcbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiB0YWcuc2hlZXQ7XG4gIH0gLy8gdGhpcyB3ZWlyZG5lc3MgYnJvdWdodCB0byB5b3UgYnkgZmlyZWZveFxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBvcHRpb25zLmtleSk7XG5cbiAgaWYgKG9wdGlvbnMubm9uY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgb3B0aW9ucy5ub25jZSk7XG4gIH1cblxuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcil7Ly50ZXN0KHJ1bGUpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZXJlIHdhcyBhIHByb2JsZW0gaW5zZXJ0aW5nIHRoZSBmb2xsb3dpbmcgcnVsZTogXFxcIlwiICsgcnVsZSArIFwiXFxcIlwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZSAmJiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgIH0pO1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZXhwb3J0IHsgU3R5bGVTaGVldCB9O1xuIiwidmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWVzKSB7XG4gIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgY2xhc3NOYW1lcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGlmIChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVnaXN0ZXJlZFN0eWxlcy5wdXNoKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSArIFwiO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByYXdDbGFzc05hbWU7XG59XG52YXIgaW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxuXG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY3VycmVudCA9IHNlcmlhbGl6ZWQ7XG5cbiAgICBkbyB7XG4gICAgICB2YXIgbWF5YmVTdHlsZXMgPSBjYWNoZS5pbnNlcnQoc2VyaWFsaXplZCA9PT0gY3VycmVudCA/IFwiLlwiICsgY2xhc3NOYW1lIDogJycsIGN1cnJlbnQsIGNhY2hlLnNoZWV0LCB0cnVlKTtcblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuICB9XG59O1xuXG5leHBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpIHtcbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKHNsb3RzKS5mb3JFYWNoKCAvLyBgT2JqZXQua2V5cyhzbG90cylgIGNhbid0IGJlIHdpZGVyIHRoYW4gYFRgIGJlY2F1c2Ugd2UgaW5mZXIgYFRgIGZyb20gYHNsb3RzYC5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC8xMjI1MyNpc3N1ZWNvbW1lbnQtMjYzMTMyMjA4XG4gIHNsb3QgPT4ge1xuICAgIG91dHB1dFtzbG90XSA9IHNsb3RzW3Nsb3RdLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKGNsYXNzZXMgJiYgY2xhc3Nlc1trZXldKSB7XG4gICAgICAgICAgYWNjLnB1c2goY2xhc3Nlc1trZXldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFjYy5wdXNoKGdldFV0aWxpdHlDbGFzcyhrZXkpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSkuam9pbignICcpO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJjb25zdCBkZWZhdWx0R2VuZXJhdG9yID0gY29tcG9uZW50TmFtZSA9PiBjb21wb25lbnROYW1lO1xuXG5jb25zdCBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IgPSAoKSA9PiB7XG4gIGxldCBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gIHJldHVybiB7XG4gICAgY29uZmlndXJlKGdlbmVyYXRvcikge1xuICAgICAgZ2VuZXJhdGUgPSBnZW5lcmF0b3I7XG4gICAgfSxcblxuICAgIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZShjb21wb25lbnROYW1lKTtcbiAgICB9LFxuXG4gICAgcmVzZXQoKSB7XG4gICAgICBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gICAgfVxuXG4gIH07XG59O1xuXG5jb25zdCBDbGFzc05hbWVHZW5lcmF0b3IgPSBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IENsYXNzTmFtZUdlbmVyYXRvcjsiLCJpbXBvcnQgQ2xhc3NOYW1lR2VuZXJhdG9yIGZyb20gJy4vQ2xhc3NOYW1lR2VuZXJhdG9yJztcbmNvbnN0IGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmcgPSB7XG4gIGFjdGl2ZTogJ011aS1hY3RpdmUnLFxuICBjaGVja2VkOiAnTXVpLWNoZWNrZWQnLFxuICBjb21wbGV0ZWQ6ICdNdWktY29tcGxldGVkJyxcbiAgZGlzYWJsZWQ6ICdNdWktZGlzYWJsZWQnLFxuICBlcnJvcjogJ011aS1lcnJvcicsXG4gIGV4cGFuZGVkOiAnTXVpLWV4cGFuZGVkJyxcbiAgZm9jdXNlZDogJ011aS1mb2N1c2VkJyxcbiAgZm9jdXNWaXNpYmxlOiAnTXVpLWZvY3VzVmlzaWJsZScsXG4gIHJlcXVpcmVkOiAnTXVpLXJlcXVpcmVkJyxcbiAgc2VsZWN0ZWQ6ICdNdWktc2VsZWN0ZWQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCkge1xuICBjb25zdCBnbG9iYWxTdGF0ZUNsYXNzID0gZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZ1tzbG90XTtcbiAgcmV0dXJuIGdsb2JhbFN0YXRlQ2xhc3MgfHwgYCR7Q2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlKGNvbXBvbmVudE5hbWUpfS0ke3Nsb3R9YDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyhjb21wb25lbnROYW1lLCBzbG90cykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICByZXN1bHRbc2xvdF0gPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE4IDExdjJoNHYtMmgtNHptLTIgNi42MWMuOTYuNzEgMi4yMSAxLjY1IDMuMiAyLjM5LjQtLjUzLjgtMS4wNyAxLjItMS42LS45OS0uNzQtMi4yNC0xLjY4LTMuMi0yLjQtLjQuNTQtLjggMS4wOC0xLjIgMS42MXpNMjAuNCA1LjZjLS40LS41My0uOC0xLjA3LTEuMi0xLjYtLjk5Ljc0LTIuMjQgMS42OC0zLjIgMi40LjQuNTMuOCAxLjA3IDEuMiAxLjYuOTYtLjcyIDIuMjEtMS42NSAzLjItMi40ek00IDljLTEuMSAwLTIgLjktMiAydjJjMCAxLjEuOSAyIDIgMmgxdjRoMnYtNGgxbDUgM1Y2TDggOUg0em0xMS41IDNjMC0xLjMzLS41OC0yLjUzLTEuNS0zLjM1djYuNjljLjkyLS44MSAxLjUtMi4wMSAxLjUtMy4zNHpcIlxufSksICdDYW1wYWlnbicpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptLTIgMTUtNS01IDEuNDEtMS40MUwxMCAxNC4xN2w3LjU5LTcuNTlMMTkgOGwtOSA5elwiXG59KSwgJ0NoZWNrQ2lyY2xlJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0yMS45OSA0YzAtMS4xLS44OS0yLTEuOTktMkg0Yy0xLjEgMC0yIC45LTIgMnYxMmMwIDEuMS45IDIgMiAyaDE0bDQgNC0uMDEtMTh6TTE4IDE0SDZ2LTJoMTJ2MnptMC0zSDZWOWgxMnYyem0wLTNINlY2aDEydjJ6XCJcbn0pLCAnQ29tbWVudCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMSAxNWgtMnYtMmgydjJ6bTAtNGgtMlY3aDJ2NnpcIlxufSksICdFcnJvcicpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTcgMTBIN3YyaDEwdi0yem0yLTdoLTFWMWgtMnYySDhWMUg2djJINWMtMS4xMSAwLTEuOTkuOS0xLjk5IDJMMyAxOWMwIDEuMS44OSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yem0wIDE2SDVWOGgxNHYxMXptLTUtNUg3djJoN3YtMnpcIlxufSksICdFdmVudE5vdGUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTEgMTVoLTJ2LTZoMnY2em0wLThoLTJWN2gydjJ6XCJcbn0pLCAnSW5mbycpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTYgMTFjMS42NiAwIDIuOTktMS4zNCAyLjk5LTNTMTcuNjYgNSAxNiA1Yy0xLjY2IDAtMyAxLjM0LTMgM3MxLjM0IDMgMyAzem0tOCAwYzEuNjYgMCAyLjk5LTEuMzQgMi45OS0zUzkuNjYgNSA4IDVDNi4zNCA1IDUgNi4zNCA1IDhzMS4zNCAzIDMgM3ptMCAyYy0yLjMzIDAtNyAxLjE3LTcgMy41VjE5aDE0di0yLjVjMC0yLjMzLTQuNjctMy41LTctMy41em04IDBjLS4yOSAwLS42Mi4wMi0uOTcuMDUgMS4xNi44NCAxLjk3IDEuOTcgMS45NyAzLjQ1VjE5aDZ2LTIuNWMwLTIuMzMtNC42Ny0zLjUtNy0zLjV6XCJcbn0pLCAnUGVvcGxlJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xMS4wNyAxMi44NWMuNzctMS4zOSAyLjI1LTIuMjEgMy4xMS0zLjQ0LjkxLTEuMjkuNC0zLjctMi4xOC0zLjctMS42OSAwLTIuNTIgMS4yOC0yLjg3IDIuMzRMNi41NCA2Ljk2QzcuMjUgNC44MyA5LjE4IDMgMTEuOTkgM2MyLjM1IDAgMy45NiAxLjA3IDQuNzggMi40MS43IDEuMTUgMS4xMSAzLjMuMDMgNC45LTEuMiAxLjc3LTIuMzUgMi4zMS0yLjk3IDMuNDUtLjI1LjQ2LS4zNS43Ni0uMzUgMi4yNGgtMi44OWMtLjAxLS43OC0uMTMtMi4wNS40OC0zLjE1ek0xNCAyMGMwIDEuMS0uOSAyLTIgMnMtMi0uOS0yLTIgLjktMiAyLTIgMiAuOSAyIDJ6XCJcbn0pLCAnUXVlc3Rpb25NYXJrJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xNS41IDE0aC0uNzlsLS4yOC0uMjdDMTUuNDEgMTIuNTkgMTYgMTEuMTEgMTYgOS41IDE2IDUuOTEgMTMuMDkgMyA5LjUgM1MzIDUuOTEgMyA5LjUgNS45MSAxNiA5LjUgMTZjMS42MSAwIDMuMDktLjU5IDQuMjMtMS41N2wuMjcuMjh2Ljc5bDUgNC45OUwyMC40OSAxOWwtNC45OS01em0tNiAwQzcuMDEgMTQgNSAxMS45OSA1IDkuNVM3LjAxIDUgOS41IDUgMTQgNy4wMSAxNCA5LjUgMTEuOTkgMTQgOS41IDE0elwiXG59KSwgJ1NlYXJjaCcpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWxzLmNyZWF0ZVN2Z0ljb247XG4gIH1cbn0pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtdWkvbWF0ZXJpYWwvdXRpbHNcIik7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj02MDEwMyxjPTYwMTA2LGQ9NjAxMDcsZT02MDEwOCxmPTYwMTE0LGc9NjAxMDksaD02MDExMCxrPTYwMTEyLGw9NjAxMTMsbT02MDEyMCxuPTYwMTE1LHA9NjAxMTYscT02MDEyMSxyPTYwMTIyLHU9NjAxMTcsdj02MDEyOSx3PTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHg9U3ltYm9sLmZvcjtiPXgoXCJyZWFjdC5lbGVtZW50XCIpO2M9eChcInJlYWN0LnBvcnRhbFwiKTtkPXgoXCJyZWFjdC5mcmFnbWVudFwiKTtlPXgoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtmPXgoXCJyZWFjdC5wcm9maWxlclwiKTtnPXgoXCJyZWFjdC5wcm92aWRlclwiKTtoPXgoXCJyZWFjdC5jb250ZXh0XCIpO2s9eChcInJlYWN0LmZvcndhcmRfcmVmXCIpO2w9eChcInJlYWN0LnN1c3BlbnNlXCIpO209eChcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7bj14KFwicmVhY3QubWVtb1wiKTtwPXgoXCJyZWFjdC5sYXp5XCIpO3E9eChcInJlYWN0LmJsb2NrXCIpO3I9eChcInJlYWN0LnNlcnZlci5ibG9ja1wiKTt1PXgoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt2PXgoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO3c9eChcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG5mdW5jdGlvbiB5KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB0PWEuJCR0eXBlb2Y7c3dpdGNoKHQpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBsOmNhc2UgbTpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBoOmNhc2UgazpjYXNlIHA6Y2FzZSBuOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB0fX1jYXNlIGM6cmV0dXJuIHR9fX12YXIgej1nLEE9YixCPWssQz1kLEQ9cCxFPW4sRj1jLEc9ZixIPWUsST1sO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ejtleHBvcnRzLkVsZW1lbnQ9QTtleHBvcnRzLkZvcndhcmRSZWY9QjtleHBvcnRzLkZyYWdtZW50PUM7ZXhwb3J0cy5MYXp5PUQ7ZXhwb3J0cy5NZW1vPUU7ZXhwb3J0cy5Qb3J0YWw9RjtleHBvcnRzLlByb2ZpbGVyPUc7ZXhwb3J0cy5TdHJpY3RNb2RlPUg7XG5leHBvcnRzLlN1c3BlbnNlPUk7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1rfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXB9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bn07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1sfTtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT12fHxhPT09ZXx8YT09PWx8fGE9PT1tfHxhPT09d3x8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PXV8fGEuJCR0eXBlb2Y9PT1xfHxhWzBdPT09cik/ITA6ITF9O1xuZXhwb3J0cy50eXBlT2Y9eTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiY29uc3QgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY29tbW9uOyIsImNvbnN0IGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZjVmNWY1JyxcbiAgQTIwMDogJyNlZWVlZWUnLFxuICBBNDAwOiAnI2JkYmRiZCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwiY29uc3QgcHVycGxlID0ge1xuICA1MDogJyNmM2U1ZjUnLFxuICAxMDA6ICcjZTFiZWU3JyxcbiAgMjAwOiAnI2NlOTNkOCcsXG4gIDMwMDogJyNiYTY4YzgnLFxuICA0MDA6ICcjYWI0N2JjJyxcbiAgNTAwOiAnIzljMjdiMCcsXG4gIDYwMDogJyM4ZTI0YWEnLFxuICA3MDA6ICcjN2IxZmEyJyxcbiAgODAwOiAnIzZhMWI5YScsXG4gIDkwMDogJyM0YTE0OGMnLFxuICBBMTAwOiAnI2VhODBmYycsXG4gIEEyMDA6ICcjZTA0MGZiJyxcbiAgQTQwMDogJyNkNTAwZjknLFxuICBBNzAwOiAnI2FhMDBmZidcbn07XG5leHBvcnQgZGVmYXVsdCBwdXJwbGU7IiwiY29uc3QgcmVkID0ge1xuICA1MDogJyNmZmViZWUnLFxuICAxMDA6ICcjZmZjZGQyJyxcbiAgMjAwOiAnI2VmOWE5YScsXG4gIDMwMDogJyNlNTczNzMnLFxuICA0MDA6ICcjZWY1MzUwJyxcbiAgNTAwOiAnI2Y0NDMzNicsXG4gIDYwMDogJyNlNTM5MzUnLFxuICA3MDA6ICcjZDMyZjJmJyxcbiAgODAwOiAnI2M2MjgyOCcsXG4gIDkwMDogJyNiNzFjMWMnLFxuICBBMTAwOiAnI2ZmOGE4MCcsXG4gIEEyMDA6ICcjZmY1MjUyJyxcbiAgQTQwMDogJyNmZjE3NDQnLFxuICBBNzAwOiAnI2Q1MDAwMCdcbn07XG5leHBvcnQgZGVmYXVsdCByZWQ7IiwiY29uc3Qgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBvcmFuZ2U7IiwiY29uc3QgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZTsiLCJjb25zdCBsaWdodEJsdWUgPSB7XG4gIDUwOiAnI2UxZjVmZScsXG4gIDEwMDogJyNiM2U1ZmMnLFxuICAyMDA6ICcjODFkNGZhJyxcbiAgMzAwOiAnIzRmYzNmNycsXG4gIDQwMDogJyMyOWI2ZjYnLFxuICA1MDA6ICcjMDNhOWY0JyxcbiAgNjAwOiAnIzAzOWJlNScsXG4gIDcwMDogJyMwMjg4ZDEnLFxuICA4MDA6ICcjMDI3N2JkJyxcbiAgOTAwOiAnIzAxNTc5YicsXG4gIEExMDA6ICcjODBkOGZmJyxcbiAgQTIwMDogJyM0MGM0ZmYnLFxuICBBNDAwOiAnIzAwYjBmZicsXG4gIEE3MDA6ICcjMDA5MWVhJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGxpZ2h0Qmx1ZTsiLCJjb25zdCBncmVlbiA9IHtcbiAgNTA6ICcjZThmNWU5JyxcbiAgMTAwOiAnI2M4ZTZjOScsXG4gIDIwMDogJyNhNWQ2YTcnLFxuICAzMDA6ICcjODFjNzg0JyxcbiAgNDAwOiAnIzY2YmI2YScsXG4gIDUwMDogJyM0Y2FmNTAnLFxuICA2MDA6ICcjNDNhMDQ3JyxcbiAgNzAwOiAnIzM4OGUzYycsXG4gIDgwMDogJyMyZTdkMzInLFxuICA5MDA6ICcjMWI1ZTIwJyxcbiAgQTEwMDogJyNiOWY2Y2EnLFxuICBBMjAwOiAnIzY5ZjBhZScsXG4gIEE0MDA6ICcjMDBlNjc2JyxcbiAgQTcwMDogJyMwMGM4NTMnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JlZW47IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm1vZGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBkYXJrZW4sIGdldENvbnRyYXN0UmF0aW8sIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY29tbW9uIGZyb20gJy4uL2NvbG9ycy9jb21tb24nO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IHB1cnBsZSBmcm9tICcuLi9jb2xvcnMvcHVycGxlJztcbmltcG9ydCByZWQgZnJvbSAnLi4vY29sb3JzL3JlZCc7XG5pbXBvcnQgb3JhbmdlIGZyb20gJy4uL2NvbG9ycy9vcmFuZ2UnO1xuaW1wb3J0IGJsdWUgZnJvbSAnLi4vY29sb3JzL2JsdWUnO1xuaW1wb3J0IGxpZ2h0Qmx1ZSBmcm9tICcuLi9jb2xvcnMvbGlnaHRCbHVlJztcbmltcG9ydCBncmVlbiBmcm9tICcuLi9jb2xvcnMvZ3JlZW4nO1xuZXhwb3J0IGNvbnN0IGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjYpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgIGRlZmF1bHQ6IGNvbW1vbi53aGl0ZVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDQsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjEyXG4gIH1cbn07XG5leHBvcnQgY29uc3QgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogJyMxMjEyMTInLFxuICAgIGRlZmF1bHQ6ICcjMTIxMjEyJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wOCxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNiknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICBjb25zdCB0b25hbE9mZnNldExpZ2h0ID0gdG9uYWxPZmZzZXQubGlnaHQgfHwgdG9uYWxPZmZzZXQ7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0RGFyayA9IHRvbmFsT2Zmc2V0LmRhcmsgfHwgdG9uYWxPZmZzZXQgKiAxLjU7XG5cbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0UHJpbWFyeShtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGJsdWVbMjAwXSxcbiAgICAgIGxpZ2h0OiBibHVlWzUwXSxcbiAgICAgIGRhcms6IGJsdWVbNDAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46IGJsdWVbNzAwXSxcbiAgICBsaWdodDogYmx1ZVs0MDBdLFxuICAgIGRhcms6IGJsdWVbODAwXVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcHVycGxlWzIwMF0sXG4gICAgICBsaWdodDogcHVycGxlWzUwXSxcbiAgICAgIGRhcms6IHB1cnBsZVs0MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogcHVycGxlWzUwMF0sXG4gICAgbGlnaHQ6IHB1cnBsZVszMDBdLFxuICAgIGRhcms6IHB1cnBsZVs3MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRFcnJvcihtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IHJlZFs1MDBdLFxuICAgICAgbGlnaHQ6IHJlZFszMDBdLFxuICAgICAgZGFyazogcmVkWzcwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiByZWRbNzAwXSxcbiAgICBsaWdodDogcmVkWzQwMF0sXG4gICAgZGFyazogcmVkWzgwMF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEluZm8obW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBsaWdodEJsdWVbNDAwXSxcbiAgICAgIGxpZ2h0OiBsaWdodEJsdWVbMzAwXSxcbiAgICAgIGRhcms6IGxpZ2h0Qmx1ZVs3MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogbGlnaHRCbHVlWzcwMF0sXG4gICAgbGlnaHQ6IGxpZ2h0Qmx1ZVs1MDBdLFxuICAgIGRhcms6IGxpZ2h0Qmx1ZVs5MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRTdWNjZXNzKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogZ3JlZW5bNDAwXSxcbiAgICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgICAgZGFyazogZ3JlZW5bNzAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46IGdyZWVuWzgwMF0sXG4gICAgbGlnaHQ6IGdyZWVuWzUwMF0sXG4gICAgZGFyazogZ3JlZW5bOTAwXVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0V2FybmluZyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IG9yYW5nZVs0MDBdLFxuICAgICAgbGlnaHQ6IG9yYW5nZVszMDBdLFxuICAgICAgZGFyazogb3JhbmdlWzcwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiAnI2VkNmMwMicsXG4gICAgLy8gY2xvc2VzdCB0byBvcmFuZ2VbODAwXSB0aGF0IHBhc3MgMzoxLlxuICAgIGxpZ2h0OiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbOTAwXVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgY29uc3Qge1xuICAgIG1vZGUgPSAnbGlnaHQnLFxuICAgIGNvbnRyYXN0VGhyZXNob2xkID0gMyxcbiAgICB0b25hbE9mZnNldCA9IDAuMlxuICB9ID0gcGFsZXR0ZSxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwYWxldHRlLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnkgfHwgZ2V0RGVmYXVsdFByaW1hcnkobW9kZSk7XG4gIGNvbnN0IHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5IHx8IGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSk7XG4gIGNvbnN0IGVycm9yID0gcGFsZXR0ZS5lcnJvciB8fCBnZXREZWZhdWx0RXJyb3IobW9kZSk7XG4gIGNvbnN0IGluZm8gPSBwYWxldHRlLmluZm8gfHwgZ2V0RGVmYXVsdEluZm8obW9kZSk7XG4gIGNvbnN0IHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MgfHwgZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSk7XG4gIGNvbnN0IHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcgfHwgZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSk7IC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhc1xuICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcblxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIGNvbnN0IGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG5cbiAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGNvbnRyYXN0IHJhdGlvIG9mICR7Y29udHJhc3R9OjEgZm9yICR7Y29udHJhc3RUZXh0fSBvbiAke2JhY2tncm91bmR9YCwgJ2ZhbGxzIGJlbG93IHRoZSBXQ0FHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuXG4gIGNvbnN0IGF1Z21lbnRDb2xvciA9ICh7XG4gICAgY29sb3IsXG4gICAgbmFtZSxcbiAgICBtYWluU2hhZGUgPSA1MDAsXG4gICAgbGlnaHRTaGFkZSA9IDMwMCxcbiAgICBkYXJrU2hhZGUgPSA3MDBcbiAgfSkgPT4ge1xuICAgIGNvbG9yID0gX2V4dGVuZHMoe30sIGNvbG9yKTtcblxuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbG9yLmhhc093blByb3BlcnR5KCdtYWluJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgXFxgbWFpblxcYCBwcm9wZXJ0eSBvciBhIFxcYCR7bWFpblNoYWRlfVxcYCBwcm9wZXJ0eS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMSwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBtYWluU2hhZGUpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yLm1haW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIGNvbG9yJHtuYW1lID8gYCAoJHtuYW1lfSlgIDogJyd9IHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cblxcYGNvbG9yLm1haW5cXGAgc2hvdWxkIGJlIGEgc3RyaW5nLCBidXQgXFxgJHtKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKX1cXGAgd2FzIHByb3ZpZGVkIGluc3RlYWQuXG5cbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xuXG5pbXBvcnQgeyBncmVlbiB9IGZyb20gXCJAbXVpL21hdGVyaWFsL2NvbG9yc1wiO1xuXG5jb25zdCB0aGVtZTEgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogZ3JlZW4sXG59IH0pO1xuXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogeyBtYWluOiBncmVlbls1MDBdIH0sXG59IH0pO2AgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEyLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pKSk7XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9O1xuXG4gIGNvbnN0IG1vZGVzID0ge1xuICAgIGRhcmssXG4gICAgbGlnaHRcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghbW9kZXNbbW9kZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHBhbGV0dGUgbW9kZSBcXGAke21vZGV9XFxgIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uLFxuICAgIC8vIFRoZSBwYWxldHRlIG1vZGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIG1vZGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogcHJpbWFyeSxcbiAgICAgIG5hbWU6ICdwcmltYXJ5J1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzZWNvbmRhcnksXG4gICAgICBuYW1lOiAnc2Vjb25kYXJ5JyxcbiAgICAgIG1haW5TaGFkZTogJ0E0MDAnLFxuICAgICAgbGlnaHRTaGFkZTogJ0EyMDAnLFxuICAgICAgZGFya1NoYWRlOiAnQTcwMCdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGVycm9yLFxuICAgICAgbmFtZTogJ2Vycm9yJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMgb3IgaW1wb3J0YW50IG1lc3NhZ2VzLlxuICAgIHdhcm5pbmc6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogd2FybmluZyxcbiAgICAgIG5hbWU6ICd3YXJuaW5nJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGluZm8sXG4gICAgICBuYW1lOiAnaW5mbydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHN1Y2Nlc3MsXG4gICAgICBuYW1lOiAnc3VjY2VzcydcbiAgICB9KSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleSxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0XG4gIH0sIG1vZGVzW21vZGVdKSwgb3RoZXIpO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiZm9udFdlaWdodEJvbGRcIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiLCBcInB4VG9SZW1cIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG5jb25zdCBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG5jb25zdCBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuLyoqXG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdGhlLXR5cGUtc3lzdGVtLmh0bWx9XG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdW5kZXJzdGFuZGluZy10eXBvZ3JhcGh5Lmh0bWx9XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIGNvbnN0IF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgICB7XG4gICAgZm9udEZhbWlseSA9IGRlZmF1bHRGb250RmFtaWx5LFxuICAgIC8vIFRoZSBkZWZhdWx0IGZvbnQgc2l6ZSBvZiB0aGUgTWF0ZXJpYWwgU3BlY2lmaWNhdGlvbi5cbiAgICBmb250U2l6ZSA9IDE0LFxuICAgIC8vIHB4XG4gICAgZm9udFdlaWdodExpZ2h0ID0gMzAwLFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyID0gNDAwLFxuICAgIGZvbnRXZWlnaHRNZWRpdW0gPSA1MDAsXG4gICAgZm9udFdlaWdodEJvbGQgPSA3MDAsXG4gICAgLy8gVGVsbCBNVUkgd2hhdCdzIHRoZSBmb250LXNpemUgb24gdGhlIGh0bWwgZWxlbWVudC5cbiAgICAvLyAxNnB4IGlzIHRoZSBkZWZhdWx0IGZvbnQtc2l6ZSB1c2VkIGJ5IGJyb3dzZXJzLlxuICAgIGh0bWxGb250U2l6ZSA9IDE2LFxuICAgIC8vIEFwcGx5IHRoZSBDU1MgcHJvcGVydGllcyB0byBhbGwgdGhlIHZhcmlhbnRzLlxuICAgIGFsbFZhcmlhbnRzLFxuICAgIHB4VG9SZW06IHB4VG9SZW0yXG4gIH0gPSBfcmVmLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgZm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICBjb25zdCBweFRvUmVtID0gcHhUb1JlbTIgfHwgKHNpemUgPT4gYCR7c2l6ZSAvIGh0bWxGb250U2l6ZSAqIGNvZWZ9cmVtYCk7XG5cbiAgY29uc3QgYnVpbGRWYXJpYW50ID0gKGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykgPT4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFdlaWdodCxcbiAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICBsaW5lSGVpZ2h0XG4gIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgIGxldHRlclNwYWNpbmc6IGAke3JvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKX1lbWBcbiAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcblxuICBjb25zdCB2YXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEuMTY3LCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEuMiwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMTY3LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4yMzUsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzNCwgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjUsIDAuMTUpLFxuICAgIGJvZHkyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE0LCAxLjQzLCAwLjE1KSxcbiAgICBidXR0b246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS43NSwgMC40LCBjYXNlQWxsQ2FwcyksXG4gICAgY2FwdGlvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMS42NiwgMC40KSxcbiAgICBvdmVybGluZTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMi42NiwgMSwgY2FzZUFsbENhcHMpXG4gIH07XG4gIHJldHVybiBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtLFxuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGRcbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJjb25zdCBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG5jb25zdCBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xuY29uc3Qgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuXG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coLi4ucHgpIHtcbiAgcmV0dXJuIFtgJHtweFswXX1weCAke3B4WzFdfXB4ICR7cHhbMl19cHggJHtweFszXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5VW1icmFPcGFjaXR5fSlgLCBgJHtweFs0XX1weCAke3B4WzVdfXB4ICR7cHhbNl19cHggJHtweFs3XX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5UGVudW1icmFPcGFjaXR5fSlgLCBgJHtweFs4XX1weCAke3B4WzldfXB4ICR7cHhbMTBdfXB4ICR7cHhbMTFdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eX0pYF0uam9pbignLCcpO1xufSAvLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcblxuXG5jb25zdCBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDIsIDEsIC0xLCAwLCAxLCAxLCAwLCAwLCAxLCAzLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDEsIC0yLCAwLCAyLCAyLCAwLCAwLCAxLCA1LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDMsIC0yLCAwLCAzLCA0LCAwLCAwLCAxLCA4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG5leHBvcnQgZGVmYXVsdCBzaGFkb3dzOyIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxuY29uc3QgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBzcGVlZERpYWw6IDEwNTAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG5leHBvcnQgZGVmYXVsdCB6SW5kZXg7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwic3BhY2luZ1wiLCBcInBhbGV0dGVcIiwgXCJ0cmFuc2l0aW9uc1wiLCBcInR5cG9ncmFwaHlcIiwgXCJzaGFwZVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgYXMgc3lzdGVtQ3JlYXRlVGhlbWUgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9ucyBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuXG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgIG1peGluczogbWl4aW5zSW5wdXQgPSB7fSxcbiAgICBwYWxldHRlOiBwYWxldHRlSW5wdXQgPSB7fSxcbiAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnNJbnB1dCA9IHt9LFxuICAgIHR5cG9ncmFwaHk6IHR5cG9ncmFwaHlJbnB1dCA9IHt9XG4gIH0gPSBvcHRpb25zLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgY29uc3Qgc3lzdGVtVGhlbWUgPSBzeXN0ZW1DcmVhdGVUaGVtZShvcHRpb25zKTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHN5c3RlbVRoZW1lLCB7XG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoc3lzdGVtVGhlbWUuYnJlYWtwb2ludHMsIHN5c3RlbVRoZW1lLnNwYWNpbmcsIG1peGluc0lucHV0KSxcbiAgICBwYWxldHRlLFxuICAgIC8vIERvbid0IHVzZSBbLi4uc2hhZG93c10gdW50aWwgeW91J3ZlIHZlcmlmaWVkIGl0cyB0cmFuc3BpbGVkIGNvZGUgaXMgbm90IGludm9raW5nIHRoZSBpdGVyYXRvciBwcm90b2NvbC5cbiAgICBzaGFkb3dzOiBzaGFkb3dzLnNsaWNlKCksXG4gICAgdHlwb2dyYXBoeTogY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHRyYW5zaXRpb25zOiBjcmVhdGVUcmFuc2l0aW9ucyh0cmFuc2l0aW9uc0lucHV0KSxcbiAgICB6SW5kZXg6IF9leHRlbmRzKHt9LCB6SW5kZXgpXG4gIH0pO1xuICBtdWlUaGVtZSA9IGRlZXBtZXJnZShtdWlUaGVtZSwgb3RoZXIpO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnN0IHN0YXRlQ2xhc3NlcyA9IFsnYWN0aXZlJywgJ2NoZWNrZWQnLCAnY29tcGxldGVkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2V4cGFuZGVkJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ3NlbGVjdGVkJ107XG5cbiAgICBjb25zdCB0cmF2ZXJzZSA9IChub2RlLCBjb21wb25lbnQpID0+IHtcbiAgICAgIGxldCBrZXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2tleV07XG5cbiAgICAgICAgaWYgKHN0YXRlQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlQ2xhc3MgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnJywga2V5KTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGAke2NvbXBvbmVudH1cXGAgY29tcG9uZW50IGluY3JlYXNlcyBgICsgYHRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIFxcYCR7a2V5fVxcYCBpbnRlcm5hbCBzdGF0ZS5gLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsIGBJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICcmLiR7c3RhdGVDbGFzc30nIHN5bnRheDpgLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICAgICAgICBbYCYuJHtzdGF0ZUNsYXNzfWBdOiBjaGlsZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBudWxsLCAyKSwgJycsICdodHRwczovL211aS5jb20vci9zdGF0ZS1jbGFzc2VzLWd1aWRlJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH0gLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG5cblxuICAgICAgICAgIG5vZGVba2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIE9iamVjdC5rZXlzKG11aVRoZW1lLmNvbXBvbmVudHMpLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gbXVpVGhlbWUuY29tcG9uZW50c1tjb21wb25lbnRdLnN0eWxlT3ZlcnJpZGVzO1xuXG4gICAgICBpZiAoc3R5bGVPdmVycmlkZXMgJiYgY29tcG9uZW50LmluZGV4T2YoJ011aScpID09PSAwKSB7XG4gICAgICAgIHRyYXZlcnNlKHN0eWxlT3ZlcnJpZGVzLCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuXG5sZXQgd2FybmVkT25jZSA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgIHdhcm5lZE9uY2UgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogdGhlIGNyZWF0ZU11aVRoZW1lIGZ1bmN0aW9uIHdhcyByZW5hbWVkIHRvIGNyZWF0ZVRoZW1lLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvc3R5bGVzJ2BcIl0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjcmVhdGVUaGVtZSguLi5hcmdzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICB0b29sYmFyOiB7XG4gICAgICBtaW5IZWlnaHQ6IDU2LFxuICAgICAgW2Ake2JyZWFrcG9pbnRzLnVwKCd4cycpfSBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpYF06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA0OFxuICAgICAgfSxcbiAgICAgIFticmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA2NFxuICAgICAgfVxuICAgIH1cbiAgfSwgbWl4aW5zKTtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXTtcbi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxuZXhwb3J0IGNvbnN0IGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuXG5leHBvcnQgY29uc3QgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gYCR7TWF0aC5yb3VuZChtaWxsaXNlY29uZHMpfW1zYDtcbn1cblxuZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICBpZiAoIWhlaWdodCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgY29uc3QgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjsgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIGNvbnN0YW50ICoqIDAuMjUgKyBjb25zdGFudCAvIDUpICogMTApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9ucyhpbnB1dFRyYW5zaXRpb25zKSB7XG4gIGNvbnN0IG1lcmdlZEVhc2luZyA9IF9leHRlbmRzKHt9LCBlYXNpbmcsIGlucHV0VHJhbnNpdGlvbnMuZWFzaW5nKTtcblxuICBjb25zdCBtZXJnZWREdXJhdGlvbiA9IF9leHRlbmRzKHt9LCBkdXJhdGlvbiwgaW5wdXRUcmFuc2l0aW9ucy5kdXJhdGlvbik7XG5cbiAgY29uc3QgY3JlYXRlID0gKHByb3BzID0gWydhbGwnXSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uT3B0aW9uID0gbWVyZ2VkRHVyYXRpb24uc3RhbmRhcmQsXG4gICAgICBlYXNpbmc6IGVhc2luZ09wdGlvbiA9IG1lcmdlZEVhc2luZy5lYXNlSW5PdXQsXG4gICAgICBkZWxheSA9IDBcbiAgICB9ID0gb3B0aW9ucyxcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgaXNTdHJpbmcgPSB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnOyAvLyBJRTExIHN1cHBvcnQsIHJlcGxhY2Ugd2l0aCBOdW1iZXIuaXNOYU5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcblxuXG4gICAgICBjb25zdCBpc051bWJlciA9IHZhbHVlID0+ICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG5cbiAgICAgIGlmICghaXNTdHJpbmcocHJvcHMpICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogQXJndW1lbnQgXCJkdXJhdGlvblwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kICR7ZHVyYXRpb25PcHRpb259LmApO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU3RyaW5nKGVhc2luZ09wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZGVsYXkpICYmICFpc1N0cmluZyhkZWxheSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBVbnJlY29nbml6ZWQgYXJndW1lbnQocykgWyR7T2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKX1dLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChhbmltYXRlZFByb3AgPT4gYCR7YW5pbWF0ZWRQcm9wfSAke3R5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKX0gJHtlYXNpbmdPcHRpb259ICR7dHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpfWApLmpvaW4oJywnKTtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGdldEF1dG9IZWlnaHREdXJhdGlvbixcbiAgICBjcmVhdGVcbiAgfSwgaW5wdXRUcmFuc2l0aW9ucywge1xuICAgIGVhc2luZzogbWVyZ2VkRWFzaW5nLFxuICAgIGR1cmF0aW9uOiBtZXJnZWREdXJhdGlvblxuICB9KTtcbn0iLCJpbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFRoZW1lOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFyaWFudFwiXTtcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiBpc0VtcHR5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PT0gMDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIHN0cmluZyBjbGFzc0tleSBiYXNlZCBvbiB0aGUgcHJvcGVydGllcyBwcm92aWRlZC4gSXQgc3RhcnRzIHdpdGggdGhlXG4gKiB2YXJpYW50IGlmIGRlZmluZWQsIGFuZCB0aGVuIGl0IGFwcGVuZHMgYWxsIG90aGVyIHByb3BlcnRpZXMgaW4gYWxwaGFiZXRpY2FsIG9yZGVyLlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIC0gdGhlIHByb3BlcnRpZXMgZm9yIHdoaWNoIHRoZSBjbGFzc0tleSBzaG91bGQgYmUgY3JlYXRlZC5cbiAqL1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb3BzVG9DbGFzc0tleShwcm9wcykge1xuICBjb25zdCB7XG4gICAgdmFyaWFudFxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgbGV0IGNsYXNzS2V5ID0gdmFyaWFudCB8fCAnJztcbiAgT2JqZWN0LmtleXMob3RoZXIpLnNvcnQoKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbG9yJykge1xuICAgICAgY2xhc3NLZXkgKz0gaXNFbXB0eShjbGFzc0tleSkgPyBwcm9wc1trZXldIDogY2FwaXRhbGl6ZShwcm9wc1trZXldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xhc3NLZXkgKz0gYCR7aXNFbXB0eShjbGFzc0tleSkgPyBrZXkgOiBjYXBpdGFsaXplKGtleSl9JHtjYXBpdGFsaXplKHByb3BzW2tleV0udG9TdHJpbmcoKSl9YDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xhc3NLZXk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm5hbWVcIiwgXCJzbG90XCIsIFwic2tpcFZhcmlhbnRzUmVzb2x2ZXJcIiwgXCJza2lwU3hcIiwgXCJvdmVycmlkZXNSZXNvbHZlclwiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJ0aGVtZVwiXSxcbiAgICAgIF9leGNsdWRlZDMgPSBbXCJ0aGVtZVwiXTtcbmltcG9ydCBzdHlsZWRFbmdpbmVTdHlsZWQgZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4IGZyb20gJy4vc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBwcm9wc1RvQ2xhc3NLZXkgZnJvbSAnLi9wcm9wc1RvQ2xhc3NLZXknO1xuXG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbmNvbnN0IGdldFN0eWxlT3ZlcnJpZGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGlmICh0aGVtZS5jb21wb25lbnRzICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0gJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXS5zdHlsZU92ZXJyaWRlcykge1xuICAgIHJldHVybiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnN0eWxlT3ZlcnJpZGVzO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBnZXRWYXJpYW50U3R5bGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGxldCB2YXJpYW50cyA9IFtdO1xuXG4gIGlmICh0aGVtZSAmJiB0aGVtZS5jb21wb25lbnRzICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0gJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXS52YXJpYW50cykge1xuICAgIHZhcmlhbnRzID0gdGhlbWUuY29tcG9uZW50c1tuYW1lXS52YXJpYW50cztcbiAgfVxuXG4gIGNvbnN0IHZhcmlhbnRzU3R5bGVzID0ge307XG4gIHZhcmlhbnRzLmZvckVhY2goZGVmaW5pdGlvbiA9PiB7XG4gICAgY29uc3Qga2V5ID0gcHJvcHNUb0NsYXNzS2V5KGRlZmluaXRpb24ucHJvcHMpO1xuICAgIHZhcmlhbnRzU3R5bGVzW2tleV0gPSBkZWZpbml0aW9uLnN0eWxlO1xuICB9KTtcbiAgcmV0dXJuIHZhcmlhbnRzU3R5bGVzO1xufTtcblxuY29uc3QgdmFyaWFudHNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzLCB0aGVtZSwgbmFtZSkgPT4ge1xuICB2YXIgX3RoZW1lJGNvbXBvbmVudHMsIF90aGVtZSRjb21wb25lbnRzJG5hbTtcblxuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSBbXTtcbiAgY29uc3QgdGhlbWVWYXJpYW50cyA9IHRoZW1lID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJGNvbXBvbmVudHMgPSB0aGVtZS5jb21wb25lbnRzKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRjb21wb25lbnRzJG5hbSA9IF90aGVtZSRjb21wb25lbnRzW25hbWVdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJGNvbXBvbmVudHMkbmFtLnZhcmlhbnRzO1xuXG4gIGlmICh0aGVtZVZhcmlhbnRzKSB7XG4gICAgdGhlbWVWYXJpYW50cy5mb3JFYWNoKHRoZW1lVmFyaWFudCA9PiB7XG4gICAgICBsZXQgaXNNYXRjaCA9IHRydWU7XG4gICAgICBPYmplY3Qua2V5cyh0aGVtZVZhcmlhbnQucHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKG93bmVyU3RhdGVba2V5XSAhPT0gdGhlbWVWYXJpYW50LnByb3BzW2tleV0gJiYgcHJvcHNba2V5XSAhPT0gdGhlbWVWYXJpYW50LnByb3BzW2tleV0pIHtcbiAgICAgICAgICBpc01hdGNoID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICB2YXJpYW50c1N0eWxlcy5wdXNoKHN0eWxlc1twcm9wc1RvQ2xhc3NLZXkodGhlbWVWYXJpYW50LnByb3BzKV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhcmlhbnRzU3R5bGVzO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEZvcndhcmRQcm9wKHByb3ApIHtcbiAgcmV0dXJuIHByb3AgIT09ICdvd25lclN0YXRlJyAmJiBwcm9wICE9PSAndGhlbWUnICYmIHByb3AgIT09ICdzeCcgJiYgcHJvcCAhPT0gJ2FzJztcbn1cbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuXG5jb25zdCBsb3dlcmNhc2VGaXJzdExldHRlciA9IHN0cmluZyA9PiB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHlsZWQoaW5wdXQgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lLFxuICAgIHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wXG4gIH0gPSBpbnB1dDtcbiAgcmV0dXJuICh0YWcsIGlucHV0T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZTogY29tcG9uZW50TmFtZSxcbiAgICAgIHNsb3Q6IGNvbXBvbmVudFNsb3QsXG4gICAgICBza2lwVmFyaWFudHNSZXNvbHZlcjogaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlcixcbiAgICAgIHNraXBTeDogaW5wdXRTa2lwU3gsXG4gICAgICBvdmVycmlkZXNSZXNvbHZlclxuICAgIH0gPSBpbnB1dE9wdGlvbnMsXG4gICAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGlucHV0T3B0aW9ucywgX2V4Y2x1ZGVkKTsgLy8gaWYgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgb3B0aW9uIGlzIGRlZmluZWQsIHRha2UgdGhlIHZhbHVlLCBvdGhlcndpc2UsIHRydWUgZm9yIHJvb3QgYW5kIGZhbHNlIGZvciBvdGhlciBzbG90cy5cblxuXG4gICAgY29uc3Qgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgPSBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyICE9PSB1bmRlZmluZWQgPyBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIDogY29tcG9uZW50U2xvdCAmJiBjb21wb25lbnRTbG90ICE9PSAnUm9vdCcgfHwgZmFsc2U7XG4gICAgY29uc3Qgc2tpcFN4ID0gaW5wdXRTa2lwU3ggfHwgZmFsc2U7XG4gICAgbGV0IGxhYmVsO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgIGxhYmVsID0gYCR7Y29tcG9uZW50TmFtZX0tJHtsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90IHx8ICdSb290Jyl9YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzaG91bGRGb3J3YXJkUHJvcDtcblxuICAgIGlmIChjb21wb25lbnRTbG90ID09PSAnUm9vdCcpIHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gcm9vdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoY29tcG9uZW50U2xvdCkge1xuICAgICAgLy8gYW55IG90aGVyIHNsb3Qgc3BlY2lmaWVkXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHNsb3RTaG91bGRGb3J3YXJkUHJvcDtcbiAgICB9XG5cbiAgICBjb25zdCBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIgPSBzdHlsZWRFbmdpbmVTdHlsZWQodGFnLCBfZXh0ZW5kcyh7XG4gICAgICBzaG91bGRGb3J3YXJkUHJvcDogc2hvdWxkRm9yd2FyZFByb3BPcHRpb24sXG4gICAgICBsYWJlbFxuICAgIH0sIG9wdGlvbnMpKTtcblxuICAgIGNvbnN0IG11aVN0eWxlZFJlc29sdmVyID0gKHN0eWxlQXJnLCAuLi5leHByZXNzaW9ucykgPT4ge1xuICAgICAgY29uc3QgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lID0gZXhwcmVzc2lvbnMgPyBleHByZXNzaW9ucy5tYXAoc3R5bGVzQXJnID0+IHtcbiAgICAgICAgLy8gT24gdGhlIHNlcnZlciBlbW90aW9uIGRvZXNuJ3QgdXNlIFJlYWN0LmZvcndhcmRSZWYgZm9yIGNyZWF0aW5nIGNvbXBvbmVudHMsIHNvIHRoZSBjcmVhdGVkXG4gICAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG4gICAgICAgIHJldHVybiB0eXBlb2Ygc3R5bGVzQXJnID09PSAnZnVuY3Rpb24nICYmIHN0eWxlc0FyZy5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGVzQXJnID8gX3JlZiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSA9IF9yZWYsXG4gICAgICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkMik7XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzQXJnKF9leHRlbmRzKHtcbiAgICAgICAgICAgIHRoZW1lOiBpc0VtcHR5KHRoZW1lSW5wdXQpID8gZGVmYXVsdFRoZW1lIDogdGhlbWVJbnB1dFxuICAgICAgICAgIH0sIG90aGVyKSk7XG4gICAgICAgIH0gOiBzdHlsZXNBcmc7XG4gICAgICB9KSA6IFtdO1xuICAgICAgbGV0IHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBzdHlsZUFyZztcblxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgb3ZlcnJpZGVzUmVzb2x2ZXIpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gaXNFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZTtcbiAgICAgICAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IGdldFN0eWxlT3ZlcnJpZGVzKGNvbXBvbmVudE5hbWUsIHRoZW1lKTtcblxuICAgICAgICAgIGlmIChzdHlsZU92ZXJyaWRlcykge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3R5bGVPdmVycmlkZXMpLmZvckVhY2goKFtzbG90S2V5LCBzbG90U3R5bGVdKSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmVkU3R5bGVPdmVycmlkZXNbc2xvdEtleV0gPSB0eXBlb2Ygc2xvdFN0eWxlID09PSAnZnVuY3Rpb24nID8gc2xvdFN0eWxlKHByb3BzKSA6IHNsb3RTdHlsZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG92ZXJyaWRlc1Jlc29sdmVyKHByb3BzLCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmICFza2lwVmFyaWFudHNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIHJldHVybiB2YXJpYW50c1Jlc29sdmVyKHByb3BzLCBnZXRWYXJpYW50U3R5bGVzKGNvbXBvbmVudE5hbWUsIHRoZW1lKSwgdGhlbWUsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFza2lwU3gpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gaXNFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZTtcbiAgICAgICAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPSBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUubGVuZ3RoIC0gZXhwcmVzc2lvbnMubGVuZ3RoO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZUFyZykgJiYgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID4gMCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSBuZXcgQXJyYXkobnVtT2ZDdXN0b21GbnNBcHBsaWVkKS5maWxsKCcnKTsgLy8gSWYgdGhlIHR5cGUgaXMgYXJyYXksIHRoYW4gd2UgbmVlZCB0byBhZGQgcGxhY2Vob2xkZXJzIGluIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIG92ZXJyaWRlcywgdmFyaWFudHMgYW5kIHRoZSBzeCBzdHlsZXMuXG5cbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IFsuLi5zdHlsZUFyZywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZy5yYXcgPSBbLi4uc3R5bGVBcmcucmF3LCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3R5bGVBcmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgZnVuY3Rpb24sIHdlIG5lZWQgdG8gZGVmaW5lIHRoZSBkZWZhdWx0IHRoZW1lLlxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICB0aGVtZTogdGhlbWVJbnB1dFxuICAgICAgICAgIH0gPSBfcmVmMixcbiAgICAgICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgX2V4Y2x1ZGVkMyk7XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVBcmcoX2V4dGVuZHMoe1xuICAgICAgICAgICAgdGhlbWU6IGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSwgb3RoZXIpKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgQ29tcG9uZW50ID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyKHRyYW5zZm9ybWVkU3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGxldCBkaXNwbGF5TmFtZTtcblxuICAgICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYCR7Y29tcG9uZW50TmFtZX0ke2NvbXBvbmVudFNsb3QgfHwgJyd9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgU3R5bGVkKCR7Z2V0RGlzcGxheU5hbWUodGFnKX0pYDtcbiAgICAgICAgfVxuXG4gICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgIH07XG5cbiAgICBpZiAoZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWcpIHtcbiAgICAgIG11aVN0eWxlZFJlc29sdmVyLndpdGhDb25maWcgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZztcbiAgICB9XG5cbiAgICByZXR1cm4gbXVpU3R5bGVkUmVzb2x2ZXI7XG4gIH07XG59IiwiaW1wb3J0IHsgY3JlYXRlU3R5bGVkLCBzaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGNvbnN0IHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHByb3AgPT4gc2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ2NsYXNzZXMnO1xuZXhwb3J0IGNvbnN0IHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuY29uc3Qgc3R5bGVkID0gY3JlYXRlU3R5bGVkKHtcbiAgZGVmYXVsdFRoZW1lLFxuICByb290U2hvdWxkRm9yd2FyZFByb3Bcbn0pO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVkOyIsImltcG9ydCB7IHVzZVRoZW1lUHJvcHMgYXMgc3lzdGVtVXNlVGhlbWVQcm9wcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lXG59KSB7XG4gIHJldHVybiBzeXN0ZW1Vc2VUaGVtZVByb3BzKHtcbiAgICBwcm9wcyxcbiAgICBuYW1lLFxuICAgIGRlZmF1bHRUaGVtZVxuICB9KTtcbn0iLCJpbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuL2dldFRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZSxcbiAgZGVmYXVsdFRoZW1lXG59KSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0pO1xuICByZXR1cm4gbWVyZ2VkUHJvcHM7XG59IiwiaW1wb3J0IHsgaW50ZXJuYWxfcmVzb2x2ZVByb3BzIGFzIHJlc29sdmVQcm9wcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSA9IHBhcmFtcztcblxuICBpZiAoIXRoZW1lIHx8ICF0aGVtZS5jb21wb25lbnRzIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcykge1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuXG4gIHJldHVybiByZXNvbHZlUHJvcHModGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMsIHByb3BzKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcblxuLyoqXG4gKiBBZGQga2V5cywgdmFsdWVzIG9mIGBkZWZhdWx0UHJvcHNgIHRoYXQgZG9lcyBub3QgZXhpc3QgaW4gYHByb3BzYFxuICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHRQcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSByZXNvbHZlZCBwcm9wc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlUHJvcHMoZGVmYXVsdFByb3BzLCBwcm9wcykge1xuICBjb25zdCBvdXRwdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuXG4gIE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcykuZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgaWYgKG91dHB1dFtwcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGNhcGl0YWxpemU7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN2Z0ljb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN2Z0ljb24nLCBzbG90KTtcbn1cbmNvbnN0IHN2Z0ljb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU3ZnSWNvbicsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JBY3Rpb24nLCAnY29sb3JFcnJvcicsICdjb2xvckRpc2FibGVkJywgJ2ZvbnRTaXplSW5oZXJpdCcsICdmb250U2l6ZVNtYWxsJywgJ2ZvbnRTaXplTWVkaXVtJywgJ2ZvbnRTaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBzdmdJY29uQ2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCIsIFwiaHRtbENvbG9yXCIsIFwiaW5oZXJpdFZpZXdCb3hcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRTdmdJY29uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zdmdJY29uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgZm9udFNpemUsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgY29sb3IgIT09ICdpbmhlcml0JyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGBmb250U2l6ZSR7Y2FwaXRhbGl6ZShmb250U2l6ZSl9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTdmdJY29uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IFN2Z0ljb25Sb290ID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlTdmdJY29uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBzdHlsZXNbYGZvbnRTaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuZm9udFNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR0cmFuc2l0aW9ucywgX3RoZW1lJHRyYW5zaXRpb25zJGNyLCBfdGhlbWUkdHJhbnNpdGlvbnMyLCBfdGhlbWUkdHJhbnNpdGlvbnMyJGQsIF90aGVtZSR0eXBvZ3JhcGh5LCBfdGhlbWUkdHlwb2dyYXBoeSRweFQsIF90aGVtZSR0eXBvZ3JhcGh5MiwgX3RoZW1lJHR5cG9ncmFwaHkyJHB4LCBfdGhlbWUkdHlwb2dyYXBoeTMsIF90aGVtZSR0eXBvZ3JhcGh5MyRweCwgX3RoZW1lJHBhbGV0dGUkb3duZXJTLCBfdGhlbWUkcGFsZXR0ZSwgX3RoZW1lJHBhbGV0dGUkb3duZXJTMiwgX3RoZW1lJHBhbGV0dGUyLCBfdGhlbWUkcGFsZXR0ZTIkYWN0aW8sIF90aGVtZSRwYWxldHRlMywgX3RoZW1lJHBhbGV0dGUzJGFjdGlvO1xuXG4gIHJldHVybiB7XG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHdpZHRoOiAnMWVtJyxcbiAgICBoZWlnaHQ6ICcxZW0nLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgIGZsZXhTaHJpbms6IDAsXG4gICAgdHJhbnNpdGlvbjogKF90aGVtZSR0cmFuc2l0aW9ucyA9IHRoZW1lLnRyYW5zaXRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR0cmFuc2l0aW9ucyRjciA9IF90aGVtZSR0cmFuc2l0aW9ucy5jcmVhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHJhbnNpdGlvbnMkY3IuY2FsbChfdGhlbWUkdHJhbnNpdGlvbnMsICdmaWxsJywge1xuICAgICAgZHVyYXRpb246IChfdGhlbWUkdHJhbnNpdGlvbnMyID0gdGhlbWUudHJhbnNpdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHRyYW5zaXRpb25zMiRkID0gX3RoZW1lJHRyYW5zaXRpb25zMi5kdXJhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0cmFuc2l0aW9uczIkZC5zaG9ydGVyXG4gICAgfSksXG4gICAgZm9udFNpemU6IHtcbiAgICAgIGluaGVyaXQ6ICdpbmhlcml0JyxcbiAgICAgIHNtYWxsOiAoKF90aGVtZSR0eXBvZ3JhcGh5ID0gdGhlbWUudHlwb2dyYXBoeSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdHlwb2dyYXBoeSRweFQgPSBfdGhlbWUkdHlwb2dyYXBoeS5weFRvUmVtKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHR5cG9ncmFwaHkkcHhULmNhbGwoX3RoZW1lJHR5cG9ncmFwaHksIDIwKSkgfHwgJzEuMjVyZW0nLFxuICAgICAgbWVkaXVtOiAoKF90aGVtZSR0eXBvZ3JhcGh5MiA9IHRoZW1lLnR5cG9ncmFwaHkpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHR5cG9ncmFwaHkyJHB4ID0gX3RoZW1lJHR5cG9ncmFwaHkyLnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeTIkcHguY2FsbChfdGhlbWUkdHlwb2dyYXBoeTIsIDI0KSkgfHwgJzEuNXJlbScsXG4gICAgICBsYXJnZTogKChfdGhlbWUkdHlwb2dyYXBoeTMgPSB0aGVtZS50eXBvZ3JhcGh5KSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR0eXBvZ3JhcGh5MyRweCA9IF90aGVtZSR0eXBvZ3JhcGh5My5weFRvUmVtKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHR5cG9ncmFwaHkzJHB4LmNhbGwoX3RoZW1lJHR5cG9ncmFwaHkzLCAzNSkpIHx8ICcyLjE4NzUnXG4gICAgfVtvd25lclN0YXRlLmZvbnRTaXplXSxcbiAgICAvLyBUT0RPIHY1IGRlcHJlY2F0ZSwgdjYgcmVtb3ZlIGZvciBzeFxuICAgIGNvbG9yOiAoX3RoZW1lJHBhbGV0dGUkb3duZXJTID0gKF90aGVtZSRwYWxldHRlID0gdGhlbWUucGFsZXR0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkcGFsZXR0ZSRvd25lclMyID0gX3RoZW1lJHBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkcGFsZXR0ZSRvd25lclMyLm1haW4pICE9IG51bGwgPyBfdGhlbWUkcGFsZXR0ZSRvd25lclMgOiB7XG4gICAgICBhY3Rpb246IChfdGhlbWUkcGFsZXR0ZTIgPSB0aGVtZS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRwYWxldHRlMiRhY3RpbyA9IF90aGVtZSRwYWxldHRlMi5hY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkcGFsZXR0ZTIkYWN0aW8uYWN0aXZlLFxuICAgICAgZGlzYWJsZWQ6IChfdGhlbWUkcGFsZXR0ZTMgPSB0aGVtZS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRwYWxldHRlMyRhY3RpbyA9IF90aGVtZSRwYWxldHRlMy5hY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkcGFsZXR0ZTMkYWN0aW8uZGlzYWJsZWQsXG4gICAgICBpbmhlcml0OiB1bmRlZmluZWRcbiAgICB9W293bmVyU3RhdGUuY29sb3JdXG4gIH07XG59KTtcbmNvbnN0IFN2Z0ljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTdmdJY29uJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yID0gJ2luaGVyaXQnLFxuICAgIGNvbXBvbmVudCA9ICdzdmcnLFxuICAgIGZvbnRTaXplID0gJ21lZGl1bScsXG4gICAgaHRtbENvbG9yLFxuICAgIGluaGVyaXRWaWV3Qm94ID0gZmFsc2UsXG4gICAgdGl0bGVBY2Nlc3MsXG4gICAgdmlld0JveCA9ICcwIDAgMjQgMjQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGZvbnRTaXplLFxuICAgIGluaGVyaXRWaWV3Qm94LFxuICAgIHZpZXdCb3hcbiAgfSk7XG5cbiAgY29uc3QgbW9yZSA9IHt9O1xuXG4gIGlmICghaW5oZXJpdFZpZXdCb3gpIHtcbiAgICBtb3JlLnZpZXdCb3ggPSB2aWV3Qm94O1xuICB9XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFN2Z0ljb25Sb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG1vcmUsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgdGl0bGVBY2Nlc3MgPyAvKiNfX1BVUkVfXyovX2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aXRsZUFjY2Vzc1xuICAgIH0pIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdmdJY29uLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBOb2RlIHBhc3NlZCBpbnRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFlvdSBjYW4gdXNlIHRoZSBgaHRtbENvbG9yYCBwcm9wIHRvIGFwcGx5IGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdhY3Rpb24nLCAnZGlzYWJsZWQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2xhcmdlJywgJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcm9vdCBub2RlIHdpbGwgaW5oZXJpdCB0aGUgY3VzdG9tIGBjb21wb25lbnRgJ3Mgdmlld0JveCBhbmQgdGhlIGB2aWV3Qm94YFxuICAgKiBwcm9wIHdpbGwgYmUgaWdub3JlZC5cbiAgICogVXNlZnVsIHdoZW4geW91IHdhbnQgdG8gcmVmZXJlbmNlIGEgY3VzdG9tIGBjb21wb25lbnRgIGFuZCBoYXZlIGBTdmdJY29uYCBwYXNzIHRoYXRcbiAgICogYGNvbXBvbmVudGAncyB2aWV3Qm94IHRvIHRoZSByb290IG5vZGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbmhlcml0Vmlld0JveDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZS1yZW5kZXJpbmcgYXR0cmlidXRlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZCBvbiB0aGVcbiAgICogW01ETiBXZWIgRG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zaGFwZS1yZW5kZXJpbmcpLlxuICAgKiBJZiB5b3UgYXJlIGhhdmluZyBpc3N1ZXMgd2l0aCBibHVycnkgaWNvbnMgeW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB0aGlzIHByb3AuXG4gICAqL1xuICBzaGFwZVJlbmRlcmluZzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqIEBkZWZhdWx0ICcwIDAgMjQgMjQnXG4gICAqL1xuICB2aWV3Qm94OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgU3ZnSWNvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdmdJY29uIGZyb20gJy4uL1N2Z0ljb24nO1xuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG11aSBwYWNrYWdlcy5cbiAqL1xuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICBjb25zdCBDb21wb25lbnQgPSAocHJvcHMsIHJlZikgPT4gLyojX19QVVJFX18qL19qc3goU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgIFwiZGF0YS10ZXN0aWRcIjogYCR7ZGlzcGxheU5hbWV9SWNvbmAsXG4gICAgcmVmOiByZWZcbiAgfSwgcHJvcHMsIHtcbiAgICBjaGlsZHJlbjogcGF0aFxuICB9KSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBOZWVkIHRvIHNldCBgZGlzcGxheU5hbWVgIG9uIHRoZSBpbm5lciBjb21wb25lbnQgZm9yIFJlYWN0Lm1lbW8uXG4gICAgLy8gUmVhY3QgcHJpb3IgdG8gMTYuMTQgaWdub3JlcyBgZGlzcGxheU5hbWVgIG9uIHRoZSB3cmFwcGVyLlxuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGAke2Rpc3BsYXlOYW1lfUljb25gO1xuICB9XG5cbiAgQ29tcG9uZW50Lm11aU5hbWUgPSBTdmdJY29uLm11aU5hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyggLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ29tcG9uZW50KSk7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfZGVib3VuY2UgYXMgZGVib3VuY2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGRlYm91bmNlOyIsImltcG9ydCB7IHVuc3RhYmxlX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiBhcyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjsiLCJpbXBvcnQgeyB1bnN0YWJsZV9kZXByZWNhdGVkUHJvcFR5cGUgYXMgZGVwcmVjYXRlZFByb3BUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBkZXByZWNhdGVkUHJvcFR5cGU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVwcmVjYXRlZFByb3BUeXBlKHZhbGlkYXRvciwgcmVhc29uKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICgpID0+IG51bGw7XG4gIH1cblxuICByZXR1cm4gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgVGhlICR7bG9jYXRpb259IFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgb2YgYCArIGBcXGAke2NvbXBvbmVudE5hbWVTYWZlfVxcYCBpcyBkZXByZWNhdGVkLiAke3JlYXNvbn1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9yZXF1aXJlUHJvcEZhY3RvcnkgYXMgcmVxdWlyZVByb3BGYWN0b3J5IH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCByZXF1aXJlUHJvcEZhY3Rvcnk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlUHJvcEZhY3RvcnkoY29tcG9uZW50TmFtZUluRXJyb3IsIENvbXBvbmVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoKSA9PiBudWxsO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzXG5cblxuICBjb25zdCBwcmV2UHJvcFR5cGVzID0gQ29tcG9uZW50ID8gX2V4dGVuZHMoe30sIENvbXBvbmVudC5wcm9wVHlwZXMpIDogbnVsbDtcblxuICBjb25zdCByZXF1aXJlUHJvcCA9IHJlcXVpcmVkUHJvcCA9PiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCAuLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICBjb25zdCBkZWZhdWx0VHlwZUNoZWNrZXIgPSBwcmV2UHJvcFR5cGVzID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UHJvcFR5cGVzW3Byb3BGdWxsTmFtZVNhZmVdO1xuXG4gICAgaWYgKGRlZmF1bHRUeXBlQ2hlY2tlcikge1xuICAgICAgY29uc3QgdHlwZUNoZWNrZXJSZXN1bHQgPSBkZWZhdWx0VHlwZUNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCAuLi5hcmdzKTtcblxuICAgICAgaWYgKHR5cGVDaGVja2VyUmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB0eXBlQ2hlY2tlclJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXByb3BzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSBwcm9wIFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgb2YgYCArIGBcXGAke2NvbXBvbmVudE5hbWVJbkVycm9yfVxcYCBjYW4gb25seSBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggdGhlIFxcYCR7cmVxdWlyZWRQcm9wfVxcYCBwcm9wLmApO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiByZXF1aXJlUHJvcDtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9zZXRSZWYgYXMgc2V0UmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBzZXRSZWY7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xubGV0IGdsb2JhbElkID0gMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlkKGlkT3ZlcnJpZGUpIHtcbiAgY29uc3QgW2RlZmF1bHRJZCwgc2V0RGVmYXVsdElkXSA9IFJlYWN0LnVzZVN0YXRlKGlkT3ZlcnJpZGUpO1xuICBjb25zdCBpZCA9IGlkT3ZlcnJpZGUgfHwgZGVmYXVsdElkO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkZWZhdWx0SWQgPT0gbnVsbCkge1xuICAgICAgLy8gRmFsbGJhY2sgdG8gdGhpcyBkZWZhdWx0IGlkIHdoZW4gcG9zc2libGUuXG4gICAgICAvLyBVc2UgdGhlIGluY3JlbWVudGluZyB2YWx1ZSBmb3IgY2xpZW50LXNpZGUgcmVuZGVyaW5nIG9ubHkuXG4gICAgICAvLyBXZSBjYW4ndCB1c2UgaXQgc2VydmVyLXNpZGUuXG4gICAgICAvLyBJZiB5b3Ugd2FudCB0byB1c2UgcmFuZG9tIHZhbHVlcyBwbGVhc2UgY29uc2lkZXIgdGhlIEJpcnRoZGF5IFByb2JsZW06IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JpcnRoZGF5X3Byb2JsZW1cbiAgICAgIGdsb2JhbElkICs9IDE7XG4gICAgICBzZXREZWZhdWx0SWQoYG11aS0ke2dsb2JhbElkfWApO1xuICAgIH1cbiAgfSwgW2RlZmF1bHRJZF0pO1xuICByZXR1cm4gaWQ7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlSWQgYXMgdXNlSWQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUlkOyIsImltcG9ydCB7IHVuc3RhYmxlX3Vuc3VwcG9ydGVkUHJvcCBhcyB1bnN1cHBvcnRlZFByb3AgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVuc3VwcG9ydGVkUHJvcDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnN1cHBvcnRlZFByb3AocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSBwcm9wIFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHJlbW92ZSBpdC5gKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX2lzTXVpRWxlbWVudCBhcyBpc011aUVsZW1lbnQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGlzTXVpRWxlbWVudDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc011aUVsZW1lbnQoZWxlbWVudCwgbXVpTmFtZXMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSAmJiBtdWlOYW1lcy5pbmRleE9mKGVsZW1lbnQudHlwZS5tdWlOYW1lKSAhPT0gLTE7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfb3duZXJEb2N1bWVudCBhcyBvd25lckRvY3VtZW50IH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBvd25lckRvY3VtZW50OyIsImltcG9ydCB7IHVuc3RhYmxlX293bmVyV2luZG93IGFzIG93bmVyV2luZG93IH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBvd25lcldpbmRvdzsiLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VDb250cm9sbGVkIGFzIHVzZUNvbnRyb2xsZWQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUNvbnRyb2xsZWQ7IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUV2ZW50Q2FsbGJhY2sgYXMgdXNlRXZlbnRDYWxsYmFjayB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRXZlbnRDYWxsYmFjazsiLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUZvcmtSZWY7IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlSXNGb2N1c1Zpc2libGUgYXMgdXNlSXNGb2N1c1Zpc2libGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUlzRm9jdXNWaXNpYmxlOyIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8ZW50ZXJLZXlIaW50fGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHJhbnNsYXRlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5jcmVtZW50YWx8ZmFsbGJhY2t8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufG9wdGlvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpc1Byb3BWYWxpZCA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IGRlZmF1bHQgaXNQcm9wVmFsaWQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc1Byb3BWYWxpZCBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCB7IHdpdGhFbW90aW9uQ2FjaGUsIFRoZW1lQ29udGV4dCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5cbnZhciB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgPSBpc1Byb3BWYWxpZDtcblxudmFyIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCA9IGZ1bmN0aW9uIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudChrZXkpIHtcbiAgcmV0dXJuIGtleSAhPT0gJ3RoZW1lJztcbn07XG5cbnZhciBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBmdW5jdGlvbiBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJiAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2ID8gdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnIDogdGVzdE9taXRQcm9wc09uQ29tcG9uZW50O1xufTtcbnZhciBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzID0gZnVuY3Rpb24gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCkge1xuICB2YXIgc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID0gb3B0aW9ucy5zaG91bGRGb3J3YXJkUHJvcDtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID8gZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICByZXR1cm4gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcChwcm9wTmFtZSkgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wKHByb3BOYW1lKTtcbiAgICB9IDogb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzaG91bGRGb3J3YXJkUHJvcCAhPT0gJ2Z1bmN0aW9uJyAmJiBpc1JlYWwpIHtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3A7XG4gIH1cblxuICByZXR1cm4gc2hvdWxkRm9yd2FyZFByb3A7XG59O1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xuXG52YXIgTm9vcCA9IGZ1bmN0aW9uIE5vb3AoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlZCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGFyZSB0cnlpbmcgdG8gY3JlYXRlIGEgc3R5bGVkIGVsZW1lbnQgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LlxcbllvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc1JlYWwgPSB0YWcuX19lbW90aW9uX3JlYWwgPT09IHRhZztcbiAgdmFyIGJhc2VUYWcgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9iYXNlIHx8IHRhZztcbiAgdmFyIGlkZW50aWZpZXJOYW1lO1xuICB2YXIgdGFyZ2V0Q2xhc3NOYW1lO1xuXG4gIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZGVudGlmaWVyTmFtZSA9IG9wdGlvbnMubGFiZWw7XG4gICAgdGFyZ2V0Q2xhc3NOYW1lID0gb3B0aW9ucy50YXJnZXQ7XG4gIH1cblxuICB2YXIgc2hvdWxkRm9yd2FyZFByb3AgPSBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKTtcbiAgdmFyIGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wIHx8IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChiYXNlVGFnKTtcbiAgdmFyIHNob3VsZFVzZUFzID0gIWRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCgnYXMnKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3R5bGVzID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQgPyB0YWcuX19lbW90aW9uX3N0eWxlcy5zbGljZSgwKSA6IFtdO1xuXG4gICAgaWYgKGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoKFwibGFiZWw6XCIgKyBpZGVudGlmaWVyTmFtZSArIFwiO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnc1swXSA9PSBudWxsIHx8IGFyZ3NbMF0ucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoLmFwcGx5KHN0eWxlcywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1bMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzLnB1c2goYXJnc1swXVswXSk7XG4gICAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgICB2YXIgaSA9IDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXMucHVzaChhcmdzW2ldLCBhcmdzWzBdW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWU6IHdlIG5lZWQgdG8gY2FzdCBTdGF0ZWxlc3NGdW5jdGlvbmFsQ29tcG9uZW50IHRvIG91ciBQcml2YXRlU3R5bGVkQ29tcG9uZW50IGNsYXNzXG5cblxuICAgIHZhciBTdHlsZWQgPSB3aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICAgICAgdmFyIGZpbmFsVGFnID0gc2hvdWxkVXNlQXMgJiYgcHJvcHMuYXMgfHwgYmFzZVRhZztcbiAgICAgIHZhciBjbGFzc05hbWUgPSAnJztcbiAgICAgIHZhciBjbGFzc0ludGVycG9sYXRpb25zID0gW107XG4gICAgICB2YXIgbWVyZ2VkUHJvcHMgPSBwcm9wcztcblxuICAgICAgaWYgKHByb3BzLnRoZW1lID09IG51bGwpIHtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICBtZXJnZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lcmdlZFByb3BzLnRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCBjbGFzc0ludGVycG9sYXRpb25zLCBwcm9wcy5jbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoc3R5bGVzLmNvbmNhdChjbGFzc0ludGVycG9sYXRpb25zKSwgY2FjaGUucmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpO1xuICAgICAgdmFyIHJ1bGVzID0gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCB0eXBlb2YgZmluYWxUYWcgPT09ICdzdHJpbmcnKTtcbiAgICAgIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZSArPSBcIiBcIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRVc2VBcyAmJiBzaG91bGRGb3J3YXJkUHJvcCA9PT0gdW5kZWZpbmVkID8gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKGZpbmFsVGFnKSA6IGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcDtcbiAgICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBfa2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRVc2VBcyAmJiBfa2V5ID09PSAnYXMnKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoIC8vICRGbG93Rml4TWVcbiAgICAgICAgZmluYWxTaG91bGRGb3J3YXJkUHJvcChfa2V5KSkge1xuICAgICAgICAgIG5ld1Byb3BzW19rZXldID0gcHJvcHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgbmV3UHJvcHMucmVmID0gcmVmO1xuICAgICAgdmFyIGVsZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KGZpbmFsVGFnLCBuZXdQcm9wcyk7XG4gICAgICB2YXIgcG9zc2libHlTdHlsZUVsZW1lbnQgPSAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChOb29wLCBudWxsKTtcblxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIHBvc3NpYmx5U3R5bGVFbGVtZW50LCBlbGUpO1xuICAgIH0pO1xuICAgIFN0eWxlZC5kaXNwbGF5TmFtZSA9IGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQgPyBpZGVudGlmaWVyTmFtZSA6IFwiU3R5bGVkKFwiICsgKHR5cGVvZiBiYXNlVGFnID09PSAnc3RyaW5nJyA/IGJhc2VUYWcgOiBiYXNlVGFnLmRpc3BsYXlOYW1lIHx8IGJhc2VUYWcubmFtZSB8fCAnQ29tcG9uZW50JykgKyBcIilcIjtcbiAgICBTdHlsZWQuZGVmYXVsdFByb3BzID0gdGFnLmRlZmF1bHRQcm9wcztcbiAgICBTdHlsZWQuX19lbW90aW9uX3JlYWwgPSBTdHlsZWQ7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9iYXNlID0gYmFzZVRhZztcbiAgICBTdHlsZWQuX19lbW90aW9uX3N0eWxlcyA9IHN0eWxlcztcbiAgICBTdHlsZWQuX19lbW90aW9uX2ZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0eWxlZCwgJ3RvU3RyaW5nJywge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lID09PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHJldHVybiAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJztcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lOiBjb2VyY2UgdW5kZWZpbmVkIHRvIHN0cmluZ1xuXG5cbiAgICAgICAgcmV0dXJuIFwiLlwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgU3R5bGVkLndpdGhDb21wb25lbnQgPSBmdW5jdGlvbiAobmV4dFRhZywgbmV4dE9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVTdHlsZWQobmV4dFRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIG5leHRPcHRpb25zLCB7XG4gICAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKFN0eWxlZCwgbmV4dE9wdGlvbnMsIHRydWUpXG4gICAgICB9KSkuYXBwbHkodm9pZCAwLCBzdHlsZXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3R5bGVkO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3R5bGVkO1xuIiwiaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdyZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuLi9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0ICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuXG52YXIgdGFncyA9IFsnYScsICdhYmJyJywgJ2FkZHJlc3MnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2F1ZGlvJywgJ2InLCAnYmFzZScsICdiZGknLCAnYmRvJywgJ2JpZycsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhbnZhcycsICdjYXB0aW9uJywgJ2NpdGUnLCAnY29kZScsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGF0YScsICdkYXRhbGlzdCcsICdkZCcsICdkZWwnLCAnZGV0YWlscycsICdkZm4nLCAnZGlhbG9nJywgJ2RpdicsICdkbCcsICdkdCcsICdlbScsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaW5zJywgJ2tiZCcsICdrZXlnZW4nLCAnbGFiZWwnLCAnbGVnZW5kJywgJ2xpJywgJ2xpbmsnLCAnbWFpbicsICdtYXAnLCAnbWFyaycsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICdtZXRlcicsICduYXYnLCAnbm9zY3JpcHQnLCAnb2JqZWN0JywgJ29sJywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdvdXRwdXQnLCAncCcsICdwYXJhbScsICdwaWN0dXJlJywgJ3ByZScsICdwcm9ncmVzcycsICdxJywgJ3JwJywgJ3J0JywgJ3J1YnknLCAncycsICdzYW1wJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzbWFsbCcsICdzb3VyY2UnLCAnc3BhbicsICdzdHJvbmcnLCAnc3R5bGUnLCAnc3ViJywgJ3N1bW1hcnknLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpbWUnLCAndGl0bGUnLCAndHInLCAndHJhY2snLCAndScsICd1bCcsICd2YXInLCAndmlkZW8nLCAnd2JyJywgLy8gU1ZHXG4nY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2RlZnMnLCAnZWxsaXBzZScsICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICdzdmcnLCAndGV4dCcsICd0c3BhbiddO1xuXG52YXIgbmV3U3R5bGVkID0gY3JlYXRlU3R5bGVkLmJpbmQoKTtcbnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnTmFtZSkge1xuICAvLyAkRmxvd0ZpeE1lOiB3ZSBjYW4gaWdub3JlIHRoaXMgYmVjYXVzZSBpdHMgZXhwb3NlZCB0eXBlIGlzIGRlZmluZWQgYnkgdGhlIENyZWF0ZVN0eWxlZCB0eXBlXG4gIG5ld1N0eWxlZFt0YWdOYW1lXSA9IG5ld1N0eWxlZCh0YWdOYW1lKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBuZXdTdHlsZWQ7XG4iLCIvKiogQGxpY2Vuc2UgTVVJIHY1LjMuMFxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgZW1TdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IGVtU3R5bGVkKHRhZywgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKC4uLnN0eWxlcykgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyBgXCIke3RhZ31cImAgOiAnY29tcG9uZW50JztcblxuICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogU2VlbXMgbGlrZSB5b3UgY2FsbGVkIFxcYHN0eWxlZCgke2NvbXBvbmVudH0pKClcXGAgd2l0aG91dCBhIFxcYHN0eWxlXFxgIGFyZ3VtZW50LmAsICdZb3UgbXVzdCBwcm92aWRlIGEgYHN0eWxlc2AgYXJndW1lbnQ6IGBzdHlsZWQoXCJkaXZcIikoc3R5bGVZb3VGb3Jnb3RUb1Bhc3MpYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcy5zb21lKHN0eWxlID0+IHN0eWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogdGhlIHN0eWxlZCgke2NvbXBvbmVudH0pKC4uLmFyZ3MpIEFQSSByZXF1aXJlcyBhbGwgaXRzIGFyZ3MgdG8gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlc0ZhY3RvcnkoLi4uc3R5bGVzKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlc0ZhY3Rvcnk7XG59XG5leHBvcnQgeyBUaGVtZUNvbnRleHQsIGtleWZyYW1lcywgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdHlsZWRFbmdpbmVQcm92aWRlciB9IGZyb20gJy4vU3R5bGVkRW5naW5lUHJvdmlkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHbG9iYWxTdHlsZXMgfSBmcm9tICcuL0dsb2JhbFN0eWxlcyc7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7IC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuXG5leHBvcnQgY29uc3QgdmFsdWVzID0ge1xuICB4czogMCxcbiAgLy8gcGhvbmVcbiAgc206IDYwMCxcbiAgLy8gdGFibGV0XG4gIG1kOiA5MDAsXG4gIC8vIHNtYWxsIGxhcHRvcFxuICBsZzogMTIwMCxcbiAgLy8gZGVza3RvcFxuICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cblxufTtcbmNvbnN0IGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGtleSA9PiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZXNba2V5XX1weClgXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIC8vIGtleSBpcyBicmVha3BvaW50XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cy52YWx1ZXMgfHwgdmFsdWVzKS5pbmRleE9mKGJyZWFrcG9pbnQpICE9PSAtMSkge1xuICAgICAgICBjb25zdCBtZWRpYUtleSA9IHRoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCk7XG4gICAgICAgIGFjY1ttZWRpYUtleV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdLCBicmVha3BvaW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNzc0tleSA9IGJyZWFrcG9pbnQ7XG4gICAgICAgIGFjY1tjc3NLZXldID0gcHJvcFZhbHVlW2Nzc0tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgY29uc3Qgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgY29uc3QgbmV3U3R5bGVGdW5jdGlvbiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICAgIGNvbnN0IGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIGNvbnN0IGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcblxuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIC4uLnN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHNdO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0ID0ge30pIHtcbiAgdmFyIF9icmVha3BvaW50c0lucHV0JGtleTtcblxuICBjb25zdCBicmVha3BvaW50c0luT3JkZXIgPSBicmVha3BvaW50c0lucHV0ID09IG51bGwgPyB2b2lkIDAgOiAoX2JyZWFrcG9pbnRzSW5wdXQka2V5ID0gYnJlYWtwb2ludHNJbnB1dC5rZXlzKSA9PSBudWxsID8gdm9pZCAwIDogX2JyZWFrcG9pbnRzSW5wdXQka2V5LnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50U3R5bGVLZXkgPSBicmVha3BvaW50c0lucHV0LnVwKGtleSk7XG4gICAgYWNjW2JyZWFrcG9pbnRTdHlsZUtleV0gPSB7fTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBicmVha3BvaW50c0luT3JkZXIgfHwge307XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludEtleXMsIHN0eWxlKSB7XG4gIHJldHVybiBicmVha3BvaW50S2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludE91dHB1dCA9IGFjY1trZXldO1xuICAgIGNvbnN0IGlzQnJlYWtwb2ludFVudXNlZCA9ICFicmVha3BvaW50T3V0cHV0IHx8IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRPdXRwdXQpLmxlbmd0aCA9PT0gMDtcblxuICAgIGlmIChpc0JyZWFrcG9pbnRVbnVzZWQpIHtcbiAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBzdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VCcmVha3BvaW50c0luT3JkZXIoYnJlYWtwb2ludHNJbnB1dCwgLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IG1lcmdlZE91dHB1dCA9IFtlbXB0eUJyZWFrcG9pbnRzLCAuLi5zdHlsZXNdLnJlZHVjZSgocHJldiwgbmV4dCkgPT4gZGVlcG1lcmdlKHByZXYsIG5leHQpLCB7fSk7XG4gIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKSwgbWVyZ2VkT3V0cHV0KTtcbn0gLy8gY29tcHV0ZSBiYXNlIGZvciByZXNwb25zaXZlIHZhbHVlczsgZS5nLixcbi8vIFsxLDIsM10gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG4vLyB7eHM6IDEsIHNtOiAyLCBtZDogM30gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpIHtcbiAgLy8gZml4ZWQgdmFsdWVcbiAgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGJhc2UgPSB7fTtcbiAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cyk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaCgoYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgICAgaWYgKGkgPCBicmVha3BvaW50VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICAgIGlmIChicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gIHZhbHVlczogYnJlYWtwb2ludFZhbHVlcyxcbiAgYnJlYWtwb2ludHM6IHRoZW1lQnJlYWtwb2ludHMsXG4gIGJhc2U6IGN1c3RvbUJhc2Vcbn0pIHtcbiAgY29uc3QgYmFzZSA9IGN1c3RvbUJhc2UgfHwgY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGJhc2UpO1xuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBicmVha3BvaW50VmFsdWVzO1xuICB9XG5cbiAgbGV0IHByZXZpb3VzO1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2ldICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2ldIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXSB8fCBicmVha3BvaW50VmFsdWVzO1xuICAgICAgcHJldmlvdXMgPSBicmVha3BvaW50O1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgJHt2YWx1ZX0gaXMgb3V0IG9mIHJhbmdlIFske21pbn0sICR7bWF4fV0uYCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zdWJzdHIoMSk7XG4gIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgLnsxLCR7Y29sb3IubGVuZ3RoID49IDYgPyAyIDogMX19YCwgJ2cnKTtcbiAgbGV0IGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcblxuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKG4gPT4gbiArIG4pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IGByZ2Ike2NvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJ30oJHtjb2xvcnMubWFwKChuLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKX0pYCA6ICcnO1xufVxuXG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgY29uc3QgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBgMCR7aGV4fWAgOiBoZXg7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG5cbiAgY29uc3QgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICBjb25zdCB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG5cbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBVbnN1cHBvcnRlZCBcXGAke2NvbG9yfVxcYCBjb2xvci5cblRoZSBmb2xsb3dpbmcgZm9ybWF0cyBhcmUgc3VwcG9ydGVkOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDksIGNvbG9yKSk7XG4gIH1cblxuICBsZXQgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpO1xuICBsZXQgY29sb3JTcGFjZTtcblxuICBpZiAodHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnICcpO1xuICAgIGNvbG9yU3BhY2UgPSB2YWx1ZXMuc2hpZnQoKTtcblxuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSA0ICYmIHZhbHVlc1szXS5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgdmFsdWVzWzNdID0gdmFsdWVzWzNdLnN1YnN0cigxKTtcbiAgICB9XG5cbiAgICBpZiAoWydzcmdiJywgJ2Rpc3BsYXktcDMnLCAnYTk4LXJnYicsICdwcm9waG90by1yZ2InLCAncmVjLTIwMjAnXS5pbmRleE9mKGNvbG9yU3BhY2UpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IHVuc3VwcG9ydGVkIFxcYCR7Y29sb3JTcGFjZX1cXGAgY29sb3Igc3BhY2UuXG5UaGUgZm9sbG93aW5nIGNvbG9yIHNwYWNlcyBhcmUgc3VwcG9ydGVkOiBzcmdiLCBkaXNwbGF5LXAzLCBhOTgtcmdiLCBwcm9waG90by1yZ2IsIHJlYy0yMDIwLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEwLCBjb2xvclNwYWNlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnLCcpO1xuICB9XG5cbiAgdmFsdWVzID0gdmFsdWVzLm1hcCh2YWx1ZSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXMsXG4gICAgY29sb3JTcGFjZVxuICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIGNvbG9yU3BhY2VcbiAgfSA9IGNvbG9yO1xuICBsZXQge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG5cbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoKG4sIGkpID0+IGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbik7XG4gIH0gZWxzZSBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBgJHt2YWx1ZXNbMV19JWA7XG4gICAgdmFsdWVzWzJdID0gYCR7dmFsdWVzWzJdfSVgO1xuICB9XG5cbiAgaWYgKHR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXMgPSBgJHtjb2xvclNwYWNlfSAke3ZhbHVlcy5qb2luKCcgJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSBgJHt2YWx1ZXMuam9pbignLCAnKX1gO1xuICB9XG5cbiAgcmV0dXJuIGAke3R5cGV9KCR7dmFsdWVzfSlgO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gYCMke3ZhbHVlcy5tYXAoKG4sIGkpID0+IGludFRvSGV4KGkgPT09IDMgPyBNYXRoLnJvdW5kKDI1NSAqIG4pIDogbikpLmpvaW4oJycpfWA7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcbiAgY29uc3QgaCA9IHZhbHVlc1swXTtcbiAgY29uc3QgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgY29uc3QgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG5cbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuXG4gIGxldCB0eXBlID0gJ3JnYic7XG4gIGNvbnN0IHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgbGV0IHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnID8gZGVjb21wb3NlQ29sb3IoaHNsVG9SZ2IoY29sb3IpKS52YWx1ZXMgOiBjb2xvci52YWx1ZXM7XG4gIHJnYiA9IHJnYi5tYXAodmFsID0+IHtcbiAgICBpZiAoY29sb3IudHlwZSAhPT0gJ2NvbG9yJykge1xuICAgICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuICAgIH1cblxuICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogKCh2YWwgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40O1xuICB9KTsgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcblxuICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICBjb25zdCBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICBjb25zdCBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cbi8qKlxuICogU2V0cyB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFscGhhKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IGAvJHt2YWx1ZX1gO1xuICB9IGVsc2Uge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEgfHwgY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG9yLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50ID0gMC4xNSkge1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXTtcbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbmV4cG9ydCBjb25zdCBicmVha3BvaW50S2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTsgLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIGNvbnN0IHtcbiAgICAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbiAgICAvLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbSkuXG4gICAgdmFsdWVzID0ge1xuICAgICAgeHM6IDAsXG4gICAgICAvLyBwaG9uZVxuICAgICAgc206IDYwMCxcbiAgICAgIC8vIHRhYmxldFxuICAgICAgbWQ6IDkwMCxcbiAgICAgIC8vIHNtYWxsIGxhcHRvcFxuICAgICAgbGc6IDEyMDAsXG4gICAgICAvLyBkZXNrdG9wXG4gICAgICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cblxuICAgIH0sXG4gICAgdW5pdCA9ICdweCcsXG4gICAgc3RlcCA9IDVcbiAgfSA9IGJyZWFrcG9pbnRzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGJyZWFrcG9pbnRzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xuXG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZX0ke3VuaXR9KWA7XG4gIH1cblxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBgQG1lZGlhIChtYXgtd2lkdGg6JHt2YWx1ZSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG5cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0fSR7dW5pdH0pIGFuZCBgICsgYChtYXgtd2lkdGg6JHsoZW5kSW5kZXggIT09IC0xICYmIHR5cGVvZiB2YWx1ZXNba2V5c1tlbmRJbmRleF1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4XV0gOiBlbmQpIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIGlmIChrZXlzLmluZGV4T2Yoa2V5KSArIDEgPCBrZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXlzW2tleXMuaW5kZXhPZihrZXkpICsgMV0pO1xuICAgIH1cblxuICAgIHJldHVybiB1cChrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90KGtleSkge1xuICAgIC8vIGhhbmRsZSBmaXJzdCBhbmQgbGFzdCBrZXkgc2VwYXJhdGVseSwgZm9yIGJldHRlciByZWFkYWJpbGl0eVxuICAgIGNvbnN0IGtleUluZGV4ID0ga2V5cy5pbmRleE9mKGtleSk7XG5cbiAgICBpZiAoa2V5SW5kZXggPT09IDApIHtcbiAgICAgIHJldHVybiB1cChrZXlzWzFdKTtcbiAgICB9XG5cbiAgICBpZiAoa2V5SW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGRvd24oa2V5c1trZXlJbmRleF0pO1xuICAgIH1cblxuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKS5yZXBsYWNlKCdAbWVkaWEnLCAnQG1lZGlhIG5vdCBhbGwgYW5kJyk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGtleXMsXG4gICAgdmFsdWVzLFxuICAgIHVwLFxuICAgIGRvd24sXG4gICAgYmV0d2VlbixcbiAgICBvbmx5LFxuICAgIG5vdCxcbiAgICB1bml0XG4gIH0sIG90aGVyKTtcbn0iLCJjb25zdCBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJyZWFrcG9pbnRzXCIsIFwicGFsZXR0ZVwiLCBcInNwYWNpbmdcIiwgXCJzaGFwZVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUJyZWFrcG9pbnRzIGZyb20gJy4vY3JlYXRlQnJlYWtwb2ludHMnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcblxuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHNJbnB1dCA9IHt9LFxuICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dCxcbiAgICBzaGFwZTogc2hhcGVJbnB1dCA9IHt9XG4gIH0gPSBvcHRpb25zLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3Qgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHtcbiAgICBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIC8vIEluamVjdCBjb21wb25lbnQgZGVmaW5pdGlvbnMuXG4gICAgcGFsZXR0ZTogX2V4dGVuZHMoe1xuICAgICAgbW9kZTogJ2xpZ2h0J1xuICAgIH0sIHBhbGV0dGVJbnB1dCksXG4gICAgc3BhY2luZyxcbiAgICBzaGFwZTogX2V4dGVuZHMoe30sIHNoYXBlLCBzaGFwZUlucHV0KVxuICB9LCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICByZXR1cm4gbXVpVGhlbWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZyB9IGZyb20gJy4uL3NwYWNpbmcnO1xuXG4vKiB0c2xpbnQ6ZW5hYmxlOnVuaWZpZWQtc2lnbmF0dXJlcyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQgPSA4KSB7XG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfSAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkLCB3aGljaCBhbGlnbnMgYm90aCBzcGFjaW5nIGFuZCB0aGUgb3ZlcmFsbCBsYXlvdXQuXG4gIC8vIFNtYWxsZXIgY29tcG9uZW50cywgc3VjaCBhcyBpY29ucywgY2FuIGFsaWduIHRvIGEgNGRwIGdyaWQuXG4gIC8vIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sI3VzYWdlXG5cblxuICBjb25zdCB0cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dFxuICB9KTtcblxuICBjb25zdCBzcGFjaW5nID0gKC4uLmFyZ3NJbnB1dCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzSW5wdXQubGVuZ3RoIDw9IDQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkLCBleHBlY3RlZCBiZXR3ZWVuIDAgYW5kIDQsIGdvdCAke2FyZ3NJbnB1dC5sZW5ndGh9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYXJncyA9IGFyZ3NJbnB1dC5sZW5ndGggPT09IDAgPyBbMV0gOiBhcmdzSW5wdXQ7XG4gICAgcmV0dXJuIGFyZ3MubWFwKGFyZ3VtZW50ID0+IHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IHRyYW5zZm9ybShhcmd1bWVudCk7XG4gICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ251bWJlcicgPyBgJHtvdXRwdXR9cHhgIDogb3V0cHV0O1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTtcblxuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsImltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcblxuZnVuY3Rpb24gY29tcG9zZSguLi5zdHlsZXMpIHtcbiAgY29uc3QgaGFuZGxlcnMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiB7XG4gICAgc3R5bGUuZmlsdGVyUHJvcHMuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgIGFjY1twcm9wXSA9IHN0eWxlO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gICAgICBpZiAoaGFuZGxlcnNbcHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGFjYywgaGFuZGxlcnNbcHJvcF0ocHJvcHMpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07XG5cbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IE9iamVjdC5hc3NpZ24oYWNjLCBzdHlsZS5wcm9wVHlwZXMpLCB7fSkgOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBhY2MuY29uY2F0KHN0eWxlLmZpbHRlclByb3BzKSwgW10pO1xuICByZXR1cm4gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2U7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuXG5mdW5jdGlvbiBnZXRCb3JkZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gYCR7dmFsdWV9cHggc29saWRgO1xufVxuXG5leHBvcnQgY29uc3QgYm9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclRvcCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckJvdHRvbSA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckJvdHRvbScsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyTGVmdCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJUb3BDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0Q29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSaWdodENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJCb3R0b21Db2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckxlZnRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJhZGl1cyA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmJvcmRlclJhZGl1cyAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmJvcmRlclJhZGl1cyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc2hhcGUuYm9yZGVyUmFkaXVzJywgNCwgJ2JvcmRlclJhZGl1cycpO1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBib3JkZXJSYWRpdXM6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmJvcmRlclJhZGl1cywgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbmJvcmRlclJhZGl1cy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBib3JkZXJSYWRpdXM6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuYm9yZGVyUmFkaXVzLmZpbHRlclByb3BzID0gWydib3JkZXJSYWRpdXMnXTtcbmNvbnN0IGJvcmRlcnMgPSBjb21wb3NlKGJvcmRlciwgYm9yZGVyVG9wLCBib3JkZXJSaWdodCwgYm9yZGVyQm90dG9tLCBib3JkZXJMZWZ0LCBib3JkZXJDb2xvciwgYm9yZGVyVG9wQ29sb3IsIGJvcmRlclJpZ2h0Q29sb3IsIGJvcmRlckJvdHRvbUNvbG9yLCBib3JkZXJMZWZ0Q29sb3IsIGJvcmRlclJhZGl1cyk7XG5leHBvcnQgZGVmYXVsdCBib3JkZXJzOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZGlzcGxheVByaW50ID0gc3R5bGUoe1xuICBwcm9wOiAnZGlzcGxheVByaW50JyxcbiAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICB0cmFuc2Zvcm06IHZhbHVlID0+ICh7XG4gICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgIGRpc3BsYXk6IHZhbHVlXG4gICAgfVxuICB9KVxufSk7XG5leHBvcnQgY29uc3QgZGlzcGxheVJhdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2Rpc3BsYXknXG59KTtcbmV4cG9ydCBjb25zdCBvdmVyZmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ292ZXJmbG93J1xufSk7XG5leHBvcnQgY29uc3QgdGV4dE92ZXJmbG93ID0gc3R5bGUoe1xuICBwcm9wOiAndGV4dE92ZXJmbG93J1xufSk7XG5leHBvcnQgY29uc3QgdmlzaWJpbGl0eSA9IHN0eWxlKHtcbiAgcHJvcDogJ3Zpc2liaWxpdHknXG59KTtcbmV4cG9ydCBjb25zdCB3aGl0ZVNwYWNlID0gc3R5bGUoe1xuICBwcm9wOiAnd2hpdGVTcGFjZSdcbn0pO1xuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShkaXNwbGF5UHJpbnQsIGRpc3BsYXlSYXcsIG92ZXJmbG93LCB0ZXh0T3ZlcmZsb3csIHZpc2liaWxpdHksIHdoaXRlU3BhY2UpOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZmxleEJhc2lzID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleEJhc2lzJ1xufSk7XG5leHBvcnQgY29uc3QgZmxleERpcmVjdGlvbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhEaXJlY3Rpb24nXG59KTtcbmV4cG9ydCBjb25zdCBmbGV4V3JhcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhXcmFwJ1xufSk7XG5leHBvcnQgY29uc3QganVzdGlmeUNvbnRlbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5Q29udGVudCdcbn0pO1xuZXhwb3J0IGNvbnN0IGFsaWduSXRlbXMgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnbkl0ZW1zJ1xufSk7XG5leHBvcnQgY29uc3QgYWxpZ25Db250ZW50ID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25Db250ZW50J1xufSk7XG5leHBvcnQgY29uc3Qgb3JkZXIgPSBzdHlsZSh7XG4gIHByb3A6ICdvcmRlcidcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXggPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4J1xufSk7XG5leHBvcnQgY29uc3QgZmxleEdyb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4R3Jvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXhTaHJpbmsgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4U2hyaW5rJ1xufSk7XG5leHBvcnQgY29uc3QgYWxpZ25TZWxmID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25TZWxmJ1xufSk7XG5leHBvcnQgY29uc3QganVzdGlmeUl0ZW1zID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeUl0ZW1zJ1xufSk7XG5leHBvcnQgY29uc3QganVzdGlmeVNlbGYgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5U2VsZidcbn0pO1xuY29uc3QgZmxleGJveCA9IGNvbXBvc2UoZmxleEJhc2lzLCBmbGV4RGlyZWN0aW9uLCBmbGV4V3JhcCwganVzdGlmeUNvbnRlbnQsIGFsaWduSXRlbXMsIGFsaWduQ29udGVudCwgb3JkZXIsIGZsZXgsIGZsZXhHcm93LCBmbGV4U2hyaW5rLCBhbGlnblNlbGYsIGp1c3RpZnlJdGVtcywganVzdGlmeVNlbGYpO1xuZXhwb3J0IGRlZmF1bHQgZmxleGJveDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5leHBvcnQgY29uc3QgZ2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuZ2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZ2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2dhcCcpO1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBnYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbmdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBnYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuZ2FwLmZpbHRlclByb3BzID0gWydnYXAnXTtcbmV4cG9ydCBjb25zdCBjb2x1bW5HYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5jb2x1bW5HYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5jb2x1bW5HYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnY29sdW1uR2FwJyk7XG5cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGNvbHVtbkdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuY29sdW1uR2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuY29sdW1uR2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGNvbHVtbkdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5jb2x1bW5HYXAuZmlsdGVyUHJvcHMgPSBbJ2NvbHVtbkdhcCddO1xuZXhwb3J0IGNvbnN0IHJvd0dhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLnJvd0dhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLnJvd0dhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdyb3dHYXAnKTtcblxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgcm93R2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5yb3dHYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5yb3dHYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgcm93R2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbnJvd0dhcC5maWx0ZXJQcm9wcyA9IFsncm93R2FwJ107XG5leHBvcnQgY29uc3QgZ3JpZENvbHVtbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRDb2x1bW4nXG59KTtcbmV4cG9ydCBjb25zdCBncmlkUm93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFJvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvRmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvRmxvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVDb2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZVJvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVBcmVhcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUFyZWFzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEFyZWEgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXJlYSdcbn0pO1xuY29uc3QgZ3JpZCA9IGNvbXBvc2UoZ2FwLCBjb2x1bW5HYXAsIHJvd0dhcCwgZ3JpZENvbHVtbiwgZ3JpZFJvdywgZ3JpZEF1dG9GbG93LCBncmlkQXV0b0NvbHVtbnMsIGdyaWRBdXRvUm93cywgZ3JpZFRlbXBsYXRlQ29sdW1ucywgZ3JpZFRlbXBsYXRlUm93cywgZ3JpZFRlbXBsYXRlQXJlYXMsIGdyaWRBcmVhKTtcbmV4cG9ydCBkZWZhdWx0IGdyaWQ7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCBjb25zdCBwb3NpdGlvbiA9IHN0eWxlKHtcbiAgcHJvcDogJ3Bvc2l0aW9uJ1xufSk7XG5leHBvcnQgY29uc3QgekluZGV4ID0gc3R5bGUoe1xuICBwcm9wOiAnekluZGV4JyxcbiAgdGhlbWVLZXk6ICd6SW5kZXgnXG59KTtcbmV4cG9ydCBjb25zdCB0b3AgPSBzdHlsZSh7XG4gIHByb3A6ICd0b3AnXG59KTtcbmV4cG9ydCBjb25zdCByaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ3JpZ2h0J1xufSk7XG5leHBvcnQgY29uc3QgYm90dG9tID0gc3R5bGUoe1xuICBwcm9wOiAnYm90dG9tJ1xufSk7XG5leHBvcnQgY29uc3QgbGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xlZnQnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UocG9zaXRpb24sIHpJbmRleCwgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGNvbnN0IGNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnY29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBiZ2NvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmdjb2xvcicsXG4gIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYmFja2dyb3VuZENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5jb25zdCBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvciwgYmFja2dyb3VuZENvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IHBhbGV0dGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuY29uc3QgYm94U2hhZG93ID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2hhZG93JyxcbiAgdGhlbWVLZXk6ICdzaGFkb3dzJ1xufSk7XG5leHBvcnQgZGVmYXVsdCBib3hTaGFkb3c7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCB2YWx1ZXMgYXMgYnJlYWtwb2ludHNWYWx1ZXMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcblxuZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8PSAxICYmIHZhbHVlICE9PSAwID8gYCR7dmFsdWUgKiAxMDB9JWAgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IGNvbnN0IHdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnd2lkdGgnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heFdpZHRoID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMubWF4V2lkdGggIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5tYXhXaWR0aCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiB7XG4gICAgICB2YXIgX3Byb3BzJHRoZW1lLCBfcHJvcHMkdGhlbWUkYnJlYWtwb2ksIF9wcm9wcyR0aGVtZSRicmVha3BvaTI7XG5cbiAgICAgIGNvbnN0IGJyZWFrcG9pbnQgPSAoKF9wcm9wcyR0aGVtZSA9IHByb3BzLnRoZW1lKSA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSRicmVha3BvaSA9IF9wcm9wcyR0aGVtZS5icmVha3BvaW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IChfcHJvcHMkdGhlbWUkYnJlYWtwb2kyID0gX3Byb3BzJHRoZW1lJGJyZWFrcG9pLnZhbHVlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZSRicmVha3BvaTJbcHJvcFZhbHVlXSkgfHwgYnJlYWtwb2ludHNWYWx1ZXNbcHJvcFZhbHVlXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50IHx8IHRyYW5zZm9ybShwcm9wVmFsdWUpXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLm1heFdpZHRoLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xubWF4V2lkdGguZmlsdGVyUHJvcHMgPSBbJ21heFdpZHRoJ107XG5leHBvcnQgY29uc3QgbWluV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgaGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1pbkhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3Qgc2l6ZVdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnd2lkdGgnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJveFNpemluZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNpemluZydcbn0pO1xuY29uc3Qgc2l6aW5nID0gY29tcG9zZSh3aWR0aCwgbWF4V2lkdGgsIG1pbldpZHRoLCBoZWlnaHQsIG1heEhlaWdodCwgbWluSGVpZ2h0LCBib3hTaXppbmcpO1xuZXhwb3J0IGRlZmF1bHQgc2l6aW5nOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZm9udEZhbWlseSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRGYW1pbHknLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBmb250U2l6ZSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRTaXplJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgZm9udFN0eWxlID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udFN0eWxlJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgZm9udFdlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRXZWlnaHQnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBsZXR0ZXJTcGFjaW5nID0gc3R5bGUoe1xuICBwcm9wOiAnbGV0dGVyU3BhY2luZydcbn0pO1xuZXhwb3J0IGNvbnN0IHRleHRUcmFuc2Zvcm0gPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0VHJhbnNmb3JtJ1xufSk7XG5leHBvcnQgY29uc3QgbGluZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xpbmVIZWlnaHQnXG59KTtcbmV4cG9ydCBjb25zdCB0ZXh0QWxpZ24gPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0QWxpZ24nXG59KTtcbmV4cG9ydCBjb25zdCB0eXBvZ3JhcGh5VmFyaWFudCA9IHN0eWxlKHtcbiAgcHJvcDogJ3R5cG9ncmFwaHknLFxuICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuY29uc3QgdHlwb2dyYXBoeSA9IGNvbXBvc2UodHlwb2dyYXBoeVZhcmlhbnQsIGZvbnRGYW1pbHksIGZvbnRTaXplLCBmb250U3R5bGUsIGZvbnRXZWlnaHQsIGxldHRlclNwYWNpbmcsIGxpbmVIZWlnaHQsIHRleHRBbGlnbiwgdGV4dFRyYW5zZm9ybSk7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5OyIsImltcG9ydCBib3JkZXJzIGZyb20gJy4vYm9yZGVycyc7XG5pbXBvcnQgZGlzcGxheSBmcm9tICcuL2Rpc3BsYXknO1xuaW1wb3J0IGZsZXhib3ggZnJvbSAnLi9mbGV4Ym94JztcbmltcG9ydCBncmlkIGZyb20gJy4vZ3JpZCc7XG5pbXBvcnQgcG9zaXRpb25zIGZyb20gJy4vcG9zaXRpb25zJztcbmltcG9ydCBwYWxldHRlIGZyb20gJy4vcGFsZXR0ZSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IHNpemluZyBmcm9tICcuL3NpemluZyc7XG5pbXBvcnQgc3BhY2luZyBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHR5cG9ncmFwaHkgZnJvbSAnLi90eXBvZ3JhcGh5JztcbmNvbnN0IGZpbHRlclByb3BzTWFwcGluZyA9IHtcbiAgYm9yZGVyczogYm9yZGVycy5maWx0ZXJQcm9wcyxcbiAgZGlzcGxheTogZGlzcGxheS5maWx0ZXJQcm9wcyxcbiAgZmxleGJveDogZmxleGJveC5maWx0ZXJQcm9wcyxcbiAgZ3JpZDogZ3JpZC5maWx0ZXJQcm9wcyxcbiAgcG9zaXRpb25zOiBwb3NpdGlvbnMuZmlsdGVyUHJvcHMsXG4gIHBhbGV0dGU6IHBhbGV0dGUuZmlsdGVyUHJvcHMsXG4gIHNoYWRvd3M6IHNoYWRvd3MuZmlsdGVyUHJvcHMsXG4gIHNpemluZzogc2l6aW5nLmZpbHRlclByb3BzLFxuICBzcGFjaW5nOiBzcGFjaW5nLmZpbHRlclByb3BzLFxuICB0eXBvZ3JhcGh5OiB0eXBvZ3JhcGh5LmZpbHRlclByb3BzXG59O1xuY29uc3Qgc3R5bGVGdW5jdGlvbk1hcHBpbmcgPSB7XG4gIGJvcmRlcnMsXG4gIGRpc3BsYXksXG4gIGZsZXhib3gsXG4gIGdyaWQsXG4gIHBvc2l0aW9ucyxcbiAgcGFsZXR0ZSxcbiAgc2hhZG93cyxcbiAgc2l6aW5nLFxuICBzcGFjaW5nLFxuICB0eXBvZ3JhcGh5XG59O1xuZXhwb3J0IGNvbnN0IHByb3BUb1N0eWxlRnVuY3Rpb24gPSBPYmplY3Qua2V5cyhmaWx0ZXJQcm9wc01hcHBpbmcpLnJlZHVjZSgoYWNjLCBzdHlsZUZuTmFtZSkgPT4ge1xuICBmaWx0ZXJQcm9wc01hcHBpbmdbc3R5bGVGbk5hbWVdLmZvckVhY2gocHJvcE5hbWUgPT4ge1xuICAgIGFjY1twcm9wTmFtZV0gPSBzdHlsZUZ1bmN0aW9uTWFwcGluZ1tzdHlsZUZuTmFtZV07XG4gIH0pO1xuICByZXR1cm4gYWNjO1xufSwge30pO1xuXG5mdW5jdGlvbiBnZXRUaGVtZVZhbHVlKHByb3AsIHZhbHVlLCB0aGVtZSkge1xuICBjb25zdCBpbnB1dFByb3BzID0ge1xuICAgIFtwcm9wXTogdmFsdWUsXG4gICAgdGhlbWVcbiAgfTtcbiAgY29uc3Qgc3R5bGVGdW5jdGlvbiA9IHByb3BUb1N0eWxlRnVuY3Rpb25bcHJvcF07XG4gIHJldHVybiBzdHlsZUZ1bmN0aW9uID8gc3R5bGVGdW5jdGlvbihpbnB1dFByb3BzKSA6IHtcbiAgICBbcHJvcF06IHZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRoZW1lVmFsdWU7IiwiaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5cbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCB7IGdldFBhdGggfSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZSc7XG5jb25zdCBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xuY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTtcbmNvbnN0IGFsaWFzZXMgPSB7XG4gIG1hcmdpblg6ICdteCcsXG4gIG1hcmdpblk6ICdteScsXG4gIHBhZGRpbmdYOiAncHgnLFxuICBwYWRkaW5nWTogJ3B5J1xufTsgLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcblxuY29uc3QgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUocHJvcCA9PiB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IFthLCBiXSA9IHByb3Auc3BsaXQoJycpO1xuICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGRpciA9PiBwcm9wZXJ0eSArIGRpcikgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG5jb25zdCBtYXJnaW5LZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ21hcmdpbklubGluZScsICdtYXJnaW5JbmxpbmVTdGFydCcsICdtYXJnaW5JbmxpbmVFbmQnLCAnbWFyZ2luQmxvY2snLCAnbWFyZ2luQmxvY2tTdGFydCcsICdtYXJnaW5CbG9ja0VuZCddO1xuY29uc3QgcGFkZGluZ0tleXMgPSBbJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJywgJ3BhZGRpbmdJbmxpbmUnLCAncGFkZGluZ0lubGluZVN0YXJ0JywgJ3BhZGRpbmdJbmxpbmVFbmQnLCAncGFkZGluZ0Jsb2NrJywgJ3BhZGRpbmdCbG9ja1N0YXJ0JywgJ3BhZGRpbmdCbG9ja0VuZCddO1xuY29uc3Qgc3BhY2luZ0tleXMgPSBbLi4ubWFyZ2luS2V5cywgLi4ucGFkZGluZ0tleXNdO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgdGhlbWVLZXksIGRlZmF1bHRWYWx1ZSwgcHJvcE5hbWUpIHtcbiAgY29uc3QgdGhlbWVTcGFjaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IGRlZmF1bHRWYWx1ZTtcblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEV4cGVjdGVkICR7cHJvcE5hbWV9IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLCBnb3QgJHthYnN9LmApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmcgKiBhYnM7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lU3BhY2luZykpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYWJzKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcnJheSB0eXBlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG5vbiBpbnRlZ2VyIHZhbHVlcy5gICsgYFlvdSBzaG91bGQgZWl0aGVyIHVzZSBhbiBpbnRlZ2VyIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgaW5kZXgsIG9yIGRlZmluZSB0aGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXMgYSBudW1iZXIuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2UgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICgke2Fic30pIG92ZXJmbG93cy5gLCBgVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyl9LmAsIGAke2Fic30gPiAke3RoZW1lU3BhY2luZy5sZW5ndGggLSAxfSwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aGVtZVNwYWNpbmc7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCB2YWx1ZSAoJHt0aGVtZVNwYWNpbmd9KSBpcyBpbnZhbGlkLmAsICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG5cbiAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgcmV0dXJuIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgJ3NwYWNpbmcnLCA4LCAnc3BhY2luZycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGFicyA9IE1hdGguYWJzKHByb3BWYWx1ZSk7XG4gIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtZXIoYWJzKTtcblxuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cblxuICByZXR1cm4gYC0ke3RyYW5zZm9ybWVkfWA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKSB7XG4gIHJldHVybiBwcm9wVmFsdWUgPT4gY3NzUHJvcGVydGllcy5yZWR1Y2UoKGFjYywgY3NzUHJvcGVydHkpID0+IHtcbiAgICBhY2NbY3NzUHJvcGVydHldID0gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSB7XG4gIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gIGlmIChrZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzdHlsZShwcm9wcywga2V5cykge1xuICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyhwcm9wcy50aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKHByb3AgPT4gcmVzb2x2ZUNzc1Byb3BlcnR5KHByb3BzLCBrZXlzLCBwcm9wLCB0cmFuc2Zvcm1lcikpLnJlZHVjZShtZXJnZSwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFyZ2luKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgbWFyZ2luS2V5cyk7XG59XG5tYXJnaW4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IG1hcmdpbktleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xubWFyZ2luLmZpbHRlclByb3BzID0gbWFyZ2luS2V5cztcbmV4cG9ydCBmdW5jdGlvbiBwYWRkaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgcGFkZGluZ0tleXMpO1xufVxucGFkZGluZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcGFkZGluZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xucGFkZGluZy5maWx0ZXJQcm9wcyA9IHBhZGRpbmdLZXlzO1xuXG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgc3BhY2luZ0tleXMpO1xufVxuXG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgY29uc3QgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGFyZyA9PiB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gYWNjICYmIGFjY1tpdGVtXSA/IGFjY1tpdGVtXSA6IG51bGwsIG9iaik7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCwgdXNlclZhbHVlID0gcHJvcFZhbHVlRmluYWwpIHtcbiAgbGV0IHZhbHVlO1xuXG4gIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmcocHJvcFZhbHVlRmluYWwpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVNYXBwaW5nKSkge1xuICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXSB8fCB1c2VyVmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBnZXRQYXRoKHRoZW1lTWFwcGluZywgcHJvcFZhbHVlRmluYWwpIHx8IHVzZXJWYWx1ZTtcbiAgfVxuXG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICB2YWx1ZSA9IHRyYW5zZm9ybSh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHN0eWxlKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHByb3AsXG4gICAgY3NzUHJvcGVydHkgPSBvcHRpb25zLnByb3AsXG4gICAgdGhlbWVLZXksXG4gICAgdHJhbnNmb3JtXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wc1twcm9wXSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIGNvbnN0IHRoZW1lTWFwcGluZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5KSB8fCB7fTtcblxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCk7XG5cbiAgICAgIGlmIChwcm9wVmFsdWVGaW5hbCA9PT0gdmFsdWUgJiYgdHlwZW9mIHByb3BWYWx1ZUZpbmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBIYXZlbid0IGZvdW5kIHZhbHVlXG4gICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIGAke3Byb3B9JHtwcm9wVmFsdWVGaW5hbCA9PT0gJ2RlZmF1bHQnID8gJycgOiBjYXBpdGFsaXplKHByb3BWYWx1ZUZpbmFsKX1gLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBbY3NzUHJvcGVydHldOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH07XG5cbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgICBbcHJvcF06IHJlc3BvbnNpdmVQcm9wVHlwZVxuICB9IDoge307XG4gIGZuLmZpbHRlclByb3BzID0gW3Byb3BdO1xuICByZXR1cm4gZm47XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlOyIsImltcG9ydCBtZXJnZSBmcm9tICcuLi9tZXJnZSc7XG5pbXBvcnQgZ2V0VGhlbWVWYWx1ZSwgeyBwcm9wVG9TdHlsZUZ1bmN0aW9uIH0gZnJvbSAnLi4vZ2V0VGhlbWVWYWx1ZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0LCByZW1vdmVVbnVzZWRCcmVha3BvaW50cyB9IGZyb20gJy4uL2JyZWFrcG9pbnRzJztcblxuZnVuY3Rpb24gb2JqZWN0c0hhdmVTYW1lS2V5cyguLi5vYmplY3RzKSB7XG4gIGNvbnN0IGFsbEtleXMgPSBvYmplY3RzLnJlZHVjZSgoa2V5cywgb2JqZWN0KSA9PiBrZXlzLmNvbmNhdChPYmplY3Qua2V5cyhvYmplY3QpKSwgW10pO1xuICBjb25zdCB1bmlvbiA9IG5ldyBTZXQoYWxsS2V5cyk7XG4gIHJldHVybiBvYmplY3RzLmV2ZXJ5KG9iamVjdCA9PiB1bmlvbi5zaXplID09PSBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGNhbGxJZkZuKG1heWJlRm4sIGFyZykge1xuICByZXR1cm4gdHlwZW9mIG1heWJlRm4gPT09ICdmdW5jdGlvbicgPyBtYXliZUZuKGFyZykgOiBtYXliZUZuO1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uU3gocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHN4LFxuICAgIHRoZW1lID0ge31cbiAgfSA9IHByb3BzIHx8IHt9O1xuXG4gIGlmICghc3gpIHtcbiAgICByZXR1cm4gbnVsbDsgLy8gZW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzIHdpbGwgbmVnbGVjdCBudWxsXG4gIH1cbiAgLypcbiAgICogUmVjZWl2ZSBgc3hJbnB1dGAgYXMgb2JqZWN0IG9yIGNhbGxiYWNrXG4gICAqIGFuZCB0aGVuIHJlY3Vyc2l2ZWx5IGNoZWNrIGtleXMgJiB2YWx1ZXMgdG8gY3JlYXRlIG1lZGlhIHF1ZXJ5IG9iamVjdCBzdHlsZXMuXG4gICAqICh0aGUgcmVzdWx0IHdpbGwgYmUgdXNlZCBpbiBgc3R5bGVkYClcbiAgICovXG5cblxuICBmdW5jdGlvbiB0cmF2ZXJzZShzeElucHV0KSB7XG4gICAgbGV0IHN4T2JqZWN0ID0gc3hJbnB1dDtcblxuICAgIGlmICh0eXBlb2Ygc3hJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3hPYmplY3QgPSBzeElucHV0KHRoZW1lKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzeElucHV0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgLy8gdmFsdWVcbiAgICAgIHJldHVybiBzeElucHV0O1xuICAgIH1cblxuICAgIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QodGhlbWUuYnJlYWtwb2ludHMpO1xuICAgIGNvbnN0IGJyZWFrcG9pbnRzS2V5cyA9IE9iamVjdC5rZXlzKGVtcHR5QnJlYWtwb2ludHMpO1xuICAgIGxldCBjc3MgPSBlbXB0eUJyZWFrcG9pbnRzO1xuICAgIE9iamVjdC5rZXlzKHN4T2JqZWN0KS5mb3JFYWNoKHN0eWxlS2V5ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gY2FsbElmRm4oc3hPYmplY3Rbc3R5bGVLZXldLCB0aGVtZSk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYgKHByb3BUb1N0eWxlRnVuY3Rpb25bc3R5bGVLZXldKSB7XG4gICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBicmVha3BvaW50c1ZhbHVlcyA9IGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgIH0sIHZhbHVlLCB4ID0+ICh7XG4gICAgICAgICAgICAgIFtzdHlsZUtleV06IHhcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgaWYgKG9iamVjdHNIYXZlU2FtZUtleXMoYnJlYWtwb2ludHNWYWx1ZXMsIHZhbHVlKSkge1xuICAgICAgICAgICAgICBjc3Nbc3R5bGVLZXldID0gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgICAgICAgICAgICBzeDogdmFsdWUsXG4gICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGJyZWFrcG9pbnRzVmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3NzID0gbWVyZ2UoY3NzLCBnZXRUaGVtZVZhbHVlKHN0eWxlS2V5LCB2YWx1ZSwgdGhlbWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50c0tleXMsIGNzcyk7XG4gIH1cblxuICByZXR1cm4gQXJyYXkuaXNBcnJheShzeCkgPyBzeC5tYXAodHJhdmVyc2UpIDogdHJhdmVyc2Uoc3gpO1xufVxuXG5zdHlsZUZ1bmN0aW9uU3guZmlsdGVyUHJvcHMgPSBbJ3N4J107XG5leHBvcnQgZGVmYXVsdCBzdHlsZUZ1bmN0aW9uU3g7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgVGhlbWVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSAnLi91c2VUaGVtZVdpdGhvdXREZWZhdWx0JztcbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuXG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lV2l0aG91dERlZmF1bHQoZGVmYXVsdFRoZW1lKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiaW1wb3J0IHsgdXNlVGhlbWUgYXMgbXVpVXNlVGhlbWUgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gbnVsbCkge1xuICBjb25zdCBjb250ZXh0VGhlbWUgPSBtdWlVc2VUaGVtZSgpO1xuICByZXR1cm4gIWNvbnRleHRUaGVtZSB8fCBpc09iamVjdEVtcHR5KGNvbnRleHRUaGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBjb250ZXh0VGhlbWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIi4vZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG4vLyBJdCBzaG91bGQgdG8gYmUgbm90ZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzbid0IGVxdWl2YWxlbnQgdG8gYHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplYC5cbi8vXG4vLyBBIHN0cmljdCBjYXBpdGFsaXphdGlvbiBzaG91bGQgdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkIGluIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYGNhcGl0YWxpemUoc3RyaW5nKVxcYCBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDcpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb24uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiguLi5mdW5jcykge1xuICByZXR1cm4gZnVuY3MucmVkdWNlKChhY2MsIGZ1bmMpID0+IHtcbiAgICBpZiAoZnVuYyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9LCAoKSA9PiB7fSk7XG59IiwiLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuLy8gQSBmZXcgYnl0ZXMgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyB+MyBrQiBhbmQgZGVib3VuY2UgfjMwMCBCLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCA9IDE2Nikge1xuICBsZXQgdGltZW91dDtcblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoLi4uYXJncykge1xuICAgIGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuXG4gIGRlYm91bmNlZC5jbGVhciA9ICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gIT09IG51bGwgJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyA9IHtcbiAgY2xvbmU6IHRydWVcbn0pIHtcbiAgY29uc3Qgb3V0cHV0ID0gb3B0aW9ucy5jbG9uZSA/IF9leHRlbmRzKHt9LCB0YXJnZXQpIDogdGFyZ2V0O1xuXG4gIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJiBrZXkgaW4gdGFyZ2V0ICYmIGlzUGxhaW5PYmplY3QodGFyZ2V0W2tleV0pKSB7XG4gICAgICAgIC8vIFNpbmNlIGBvdXRwdXRgIGlzIGEgY2xvbmUgb2YgYHRhcmdldGAgYW5kIHdlIGhhdmUgbmFycm93ZWQgYHRhcmdldGAgaW4gdGhpcyBibG9jayB3ZSBjYW4gY2FzdCB0byB0aGUgc2FtZSB0eXBlLlxuICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59IiwiLyoqXG4gKiBXQVJOSU5HOiBEb24ndCBpbXBvcnQgdGhpcyBkaXJlY3RseS5cbiAqIFVzZSBgTXVpRXJyb3JgIGZyb20gYEBtdWkvdXRpbHMvbWFjcm9zL011aUVycm9yLm1hY3JvYCBpbnN0ZWFkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TXVpRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgLy8gQXBwbHkgYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyBpbiBsb29zZSBtb2RlXG4gIC8vIGxvb3NlIG1vZGUgaXMgc2FmZSBpZmYgd2UncmUgY29uY2F0ZW5hdGluZyBwcmltaXRpdmVzXG4gIC8vIHNlZSBodHRwczovL2JhYmVsanMuaW8vZG9jcy9lbi9iYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzI2xvb3NlXG5cbiAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXRlbXBsYXRlICovXG4gIGxldCB1cmwgPSAnaHR0cHM6Ly9tdWkuY29tL3Byb2R1Y3Rpb24tZXJyb3IvP2NvZGU9JyArIGNvZGU7XG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyByZXN0IHBhcmFtcyBvdmVyLXRyYW5zcGlsZSBmb3IgdGhpcyBjYXNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIHVybCArPSAnJmFyZ3NbXT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cblxuICByZXR1cm4gJ01pbmlmaWVkIE1VSSBlcnJvciAjJyArIGNvZGUgKyAnOyB2aXNpdCAnICsgdXJsICsgJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZS4nO1xuICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiLyoqXG4gKiBUT0RPIHY1OiBjb25zaWRlciBtYWtpbmcgaXQgcHJpdmF0ZVxuICpcbiAqIHBhc3NlcyB7dmFsdWV9IHRvIHtyZWZ9XG4gKlxuICogV0FSTklORzogQmUgc3VyZSB0byBvbmx5IGNhbGwgdGhpcyBpbnNpZGUgYSBjYWxsYmFjayB0aGF0IGlzIHBhc3NlZCBhcyBhIHJlZi5cbiAqIE90aGVyd2lzZSwgbWFrZSBzdXJlIHRvIGNsZWFudXAgdGhlIHByZXZpb3VzIHtyZWZ9IGlmIGl0IGNoYW5nZXMuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNTM5XG4gKlxuICogVXNlZnVsIGlmIHlvdSB3YW50IHRvIGV4cG9zZSB0aGUgcmVmIG9mIGFuIGlubmVyIGNvbXBvbmVudCB0byB0aGUgcHVibGljIEFQSVxuICogd2hpbGUgc3RpbGwgdXNpbmcgaXQgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gKiBAcGFyYW0gcmVmIEEgcmVmIGNhbGxiYWNrIG9yIHJlZiBvYmplY3QuIElmIGFueXRoaW5nIGZhbHN5LCB0aGlzIGlzIGEgbm8tb3AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59IiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MsIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ29udHJvbGxlZCh7XG4gIGNvbnRyb2xsZWQsXG4gIGRlZmF1bHQ6IGRlZmF1bHRQcm9wLFxuICBuYW1lLFxuICBzdGF0ZSA9ICd2YWx1ZSdcbn0pIHtcbiAgLy8gaXNDb250cm9sbGVkIGlzIGlnbm9yZWQgaW4gdGhlIGhvb2sgZGVwZW5kZW5jeSBsaXN0cyBhcyBpdCBzaG91bGQgbmV2ZXIgY2hhbmdlLlxuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKTtcbiAgY29uc3QgW3ZhbHVlU3RhdGUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKGRlZmF1bHRQcm9wKTtcbiAgY29uc3QgdmFsdWUgPSBpc0NvbnRyb2xsZWQgPyBjb250cm9sbGVkIDogdmFsdWVTdGF0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkICE9PSAoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgJHtpc0NvbnRyb2xsZWQgPyAnJyA6ICd1bid9Y29udHJvbGxlZCAke3N0YXRlfSBzdGF0ZSBvZiAke25hbWV9IHRvIGJlICR7aXNDb250cm9sbGVkID8gJ3VuJyA6ICcnfWNvbnRyb2xsZWQuYCwgJ0VsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsIGBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICR7bmFtZX0gYCArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCBcIlRoZSBuYXR1cmUgb2YgdGhlIHN0YXRlIGlzIGRldGVybWluZWQgZHVyaW5nIHRoZSBmaXJzdCByZW5kZXIuIEl0J3MgY29uc2lkZXJlZCBjb250cm9sbGVkIGlmIHRoZSB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuXCIsICdNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtzdGF0ZSwgbmFtZSwgY29udHJvbGxlZF0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZVxuICAgIH0gPSBSZWFjdC51c2VSZWYoZGVmYXVsdFByb3ApO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWlzQ29udHJvbGxlZCAmJiBkZWZhdWx0VmFsdWUgIT09IGRlZmF1bHRQcm9wKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSBkZWZhdWx0ICR7c3RhdGV9IHN0YXRlIG9mIGFuIHVuY29udHJvbGxlZCAke25hbWV9IGFmdGVyIGJlaW5nIGluaXRpYWxpemVkLiBgICsgYFRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBvcHQgdG8gdXNlIGEgY29udHJvbGxlZCAke25hbWV9LmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbSlNPTi5zdHJpbmdpZnkoZGVmYXVsdFByb3ApXSk7XG4gIH1cblxuICBjb25zdCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3VmFsdWUgPT4ge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzZXRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBbXSk7XG4gIHJldHVybiBbdmFsdWUsIHNldFZhbHVlSWZVbmNvbnRyb2xsZWRdO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG5leHBvcnQgZGVmYXVsdCB1c2VFbmhhbmNlZEVmZmVjdDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi91c2VFbmhhbmNlZEVmZmVjdCc7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soKC4uLmFyZ3MpID0+IC8vIEB0cy1leHBlY3QtZXJyb3IgaGlkZSBgdGhpc2BcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhbi1jb21tYS1vcGVyYXRvclxuICAoMCwgcmVmLmN1cnJlbnQpKC4uLmFyZ3MpLCBbXSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuL3NldFJlZic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JrUmVmKHJlZkEsIHJlZkIpIHtcbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgdGhlIHJlZiBwcm9wcyBjaGFuZ2UgYW5kIGFyZSBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yLlxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyZWZBID09IG51bGwgJiYgcmVmQiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmVmFsdWUgPT4ge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG5sZXQgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQ7XG5jb25zdCBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICB0ZXh0OiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIHdlZWs6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG59O1xuLyoqXG4gKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkobm9kZSkge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICB0YWdOYW1lXG4gIH0gPSBub2RlO1xuXG4gIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0YWdOYW1lID09PSAnVEVYVEFSRUEnICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAobm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBLZWVwIHRyYWNrIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAqIElmIHRoZSBtb3N0IHJlY2VudCB1c2VyIGludGVyYWN0aW9uIHdhcyB2aWEgdGhlIGtleWJvYXJkO1xuICogYW5kIHRoZSBrZXkgcHJlc3MgZGlkIG5vdCBpbmNsdWRlIGEgbWV0YSwgYWx0L29wdGlvbiwgb3IgY29udHJvbCBrZXk7XG4gKiB0aGVuIHRoZSBtb2RhbGl0eSBpcyBrZXlib2FyZC4gT3RoZXJ3aXNlLCB0aGUgbW9kYWxpdHkgaXMgbm90IGtleWJvYXJkLlxuICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICBpZiAoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xufVxuLyoqXG4gKiBJZiBhdCBhbnkgcG9pbnQgYSB1c2VyIGNsaWNrcyB3aXRoIGEgcG9pbnRpbmcgZGV2aWNlLCBlbnN1cmUgdGhhdCB3ZSBjaGFuZ2VcbiAqIHRoZSBtb2RhbGl0eSBhd2F5IGZyb20ga2V5Ym9hcmQuXG4gKiBUaGlzIGF2b2lkcyB0aGUgc2l0dWF0aW9uIHdoZXJlIGEgdXNlciBwcmVzc2VzIGEga2V5IG9uIGFuIGFscmVhZHkgZm9jdXNlZFxuICogZWxlbWVudCwgYW5kIHRoZW4gY2xpY2tzIG9uIGEgZGlmZmVyZW50IGVsZW1lbnQsIGZvY3VzaW5nIGl0IHdpdGggYVxuICogcG9pbnRpbmcgZGV2aWNlLCB3aGlsZSB3ZSBzdGlsbCB0aGluayB3ZSdyZSBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZVBvaW50ZXJEb3duKCkge1xuICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gIGlmICh0aGlzLnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgLy8gb24gdGhlIGVsZW1lbnQgKFNhZmFyaSBhY3R1YWxseSBjYWxscyBpdCB0d2ljZSkuXG4gICAgLy8gSWYgdGhpcyB0YWIgY2hhbmdlIGNhdXNlZCBhIGJsdXIgb24gYW4gZWxlbWVudCB3aXRoIGZvY3VzLXZpc2libGUsXG4gICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgIGlmIChoYWRGb2N1c1Zpc2libGVSZWNlbnRseSkge1xuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhcmUoZG9jKSB7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZWFyZG93bihkb2MpIHtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gaXNGb2N1c1Zpc2libGUoZXZlbnQpIHtcbiAgY29uc3Qge1xuICAgIHRhcmdldFxuICB9ID0gZXZlbnQ7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gdGFyZ2V0Lm1hdGNoZXMoJzpmb2N1cy12aXNpYmxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7Ly8gQnJvd3NlcnMgbm90IGltcGxlbWVudGluZyA6Zm9jdXMtdmlzaWJsZSB3aWxsIHRocm93IGEgU3ludGF4RXJyb3IuXG4gICAgLy8gV2UgdXNlIG91ciBvd24gaGV1cmlzdGljIGZvciB0aG9zZSBicm93c2Vycy5cbiAgICAvLyBSZXRocm93IG1pZ2h0IGJlIGJldHRlciBpZiBpdCdzIG5vdCB0aGUgZXhwZWN0ZWQgZXJyb3IgYnV0IGRvIHdlIHJlYWxseVxuICAgIC8vIHdhbnQgdG8gY3Jhc2ggaWYgZm9jdXMtdmlzaWJsZSBtYWxmdW5jdGlvbmVkP1xuICB9IC8vIE5vIG5lZWQgZm9yIHZhbGlkRm9jdXNUYXJnZXQgY2hlY2suIFRoZSB1c2VyIGRvZXMgdGhhdCBieSBhdHRhY2hpbmcgaXQgdG9cbiAgLy8gZm9jdXNhYmxlIGV2ZW50cyBvbmx5LlxuXG5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSXNGb2N1c1Zpc2libGUoKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgIHByZXBhcmUobm9kZS5vd25lckRvY3VtZW50KTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgY29uc3QgaXNGb2N1c1Zpc2libGVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG5cbiAgZnVuY3Rpb24gaGFuZGxlQmx1clZpc2libGUoKSB7XG4gICAgLy8gY2hlY2tpbmcgYWdhaW5zdCBwb3RlbnRpYWwgc3RhdGUgdmFyaWFibGUgZG9lcyBub3Qgc3VmZmljZSBpZiB3ZSBmb2N1cyBhbmQgYmx1ciBzeW5jaHJvbm91c2x5LlxuICAgIC8vIFJlYWN0IHdvdWxkbid0IGhhdmUgdGltZSB0byB0cmlnZ2VyIGEgcmUtcmVuZGVyIHNvIGBmb2N1c1Zpc2libGVgIHdvdWxkIGJlIHN0YWxlLlxuICAgIC8vIElkZWFsbHkgd2Ugd291bGQgYWRqdXN0IGBpc0ZvY3VzVmlzaWJsZShldmVudClgIHRvIGxvb2sgYXQgYHJlbGF0ZWRUYXJnZXRgIGZvciBibHVyIGV2ZW50cy5cbiAgICAvLyBUaGlzIGRvZXNuJ3Qgd29yayBpbiBJRTExIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzM3NTFcbiAgICAvLyBUT0RPOiBjaGVjayBhZ2FpbiBpZiBSZWFjdCByZWxlYXNlcyB0aGVpciBpbnRlcm5hbCBjaGFuZ2VzIHRvIGZvY3VzIGV2ZW50IGhhbmRsaW5nIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8xOTE4NikuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vIFRvIGRldGVjdCBhIHRhYi93aW5kb3cgc3dpdGNoLCB3ZSBsb29rIGZvciBhIGJsdXIgZXZlbnQgZm9sbG93ZWRcbiAgICAgIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgICAgIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gICAgICAvLyByZWd1bGFyIGZvY3VzIGNoYW5nZS5cbiAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICAgIH0sIDEwMCk7XG4gICAgICBpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFNob3VsZCBiZSBjYWxsZWQgaWYgYSBibHVyIGV2ZW50IGlzIGZpcmVkXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZlxuICB9O1xufSIsIlxuLyoqXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxuICovXG5cbmV4cG9ydHMuRW1pdHRlciA9IEVtaXR0ZXI7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xuICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTtcbn1cblxuLyoqXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1peGluKG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcbiAgICAucHVzaChmbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIGZ1bmN0aW9uIG9uKCkge1xuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIG9uLmZuID0gZm47XG4gIHRoaXMub24oZXZlbnQsIG9uKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cbiAgLy8gYWxsXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNwZWNpZmljIGV2ZW50XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XG5cbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxuICB2YXIgY2I7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2IgPSBjYWxsYmFja3NbaV07XG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgZXZlbnQgc3BlY2lmaWMgYXJyYXlzIGZvciBldmVudCB0eXBlcyB0aGF0IG5vXG4gIC8vIG9uZSBpcyBzdWJzY3JpYmVkIGZvciB0byBhdm9pZCBtZW1vcnkgbGVhay5cbiAgaWYgKGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cbiAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gIH1cblxuICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGFsaWFzIHVzZWQgZm9yIHJlc2VydmVkIGV2ZW50cyAocHJvdGVjdGVkIG1ldGhvZClcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXRSZXNlcnZlZCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7XG5cbi8qKlxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/ICdFVElNRURPVVQnIDogJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuYXhpb3MuVkVSU0lPTiA9IHJlcXVpcmUoJy4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG5cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbCA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbCgnY2FuY2VsZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtZXJnZU1hcCA9IHtcbiAgICAndXJsJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnbWV0aG9kJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnZGF0YSc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2Jhc2VVUkwnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXF1ZXN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVzcG9uc2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdwYXJhbXNTZXJpYWxpemVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXRNZXNzYWdlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnd2l0aENyZWRlbnRpYWxzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNwb3J0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cEFnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cHNBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2NhbmNlbFRva2VuJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnc29ja2V0UGF0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlRW5jb2RpbmcnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd2YWxpZGF0ZVN0YXR1cyc6IG1lcmdlRGlyZWN0S2V5c1xuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoY29uZmlnMSkuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICB2YXIgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIHZhciBjb25maWdWYWx1ZSA9IG1lcmdlKHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbnRleHQsIGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2NvcmUvZW5oYW5jZUVycm9yJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHtcbiAgICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxuICB9LFxuXG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkgfHwgKGhlYWRlcnMgJiYgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJykpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIHZhciB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICB2YXIgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIHZhciBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHN0cmljdEpTT05QYXJzaW5nIHx8IChmb3JjZWRKU09OUGFyc2luZyAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiBkYXRhLmxlbmd0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBlbmhhbmNlRXJyb3IoZSwgdGhpcywgJ0VfSlNPTl9QQVJTRScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjIzLjBcIlxufTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsImNvbnN0IEV2ZW50cyA9IHtcbiAgICBDb25uZWN0OiBcImNvbm5lY3Rpb25cIixcbiAgICBEaXNjb25uZWN0OiBcImRpc2Nvbm5lY3RlZFwiLFxuICAgIEVycm9yOiBcImNvbm5lY3RfZXJyb3JcIixcbiAgICBJbnZhbGlkVXNlcklkOiBcImludmFsaWQgdXNlciBpZFwiLFxuICAgIE1lc3NhZ2U6IFwibWVzc2FnZVwiLFxuICAgIE1lc3NhZ2VGYWlsdXJlOiBcIm1lc3NhZ2Ugc2VuZCBlcnJvclwiXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50cztcbiIsIi8qKlxuICogT3V0bGluZXMgdGhlIHR5cGUgb2YgZ3JvdXAgdGhhdCBhIHN0dWR5IGdyb3VwIGNhbiBiZSxcbiAqIGlnbm9yaW5nIHdoZXRoZXIgb3Igbm90IHRoZSBncm91cCBpcyBhIHR1dG9yIGdyb3VwLlxuICogVGhpcyBpcyB1c2VkIHRvIGRldGVybWluZSB0aGUgbWVldGluZyBwcmVmZXJlbmNlIG9mXG4gKiBhIHN0dWR5IGdyb3VwLiBUaGlzIGlzIHVzZWQgd2hlbiBzZWFyY2hpbmcgZm9yIHN0dWR5IGdyb3Vwcy5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDAxLzI1LzIwMjJcbiAqL1xuY29uc3QgTWVldGluZ0Zvcm1hdHMgPSB7XG4gICAgSW5QZXJzb246IFwiSW4gcGVyc29uXCIsXG4gICAgTWl4ZWQ6IFwiSW4gcGVyc29uIG9yIG9ubGluZVwiLFxuICAgIE9ubGluZTogXCJPbmxpbmVcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gTWVldGluZ0Zvcm1hdHM7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIHBvc3NpYmxlIHR5cGVzIG9mIHBvc3RzIHN0dWR5IGdyb3VwIG1lbWJlcnMgY2FuIG1ha2UuXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAwMS8xNC8yMDIyXG4gKi9cbmNvbnN0IFBvc3RUeXBlcyA9IHtcbiAgICBBbm5vdW5jZW1lbnQ6IFwiQW5ub3VuY2VtZW50XCIsXG4gICAgRGlzY3Vzc2lvbjogXCJEaXNjdXNzaW9uXCIsXG4gICAgUXVlc3Rpb246IFwiUXVlc3Rpb25cIixcbiAgICBQcm9ibGVtOiBcIlByb2JsZW1cIixcbiAgICBNZWV0aW5nOiBcIk1lZXRpbmdcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gUG9zdFR5cGVzO1xuIiwiLyoqXG4gKiBUaGUgc3ViamVjdHMgdGhhdCBhIGdyb3VwIGNhbiBjaG9vc2UgdG8gc3VwcG9ydC5cbiAqXG4gKi9cbmNvbnN0IFN1YmplY3RzID0ge1xuICAgIEFueTogXCJBbnlcIixcbiAgICBIaXN0b3J5OiBcIkhpc3RvcnlcIixcbiAgICBMaXRlcmF0dXJlOiBcIkxpdGVyYXR1cmVcIixcbiAgICBNYXRoOiBcIk1hdGhcIixcbiAgICBTY2llbmNlOiBcIlNjaWVuY2VcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gU3ViamVjdHM7XG4iLCIvLyBUaGUgZm9sbG93aW5nIGVudW1lcmF0aW9ucyBhcmUgdXNlZCB0byBzaW1wbGlmeSB0aGUgcHJvY2VzcyBvZiB3b3JraW5nIHdpdGggbWVldGluZ3MgYW5kIHRpbWUuXG5jb25zdCBEYXlzID0ge1xuICAgIE1vbmRheTogXCJNb25kYXlcIixcbiAgICBUdWVzZGF5OiBcIlR1ZXNkYXlcIixcbiAgICBXZWRuZXNkYXk6IFwiV2VkbmVzZGF5XCIsXG4gICAgVGh1cnNkYXk6IFwiVGh1cnNkYXlcIixcbiAgICBGcmlkYXk6IFwiRnJpZGF5XCIsXG4gICAgU2F0dXJkYXk6IFwiU2F0dXJkYXlcIixcbiAgICBTdW5kYXk6IFwiU3VuZGF5XCJcbn07XG5jb25zdCBNZWV0aW5nRnJlcXVlbmNpZXMgPSB7XG4gICAgRGFpbHk6IFwiRGFpbHlcIixcbiAgICBNb250aGx5OiBcIk1vbnRobHlcIixcbiAgICBPbmVUaW1lOiBcIk9uZS10aW1lXCIsXG4gICAgV2Vla2x5OiBcIldlZWtseVwiLFxuICAgIFllYXJseTogXCJZZWFybHlcIlxufTtcbmNvbnN0IFBhcnRPZkRheSA9IHtcbiAgICBBbTogXCJBTVwiLFxuICAgIFBtOiBcIlBNXCJcbn07XG5sZXQgVGltZXMgPSBbXTtcblsuLi5BcnJheSgxMikua2V5cygpXS5tYXAoKGhvdXIpID0+IHtcbiAgICBjb25zdCBNaW51dGVzID0gW1wiMDBcIiwgXCIxNVwiLCBcIjMwXCIsIFwiNDVcIl07XG4gICAgTWludXRlcy5tYXAoKG1pbnV0ZSkgPT4ge1xuICAgICAgICBUaW1lcy5wdXNoKGAke2hvdXJ9OiR7bWludXRlfWApO1xuICAgIH0pO1xufSk7XG5cbi8qKlxuICogQSBtb2RlbCBmb3IgcmVwcmVzZW50aW5nIHRpbWUuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gaG91ciBUaGUgaG91ciBjb21wb25lbnQgb2YgdGltZSAoMTItaG91ciBmb3JtYXQpLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IG1pbnV0ZSBUaGUgbWludXRlIGNvbXBvbmVudCBvZiB0aW1lLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHBhcnRPZkRheSBUaGUgcGFydCBvZiB0aGUgZGF5IChBTSBvciBQTSkuXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICogQGRhdGUgICAwMS8yOC8yMDIyXG4gKi9cbmNsYXNzIFRpbWUge1xuICAgIGNvbnN0cnVjdG9yKGhvdXIsIG1pbnV0ZSwgcGFydE9mRGF5KSB7XG4gICAgICAgIHRoaXMuaG91ciA9IGhvdXI7XG4gICAgICAgIHRoaXMubWludXRlID0gbWludXRlO1xuICAgICAgICB0aGlzLnBhcnRPZkRheSA9IHBhcnRPZkRheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENoZWNrcyBpZiB0d28gdGltZXMgYXJlIGVxdWFsLlxuICAgICogQHBhcmFtIHtUaW1lfSBvdGhlclRpbWUgVGhlIHRpbWUgdG8gY29tcGFyZSBhZ2FpbnN0IGZvciBlcXVhbGl0eS5cbiAgICAqL1xuICAgIGVxdWFscyhvdGhlclRpbWUpIHtcbiAgICAgICAgY29uc3QgaG91cnNNYXRjaCA9IHRoaXMuaG91ciA9PSBvdGhlclRpbWUuaG91cjtcbiAgICAgICAgY29uc3QgbWludXRlc01hdGNoID0gdGhpcy5taW51dGUgPT0gb3RoZXJUaW1lLm1pbnV0ZTtcbiAgICAgICAgY29uc3QgcGFydHNPZkRheU1hdGNoID0gdGhpcy5wYXJ0T2ZEYXkgPT0gb3RoZXJUaW1lLnBhcnRPZkRheTtcbiAgICAgICAgcmV0dXJuIGhvdXJzTWF0Y2ggJiYgbWludXRlc01hdGNoICYmIHBhcnRzT2ZEYXlNYXRjaDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgb25lIHRpbWUgaXMgYWZ0ZXIgYW5vdGhlci5cbiAgICAgKiBAcGFyYW0ge1RpbWV9IGxhdGVyVGltZSBUaGUgdGltZSB0byBjb21wYXJlIGFnYWluc3QuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgc2Vjb25kIHRpbWUgY29tZXMgYmVmb3JlIHRoZSBmaXJzdCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMS8yOC8yMDIyXG4gICAgICovXG4gICAgaXNBZnRlcihmaXJzdFRpbWUpIHtcbiAgICAgICAgbGV0IGlzQWZ0ZXIgPSBmYWxzZTtcbiAgICAgICAgbGV0IGhvdXIgPSBwYXJzZUludCh0aGlzLmhvdXIpO1xuICAgICAgICBsZXQgZmlyc3RIb3VyID0gcGFyc2VJbnQoZmlyc3RUaW1lLmhvdXIpO1xuICAgICAgICBsZXQgbWludXRlID0gcGFyc2VJbnQodGhpcy5taW51dGUpO1xuICAgICAgICBsZXQgZmlyc3RNaW51dGUgPSBwYXJzZUludChmaXJzdFRpbWUubWludXRlKTtcbiAgICAgICAgLy8gSWYgdGhlIHRpbWVzIGFyZSBib3RoIEFNIG9yIGJvdGggUE0uXG4gICAgICAgIGlmICh0aGlzLnBhcnRPZkRheSA9PT0gZmlyc3RUaW1lLnBhcnRPZkRheSkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBob3VyIGNvbWVzIGFmdGVyIHRoZSBmaXJzdCBob3VyLlxuICAgICAgICAgICAgaWYgKHRoaXMucGFydE9mRGF5ID09PSBQYXJ0T2ZEYXkuQW0pIHtcbiAgICAgICAgICAgICAgICBob3VyID0gaG91ciAlIDEyO1xuICAgICAgICAgICAgICAgIGZpcnN0SG91ciA9IGZpcnN0SG91ciAlIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhvdXIgPiBmaXJzdEhvdXIpIHtcbiAgICAgICAgICAgICAgICBpc0FmdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGhvdXIgY29tZXMgYmVmb3JlIHRoZSBmaXJzdCBob3VyLlxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgZmlyc3RIb3VyKSB7XG4gICAgICAgICAgICAgICAgaXNBZnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBob3VycyBhcmUgZXF1YWwuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlzQWZ0ZXIgPSBtaW51dGUgPiBmaXJzdE1pbnV0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoaXMgdGltZSBvZiBkYXkgY29tZXMgYWZ0ZXIgdGhlIGZpcnN0IHRpbWUgb2YgZGF5LlxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGFydE9mRGF5ID4gZmlyc3RUaW1lLnBhcnRPZkRheSkge1xuICAgICAgICAgICAgaXNBZnRlciA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc0FmdGVyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQWZ0ZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgYSBnaXZlbiBtZWV0aW5nIHRpbWUgaXMgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZGluZ1xuICAgICAqIG9mIGEgdXNlcidzIGF2YWlsYWJpbGl0eSB0aW1lcy5cbiAgICAgKiBAcGFyYW0ge1RpbWV9IG1lZXRpbmdUaW1lIFRoZSB0aW1lIG9mIHRoZSBtZWV0aW5nLlxuICAgICAqIEBwYXJhbSB7VGltZX0gc3RhcnRUaW1lIFRoZSB0aW1lIGF2YWlsYWJpbGl0eSBzdGFydHMuXG4gICAgICogQHBhcmFtIHtUaW1lfSBlbmRUaW1lIFRoZSB0aW1lIGF2YWlsYWJpbGl0eSBlbmRzLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1lZXRpbmcgdGltZSBpcyBiZXR3ZWVuIHRoZSB0d28gdGltZXMsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMDEvMjgvMjAyMlxuICAgICAqL1xuICAgIGlzQmV0d2VlbihzdGFydFRpbWUsIGVuZFRpbWUpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lSXNWYWxpZCA9IHRoaXMuaXNBZnRlcihzdGFydFRpbWUpO1xuICAgICAgICBjb25zdCBlbmRUaW1lSXNWYWxpZCA9IGVuZFRpbWUuaXNBZnRlcih0aGlzKTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0VGltZUlzVmFsaWQgJiYgZW5kVGltZUlzVmFsaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSB0aW1lIGZyb20gYSAyNC1ob3VyIGZvcm1hdCB0aW1lIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGltZVN0cmluZyBUaGUgdGltZSBzdHJpbmcgdG8gcGFyc2UuXG4gICAgICogQHJldHVybiB7VGltZX0gVGhlIHRpbWUgb2JqZWN0LlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMi8wMS8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZTI0SG91clRpbWVTdHJpbmcodGltZVN0cmluZykge1xuICAgICAgICAvLyBUaGUgdGltZSBzdHJpbmcgd2lsbCBiZSBpbiBhIHByZWRpY3RhYmxlIGZvcm1hdC5cbiAgICAgICAgY29uc3QgQ09MT04gPSBcIjpcIjtcbiAgICAgICAgdGltZVN0cmluZyA9IFN0cmluZyh0aW1lU3RyaW5nKTtcbiAgICAgICAgY29uc3QgY29sb25JbmRleCA9IHRpbWVTdHJpbmcuaW5kZXhPZihDT0xPTik7XG4gICAgICAgIGNvbnN0IGJlZ2lubmluZ09mVGltZVN0cmluZyA9IDA7XG4gICAgICAgIGxldCBob3VyID0gcGFyc2VJbnQodGltZVN0cmluZy5zbGljZShiZWdpbm5pbmdPZlRpbWVTdHJpbmcsIGNvbG9uSW5kZXgpKTtcbiAgICAgICAgY29uc3QgcGFydE9mRGF5SW5kZXggPSB0aW1lU3RyaW5nLmxlbmd0aDtcbiAgICAgICAgbGV0IG1pbnV0ZSA9IHBhcnNlSW50KHRpbWVTdHJpbmcuc2xpY2UoY29sb25JbmRleCArIDEsIHBhcnRPZkRheUluZGV4KSk7XG4gICAgICAgIGxldCBwYXJ0T2ZEYXkgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIENvbnZlcnQgMjQtaG91ciBmb3JtYXQgdG8gMTItaG91ciBmb3JtYXQuXG4gICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIHBhcnRPZkRheSA9IFBhcnRPZkRheS5BbTtcbiAgICAgICAgICAgIGlmIChob3VyID09IDApIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJ0T2ZEYXkgPSBQYXJ0T2ZEYXkuUG07XG4gICAgICAgICAgICBpZiAoaG91ciA+IDEyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhvdXIgPT0gMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgaG91ciA9IDExO1xuICAgICAgICAgICAgICAgICAgICBtaW51dGUgPSA0NTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBob3VyIC09IDEyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBQYWQgbnVtYmVycyB3aXRoIHplcm9lcy5cbiAgICAgICAgaG91ciA9IGhvdXIgPCAxMCA/IGAwJHtob3VyfWAgOiBgJHtob3VyfWA7XG4gICAgICAgIG1pbnV0ZSA9IG1pbnV0ZSA8IDEwID8gYDAke21pbnV0ZX1gIDogYCR7bWludXRlfWA7XG4gICAgICAgIGNvbnN0IHRpbWUgPSBuZXcgVGltZShob3VyLCBtaW51dGUsIHBhcnRPZkRheSk7XG4gICAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgdGltZSBmcm9tIGEgdGltZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRpbWVTdHJpbmcgVGhlIHRpbWUgc3RyaW5nIHRvIHBhcnNlLlxuICAgICAqIEByZXR1cm4ge1RpbWV9IFRoZSB0aW1lIG9iamVjdC5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMDEvMjgvMjAyMlxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgcGFyc2VUaW1lU3RyaW5nKHRpbWVTdHJpbmcpIHtcbiAgICAgICAgLy8gVGhlIHRpbWUgc3RyaW5nIHdpbGwgYmUgaW4gYSBwcmVkaWN0YWJsZSBmb3JtYXQuXG4gICAgICAgIGNvbnN0IENPTE9OID0gXCI6XCI7XG4gICAgICAgIGNvbnN0IGNvbG9uSW5kZXggPSB0aW1lU3RyaW5nLmluZGV4T2YoQ09MT04pO1xuICAgICAgICBjb25zdCBiZWdpbm5pbmdPZlRpbWVTdHJpbmcgPSAwO1xuICAgICAgICBjb25zdCBob3VyID0gdGltZVN0cmluZy5zbGljZShiZWdpbm5pbmdPZlRpbWVTdHJpbmcsIGNvbG9uSW5kZXgpO1xuICAgICAgICBjb25zdCBwYXJ0T2ZEYXlJbmRleCA9IHRpbWVTdHJpbmcubGVuZ3RoIC0gMjtcbiAgICAgICAgY29uc3QgbWludXRlID0gdGltZVN0cmluZy5zbGljZShjb2xvbkluZGV4ICsgMSwgcGFydE9mRGF5SW5kZXgpO1xuICAgICAgICBjb25zdCBwYXJ0T2ZEYXkgPSB0aW1lU3RyaW5nLnNsaWNlKHBhcnRPZkRheUluZGV4LCB0aW1lU3RyaW5nLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHRpbWUgPSBuZXcgVGltZShob3VyLCBtaW51dGUsIHBhcnRPZkRheSk7XG4gICAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnMgdGhlIG9iamVjdCB0byBzdGFuZGFyZCB0aW1lIHN0cmluZyBzeW50YXguXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgdGltZSBhcyBhIHN0cmluZy5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMDIvMDEvMjAyMlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5ob3VyfToke3RoaXMubWludXRlfSR7dGhpcy5wYXJ0T2ZEYXl9YDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBEYXlzLCBNZWV0aW5nRnJlcXVlbmNpZXMsIFBhcnRPZkRheSwgVGltZXMsIFRpbWUgfTtcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgcmVzcG9uc2UgbWVzc2FnZXMgdGhlIHNlcnZlciBjYW4gc2VuZC5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDEwLzA1LzIwMjFcbiAqL1xuY29uc3QgUmVzcG9uc2VNZXNzYWdlcyA9IHtcbiAgICBBY2NvdW50OiB7XG4gICAgICAgIEVycm9yQ2hhbmdpbmdFbWFpbDogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGNoYW5nZSB0aGUgZW1haWwuXCIsXG4gICAgICAgIEVycm9yQ2hhbmdpbmdQYXNzd29yZDogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGNoYW5nZSB0aGUgcGFzc3dvcmQuXCIsXG4gICAgICAgIEVycm9yQ3JlYXRlQWNjb3VudDogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGNyZWF0ZSBhbiBhY2NvdW50LlwiLFxuICAgICAgICBFcnJvckRlbGV0ZUFjY291bnQ6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBkZWxldGUgYW4gYWNjb3VudC5cIixcbiAgICAgICAgRXJyb3JJbnZhbGlkUGFzc3dvcmRJbnB1dDogXCJUaGUgcGFzc3dvcmRzIHByb3ZpZGVkIHdlcmUgaW52YWxpZC5cIixcbiAgICAgICAgRXJyb3JTZW5kaW5nRW1haWw6IFwiVGhlcmUgd2FzIGFuIGVycm9yIHNlbmRpbmcgeW91ciB2ZXJpZmljYXRpb24gZW1haWwuXCIsXG4gICAgICAgIEVycm9yU2V0dGluZ1Rva2VuOiBcIlRoZXJlIHdhcyBhbiBlcnJvciBzZXR0aW5nIHRoZSB2ZXJpZmljYXRpb24gdG9rZW5cIixcbiAgICAgICAgRXJyb3JVcGxvYWRQcm9maWxlUGljdHVyZTogXCJUaGUgZmlsZSB0eXBlIHNlbGVjdGVkIGlzIG5vdCBzdXBwb3J0ZWQuXCIsXG4gICAgICAgIEVtYWlsU2VudDogXCJWZXJpZmljYXRpb24gZW1haWwgc2VudC5cIixcbiAgICAgICAgTm90T3ZlcjE4OiBcIllvdSBuZWVkIHRvIGJlIDE4IG9yIG9sZGVyIHRvIGNyZWF0ZSBhbiBhY2NvdW50LlwiLFxuICAgICAgICBJbnZhbGlkRW1haWw6IFwiVGhlIGVtYWlsIGFkZHJlc3MgZW50ZXJlZCBpcyBub3QgdmFsaWQuXCIsXG4gICAgICAgIEluY29ycmVjdFBhc3N3b3JkOiBcIlRoZSBwYXNzd29yZCBwcm92aWRlZCBpcyBpbmNvcnJlY3QuXCIsXG4gICAgICAgIEludmFsaWRBY2NvdW50SW5wdXQ6IFwiT25lIG9yIG1vcmUgZmllbGRzIGhhdmUgYmVlbiBsZWZ0IGVtcHR5LlwiLFxuICAgICAgICBTdWNjZXNzQWNjb3VudENyZWF0ZWQ6IFwiVGhlIGFjY291bnQgd2FzIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5LlwiLFxuICAgICAgICBTdWNjZXNzQWNjb3VudERlbGV0ZWQ6IFwiVGhlIGFjY291bnQgd2FzIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5XCIsXG4gICAgICAgIFN1Y2Nlc3NBY2NvdW50U2V0dXA6IFwiVGhlIGFjY291bnQgd2FzIHNldHVwIHN1Y2Nlc3NmdWxseS5cIixcbiAgICAgICAgU3VjY2Vzc0NoYW5naW5nRW1haWw6IFwiVGhlIGVtYWlsIHdhcyBjaGFuZ2VkIHN1Y2Nlc3NmdWxseVwiLFxuICAgICAgICBTdWNjZXNzQ2hhbmdpbmdQYXNzd29yZDogXCJUaGUgcGFzc3dvcmQgd2FzIGNoYW5nZWQgc3VjY2Vzc2Z1bGx5XCIsXG4gICAgICAgIFN1Y2Nlc3NMb2dpbjogXCJUaGUgbG9naW4gd2FzIHN1Y2Nlc3NmdWwuXCIsXG4gICAgICAgIFN1Y2Nlc3NVcGRhdGVBdXRoZW50aWNhdGlvblRva2VuOiBcIlRoZSBhdXRoZW50aWNhdGlvbiB0b2tlbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgdXBkYXRlZC5cIixcbiAgICAgICAgVW52ZXJpZmllZFVzZXJXYXNGb3VuZDogXCJUaGUgdW52ZXJpZmllZCB1c2VyIHdhcyBmb3VuZC5cIixcbiAgICAgICAgVXNlckFscmVhZHlFeGlzdHM6IFwiQSB1c2VyIHdpdGggdGhhdCBlbWFpbCBhZGRyZXNzIGFscmVhZHkgZXhpc3RzLlwiLFxuICAgICAgICBVc2VyTm90Rm91bmQ6IFwiVGhlIHVzZXIgd2FzIG5vdCBmb3VuZC5cIixcbiAgICAgICAgUGFzc3dvcmRzTXVzdE1hdGNoOiBcIlRoZSBwYXNzd29yZHMgZW50ZXJlZCBtdXN0IG1hdGNoLlwiLFxuICAgICAgICBQYXNzd29yZFRvb1Nob3J0OiBcIlRoZSBwYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVycy5cIixcbiAgICAgICAgSW5hY3RpdmVBY2NvdW50OiBcIlRoZSBhY2NvdW50IHJlcXVlc3RlZCBpcyBub3QgYWN0aXZlLlwiXG4gICAgfSxcbiAgICBNZXNzYWdlOiB7XG4gICAgICAgIEVycm9yQWRkQ29udmVyc2F0aW9uOiBcIkFuIGVycm9yIG9jY3VycnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGFkZCBhIGNvbnZlcnNhdGlvbi4gXCIsXG4gICAgICAgIEVycm9yQ29udmVyc2F0aW9uRXhpc3RzOiBcIlRoZSBjb252ZXJzYXRpb24gcmVxdWVzdGVkIGFscmVhZHkgZXhpc3RzLlwiLFxuICAgICAgICBFcnJvckdldENvbnZlcnNhdGlvbjogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGdldCB0aGUgY29udmVyc2F0aW9uLlwiLFxuICAgICAgICBFcnJvckdldFJlY2VpdmVyOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gZ2V0IHRoZSByZWNlaXZlci5cIixcbiAgICAgICAgRXJyb3JDcmVhdGVDb252ZXJzYXRpb246IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBjcmVhdGUgdGhlIGNvbnZlcnNhdGlvbi5cIixcbiAgICAgICAgR2V0Q29udmVyc2F0aW9uczoge1xuICAgICAgICAgICAgRXJyb3I6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBnZXQgYWxsIGNvbnZlcnNhdGlvbnMgZm9yIGEgdXNlci5cIixcbiAgICAgICAgICAgIFN1Y2Nlc3M6IFwiQWxsIGNvbnZlcnNhdGlvbnMgd2VyZSBmb3VuZCBmb3IgYSB1c2VyLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFN1Y2Nlc3NHZXRDb252ZXJzYXRpb246IFwiQ29udmVyc2F0aW9uIHJldHVybmVkIHN1Y2Nlc3NmdWxseS5cIixcbiAgICAgICAgU3VjY2Vzc0NyZWF0ZUNvbnZlcnNhdGlvbjogXCJDb252ZXJzYXRpb24gY3JlYXRlZCBzdWNjZXNzZnVsbHkuXCJcbiAgICB9LFxuICAgIFN0dWR5R3JvdXA6IHtcbiAgICAgICAgQWRkT25lVGltZU1lZXRpbmc6IHtcbiAgICAgICAgICAgIEVycm9yOiBcIkFuIGVycm9yIG9jY3VyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBhZGQgYSBvbmUtdGltZSBtZWV0aW5nLlwiLFxuICAgICAgICAgICAgSW52YWxpZElucHV0OiBcIk9uZSBvciBtb3JlIHJlcXVpcmVkIGZpZWxkcyBpcyBlbXB0eS5cIixcbiAgICAgICAgICAgIFN1Y2Nlc3M6IFwiVGhlIG9uZS10aW1lIG1lZXRpbmcgd2FzIGFkZGVkIHN1Y2Nlc3NmdWxseS5cIlxuICAgICAgICB9LFxuICAgICAgICBDcmVhdGVQb3N0OiB7XG4gICAgICAgICAgICBFcnJvcjogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGNyZWF0ZSBhIHBvc3QuXCIsXG4gICAgICAgICAgICBJbnZhbGlkQXR0YWNobWVudDogXCJUaGUgZmlsZSBhdHRhY2hlZCBpcyBvZiBhbiB1bnN1cHBvcnRlZCBmb3JtYXQuXCIsXG4gICAgICAgICAgICBJbnZhbGlkSW5wdXQ6IFwiT25lIG9yIG1vcmUgcmVxdWlyZWQgZmllbGRzIGlzIGVtcHR5LlwiLFxuICAgICAgICAgICAgU3VjY2VzczogXCJUaGUgcG9zdCB3YXMgY3JlYXRlZCBzdWNjZXNzZnVsbHkuXCJcbiAgICAgICAgfSxcbiAgICAgICAgRXJyb3JDcmVhdGVTdHVkeUdyb3VwOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gY3JlYXRlIGEgc3R1ZHkgZ3JvdXAuXCIsXG4gICAgICAgIEVycm9yRGVsZXRlU3R1ZHlHcm91cDogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGRlbGV0ZSBhIHN0dWR5IGdyb3VwLlwiLFxuICAgICAgICBFcnJvckRlbGV0ZU1lZXRpbmc6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBkZWxldGUgYSBtZWV0aW5nLlwiLFxuICAgICAgICBFcnJvckVkaXRNZWV0aW5nOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gZWRpdCB0aGUgbWVldGluZy5cIixcbiAgICAgICAgRXJyb3JHZXRTdHVkeUdyb3VwOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gZ2V0IGEgc3R1ZHkgZ3JvdXAuXCIsXG4gICAgICAgIEVycm9yR3JvdXBJc1ByaXZhdGU6IFwiVGhlIHN0dWR5IGdyb3VwIHJlcXVlc3RlZCB0byBqb2luIGlzIHByaXZhdGUuXCIsXG4gICAgICAgIEVycm9yTGVhdmVTdHVkeUdyb3VwOiBcIlRoZSBzdHVkeSBncm91cCB5b3UgYXJlIHRyeWluZyB0byBsZWF2ZSB3YXMgbm90IGZvdW5kLlwiLFxuICAgICAgICBFcnJvckpvaW5TdHVkeUdyb3VwOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gam9pbiBhIHN0dWR5IGdyb3VwLlwiLFxuICAgICAgICBFcnJvclJlbW92ZVVzZXI6IFwiVGhlcmUgd2FzIGFuIGVycm9yIHJlbW92aW5nIHVzZXIgZnJvbSB0aGUgc3R1ZHkgZ3JvdXAuXCIsXG4gICAgICAgIEVycm9yUmVtb3ZlU3R1ZHlHcm91cDogXCJUaGVyZSB3YXMgYW4gZXJyb3IgcmVtb3Zpbmcgc3R1ZHkgZ3JvdXAgZnJvbSB0aGUgdXNlci5cIixcbiAgICAgICAgSW52YWxpZEVkaXRTdHVkeUdyb3VwOiBcIk9uZSBvciBtb3JlIHJlcXVpcmVkIGZpZWxkcyBpcyBlbXB0eS5cIixcbiAgICAgICAgU3R1ZHlHcm91cElzTm90QWN0aXZlOiBcIlRoZSByZXF1ZXN0ZWQgc3R1ZHkgZ3JvdXAgaXMgbm90IGFjdGl2ZS5cIixcbiAgICAgICAgTWVldGluZ05vdEZvdW5kOiBcIlRoZSByZXF1ZXN0ZWQgbWVldGluZyB3YXMgbm90IGZvdW5kLlwiLFxuICAgICAgICBTdHVkeUdyb3VwTm90Rm91bmQ6IFwiVGhlIHJlcXVlc3RlZCBzdHVkeSBncm91cCB3YXMgbm90IGZvdW5kLlwiLFxuICAgICAgICBTdWNjZXNzRGVsZXRlTWVldGluZzogXCJUaGUgbWVldGluZyB3YXMgZGVsZXRlZCBzdWNjZXNzZnVsbHkuXCIsXG4gICAgICAgIFN1Y2Nlc3NTdHVkeUdyb3VwQ3JlYXRlZDogXCJUaGUgc3R1ZHkgZ3JvdXAgd2FzIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5LlwiLFxuICAgICAgICBTdWNjZXNzU3R1ZHlHcm91cERlbGV0ZWQ6IFwiVGhlIHN0dWR5IGdyb3VwIHdhcyBkZWxldGVkIHN1Y2Nlc3NmdWxseS5cIixcbiAgICAgICAgU3VjY2Vzc1N0dWR5R3JvdXBFZGl0ZWQ6IFwiVGhlIHN0dWR5IGdyb3VwIHdhcyBlZGl0ZWQgc3VjY2Vzc2Z1bGx5XCIsXG4gICAgICAgIFN1Y2Nlc3NTdHVkeUdyb3VwSm9pbmVkOiBcIlRoZSBzdHVkeSBncm91cCB3YXMgam9pbmVkIHN1Y2Nlc3NmdWxseS5cIixcbiAgICAgICAgU3VjY2Vzc1N0dWR5R3JvdXBMZWZ0OiBcIlRoZSBzdHVkeSBncm91cCB3YXMgbGVmdCBzdWNjZXNzZnVsbHkuXCIsXG4gICAgICAgIFN1Y2Nlc3NTdHVkeUdyb3VwUmV0cmlldmVkOiBcIlRoZSBzdHVkeSBncm91cCB3YXMgcmV0cmlldmVkIHN1Y2Nlc3NmdWxseS5cIixcbiAgICAgICAgU3VjY2Vzc1N0dWR5R3JvdXBzUmV0cmlldmVkOiBcIlRoZSBzdHVkeSBncm91cHMgd2VyZSByZXRyaWV2ZWQgc3VjZXNzZnVsbHkuXCIsXG4gICAgICAgIEVycm9yR2V0dGluZ1NlYXJjaFJlc3VsdHM6IFwiQW4gZXJyb3Igb2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGdldCBzZWFyY2ggcmVzdWx0cy5cIixcbiAgICAgICAgVXNlckFscmVhZHlKb2luZWQ6IFwiVGhlIHN0dWR5IGdyb3VwIGNhbm5vdCBiZSBqb2luZWQgYWdhaW4uXCIsXG4gICAgICAgIFVzZXJOb3RBc3NvY2lhdGVkV2l0aFNjaG9vbE9mU3R1ZHlHcm91cDpcbiAgICAgICAgICAgIFwiVGhlIHN0dWR5IGdyb3VwIGNhbm5vdCBiZSBqb2luZWQgYmVjYXVzZSB5b3UgYXJlIG5vdCBhIHBhcnQgb2YgdGhpcyBzY2hvb2wuXCIsXG4gICAgICAgIFVzZXJOb3RJblN0dWR5R3JvdXA6IFwiVGhlIHJlcXVlc3RpbmcgdXNlciBpcyBub3QgYSBtZW1iZXIgb2YgdGhlIHN0dWR5IGdyb3VwLlwiLFxuICAgICAgICBVc2VyTm90T3duZXI6IFwiVGhlIHJlcXVlc3RpbmcgdXNlciBpcyBub3QgdGhlIG93bmVyIG9mIHRoZSBzdHVkeSBncm91cC5cIixcbiAgICAgICAgRXJyb3JOdWxsU3R1ZHlHcm91cElucHV0OiBcIk9uZSBvciBtb3JlIHJlcXVpcmVkIGZpZWxkcyBhcmUgZW1wdHkuXCIsXG4gICAgICAgIFNldFJlY3VycmluZ01lZXRpbmc6IHtcbiAgICAgICAgICAgIEVycm9yOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gc2V0IHRoZSByZWN1cnJpbmcgbWVldGluZy5cIixcbiAgICAgICAgICAgIEludmFsaWRJbnB1dDogXCJPbmUgb3IgbW9yZSByZXF1aXJlZCBmaWVsZHMgaXMgZW1wdHkuXCIsXG4gICAgICAgICAgICBTdWNjZXNzOiBcIlRoZSByZWN1cnJpbmcgbWVldGluZyB3YXMgc2V0IHN1Y2Nlc3NmdWxseS5cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBSZXBvcnQ6IHtcbiAgICAgICAgRW1haWxTZW50OiBcIlJlcG9ydCBlbWFpbCB3YXMgc2VudC5cIixcbiAgICAgICAgRW1wdHlGaWVsZDogXCJFbXB0eSBmaWVsZCByZWNlaXZlZC4gUGxlYXNlIGluY2x1ZGUgYSBjb21tZW50IGFib3V0IHdoeSB5b3UgYXJlIHJlcG9ydGluZyB0aGlzIGl0ZW0uXCJcbiAgICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBSZXNwb25zZU1lc3NhZ2VzO1xuIiwiLyoqXG4gKiBUaGlzIGRlZmluZXMgdGhlIHJvdXRlcyB0aGUgc2VydmVyIHdpbGwgc2VydmUuXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICogQGRhdGUgICAwNy8zMS8yMDIxXG4gKi9cbmNvbnN0IFJvdXRlcyA9IHtcbiAgICBBY2NvdW50OiB7XG4gICAgICAgIENoYW5nZUVtYWlsOiBcIi9hcGkvYWNjb3VudC9jaGFuZ2UtZW1haWxcIixcbiAgICAgICAgQ2hhbmdlUGFzc3dvcmQ6IFwiL2FwaS9hY2NvdW50L2NoYW5nZS1wYXNzd29yZFwiLFxuICAgICAgICBDcmVhdGVBY2NvdW50OiBcIi9hcGkvYWNjb3VudC9jcmVhdGVcIixcbiAgICAgICAgRGVsZXRlOiBcIi9hcGkvYWNjb3VudC9kZWxldGVcIixcbiAgICAgICAgR2V0VW52ZXJpZmllZFVzZXI6IFwiL2FwaS9hY2NvdW50L2dldC11bnZlcmlmaWVkLXVzZXJcIixcbiAgICAgICAgTG9naW46IFwiL2FwaS9hY2NvdW50L2xvZ2luXCIsXG4gICAgICAgIFNldHVwQWNjb3VudDogXCIvYXBpL2FjY291bnQvc2V0dXBcIixcbiAgICAgICAgVXBkYXRlQXV0aGVudGljYXRpb25Ub2tlbjogXCIvYXBpL2FjY291bnQvdXBkYXRlLWF1dGhlbnRpY2F0aW9uLXRva2VuXCIsXG4gICAgICAgIFZlcmlmeUVtYWlsQ2hhbmdlOiBcIi9hcGkvYWNjb3VudC92ZXJpZnktZW1haWwtY2hhbmdlXCJcbiAgICB9LFxuICAgIE1lc3NhZ2U6IHtcbiAgICAgICAgR2V0Q29udmVyc2F0aW9uOiBcIi9hcGkvbWVzc2FnZS9nZXQtY29udmVyc2F0aW9uXCIsXG4gICAgICAgIEdldENvbnZlcnNhdGlvbnM6IFwiL2FwaS9tZXNzYWdlL2dldC1jb252ZXJzYXRpb25zXCIsXG4gICAgICAgIENyZWF0ZUNvbnZlcnNhdGlvbjogXCIvYXBpL21lc3NhZ2UvY3JlYXRlLWNvbnZlcnNhdGlvblwiXG4gICAgfSxcbiAgICBSZXBvcnQ6IHtcbiAgICAgICAgU2VuZFJlcG9ydDogXCIvYXBpL3JlcG9ydC9zZW5kLXJlcG9ydFwiXG4gICAgfSxcbiAgICBTdGF0aWNSZXNvdXJjZXM6IHtcbiAgICAgICAgSW5kZXg6IFwiLypcIlxuICAgIH0sXG4gICAgU2VhcmNoOiB7XG4gICAgICAgIEdldFNlYXJjaFJlc3VsdHM6IFwiL2FwaS9zZWFyY2gvZ2V0XCJcbiAgICB9LFxuICAgIFN0dWR5R3JvdXA6IHtcbiAgICAgICAgQWRkT25lVGltZU1lZXRpbmc6IFwiL2FwaS9zdHVkeS1ncm91cC9hZGQtb25lLXRpbWUtbWVldGluZ1wiLFxuICAgICAgICBDcmVhdGVQb3N0OiBcIi9hcGkvc3R1ZHktZ3JvdXAvY3JlYXRlLXBvc3RcIixcbiAgICAgICAgQ3JlYXRlU3R1ZHlHcm91cDogXCIvYXBpL3N0dWR5LWdyb3VwL2NyZWF0ZVwiLFxuICAgICAgICBEZWxldGVNZWV0aW5nOiBcIi9hcGkvc3R1ZHktZ3JvdXAvZGVsZXRlLW1lZXRpbmdcIixcbiAgICAgICAgRGVsZXRlU3R1ZHlHcm91cDogXCIvYXBpL3N0dWR5LWdyb3VwL2RlbGV0ZVwiLFxuICAgICAgICBFZGl0U3R1ZHlHcm91cDogXCIvYXBpL3N0dWR5LWdyb3VwL2VkaXQtc3R1ZHktZ3JvdXBcIixcbiAgICAgICAgRWRpdE1lZXRpbmc6IFwiL2FwaS9zdHVkeS1ncm91cC9lZGl0LW1lZXRpbmdcIixcbiAgICAgICAgR2V0VXNlclN0dWR5R3JvdXBzOiBcIi9hcGkvc3R1ZHktZ3JvdXAvZ2V0LWFsbFwiLFxuICAgICAgICBHZXRTdHVkeUdyb3VwOiBcIi9hcGkvc3R1ZHktZ3JvdXAvZ2V0XCIsXG4gICAgICAgIEpvaW5TdHVkeUdyb3VwOiBcIi9hcGkvc3R1ZHktZ3JvdXAvam9pblwiLFxuICAgICAgICBTZXRSZWN1cnJpbmdNZWV0aW5nOiBcIi9hcGkvc3R1ZHktZ3JvdXAvc2V0LXJlY3VycmluZy1tZWV0aW5nXCIsXG4gICAgICAgIExlYXZlU3R1ZHlHcm91cDogXCIvYXBpL3N0dWR5LWdyb3VwL2xlYXZlXCJcbiAgICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBSb3V0ZXM7XG4iLCJjb25zdCBSZXNwb25zZU1lc3NhZ2VzID0gcmVxdWlyZShcIi4vUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIik7XG5cbi8qKlxuICogVGhpcyBpcyB1c2VkIHRvIHZhbGlkYXRlIGFuZCB2ZXJpZnkgZGF0YSB0aHJvdWdob3V0IHRoZSBhcHBsaWNhdGlvbi5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDA3LzI5LzIwMjFcbiAqL1xuY2xhc3MgVmFsaWRhdG9yIHtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSB2YXJpYWJsZSBpcyBkZWZpbmVkLlxuICAgICAqIEBwYXJhbSB2YXJpYWJsZSBUaGUgdmFyaWFibGUgdG8gY2hlY2sgZm9yIGJlaW5nIGRlZmluZWQuXG4gICAgICogQHJldHVybiB7Ym9vbH0gVHJ1ZSBpZiB0aGUgdmFyaWFibGUgaXMgZGVmaW5lZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwNy8yOS8yMDIxXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBpc0RlZmluZWQodmFyaWFibGUpIHtcbiAgICAgICAgY29uc3QgdW5kZWZpbmVkVHlwZSA9IFwidW5kZWZpbmVkXCI7XG4gICAgICAgIGNvbnN0IGlzTm90VW5kZWZpbmVkID0gdW5kZWZpbmVkVHlwZSAhPT0gdHlwZW9mIHZhcmlhYmxlO1xuICAgICAgICBjb25zdCBpc05vdE51bGwgPSBudWxsICE9IHZhcmlhYmxlO1xuICAgICAgICByZXR1cm4gaXNOb3RVbmRlZmluZWQgJiYgaXNOb3ROdWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHZhcmlhYmxlIGlzIGFuIGVycm9yLlxuICAgICAqIEBwYXJhbSB2YXJpYWJsZSBUaGUgdmFyaWFibGUgdG8gY2hlY2sgZm9yIGJlaW5nIGFuIGVycm9yLlxuICAgICAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWYgdGhlIHZhcmlhYmxlIGlzIGFuIGVycm9yLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDA4LzAyLzIwMjFcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIGlzRXJyb3IodmFyaWFibGUpIHtcbiAgICAgICAgY29uc3QgdmFyaWFibGVJc0Vycm9yID0gdmFyaWFibGUgaW5zdGFuY2VvZiBFcnJvcjtcbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlSXNFcnJvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSB2YXJpYWJsZSBpcyB1bmRlZmluZWQuXG4gICAgICogQHBhcmFtIHZhcmlhYmxlIFRoZSB2YXJpYWJsZSB0byBjaGVjayBmb3IgYmVpbmcgdW5kZWZpbmVkLlxuICAgICAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWYgdGhlIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwNy8yOS8yMDIxXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBpc1VuZGVmaW5lZCh2YXJpYWJsZSkge1xuICAgICAgICBjb25zdCB1bmRlZmluZWRUeXBlID0gXCJ1bmRlZmluZWRcIjtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFR5cGUgPT09IHR5cGVvZiB2YXJpYWJsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgdGhlIGZvcm0gaW5wdXQgZm9yIGNoYW5naW5nIGEgdXNlcidzIGVtYWlsLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZUNoYW5nZUVtYWlsKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0TWlkZGxld2FyZUZ1bmN0aW9uKSB7XG4gICAgICAgIC8vIENIRUNLIFRIRSBJTlBVVCBGT1IgRU1QVFkgVkFMVUVTLlxuICAgICAgICBsZXQgaW5wdXRJc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgbGV0IGVycm9yID0gUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LkludmFsaWRBY2NvdW50SW5wdXQ7XG4gICAgICAgIGNvbnN0IHsgbmV3RW1haWwgfSA9IHJlcXVlc3QuYm9keTtcbiAgICAgICAgaWYgKG5ld0VtYWlsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaW5wdXRJc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDSEVDSyBUSEFUIFRIRSBFTUFJTCBJUyBWQUxJRC5cbiAgICAgICAgaWYgKCFWYWxpZGF0b3IudmFsaWRhdGVFbWFpbChuZXdFbWFpbCkpIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLkFjY291bnQuSW52YWxpZEVtYWlsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR0VORVJBVEUgVEhFIFJFU1BPTlNFLlxuICAgICAgICBpZiAoaW5wdXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBmb3JtIGlucHV0IGZvciBjcmVhdGluZyBhbiBhY2NvdW50LlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZUNyZWF0ZUFjY291bnRJbnB1dChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dE1pZGRsZXdhcmVGdW5jdGlvbikge1xuICAgICAgICAvLyBDSEVDSyBUSEUgSU5QVVQgRk9SIEVNUFRZIFZBTFVFUy5cbiAgICAgICAgbGV0IGlucHV0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgIGxldCBlcnJvciA9IFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5JbnZhbGlkQWNjb3VudElucHV0O1xuICAgICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCwgcGFzc3dvcmRfY29uZmlybWF0aW9uIH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGNvbnN0IGNvbmZpcm1QYXNzd29yZCA9IHBhc3N3b3JkX2NvbmZpcm1hdGlvbjtcbiAgICAgICAgaWYgKGVtYWlsLmxlbmd0aCA9PT0gMCB8fCBwYXNzd29yZC5sZW5ndGggPT09IDAgfHwgY29uZmlybVBhc3N3b3JkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaW5wdXRJc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDSEVDSyBUSEFUIFRIRSBFTUFJTCBJUyBWQUxJRC5cbiAgICAgICAgaWYgKCFWYWxpZGF0b3IudmFsaWRhdGVFbWFpbChlbWFpbCkpIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLkFjY291bnQuSW52YWxpZEVtYWlsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBNSU5JTVVNIExFTkdUSFMuXG4gICAgICAgIGNvbnN0IE1JTklNVU1fUEFTU1dPUkRfTEVOR1RIID0gNjtcbiAgICAgICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IE1JTklNVU1fUEFTU1dPUkRfTEVOR1RIKSB7XG4gICAgICAgICAgICBpbnB1dElzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGVycm9yID0gUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlBhc3N3b3JkVG9vU2hvcnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDSEVDSyBUSEFUIFRIRSBQQVNTV09SRFMgTUFUQ0guXG4gICAgICAgIGlmIChwYXNzd29yZCAhPT0gY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgICAgICBpbnB1dElzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGVycm9yID0gUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlBhc3N3b3Jkc011c3RNYXRjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdFTkVSQVRFIFRIRSBSRVNQT05TRS5cbiAgICAgICAgaWYgKGlucHV0SXNWYWxpZCkge1xuICAgICAgICAgICAgcmVxdWVzdC5jb25maXJtUGFzc3dvcmQgPSBjb25maXJtUGFzc3dvcmQ7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3IgY3JlYXRpbmcgYSBwb3N0LlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZUNyZWF0ZVBvc3QocmVxdWVzdCwgcmVzcG9uc2UsIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBFTVBUWSBWQUxVRVMuXG4gICAgICAgIGxldCBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICBsZXQgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuQ3JlYXRlUG9zdC5JbnZhbGlkSW5wdXQ7XG4gICAgICAgIGNvbnN0IHsgdGl0bGUsIGNhdGVnb3J5IH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGlmICh0aXRsZSA9PSBudWxsIHx8IHRpdGxlLmxlbmd0aCA9PT0gMCB8fCBjYXRlZ29yeSA9PSBudWxsIHx8IGNhdGVnb3J5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaW5wdXRJc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHRU5FUkFURSBUSEUgUkVTUE9OU0UuXG4gICAgICAgIGlmIChpbnB1dElzVmFsaWQpIHtcbiAgICAgICAgICAgIHJlcXVlc3QuYm9keS50eXBlID0gcmVxdWVzdC5ib2R5LmNhdGVnb3J5O1xuICAgICAgICAgICAgcmV0dXJuIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5lbmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyB0aGUgZm9ybSBpbnB1dCBmb3IgY3JlYXRpbmcgYSBzdHVkeSBncm91cCBiZWZvcmUgYSBzdHVkeSBncm91cCBnZXRzIGNyZWF0ZWQuXG4gICAgICogQGRhdGUgICAwMi8wNC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZUNyZWF0ZVN0dWR5R3JvdXBJbnB1dChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dE1pZGRsZXdhcmVGdW5jdGlvbikge1xuICAgICAgICAvLyBHRVQgVEhFIEZPUk0gSU5QVVQgREFUQS5cbiAgICAgICAgLy8gVGhlIGRhdGEgd2lsbCBhbGwgYmUgaW4gdGhlIHJlcXVlc3QuYm9keSBvYmplY3QgYXMgYXR0cmlidXRlcyBhY2NvcmRpbmcgdG8gZWFjaCdzIG5hbWUuXG4gICAgICAgIGxldCBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBncm91cENvbG9yLCBpc09ubGluZUdyb3VwLCBpc1R1dG9yR3JvdXAsIG5hbWUsIHN1YmplY3QgfSA9IHJlcXVlc3QuYm9keTtcbiAgICAgICAgaWYgKG5hbWUgPT0gbnVsbCB8fCBuYW1lLmxlbmd0aCA9PT0gMCB8fCBuYW1lID09IFwiXCIgfHwgZGVzY3JpcHRpb24gPT0gbnVsbCB8fCBkZXNjcmlwdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR0VORVJBVEUgVEhFIFJFU1BPTlNFLlxuICAgICAgICAvLyBJZiB0aGUgZGF0YSBpcyBpbnZhbGlkLCB0aGVuIGEgcmVzcG9uc2Ugc2hvdWxkIGJlIHJldHVybmVkIHdpdGggdGhlIGFwcHJvcHJpYXRlIG1lc3NhZ2UgaW5kaWNhdGluZyBzdWNoLlxuICAgICAgICBpZiAoIWlucHV0SXNWYWxpZCkge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5FcnJvck51bGxTdHVkeUdyb3VwSW5wdXQgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGRhdGEgaXMgdmFsaWQsIHRoZW4gdGhlIG5leHQgZnVuY3Rpb24gaW4gdGhlIG1pZGRsZXdhcmUgY2hhaW4gY2FuIGJlIGNhbGxlZC5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3IgZWRpdGluZyBhIG1lZXRpbmcuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDAzLzA4LzIwMjJcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIHZhbGlkYXRlRWRpdE1lZXRpbmcocmVxdWVzdCwgcmVzcG9uc2UsIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBFTVBUWSBWQUxVRVMuXG4gICAgICAgIGxldCBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICBsZXQgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuSW52YWxpZEFjY291bnRJbnB1dDtcbiAgICAgICAgY29uc3QgeyBkYXRlLCB0aW1lIH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGlmIChWYWxpZGF0b3IuaXNVbmRlZmluZWQoZGF0ZSkgfHwgVmFsaWRhdG9yLmlzVW5kZWZpbmVkKHRpbWUpKSB7XG4gICAgICAgICAgICBpbnB1dElzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdFTkVSQVRFIFRIRSBSRVNQT05TRS5cbiAgICAgICAgaWYgKGlucHV0SXNWYWxpZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5lbmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyB0aGUgaW5wdXQgZm9yIGVkaXRpbmcgYSBzdHVkeSBncm91cC5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMDMvMDgvMjAyMlxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgdmFsaWRhdGVFZGl0U3R1ZHlHcm91cChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dE1pZGRsZXdhcmVGdW5jdGlvbikge1xuICAgICAgICAvLyBDSEVDSyBUSEUgSU5QVVQgRk9SIEVNUFRZIFZBTFVFUy5cbiAgICAgICAgbGV0IGlucHV0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgIGxldCBlcnJvciA9IFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5JbnZhbGlkRWRpdFN0dWR5R3JvdXA7XG4gICAgICAgIGNvbnN0IHsgY291cnNlLCBkZXNjcmlwdGlvbiwgZ3JvdXBDb2xvciwgaXNPbmxpbmVHcm91cCwgaXNUdXRvckdyb3VwLCBuYW1lLCBzdWJqZWN0IH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGlmIChuYW1lID09IG51bGwgfHwgbmFtZS5sZW5ndGggPT09IDAgfHwgbmFtZSA9PSBcIlwiIHx8IGRlc2NyaXB0aW9uID09IG51bGwgfHwgZGVzY3JpcHRpb24ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpbnB1dElzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdFTkVSQVRFIFRIRSBSRVNQT05TRS5cbiAgICAgICAgaWYgKGlucHV0SXNWYWxpZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5lbmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhbiBlbWFpbCBpcyB2YWxpZC5cbiAgICAgKiBAYXV0aG9yIFczU2Nob29sc1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgdmFsaWRhdGVFbWFpbChlbWFpbCkge1xuICAgICAgICBpZiAoL15cXHcrKFtcXC4tXT9cXHcrKSpAXFx3KyhbXFwuLV0/XFx3KykqKFxcLlxcd3syLDN9KSskLy50ZXN0KGVtYWlsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgdGhlIGlucHV0IGZvciBjcmVhdGluZyBhIG9uZS10aW1lIG1lZXRpbmcuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDAzLzA4LzIwMjJcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIHZhbGlkYXRlT25lVGltZU1lZXRpbmcocmVxdWVzdCwgcmVzcG9uc2UsIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBFTVBUWSBWQUxVRVMuXG4gICAgICAgIGxldCBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICBsZXQgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuQWRkT25lVGltZU1lZXRpbmcuSW52YWxpZElucHV0O1xuICAgICAgICBjb25zdCB7IGRhdGUsIHRpbWUsIGRheSwgZGV0YWlscywgbG9jYXRpb24sIHJvb21OdW1iZXIgfSA9IHJlcXVlc3QuYm9keTtcbiAgICAgICAgaWYgKFZhbGlkYXRvci5pc1VuZGVmaW5lZChkYXRlKSB8fCBWYWxpZGF0b3IuaXNVbmRlZmluZWQodGltZSkgfHwgZGF0ZS5sZW5ndGggPT09IDAgfHwgdGltZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR0VORVJBVEUgVEhFIFJFU1BPTlNFLlxuICAgICAgICBpZiAoaW5wdXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3Igc2V0dGluZyBhIHJlY3VycmluZyBtZWV0aW5nLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZVNldFJlY3VycmluZ01lZXRpbmcocmVxdWVzdCwgcmVzcG9uc2UsIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBFTVBUWSBWQUxVRVMuXG4gICAgICAgIGxldCBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICBsZXQgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU2V0UmVjdXJyaW5nTWVldGluZy5JbnZhbGlkSW5wdXQ7XG4gICAgICAgIGNvbnN0IHsgZGF5LCBmcmVxdWVuY3ksIHRpbWUsIGRhdGUgfSA9IHJlcXVlc3QuYm9keTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgZnJlcXVlbmN5ID09IG51bGwgfHxcbiAgICAgICAgICAgIHRpbWUgPT0gbnVsbCB8fFxuICAgICAgICAgICAgZnJlcXVlbmN5Lmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgdGltZS5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgIFZhbGlkYXRvci5pc1VuZGVmaW5lZChkYXRlKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR0VORVJBVEUgVEhFIFJFU1BPTlNFLlxuICAgICAgICBpZiAoaW5wdXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3Igc2V0dGluZyB1cCBhbiBhY2NvdW50LlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZVNldHVwQWNjb3VudChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dE1pZGRsZXdhcmVGdW5jdGlvbikge1xuICAgICAgICAvLyBDSEVDSyBUSEUgSU5QVVQgRk9SIEVNUFRZIFZBTFVFUy5cbiAgICAgICAgbGV0IGlucHV0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgIGxldCBlcnJvciA9IFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5JbnZhbGlkQWNjb3VudElucHV0O1xuICAgICAgICBjb25zdCB7IGFyZWFDb2RlLCBuYW1lIH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGlmIChhcmVhQ29kZSA9PSBudWxsIHx8IGFyZWFDb2RlLmxlbmd0aCA9PT0gMCB8fCBuYW1lID09IG51bGwgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR0VORVJBVEUgVEhFIFJFU1BPTlNFLlxuICAgICAgICBpZiAoaW5wdXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3IgY2hhbmdpbmcgYSBwYXNzd29yZC5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMDIvMDgvMjAyMlxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgdmFsaWRhdGVQYXNzd29yZElucHV0KHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0TWlkZGxld2FyZUZ1bmN0aW9uKSB7XG4gICAgICAgIC8vIEdFVCBUSEUgRk9STSBJTlBVVCBEQVRBLlxuICAgICAgICBjb25zdCBjdXJyZW50UGFzc3dvcmQgPSByZXF1ZXN0LmJvZHkuY3VycmVudFBhc3N3b3JkO1xuICAgICAgICBjb25zdCBuZXdQYXNzd29yZCA9IHJlcXVlc3QuYm9keS5uZXdQYXNzd29yZDtcblxuICAgICAgICAvLyBDSEVDSyBUSEFUIE5FSVRIRVIgSU5QVVQgSVMgRU1QVFkuXG4gICAgICAgIGNvbnN0IEVNUFRZX1NUUklORyA9IFwiXCI7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYXNzd29yZElzRW1wdHkgPSBFTVBUWV9TVFJJTkcgPT09IGN1cnJlbnRQYXNzd29yZDtcbiAgICAgICAgY29uc3QgbmV3UGFzc3dvcmRJc0VtcHR5ID0gRU1QVFlfU1RSSU5HID09PSBuZXdQYXNzd29yZDtcbiAgICAgICAgY29uc3QgcGFzc3dvcmRzQXJlRW1wdHkgPSBjdXJyZW50UGFzc3dvcmRJc0VtcHR5IHx8IG5ld1Bhc3N3b3JkSXNFbXB0eTtcbiAgICAgICAgaWYgKHBhc3N3b3Jkc0FyZUVtcHR5KSB7XG4gICAgICAgICAgICByZXNwb25zZS5qc29uKHsgbWVzc2FnZTogUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LkVycm9ySW52YWxpZFBhc3N3b3JkSW5wdXQgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDT05USU5VRSBXSVRIIFRIRSBQQVNTV09SRCBDSEFOR0lORyBQUk9DRVNTLlxuICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWYWxpZGF0b3I7XG4iLCJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cbiIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1NZXJyaXdlYXRoZXI6aXRhbCx3Z2h0QDAsMzAwOzAsNDAwOzAsNzAwOzAsOTAwOzEsMzAwOzEsNDAwOzEsNzAwOzEsOTAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIip7Zm9udC1mYW1pbHk6XFxcIk1lcnJpd2VhdGhlclxcXCIsIHNlcmlmO292ZXJmbG93LXg6aGlkZGVuO21hcmdpbjowO3BhZGRpbmc6MDtib3gtc2l6aW5nOmJvcmRlci1ib3g7c2Nyb2xsYmFyLXdpZHRoOm5vbmU7LW1zLW92ZXJmbG93LXN0eWxlOm5vbmV9KiA6Oi13ZWJraXQtc2Nyb2xsYmFye3dpZHRoOjBweDtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50fWh0bWx7YmFja2dyb3VuZC1jb2xvcjojZjlmNWYxO2JhY2tncm91bmQtaW1hZ2U6dXJsKFxcXCJodHRwczovL3d3dy5mbGlwbmF0aW9uYWwub3JnL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE4LzAzL0NBRS1XZWJzaXRlLUZ1bGwtQmFja2dyb3VuZC1UZXh0dXJlMTkwMngxMjAwLTkuanBnXFxcIik7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtoZWlnaHQ6MTAwJTtwb3NpdGlvbjpmaXhlZDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RvcDowO2xlZnQ6MDtvdmVyZmxvdy15OmhpZGRlbn1odG1sIGJvZHl7b3ZlcmZsb3c6aGlkZGVuO2hlaWdodDoxMDAlfWh0bWwgYm9keSAjcm9vdHtoZWlnaHQ6MTAwJX1odG1sIGJvZHkgI3Jvb3QgLmNvbnRhaW5lcntoZWlnaHQ6MTAwJTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO292ZXJmbG93OmhpZGRlbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL0FwcC5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2dsb2JhbHMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFHQSxFQUNJLGlDQUFrQyxDQUNsQyxpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULFNBQVUsQ0FDVixxQkFBc0IsQ0FLdEIsb0JBQXFCLENBQ3JCLHVCQUF3QixDQVg1QixzQkFPUSxTQUFVLENBQ1Ysc0JBQXVCLENBQzFCLEtBS0Qsd0JDakIyQixDRG1CM0Isa0lBQW1JLENBR25JLDBCQUEyQixDQUMzQiwyQkFBNEIsQ0FDNUIscUJBQXNCLENBRXRCLFdBQVksQ0FDWixjQUFlLENBQ2YsVUFBVyxDQUNYLFdBQVksQ0FDWixLQUFNLENBQ04sTUFBTyxDQUNQLGlCQUFrQixDQWhCdEIsVUFtQlEsZUFBZ0IsQ0FDaEIsV0FBWSxDQXBCcEIsZ0JBc0JZLFdBQVksQ0F0QnhCLDJCQXdCZ0IsV0FBWSxDQUNaLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsZUFBZ0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi9nbG9iYWxzLnNjc3NcXFwiO1xcbkBpbXBvcnQgdXJsKFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU1lcnJpd2VhdGhlcjppdGFsLHdnaHRAMCwzMDA7MCw0MDA7MCw3MDA7MCw5MDA7MSwzMDA7MSw0MDA7MSw3MDA7MSw5MDAmZGlzcGxheT1zd2FwXFxcIik7XFxuXFxuKiB7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiTWVycml3ZWF0aGVyXFxcIiwgc2VyaWY7XFxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXG4gICAgICAgIHdpZHRoOiAwcHg7XFxuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgfVxcbiAgICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7IC8qIEZpcmVmb3ggKi9cXG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lOyAvKiBJRSAxMCsgKi9cXG59XFxuaHRtbCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRtYWluLWJhY2tncm91bmQtY29sb3I7XFxuICAgIC8qIFRoZSBpbWFnZSB1c2VkICovXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiaHR0cHM6Ly93d3cuZmxpcG5hdGlvbmFsLm9yZy93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wMy9DQUUtV2Vic2l0ZS1GdWxsLUJhY2tncm91bmQtVGV4dHVyZTE5MDJ4MTIwMC05LmpwZ1xcXCIpO1xcblxcbiAgICAvKiBDZW50ZXIgYW5kIHNjYWxlIHRoZSBpbWFnZSBuaWNlbHkgKi9cXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcblxcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgdG9wOiAwO1xcbiAgICBsZWZ0OiAwO1xcbiAgICBvdmVyZmxvdy15OiBoaWRkZW47XFxuXFxuICAgIGJvZHkge1xcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICAgICNyb290IHtcXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgICAgICAgICAgLmNvbnRhaW5lciB7XFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXCIsXCIkbWFpbi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmNWYxO1xcbiRwcmltYXJ5LWJ1dHRvbi1jb2xvcjogI2Q0YWE4YztcXG4kY3JlYXRpb24tYnV0dG9uLWNvbG9yOiAjNzJiYTcyO1xcbiRkZXN0cnVjdGl2ZS1idXR0b24tY29sb3I6ICM5MzMyMzI7XFxuJGJvcmRlci1jb2xvcjogI2Q0YWE4YztcXG4kaGlnaGxpZ2h0LWNvbG9yOiAjZmZkYTVhO1xcblxcbiRtb2JpbGUtd2lkdGg6IDk1MHB4O1xcblxcbkBtaXhpbiBtb2JpbGUge1xcbiAgICBAbWVkaWEgKG1heC13aWR0aDojeyRtb2JpbGUtd2lkdGh9KSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYWNjb3VudC1wYWdlIC5pbmZvc3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3BhZGRpbmctYm90dG9tOjE1MHB4O3BhZGRpbmctdG9wOjIwcHh9LmFjY291bnQtcGFnZSAuaW5mb3MgLnVzZXItaW5mb3twYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LDAuNDM0KTtiYWNrZHJvcC1maWx0ZXI6Ymx1cigzcHgpOy13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTtib3JkZXItcmFkaXVzOjRweDtib3JkZXItYm90dG9tOiNkNGFhOGMgM3B4IHNvbGlkO2JveC1zaGFkb3c6cmdiYSg2LDYsNiwwLjEzMikgMnB4IDJweCAxMHB4O21hcmdpbjo1cHggMjBweCA1cHggMjBweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmFjY291bnQtcGFnZSAuaW5mb3MgLnVzZXItaW5mbyBoMXtmbGV4OjE7Zm9udC1zaXplOjE1cHg7dGV4dC1hbGlnbjpsZWZ0fS5hY2NvdW50LXBhZ2UgLmluZm9zIC51c2VyLWluZm8gcHtmb250LXNpemU6MTdweH0uYWNjb3VudC1wYWdlIC5lZGl0LWFjY291bnQtYnV0dG9uc3tkaXNwbGF5OmZsZXg7cG9zaXRpb246Zml4ZWQ7Ym90dG9tOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjVlbTtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO2JveC1zaGFkb3c6cmdiYSgwLDAsMCwwLjE1MSkgLTIwcHggMCAyMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvUGFnZXMvQWNjb3VudC9BY2NvdW50LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EscUJBRVEsWUFBYSxDQUNiLHFCQUFzQixDQTJCdEIsb0JBQXFCLENBQ3JCLGdCQUFpQixDQS9CekIsZ0NBTVksWUFBYSxDQUNiLHdDQUE0QyxDQUM1Qyx5QkFBMEIsQ0FDMUIsaUNBQWtDLENBRWxDLGlCQUFrQixDQUVsQiwrQkFBc0MsQ0FDdEMseUNBQTZDLENBQzdDLHdCQUF5QixDQUN6QixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLHNCQUF1QixDQWxCbkMsbUNBcUJnQixNQUFPLENBQ1AsY0FBZSxDQUNmLGVBQWdCLENBdkJoQyxrQ0EyQmdCLGNBQWUsQ0EzQi9CLG9DQWtDUSxZQUFhLENBQ2IsY0FBZSxDQUNmLFFBQVMsQ0FDVCxNQUFPLENBQ1AsVUFBVyxDQUNYLFVBQVcsQ0FDWCxzQkFBdUIsQ0FDdkIseUNBQTZDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxyXFxuLmFjY291bnQtcGFnZSB7XFxyXFxuICAgIC5pbmZvcyB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHJcXG4gICAgICAgIC51c2VyLWluZm8ge1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQzNCk7XFxyXFxuICAgICAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDNweCk7XFxyXFxuICAgICAgICAgICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoM3B4KTtcXHJcXG5cXHJcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuXFxyXFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogJGJvcmRlci1jb2xvciAzcHggc29saWQ7XFxyXFxuICAgICAgICAgICAgYm94LXNoYWRvdzogcmdiYSg2LCA2LCA2LCAwLjEzMikgMnB4IDJweCAxMHB4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbjogNXB4IDIwcHggNXB4IDIwcHg7XFxyXFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcclxcbiAgICAgICAgICAgIGgxIHtcXHJcXG4gICAgICAgICAgICAgICAgZmxleDogMTtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xcclxcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3B4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAxNTBweDtcXHJcXG4gICAgICAgIHBhZGRpbmctdG9wOiAyMHB4O1xcclxcbiAgICB9XFxyXFxuICAgIC5lZGl0LWFjY291bnQtYnV0dG9ucyB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICAgICAgYm90dG9tOiAwO1xcclxcbiAgICAgICAgbGVmdDogMDtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgaGVpZ2h0OiA1ZW07XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4xNTEpIC0yMHB4IDAgMjBweDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuSG9tZVBhZ2V7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0uSG9tZVBhZ2UgLnN1YnRpdGxle3Bvc2l0aW9uOmFic29sdXRlO2ZvbnQtc2l6ZTo4MHB4O21hcmdpbjoxMDBweDtvdmVyZmxvdy14OnZpc2libGU7Zm9udC13ZWlnaHQ6MzAwO2NvbG9yOnJnYmEoNTgsNTgsNTgsMC44NzIpO2ZvbnQtd2VpZ2h0OjkwMDtmb250LXNpemU6OTBweH0uSG9tZVBhZ2U6OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7d2lkdGg6OTQlO2hlaWdodDo4MHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZGE1YTtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4Oi0yO3RvcDo3ZW07cmlnaHQ6MH1AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5Ib21lUGFnZXtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MDttYXJnaW46MH0uSG9tZVBhZ2U6OmFmdGVye2Rpc3BsYXk6bm9uZX0uSG9tZVBhZ2UgLnN1YnRpdGxle2Rpc3BsYXk6bm9uZX19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9QYWdlcy9Ib21lL0hvbWUuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsVUFDSSxVQUFXLENBQ1gsV0FBWSxDQUZoQixvQkFLUSxpQkFBa0IsQ0FDbEIsY0FBZSxDQUNmLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsZUFBZ0IsQ0FDaEIsMEJBQThCLENBQzlCLGVBQWdCLENBQ2hCLGNBQWUsQ0FadkIsaUJBZ0JRLFVBQVcsQ0FDWCxTQUFVLENBQ1YsV0FBWSxDQUNaLHdCQ2ZpQixDRGdCakIsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxPQUFRLENBQ1IsT0FBUSxDQUNYLDBCQXhCTCxVQTRCWSxhQUFjLENBQ2QsU0FBVSxDQUNWLFFBQVMsQ0E5QnJCLGlCQWlDWSxZQUFhLENBakN6QixvQkFvQ1ksWUFBYSxDQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5Ib21lUGFnZSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuXFxuICAgIC5zdWJ0aXRsZSB7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBmb250LXNpemU6IDgwcHg7XFxuICAgICAgICBtYXJnaW46IDEwMHB4O1xcbiAgICAgICAgb3ZlcmZsb3cteDogdmlzaWJsZTtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICAgICAgICBjb2xvcjogcmdiYSg1OCwgNTgsIDU4LCAwLjg3Mik7XFxuICAgICAgICBmb250LXdlaWdodDogOTAwO1xcbiAgICAgICAgZm9udC1zaXplOiA5MHB4O1xcbiAgICB9XFxuXFxuICAgICY6OmFmdGVyIHtcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgd2lkdGg6IDk0JTtcXG4gICAgICAgIGhlaWdodDogODBweDtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICB6LWluZGV4OiAtMjtcXG4gICAgICAgIHRvcDogN2VtO1xcbiAgICAgICAgcmlnaHQ6IDA7XFxuICAgIH1cXG5cXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtb2JpbGUtd2lkdGgpIHtcXG4gICAgICAgICYge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgICAgICAgbWFyZ2luOiAwO1xcbiAgICAgICAgfVxcbiAgICAgICAgJjo6YWZ0ZXIge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICB9XFxuICAgICAgICAuc3VidGl0bGUge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXCIsXCIkbWFpbi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmNWYxO1xcbiRwcmltYXJ5LWJ1dHRvbi1jb2xvcjogI2Q0YWE4YztcXG4kY3JlYXRpb24tYnV0dG9uLWNvbG9yOiAjNzJiYTcyO1xcbiRkZXN0cnVjdGl2ZS1idXR0b24tY29sb3I6ICM5MzMyMzI7XFxuJGJvcmRlci1jb2xvcjogI2Q0YWE4YztcXG4kaGlnaGxpZ2h0LWNvbG9yOiAjZmZkYTVhO1xcblxcbiRtb2JpbGUtd2lkdGg6IDk1MHB4O1xcblxcbkBtaXhpbiBtb2JpbGUge1xcbiAgICBAbWVkaWEgKG1heC13aWR0aDojeyRtb2JpbGUtd2lkdGh9KSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubWVzc2FnZS1wYWdle2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OjEwMCU7cG9zaXRpb246cmVsYXRpdmV9Lm1lc3NhZ2UtcGFnZSAubWVzc2FnZS1hcmVhe2ZsZXg6MTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm1lc3NhZ2UtcGFnZSAuZ3Vlc3QtbWVzc2FnZXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2hlaWdodDoxMDAlO3dpZHRoOjEwMCV9Lm1lc3NhZ2UtcGFnZSAuZ3Vlc3QtbWVzc2FnZSBoMXttYXJnaW46MjBweDtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZkYTVhfS5tZXNzYWdlLXBhZ2UgLmd1ZXN0LW1lc3NhZ2UgcHtwYWRkaW5nOjEwcHg7Y29sb3I6IzU3NTc1Nztmb250LXNpemU6MjBweH0ubWVzc2FnZS1wYWdlIC5vcGVuLWNoYXRzLXZpZXctYnV0dG9uLWNvbnRhaW5lcntwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5Om5vbmU7dG9wOjVweDtyaWdodDowO3otaW5kZXg6MH1AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5tZXNzYWdlLXBhZ2UgLm9wZW4tY2hhdHMtdmlldy1idXR0b24tY29udGFpbmVye2Rpc3BsYXk6YmxvY2t9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvUGFnZXMvTWVzc2FnZS9NZXNzYWdlLnNjc3NcIixcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvZ2xvYmFscy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLGNBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUN0QixXQUFZLENBRVosaUJBQWtCLENBTHRCLDRCQVFRLE1BQU8sQ0FDUCxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLHNCQUF1QixDQVgvQiw2QkFlUSxZQUFhLENBQ2IscUJBQXNCLENBQ3RCLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FFdkIsV0FBWSxDQUNaLFVBQVcsQ0FyQm5CLGdDQXdCWSxXQUFZLENBQ1osWUFBYSxDQUNiLHdCQ3RCYSxDREp6QiwrQkE2QlksWUFBYSxDQUNiLGFBQXNCLENBQ3RCLGNBQWUsQ0EvQjNCLGdEQW9DUSxpQkFBa0IsQ0FDbEIsWUFBYSxDQUNiLE9BQVEsQ0FDUixPQUFRLENBQ1IsU0FBVSxDQUliLDBCQTVDTCxnREEwQ1ksYUFBYyxDQUVyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5tZXNzYWdlLXBhZ2Uge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXG4gICAgLm1lc3NhZ2UtYXJlYSB7XFxuICAgICAgICBmbGV4OiAxO1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgfVxcblxcbiAgICAuZ3Vlc3QtbWVzc2FnZSB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cXG4gICAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcblxcbiAgICAgICAgaDEge1xcbiAgICAgICAgICAgIG1hcmdpbjogMjBweDtcXG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxuICAgICAgICB9XFxuICAgICAgICBwIHtcXG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoODcsIDg3LCA4Nyk7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5vcGVuLWNoYXRzLXZpZXctYnV0dG9uLWNvbnRhaW5lciB7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICAgICAgdG9wOiA1cHg7XFxuICAgICAgICByaWdodDogMDtcXG4gICAgICAgIHotaW5kZXg6IDA7XFxuICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA5NTBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnBhZ2V7YW5pbWF0aW9uOnBhZ2UtbG9hZC11cCAwLjNzIGVhc2Utb3V0O3BhZGRpbmctdG9wOjBweDtwb3NpdGlvbjpmaXhlZDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt0b3A6MGVtO2ZsZXg6MX0ucGFnZS5zaG93aW5nUGFnZVRpdGxle3BhZGRpbmctdG9wOjEwZW19LnBhZ2UgLnBhZ2UtdGl0bGV7cGFkZGluZzo0MHB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7b3ZlcmZsb3c6aGlkZGVuO2hlaWdodDo2ZW07cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7bWFyZ2luLXRvcDo0ZW07YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEwMyw3OCw0OCwwLjA4NCk7YmFja2Ryb3AtZmlsdGVyOmJsdXIoMTBweCk7LXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6Ymx1cigxMHB4KTtjb2xvcjpyZ2JhKDAsMCwwLDAuODU4KTt0ZXh0LXNoYWRvdzpyZ2JhKDAsMCwwLDAuMTIzKSAwIDNweCAxcHg7ei1pbmRleDowO2JveC1zaGFkb3c6aW5zZXQgMHB4IDBweCAxMHB4IHJnYmEoMCwwLDAsMC4xMjMpfUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7LnBhZ2UgLnBhZ2UtdGl0bGV7cGFkZGluZzo0MHB4fX0ucGFnZSAucGFnZS10aXRsZSBoMXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmRhNWE7cGFkZGluZzowIDIwcHggMCAyMHB4O3RleHQtYWxpZ246bGVmdH1Aa2V5ZnJhbWVzIHBhZ2UtbG9hZC11cHswJXtvcGFjaXR5OjA7bWFyZ2luLXRvcDoyMHB4fTEwMCV7b3BhY2l0eToxO21hcmdpbi10b3A6MDBweH19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9QYWdlcy9QYWdlLnNjc3NcIixcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvZ2xvYmFscy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLE1BQ0ksb0NBQXFDLENBQ3JDLGVBQWdCLENBQ2hCLGNBQWUsQ0FDZixNQUFPLENBQ1AsVUFBVyxDQUNYLFdBQVksQ0FDWixPQUFRLENBSVIsTUFBTyxDQVhYLHVCQVNRLGdCQUFpQixDQVR6QixrQkFhUSxZQUFhLENBSWIsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixlQUFnQixDQUNoQixVQUFXLENBRVgsY0FBZSxDQUNmLEtBQU0sQ0FDTixNQUFPLENBQ1AsVUFBVyxDQUNYLGNBQWUsQ0FFZixzQ0FBMEMsQ0FDMUMsMEJBQTJCLENBQzNCLGtDQUFtQyxDQUVuQyx1QkFBMkIsQ0FDM0IsdUNBQTJDLENBQzNDLFNBQVUsQ0FDViwrQ0FBbUQsQ0FTdEQsMEJBNUNMLGtCQWVZLFlBQWEsQ0E2QnBCLENBNUNMLHFCQXNDWSx3QkNsQ2EsQ0RtQ2IscUJBQXNCLENBRXRCLGVBQWdCLENBRW5CLHdCQUlMLEdBQ0ksU0FBVSxDQUNWLGVBQWdCLENBRXBCLEtBQ0ksU0FBVSxDQUNWLGVBQWdCLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG4ucGFnZSB7XFxyXFxuICAgIGFuaW1hdGlvbjogcGFnZS1sb2FkLXVwIDAuM3MgZWFzZS1vdXQ7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAwcHg7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgbGVmdDogMDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgdG9wOiAwZW07XFxyXFxuICAgICYuc2hvd2luZ1BhZ2VUaXRsZSB7XFxyXFxuICAgICAgICBwYWRkaW5nLXRvcDogMTBlbTtcXHJcXG4gICAgfVxcclxcbiAgICBmbGV4OiAxO1xcclxcbiAgICAucGFnZS10aXRsZSB7XFxyXFxuICAgICAgICBwYWRkaW5nOiA0MHB4O1xcclxcbiAgICAgICAgQGluY2x1ZGUgbW9iaWxlIHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiA0MHB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgaGVpZ2h0OiA2ZW07XFxyXFxuXFxyXFxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgICAgICB0b3A6IDA7XFxyXFxuICAgICAgICBsZWZ0OiAwO1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiA0ZW07XFxyXFxuXFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEwMywgNzgsIDQ4LCAwLjA4NCk7XFxyXFxuICAgICAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTBweCk7XFxyXFxuICAgICAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTtcXHJcXG5cXHJcXG4gICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODU4KTtcXHJcXG4gICAgICAgIHRleHQtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMTIzKSAwIDNweCAxcHg7XFxyXFxuICAgICAgICB6LWluZGV4OiAwO1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMHB4IDBweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xMjMpO1xcclxcblxcclxcbiAgICAgICAgaDEge1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogMCAyMHB4IDAgMjBweDtcXHJcXG4gICAgICAgICAgICAvLyB3aWR0aDogMTUwcHg7XFxyXFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gICAgICAgICAgICAvLyBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcbkBrZXlmcmFtZXMgcGFnZS1sb2FkLXVwIHtcXHJcXG4gICAgMCUge1xcclxcbiAgICAgICAgb3BhY2l0eTogMDtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDIwcHg7XFxyXFxuICAgIH1cXHJcXG4gICAgMTAwJSB7XFxyXFxuICAgICAgICBvcGFjaXR5OiAxO1xcclxcbiAgICAgICAgbWFyZ2luLXRvcDogMDBweDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIixcIiRtYWluLWJhY2tncm91bmQtY29sb3I6ICNmOWY1ZjE7XFxuJHByaW1hcnktYnV0dG9uLWNvbG9yOiAjZDRhYThjO1xcbiRjcmVhdGlvbi1idXR0b24tY29sb3I6ICM3MmJhNzI7XFxuJGRlc3RydWN0aXZlLWJ1dHRvbi1jb2xvcjogIzkzMzIzMjtcXG4kYm9yZGVyLWNvbG9yOiAjZDRhYThjO1xcbiRoaWdobGlnaHQtY29sb3I6ICNmZmRhNWE7XFxuXFxuJG1vYmlsZS13aWR0aDogOTUwcHg7XFxuXFxuQG1peGluIG1vYmlsZSB7XFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiN7JG1vYmlsZS13aWR0aH0pIHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zZWFyY2gtcGFnZXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2hlaWdodDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlfS5zZWFyY2gtcGFnZSAuc2VhcmNoLWFyZWF7ZmxleDoxO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uc2VhcmNoLXBhZ2UgLm9wZW4tc2VhcmNoLWZpbHRlci1idXR0b24tY29udGFpbmVye3Bvc2l0aW9uOmZpeGVkO2Rpc3BsYXk6bm9uZTtib3R0b206MDtyaWdodDowfUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7LnNlYXJjaC1wYWdlIC5vcGVuLXNlYXJjaC1maWx0ZXItYnV0dG9uLWNvbnRhaW5lcntkaXNwbGF5OmJsb2NrfX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1BhZ2VzL1NlYXJjaC9TZWFyY2guc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxhQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsV0FBWSxDQUNaLGlCQUFrQixDQUp0QiwwQkFPUSxNQUFPLENBQ1AsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FWL0Isa0RBYVEsY0FBZSxDQUNmLFlBQWEsQ0FDYixRQUFTLENBQ1QsT0FBUSxDQUlYLDBCQXBCTCxrREFrQlksYUFBYyxDQUVyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5zZWFyY2gtcGFnZSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcblxcbiAgICAuc2VhcmNoLWFyZWEge1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIH1cXG4gICAgLm9wZW4tc2VhcmNoLWZpbHRlci1idXR0b24tY29udGFpbmVyIHtcXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICBib3R0b206IDA7XFxuICAgICAgICByaWdodDogMDtcXG4gICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnN0dWR5LWdyb3VwLXBhZ2V7aGVpZ2h0OjEwMCU7b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnN0dWR5LWdyb3VwLXBhZ2UgLnBhZ2UtdGl0bGUtc3R1ZHktZ3JvdXB7cGFkZGluZzo0MHB4O21hcmdpbjo4MHB4IDIwcHggMCAyMHB4O2JvcmRlcjp3aGl0ZSA2cHggc29saWQ7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtvdmVyZmxvdzpoaWRkZW47aGVpZ2h0OjZlbTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTAzLDc4LDQ4LDAuMDg0KTtiYWNrZHJvcC1maWx0ZXI6Ymx1cigxMHB4KTstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpibHVyKDEwcHgpO2NvbG9yOnJnYmEoMCwwLDAsMC44NTgpO3RleHQtc2hhZG93OnJnYmEoMCwwLDAsMC4xMjMpIDAgM3B4IDFweDt6LWluZGV4OjM5O2JveC1zaGFkb3c6MHB4IDBweCAxMHB4IHJnYmEoMCwwLDAsMC4xMjMpfS5zdHVkeS1ncm91cC1wYWdlIC5wYWdlLXRpdGxlLXN0dWR5LWdyb3VwIGgxe3BhZGRpbmc6MCAyMHB4IDAgMjBweDt0ZXh0LWFsaWduOmxlZnQ7Y29sb3I6d2hpdGV9LnN0dWR5LWdyb3VwLXBhZ2UgLm1haW4tdmlld3tmbGV4OjE7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztvdmVyZmxvdzpoaWRkZW59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9QYWdlcy9TdHVkeUdyb3VwL1N0dWR5R3JvdXAuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxrQkFDSSxXQUFZLENBQ1osZUFBZ0IsQ0FDaEIsWUFBYSxDQUNiLHFCQUFzQixDQUoxQiwwQ0FRUSxZQUFhLENBQ2IsdUJBQXdCLENBQ3hCLHNCQUF1QixDQUN2QixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLGVBQWdCLENBQ2hCLFVBQVcsQ0FDWCxzQ0FBMEMsQ0FDMUMsMEJBQTJCLENBQzNCLGtDQUFtQyxDQUVuQyx1QkFBMkIsQ0FDM0IsdUNBQTJDLENBQzNDLFVBQVcsQ0FDWCx5Q0FBNkMsQ0F0QnJELDZDQXlCWSxxQkFBc0IsQ0FFdEIsZUFBZ0IsQ0FDaEIsV0FBWSxDQTVCeEIsNkJBa0NRLE1BQU8sQ0FDUCxZQUFhLENBQ2Isa0JBQW1CLENBRW5CLGVBQWdCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxyXFxuLnN0dWR5LWdyb3VwLXBhZ2Uge1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIC8vIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuXFxyXFxuICAgIC5wYWdlLXRpdGxlLXN0dWR5LWdyb3VwIHtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDQwcHg7XFxyXFxuICAgICAgICBtYXJnaW46IDgwcHggMjBweCAwIDIwcHg7XFxyXFxuICAgICAgICBib3JkZXI6IHdoaXRlIDZweCBzb2xpZDtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgICAgIGhlaWdodDogNmVtO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMDMsIDc4LCA0OCwgMC4wODQpO1xcclxcbiAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpO1xcclxcbiAgICAgICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTBweCk7XFxyXFxuXFxyXFxuICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjg1OCk7XFxyXFxuICAgICAgICB0ZXh0LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjEyMykgMCAzcHggMXB4O1xcclxcbiAgICAgICAgei1pbmRleDogMzk7XFxyXFxuICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjEyMyk7XFxyXFxuXFxyXFxuICAgICAgICBoMSB7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogMCAyMHB4IDAgMjBweDtcXHJcXG4gICAgICAgICAgICAvLyB3aWR0aDogMTUwcHg7XFxyXFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gICAgICAgICAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgICAgICAgICAgLy8gcGFkZGluZy1yaWdodDogMjBweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAubWFpbi12aWV3IHtcXHJcXG4gICAgICAgIGZsZXg6IDE7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG5cXHJcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnN0dWR5LXBhZ2V7cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3cteTp2aXNpYmxlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OjEwMCU7b3ZlcmZsb3c6aGlkZGVufS5zdHVkeS1wYWdlIC5ndWVzdC1tZXNzYWdle2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJX0uc3R1ZHktcGFnZSAuZ3Vlc3QtbWVzc2FnZSBoMXttYXJnaW46MjBweDtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZkYTVhfS5zdHVkeS1wYWdlIC5ndWVzdC1tZXNzYWdlIHB7cGFkZGluZzoxMHB4O2NvbG9yOiM1NzU3NTc7Zm9udC1zaXplOjIwcHh9LnN0dWR5LXBhZ2UgLmFkZC1idXR0b257cG9zaXRpb246Zml4ZWQ7dG9wOjEwLjVlbTtyaWdodDo1ZW07ei1pbmRleDo4O292ZXJmbG93OmhpZGRlbjtoZWlnaHQ6NDBweDt3aWR0aDo0MHB4O2JvcmRlci1yYWRpdXM6MjBweDtjb2xvcjp3aGl0ZTtib3JkZXI6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiNkZWI1NmI7Ym94LXNoYWRvdzowcHggMnB4IDIwcHggcmdiYSgxMDksMTA5LDEwOSwwLjU4Mik7Y3Vyc29yOnBvaW50ZXJ9LnN0dWR5LXBhZ2UgLmFkZC1idXR0b246OmFmdGVye2NvbnRlbnQ6XFxcIitcXFwiO2ZvbnQtc2l6ZTo0NHB4O3Bvc2l0aW9uOmFic29sdXRlO3RvcDotOC41cHg7bGVmdDoxNCV9LnN0dWR5LXBhZ2UgLnN0dWR5LWdyb3Vwcy1jb250YWluZXJ7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7ZmxleC13cmFwOndyYXA7cGFkZGluZzoxMHB4O292ZXJmbG93LXk6YXV0b31AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5zdHVkeS1wYWdlIC5zdHVkeS1ncm91cHMtY29udGFpbmVye2Rpc3BsYXk6YmxvY2t9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHkvU3R1ZHkuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsWUFDSSxpQkFBa0IsQ0FDbEIsa0JBQW1CLENBQ25CLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsV0FBWSxDQUNaLGVBQWdCLENBTnBCLDJCQVNRLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsa0JBQW1CLENBQ25CLHNCQUF1QixDQUV2QixXQUFZLENBQ1osVUFBVyxDQWZuQiw4QkFrQlksV0FBWSxDQUNaLFlBQWEsQ0FDYix3QkNoQmEsQ0RKekIsNkJBdUJZLFlBQWEsQ0FDYixhQUFzQixDQUN0QixjQUFlLENBekIzQix3QkErQlEsY0FBZSxDQUNmLFVBQVcsQ0FDWCxTQUFVLENBQ1YsU0FBVSxDQUNWLGVBQWdCLENBR2hCLFdBQVksQ0FDWixVQUFXLENBQ1gsa0JBQW1CLENBR25CLFdBQVksQ0FHWixXQUFZLENBQ1osd0JBQW9DLENBQ3BDLCtDQUFtRCxDQUNuRCxjQUFlLENBakR2QiwrQkFxRFksV0FBWSxDQUNaLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsVUFBVyxDQUNYLFFBQVMsQ0F6RHJCLG9DQThEUSxZQUFhLENBQ2Isc0JBQXVCLENBQ3ZCLDBCQUEyQixDQUMzQixjQUFlLENBRWYsWUFBYSxDQUNiLGVBQWdCLENBS25CLDBCQXpFTCxvQ0F1RVksYUFBYyxDQUVyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5zdHVkeS1wYWdlIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBvdmVyZmxvdy15OiB2aXNpYmxlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuXFxuICAgIC5ndWVzdC1tZXNzYWdlIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuXFxuICAgICAgICBoMSB7XFxuICAgICAgICAgICAgbWFyZ2luOiAyMHB4O1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGhpZ2hsaWdodC1jb2xvcjtcXG4gICAgICAgIH1cXG4gICAgICAgIHAge1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgICAgICAgICAgY29sb3I6IHJnYig4NywgODcsIDg3KTtcXG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLmFkZC1idXR0b24ge1xcbiAgICAgICAgLy9Qb3NpdGlvblxcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICAgICAgdG9wOiAxMC41ZW07XFxuICAgICAgICByaWdodDogNWVtO1xcbiAgICAgICAgei1pbmRleDogODtcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuXFxuICAgICAgICAvL1NpemVcXG4gICAgICAgIGhlaWdodDogNDBweDtcXG4gICAgICAgIHdpZHRoOiA0MHB4O1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweDtcXG5cXG4gICAgICAgIC8vdGV4dCBkZXNpZ25cXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG5cXG4gICAgICAgIC8vYm94IERlc2lnblxcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyMiwgMTgxLCAxMDcpO1xcbiAgICAgICAgYm94LXNoYWRvdzogMHB4IDJweCAyMHB4IHJnYmEoMTA5LCAxMDksIDEwOSwgMC41ODIpO1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgICAgICAgLy9QbHVzIHNpZ25cXG4gICAgICAgICY6OmFmdGVyIHtcXG4gICAgICAgICAgICBjb250ZW50OiBcXFwiK1xcXCI7XFxuICAgICAgICAgICAgZm9udC1zaXplOiA0NHB4O1xcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICB0b3A6IC04LjVweDtcXG4gICAgICAgICAgICBsZWZ0OiAxNCU7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLnN0dWR5LWdyb3Vwcy1jb250YWluZXIge1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xcblxcbiAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XFxuXFxuICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA5NTBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNvbmZpcm1hdGlvbi1jb250YWluZXIgcHtwYWRkaW5nOjIwcHg7Zm9udC1zaXplOjMwcHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9Db25maXJtYXRpb25Gb3JtL0NvbmZpcm1hdGlvbkZvcm0uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSwwQkFFUSxZQUFhLENBQ2IsY0FBZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29uZmlybWF0aW9uLWNvbnRhaW5lciB7XFxuICAgIHAge1xcbiAgICAgICAgcGFkZGluZzogMjBweDtcXG4gICAgICAgIGZvbnQtc2l6ZTogMzBweDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYXV0aC12aWV3e3BhZGRpbmc6M2VtIDFlbSAxZW0gMWVtO2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjY0Nik7YmFja2Ryb3AtZmlsdGVyOmJsdXIoMjBweCk7LXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6Ymx1cigyMHB4KTtib3gtc2hhZG93OjBweCAzcHggNHB4IHJnYmEoMTI4LDEyOCwxMjgsMC4zNzcpO3dpZHRoOjMwZW07b3ZlcmZsb3c6YXV0bzt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW46NTBweCA5MHB4IDAgMDthbmltYXRpb246YXV0aC12aWV3LWxvYWQgMC4zcyBlYXNlLW91dDt0cmFuc2l0aW9uOmFsbCAxcztwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZH0uYXV0aC12aWV3IGgxe3RleHQtYWxpZ246Y2VudGVyO292ZXJmbG93OmhpZGRlbn0uYXV0aC12aWV3IHB7cGFkZGluZy10b3A6MTBweDtjb2xvcjojNGY0ZjRmO292ZXJmbG93OmhpZGRlbn0uYXV0aC12aWV3IC5lcnJvci1tZXNzYWdle2NvbG9yOnJnYmEoMTM2LDE3LDE3LDAuNjMpO2ZvbnQtc2l6ZToxNXB4O2ZvbnQtc3R5bGU6aXRhbGljfS5hdXRoLXZpZXcgLm90aGVyLW9wdGlvbnN7cGFkZGluZy10b3A6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5hdXRoLXZpZXcgLm90aGVyLW9wdGlvbnMgcHtmb250LXNpemU6MTBweDtjb2xvcjpkYXJrZ3JheTttYXJnaW4tYm90dG9tOi0xMHB4fUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7LmF1dGgtdmlld3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlO21hcmdpbjowO2FuaW1hdGlvbjphdXRoLXZpZXctbG9hZC1tb2JpbGUgMC4zcyBlYXNlLW91dH19QGtleWZyYW1lcyBhdXRoLXZpZXctbG9hZHswJXtvcGFjaXR5OjA7bWFyZ2luLXRvcDo0MHB4fTEwMCV7b3BhY2l0eToxO21hcmdpbi10b3A6NTBweH19QGtleWZyYW1lcyBhdXRoLXZpZXctbG9hZC1tb2JpbGV7MCV7b3BhY2l0eTowO21hcmdpbi10b3A6LTIwcHh9MTAwJXtvcGFjaXR5OjE7bWFyZ2luLXRvcDowcHh9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvSG9tZS9BdXRoVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLFdBQ0ksdUJBQXdCLENBQ3hCLHdDQUE0QyxDQUM1QywwQkFBMkIsQ0FDM0Isa0NBQW1DLENBRW5DLDhDQUFrRCxDQUNsRCxVQUFXLENBQ1gsYUFBYyxDQVdkLGlCQUFrQixDQUNsQixvQkFBcUIsQ0FDckIsc0NBQXVDLENBQ3ZDLGlCQUFrQixDQUNsQixpQkFBa0IsQ0FDbEIsT0FBUSxDQUVSLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsNEJBQTZCLENBNUJqQyxjQVVRLGlCQUFrQixDQUNsQixlQUFnQixDQVh4QixhQWNRLGdCQUFpQixDQUNqQixhQUFzQixDQUN0QixlQUFnQixDQWhCeEIsMEJBK0JRLDBCQUE4QixDQUM5QixjQUFlLENBQ2YsaUJBQWtCLENBakMxQiwwQkFxQ1EsZ0JBQWlCLENBQ2pCLGlCQUFrQixDQUNsQixZQUFhLENBQ2IscUJBQXNCLENBeEM5Qiw0QkEyQ1ksY0FBZSxDQUNmLGNBQWUsQ0FDZixtQkFBb0IsQ0FDdkIsMEJBOUNULFdBa0RRLFVBQVcsQ0FDWCxXQUFZLENBQ1osUUFBUyxDQUNULDZDQUE4QyxDQUVyRCxDQUVELDBCQUNJLEdBQ0ksU0FBVSxDQUNWLGVBQWdCLENBRXBCLEtBQ0ksU0FBVSxDQUNWLGVBQWdCLENBQUEsQ0FHeEIsaUNBQ0ksR0FDSSxTQUFVLENBQ1YsZ0JBQWlCLENBRXJCLEtBQ0ksU0FBVSxDQUNWLGNBQWUsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcclxcbi5hdXRoLXZpZXcge1xcclxcbiAgICBwYWRkaW5nOiAzZW0gMWVtIDFlbSAxZW07XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC42NDYpO1xcclxcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjBweCk7XFxyXFxuICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDIwcHgpO1xcclxcblxcclxcbiAgICBib3gtc2hhZG93OiAwcHggM3B4IDRweCByZ2JhKDEyOCwgMTI4LCAxMjgsIDAuMzc3KTtcXHJcXG4gICAgd2lkdGg6IDMwZW07XFxyXFxuICAgIG92ZXJmbG93OiBhdXRvO1xcclxcbiAgICBoMSB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICB9XFxyXFxuICAgIHAge1xcclxcbiAgICAgICAgcGFkZGluZy10b3A6IDEwcHg7XFxyXFxuICAgICAgICBjb2xvcjogcmdiKDc5LCA3OSwgNzkpO1xcclxcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIG1hcmdpbjogNTBweCA5MHB4IDAgMDtcXHJcXG4gICAgYW5pbWF0aW9uOiBhdXRoLXZpZXctbG9hZCAwLjNzIGVhc2Utb3V0O1xcclxcbiAgICB0cmFuc2l0aW9uOiBhbGwgMXM7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgcmlnaHQ6IDA7XFxyXFxuXFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcclxcblxcclxcbiAgICAuZXJyb3ItbWVzc2FnZSB7XFxyXFxuICAgICAgICBjb2xvcjogcmdiYSgxMzYsIDE3LCAxNywgMC42Myk7XFxyXFxuICAgICAgICBmb250LXNpemU6IDE1cHg7XFxyXFxuICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm90aGVyLW9wdGlvbnMge1xcclxcbiAgICAgICAgcGFkZGluZy10b3A6IDIwcHg7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHJcXG4gICAgICAgIHAge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTBweDtcXHJcXG4gICAgICAgICAgICBjb2xvcjogZGFya2dyYXk7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLTEwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgQGluY2x1ZGUgbW9iaWxlIHtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgbWFyZ2luOiAwO1xcclxcbiAgICAgICAgYW5pbWF0aW9uOiBhdXRoLXZpZXctbG9hZC1tb2JpbGUgMC4zcyBlYXNlLW91dDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5Aa2V5ZnJhbWVzIGF1dGgtdmlldy1sb2FkIHtcXHJcXG4gICAgMCUge1xcclxcbiAgICAgICAgb3BhY2l0eTogMDtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDQwcHg7XFxyXFxuICAgIH1cXHJcXG4gICAgMTAwJSB7XFxyXFxuICAgICAgICBvcGFjaXR5OiAxO1xcclxcbiAgICAgICAgbWFyZ2luLXRvcDogNTBweDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5Aa2V5ZnJhbWVzIGF1dGgtdmlldy1sb2FkLW1vYmlsZSB7XFxyXFxuICAgIDAlIHtcXHJcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiAtMjBweDtcXHJcXG4gICAgfVxcclxcbiAgICAxMDAlIHtcXHJcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiAwcHg7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W10sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIlwiLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNoYXRzLXZpZXd7ZmxleDoyMCU7bWluLXdpZHRoOjMwMHB4O21heC13aWR0aDozMDBweDtoZWlnaHQ6MTAwJTtib3gtc2hhZG93OjEwcHggMHB4IDIwcHggcmdiYSgwLDAsMCwwLjA0Myk7Ym9yZGVyLXJpZ2h0OiNkNGFhOGMgNXB4IHNvbGlkO2JhY2tncm91bmQtY29sb3I6I2ZmZjt6LWluZGV4OjQ7b3ZlcmZsb3c6YXV0b31AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5jaGF0cy12aWV3e3BhZGRpbmc6NDBweCAwcHggMjBweCAyMHB4fX0uY2hhdHMtdmlldyAuY2hhdEl0ZW17Y3Vyc29yOnBvaW50ZXI7b3ZlcmZsb3c6aGlkZGVuO3RyYW5zaXRpb246YWxsIDAuMnM7bWluLXdpZHRoOjMwMHB4O2hlaWdodDo3MHB4O3dpZHRoOjE2LjZlbTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmc6MTVweDttYXJnaW46MjBweCAxMHB4IDIwcHggMHB4fUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7LmNoYXRzLXZpZXcgLmNoYXRJdGVte21pbi13aWR0aDoxMDAlfX0uY2hhdHMtdmlldyAuY2hhdEl0ZW0gcHtmb250LXNpemU6MTRweDt0ZXh0LWFsaWduOnJpZ2h0fS5jaGF0cy12aWV3IC5jaGF0SXRlbSBpbWd7dGV4dC1hbGlnbjpsZWZ0fS5jaGF0cy12aWV3IC5jaGF0SXRlbS5jaGF0QWN0aXZle2JvcmRlci1yaWdodDojZDRhYThjIDEwcHggc29saWQ7bWFyZ2luLXJpZ2h0OjA7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI0OSwyMzIsMjMyLDApO2ZvbnQtd2VpZ2h0OjkwMDtib3gtc2hhZG93OnJnYmEoMCwwLDAsMCkgMHB4IDBweCAyMHB4O2NvbG9yOmJsYWNrfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvTWVzc2FnZS9DaGF0c1ZpZXcuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxZQUNJLFFBQVMsQ0FDVCxlQUFnQixDQUNoQixlQUFnQixDQUNoQixXQUFZLENBQ1osMENBQThDLENBQzlDLDhCQUFxQyxDQUNyQyxxQkFBb0MsQ0FDcEMsU0FBVSxDQUNWLGFBQWMsQ0EyQ2pCLDBCQXBERCxZQVdRLDBCQUEyQixDQXlDbEMsQ0FwREQsc0JBZVEsY0FBZSxDQUNmLGVBQWdCLENBRWhCLG1CQUFvQixDQUNwQixlQUFnQixDQUtoQixXQUFZLENBQ1osWUFBYSxDQUViLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsNkJBQThCLENBUzlCLFlBQWEsQ0FDYix5QkFBMEIsQ0FZN0IsMEJBbkRMLHNCQXNCWSxjQUFlLENBNkJ0QixDQW5ETCx3QkFnQ1ksY0FBZSxDQUNmLGdCQUFpQixDQWpDN0IsMEJBb0NZLGVBQWdCLENBcEM1QixpQ0EyQ1ksK0JBQXNDLENBRXRDLGNBQWUsQ0FDZixvQ0FBd0MsQ0FDeEMsZUFBZ0IsQ0FDaEIscUNBQXlDLENBQ3pDLFdBQVlcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG4uY2hhdHMtdmlldyB7XFxyXFxuICAgIGZsZXg6IDIwJTtcXHJcXG4gICAgbWluLXdpZHRoOiAzMDBweDtcXHJcXG4gICAgbWF4LXdpZHRoOiAzMDBweDtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICBib3gtc2hhZG93OiAxMHB4IDBweCAyMHB4IHJnYmEoMCwgMCwgMCwgMC4wNDMpO1xcclxcbiAgICBib3JkZXItcmlnaHQ6ICRib3JkZXItY29sb3IgNXB4IHNvbGlkO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxyXFxuICAgIHotaW5kZXg6IDQ7XFxyXFxuICAgIG92ZXJmbG93OiBhdXRvO1xcclxcbiAgICBAaW5jbHVkZSBtb2JpbGUge1xcclxcbiAgICAgICAgcGFkZGluZzogNDBweCAwcHggMjBweCAyMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5jaGF0SXRlbSB7XFxyXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcblxcclxcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMnM7XFxyXFxuICAgICAgICBtaW4td2lkdGg6IDMwMHB4O1xcclxcblxcclxcbiAgICAgICAgQGluY2x1ZGUgbW9iaWxlIHtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBoZWlnaHQ6IDcwcHg7XFxyXFxuICAgICAgICB3aWR0aDogMTYuNmVtO1xcclxcblxcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFxyXFxuICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBwYWRkaW5nOiAxNXB4O1xcclxcbiAgICAgICAgbWFyZ2luOiAyMHB4IDEwcHggMjBweCAwcHg7XFxyXFxuICAgICAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODc5KTtcXHJcXG4gICAgICAgIC8vIGJveC1zaGFkb3c6IDAgMCAyMHB4IHJnYmEoMCwgMCwgMCwgMC4wOTYpO1xcclxcbiAgICAgICAgJi5jaGF0QWN0aXZlIHtcXHJcXG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6ICRib3JkZXItY29sb3IgMTBweCBzb2xpZDtcXHJcXG4gICAgICAgICAgICAvLyB3aWR0aDogMTZlbTtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDksIDIzMiwgMjMyLCAwKTtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogOTAwO1xcclxcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMCkgMHB4IDBweCAyMHB4O1xcclxcbiAgICAgICAgICAgIGNvbG9yOiBibGFjaztcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY29udmVyc2F0aW9uLXZpZXd7ZmxleDo4MCU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTk4LDE5OCwxOTgsMC4xOTkpO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7YmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpibHVyKDNweCk7ei1pbmRleDowO292ZXJmbG93OnZpc2libGU7cG9zaXRpb246cmVsYXRpdmV9LmNvbnZlcnNhdGlvbi12aWV3IC5jdXJyZW50Q29udmVyc2F0aW9uSW5mb3twb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjMwO3RvcDowO3dpZHRoOjEwMCU7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjIwcHg7Ym9yZGVyLWJvdHRvbTojZjBlMWQ2IDNweCBzb2xpZDtiYWNrZHJvcC1maWx0ZXI6Ymx1cigzcHgpOy13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsMC43ODEpfS5jb252ZXJzYXRpb24tdmlldyAuY3VycmVudENvbnZlcnNhdGlvbkluZm8gaDF7bWFyZ2luLWxlZnQ6MjBweDtmb250LXNpemU6MTVweH0uY29udmVyc2F0aW9uLXZpZXcgLm1lc3NhZ2VzLXZpZXd7b3ZlcmZsb3cteTp2aXNpYmxlO2ZsZXg6ODAlO3BhZGRpbmctdG9wOjdlbTstbXMtb3ZlcmZsb3ctc3R5bGU6bm9uZTtzY3JvbGxiYXItd2lkdGg6bm9uZX0uY29udmVyc2F0aW9uLXZpZXcgLm1lc3NhZ2VzLXZpZXc6Oi13ZWJraXQtc2Nyb2xsYmFye2Rpc3BsYXk6bm9uZX0uY29udmVyc2F0aW9uLXZpZXcgLm1lc3NhZ2VzLXZpZXcgLm1lc3NhZ2UtY29udGFpbmVye3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi1sZWZ0OjIwcHg7bWFyZ2luLWJvdHRvbToyMHB4fS5jb252ZXJzYXRpb24tdmlldyAubWVzc2FnZXMtdmlldyAubWVzc2FnZS1jb250YWluZXIgLm1lc3NhZ2UtYm94e2Rpc3BsYXk6ZmxleDthbmltYXRpb246bWVzc2FnZUZsb2F0SW4gMC4ycyBlYXNlLWlufS5jb252ZXJzYXRpb24tdmlldyAubWVzc2FnZXMtdmlldyAubWVzc2FnZS1jb250YWluZXIgLm1lc3NhZ2UtYm94LnJlY2VpdmluZy1tc2cgaW1ne3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7Ym9yZGVyLXdpZHRoOjNweDtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MH0uY29udmVyc2F0aW9uLXZpZXcgLm1lc3NhZ2VzLXZpZXcgLm1lc3NhZ2UtY29udGFpbmVyIC5tZXNzYWdlLWJveC5yZWNlaXZpbmctbXNnIC5tZXNzYWdlLWNvbnRlbnR7bWF4LXdpZHRoOjYwMHB4O3dvcmQtd3JhcDpicmVhay13b3JkO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3gtc2hhZG93OnJnYmEoMCwwLDAsMC4wMjcpIDBweCAwcHggMjBweDtwYWRkaW5nOjIwcHg7bWFyZ2luLWxlZnQ6NDBweH0uY29udmVyc2F0aW9uLXZpZXcgLm1lc3NhZ2VzLXZpZXcgLm1lc3NhZ2UtY29udGFpbmVyIC5tZXNzYWdlLWJveC5zZW5kaW5nLW1zZ3tqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmQ7LXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmR9LmNvbnZlcnNhdGlvbi12aWV3IC5tZXNzYWdlcy12aWV3IC5tZXNzYWdlLWNvbnRhaW5lciAubWVzc2FnZS1ib3guc2VuZGluZy1tc2cgLm1lc3NhZ2UtY29udGVudHtiYWNrZ3JvdW5kLWNvbG9yOiNlMmM1YjE7cGFkZGluZzoyMHB4O21heC13aWR0aDo2MDBweDt3b3JkLXdyYXA6YnJlYWstd29yZDttYXJnaW4tcmlnaHQ6NDBweDtjb2xvcjp3aGl0ZX0uY29udmVyc2F0aW9uLXZpZXcgLm1lc3NhZ2VzLXZpZXcgLm1lc3NhZ2UtY29udGFpbmVyIC5tZXNzYWdlLXRpbWVzdGFtcHtmb250LXNpemU6MTBweDtjb2xvcjpyZ2JhKDAsMCwwLDAuNTM2KX0uY29udmVyc2F0aW9uLXZpZXcgLm1lc3NhZ2VzLXZpZXcgLm1lc3NhZ2UtY29udGFpbmVyIC5tZXNzYWdlLXRpbWVzdGFtcC5zZW5kaW5nLW1zZ3ttYXJnaW4tdG9wOjEwcHg7bWFyZ2luLXJpZ2h0OjQwcHg7dGV4dC1hbGlnbjpyaWdodH0uY29udmVyc2F0aW9uLXZpZXcgLm1lc3NhZ2VzLXZpZXcgLm1lc3NhZ2UtY29udGFpbmVyIC5tZXNzYWdlLXRpbWVzdGFtcC5yZWNlaXZpbmctbXNne21hcmdpbi10b3A6MTBweDttYXJnaW4tbGVmdDo0MHB4O3RleHQtYWxpZ246bGVmdH0uY29udmVyc2F0aW9uLXZpZXcgLnNlbmQtbWVzc2FnZS1mb3Jte2ZsZXg6MjAlO3dpZHRoOjEwMCU7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LDAuNzgxKTtib3gtc2hhZG93OnJnYmEoMCwwLDAsMC4wNTcpIDBweCAwIDIwcHh9LmNvbnZlcnNhdGlvbi12aWV3IC5zZW5kLW1lc3NhZ2UtZm9ybSAuc2VuZC1idG57ZmxleDozMCV9QGtleWZyYW1lcyBtZXNzYWdlRmxvYXRJbnswJXttYXJnaW4tdG9wOjMwcHg7b3BhY2l0eTowLjF9MTAwJXttYXJnaW4tdG9wOjA7b3BhY2l0eToxfX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1ZpZXdzL01lc3NhZ2UvQ29udmVyc2F0aW9uVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLG1CQUNJLFFBQVMsQ0FDVCxZQUFhLENBQ2IscUJBQXNCLENBQ3RCLHdDQUE0QyxDQUM1QyxXQUFZLENBQ1osVUFBVyxDQUNYLHlCQUEwQixDQUMxQixpQ0FBa0MsQ0FFbEMsU0FBVSxDQUNWLGdCQUFpQixDQUNqQixpQkFBa0IsQ0FadEIsNENBZVEsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxLQUFNLENBQ04sVUFBVyxDQUVYLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsWUFBYSxDQUNiLCtCQUFvRCxDQUNwRCx5QkFBMEIsQ0FDMUIsaUNBQWtDLENBRWxDLHdDQUE0QyxDQTNCcEQsK0NBNkJZLGdCQUFpQixDQUNqQixjQUFlLENBOUIzQixrQ0FtQ1Esa0JBQW1CLENBQ25CLFFBQVMsQ0FDVCxlQUFnQixDQUloQix1QkFBd0IsQ0FDeEIsb0JBQXFCLENBMUM3QixxREF1Q1ksWUFBYSxDQXZDekIscURBNkNZLGlCQUFrQixDQUNsQixnQkFBaUIsQ0FDakIsa0JBQW1CLENBL0MvQixrRUFpRGdCLFlBQWEsQ0FDYixxQ0FBc0MsQ0FsRHRELG9GQXNEd0IsVUFBVyxDQUNYLFdBQVksQ0FDWixnQkFBaUIsQ0FFakIsaUJBQWtCLENBQ2xCLFFBQVMsQ0EzRGpDLGlHQThEd0IsZUFBZ0IsQ0FDaEIsb0JBQXFCLENBRXJCLHFCQUFvQyxDQUNwQyx5Q0FBNkMsQ0FDN0MsWUFBYSxDQUNiLGdCQUFpQixDQXBFekMsOEVBd0VvQix3QkFBeUIsQ0FDekIsZ0NBQWlDLENBekVyRCwrRkE0RXdCLHdCQUE2QyxDQUU3QyxZQUFhLENBQ2IsZUFBZ0IsQ0FDaEIsb0JBQXFCLENBRXJCLGlCQUFrQixDQUNsQixXQUFZLENBbkZwQyx3RUF3RmdCLGNBQWUsQ0FFZix1QkFBMkIsQ0ExRjNDLG9GQTZGb0IsZUFBZ0IsQ0FDaEIsaUJBQWtCLENBQ2xCLGdCQUFpQixDQS9GckMsc0ZBa0dvQixlQUFnQixDQUNoQixnQkFBaUIsQ0FDakIsZUFBZ0IsQ0FwR3BDLHNDQTRHUSxRQUFTLENBQ1QsVUFBVyxDQUNYLHdDQUE0QyxDQUU1Qyx1Q0FBMkMsQ0FoSG5ELGdEQW1IWSxRQUFTLENBQ1osMEJBS0wsR0FDSSxlQUFnQixDQUNoQixXQUFZLENBRWhCLEtBQ0ksWUFBYSxDQUNiLFNBQVUsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcclxcbi5jb252ZXJzYXRpb24tdmlldyB7XFxyXFxuICAgIGZsZXg6IDgwJTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxOTgsIDE5OCwgMTk4LCAwLjE5OSk7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigzcHgpO1xcclxcbiAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigzcHgpO1xcclxcblxcclxcbiAgICB6LWluZGV4OiAwO1xcclxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcclxcbiAgICAuY3VycmVudENvbnZlcnNhdGlvbkluZm8ge1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgei1pbmRleDogMzA7XFxyXFxuICAgICAgICB0b3A6IDA7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgICAgIGJvcmRlci1ib3R0b206IGxpZ2h0ZW4oJGJvcmRlci1jb2xvciwgMjAlKSAzcHggc29saWQ7XFxyXFxuICAgICAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoM3B4KTtcXHJcXG4gICAgICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDNweCk7XFxyXFxuXFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzgxKTtcXHJcXG4gICAgICAgIGgxIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMjBweDtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm1lc3NhZ2VzLXZpZXcge1xcclxcbiAgICAgICAgb3ZlcmZsb3cteTogdmlzaWJsZTtcXHJcXG4gICAgICAgIGZsZXg6IDgwJTtcXHJcXG4gICAgICAgIHBhZGRpbmctdG9wOiA3ZW07XFxyXFxuICAgICAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XFxyXFxuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTtcXHJcXG4gICAgICAgIHNjcm9sbGJhci13aWR0aDogbm9uZTtcXHJcXG5cXHJcXG4gICAgICAgIC5tZXNzYWdlLWNvbnRhaW5lciB7XFxyXFxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuICAgICAgICAgICAgLm1lc3NhZ2UtYm94IHtcXHJcXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uOiBtZXNzYWdlRmxvYXRJbiAwLjJzIGVhc2UtaW47XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICYucmVjZWl2aW5nLW1zZyB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDNweDtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAwO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAgICAgLm1lc3NhZ2UtY29udGVudCB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA2MDBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4wMjcpIDBweCAwcHggMjBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA0MHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgICYuc2VuZGluZy1tc2cge1xcclxcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgIC5tZXNzYWdlLWNvbnRlbnQge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0ZW4oJGJvcmRlci1jb2xvciwgMTAlKTtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogNjAwcHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkO1xcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNDBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgLm1lc3NhZ2UtdGltZXN0YW1wIHtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4O1xcclxcblxcclxcbiAgICAgICAgICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUzNik7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICYuc2VuZGluZy1tc2cge1xcclxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNDBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgICYucmVjZWl2aW5nLW1zZyB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDQwcHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zZW5kLW1lc3NhZ2UtZm9ybSB7XFxyXFxuICAgICAgICAvLyBoZWlnaHQ6IDEwMHB4O1xcclxcbiAgICAgICAgZmxleDogMjAlO1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzgxKTtcXHJcXG5cXHJcXG4gICAgICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4wNTcpIDBweCAwIDIwcHg7XFxyXFxuICAgICAgICAvLyBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICAgICAgLnNlbmQtYnRuIHtcXHJcXG4gICAgICAgICAgICBmbGV4OiAzMCU7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuQGtleWZyYW1lcyBtZXNzYWdlRmxvYXRJbiB7XFxyXFxuICAgIDAlIHtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDMwcHg7XFxyXFxuICAgICAgICBvcGFjaXR5OiAwLjE7XFxyXFxuICAgIH1cXHJcXG4gICAgMTAwJSB7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiAwO1xcclxcbiAgICAgICAgb3BhY2l0eTogMTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubm90aWZpY2F0aW9ue29wYWNpdHk6MDtwb3NpdGlvbjpmaXhlZDtib3R0b206LTEwMHB4O3JpZ2h0OjIwcHg7bWFyZ2luLWxlZnQ6MjBweDtiYWNrZHJvcC1maWx0ZXI6Ymx1cigxMHB4KTstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpibHVyKDEwcHgpO3BhZGRpbmc6MjBweCAyMHB4IDIwcHggMHB4O3RyYW5zaXRpb246YWxsIDAuNHMgZWFzZS1pbi1vdXQ7Ym94LXNoYWRvdzpyZ2JhKDAsMCwwLDAuMDY0KSA1cHggNXB4IDVweDt0ZXh0LXNoYWRvdzpyZ2JhKDAsMCwwLDAuMDY0KSA1cHggNXB4IDVweDt6LWluZGV4OjIwMjAwMjA7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kfUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7Lm5vdGlmaWNhdGlvbntib3JkZXItdG9wOndoaXRlIDJweCBzb2xpZDt3aWR0aDoxMDAlO2JveC1zaGFkb3c6MHB4IDBweCAxMHB4IHJnYmEoMCwwLDAsMC4xOTQpfX0ubm90aWZpY2F0aW9uIGgxe2ZvbnQtc2l6ZToyNHB4O2ZvbnQtd2VpZ2h0OjkwMDt0ZXh0LWFsaWduOmxlZnQ7ZmxleDo4MCV9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsubm90aWZpY2F0aW9uIGgxe2ZvbnQtc2l6ZToxNXB4O2ZsZXg6NzUlfX0ubm90aWZpY2F0aW9uIC5pY29ue2ZvbnQtc2l6ZTo0MHB4O3RleHQtYWxpZ246bGVmdDtmbGV4OjIwJX1AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5ub3RpZmljYXRpb24gLmljb257Zm9udC1zaXplOjMwcHg7ZmxleDoxNSV9fS5ub3RpZmljYXRpb24uZXJyb3J7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDE2Nyw3Nyw3NywwLjY0Nik7Y29sb3I6d2hpdGV9Lm5vdGlmaWNhdGlvbi5zdWNjZXNze2JhY2tncm91bmQtY29sb3I6cmdiYSg1MSwxMjEsNjksMC42NDYpO2NvbG9yOndoaXRlfS5ub3RpZmljYXRpb24uYWN0aXZle29wYWNpdHk6MTtib3R0b206MzBweH1AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5ub3RpZmljYXRpb24uYWN0aXZle2JvdHRvbTowcHg7cmlnaHQ6MH19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9Ob3RpZmljYXRpb24vTm90aWZpY2F0aW9uLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsY0FDSSxTQUFVLENBQ1YsY0FBZSxDQUNmLGFBQWMsQ0FDZCxVQUFXLENBQ1gsZ0JBQWlCLENBRWpCLDBCQUEyQixDQUMzQixrQ0FBbUMsQ0FFbkMsMEJBQTJCLENBUzNCLCtCQUFnQyxDQUNoQyx3Q0FBNEMsQ0FDNUMseUNBQTZDLENBRTdDLGVBQWdCLENBRWhCLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsNEJBQTZCLENBeUNoQywwQkFwRUQsY0FhUSwwQkFBMkIsQ0FDM0IsVUFBVyxDQUVYLHlDQUE2QyxDQW9EcEQsQ0FwRUQsaUJBOEJRLGNBQWUsQ0FDZixlQUFnQixDQUVoQixlQUFnQixDQUNoQixRQUFTLENBS1osMEJBdkNMLGlCQW9DWSxjQUFlLENBQ2YsUUFBUyxDQUVoQixDQXZDTCxvQkEwQ1EsY0FBZSxDQUNmLGVBQWdCLENBQ2hCLFFBQVMsQ0FLWiwwQkFqREwsb0JBOENZLGNBQWUsQ0FDZixRQUFTLENBRWhCLENBakRMLG9CQW9EUSxzQ0FBMEMsQ0FDMUMsV0FBWSxDQXJEcEIsc0JBd0RRLHNDQUEwQyxDQUMxQyxXQUFZLENBekRwQixxQkE0RFEsU0FBVSxDQUNWLFdBQVksQ0FNZiwwQkFuRUwscUJBZ0VZLFVBQVcsQ0FDWCxPQUFRLENBRWZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG4ubm90aWZpY2F0aW9uIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICBib3R0b206IC0xMDBweDtcXG4gICAgcmlnaHQ6IDIwcHg7XFxuICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xcblxcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTBweCk7XFxuICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpO1xcblxcbiAgICBwYWRkaW5nOiAyMHB4IDIwcHggMjBweCAwcHg7XFxuXFxuICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICBib3JkZXItdG9wOiB3aGl0ZSAycHggc29saWQ7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG5cXG4gICAgICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMTk0KTtcXG4gICAgfVxcblxcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC40cyBlYXNlLWluLW91dDtcXG4gICAgYm94LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjA2NCkgNXB4IDVweCA1cHg7XFxuICAgIHRleHQtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMDY0KSA1cHggNXB4IDVweDtcXG5cXG4gICAgei1pbmRleDogMjAyMDAyMDtcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuXFxuICAgIGgxIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMjRweDtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuXFxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgICAgICAgZmxleDogODAlO1xcbiAgICAgICAgQGluY2x1ZGUgbW9iaWxlIHtcXG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XFxuICAgICAgICAgICAgZmxleDogNzUlO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5pY29uIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogNDBweDtcXG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgICAgICBmbGV4OiAyMCU7XFxuICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcXG4gICAgICAgICAgICBmbGV4OiAxNSU7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgJi5lcnJvciB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE2NywgNzcsIDc3LCAwLjY0Nik7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG4gICAgJi5zdWNjZXNzIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNTEsIDEyMSwgNjksIDAuNjQ2KTtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgfVxcbiAgICAmLmFjdGl2ZSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICAgICAgYm90dG9tOiAzMHB4O1xcblxcbiAgICAgICAgQGluY2x1ZGUgbW9iaWxlIHtcXG4gICAgICAgICAgICBib3R0b206IDBweDtcXG4gICAgICAgICAgICByaWdodDogMDtcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucG9wdXAtd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZX0ucG9wdXB7cG9zaXRpb246Zml4ZWQ7b3ZlcmZsb3cteTpzY3JvbGw7d2lkdGg6NjB2dztoZWlnaHQ6YXV0bzt0b3A6MTAlO2xlZnQ6MjAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMCk7ei1pbmRleDo5OTk5O2JhY2tncm91bmQtY29sb3I6d2hpdGU7Ym94LXNoYWRvdzowIDAgMCAxcHggcmdiYSg5Nyw5Nyw5NywwLjEpLDAgM3B4IDIwcHggMCByZ2JhKDkyLDkyLDkyLDAuMyksMCAxcHggMnB4IHJnYmEoMCwwLDAsMC41KTtib3JkZXItcmFkaXVzOjVweDt0cmFuc2Zvcm06c2NhbGUoMC45KTtvcGFjaXR5OjA7dHJhbnNpdGlvbjphbGwgMC4zcyBlYXNlLWluLW91dDtwb2ludGVyLWV2ZW50czpub25lO292ZXJmbG93LXk6YXV0b31AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5wb3B1cHtib3JkZXItcmFkaXVzOjBweDt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX19LnBvcHVwLXRvcHtwYWRkaW5nOjIwcHggMzBweCAwIDMwcHg7aGVpZ2h0OjcwcHg7b3ZlcmZsb3cteTpoaWRkZW47Ym9yZGVyLWJvdHRvbTojZDRhYThjIDVweCBzb2xpZDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsMCk7YmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpibHVyKDNweCk7cGFkZGluZy1ib3R0b206MTVweH0ucG9wdXAtdG9wIGgxe2NvbG9yOmJsYWNrO2ZsZXg6OTAlO2ZvbnQtc2l6ZToyNXB4O2ZvbnQtd2VpZ2h0OjgwMH0jcG9wdXAtY2xvc2UtYnV0dG9ue2JvcmRlcjpub25lO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxNHB4O3JpZ2h0OjE3cHg7ei1pbmRleDo5MDAwO2JhY2tncm91bmQtY29sb3I6cmdiYSgxMTYsMTEsMTEsMCk7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtmb250LWZhbWlseTpcXFwiR2lsbCBTYW5zXFxcIiwgXFxcIkdpbGwgU2FucyBNVFxcXCIsIENhbGlicmksIFxcXCJUcmVidWNoZXQgTVNcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc2l6ZToyMHB4O2ZvbnQtd2VpZ2h0OjEwMDtjb2xvcjojMDAwO2N1cnNvcjpwb2ludGVyfS5wb3B1cC1ib2R5e3BhZGRpbmc6MjBweDttYXgtaGVpZ2h0Ojcwdmh9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsucG9wdXAtYm9keXttYXgtaGVpZ2h0OjEwMCV9fS5hY3RpdmV7dHJhbnNmb3JtOnNjYWxlKDEpO3BvaW50ZXItZXZlbnRzOmFsbDtvcGFjaXR5OjF9LmJhY2tncm91bmR7d2lkdGg6MTAwdnc7aGVpZ2h0OjEwMHZoO3Bvc2l0aW9uOmZpeGVkO3RvcDowO3otaW5kZXg6OTk5MDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmY3MDtiYWNrZHJvcC1maWx0ZXI6Ymx1cig1cHgpOy13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOmJsdXIoNXB4KTtwb2ludGVyLWV2ZW50czpub25lO3RyYW5zaXRpb246YWxsIDAuM3M7b3BhY2l0eTowfS5iYWNrZ3JvdW5kLmFjdGl2ZXtwb2ludGVyLWV2ZW50czphbGw7b3BhY2l0eToxfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvUG9wdXAvUG9wdXAuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSxlQUNJLGlCQUFrQixDQUNyQixPQUdHLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsVUFBVyxDQUNYLFdBQVksQ0FDWixPQUFRLENBQ1IsUUFBUyxDQUNULDRCQUE2QixDQUM3QixZQUFhLENBQ2Isc0JBQXVCLENBRXZCLGlHQUE2RyxDQUM3RyxpQkFBa0IsQ0FDbEIsb0JBQXFCLENBQ3JCLFNBQVUsQ0FDViwrQkFBZ0MsQ0FDaEMsbUJBQW9CLENBQ3BCLGVBQWdCLENBUW5CLDBCQXpCRCxPQW1CUSxpQkFBa0IsQ0FDbEIsS0FBTSxDQUNOLE1BQU8sQ0FDUCxVQUFXLENBQ1gsV0FBWSxDQUVuQixDQUVELFdBQ0ksd0JBQXlCLENBQ3pCLFdBQVksQ0FDWixpQkFBa0IsQ0FFbEIsK0JBQXNDLENBQ3RDLG9DQUF3QyxDQUN4Qyx5QkFBMEIsQ0FDMUIsaUNBQWtDLENBRWxDLG1CQUFvQixDQVZ4QixjQWFRLFdBQVksQ0FDWixRQUFTLENBQ1QsY0FBZSxDQUNmLGVBQWdCLENBQ25CLG9CQUlELFdBQVksQ0FDWixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULFVBQVcsQ0FDWCxZQUFhLENBQ2Isa0NBQXNDLENBQ3RDLFVBQVcsQ0FDWCxXQUFZLENBQ1osNEVBQTZFLENBQzdFLGNBQWUsQ0FDZixlQUFnQixDQUNoQixVQUFtQixDQUNuQixjQUFlLENBQ2xCLFlBR0csWUFBYSxDQUNiLGVBQWdCLENBSW5CLDBCQU5ELFlBSVEsZUFBZ0IsQ0FFdkIsQ0FFRCxRQUNJLGtCQUFtQixDQUNuQixrQkFBbUIsQ0FDbkIsU0FBVSxDQUNiLFlBR0csV0FBWSxDQUNaLFlBQWEsQ0FDYixjQUFlLENBQ2YsS0FBTSxDQUNOLFlBQWEsQ0FDYiwwQkFBMkIsQ0FDM0IseUJBQTBCLENBQzFCLGlDQUFrQyxDQUVsQyxtQkFBb0IsQ0FDcEIsbUJBQW9CLENBQ3BCLFNBQVUsQ0FaZCxtQkFlUSxrQkFBbUIsQ0FDbkIsU0FBVVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcclxcblxcclxcbi5wb3B1cC13cmFwcGVyIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG5cXHJcXG4ucG9wdXAge1xcclxcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcXHJcXG4gICAgd2lkdGg6IDYwdnc7XFxyXFxuICAgIGhlaWdodDogYXV0bztcXHJcXG4gICAgdG9wOiAxMCU7XFxyXFxuICAgIGxlZnQ6IDIwJTtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCk7XFxyXFxuICAgIHotaW5kZXg6IDk5OTk7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcblxcclxcbiAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSg5NywgOTcsIDk3LCAwLjEpLCAwIDNweCAyMHB4IDAgcmdiYSg5MiwgOTIsIDkyLCAwLjMpLCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMC45KTtcXHJcXG4gICAgb3BhY2l0eTogMDtcXHJcXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xcclxcbiAgICBAaW5jbHVkZSBtb2JpbGUge1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMHB4O1xcclxcbiAgICAgICAgdG9wOiAwO1xcclxcbiAgICAgICAgbGVmdDogMDtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5wb3B1cC10b3Age1xcclxcbiAgICBwYWRkaW5nOiAyMHB4IDMwcHggMCAzMHB4O1xcclxcbiAgICBoZWlnaHQ6IDcwcHg7XFxyXFxuICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcXHJcXG5cXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogJGJvcmRlci1jb2xvciA1cHggc29saWQ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMCk7XFxyXFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigzcHgpO1xcclxcbiAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigzcHgpO1xcclxcblxcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcXHJcXG5cXHJcXG4gICAgaDEge1xcclxcbiAgICAgICAgY29sb3I6IGJsYWNrO1xcclxcbiAgICAgICAgZmxleDogOTAlO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAyNXB4O1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IDgwMDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4jcG9wdXAtY2xvc2UtYnV0dG9uIHtcXHJcXG4gICAgYm9yZGVyOiBub25lO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogMTRweDtcXHJcXG4gICAgcmlnaHQ6IDE3cHg7XFxyXFxuICAgIHotaW5kZXg6IDkwMDA7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTE2LCAxMSwgMTEsIDApO1xcclxcbiAgICB3aWR0aDogNDBweDtcXHJcXG4gICAgaGVpZ2h0OiA0MHB4O1xcclxcbiAgICBmb250LWZhbWlseTogXFxcIkdpbGwgU2Fuc1xcXCIsIFxcXCJHaWxsIFNhbnMgTVRcXFwiLCBDYWxpYnJpLCBcXFwiVHJlYnVjaGV0IE1TXFxcIiwgc2Fucy1zZXJpZjtcXHJcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgICBmb250LXdlaWdodDogMTAwO1xcclxcbiAgICBjb2xvcjogcmdiKDAsIDAsIDApO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5wb3B1cC1ib2R5IHtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgbWF4LWhlaWdodDogNzB2aDtcXHJcXG4gICAgQGluY2x1ZGUgbW9iaWxlIHtcXHJcXG4gICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLmFjdGl2ZSB7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxufVxcclxcblxcclxcbi5iYWNrZ3JvdW5kIHtcXHJcXG4gICAgd2lkdGg6IDEwMHZ3O1xcclxcbiAgICBoZWlnaHQ6IDEwMHZoO1xcclxcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgIHRvcDogMDtcXHJcXG4gICAgei1pbmRleDogOTk5MDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjcwO1xcclxcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTtcXHJcXG4gICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTtcXHJcXG5cXHJcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzO1xcclxcbiAgICBvcGFjaXR5OiAwO1xcclxcblxcclxcbiAgICAmLmFjdGl2ZSB7XFxyXFxuICAgICAgICBwb2ludGVyLWV2ZW50czogYWxsO1xcclxcbiAgICAgICAgb3BhY2l0eTogMTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVwb3J0LXZpZXd7cGFkZGluZzoyMHB4fS5yZXBvcnQtdmlldyBoMXtmb250LXNpemU6MjBweH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1ZpZXdzL1JlcG9ydC9SZXBvcnRWaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsYUFDSSxZQUFhLENBRGpCLGdCQUdRLGNBQWVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnJlcG9ydC12aWV3IHtcXG4gICAgcGFkZGluZzogMjBweDtcXG4gICAgaDEge1xcbiAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zZWFyY2gtcmVzdWx0c3tmbGV4OjcwJTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsMC4xOTkpO2hlaWdodDoxMDAlO2JhY2tkcm9wLWZpbHRlcjpibHVyKDNweCk7LXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6Ymx1cigzcHgpO3BhZGRpbmc6MTBweCAyMHB4IDgwcHggMTBweDt6LWluZGV4OjA7b3ZlcmZsb3cteTpzY3JvbGx9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TZWFyY2gvU2VhcmNoUmVzdWx0cy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGdCQUNJLFFBQVMsQ0FDVCx3Q0FBNEMsQ0FDNUMsV0FBWSxDQUNaLHlCQUEwQixDQUMxQixpQ0FBa0MsQ0FFbEMsMkJBQTRCLENBQzVCLFNBQVUsQ0FDVixpQkFBa0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnNlYXJjaC1yZXN1bHRzIHtcXHJcXG4gICAgZmxleDogNzAlO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTk5KTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoM3B4KTtcXHJcXG4gICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoM3B4KTtcXHJcXG5cXHJcXG4gICAgcGFkZGluZzogMTBweCAyMHB4IDgwcHggMTBweDtcXHJcXG4gICAgei1pbmRleDogMDtcXHJcXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc2VhcmNoLXZpZXd7ZmxleDozMCU7aGVpZ2h0OjEwMCU7Ym94LXNoYWRvdzoxMHB4IDBweCAyMHB4IHJnYmEoMCwwLDAsMC4wNzEpO2JvcmRlci1yaWdodDojZDRhYThjIDVweCBzb2xpZDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7ei1pbmRleDo0O292ZXJmbG93OmF1dG87cGFkZGluZzoyMHB4IDIwcHggMjBweCAyMHB4O21pbi13aWR0aDo0MDBweH1AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5zZWFyY2gtdmlld3ttaW4td2lkdGg6MTAwJX19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TZWFyY2gvU2VhcmNoVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLGFBQ0ksUUFBUyxDQUNULFdBQVksQ0FDWiwwQ0FBOEMsQ0FDOUMsOEJBQXFDLENBQ3JDLHFCQUFvQyxDQUNwQyxTQUFVLENBQ1YsYUFBYyxDQUNkLDJCQUE0QixDQUM1QixlQUFnQixDQUluQiwwQkFiRCxhQVdRLGNBQWUsQ0FFdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG5cXG4uc2VhcmNoLXZpZXcge1xcbiAgICBmbGV4OiAzMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgYm94LXNoYWRvdzogMTBweCAwcHggMjBweCByZ2JhKDAsIDAsIDAsIDAuMDcxKTtcXG4gICAgYm9yZGVyLXJpZ2h0OiAkYm9yZGVyLWNvbG9yIDVweCBzb2xpZDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcbiAgICB6LWluZGV4OiA0O1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG4gICAgcGFkZGluZzogMjBweCAyMHB4IDIwcHggMjBweDtcXG4gICAgbWluLXdpZHRoOiA0MDBweDtcXG4gICAgQGluY2x1ZGUgbW9iaWxlIHtcXG4gICAgICAgIG1pbi13aWR0aDogMTAwJTtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc2lkZS12aWV3e3RyYW5zaXRpb246YWxsIDAuNXMgY3ViaWMtYmV6aWVyKDAuMDc1LCAwLjgyLCAwLjE2NSwgMSk7ei1pbmRleDoxMDB9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsuc2lkZS12aWV3e3Bvc2l0aW9uOmFic29sdXRlICFpbXBvcnRhbnQ7aGVpZ2h0OjEwMCU7dG9wOjA7d2lkdGg6MTAwJTtvdmVyZmxvdzphdXRvfS5zaWRlLXZpZXcubGVmdHtsZWZ0Oi0xMDUlfS5zaWRlLXZpZXcucmlnaHR7cmlnaHQ6LTEwNSV9LnNpZGUtdmlldy5zaG93aW5nLnJpZ2h0e3JpZ2h0OjB9LnNpZGUtdmlldy5zaG93aW5nLmxlZnR7bGVmdDowfX0uc2lkZS12aWV3IC5jbG9zZS1zaWRlLXZpZXctYnRue2JvcmRlcjpub25lO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxNHB4O3JpZ2h0OjE3cHg7ei1pbmRleDo5MDAwO2JhY2tncm91bmQtY29sb3I6cmdiYSgxMTYsMTEsMTEsMCk7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtmb250LWZhbWlseTpcXFwiR2lsbCBTYW5zXFxcIiwgXFxcIkdpbGwgU2FucyBNVFxcXCIsIENhbGlicmksIFxcXCJUcmVidWNoZXQgTVNcXFwiLCBzYW5zLXNlcmlmO2ZvbnQtc2l6ZToyMHB4O2ZvbnQtd2VpZ2h0OjEwMDtjb2xvcjojMDAwO2N1cnNvcjpwb2ludGVyO2Rpc3BsYXk6bm9uZX1AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5zaWRlLXZpZXcgLmNsb3NlLXNpZGUtdmlldy1idG57ZGlzcGxheTpibG9ja319XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TaWRlVmlldy9TaWRlVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLFdBQ0ksdURBQXdELENBQ3hELFdBQVksQ0FnRGYsMEJBbERELFdBS1EsNEJBQTZCLENBQzdCLFdBQVksQ0FFWixLQUFNLENBUU4sVUFBVyxDQUNYLGFBQWMsQ0FqQnRCLGdCQVVZLFVBQVcsQ0FWdkIsaUJBYVksV0FBWSxDQWJ4Qix5QkFxQmdCLE9BQVEsQ0FyQnhCLHdCQXdCZ0IsTUFBTyxDQUNWLENBekJiLGdDQThCUSxXQUFZLENBQ1osaUJBQWtCLENBQ2xCLFFBQVMsQ0FDVCxVQUFXLENBQ1gsWUFBYSxDQUNiLGtDQUFzQyxDQUN0QyxVQUFXLENBQ1gsV0FBWSxDQUNaLDRFQUE2RSxDQUM3RSxjQUFlLENBQ2YsZUFBZ0IsQ0FDaEIsVUFBbUIsQ0FDbkIsY0FBZSxDQUVmLFlBQWEsQ0FLaEIsMEJBakRMLGdDQStDWSxhQUFjLENBRXJCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuLnNpZGUtdmlldyB7XFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGN1YmljLWJlemllcigwLjA3NSwgMC44MiwgMC4xNjUsIDEpO1xcbiAgICB6LWluZGV4OiAxMDA7XFxuXFxuICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDtcXG4gICAgICAgIGhlaWdodDogMTAwJTtcXG5cXG4gICAgICAgIHRvcDogMDtcXG4gICAgICAgICYubGVmdCB7XFxuICAgICAgICAgICAgbGVmdDogLTEwNSU7XFxuICAgICAgICB9XFxuICAgICAgICAmLnJpZ2h0IHtcXG4gICAgICAgICAgICByaWdodDogLTEwNSU7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xcblxcbiAgICAgICAgJi5zaG93aW5nIHtcXG4gICAgICAgICAgICAmLnJpZ2h0IHtcXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDA7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICYubGVmdCB7XFxuICAgICAgICAgICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5jbG9zZS1zaWRlLXZpZXctYnRuIHtcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHRvcDogMTRweDtcXG4gICAgICAgIHJpZ2h0OiAxN3B4O1xcbiAgICAgICAgei1pbmRleDogOTAwMDtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTE2LCAxMSwgMTEsIDApO1xcbiAgICAgICAgd2lkdGg6IDQwcHg7XFxuICAgICAgICBoZWlnaHQ6IDQwcHg7XFxuICAgICAgICBmb250LWZhbWlseTogXFxcIkdpbGwgU2Fuc1xcXCIsIFxcXCJHaWxsIFNhbnMgTVRcXFwiLCBDYWxpYnJpLCBcXFwiVHJlYnVjaGV0IE1TXFxcIiwgc2Fucy1zZXJpZjtcXG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAxMDA7XFxuICAgICAgICBjb2xvcjogcmdiKDAsIDAsIDApO1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgICAgICAgZGlzcGxheTogbm9uZTtcXG5cXG4gICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmRldGFpbHMtY29udGFpbmVye292ZXJmbG93LXk6c2Nyb2xsO2ZsZXg6MC4yO21pbi13aWR0aDoxNmVtO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3gtc2hhZG93OjAgMCAwIDFweCByZ2JhKDk3LDk3LDk3LDAuMSksMCAzcHggMjBweCAwIHJnYmEoOTIsOTIsOTIsMC4zKSwwIDFweCAycHggcmdiYSgwLDAsMCwwLjUpO2JvcmRlci1yYWRpdXM6NXB4O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47bWFyZ2luOjIwcHg7cG9zaXRpb246cmVsYXRpdmV9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsuZGV0YWlscy1jb250YWluZXJ7ZGlzcGxheTpibG9jazttYXJnaW46MDtoZWlnaHQ6OTIlO21hcmdpbi10b3A6NGVtfX0uZGV0YWlscy1jb250YWluZXIgLm1lZXRpbmdpbmZvLWNvbnRhaW5lcntwYWRkaW5nOjMwcHg7d2lkdGg6MTAwJTtmb250LXdlaWdodDpib2xkO2JveC1zaGFkb3c6MTBweCAwIDEwcHggcmdiYSgwLDAsMCwwLjE3Myl9LmRldGFpbHMtY29udGFpbmVyIC5tZWV0aW5naW5mby1jb250YWluZXIgaDF7YmFja2dyb3VuZC1jb2xvcjojZmZkYTVhO2ZvbnQtc2l6ZToyMHB4O21hcmdpbi1ib3R0b206MTBweH0uZGV0YWlscy1jb250YWluZXIgLm1lZXRpbmdpbmZvLWNvbnRhaW5lciAubWVldGluZ2luZm8tZGVzY3JpcHRpb257Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxNXB4fS5kZXRhaWxzLWNvbnRhaW5lciAuZGVzY3JpcHRpb24tY29udGFpbmVye3BhZGRpbmc6MzBweCAyMHB4IDAgMjBweDtmb250LXdlaWdodDpib2xkO3dpZHRoOjEwMCV9LmRldGFpbHMtY29udGFpbmVyIC5kZXNjcmlwdGlvbi1jb250YWluZXIgaDF7Zm9udC1zaXplOjE1cHg7bWFyZ2luLWJvdHRvbToxMHB4fS5kZXRhaWxzLWNvbnRhaW5lciAuZGVzY3JpcHRpb24tY29udGFpbmVyIC5kZXRhaWxzLWRlc2NyaXB0aW9ue2ZvbnQtd2VpZ2h0Om5vcm1hbDt3b3JkLXdyYXA6YnJlYWstd29yZDt3aWR0aDoxMDAlO2ZvbnQtc2l6ZToxNXB4fS5kZXRhaWxzLWNvbnRhaW5lciAuYnV0dG9uc3twb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MjBweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvRGV0YWlsc1ZpZXcvRGV0YWlsc1ZpZXcuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsbUJBQ0ksaUJBQWtCLENBQ2xCLFFBQVMsQ0FDVCxjQUFlLENBQ2YscUJBQW9DLENBRXBDLGlHQUE2RyxDQUM3RyxpQkFBa0IsQ0FDbEIsWUFBYSxDQUNiLHFCQUFzQixDQUN0QixXQUFZLENBQ1osaUJBQWtCLENBd0RyQiwwQkFuRUQsbUJBY1EsYUFBYyxDQUNkLFFBQVMsQ0FDVCxVQUFXLENBQ1gsY0FBZSxDQWtEdEIsQ0FuRUQsMENBeUJRLFlBQWEsQ0FDYixVQUFXLENBRVgsZ0JBQWlCLENBQ2pCLHdDQUE0QyxDQTdCcEQsNkNBK0JZLHdCQzNCYSxDRDRCYixjQUFlLENBQ2Ysa0JBQW1CLENBakMvQixtRUFxQ1ksa0JBQW1CLENBQ25CLGNBQWUsQ0F0QzNCLDBDQTJDUSx3QkFBeUIsQ0FDekIsZ0JBQWlCLENBQ2pCLFVBQVcsQ0E3Q25CLDZDQStDWSxjQUFlLENBQ2Ysa0JBQW1CLENBaEQvQiwrREFvRFksa0JBQW1CLENBQ25CLG9CQUFxQixDQUNyQixVQUFXLENBQ1gsY0FBZSxDQXZEM0IsNEJBMkRRLGlCQUFrQixDQUNsQixXQUFZLENBRVosWUFBYSxDQUNiLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FDdkIsVUFBV1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5kZXRhaWxzLWNvbnRhaW5lciB7XFxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcXG4gICAgZmxleDogMC4yO1xcbiAgICBtaW4td2lkdGg6IDE2ZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXG5cXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMXB4IHJnYmEoOTcsIDk3LCA5NywgMC4xKSwgMCAzcHggMjBweCAwIHJnYmEoOTIsIDkyLCA5MiwgMC4zKSwgMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC41KTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBtYXJnaW46IDIwcHg7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXG4gICAgQGluY2x1ZGUgbW9iaWxlIHtcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgbWFyZ2luOiAwO1xcbiAgICAgICAgaGVpZ2h0OiA5MiU7XFxuICAgICAgICBtYXJnaW4tdG9wOiA0ZW07XFxuICAgIH1cXG5cXG4gICAgLy8gZGlzcGxheTogZmxleDtcXG4gICAgLy8gZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgLy8gYWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG4gICAgLm1lZXRpbmdpbmZvLWNvbnRhaW5lciB7XFxuICAgICAgICBwYWRkaW5nOiAzMHB4O1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuXFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgICAgIGJveC1zaGFkb3c6IDEwcHggMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xNzMpO1xcbiAgICAgICAgaDEge1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAubWVldGluZ2luZm8tZGVzY3JpcHRpb24ge1xcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5kZXNjcmlwdGlvbi1jb250YWluZXIge1xcbiAgICAgICAgcGFkZGluZzogMzBweCAyMHB4IDAgMjBweDtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBoMSB7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAuZGV0YWlscy1kZXNjcmlwdGlvbiB7XFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIC5idXR0b25zIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGJvdHRvbTogMjBweDtcXG4gICAgICAgIC8vIG1hcmdpbi1sZWZ0OiA3NXB4O1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICB9XFxufVxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA5NTBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmZlZWQtY29udGFpbmVye292ZXJmbG93OnZpc2libGU7b3ZlcmZsb3cteTpzY3JvbGw7ZmxleDowLjY7YmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpibHVyKDNweCk7b3ZlcmZsb3c6YXV0bztwYWRkaW5nOjIwcHg7c2Nyb2xsYmFyLXdpZHRoOm5vbmV9LmZlZWQtY29udGFpbmVyIC5uby1wb3N0cy1tZXNzYWdle2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OnNwYWNlLWV2ZW5seTtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtwYWRkaW5nLXRvcDo0MHB4O3RleHQtYWxpZ246Y2VudGVyfS5mZWVkLWNvbnRhaW5lciAubm8tcG9zdHMtbWVzc2FnZSBoMXtmb250LXNpemU6NTBweDttYXJnaW4tYm90dG9tOjIwcHh9LmZlZWQtY29udGFpbmVyIC5uby1wb3N0cy1tZXNzYWdlIHB7Zm9udC1zaXplOjIwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsuZmVlZC1jb250YWluZXJ7ZmxleDoxO3BhZGRpbmc6MjVweH19LmZlZWQtY29udGFpbmVyIC5wb3N0cy1jb250YWluZXJ7cGFkZGluZy1ib3R0b206MzBweDtvdmVyZmxvdzp2aXNpYmxlfS5vcHRpb25zLWNvbnRhaW5lcntwb3NpdGlvbjpmaXhlZDt6LWluZGV4Ojk7Ym90dG9tOjA7cmlnaHQ6MzAwcHg7d2lkdGg6MTAwJTt0ZXh0LWFsaWduOnJpZ2h0fS5vcHRpb25zLWNvbnRhaW5lciAub3Blbi12aWV3LWJ1dHRvbnN7ZGlzcGxheTpub25lfUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7Lm9wdGlvbnMtY29udGFpbmVyIC5vcGVuLXZpZXctYnV0dG9uc3tkaXNwbGF5OmJsb2NrfX1AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5vcHRpb25zLWNvbnRhaW5lcntwb3NpdGlvbjpmaXhlZDtib3R0b206MHB4O3JpZ2h0OjA7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXh9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9GZWVkL0ZlZWRWaWV3LnNjc3NcIixcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvZ2xvYmFscy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLGdCQUVJLGdCQUFpQixDQUNqQixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULHlCQUEwQixDQUMxQixpQ0FBa0MsQ0FFbEMsYUFBYyxDQUNkLFlBQWEsQ0FFYixvQkFBcUIsQ0FYekIsa0NBY1EsWUFBYSxDQUNiLGtCQUFtQixDQUNuQiw0QkFBNkIsQ0FDN0IscUJBQXNCLENBQ3RCLFdBQVksQ0FDWixVQUFXLENBQ1gsZ0JBQWlCLENBQ2pCLGlCQUFrQixDQXJCMUIscUNBdUJZLGNBQWUsQ0FDZixrQkFBbUIsQ0F4Qi9CLG9DQTRCWSxjQUFlLENBQ2xCLDBCQTdCVCxnQkFpQ1EsTUFBTyxDQUNQLFlBQWEsQ0FNcEIsQ0F4Q0QsaUNBcUNRLG1CQUFvQixDQUNwQixnQkFBaUIsQ0FDcEIsbUJBSUQsY0FBZSxDQUNmLFNBQVUsQ0FDVixRQUFTLENBQ1QsV0FBWSxDQUNaLFVBQVcsQ0FDWCxnQkFBaUIsQ0FOckIsc0NBU1EsWUFBYSxDQUloQiwwQkFiTCxzQ0FXWSxhQUFjLENBRXJCLENDOUNELDBCRGlDSixtQkFnQlEsY0FBZSxDQUNmLFVBQVcsQ0FDWCxPQUFRLENBQ1IsVUFBVyxDQUNYLFlBQWEsQ0FFcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG4uZmVlZC1jb250YWluZXIge1xcclxcbiAgICAvLyBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcclxcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XFxyXFxuICAgIGZsZXg6IDAuNjtcXHJcXG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDNweCk7XFxyXFxuICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDNweCk7XFxyXFxuXFxyXFxuICAgIG92ZXJmbG93OiBhdXRvO1xcclxcbiAgICBwYWRkaW5nOiAyMHB4O1xcclxcblxcclxcbiAgICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7XFxyXFxuXFxyXFxuICAgIC5uby1wb3N0cy1tZXNzYWdlIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxyXFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBwYWRkaW5nLXRvcDogNDBweDtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgIGgxIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDUwcHg7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIHAge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBAaW5jbHVkZSBtb2JpbGUge1xcclxcbiAgICAgICAgZmxleDogMTtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDI1cHg7XFxyXFxuICAgIH1cXHJcXG4gICAgLnBvc3RzLWNvbnRhaW5lciB7XFxyXFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMzBweDtcXHJcXG4gICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5vcHRpb25zLWNvbnRhaW5lciB7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgei1pbmRleDogOTtcXHJcXG4gICAgYm90dG9tOiAwO1xcclxcbiAgICByaWdodDogMzAwcHg7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXHJcXG5cXHJcXG4gICAgLm9wZW4tdmlldy1idXR0b25zIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxyXFxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgICAgICBib3R0b206IDBweDtcXHJcXG4gICAgICAgIHJpZ2h0OiAwO1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA5NTBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1lbWJlcnMtY29udGFpbmVye2JhY2tncm91bmQtY29sb3I6I2ZmZjtiYWNrZHJvcC1maWx0ZXI6Ymx1cigzcHgpOy13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTtib3gtc2hhZG93OjAgMCAwIDFweCByZ2JhKDk3LDk3LDk3LDAuMSksMCAzcHggMjBweCAwIHJnYmEoOTIsOTIsOTIsMC4zKSwwIDFweCAycHggcmdiYSgwLDAsMCwwLjUpO2JvcmRlci1yYWRpdXM6NXB4O21hcmdpbjoyMHB4O292ZXJmbG93LXk6c2Nyb2xsO2ZsZXg6MC4yO21pbi13aWR0aDoxNmVtfUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7Lm1lbWJlcnMtY29udGFpbmVye2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjA7aGVpZ2h0OjkyJTttYXJnaW4tdG9wOjRlbX19Lm1lbWJlcnMtY29udGFpbmVyIC5tZW1iZXJ7cGFkZGluZzoxMHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3RyYW5zaXRpb246YWxsIDAuMnM7Ym9yZGVyLWxlZnQ6MHB4IHNvbGlkfS5tZW1iZXJzLWNvbnRhaW5lciAubWVtYmVyIHB7cGFkZGluZy1sZWZ0OjIwcHh9Lm1lbWJlcnMtY29udGFpbmVyIC5tZW1iZXI6Zmlyc3QtY2hpbGR7YmFja2dyb3VuZC1jb2xvcjojZmFmYWZhfS5tZW1iZXJzLWNvbnRhaW5lciAubWVtYmVyOm50aC1jaGlsZCgybiszKXtiYWNrZ3JvdW5kLWNvbG9yOiNmNGY0ZjR9Lm1lbWJlcnMtY29udGFpbmVyIC5tZW1iZXI6aG92ZXJ7Ym9yZGVyLWxlZnQ6MTBweCBzb2xpZDtjb2xvcjpibGFjaztjdXJzb3I6cG9pbnRlcjtvdmVyZmxvdzpoaWRkZW59Lm1lbWJlcnMtY29udGFpbmVyIC5tZW1iZXIub3duZXJ7bWFyZ2luLWJvdHRvbToyMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9NZW1iZXJzL01lbWJlcnNWaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsbUJBQ0kscUJBQW9DLENBQ3BDLHlCQUEwQixDQUMxQixpQ0FBa0MsQ0FFbEMsaUdBQTZHLENBQzdHLGlCQUFrQixDQUNsQixXQUFZLENBQ1osaUJBQWtCLENBQ2xCLFFBQVMsQ0FDVCxjQUFlLENBMENsQiwwQkFwREQsbUJBYVEsYUFBYyxDQUNkLFFBQVMsQ0FDVCxVQUFXLENBQ1gsY0FBZSxDQW9DdEIsQ0FwREQsMkJBb0JRLFlBQWEsQ0FDYixxQkFBb0MsQ0FDcEMsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixtQkFBb0IsQ0FDcEIscUJBQXNCLENBekI5Qiw2QkE2QlksaUJBQWtCLENBN0I5Qix1Q0FpQ1ksd0JBQW9DLENBakNoRCwyQ0FvQ1ksd0JBQW9DLENBcENoRCxpQ0F3Q1ksc0JBQXVCLENBRXZCLFdBQVksQ0FDWixjQUFlLENBQ2YsZUFBZ0IsQ0E1QzVCLGlDQWdEWSxrQkFBbUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG4ubWVtYmVycy1jb250YWluZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxyXFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigzcHgpO1xcclxcbiAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigzcHgpO1xcclxcblxcclxcbiAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSg5NywgOTcsIDk3LCAwLjEpLCAwIDNweCAyMHB4IDAgcmdiYSg5MiwgOTIsIDkyLCAwLjMpLCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgIG1hcmdpbjogMjBweDtcXHJcXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcclxcbiAgICBmbGV4OiAwLjI7XFxyXFxuICAgIG1pbi13aWR0aDogMTZlbTtcXHJcXG5cXHJcXG4gICAgQGluY2x1ZGUgbW9iaWxlIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICAgICAgbWFyZ2luOiAwO1xcclxcbiAgICAgICAgaGVpZ2h0OiA5MiU7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiA0ZW07XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLm1lbWJlciB7XFxyXFxuICAgICAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcXHJcXG4gICAgICAgIGJvcmRlci1sZWZ0OiAwcHggc29saWQ7XFxyXFxuICAgICAgICAvLyB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxyXFxuXFxyXFxuICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmOmZpcnN0LWNoaWxkIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjUwLCAyNTAsIDI1MCk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAmOm50aC1jaGlsZCgybiArIDMpIHtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ0LCAyNDQsIDI0NCk7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmOmhvdmVyIHtcXHJcXG4gICAgICAgICAgICBib3JkZXItbGVmdDogMTBweCBzb2xpZDtcXHJcXG4gICAgICAgICAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQ0LCAyNDQsIDI0NCk7XFxyXFxuICAgICAgICAgICAgY29sb3I6IGJsYWNrO1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJi5vd25lciB7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXHJcXG4gICAgICAgICAgICAvLyBib3JkZXItd2lkdGg6IDIwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1lbWJlci1kZXRhaWxze3BhZGRpbmc6NjBweH0ubWVtYmVyLWRldGFpbHMgLm1lbWJlci1wcmltYXJ5LWluZm97ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5tZW1iZXItZGV0YWlscyAubWVtYmVyLXByaW1hcnktaW5mbyBpbWd7bWF4LXdpZHRoOjEwMHB4O21heC1oZWlnaHQ6MTAwcHg7bWluLXdpZHRoOjEwMHB4O21pbi1oZWlnaHQ6MTAwcHg7Ym9yZGVyLXJhZGl1czo1MHB4O21hcmdpbi1yaWdodDozMHB4fS5tZW1iZXItZGV0YWlscyAubWVtYmVyLXByaW1hcnktaW5mbyBoMXtmb250LXdlaWdodDo5MDB9Lm1lbWJlci1kZXRhaWxzIC5tZW1iZXItc2Vjb25kYXJ5LWluZm97cGFkZGluZy10b3A6NTBweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWV2ZW5seX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvTWVtYmVycy9WaWV3TWVtYmVyVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGdCQUNJLFlBQWEsQ0FEakIscUNBR1EsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FML0IseUNBUVksZUFBZ0IsQ0FDaEIsZ0JBQWlCLENBQ2pCLGVBQWdCLENBQ2hCLGdCQUFpQixDQUNqQixrQkFBbUIsQ0FDbkIsaUJBQWtCLENBYjlCLHdDQWdCWSxlQUFnQixDQWhCNUIsdUNBb0JRLGdCQUFpQixDQUVqQixZQUFhLENBQ2IsNEJBQTZCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tZW1iZXItZGV0YWlscyB7XFxyXFxuICAgIHBhZGRpbmc6IDYwcHg7XFxyXFxuICAgIC5tZW1iZXItcHJpbWFyeS1pbmZvIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwcHg7XFxyXFxuICAgICAgICAgICAgbWF4LWhlaWdodDogMTAwcHg7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAxMDBweDtcXHJcXG4gICAgICAgICAgICBtaW4taGVpZ2h0OiAxMDBweDtcXHJcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMzBweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIGgxIHtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogOTAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIC5tZW1iZXItc2Vjb25kYXJ5LWluZm8ge1xcclxcbiAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XFxyXFxuICAgICAgICAvLyBwYWRkaW5nLWJvdHRvbTogMzBweDtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIudmlldy1tZWV0aW5nLXRvcHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnN0YXJ0O2FsaWduLWl0ZW1zOmNlbnRlcn0udmlldy1tZWV0aW5nLXRvcCBoMXtmb250LXNpemU6MThweDtiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrO3BhZGRpbmc6NXB4O2NvbG9yOndoaXRlfS52aWV3LW1lZXRpbmctdG9wIC50b3AtaWNvbntmb250LXNpemU6MzBweDt3aWR0aDozMHB4O21hcmdpbi1yaWdodDoxMHB4fWhye21hcmdpbi1sZWZ0OjIwcHg7bWFyZ2luLXJpZ2h0OjIwcHg7aGVpZ2h0OjAuNXB4O2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwLjI4Myk7Ym9yZGVyOm5vbmV9Lm1lZXRpbmctY29udGFpbmVye21hcmdpbjo0MHB4IDQwcHggNDBweCA0MHB4fS5tZWV0aW5nLWNvbnRhaW5lci5uZXh0LW1lZXRpbmctY29udGFpbmVye2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwLjAzNik7cGFkZGluZzoyMHB4fS5tZWV0aW5nLWNvbnRhaW5lciBoMXtmb250LXNpemU6MjVweDtmb250LXdlaWdodDoxMDB9Lm1lZXRpbmctY29udGFpbmVyIC5tZWV0aW5ne2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtZXZlbmx5O2FsaWduLWl0ZW1zOnN0YXJ0fS5tZWV0aW5nLWNvbnRhaW5lciAubWVldGluZyBzcGFue2ZvbnQtd2VpZ2h0OjkwMH0ubWVldGluZy1jb250YWluZXIgLm1lZXRpbmcgcHtwYWRkaW5nOjJweCAwcHggMnB4IDB9Lm1lZXRpbmctY29udGFpbmVyIC5tZWV0aW5nIC5tZWV0aW5nLXRpbWV7cGFkZGluZzoxMHB4IDBweCAxMHB4IDA7ZmxleDowLjV9Lm1lZXRpbmctY29udGFpbmVyIC5tZWV0aW5nIC5tZWV0aW5nLWRldGFpbHN7cGFkZGluZzoxMHB4IDBweCAxMHB4IDA7ZmxleDowLjV9Lm9uZS10aW1lLW1lZXRpbmdzLWNvbnRhaW5lcnttYXJnaW46NDBweCA0MHB4IDQwcHggNDBweH0ub25lLXRpbWUtbWVldGluZ3MtY29udGFpbmVyIGgxe2ZvbnQtc2l6ZToyNXB4O2ZvbnQtd2VpZ2h0OjEwMH0ub25lLXRpbWUtbWVldGluZ3MtY29udGFpbmVyIC5vbmUtdGltZS1tZWV0aW5nLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2JvcmRlci1ib3R0b206c29saWQgcmdiYSgwLDAsMCwwLjE0NCkgMC41cHh9Lm9uZS10aW1lLW1lZXRpbmdzLWNvbnRhaW5lciAub25lLXRpbWUtbWVldGluZ3tmbGV4OjE7cGFkZGluZzoxMHB4IDAgMTBweCAwO21hcmdpbjoxMHB4IDAgMTBweCAwfS5vbmUtdGltZS1tZWV0aW5ncy1jb250YWluZXIgLm9uZS10aW1lLW1lZXRpbmcgc3Bhbntmb250LXdlaWdodDo5MDA7cGFkZGluZy1yaWdodDoyMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9WaWV3TWVldGluZ1ZpZXcvVmlld01lZXRpbmdWaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsa0JBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUN0QixrQkFBbUIsQ0FIdkIscUJBS1EsY0FBZSxDQUNmLHNCQUF1QixDQUN2QixXQUFZLENBQ1osV0FBWSxDQVJwQiw0QkFXUSxjQUFlLENBQ2YsVUFBVyxDQUNYLGlCQUFrQixDQUNyQixHQUlELGdCQUFpQixDQUNqQixpQkFBa0IsQ0FDbEIsWUFBYSxDQUNiLGtDQUFzQyxDQUN0QyxXQUFZLENBQ2YsbUJBNkJHLDBCQUEyQixDQTVCL0IsMENBRVEsa0NBQXNDLENBQ3RDLFlBQWEsQ0FIckIsc0JBTVEsY0FBZSxDQUNmLGVBQWdCLENBUHhCLDRCQVVRLFlBQWEsQ0FDYiw0QkFBNkIsQ0FDN0IsaUJBQWtCLENBWjFCLGlDQWNZLGVBQWdCLENBZDVCLDhCQWlCWSxxQkFBc0IsQ0FqQmxDLDBDQW9CWSx1QkFBd0IsQ0FDeEIsUUFBUyxDQXJCckIsNkNBd0JZLHVCQUF3QixDQUN4QixRQUFTLENBQ1osNkJBU0wsMEJBQTJCLENBTC9CLGdDQUVRLGNBQWUsQ0FDZixlQUFnQixDQUh4Qix5REFPUSxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLDJDQUErQyxDQVR2RCwrQ0FZUSxNQUFPLENBQ1AscUJBQXNCLENBQ3RCLG9CQUFxQixDQWQ3QixvREFnQlksZUFBZ0IsQ0FDaEIsa0JBQW1CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi52aWV3LW1lZXRpbmctdG9wIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgaDEge1xcbiAgICAgICAgZm9udC1zaXplOiAxOHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgICAgICBwYWRkaW5nOiA1cHg7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG4gICAgLnRvcC1pY29uIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMzBweDtcXG4gICAgICAgIHdpZHRoOiAzMHB4O1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICB9XFxufVxcblxcbmhyIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxuICAgIG1hcmdpbi1yaWdodDogMjBweDtcXG4gICAgaGVpZ2h0OiAwLjVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI4Myk7XFxuICAgIGJvcmRlcjogbm9uZTtcXG59XFxuLm1lZXRpbmctY29udGFpbmVyIHtcXG4gICAgJi5uZXh0LW1lZXRpbmctY29udGFpbmVyIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wMzYpO1xcbiAgICAgICAgcGFkZGluZzogMjBweDtcXG4gICAgfVxcbiAgICBoMSB7XFxuICAgICAgICBmb250LXNpemU6IDI1cHg7XFxuICAgICAgICBmb250LXdlaWdodDogMTAwO1xcbiAgICB9XFxuICAgIC5tZWV0aW5nIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcXG4gICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgICAgICB9XFxuICAgICAgICBwIHtcXG4gICAgICAgICAgICBwYWRkaW5nOiAycHggMHB4IDJweCAwO1xcbiAgICAgICAgfVxcbiAgICAgICAgLm1lZXRpbmctdGltZSB7XFxuICAgICAgICAgICAgcGFkZGluZzogMTBweCAwcHggMTBweCAwO1xcbiAgICAgICAgICAgIGZsZXg6IDAuNTtcXG4gICAgICAgIH1cXG4gICAgICAgIC5tZWV0aW5nLWRldGFpbHMge1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHggMHB4IDEwcHggMDtcXG4gICAgICAgICAgICBmbGV4OiAwLjU7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgbWFyZ2luOiA0MHB4IDQwcHggNDBweCA0MHB4O1xcbn1cXG4ub25lLXRpbWUtbWVldGluZ3MtY29udGFpbmVyIHtcXG4gICAgaDEge1xcbiAgICAgICAgZm9udC1zaXplOiAyNXB4O1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IDEwMDtcXG4gICAgfVxcbiAgICBtYXJnaW46IDQwcHggNDBweCA0MHB4IDQwcHg7XFxuICAgIC5vbmUtdGltZS1tZWV0aW5nLWNvbnRhaW5lciB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xNDQpIDAuNXB4O1xcbiAgICB9XFxuICAgIC5vbmUtdGltZS1tZWV0aW5nIHtcXG4gICAgICAgIGZsZXg6IDE7XFxuICAgICAgICBwYWRkaW5nOiAxMHB4IDAgMTBweCAwO1xcbiAgICAgICAgbWFyZ2luOiAxMHB4IDAgMTBweCAwO1xcbiAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi52aWV3LXBvc3QtdG9we2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3RhcnQ7YWxpZ24taXRlbXM6Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowcHg7bGVmdDowcHg7d2lkdGg6MTAwJTtoZWlnaHQ6NWVtO3BhZGRpbmctbGVmdDozMHB4O3BhZGRpbmctdG9wOjMwcHg7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LDAuNTQzKTtiYWNrZHJvcC1maWx0ZXI6Ymx1cig1cHgpOy13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOmJsdXIoNXB4KTtib3JkZXItYm90dG9tOjFweCB3aGl0ZXNtb2tlIHNvbGlkO3BhZGRpbmctYm90dG9tOjIwcHh9LnZpZXctcG9zdC10b3AgaDF7Zm9udC1zaXplOjE4cHg7YmFja2dyb3VuZC1jb2xvcjpibGFjaztwYWRkaW5nOjVweDtjb2xvcjp3aGl0ZX0udmlldy1wb3N0LXRvcCAudG9wLWljb257Zm9udC1zaXplOjMwcHg7d2lkdGg6MzBweDttYXJnaW4tcmlnaHQ6MTBweH0ucG9zdC1jb250ZW50c3ttYXJnaW46MjBweDttYXJnaW4tdG9wOjkwcHh9LnBvc3QtY29udGVudHMgLnBvc3QtdGl0bGV7d29yZC13cmFwOmJyZWFrLXdvcmQ7Zm9udC1zaXplOjM1cHg7cGFkZGluZy1ib3R0b206MjBweH0ucG9zdC1jb250ZW50cyAucG9zdC1ib2R5e2Rpc3BsYXk6ZmxleDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjMyLDIzMSwyMzEsMC4yMjEpO3BhZGRpbmc6MzBweDttYXJnaW4tYm90dG9tOjIwcHg7Ym9yZGVyLWJvdHRvbTojZDRhYThjIDVweCBzb2xpZH1AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey5wb3N0LWNvbnRlbnRzIC5wb3N0LWJvZHl7ZmxleC1kaXJlY3Rpb246Y29sdW1ufX0ucG9zdC1jb250ZW50cyAucG9zdC1ib2R5IC5wb3N0LW1lc3NhZ2V7ZmxleDo3MCU7bWFyZ2luLWJvdHRvbToyMHB4fS5wb3N0LWNvbnRlbnRzIC5wb3N0LWJvZHkgLnBvc3QtYXR0YWNobWVudHtmbGV4OjMwJTtvYmplY3QtZml0OmNvbnRhaW59LnBvc3QtY29udGVudHMgLnBvc3QtY3JlYXRvcntjdXJzb3I6cG9pbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmVuZDtkaXNwbGF5OmZsZXh9LnBvc3QtY29udGVudHMgLnBvc3QtY3JlYXRvciBwe2ZvbnQtc2l6ZToxMHB4O2ZvbnQtd2VpZ2h0OjEwMDtwYWRkaW5nLXJpZ2h0OjIwcHh9LnJlc3BvbnNlcy1jb250YWluZXJ7Ym9yZGVyLXRvcDpyZ2JhKDAsMCwwLDAuMjE0KSAwLjVweCBzb2xpZDtwYWRkaW5nLXRvcDoyMHB4fS5yZXNwb25zZXMtY29udGFpbmVyIGgxe21hcmdpbi1sZWZ0OjI1cHg7Zm9udC1zaXplOjEzcHg7Zm9udC13ZWlnaHQ6NDAwfS5yZXNwb25zZXMtY29udGFpbmVyIC5yZXNwb25zZXttYXJnaW46MjVweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsMC4wMTQpO3BhZGRpbmc6MjBweDtkaXNwbGF5OmZsZXg7YWxpZ24tY29udGVudDpjZW50ZXI7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LnJlc3BvbnNlcy1jb250YWluZXIgLnJlc3BvbnNlIHB7Zm9udC1zaXplOjE1cHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL1ZpZXdQb3N0Vmlldy9WaWV3UG9zdFZpZXcuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxlQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsa0JBQW1CLENBQ25CLGlCQUFrQixDQUVsQixPQUFRLENBQ1IsUUFBUyxDQUNULFVBQVcsQ0FDWCxVQUFXLENBRVgsaUJBQWtCLENBQ2xCLGdCQUFpQixDQUNqQix3Q0FBNEMsQ0FDNUMseUJBQTBCLENBQzFCLGlDQUFrQyxDQUVsQyxrQ0FBbUMsQ0FZbkMsbUJBQW9CLENBN0J4QixrQkFtQlEsY0FBZSxDQUNmLHNCQUF1QixDQUN2QixXQUFZLENBQ1osV0FBWSxDQXRCcEIseUJBeUJRLGNBQWUsQ0FDZixVQUFXLENBQ1gsaUJBQWtCLENBQ3JCLGVBS0QsV0FBWSxDQUNaLGVBQWdCLENBRnBCLDJCQUlRLG9CQUFxQixDQUNyQixjQUFlLENBQ2YsbUJBQW9CLENBTjVCLDBCQVNRLFlBQWEsQ0FDYix3Q0FBNEMsQ0FDNUMsWUFBYSxDQUNiLGtCQUFtQixDQUNuQiwrQkFBc0MsQ0FhekMsMEJBMUJMLDBCQWdCWSxxQkFBc0IsQ0FVN0IsQ0ExQkwsd0NBbUJZLFFBQVMsQ0FDVCxrQkFBbUIsQ0FwQi9CLDJDQXVCWSxRQUFTLENBQ1Qsa0JBQW1CLENBeEIvQiw2QkE2QlEsY0FBZSxDQUNmLGtCQUFtQixDQUNuQixtQkFBb0IsQ0FNcEIsWUFBYSxDQXJDckIsK0JBaUNZLGNBQWUsQ0FDZixlQUFnQixDQUNoQixrQkFBbUIsQ0FDdEIscUJBTUwsd0NBQTRDLENBQzVDLGdCQUFpQixDQUhyQix3QkFNUSxnQkFBaUIsQ0FDakIsY0FBZSxDQUNmLGVBQWdCLENBUnhCLCtCQVdRLFdBQVksQ0FDWixrQ0FBc0MsQ0FDdEMsWUFBYSxDQUNiLFlBQWEsQ0FDYixvQkFBcUIsQ0FDckIsNkJBQThCLENBaEJ0QyxpQ0FrQlksY0FBZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcclxcbi52aWV3LXBvc3QtdG9wIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcblxcclxcbiAgICB0b3A6IDBweDtcXHJcXG4gICAgbGVmdDogMHB4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiA1ZW07XFxyXFxuXFxyXFxuICAgIHBhZGRpbmctbGVmdDogMzBweDtcXHJcXG4gICAgcGFkZGluZy10b3A6IDMwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41NDMpO1xcclxcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTtcXHJcXG4gICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTtcXHJcXG5cXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHdoaXRlc21va2Ugc29saWQ7XFxyXFxuICAgIGgxIHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcclxcbiAgICAgICAgcGFkZGluZzogNXB4O1xcclxcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICB9XFxyXFxuICAgIC50b3AtaWNvbiB7XFxyXFxuICAgICAgICBmb250LXNpemU6IDMwcHg7XFxyXFxuICAgICAgICB3aWR0aDogMzBweDtcXHJcXG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG4gICAgfVxcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnBvc3QtY29udGVudHMge1xcclxcbiAgICBtYXJnaW46IDIwcHg7XFxyXFxuICAgIG1hcmdpbi10b3A6IDkwcHg7XFxyXFxuICAgIC5wb3N0LXRpdGxlIHtcXHJcXG4gICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMzVweDtcXHJcXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xcclxcbiAgICB9XFxyXFxuICAgIC5wb3N0LWJvZHkge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjMyLCAyMzEsIDIzMSwgMC4yMjEpO1xcclxcbiAgICAgICAgcGFkZGluZzogMzBweDtcXHJcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuICAgICAgICBib3JkZXItYm90dG9tOiAkYm9yZGVyLWNvbG9yIDVweCBzb2xpZDtcXHJcXG5cXHJcXG4gICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxyXFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC5wb3N0LW1lc3NhZ2Uge1xcclxcbiAgICAgICAgICAgIGZsZXg6IDcwJTtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgLnBvc3QtYXR0YWNobWVudCB7XFxyXFxuICAgICAgICAgICAgZmxleDogMzAlO1xcclxcbiAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvbnRhaW47XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnBvc3QtY3JlYXRvciB7XFxyXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBlbmQ7XFxyXFxuICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDEwcHg7XFxyXFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDEwMDtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG4ucmVzcG9uc2VzLWNvbnRhaW5lciB7XFxyXFxuICAgIC8vIG1hcmdpbjogMjBweDtcXHJcXG4gICAgYm9yZGVyLXRvcDogcmdiYSgwLCAwLCAwLCAwLjIxNCkgMC41cHggc29saWQ7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xcclxcblxcclxcbiAgICBoMSB7XFxyXFxuICAgICAgICBtYXJnaW4tbGVmdDogMjVweDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTNweDtcXHJcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxyXFxuICAgIH1cXHJcXG4gICAgLnJlc3BvbnNlIHtcXHJcXG4gICAgICAgIG1hcmdpbjogMjVweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wMTQpO1xcclxcbiAgICAgICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmpvaW4tZ3JvdXAtY29udGFpbmVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LmpvaW4tZ3JvdXAtY29udGFpbmVyIC5zdWItaW5mb3tkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXB9LmpvaW4tZ3JvdXAtY29udGFpbmVyIC5pbmZve3BhZGRpbmc6MjBweH0uam9pbi1ncm91cC1jb250YWluZXIgLmluZm8gcHt3b3JkLXdyYXA6bm9ybWFsfS5qb2luLWdyb3VwLWNvbnRhaW5lciAuZ3JvdXAtcG9wdXAtdGl0bGV7d2lkdGg6MTAwJTttYXJnaW46LTIwcHg7aGVpZ2h0OjVlbTtwYWRkaW5nLWxlZnQ6MzBweDtjb2xvcjp3aGl0ZTtwb3NpdGlvbjphYnNvbHV0ZTtib3gtc2hhZG93Omluc2V0IDAgMTBweCAyMHB4IHJnYmEoMCwwLDAsMC4yNjIpO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uam9pbi1ncm91cC1jb250YWluZXIgLmdyb3VwLXBvcHVwLXRpdGxlIGgxe3dpZHRoOjEwMCU7dGV4dC1hbGlnbjpsZWZ0fS5qb2luLWdyb3VwLWNvbnRhaW5lciAucG9wdXAtaW5mby1maWVsZHN7bWFyZ2luLXRvcDo1ZW19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9qb2luU3R1ZHlHcm91cFZpZXcvSm9pblN0dWR5R3JvdXBWaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsc0JBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUYxQixnQ0FJUSxZQUFhLENBQ2IsY0FBZSxDQUx2Qiw0QkFRUSxZQUFhLENBUnJCLDhCQVVZLGdCQUFpQixDQVY3Qix5Q0FlUSxVQUFXLENBQ1gsWUFBYSxDQUNiLFVBQVcsQ0FDWCxpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLGlCQUFrQixDQUNsQiw4Q0FBa0QsQ0FFbEQsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixzQkFBdUIsQ0F6Qi9CLDRDQTRCWSxVQUFXLENBQ1gsZUFBZ0IsQ0E3QjVCLHlDQWtDUSxjQUFlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5qb2luLWdyb3VwLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIC5zdWItaW5mbyB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICB9XFxuICAgIC5pbmZvIHtcXG4gICAgICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgICAgICBwIHtcXG4gICAgICAgICAgICB3b3JkLXdyYXA6IG5vcm1hbDtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAuZ3JvdXAtcG9wdXAtdGl0bGUge1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBtYXJnaW46IC0yMHB4O1xcbiAgICAgICAgaGVpZ2h0OiA1ZW07XFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwIDEwcHggMjBweCByZ2JhKDAsIDAsIDAsIDAuMjYyKTtcXG5cXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFxuICAgICAgICBoMSB7XFxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAucG9wdXAtaW5mby1maWVsZHMge1xcbiAgICAgICAgbWFyZ2luLXRvcDogNWVtO1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zdHVkeS1ncm91cC12aWV3e21pbi13aWR0aDoyMDBweDttaW4taGVpZ2h0OjIwMHB4O3BhZGRpbmc6MzBweCAyMHB4IDgwcHggMjBweDtvdmVyZmxvdzpub25lO2JveC1zaGFkb3c6MHB4IDEwcHggMTBweCAjMDAwMDAwMGE7bWFyZ2luOjMwcHg7cG9zaXRpb246cmVsYXRpdmU7YW5pbWF0aW9uOmZsb2F0LWluLWdyb3VwIDAuM3MgZWFzZS1vdXQ7Ym94LXNoYWRvdzpyZ2JhKDAsMCwwLDAuMTczKSA1cHggNXB4IDIwcHg7Ym9yZGVyLXJhZGl1czo1cHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5zdHVkeS1ncm91cC12aWV3IC5ncm91cC10aXRsZXtjb2xvcjojZmZmO2ZvbnQtc2l6ZTozMHB4O3RleHQtc2hhZG93OnJnYmEoMCwwLDAsMC43MDUpIDNweCA1cHggNXB4IDEwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LnN0dWR5LWdyb3VwLXZpZXcgLmdyb3VwLXZpZXctc3ViLWRldGFpbHN7cG9zaXRpb246YWJzb2x1dGU7dG9wOjVweDtyaWdodDo1cHg7ZGlzcGxheTpmbGV4fS5zdHVkeS1ncm91cC12aWV3IC5ncm91cC12aWV3LXN1Yi1kZXRhaWxzIHB7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LDAuMzQ5KTtiYWNrZHJvcC1maWx0ZXI6Ymx1cig1cHgpOy13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOmJsdXIoNXB4KTtjb2xvcjojZmZmO2JvcmRlci1yYWRpdXM6N3B4O2ZvbnQtc2l6ZToxMHB4O3BhZGRpbmc6M3B4O21hcmdpbi1sZWZ0OjVweDt0ZXh0LXNoYWRvdzpyZ2JhKDAsMCwwLDAuNzA1KSAzcHggNXB4IDVweCAxMHB4fS5zdHVkeS1ncm91cC12aWV3IC5ncm91cC12aWV3LWRldGFpbHN7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO2xlZnQ6MDt3aWR0aDoxMDAlO3BhZGRpbmc6MjBweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsMC45ODIpO2JveC1zaGFkb3c6LTEwcHggMHB4IDIwcHggcmdiYSgwLDAsMCwwLjEzOSk7Ym9yZGVyLXRvcDojZTNlM2UzIHNvbGlkIDNweH0uc3R1ZHktZ3JvdXAtdmlldyAuZ3JvdXAtdmlldy1kZXRhaWxzIHB7Zm9udC1zaXplOjEwcHg7Y29sb3I6IzU0NTQ1NDttYXJnaW46MHB4IDEwcHggMCAxMHB4fUBrZXlmcmFtZXMgZmxvYXQtaW4tZ3JvdXB7MCV7bWFyZ2luLXRvcDo1MHB4O29wYWNpdHk6MH0xMDAle21hcmdpbi10b3A6MzBweDtvcGFjaXR5OjF9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHkvc3R1ZHlHcm91cFZpZXcvU3R1ZHlHcm91cFZpZXcuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxrQkFDSSxlQUFnQixDQUNoQixnQkFBaUIsQ0FDakIsMkJBQTRCLENBQzVCLGFBQWMsQ0FDZCxrQ0FBbUMsQ0FDbkMsV0FBWSxDQUNaLGlCQUFrQixDQUNsQixzQ0FBdUMsQ0FFdkMseUNBQTZDLENBQzdDLGlCQUFrQixDQUVsQixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLHNCQUF1QixDQWYzQiwrQkFrQlEsVUFBeUIsQ0FDekIsY0FBZSxDQUNmLDhDQUFrRCxDQUNsRCxpQkFBa0IsQ0FyQjFCLDBDQXdCUSxpQkFBa0IsQ0FDbEIsT0FBUSxDQUNSLFNBQVUsQ0FDVixZQUFhLENBM0JyQiw0Q0E2Qlksd0NBQTRDLENBQzVDLHlCQUEwQixDQUMxQixpQ0FBa0MsQ0FFbEMsVUFBeUIsQ0FDekIsaUJBQWtCLENBQ2xCLGNBQWUsQ0FDZixXQUFZLENBQ1osZUFBZ0IsQ0FDaEIsOENBQWtELENBdEM5RCxzQ0EwQ1EsWUFBYSxDQUNiLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULE1BQU8sQ0FDUCxVQUFXLENBQ1gsWUFBYSxDQUNiLHdDQUE0QyxDQUM1QywyQ0FBK0MsQ0FDL0MsNEJBQXdDLENBbkRoRCx3Q0FzRFksY0FBZSxDQUNmLGFBQXNCLENBQ3RCLHNCQUF1QixDQUMxQiwwQkFLTCxHQUNJLGVBQWdCLENBQ2hCLFNBQVUsQ0FFZCxLQUNJLGVBQWdCLENBQ2hCLFNBQVUsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc3R1ZHktZ3JvdXAtdmlldyB7XFxyXFxuICAgIG1pbi13aWR0aDogMjAwcHg7XFxyXFxuICAgIG1pbi1oZWlnaHQ6IDIwMHB4O1xcclxcbiAgICBwYWRkaW5nOiAzMHB4IDIwcHggODBweCAyMHB4O1xcclxcbiAgICBvdmVyZmxvdzogbm9uZTtcXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDEwcHggMTBweCAjMDAwMDAwMGE7XFxyXFxuICAgIG1hcmdpbjogMzBweDtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBhbmltYXRpb246IGZsb2F0LWluLWdyb3VwIDAuM3MgZWFzZS1vdXQ7XFxyXFxuXFxyXFxuICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4xNzMpIDVweCA1cHggMjBweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcblxcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHJcXG4gICAgLmdyb3VwLXRpdGxlIHtcXHJcXG4gICAgICAgIGNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxyXFxuICAgICAgICBmb250LXNpemU6IDMwcHg7XFxyXFxuICAgICAgICB0ZXh0LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjcwNSkgM3B4IDVweCA1cHggMTBweDtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgfVxcclxcbiAgICAuZ3JvdXAtdmlldy1zdWItZGV0YWlscyB7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICB0b3A6IDVweDtcXHJcXG4gICAgICAgIHJpZ2h0OiA1cHg7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgcCB7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjM0OSk7XFxyXFxuICAgICAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDVweCk7XFxyXFxuICAgICAgICAgICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTtcXHJcXG5cXHJcXG4gICAgICAgICAgICBjb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcclxcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDdweDtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDEwcHg7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogM3B4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA1cHg7XFxyXFxuICAgICAgICAgICAgdGV4dC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC43MDUpIDNweCA1cHggNXB4IDEwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG4gICAgLmdyb3VwLXZpZXctZGV0YWlscyB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgYm90dG9tOiAwO1xcclxcbiAgICAgICAgbGVmdDogMDtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45ODIpO1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogLTEwcHggMHB4IDIwcHggcmdiYSgwLCAwLCAwLCAwLjEzOSk7XFxyXFxuICAgICAgICBib3JkZXItdG9wOiByZ2IoMjI3LCAyMjcsIDIyNykgc29saWQgM3B4O1xcclxcblxcclxcbiAgICAgICAgcCB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4O1xcclxcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoODQsIDg0LCA4NCk7XFxyXFxuICAgICAgICAgICAgbWFyZ2luOiAwcHggMTBweCAwIDEwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuQGtleWZyYW1lcyBmbG9hdC1pbi1ncm91cCB7XFxyXFxuICAgIDAlIHtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDUwcHg7XFxyXFxuICAgICAgICBvcGFjaXR5OiAwO1xcclxcbiAgICB9XFxyXFxuICAgIDEwMCUge1xcclxcbiAgICAgICAgbWFyZ2luLXRvcDogMzBweDtcXHJcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmlubGluZXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2JhY2tncm91bmQtY29sb3I6d2hpdGVzbW9rZTtwYWRkaW5nOjEwcHh9LmlubGluZSAjbGVmdHtmbGV4OjUwJX0uaW5saW5lICNyaWdodHtmbGV4OjUwJX0ucGhvdG97YmFja2dyb3VuZC1jb2xvcjp3aGl0ZXNtb2tlfS5waG90byBpbWd7d2lkdGg6OTBweDt0ZXh0LWFsaWduOmxlZnR9aW5wdXRbdHlwZT1cXFwiZmlsZVxcXCJde2JvcmRlcjpub25lO3BhZGRpbmc6MjVweDthcHBlYXJhbmNlOm5vbmV9aW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXXstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTttYXJnaW46MDtib3gtc2hhZG93OjFweCAxcHggMXB4ICNlYmViZWI7Zm9udDppbmhlcml0O2NvbG9yOmN1cnJlbnRDb2xvcjt3aWR0aDoxLjJlbTtoZWlnaHQ6MS4yZW07Ym9yZGVyLXJhZGl1czowLjE1ZW07dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTAuMDc1ZW0pO2Rpc3BsYXk6Z3JpZDtwbGFjZS1jb250ZW50OmNlbnRlcn1pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOjpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjt3aWR0aDowLjY1ZW07aGVpZ2h0OjAuNjVlbTtjbGlwLXBhdGg6cG9seWdvbigxNCUgNDQlLCAwIDY1JSwgNTAlIDEwMCUsIDEwMCUgMTYlLCA4MCUgMCUsIDQzJSA2MiUpO3RyYW5zZm9ybTpzY2FsZSgwKTt0cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbSBsZWZ0O3RyYW5zaXRpb246MTIwbXMgdHJhbnNmb3JtIGVhc2UtaW4tb3V0O2JveC1zaGFkb3c6aW5zZXQgMWVtIDFlbSAjMDI4YTIyO2JhY2tncm91bmQtY29sb3I6Q2FudmFzVGV4dH1pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQ6OmJlZm9yZXt0cmFuc2Zvcm06c2NhbGUoMSl9LmltZ1ByZXZpZXd7d2lkdGg6MTAwJTtwYWRkaW5nOjIwcHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0FjY291bnRTZXR1cEZvcm0vQWNjb3VudFNldHVwRm9ybS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFFBQ0ksWUFBYSxDQUNiLGtCQUFtQixDQUNuQiwyQkFBNEIsQ0FDNUIsWUFBYSxDQUpqQixjQU1RLFFBQVMsQ0FOakIsZUFTUSxRQUFTLENBQ1osT0FJRCwyQkFBNEIsQ0FEaEMsV0FHUSxVQUFXLENBQ1gsZUFBZ0IsQ0FDbkIsbUJBSUQsV0FBWSxDQUNaLFlBQWEsQ0FDYixlQUFnQixDQUNuQix1QkFJRyx1QkFBd0IsQ0FFeEIsZUFBZ0IsQ0FFaEIsc0JBQXVCLENBRXZCLFFBQVMsQ0FDVCw4QkFBMEMsQ0FFMUMsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixXQUFZLENBQ1osWUFBYSxDQUNiLG9CQUFxQixDQUNyQiw4QkFBK0IsQ0FFL0IsWUFBYSxDQUNiLG9CQUFxQixDQUN4QiwrQkFHRyxVQUFXLENBQ1gsWUFBYSxDQUNiLGFBQWMsQ0FDZCxzRUFBdUUsQ0FDdkUsa0JBQW1CLENBQ25CLDRCQUE2QixDQUM3QixzQ0FBdUMsQ0FDdkMsZ0NBQXlDLENBRXpDLDJCQUE0QixDQUMvQix1Q0FHRyxrQkFBbUIsQ0FDdEIsWUFHRyxVQUFXLENBQ1gsWUFBYVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaW5saW5lIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTtcXG4gICAgcGFkZGluZzogMTBweDtcXG4gICAgI2xlZnQge1xcbiAgICAgICAgZmxleDogNTAlO1xcbiAgICB9XFxuICAgICNyaWdodCB7XFxuICAgICAgICBmbGV4OiA1MCU7XFxuICAgIH1cXG59XFxuXFxuLnBob3RvIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTtcXG4gICAgaW1nIHtcXG4gICAgICAgIHdpZHRoOiA5MHB4O1xcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG4gICAgfVxcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJmaWxlXFxcIl0ge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDI1cHg7XFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgICAvKiBBZGQgaWYgbm90IHVzaW5nIGF1dG9wcmVmaXhlciAqL1xcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIC8qIFJlbW92ZSBtb3N0IGFsbCBuYXRpdmUgaW5wdXQgc3R5bGVzICovXFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxuICAgIC8qIEZvciBpT1MgPCAxNSAqL1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgLyogTm90IHJlbW92ZWQgdmlhIGFwcGVhcmFuY2UgKi9cXG4gICAgbWFyZ2luOiAwO1xcbiAgICBib3gtc2hhZG93OiAxcHggMXB4IDFweCByZ2IoMjM1LCAyMzUsIDIzNSk7XFxuXFxuICAgIGZvbnQ6IGluaGVyaXQ7XFxuICAgIGNvbG9yOiBjdXJyZW50Q29sb3I7XFxuICAgIHdpZHRoOiAxLjJlbTtcXG4gICAgaGVpZ2h0OiAxLjJlbTtcXG4gICAgYm9yZGVyLXJhZGl1czogMC4xNWVtO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTAuMDc1ZW0pO1xcblxcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBwbGFjZS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06OmJlZm9yZSB7XFxuICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICB3aWR0aDogMC42NWVtO1xcbiAgICBoZWlnaHQ6IDAuNjVlbTtcXG4gICAgY2xpcC1wYXRoOiBwb2x5Z29uKDE0JSA0NCUsIDAgNjUlLCA1MCUgMTAwJSwgMTAwJSAxNiUsIDgwJSAwJSwgNDMlIDYyJSk7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSBsZWZ0O1xcbiAgICB0cmFuc2l0aW9uOiAxMjBtcyB0cmFuc2Zvcm0gZWFzZS1pbi1vdXQ7XFxuICAgIGJveC1zaGFkb3c6IGluc2V0IDFlbSAxZW0gcmdiKDIsIDEzOCwgMzQpO1xcbiAgICAvKiBXaW5kb3dzIEhpZ2ggQ29udHJhc3QgTW9kZSAqL1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBDYW52YXNUZXh0O1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQ6OmJlZm9yZSB7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxufVxcblxcbi5pbWdQcmV2aWV3IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIHBhZGRpbmc6IDIwcHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5jcmVhdGUtc3R1ZHktZ3JvdXAtZm9ybXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnNpZGUtYnktc2lkZXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcn0uc2lkZS1ieS1zaWRlPip7d2lkdGg6MjAwcHg7ZmxleDoxfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVTdHVkeUdyb3VwRm9ybS9DcmVhdGVTdHVkeUdyb3VwRm9ybS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLHlCQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsc0JBQXVCLENBQzFCLGNBRUcsWUFBYSxDQUNiLGtCQUFtQixDQUNuQiw2QkFBOEIsQ0FDOUIsa0JBQW1CLENBSnZCLGdCQU9RLFdBQVksQ0FDWixNQUFPXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jcmVhdGUtc3R1ZHktZ3JvdXAtZm9ybSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG4uc2lkZS1ieS1zaWRlIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcblxcbiAgICA+ICoge1xcbiAgICAgICAgd2lkdGg6IDIwMHB4O1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucG9zdC1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtwYWRkaW5nLWJvdHRvbToxMHB4O21hcmdpbi1ib3R0b206NDVweDtvdmVyZmxvdzp2aXNpYmxlfS5wb3N0LWNvbnRhaW5lciAucG9zdC10b3B7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzdGFydDthbGlnbi1pdGVtczpjZW50ZXI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjMwcHg7bGVmdDozMHB4O3dpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206MjBweH0ucG9zdC1jb250YWluZXIgLnBvc3QtdG9wIGgxe2ZvbnQtc2l6ZToxOHB4O2JhY2tncm91bmQtY29sb3I6YmxhY2s7cGFkZGluZzo1cHg7Y29sb3I6d2hpdGV9LnBvc3QtY29udGFpbmVyIC5wb3N0LXRvcCAudG9wLWljb257Zm9udC1zaXplOjMwcHg7d2lkdGg6MzBweDttYXJnaW4tcmlnaHQ6MTBweH0ucG9zdC1jb250YWluZXIgLnBvc3QtY3JlYXRvcntjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MHB4O3JpZ2h0OjIwcHh9LnBvc3QtY29udGFpbmVyIC5wb3N0LWlubmVye292ZXJmbG93OnZpc2libGV9LnBvc3QtY29udGFpbmVyIC5wb3N0LWlubmVyIC5wb3N0LWRldGFpbHN7cGFkZGluZzoyMHB4O2JveC1zaGFkb3c6MCAwIDAgMXB4IHJnYmEoOTcsOTcsOTcsMC4xKSwwIDNweCAyMHB4IDAgcmdiYSg5Miw5Miw5MiwwLjMpLDAgMXB4IDJweCByZ2JhKDAsMCwwLDAuNSk7cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3c6dmlzaWJsZTtjdXJzb3I6cG9pbnRlcjt3aWR0aDo4NyU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmctdG9wOjgwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsucG9zdC1jb250YWluZXIgLnBvc3QtaW5uZXIgLnBvc3QtZGV0YWlsc3tmbGV4LWRpcmVjdGlvbjpjb2x1bW59fS5wb3N0LWNvbnRhaW5lciAucG9zdC1pbm5lciAucG9zdC1kZXRhaWxzIC5wb3N0LWlubmVyLWNvbnRlbnR7ZmxleDo5MCU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0ucG9zdC1jb250YWluZXIgLnBvc3QtaW5uZXIgLnBvc3QtZGV0YWlscyAucG9zdC1pbm5lci1jb250ZW50IC5wb3N0LXRpdGxle2ZvbnQtc2l6ZTozMHB4O3BhZGRpbmc6MTBweDt0b3A6MzBweDtsZWZ0OjMwcHg7d29yZC13cmFwOmJyZWFrLXdvcmR9LnBvc3QtY29udGFpbmVyIC5wb3N0LWlubmVyIC5wb3N0LWRldGFpbHMgLnBvc3QtaW5uZXItY29udGVudCAucG9zdC1ib2R5e3BhZGRpbmc6NXB4IDEwcHggMTBweCAxMHB4O3dvcmQtd3JhcDpicmVhay13b3JkO2NvbG9yOiMyNjI2MjY7cGFkZGluZy1ib3R0b206MTVweH0ucG9zdC1jb250YWluZXIgLnBvc3QtaW5uZXIgLnBvc3QtZGV0YWlscyBocntoZWlnaHQ6MnB4O21hcmdpbjoxMHB4O2JhY2tncm91bmQtY29sb3I6I2Q0YWE4Y30ucG9zdC1jb250YWluZXIgLnBvc3QtaW5uZXIgLnBvc3QtZGV0YWlscyAuYXR0YWNobWVudHtvYmplY3QtZml0OmNvbnRhaW47bWFyZ2luLXRvcDoxMHB4O3dpZHRoOjEwMCU7bWF4LWhlaWdodDo0MDBweH0ucG9zdC1jb250YWluZXIgLnBvc3QtbWV0YWluZm97cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOi0zNnB4O3JpZ2h0OjglO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6ZW5kO3RleHQtYWxpZ246cmlnaHQ7Y29sb3I6IzQ4NDg0ODtwYWRkaW5nOjIwcHg7cGFkZGluZy1yaWdodDo1MHB4fS5wb3N0LWNvbnRhaW5lciAucG9zdC1tZXRhaW5mbyAucG9zdC1kYXRle3RleHQtYWxpZ246cmlnaHQ7Zm9udC1zaXplOjExcHh9LnBvc3QtY29udGFpbmVyIC5wb3N0LW1ldGFpbmZvIC5wb3N0LXJlc3BvbnNlLWNvdW50e2ZvbnQtc2l6ZToxMXB4O3dpZHRoOjE1ZW07bWFyZ2luLXJpZ2h0OjEwcHg7dGV4dC1hbGlnbjpyaWdodH0ucG9zdC1jb250YWluZXIgLnBvc3QtbWV0YWluZm8gLnBvc3QtcmVzcG9uc2UtY291bnQgc3Bhbntmb250LXdlaWdodDo5MDB9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0ZlZWQvUG9zdC5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2dsb2JhbHMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxnQkFDSSxpQkFBa0IsQ0FDbEIsVUFBVyxDQUNYLG1CQUFvQixDQUNwQixrQkFBbUIsQ0FFbkIsZ0JBQWlCLENBTnJCLDBCQVFRLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsa0JBQW1CLENBQ25CLGlCQUFrQixDQUNsQixRQUFTLENBQ1QsU0FBVSxDQUNWLFVBQVcsQ0FhWCxtQkFBb0IsQ0EzQjVCLDZCQWlCWSxjQUFlLENBQ2Ysc0JBQXVCLENBQ3ZCLFdBQVksQ0FDWixXQUFZLENBcEJ4QixvQ0F1QlksY0FBZSxDQUNmLFVBQVcsQ0FDWCxpQkFBa0IsQ0F6QjlCLDhCQStCUSxjQUFlLENBQ2YsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxVQUFXLENBbENuQiw0QkFxQ1EsZ0JBQWlCLENBckN6QiwwQ0F1Q1ksWUFBYSxDQUNiLGlHQUNnQyxDQUdoQyxpQkFBa0IsQ0FDbEIsZ0JBQWlCLENBQ2pCLGNBQWUsQ0FFZixTQUFVLENBRVYsWUFBYSxDQUNiLHFCQUFzQixDQUN0QixzQkFBdUIsQ0FDdkIsZ0JBQWlCLENBc0NwQiwwQkEzRlQsMENBd0RnQixxQkFBc0IsQ0FtQzdCLENBM0ZULDhEQTREZ0IsUUFBUyxDQWdCVCxZQUFhLENBQ2IscUJBQXNCLENBN0V0QywwRUE4RG9CLGNBQWUsQ0FDZixZQUFhLENBQ2IsUUFBUyxDQUNULFNBQVUsQ0FDVixvQkFBcUIsQ0FsRXpDLHlFQXFFb0IsMEJBQTJCLENBRTNCLG9CQUFxQixDQUNyQixhQUFzQixDQUV0QixtQkFBb0IsQ0ExRXhDLDZDQWlGZ0IsVUFBVyxDQUNYLFdBQVksQ0FDWix3QkNoRk0sQ0RIdEIsc0RBc0ZnQixrQkFBbUIsQ0FDbkIsZUFBZ0IsQ0FDaEIsVUFBVyxDQUNYLGdCQUFpQixDQXpGakMsK0JBOEZRLGlCQUFrQixDQUNsQixZQUFhLENBQ2IsUUFBUyxDQUNULFlBQWEsQ0FDYixtQkFBb0IsQ0FFcEIsZ0JBQWlCLENBRWpCLGFBQXNCLENBQ3RCLFlBQWEsQ0FDYixrQkFBbUIsQ0F4RzNCLDBDQTJHWSxnQkFBaUIsQ0FDakIsY0FBZSxDQTVHM0Isb0RBZ0hZLGNBQWUsQ0FDZixVQUFXLENBQ1gsaUJBQWtCLENBQ2xCLGdCQUFpQixDQW5IN0IseURBc0hnQixlQUFnQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcclxcbi5wb3N0LWNvbnRhaW5lciB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiA0NXB4O1xcclxcblxcclxcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG4gICAgLnBvc3QtdG9wIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHRvcDogMzBweDtcXHJcXG4gICAgICAgIGxlZnQ6IDMwcHg7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gICAgICAgIGgxIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE4cHg7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogNXB4O1xcclxcbiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC50b3AtaWNvbiB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5wb3N0LWNyZWF0b3Ige1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgYm90dG9tOiAwcHg7XFxyXFxuICAgICAgICByaWdodDogMjBweDtcXHJcXG4gICAgfVxcclxcbiAgICAucG9zdC1pbm5lciB7XFxyXFxuICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG4gICAgICAgIC5wb3N0LWRldGFpbHMge1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgICAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMXB4IHJnYmEoOTcsIDk3LCA5NywgMC4xKSwgMCAzcHggMjBweCAwIHJnYmEoOTIsIDkyLCA5MiwgMC4zKSxcXHJcXG4gICAgICAgICAgICAgICAgMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC41KTtcXHJcXG5cXHJcXG4gICAgICAgICAgICAvLyBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHJcXG4gICAgICAgICAgICB3aWR0aDogODclO1xcclxcblxcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogODBweDtcXHJcXG5cXHJcXG4gICAgICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcclxcbiAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAucG9zdC1pbm5lci1jb250ZW50IHtcXHJcXG4gICAgICAgICAgICAgICAgZmxleDogOTAlO1xcclxcbiAgICAgICAgICAgICAgICAucG9zdC10aXRsZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDMwcHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAzMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMzBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAucG9zdC1ib2R5IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4IDEwcHggMTBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpZHRoOiA5MHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkO1xcclxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHJnYigzOCwgMzgsIDM4KTtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxNXB4O1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgIGhyIHtcXHJcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAycHg7XFxyXFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMTBweDtcXHJcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJvcmRlci1jb2xvcjtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgLmF0dGFjaG1lbnQge1xcclxcbiAgICAgICAgICAgICAgICBvYmplY3QtZml0OiBjb250YWluO1xcclxcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgICAgICAgICAgbWF4LWhlaWdodDogNDAwcHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIC5wb3N0LW1ldGFpbmZvIHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIGJvdHRvbTogLTM2cHg7XFxyXFxuICAgICAgICByaWdodDogOCU7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBlbmQ7XFxyXFxuXFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcXHJcXG5cXHJcXG4gICAgICAgIGNvbG9yOiByZ2IoNzIsIDcyLCA3Mik7XFxyXFxuICAgICAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICAgICAgcGFkZGluZy1yaWdodDogNTBweDtcXHJcXG5cXHJcXG4gICAgICAgIC5wb3N0LWRhdGUge1xcclxcbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTFweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5wb3N0LXJlc3BvbnNlLWNvdW50IHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDExcHg7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDE1ZW07XFxyXFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcclxcbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcblxcclxcbiAgICAgICAgICAgIHNwYW4ge1xcclxcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogOTAwO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIixcIiRtYWluLWJhY2tncm91bmQtY29sb3I6ICNmOWY1ZjE7XFxuJHByaW1hcnktYnV0dG9uLWNvbG9yOiAjZDRhYThjO1xcbiRjcmVhdGlvbi1idXR0b24tY29sb3I6ICM3MmJhNzI7XFxuJGRlc3RydWN0aXZlLWJ1dHRvbi1jb2xvcjogIzkzMzIzMjtcXG4kYm9yZGVyLWNvbG9yOiAjZDRhYThjO1xcbiRoaWdobGlnaHQtY29sb3I6ICNmZmRhNWE7XFxuXFxuJG1vYmlsZS13aWR0aDogOTUwcHg7XFxuXFxuQG1peGluIG1vYmlsZSB7XFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiN7JG1vYmlsZS13aWR0aH0pIHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5sb2FkaW5ne3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjUwcHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0xvYWRpbmcvTG9hZGluZy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFNBQ0ksVUFBVyxDQUNYLFdBQVksQ0FDWixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLHNCQUF1QixDQUN2QixlQUFnQixDQUNoQixZQUFhXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5sb2FkaW5nIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIHBhZGRpbmc6IDUwcHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5wcm9maWxlLXBpY3R1cmV7bWF4LXdpZHRoOjUwcHg7bWF4LWhlaWdodDo1MHB4O2JvcmRlci1yYWRpdXM6MjdweDtvYmplY3QtZml0OmNvdmVyO292ZXJmbG93OmhpZGRlbjtib3JkZXI6I2Q0YWE4YyA0cHggc29saWR9LnByb2ZpbGUtcGljdHVyZS1pbml0aWFse2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kOiNmOWY1ZjE7Ym9yZGVyOjRweCBzb2xpZCAjZDRhYThjO2JvcmRlci1yYWRpdXM6MjdweDtkaXNwbGF5OmZsZXg7Zm9udC13ZWlnaHQ6Ym9sZDtoZWlnaHQ6NTBweDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjUwcHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlLnNjc3NcIixcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvZ2xvYmFscy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLGlCQUNJLGNBQWUsQ0FDZixlQUFnQixDQUNoQixrQkFBbUIsQ0FDbkIsZ0JBQWlCLENBQ2pCLGVBQWdCLENBQ2hCLHdCQUErQixDQUNsQyx5QkFFRyxrQkFBbUIsQ0FDbkIsa0JBQThCLENBQzlCLHdCQ1gwQixDRFkxQixrQkFBbUIsQ0FDbkIsWUFBYSxDQUNiLGdCQUFpQixDQUNqQixXQUFZLENBQ1osc0JBQXVCLENBQ3ZCLFVBQVdcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG4ucHJvZmlsZS1waWN0dXJlIHtcXHJcXG4gICAgbWF4LXdpZHRoOiA1MHB4O1xcclxcbiAgICBtYXgtaGVpZ2h0OiA1MHB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAyN3B4O1xcclxcbiAgICBvYmplY3QtZml0OiBjb3ZlcjtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgYm9yZGVyOiAkYm9yZGVyLWNvbG9yIDRweCBzb2xpZDtcXHJcXG59XFxyXFxuLnByb2ZpbGUtcGljdHVyZS1pbml0aWFsIHtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgYmFja2dyb3VuZDogcmdiKDI0OSwgMjQ1LCAyNDEpO1xcclxcbiAgICBib3JkZXI6IDRweCBzb2xpZCAkcHJpbWFyeS1idXR0b24tY29sb3I7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDI3cHg7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICBoZWlnaHQ6IDUwcHg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICB3aWR0aDogNTBweDtcXHJcXG59XFxyXFxuXCIsXCIkbWFpbi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmNWYxO1xcbiRwcmltYXJ5LWJ1dHRvbi1jb2xvcjogI2Q0YWE4YztcXG4kY3JlYXRpb24tYnV0dG9uLWNvbG9yOiAjNzJiYTcyO1xcbiRkZXN0cnVjdGl2ZS1idXR0b24tY29sb3I6ICM5MzMyMzI7XFxuJGJvcmRlci1jb2xvcjogI2Q0YWE4YztcXG4kaGlnaGxpZ2h0LWNvbG9yOiAjZmZkYTVhO1xcblxcbiRtb2JpbGUtd2lkdGg6IDk1MHB4O1xcblxcbkBtaXhpbiBtb2JpbGUge1xcbiAgICBAbWVkaWEgKG1heC13aWR0aDojeyRtb2JpbGUtd2lkdGh9KSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc2VhcmNoLWZvcm17ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxhQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsc0JBQXVCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zZWFyY2gtZm9ybSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubGlzdGluZy1jb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjojZmZmZmZmMjM7Ym94LXNoYWRvdzpyZ2JhKDEyMCwxMjAsMTIwLDAuMjQ5KSAzcHggNXB4IDVweCAxcHg7ZGlzcGxheTpmbGV4O2hlaWdodDo4MHB4O21hcmdpbjo1cHggMTBweCAxMHB4IDEwcHg7Ym9yZGVyLXJhZGl1czoxMHB4O2N1cnNvcjpwb2ludGVyO292ZXJmbG93OmhpZGRlbjthbmltYXRpb246ZmxvYXQtaW4tbGlzdGluZyAwLjNzIGVhc2Utb3V0fS5saXN0aW5nLWNvbnRhaW5lciAudGl0bGUtcGhvdG8tY29udGFpbmVye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Ym9yZGVyLWxlZnQ6I2ZmZmZmZjdjIDVweCBzb2xpZDtib3gtc2hhZG93OnJnYmEoNDgsNDgsNDgsMC4xNTMpIDEwcHggMTBweCAyMHB4O292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjIwcHg7Y29sb3I6d2hpdGU7Zm9udC1zaXplOjEwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsubGlzdGluZy1jb250YWluZXIgLnRpdGxlLXBob3RvLWNvbnRhaW5lcntmb250LXNpemU6OHB4O3dpZHRoOjE1MHB4fX0ubGlzdGluZy1jb250YWluZXIgLmdyb3VwLWluZm8tY29udGFpbmVye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OnNwYWNlLWV2ZW5seTtvdmVyZmxvdzpoaWRkZW59Lmxpc3RpbmctY29udGFpbmVyIC5ncm91cC1pbmZvLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1pdGVte3BhZGRpbmc6NXB4IDE1cHggNXB4IDE1cHg7Ym9yZGVyLWxlZnQ6cmdiYSgxMjUsMTI1LDEyNSwwLjM0NSkgMnB4IHNvbGlkfS5saXN0aW5nLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1jb250YWluZXIgLmdyb3VwLWluZm8taXRlbSBwe2NvbG9yOmdyYXk7Zm9udC1zaXplOjhweH0ubGlzdGluZy1jb250YWluZXIgLmdyb3VwLWluZm8tY29udGFpbmVyIC5ncm91cC1pbmZvLWl0ZW0gaDJ7Zm9udC1zaXplOjE0cHg7d2hpdGUtc3BhY2U6bm93cmFwfS5saXN0aW5nLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1jb250YWluZXIgLmdyb3VwLWluZm8taXRlbSNvd25lci1pbmZve2JvcmRlci1sZWZ0Om5vbmV9Lmxpc3RpbmctY29udGFpbmVyIC5ncm91cC1pbmZvLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1pdGVtI293bmVyLWluZm8gaDJ7d2hpdGUtc3BhY2U6dW5zZXQ7d29yZC13cmFwOmJyZWFrLXdvcmQ7bWF4LXdpZHRoOjEwMHB4fUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7Lmxpc3RpbmctY29udGFpbmVyIC5ncm91cC1pbmZvLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1pdGVtI2NvdXJzZUNvZGUtaW5mb3tkaXNwbGF5Om5vbmV9Lmxpc3RpbmctY29udGFpbmVyIC5ncm91cC1pbmZvLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1pdGVtI3NjaG9vbC1pbmZve2Rpc3BsYXk6bm9uZX0ubGlzdGluZy1jb250YWluZXIgLmdyb3VwLWluZm8tY29udGFpbmVyIC5ncm91cC1pbmZvLWl0ZW0jc2NoZWR1bGUtaW5mb3tkaXNwbGF5Om5vbmV9fUBrZXlmcmFtZXMgZmxvYXQtaW4tbGlzdGluZ3swJXttYXJnaW4tdG9wOjUwcHg7b3BhY2l0eTowfTEwMCV7bWFyZ2luLXRvcDo1cHg7b3BhY2l0eToxfX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoTGlzdGluZy9TZWFyY2hMaXN0aW5nLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsbUJBQ0ksMEJBQTJCLENBQzNCLGtEQUFzRCxDQUN0RCxZQUFhLENBQ2IsV0FBWSxDQUNaLHlCQUEwQixDQUMxQixrQkFBbUIsQ0FDbkIsY0FBZSxDQUNmLGVBQWdCLENBRWhCLHdDQUF5QyxDQVY3QywwQ0FhUSxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLCtCQUFnQyxDQUNoQyw4Q0FBa0QsQ0FDbEQsZUFBZ0IsQ0FDaEIsWUFBYSxDQUNiLFdBQVksQ0FDWixjQUFlLENBTWxCLDBCQTFCTCwwQ0F1QlksYUFBYyxDQUNkLFdBQVksQ0FFbkIsQ0ExQkwseUNBNEJRLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsNEJBQTZCLENBQzdCLGVBQWdCLENBL0J4QiwwREE4RFkseUJBQTBCLENBQzFCLDZDQUFpRCxDQS9EN0QsNERBbUNnQixVQUFXLENBQ1gsYUFBYyxDQXBDOUIsNkRBdUNnQixjQUFlLENBQ2Ysa0JBQW1CLENBeENuQyxxRUFpRGdCLGdCQUFpQixDQWpEakMsd0VBNENvQixpQkFBa0IsQ0FFbEIsb0JBQXFCLENBQ3JCLGVBQWdCLENBQ25CLDBCQWhEakIsMEVBcURvQixZQUFhLENBckRqQyxzRUF3RG9CLFlBQWEsQ0F4RGpDLHdFQTJEb0IsWUFBYSxDQUNoQixDQVFqQiw0QkFDSSxHQUNJLGVBQWdCLENBQ2hCLFNBQVUsQ0FFZCxLQUNJLGNBQWUsQ0FDZixTQUFVLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG5cXG4ubGlzdGluZy1jb250YWluZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmMjM7XFxuICAgIGJveC1zaGFkb3c6IHJnYmEoMTIwLCAxMjAsIDEyMCwgMC4yNDkpIDNweCA1cHggNXB4IDFweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgaGVpZ2h0OiA4MHB4O1xcbiAgICBtYXJnaW46IDVweCAxMHB4IDEwcHggMTBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcblxcbiAgICBhbmltYXRpb246IGZsb2F0LWluLWxpc3RpbmcgMC4zcyBlYXNlLW91dDtcXG5cXG4gICAgLnRpdGxlLXBob3RvLWNvbnRhaW5lciB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGJvcmRlci1sZWZ0OiAjZmZmZmZmN2MgNXB4IHNvbGlkO1xcbiAgICAgICAgYm94LXNoYWRvdzogcmdiYSg0OCwgNDgsIDQ4LCAwLjE1MykgMTBweCAxMHB4IDIwcHg7XFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICAgICAgcGFkZGluZzogMjBweDtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTBweDtcXG5cXG4gICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgZm9udC1zaXplOiA4cHg7XFxuICAgICAgICAgICAgd2lkdGg6IDE1MHB4O1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIC5ncm91cC1pbmZvLWNvbnRhaW5lciB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG5cXG4gICAgICAgIC5ncm91cC1pbmZvLWl0ZW0ge1xcbiAgICAgICAgICAgIHAge1xcbiAgICAgICAgICAgICAgICBjb2xvcjogZ3JheTtcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiA4cHg7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGgyIHtcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAmI293bmVyLWluZm8ge1xcbiAgICAgICAgICAgICAgICBoMiB7XFxuICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogdW5zZXQ7XFxuXFxuICAgICAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxuICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMHB4O1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiBub25lO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgICAgICAgICAmI2NvdXJzZUNvZGUtaW5mbyB7XFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICYjc2Nob29sLWluZm8ge1xcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAmI3NjaGVkdWxlLWluZm8ge1xcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBwYWRkaW5nOiA1cHggMTVweCA1cHggMTVweDtcXG4gICAgICAgICAgICBib3JkZXItbGVmdDogcmdiYSgxMjUsIDEyNSwgMTI1LCAwLjM0NSkgMnB4IHNvbGlkO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblxcbkBrZXlmcmFtZXMgZmxvYXQtaW4tbGlzdGluZyB7XFxuICAgIDAlIHtcXG4gICAgICAgIG1hcmdpbi10b3A6IDUwcHg7XFxuICAgICAgICBvcGFjaXR5OiAwO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgbWFyZ2luLXRvcDogNXB4O1xcbiAgICAgICAgb3BhY2l0eTogMTtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubWVudXtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47cGFkZGluZzoyMHB4O3dpZHRoOjQwMHB4O3RyYW5zaXRpb246YWxsIDAuM3MgY3ViaWMtYmV6aWVyKDAuMDc1LCAwLjgyLCAwLjE2NSwgMSk7Ym9yZGVyLXJhZGl1czo0cHg7cG9pbnRlci1ldmVudHM6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTEwLjVlbTtyaWdodDoyZW07ei1pbmRleDoxMDtib3gtc2hhZG93OjAgMCAwIDFweCByZ2JhKDk3LDk3LDk3LDAuMSksMCAzcHggMjBweCAwIHJnYmEoOTIsOTIsOTIsMC4zKSwwIDFweCAycHggcmdiYSgwLDAsMCwwLjUpfUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7Lm1lbnV7aGVpZ2h0Ojg1JTt3aWR0aDo3MCU7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmZpeGVkO3RvcDo1ZW07cmlnaHQ6LTgwJX19Lm1lbnUuaXNTaG93aW5ne3RvcDo1ZW07cG9pbnRlci1ldmVudHM6YWxsO292ZXJmbG93OnZpc2libGV9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsubWVudS5pc1Nob3dpbmd7Ym9yZGVyLWJvdHRvbTpub25lO2JvcmRlci1sZWZ0OiNkNGFhOGMgNXB4IHNvbGlkO3JpZ2h0OjA7cmlnaHQ6MjBweH19Lm1lbnUgLmxpbmtze2Rpc3BsYXk6bm9uZTtvdmVyZmxvdzp2aXNpYmxlfUBtZWRpYSAobWF4LXdpZHRoOiA5NTBweCl7Lm1lbnUgLmxpbmtze2Rpc3BsYXk6ZmxleDtmbGV4OjUwJTtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm1lbnUgLmxpbmtzIC5uYXYtaXRlbXt0ZXh0LWRlY29yYXRpb246bm9uZTt3aWR0aDoxMDAlO21hcmdpbjoxMHB4O292ZXJmbG93OnZpc2libGU7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5tZW51IC5saW5rcyAubmF2LWl0ZW0gcHtwYWRkaW5nOjIwcHg7aGVpZ2h0OjEwMCU7d2lkdGg6MjAwcHg7Y29sb3I6YmxhY2s7Zm9udC1zaXplOjIwcHg7dHJhbnNpdGlvbjphbGwgMC40czt0ZXh0LWFsaWduOmNlbnRlcn0ubWVudSAubGlua3MgLm5hdi1pdGVtOmFjdGl2ZSBwe2JhY2tncm91bmQtY29sb3I6I2ZmZTU4ZH0ubWVudSAubGlua3MgLm5hdi1pdGVtLmFjdGl2ZSBwe2JhY2tncm91bmQtY29sb3I6I2ZmZGE1YTtwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzp2aXNpYmxlO3RyYW5zaXRpb246YWxsIDAuNHN9Lm1lbnUgLmxpbmtzIC5uYXYtaXRlbS5hY3RpdmU6OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7bGVmdDotMS41ZW07d2lkdGg6MjBweDtoZWlnaHQ6MTAwJTt0b3A6MDtiYWNrZ3JvdW5kLWNvbG9yOiNkNGFhOGM7YW5pbWF0aW9uOnJpc2UgMC4ycyBlYXNlLWluLW91dH19Lm1lbnUgLnVzZXItYWN0aW9uc3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5tZW51IC51c2VyLWFjdGlvbnMgLnVzZXItaW5mb3tkaXNwbGF5Om5vbmV9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsubWVudSAudXNlci1hY3Rpb25zIC51c2VyLWluZm97ZGlzcGxheTpmbGV4O3BhZGRpbmc6MjBweDthbGlnbi1pdGVtczpjZW50ZXJ9Lm1lbnUgLnVzZXItYWN0aW9ucyAudXNlci1pbmZvIC5uYW1lLWFuZC1zY2hvb2x7ZmxleDo4MCV9Lm1lbnUgLnVzZXItYWN0aW9ucyAudXNlci1pbmZvIC5uYW1lLWFuZC1zY2hvb2wgLnNjaG9vbHtmb250LXNpemU6MTRweDtwYWRkaW5nLXJpZ2h0OjEwcHh9Lm1lbnUgLnVzZXItYWN0aW9ucyAudXNlci1pbmZvIC5uYW1lLWFuZC1zY2hvb2wgLm5hbWV7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6ODAwO3BhZGRpbmctcmlnaHQ6MTBweH0ubWVudSAudXNlci1hY3Rpb25zIC51c2VyLWluZm8gLnByb2ZpbGUtcGljLWNvbnRhaW5lcntqdXN0aWZ5LWNvbnRlbnQ6ZW5kfS5tZW51IC51c2VyLWFjdGlvbnMgLnVzZXItaW5mbyAucHJvZmlsZS1waWMtY29udGFpbmVyIGltZ3t3aWR0aDo2MHB4O2hlaWdodDo2MHB4O2JvcmRlci1yYWRpdXM6MzBweH19QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsubWVudSAudXNlci1hY3Rpb25ze2ZsZXg6NTAlO2p1c3RpZnktY29udGVudDplbmR9fS5iYWNrZ3JvdW5kLm1lbnUtYmFja2dyb3VuZHt6LWluZGV4Ojl9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9NZW51LnNjc3NcIixcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvZ2xvYmFscy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLE1BQ0ksc0JBQXVCLENBQ3ZCLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsWUFBYSxDQUNiLFdBQVksQ0FDWix1REFBd0QsQ0FDeEQsaUJBQWtCLENBQ2xCLG1CQUFvQixDQUNwQixpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLFNBQVUsQ0FDVixVQUFXLENBQ1gsaUdBQTZHLENBMkhoSCwwQkF4SUQsTUFnQlEsVUFBVyxDQUNYLFNBQVUsQ0FFVixZQUFhLENBQ2IsY0FBZSxDQUNmLE9BQVEsQ0FDUixVQUFXLENBa0hsQixDQXhJRCxnQkEwQlEsT0FBUSxDQUNSLGtCQUFtQixDQUNuQixnQkFBaUIsQ0FTcEIsMEJBckNMLGdCQStCWSxrQkFBbUIsQ0FDbkIsNkJBQW9DLENBQ3BDLE9BQVEsQ0FFUixVQUFXLENBRWxCLENBckNMLGFBd0NRLFlBQWEsQ0FDYixnQkFBaUIsQ0FvRHBCLDBCQTdGTCxhQTJDWSxZQUFhLENBQ2IsUUFBUyxDQUNULHFCQUFzQixDQUN0QixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBL0NuQyx1QkFrRGdCLG9CQUFxQixDQUNyQixVQUFXLENBRVgsV0FBWSxDQUNaLGdCQUFpQixDQUNqQixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLHNCQUF1QixDQXpEdkMseUJBMkRvQixZQUFhLENBQ2IsV0FBWSxDQUNaLFdBQVksQ0FDWixXQUFZLENBQ1osY0FBZSxDQUNmLG1CQUFvQixDQUNwQixpQkFBa0IsQ0FqRXRDLGdDQXNFd0Isd0JBQWlFLENBdEV6RixnQ0EyRXdCLHdCQ3hFQyxDRHlFRCxpQkFBa0IsQ0FDbEIsZ0JBQWlCLENBQ2pCLG1CQUFvQixDQTlFNUMscUNBaUZ3QixVQUFXLENBQ1gsaUJBQWtCLENBQ2xCLFdBQVksQ0FDWixVQUFXLENBQ1gsV0FBWSxDQUNaLEtBQU0sQ0FDTix3QkNyRkYsQ0RzRkUsK0JBQWdDLENBQ25DLENBekZyQixvQkFnR1EsWUFBYSxDQUNiLHFCQUFzQixDQWpHOUIsK0JBb0dZLFlBQWEsQ0E2QmhCLDBCQWpJVCwrQkFzR2dCLFlBQWEsQ0FDYixZQUFhLENBQ2Isa0JBQW1CLENBeEduQyxnREEyR29CLFFBQVMsQ0EzRzdCLHdEQTZHd0IsY0FBZSxDQUVmLGtCQUFtQixDQS9HM0Msc0RBa0h3QixjQUFlLENBQ2YsZUFBZ0IsQ0FDaEIsa0JBQW1CLENBcEgzQyxzREF5SG9CLG1CQUFvQixDQXpIeEMsMERBMkh3QixVQUFXLENBQ1gsV0FBWSxDQUNaLGtCQUFtQixDQUN0QixDQ3RIakIsMEJEUkosb0JBb0lZLFFBQVMsQ0FDVCxtQkFBb0IsQ0FFM0IsQ0FHTCw0QkFFUSxTQUFVXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuXFxuLm1lbnUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgcGFkZGluZzogMjBweDtcXG4gICAgd2lkdGg6IDQwMHB4O1xcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBjdWJpYy1iZXppZXIoMC4wNzUsIDAuODIsIDAuMTY1LCAxKTtcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IC0xMC41ZW07XFxuICAgIHJpZ2h0OiAyZW07XFxuICAgIHotaW5kZXg6IDEwO1xcbiAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSg5NywgOTcsIDk3LCAwLjEpLCAwIDNweCAyMHB4IDAgcmdiYSg5MiwgOTIsIDkyLCAwLjMpLCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcblxcbiAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgaGVpZ2h0OiA4NSU7XFxuICAgICAgICB3aWR0aDogNzAlO1xcblxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgICAgIHRvcDogNWVtO1xcbiAgICAgICAgcmlnaHQ6IC04MCU7XFxuICAgIH1cXG5cXG4gICAgJi5pc1Nob3dpbmcge1xcbiAgICAgICAgdG9wOiA1ZW07XFxuICAgICAgICBwb2ludGVyLWV2ZW50czogYWxsO1xcbiAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuXFxuICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7XFxuICAgICAgICAgICAgYm9yZGVyLWxlZnQ6ICRib3JkZXItY29sb3IgNXB4IHNvbGlkO1xcbiAgICAgICAgICAgIHJpZ2h0OiAwO1xcblxcbiAgICAgICAgICAgIHJpZ2h0OiAyMHB4O1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5saW5rcyB7XFxuICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgICAgZmxleDogNTAlO1xcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cXG4gICAgICAgICAgICAubmF2LWl0ZW0ge1xcbiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgICAgICAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiB3aGVhdDtcXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAxMHB4O1xcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgICAgICAgICAgIHAge1xcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMjBweDtcXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMDBweDtcXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBibGFjaztcXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjRzO1xcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICY6YWN0aXZlIHtcXG4gICAgICAgICAgICAgICAgICAgIHAge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0ZW4oJGNvbG9yOiAkaGlnaGxpZ2h0LWNvbG9yLCAkYW1vdW50OiAxMCUpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICYuYWN0aXZlIHtcXG4gICAgICAgICAgICAgICAgICAgIHAge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjRzO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgJjo6YWZ0ZXIge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAtMS41ZW07XFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwcHg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYm9yZGVyLWNvbG9yO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogcmlzZSAwLjJzIGVhc2UtaW4tb3V0O1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC51c2VyLWFjdGlvbnMge1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFxuICAgICAgICAudXNlci1pbmZvIHtcXG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICAgICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICAgICAgICAgICAgICAgIC5uYW1lLWFuZC1zY2hvb2wge1xcbiAgICAgICAgICAgICAgICAgICAgZmxleDogODAlO1xcbiAgICAgICAgICAgICAgICAgICAgLnNjaG9vbCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJvcmRlci1yaWdodDogYmxhY2sgMXB4IHNvbGlkO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAubmFtZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA4MDA7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBib3JkZXItcmlnaHQ6IGJsYWNrIDFweCBzb2xpZDtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAucHJvZmlsZS1waWMtY29udGFpbmVyIHtcXG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZW5kO1xcbiAgICAgICAgICAgICAgICAgICAgaW1nIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNjBweDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDYwcHg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMzBweDtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgZmxleDogNTAlO1xcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZW5kO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblxcbi5iYWNrZ3JvdW5kIHtcXG4gICAgJi5tZW51LWJhY2tncm91bmQge1xcbiAgICAgICAgei1pbmRleDogOTtcXG4gICAgfVxcbn1cXG5cIixcIiRtYWluLWJhY2tncm91bmQtY29sb3I6ICNmOWY1ZjE7XFxuJHByaW1hcnktYnV0dG9uLWNvbG9yOiAjZDRhYThjO1xcbiRjcmVhdGlvbi1idXR0b24tY29sb3I6ICM3MmJhNzI7XFxuJGRlc3RydWN0aXZlLWJ1dHRvbi1jb2xvcjogIzkzMzIzMjtcXG4kYm9yZGVyLWNvbG9yOiAjZDRhYThjO1xcbiRoaWdobGlnaHQtY29sb3I6ICNmZmRhNWE7XFxuXFxuJG1vYmlsZS13aWR0aDogOTUwcHg7XFxuXFxuQG1peGluIG1vYmlsZSB7XFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiN7JG1vYmlsZS13aWR0aH0pIHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi50b3AtYmFye2JvcmRlci1ib3R0b206I2Q0YWE4YyA1cHggc29saWQ7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7b3ZlcmZsb3c6dmlzaWJsZTt6LWluZGV4OjIwO2JhY2tncm91bmQtY29sb3I6d2hpdGU7dHJhbnNpdGlvbjphbGwgMC40c30udG9wLWJhciAud3JhcHBlcntwYWRkaW5nOjEwcHggMzBweDtoZWlnaHQ6My43ZW07ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtvdmVyZmxvdy15OmhpZGRlbn0udG9wLWJhciAud3JhcHBlciAubGVmdHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2FsaWduLWl0ZW1zOmNlbnRlcn0udG9wLWJhciAud3JhcHBlciAubGVmdCBoMXtmb250LXNpemU6MjBweDtwYWRkaW5nLXJpZ2h0OjIwcHg7Y29sb3I6YmxhY2t9LnRvcC1iYXIgLndyYXBwZXIgLmxlZnQgLm5hdi1pdGVte21hcmdpbjoyMHB4O3BhZGRpbmc6NXB4IDEwcHggNXB4IDEwcHg7aGVpZ2h0OjEwMCU7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6YmxhY2s7Zm9udC1zaXplOjE1cHg7dHJhbnNpdGlvbjphbGwgMC40c31AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey50b3AtYmFyIC53cmFwcGVyIC5sZWZ0IC5uYXYtaXRlbXtkaXNwbGF5Om5vbmV9fS50b3AtYmFyIC53cmFwcGVyIC5sZWZ0IC5uYXYtaXRlbTphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojZmZlNThkfS50b3AtYmFyIC53cmFwcGVyIC5sZWZ0IC5uYXYtaXRlbS5hY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojZmZkYTVhO3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93OnZpc2libGU7dHJhbnNpdGlvbjphbGwgMC40c30udG9wLWJhciAud3JhcHBlciAubGVmdCAubmF2LWl0ZW0uYWN0aXZlOjphZnRlcntjb250ZW50OlxcXCJcXFwiO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtib3R0b206LTE1cHg7d2lkdGg6MTAwJTtoZWlnaHQ6NHB4O2JhY2tncm91bmQtY29sb3I6I2Q0YWE4YzthbmltYXRpb246cmlzZSAwLjJzIGVhc2UtaW4tb3V0fS50b3AtYmFyIC53cmFwcGVyIC5yaWdodCAudXNlckluZm9Db250YWluZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdzthbGlnbi1pdGVtczpjZW50ZXI7Y3Vyc29yOnBvaW50ZXJ9LnRvcC1iYXIgLndyYXBwZXIgLnJpZ2h0IC51c2VySW5mb0NvbnRhaW5lciAuc2Nob29se2ZvbnQtc2l6ZToxNHB4O2JvcmRlci1yaWdodDpibGFjayAxcHggc29saWQ7cGFkZGluZy1yaWdodDoxMHB4fS50b3AtYmFyIC53cmFwcGVyIC5yaWdodCAudXNlckluZm9Db250YWluZXIgLm5hbWV7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6ODAwO3BhZGRpbmctbGVmdDoxMHB4O3BhZGRpbmctcmlnaHQ6MTBweH1AbWVkaWEgKG1heC13aWR0aDogOTUwcHgpey50b3AtYmFyIC53cmFwcGVyIC5yaWdodCAudXNlckluZm9Db250YWluZXJ7ZGlzcGxheTpub25lfX0udG9wLWJhciAud3JhcHBlciAucmlnaHQgLmhhbWJ1cmdlcnt3aWR0aDoyMHB4O2hlaWdodDoxNXB4O21hcmdpbi1yaWdodDoxMHB4O2Rpc3BsYXk6bm9uZTtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Y3Vyc29yOnBvaW50ZXJ9QG1lZGlhIChtYXgtd2lkdGg6IDk1MHB4KXsudG9wLWJhciAud3JhcHBlciAucmlnaHQgLmhhbWJ1cmdlcntkaXNwbGF5OmZsZXh9fS50b3AtYmFyIC53cmFwcGVyIC5yaWdodCAuaGFtYnVyZ2VyIHNwYW57aGVpZ2h0OjJweDt3aWR0aDoxMDAlO2JhY2tncm91bmQtY29sb3I6YmxhY2s7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0O3RyYW5zaXRpb246MC41cyBhbGwgZWFzZX0udG9wLWJhciAud3JhcHBlciAucmlnaHQgLmhhbWJ1cmdlci5hY3RpdmVIYW1idXJnZXIgc3BhbjpmaXJzdC1jaGlsZHt0cmFuc2Zvcm06cm90YXRlKDQwZGVnKX0udG9wLWJhciAud3JhcHBlciAucmlnaHQgLmhhbWJ1cmdlci5hY3RpdmVIYW1idXJnZXIgc3BhbjpudGgtY2hpbGQoMil7b3BhY2l0eTowfS50b3AtYmFyIC53cmFwcGVyIC5yaWdodCAuaGFtYnVyZ2VyLmFjdGl2ZUhhbWJ1cmdlciBzcGFuOmxhc3QtY2hpbGR7dHJhbnNmb3JtOnJvdGF0ZSgtNDBkZWcpfUBrZXlmcmFtZXMgcmlzZXswJXtib3R0b206LTE3cHh9MTAwJXtib3R0b206LTE1cHh9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyLnNjc3NcIixcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvZ2xvYmFscy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLFNBQ0ksK0JBQXNDLENBRXRDLGNBQWUsQ0FDZixLQUFNLENBQ04sTUFBTyxDQUNQLFVBQVcsQ0FDWCxnQkFBaUIsQ0FDakIsVUFBVyxDQUNYLHNCQUF1QixDQUN2QixtQkFBb0IsQ0FWeEIsa0JBYVEsaUJBQWtCLENBQ2xCLFlBQWEsQ0FFYixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLDZCQUE4QixDQUM5QixpQkFBa0IsQ0FuQjFCLHdCQXNCWSxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLGtCQUFtQixDQXhCL0IsMkJBMEJnQixjQUFlLENBQ2Ysa0JBQW1CLENBQ25CLFdBQVksQ0E1QjVCLGtDQStCZ0IsV0FBWSxDQUNaLHlCQUEwQixDQUMxQixXQUFZLENBQ1osb0JBQXFCLENBQ3JCLFdBQVksQ0FDWixjQUFlLENBQ2YsbUJBQW9CLENBMEJ2QiwwQkEvRGIsa0NBd0NvQixZQUFhLENBdUJwQixDQS9EYix5Q0E0Q29CLHdCQUFpRSxDQTVDckYseUNBK0NvQix3QkM1Q0ssQ0Q2Q0wsaUJBQWtCLENBQ2xCLGdCQUFpQixDQUNqQixtQkFBb0IsQ0FsRHhDLGdEQXFEd0IsVUFBVyxDQUNYLGlCQUFrQixDQUNsQixNQUFPLENBQ1AsWUFBYSxDQUNiLFVBQVcsQ0FDWCxVQUFXLENBQ1gsd0JDekRGLENEMERFLCtCQUFnQyxDQTVEeEQsNENBbUVnQixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLGtCQUFtQixDQUNuQixjQUFlLENBdEUvQixvREF5RW9CLGNBQWUsQ0FDZiw0QkFBNkIsQ0FDN0Isa0JBQW1CLENBM0V2QyxrREE4RW9CLGNBQWUsQ0FDZixlQUFnQixDQUNoQixpQkFBa0IsQ0FDbEIsa0JBQW1CLENBQ3RCLDBCQWxGakIsNENBcUZvQixZQUFhLENBRXBCLENBdkZiLG9DQTBGZ0IsVUFBVyxDQUNYLFdBQVksQ0FDWixpQkFBa0IsQ0FDbEIsWUFBYSxDQU1iLHFCQUFzQixDQUN0Qiw2QkFBOEIsQ0FDOUIsY0FBZSxDQXNCbEIsMEJBM0hiLG9DQWdHb0IsWUFBYSxDQTJCcEIsQ0EzSGIseUNBd0dvQixVQUFXLENBQ1gsVUFBVyxDQUNYLHNCQUF1QixDQUN2QixxQkFBc0IsQ0FDdEIsd0JBQXlCLENBNUc3QyxxRUFpSDRCLHVCQUF3QixDQWpIcEQsc0VBb0g0QixTQUFVLENBcEh0QyxvRUF1SDRCLHdCQUF5QixDQUM1QixnQkFTckIsR0FDSSxZQUFhLENBRWpCLEtBQ0ksWUFBYSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuXFxuLnRvcC1iYXIge1xcbiAgICBib3JkZXItYm90dG9tOiAkYm9yZGVyLWNvbG9yIDVweCBzb2xpZDtcXG5cXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgei1pbmRleDogMjA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC40cztcXG5cXG4gICAgLndyYXBwZXIge1xcbiAgICAgICAgcGFkZGluZzogMTBweCAzMHB4O1xcbiAgICAgICAgaGVpZ2h0OiAzLjdlbTtcXG5cXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xcblxcbiAgICAgICAgLmxlZnQge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICAgIGgxIHtcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcbiAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIC5uYXYtaXRlbSB7XFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMjBweDtcXG4gICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHggNXB4IDEwcHg7XFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7XFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNHM7XFxuXFxuICAgICAgICAgICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICY6YWN0aXZlIHtcXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0ZW4oJGNvbG9yOiAkaGlnaGxpZ2h0LWNvbG9yLCAkYW1vdW50OiAxMCUpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICYuYWN0aXZlIHtcXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjRzO1xcblxcbiAgICAgICAgICAgICAgICAgICAgJjo6YWZ0ZXIge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogLTE1cHg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0cHg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJvcmRlci1jb2xvcjtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246IHJpc2UgMC4ycyBlYXNlLWluLW91dDtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIC5yaWdodCB7XFxuICAgICAgICAgICAgLnVzZXJJbmZvQ29udGFpbmVyIHtcXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgICAgICAgICAgICAgICAuc2Nob29sIHtcXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogYmxhY2sgMXB4IHNvbGlkO1xcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAubmFtZSB7XFxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxuICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogODAwO1xcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAuaGFtYnVyZ2VyIHtcXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwcHg7XFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTVweDtcXG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xcblxcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG5cXG4gICAgICAgICAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDJweDtcXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0O1xcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogMC41cyBhbGwgZWFzZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAmLmFjdGl2ZUhhbWJ1cmdlciB7XFxuICAgICAgICAgICAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAmOmZpcnN0LWNoaWxkIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDBkZWcpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAmOm50aC1jaGlsZCgyKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00MGRlZyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblxcbkBrZXlmcmFtZXMgcmlzZSB7XFxuICAgIDAlIHtcXG4gICAgICAgIGJvdHRvbTogLTE3cHg7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBib3R0b206IC0xNXB4O1xcbiAgICB9XFxufVxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA5NTBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLkZvcm17ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uTGFiZWx7Y29sb3I6I2FjYWNhYztmb250LXNpemU6MTFweDtwYWRkaW5nLWJvdHRvbToxMHB4O2ZvbnQtd2VpZ2h0OjYwMDt0ZXh0LWFsaWduOmNlbnRlcjt3aWR0aDoxMDAlfS5JbnB1dEZpZWxke3BhZGRpbmc6MTBweDttYXJnaW46MTBweDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2JvcmRlcjpub25lO292ZXJmbG93LXg6dmlzaWJsZX0uSW5wdXRGaWVsZCAuTGFiZWx7dGV4dC1hbGlnbjpsZWZ0fS5JbnB1dEZpZWxkIC5JbnB1dHtib3gtc2hhZG93OjBweCA1cHggMTBweCByZ2JhKDEyOCwxMjgsMTI4LDAuMTcxKTtwYWRkaW5nOjEwcHg7Ym9yZGVyOm5vbmU7Ym9yZGVyLWJvdHRvbTpyZ2JhKDIxMSwyMTEsMjExLDAuNTkxKSA4cHggc29saWQ7dHJhbnNpdGlvbi1wcm9wZXJ0eTpib3JkZXItYm90dG9tO3RyYW5zaXRpb24tZHVyYXRpb246MC4ycztib3JkZXItcmFkaXVzOjVweH0uSW5wdXRGaWVsZCAuSW5wdXQ6Zm9jdXN7Ym9yZGVyOm5vbmU7Ym9yZGVyLWJvdHRvbTpyZ2JhKDEzOSw3OSwxMSwwLjYxNikgOHB4IHNvbGlkO291dGxpbmUtd2lkdGg6MH0uSW5wdXRGaWVsZCAuZHJvcGRvd257cGFkZGluZzo1cHggNXB4IDVweCA1cHg7Ym9yZGVyLXJhZGl1czo1cHg7Zm9udC1zaXplOjE2cHg7Ym94LXNoYWRvdzowcHggNXB4IDEwcHggcmdiYSgxMjgsMTI4LDEyOCwwLjE3MSk7Ym9yZGVyOm5vbmU7Ym9yZGVyLWJvdHRvbTpyZ2JhKDIxMSwyMTEsMjExLDAuNTkxKSA4cHggc29saWQ7dHJhbnNpdGlvbi1wcm9wZXJ0eTpib3JkZXItYm90dG9tO2hlaWdodDo0MHB4O2N1cnNvcjpwb2ludGVyO3RyYW5zaXRpb24tZHVyYXRpb246MC4yczstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZTtiYWNrZ3JvdW5kOnVybChcXFwiaHR0cHM6Ly9pY29ucy5kZWFuaXNoZS5uZXQvc3RhdGljL2ljb25zL2ZvbnRhd2Vzb21lLzQ0NDQ0NC9hbmdsZS1kb3duLTI1Ni5wbmdcXFwiKSA5NiUvMTUlIG5vLXJlcGVhdCAjZmZmO2JhY2tncm91bmQtY29sb3I6d2hpdGU7YmFja2dyb3VuZC1zaXplOjIwcHh9LklucHV0RmllbGQgLmRyb3Bkb3duOmZvY3Vze2JvcmRlcjpub25lO2JvcmRlci1ib3R0b206cmdiYSgxMzksNzksMTEsMC42MTYpIDhweCBzb2xpZDtvdXRsaW5lLXdpZHRoOjB9LklucHV0RmllbGQgLmNvbG9yLXBpY2tlcntib3JkZXI6bm9uZTtoZWlnaHQ6NTBweDttaW4td2lkdGg6MjAwcHg7cG9zaXRpb246cmVsYXRpdmV9LklucHV0RmllbGQgLmNvbG9yLXBpY2tlcjo6YWZ0ZXJ7Y29udGVudDpcXFwiKENsaWNrIHRvIENoYW5nZSlcXFwiO3Bvc2l0aW9uOmFic29sdXRlO2NvbG9yOndoaXRlO21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG87dG9wOjMzJTtsZWZ0OjA7cmlnaHQ6MDt0ZXh0LWFsaWduOmNlbnRlcn0uQnV0dG9ue2JveC1zaGFkb3c6MCAycHggNXB4IHJnYmEoMCwwLDAsMC4xKSwwIDFweCAycHggcmdiYSgwLDAsMCwwLjA1KTt0cmFuc2l0aW9uOmFsbCAwLjJzIGVhc2Utb3V0O2JvcmRlci1yYWRpdXM6NXB4O2JvcmRlcjpub25lO2ZvbnQtd2VpZ2h0OjkwMDt0ZXh0LWFsaWduOmNlbnRlcjttaW4taGVpZ2h0OjNlbTttYXgtaGVpZ2h0OjNlbTtmbGV4OjE7cGFkZGluZzowIDIwcHggMCAyMHB4O21hcmdpbjoyMHB4O2N1cnNvcjpwb2ludGVyfS5CdXR0b24uQnV0dG9uRGVzdHJ1Y3RpdmV7YmFja2dyb3VuZC1jb2xvcjojOTMzMjMyO2NvbG9yOndoaXRlfS5CdXR0b24uQnV0dG9uUHJpbWFyeXtiYWNrZ3JvdW5kLWNvbG9yOiNkNGFhOGM7Y29sb3I6d2hpdGV9LkJ1dHRvbi5CdXR0b25DcmVhdGlvbntiYWNrZ3JvdW5kLWNvbG9yOiM3MmJhNzI7Y29sb3I6d2hpdGV9LkJ1dHRvbjphY3RpdmV7Ym94LXNoYWRvdzowIDJweCA1cHggcmdiYSgwLDAsMCwwKSwwIDFweCAycHggcmdiYSgwLDAsMCwwLjA1KTt0cmFuc2Zvcm06c2NhbGUoMC45OCl9LlRvZ2dsZUZpZWxke2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTtib3gtc2hhZG93OjBweCA1cHggMTBweCByZ2JhKDEyOCwxMjgsMTI4LDAuMTcxKTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZzoxMHB4O21hcmdpbjoyMHB4fS5Ub2dnbGVGaWVsZCAuTGFiZWx7dGV4dC1hbGlnbjpsZWZ0O2ZvbnQtc2l6ZToxMnB4O21hcmdpbi10b3A6MTBweH0uVG9nZ2xlRmllbGQgLlRvZ2dsZXtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDo4MHB4O3BhZGRpbmc6MTBweDtoZWlnaHQ6MzRweH0uVG9nZ2xlRmllbGQgLlRvZ2dsZSBpbnB1dHtvcGFjaXR5OjA7d2lkdGg6MDtoZWlnaHQ6MH0uVG9nZ2xlRmllbGQgLnNsaWRlcntwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXItcmFkaXVzOjM0cHg7Y3Vyc29yOnBvaW50ZXI7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7YmFja2dyb3VuZC1jb2xvcjojZThlOGU4Oy13ZWJraXQtdHJhbnNpdGlvbjowLjRzO3RyYW5zaXRpb246MC40c30uVG9nZ2xlRmllbGQgLnNsaWRlcjpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyLXJhZGl1czo1MCU7Y29udGVudDpcXFwiXFxcIjtoZWlnaHQ6MjZweDt3aWR0aDoyNnB4O2xlZnQ6NHB4O2JvdHRvbTo0cHg7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDE0MywyOCwyOCwwLjQ4Mik7LXdlYmtpdC10cmFuc2l0aW9uOjAuNHM7dHJhbnNpdGlvbjowLjRzfS5Ub2dnbGVGaWVsZCBpbnB1dDpjaGVja2VkKy5zbGlkZXI6YmVmb3Jley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjZweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDI2cHgpO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDEyOCwwLDAuNDUyKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyNnB4KX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2NvcmUvY29yZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2dsb2JhbHMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFHQSxNQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDekIsT0FFRyxhQUF5QixDQUN6QixjQUFlLENBQ2YsbUJBQW9CLENBQ3BCLGVBQWdCLENBQ2hCLGlCQUFrQixDQUNsQixVQUFXLENBQ2QsWUFHRyxZQUFhLENBQ2IsV0FBWSxDQUNaLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsV0FBWSxDQUNaLGtCQUFtQixDQU52QixtQkFTUSxlQUFnQixDQVR4QixtQkFZUSwrQ0FBbUQsQ0FDbkQsWUFBYSxDQUNiLFdBQVksQ0FDWiwrQ0FBbUQsQ0FDbkQsaUNBQWtDLENBQ2xDLHdCQUF5QixDQUN6QixpQkFBa0IsQ0FsQjFCLHlCQXFCUSxXQUFZLENBQ1osNkNBQWlELENBQ2pELGVBQWdCLENBdkJ4QixzQkE0QlEsdUJBQXdCLENBQ3hCLGlCQUFrQixDQUVsQixjQUFlLENBQ2YsK0NBQW1ELENBQ25ELFdBQVksQ0FDWiwrQ0FBbUQsQ0FDbkQsaUNBQWtDLENBQ2xDLFdBQVksQ0FFWixjQUFlLENBRWYsd0JBQXlCLENBQ3pCLHVCQUF3QixDQUN4QixvQkFBcUIsQ0FFckIsc0hBQ2dDLENBQ2hDLHNCQUF1QixDQUN2QixvQkFBcUIsQ0EvQzdCLDRCQW1EUSxXQUFZLENBQ1osNkNBQWlELENBQ2pELGVBQWdCLENBckR4QiwwQkF5RFEsV0FBWSxDQUNaLFdBQVksQ0FDWixlQUFnQixDQUNoQixpQkFBa0IsQ0E1RDFCLGlDQThEWSwyQkFBNEIsQ0FDNUIsaUJBQWtCLENBQ2xCLFdBQVksQ0FDWixnQkFBaUIsQ0FDakIsaUJBQWtCLENBQ2xCLE9BQVEsQ0FDUixNQUFPLENBQ1AsT0FBUSxDQUNSLGlCQUFrQixDQUNyQixRQUtMLCtEQUF1RSxDQUV2RSw0QkFBNkIsQ0FFN0IsaUJBQWtCLENBQ2xCLFdBQVksQ0FFWixlQUFnQixDQUNoQixpQkFBa0IsQ0FFbEIsY0FBZSxDQUNmLGNBQWUsQ0FDZixNQUFPLENBQ1AscUJBQXNCLENBRXRCLFdBQVksQ0FDWixjQUFlLENBakJuQiwwQkFvQlEsd0JDNUcwQixDRDZHMUIsV0FBWSxDQXJCcEIsc0JBd0JRLHdCQ2xIc0IsQ0RtSHRCLFdBQVksQ0F6QnBCLHVCQTRCUSx3QkNySHVCLENEc0h2QixXQUFZLENBN0JwQixlQWlDUSw2REFBcUUsQ0FDckUscUJBQXNCLENBQ3pCLGFBS0QsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FDdkIsK0NBQW1ELENBQ25ELDZCQUE4QixDQUM5QixrQkFBbUIsQ0FDbkIsWUFBYSxDQUNiLFdBQVksQ0FSaEIsb0JBVVEsZUFBZ0IsQ0FFaEIsY0FBZSxDQUNmLGVBQWdCLENBYnhCLHFCQWlCUSxpQkFBa0IsQ0FDbEIsb0JBQXFCLENBQ3JCLFVBQVcsQ0FDWCxZQUFhLENBQ2IsV0FBWSxDQXJCcEIsMkJBeUJRLFNBQVUsQ0FDVixPQUFRLENBQ1IsUUFBUyxDQTNCakIscUJBK0JRLGlCQUFrQixDQUNsQixrQkFBbUIsQ0FDbkIsY0FBZSxDQUNmLEtBQU0sQ0FDTixNQUFPLENBQ1AsT0FBUSxDQUNSLFFBQVMsQ0FDVCx3QkFBb0MsQ0FDcEMsdUJBQXdCLENBQ3hCLGVBQWdCLENBeEN4Qiw0QkE0Q1EsaUJBQWtCLENBQ2xCLGlCQUFrQixDQUNsQixVQUFXLENBQ1gsV0FBWSxDQUNaLFVBQVcsQ0FDWCxRQUFTLENBQ1QsVUFBVyxDQUNYLHNDQUEwQyxDQUMxQyx1QkFBd0IsQ0FDeEIsZUFBZ0IsQ0FyRHhCLDBDQXdEUSxrQ0FBbUMsQ0FDbkMsOEJBQStCLENBQy9CLG9DQUF3QyxDQUN4QywwQkFBMkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLy9JbnB1dCBGaWVsZFxcbkBpbXBvcnQgXFxcIi4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuXFxuLkZvcm0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG4uTGFiZWwge1xcbiAgICBjb2xvcjogcmdiKDE3MiwgMTcyLCAxNzIpO1xcbiAgICBmb250LXNpemU6IDExcHg7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uSW5wdXRGaWVsZCB7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgIG1hcmdpbjogMTBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBvdmVyZmxvdy14OiB2aXNpYmxlO1xcblxcbiAgICAuTGFiZWwge1xcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG4gICAgfVxcbiAgICAuSW5wdXQge1xcbiAgICAgICAgYm94LXNoYWRvdzogMHB4IDVweCAxMHB4IHJnYmEoMTI4LCAxMjgsIDEyOCwgMC4xNzEpO1xcbiAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IHJnYmEoMjExLCAyMTEsIDIxMSwgMC41OTEpIDhweCBzb2xpZDtcXG4gICAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGJvcmRlci1ib3R0b207XFxuICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjJzO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICB9XFxuICAgIC5JbnB1dDpmb2N1cyB7XFxuICAgICAgICBib3JkZXI6IG5vbmU7XFxuICAgICAgICBib3JkZXItYm90dG9tOiByZ2JhKDEzOSwgNzksIDExLCAwLjYxNikgOHB4IHNvbGlkO1xcbiAgICAgICAgb3V0bGluZS13aWR0aDogMDtcXG4gICAgfVxcblxcbiAgICAvL0Ryb3Bkb3duXFxuICAgIC5kcm9wZG93biB7XFxuICAgICAgICBwYWRkaW5nOiA1cHggNXB4IDVweCA1cHg7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuXFxuICAgICAgICBmb250LXNpemU6IDE2cHg7XFxuICAgICAgICBib3gtc2hhZG93OiAwcHggNXB4IDEwcHggcmdiYSgxMjgsIDEyOCwgMTI4LCAwLjE3MSk7XFxuICAgICAgICBib3JkZXI6IG5vbmU7XFxuICAgICAgICBib3JkZXItYm90dG9tOiByZ2JhKDIxMSwgMjExLCAyMTEsIDAuNTkxKSA4cHggc29saWQ7XFxuICAgICAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiBib3JkZXItYm90dG9tO1xcbiAgICAgICAgaGVpZ2h0OiA0MHB4O1xcblxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4ycztcXG4gICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgICAgIC8vIGFwcGVhcmFuY2U6IG5vbmU7XFxuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXFxcImh0dHBzOi8vaWNvbnMuZGVhbmlzaGUubmV0L3N0YXRpYy9pY29ucy9mb250YXdlc29tZS80NDQ0NDQvYW5nbGUtZG93bi0yNTYucG5nXFxcIikgOTYlIC8gMTUlXFxuICAgICAgICAgICAgbm8tcmVwZWF0IHJnYigyNTUsIDI1NSwgMjU1KTtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiAyMHB4O1xcbiAgICB9XFxuXFxuICAgIC5kcm9wZG93bjpmb2N1cyB7XFxuICAgICAgICBib3JkZXI6IG5vbmU7XFxuICAgICAgICBib3JkZXItYm90dG9tOiByZ2JhKDEzOSwgNzksIDExLCAwLjYxNikgOHB4IHNvbGlkO1xcbiAgICAgICAgb3V0bGluZS13aWR0aDogMDtcXG4gICAgfVxcblxcbiAgICAuY29sb3ItcGlja2VyIHtcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICAgIGhlaWdodDogNTBweDtcXG4gICAgICAgIG1pbi13aWR0aDogMjAwcHg7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICAmOjphZnRlciB7XFxuICAgICAgICAgICAgY29udGVudDogXFxcIihDbGljayB0byBDaGFuZ2UpXFxcIjtcXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcXG4gICAgICAgICAgICB0b3A6IDMzJTtcXG4gICAgICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgICAgIHJpZ2h0OiAwO1xcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cXG4uQnV0dG9uIHtcXG4gICAgYm94LXNoYWRvdzogMCAycHggNXB4IHJnYmEoMCwgMCwgMCwgMC4xKSwgMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4wNSk7XFxuXFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2Utb3V0O1xcblxcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG5cXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcblxcbiAgICBtaW4taGVpZ2h0OiAzZW07XFxuICAgIG1heC1oZWlnaHQ6IDNlbTtcXG4gICAgZmxleDogMTtcXG4gICAgcGFkZGluZzogMCAyMHB4IDAgMjBweDtcXG5cXG4gICAgbWFyZ2luOiAyMHB4O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuXFxuICAgICYuQnV0dG9uRGVzdHJ1Y3RpdmUge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGRlc3RydWN0aXZlLWJ1dHRvbi1jb2xvcjtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgfVxcbiAgICAmLkJ1dHRvblByaW1hcnkge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnktYnV0dG9uLWNvbG9yO1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxuICAgICYuQnV0dG9uQ3JlYXRpb24ge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgfVxcblxcbiAgICAmOmFjdGl2ZSB7XFxuICAgICAgICBib3gtc2hhZG93OiAwIDJweCA1cHggcmdiYSgwLCAwLCAwLCAwKSwgMCAxcHggMnB4IHJnYmEoMCwgMCwgMCwgMC4wNSk7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTgpO1xcbiAgICB9XFxufVxcblxcbi8vVG9nZ2xlIFN3aXRjaFxcbi5Ub2dnbGVGaWVsZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBib3gtc2hhZG93OiAwcHggNXB4IDEwcHggcmdiYSgxMjgsIDEyOCwgMTI4LCAwLjE3MSk7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMTBweDtcXG4gICAgbWFyZ2luOiAyMHB4O1xcbiAgICAuTGFiZWwge1xcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG4gICAgICAgIC8vIHdpZHRoOiA5MHB4O1xcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xcbiAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcXG4gICAgfVxcblxcbiAgICAuVG9nZ2xlIHtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICAgIHdpZHRoOiA4MHB4O1xcbiAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgIGhlaWdodDogMzRweDtcXG4gICAgfVxcblxcbiAgICAuVG9nZ2xlIGlucHV0IHtcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgICB3aWR0aDogMDtcXG4gICAgICAgIGhlaWdodDogMDtcXG4gICAgfVxcblxcbiAgICAuc2xpZGVyIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDM0cHg7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICB0b3A6IDA7XFxuICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgcmlnaHQ6IDA7XFxuICAgICAgICBib3R0b206IDA7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjMyLCAyMzIsIDIzMik7XFxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IDAuNHM7XFxuICAgICAgICB0cmFuc2l0aW9uOiAwLjRzO1xcbiAgICB9XFxuXFxuICAgIC5zbGlkZXI6YmVmb3JlIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgaGVpZ2h0OiAyNnB4O1xcbiAgICAgICAgd2lkdGg6IDI2cHg7XFxuICAgICAgICBsZWZ0OiA0cHg7XFxuICAgICAgICBib3R0b206IDRweDtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTQzLCAyOCwgMjgsIDAuNDgyKTtcXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogMC40cztcXG4gICAgICAgIHRyYW5zaXRpb246IDAuNHM7XFxuICAgIH1cXG4gICAgaW5wdXQ6Y2hlY2tlZCArIC5zbGlkZXI6YmVmb3JlIHtcXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDI2cHgpO1xcbiAgICAgICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWCgyNnB4KTtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMTI4LCAwLCAwLjQ1Mik7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMjZweCk7XFxuICAgIH1cXG59XFxuXCIsXCIkbWFpbi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmNWYxO1xcbiRwcmltYXJ5LWJ1dHRvbi1jb2xvcjogI2Q0YWE4YztcXG4kY3JlYXRpb24tYnV0dG9uLWNvbG9yOiAjNzJiYTcyO1xcbiRkZXN0cnVjdGl2ZS1idXR0b24tY29sb3I6ICM5MzMyMzI7XFxuJGJvcmRlci1jb2xvcjogI2Q0YWE4YztcXG4kaGlnaGxpZ2h0LWNvbG9yOiAjZmZkYTVhO1xcblxcbiRtb2JpbGUtd2lkdGg6IDk1MHB4O1xcblxcbkBtaXhpbiBtb2JpbGUge1xcbiAgICBAbWVkaWEgKG1heC13aWR0aDojeyRtb2JpbGUtd2lkdGh9KSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICpcbiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOlxuICpcbiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qc1xuICovXG5cbnRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xufSBjYXRjaCAoZXJyKSB7XG4gIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3dcbiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlXG4gIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmdcbiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xuICB2YXIgc3RyID0gJyc7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJztcbiAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyO1xufTtcblxuLyoqXG4gKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpe1xuICB2YXIgcXJ5ID0ge307XG4gIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xuICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICB9XG4gIHJldHVybiBxcnk7XG59O1xuIiwiLyoqXG4gKiBQYXJzZXMgYW4gVVJJXG4gKlxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XG5cbnZhciBwYXJ0cyA9IFtcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2V1cmkoc3RyKSB7XG4gICAgdmFyIHNyYyA9IHN0cixcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXG4gICAgICAgIGUgPSBzdHIuaW5kZXhPZignXScpO1xuXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xuICAgIH1cblxuICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpLFxuICAgICAgICB1cmkgPSB7fSxcbiAgICAgICAgaSA9IDE0O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcbiAgICB9XG5cbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XG4gICAgICAgIHVyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xuICAgIH1cblxuICAgIHVyaS5wYXRoTmFtZXMgPSBwYXRoTmFtZXModXJpLCB1cmlbJ3BhdGgnXSk7XG4gICAgdXJpLnF1ZXJ5S2V5ID0gcXVlcnlLZXkodXJpLCB1cmlbJ3F1ZXJ5J10pO1xuXG4gICAgcmV0dXJuIHVyaTtcbn07XG5cbmZ1bmN0aW9uIHBhdGhOYW1lcyhvYmosIHBhdGgpIHtcbiAgICB2YXIgcmVneCA9IC9cXC97Miw5fS9nLFxuICAgICAgICBuYW1lcyA9IHBhdGgucmVwbGFjZShyZWd4LCBcIi9cIikuc3BsaXQoXCIvXCIpO1xuXG4gICAgaWYgKHBhdGguc3Vic3RyKDAsIDEpID09ICcvJyB8fCBwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuYW1lcy5zcGxpY2UoMCwgMSk7XG4gICAgfVxuICAgIGlmIChwYXRoLnN1YnN0cihwYXRoLmxlbmd0aCAtIDEsIDEpID09ICcvJykge1xuICAgICAgICBuYW1lcy5zcGxpY2UobmFtZXMubGVuZ3RoIC0gMSwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWVzO1xufVxuXG5mdW5jdGlvbiBxdWVyeUtleSh1cmksIHF1ZXJ5KSB7XG4gICAgdmFyIGRhdGEgPSB7fTtcblxuICAgIHF1ZXJ5LnJlcGxhY2UoLyg/Ol58JikoW14mPV0qKT0/KFteJl0qKS9nLCBmdW5jdGlvbiAoJDAsICQxLCAkMikge1xuICAgICAgICBpZiAoJDEpIHtcbiAgICAgICAgICAgIGRhdGFbJDFdID0gJDI7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih5KDIyNykpO3ZhciBiYT1uZXcgU2V0LGNhPXt9O2Z1bmN0aW9uIGRhKGEsYil7ZWEoYSxiKTtlYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZWEoYSxiKXtjYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspYmEuYWRkKGJbYV0pfVxudmFyIGZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxoYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8saWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbmphPXt9LGthPXt9O2Z1bmN0aW9uIGxhKGEpe2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChqYSxhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBrYVthXT0hMDtqYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBtYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBvYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLFxucGEpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcWEoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgcmE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsc2E9NjAxMDMsdGE9NjAxMDYsdWE9NjAxMDcsd2E9NjAxMDgseGE9NjAxMTQseWE9NjAxMDksemE9NjAxMTAsQWE9NjAxMTIsQmE9NjAxMTMsQ2E9NjAxMjAsRGE9NjAxMTUsRWE9NjAxMTYsRmE9NjAxMjEsR2E9NjAxMjgsSGE9NjAxMjksSWE9NjAxMzAsSmE9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgRT1TeW1ib2wuZm9yO3NhPUUoXCJyZWFjdC5lbGVtZW50XCIpO3RhPUUoXCJyZWFjdC5wb3J0YWxcIik7dWE9RShcInJlYWN0LmZyYWdtZW50XCIpO3dhPUUoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTt4YT1FKFwicmVhY3QucHJvZmlsZXJcIik7eWE9RShcInJlYWN0LnByb3ZpZGVyXCIpO3phPUUoXCJyZWFjdC5jb250ZXh0XCIpO0FhPUUoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtCYT1FKFwicmVhY3Quc3VzcGVuc2VcIik7Q2E9RShcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7RGE9RShcInJlYWN0Lm1lbW9cIik7RWE9RShcInJlYWN0LmxhenlcIik7RmE9RShcInJlYWN0LmJsb2NrXCIpO0UoXCJyZWFjdC5zY29wZVwiKTtHYT1FKFwicmVhY3Qub3BhcXVlLmlkXCIpO0hhPUUoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO0lhPUUoXCJyZWFjdC5vZmZzY3JlZW5cIik7SmE9RShcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG52YXIgS2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIExhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1LYSYmYVtLYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgTWE7ZnVuY3Rpb24gTmEoYSl7aWYodm9pZCAwPT09TWEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TWE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK01hK2F9dmFyIE9hPSExO1xuZnVuY3Rpb24gUGEoYSxiKXtpZighYXx8T2EpcmV0dXJuXCJcIjtPYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goayl7dmFyIGQ9a31SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGspe2Q9a31hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGspe2Q9a31hKCl9fWNhdGNoKGspe2lmKGsmJmQmJlwic3RyaW5nXCI9PT10eXBlb2Ygay5zdGFjayl7Zm9yKHZhciBlPWsuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSlyZXR1cm5cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3doaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtPYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP05hKGEpOlwiXCJ9XG5mdW5jdGlvbiBRYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTmEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBOYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTmEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBOYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9UGEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9UGEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDIyOnJldHVybiBhPVBhKGEudHlwZS5fcmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1QYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQmE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgemE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQWE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7XG5yZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIERhOnJldHVybiBSYShhLnR5cGUpO2Nhc2UgRmE6cmV0dXJuIFJhKGEuX3JlbmRlcik7Y2FzZSBFYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUmEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uICRhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcWEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGFiKGEsYil7JGEoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBkYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBlYihhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHkoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih5KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IoeSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIGtiPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5iLG9iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtiLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25iPW5ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW5iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWJbYl09cWJbYV19KX0pO2Z1bmN0aW9uIHNiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxYi5oYXNPd25Qcm9wZXJ0eShhKSYmcWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWI9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZiKGEsYil7aWYoYil7aWYodWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih5KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih5KDYyKSk7fX1cbmZ1bmN0aW9uIHdiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHkoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPUdiLEtiPSExLExiPSExO2Z1bmN0aW9uIE1iKCl7aWYobnVsbCE9PXpifHxudWxsIT09QWIpSWIoKSxGYigpfVxuZnVuY3Rpb24gTmIoYSxiLGMpe2lmKExiKXJldHVybiBhKGIsYyk7TGI9ITA7dHJ5e3JldHVybiBKYihhLGIsYyl9ZmluYWxseXtMYj0hMSxNYigpfX1cbmZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoeSgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBQYj0hMTtpZihmYSl0cnl7dmFyIFFiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShRYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKX1jYXRjaChhKXtQYj0hMX1mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgU2I9ITEsVGI9bnVsbCxVYj0hMSxWYj1udWxsLFdiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe1NiPSEwO1RiPWF9fTtmdW5jdGlvbiBYYihhLGIsYyxkLGUsZixnLGgsayl7U2I9ITE7VGI9bnVsbDtSYi5hcHBseShXYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gWWIoYSxiLGMsZCxlLGYsZyxoLGspe1hiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihTYil7aWYoU2Ipe3ZhciBsPVRiO1NiPSExO1RiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih5KDE5OCkpO1VifHwoVWI9ITAsVmI9bCl9fWZ1bmN0aW9uIFpiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBhYyhhKXtpZihaYihhKSE9PWEpdGhyb3cgRXJyb3IoeSgxODgpKTt9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1aYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBhYyhlKSxhO2lmKGY9PT1kKXJldHVybiBhYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHkoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IoeSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih5KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGNjKGEpe2E9YmMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkYyhhLGIpe2Zvcih2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09Yjspe2lmKGI9PT1hfHxiPT09YylyZXR1cm4hMDtiPWIucmV0dXJufXJldHVybiExfXZhciBlYyxmYyxnYyxoYyxpYz0hMSxqYz1bXSxrYz1udWxsLGxjPW51bGwsbWM9bnVsbCxuYz1uZXcgTWFwLG9jPW5ldyBNYXAscGM9W10scWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gcmMoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsZG9tRXZlbnROYW1lOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDE2LG5hdGl2ZUV2ZW50OmUsdGFyZ2V0Q29udGFpbmVyczpbZF19fWZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6a2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOm1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpuYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpvYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9cmMoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJmZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIGtjPXRjKGtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBsYz10YyhsYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gbWM9dGMobWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtuYy5zZXQoZix0YyhuYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsb2Muc2V0KGYsdGMob2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gdmMoYSl7dmFyIGI9d2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1aYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj0kYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtoYyhhLmxhbmVQcmlvcml0eSxmdW5jdGlvbigpe3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtnYyhjKX0pfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIHhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09YylyZXR1cm4gYj1DYihjKSxudWxsIT09YiYmZmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gemMoYSxiLGMpe3hjKGEpJiZjLmRlbGV0ZShiKX1cbmZ1bmN0aW9uIEFjKCl7Zm9yKGljPSExOzA8amMubGVuZ3RoOyl7dmFyIGE9amNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNiKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmZWMoYSk7YnJlYWt9Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpe2EuYmxvY2tlZE9uPWM7YnJlYWt9Yi5zaGlmdCgpfW51bGw9PT1hLmJsb2NrZWRPbiYmamMuc2hpZnQoKX1udWxsIT09a2MmJnhjKGtjKSYmKGtjPW51bGwpO251bGwhPT1sYyYmeGMobGMpJiYobGM9bnVsbCk7bnVsbCE9PW1jJiZ4YyhtYykmJihtYz1udWxsKTtuYy5mb3JFYWNoKHpjKTtvYy5mb3JFYWNoKHpjKX1cbmZ1bmN0aW9uIEJjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxpY3x8KGljPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEFjKSkpfVxuZnVuY3Rpb24gQ2MoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gQmMoYixhKX1pZigwPGpjLmxlbmd0aCl7QmMoamNbMF0sYSk7Zm9yKHZhciBjPTE7YzxqYy5sZW5ndGg7YysrKXt2YXIgZD1qY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PWtjJiZCYyhrYyxhKTtudWxsIT09bGMmJkJjKGxjLGEpO251bGwhPT1tYyYmQmMobWMsYSk7bmMuZm9yRWFjaChiKTtvYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxwYy5sZW5ndGg7YysrKWQ9cGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHBjLmxlbmd0aCYmKGM9cGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspdmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZwYy5zaGlmdCgpfVxuZnVuY3Rpb24gRGMoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgRWM9e2FuaW1hdGlvbmVuZDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOkRjKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sRmM9e30sR2M9e307XG5mYSYmKEdjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIEVjLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIEVjLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gSGMoYSl7aWYoRmNbYV0pcmV0dXJuIEZjW2FdO2lmKCFFY1thXSlyZXR1cm4gYTt2YXIgYj1FY1thXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBHYylyZXR1cm4gRmNbYV09YltjXTtyZXR1cm4gYX1cbnZhciBJYz1IYyhcImFuaW1hdGlvbmVuZFwiKSxKYz1IYyhcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxLYz1IYyhcImFuaW1hdGlvbnN0YXJ0XCIpLExjPUhjKFwidHJhbnNpdGlvbmVuZFwiKSxNYz1uZXcgTWFwLE5jPW5ldyBNYXAsT2M9W1wiYWJvcnRcIixcImFib3J0XCIsSWMsXCJhbmltYXRpb25FbmRcIixKYyxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLEtjLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFxuXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsTGMsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIFBjKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdO2U9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7TmMuc2V0KGQsYik7TWMuc2V0KGQsZSk7ZGEoZSxbZF0pfX12YXIgUWM9ci51bnN0YWJsZV9ub3c7UWMoKTt2YXIgRj04O1xuZnVuY3Rpb24gUmMoYSl7aWYoMCE9PSgxJmEpKXJldHVybiBGPTE1LDE7aWYoMCE9PSgyJmEpKXJldHVybiBGPTE0LDI7aWYoMCE9PSg0JmEpKXJldHVybiBGPTEzLDQ7dmFyIGI9MjQmYTtpZigwIT09YilyZXR1cm4gRj0xMixiO2lmKDAhPT0oYSYzMikpcmV0dXJuIEY9MTEsMzI7Yj0xOTImYTtpZigwIT09YilyZXR1cm4gRj0xMCxiO2lmKDAhPT0oYSYyNTYpKXJldHVybiBGPTksMjU2O2I9MzU4NCZhO2lmKDAhPT1iKXJldHVybiBGPTgsYjtpZigwIT09KGEmNDA5NikpcmV0dXJuIEY9Nyw0MDk2O2I9NDE4NjExMiZhO2lmKDAhPT1iKXJldHVybiBGPTYsYjtiPTYyOTE0NTYwJmE7aWYoMCE9PWIpcmV0dXJuIEY9NSxiO2lmKGEmNjcxMDg4NjQpcmV0dXJuIEY9NCw2NzEwODg2NDtpZigwIT09KGEmMTM0MjE3NzI4KSlyZXR1cm4gRj0zLDEzNDIxNzcyODtiPTgwNTMwNjM2OCZhO2lmKDAhPT1iKXJldHVybiBGPTIsYjtpZigwIT09KDEwNzM3NDE4MjQmYSkpcmV0dXJuIEY9MSwxMDczNzQxODI0O1xuRj04O3JldHVybiBhfWZ1bmN0aW9uIFNjKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiAxNTtjYXNlIDk4OnJldHVybiAxMDtjYXNlIDk3OmNhc2UgOTY6cmV0dXJuIDg7Y2FzZSA5NTpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX1mdW5jdGlvbiBUYyhhKXtzd2l0Y2goYSl7Y2FzZSAxNTpjYXNlIDE0OnJldHVybiA5OTtjYXNlIDEzOmNhc2UgMTI6Y2FzZSAxMTpjYXNlIDEwOnJldHVybiA5ODtjYXNlIDk6Y2FzZSA4OmNhc2UgNzpjYXNlIDY6Y2FzZSA0OmNhc2UgNTpyZXR1cm4gOTc7Y2FzZSAzOmNhc2UgMjpjYXNlIDE6cmV0dXJuIDk1O2Nhc2UgMDpyZXR1cm4gOTA7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDM1OCxhKSk7fX1cbmZ1bmN0aW9uIFVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIEY9MDt2YXIgZD0wLGU9MCxmPWEuZXhwaXJlZExhbmVzLGc9YS5zdXNwZW5kZWRMYW5lcyxoPWEucGluZ2VkTGFuZXM7aWYoMCE9PWYpZD1mLGU9Rj0xNTtlbHNlIGlmKGY9YyYxMzQyMTc3MjcsMCE9PWYpe3ZhciBrPWYmfmc7MCE9PWs/KGQ9UmMoayksZT1GKTooaCY9ZiwwIT09aCYmKGQ9UmMoaCksZT1GKSl9ZWxzZSBmPWMmfmcsMCE9PWY/KGQ9UmMoZiksZT1GKTowIT09aCYmKGQ9UmMoaCksZT1GKTtpZigwPT09ZClyZXR1cm4gMDtkPTMxLVZjKGQpO2Q9YyYoKDA+ZD8wOjE8PGQpPDwxKS0xO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmcpKXtSYyhiKTtpZihlPD1GKXJldHVybiBiO0Y9ZX1iPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLVZjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gV2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIFhjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTU6cmV0dXJuIDE7Y2FzZSAxNDpyZXR1cm4gMjtjYXNlIDEyOnJldHVybiBhPVljKDI0Jn5iKSwwPT09YT9YYygxMCxiKTphO2Nhc2UgMTA6cmV0dXJuIGE9WWMoMTkyJn5iKSwwPT09YT9YYyg4LGIpOmE7Y2FzZSA4OnJldHVybiBhPVljKDM1ODQmfmIpLDA9PT1hJiYoYT1ZYyg0MTg2MTEyJn5iKSwwPT09YSYmKGE9NTEyKSksYTtjYXNlIDI6cmV0dXJuIGI9WWMoODA1MzA2MzY4Jn5iKSwwPT09YiYmKGI9MjY4NDM1NDU2KSxifXRocm93IEVycm9yKHkoMzU4LGEpKTt9ZnVuY3Rpb24gWWMoYSl7cmV0dXJuIGEmLWF9ZnVuY3Rpb24gWmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7dmFyIGQ9Yi0xO2Euc3VzcGVuZGVkTGFuZXMmPWQ7YS5waW5nZWRMYW5lcyY9ZDthPWEuZXZlbnRUaW1lcztiPTMxLVZjKGIpO2FbYl09Y312YXIgVmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmFkLGJkPU1hdGgubG9nLGNkPU1hdGguTE4yO2Z1bmN0aW9uIGFkKGEpe3JldHVybiAwPT09YT8zMjozMS0oYmQoYSkvY2R8MCl8MH12YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBnZChhLGIsYyxkKXtLYnx8SWIoKTt2YXIgZT1oZCxmPUtiO0tiPSEwO3RyeXtIYihlLGEsYixjLGQpfWZpbmFsbHl7KEtiPWYpfHxNYigpfX1mdW5jdGlvbiBpZChhLGIsYyxkKXtlZChkZCxoZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCl7aWYoZmQpe3ZhciBlO2lmKChlPTA9PT0oYiY0KSkmJjA8amMubGVuZ3RoJiYtMTxxYy5pbmRleE9mKGEpKWE9cmMobnVsbCxhLGIsYyxkKSxqYy5wdXNoKGEpO2Vsc2V7dmFyIGY9eWMoYSxiLGMsZCk7aWYobnVsbD09PWYpZSYmc2MoYSxkKTtlbHNle2lmKGUpe2lmKC0xPHFjLmluZGV4T2YoYSkpe2E9cmMoZixhLGIsYyxkKTtqYy5wdXNoKGEpO3JldHVybn1pZih1YyhmLGEsYixjLGQpKXJldHVybjtzYyhhLGQpfWpkKGEsYixkLG51bGwsYyl9fX19XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT14YihkKTtlPXdjKGUpO2lmKG51bGwhPT1lKXt2YXIgZj1aYihlKTtpZihudWxsPT09ZillPW51bGw7ZWxzZXt2YXIgZz1mLnRhZztpZigxMz09PWcpe2U9JGIoZik7aWYobnVsbCE9PWUpcmV0dXJuIGU7ZT1udWxsfWVsc2UgaWYoMz09PWcpe2lmKGYuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1mLnRhZz9mLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZT1udWxsfWVsc2UgZiE9PWUmJihlPW51bGwpfX1qZChhLGIsZCxlLGMpO3JldHVybiBudWxsfXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtcbmZ1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfW0oYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPW0oe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1tKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1tKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1tKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9bSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPW0oe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9bSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPW0oe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9bSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9bSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPW0oe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPW0oe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1mYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWZhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGZhKXt2YXIgeGU7aWYoZmEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTthPXJlO2lmKEtiKWEoYik7ZWxzZXtLYj0hMDt0cnl7R2IoYSxiKX1maW5hbGx5e0tiPSExLE1iKCl9fX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZSxJZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gSmUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIUllLmNhbGwoYixjW2RdKXx8IUhlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gS2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1LZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZShjKX19ZnVuY3Rpb24gTWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFBlPWZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZPZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZKZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5QYyhcImNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzaW4gZm9jdXMgZm9jdXNvdXQgYmx1ciBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLFxuMCk7UGMoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7UGMoT2MsMik7Zm9yKHZhciBWZT1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksV2U9MDtXZTxWZS5sZW5ndGg7V2UrKylOYy5zZXQoVmVbV2VdLDApO2VhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7XG5lYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2VhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtkYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2RhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZGEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2RhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBYZT1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksWWU9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoWGUpKTtcbmZ1bmN0aW9uIFplKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1liKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a319fWlmKFViKXRocm93IGE9VmIsVWI9ITEsVmI9bnVsbCxhO31cbmZ1bmN0aW9uIEcoYSxiKXt2YXIgYz0kZShiKSxkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoYWYoYixhLDIsITEpLGMuYWRkKGQpKX12YXIgYmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBjZihhKXthW2JmXXx8KGFbYmZdPSEwLGJhLmZvckVhY2goZnVuY3Rpb24oYil7WWUuaGFzKGIpfHxkZihiLCExLGEsbnVsbCk7ZGYoYiwhMCxhLG51bGwpfSkpfVxuZnVuY3Rpb24gZGYoYSxiLGMsZCl7dmFyIGU9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsZj1jO1wic2VsZWN0aW9uY2hhbmdlXCI9PT1hJiY5IT09Yy5ub2RlVHlwZSYmKGY9Yy5vd25lckRvY3VtZW50KTtpZihudWxsIT09ZCYmIWImJlllLmhhcyhhKSl7aWYoXCJzY3JvbGxcIiE9PWEpcmV0dXJuO2V8PTI7Zj1kfXZhciBnPSRlKGYpLGg9YStcIl9fXCIrKGI/XCJjYXB0dXJlXCI6XCJidWJibGVcIik7Zy5oYXMoaCl8fChiJiYoZXw9NCksYWYoZixhLGUsYiksZy5hZGQoaCkpfVxuZnVuY3Rpb24gYWYoYSxiLGMsZCl7dmFyIGU9TmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1lPzI6ZSl7Y2FzZSAwOmU9Z2Q7YnJlYWs7Y2FzZSAxOmU9aWQ7YnJlYWs7ZGVmYXVsdDplPWhkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFQYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBqZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPXdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1OYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9TWMuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLHg9YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6eD1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjp4PVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSBJYzpjYXNlIEpjOmNhc2UgS2M6az1IZDticmVhaztjYXNlIExjOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHc9MCE9PShiJjQpLHo9IXcmJlwic2Nyb2xsXCI9PT1hLHU9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgdD1kLHE7bnVsbCE9PVxudDspe3E9dDt2YXIgdj1xLnN0YXRlTm9kZTs1PT09cS50YWcmJm51bGwhPT12JiYocT12LG51bGwhPT11JiYodj1PYih0LHUpLG51bGwhPXYmJncucHVzaChlZih0LHYscSkpKSk7aWYoeilicmVhazt0PXQucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgseCxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmMD09PShiJjE2KSYmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKHdjKHgpfHx4W2ZmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQseD14P3djKHgpOm51bGwsbnVsbCE9PVxueCYmKHo9WmIoeCkseCE9PXp8fDUhPT14LnRhZyYmNiE9PXgudGFnKSl4PW51bGx9ZWxzZSBrPW51bGwseD1kO2lmKGshPT14KXt3PUJkO3Y9XCJvbk1vdXNlTGVhdmVcIjt1PVwib25Nb3VzZUVudGVyXCI7dD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9VGQsdj1cIm9uUG9pbnRlckxlYXZlXCIsdT1cIm9uUG9pbnRlckVudGVyXCIsdD1cInBvaW50ZXJcIjt6PW51bGw9PWs/aDp1ZShrKTtxPW51bGw9PXg/aDp1ZSh4KTtoPW5ldyB3KHYsdCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PXo7aC5yZWxhdGVkVGFyZ2V0PXE7dj1udWxsO3djKGUpPT09ZCYmKHc9bmV3IHcodSx0K1wiZW50ZXJcIix4LGMsZSksdy50YXJnZXQ9cSx3LnJlbGF0ZWRUYXJnZXQ9eix2PXcpO3o9djtpZihrJiZ4KWI6e3c9azt1PXg7dD0wO2ZvcihxPXc7cTtxPWdmKHEpKXQrKztxPTA7Zm9yKHY9dTt2O3Y9Z2YodikpcSsrO2Zvcig7MDx0LXE7KXc9Z2YodyksdC0tO2Zvcig7MDxxLXQ7KXU9XG5nZih1KSxxLS07Zm9yKDt0LS07KXtpZih3PT09dXx8bnVsbCE9PXUmJnc9PT11LmFsdGVybmF0ZSlicmVhayBiO3c9Z2Yodyk7dT1nZih1KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJmhmKGcsaCxrLHcsITEpO251bGwhPT14JiZudWxsIT09eiYmaGYoZyx6LHgsdywhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgSj12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKUo9RmU7ZWxzZXtKPURlO3ZhciBLPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoSj1FZSk7aWYoSiYmKEo9SihhLGQpKSl7bmUoZyxKLGMsZSk7YnJlYWsgYX1LJiZLKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoSz1oLl93cmFwcGVyU3RhdGUpJiZcbksuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfUs9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoSyl8fFwidHJ1ZVwiPT09Sy5jb250ZW50RWRpdGFibGUpUWU9SyxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyIFE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmllJiYoUT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLEs9b2UoZCxMKSwwPEsubGVuZ3RoJiYoTD1uZXcgTGQoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOkt9KSxRP0wuZGF0YT1ROihRPWhlKGMpLG51bGwhPT1RJiYoTC5kYXRhPVEpKSkpO2lmKFE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9USl9c2UoZyxiKX0pfWZ1bmN0aW9uIGVmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1PYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChlZihhLGYsZSkpLGY9T2IoYSxiKSxudWxsIT1mJiZkLnB1c2goZWYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBnZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gaGYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1PYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChlZihjLGssaCkpKTplfHwoaz1PYihjLGYpLG51bGwhPWsmJmcucHVzaChlZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfWZ1bmN0aW9uIGpmKCl7fXZhciBrZj1udWxsLGxmPW51bGw7ZnVuY3Rpb24gbWYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxwZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcWYoYSl7MT09PWEubm9kZVR5cGU/YS50ZXh0Q29udGVudD1cIlwiOjk9PT1hLm5vZGVUeXBlJiYoYT1hLmJvZHksbnVsbCE9YSYmKGEudGV4dENvbnRlbnQ9XCJcIikpfVxuZnVuY3Rpb24gcmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9ZnVuY3Rpb24gc2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRmPTA7ZnVuY3Rpb24gdWYoYSl7cmV0dXJueyQkdHlwZW9mOkdhLHRvU3RyaW5nOmEsdmFsdWVPZjphfX12YXIgdmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksd2Y9XCJfX3JlYWN0RmliZXIkXCIrdmYseGY9XCJfX3JlYWN0UHJvcHMkXCIrdmYsZmY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK3ZmLHlmPVwiX19yZWFjdEV2ZW50cyRcIit2ZjtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPWFbd2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW2ZmXXx8Y1t3Zl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZihhKTtudWxsIT09YTspe2lmKGM9YVt3Zl0pcmV0dXJuIGM7YT1zZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW3dmXXx8YVtmZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih5KDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW3hmXXx8bnVsbH1cbmZ1bmN0aW9uICRlKGEpe3ZhciBiPWFbeWZdO3ZvaWQgMD09PWImJihiPWFbeWZdPW5ldyBTZXQpO3JldHVybiBifXZhciB6Zj1bXSxBZj0tMTtmdW5jdGlvbiBCZihhKXtyZXR1cm57Y3VycmVudDphfX1mdW5jdGlvbiBIKGEpezA+QWZ8fChhLmN1cnJlbnQ9emZbQWZdLHpmW0FmXT1udWxsLEFmLS0pfWZ1bmN0aW9uIEkoYSxiKXtBZisrO3pmW0FmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LE09QmYoQ2YpLE49QmYoITEpLERmPUNmO1xuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBGZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEdmKCl7SChOKTtIKE0pfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihNLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih5KDE2OCkpO0koTSxiKTtJKE4sYyl9XG5mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHkoMTA4LFJhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBKZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9TS5jdXJyZW50O0koTSxhKTtJKE4sTi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IoeSgxNjkpKTtjPyhhPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoTiksSChNKSxJKE0sYSkpOkgoTik7SShOLGMpfVxudmFyIExmPW51bGwsTWY9bnVsbCxOZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxPZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssUGY9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxRZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFJmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFNmPXIudW5zdGFibGVfbm93LFRmPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsVWY9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxWZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFdmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWGY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxZZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxaZj17fSwkZj12b2lkIDAhPT1SZj9SZjpmdW5jdGlvbigpe30sYWc9bnVsbCxiZz1udWxsLGNnPSExLGRnPVNmKCksTz0xRTQ+ZGc/U2Y6ZnVuY3Rpb24oKXtyZXR1cm4gU2YoKS1kZ307XG5mdW5jdGlvbiBlZygpe3N3aXRjaChUZigpKXtjYXNlIFVmOnJldHVybiA5OTtjYXNlIFZmOnJldHVybiA5ODtjYXNlIFdmOnJldHVybiA5NztjYXNlIFhmOnJldHVybiA5NjtjYXNlIFlmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBmZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gVWY7Y2FzZSA5ODpyZXR1cm4gVmY7Y2FzZSA5NzpyZXR1cm4gV2Y7Y2FzZSA5NjpyZXR1cm4gWGY7Y2FzZSA5NTpyZXR1cm4gWWY7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZ2coYSxiKXthPWZnKGEpO3JldHVybiBOZihhLGIpfWZ1bmN0aW9uIGhnKGEsYixjKXthPWZnKGEpO3JldHVybiBPZihhLGIsYyl9ZnVuY3Rpb24gaWcoKXtpZihudWxsIT09Ymcpe3ZhciBhPWJnO2JnPW51bGw7UGYoYSl9amcoKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWNnJiZudWxsIT09YWcpe2NnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPWFnO2dnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTthZz1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1hZyYmKGFnPWFnLnNsaWNlKGErMSkpLE9mKFVmLGlnKSxjO31maW5hbGx5e2NnPSExfX19dmFyIGtnPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGxnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBtZz1CZihudWxsKSxuZz1udWxsLG9nPW51bGwscGc9bnVsbDtmdW5jdGlvbiBxZygpe3BnPW9nPW5nPW51bGx9XG5mdW5jdGlvbiByZyhhKXt2YXIgYj1tZy5jdXJyZW50O0gobWcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gc2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoKGEuY2hpbGRMYW5lcyZiKT09PWIpaWYobnVsbD09PWN8fChjLmNoaWxkTGFuZXMmYik9PT1iKWJyZWFrO2Vsc2UgYy5jaGlsZExhbmVzfD1iO2Vsc2UgYS5jaGlsZExhbmVzfD1iLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKTthPWEucmV0dXJufX1mdW5jdGlvbiB0ZyhhLGIpe25nPWE7cGc9b2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih1Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB2ZyhhLGIpe2lmKHBnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilwZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09b2cpe2lmKG51bGw9PT1uZyl0aHJvdyBFcnJvcih5KDMwOCkpO29nPWI7bmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBvZz1vZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gQWcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiBCZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXtuPW4udXBkYXRlUXVldWU7dmFyIEE9bi5sYXN0QmFzZVVwZGF0ZTtBIT09ZyYmKG51bGw9PT1BP24uZmlyc3RCYXNlVXBkYXRlPWw6QS5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKX19aWYobnVsbCE9PWYpe0E9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7ZG97aD1mLmxhbmU7dmFyIHA9Zi5ldmVudFRpbWU7aWYoKGQmaCk9PT1oKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6cCxsYW5lOjAsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgQz1hLHg9ZjtoPWI7cD1jO3N3aXRjaCh4LnRhZyl7Y2FzZSAxOkM9eC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDKXtBPUMuY2FsbChwLEEsaCk7YnJlYWsgYX1BPUM7YnJlYWsgYTtjYXNlIDM6Qy5mbGFncz1DLmZsYWdzJi00MDk3fDY0O2Nhc2UgMDpDPXgucGF5bG9hZDtoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDP0MuY2FsbChwLEEsaCk6QztpZihudWxsPT09aHx8dm9pZCAwPT09aClicmVhayBhO0E9bSh7fSxBLGgpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09Zi5jYWxsYmFjayYmKGEuZmxhZ3N8PTMyLGg9ZS5lZmZlY3RzLG51bGw9PT1oP2UuZWZmZWN0cz1bZl06aC5wdXNoKGYpKX1lbHNlIHA9e2V2ZW50VGltZTpwLGxhbmU6aCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49cCxrPUEpOm49bi5uZXh0PXAsZ3w9aDtmPWYubmV4dDtpZihudWxsPT09XG5mKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIGY9aC5uZXh0LGgubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9aCxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPUEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47RGd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1BfX1mdW5jdGlvbiBFZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IoeSgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBGZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEdnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBLZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9aYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUhnKCksZD1JZyhhKSxlPXpnKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9XG5iKTtBZyhhLGUpO0pnKGEsZCxjKX19O2Z1bmN0aW9uIExnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUplKGMsZCl8fCFKZShlLGYpOiEwfVxuZnVuY3Rpb24gTWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dmcoZik6KGU9RmYoYik/RGY6TS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUtnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gT2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1GZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXZnKGYpOihmPUZmKGIpP0RmOk0uY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Q2coYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEdnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLENnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQpfXZhciBQZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHkoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUZnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHkoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHkoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih5KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO31cbmZ1bmN0aW9uIFNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZmxhZ3M9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9VGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3M9MixcbmMpOmQ7Yi5mbGFncz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFncz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuV2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVhnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGM9VmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHRhOnJldHVybiBiPVdnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihQZyhiKXx8TGEoYikpcmV0dXJuIGI9WGcoYixcbmEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtSZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT11YT9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoUGcoYyl8fExhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtSZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09dWE/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoUGcoZCl8fExhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtSZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLHU9Zyx6PWc9MCxxPW51bGw7bnVsbCE9PXUmJno8aC5sZW5ndGg7eisrKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciBuPXAoZSx1LGhbel0sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcseik7bnVsbD09PXQ/bD1uOnQuc2libGluZz1uO3Q9bjt1PXF9aWYoej09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDt6PGgubGVuZ3RoO3orKyl1PUEoZSxoW3pdLGspLG51bGwhPT11JiYoZz1mKHUsZyx6KSxudWxsPT09dD9sPXU6dC5zaWJsaW5nPXUsdD11KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7ejxoLmxlbmd0aDt6KyspcT1DKHUsZSx6LGhbel0sayksbnVsbCE9PXEmJihhJiZudWxsIT09cS5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1xLmtleT96OnEua2V5KSxnPWYocSxnLHopLG51bGw9PT10P2w9cTp0LnNpYmxpbmc9cSx0PXEpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1MYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih5KDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PVxuaCl0aHJvdyBFcnJvcih5KDE1MSkpO2Zvcih2YXIgdD1sPW51bGwsdT1nLHo9Zz0wLHE9bnVsbCxuPWgubmV4dCgpO251bGwhPT11JiYhbi5kb25lO3orKyxuPWgubmV4dCgpKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciB3PXAoZSx1LG4udmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSx1KTtnPWYodyxnLHopO251bGw9PT10P2w9dzp0LnNpYmxpbmc9dzt0PXc7dT1xfWlmKG4uZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUModSxlLHosbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmXG51LmRlbGV0ZShudWxsPT09bi5rZXk/ejpuLmtleSksZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT11YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBzYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXVhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7XG5kPWUoayxmLnByb3BzKTtkLnJlZj1RZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXVhPyhkPVhnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1WZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1RZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9XG5XZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1VZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihQZyhmKSlyZXR1cm4geChhLGQsZixoKTtpZihMYShmKSlyZXR1cm4gdyhhLGQsZixoKTtsJiZSZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAyMjpjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRocm93IEVycm9yKHkoMTUyLFJhKGEudHlwZSl8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFlnPVNnKCEwKSxaZz1TZyghMSksJGc9e30sYWg9QmYoJGcpLGJoPUJmKCRnKSxjaD1CZigkZyk7XG5mdW5jdGlvbiBkaChhKXtpZihhPT09JGcpdGhyb3cgRXJyb3IoeSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBlaChhLGIpe0koY2gsYik7SShiaCxhKTtJKGFoLCRnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1tYihiLGEpfUgoYWgpO0koYWgsYil9ZnVuY3Rpb24gZmgoKXtIKGFoKTtIKGJoKTtIKGNoKX1mdW5jdGlvbiBnaChhKXtkaChjaC5jdXJyZW50KTt2YXIgYj1kaChhaC5jdXJyZW50KTt2YXIgYz1tYihiLGEudHlwZSk7YiE9PWMmJihJKGJoLGEpLEkoYWgsYykpfWZ1bmN0aW9uIGhoKGEpe2JoLmN1cnJlbnQ9PT1hJiYoSChhaCksSChiaCkpfXZhciBQPUJmKDApO1xuZnVuY3Rpb24gaWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgamg9bnVsbCxraD1udWxsLGxoPSExO1xuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1uaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5mbGFncz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gb2goYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBoKGEpe2lmKGxoKXt2YXIgYj1raDtpZihiKXt2YXIgYz1iO2lmKCFvaChhLGIpKXtiPXJmKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhb2goYSxiKSl7YS5mbGFncz1hLmZsYWdzJi0xMDI1fDI7bGg9ITE7amg9YTtyZXR1cm59bWgoamgsYyl9amg9YTtraD1yZihiLmZpcnN0Q2hpbGQpfWVsc2UgYS5mbGFncz1hLmZsYWdzJi0xMDI1fDIsbGg9ITEsamg9YX19ZnVuY3Rpb24gcWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2poPWF9XG5mdW5jdGlvbiByaChhKXtpZihhIT09amgpcmV0dXJuITE7aWYoIWxoKXJldHVybiBxaChhKSxsaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW5mKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1raDtiOyltaChhLGIpLGI9cmYoYi5uZXh0U2libGluZyk7cWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih5KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtraD1yZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWtoPW51bGx9fWVsc2Uga2g9amg/cmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBzaCgpe2toPWpoPW51bGw7bGg9ITF9dmFyIHRoPVtdO2Z1bmN0aW9uIHVoKCl7Zm9yKHZhciBhPTA7YTx0aC5sZW5ndGg7YSsrKXRoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7dGgubGVuZ3RoPTB9dmFyIHZoPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsd2g9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcseGg9MCxSPW51bGwsUz1udWxsLFQ9bnVsbCx5aD0hMSx6aD0hMTtmdW5jdGlvbiBBaCgpe3Rocm93IEVycm9yKHkoMzIxKSk7fWZ1bmN0aW9uIEJoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBDaChhLGIsYyxkLGUsZil7eGg9ZjtSPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDt2aC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP0RoOkVoO2E9YyhkLGUpO2lmKHpoKXtmPTA7ZG97emg9ITE7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih5KDMwMSkpO2YrPTE7VD1TPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO3ZoLmN1cnJlbnQ9Rmg7YT1jKGQsZSl9d2hpbGUoemgpfXZoLmN1cnJlbnQ9R2g7Yj1udWxsIT09UyYmbnVsbCE9PVMubmV4dDt4aD0wO1Q9Uz1SPW51bGw7eWg9ITE7aWYoYil0aHJvdyBFcnJvcih5KDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIEhoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hO3JldHVybiBUfVxuZnVuY3Rpb24gSWgoKXtpZihudWxsPT09Uyl7dmFyIGE9Ui5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Uy5uZXh0O3ZhciBiPW51bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZTpULm5leHQ7aWYobnVsbCE9PWIpVD1iLFM9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHkoMzEwKSk7Uz1hO2E9e21lbW9pemVkU3RhdGU6Uy5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpTLmJhc2VTdGF0ZSxiYXNlUXVldWU6Uy5iYXNlUXVldWUscXVldWU6Uy5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YX1yZXR1cm4gVH1mdW5jdGlvbiBKaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEtoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmxhbmU7aWYoKHhoJmwpPT09bCludWxsIT09aCYmKGg9aC5uZXh0PXtsYW5lOjAsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtlbHNle3ZhciBuPXtsYW5lOmwsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixcbmVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1uLGY9ZCk6aD1oLm5leHQ9bjtSLmxhbmVzfD1sO0RnfD1sfWs9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBMaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1iLl9nZXRWZXJzaW9uO2Q9ZChiLl9zb3VyY2UpO3ZhciBlPWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk7aWYobnVsbCE9PWUpYT1lPT09ZDtlbHNlIGlmKGE9YS5tdXRhYmxlUmVhZExhbmVzLGE9KHhoJmEpPT09YSliLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWQsdGgucHVzaChiKTtpZihhKXJldHVybiBjKGIuX3NvdXJjZSk7dGgucHVzaChiKTt0aHJvdyBFcnJvcih5KDM1MCkpO31cbmZ1bmN0aW9uIE5oKGEsYixjLGQpe3ZhciBlPVU7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IoeSgzNDkpKTt2YXIgZj1iLl9nZXRWZXJzaW9uLGc9ZihiLl9zb3VyY2UpLGg9dmguY3VycmVudCxrPWgudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gTWgoZSxiLGMpfSksbD1rWzFdLG49a1swXTtrPVQ7dmFyIEE9YS5tZW1vaXplZFN0YXRlLHA9QS5yZWZzLEM9cC5nZXRTbmFwc2hvdCx4PUEuc291cmNlO0E9QS5zdWJzY3JpYmU7dmFyIHc9UjthLm1lbW9pemVkU3RhdGU9e3JlZnM6cCxzb3VyY2U6YixzdWJzY3JpYmU6ZH07aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtwLmdldFNuYXBzaG90PWM7cC5zZXRTbmFwc2hvdD1sO3ZhciBhPWYoYi5fc291cmNlKTtpZighSGUoZyxhKSl7YT1jKGIuX3NvdXJjZSk7SGUobixhKXx8KGwoYSksYT1JZyh3KSxlLm11dGFibGVSZWFkTGFuZXN8PWEmZS5wZW5kaW5nTGFuZXMpO2E9ZS5tdXRhYmxlUmVhZExhbmVzO2UuZW50YW5nbGVkTGFuZXN8PWE7Zm9yKHZhciBkPVxuZS5lbnRhbmdsZW1lbnRzLGg9YTswPGg7KXt2YXIgaz0zMS1WYyhoKSx2PTE8PGs7ZFtrXXw9YTtoJj1+dn19fSxbYyxiLGRdKTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3JldHVybiBkKGIuX3NvdXJjZSxmdW5jdGlvbigpe3ZhciBhPXAuZ2V0U25hcHNob3QsYz1wLnNldFNuYXBzaG90O3RyeXtjKGEoYi5fc291cmNlKSk7dmFyIGQ9SWcodyk7ZS5tdXRhYmxlUmVhZExhbmVzfD1kJmUucGVuZGluZ0xhbmVzfWNhdGNoKHEpe2MoZnVuY3Rpb24oKXt0aHJvdyBxO30pfX0pfSxbYixkXSk7SGUoQyxjKSYmSGUoeCxiKSYmSGUoQSxkKXx8KGE9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6bn0sYS5kaXNwYXRjaD1sPU9oLmJpbmQobnVsbCxSLGEpLGsucXVldWU9YSxrLmJhc2VRdWV1ZT1udWxsLG49TWgoZSxiLGMpLGsubWVtb2l6ZWRTdGF0ZT1rLmJhc2VTdGF0ZT1uKTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1JaCgpO3JldHVybiBOaChkLGEsYixjKX1mdW5jdGlvbiBRaChhKXt2YXIgYj1IaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIFJoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVIudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sUi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBTaChhKXt2YXIgYj1IaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfWZ1bmN0aW9uIFRoKCl7cmV0dXJuIEloKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBVaChhLGIsYyxkKXt2YXIgZT1IaCgpO1IuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1JaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1TKXt2YXIgZz1TLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkJoKGQsZy5kZXBzKSl7UmgoYixjLGYsZCk7cmV0dXJufX1SLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIFdoKGEsYil7cmV0dXJuIFVoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDQsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBWaCg0LDIsYSxiKX1mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fVxuZnVuY3Rpb24gJGgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDIsWmguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gYWkoKXt9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIpe3ZhciBjPWVnKCk7Z2coOTg+Yz85ODpjLGZ1bmN0aW9uKCl7YSghMCl9KTtnZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYz13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7YSghMSksYigpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1jfX0pfVxuZnVuY3Rpb24gT2goYSxiLGMpe3ZhciBkPUhnKCksZT1JZyhhKSxmPXtsYW5lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLnBlbmRpbmc7bnVsbD09PWc/Zi5uZXh0PWY6KGYubmV4dD1nLm5leHQsZy5uZXh0PWYpO2IucGVuZGluZz1mO2c9YS5hbHRlcm5hdGU7aWYoYT09PVJ8fG51bGwhPT1nJiZnPT09Uil6aD15aD0hMDtlbHNle2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWd8fDA9PT1nLmxhbmVzKSYmKGc9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1nKSl0cnl7dmFyIGg9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWcoaCxjKTtmLmVhZ2VyUmVkdWNlcj1nO2YuZWFnZXJTdGF0ZT1rO2lmKEhlKGssaCkpcmV0dXJufWNhdGNoKGwpe31maW5hbGx5e31KZyhhLGUsZCl9fVxudmFyIEdoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpBaCx1c2VDb250ZXh0OkFoLHVzZUVmZmVjdDpBaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkFoLHVzZUxheW91dEVmZmVjdDpBaCx1c2VNZW1vOkFoLHVzZVJlZHVjZXI6QWgsdXNlUmVmOkFoLHVzZVN0YXRlOkFoLHVzZURlYnVnVmFsdWU6QWgsdXNlRGVmZXJyZWRWYWx1ZTpBaCx1c2VUcmFuc2l0aW9uOkFoLHVzZU11dGFibGVTb3VyY2U6QWgsdXNlT3BhcXVlSWRlbnRpZmllcjpBaCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LERoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0hoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OldoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBVaCg0LDIsWmguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFVoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9SGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6U2gsdXNlU3RhdGU6UWgsdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVFoKGEpLGM9YlswXSxkPWJbMV07V2goZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO1xud2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVFoKCExKSxiPWFbMF07YT1kaS5iaW5kKG51bGwsYVsxXSk7U2goYSk7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7ZC5tZW1vaXplZFN0YXRlPXtyZWZzOntnZXRTbmFwc2hvdDpiLHNldFNuYXBzaG90Om51bGx9LHNvdXJjZTphLHN1YnNjcmliZTpjfTtyZXR1cm4gTmgoZCxhLGIsYyl9LHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtpZihsaCl7dmFyIGE9ITEsYj11ZihmdW5jdGlvbigpe2F8fChhPSEwLGMoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpKTt0aHJvdyBFcnJvcih5KDM1NSkpO30pLGM9UWgoYilbMV07MD09PShSLm1vZGUmMikmJihSLmZsYWdzfD01MTYsUmgoNSxmdW5jdGlvbigpe2MoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpfSxcbnZvaWQgMCxudWxsKSk7cmV0dXJuIGJ9Yj1cInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KTtRaChiKTtyZXR1cm4gYn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxFaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOktoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBLaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1LaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUtoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBLaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRmg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpMaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9TGgoSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1MaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LGVpPXJhLlJlYWN0Q3VycmVudE93bmVyLHVnPSExO2Z1bmN0aW9uIGZpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmcoYixudWxsLGMsZCk6WWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3RnKGIsZSk7ZD1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWppKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGtpKGEsYixnLGQsZSxmKTthPVZnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09KGUmZikmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6SmUsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gaGkoYSxiLGYpO2IuZmxhZ3N8PTE7YT1UZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGtpKGEsYixjLGQsZSxmKXtpZihudWxsIT09YSYmSmUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKHVnPSExLDAhPT0oZiZlKSkwIT09KGEuZmxhZ3MmMTYzODQpJiYodWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxoaShhLGIsZik7cmV0dXJuIGxpKGEsYixjLGQsZil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZXx8XCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsYyk7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixudWxsIT09Zj9mLmJhc2VMYW5lczpjKTtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmF9LG5pKGIsYSksbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxuaShiLGQpO2ZpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9MTI4fWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9RmYoYyk/RGY6TS5jdXJyZW50O2Y9RWYoYixmKTt0ZyhiLGUpO2M9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlKXtpZihGZihjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE1nKGIsYyxkKSxPZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD12ZyhsKToobD1GZihjKT9EZjpNLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTmcoYixnLGQsbCk7d2c9ITE7dmFyIHA9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cCE9PWt8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoR2coYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxMZyhiLGMsaCxkLHAsayxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmxnKGIudHlwZSxoKTtnLnByb3BzPWw7QT1iLnBlbmRpbmdQcm9wcztwPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXZnKGspOihrPUZmKGMpP0RmOk0uY3VycmVudCxrPUVmKGIsaykpO3ZhciBDPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDfHxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09QXx8cCE9PWspJiZOZyhiLGcsZCxrKTt3Zz0hMTtwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2ghPT1BfHxwIT09eHx8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJihHZyhiLGMsQyxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fExnKGIsYyxsLGQscCx4LGspKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksZD0hMSl9cmV0dXJuIHFpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQsZSxmKXtvaShhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLGhpKGEsYixmKTtkPWIuc3RhdGVOb2RlO2VpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1ZZyhiLG51bGwsaCxmKSk6ZmkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTtlaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgc2k9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeUxhbmU6MH07XG5mdW5jdGlvbiB0aShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnOyhnPTAhPT0oYi5mbGFncyY2NCkpfHwoZz1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2c/KGY9ITAsYi5mbGFncyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZC5mYWxsYmFja3x8ITA9PT1kLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZXw9MSk7SShQLGUmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWQuZmFsbGJhY2smJnBoKGIpO2E9ZC5jaGlsZHJlbjtlPWQuZmFsbGJhY2s7aWYoZilyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxiLm1lbW9pemVkU3RhdGU9c2ksYTtpZihcIm51bWJlclwiPT09dHlwZW9mIGQudW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSlyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxcbmIubWVtb2l6ZWRTdGF0ZT1zaSxiLmxhbmVzPTMzNTU0NDMyLGE7Yz12aSh7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjphfSxiLm1vZGUsYyxudWxsKTtjLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWN9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9Olxue2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9YS5tb2RlLGY9YS5jaGlsZDtiPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Yn07MD09PShlJjIpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9Yik6Zj12aShiLGUsMCxudWxsKTtjPVhnKGMsZSxkLG51bGwpO2YucmV0dXJuPWE7Yy5yZXR1cm49YTtmLnNpYmxpbmc9YzthLmNoaWxkPWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB4aShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9VGcoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMikmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihhLm5leHRFZmZlY3Q9bnVsbCxhLmZsYWdzPTgsYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHdpKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlLGc9YS5jaGlsZDthPWcuc2libGluZzt2YXIgaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYyKSYmYi5jaGlsZCE9PWc/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGc9Yy5sYXN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PWMuZmlyc3RFZmZlY3QsYi5sYXN0RWZmZWN0PWcsZy5uZXh0RWZmZWN0PW51bGwpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGwpOmM9VGcoZyxoKTtudWxsIT09YT9kPVRnKGEsZCk6KGQ9WGcoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aShhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtzZyhhLnJldHVybixiKX1cbmZ1bmN0aW9uIHppKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBBaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2ZpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ5aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl5aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKFAsZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWloKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7emkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXppKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp6aShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0RnfD1iLmxhbmVzO2lmKDAhPT0oYyZiLmNoaWxkTGFuZXMpKXtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IoeSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVRnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9cmV0dXJuIG51bGx9dmFyIEJpLENpLERpLEVpO1xuQmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0NpPWZ1bmN0aW9uKCl7fTtcbkRpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtkaChhaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxlKTtkPWViKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfXZiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09XG5sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fFxuKGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLGMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZHKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhP2sudG9TdHJpbmcoKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsXG5jKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07ZnVuY3Rpb24gRmkoYSxiKXtpZighbGgpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKXJoKGIpP2IuZmxhZ3N8PTQ6ZC5oeWRyYXRlfHwoYi5mbGFnc3w9MjU2KTtDaShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6aGgoYik7dmFyIGU9ZGgoY2guY3VycmVudCk7Yz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKURpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PVxuYi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtyZXR1cm4gbnVsbH1hPWRoKGFoLmN1cnJlbnQpO2lmKHJoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW3dmXT1iO2RbeGZdPWY7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsZCk7RyhcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxYZS5sZW5ndGg7YSsrKUcoWGVbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGQpO0coXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRyhcImludmFsaWRcIixkKX12YihjLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilmLmhhc093blByb3BlcnR5KGcpJiYoZT1mW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBlP2QudGV4dENvbnRlbnQhPT1lJiYoYT1bXCJjaGlsZHJlblwiLGVdKTpcIm51bWJlclwiPT09dHlwZW9mIGUmJmQudGV4dENvbnRlbnQhPT1cIlwiK2UmJihhPVtcImNoaWxkcmVuXCIsXCJcIitlXSk6Y2EuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWUmJlwib25TY3JvbGxcIj09PWcmJkcoXCJzY3JvbGxcIixkKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9XG5qZil9ZD1hO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDthPT09a2IuaHRtbCYmKGE9bGIoYykpO2E9PT1rYi5odG1sP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVt3Zl09YjthW3hmXT1kO0JpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXdiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsYSk7RyhcImNsb3NlXCIsYSk7XG5lPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8WGUubGVuZ3RoO2UrKylHKFhlW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGEpO0coXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9XG5nYihhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dmIoYyxlKTt2YXIgaD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3RiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZvYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZwYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmcGIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihjYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZHKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcWEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtjYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfW1mKGMsZCkmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlFaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtcbmM9ZGgoY2guY3VycmVudCk7ZGgoYWguY3VycmVudCk7cmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFt3Zl09YixkLm5vZGVWYWx1ZSE9PWMmJihiLmZsYWdzfD00KSk6KGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW3dmXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTM6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZyaChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoZCYmIWMmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmMSkpMD09PVYmJihWPTMpO2Vsc2V7aWYoMD09PVZ8fDM9PT1WKVY9XG40O251bGw9PT1VfHwwPT09KERnJjEzNDIxNzcyNykmJjA9PT0oSGkmMTM0MjE3NzI3KXx8SWkoVSxXKX1pZihkfHxjKWIuZmxhZ3N8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLENpKGIpLG51bGw9PT1hJiZjZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMTk6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtmPTAhPT0oYi5mbGFncyY2NCk7Zz1kLnJlbmRlcmluZztpZihudWxsPT09ZylpZihmKUZpKGQsITEpO2Vsc2V7aWYoMCE9PVZ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPWloKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD02NDtGaShkLCExKTtmPWcudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5mbGFnc3w9NCk7XG5udWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTIsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxcbmYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SShQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1kLnRhaWwmJk8oKT5KaSYmKGIuZmxhZ3N8PTY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMil9ZWxzZXtpZighZilpZihhPWloKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD02NCxmPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxGaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhbGgpcmV0dXJuIGI9Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMipPKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+SmkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9XG42NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpO2QuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxkLmxhc3Q9Zyl9cmV0dXJuIG51bGwhPT1kLnRhaWw/KGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPU8oKSxjLnNpYmxpbmc9bnVsbCxiPVAuY3VycmVudCxJKFAsZj9iJjF8MjpiJjEpLGMpOm51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09KG51bGwhPT1iLm1lbW9pemVkU3RhdGUpJiZcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCIhPT1kLm1vZGUmJihiLmZsYWdzfD00KSxudWxsfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gTGkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmYoYS50eXBlKSYmR2YoKTt2YXIgYj1hLmZsYWdzO3JldHVybiBiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2I9YS5mbGFncztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHkoMjg1KSk7YS5mbGFncz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gaGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFApLGI9YS5mbGFncyxiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksbnVsbDtjYXNlIDEwOnJldHVybiByZyhhKSxudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UWEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIE5pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBQaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRaXx8KFFpPSEwLFJpPWQpO05pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe05pKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1UaT9UaT1uZXcgU2V0KFt0aGlzXSk6VGkuYWRkKHRoaXMpLE5pKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfXZhciBVaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtcbmZ1bmN0aW9uIFZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1dpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBYaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5mbGFncyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmxnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpiLmZsYWdzJjI1NiYmcWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gWWkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOmI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve2lmKDM9PT0oYS50YWcmMykpe3ZhciBkPWEuY3JlYXRlO2EuZGVzdHJveT1kKCl9YT1hLm5leHR9d2hpbGUoYSE9PWIpfWI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve3ZhciBlPWE7ZD1lLm5leHQ7ZT1lLnRhZzswIT09KGUmNCkmJjAhPT0oZSYxKSYmKFppKGMsYSksJGkoYyxhKSk7YT1kfXdoaWxlKGEhPT1iKX1yZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7Yy5mbGFncyY0JiYobnVsbD09PWI/YS5jb21wb25lbnREaWRNb3VudCgpOihkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmxnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpLGEuY29tcG9uZW50RGlkVXBkYXRlKGQsXG5iLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSkpKTtiPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkVnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9RWcoYyxiLGEpfXJldHVybjtjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5mbGFncyY0JiZtZihjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJkNjKGMpKSkpO1xucmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMzpjYXNlIDI0OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIGFqKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQ9ZC5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5zZXRQcm9wZXJ0eT9kLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmQuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zYihcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigoMjMhPT1jLnRhZyYmMjQhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8Yz09PWEpJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PVxuYSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJqKGEsYil7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7TWYub25Db21taXRGaWJlclVubW91bnQoTGYsYil9Y2F0Y2goZil7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgYz1hPWEubmV4dDtkb3t2YXIgZD1jLGU9ZC5kZXN0cm95O2Q9ZC50YWc7aWYodm9pZCAwIT09ZSlpZigwIT09KGQmNCkpWmkoYixjKTtlbHNle2Q9Yjt0cnl7ZSgpfWNhdGNoKGYpe1dpKGQsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1hKX1icmVhaztjYXNlIDE6VmkoYik7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe1dpKGIsXG5mKX1icmVhaztjYXNlIDU6VmkoYik7YnJlYWs7Y2FzZSA0OmNqKGEsYil9fWZ1bmN0aW9uIGRqKGEpe2EuYWx0ZXJuYXRlPW51bGw7YS5jaGlsZD1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5yZXR1cm49bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gZWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBmaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihlaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IoeSgxNjApKTt9dmFyIGM9YjtiPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgxNjEpKTt9Yy5mbGFncyYxNiYmKHBiKGIsXCJcIiksYy5mbGFncyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGVqKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZmxhZ3MmMiljb250aW51ZSBiO2lmKG51bGw9PT1cbmMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmZsYWdzJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/Z2ooYSxjLGIpOmhqKGEsYyxiKX1cbmZ1bmN0aW9uIGdqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1qZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihnaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGhqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoaGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOyloaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBjaihhLGIpe2Zvcih2YXIgYz1iLGQ9ITEsZSxmOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih5KDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpe2E6Zm9yKHZhciBnPWEsaD1jLGs9aDs7KWlmKGJqKGcsayksbnVsbCE9PWsuY2hpbGQmJjQhPT1rLnRhZylrLmNoaWxkLnJldHVybj1rLGs9ay5jaGlsZDtlbHNle2lmKGs9PT1oKWJyZWFrIGE7Zm9yKDtudWxsPT09ay5zaWJsaW5nOyl7aWYobnVsbD09PWsucmV0dXJufHxrLnJldHVybj09PWgpYnJlYWsgYTtrPWsucmV0dXJufWsuc2libGluZy5yZXR1cm49ay5yZXR1cm47az1rLnNpYmxpbmd9Zj8oZz1lLGg9Yy5zdGF0ZU5vZGUsXG44PT09Zy5ub2RlVHlwZT9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCk6Zy5yZW1vdmVDaGlsZChoKSk6ZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihiaihhLGMpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGlqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjp2YXIgYz1iLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2RvIDM9PT0oZC50YWcmMykmJihhPWQuZGVzdHJveSxkLmRlc3Ryb3k9dm9pZCAwLHZvaWQgMCE9PWEmJmEoKSksZD1kLm5leHQ7d2hpbGUoZCE9PWMpfXJldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe2Q9Yi5tZW1vaXplZFByb3BzO3ZhciBlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3hmXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiYkYShjLGQpO3diKGEsZSk7Yj13YihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz1cbjIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90YihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BiKGMsaCk6cWEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOmFiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9mYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9XG5iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpjPWIuc3RhdGVOb2RlO2MuaHlkcmF0ZSYmKGMuaHlkcmF0ZT0hMSxDYyhjLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsIT09Yi5tZW1vaXplZFN0YXRlJiYoamo9TygpLGFqKGIuY2hpbGQsITApKTtraihiKTtyZXR1cm47Y2FzZSAxOTpraihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm47Y2FzZSAyMzpjYXNlIDI0OmFqKGIsbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSk7cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IFVpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9bGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBtaihhLGIpe3JldHVybiBudWxsIT09YSYmKGE9YS5tZW1vaXplZFN0YXRlLG51bGw9PT1hfHxudWxsIT09YS5kZWh5ZHJhdGVkKT8oYj1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWImJm51bGw9PT1iLmRlaHlkcmF0ZWQpOiExfXZhciBuaj1NYXRoLmNlaWwsb2o9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixwaj1yYS5SZWFjdEN1cnJlbnRPd25lcixYPTAsVT1udWxsLFk9bnVsbCxXPTAscWo9MCxyaj1CZigwKSxWPTAsc2o9bnVsbCx0aj0wLERnPTAsSGk9MCx1aj0wLHZqPW51bGwsamo9MCxKaT1JbmZpbml0eTtmdW5jdGlvbiB3aigpe0ppPU8oKSs1MDB9dmFyIFo9bnVsbCxRaT0hMSxSaT1udWxsLFRpPW51bGwseGo9ITEseWo9bnVsbCx6aj05MCxBaj1bXSxCaj1bXSxDaj1udWxsLERqPTAsRWo9bnVsbCxGaj0tMSxHaj0wLEhqPTAsSWo9bnVsbCxKaj0hMTtmdW5jdGlvbiBIZygpe3JldHVybiAwIT09KFgmNDgpP08oKTotMSE9PUZqP0ZqOkZqPU8oKX1cbmZ1bmN0aW9uIElnKGEpe2E9YS5tb2RlO2lmKDA9PT0oYSYyKSlyZXR1cm4gMTtpZigwPT09KGEmNCkpcmV0dXJuIDk5PT09ZWcoKT8xOjI7MD09PUdqJiYoR2o9dGopO2lmKDAhPT1rZy50cmFuc2l0aW9uKXswIT09SGomJihIaj1udWxsIT09dmo/dmoucGVuZGluZ0xhbmVzOjApO2E9R2o7dmFyIGI9NDE4NjExMiZ+SGo7YiY9LWI7MD09PWImJihhPTQxODYxMTImfmEsYj1hJi1hLDA9PT1iJiYoYj04MTkyKSk7cmV0dXJuIGJ9YT1lZygpOzAhPT0oWCY0KSYmOTg9PT1hP2E9WGMoMTIsR2opOihhPVNjKGEpLGE9WGMoYSxHaikpO3JldHVybiBhfVxuZnVuY3Rpb24gSmcoYSxiLGMpe2lmKDUwPERqKXRocm93IERqPTAsRWo9bnVsbCxFcnJvcih5KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsPT09YSlyZXR1cm4gbnVsbDskYyhhLGIsYyk7YT09PVUmJihIaXw9Yiw0PT09ViYmSWkoYSxXKSk7dmFyIGQ9ZWcoKTsxPT09Yj8wIT09KFgmOCkmJjA9PT0oWCY0OCk/TGooYSk6KE1qKGEsYyksMD09PVgmJih3aigpLGlnKCkpKTooMD09PShYJjQpfHw5OCE9PWQmJjk5IT09ZHx8KG51bGw9PT1Daj9Daj1uZXcgU2V0KFthXSk6Q2ouYWRkKGEpKSxNaihhLGMpKTt2aj1hfWZ1bmN0aW9uIEtqKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIE1qKGEsYil7Zm9yKHZhciBjPWEuY2FsbGJhY2tOb2RlLGQ9YS5zdXNwZW5kZWRMYW5lcyxlPWEucGluZ2VkTGFuZXMsZj1hLmV4cGlyYXRpb25UaW1lcyxnPWEucGVuZGluZ0xhbmVzOzA8Zzspe3ZhciBoPTMxLVZjKGcpLGs9MTw8aCxsPWZbaF07aWYoLTE9PT1sKXtpZigwPT09KGsmZCl8fDAhPT0oayZlKSl7bD1iO1JjKGspO3ZhciBuPUY7ZltoXT0xMDw9bj9sKzI1MDo2PD1uP2wrNUUzOi0xfX1lbHNlIGw8PWImJihhLmV4cGlyZWRMYW5lc3w9ayk7ZyY9fmt9ZD1VYyhhLGE9PT1VP1c6MCk7Yj1GO2lmKDA9PT1kKW51bGwhPT1jJiYoYyE9PVpmJiZQZihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wKTtlbHNle2lmKG51bGwhPT1jKXtpZihhLmNhbGxiYWNrUHJpb3JpdHk9PT1iKXJldHVybjtjIT09WmYmJlBmKGMpfTE1PT09Yj8oYz1Mai5iaW5kKG51bGwsYSksbnVsbD09PWFnPyhhZz1bY10sYmc9T2YoVWYsamcpKTphZy5wdXNoKGMpLFxuYz1aZik6MTQ9PT1iP2M9aGcoOTksTGouYmluZChudWxsLGEpKTooYz1UYyhiKSxjPWhnKGMsTmouYmluZChudWxsLGEpKSk7YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBOaihhKXtGaj0tMTtIaj1Haj0wO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYj1hLmNhbGxiYWNrTm9kZTtpZihPaigpJiZhLmNhbGxiYWNrTm9kZSE9PWIpcmV0dXJuIG51bGw7dmFyIGM9VWMoYSxhPT09VT9XOjApO2lmKDA9PT1jKXJldHVybiBudWxsO3ZhciBkPWM7dmFyIGU9WDtYfD0xNjt2YXIgZj1QaigpO2lmKFUhPT1hfHxXIT09ZCl3aigpLFFqKGEsZCk7ZG8gdHJ5e1JqKCk7YnJlYWt9Y2F0Y2goaCl7U2ooYSxoKX13aGlsZSgxKTtxZygpO29qLmN1cnJlbnQ9ZjtYPWU7bnVsbCE9PVk/ZD0wOihVPW51bGwsVz0wLGQ9Vik7aWYoMCE9PSh0aiZIaSkpUWooYSwwKTtlbHNlIGlmKDAhPT1kKXsyPT09ZCYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxjPVdjKGEpLDAhPT1jJiYoZD1UaihhLGMpKSk7aWYoMT09PWQpdGhyb3cgYj1zaixRaihhLDApLElpKGEsYyksTWooYSxPKCkpLGI7YS5maW5pc2hlZFdvcms9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1jO3N3aXRjaChkKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHkoMzQ1KSk7Y2FzZSAyOlVqKGEpO2JyZWFrO2Nhc2UgMzpJaShhLGMpO2lmKChjJjYyOTE0NTYwKT09PWMmJihkPWpqKzUwMC1PKCksMTA8ZCkpe2lmKDAhPT1VYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZjKSE9PWMpe0hnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksZCk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA0OklpKGEsYyk7aWYoKGMmNDE4NjExMik9PT1jKWJyZWFrO2Q9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8Yzspe3ZhciBnPTMxLVZjKGMpO2Y9MTw8ZztnPWRbZ107Zz5lJiYoZT1nKTtjJj1+Zn1jPWU7Yz1PKCktYztjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPlxuYz80MzIwOjE5NjAqbmooYy8xOTYwKSktYztpZigxMDxjKXthLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGMpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNTpVaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMzI5KSk7fX1NaihhLE8oKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yj9Oai5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBJaShhLGIpe2ImPX51ajtiJj1+SGk7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1WYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19XG5mdW5jdGlvbiBMaihhKXtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7T2ooKTtpZihhPT09VSYmMCE9PShhLmV4cGlyZWRMYW5lcyZXKSl7dmFyIGI9Vzt2YXIgYz1UaihhLGIpOzAhPT0odGomSGkpJiYoYj1VYyhhLGIpLGM9VGooYSxiKSl9ZWxzZSBiPVVjKGEsMCksYz1UaihhLGIpOzAhPT1hLnRhZyYmMj09PWMmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYj1XYyhhKSwwIT09YiYmKGM9VGooYSxiKSkpO2lmKDE9PT1jKXRocm93IGM9c2osUWooYSwwKSxJaShhLGIpLE1qKGEsTygpKSxjO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7VWooYSk7TWooYSxPKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmooKXtpZihudWxsIT09Q2ope3ZhciBhPUNqO0NqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZXhwaXJlZExhbmVzfD0yNCZhLnBlbmRpbmdMYW5lcztNaihhLE8oKSl9KX1pZygpfWZ1bmN0aW9uIFdqKGEsYil7dmFyIGM9WDtYfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIFhqKGEsYil7dmFyIGM9WDtYJj0tMjtYfD04O3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIG5pKGEsYil7SShyaixxaik7cWp8PWI7dGp8PWJ9ZnVuY3Rpb24gS2koKXtxaj1yai5jdXJyZW50O0gocmopfVxuZnVuY3Rpb24gUWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscGYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmR2YoKTticmVhaztjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTticmVhaztjYXNlIDU6aGgoZCk7YnJlYWs7Y2FzZSA0OmZoKCk7YnJlYWs7Y2FzZSAxMzpIKFApO2JyZWFrO2Nhc2UgMTk6SChQKTticmVhaztjYXNlIDEwOnJnKGQpO2JyZWFrO2Nhc2UgMjM6Y2FzZSAyNDpLaSgpfWM9Yy5yZXR1cm59VT1hO1k9VGcoYS5jdXJyZW50LG51bGwpO1c9cWo9dGo9YjtWPTA7c2o9bnVsbDt1aj1IaT1EZz0wfVxuZnVuY3Rpb24gU2ooYSxiKXtkb3t2YXIgYz1ZO3RyeXtxZygpO3ZoLmN1cnJlbnQ9R2g7aWYoeWgpe2Zvcih2YXIgZD1SLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fXloPSExfXhoPTA7VD1TPVI9bnVsbDt6aD0hMTtwai5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vj0xO3NqPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9VztoLmZsYWdzfD0yMDQ4O2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9aztpZigwPT09KGgubW9kZSYyKSl7dmFyIG49aC5hbHRlcm5hdGU7bj8oaC51cGRhdGVRdWV1ZT1uLnVwZGF0ZVF1ZXVlLGgubWVtb2l6ZWRTdGF0ZT1uLm1lbW9pemVkU3RhdGUsaC5sYW5lcz1uLmxhbmVzKTpcbihoLnVwZGF0ZVF1ZXVlPW51bGwsaC5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBBPTAhPT0oUC5jdXJyZW50JjEpLHA9Zztkb3t2YXIgQztpZihDPTEzPT09cC50YWcpe3ZhciB4PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eClDPW51bGwhPT14LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgdz1wLm1lbW9pemVkUHJvcHM7Qz12b2lkIDA9PT13LmZhbGxiYWNrPyExOiEwIT09dy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpBPyExOiEwfX1pZihDKXt2YXIgej1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT16KXt2YXIgdT1uZXcgU2V0O3UuYWRkKGwpO3AudXBkYXRlUXVldWU9dX1lbHNlIHouYWRkKGwpO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmZsYWdzfD02NDtoLmZsYWdzfD0xNjM4NDtoLmZsYWdzJj0tMjk4MTtpZigxPT09aC50YWcpaWYobnVsbD09PWguYWx0ZXJuYXRlKWgudGFnPTE3O2Vsc2V7dmFyIHQ9emcoLTEsMSk7dC50YWc9MjtBZyhoLHQpfWgubGFuZXN8PTE7YnJlYWsgYX1rPVxudm9pZCAwO2g9Yjt2YXIgcT1mLnBpbmdDYWNoZTtudWxsPT09cT8ocT1mLnBpbmdDYWNoZT1uZXcgT2ksaz1uZXcgU2V0LHEuc2V0KGwsaykpOihrPXEuZ2V0KGwpLHZvaWQgMD09PWsmJihrPW5ldyBTZXQscS5zZXQobCxrKSkpO2lmKCFrLmhhcyhoKSl7ay5hZGQoaCk7dmFyIHY9WWouYmluZChudWxsLGYsbCxoKTtsLnRoZW4odix2KX1wLmZsYWdzfD00MDk2O3AubGFuZXM9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2s9RXJyb3IoKFJhKGgudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIil9NSE9PVYmJihWPTIpO2s9TWkoayxoKTtwPVxuZztkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzpmPWs7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBKPVBpKHAsZixiKTtCZyhwLEopO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgSz1wLnR5cGUsUT1wLnN0YXRlTm9kZTtpZigwPT09KHAuZmxhZ3MmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEsuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09USYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFEuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoUSkpKSl7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBMPVNpKHAsZixiKTtCZyhwLEwpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVpqKGMpfWNhdGNoKHZhKXtiPXZhO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBQaigpe3ZhciBhPW9qLmN1cnJlbnQ7b2ouY3VycmVudD1HaDtyZXR1cm4gbnVsbD09PWE/R2g6YX1mdW5jdGlvbiBUaihhLGIpe3ZhciBjPVg7WHw9MTY7dmFyIGQ9UGooKTtVPT09YSYmVz09PWJ8fFFqKGEsYik7ZG8gdHJ5e2FrKCk7YnJlYWt9Y2F0Y2goZSl7U2ooYSxlKX13aGlsZSgxKTtxZygpO1g9Yztvai5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IoeSgyNjEpKTtVPW51bGw7Vz0wO3JldHVybiBWfWZ1bmN0aW9uIGFrKCl7Zm9yKDtudWxsIT09WTspYmsoWSl9ZnVuY3Rpb24gUmooKXtmb3IoO251bGwhPT1ZJiYhUWYoKTspYmsoWSl9ZnVuY3Rpb24gYmsoYSl7dmFyIGI9Y2soYS5hbHRlcm5hdGUsYSxxaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1pqKGEpOlk9Yjtwai5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBaaihhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjIwNDgpKXtjPUdpKGMsYixxaik7aWYobnVsbCE9PWMpe1k9YztyZXR1cm59Yz1iO2lmKDI0IT09Yy50YWcmJjIzIT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fDAhPT0ocWomMTA3Mzc0MTgyNCl8fDA9PT0oYy5tb2RlJjQpKXtmb3IodmFyIGQ9MCxlPWMuY2hpbGQ7bnVsbCE9PWU7KWR8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGU9ZS5zaWJsaW5nO2MuY2hpbGRMYW5lcz1kfW51bGwhPT1hJiYwPT09KGEuZmxhZ3MmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Yi5maXJzdEVmZmVjdCksbnVsbCE9PWIubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0KSwxPGIuZmxhZ3MmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YjphLmZpcnN0RWZmZWN0PWIsYS5sYXN0RWZmZWN0PWIpKX1lbHNle2M9TGkoYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTIwNDc7WT1jO3JldHVybn1udWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5mbGFnc3w9MjA0OCl9Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1WJiYoVj01KX1mdW5jdGlvbiBVaihhKXt2YXIgYj1lZygpO2dnKDk5LGRrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRrKGEsYil7ZG8gT2ooKTt3aGlsZShudWxsIT09eWopO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yaztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IoeSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO3ZhciBkPWMubGFuZXN8Yy5jaGlsZExhbmVzLGU9ZCxmPWEucGVuZGluZ0xhbmVzJn5lO2EucGVuZGluZ0xhbmVzPWU7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9ZTthLm11dGFibGVSZWFkTGFuZXMmPWU7YS5lbnRhbmdsZWRMYW5lcyY9ZTtlPWEuZW50YW5nbGVtZW50cztmb3IodmFyIGc9YS5ldmVudFRpbWVzLGg9YS5leHBpcmF0aW9uVGltZXM7MDxmOyl7dmFyIGs9MzEtVmMoZiksbD0xPDxrO2Vba109MDtnW2tdPS0xO2hba109LTE7ZiY9fmx9bnVsbCE9PVxuQ2omJjA9PT0oZCYyNCkmJkNqLmhhcyhhKSYmQ2ouZGVsZXRlKGEpO2E9PT1VJiYoWT1VPW51bGwsVz0wKTsxPGMuZmxhZ3M/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxkPWMuZmlyc3RFZmZlY3QpOmQ9YzpkPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWQpe2U9WDtYfD0zMjtwai5jdXJyZW50PW51bGw7a2Y9ZmQ7Zz1OZSgpO2lmKE9lKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKWg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6aWYoaD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3csKGw9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCkpJiYwIT09bC5yYW5nZUNvdW50KXtoPWwuYW5jaG9yTm9kZTtmPWwuYW5jaG9yT2Zmc2V0O2s9bC5mb2N1c05vZGU7bD1sLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2godmEpe2g9bnVsbDtcbmJyZWFrIGF9dmFyIG49MCxBPS0xLHA9LTEsQz0wLHg9MCx3PWcsej1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7dyE9PWh8fDAhPT1mJiYzIT09dy5ub2RlVHlwZXx8KEE9bitmKTt3IT09a3x8MCE9PWwmJjMhPT13Lm5vZGVUeXBlfHwocD1uK2wpOzM9PT13Lm5vZGVUeXBlJiYobis9dy5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9dy5maXJzdENoaWxkKSlicmVhazt6PXc7dz11fWZvcig7Oyl7aWYodz09PWcpYnJlYWsgYjt6PT09aCYmKytDPT09ZiYmKEE9bik7ej09PWsmJisreD09PWwmJihwPW4pO2lmKG51bGwhPT0odT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXo7ej13LnBhcmVudE5vZGV9dz11fWg9LTE9PT1BfHwtMT09PXA/bnVsbDp7c3RhcnQ6QSxlbmQ6cH19ZWxzZSBoPW51bGw7aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bGY9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7SWo9bnVsbDtKaj0hMTtaPWQ7ZG8gdHJ5e2VrKCl9Y2F0Y2godmEpe2lmKG51bGw9PT1cblopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7SWo9bnVsbDtaPWQ7ZG8gdHJ5e2ZvcihnPWE7bnVsbCE9PVo7KXt2YXIgdD1aLmZsYWdzO3QmMTYmJnBiKFouc3RhdGVOb2RlLFwiXCIpO2lmKHQmMTI4KXt2YXIgcT1aLmFsdGVybmF0ZTtpZihudWxsIT09cSl7dmFyIHY9cS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHQmMTAzOCl7Y2FzZSAyOmZqKFopO1ouZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpmaihaKTtaLmZsYWdzJj0tMztpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDEwMjQ6Wi5mbGFncyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlouZmxhZ3MmPS0xMDI1O2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgNDppaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDg6aD1aO2NqKGcsaCk7dmFyIEo9aC5hbHRlcm5hdGU7ZGooaCk7bnVsbCE9PVxuSiYmZGooSil9Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTt2PWxmO3E9TmUoKTt0PXYuZm9jdXNlZEVsZW07Zz12LnNlbGVjdGlvblJhbmdlO2lmKHEhPT10JiZ0JiZ0Lm93bmVyRG9jdW1lbnQmJk1lKHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdCkpe251bGwhPT1nJiZPZSh0KSYmKHE9Zy5zdGFydCx2PWcuZW5kLHZvaWQgMD09PXYmJih2PXEpLFwic2VsZWN0aW9uU3RhcnRcImluIHQ/KHQuc2VsZWN0aW9uU3RhcnQ9cSx0LnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHQudmFsdWUubGVuZ3RoKSk6KHY9KHE9dC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnEuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxoPXQudGV4dENvbnRlbnQubGVuZ3RoLEo9TWF0aC5taW4oZy5zdGFydCxoKSxnPXZvaWQgMD09PVxuZy5lbmQ/SjpNYXRoLm1pbihnLmVuZCxoKSwhdi5leHRlbmQmJko+ZyYmKGg9ZyxnPUosSj1oKSxoPUxlKHQsSiksZj1MZSh0LGcpLGgmJmYmJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1oLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09aC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09Zi5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpJiYocT1xLmNyZWF0ZVJhbmdlKCkscS5zZXRTdGFydChoLm5vZGUsaC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksSj5nPyh2LmFkZFJhbmdlKHEpLHYuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihxLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLHYuYWRkUmFuZ2UocSkpKSkpKTtxPVtdO2Zvcih2PXQ7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZxLnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5mb2N1cyYmdC5mb2N1cygpO2Zvcih0PVxuMDt0PHEubGVuZ3RoO3QrKyl2PXFbdF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9ZmQ9ISFrZjtsZj1rZj1udWxsO2EuY3VycmVudD1jO1o9ZDtkbyB0cnl7Zm9yKHQ9YTtudWxsIT09Wjspe3ZhciBLPVouZmxhZ3M7SyYzNiYmWWkodCxaLmFsdGVybmF0ZSxaKTtpZihLJjEyOCl7cT12b2lkIDA7dmFyIFE9Wi5yZWY7aWYobnVsbCE9PVEpe3ZhciBMPVouc3RhdGVOb2RlO3N3aXRjaChaLnRhZyl7Y2FzZSA1OnE9TDticmVhaztkZWZhdWx0OnE9TH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUT9RKHEpOlEuY3VycmVudD1xfX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO1o9bnVsbDskZigpO1g9ZX1lbHNlIGEuY3VycmVudD1jO2lmKHhqKXhqPSExLHlqPWEsemo9YjtlbHNlIGZvcihaPWQ7bnVsbCE9PVo7KWI9XG5aLm5leHRFZmZlY3QsWi5uZXh0RWZmZWN0PW51bGwsWi5mbGFncyY4JiYoSz1aLEsuc2libGluZz1udWxsLEsuc3RhdGVOb2RlPW51bGwpLFo9YjtkPWEucGVuZGluZ0xhbmVzOzA9PT1kJiYoVGk9bnVsbCk7MT09PWQ/YT09PUVqP0RqKys6KERqPTAsRWo9YSk6RGo9MDtjPWMuc3RhdGVOb2RlO2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclJvb3QpdHJ5e01mLm9uQ29tbWl0RmliZXJSb290KExmLGMsdm9pZCAwLDY0PT09KGMuY3VycmVudC5mbGFncyY2NCkpfWNhdGNoKHZhKXt9TWooYSxPKCkpO2lmKFFpKXRocm93IFFpPSExLGE9UmksUmk9bnVsbCxhO2lmKDAhPT0oWCY4KSlyZXR1cm4gbnVsbDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWsoKXtmb3IoO251bGwhPT1aOyl7dmFyIGE9Wi5hbHRlcm5hdGU7Smp8fG51bGw9PT1Janx8KDAhPT0oWi5mbGFncyY4KT9kYyhaLElqKSYmKEpqPSEwKToxMz09PVoudGFnJiZtaihhLFopJiZkYyhaLElqKSYmKEpqPSEwKSk7dmFyIGI9Wi5mbGFnczswIT09KGImMjU2KSYmWGkoYSxaKTswPT09KGImNTEyKXx8eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSk7Wj1aLm5leHRFZmZlY3R9fWZ1bmN0aW9uIE9qKCl7aWYoOTAhPT16ail7dmFyIGE9OTc8emo/OTc6emo7emo9OTA7cmV0dXJuIGdnKGEsZmspfXJldHVybiExfWZ1bmN0aW9uICRpKGEsYil7QWoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfWZ1bmN0aW9uIFppKGEsYil7QmoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfVxuZnVuY3Rpb24gZmsoKXtpZihudWxsPT09eWopcmV0dXJuITE7dmFyIGE9eWo7eWo9bnVsbDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzMxKSk7dmFyIGI9WDtYfD0zMjt2YXIgYz1CajtCaj1bXTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrPTIpe3ZhciBlPWNbZF0sZj1jW2QrMV0sZz1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyl0cnl7ZygpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Yz1BajtBaj1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7ZT1jW2RdO2Y9Y1tkKzFdO3RyeXt2YXIgaD1lLmNyZWF0ZTtlLmRlc3Ryb3k9aCgpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Zm9yKGg9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1oOylhPWgubmV4dEVmZmVjdCxoLm5leHRFZmZlY3Q9bnVsbCxoLmZsYWdzJjgmJihoLnNpYmxpbmc9XG5udWxsLGguc3RhdGVOb2RlPW51bGwpLGg9YTtYPWI7aWcoKTtyZXR1cm4hMH1mdW5jdGlvbiBnayhhLGIsYyl7Yj1NaShjLGIpO2I9UGkoYSxiLDEpO0FnKGEsYik7Yj1IZygpO2E9S2ooYSwxKTtudWxsIT09YSYmKCRjKGEsMSxiKSxNaihhLGIpKX1cbmZ1bmN0aW9uIFdpKGEsYil7aWYoMz09PWEudGFnKWdrKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7Z2soYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXthPU1pKGIsYSk7dmFyIGU9U2koYyxhLDEpO0FnKGMsZSk7ZT1IZygpO2M9S2ooYywxKTtpZihudWxsIT09YykkYyhjLDEsZSksTWooYyxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl0cnl7ZC5jb21wb25lbnREaWRDYXRjaChiLGEpfWNhdGNoKGYpe31icmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBZaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7VT09PWEmJihXJmMpPT09YyYmKDQ9PT1WfHwzPT09ViYmKFcmNjI5MTQ1NjApPT09VyYmNTAwPk8oKS1qaj9RaihhLDApOnVqfD1jKTtNaihhLGIpfWZ1bmN0aW9uIGxqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9YS5tb2RlLDA9PT0oYiYyKT9iPTE6MD09PShiJjQpP2I9OTk9PT1lZygpPzE6MjooMD09PUdqJiYoR2o9dGopLGI9WWMoNjI5MTQ1NjAmfkdqKSwwPT09YiYmKGI9NDE5NDMwNCkpKTtjPUhnKCk7YT1LaihhLGIpO251bGwhPT1hJiYoJGMoYSxiLGMpLE1qKGEsYykpfXZhciBjaztcbmNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmxhbmVzO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxOLmN1cnJlbnQpdWc9ITA7ZWxzZSBpZigwIT09KGMmZCkpdWc9MCE9PShhLmZsYWdzJjE2Mzg0KT8hMDohMTtlbHNle3VnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOnJpKGIpO3NoKCk7YnJlYWs7Y2FzZSA1OmdoKGIpO2JyZWFrO2Nhc2UgMTpGZihiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6ZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO3ZhciBlPWIudHlwZS5fY29udGV4dDtJKG1nLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdGkoYSxiLGMpO0koUCxQLmN1cnJlbnQmMSk7Yj1oaShhLGIsYyk7cmV0dXJuIG51bGwhPT1cbmI/Yi5zaWJsaW5nOm51bGx9SShQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjY0KSl7aWYoZClyZXR1cm4gQWkoYSxiLGMpO2IuZmxhZ3N8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SShQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gYi5sYW5lcz0wLG1pKGEsYixjKX1yZXR1cm4gaGkoYSxiLGMpfWVsc2UgdWc9ITE7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLE0uY3VycmVudCk7dGcoYixjKTtlPUNoKG51bGwsYixkLGEsZSxjKTtiLmZsYWdzfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihGZihkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7eGcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkdnKGIsZCxnLGEpO2UudXBkYXRlcj1LZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxzPWI7T2coYixkLGEsYyk7Yj1xaShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxmaShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7XG5hPWIucGVuZGluZ1Byb3BzO2Y9ZS5faW5pdDtlPWYoZS5fcGF5bG9hZCk7Yi50eXBlPWU7Zj1iLnRhZz1oayhlKTthPWxnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWxpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1waShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWdpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aWkobnVsbCxiLGUsbGcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih5KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGxpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLHBpKGEsYixkLGUsYyk7Y2FzZSAzOnJpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IoeSgyODIpKTtcbmQ9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZyhhLGIpO0NnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpc2goKSxiPWhpKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZj1lLmh5ZHJhdGUpa2g9cmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxqaD1iLGY9bGg9ITA7aWYoZil7YT1lLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE7aWYobnVsbCE9YSlmb3IoZT0wO2U8YS5sZW5ndGg7ZSs9MilmPWFbZV0sZi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1hW2UrMV0sdGgucHVzaChmKTtjPVpnKGIsbnVsbCxkLGMpO2ZvcihiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDEwMjQsYz1jLnNpYmxpbmd9ZWxzZSBmaShhLGIsZCxjKSxzaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGdoKGIpLG51bGw9PT1hJiZcbnBoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sbmYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm5mKGQsZikmJihiLmZsYWdzfD0xNiksb2koYSxiKSxmaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnBoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdGkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WWcoYixudWxsLGQsYyk6ZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGdpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShtZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPUhlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFOLmN1cnJlbnQpe2I9aGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9XG5rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9emcoLTEsYyYtYyksbC50YWc9MixBZyhoLGwpKTtoLmxhbmVzfD1jO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJihsLmxhbmVzfD1jKTtzZyhoLnJldHVybixjKTtrLmxhbmVzfD1jO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9ZmkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdGcoYixjKSxlPXZnKGUsXG5mLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZmxhZ3N8PTEsZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWxnKGUsYi5wZW5kaW5nUHJvcHMpLGY9bGcoZS50eXBlLGYpLGlpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBraShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLEZmKGQpPyhhPSEwLEpmKGIpKTphPSExLHRnKGIsYyksTWcoYixkLGUpLE9nKGIsZCxlLGMpLHFpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQWkoYSxiLGMpO2Nhc2UgMjM6cmV0dXJuIG1pKGEsYixjKTtjYXNlIDI0OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTtcbn07ZnVuY3Rpb24gaWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmZsYWdzPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIG5oKGEsYixjLGQpe3JldHVybiBuZXcgaWsoYSxiLGMsZCl9ZnVuY3Rpb24gamkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIGhrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBqaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QWEpcmV0dXJuIDExO2lmKGE9PT1EYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5oKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFZnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlqaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm4gWGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBIYTpnPTg7ZXw9MTY7YnJlYWs7Y2FzZSB3YTpnPTg7ZXw9MTticmVhaztjYXNlIHhhOnJldHVybiBhPW5oKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9eGEsYS50eXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQmE6cmV0dXJuIGE9bmgoMTMsYyxiLGUpLGEudHlwZT1CYSxhLmVsZW1lbnRUeXBlPUJhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9bmgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gdmkoYyxlLGYsYik7Y2FzZSBKYTpyZXR1cm4gYT1uaCgyNCxjLGIsZSksYS5lbGVtZW50VHlwZT1KYSxhLmxhbmVzPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSB6YTpnPTk7YnJlYWsgYTtjYXNlIEFhOmc9MTE7YnJlYWsgYTtjYXNlIERhOmc9MTQ7YnJlYWsgYTtjYXNlIEVhOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBGYTpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1uaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFhnKGEsYixjLGQpe2E9bmgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHZpKGEsYixjLGQpe2E9bmgoMjMsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIFVnKGEsYixjKXthPW5oKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFdnKGEsYixjKXtiPW5oKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gamsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9WmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9WmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9WmMoMCk7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPW51bGx9XG5mdW5jdGlvbiBrayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gbGsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SGcoKSxnPUlnKGUpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFscztiOntpZihaYihjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEZmKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IoeSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoRmYoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1cbmQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7SmcoZSxnLGYpO3JldHVybiBnfWZ1bmN0aW9uIG1rKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gbmsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIG9rKGEsYil7bmsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJm5rKGEsYil9ZnVuY3Rpb24gcGsoKXtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHFrKGEsYixjKXt2YXIgZD1udWxsIT1jJiZudWxsIT1jLmh5ZHJhdGlvbk9wdGlvbnMmJmMuaHlkcmF0aW9uT3B0aW9ucy5tdXRhYmxlU291cmNlc3x8bnVsbDtjPW5ldyBqayhhLGIsbnVsbCE9YyYmITA9PT1jLmh5ZHJhdGUpO2I9bmgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2MuY3VycmVudD1iO2Iuc3RhdGVOb2RlPWM7eGcoYik7YVtmZl09Yy5jdXJyZW50O2NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspe2I9ZFthXTt2YXIgZT1iLl9nZXRWZXJzaW9uO2U9ZShiLl9zb3VyY2UpO251bGw9PWMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2IsZV06Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYixlKX10aGlzLl9pbnRlcm5hbFJvb3Q9Y31cbnFrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7bGsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07cWsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87bGsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW2ZmXT1udWxsfSl9O2Z1bmN0aW9uIHJrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHNrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcWsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB0ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2guY2FsbChhKX19bGsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1zayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtrLmNhbGwoYSl9fVhqKGZ1bmN0aW9uKCl7bGsoYixnLGEsZSl9KX1yZXR1cm4gbWsoZyl9ZWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDQsYik7b2soYSw0KX19O2ZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw2NzEwODg2NCxiKTtvayhhLDY3MTA4ODY0KX19O1xuZ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKSxjPUlnKGEpO0pnKGEsYyxiKTtvayhhLGMpfX07aGM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHkoOTApKTtXYShkKTthYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9V2o7XG5IYj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVg7WHw9NDt0cnl7cmV0dXJuIGdnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1g9ZiwwPT09WCYmKHdqKCksaWcoKSl9fTtJYj1mdW5jdGlvbigpezA9PT0oWCY0OSkmJihWaigpLE9qKCkpfTtKYj1mdW5jdGlvbihhLGIpe3ZhciBjPVg7WHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX07ZnVuY3Rpb24gdWsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4ga2soYSxiLG51bGwsYyl9dmFyIHZrPXtFdmVudHM6W0NiLHVlLERiLEViLEZiLE9qLHtjdXJyZW50OiExfV19LHdrPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE3LjAuMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgeGs9e2J1bmRsZVR5cGU6d2suYnVuZGxlVHlwZSx2ZXJzaW9uOndrLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp3ay5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOndrLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1jYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2suZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxucGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB5az1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXlrLmlzRGlzYWJsZWQmJnlrLnN1cHBvcnRzRmliZXIpdHJ5e0xmPXlrLmluamVjdCh4ayksTWY9eWt9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXZrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPXVrO1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih5KDE4OCkpO3Rocm93IEVycm9yKHkoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9Y2MoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe3ZhciBjPVg7aWYoMCE9PShjJjQ4KSlyZXR1cm4gYShiKTtYfD0xO3RyeXtpZihhKXJldHVybiBnZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtYPWMsaWcoKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcmsoYSkpdGhyb3cgRXJyb3IoeSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFhqKGZ1bmN0aW9uKCl7dGsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW2ZmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9V2o7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdWsoYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFyayhjKSl0aHJvdyBFcnJvcih5KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHkoMzgpKTtyZXR1cm4gdGsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiIWZ1bmN0aW9uKGUsdCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9dCgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSx0KTtlbHNle3ZhciBuPXQoKTtmb3IodmFyIHIgaW4gbikoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0czplKVtyXT1uW3JdfX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgbz1uW3JdPXtleHBvcnRzOnt9LGlkOnIsbG9hZGVkOiExfTtyZXR1cm4gZVtyXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyx0KSxvLmxvYWRlZD0hMCxvLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIHQubT1lLHQuYz1uLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gbyhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gaShlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fWZ1bmN0aW9uIGEoZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgdT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXJldHVybiBmdW5jdGlvbih0LG4scil7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksciYmZSh0LHIpLHR9fSgpLGM9bigzNikscz1yKGMpLGw9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXtvKHRoaXMsdCk7dmFyIG49aSh0aGlzLCh0Ll9fcHJvdG9fX3x8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpKS5jYWxsKHRoaXMsZSkpO3JldHVybiBuLnN0YXRlPXtmaWxlczpbXX0sbn1yZXR1cm4gYSh0LGUpLHUodCxbe2tleTpcImhhbmRsZUNoYW5nZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLG49ZS50YXJnZXQuZmlsZXMscj1bXSxvPWZ1bmN0aW9uKCl7dmFyIGU9bltpXSxvPW5ldyBGaWxlUmVhZGVyO28ucmVhZEFzRGF0YVVSTChlKSxvLm9ubG9hZD1mdW5jdGlvbigpe3ZhciBpPXtuYW1lOmUubmFtZSx0eXBlOmUudHlwZSxzaXplOk1hdGgucm91bmQoZS5zaXplLzFlMykrXCIga0JcIixiYXNlNjQ6by5yZXN1bHQsZmlsZTplfTtyLnB1c2goaSksci5sZW5ndGg9PW4ubGVuZ3RoJiYodC5wcm9wcy5tdWx0aXBsZT90LnByb3BzLm9uRG9uZShyKTp0LnByb3BzLm9uRG9uZShyWzBdKSl9fSxpPTA7aTxuLmxlbmd0aDtpKyspbygpfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHMuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIix7dHlwZTpcImZpbGVcIixvbkNoYW5nZTp0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpLG11bHRpcGxlOnRoaXMucHJvcHMubXVsdGlwbGV9KX19XSksdH0ocy5kZWZhdWx0LkNvbXBvbmVudCk7dC5kZWZhdWx0PWwsbC5kZWZhdWx0UHJvcHM9e211bHRpcGxlOiExfX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiByKCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIG8oZSl7aWYobD09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigobD09PW58fCFsKSYmc2V0VGltZW91dClyZXR1cm4gbD1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIGwoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGwuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIGwuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBpKGUpe2lmKHA9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigocD09PXJ8fCFwKSYmY2xlYXJUaW1lb3V0KXJldHVybiBwPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e3JldHVybiBwKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gcC5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIHAuY2FsbCh0aGlzLGUpfX19ZnVuY3Rpb24gYSgpe3YmJmQmJih2PSExLGQubGVuZ3RoP3k9ZC5jb25jYXQoeSk6bT0tMSx5Lmxlbmd0aCYmdSgpKX1mdW5jdGlvbiB1KCl7aWYoIXYpe3ZhciBlPW8oYSk7dj0hMDtmb3IodmFyIHQ9eS5sZW5ndGg7dDspe2ZvcihkPXkseT1bXTsrK208dDspZCYmZFttXS5ydW4oKTttPS0xLHQ9eS5sZW5ndGh9ZD1udWxsLHY9ITEsaShlKX19ZnVuY3Rpb24gYyhlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIHMoKXt9dmFyIGwscCxmPWUuZXhwb3J0cz17fTshZnVuY3Rpb24oKXt0cnl7bD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bn1jYXRjaChlKXtsPW59dHJ5e3A9XCJmdW5jdGlvblwiPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpyfWNhdGNoKGUpe3A9cn19KCk7dmFyIGQseT1bXSx2PSExLG09LTE7Zi5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciBuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0W24tMV09YXJndW1lbnRzW25dO3kucHVzaChuZXcgYyhlLHQpKSwxIT09eS5sZW5ndGh8fHZ8fG8odSl9LGMucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LGYudGl0bGU9XCJicm93c2VyXCIsZi5icm93c2VyPSEwLGYuZW52PXt9LGYuYXJndj1bXSxmLnZlcnNpb249XCJcIixmLnZlcnNpb25zPXt9LGYub249cyxmLmFkZExpc3RlbmVyPXMsZi5vbmNlPXMsZi5vZmY9cyxmLnJlbW92ZUxpc3RlbmVyPXMsZi5yZW1vdmVBbGxMaXN0ZW5lcnM9cyxmLmVtaXQ9cyxmLnByZXBlbmRMaXN0ZW5lcj1zLGYucHJlcGVuZE9uY2VMaXN0ZW5lcj1zLGYubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybltdfSxmLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9LGYuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9LGYuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfSxmLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0LG4sbyxpLGEsdSxjKXtpZihyKHQpLCFlKXt2YXIgcztpZih2b2lkIDA9PT10KXM9bmV3IEVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bbixvLGksYSx1LGNdLHA9MDtzPW5ldyBFcnJvcih0LnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFtwKytdfSkpLHMubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn10aHJvdyBzLmZyYW1lc1RvUG9wPTEsc319dmFyIHI9ZnVuY3Rpb24oZSl7fTtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiYocj1mdW5jdGlvbihlKXtpZih2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcihcImludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50XCIpfSksZS5leHBvcnRzPW59KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9big5KSxvPXI7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7dmFyIGk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dmFyIG89MCxpPVwiV2FybmluZzogXCIrZS5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIG5bbysrXX0pO1widW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlJiZjb25zb2xlLmVycm9yKGkpO3RyeXt0aHJvdyBuZXcgRXJyb3IoaSl9Y2F0Y2goZSl7fX07bz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IEVycm9yKFwiYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgbWVzc2FnZSBhcmd1bWVudFwiKTtpZigwIT09dC5pbmRleE9mKFwiRmFpbGVkIENvbXBvc2l0ZSBwcm9wVHlwZTogXCIpJiYhZSl7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheShuPjI/bi0yOjApLG89MjtvPG47bysrKXJbby0yXT1hcmd1bWVudHNbb107aS5hcHBseSh2b2lkIDAsW3RdLmNvbmNhdChyKSl9fX1lLmV4cG9ydHM9b30pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJmQuY2FsbChlLFwicmVmXCIpKXt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsXCJyZWZcIikuZ2V0O2lmKG4mJm4uaXNSZWFjdFdhcm5pbmcpcmV0dXJuITF9cmV0dXJuIHZvaWQgMCE9PWUucmVmfWZ1bmN0aW9uIG8oZSl7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmZC5jYWxsKGUsXCJrZXlcIikpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxcImtleVwiKS5nZXQ7aWYobiYmbi5pc1JlYWN0V2FybmluZylyZXR1cm4hMX1yZXR1cm4gdm9pZCAwIT09ZS5rZXl9ZnVuY3Rpb24gaShlLG4pe3ZhciByPWZ1bmN0aW9uKCl7dXx8KHU9ITAsXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9wKCExLFwiJXM6IGBrZXlgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSB2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50IHByb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpXCIsbik6dm9pZCAwKX07ci5pc1JlYWN0V2FybmluZz0hMCxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImtleVwiLHtnZXQ6cixjb25maWd1cmFibGU6ITB9KX1mdW5jdGlvbiBhKGUsbil7dmFyIHI9ZnVuY3Rpb24oKXtjfHwoYz0hMCxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP3AoITEsXCIlczogYHJlZmAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lIHZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgcHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcylcIixuKTp2b2lkIDApfTtyLmlzUmVhY3RXYXJuaW5nPSEwLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicmVmXCIse2dldDpyLGNvbmZpZ3VyYWJsZTohMH0pfXZhciB1LGMscz1uKDYpLGw9big3KSxwPW4oMyksZj1uKDgpLGQ9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx5PW4oMTUpLHY9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfSxtPWZ1bmN0aW9uKGUsbixyLG8saSxhLHUpe3ZhciBjPXskJHR5cGVvZjp5LHR5cGU6ZSxrZXk6bixyZWY6cixwcm9wczp1LF9vd25lcjphfTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiYoYy5fc3RvcmU9e30sZj8oT2JqZWN0LmRlZmluZVByb3BlcnR5KGMuX3N0b3JlLFwidmFsaWRhdGVkXCIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLHZhbHVlOiExfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGMsXCJfc2VsZlwiLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMSx2YWx1ZTpvfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGMsXCJfc291cmNlXCIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiExLHZhbHVlOml9KSk6KGMuX3N0b3JlLnZhbGlkYXRlZD0hMSxjLl9zZWxmPW8sYy5fc291cmNlPWkpLE9iamVjdC5mcmVlemUmJihPYmplY3QuZnJlZXplKGMucHJvcHMpLE9iamVjdC5mcmVlemUoYykpKSxjfTttLmNyZWF0ZUVsZW1lbnQ9ZnVuY3Rpb24oZSxuLHUpe3ZhciBjLHM9e30scD1udWxsLGY9bnVsbCxoPW51bGwsZz1udWxsO2lmKG51bGwhPW4pe3IobikmJihmPW4ucmVmKSxvKG4pJiYocD1cIlwiK24ua2V5KSxoPXZvaWQgMD09PW4uX19zZWxmP251bGw6bi5fX3NlbGYsZz12b2lkIDA9PT1uLl9fc291cmNlP251bGw6bi5fX3NvdXJjZTtmb3IoYyBpbiBuKWQuY2FsbChuLGMpJiYhdi5oYXNPd25Qcm9wZXJ0eShjKSYmKHNbY109bltjXSl9dmFyIGI9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1iKXMuY2hpbGRyZW49dTtlbHNlIGlmKGI+MSl7Zm9yKHZhciBFPUFycmF5KGIpLE49MDtOPGI7TisrKUVbTl09YXJndW1lbnRzW04rMl07XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmT2JqZWN0LmZyZWV6ZSYmT2JqZWN0LmZyZWV6ZShFKSxzLmNoaWxkcmVuPUV9aWYoZSYmZS5kZWZhdWx0UHJvcHMpe3ZhciBfPWUuZGVmYXVsdFByb3BzO2ZvcihjIGluIF8pdm9pZCAwPT09c1tjXSYmKHNbY109X1tjXSl9aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmKHB8fGYpJiYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHMuJCR0eXBlb2Z8fHMuJCR0eXBlb2YhPT15KSl7dmFyIE89XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lLmRpc3BsYXlOYW1lfHxlLm5hbWV8fFwiVW5rbm93blwiOmU7cCYmaShzLE8pLGYmJmEocyxPKX1yZXR1cm4gbShlLHAsZixoLGcsbC5jdXJyZW50LHMpfSxtLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bS5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCxlKTtyZXR1cm4gdC50eXBlPWUsdH0sbS5jbG9uZUFuZFJlcGxhY2VLZXk9ZnVuY3Rpb24oZSx0KXt2YXIgbj1tKGUudHlwZSx0LGUucmVmLGUuX3NlbGYsZS5fc291cmNlLGUuX293bmVyLGUucHJvcHMpO3JldHVybiBufSxtLmNsb25lRWxlbWVudD1mdW5jdGlvbihlLHQsbil7dmFyIGksYT1zKHt9LGUucHJvcHMpLHU9ZS5rZXksYz1lLnJlZixwPWUuX3NlbGYsZj1lLl9zb3VyY2UseT1lLl9vd25lcjtpZihudWxsIT10KXtyKHQpJiYoYz10LnJlZix5PWwuY3VycmVudCksbyh0KSYmKHU9XCJcIit0LmtleSk7dmFyIGg7ZS50eXBlJiZlLnR5cGUuZGVmYXVsdFByb3BzJiYoaD1lLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoaSBpbiB0KWQuY2FsbCh0LGkpJiYhdi5oYXNPd25Qcm9wZXJ0eShpKSYmKHZvaWQgMD09PXRbaV0mJnZvaWQgMCE9PWg/YVtpXT1oW2ldOmFbaV09dFtpXSl9dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWEuY2hpbGRyZW49bjtlbHNlIGlmKGc+MSl7Zm9yKHZhciBiPUFycmF5KGcpLEU9MDtFPGc7RSsrKWJbRV09YXJndW1lbnRzW0UrMl07YS5jaGlsZHJlbj1ifXJldHVybiBtKGUudHlwZSx1LGMscCxmLHksYSl9LG0uaXNWYWxpZEVsZW1lbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lJiZlLiQkdHlwZW9mPT09eX0sZS5leHBvcnRzPW19KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aC0xLG49XCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrZStcIjsgdmlzaXQgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrZSxyPTA7cjx0O3IrKyluKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tyKzFdKTtuKz1cIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCI7dmFyIG89bmV3IEVycm9yKG4pO3Rocm93IG8ubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIixvLmZyYW1lc1RvUG9wPTEsb31lLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0KXsvKlxuXHRvYmplY3QtYXNzaWduXG5cdChjKSBTaW5kcmUgU29yaHVzXG5cdEBsaWNlbnNlIE1JVFxuXHQqL1xuXCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWRcIik7cmV0dXJuIE9iamVjdChlKX1mdW5jdGlvbiByKCl7dHJ5e2lmKCFPYmplY3QuYXNzaWduKXJldHVybiExO3ZhciBlPW5ldyBTdHJpbmcoXCJhYmNcIik7aWYoZVs1XT1cImRlXCIsXCI1XCI9PT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKVswXSlyZXR1cm4hMTtmb3IodmFyIHQ9e30sbj0wO248MTA7bisrKXRbXCJfXCIrU3RyaW5nLmZyb21DaGFyQ29kZShuKV09bjt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KTtpZihcIjAxMjM0NTY3ODlcIiE9PXIuam9pbihcIlwiKSlyZXR1cm4hMTt2YXIgbz17fTtyZXR1cm5cImFiY2RlZmdoaWprbG1ub3BxcnN0XCIuc3BsaXQoXCJcIikuZm9yRWFjaChmdW5jdGlvbihlKXtvW2VdPWV9KSxcImFiY2RlZmdoaWprbG1ub3BxcnN0XCI9PT1PYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LG8pKS5qb2luKFwiXCIpfWNhdGNoKGUpe3JldHVybiExfX12YXIgbz1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLGk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxhPU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7ZS5leHBvcnRzPXIoKT9PYmplY3QuYXNzaWduOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLHUsYz1uKGUpLHM9MTtzPGFyZ3VtZW50cy5sZW5ndGg7cysrKXtyPU9iamVjdChhcmd1bWVudHNbc10pO2Zvcih2YXIgbCBpbiByKWkuY2FsbChyLGwpJiYoY1tsXT1yW2xdKTtpZihvKXt1PW8ocik7Zm9yKHZhciBwPTA7cDx1Lmxlbmd0aDtwKyspYS5jYWxsKHIsdVtwXSkmJihjW3VbcF1dPXJbdVtwXV0pfX1yZXR1cm4gY319LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49e2N1cnJlbnQ6bnVsbH07ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ITE7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwieFwiLHtnZXQ6ZnVuY3Rpb24oKXt9fSksbj0hMH1jYXRjaChlKXt9ZS5leHBvcnRzPW59KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZX19dmFyIHI9ZnVuY3Rpb24oKXt9O3IudGhhdFJldHVybnM9bixyLnRoYXRSZXR1cm5zRmFsc2U9bighMSksci50aGF0UmV0dXJuc1RydWU9bighMCksci50aGF0UmV0dXJuc051bGw9bihudWxsKSxyLnRoYXRSZXR1cm5zVGhpcz1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxyLnRoYXRSZXR1cm5zQXJndW1lbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGUuZXhwb3J0cz1yfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7dmFyIHQ9RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLG49T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxyPVJlZ0V4cChcIl5cIit0LmNhbGwobikucmVwbGFjZSgvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXCJcXFxcJCZcIikucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZyxcIiQxLio/XCIpK1wiJFwiKTt0cnl7dmFyIG89dC5jYWxsKGUpO3JldHVybiByLnRlc3Qobyl9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIG8oZSl7dmFyIHQ9cyhlKTtpZih0KXt2YXIgbj10LmNoaWxkSURzO2woZSksbi5mb3JFYWNoKG8pfX1mdW5jdGlvbiBpKGUsdCxuKXtyZXR1cm5cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyh0P1wiIChhdCBcIit0LmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrdC5saW5lTnVtYmVyK1wiKVwiOm4/XCIgKGNyZWF0ZWQgYnkgXCIrbitcIilcIjpcIlwiKX1mdW5jdGlvbiBhKGUpe3JldHVybiBudWxsPT1lP1wiI2VtcHR5XCI6XCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlP1wiI3RleHRcIjpcInN0cmluZ1wiPT10eXBlb2YgZS50eXBlP2UudHlwZTplLnR5cGUuZGlzcGxheU5hbWV8fGUudHlwZS5uYW1lfHxcIlVua25vd25cIn1mdW5jdGlvbiB1KGUpe3ZhciBuLHI9UC5nZXREaXNwbGF5TmFtZShlKSxvPVAuZ2V0RWxlbWVudChlKSxhPVAuZ2V0T3duZXJJRChlKTtyZXR1cm4gYSYmKG49UC5nZXREaXNwbGF5TmFtZShhKSksXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9nKG8sXCJSZWFjdENvbXBvbmVudFRyZWVIb29rOiBNaXNzaW5nIFJlYWN0IGVsZW1lbnQgZm9yIGRlYnVnSUQgJXMgd2hlbiBidWlsZGluZyBzdGFja1wiLGUpOnZvaWQgMCxpKHIsbyYmby5fc291cmNlLG4pfXZhciBjLHMsbCxwLGYsZCx5LHY9big1KSxtPW4oNyksaD1uKDIpLGc9bigzKSxiPVwiZnVuY3Rpb25cIj09dHlwZW9mIEFycmF5LmZyb20mJlwiZnVuY3Rpb25cIj09dHlwZW9mIE1hcCYmcihNYXApJiZudWxsIT1NYXAucHJvdG90eXBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBNYXAucHJvdG90eXBlLmtleXMmJnIoTWFwLnByb3RvdHlwZS5rZXlzKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU2V0JiZyKFNldCkmJm51bGwhPVNldC5wcm90b3R5cGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFNldC5wcm90b3R5cGUua2V5cyYmcihTZXQucHJvdG90eXBlLmtleXMpO2lmKGIpe3ZhciBFPW5ldyBNYXAsTj1uZXcgU2V0O2M9ZnVuY3Rpb24oZSx0KXtFLnNldChlLHQpfSxzPWZ1bmN0aW9uKGUpe3JldHVybiBFLmdldChlKX0sbD1mdW5jdGlvbihlKXtFLmRlbGV0ZShlKX0scD1mdW5jdGlvbigpe3JldHVybiBBcnJheS5mcm9tKEUua2V5cygpKX0sZj1mdW5jdGlvbihlKXtOLmFkZChlKX0sZD1mdW5jdGlvbihlKXtOLmRlbGV0ZShlKX0seT1mdW5jdGlvbigpe3JldHVybiBBcnJheS5mcm9tKE4ua2V5cygpKX19ZWxzZXt2YXIgXz17fSxPPXt9LEQ9ZnVuY3Rpb24oZSl7cmV0dXJuXCIuXCIrZX0sdz1mdW5jdGlvbihlKXtyZXR1cm4gcGFyc2VJbnQoZS5zdWJzdHIoMSksMTApfTtjPWZ1bmN0aW9uKGUsdCl7dmFyIG49RChlKTtfW25dPXR9LHM9ZnVuY3Rpb24oZSl7dmFyIHQ9RChlKTtyZXR1cm4gX1t0XX0sbD1mdW5jdGlvbihlKXt2YXIgdD1EKGUpO2RlbGV0ZSBfW3RdfSxwPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKF8pLm1hcCh3KX0sZj1mdW5jdGlvbihlKXt2YXIgdD1EKGUpO09bdF09ITB9LGQ9ZnVuY3Rpb24oZSl7dmFyIHQ9RChlKTtkZWxldGUgT1t0XX0seT1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyhPKS5tYXAodyl9fXZhciB4PVtdLFA9e29uU2V0Q2hpbGRyZW46ZnVuY3Rpb24oZSxuKXt2YXIgcj1zKGUpO3I/dm9pZCAwOlwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/aCghMSxcIkl0ZW0gbXVzdCBoYXZlIGJlZW4gc2V0XCIpOnYoXCIxNDRcIiksci5jaGlsZElEcz1uO2Zvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKXt2YXIgaT1uW29dLGE9cyhpKTthP3ZvaWQgMDpcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2goITEsXCJFeHBlY3RlZCBob29rIGV2ZW50cyB0byBmaXJlIGZvciB0aGUgY2hpbGQgYmVmb3JlIGl0cyBwYXJlbnQgaW5jbHVkZXMgaXQgaW4gb25TZXRDaGlsZHJlbigpLlwiKTp2KFwiMTQwXCIpLG51bGw9PWEuY2hpbGRJRHMmJlwib2JqZWN0XCI9PXR5cGVvZiBhLmVsZW1lbnQmJm51bGwhPWEuZWxlbWVudD9cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2goITEsXCJFeHBlY3RlZCBvblNldENoaWxkcmVuKCkgdG8gZmlyZSBmb3IgYSBjb250YWluZXIgY2hpbGQgYmVmb3JlIGl0cyBwYXJlbnQgaW5jbHVkZXMgaXQgaW4gb25TZXRDaGlsZHJlbigpLlwiKTp2KFwiMTQxXCIpOnZvaWQgMCxhLmlzTW91bnRlZD92b2lkIDA6XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9oKCExLFwiRXhwZWN0ZWQgb25Nb3VudENvbXBvbmVudCgpIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuXCIpOnYoXCI3MVwiKSxudWxsPT1hLnBhcmVudElEJiYoYS5wYXJlbnRJRD1lKSxhLnBhcmVudElEIT09ZT9cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2goITEsXCJFeHBlY3RlZCBvbkJlZm9yZU1vdW50Q29tcG9uZW50KCkgcGFyZW50IGFuZCBvblNldENoaWxkcmVuKCkgdG8gYmUgY29uc2lzdGVudCAoJXMgaGFzIHBhcmVudHMgJXMgYW5kICVzKS5cIixpLGEucGFyZW50SUQsZSk6dihcIjE0MlwiLGksYS5wYXJlbnRJRCxlKTp2b2lkIDB9fSxvbkJlZm9yZU1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj17ZWxlbWVudDp0LHBhcmVudElEOm4sdGV4dDpudWxsLGNoaWxkSURzOltdLGlzTW91bnRlZDohMSx1cGRhdGVDb3VudDowfTtjKGUscil9LG9uQmVmb3JlVXBkYXRlQ29tcG9uZW50OmZ1bmN0aW9uKGUsdCl7dmFyIG49cyhlKTtuJiZuLmlzTW91bnRlZCYmKG4uZWxlbWVudD10KX0sb25Nb3VudENvbXBvbmVudDpmdW5jdGlvbihlKXt2YXIgbj1zKGUpO24/dm9pZCAwOlwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/aCghMSxcIkl0ZW0gbXVzdCBoYXZlIGJlZW4gc2V0XCIpOnYoXCIxNDRcIiksbi5pc01vdW50ZWQ9ITA7dmFyIHI9MD09PW4ucGFyZW50SUQ7ciYmZihlKX0sb25VcGRhdGVDb21wb25lbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9cyhlKTt0JiZ0LmlzTW91bnRlZCYmdC51cGRhdGVDb3VudCsrfSxvblVubW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9cyhlKTtpZih0KXt0LmlzTW91bnRlZD0hMTt2YXIgbj0wPT09dC5wYXJlbnRJRDtuJiZkKGUpfXgucHVzaChlKX0scHVyZ2VVbm1vdW50ZWRDb21wb25lbnRzOmZ1bmN0aW9uKCl7aWYoIVAuX3ByZXZlbnRQdXJnaW5nKXtmb3IodmFyIGU9MDtlPHgubGVuZ3RoO2UrKyl7dmFyIHQ9eFtlXTtvKHQpfXgubGVuZ3RoPTB9fSxpc01vdW50ZWQ6ZnVuY3Rpb24oZSl7dmFyIHQ9cyhlKTtyZXR1cm4hIXQmJnQuaXNNb3VudGVkfSxnZXRDdXJyZW50U3RhY2tBZGRlbmR1bTpmdW5jdGlvbihlKXt2YXIgdD1cIlwiO2lmKGUpe3ZhciBuPWEoZSkscj1lLl9vd25lcjt0Kz1pKG4sZS5fc291cmNlLHImJnIuZ2V0TmFtZSgpKX12YXIgbz1tLmN1cnJlbnQsdT1vJiZvLl9kZWJ1Z0lEO3JldHVybiB0Kz1QLmdldFN0YWNrQWRkZW5kdW1CeUlEKHUpfSxnZXRTdGFja0FkZGVuZHVtQnlJRDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJcIjtlOyl0Kz11KGUpLGU9UC5nZXRQYXJlbnRJRChlKTtyZXR1cm4gdH0sZ2V0Q2hpbGRJRHM6ZnVuY3Rpb24oZSl7dmFyIHQ9cyhlKTtyZXR1cm4gdD90LmNoaWxkSURzOltdfSxnZXREaXNwbGF5TmFtZTpmdW5jdGlvbihlKXt2YXIgdD1QLmdldEVsZW1lbnQoZSk7cmV0dXJuIHQ/YSh0KTpudWxsfSxnZXRFbGVtZW50OmZ1bmN0aW9uKGUpe3ZhciB0PXMoZSk7cmV0dXJuIHQ/dC5lbGVtZW50Om51bGx9LGdldE93bmVySUQ6ZnVuY3Rpb24oZSl7dmFyIHQ9UC5nZXRFbGVtZW50KGUpO3JldHVybiB0JiZ0Ll9vd25lcj90Ll9vd25lci5fZGVidWdJRDpudWxsfSxnZXRQYXJlbnRJRDpmdW5jdGlvbihlKXt2YXIgdD1zKGUpO3JldHVybiB0P3QucGFyZW50SUQ6bnVsbH0sZ2V0U291cmNlOmZ1bmN0aW9uKGUpe3ZhciB0PXMoZSksbj10P3QuZWxlbWVudDpudWxsLHI9bnVsbCE9bj9uLl9zb3VyY2U6bnVsbDtyZXR1cm4gcn0sZ2V0VGV4dDpmdW5jdGlvbihlKXt2YXIgdD1QLmdldEVsZW1lbnQoZSk7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/dDpcIm51bWJlclwiPT10eXBlb2YgdD9cIlwiK3Q6bnVsbH0sZ2V0VXBkYXRlQ291bnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9cyhlKTtyZXR1cm4gdD90LnVwZGF0ZUNvdW50OjB9LGdldFJvb3RJRHM6eSxnZXRSZWdpc3RlcmVkSURzOnAscHVzaE5vblN0YW5kYXJkV2FybmluZ1N0YWNrOmZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgY29uc29sZS5yZWFjdFN0YWNrKXt2YXIgbj1bXSxyPW0uY3VycmVudCxvPXImJnIuX2RlYnVnSUQ7dHJ5e2ZvcihlJiZuLnB1c2goe25hbWU6bz9QLmdldERpc3BsYXlOYW1lKG8pOm51bGwsZmlsZU5hbWU6dD90LmZpbGVOYW1lOm51bGwsbGluZU51bWJlcjp0P3QubGluZU51bWJlcjpudWxsfSk7bzspe3ZhciBpPVAuZ2V0RWxlbWVudChvKSxhPVAuZ2V0UGFyZW50SUQobyksdT1QLmdldE93bmVySUQobyksYz11P1AuZ2V0RGlzcGxheU5hbWUodSk6bnVsbCxzPWkmJmkuX3NvdXJjZTtuLnB1c2goe25hbWU6YyxmaWxlTmFtZTpzP3MuZmlsZU5hbWU6bnVsbCxsaW5lTnVtYmVyOnM/cy5saW5lTnVtYmVyOm51bGx9KSxvPWF9fWNhdGNoKGUpe31jb25zb2xlLnJlYWN0U3RhY2sobil9fSxwb3BOb25TdGFuZGFyZFdhcm5pbmdTdGFjazpmdW5jdGlvbigpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGNvbnNvbGUucmVhY3RTdGFja0VuZCYmY29uc29sZS5yZWFjdFN0YWNrRW5kKCl9fTtlLmV4cG9ydHM9UH0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1mdW5jdGlvbigpe307aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7dmFyIHI9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dmFyIG89MCxpPVwiV2FybmluZzogXCIrZS5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIG5bbysrXX0pO1widW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlJiZjb25zb2xlLndhcm4oaSk7dHJ5e3Rocm93IG5ldyBFcnJvcihpKX1jYXRjaChlKXt9fTtuPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgRXJyb3IoXCJgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyBtZXNzYWdlIGFyZ3VtZW50XCIpO2lmKCFlKXtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxvPUFycmF5KG4+Mj9uLTI6MCksaT0yO2k8bjtpKyspb1tpLTJdPWFyZ3VtZW50c1tpXTtyLmFwcGx5KHZvaWQgMCxbdF0uY29uY2F0KG8pKX19fWUuZXhwb3J0cz1ufSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciBuPXt9O1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJk9iamVjdC5mcmVlemUobiksZS5leHBvcnRzPW59KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49XCJTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRFwiO2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSx0LG4pe3RoaXMucHJvcHM9ZSx0aGlzLmNvbnRleHQ9dCx0aGlzLnJlZnM9bCx0aGlzLnVwZGF0ZXI9bnx8Y31mdW5jdGlvbiBvKGUsdCxuKXt0aGlzLnByb3BzPWUsdGhpcy5jb250ZXh0PXQsdGhpcy5yZWZzPWwsdGhpcy51cGRhdGVyPW58fGN9ZnVuY3Rpb24gaSgpe312YXIgYT1uKDUpLHU9big2KSxjPW4oMTcpLHM9big4KSxsPW4oMTIpLHA9bigyKSxmPW4oMTEpO2lmKHIucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e30sci5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oZSxuKXtcIm9iamVjdFwiIT10eXBlb2YgZSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9ZT9cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP3AoITEsXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik6YShcIjg1XCIpOnZvaWQgMCx0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsZSksbiYmdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLG4sXCJzZXRTdGF0ZVwiKX0sci5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oZSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzKSxlJiZ0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsZSxcImZvcmNlVXBkYXRlXCIpfSxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXt2YXIgZD17aXNNb3VudGVkOltcImlzTW91bnRlZFwiLFwiSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gY29tcG9uZW50V2lsbFVubW91bnQgdG8gcHJldmVudCBtZW1vcnkgbGVha3MuXCJdLHJlcGxhY2VTdGF0ZTpbXCJyZXBsYWNlU3RhdGVcIixcIlJlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzIzNikuXCJdfSx5PWZ1bmN0aW9uKGUsdCl7cyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHIucHJvdG90eXBlLGUse2dldDpmdW5jdGlvbigpe2YoITEsXCIlcyguLi4pIGlzIGRlcHJlY2F0ZWQgaW4gcGxhaW4gSmF2YVNjcmlwdCBSZWFjdCBjbGFzc2VzLiAlc1wiLHRbMF0sdFsxXSl9fSl9O2Zvcih2YXIgdiBpbiBkKWQuaGFzT3duUHJvcGVydHkodikmJnkodixkW3ZdKX1pLnByb3RvdHlwZT1yLnByb3RvdHlwZSxvLnByb3RvdHlwZT1uZXcgaSxvLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1vLHUoby5wcm90b3R5cGUsci5wcm90b3R5cGUpLG8ucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwLGUuZXhwb3J0cz17Q29tcG9uZW50OnIsUHVyZUNvbXBvbmVudDpvfX0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMztlLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKCl7aWYocy5jdXJyZW50KXt2YXIgZT1zLmN1cnJlbnQuZ2V0TmFtZSgpO2lmKGUpcmV0dXJuXCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYFwiK2UrXCJgLlwifXJldHVyblwiXCJ9ZnVuY3Rpb24gbyhlKXtpZihudWxsIT09ZSYmdm9pZCAwIT09ZSYmdm9pZCAwIT09ZS5fX3NvdXJjZSl7dmFyIHQ9ZS5fX3NvdXJjZSxuPXQuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKSxyPXQubGluZU51bWJlcjtyZXR1cm5cIiBDaGVjayB5b3VyIGNvZGUgYXQgXCIrbitcIjpcIityK1wiLlwifXJldHVyblwiXCJ9ZnVuY3Rpb24gaShlKXt2YXIgdD1yKCk7aWYoIXQpe3ZhciBuPVwic3RyaW5nXCI9PXR5cGVvZiBlP2U6ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lO24mJih0PVwiIENoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPFwiK24rXCI+LlwiKX1yZXR1cm4gdH1mdW5jdGlvbiBhKGUsbil7aWYoZS5fc3RvcmUmJiFlLl9zdG9yZS52YWxpZGF0ZWQmJm51bGw9PWUua2V5KXtlLl9zdG9yZS52YWxpZGF0ZWQ9ITA7dmFyIHI9aC51bmlxdWVLZXl8fChoLnVuaXF1ZUtleT17fSksbz1pKG4pO2lmKCFyW29dKXtyW29dPSEwO3ZhciBhPVwiXCI7ZSYmZS5fb3duZXImJmUuX293bmVyIT09cy5jdXJyZW50JiYoYT1cIiBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSBcIitlLl9vd25lci5nZXROYW1lKCkrXCIuXCIpLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/dighMSwnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJXMlcyBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJXMnLG8sYSxsLmdldEN1cnJlbnRTdGFja0FkZGVuZHVtKGUpKTp2b2lkIDB9fX1mdW5jdGlvbiB1KGUsdCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpaWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtwLmlzVmFsaWRFbGVtZW50KHIpJiZhKHIsdCl9ZWxzZSBpZihwLmlzVmFsaWRFbGVtZW50KGUpKWUuX3N0b3JlJiYoZS5fc3RvcmUudmFsaWRhdGVkPSEwKTtlbHNlIGlmKGUpe3ZhciBvPXkoZSk7aWYobyYmbyE9PWUuZW50cmllcylmb3IodmFyIGksdT1vLmNhbGwoZSk7IShpPXUubmV4dCgpKS5kb25lOylwLmlzVmFsaWRFbGVtZW50KGkudmFsdWUpJiZhKGkudmFsdWUsdCl9fWZ1bmN0aW9uIGMoZSl7dmFyIG49ZS50eXBlO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pe3ZhciByPW4uZGlzcGxheU5hbWV8fG4ubmFtZTtuLnByb3BUeXBlcyYmZihuLnByb3BUeXBlcyxlLnByb3BzLFwicHJvcFwiLHIsZSxudWxsKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLmdldERlZmF1bHRQcm9wcyYmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/dihuLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCxcImdldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyBkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuXCIpOnZvaWQgMCl9fXZhciBzPW4oNyksbD1uKDEwKSxwPW4oNCksZj1uKDMyKSxkPW4oOCkseT1uKDE4KSx2PW4oMyksbT1uKDExKSxoPXt9LGc9e2NyZWF0ZUVsZW1lbnQ6ZnVuY3Rpb24oZSxuLGkpe3ZhciBhPVwic3RyaW5nXCI9PXR5cGVvZiBlfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlO2lmKCFhJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZcInN0cmluZ1wiIT10eXBlb2YgZSl7dmFyIHM9XCJcIjsodm9pZCAwPT09ZXx8XCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lJiYwPT09T2JqZWN0LmtleXMoZSkubGVuZ3RoKSYmKHMrPVwiIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlIGl0J3MgZGVmaW5lZCBpbi5cIik7dmFyIGY9byhuKTtzKz1mP2Y6cigpLHMrPWwuZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0oKTt2YXIgZD1udWxsIT09biYmdm9pZCAwIT09biYmdm9pZCAwIT09bi5fX3NvdXJjZT9uLl9fc291cmNlOm51bGw7bC5wdXNoTm9uU3RhbmRhcmRXYXJuaW5nU3RhY2soITAsZCksXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj92KCExLFwiUmVhY3QuY3JlYXRlRWxlbWVudDogdHlwZSBpcyBpbnZhbGlkIC0tIGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKSBidXQgZ290OiAlcy4lc1wiLG51bGw9PWU/ZTp0eXBlb2YgZSxzKTp2b2lkIDAsbC5wb3BOb25TdGFuZGFyZFdhcm5pbmdTdGFjaygpfXZhciB5PXAuY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYobnVsbD09eSlyZXR1cm4geTtpZihhKWZvcih2YXIgbT0yO208YXJndW1lbnRzLmxlbmd0aDttKyspdShhcmd1bWVudHNbbV0sZSk7cmV0dXJuIGMoeSkseX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihlKXt2YXIgbj1nLmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLGUpO3JldHVybiBuLnR5cGU9ZSxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZkJiZPYmplY3QuZGVmaW5lUHJvcGVydHkobixcInR5cGVcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbSghMSxcIkZhY3RvcnkudHlwZSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdGhlIGNsYXNzIGRpcmVjdGx5IGJlZm9yZSBwYXNzaW5nIGl0IHRvIGNyZWF0ZUZhY3RvcnkuXCIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidHlwZVwiLHt2YWx1ZTplfSksZX19KSxufSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1wLmNsb25lRWxlbWVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyksbz0yO288YXJndW1lbnRzLmxlbmd0aDtvKyspdShhcmd1bWVudHNbb10sci50eXBlKTtyZXR1cm4gYyhyKSxyfX07ZS5leHBvcnRzPWd9KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlLG4pe2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3ZhciByPWUuY29uc3RydWN0b3I7XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9vKCExLFwiJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuIFRoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gVGhpcyBpcyBhIG5vLW9wLiBQbGVhc2UgY2hlY2sgdGhlIGNvZGUgZm9yIHRoZSAlcyBjb21wb25lbnQuXCIsbixuLHImJihyLmRpc3BsYXlOYW1lfHxyLm5hbWUpfHxcIlJlYWN0Q2xhc3NcIik6dm9pZCAwfX12YXIgbz1uKDMpLGk9e2lzTW91bnRlZDpmdW5jdGlvbihlKXtyZXR1cm4hMX0sZW5xdWV1ZUNhbGxiYWNrOmZ1bmN0aW9uKGUsdCl7fSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oZSl7cihlLFwiZm9yY2VVcGRhdGVcIil9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oZSx0KXtyKGUsXCJyZXBsYWNlU3RhdGVcIil9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihlLHQpe3IoZSxcInNldFN0YXRlXCIpfX07ZS5leHBvcnRzPWl9KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXt2YXIgdD1lJiYociYmZVtyXXx8ZVtvXSk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm4gdH12YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixvPVwiQEBpdGVyYXRvclwiO2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGV9ZnVuY3Rpb24gbyhlLG4sbyl7ZnVuY3Rpb24gcChlLG4scil7Zm9yKHZhciBvIGluIG4pbi5oYXNPd25Qcm9wZXJ0eShvKSYmXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmYyhcImZ1bmN0aW9uXCI9PXR5cGVvZiBuW29dLFwiJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSBSZWFjdC5Qcm9wVHlwZXMuXCIsZS5kaXNwbGF5TmFtZXx8XCJSZWFjdENsYXNzXCIsc1tyXSxvKX1mdW5jdGlvbiBmKGUsdCl7dmFyIG49Xy5oYXNPd25Qcm9wZXJ0eSh0KT9fW3RdOm51bGw7eC5oYXNPd25Qcm9wZXJ0eSh0KSYmdShcIk9WRVJSSURFX0JBU0VcIj09PW4sXCJSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgYCVzYCBmcm9tIHlvdXIgY2xhc3Mgc3BlY2lmaWNhdGlvbi4gRW5zdXJlIHRoYXQgeW91ciBtZXRob2QgbmFtZXMgZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLlwiLHQpLGUmJnUoXCJERUZJTkVfTUFOWVwiPT09bnx8XCJERUZJTkVfTUFOWV9NRVJHRURcIj09PW4sXCJSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lIGAlc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSB0byBhIG1peGluLlwiLHQpfWZ1bmN0aW9uIGQoZSxyKXtpZihyKXt1KFwiZnVuY3Rpb25cIiE9dHlwZW9mIHIsXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byB1c2UgYSBjb21wb25lbnQgY2xhc3Mgb3IgZnVuY3Rpb24gYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC5cIiksdSghbihyKSxcIlJlYWN0Q2xhc3M6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGNvbXBvbmVudCBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LlwiKTt2YXIgbz1lLnByb3RvdHlwZSxpPW8uX19yZWFjdEF1dG9CaW5kUGFpcnM7ci5oYXNPd25Qcm9wZXJ0eShsKSYmTy5taXhpbnMoZSxyLm1peGlucyk7Zm9yKHZhciBhIGluIHIpaWYoci5oYXNPd25Qcm9wZXJ0eShhKSYmYSE9PWwpe3ZhciBzPXJbYV0scD1vLmhhc093blByb3BlcnR5KGEpO2lmKGYocCxhKSxPLmhhc093blByb3BlcnR5KGEpKU9bYV0oZSxzKTtlbHNle3ZhciBkPV8uaGFzT3duUHJvcGVydHkoYSkseT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzLHY9eSYmIWQmJiFwJiZyLmF1dG9iaW5kIT09ITE7aWYodilpLnB1c2goYSxzKSxvW2FdPXM7ZWxzZSBpZihwKXt2YXIgZz1fW2FdO3UoZCYmKFwiREVGSU5FX01BTllfTUVSR0VEXCI9PT1nfHxcIkRFRklORV9NQU5ZXCI9PT1nKSxcIlJlYWN0Q2xhc3M6IFVuZXhwZWN0ZWQgc3BlYyBwb2xpY3kgJXMgZm9yIGtleSAlcyB3aGVuIG1peGluZyBpbiBjb21wb25lbnQgc3BlY3MuXCIsZyxhKSxcIkRFRklORV9NQU5ZX01FUkdFRFwiPT09Zz9vW2FdPW0ob1thXSxzKTpcIkRFRklORV9NQU5ZXCI9PT1nJiYob1thXT1oKG9bYV0scykpfWVsc2Ugb1thXT1zLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHMmJnIuZGlzcGxheU5hbWUmJihvW2FdLmRpc3BsYXlOYW1lPXIuZGlzcGxheU5hbWUrXCJfXCIrYSl9fX1lbHNlIGlmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3ZhciBiPXR5cGVvZiByLEU9XCJvYmplY3RcIj09PWImJm51bGwhPT1yO1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJmMoRSxcIiVzOiBZb3UncmUgYXR0ZW1wdGluZyB0byBpbmNsdWRlIGEgbWl4aW4gdGhhdCBpcyBlaXRoZXIgbnVsbCBvciBub3QgYW4gb2JqZWN0LiBDaGVjayB0aGUgbWl4aW5zIGluY2x1ZGVkIGJ5IHRoZSBjb21wb25lbnQsIGFzIHdlbGwgYXMgYW55IG1peGlucyB0aGV5IGluY2x1ZGUgdGhlbXNlbHZlcy4gRXhwZWN0ZWQgb2JqZWN0IGJ1dCBnb3QgJXMuXCIsZS5kaXNwbGF5TmFtZXx8XCJSZWFjdENsYXNzXCIsbnVsbD09PXI/bnVsbDpiKX19ZnVuY3Rpb24geShlLHQpe2lmKHQpZm9yKHZhciBuIGluIHQpe3ZhciByPXRbbl07aWYodC5oYXNPd25Qcm9wZXJ0eShuKSl7dmFyIG89biBpbiBPO3UoIW8sJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYSByZXNlcnZlZCBwcm9wZXJ0eSwgYCVzYCwgdGhhdCBzaG91bGRuXFwndCBiZSBvbiB0aGUgXCJzdGF0aWNzXCIga2V5LiBEZWZpbmUgaXQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3Rvci4nLG4pO3ZhciBpPW4gaW4gZTt1KCFpLFwiUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgdG8gYSBtaXhpbi5cIixuKSxlW25dPXJ9fX1mdW5jdGlvbiB2KGUsdCl7dShlJiZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJvYmplY3RcIj09dHlwZW9mIHQsXCJtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6IENhbm5vdCBtZXJnZSBub24tb2JqZWN0cy5cIik7Zm9yKHZhciBuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmKHUodm9pZCAwPT09ZVtuXSxcIm1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvIGdldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgd2l0aCBjbGFzaGluZyBrZXlzLlwiLG4pLGVbbl09dFtuXSk7cmV0dXJuIGV9ZnVuY3Rpb24gbShlLHQpe3JldHVybiBmdW5jdGlvbigpe3ZhciBuPWUuYXBwbHkodGhpcyxhcmd1bWVudHMpLHI9dC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYobnVsbD09bilyZXR1cm4gcjtpZihudWxsPT1yKXJldHVybiBuO3ZhciBvPXt9O3JldHVybiB2KG8sbiksdihvLHIpLG99fWZ1bmN0aW9uIGgoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19ZnVuY3Rpb24gZyhlLG4pe3ZhciByPW4uYmluZChlKTtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXtyLl9fcmVhY3RCb3VuZENvbnRleHQ9ZSxyLl9fcmVhY3RCb3VuZE1ldGhvZD1uLHIuX19yZWFjdEJvdW5kQXJndW1lbnRzPW51bGw7dmFyIG89ZS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSxpPXIuYmluZDtyLmJpbmQ9ZnVuY3Rpb24oYSl7Zm9yKHZhciB1PWFyZ3VtZW50cy5sZW5ndGgscz1BcnJheSh1PjE/dS0xOjApLGw9MTtsPHU7bCsrKXNbbC0xXT1hcmd1bWVudHNbbF07aWYoYSE9PWUmJm51bGwhPT1hKVwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJmMoITEsXCJiaW5kKCk6IFJlYWN0IGNvbXBvbmVudCBtZXRob2RzIG1heSBvbmx5IGJlIGJvdW5kIHRvIHRoZSBjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAlc1wiLG8pO2Vsc2UgaWYoIXMubGVuZ3RoKXJldHVyblwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJmMoITEsXCJiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gUmVhY3QgZG9lcyB0aGlzIGZvciB5b3UgYXV0b21hdGljYWxseSBpbiBhIGhpZ2gtcGVyZm9ybWFuY2Ugd2F5LCBzbyB5b3UgY2FuIHNhZmVseSByZW1vdmUgdGhpcyBjYWxsLiBTZWUgJXNcIixvKSxyO3ZhciBwPWkuYXBwbHkocixhcmd1bWVudHMpO3JldHVybiBwLl9fcmVhY3RCb3VuZENvbnRleHQ9ZSxwLl9fcmVhY3RCb3VuZE1ldGhvZD1uLHAuX19yZWFjdEJvdW5kQXJndW1lbnRzPXMscH19cmV0dXJuIHJ9ZnVuY3Rpb24gYihlKXtmb3IodmFyIHQ9ZS5fX3JlYWN0QXV0b0JpbmRQYWlycyxuPTA7bjx0Lmxlbmd0aDtuKz0yKXt2YXIgcj10W25dLG89dFtuKzFdO2Vbcl09ZyhlLG8pfX1mdW5jdGlvbiBFKGUpe3ZhciBuPXIoZnVuY3Rpb24oZSxyLGkpe1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJmModGhpcyBpbnN0YW5jZW9mIG4sXCJTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciBKU1ggaW5zdGVhZC4gU2VlOiBodHRwczovL2ZiLm1lL3JlYWN0LWxlZ2FjeWZhY3RvcnlcIiksdGhpcy5fX3JlYWN0QXV0b0JpbmRQYWlycy5sZW5ndGgmJmIodGhpcyksdGhpcy5wcm9wcz1lLHRoaXMuY29udGV4dD1yLHRoaXMucmVmcz1hLHRoaXMudXBkYXRlcj1pfHxvLHRoaXMuc3RhdGU9bnVsbDt2YXIgcz10aGlzLmdldEluaXRpYWxTdGF0ZT90aGlzLmdldEluaXRpYWxTdGF0ZSgpOm51bGw7XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmdm9pZCAwPT09cyYmdGhpcy5nZXRJbml0aWFsU3RhdGUuX2lzTW9ja0Z1bmN0aW9uJiYocz1udWxsKSx1KFwib2JqZWN0XCI9PXR5cGVvZiBzJiYhQXJyYXkuaXNBcnJheShzKSxcIiVzLmdldEluaXRpYWxTdGF0ZSgpOiBtdXN0IHJldHVybiBhbiBvYmplY3Qgb3IgbnVsbFwiLG4uZGlzcGxheU5hbWV8fFwiUmVhY3RDb21wb3NpdGVDb21wb25lbnRcIiksdGhpcy5zdGF0ZT1zfSk7bi5wcm90b3R5cGU9bmV3IFAsbi5wcm90b3R5cGUuY29uc3RydWN0b3I9bixuLnByb3RvdHlwZS5fX3JlYWN0QXV0b0JpbmRQYWlycz1bXSxOLmZvckVhY2goZC5iaW5kKG51bGwsbikpLGQobixEKSxkKG4sZSksZChuLHcpLG4uZ2V0RGVmYXVsdFByb3BzJiYobi5kZWZhdWx0UHJvcHM9bi5nZXREZWZhdWx0UHJvcHMoKSksXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmKG4uZ2V0RGVmYXVsdFByb3BzJiYobi5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQ9e30pLG4ucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZSYmKG4ucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZD17fSkpLHUobi5wcm90b3R5cGUucmVuZGVyLFwiY3JlYXRlQ2xhc3MoLi4uKTogQ2xhc3Mgc3BlY2lmaWNhdGlvbiBtdXN0IGltcGxlbWVudCBhIGByZW5kZXJgIG1ldGhvZC5cIiksXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmKGMoIW4ucHJvdG90eXBlLmNvbXBvbmVudFNob3VsZFVwZGF0ZSxcIiVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzIGV4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLlwiLGUuZGlzcGxheU5hbWV8fFwiQSBjb21wb25lbnRcIiksYyghbi5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyxcIiVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpP1wiLGUuZGlzcGxheU5hbWV8fFwiQSBjb21wb25lbnRcIikpO2Zvcih2YXIgaSBpbiBfKW4ucHJvdG90eXBlW2ldfHwobi5wcm90b3R5cGVbaV09bnVsbCk7cmV0dXJuIG59dmFyIE49W10sXz17bWl4aW5zOlwiREVGSU5FX01BTllcIixzdGF0aWNzOlwiREVGSU5FX01BTllcIixwcm9wVHlwZXM6XCJERUZJTkVfTUFOWVwiLGNvbnRleHRUeXBlczpcIkRFRklORV9NQU5ZXCIsY2hpbGRDb250ZXh0VHlwZXM6XCJERUZJTkVfTUFOWVwiLGdldERlZmF1bHRQcm9wczpcIkRFRklORV9NQU5ZX01FUkdFRFwiLGdldEluaXRpYWxTdGF0ZTpcIkRFRklORV9NQU5ZX01FUkdFRFwiLGdldENoaWxkQ29udGV4dDpcIkRFRklORV9NQU5ZX01FUkdFRFwiLHJlbmRlcjpcIkRFRklORV9PTkNFXCIsY29tcG9uZW50V2lsbE1vdW50OlwiREVGSU5FX01BTllcIixjb21wb25lbnREaWRNb3VudDpcIkRFRklORV9NQU5ZXCIsY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczpcIkRFRklORV9NQU5ZXCIsc2hvdWxkQ29tcG9uZW50VXBkYXRlOlwiREVGSU5FX09OQ0VcIixjb21wb25lbnRXaWxsVXBkYXRlOlwiREVGSU5FX01BTllcIixjb21wb25lbnREaWRVcGRhdGU6XCJERUZJTkVfTUFOWVwiLGNvbXBvbmVudFdpbGxVbm1vdW50OlwiREVGSU5FX01BTllcIix1cGRhdGVDb21wb25lbnQ6XCJPVkVSUklERV9CQVNFXCJ9LE89e2Rpc3BsYXlOYW1lOmZ1bmN0aW9uKGUsdCl7ZS5kaXNwbGF5TmFtZT10fSxtaXhpbnM6ZnVuY3Rpb24oZSx0KXtpZih0KWZvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKWQoZSx0W25dKX0sY2hpbGRDb250ZXh0VHlwZXM6ZnVuY3Rpb24oZSxuKXtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZwKGUsbixcImNoaWxkQ29udGV4dFwiKSxlLmNoaWxkQ29udGV4dFR5cGVzPWkoe30sZS5jaGlsZENvbnRleHRUeXBlcyxuKX0sY29udGV4dFR5cGVzOmZ1bmN0aW9uKGUsbil7XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmcChlLG4sXCJjb250ZXh0XCIpLGUuY29udGV4dFR5cGVzPWkoe30sZS5jb250ZXh0VHlwZXMsbil9LGdldERlZmF1bHRQcm9wczpmdW5jdGlvbihlLHQpe2UuZ2V0RGVmYXVsdFByb3BzP2UuZ2V0RGVmYXVsdFByb3BzPW0oZS5nZXREZWZhdWx0UHJvcHMsdCk6ZS5nZXREZWZhdWx0UHJvcHM9dH0scHJvcFR5cGVzOmZ1bmN0aW9uKGUsbil7XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmcChlLG4sXCJwcm9wXCIpLGUucHJvcFR5cGVzPWkoe30sZS5wcm9wVHlwZXMsbil9LHN0YXRpY3M6ZnVuY3Rpb24oZSx0KXt5KGUsdCl9LGF1dG9iaW5kOmZ1bmN0aW9uKCl7fX0sRD17Y29tcG9uZW50RGlkTW91bnQ6ZnVuY3Rpb24oKXt0aGlzLl9faXNNb3VudGVkPSEwfX0sdz17Y29tcG9uZW50V2lsbFVubW91bnQ6ZnVuY3Rpb24oKXt0aGlzLl9faXNNb3VudGVkPSExfX0seD17cmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGUsdCl7dGhpcy51cGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUodGhpcyxlLHQpfSxpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiYoYyh0aGlzLl9fZGlkV2FybklzTW91bnRlZCxcIiVzOiBpc01vdW50ZWQgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gY29tcG9uZW50V2lsbFVubW91bnQgdG8gcHJldmVudCBtZW1vcnkgbGVha3MuXCIsdGhpcy5jb25zdHJ1Y3RvciYmdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZXx8dGhpcy5uYW1lfHxcIkNvbXBvbmVudFwiKSx0aGlzLl9fZGlkV2FybklzTW91bnRlZD0hMCksISF0aGlzLl9faXNNb3VudGVkfX0sUD1mdW5jdGlvbigpe307cmV0dXJuIGkoUC5wcm90b3R5cGUsZS5wcm90b3R5cGUseCksRX12YXIgaT1uKDYpLGE9bigxMiksdT1uKDIpO2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpdmFyIGM9bigzKTt2YXIgcyxsPVwibWl4aW5zXCI7cz1cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP3twcm9wOlwicHJvcFwiLGNvbnRleHQ6XCJjb250ZXh0XCIsY2hpbGRDb250ZXh0OlwiY2hpbGQgY29udGV4dFwifTp7fSxlLmV4cG9ydHM9b30pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUsbixyLGMscyl7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVilmb3IodmFyIGwgaW4gZSlpZihlLmhhc093blByb3BlcnR5KGwpKXt2YXIgcDt0cnl7byhcImZ1bmN0aW9uXCI9PXR5cGVvZiBlW2xdLFwiJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSBSZWFjdC5Qcm9wVHlwZXMuXCIsY3x8XCJSZWFjdCBjbGFzc1wiLHIsbCkscD1lW2xdKG4sbCxjLHIsbnVsbCxhKX1jYXRjaChlKXtwPWV9aWYoaSghcHx8cCBpbnN0YW5jZW9mIEVycm9yLFwiJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcyBgJXNgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuIFlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyIGNyZWF0b3IgKGFycmF5T2YsIGluc3RhbmNlT2YsIG9iamVjdE9mLCBvbmVPZiwgb25lT2ZUeXBlLCBhbmQgc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLlwiLGN8fFwiUmVhY3QgY2xhc3NcIixyLGwsdHlwZW9mIHApLHAgaW5zdGFuY2VvZiBFcnJvciYmIShwLm1lc3NhZ2UgaW4gdSkpe3VbcC5tZXNzYWdlXT0hMDt2YXIgZj1zP3MoKTpcIlwiO2koITEsXCJGYWlsZWQgJXMgdHlwZTogJXMlc1wiLHIscC5tZXNzYWdlLG51bGwhPWY/ZjpcIlwiKX19fWlmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpdmFyIG89bigyKSxpPW4oMyksYT1uKDEzKSx1PXt9O2UuZXhwb3J0cz1yfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigyMik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PSExO3JldHVybiByKGUsdCl9fSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciByPW4oOSksbz1uKDIpLGk9bigzKSxhPW4oMTMpLHU9bigyMCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsbil7ZnVuY3Rpb24gYyhlKXt2YXIgdD1lJiYoayYmZVtrXXx8ZVtJXSk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm4gdH1mdW5jdGlvbiBzKGUsdCl7cmV0dXJuIGU9PT10PzAhPT1lfHwxL2U9PT0xL3Q6ZSE9PWUmJnQhPT10fWZ1bmN0aW9uIGwoZSl7dGhpcy5tZXNzYWdlPWUsdGhpcy5zdGFjaz1cIlwifWZ1bmN0aW9uIHAoZSl7ZnVuY3Rpb24gcihyLHMscCxmLGQseSx2KXtpZihmPWZ8fGoseT15fHxwLHYhPT1hKWlmKG4pbyghMSxcIkNhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuIFVzZSBgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKClgIHRvIGNhbGwgdGhlbS4gUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlc1wiKTtlbHNlIGlmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlKXt2YXIgbT1mK1wiOlwiK3A7IXVbbV0mJmM8MyYmKGkoITEsXCJZb3UgYXJlIG1hbnVhbGx5IGNhbGxpbmcgYSBSZWFjdC5Qcm9wVHlwZXMgdmFsaWRhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIGAlc2AgcHJvcCBvbiBgJXNgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgdGhyb3cgaW4gdGhlIHN0YW5kYWxvbmUgYHByb3AtdHlwZXNgIHBhY2thZ2UuIFlvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8gYSB0aGlyZC1wYXJ0eSBQcm9wVHlwZXMgbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzIGZvciBkZXRhaWxzLlwiLHksZiksdVttXT0hMCxjKyspfXJldHVybiBudWxsPT1zW3BdP3I/bmV3IGwobnVsbD09PXNbcF0/XCJUaGUgXCIrZCtcIiBgXCIreStcImAgaXMgbWFya2VkIGFzIHJlcXVpcmVkIFwiKyhcImluIGBcIitmK1wiYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuXCIpOlwiVGhlIFwiK2QrXCIgYFwiK3krXCJgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiBcIisoXCJgXCIrZitcImAsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuXCIpKTpudWxsOmUocyxwLGYsZCx5KX1pZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXZhciB1PXt9LGM9MDt2YXIgcz1yLmJpbmQobnVsbCwhMSk7cmV0dXJuIHMuaXNSZXF1aXJlZD1yLmJpbmQobnVsbCwhMCksc31mdW5jdGlvbiBmKGUpe2Z1bmN0aW9uIHQodCxuLHIsbyxpLGEpe3ZhciB1PXRbbl0sYz1EKHUpO2lmKGMhPT1lKXt2YXIgcz13KHUpO3JldHVybiBuZXcgbChcIkludmFsaWQgXCIrbytcIiBgXCIraStcImAgb2YgdHlwZSBcIisoXCJgXCIrcytcImAgc3VwcGxpZWQgdG8gYFwiK3IrXCJgLCBleHBlY3RlZCBcIikrKFwiYFwiK2UrXCJgLlwiKSl9cmV0dXJuIG51bGx9cmV0dXJuIHAodCl9ZnVuY3Rpb24gZCgpe3JldHVybiBwKHIudGhhdFJldHVybnNOdWxsKX1mdW5jdGlvbiB5KGUpe2Z1bmN0aW9uIHQodCxuLHIsbyxpKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXJldHVybiBuZXcgbChcIlByb3BlcnR5IGBcIitpK1wiYCBvZiBjb21wb25lbnQgYFwiK3IrXCJgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLlwiKTt2YXIgdT10W25dO2lmKCFBcnJheS5pc0FycmF5KHUpKXt2YXIgYz1EKHUpO3JldHVybiBuZXcgbChcIkludmFsaWQgXCIrbytcIiBgXCIraStcImAgb2YgdHlwZSBcIisoXCJgXCIrYytcImAgc3VwcGxpZWQgdG8gYFwiK3IrXCJgLCBleHBlY3RlZCBhbiBhcnJheS5cIikpfWZvcih2YXIgcz0wO3M8dS5sZW5ndGg7cysrKXt2YXIgcD1lKHUscyxyLG8saStcIltcIitzK1wiXVwiLGEpO2lmKHAgaW5zdGFuY2VvZiBFcnJvcilyZXR1cm4gcH1yZXR1cm4gbnVsbH1yZXR1cm4gcCh0KX1mdW5jdGlvbiB2KCl7ZnVuY3Rpb24gdCh0LG4scixvLGkpe3ZhciBhPXRbbl07aWYoIWUoYSkpe3ZhciB1PUQoYSk7cmV0dXJuIG5ldyBsKFwiSW52YWxpZCBcIitvK1wiIGBcIitpK1wiYCBvZiB0eXBlIFwiKyhcImBcIit1K1wiYCBzdXBwbGllZCB0byBgXCIrcitcImAsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudC5cIikpfXJldHVybiBudWxsfXJldHVybiBwKHQpfWZ1bmN0aW9uIG0oZSl7ZnVuY3Rpb24gdCh0LG4scixvLGkpe2lmKCEodFtuXWluc3RhbmNlb2YgZSkpe3ZhciBhPWUubmFtZXx8aix1PVAodFtuXSk7cmV0dXJuIG5ldyBsKFwiSW52YWxpZCBcIitvK1wiIGBcIitpK1wiYCBvZiB0eXBlIFwiKyhcImBcIit1K1wiYCBzdXBwbGllZCB0byBgXCIrcitcImAsIGV4cGVjdGVkIFwiKSsoXCJpbnN0YW5jZSBvZiBgXCIrYStcImAuXCIpKX1yZXR1cm4gbnVsbH1yZXR1cm4gcCh0KX1mdW5jdGlvbiBoKGUpe2Z1bmN0aW9uIG4odCxuLHIsbyxpKXtmb3IodmFyIGE9dFtuXSx1PTA7dTxlLmxlbmd0aDt1KyspaWYocyhhLGVbdV0pKXJldHVybiBudWxsO3ZhciBjPUpTT04uc3RyaW5naWZ5KGUpO3JldHVybiBuZXcgbChcIkludmFsaWQgXCIrbytcIiBgXCIraStcImAgb2YgdmFsdWUgYFwiK2ErXCJgIFwiKyhcInN1cHBsaWVkIHRvIGBcIityK1wiYCwgZXhwZWN0ZWQgb25lIG9mIFwiK2MrXCIuXCIpKX1yZXR1cm4gQXJyYXkuaXNBcnJheShlKT9wKG4pOihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2koITEsXCJJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBpbnN0YW5jZSBvZiBhcnJheS5cIik6dm9pZCAwLHIudGhhdFJldHVybnNOdWxsKX1mdW5jdGlvbiBnKGUpe2Z1bmN0aW9uIHQodCxuLHIsbyxpKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXJldHVybiBuZXcgbChcIlByb3BlcnR5IGBcIitpK1wiYCBvZiBjb21wb25lbnQgYFwiK3IrXCJgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi5cIik7dmFyIHU9dFtuXSxjPUQodSk7aWYoXCJvYmplY3RcIiE9PWMpcmV0dXJuIG5ldyBsKFwiSW52YWxpZCBcIitvK1wiIGBcIitpK1wiYCBvZiB0eXBlIFwiKyhcImBcIitjK1wiYCBzdXBwbGllZCB0byBgXCIrcitcImAsIGV4cGVjdGVkIGFuIG9iamVjdC5cIikpO2Zvcih2YXIgcyBpbiB1KWlmKHUuaGFzT3duUHJvcGVydHkocykpe3ZhciBwPWUodSxzLHIsbyxpK1wiLlwiK3MsYSk7aWYocCBpbnN0YW5jZW9mIEVycm9yKXJldHVybiBwfXJldHVybiBudWxsfXJldHVybiBwKHQpfWZ1bmN0aW9uIGIoZSl7ZnVuY3Rpb24gbih0LG4scixvLGkpe2Zvcih2YXIgdT0wO3U8ZS5sZW5ndGg7dSsrKXt2YXIgYz1lW3VdO2lmKG51bGw9PWModCxuLHIsbyxpLGEpKXJldHVybiBudWxsfXJldHVybiBuZXcgbChcIkludmFsaWQgXCIrbytcIiBgXCIraStcImAgc3VwcGxpZWQgdG8gXCIrKFwiYFwiK3IrXCJgLlwiKSl9aWYoIUFycmF5LmlzQXJyYXkoZSkpcmV0dXJuXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9pKCExLFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LlwiKTp2b2lkIDAsci50aGF0UmV0dXJuc051bGw7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciB1PWVbb107aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdSlyZXR1cm4gaSghMSxcIkludmFsaWQgYXJndW1lbnQgc3VwcGxpZCB0byBvbmVPZlR5cGUuIEV4cGVjdGVkIGFuIGFycmF5IG9mIGNoZWNrIGZ1bmN0aW9ucywgYnV0IHJlY2VpdmVkICVzIGF0IGluZGV4ICVzLlwiLHgodSksbyksci50aGF0UmV0dXJuc051bGx9cmV0dXJuIHAobil9ZnVuY3Rpb24gRSgpe2Z1bmN0aW9uIGUoZSx0LG4scixvKXtyZXR1cm4gXyhlW3RdKT9udWxsOm5ldyBsKFwiSW52YWxpZCBcIityK1wiIGBcIitvK1wiYCBzdXBwbGllZCB0byBcIisoXCJgXCIrbitcImAsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLlwiKSl9cmV0dXJuIHAoZSl9ZnVuY3Rpb24gTihlKXtmdW5jdGlvbiB0KHQsbixyLG8saSl7dmFyIHU9dFtuXSxjPUQodSk7aWYoXCJvYmplY3RcIiE9PWMpcmV0dXJuIG5ldyBsKFwiSW52YWxpZCBcIitvK1wiIGBcIitpK1wiYCBvZiB0eXBlIGBcIitjK1wiYCBcIisoXCJzdXBwbGllZCB0byBgXCIrcitcImAsIGV4cGVjdGVkIGBvYmplY3RgLlwiKSk7Zm9yKHZhciBzIGluIGUpe3ZhciBwPWVbc107aWYocCl7dmFyIGY9cCh1LHMscixvLGkrXCIuXCIrcyxhKTtpZihmKXJldHVybiBmfX1yZXR1cm4gbnVsbH1yZXR1cm4gcCh0KX1mdW5jdGlvbiBfKHQpe3N3aXRjaCh0eXBlb2YgdCl7Y2FzZVwibnVtYmVyXCI6Y2FzZVwic3RyaW5nXCI6Y2FzZVwidW5kZWZpbmVkXCI6cmV0dXJuITA7Y2FzZVwiYm9vbGVhblwiOnJldHVybiF0O2Nhc2VcIm9iamVjdFwiOmlmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuIHQuZXZlcnkoXyk7aWYobnVsbD09PXR8fGUodCkpcmV0dXJuITA7dmFyIG49Yyh0KTtpZighbilyZXR1cm4hMTt2YXIgcixvPW4uY2FsbCh0KTtpZihuIT09dC5lbnRyaWVzKXtmb3IoOyEocj1vLm5leHQoKSkuZG9uZTspaWYoIV8oci52YWx1ZSkpcmV0dXJuITF9ZWxzZSBmb3IoOyEocj1vLm5leHQoKSkuZG9uZTspe3ZhciBpPXIudmFsdWU7aWYoaSYmIV8oaVsxXSkpcmV0dXJuITF9cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gTyhlLHQpe3JldHVyblwic3ltYm9sXCI9PT1lfHwoXCJTeW1ib2xcIj09PXRbXCJAQHRvU3RyaW5nVGFnXCJdfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQgaW5zdGFuY2VvZiBTeW1ib2wpfWZ1bmN0aW9uIEQoZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/XCJhcnJheVwiOmUgaW5zdGFuY2VvZiBSZWdFeHA/XCJvYmplY3RcIjpPKHQsZSk/XCJzeW1ib2xcIjp0fWZ1bmN0aW9uIHcoZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGV8fG51bGw9PT1lKXJldHVyblwiXCIrZTt2YXIgdD1EKGUpO2lmKFwib2JqZWN0XCI9PT10KXtpZihlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm5cImRhdGVcIjtpZihlIGluc3RhbmNlb2YgUmVnRXhwKXJldHVyblwicmVnZXhwXCJ9cmV0dXJuIHR9ZnVuY3Rpb24geChlKXt2YXIgdD13KGUpO3N3aXRjaCh0KXtjYXNlXCJhcnJheVwiOmNhc2VcIm9iamVjdFwiOnJldHVyblwiYW4gXCIrdDtjYXNlXCJib29sZWFuXCI6Y2FzZVwiZGF0ZVwiOmNhc2VcInJlZ2V4cFwiOnJldHVyblwiYSBcIit0O2RlZmF1bHQ6cmV0dXJuIHR9fWZ1bmN0aW9uIFAoZSl7cmV0dXJuIGUuY29uc3RydWN0b3ImJmUuY29uc3RydWN0b3IubmFtZT9lLmNvbnN0cnVjdG9yLm5hbWU6an12YXIgaz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixJPVwiQEBpdGVyYXRvclwiLGo9XCI8PGFub255bW91cz4+XCIsUj17YXJyYXk6ZihcImFycmF5XCIpLGJvb2w6ZihcImJvb2xlYW5cIiksZnVuYzpmKFwiZnVuY3Rpb25cIiksbnVtYmVyOmYoXCJudW1iZXJcIiksb2JqZWN0OmYoXCJvYmplY3RcIiksc3RyaW5nOmYoXCJzdHJpbmdcIiksc3ltYm9sOmYoXCJzeW1ib2xcIiksYW55OmQoKSxhcnJheU9mOnksZWxlbWVudDp2KCksaW5zdGFuY2VPZjptLG5vZGU6RSgpLG9iamVjdE9mOmcsb25lT2Y6aCxvbmVPZlR5cGU6YixzaGFwZTpOfTtyZXR1cm4gbC5wcm90b3R5cGU9RXJyb3IucHJvdG90eXBlLFIuY2hlY2tQcm9wVHlwZXM9dSxSLlByb3BUeXBlcz1SLFJ9fSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7dmFyIHQ9L1s9Ol0vZyxuPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifSxyPShcIlwiK2UpLnJlcGxhY2UodCxmdW5jdGlvbihlKXtyZXR1cm4gbltlXX0pO3JldHVyblwiJFwiK3J9ZnVuY3Rpb24gcihlKXt2YXIgdD0vKD0wfD0yKS9nLG49e1wiPTBcIjpcIj1cIixcIj0yXCI6XCI6XCJ9LHI9XCIuXCI9PT1lWzBdJiZcIiRcIj09PWVbMV0/ZS5zdWJzdHJpbmcoMik6ZS5zdWJzdHJpbmcoMSk7cmV0dXJuKFwiXCIrcikucmVwbGFjZSh0LGZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfSl9dmFyIG89e2VzY2FwZTpuLHVuZXNjYXBlOnJ9O2UuZXhwb3J0cz1vfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciByPW4oNSksbz1uKDIpLGk9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0Lmluc3RhbmNlUG9vbC5sZW5ndGgpe3ZhciBuPXQuaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiB0LmNhbGwobixlKSxufXJldHVybiBuZXcgdChlKX0sYT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYobi5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgcj1uLmluc3RhbmNlUG9vbC5wb3AoKTtyZXR1cm4gbi5jYWxsKHIsZSx0KSxyfXJldHVybiBuZXcgbihlLHQpfSx1PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzO2lmKHIuaW5zdGFuY2VQb29sLmxlbmd0aCl7dmFyIG89ci5pbnN0YW5jZVBvb2wucG9wKCk7cmV0dXJuIHIuY2FsbChvLGUsdCxuKSxvfXJldHVybiBuZXcgcihlLHQsbil9LGM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89dGhpcztpZihvLmluc3RhbmNlUG9vbC5sZW5ndGgpe3ZhciBpPW8uaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiBvLmNhbGwoaSxlLHQsbixyKSxpfXJldHVybiBuZXcgbyhlLHQsbixyKX0scz1mdW5jdGlvbihlKXt2YXIgbj10aGlzO2UgaW5zdGFuY2VvZiBuP3ZvaWQgMDpcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP28oITEsXCJUcnlpbmcgdG8gcmVsZWFzZSBhbiBpbnN0YW5jZSBpbnRvIGEgcG9vbCBvZiBhIGRpZmZlcmVudCB0eXBlLlwiKTpyKFwiMjVcIiksZS5kZXN0cnVjdG9yKCksbi5pbnN0YW5jZVBvb2wubGVuZ3RoPG4ucG9vbFNpemUmJm4uaW5zdGFuY2VQb29sLnB1c2goZSl9LGw9MTAscD1pLGY9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lO3JldHVybiBuLmluc3RhbmNlUG9vbD1bXSxuLmdldFBvb2xlZD10fHxwLG4ucG9vbFNpemV8fChuLnBvb2xTaXplPWwpLG4ucmVsZWFzZT1zLG59LGQ9e2FkZFBvb2xpbmdUbzpmLG9uZUFyZ3VtZW50UG9vbGVyOmksdHdvQXJndW1lbnRQb29sZXI6YSx0aHJlZUFyZ3VtZW50UG9vbGVyOnUsZm91ckFyZ3VtZW50UG9vbGVyOmN9O2UuZXhwb3J0cz1kfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciByPW4oNiksbz1uKDE0KSxpPW4oMjYpLGE9bigyNyksdT1uKDQpLGM9bigyOSkscz1uKDMxKSxsPW4oMzMpLHA9bigzNCksZj11LmNyZWF0ZUVsZW1lbnQsZD11LmNyZWF0ZUZhY3RvcnkseT11LmNsb25lRWxlbWVudDtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXt2YXIgdj1uKDExKSxtPW4oOCksaD1uKDE2KSxnPSExO2Y9aC5jcmVhdGVFbGVtZW50LGQ9aC5jcmVhdGVGYWN0b3J5LHk9aC5jbG9uZUVsZW1lbnR9dmFyIGI9cixFPWZ1bmN0aW9uKGUpe3JldHVybiBlfTtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXt2YXIgTj0hMSxfPSExO2I9ZnVuY3Rpb24oKXtyZXR1cm4gdihOLFwiUmVhY3QuX19zcHJlYWQgaXMgZGVwcmVjYXRlZCBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLiBVc2UgT2JqZWN0LmFzc2lnbiBkaXJlY3RseSBvciBhbm90aGVyIGhlbHBlciBmdW5jdGlvbiB3aXRoIHNpbWlsYXIgc2VtYW50aWNzLiBZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIHlvdXIgY29tcGlsZXIuIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXNwcmVhZC1kZXByZWNhdGlvbiBmb3IgbW9yZSBkZXRhaWxzLlwiKSxOPSEwLHIuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxFPWZ1bmN0aW9uKGUpe3JldHVybiB2KF8sXCJSZWFjdC5jcmVhdGVNaXhpbiBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuIEluIFJlYWN0IHYxNi4wLCBpdCB3aWxsIGJlIHJlbW92ZWQuIFlvdSBjYW4gdXNlIHRoaXMgbWl4aW4gZGlyZWN0bHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZmIubWUvY3JlYXRlbWl4aW4td2FzLW5ldmVyLWltcGxlbWVudGVkIGZvciBtb3JlIGluZm8uXCIpLF89ITAsZX19dmFyIE89e0NoaWxkcmVuOnttYXA6aS5tYXAsZm9yRWFjaDppLmZvckVhY2gsY291bnQ6aS5jb3VudCx0b0FycmF5OmkudG9BcnJheSxvbmx5OnB9LENvbXBvbmVudDpvLkNvbXBvbmVudCxQdXJlQ29tcG9uZW50Om8uUHVyZUNvbXBvbmVudCxjcmVhdGVFbGVtZW50OmYsY2xvbmVFbGVtZW50OnksaXNWYWxpZEVsZW1lbnQ6dS5pc1ZhbGlkRWxlbWVudCxQcm9wVHlwZXM6YyxjcmVhdGVDbGFzczpsLGNyZWF0ZUZhY3Rvcnk6ZCxjcmVhdGVNaXhpbjpFLERPTTphLHZlcnNpb246cyxfX3NwcmVhZDpifTtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXt2YXIgRD0hMTttJiYoT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sXCJQcm9wVHlwZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHYoZyxcIkFjY2Vzc2luZyBQcm9wVHlwZXMgdmlhIHRoZSBtYWluIFJlYWN0IHBhY2thZ2UgaXMgZGVwcmVjYXRlZCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiAgUmVhY3QgdjE2LjAuIFVzZSB0aGUgbGF0ZXN0IGF2YWlsYWJsZSB2MTUuKiBwcm9wLXR5cGVzIHBhY2thZ2UgZnJvbSBucG0gaW5zdGVhZC4gRm9yIGluZm8gb24gdXNhZ2UsIGNvbXBhdGliaWxpdHksIG1pZ3JhdGlvbiBhbmQgbW9yZSwgc2VlIGh0dHBzOi8vZmIubWUvcHJvcC10eXBlcy1kb2NzXCIpLGc9ITAsY319KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoTyxcImNyZWF0ZUNsYXNzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB2KEQsXCJBY2Nlc3NpbmcgY3JlYXRlQ2xhc3MgdmlhIHRoZSBtYWluIFJlYWN0IHBhY2thZ2UgaXMgZGVwcmVjYXRlZCwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCB2MTYuMC4gVXNlIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcyBpbnN0ZWFkLiBJZiB5b3UncmUgbm90IHlldCByZWFkeSB0byBtaWdyYXRlLCBjcmVhdGUtcmVhY3QtY2xhc3MgdjE1LiogaXMgYXZhaWxhYmxlIG9uIG5wbSBhcyBhIHRlbXBvcmFyeSwgZHJvcC1pbiByZXBsYWNlbWVudC4gRm9yIG1vcmUgaW5mbyBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1jcmVhdGUtY2xhc3NcIiksRD0hMCxsfX0pKSxPLkRPTT17fTt2YXIgdz0hMTtPYmplY3Qua2V5cyhhKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe08uRE9NW2VdPWZ1bmN0aW9uKCl7cmV0dXJuIHd8fCh2KCExLFwiQWNjZXNzaW5nIGZhY3RvcmllcyBsaWtlIFJlYWN0LkRPTS4lcyBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjE2LjArLiBVc2UgdGhlIHJlYWN0LWRvbS1mYWN0b3JpZXMgcGFja2FnZSBpbnN0ZWFkLiAgVmVyc2lvbiAxLjAgcHJvdmlkZXMgYSBkcm9wLWluIHJlcGxhY2VtZW50LiBGb3IgbW9yZSBpbmZvLCBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1kb20tZmFjdG9yaWVzXCIsZSksdz0hMCksYVtlXS5hcHBseShhLGFyZ3VtZW50cyl9fSl9ZS5leHBvcnRzPU99KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybihcIlwiK2UpLnJlcGxhY2UoRSxcIiQmL1wiKX1mdW5jdGlvbiBvKGUsdCl7dGhpcy5mdW5jPWUsdGhpcy5jb250ZXh0PXQsdGhpcy5jb3VudD0wfWZ1bmN0aW9uIGkoZSx0LG4pe3ZhciByPWUuZnVuYyxvPWUuY29udGV4dDtyLmNhbGwobyx0LGUuY291bnQrKyl9ZnVuY3Rpb24gYShlLHQsbil7aWYobnVsbD09ZSlyZXR1cm4gZTt2YXIgcj1vLmdldFBvb2xlZCh0LG4pO2goZSxpLHIpLG8ucmVsZWFzZShyKX1mdW5jdGlvbiB1KGUsdCxuLHIpe3RoaXMucmVzdWx0PWUsdGhpcy5rZXlQcmVmaXg9dCx0aGlzLmZ1bmM9bix0aGlzLmNvbnRleHQ9cix0aGlzLmNvdW50PTB9ZnVuY3Rpb24gYyhlLHQsbil7dmFyIG89ZS5yZXN1bHQsaT1lLmtleVByZWZpeCxhPWUuZnVuYyx1PWUuY29udGV4dCxjPWEuY2FsbCh1LHQsZS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGMpP3MoYyxvLG4sbS50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1jJiYodi5pc1ZhbGlkRWxlbWVudChjKSYmKGM9di5jbG9uZUFuZFJlcGxhY2VLZXkoYyxpKyghYy5rZXl8fHQmJnQua2V5PT09Yy5rZXk/XCJcIjpyKGMua2V5KStcIi9cIikrbikpLG8ucHVzaChjKSl9ZnVuY3Rpb24gcyhlLHQsbixvLGkpe3ZhciBhPVwiXCI7bnVsbCE9biYmKGE9cihuKStcIi9cIik7dmFyIHM9dS5nZXRQb29sZWQodCxhLG8saSk7aChlLGMscyksdS5yZWxlYXNlKHMpfWZ1bmN0aW9uIGwoZSx0LG4pe2lmKG51bGw9PWUpcmV0dXJuIGU7dmFyIHI9W107cmV0dXJuIHMoZSxyLG51bGwsdCxuKSxyfWZ1bmN0aW9uIHAoZSx0LG4pe3JldHVybiBudWxsfWZ1bmN0aW9uIGYoZSx0KXtyZXR1cm4gaChlLHAsbnVsbCl9ZnVuY3Rpb24gZChlKXt2YXIgdD1bXTtyZXR1cm4gcyhlLHQsbnVsbCxtLnRoYXRSZXR1cm5zQXJndW1lbnQpLHR9dmFyIHk9bigyNCksdj1uKDQpLG09big5KSxoPW4oMzUpLGc9eS50d29Bcmd1bWVudFBvb2xlcixiPXkuZm91ckFyZ3VtZW50UG9vbGVyLEU9L1xcLysvZztvLnByb3RvdHlwZS5kZXN0cnVjdG9yPWZ1bmN0aW9uKCl7dGhpcy5mdW5jPW51bGwsdGhpcy5jb250ZXh0PW51bGwsdGhpcy5jb3VudD0wfSx5LmFkZFBvb2xpbmdUbyhvLGcpLHUucHJvdG90eXBlLmRlc3RydWN0b3I9ZnVuY3Rpb24oKXt0aGlzLnJlc3VsdD1udWxsLHRoaXMua2V5UHJlZml4PW51bGwsdGhpcy5mdW5jPW51bGwsdGhpcy5jb250ZXh0PW51bGwsdGhpcy5jb3VudD0wfSx5LmFkZFBvb2xpbmdUbyh1LGIpO3ZhciBOPXtmb3JFYWNoOmEsbWFwOmwsbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbDpzLGNvdW50OmYsdG9BcnJheTpkfTtlLmV4cG9ydHM9Tn0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDQpLG89ci5jcmVhdGVGYWN0b3J5O2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe1xudmFyIGk9bigxNik7bz1pLmNyZWF0ZUZhY3Rvcnl9dmFyIGE9e2E6byhcImFcIiksYWJicjpvKFwiYWJiclwiKSxhZGRyZXNzOm8oXCJhZGRyZXNzXCIpLGFyZWE6byhcImFyZWFcIiksYXJ0aWNsZTpvKFwiYXJ0aWNsZVwiKSxhc2lkZTpvKFwiYXNpZGVcIiksYXVkaW86byhcImF1ZGlvXCIpLGI6byhcImJcIiksYmFzZTpvKFwiYmFzZVwiKSxiZGk6byhcImJkaVwiKSxiZG86byhcImJkb1wiKSxiaWc6byhcImJpZ1wiKSxibG9ja3F1b3RlOm8oXCJibG9ja3F1b3RlXCIpLGJvZHk6byhcImJvZHlcIiksYnI6byhcImJyXCIpLGJ1dHRvbjpvKFwiYnV0dG9uXCIpLGNhbnZhczpvKFwiY2FudmFzXCIpLGNhcHRpb246byhcImNhcHRpb25cIiksY2l0ZTpvKFwiY2l0ZVwiKSxjb2RlOm8oXCJjb2RlXCIpLGNvbDpvKFwiY29sXCIpLGNvbGdyb3VwOm8oXCJjb2xncm91cFwiKSxkYXRhOm8oXCJkYXRhXCIpLGRhdGFsaXN0Om8oXCJkYXRhbGlzdFwiKSxkZDpvKFwiZGRcIiksZGVsOm8oXCJkZWxcIiksZGV0YWlsczpvKFwiZGV0YWlsc1wiKSxkZm46byhcImRmblwiKSxkaWFsb2c6byhcImRpYWxvZ1wiKSxkaXY6byhcImRpdlwiKSxkbDpvKFwiZGxcIiksZHQ6byhcImR0XCIpLGVtOm8oXCJlbVwiKSxlbWJlZDpvKFwiZW1iZWRcIiksZmllbGRzZXQ6byhcImZpZWxkc2V0XCIpLGZpZ2NhcHRpb246byhcImZpZ2NhcHRpb25cIiksZmlndXJlOm8oXCJmaWd1cmVcIiksZm9vdGVyOm8oXCJmb290ZXJcIiksZm9ybTpvKFwiZm9ybVwiKSxoMTpvKFwiaDFcIiksaDI6byhcImgyXCIpLGgzOm8oXCJoM1wiKSxoNDpvKFwiaDRcIiksaDU6byhcImg1XCIpLGg2Om8oXCJoNlwiKSxoZWFkOm8oXCJoZWFkXCIpLGhlYWRlcjpvKFwiaGVhZGVyXCIpLGhncm91cDpvKFwiaGdyb3VwXCIpLGhyOm8oXCJoclwiKSxodG1sOm8oXCJodG1sXCIpLGk6byhcImlcIiksaWZyYW1lOm8oXCJpZnJhbWVcIiksaW1nOm8oXCJpbWdcIiksaW5wdXQ6byhcImlucHV0XCIpLGluczpvKFwiaW5zXCIpLGtiZDpvKFwia2JkXCIpLGtleWdlbjpvKFwia2V5Z2VuXCIpLGxhYmVsOm8oXCJsYWJlbFwiKSxsZWdlbmQ6byhcImxlZ2VuZFwiKSxsaTpvKFwibGlcIiksbGluazpvKFwibGlua1wiKSxtYWluOm8oXCJtYWluXCIpLG1hcDpvKFwibWFwXCIpLG1hcms6byhcIm1hcmtcIiksbWVudTpvKFwibWVudVwiKSxtZW51aXRlbTpvKFwibWVudWl0ZW1cIiksbWV0YTpvKFwibWV0YVwiKSxtZXRlcjpvKFwibWV0ZXJcIiksbmF2Om8oXCJuYXZcIiksbm9zY3JpcHQ6byhcIm5vc2NyaXB0XCIpLG9iamVjdDpvKFwib2JqZWN0XCIpLG9sOm8oXCJvbFwiKSxvcHRncm91cDpvKFwib3B0Z3JvdXBcIiksb3B0aW9uOm8oXCJvcHRpb25cIiksb3V0cHV0Om8oXCJvdXRwdXRcIikscDpvKFwicFwiKSxwYXJhbTpvKFwicGFyYW1cIikscGljdHVyZTpvKFwicGljdHVyZVwiKSxwcmU6byhcInByZVwiKSxwcm9ncmVzczpvKFwicHJvZ3Jlc3NcIikscTpvKFwicVwiKSxycDpvKFwicnBcIikscnQ6byhcInJ0XCIpLHJ1Ynk6byhcInJ1YnlcIiksczpvKFwic1wiKSxzYW1wOm8oXCJzYW1wXCIpLHNjcmlwdDpvKFwic2NyaXB0XCIpLHNlY3Rpb246byhcInNlY3Rpb25cIiksc2VsZWN0Om8oXCJzZWxlY3RcIiksc21hbGw6byhcInNtYWxsXCIpLHNvdXJjZTpvKFwic291cmNlXCIpLHNwYW46byhcInNwYW5cIiksc3Ryb25nOm8oXCJzdHJvbmdcIiksc3R5bGU6byhcInN0eWxlXCIpLHN1YjpvKFwic3ViXCIpLHN1bW1hcnk6byhcInN1bW1hcnlcIiksc3VwOm8oXCJzdXBcIiksdGFibGU6byhcInRhYmxlXCIpLHRib2R5Om8oXCJ0Ym9keVwiKSx0ZDpvKFwidGRcIiksdGV4dGFyZWE6byhcInRleHRhcmVhXCIpLHRmb290Om8oXCJ0Zm9vdFwiKSx0aDpvKFwidGhcIiksdGhlYWQ6byhcInRoZWFkXCIpLHRpbWU6byhcInRpbWVcIiksdGl0bGU6byhcInRpdGxlXCIpLHRyOm8oXCJ0clwiKSx0cmFjazpvKFwidHJhY2tcIiksdTpvKFwidVwiKSx1bDpvKFwidWxcIiksdmFyOm8oXCJ2YXJcIiksdmlkZW86byhcInZpZGVvXCIpLHdicjpvKFwid2JyXCIpLGNpcmNsZTpvKFwiY2lyY2xlXCIpLGNsaXBQYXRoOm8oXCJjbGlwUGF0aFwiKSxkZWZzOm8oXCJkZWZzXCIpLGVsbGlwc2U6byhcImVsbGlwc2VcIiksZzpvKFwiZ1wiKSxpbWFnZTpvKFwiaW1hZ2VcIiksbGluZTpvKFwibGluZVwiKSxsaW5lYXJHcmFkaWVudDpvKFwibGluZWFyR3JhZGllbnRcIiksbWFzazpvKFwibWFza1wiKSxwYXRoOm8oXCJwYXRoXCIpLHBhdHRlcm46byhcInBhdHRlcm5cIikscG9seWdvbjpvKFwicG9seWdvblwiKSxwb2x5bGluZTpvKFwicG9seWxpbmVcIikscmFkaWFsR3JhZGllbnQ6byhcInJhZGlhbEdyYWRpZW50XCIpLHJlY3Q6byhcInJlY3RcIiksc3RvcDpvKFwic3RvcFwiKSxzdmc6byhcInN2Z1wiKSx0ZXh0Om8oXCJ0ZXh0XCIpLHRzcGFuOm8oXCJ0c3BhblwiKX07ZS5leHBvcnRzPWF9KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49e307XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmKG49e3Byb3A6XCJwcm9wXCIsY29udGV4dDpcImNvbnRleHRcIixjaGlsZENvbnRleHQ6XCJjaGlsZCBjb250ZXh0XCJ9KSxlLmV4cG9ydHM9bn0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oNCksbz1yLmlzVmFsaWRFbGVtZW50LGk9bigyMSk7ZS5leHBvcnRzPWkobyl9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49XCJTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRFwiO2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1cIjE1LjYuMVwifSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSxyLHAsZixkLHkpe2Zvcih2YXIgdiBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkodikpe3ZhciBtO3RyeXtcImZ1bmN0aW9uXCIhPXR5cGVvZiBlW3ZdP1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/YyghMSxcIiVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gUmVhY3QuUHJvcFR5cGVzLlwiLGZ8fFwiUmVhY3QgY2xhc3NcIixhW3BdLHYpOmkoXCI4NFwiLGZ8fFwiUmVhY3QgY2xhc3NcIixhW3BdLHYpOnZvaWQgMCxtPWVbdl0ocix2LGYscCxudWxsLHUpfWNhdGNoKGUpe209ZX1pZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP3MoIW18fG0gaW5zdGFuY2VvZiBFcnJvcixcIiVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyIGZ1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiBZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciBjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kIHNoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS5cIixmfHxcIlJlYWN0IGNsYXNzXCIsYVtwXSx2LHR5cGVvZiBtKTp2b2lkIDAsbSBpbnN0YW5jZW9mIEVycm9yJiYhKG0ubWVzc2FnZSBpbiBsKSl7bFttLm1lc3NhZ2VdPSEwO3ZhciBoPVwiXCI7XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmKG98fChvPW4oMTApKSxudWxsIT09eT9oPW8uZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoeSk6bnVsbCE9PWQmJihoPW8uZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0oZCkpKSxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP3MoITEsXCJGYWlsZWQgJXMgdHlwZTogJXMlc1wiLHAsbS5tZXNzYWdlLGgpOnZvaWQgMH19fXZhciBvLGk9big1KSxhPW4oMjgpLHU9bigzMCksYz1uKDIpLHM9bigzKTtcInVuZGVmaW5lZFwiIT10eXBlb2YgdCYmdC5lbnYmJlwidGVzdFwiPT09dC5lbnYuTk9ERV9FTlYmJihvPW4oMTApKTt2YXIgbD17fTtlLmV4cG9ydHM9cn0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMTQpLG89ci5Db21wb25lbnQsaT1uKDQpLGE9aS5pc1ZhbGlkRWxlbWVudCx1PW4oMTcpLGM9bigxOSk7ZS5leHBvcnRzPWMobyxhLHUpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGkuaXNWYWxpZEVsZW1lbnQoZSk/dm9pZCAwOlwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/YSghMSxcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTpvKFwiMTQzXCIpLGV9dmFyIG89big1KSxpPW4oNCksYT1uKDIpO2UuZXhwb3J0cz1yfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSx0KXtyZXR1cm4gZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPWUua2V5P3AuZXNjYXBlKGUua2V5KTp0LnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBvKGUsbixpLG0pe3ZhciBoPXR5cGVvZiBlO2lmKFwidW5kZWZpbmVkXCIhPT1oJiZcImJvb2xlYW5cIiE9PWh8fChlPW51bGwpLG51bGw9PT1lfHxcInN0cmluZ1wiPT09aHx8XCJudW1iZXJcIj09PWh8fFwib2JqZWN0XCI9PT1oJiZlLiQkdHlwZW9mPT09YylyZXR1cm4gaShtLGUsXCJcIj09PW4/ZCtyKGUsMCk6biksMTt2YXIgZyxiLEU9MCxOPVwiXCI9PT1uP2Q6bit5O2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciBfPTA7XzxlLmxlbmd0aDtfKyspZz1lW19dLGI9TityKGcsXyksRSs9byhnLGIsaSxtKTtlbHNle3ZhciBPPXMoZSk7aWYoTyl7dmFyIEQsdz1PLmNhbGwoZSk7aWYoTyE9PWUuZW50cmllcylmb3IodmFyIHg9MDshKEQ9dy5uZXh0KCkpLmRvbmU7KWc9RC52YWx1ZSxiPU4rcihnLHgrKyksRSs9byhnLGIsaSxtKTtlbHNle2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3ZhciBQPVwiXCI7aWYodS5jdXJyZW50KXt2YXIgaz11LmN1cnJlbnQuZ2V0TmFtZSgpO2smJihQPVwiIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGBcIitrK1wiYC5cIil9XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9mKHYsXCJVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiBleHBlcmltZW50YWwgZmVhdHVyZSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWQuIENvbnZlcnQgaXQgdG8gYSBzZXF1ZW5jZSAvIGl0ZXJhYmxlIG9mIGtleWVkIFJlYWN0RWxlbWVudHMgaW5zdGVhZC4lc1wiLFApOnZvaWQgMCx2PSEwfWZvcig7IShEPXcubmV4dCgpKS5kb25lOyl7dmFyIEk9RC52YWx1ZTtJJiYoZz1JWzFdLGI9TitwLmVzY2FwZShJWzBdKSt5K3IoZywwKSxFKz1vKGcsYixpLG0pKX19fWVsc2UgaWYoXCJvYmplY3RcIj09PWgpe3ZhciBqPVwiXCI7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmKGo9XCIgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkIG9yIHdyYXAgdGhlIG9iamVjdCB1c2luZyBjcmVhdGVGcmFnbWVudChvYmplY3QpIGZyb20gdGhlIFJlYWN0IGFkZC1vbnMuXCIsZS5faXNSZWFjdEVsZW1lbnQmJihqPVwiIEl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIGFuIGVsZW1lbnQgY3JlYXRlZCBieSBhIGRpZmZlcmVudCB2ZXJzaW9uIG9mIFJlYWN0LiBNYWtlIHN1cmUgdG8gdXNlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QuXCIpLHUuY3VycmVudCkpe3ZhciBSPXUuY3VycmVudC5nZXROYW1lKCk7UiYmKGorPVwiIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGBcIitSK1wiYC5cIil9dmFyIFM9U3RyaW5nKGUpO1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/bCghMSxcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogJXMpLiVzXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PVM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhlKS5qb2luKFwiLCBcIikrXCJ9XCI6UyxqKTphKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09Uz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGUpLmpvaW4oXCIsIFwiKStcIn1cIjpTLGopfX1yZXR1cm4gRX1mdW5jdGlvbiBpKGUsdCxuKXtyZXR1cm4gbnVsbD09ZT8wOm8oZSxcIlwiLHQsbil9dmFyIGE9big1KSx1PW4oNyksYz1uKDE1KSxzPW4oMTgpLGw9bigyKSxwPW4oMjMpLGY9bigzKSxkPVwiLlwiLHk9XCI6XCIsdj0hMTtlLmV4cG9ydHM9aX0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1uKDI1KX1dKX0pOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9NjAxMDMsYz02MDEwNixkPTYwMTA3LGU9NjAxMDgsZj02MDExNCxnPTYwMTA5LGg9NjAxMTAsaz02MDExMixsPTYwMTEzLG09NjAxMjAsbj02MDExNSxwPTYwMTE2LHE9NjAxMjEscj02MDEyMix1PTYwMTE3LHY9NjAxMjksdz02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB4PVN5bWJvbC5mb3I7Yj14KFwicmVhY3QuZWxlbWVudFwiKTtjPXgoXCJyZWFjdC5wb3J0YWxcIik7ZD14KFwicmVhY3QuZnJhZ21lbnRcIik7ZT14KFwicmVhY3Quc3RyaWN0X21vZGVcIik7Zj14KFwicmVhY3QucHJvZmlsZXJcIik7Zz14KFwicmVhY3QucHJvdmlkZXJcIik7aD14KFwicmVhY3QuY29udGV4dFwiKTtrPXgoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtsPXgoXCJyZWFjdC5zdXNwZW5zZVwiKTttPXgoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO249eChcInJlYWN0Lm1lbW9cIik7cD14KFwicmVhY3QubGF6eVwiKTtxPXgoXCJyZWFjdC5ibG9ja1wiKTtyPXgoXCJyZWFjdC5zZXJ2ZXIuYmxvY2tcIik7dT14KFwicmVhY3QuZnVuZGFtZW50YWxcIik7dj14KFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTt3PXgoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxuZnVuY3Rpb24geShhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdD1hLiQkdHlwZW9mO3N3aXRjaCh0KXtjYXNlIGI6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgZDpjYXNlIGY6Y2FzZSBlOmNhc2UgbDpjYXNlIG06cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgaDpjYXNlIGs6Y2FzZSBwOmNhc2UgbjpjYXNlIGc6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdH19Y2FzZSBjOnJldHVybiB0fX19dmFyIHo9ZyxBPWIsQj1rLEM9ZCxEPXAsRT1uLEY9YyxHPWYsSD1lLEk9bDtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPXo7ZXhwb3J0cy5FbGVtZW50PUE7ZXhwb3J0cy5Gb3J3YXJkUmVmPUI7ZXhwb3J0cy5GcmFnbWVudD1DO2V4cG9ydHMuTGF6eT1EO2V4cG9ydHMuTWVtbz1FO2V4cG9ydHMuUG9ydGFsPUY7ZXhwb3J0cy5Qcm9maWxlcj1HO2V4cG9ydHMuU3RyaWN0TW9kZT1IO1xuZXhwb3J0cy5TdXNwZW5zZT1JO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ofTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Z307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWJ9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09a307ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZH07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1wfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PW59O1xuZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWN9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWZ9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZX07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bH07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWR8fGE9PT1mfHxhPT09dnx8YT09PWV8fGE9PT1sfHxhPT09bXx8YT09PXd8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cHx8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT1nfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT11fHxhLiQkdHlwZW9mPT09cXx8YVswXT09PXIpPyEwOiExfTtcbmV4cG9ydHMudHlwZU9mPXk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3JlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxnPTYwMTAzO2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIGg9U3ltYm9sLmZvcjtnPWgoXCJyZWFjdC5lbGVtZW50XCIpO2V4cG9ydHMuRnJhZ21lbnQ9aChcInJlYWN0LmZyYWdtZW50XCIpfXZhciBtPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGspe3ZhciBiLGQ9e30sZT1udWxsLGw9bnVsbDt2b2lkIDAhPT1rJiYoZT1cIlwiK2spO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGw9YS5yZWYpO2ZvcihiIGluIGEpbi5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmcsdHlwZTpjLGtleTplLHJlZjpsLHByb3BzOmQsX293bmVyOm0uY3VycmVudH19ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4yXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXotXycuc3BsaXQoJycpXG4gICwgbGVuZ3RoID0gNjRcbiAgLCBtYXAgPSB7fVxuICAsIHNlZWQgPSAwXG4gICwgaSA9IDBcbiAgLCBwcmV2O1xuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSBUaGUgbnVtYmVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBlbmNvZGUobnVtKSB7XG4gIHZhciBlbmNvZGVkID0gJyc7XG5cbiAgZG8ge1xuICAgIGVuY29kZWQgPSBhbHBoYWJldFtudW0gJSBsZW5ndGhdICsgZW5jb2RlZDtcbiAgICBudW0gPSBNYXRoLmZsb29yKG51bSAvIGxlbmd0aCk7XG4gIH0gd2hpbGUgKG51bSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW50ZWdlciB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBpbnRlZ2VyIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBzdHJpbmcuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHZhciBkZWNvZGVkID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVjb2RlZCA9IGRlY29kZWQgKiBsZW5ndGggKyBtYXBbc3RyLmNoYXJBdChpKV07XG4gIH1cblxuICByZXR1cm4gZGVjb2RlZDtcbn1cblxuLyoqXG4gKiBZZWFzdDogQSB0aW55IGdyb3dpbmcgaWQgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IEEgdW5pcXVlIGlkLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24geWVhc3QoKSB7XG4gIHZhciBub3cgPSBlbmNvZGUoK25ldyBEYXRlKCkpO1xuXG4gIGlmIChub3cgIT09IHByZXYpIHJldHVybiBzZWVkID0gMCwgcHJldiA9IG5vdztcbiAgcmV0dXJuIG5vdyArJy4nKyBlbmNvZGUoc2VlZCsrKTtcbn1cblxuLy9cbi8vIE1hcCBlYWNoIGNoYXJhY3RlciB0byBpdHMgaW5kZXguXG4vL1xuZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgbWFwW2FscGhhYmV0W2ldXSA9IGk7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIGB5ZWFzdGAsIGBlbmNvZGVgIGFuZCBgZGVjb2RlYCBmdW5jdGlvbnMuXG4vL1xueWVhc3QuZW5jb2RlID0gZW5jb2RlO1xueWVhc3QuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMgPSB5ZWFzdDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FwcC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG4gIHJldHVybiBjb21tb25qc0dsb2JhbFtrZXldID0gKGNvbW1vbmpzR2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufVxuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBnZXRVbmlxdWVJZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxudmFyIGNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHtcbiAgICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPSBjcmVhdGVQYXRoKGNvbnRleHQubG9jYXRpb24pID09PSBjcmVhdGVQYXRoKG5vcm1hbGl6ZVRvTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgfHwgaXNEdXBsaWNhdGVOYXZpZ2F0aW9uID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSB0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gY2xhc3NOYW1lUHJvcChpc0FjdGl2ZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChpc0FjdGl2ZSkgOiBzdHlsZVByb3A7XG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCIsIFwiZmFsc2VcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgUmVhY3RSZWR1eENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RSZWR1eENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgdmFyIHVuc3Vic2NyaWJlO1xuICB2YXIgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcblxuICBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gbGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih1bnN1YnNjcmliZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUgPSBwYXJlbnRTdWIgPyBwYXJlbnRTdWIuYWRkTmVzdGVkU3ViKGhhbmRsZUNoYW5nZVdyYXBwZXIpIDogc3RvcmUuc3Vic2NyaWJlKGhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgbGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgdW5zdWJzY3JpYmUgPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWI6IGFkZE5lc3RlZFN1YixcbiAgICBub3RpZnlOZXN0ZWRTdWJzOiBub3RpZnlOZXN0ZWRTdWJzLFxuICAgIGhhbmRsZUNoYW5nZVdyYXBwZXI6IGhhbmRsZUNoYW5nZVdyYXBwZXIsXG4gICAgaXNTdWJzY3JpYmVkOiBpc1N1YnNjcmliZWQsXG4gICAgdHJ5U3Vic2NyaWJlOiB0cnlTdWJzY3JpYmUsXG4gICAgdHJ5VW5zdWJzY3JpYmU6IHRyeVVuc3Vic2NyaWJlLFxuICAgIGdldExpc3RlbmVyczogZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKCkge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9XG4gIH07XG4gIHJldHVybiBzdWJzY3JpcHRpb247XG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcblxuZnVuY3Rpb24gUHJvdmlkZXIoX3JlZikge1xuICB2YXIgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgLiBUaGlzIGlzIGEgbG93LWxldmVsXG4gKiBob29rIHRoYXQgeW91IHNob3VsZCB1c3VhbGx5IG5vdCBuZWVkIHRvIGNhbGwgZGlyZWN0bHkuXG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmU7XG5cbiAgICByZXR1cm4gc3RvcmU7XG4gIH07XG59XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSByZWR1eCBzdG9yZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU3RvcmUgPSAvKiNfX1BVUkVfXyovY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVN0b3JlID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0U3RvcmUgOiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaDtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcbiAqICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gKiAgIGNvbnN0IGluY3JlYXNlQ291bnRlciA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ2luY3JlYXNlLWNvdW50ZXInIH0pLCBbXSlcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgIClcbiAqIH1cbiAqL1xuXG5leHBvcnQgdmFyIHVzZURpc3BhdGNoID0gLyojX19QVVJFX18qL2NyZWF0ZURpc3BhdGNoSG9vaygpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlTWVtbywgdXNlQ29udGV4dCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgc3RvcmVTdGF0ZSAhPT0gbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZVN0YXRlKTsgLy8gZW5zdXJlIGxhdGVzdCBzZWxlY3RlZCBzdGF0ZSBpcyByZXVzZWQgc28gdGhhdCBhIGN1c3RvbSBlcXVhbGl0eSBmdW5jdGlvbiBjYW4gcmVzdWx0IGluIGlkZW50aWNhbCByZWZlcmVuY2VzXG5cbiAgICAgIGlmIChsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPT09IHVuZGVmaW5lZCB8fCAhZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgIHNlbGVjdGVkU3RhdGUgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IHN0b3JlU3RhdGU7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7IC8vIEF2b2lkIGNhbGxpbmcgc2VsZWN0b3IgbXVsdGlwbGUgdGltZXMgaWYgdGhlIHN0b3JlJ3Mgc3RhdGUgaGFzIG5vdCBjaGFuZ2VkXG5cbiAgICAgICAgaWYgKG5ld1N0b3JlU3RhdGUgPT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQobmV3U3RvcmVTdGF0ZSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4oX25ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBfbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgICAgbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50ID0gbmV3U3RvcmVTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcigpO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZXF1YWxpdHlGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYW4gZXF1YWxpdHkgZnVuY3Rpb24gdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgICB2YXIgc2VsZWN0ZWRTdGF0ZSA9IHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gICAgdXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxuICpcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZXhwb3J0ICogZnJvbSAnLi9leHBvcnRzJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7IC8vIEVuYWJsZSBiYXRjaGVkIHVwZGF0ZXMgaW4gb3VyIHN1YnNjcmlwdGlvbnMgZm9yIHVzZVxuLy8gd2l0aCBzdGFuZGFyZCBSZWFjdCByZW5kZXJlcnMgKFJlYWN0RE9NLCBSZWFjdCBOYXRpdmUpXG5cbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IGJhdGNoIH07IiwiLy9BVVRIXG5leHBvcnQgY29uc3QgYXV0aENvbnN0YW50cyA9IHtcbiAgICBTSUdOX0lOOiBcIlNJR05fSU5cIixcbiAgICBTSUdOX09VVDogXCJTSUdOX09VVFwiLFxuICAgIENSRUFURV9BQ0NPVU5UOiBcIkNSRUFURV9BQ0NPVU5UXCIsXG4gICAgU0VUX1VTRVI6IFwiU0VUX1VTRVJcIlxufTtcblxuLy8gUE9QVVBcbmV4cG9ydCBjb25zdCBwb3B1cENvbnN0YW50cyA9IHtcbiAgICBTSE9XX0NSRUFURV9TVFVEWV9HUk9VUF9QT1BVUDogXCJTSE9XX0NSRUFURV9TVFVEWV9HUk9VUF9QT1BVUFwiLFxuICAgIFNIT1dfSk9JTl9TVFVEWV9HUk9VUF9QT1BVUDogXCJTSE9XX0pPSU5fU1RVRFlfR1JPVVBfUE9QVVBcIixcbiAgICBTSE9XX0VESVRfU1RVRFlfR1JPVVBfUE9QVVA6IFwiU0hPV19FRElUX1NUVURZX0dST1VQX1BPUFVQXCIsXG4gICAgU0hPV19DUkVBVEVfTUVFVElOR19TVFVEWV9HUk9VUF9QT1BVUDogXCJTSE9XX0NSRUFURV9NRUVUSU5HX1NUVURZX0dST1VQX1BPUFVQXCIsXG4gICAgU0hPV19DUkVBVEVfUE9TVF9TVFVEWV9HUk9VUF9QT1BVUDogXCJTSE9XX0NSRUFURV9QT1NUX1NUVURZX0dST1VQX1BPUFVQXCIsXG4gICAgU0hPV19WSUVXX1BPU1RfU1RVRFlfR1JPVVBfUE9QVVA6IFwiU0hPV19WSUVXX1BPU1RfU1RVRFlfR1JPVVBfUE9QVVBcIixcbiAgICBTSE9XX1ZJRVdfTUVFVElOR1NfU1RVRFlfR1JPVVBfUE9QVVA6IFwiU0hPV19WSUVXX01FRVRJTkdTX1NUVURZX0dST1VQX1BPUFVQXCIsXG4gICAgU0hPV19WSUVXX01FTUJFUl9QT1BVUDogXCJTSE9XX1ZJRVdfTUVNQkVSX1BPUFVQXCIsXG4gICAgU0hPV19JTlBVVF9QT1BVUDogXCJTSE9XX0lOUFVUX1BPUFVQXCIsXG4gICAgU0hPV19DT05GSVJNQVRJT05fUE9QVVA6IFwiU0hPV19DT05GSVJNQVRJT05fUE9QVVBcIixcbiAgICBTSE9XX1JFUE9SVF9QT1BVUDogXCJSRVBPUlRfUE9QVVBcIixcbiAgICBDTE9TRV9QT1BVUDogXCJDTE9TRV9QT1BVUFwiXG59O1xuXG4vL0FVVEhcbmV4cG9ydCBjb25zdCBzdHVkeUdyb3Vwc0NvbnN0YW50cyA9IHtcbiAgICBBRERfU1RVRFlfR1JPVVA6IFwiQUREX1NUVURZX0dST1VQXCIsXG4gICAgTE9BRF9TVFVEWV9HUk9VUFM6IFwiTE9BRF9TVFVEWV9HUk9VUFNcIixcbiAgICBQT1BVTEFURV9TRUFSQ0g6IFwiUE9QVUxBVEVfU0VBUkNIXCIsXG4gICAgQ0xFQVJfU1RVRFlfR1JPVVBTOiBcIkNMRUFSX1NUVURZX0dST1VQU1wiXG59O1xuXG4vL05PVElGSUNBVElPTlNcbmV4cG9ydCBjb25zdCBub3RpZmljYXRpb25Db25zdGFudHMgPSB7XG4gICAgU0hPV19FUlJPUl9OT1RJRklDQVRJT046IFwiU0hPV19FUlJPUl9OT1RJRklDQVRJT05cIixcbiAgICBTSE9XX1NVQ0NFU1NfTk9USUZJQ0FUSU9OOiBcIlNIT1dfU1VDQ0VTU19OT1RJRklDQVRJT05cIixcbiAgICBISURFX05PVElGSUNBVElPTjogXCJISURFX05PVElGSUNBVElPTlwiLFxuICAgIFNUQVJUX0xPQURJTkc6IFwiU1RBUlRfTE9BRElOR1wiLFxuICAgIFNUT1BfTE9BRElORzogXCJTVE9QX0xPQURJTkdcIlxufTtcbiIsImltcG9ydCB7IHN0dWR5R3JvdXBzQ29uc3RhbnRzLCBhdXRoQ29uc3RhbnRzLCBwb3B1cENvbnN0YW50cywgbm90aWZpY2F0aW9uQ29uc3RhbnRzIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9jb25zdGFudHNcIjtcblxuLy9BVVRIIFJFRFVDRVJTXG5leHBvcnQgY29uc3Qgc2lnbkluID0gKHVzZXIpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhdXRoQ29uc3RhbnRzLlNJR05fSU4sXG4gICAgICAgIHBheWxvYWQ6IHVzZXJcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBzaWduT3V0ID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGF1dGhDb25zdGFudHMuU0lHTl9PVVRcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUFjY291bnQgPSAodW52ZXJpZmllZFVzZXIpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhdXRoQ29uc3RhbnRzLkNSRUFURV9BQ0NPVU5ULFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICB1bnZlcmlmaWVkVXNlclxuICAgICAgICB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRVc2VyID0gKHVzZXIpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhdXRoQ29uc3RhbnRzLlNFVF9VU0VSLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICB1c2VyXG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuLy9QT1BVUCBSRURVQ0VSXG5leHBvcnQgY29uc3Qgc2hvd0NyZWF0ZVN0dWR5R3JvdXBQb3B1cCA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5TSE9XX0NSRUFURV9TVFVEWV9HUk9VUF9QT1BVUFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvd0pvaW5TdHVkeUdyb3VwUG9wdXAgPSAoZ3JvdXApID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5TSE9XX0pPSU5fU1RVRFlfR1JPVVBfUE9QVVAsXG4gICAgICAgIHBheWxvYWQ6IGdyb3VwXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93RWRpdFN0dWR5R3JvdXBQb3B1cCA9IChncm91cCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfRURJVF9TVFVEWV9HUk9VUF9QT1BVUCxcbiAgICAgICAgcGF5bG9hZDogZ3JvdXBcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dDcmVhdGVNZWV0aW5nU3R1ZHlHcm91cFBvcHVwID0gKGdyb3VwLCBpc1JlY3VycmluZ01lZXRpbmcpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5TSE9XX0NSRUFURV9NRUVUSU5HX1NUVURZX0dST1VQX1BPUFVQLFxuICAgICAgICBwYXlsb2FkOiB7IGdyb3VwLCBpc1JlY3VycmluZ01lZXRpbmcgfVxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvd0NyZWF0ZVBvc3RTdHVkeUdyb3VwUG9wdXAgPSAoZ3JvdXApID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5TSE9XX0NSRUFURV9QT1NUX1NUVURZX0dST1VQX1BPUFVQLFxuICAgICAgICBwYXlsb2FkOiBncm91cFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvd1ZpZXdQb3N0U3R1ZHlHcm91cFBvcHVwID0gKHBvc3QpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5TSE9XX1ZJRVdfUE9TVF9TVFVEWV9HUk9VUF9QT1BVUCxcbiAgICAgICAgcGF5bG9hZDogcG9zdFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvd1ZpZXdNZWV0aW5nc1N0dWR5R3JvdXBQb3B1cCA9IChncm91cCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfVklFV19NRUVUSU5HU19TVFVEWV9HUk9VUF9QT1BVUCxcbiAgICAgICAgcGF5bG9hZDogZ3JvdXBcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dWaWV3TWVtYmVyUG9wdXAgPSAobWVtYmVyKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcG9wdXBDb25zdGFudHMuU0hPV19WSUVXX01FTUJFUl9QT1BVUCxcbiAgICAgICAgcGF5bG9hZDogbWVtYmVyXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93SW5wdXRQb3B1cCA9ICh0aXRsZSwgbGFiZWwsIGRlZmF1bHRJbnB1dCwgY2FsbGJhY2ssIGxhYmVsMikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfSU5QVVRfUE9QVVAsXG4gICAgICAgIHBheWxvYWQ6IHsgdGl0bGUsIGxhYmVsLCBkZWZhdWx0SW5wdXQsIGNhbGxiYWNrLCBsYWJlbDIgfVxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvd0NvbmZpcm1hdGlvblBvcHVwID0gKFxuICAgIGNhbGxiYWNrLFxuICAgIHRpdGxlLFxuICAgIG1lc3NhZ2UsXG4gICAgaXNDb25maXJtYXRpb24gPSB0cnVlLFxuICAgIGZpcnN0QnV0dG9uVGl0bGUgPSBcIlllc1wiLFxuICAgIHNlY29uZEJ1dHRvblRpdGxlID0gXCJOb1wiXG4pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5TSE9XX0NPTkZJUk1BVElPTl9QT1BVUCxcbiAgICAgICAgcGF5bG9hZDogeyBjYWxsYmFjaywgdGl0bGUsIG1lc3NhZ2UsIGlzQ29uZmlybWF0aW9uLCBmaXJzdEJ1dHRvblRpdGxlLCBzZWNvbmRCdXR0b25UaXRsZSB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93UmVwb3J0UG9wdXAgPSAodHlwZSwgcmVwb3J0RGF0YSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfUkVQT1JUX1BPUFVQLFxuICAgICAgICBwYXlsb2FkOiB7IHR5cGUsIHJlcG9ydERhdGEgfVxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgY2xvc2VQb3B1cCA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5DTE9TRV9QT1BVUFxuICAgIH07XG59O1xuXG4vL1NUVURZIEdST1VQIFJFRFVDRVJTXG5leHBvcnQgY29uc3QgYWRkU3R1ZHlHcm91cCA9IChncm91cCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHN0dWR5R3JvdXBzQ29uc3RhbnRzLkFERF9TVFVEWV9HUk9VUCxcbiAgICAgICAgcGF5bG9hZDogeyBncm91cCB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2FkU3R1ZHlHcm91cCA9IChncm91cHMpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBzdHVkeUdyb3Vwc0NvbnN0YW50cy5MT0FEX1NUVURZX0dST1VQUyxcbiAgICAgICAgcGF5bG9hZDogeyBncm91cHMgfVxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgcG9wdWxhdGVTdHVkeUdyb3VwU2VhcmNoID0gKGdyb3VwcykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHN0dWR5R3JvdXBzQ29uc3RhbnRzLlBPUFVMQVRFX1NFQVJDSCxcbiAgICAgICAgcGF5bG9hZDogeyBncm91cHMgfVxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgY2xlYXJTdHVkeUdyb3VwcyA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBzdHVkeUdyb3Vwc0NvbnN0YW50cy5DTEVBUl9TVFVEWV9HUk9VUFNcbiAgICB9O1xufTtcbi8vTk9USUZJQ0FUSU9OIFJFRFVDRVJTXG5leHBvcnQgY29uc3Qgc2hvd0Vycm9yTm90aWZpY2F0aW9uID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBub3RpZmljYXRpb25Db25zdGFudHMuU0hPV19FUlJPUl9OT1RJRklDQVRJT04sXG4gICAgICAgIHBheWxvYWQ6IHsgbWVzc2FnZSB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93U3VjY2Vzc05vdGlmaWNhdGlvbiA9IChtZXNzYWdlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogbm90aWZpY2F0aW9uQ29uc3RhbnRzLlNIT1dfU1VDQ0VTU19OT1RJRklDQVRJT04sXG4gICAgICAgIHBheWxvYWQ6IHsgbWVzc2FnZSB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBoaWRlTm90aWZpY2F0aW9uID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvbkNvbnN0YW50cy5ISURFX05PVElGSUNBVElPTlxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc3RhcnRMb2FkaW5nID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvbkNvbnN0YW50cy5TVEFSVF9MT0FESU5HXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3Qgc3RvcExvYWRpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogbm90aWZpY2F0aW9uQ29uc3RhbnRzLlNUT1BfTE9BRElOR1xuICAgIH07XG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qb3B1cC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUG9wdXAuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ3JlYXRlU3R1ZHlHcm91cEZvcm0uc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NyZWF0ZVN0dWR5R3JvdXBGb3JtLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8qKlxuICogUmVuZGVycyBhIGZvcm0uXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICogQGRhdGUgICAxMC8yMS8yMDIxXG4gKi9cbmNvbnN0IEZvcm0gPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8Zm9ybSBjbGFzc05hbWU9XCJGb3JtXCIgey4uLnByb3BzfT5cbiAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9mb3JtPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jb3JlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jb3JlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIHR5cGVzIG9mIGJ1dHRvbnMgdGhhdCBjYW4gYmUgdXNlZC5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAqL1xuY29uc3QgQnV0dG9uVHlwZXMgPSB7XG4gICAgUHJpbWFyeTogXCJQcmltYXJ5XCIsXG4gICAgQ3JlYXRpb246IFwiQ3JlYXRpb25cIixcbiAgICBEZXN0cnVjaXZlOiBcIkRlc3RydWN0aXZlXCJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvblR5cGVzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi4vY29yZS5zY3NzXCI7XG5cbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi9CdXR0b25UeXBlcy5qc1wiO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVuZGVyIGJ1dHRvbnMuIERlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBidXR0b24gcmVxdWVzdGVkLFxuICogdGhlIGJ1dHRvbiBkaXNwbGF5ZWQgd2lsbCB2YXJ5LlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnR5cGUgVGhlIHR5cGUgb2YgYnV0dG9uIHRvIHJlbmRlci5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAqL1xuY29uc3QgQnV0dG9uID0gKHByb3BzKSA9PiB7XG4gICAgbGV0IGJ1dHRvbkNsYXNzTmFtZTtcblxuICAgIHN3aXRjaCAocHJvcHMudHlwZSkge1xuICAgICAgICBjYXNlIEJ1dHRvblR5cGVzLlByaW1hcnk6XG4gICAgICAgICAgICBidXR0b25DbGFzc05hbWUgPSBcIkJ1dHRvblByaW1hcnlcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQnV0dG9uVHlwZXMuQ3JlYXRpb246XG4gICAgICAgICAgICBidXR0b25DbGFzc05hbWUgPSBcIkJ1dHRvbkNyZWF0aW9uXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBCdXR0b25UeXBlcy5EZXN0cnVjaXZlOlxuICAgICAgICAgICAgYnV0dG9uQ2xhc3NOYW1lID0gXCJCdXR0b25EZXN0cnVjdGl2ZVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBidXR0b25DbGFzc05hbWUgPSBcIkJ1dHRvblByaW1hcnlcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtidXR0b25DbGFzc05hbWUgKyBcIiBCdXR0b25cIn0gey4uLnByb3BzfT5cbiAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9idXR0b24+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4uL2NvcmUuc2Nzc1wiO1xuLyoqXG4gKiBSZW5kZXJzIGFuIGlucHV0IGZpZWxkLlxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICovXG5jb25zdCBJbnB1dEZpZWxkID0gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzTmFtZT1cIklucHV0RmllbGRcIiBzdHlsZT17cHJvcHMuc3R5bGV9IHsuLi5wcm9wc30+XG4gICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvZmllbGRzZXQ+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IElucHV0RmllbGQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8qKlxuICogUmVuZGVycyBhIGxhYmVsLlxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICovXG5jb25zdCBMYWJlbCA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJMYWJlbFwiIHsuLi5wcm9wc30+XG4gICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvbGFiZWw+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExhYmVsO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yLmpzXCI7XG5cbi8qKlxuICogUmVuZGVycyBhIHRleHQgaW5wdXQuXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICogQGRhdGUgICAxMC8yMS8yMDIxXG4gKi9cbmNvbnN0IFRleHRJbnB1dCA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHR5cGVJc0RlZmluZWQgPSBWYWxpZGF0b3IuaXNEZWZpbmVkKHByb3BzLnR5cGUpO1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlSXNEZWZpbmVkID8gcHJvcHMudHlwZSA6IFwidGV4dFwiO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIHtwcm9wcy5pc1RleHRBcmVhID8gKFxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzc05hbWU9XCJJbnB1dFwiIHZhbHVlPXtwcm9wcy52YWx1ZX0gb25DaGFuZ2U9e3Byb3BzLm9uQ2hhbmdlfSB0eXBlPXt0eXBlfSB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJJbnB1dFwiIHZhbHVlPXtwcm9wcy52YWx1ZX0gb25DaGFuZ2U9e3Byb3BzLm9uQ2hhbmdlfSB0eXBlPXt0eXBlfSB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICA8Lz5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dElucHV0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi4vY29yZS5zY3NzXCI7XG5cbi8qKlxuICogUmVuZGVycyBhbiB0b2dnbGUgZmllbGQuXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICovXG5jb25zdCBUb2dnbGVGaWVsZCA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiVG9nZ2xlRmllbGRcIiB7Li4ucHJvcHN9PlxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVG9nZ2xlRmllbGQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8qKlxuICogUmVuZGVycyBhIHRvZ2dsZSBzd2l0Y2guXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTEvMjAvMjAyMVxuICovXG5jb25zdCBUb2dnbGUgPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiVG9nZ2xlXCI+XG4gICAgICAgICAgICB7Y29uc29sZS5sb2cocHJvcHMudmFsdWUpfVxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICBjaGVja2VkPXtwcm9wcy52YWx1ZSA/IFwiY2hlY2tlZFwiIDogXCJcIn1cbiAgICAgICAgICAgICAgICB2YWx1ZT17cHJvcHMudmFsdWV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3Byb3BzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInNsaWRlclwiPjwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVG9nZ2xlO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi4vY29yZS5zY3NzXCI7XG5cbi8qKlxuICogVXNlZCB0byByZW5kZXIgZHJvcGRvd24gbWVudXMuXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcy5vcHRpb25zIFRoZSBpdGVtcyB0byByZW5kZXIgaW4gdGhlIGRyb3Bkb3duIG1lbnUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9wcy5vbkNoYW5nZSBUaGUgZnVuY3Rpb24gdG8gYmUgcnVuIHdoZW4gYW4gaXRlbSBpcyBzZWxlY3RlZFxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDEyLzA1LzIwMjFcbiAqL1xuY29uc3QgRHJvcGRvd24gPSAocHJvcHMpID0+IHtcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhwcm9wcy5vcHRpb25zKTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJkcm9wZG93blwiIG9uQ2hhbmdlPXtwcm9wcy5vbkNoYW5nZX0gdmFsdWU9e3Byb3BzLnZhbHVlfT5cbiAgICAgICAgICAgIHtwcm9wcy5vcHRpb25zLm1hcCgob3B0aW9uKSA9PiAoXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT17b3B0aW9ufT57b3B0aW9ufTwvb3B0aW9uPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4uL2NvcmUuc2Nzc1wiO1xuXG5jb25zdCBDb2xvclBpY2tlciA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiA8aW5wdXQgY2xhc3NOYW1lPVwiY29sb3ItcGlja2VyXCIgb25DaGFuZ2U9e3Byb3BzLm9uQ2hhbmdlfSB0eXBlPVwiY29sb3JcIiB2YWx1ZT17cHJvcHMudmFsdWV9IC8+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JQaWNrZXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vQ3JlYXRlU3R1ZHlHcm91cEZvcm0uc2Nzc1wiO1xuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtLmpzXCI7XG5cbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkLmpzXCI7XG5pbXBvcnQgTGFiZWwgZnJvbSBcIi4uLy4uL2NvcmUvTGFiZWwvTGFiZWwuanNcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0LmpzXCI7XG5cbmltcG9ydCBUb2dnbGVGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9Ub2dnbGVGaWVsZC9Ub2dnbGVGaWVsZC5qc1wiO1xuaW1wb3J0IFRvZ2dsZSBmcm9tIFwiLi4vLi4vY29yZS9Ub2dnbGUvVG9nZ2xlLmpzXCI7XG5cbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCBEcm9wZG93biBmcm9tIFwiLi4vLi4vY29yZS9Ecm9wZG93bi9Ecm9wZG93blwiO1xuaW1wb3J0IENvbG9yUGlja2VyIGZyb20gXCIuLi8uLi9jb3JlL0NvbG9yUGlja2VyL0NvbG9yUGlja2VyXCI7XG5pbXBvcnQgU3ViamVjdHMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvU3ViamVjdHMuanNcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGEgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm1cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcy50aXRsZVxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLmRlc2NyaXB0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMucHJpdmFjeVxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnN1YmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcy5jbGFzc0NvZGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJvcHMuaXNBc3NvY2lhdGVkV2l0aFNjaG9vbFxuICogQHBhcmFtIHtib29sZWFufSBwcm9wcy5pc1R1dG9yR3JvdXBcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJvcHMuaXNPbmxpbmVHcm91cFxuICpcbiAqL1xuY29uc3QgQ3JlYXRlU3R1ZHlHcm91cEZvcm0gPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEZvcm0gb25TdWJtaXQ9e3Byb3BzLnN1Ym1pdENyZWF0ZVN0dWR5R3JvdXB9IGNsYXNzTmFtZT1cImNyZWF0ZS1zdHVkeS1ncm91cC1mb3JtXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+U3R1ZHkgR3JvdXAgTmFtZTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5uYW1lfSBvbkNoYW5nZT17cHJvcHMudXBkYXRlTmFtZUZpZWxkfSB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+Q29sb3I8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbG9yUGlja2VyIHZhbHVlPXtwcm9wcy5ncm91cENvbG9yfSBvbkNoYW5nZT17cHJvcHMudXBkYXRlR3JvdXBDb2xvcn0gdHlwZT1cImNvbG9yXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5EZXNjcmlwdGlvbjwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVEZXNjcmlwdGlvbkZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUZXh0QXJlYT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICB7LyogZHJvcGRvd25zICovfVxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+U3ViamVjdDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cHJvcHMuc3ViamVjdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXtPYmplY3Qua2V5cyhTdWJqZWN0cyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZVN1YmplY3RGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cblxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Qcml2YWN5PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biB2YWx1ZT17cHJvcHMucHJpdmFjeX0gb3B0aW9ucz17W1wiUHVibGljXCJdfSBvbkNoYW5nZT17cHJvcHMudXBkYXRlUHJpdmFjeX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPkNvdXJzZSBDb2RlPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3Byb3BzLmNvdXJzZUNvZGV9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVDb3Vyc2VDb2RlRmllbGR9IHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgey8qIHRvZ2dsZXMgKi99XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cbiAgICAgICAgICAgICAgICAgICAge3Byb3BzLnVzZXJTY2hvb2wgIT09IFwiXCIgJiYgcHJvcHMudXNlclNjaG9vbCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9nZ2xlRmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPklzIHRoaXMgZ3JvdXAgYXNzb2NpYXRlZCB3aXRoIHtwcm9wcy51c2VyU2Nob29sfT88L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUb2dnbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUlzQXNzb2NpYXRlZFdpdGhTY2hvb2x9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy5pc0Fzc29jaWF0ZWRXaXRoU2Nob29sfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RvZ2dsZUZpZWxkPlxuICAgICAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgICAgIDxUb2dnbGVGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5JcyB0aGlzIGFuIG9ubGluZSBncm91cD88L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAge2NvbnNvbGUubG9nKFwiSXMgT25saW5lP1wiLCBwcm9wcy5pc09ubGluZUdyb3VwKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb2dnbGUgb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUlzT25saW5lR3JvdXB9IHZhbHVlPXtwcm9wcy5pc09ubGluZUdyb3VwfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1RvZ2dsZUZpZWxkPlxuXG4gICAgICAgICAgICAgICAgICAgIDxUb2dnbGVGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5JcyB0aGlzIGEgdHV0b3IgZ3JvdXA/PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb2dnbGUgb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUlzVHV0b3JHcm91cH0gdmFsdWU9e3Byb3BzLmlzVHV0b3JHcm91cH0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Ub2dnbGVGaWVsZD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259PlN1Ym1pdDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Gb3JtPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3JlYXRlU3R1ZHlHcm91cEZvcm07XG4iLCJjbGFzcyBJbnZhbGlkRGF0ZUFkYXB0ZXJFcnJvciBleHRlbmRzIEVycm9yIHt9XG5sZXQgZGF0ZUFkYXB0ZXJDb25maWc7XG5jbGFzcyBEYXRlQWRhcHRlckJhc2Uge1xuICBjb25zdHJ1Y3RvcihfZGF0ZSwgb3B0aW9ucykge1xuICAgIHRoaXMuZHVyYXRpb24gPSAob3B0aW9ucyAmJiBvcHRpb25zLmR1cmF0aW9uKSB8fCAwO1xuICAgIHRoaXMuZ2VuZXJhdG9ycyA9IChvcHRpb25zICYmIG9wdGlvbnMuZ2VuZXJhdG9ycyAmJiBvcHRpb25zLmdlbmVyYXRvcnMuc2xpY2UoKSkgfHwgW107XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHRoaXMuZHVyYXRpb24pIHx8IHRoaXMuZHVyYXRpb24gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVBZGFwdGVyRXJyb3IoJ2R1cmF0aW9uIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcicpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgc2V0IGFkYXB0ZXIodmFsdWUpIHtcbiAgICBpZiAoZGF0ZUFkYXB0ZXJDb25maWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke2RhdGVBZGFwdGVyQ29uZmlnLm5hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiBjb25maWd1cmVkLmApO1xuICAgIH1cbiAgICBkYXRlQWRhcHRlckNvbmZpZyA9IHZhbHVlO1xuICB9XG4gIHN0YXRpYyBnZXQgYWRhcHRlcigpIHtcbiAgICBpZiAoIWRhdGVBZGFwdGVyQ29uZmlnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRhdGUgYWRhcHRlciBoYXMgYmVlbiBjb25maWd1cmVkLiBTZWUgclNjaGVkdWxlIGRvY3MuJyk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlQWRhcHRlckNvbmZpZztcbiAgfVxuICBzdGF0aWMgaXNEYXRlKF9vYmplY3QpIHtcbiAgICB0aHJvdyB1bmltcGxlbWVudGVkRXJyb3IoJ2lzRGF0ZSgpJyk7XG4gIH1cbiAgc3RhdGljIGZyb21EYXRlKF9kYXRlLCBfb3B0aW9ucykge1xuICAgIHRocm93IHVuaW1wbGVtZW50ZWRFcnJvcignZnJvbURhdGUoKScpO1xuICB9XG4gIHN0YXRpYyBmcm9tSlNPTihfanNvbikge1xuICAgIHRocm93IHVuaW1wbGVtZW50ZWRFcnJvcignZnJvbUpTT04oKScpO1xuICB9XG4gIHN0YXRpYyBmcm9tRGF0ZVRpbWUoX2RhdGV0aW1lKSB7XG4gICAgdGhyb3cgdW5pbXBsZW1lbnRlZEVycm9yKCdmcm9tRGF0ZVRpbWUoKScpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIGluIHNpbXBsaWZpZWQgZXh0ZW5kZWQgSVNPIGZvcm1hdCAoSVNPIDg2MDEpLlxuICAgKlxuICAgKiBfTm90ZTogdGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIHRlc3RpbmcgYW5kIGl0c1xuICAgKiBpbXBsZW1lbnRhdGlvbiBpc24ndCBwYXJ0aWN1bGFybHkgcGVyZm9ybWFudC5fXG4gICAqL1xuICB0b0lTT1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5zZXQoJ3RpbWV6b25lJywgJ1VUQycpXG4gICAgICAudG9EYXRlVGltZSgpXG4gICAgICAudG9JU09TdHJpbmcoKTtcbiAgfVxuICB0b0RhdGVUaW1lKCkge1xuICAgIGNvbnN0IGRhdGUgPSBEYXRlVGltZS5mcm9tSlNPTihcbiAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy50b0pTT04oKSksIHsgZ2VuZXJhdG9yczogdGhpcy5nZW5lcmF0b3JzIH0pLFxuICAgICk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbn1cbkRhdGVBZGFwdGVyQmFzZS5oYXNUaW1lem9uZVN1cHBvcnQgPSBmYWxzZTtcbmZ1bmN0aW9uIHVuaW1wbGVtZW50ZWRFcnJvcihuYW1lKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoYFlvdSBtdXN0IGltcGxlbWVudCB0aGUgXCIke25hbWV9XCIgbWV0aG9kIGZvciB0aGlzIERhdGVBZGFwdGVyIGNsYXNzYCk7XG59XG52YXIgRGF0ZUFkYXB0ZXI7XG4oZnVuY3Rpb24oRGF0ZUFkYXB0ZXIpIHtcbiAgRGF0ZUFkYXB0ZXIuV0VFS0RBWVMgPSBbJ1NVJywgJ01PJywgJ1RVJywgJ1dFJywgJ1RIJywgJ0ZSJywgJ1NBJ107XG4gIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9TRUNPTkQgPSAxMDAwO1xuICBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX1NFQ09ORCAqIDYwO1xuICBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fSE9VUiA9IERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9NSU5VVEUgKiA2MDtcbiAgRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0RBWSA9IERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9IT1VSICogMjQ7XG4gIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9XRUVLID0gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0RBWSAqIDc7XG59KShEYXRlQWRhcHRlciB8fCAoRGF0ZUFkYXB0ZXIgPSB7fSkpO1xuY2xhc3MgSW52YWxpZERhdGVUaW1lRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuY2xhc3MgRGF0ZVRpbWUge1xuICBjb25zdHJ1Y3RvcihkYXRlLCB0aW1lem9uZSwgZHVyYXRpb24sIGdlbmVyYXRvcnMpIHtcbiAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICB0aGlzLnRpbWV6b25lID0gdGltZXpvbmUgfHwgbnVsbDtcbiAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb24gfHwgMDtcbiAgICB0aGlzLmdlbmVyYXRvcnMgPSAoZ2VuZXJhdG9ycyAmJiBnZW5lcmF0b3JzLnNsaWNlKCkpIHx8IFtdO1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcih0aGlzLmR1cmF0aW9uKSB8fCB0aGlzLmR1cmF0aW9uIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlVGltZUVycm9yKCdkdXJhdGlvbiBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXInKTtcbiAgICB9XG4gICAgdGhpcy5hc3NlcnRJc1ZhbGlkKCk7XG4gIH1cbiAgLy8gLyoqXG4gIC8vICAqIFNpbWlsYXIgdG8gYEFycmF5LmlzQXJyYXkoKWAsIGBpc0luc3RhbmNlKClgIHByb3ZpZGVzIGEgc3VyZWZpcmUgbWV0aG9kXG4gIC8vICAqIG9mIGRldGVybWluaW5nIGlmIGFuIG9iamVjdCBpcyBhIGBEYXRlVGltZWAgYnkgY2hlY2tpbmcgYWdhaW5zdCB0aGVcbiAgLy8gICogZ2xvYmFsIHN5bWJvbCByZWdpc3RyeS5cbiAgLy8gICovXG4gIC8vIHN0YXRpYyBpc0luc3RhbmNlKG9iamVjdDogYW55KTogb2JqZWN0IGlzIERhdGVUaW1lIHtcbiAgLy8gICByZXR1cm4gISEob2JqZWN0ICYmIG9iamVjdFtEQVRFVElNRV9JRF0pO1xuICAvLyB9XG4gIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKFxuICAgICAgRGF0ZS5VVEMoXG4gICAgICAgIGpzb24ueWVhcixcbiAgICAgICAganNvbi5tb250aCAtIDEsXG4gICAgICAgIGpzb24uZGF5LFxuICAgICAgICBqc29uLmhvdXIsXG4gICAgICAgIGpzb24ubWludXRlLFxuICAgICAgICBqc29uLnNlY29uZCxcbiAgICAgICAganNvbi5taWxsaXNlY29uZCxcbiAgICAgICksXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IERhdGVUaW1lKGRhdGUsIGpzb24udGltZXpvbmUsIGpzb24uZHVyYXRpb24sIGpzb24uZ2VuZXJhdG9ycyk7XG4gIH1cbiAgc3RhdGljIGZyb21EYXRlQWRhcHRlcihhZGFwdGVyKSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU09OKFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhZGFwdGVyLnRvSlNPTigpKSwgeyBnZW5lcmF0b3JzOiBhZGFwdGVyLmdlbmVyYXRvcnMgfSksXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBgZHVyYXRpb25gIGlzIGAwYC4gRWxzZSByZXR1cm5zXG4gICAqIHRoZSBgZW5kYCBkYXRlLlxuICAgKi9cbiAgZ2V0IGVuZCgpIHtcbiAgICBpZiAoIXRoaXMuZHVyYXRpb24pIHJldHVybjtcbiAgICBpZiAodGhpcy5fZW5kKSByZXR1cm4gdGhpcy5fZW5kO1xuICAgIHRoaXMuX2VuZCA9IHRoaXMuYWRkKHRoaXMuZHVyYXRpb24sICdtaWxsaXNlY29uZCcpO1xuICAgIHJldHVybiB0aGlzLl9lbmQ7XG4gIH1cbiAgLy8gV2hpbGUgd2UgY29uc3RyYWluIHRoZSBhcmd1bWVudCB0byBiZSBhbm90aGVyIERhdGVBZGFwdGVyIGluIHR5cGVzY3JpcHRcbiAgLy8gd2UgaGFuZGxlIHRoZSBjYXNlIG9mIHNvbWVvbmUgcGFzc2luZyBpbiBhbm90aGVyIHR5cGUgb2Ygb2JqZWN0IGluIGphdmFzY3JpcHRcbiAgaXNFcXVhbChvYmplY3QpIHtcbiAgICBpZiAoIW9iamVjdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhc3NlcnRTYW1lVGltZVpvbmUodGhpcywgb2JqZWN0KTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IG9iamVjdC52YWx1ZU9mKCk7XG4gIH1cbiAgaXNCZWZvcmUob2JqZWN0KSB7XG4gICAgYXNzZXJ0U2FtZVRpbWVab25lKHRoaXMsIG9iamVjdCk7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDwgb2JqZWN0LnZhbHVlT2YoKTtcbiAgfVxuICBpc0JlZm9yZU9yRXF1YWwob2JqZWN0KSB7XG4gICAgYXNzZXJ0U2FtZVRpbWVab25lKHRoaXMsIG9iamVjdCk7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVPZigpIDw9IG9iamVjdC52YWx1ZU9mKCk7XG4gIH1cbiAgaXNBZnRlcihvYmplY3QpIHtcbiAgICBhc3NlcnRTYW1lVGltZVpvbmUodGhpcywgb2JqZWN0KTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPiBvYmplY3QudmFsdWVPZigpO1xuICB9XG4gIGlzQWZ0ZXJPckVxdWFsKG9iamVjdCkge1xuICAgIGFzc2VydFNhbWVUaW1lWm9uZSh0aGlzLCBvYmplY3QpO1xuICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+PSBvYmplY3QudmFsdWVPZigpO1xuICB9XG4gIGlzT2NjdXJyaW5nKG9iamVjdCkge1xuICAgIGlmICghdGhpcy5kdXJhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRlVGltZSNpc09jY3VycmluZygpIGlzIG9ubHkgYXBwbGljYWJsZSB0byBEYXRlVGltZXMgd2l0aCBkdXJhdGlvbnMnKTtcbiAgICB9XG4gICAgYXNzZXJ0U2FtZVRpbWVab25lKHRoaXMsIG9iamVjdCk7XG4gICAgcmV0dXJuIChcbiAgICAgIG9iamVjdC5pc0FmdGVyT3JFcXVhbCh0aGlzKSAmJiBvYmplY3QuaXNCZWZvcmVPckVxdWFsKHRoaXMuYWRkKHRoaXMuZHVyYXRpb24sICdtaWxsaXNlY29uZCcpKVxuICAgICk7XG4gIH1cbiAgYWRkKGFtb3VudCwgdW5pdCkge1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnZ2VuZXJhdG9yJzoge1xuICAgICAgICBjb25zdCBnZW5lcmF0b3JzID0gdGhpcy5nZW5lcmF0b3JzLnNsaWNlKCk7XG4gICAgICAgIGdlbmVyYXRvcnMudW5zaGlmdChhbW91bnQpO1xuICAgICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHRoaXMuZGF0ZSwgdGhpcy50aW1lem9uZSwgdGhpcy5kdXJhdGlvbiwgZ2VuZXJhdG9ycyk7XG4gICAgICB9XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ1llYXJzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENNb250aHModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDV2Vla3ModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENEYXlzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ0hvdXJzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDTWludXRlcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ1NlY29uZHModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ01pbGxpc2Vjb25kcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVuaXQgcHJvdmlkZWQgdG8gYERhdGVUaW1lI2FkZGAnKTtcbiAgICB9XG4gIH1cbiAgc3VidHJhY3QoYW1vdW50LCB1bml0KSB7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ1llYXJzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENNb250aHModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDV2Vla3ModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENEYXlzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ0hvdXJzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDTWludXRlcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ1NlY29uZHModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ01pbGxpc2Vjb25kcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVuaXQgcHJvdmlkZWQgdG8gYERhdGVUaW1lI3N1YnRyYWN0YCcpO1xuICAgIH1cbiAgfVxuICBnZXQodW5pdCkge1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5nZXRVVENNb250aCgpICsgMTtcbiAgICAgIGNhc2UgJ3llYXJkYXknOlxuICAgICAgICByZXR1cm4gZ2V0VVRDWWVhckRheSh0aGlzLmRhdGUpO1xuICAgICAgY2FzZSAnd2Vla2RheSc6XG4gICAgICAgIHJldHVybiBEYXRlQWRhcHRlci5XRUVLREFZU1t0aGlzLmRhdGUuZ2V0VVRDRGF5KCldO1xuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5nZXRVVENIb3VycygpO1xuICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5nZXRVVENNaW51dGVzKCk7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1bml0IHByb3ZpZGVkIHRvIGBEYXRlVGltZSNzZXRgJyk7XG4gICAgfVxuICB9XG4gIHNldCh1bml0LCB2YWx1ZSkge1xuICAgIGlmICh1bml0ID09PSAnZHVyYXRpb24nKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHRoaXMuZGF0ZSwgdGhpcy50aW1lem9uZSwgdmFsdWUsIHRoaXMuZ2VuZXJhdG9ycyk7XG4gICAgfVxuICAgIGlmICh1bml0ID09PSAnZ2VuZXJhdG9ycycpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUodGhpcy5kYXRlLCB0aGlzLnRpbWV6b25lLCB0aGlzLmR1cmF0aW9uLCB2YWx1ZSk7XG4gICAgfVxuICAgIGxldCBkYXRlID0gbmV3IERhdGUodGhpcy5kYXRlKTtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb250aCc6IHtcbiAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgZGF5IG9mIHRoZSBtb250aFxuICAgICAgICAvLyBpcyBncmVhdGVyIHRoYW4gZGF5cyBpbiB0aGUgbW9udGggd2UgYXJlIG1vdmluZyB0bywgd2UgbmVlZCB0byBhbHNvXG4gICAgICAgIC8vIHNldCB0aGUgZGF5IHRvIHRoZSBlbmQgb2YgdGhhdCBtb250aC5cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gbW9udGhMZW5ndGgodmFsdWUsIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgICAgIGNvbnN0IGRheSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICBpZiAoZGF5ID4gbGVuZ3RoKSB7XG4gICAgICAgICAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICAgICAgICAgIGRhdGUuc2V0VVRDTW9udGgodmFsdWUpO1xuICAgICAgICAgIGRhdGUgPSBzdWJVVENEYXlzKGRhdGUsIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGUuc2V0VVRDTW9udGgodmFsdWUgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGRhdGUuc2V0VVRDRGF0ZSh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnModmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIGRhdGUuc2V0VVRDTWludXRlcyh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgZGF0ZS5zZXRVVENTZWNvbmRzKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgIGRhdGUuc2V0VVRDTWlsbGlzZWNvbmRzKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdW5pdCBwcm92aWRlZCB0byBgRGF0ZVRpbWUjc2V0YCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoZGF0ZSk7XG4gIH1cbiAgZ3JhbnVsYXJpdHkoZ3JhbnVsYXJpdHksIG9wdCA9IHt9KSB7XG4gICAgbGV0IGRhdGUgPSB0aGlzLmZvcmtEYXRlVGltZSh0aGlzLmRhdGUpO1xuICAgIHN3aXRjaCAoZ3JhbnVsYXJpdHkpIHtcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ21vbnRoJywgMSk7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnZGF5JywgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIGRhdGUgPSBzZXREYXRlVG9TdGFydE9mV2VlayhkYXRlLCBvcHQud2Vla1N0YXJ0KTtcbiAgICB9XG4gICAgc3dpdGNoIChncmFudWxhcml0eSkge1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnaG91cicsIDApO1xuICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnbWludXRlJywgMCk7XG4gICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ3NlY29uZCcsIDApO1xuICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdtaWxsaXNlY29uZCcsIDApO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBncmFudWxhcml0eSBwcm92aWRlZCB0byBgRGF0ZVRpbWUjZ3JhbnVsYXJpdHlgOiAnICsgZ3JhbnVsYXJpdHkpO1xuICAgIH1cbiAgfVxuICBlbmRHcmFudWxhcml0eShncmFudWxhcml0eSwgb3B0ID0ge30pIHtcbiAgICBsZXQgZGF0ZSA9IHRoaXMuZm9ya0RhdGVUaW1lKHRoaXMuZGF0ZSk7XG4gICAgc3dpdGNoIChncmFudWxhcml0eSkge1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnbW9udGgnLCAxMik7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnZGF5JywgbW9udGhMZW5ndGgoZGF0ZS5nZXQoJ21vbnRoJyksIGRhdGUuZ2V0KCd5ZWFyJykpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgZGF0ZSA9IHNldERhdGVUb0VuZE9mV2VlayhkYXRlLCBvcHQud2Vla1N0YXJ0KTtcbiAgICB9XG4gICAgc3dpdGNoIChncmFudWxhcml0eSkge1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnaG91cicsIDIzKTtcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ21pbnV0ZScsIDU5KTtcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnc2Vjb25kJywgNTkpO1xuICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdtaWxsaXNlY29uZCcsIDk5OSk7XG4gICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGdyYW51bGFyaXR5IHByb3ZpZGVkIHRvIGBEYXRlVGltZSNncmFudWxhcml0eWA6ICcgKyBncmFudWxhcml0eSk7XG4gICAgfVxuICB9XG4gIHRvSVNPU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGUudG9JU09TdHJpbmcoKTtcbiAgfVxuICB0b0RhdGVUaW1lKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBqc29uID0ge1xuICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICB5ZWFyOiB0aGlzLmdldCgneWVhcicpLFxuICAgICAgbW9udGg6IHRoaXMuZ2V0KCdtb250aCcpLFxuICAgICAgZGF5OiB0aGlzLmdldCgnZGF5JyksXG4gICAgICBob3VyOiB0aGlzLmdldCgnaG91cicpLFxuICAgICAgbWludXRlOiB0aGlzLmdldCgnbWludXRlJyksXG4gICAgICBzZWNvbmQ6IHRoaXMuZ2V0KCdzZWNvbmQnKSxcbiAgICAgIG1pbGxpc2Vjb25kOiB0aGlzLmdldCgnbWlsbGlzZWNvbmQnKSxcbiAgICB9O1xuICAgIGlmICh0aGlzLmR1cmF0aW9uKSB7XG4gICAgICBqc29uLmR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRlLnZhbHVlT2YoKTtcbiAgfVxuICBhc3NlcnRJc1ZhbGlkKCkge1xuICAgIGlmIChpc05hTih0aGlzLnZhbHVlT2YoKSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZVRpbWVFcnJvcignRGF0ZVRpbWUgaGFzIGludmFsaWQgZGF0ZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZm9ya0RhdGVUaW1lKGRhdGUpIHtcbiAgICByZXR1cm4gbmV3IERhdGVUaW1lKGRhdGUsIHRoaXMudGltZXpvbmUsIHRoaXMuZHVyYXRpb24sIHRoaXMuZ2VuZXJhdG9ycyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFzc2VydFNhbWVUaW1lWm9uZSh4LCB5KSB7XG4gIGlmICh4LnRpbWV6b25lICE9PSB5LnRpbWV6b25lKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWREYXRlVGltZUVycm9yKFxuICAgICAgJ0F0dGVtcHRlZCB0byBjb21wYXJlIGEgZGF0ZXRpbWUgdG8gYW5vdGhlciBkYXRlIGluIGEgZGlmZmVyZW50IHRpbWV6b25lOiAnICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoeCkgK1xuICAgICAgICAnIGFuZCAnICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoeSksXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHNldERhdGVUb1N0YXJ0T2ZXZWVrKGRhdGUsIHdrc3QpIHtcbiAgY29uc3QgaW5kZXggPSBvcmRlcmVkV2Vla2RheXMod2tzdCkuaW5kZXhPZihkYXRlLmdldCgnd2Vla2RheScpKTtcbiAgcmV0dXJuIGRhdGUuc3VidHJhY3QoaW5kZXgsICdkYXknKTtcbn1cbmZ1bmN0aW9uIHNldERhdGVUb0VuZE9mV2VlayhkYXRlLCB3a3N0KSB7XG4gIGNvbnN0IGluZGV4ID0gb3JkZXJlZFdlZWtkYXlzKHdrc3QpLmluZGV4T2YoZGF0ZS5nZXQoJ3dlZWtkYXknKSk7XG4gIHJldHVybiBkYXRlLmFkZCg2IC0gaW5kZXgsICdkYXknKTtcbn1cbmZ1bmN0aW9uIGRhdGVUaW1lU29ydENvbXBhcmVyKGEsIGIpIHtcbiAgaWYgKGEuaXNBZnRlcihiKSkgcmV0dXJuIDE7XG4gIGlmIChhLmlzQmVmb3JlKGIpKSByZXR1cm4gLTE7XG4gIGlmIChhLmR1cmF0aW9uICYmIGIuZHVyYXRpb24pIHtcbiAgICBpZiAoYS5kdXJhdGlvbiA+IGIuZHVyYXRpb24pIHJldHVybiAxO1xuICAgIGlmIChhLmR1cmF0aW9uIDwgYi5kdXJhdGlvbikgcmV0dXJuIC0xO1xuICB9XG4gIHJldHVybiAwO1xufVxuZnVuY3Rpb24gdW5pcURhdGVUaW1lcyhkYXRlcykge1xuICByZXR1cm4gQXJyYXkuZnJvbShuZXcgTWFwKGRhdGVzLm1hcChkYXRlID0+IFtkYXRlLnRvSVNPU3RyaW5nKCksIGRhdGVdKSkudmFsdWVzKCkpO1xufVxuZnVuY3Rpb24gb3JkZXJlZFdlZWtkYXlzKHdrc3QgPSAnU1UnKSB7XG4gIGNvbnN0IHdrZGF5cyA9IERhdGVBZGFwdGVyLldFRUtEQVlTLnNsaWNlKCk7XG4gIGxldCBpbmRleCA9IHdrZGF5cy5pbmRleE9mKHdrc3QpO1xuICB3aGlsZSAoaW5kZXggIT09IDApIHtcbiAgICBzaGlmdEFycmF5KHdrZGF5cyk7XG4gICAgaW5kZXgtLTtcbiAgfVxuICByZXR1cm4gd2tkYXlzO1xufVxuZnVuY3Rpb24gc2hpZnRBcnJheShhcnJheSwgZnJvbSA9ICdmaXJzdCcpIHtcbiAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBhcnJheTtcbiAgfSBlbHNlIGlmIChmcm9tID09PSAnZmlyc3QnKSB7XG4gICAgYXJyYXkucHVzaChhcnJheS5zaGlmdCgpKTtcbiAgfSBlbHNlIHtcbiAgICBhcnJheS51bnNoaWZ0KGFycmF5LnBvcCgpKTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBnZXREaWZmZXJlbmNlQmV0d2VlbldlZWtkYXlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHJldHVybiAwO1xuICBjb25zdCByZXN1bHQgPSBEYXRlQWRhcHRlci5XRUVLREFZUy5pbmRleE9mKHgpIC0gRGF0ZUFkYXB0ZXIuV0VFS0RBWVMuaW5kZXhPZih5KTtcbiAgcmV0dXJuIHJlc3VsdCA+IDAgPyA3IC0gcmVzdWx0IDogTWF0aC5hYnMocmVzdWx0KTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZGF5cyBpbiB0aGUgZ2l2ZW4gbW9udGguXG4gKlxuICogQHBhcmFtIG1vbnRoIGJhc2UtMVxuICogQHBhcmFtIHllYXJcbiAqL1xuZnVuY3Rpb24gbW9udGhMZW5ndGgobW9udGgsIHllYXIpIHtcbiAgY29uc3QgYmxvY2sgPSB7XG4gICAgMTogMzEsXG4gICAgMjogZ2V0RGF5c0luRmVicnVhcnkoeWVhciksXG4gICAgMzogMzEsXG4gICAgNDogMzAsXG4gICAgNTogMzEsXG4gICAgNjogMzAsXG4gICAgNzogMzEsXG4gICAgODogMzEsXG4gICAgOTogMzAsXG4gICAgMTA6IDMxLFxuICAgIDExOiAzMCxcbiAgICAxMjogMzEsXG4gIH07XG4gIHJldHVybiBibG9ja1ttb250aF07XG59XG5mdW5jdGlvbiBnZXREYXlzSW5GZWJydWFyeSh5ZWFyKSB7XG4gIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMjkgOiAyODtcbn1cbi8vIHRha2VuIGZyb20gZGF0ZS1mblxuZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gIHJldHVybiB5ZWFyICUgNDAwID09PSAwIHx8ICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKTtcbn1cbmZ1bmN0aW9uIGdldERheXNJblllYXIoeWVhcikge1xuICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbn1cbmZ1bmN0aW9uIGdldFVUQ1llYXJEYXkobm93KSB7XG4gIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoRGF0ZS5VVEMobm93LmdldFVUQ0Z1bGxZZWFyKCksIDAsIDEpKTtcbiAgY29uc3QgZGlmZiA9IG5vdy52YWx1ZU9mKCkgLSBzdGFydC52YWx1ZU9mKCk7XG4gIHJldHVybiAxICsgTWF0aC5mbG9vcihkaWZmIC8gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0RBWSk7XG59XG4vKipcbiAqIFRoZXNlIGZ1bmN0aW9ucyBhcmUgYmFzaWNhbGx5IGxpZnRlZCBmcm9tIGBkYXRlLWZuc2AsIGJ1dCBjaGFuZ2VkXG4gKiB0byB1c2UgdGhlIFVUQyBkYXRlIG1ldGhvZHMsIHdoaWNoIGBkYXRlLWZuc2AgZG9lc24ndCBzdXBwb3J0LlxuICovXG5mdW5jdGlvbiB0b0ludGVnZXIoaW5wdXQpIHtcbiAgaWYgKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB0cnVlIHx8IGlucHV0ID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgY29uc3QgaW50ID0gTnVtYmVyKGlucHV0KTtcbiAgaWYgKGlzTmFOKGludCkpIHtcbiAgICByZXR1cm4gaW50O1xuICB9XG4gIHJldHVybiBpbnQgPCAwID8gTWF0aC5jZWlsKGludCkgOiBNYXRoLmZsb29yKGludCk7XG59XG5mdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcyIGFyZ3VtZW50cyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3VtZW50cy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxuICBjb25zdCB0aW1lc3RhbXAgPSBkaXJ0eURhdGUudmFsdWVPZigpO1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ1llYXJzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIHJldHVybiBhZGRVVENNb250aHMoZGF0ZSwgYW1vdW50ICogMTIpO1xufVxuZnVuY3Rpb24gYWRkVVRDTW9udGhzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgY29uc3QgZGVzaXJlZE1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpICsgYW1vdW50O1xuICBjb25zdCBkYXRlV2l0aERlc2lyZWRNb250aCA9IG5ldyBEYXRlKDApO1xuICBkYXRlV2l0aERlc2lyZWRNb250aC5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRlc2lyZWRNb250aCwgMSk7XG4gIGRhdGVXaXRoRGVzaXJlZE1vbnRoLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBkYXlzSW5Nb250aCA9IG1vbnRoTGVuZ3RoKFxuICAgIGRhdGVXaXRoRGVzaXJlZE1vbnRoLmdldFVUQ01vbnRoKCkgKyAxLFxuICAgIGRhdGVXaXRoRGVzaXJlZE1vbnRoLmdldFVUQ0Z1bGxZZWFyKCksXG4gICk7XG4gIC8vIFNldCB0aGUgbGFzdCBkYXkgb2YgdGhlIG5ldyBtb250aFxuICAvLyBpZiB0aGUgb3JpZ2luYWwgZGF0ZSB3YXMgdGhlIGxhc3QgZGF5IG9mIHRoZSBsb25nZXIgbW9udGhcbiAgZGF0ZS5zZXRVVENNb250aChkZXNpcmVkTW9udGgsIE1hdGgubWluKGRheXNJbk1vbnRoLCBkYXRlLmdldFVUQ0RhdGUoKSkpO1xuICByZXR1cm4gZGF0ZTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ1dlZWtzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIGNvbnN0IGRheXMgPSBhbW91bnQgKiA3O1xuICByZXR1cm4gYWRkVVRDRGF5cyhkYXRlLCBkYXlzKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ0RheXMoZGF0ZSwgaW5wdXQpIHtcbiAgLy8gYnkgYWRkaW5nIG1pbGxpc2Vjb25kcyByYXRoZXIgdGhhbiBkYXlzLCB3ZSBzdXByZXNzIHRoZSBuYXRpdmUgRGF0ZSBvYmplY3QncyBhdXRvbWF0aWNcbiAgLy8gZGF5bGlnaHQgc2F2aW5ncyB0aW1lIGNvbnZlcnNpb25zIHdoaWNoIHdlIGRvbid0IHdhbnQgaW4gVVRDIG1vZGVcbiAgcmV0dXJuIGFkZFVUQ01pbGxpc2Vjb25kcyhkYXRlLCB0b0ludGVnZXIoaW5wdXQpICogRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0RBWSk7XG59XG5mdW5jdGlvbiBhZGRVVENIb3VycyhkYXRlLCBpbnB1dCkge1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoaW5wdXQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRhdGUsIGFtb3VudCAqIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9IT1VSKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ01pbnV0ZXMoZGF0ZSwgaW5wdXQpIHtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGlucHV0KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkYXRlLCBhbW91bnQgKiBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fTUlOVVRFKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ1NlY29uZHMoZGF0ZSwgaW5wdXQpIHtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGlucHV0KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkYXRlLCBhbW91bnQgKiBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fU0VDT05EKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ01pbGxpc2Vjb25kcyhkYXRlLCBpbnB1dCkge1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoaW5wdXQpO1xuICBjb25zdCB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENZZWFycyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ1llYXJzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDTW9udGhzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkVVRDTW9udGhzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDV2Vla3MoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENXZWVrcyhkYXRlLCAtYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ0RheXMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENEYXlzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDSG91cnMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENIb3VycyhkYXRlLCAtYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ01pbnV0ZXMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENNaW51dGVzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDU2Vjb25kcyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ1NlY29uZHMoZGF0ZSwgLWFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENNaWxsaXNlY29uZHMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENNaWxsaXNlY29uZHMoZGF0ZSwgLWFtb3VudCk7XG59XG5cbmNsYXNzIEFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuY2xhc3MgSW5maW5pdGVMb29wRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuZnVuY3Rpb24gbnVtYmVyU29ydENvbXBhcmVyKGEsIGIpIHtcbiAgaWYgKGEgPiBiKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSBpZiAoYiA+IGEpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIGZyZXFUb0dyYW51bGFyaXR5KGZyZXEpIHtcbiAgc3dpdGNoIChmcmVxKSB7XG4gICAgY2FzZSAnWUVBUkxZJzpcbiAgICAgIHJldHVybiAneWVhcic7XG4gICAgY2FzZSAnTU9OVEhMWSc6XG4gICAgICByZXR1cm4gJ21vbnRoJztcbiAgICBjYXNlICdXRUVLTFknOlxuICAgICAgcmV0dXJuICd3ZWVrJztcbiAgICBjYXNlICdEQUlMWSc6XG4gICAgICByZXR1cm4gJ2RheSc7XG4gICAgY2FzZSAnSE9VUkxZJzpcbiAgICAgIHJldHVybiAnaG91cic7XG4gICAgY2FzZSAnTUlOVVRFTFknOlxuICAgICAgcmV0dXJuICdtaW51dGUnO1xuICAgIGNhc2UgJ1NFQ09ORExZJzpcbiAgICAgIHJldHVybiAnc2Vjb25kJztcbiAgICBjYXNlICdNSUxMSVNFQ09ORExZJzpcbiAgICAgIHJldHVybiAnbWlsbGlzZWNvbmQnO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gZnJlcSBwYXNzZWQgdG8gZnJlcVRvR3JhbnVsYXJpdHkoKScpO1xuICB9XG59XG5mdW5jdGlvbiBjbG9uZUpTT04oanNvbikge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShqc29uKSk7XG59XG5mdW5jdGlvbiBkYXRlSW5wdXRUb0RhdGVBZGFwdGVyKGRhdGUpIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIHJldHVybiBkYXRlIGluc3RhbmNlb2YgRGF0ZVRpbWUgPyBEYXRlQWRhcHRlckJhc2UuYWRhcHRlci5mcm9tRGF0ZVRpbWUoZGF0ZSkgOlxuICAgICAgICBkYXRlIGluc3RhbmNlb2YgRGF0ZUFkYXB0ZXJCYXNlID8gZGF0ZSA6XG4gICAgICAgICAgICBEYXRlQWRhcHRlckJhc2UuYWRhcHRlci5mcm9tRGF0ZShkYXRlKTtcbn1cbmZ1bmN0aW9uIGRhdGVJbnB1dFRvRGF0ZVRpbWUoZGF0ZSwgdGltZXpvbmUpIHtcbiAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuICAgIGlmIChkYXRlLnRpbWV6b25lICE9PSB0aW1lem9uZSkge1xuICAgICAgcmV0dXJuIERhdGVBZGFwdGVyQmFzZS5hZGFwdGVyXG4gICAgICAgIC5mcm9tRGF0ZVRpbWUoZGF0ZSlcbiAgICAgICAgLnNldCgndGltZXpvbmUnLCB0aW1lem9uZSlcbiAgICAgICAgLnRvRGF0ZVRpbWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIGRhdGUgaW5zdGFuY2VvZiBEYXRlQWRhcHRlckJhc2VcbiAgICA/IGRhdGUuc2V0KCd0aW1lem9uZScsIHRpbWV6b25lKS50b0RhdGVUaW1lKClcbiAgICA6IERhdGVBZGFwdGVyQmFzZS5hZGFwdGVyXG4gICAgICAgIC5mcm9tRGF0ZShkYXRlKVxuICAgICAgICAuc2V0KCd0aW1lem9uZScsIHRpbWV6b25lKVxuICAgICAgICAudG9EYXRlVGltZSgpO1xufVxuLy8gZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZURhdGVJbnB1dDxUIGV4dGVuZHMgRGF0ZUFkYXB0ZXI+KFxuLy8gICBkYXRlQWRhcHRlcjogRGF0ZUFkYXB0ZXJDb25zdHJ1Y3RvcjxUPixcbi8vICAgaW5wdXQ6IERhdGVJbnB1dDxUPixcbi8vICAgdGltZXpvbmU6IHN0cmluZyB8IG51bGwsXG4vLyApOiBEYXRlVGltZSB7XG4vLyAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIERhdGVUaW1lKSB7XG4vLyAgICAgaWYgKGlucHV0LnRpbWV6b25lICE9PSB0aW1lem9uZSkge1xuLy8gICAgICAgcmV0dXJuIGRhdGVBZGFwdGVyXG4vLyAgICAgICAgIC5mcm9tRGF0ZVRpbWUoaW5wdXQpXG4vLyAgICAgICAgIC5zZXQoJ3RpbWV6b25lJywgdGltZXpvbmUpXG4vLyAgICAgICAgIC50b0RhdGVUaW1lKCk7XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiBpbnB1dDtcbi8vICAgfVxuLy8gICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlQWRhcHRlclxuLy8gICAgID8gaW5wdXQuc2V0KCd0aW1lem9uZScsIHRpbWV6b25lKS50b0RhdGVUaW1lKClcbi8vICAgICA6IG5ldyBkYXRlQWRhcHRlcihpbnB1dCkudG9EYXRlVGltZSgpO1xuLy8gfVxuZnVuY3Rpb24gbm9ybWFsaXplRGF0ZVRpbWVUaW1lem9uZShkYXRlLCB0aW1lem9uZSkge1xuICBpZiAoZGF0ZS50aW1lem9uZSAhPT0gdGltZXpvbmUpIHtcbiAgICByZXR1cm4gRGF0ZUFkYXB0ZXJCYXNlLmFkYXB0ZXJcbiAgICAgIC5mcm9tRGF0ZVRpbWUoZGF0ZSlcbiAgICAgIC5zZXQoJ3RpbWV6b25lJywgdGltZXpvbmUpXG4gICAgICAudG9EYXRlVGltZSgpO1xuICB9XG4gIHJldHVybiBkYXRlO1xufVxuXG5jbGFzcyBSdWxlT3B0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuZnVuY3Rpb24gbm9ybWFsaXplRGVmYXVsdE9wdGlvbnMob3B0aW9ucykge1xuICBsZXQgc3RhcnQ7XG4gIGlmIChvcHRpb25zLnN0YXJ0IGluc3RhbmNlb2YgRGF0ZVRpbWUpIHtcbiAgICBzdGFydCA9IG9wdGlvbnMuc3RhcnQ7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5zdGFydCBpbnN0YW5jZW9mIERhdGVBZGFwdGVyQmFzZSkge1xuICAgIHN0YXJ0ID0gb3B0aW9ucy5zdGFydC50b0RhdGVUaW1lKCk7XG4gIH0gZWxzZSBpZiAoRGF0ZUFkYXB0ZXJCYXNlLmFkYXB0ZXIuaXNEYXRlKG9wdGlvbnMuc3RhcnQpKSB7XG4gICAgc3RhcnQgPSBEYXRlQWRhcHRlckJhc2UuYWRhcHRlci5mcm9tRGF0ZShvcHRpb25zLnN0YXJ0KS50b0RhdGVUaW1lKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcihcbiAgICAgICdcInN0YXJ0XCIgbXVzdCBiZSBlaXRoZXIgYSBgRGF0ZUFkYXB0ZXJgIGluc3RhbmNlIG9yIGFuIGluc3RhbmNlIG9mIHRoZSAnICtcbiAgICAgICAgJ2RhdGUgYSBEYXRlQWRhcHRlciBpcyB3cmFwcGluZyAoZS5nLiBgU3RhbmRhcmREYXRlQWRhcHRlcmAgd3JhcHMgYSBgRGF0ZWApJyxcbiAgICApO1xuICB9XG4gIGxldCBlbmQ7XG4gIGlmIChvcHRpb25zLmVuZCkge1xuICAgIGlmIChvcHRpb25zLmVuZCBpbnN0YW5jZW9mIERhdGVUaW1lKSB7XG4gICAgICBlbmQgPSBvcHRpb25zLmVuZDtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZW5kIGluc3RhbmNlb2YgRGF0ZUFkYXB0ZXJCYXNlKSB7XG4gICAgICBlbmQgPSBvcHRpb25zLmVuZC50b0RhdGVUaW1lKCk7XG4gICAgfSBlbHNlIGlmIChEYXRlQWRhcHRlckJhc2UuYWRhcHRlci5pc0RhdGUob3B0aW9ucy5lbmQpKSB7XG4gICAgICBlbmQgPSBEYXRlQWRhcHRlckJhc2UuYWRhcHRlci5mcm9tRGF0ZShvcHRpb25zLmVuZCkudG9EYXRlVGltZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKFxuICAgICAgICAnXCJlbmRcIiBtdXN0IGJlIGVpdGhlciBiZSBgdW5kZWZpbmVkYCwgYSBgRGF0ZUFkYXB0ZXJgIGluc3RhbmNlLCBvciBhbiBpbnN0YW5jZSBvZiB0aGUgJyArXG4gICAgICAgICAgJ2RhdGUgYSBEYXRlQWRhcHRlciBpcyB3cmFwcGluZyAoZS5nLiBgU3RhbmRhcmREYXRlQWRhcHRlcmAgd3JhcHMgYSBgRGF0ZWApJyxcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmR1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5kdXJhdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiZHVyYXRpb25cIiBleHBlY3RzIGEgd2hvbGUgbnVtYmVyJyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmR1cmF0aW9uIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiZHVyYXRpb25cIiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmNvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5jb3VudCkpIHtcbiAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiY291bnRcIiBtdXN0IGJlIGEgd2hvbGUgbnVtYmVyJyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmNvdW50IDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJjb3VudFwiIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnKTtcbiAgICB9XG4gIH1cbiAgaWYgKG9wdGlvbnMuZW5kICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJlbmRcIiBhbmQgXCJjb3VudFwiIGNhbm5vdCBib3RoIGJlIHByZXNlbnQnKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0YXJ0LFxuICAgIGVuZCxcbiAgICBjb3VudDogb3B0aW9ucy5jb3VudCxcbiAgICBkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVJ1bGVPcHRpb25zKHJlY3VycmVuY2VNb2R1bGVzLCBvcHRpb25zKSB7XG4gIGNvbnN0IG5vcm1PcHRpb25zID0gbm9ybWFsaXplRGVmYXVsdE9wdGlvbnMob3B0aW9ucyk7XG4gIGNvbnN0IHN0YXJ0T3B0aW9ucyA9IGNsb25lSlNPTihvcHRpb25zKTtcbiAgcmVjdXJyZW5jZU1vZHVsZXMuZm9yRWFjaChtb2QgPT4ge1xuICAgIG1vZC5ub3JtYWxpemVPcHRpb25zKHN0YXJ0T3B0aW9ucywgbm9ybU9wdGlvbnMpO1xuICB9KTtcbiAgT2JqZWN0LmtleXMobm9ybU9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAobm9ybU9wdGlvbnNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWxldGUgbm9ybU9wdGlvbnNba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbm9ybU9wdGlvbnM7XG59XG5mdW5jdGlvbiBjbG9uZVJ1bGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgY29uc3Qgb2JqID0gY2xvbmVKU09OKG9wdGlvbnMpO1xuICBvYmouc3RhcnQgPSBvcHRpb25zLnN0YXJ0O1xuICBpZiAob3B0aW9ucy5lbmQpIG9iai5lbmQgPSBvcHRpb25zLmVuZDtcbiAgcmV0dXJuIG9iajtcbn1cblxuY2xhc3MgUmVjdXJyZW5jZVJ1bGVFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBWYWxpZERhdGVUaW1lIHtcbiAgY29uc3RydWN0b3IoZGF0ZSkge1xuICAgIHRoaXMuZGF0ZSA9IGRhdGU7XG4gIH1cbn1cbmNsYXNzIEludmFsaWREYXRlVGltZSB7XG4gIGNvbnN0cnVjdG9yKGRhdGUpIHtcbiAgICB0aGlzLmRhdGUgPSBkYXRlO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnJlbmNlUnVsZXNSZWR1Y2VyKHJ1bGVzKSB7XG4gIHJldHVybiBpdGVyYXRvciA9PlxuICAgIHJ1bGVzLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgY29uc3QgcnVsZSA9IGN1cnIuZ2V0KGl0ZXJhdG9yKTtcbiAgICAgIGlmIChydWxlKSBwcmV2LnB1c2gocnVsZSk7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9LCBbXSk7XG59XG5cbmNsYXNzIFJlY3VycmVuY2VSdWxlc0l0ZXJhdG9yIHtcbiAgY29uc3RydWN0b3IocmVjdXJyZW5jZVJ1bGVzLCBvcHRpb25zLCBhcmdzKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICB0aGlzLml0ZXJhdG9yID1cbiAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgdGhpcy5vcHRpb25zLmNvdW50ID09PSB1bmRlZmluZWQgPyB0aGlzLml0ZXJhdGUoKSA6XG4gICAgICAgICAgICB0aGlzLmFyZ3MucmV2ZXJzZSA/IHRoaXMuaXRlcmF0ZVdpdGhSZXZlcnNlQ291bnQoKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVyYXRlV2l0aENvdW50KCk7XG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjbG9uZUpTT04ob3B0aW9ucykpLCB7XG4gICAgICBzdGFydDogb3B0aW9ucy5zdGFydCxcbiAgICAgIGVuZDogb3B0aW9ucy5lbmQsXG4gICAgfSk7XG4gICAgdGhpcy5yZXZlcnNlID0gKHRoaXMub3B0aW9ucy5jb3VudCA9PT0gdW5kZWZpbmVkICYmIGFyZ3MucmV2ZXJzZSkgfHwgZmFsc2U7XG4gICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSB0aGlzLm5vcm1hbGl6ZURhdGVUaW1lQXJncyhhcmdzKTtcbiAgICBpZiAob3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnN0YXJ0ID0gb3B0aW9ucy5zdGFydDtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0ICYmIG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydC5pc0FmdGVyT3JFcXVhbChvcHRpb25zLnN0YXJ0KSA/IHN0YXJ0IDogb3B0aW9ucy5zdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0IHx8IG9wdGlvbnMuc3RhcnQ7XG4gICAgfVxuICAgIGlmIChlbmQgJiYgb3B0aW9ucy5lbmQpIHtcbiAgICAgIHRoaXMuZW5kID0gZW5kLmlzQmVmb3JlT3JFcXVhbChvcHRpb25zLmVuZCkgPyBlbmQgOiBvcHRpb25zLmVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbmQgPSBlbmQgfHwgb3B0aW9ucy5lbmQ7XG4gICAgfVxuICAgIGlmICh0aGlzLmFyZ3MucmV2ZXJzZSAmJiAhKG9wdGlvbnMuY291bnQgIT09IHVuZGVmaW5lZCB8fCB0aGlzLmVuZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1doZW4gaXRlcmF0aW5nIGluIHJldmVyc2UsIHRoZSBydWxlIG11c3QgaGF2ZSBhbiBgZW5kYCBvciBgY291bnRgICcgK1xuICAgICAgICAgICdwcm9wZXJ0eSBvciB5b3UgbXVzdCBwcm92aWRlIGFuIGBlbmRgIGFyZ3VtZW50LicsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmlzSW5maW5pdGUgPSAhdGhpcy5lbmQgJiYgdGhpcy5vcHRpb25zLmNvdW50ID09PSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oYXNEdXJhdGlvbiA9ICEhdGhpcy5vcHRpb25zLmR1cmF0aW9uO1xuICAgIHRoaXMucnVsZXMgPSBBcnJheS5pc0FycmF5KHJlY3VycmVuY2VSdWxlcykgPyByZWN1cnJlbmNlUnVsZXMgOiByZWN1cnJlbmNlUnVsZXModGhpcyk7XG4gIH1cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3I7XG4gIH1cbiAgbmV4dChhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlcmF0b3IubmV4dChhcmdzKTtcbiAgfVxuICAvKipcbiAgICogSW4gdGhlIHBpcGUgY29udHJvbGxlciwgd2UgaGF2ZSBhbiBleHRyYSBsZXZlbCBvZiBpbmRpcmVjdGlvbiB3aXRoXG4gICAqIHRoZSBgcnVuKClgIGFuZCBgaXRlcmF0ZSgpYCBtZXRob2RzLiBUaGUgYGl0ZXJhdGUoKWAgbWV0aG9kIGlzIHRoZVxuICAgKiBtZXRob2Qgd2hpY2ggYWN0dWFsbHkgcnVucyB0aGUgbG9naWMgaW4gdGhlIHBpcGVzLiBJZiB3ZSBkaWRuJ3RcbiAgICogbmVlZCB0byBhY2NvdW50IGZvciB0aGUgYGNvdW50YCBwcm9wZXJ0eSBvZiBhIHJ1bGUsIHdlIHdvdWxkICpvbmx5KlxuICAgKiBuZWVkIHRoZSBpdGVyYXRlIG1ldGhvZC4uLiBzbyBtdWNoIHNpbXBsZXIuIEJ1dCB3ZSBkbyBuZWVkIHRvIGFjY291bnRcbiAgICogZm9yIHJ1bGVzIHdpdGggYSBgY291bnRgIHByb3BlcnR5LlxuICAgKlxuICAgKiBSdWxlcyB3aXRoIGEgYGNvdW50YCBwcm9wZXJ0eSBuZWVkIHRvIGJlZ2luIGl0ZXJhdGlvbiBhdCB0aGUgYmVnaW5uaW5nXG4gICAqIGJlY2F1c2UgdGhlIGBjb3VudGAgaXMgYWx3YXlzIGZyb20gdGhlIHJ1bGUncyBzdGFydCB0aW1lLiBTbyBpZiBzb21lb25lXG4gICAqIHBhc3NlcyBpbiBhIG5ldyBzdGFydCB0aW1lIGFzIGFuIGFyZ3VtZW50IHRvIGEgcnVsZSB3aXRoIGBjb3VudGAsIHdlXG4gICAqIG5lZWQgdG8gc2VjcmV0bHkgaXRlcmF0ZSBmcm9tIHRoZSBiZWdpbm5pbmcsIHRyYWNraW5nIHRoZSBudW1iZXIgb2ZcbiAgICogaXRlcmF0aW9ucywgYW5kIHRoZW4gb25seSBzdGFydCB5aWVsZGluZyBkYXRlcyB3aGVuIHdlIHJlYWNoIHRoZSBzZWN0aW9uXG4gICAqIHRoZSB1c2VyIGNhcmVzIGFib3V0IChvciwgaWYgd2UgaGl0IG91ciBgY291bnRgIHF1b3RhLCBjYW5jZWwgaXRlcmF0aW5nKS5cbiAgICpcbiAgICogQWRkaXRpb25hbGx5LCB3ZSBuZWVkIHRvIGhhbmRsZSBpdGVyYXRpbmcgaW4gcmV2ZXJzZS4gSW4gdGhpcyBjYXNlLCB3ZSBidWlsZFxuICAgKiB1cCBhIGNhY2hlIG9mIGRhdGVzIGJldHdlZW4gdGhlIHJ1bGUncyBzdGFydCB0aW1lIGFuZCB0aGUgcmV2ZXJzZSBpdGVyYXRpb25cbiAgICogc3RhcnQgZGF0ZS4gT25jZSB3ZSBoaXQgdGhlIHJldmVyc2UgaXRlcmF0aW9uIHN0YXJ0IGRhdGUsIHdlIHN0YXJ0XG4gICAqIHlpZWxkaW5nIGRhdGVzIGluIHRoZSBjYWNoZSwgaW4gcmV2ZXJzZSBvcmRlci5cbiAgICpcbiAgICogSW4gZ2VuZXJhbCwgSSBpbWFnaW5lIHRoZSBjb3VudCBudW1iZXIsIGlmIHVzZWQsIHdpbGwgYmUgc21hbGwuIEJ1dCBhIGxhcmdlXG4gICAqIGNvdW50IHdpbGwgZGVmaW5pdGVseSBoYXZlIGEgbmVnYXRpdmUgcGVyZm9ybWFuY2UgYWZmZWN0LiBJIGRvbid0IHRoaW5rXG4gICAqIHRoZXJlJ3MgYW55dGhpbmcgdG8gYmUgZG9uZSBhYm91dCB0aGlzLlxuICAgKi9cbiAgKml0ZXJhdGVXaXRoUmV2ZXJzZUNvdW50KCkge1xuICAgIGNvbnN0IGRhdGVzID0gQXJyYXkuZnJvbSh0aGlzLml0ZXJhdGVXaXRoQ291bnQoKSkucmV2ZXJzZSgpO1xuICAgIGxldCB5aWVsZEFyZ3M7XG4gICAgY29uc3QgZGF0ZUNhY2hlID0gZGF0ZXMuc2xpY2UoKTtcbiAgICBsZXQgZGF0ZSA9IGRhdGVDYWNoZS5zaGlmdCgpO1xuICAgIHdoaWxlIChkYXRlKSB7XG4gICAgICBpZiAoeWllbGRBcmdzICYmIHlpZWxkQXJncy5za2lwVG9EYXRlICYmIGRhdGUuaXNBZnRlcih5aWVsZEFyZ3Muc2tpcFRvRGF0ZSkpIHtcbiAgICAgICAgZGF0ZSA9IGRhdGVDYWNoZS5zaGlmdCgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHlpZWxkQXJncyA9IHlpZWxkIGRhdGU7XG4gICAgICBpZiAoeWllbGRBcmdzICYmIHlpZWxkQXJncy5za2lwVG9EYXRlICYmIHlpZWxkQXJncy5za2lwVG9EYXRlLmlzQWZ0ZXJPckVxdWFsKGRhdGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQSBwcm92aWRlZCBgc2tpcFRvRGF0ZWAgb3B0aW9uIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBsYXN0IHlpZWxkZWQgZGF0ZSAnICtcbiAgICAgICAgICAgICcob3Igc21hbGxlciwgaW4gdGhlIGNhc2Ugb2YgcmV2ZXJzZSBpdGVyYXRpb24pJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRhdGUgPSBkYXRlQ2FjaGUuc2hpZnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICAqaXRlcmF0ZVdpdGhDb3VudCgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvdW50ID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgaXRlcmFibGUgPSB0aGlzLml0ZXJhdGUoKTtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuYXJncy5zdGFydCB8fCB0aGlzLnN0YXJ0O1xuICAgIGxldCBkYXRlID0gaXRlcmFibGUubmV4dCgpLnZhbHVlO1xuICAgIGxldCBpbmRleCA9IDE7XG4gICAgbGV0IHlpZWxkQXJncztcbiAgICB3aGlsZSAoZGF0ZSAmJiBpbmRleCA8PSB0aGlzLm9wdGlvbnMuY291bnQpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgICBpZiAoZGF0ZS5pc0JlZm9yZShzdGFydCkpIHtcbiAgICAgICAgZGF0ZSA9IGl0ZXJhYmxlLm5leHQoKS52YWx1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoeWllbGRBcmdzICYmIHlpZWxkQXJncy5za2lwVG9EYXRlICYmIGRhdGUuaXNCZWZvcmUoeWllbGRBcmdzLnNraXBUb0RhdGUpKSB7XG4gICAgICAgIGRhdGUgPSBpdGVyYWJsZS5uZXh0KCkudmFsdWU7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgeWllbGRBcmdzID0geWllbGQgZGF0ZTtcbiAgICAgIGlmICh5aWVsZEFyZ3MgJiYgeWllbGRBcmdzLnNraXBUb0RhdGUgJiYgeWllbGRBcmdzLnNraXBUb0RhdGUuaXNCZWZvcmVPckVxdWFsKGRhdGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQSBwcm92aWRlZCBgc2tpcFRvRGF0ZWAgb3B0aW9uIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBsYXN0IHlpZWxkZWQgZGF0ZSAnICtcbiAgICAgICAgICAgICcob3Igc21hbGxlciwgaW4gdGhlIGNhc2Ugb2YgcmV2ZXJzZSBpdGVyYXRpb24pJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRhdGUgPSBpdGVyYWJsZS5uZXh0KCkudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgKml0ZXJhdGUoKSB7XG4gICAgbGV0IHN0YXJ0aW5nRGF0ZSA9IHRoaXMuc3RhcnQ7XG4gICAgaWYgKHRoaXMucmV2ZXJzZSkgc3RhcnRpbmdEYXRlID0gdGhpcy5lbmQ7XG4gICAgbGV0IGRhdGUgPSB0aGlzLm5leHREYXRlKHN0YXJ0aW5nRGF0ZSk7XG4gICAgd2hpbGUgKGRhdGUpIHtcbiAgICAgIGNvbnN0IGFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZVJ1bk91dHB1dChkYXRlKTtcbiAgICAgIGlmIChhcmdzICYmIGFyZ3Muc2tpcFRvRGF0ZSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5yZXZlcnNlXG4gICAgICAgICAgICA/IGFyZ3Muc2tpcFRvRGF0ZS5pc0FmdGVyT3JFcXVhbChkYXRlKVxuICAgICAgICAgICAgOiBhcmdzLnNraXBUb0RhdGUuaXNCZWZvcmVPckVxdWFsKGRhdGUpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIFdlIGNhbm5vdCBjb25zaXN0ZW50bHkgc2tpcCBiYWNrd2FyZHMgYmVjYXVzZSBhZnRlciBhbiBpdGVyYXRvciBpcyBcImRvbmVcIlxuICAgICAgICAgIC8vIGl0IGFsd2F5cyByZXR1cm5zIHVuZGVmaW5lZCBhbmQgeW91IGNhbm5vdCByZXNldCBpdC4gVGhlb3JldGljYWxseSwgaXQgd291bGQgYmVcbiAgICAgICAgICAvLyBmaW5lIHRvIHNraXAgYmFja3dhcmRzIGlmIHRoZSBpdGVyYXRvciB3YXNuJ3QgYWxyZWFkeSBcImRvbmVcIiwgYnV0IHRoaXNcbiAgICAgICAgICAvLyB3b3VsZCBiZSBwcm9uZSB0byB1c2VyIGVycm9yIHNvIHdlIHNpbXBseSBkaXNhbGxvdyBza2lwcGluZyBiYWNrd2FyZHMgYWx0b2dldGhlci5cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnQSBwcm92aWRlZCBgc2tpcFRvRGF0ZWAgb3B0aW9uIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBsYXN0IHlpZWxkZWQgZGF0ZSAnICtcbiAgICAgICAgICAgICAgJyhvciBzbWFsbGVyLCBpbiB0aGUgY2FzZSBvZiByZXZlcnNlIGl0ZXJhdGlvbiknLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZGF0ZSA9IHRoaXMubmV4dERhdGUoYXJncy5za2lwVG9EYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGUgPSB0aGlzLm5leHREYXRlKFxuICAgICAgICAgIHRoaXMucmV2ZXJzZSA/IGRhdGUuc3VidHJhY3QoMSwgJ21pbGxpc2Vjb25kJykgOiBkYXRlLmFkZCgxLCAnbWlsbGlzZWNvbmQnKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICAvKipcbiAgICogTG9vcHMgdGhyb3VnaCB0aGUgcmVjdXJyZW5jZSBydWxlcyB1bnRpbCBhIHZhbGlkIGRhdGUgaXMgZm91bmQuXG4gICAqL1xuICBuZXh0RGF0ZShzdGFydCkge1xuICAgIGxldCByZXN1bHQgPSB0aGlzLnJ1blJ1bGVzKHN0YXJ0LnNldCgnZ2VuZXJhdG9ycycsIFtdKSk7XG4gICAgaWYgKHRoaXMuaXNEYXRlUGFzdEVuZChyZXN1bHQuZGF0ZSkpIHJldHVybiBudWxsO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlc3VsdCBpbnN0YW5jZW9mIEludmFsaWREYXRlVGltZSAmJiBpbmRleCA8IDUwKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLnJ1blJ1bGVzKHJlc3VsdC5kYXRlKTtcbiAgICAgIGlmICh0aGlzLmlzRGF0ZVBhc3RFbmQocmVzdWx0LmRhdGUpKSByZXR1cm4gbnVsbDtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBJbnZhbGlkRGF0ZVRpbWUpIHtcbiAgICAgIHRocm93IG5ldyBSZWN1cnJlbmNlUnVsZUVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIGZpbmQgYSBtYXRjaGluZyBvY2N1cnJlbmNlIGluICR7aW5kZXh9IGl0ZXJhdGlvbnMuIGAgK1xuICAgICAgICAgIGBMYXN0IGl0ZXJhdGVkIGRhdGU6IFwiJHtyZXN1bHQuZGF0ZS50b0lTT1N0cmluZygpfVwiYCxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0aGlzLnJldmVyc2UgPyBzdGFydC5pc0JlZm9yZShyZXN1bHQuZGF0ZSkgOiBzdGFydC5pc0FmdGVyKHJlc3VsdC5kYXRlKSkge1xuICAgICAgdGhyb3cgbmV3IFJlY3VycmVuY2VSdWxlRXJyb3IoXG4gICAgICAgICdBbiBlcnJvciBvY2N1cnJlZCBpbiBhIHJlY3VycmVuY2UgcnVsZS4gSWYgdGhpcyBoYXBwZW5lZCB1c2luZyAnICtcbiAgICAgICAgICAndGhlIHJTY2hlZHVsZSBwcm92aWRlZCByZWN1cnJlbmNlIHJ1bGVzLCB5b3Ugc2hvdWxkICcgK1xuICAgICAgICAgICdvcGVuIGFuIGlzc3VlIGluIHRoZSByU2NoZWR1bGUgcmVwby4gVGhlIG1haW50YWluZXIgaXMgZ29pbmcgdG8gJyArXG4gICAgICAgICAgJ3dhbnQgdG8ga25vdyBob3cgdG8gcmVjcmVhdGUgdGhlIGVycm9yLicsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LmRhdGU7XG4gIH1cbiAgLyoqXG4gICAqIFBlcmZvcm1zIG9uZSBydW4gb2YgdGhlIHJlY3VycmVuY2UgcnVsZXMgYW5kIHJldHVybnMgdGhlIHJlc3VsdC5cbiAgICogSXQncyBhIHNsaWdodGx5IG9wdGltaXplZCByZWR1Y2VyIGZ1bmN0aW9uLlxuICAgKi9cbiAgcnVuUnVsZXMoc3RhcnQpIHtcbiAgICBsZXQgcmVzdWx0ID0gbmV3IFZhbGlkRGF0ZVRpbWUoc3RhcnQpO1xuICAgIGZvciAoY29uc3QgcnVsZSBvZiB0aGlzLnJ1bGVzKSB7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgSW52YWxpZERhdGVUaW1lKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBydWxlLnJ1bihyZXN1bHQuZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaXNEYXRlUGFzdEVuZChkYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZSA/IGRhdGUuaXNCZWZvcmUodGhpcy5zdGFydCkgOiB0aGlzLmVuZCAmJiBkYXRlLmlzQWZ0ZXIodGhpcy5lbmQpO1xuICB9XG4gIG5vcm1hbGl6ZVJ1bk91dHB1dChkYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzRHVyYXRpb24gPyBkYXRlLnNldCgnZHVyYXRpb24nLCB0aGlzLm9wdGlvbnMuZHVyYXRpb24pIDogZGF0ZTtcbiAgfVxuICBub3JtYWxpemVEYXRlVGltZUFyZ3MoYXJncykge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogYXJncy5zdGFydCAmJiBub3JtYWxpemVEYXRlVGltZVRpbWV6b25lKGFyZ3Muc3RhcnQsIHRoaXMub3B0aW9ucy5zdGFydC50aW1lem9uZSksXG4gICAgICBlbmQ6IGFyZ3MuZW5kICYmIG5vcm1hbGl6ZURhdGVUaW1lVGltZXpvbmUoYXJncy5lbmQsIHRoaXMub3B0aW9ucy5zdGFydC50aW1lem9uZSksXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBBcmd1bWVudEVycm9yLFxuICBEYXRlQWRhcHRlcixcbiAgRGF0ZUFkYXB0ZXJCYXNlLFxuICBEYXRlVGltZSxcbiAgSW5maW5pdGVMb29wRXJyb3IsXG4gIEludmFsaWREYXRlQWRhcHRlckVycm9yLFxuICBJbnZhbGlkRGF0ZVRpbWUsXG4gIEludmFsaWREYXRlVGltZUVycm9yLFxuICBSZWN1cnJlbmNlUnVsZUVycm9yLFxuICBSZWN1cnJlbmNlUnVsZXNJdGVyYXRvcixcbiAgUnVsZU9wdGlvbkVycm9yLFxuICBWYWxpZERhdGVUaW1lLFxuICBjbG9uZUpTT04sXG4gIGNsb25lUnVsZU9wdGlvbnMsXG4gIGRhdGVJbnB1dFRvRGF0ZUFkYXB0ZXIsXG4gIGRhdGVJbnB1dFRvRGF0ZVRpbWUsXG4gIGRhdGVUaW1lU29ydENvbXBhcmVyLFxuICBmcmVxVG9HcmFudWxhcml0eSxcbiAgZ2V0RGF5c0luWWVhcixcbiAgZ2V0RGlmZmVyZW5jZUJldHdlZW5XZWVrZGF5cyxcbiAgaXNMZWFwWWVhcixcbiAgbm9ybWFsaXplRGF0ZVRpbWVUaW1lem9uZSxcbiAgbm9ybWFsaXplUnVsZU9wdGlvbnMsXG4gIG51bWJlclNvcnRDb21wYXJlcixcbiAgb3JkZXJlZFdlZWtkYXlzLFxuICByZWN1cnJlbmNlUnVsZXNSZWR1Y2VyLFxuICB1bmlxRGF0ZVRpbWVzLFxufTtcbiIsImltcG9ydCB7XG4gIEFyZ3VtZW50RXJyb3IsXG4gIGdldERpZmZlcmVuY2VCZXR3ZWVuV2Vla2RheXMsXG4gIERhdGVBZGFwdGVyQmFzZSBhcyBEYXRlQWRhcHRlckJhc2UkMSxcbiAgZGF0ZUlucHV0VG9EYXRlVGltZSxcbiAgZGF0ZUlucHV0VG9EYXRlQWRhcHRlcixcbiAgbm9ybWFsaXplRGF0ZVRpbWVUaW1lem9uZSBhcyBub3JtYWxpemVEYXRlVGltZVRpbWV6b25lJDEsXG4gIEluZmluaXRlTG9vcEVycm9yLFxuICBkYXRlVGltZVNvcnRDb21wYXJlcixcbiAgY2xvbmVSdWxlT3B0aW9ucyxcbiAgbm9ybWFsaXplUnVsZU9wdGlvbnMsXG4gIFJlY3VycmVuY2VSdWxlc0l0ZXJhdG9yLFxuICByZWN1cnJlbmNlUnVsZXNSZWR1Y2VyLFxuICBEYXRlVGltZSBhcyBEYXRlVGltZSQxLFxufSBmcm9tICdAcnNjaGVkdWxlL2NvcmUnO1xuXG5jbGFzcyBPY2N1cnJlbmNlR2VuZXJhdG9yIHtcbiAgY29uc3RydWN0b3IoYXJncyA9IHt9KSB7XG4gICAgdGhpcy50aW1lem9uZSA9IGFyZ3MudGltZXpvbmUgIT09IHVuZGVmaW5lZCA/IGFyZ3MudGltZXpvbmUgOiBudWxsO1xuICAgIHRoaXMubWF4RHVyYXRpb24gPSBhcmdzLm1heER1cmF0aW9uIHx8IDA7XG4gIH1cbiAgLyoqIFJldHVybnMgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb3IsIGlmIHRoZXJlIGFyZSBubyBvY2N1cnJlbmNlcywgbnVsbC4gKi9cbiAgZ2V0IGZpcnN0RGF0ZSgpIHtcbiAgICBpZiAodGhpcy5fZmlyc3REYXRlICE9PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLl9maXJzdERhdGU7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9ydW4oKS5uZXh0KCkudmFsdWU7XG4gICAgdGhpcy5fZmlyc3REYXRlID0gc3RhcnQgPyB0aGlzLmRhdGVBZGFwdGVyLmZyb21EYXRlVGltZShzdGFydCkgOiBudWxsO1xuICAgIHJldHVybiB0aGlzLl9maXJzdERhdGU7XG4gIH1cbiAgLyoqIElmIGdlbmVyYXRvciBpcyBpbmZpbml0ZSwgcmV0dXJucyBgbnVsbGAuIE90aGVyd2lzZSByZXR1cm5zIHRoZSBlbmQgZGF0ZSAqL1xuICBnZXQgbGFzdERhdGUoKSB7XG4gICAgaWYgKHRoaXMuX2xhc3REYXRlICE9PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLl9sYXN0RGF0ZTtcbiAgICBpZiAodGhpcy5pc0luZmluaXRlKSB7XG4gICAgICB0aGlzLl9sYXN0RGF0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgZW5kID0gdGhpcy5fcnVuKHsgcmV2ZXJzZTogdHJ1ZSB9KS5uZXh0KCkudmFsdWU7XG4gICAgdGhpcy5fbGFzdERhdGUgPSBlbmQgPyB0aGlzLmRhdGVBZGFwdGVyLmZyb21EYXRlVGltZShlbmQpIDogbnVsbDtcbiAgICByZXR1cm4gdGhpcy5fbGFzdERhdGU7XG4gIH1cbiAgcGlwZSguLi5vcGVyYXRvcnMpIHtcbiAgICByZXR1cm4gb3BlcmF0b3JzLnJlZHVjZSgocHJldiwgY3VycikgPT4gY3Vycih7IGJhc2U6IHByZXYsIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lIH0pLCB0aGlzKTtcbiAgfVxuICAvKipcbiAgICAgKiBQcm9jZXNzZXMgdGhlIG9iamVjdCdzIHJ1bGVzL2RhdGVzIGFuZCByZXR1cm5zIGFuIGl0ZXJhYmxlIGZvciB0aGUgb2NjdXJyZW5jZXMuXG4gICAgICpcbiAgICAgKiBPcHRpb25zIG9iamVjdDpcbiAgICAgKiAtIGBzdGFydGAgdGhlIGRhdGUgdG8gYmVnaW4gaXRlcmF0aW9uIG9uXG4gICAgICogLSBgZW5kYCB0aGUgZGF0ZSB0byBlbmQgaXRlcmF0aW9uIG9uXG4gICAgICogLSBgdGFrZWAgdGhlIG1heCBudW1iZXIgb2YgZGF0ZXMgdG8gdGFrZSBiZWZvcmUgZW5kaW5nIGl0ZXJhdGlvblxuICAgICAqIC0gYHJldmVyc2VgIHdoZXRoZXIgdG8gaXRlcmF0ZSBpbiByZXZlcnNlIG9yIG5vdFxuICAgICAqXG4gICAgICogRXhhbXBsZXM6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCBpdGVyYXRvciA9IHNjaGVkdWxlLm9jY3VycmVuY2VzKHsgc3RhcnQ6IG5ldyBEYXRlKCksIHRha2U6IDUgfSk7XG4gICAgIFxuICAgICAqIGZvciAoY29uc3QgZGF0ZSBvZiBpdGVyYXRvcikge1xuICAgICAqICAgLy8gZG8gc3R1ZmZcbiAgICAgKiB9XG4gIFxuICAgICAqIGl0ZXJhdG9yLnRvQXJyYXkoKSAvLyByZXR1cm5zIERhdGUgYXJyYXlcbiAgICAgKiBpdGVyYXRvci5uZXh0KCkudmFsdWUgLy8gcmV0dXJucyBuZXh0IERhdGVcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqL1xuICBvY2N1cnJlbmNlcyhhcmdzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IE9jY3VycmVuY2VJdGVyYXRvcih0aGlzLCB0aGlzLm5vcm1hbGl6ZU9jY3VycmVuY2VzQXJncyhhcmdzKSk7XG4gIH1cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIG92ZXIgdGhlIG9iamVjdCdzIG9jY3VycmVuY2VzIGFuZCBidW5kbGVzIHRoZW0gaW50byBjb2xsZWN0aW9uc1xuICAgKiB3aXRoIGEgc3BlY2lmaWVkIGdyYW51bGFyaXR5IChkZWZhdWx0IGlzIGBcIllFQVJMWVwiYCkuIE1ha2Ugc3VyZSB0b1xuICAgKiByZWFkIGFib3V0IGVhY2ggb3B0aW9uICYgY29tYmluYXRpb24gb2Ygb3B0aW9ucyBiZWxvdy5cbiAgICpcbiAgICogT3B0aW9ucyBvYmplY3Q6XG4gICAqICAgLSBzdGFydD86IERhdGVBZGFwdGVyXG4gICAqICAgLSBlbmQ/OiBEYXRlQWRhcHRlclxuICAgKiAgIC0gdGFrZT86IG51bWJlclxuICAgKiAgIC0gcmV2ZXJzZT86IE5PVCBTVVBQT1JURURcbiAgICogICAtIGdyYW51bGFyaXR5PzogQ29sbGVjdGlvbnNHcmFudWxhcml0eVxuICAgKiAgIC0gd2Vla1N0YXJ0PzogRGF0ZUFkYXB0ZXIuV2Vla2RheVxuICAgKiAgIC0gc2tpcEVtcHR5UGVyaW9kcz86IGJvb2xlYW5cbiAgICpcbiAgICogUmV0dXJuZWQgYENvbGxlY3Rpb25gIG9iamVjdDpcbiAgICpcbiAgICogICAtIGBkYXRlc2AgcHJvcGVydHkgY29udGFpbmluZyBhbiBhcnJheSBvZiBEYXRlQWRhcHRlciBvYmplY3RzLlxuICAgKiAgIC0gYGdyYW51bGFyaXR5YCBwcm9wZXJ0eSBjb250YWluaW5nIHRoZSBncmFudWxhcml0eS5cbiAgICogICAgIC0gYENvbGxlY3Rpb25zR3JhbnVsYXJpdHlgID09PSBgUnVsZU9wdGlvbnMuRnJlcXVlbmN5YC5cbiAgICogICAgIC0gZGVmYXVsdCBpcyBgXCJZRUFSTFlcImBcbiAgICogICAtIGBwZXJpb2RTdGFydGAgcHJvcGVydHkgY29udGFpbmluZyBhIERhdGVBZGFwdGVyIGVxdWFsIHRvIHRoZSBwZXJpb2Qnc1xuICAgKiAgICAgc3RhcnQgdGltZS5cbiAgICogICAtIGBwZXJpb2RFbmRgIHByb3BlcnR5IGNvbnRhaW5pbmcgYSBEYXRlQWRhcHRlciBlcXVhbCB0byB0aGUgcGVyaW9kJ3NcbiAgICogICAgIGVuZCB0aW1lLlxuICAgKlxuICAgKiAjIyMjIERldGFpbHM6XG4gICAqXG4gICAqIGBjb2xsZWN0aW9ucygpYCBhbHdheXMgcmV0dXJucyBmdWxsIHBlcmlvZHMuIFRoaXMgbWVhbnMgdGhhdCB0aGUgYHN0YXJ0YCBhcmd1bWVudCBpc1xuICAgKiB0cmFuc2Zvcm1lZCB0byBiZSB0aGUgc3RhcnQgb2Ygd2hhdGV2ZXIgcGVyaW9kIHRoZSBgc3RhcnRgIGFyZ3VtZW50IGlzIGluLCBhbmQgdGhlXG4gICAqIGBlbmRgIGFyZ3VtZW50IGlzIHRyYW5zZm9ybWVkIHRvIGJlIHRoZSBlbmQgb2Ygd2hhdGV2ZXIgcGVyaW9kIHRoZSBgZW5kYCBhcmd1bWVudCBpc1xuICAgKiBpbi5cbiAgICpcbiAgICogLSBFeGFtcGxlOiB3aXRoIGdyYW51bGFyaXR5IGBcIllFQVJMWVwiYCwgdGhlIGBzdGFydGAgYXJndW1lbnQgd2lsbCBiZSB0cmFuc2Zvcm1lZCB0byBiZSB0aGVcbiAgICogICBzdGFydCBvZiB0aGUgeWVhciBwYXNzZWQgaW4gdGhlIGBzdGFydGAgYXJndW1lbnQsIGFuZCB0aGUgYGVuZGAgYXJndW1lbnQgd2lsbCBiZSB0cmFuc2Zvcm1lZFxuICAgKiAgIHRvIGJlIHRoZSBlbmQgb2YgdGhlIHllYXIgcGFzc2VkIGluIHRoZSBgZW5kYCBhcmd1bWVudC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIGBwZXJpb2RTdGFydGAgdmFsdWUgb2YgYENvbGxlY3Rpb25gIG9iamVjdHMgcHJvZHVjZWQgYnkgdGhpcyBtZXRob2QgaW5jcmVtZW50cyBsaW5lYXJseS5cbiAgICogVGhpcyBtZWFucyB0aGUgcmV0dXJuZWQgYENvbGxlY3Rpb24jZGF0ZXNgIHByb3BlcnR5IG1heSBoYXZlIGxlbmd0aCAwLiBUaGlzIGNhbiBiZSBjaGFuZ2VkIGJ5XG4gICAqIHBhc3NpbmcgdGhlIGBza2lwRW1wdHlQZXJpb2RzOiB0cnVlYCBvcHRpb24sIGluIHdoaWNoIGNhc2UgdGhlIGBwZXJpb2RTdGFydGAgZnJvbSBvbmUgY29sbGVjdGlvbiB0byB0aGVcbiAgICogbmV4dCBjYW4gXCJqdW1wXCIuXG4gICAqXG4gICAqIC0gRXhhbXBsZSAxOiBpZiB5b3VyIG9iamVjdCdzIGZpcnN0IG9jY3VycmVuY2UgaXMgMjAxOS8yLzEgKEZlYnJ1YXJ5IDFzdCkgYW5kIHlvdSBjYWxsXG4gICAqICAgYGNvbGxlY3Rpb24oe3NraXBFbXB0eVBlcmlvZHM6IHRydWUsIGdyYW51bGFyaXR5OiAnREFJTFknLCBzdGFydDogbmV3IERhdGUoMjAxOSwwLDEpfSlgXG4gICAqICAgKHNvIHN0YXJ0aW5nIG9uIEphbnVhcnkgMXN0KSwgdGhlIGZpcnN0IENvbGxlY3Rpb24gcHJvZHVjZWQgd2lsbCBoYXZlIGEgYHBlcmlvZFN0YXJ0YCBpbiBGZWJydWFyeS5cbiAgICpcbiAgICogLSBFeGFtcGxlIDI6IGlmIHlvdXIgb2JqZWN0J3MgZmlyc3Qgb2NjdXJyZW5jZSBpcyAyMDE5LzIvMSAoRmVicnVhcnkgMXN0KSBhbmQgeW91IGNhbGxcbiAgICogICBgY29sbGVjdGlvbih7Z3JhbnVsYXJpdHk6ICdEQUlMWScsIHN0YXJ0OiBuZXcgRGF0ZSgyMDE5LDAsMSl9KWBcbiAgICogICAoc28gc3RhcnRpbmcgb24gSmFudWFyeSAxc3QpLCB0aGUgZmlyc3QgY29sbGVjdGlvbiBwcm9kdWNlZCB3aWxsIGhhdmUgYSBgQ29sbGVjdGlvbiNwZXJpb2RTdGFydGBcbiAgICogICBvZiBKYW51YXJ5IDFzdCBhbmQgaGF2ZSBgQ29sbGVjdGlvbiNkYXRlcyA9PT0gW11gLiBTaW1pbGFybHksIHRoZSBuZXh0IDMwIGNvbGxlY3Rpb25zIHByb2R1Y2VkXG4gICAqICAgKEphbiAybmQgLSAzMXN0KSB3aWxsIGFsbCBjb250YWluIGFuIGVtcHR5IGFycmF5IGZvciB0aGUgYGRhdGVzYCBwcm9wZXJ0eS4gVGhlbiB0aGUgRmVicnVhcnkgMXN0XG4gICAqICAgYENvbGxlY3Rpb25gIHdpbGwgY29udGFpbiBkYXRlcy5cbiAgICpcbiAgICogV2hlbiBnaXZpbmcgYSBgdGFrZWAgYXJndW1lbnQgdG8gYGNvbGxlY3Rpb25zKClgLCB5b3UgYXJlIHNwZWNpZnlpbmdcbiAgICogdGhlIG51bWJlciBvZiBgQ29sbGVjdGlvbmAgb2JqZWN0cyB0byByZXR1cm4gKHJhdGhlciB0aGFuIG9jY3VycmVuY2VzKS5cbiAgICpcbiAgICogV2hlbiBjaG9vc2luZyBhIGdyYW51bGFyaXR5IG9mIGBcIldFRUtMWVwiYCwgdGhlIGB3ZWVrU3RhcnRgIG9wdGlvbiBpcyByZXF1aXJlZC5cbiAgICpcbiAgICogV2hlbiBjaG9vc2luZyBhIGdyYW51bGFyaXR5IG9mIGBcIk1PTlRITFlcImA6XG4gICAqXG4gICAqIC0gSWYgdGhlIGB3ZWVrU3RhcnRgIG9wdGlvbiAqaXMgbm90KiBwcmVzZW50LCB3aWxsIGdlbmVyYXRlIGNvbGxlY3Rpb25zIHdpdGhcbiAgICogICB0aGUgYHBlcmlvZFN0YXJ0YCBhbmQgYHBlcmlvZEVuZGAgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGVhY2ggbW9udGguXG4gICAqXG4gICAqIC0gSWYgdGhlIGB3ZWVrU3RhcnRgIG9wdGlvbiAqaXMqIHByZXNlbnQsIHdpbGwgZ2VuZXJhdGUgY29sbGVjdGlvbnMgd2l0aCB0aGVcbiAgICogICBgcGVyaW9kU3RhcnRgIGVxdWFsIHRvIHRoZSBzdGFydCBvZiB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgbW9udGgsIGFuZCB0aGVcbiAgICogICBgcGVyaW9kRW5kYCBlcXVhbCB0byB0aGUgZW5kIG9mIHRoZSBsYXN0IHdlZWsgb2YgdGhlIG1vbnRoLiBUaGlzIGJlaGF2aW9yIGNvdWxkIGJlXG4gICAqICAgZGVzaXJlZCB3aGVuIHJlbmRlcmluZyBvcHBvcnR1bml0aWVzIGluIGEgY2FsZW5kYXIgdmlldywgd2hlcmUgdGhlIGNhbGVuZGFyIHJlbmRlcnNcbiAgICogICBmdWxsIHdlZWtzICh3aGljaCBtYXkgcmVzdWx0IGluIHRoZSBjYWxlbmRhciBkaXNwbGF5aW5nIGRhdGVzIGluIHRoZVxuICAgKiAgIHByZXZpb3VzIG9yIG5leHQgbW9udGhzKS5cbiAgICpcbiAgICovXG4gIGNvbGxlY3Rpb25zKGFyZ3MgPSB7fSkge1xuICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbkl0ZXJhdG9yKHRoaXMsIHRoaXMubm9ybWFsaXplQ29sbGVjdGlvbnNBcmdzKGFyZ3MpKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGFuIG9jY3VycmVuY2Ugc3RhcnRzIG9uIG9yIGJldHdlZW4gdGhlIHByb3ZpZGVkIHN0YXJ0L2VuZFxuICAgKiBkYXRldGltZXMuIElmIHRoZSBgZXhjbHVkZUVuZHNgIG9wdGlvbiBpcyBwcm92aWRlZCwgdGhlbiBvY2N1cnJlbmNlc1xuICAgKiBlcXVhbCB0byB0aGUgc3RhcnQvZW5kIHRpbWVzIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiBJZiB0aGUgb2NjdXJyZW5jZSBnZW5lcmF0b3IgaGFzIGEgZHVyYXRpb24sIGFuZCBgZXhjbHVkZUVuZHMgIT09IHRydWVgLFxuICAgKiBhbmQgYSBgbWF4RHVyYXRpb25gIGFyZ3VtZW50IGlzIHN1cHBsaWVkIChlaXRoZXIgaW4gdGhlIGNvbnN0cnVjdG9yIG9yXG4gICAqIGhlcmUpLCB0aGVuIGFueSBvY2N1cnJlbmNlIHRoYXQncyB0aW1lIG92ZXJsYXBzIHdpdGggdGhlIHN0YXJ0L2VuZCB0aW1lc1xuICAgKiByZXR1cm4gdHJ1ZS5cbiAgICovXG4gIG9jY3Vyc0JldHdlZW4oc3RhcnRJbnB1dCwgZW5kSW5wdXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5ub3JtYWxpemVEYXRlSW5wdXQoc3RhcnRJbnB1dCk7XG4gICAgY29uc3QgZW5kID0gdGhpcy5ub3JtYWxpemVEYXRlSW5wdXQoZW5kSW5wdXQpO1xuICAgIGlmICh0aGlzLmhhc0R1cmF0aW9uICYmICFvcHRpb25zLmV4Y2x1ZGVFbmRzKSB7XG4gICAgICBjb25zdCBtYXhEdXJhdGlvbiA9IHRoaXMuZ2V0TWF4RHVyYXRpb24oJ29jY3Vyc0JldHdlZW4nLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5fcnVuKHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LnN1YnRyYWN0KG1heER1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKSxcbiAgICAgICAgZW5kLFxuICAgICAgICByZXZlcnNlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICBmb3IgKGNvbnN0IGRheSBvZiBpdGVyYXRvcikge1xuICAgICAgICBpZiAoZGF5LmVuZC5pc0JlZm9yZShzdGFydCkpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBkYXkgb2YgdGhpcy5fcnVuKHsgc3RhcnQsIGVuZCB9KSkge1xuICAgICAgaWYgKG9wdGlvbnMuZXhjbHVkZUVuZHMpIHtcbiAgICAgICAgaWYgKGRheS5pc0VxdWFsKHN0YXJ0KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXkuaXNFcXVhbChlbmQpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgb2NjdXJzT24ocmF3QXJncykge1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLm5vcm1hbGl6ZU9jY3Vyc09uQXJncyhyYXdBcmdzKTtcbiAgICBpZiAoYXJncy53ZWVrZGF5KSB7XG4gICAgICBpZiAodGhpcy5pc0luZmluaXRlICYmICFhcmdzLmJlZm9yZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAnV2hlbiBjYWxsaW5nIGBvY2N1cnNPbigpYCB3aXRoIGEgYHdlZWtkYXlgIGFyZ3VtZW50ICcgK1xuICAgICAgICAgICAgJ2FuZCBhbiBvY2N1cnJlbmNlIG9iamVjdCB0aGF0IGhhcyBpbmZpbml0ZSBvY2N1cnJlbmNlcywgJyArXG4gICAgICAgICAgICAneW91IG11c3QgaW5jbHVkZSBhIGBiZWZvcmVgIGFyZ3VtZW50IGFzIHdlbGwuJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXJ0ID0gYXJncy5hZnRlciAmJiAoYXJncy5leGNsdWRlRW5kcyA/IGFyZ3MuYWZ0ZXIuYWRkKDEsICdkYXknKSA6IGFyZ3MuYWZ0ZXIpO1xuICAgICAgY29uc3QgZW5kID0gYXJncy5iZWZvcmUgJiYgKGFyZ3MuZXhjbHVkZUVuZHMgPyBhcmdzLmJlZm9yZS5zdWJ0cmFjdCgxLCAnZGF5JykgOiBhcmdzLmJlZm9yZSk7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuX3J1bih7IHN0YXJ0LCBlbmQgfSk7XG4gICAgICBsZXQgZGF0ZSA9IGl0ZXJhdG9yLm5leHQoKS52YWx1ZTtcbiAgICAgIGlmICghZGF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgd2hpbGUgKGRhdGUpIHtcbiAgICAgICAgaWYgKGRhdGUuZ2V0KCd3ZWVrZGF5JykgPT09IGFyZ3Mud2Vla2RheSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGRhdGUgPSBpdGVyYXRvci5uZXh0KHtcbiAgICAgICAgICBza2lwVG9EYXRlOiBkYXRlXG4gICAgICAgICAgICAuYWRkKGdldERpZmZlcmVuY2VCZXR3ZWVuV2Vla2RheXMoZGF0ZS5nZXQoJ3dlZWtkYXknKSwgYXJncy53ZWVrZGF5KSwgJ2RheScpXG4gICAgICAgICAgICAuZ3JhbnVsYXJpdHkoJ2RheScpLFxuICAgICAgICB9KS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFhcmdzLmRhdGUpIHtcbiAgICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKFxuICAgICAgICBgXCJvY2N1cnNPbigpXCIgbXVzdCBiZSBjYWxsZWQgd2l0aCBlaXRoZXIgYSBcImRhdGVcIiBvciBcIndlZWtkYXlcIiBhcmd1bWVudGAsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5oYXNEdXJhdGlvbikge1xuICAgICAgY29uc3QgbWF4RHVyYXRpb24gPSB0aGlzLmdldE1heER1cmF0aW9uKCdvY2N1cnNPbicsIGFyZ3MpO1xuICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLl9ydW4oe1xuICAgICAgICBzdGFydDogYXJncy5kYXRlLnN1YnRyYWN0KG1heER1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKSxcbiAgICAgICAgZW5kOiBhcmdzLmRhdGUsXG4gICAgICB9KTtcbiAgICAgIGZvciAoY29uc3QgZGF0ZSBvZiBpdGVyYXRvcikge1xuICAgICAgICBpZiAoZGF0ZS5lbmQuaXNCZWZvcmUoYXJncy5kYXRlKSkgY29udGludWU7XG4gICAgICAgIGlmIChkYXRlLmlzQWZ0ZXIoYXJncy5kYXRlKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBkYXkgb2YgdGhpcy5fcnVuKHsgc3RhcnQ6IGFyZ3MuZGF0ZSwgZW5kOiBhcmdzLmRhdGUgfSkpIHtcbiAgICAgIHJldHVybiAhIWRheTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYW4gb2NjdXJyZW5jZSBzdGFydHMgYWZ0ZXIgdGhlIHByb3ZpZGVkIGRhdGV0aW1lLlxuICAgKiBJZiB0aGUgYGV4Y2x1ZGVTdGFydGAgb3B0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIG9jY3VycmVuY2VzXG4gICAqIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBkYXRldGltZSBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogSWYgdGhlIG9jY3VycmVuY2UgZ2VuZXJhdG9yIGhhcyBhIGR1cmF0aW9uLCBhbmQgYGV4Y2x1ZGVTdGFydCAhPT0gdHJ1ZWAsXG4gICAqIGFuZCBhIGBtYXhEdXJhdGlvbmAgYXJndW1lbnQgaXMgc3VwcGxpZWQgKGVpdGhlciBpbiB0aGUgY29uc3RydWN0b3Igb3JcbiAgICogaGVyZSksIHRoZW4gYW55IG9jY3VycmVuY2UgdGhhdCdzIGVuZCB0aW1lIGlzIGFmdGVyL2VxdWFsIHRvIHRoZSBwcm92aWRlZFxuICAgKiBkYXRldGltZSByZXR1cm4gdHJ1ZS5cbiAgICovXG4gIG9jY3Vyc0FmdGVyKGRhdGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChkYXRlKTtcbiAgICBpZiAodGhpcy5oYXNEdXJhdGlvbiAmJiAhb3B0aW9ucy5leGNsdWRlU3RhcnQpIHtcbiAgICAgIGNvbnN0IG1heER1cmF0aW9uID0gdGhpcy5nZXRNYXhEdXJhdGlvbignb2NjdXJzQWZ0ZXInLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5fcnVuKHtcbiAgICAgICAgc3RhcnQ6IGFkYXB0ZXIuc3VidHJhY3QobWF4RHVyYXRpb24sICdtaWxsaXNlY29uZCcpLFxuICAgICAgfSk7XG4gICAgICBmb3IgKGNvbnN0IGRhdGUgb2YgaXRlcmF0b3IpIHtcbiAgICAgICAgaWYgKGRhdGUuZW5kLmlzQmVmb3JlKGFkYXB0ZXIpKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGF5IG9mIHRoaXMuX3J1bih7IHN0YXJ0OiBhZGFwdGVyIH0pKSB7XG4gICAgICBpZiAob3B0aW9ucy5leGNsdWRlU3RhcnQgJiYgZGF5LmlzRXF1YWwoYWRhcHRlcikpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYW4gb2NjdXJyZW5jZSBzdGFydHMgYmVmb3JlIHRoZSBwcm92aWRlZCBkYXRldGltZS5cbiAgICogSWYgdGhlIGBleGNsdWRlU3RhcnRgIG9wdGlvbiBpcyBwcm92aWRlZCwgdGhlbiBvY2N1cnJlbmNlc1xuICAgKiBlcXVhbCB0byB0aGUgcHJvdmlkZWQgZGF0ZXRpbWUgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqIElmIHRoZSBvY2N1cnJlbmNlIGdlbmVyYXRvciBoYXMgYSBkdXJhdGlvbiwgYW5kIGBleGNsdWRlU3RhcnRgIGlzXG4gICAqIGFsc28gcHJvdmlkZWQsIHRoZW4gdGhpcyB3aWxsIG9ubHkgcmV0dXJuIHRydWUgaWYgYW4gb2NjdXJyZW5jZVxuICAgKiBib3RoIHN0YXJ0cyBhbmQgZW5kcyBiZWZvcmUgdGhlIHByb3ZpZGVkIGRhdGV0aW1lLlxuICAgKi9cbiAgb2NjdXJzQmVmb3JlKGRhdGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChkYXRlKTtcbiAgICBpZiAodGhpcy5oYXNEdXJhdGlvbiAmJiBvcHRpb25zLmV4Y2x1ZGVTdGFydCkge1xuICAgICAgZm9yIChjb25zdCBkYXkgb2YgdGhpcy5fcnVuKHsgZW5kOiBhZGFwdGVyLCByZXZlcnNlOiB0cnVlIH0pKSB7XG4gICAgICAgIGlmIChkYXkuZW5kLmlzQWZ0ZXJPckVxdWFsKGFkYXB0ZXIpKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGF5IG9mIHRoaXMuX3J1bih7IGVuZDogYWRhcHRlciwgcmV2ZXJzZTogdHJ1ZSB9KSkge1xuICAgICAgaWYgKG9wdGlvbnMuZXhjbHVkZVN0YXJ0ICYmIGRheS5pc0VxdWFsKGFkYXB0ZXIpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBnZXQgZGF0ZUFkYXB0ZXIoKSB7XG4gICAgcmV0dXJuIERhdGVBZGFwdGVyQmFzZSQxLmFkYXB0ZXI7XG4gIH1cbiAgbm9ybWFsaXplT2NjdXJyZW5jZXNBcmdzKHJhd0FyZ3MpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByYXdBcmdzKSwge1xuICAgICAgc3RhcnQ6IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KHJhd0FyZ3Muc3RhcnQpLFxuICAgICAgZW5kOiB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChyYXdBcmdzLmVuZCksXG4gICAgfSk7XG4gIH1cbiAgbm9ybWFsaXplQ29sbGVjdGlvbnNBcmdzKHJhd0FyZ3MpIHtcbiAgICBpZiAocmF3QXJncy5yZXZlcnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKFxuICAgICAgICAnYGNvbGxlY3Rpb25zKClgIGRvZXMgbm90IHN1cHBvcnQgdGhlIGByZXZlcnNlYCBvcHRpb24gYXQgdGhpcyB0aW1lLicsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByYXdBcmdzKSwge1xuICAgICAgc3RhcnQ6IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KHJhd0FyZ3Muc3RhcnQpLFxuICAgICAgZW5kOiB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChyYXdBcmdzLmVuZCksXG4gICAgfSk7XG4gIH1cbiAgbm9ybWFsaXplT2NjdXJzT25BcmdzKHJhd0FyZ3MgPSB7fSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJhd0FyZ3MpLCB7XG4gICAgICBkYXRlOiB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChyYXdBcmdzLmRhdGUpLFxuICAgICAgYWZ0ZXI6IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KHJhd0FyZ3MuYWZ0ZXIpLFxuICAgICAgYmVmb3JlOiB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChyYXdBcmdzLmJlZm9yZSksXG4gICAgICBleGNsdWRlRGF0ZXM6XG4gICAgICAgIHJhd0FyZ3MuZXhjbHVkZURhdGVzICYmIHJhd0FyZ3MuZXhjbHVkZURhdGVzLm1hcChkYXRlID0+IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KGRhdGUpKSxcbiAgICB9KTtcbiAgfVxuICBub3JtYWxpemVSdW5BcmdzKGFyZ3MpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmdzKSwge1xuICAgICAgc3RhcnQ6IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KGFyZ3Muc3RhcnQpLFxuICAgICAgZW5kOiB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChhcmdzLmVuZCksXG4gICAgfSk7XG4gIH1cbiAgbm9ybWFsaXplRGF0ZUlucHV0KGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZSA/IGRhdGVJbnB1dFRvRGF0ZVRpbWUoZGF0ZSwgdGhpcy50aW1lem9uZSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgbm9ybWFsaXplRGF0ZUlucHV0VG9BZGFwdGVyKGRhdGUpIHtcbiAgICBpZiAoIWRhdGUpIHJldHVybjtcbiAgICByZXR1cm4gZGF0ZUlucHV0VG9EYXRlQWRhcHRlcihkYXRlKTtcbiAgfVxuICBub3JtYWxpemVSdW5PdXRwdXQoZGF0ZSkge1xuICAgIHJldHVybiBub3JtYWxpemVEYXRlVGltZVRpbWV6b25lJDEoZGF0ZSwgdGhpcy50aW1lem9uZSk7XG4gIH1cbiAgZ2V0TWF4RHVyYXRpb24obWV0aG9kLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbWF4RHVyYXRpb24gPSBvcHRpb25zLm1heER1cmF0aW9uIHx8IHRoaXMubWF4RHVyYXRpb247XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG1heER1cmF0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoXG4gICAgICAgIGBXaGVuIGFuIG9jY3VycmVuY2UgZ2VuZXJhdG9yIGAgK1xuICAgICAgICAgIGBoYXMgYSBkdXJhdGlvbiwgYSAnbWF4RHVyYXRpb24nIGFyZ3VtZW50IG11c3QgYmUgc3VwcGxpZWQgYCArXG4gICAgICAgICAgYHRvICR7bWV0aG9kfSgpLmAsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbWF4RHVyYXRpb247XG4gIH1cbn1cbmNsYXNzIE9jY3VycmVuY2VJdGVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKGl0ZXJhYmxlLCBhcmdzKSB7XG4gICAgdGhpcy5pdGVyYWJsZSA9IGl0ZXJhYmxlO1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgLy8gTmVlZCB0byBhc3NlcnQgdGhlIHJldHVybiB0eXBlIG9mIHRoZXNlIG1ldGhvZHMgdG8gcHJldmVudCB0eXBlc2NyaXB0IGZyb21cbiAgICAvLyBpbmNvcnJlY3RseSByZWR1Y2luZyB0aGVtIHRvIGBEYXRlQWRhcHRlckJhc2UgJiB7IGdlbmVyYXRvcnM6IEcgfWAuXG4gICAgdGhpc1tTeW1ib2wuaXRlcmF0b3JdID0gKCkgPT4gdGhpcy5vY2N1cnJlbmNlSXRlcmF0b3IoKTtcbiAgICB0aGlzLml0ZXJhdG9yID0gaXRlcmFibGUuX3J1bihhcmdzKTtcbiAgICB0aGlzLmlzSW5maW5pdGUgPSBpdGVyYWJsZS5pc0luZmluaXRlO1xuICB9XG4gIG5leHQoYXJncykge1xuICAgIHJldHVybiB0aGlzLm9jY3VycmVuY2VJdGVyYXRvcihhcmdzKS5uZXh0KCk7XG4gIH1cbiAgdG9BcnJheSgpIHtcbiAgICBpZiAodGhpcy5hcmdzLmVuZCB8fCB0aGlzLmFyZ3MudGFrZSB8fCAhdGhpcy5pc0luZmluaXRlKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm9jY3VycmVuY2VJdGVyYXRvcigpKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEluZmluaXRlTG9vcEVycm9yKFxuICAgICAgJ09jY3VycmVuY2VJdGVyYXRvciN0b0FycmF5KCkgY2FuIG9ubHkgYmUgY2FsbGVkIGlmIHRoZSBpdGVyYXRvciAnICtcbiAgICAgICAgJ2lzIG5vdCBpbmZpbml0ZSwgb3IgeW91IHByb3ZpZGUgYW5kIGBlbmRgIGFyZ3VtZW50LCBvciB5b3UgcHJvdmlkZSAnICtcbiAgICAgICAgJ2EgYHRha2VgIGFyZ3VtZW50LicsXG4gICAgKTtcbiAgfVxuICAqb2NjdXJyZW5jZUl0ZXJhdG9yKHJhd0FyZ3MpIHtcbiAgICBsZXQgYXJncyA9IHRoaXMubm9ybWFsaXplUnVuQXJncyhyYXdBcmdzKTtcbiAgICBsZXQgZGF0ZSA9IHRoaXMuaXRlcmF0b3IubmV4dChhcmdzKS52YWx1ZTtcbiAgICB3aGlsZSAoZGF0ZSkge1xuICAgICAgY29uc3QgeWllbGRBcmdzID0geWllbGQgdGhpcy5ub3JtYWxpemVEYXRlT3V0cHV0KGRhdGUpO1xuICAgICAgYXJncyA9IHRoaXMubm9ybWFsaXplUnVuQXJncyh5aWVsZEFyZ3MpO1xuICAgICAgZGF0ZSA9IHRoaXMuaXRlcmF0b3IubmV4dChhcmdzKS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBub3JtYWxpemVSdW5BcmdzKGFyZ3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2tpcFRvRGF0ZTogdGhpcy5ub3JtYWxpemVEYXRlSW5wdXQoYXJncyAmJiBhcmdzLnNraXBUb0RhdGUpLFxuICAgIH07XG4gIH1cbiAgbm9ybWFsaXplRGF0ZUlucHV0KGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZSA/IGRhdGVJbnB1dFRvRGF0ZVRpbWUoZGF0ZSwgdGhpcy5pdGVyYWJsZS50aW1lem9uZSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgbm9ybWFsaXplRGF0ZU91dHB1dChkYXRlKSB7XG4gICAgaWYgKCFkYXRlKSByZXR1cm47XG4gICAgcmV0dXJuIGRhdGUgPyBEYXRlQWRhcHRlckJhc2UkMS5hZGFwdGVyLmZyb21EYXRlVGltZShkYXRlKSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuY2xhc3MgQ29sbGVjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGRhdGVzID0gW10sIGdyYW51bGFyaXR5LCBwZXJpb2RTdGFydCwgcGVyaW9kRW5kKSB7XG4gICAgdGhpcy5kYXRlcyA9IGRhdGVzO1xuICAgIHRoaXMuZ3JhbnVsYXJpdHkgPSBncmFudWxhcml0eTtcbiAgICB0aGlzLnBlcmlvZFN0YXJ0ID0gcGVyaW9kU3RhcnQ7XG4gICAgdGhpcy5wZXJpb2RFbmQgPSBwZXJpb2RFbmQ7XG4gIH1cbn1cbmNsYXNzIENvbGxlY3Rpb25JdGVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKGl0ZXJhYmxlLCBhcmdzKSB7XG4gICAgdGhpcy5pdGVyYWJsZSA9IGl0ZXJhYmxlO1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5ncmFudWxhcml0eSA9ICd5ZWFyJztcbiAgICB0aGlzW1N5bWJvbC5pdGVyYXRvcl0gPSAoKSA9PiB0aGlzLml0ZXJhdG9yO1xuICAgIGlmIChhcmdzLmdyYW51bGFyaXR5KSB7XG4gICAgICB0aGlzLmdyYW51bGFyaXR5ID0gYXJncy5ncmFudWxhcml0eTtcbiAgICAgIGlmICh0aGlzLmdyYW51bGFyaXR5ID09PSAnd2VlaycgJiYgIWFyZ3Mud2Vla1N0YXJ0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXCJ3ZWVrXCIgZ3JhbnVsYXJpdHkgcmVxdWlyZXMgYHdlZWtTdGFydGAgYXJnJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhcmdzLndlZWtTdGFydCkge1xuICAgICAgdGhpcy53ZWVrU3RhcnQgPSBhcmdzLndlZWtTdGFydDtcbiAgICB9XG4gICAgaWYgKGFyZ3MucmV2ZXJzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYE9jY3VycmVuY2VHZW5lcmF0b3IjY29sbGVjdGlvbnMoKWAgZG9lcyBub3Qgc3VwcG9ydCBpdGVyYXRpbmcgaW4gcmV2ZXJzZS4gJyArXG4gICAgICAgICAgJ1Rob3VnaCBgT2NjdXJyZW5jZUdlbmVyYXRvciNvY2N1cnJlbmNlcygpYCBkb2VzIHN1cHBvcnQgaXRlcmF0aW5nIGluIHJldmVyc2UuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIC8vIFNldCB0aGUgZW5kIGFyZywgaWYgcHJlc2VudCwgdG8gdGhlIGVuZCBvZiB0aGUgcGVyaW9kLlxuICAgIHRoaXMuYXJncyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXJncyksIHtcbiAgICAgIHN0YXJ0OiBhcmdzLnN0YXJ0IHx8IGl0ZXJhYmxlLl9ydW4oKS5uZXh0KCkudmFsdWUsXG4gICAgICBlbmQ6IGFyZ3MuZW5kICYmIHRoaXMuZ2V0UGVyaW9kKGFyZ3MuZW5kKS5lbmQsXG4gICAgfSk7XG4gICAgdGhpcy5zdGFydERhdGUgPVxuICAgICAgKHRoaXMuYXJncy5zdGFydCAmJiB0aGlzLm5vcm1hbGl6ZURhdGVPdXRwdXQodGhpcy5nZXRQZXJpb2QodGhpcy5hcmdzLnN0YXJ0KS5zdGFydCkpIHx8IG51bGw7XG4gICAgdGhpcy5pdGVyYXRvciA9IHRoaXMuY29sbGVjdGlvbkl0ZXJhdG9yKCk7XG4gIH1cbiAgbmV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvci5uZXh0KCk7XG4gIH1cbiAgLyoqXG4gICAqIFdoaWxlIGBuZXh0KClgIGFuZCBgW1N5bWJvbC5pdGVyYXRvcl1gIGJvdGggc2hhcmUgc3RhdGUsXG4gICAqIGB0b0FycmF5KClgIGRvZXMgbm90IHNoYXJlIHN0YXRlIGFuZCBhbHdheXMgcmV0dXJucyB0aGUgd2hvbGVcbiAgICogY29sbGVjdGlvbnMgYXJyYXkuXG4gICAqL1xuICB0b0FycmF5KCkge1xuICAgIGlmICh0aGlzLmFyZ3MuZW5kIHx8IHRoaXMuYXJncy50YWtlIHx8ICF0aGlzLml0ZXJhYmxlLmlzSW5maW5pdGUpIHtcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gW107XG4gICAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb24gb2YgdGhpcy5jb2xsZWN0aW9uSXRlcmF0b3IoKSkge1xuICAgICAgICBjb2xsZWN0aW9ucy5wdXNoKGNvbGxlY3Rpb24pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbGxlY3Rpb25zO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgSW5maW5pdGVMb29wRXJyb3IoXG4gICAgICAnQ29sbGVjdGlvbkl0ZXJhdG9yI3RvQXJyYXkoKSBjYW4gb25seSBiZSBjYWxsZWQgaWYgdGhlIGl0ZXJhdG9yICcgK1xuICAgICAgICAnaXMgbm90IGluZmluaXRlLCBvciB5b3UgcHJvdmlkZSBhbmQgYGVuZGAgYXJndW1lbnQsIG9yIHlvdSBwcm92aWRlICcgK1xuICAgICAgICAnYSBgdGFrZWAgYXJndW1lbnQuJyxcbiAgICApO1xuICB9XG4gIG5vcm1hbGl6ZURhdGVPdXRwdXQoZGF0ZSkge1xuICAgIGlmICghZGF0ZSkgcmV0dXJuO1xuICAgIHJldHVybiBEYXRlQWRhcHRlckJhc2UkMS5hZGFwdGVyLmZyb21EYXRlVGltZShkYXRlKTtcbiAgfVxuICAqY29sbGVjdGlvbkl0ZXJhdG9yKCkge1xuICAgIGlmICghdGhpcy5zdGFydERhdGUpIHJldHVybjtcbiAgICBsZXQgaXRlcmF0b3IgPSB0aGlzLm9jY3VycmVuY2VJdGVyYXRvcigpO1xuICAgIGxldCBkYXRlID0gaXRlcmF0b3IubmV4dCgpLnZhbHVlO1xuICAgIGlmICghZGF0ZSkgcmV0dXJuO1xuICAgIC8vIGBwZXJpb2RgID09PSBgcGVyaW9kU3RhcnRgIHVubGVzcyB0aGUgZ3JhbnVsYXJpdHlcbiAgICAvLyBpcyBgTU9OVEhMWWAgYW5kIGEgYHdlZWtTdGFydGAgcGFyYW0gd2FzIHByb3ZpZGVkLiBJbiB0aGlzIGNhc2UsXG4gICAgLy8gcGVyaW9kIGhvbGRzIGEgZGF0ZSA9PT0gdGhlIGZpcnN0IG9mIHRoZSBjdXJyZW50IG1vbnRoIHdoaWxlXG4gICAgLy8gcGVyaW9kU3RhcnQgaG9sZHMgYSBkYXRlID09PSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSBtb250aFxuICAgIC8vICh3aGljaCBtaWdodCBiZSBpbiB0aGUgdGhlIHByZXZpb3VzIG1vbnRoKS4gUmVhZCB0aGVcbiAgICAvLyBgT2NjdXJyZW5jZUdlbmVyYXRvciNjb2xsZWN0aW9ucygpYCBkZXNjcmlwdGlvbiBmb3IgbW9yZSBpbmZvLlxuICAgIGxldCBwZXJpb2QgPSB0aGlzLmdldFBlcmlvZCh0aGlzLmFyZ3Muc3RhcnQpO1xuICAgIGxldCBkYXRlcyA9IFtdO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGRhdGUgJiYgKHRoaXMuYXJncy50YWtlID09PSB1bmRlZmluZWQgfHwgdGhpcy5hcmdzLnRha2UgPiBpbmRleCkpIHtcbiAgICAgIHdoaWxlIChkYXRlICYmIGRhdGUuaXNCZWZvcmVPckVxdWFsKHBlcmlvZC5lbmQpKSB7XG4gICAgICAgIGRhdGVzLnB1c2goZGF0ZSk7XG4gICAgICAgIGRhdGUgPSBpdGVyYXRvci5uZXh0KCkudmFsdWU7XG4gICAgICB9XG4gICAgICB5aWVsZCBuZXcgQ29sbGVjdGlvbihcbiAgICAgICAgZGF0ZXMubWFwKGRhdGUgPT4gdGhpcy5ub3JtYWxpemVEYXRlT3V0cHV0KGRhdGUpKSxcbiAgICAgICAgdGhpcy5ncmFudWxhcml0eSxcbiAgICAgICAgdGhpcy5ub3JtYWxpemVEYXRlT3V0cHV0KHBlcmlvZC5zdGFydCksXG4gICAgICAgIHRoaXMubm9ybWFsaXplRGF0ZU91dHB1dChwZXJpb2QuZW5kKSxcbiAgICAgICk7XG4gICAgICBpZiAoIWRhdGUpIHJldHVybjtcbiAgICAgIGRhdGVzID0gW107XG4gICAgICBwZXJpb2QgPSAhdGhpcy5hcmdzLnNraXBFbXB0eVBlcmlvZHNcbiAgICAgICAgPyB0aGlzLmdldFBlcmlvZCh0aGlzLmluY3JlbWVudFBlcmlvZChwZXJpb2QucGVyaW9kKSlcbiAgICAgICAgOiB0aGlzLmdldFBlcmlvZChkYXRlKTtcbiAgICAgIC8vIFdpdGggdGhlc2UgYXJncywgcGVyaW9kcyBtYXkgb3ZlcmxhcCBhbmQgdGhlIHNhbWUgZGF0ZSBtYXkgc2hvdyB1cFxuICAgICAgLy8gaW4gdHdvIHBlcmlvZHMuIEJlY2F1c2Ugb2YgdGhpcywgd2UgbmVlZCB0byByZXNldCB0aGUgaXRlcmF0b3JcbiAgICAgIC8vIChvdGhlcndpc2UgaXQgd29uJ3QgcmV0dXJuIGEgZGF0ZSBpdCBoYXMgYWxyZWFkeSByZXR1cm5lZCkuXG4gICAgICBpZiAodGhpcy5ncmFudWxhcml0eSA9PT0gJ21vbnRoJyAmJiB0aGlzLndlZWtTdGFydCkge1xuICAgICAgICBpdGVyYXRvciA9IHRoaXMuaXRlcmFibGUuX3J1bih7XG4gICAgICAgICAgc3RhcnQ6IHBlcmlvZC5zdGFydCxcbiAgICAgICAgICBlbmQ6IHRoaXMuYXJncy5lbmQsXG4gICAgICAgIH0pO1xuICAgICAgICBkYXRlID0gaXRlcmF0b3IubmV4dCgpLnZhbHVlO1xuICAgICAgfVxuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH1cbiAgZ2V0UGVyaW9kKGRhdGUpIHtcbiAgICBsZXQgc3RhcnQ7XG4gICAgbGV0IGVuZDtcbiAgICBsZXQgcGVyaW9kO1xuICAgIGlmICh0aGlzLmdyYW51bGFyaXR5ID09PSAnbW9udGgnICYmIHRoaXMud2Vla1N0YXJ0KSB7XG4gICAgICBzdGFydCA9IGRhdGUuZ3JhbnVsYXJpdHkoJ21vbnRoJykuZ3JhbnVsYXJpdHkoJ3dlZWsnLCB7IHdlZWtTdGFydDogdGhpcy53ZWVrU3RhcnQgfSk7XG4gICAgICBlbmQgPSBkYXRlLmVuZEdyYW51bGFyaXR5KCdtb250aCcpLmVuZEdyYW51bGFyaXR5KCd3ZWVrJywgeyB3ZWVrU3RhcnQ6IHRoaXMud2Vla1N0YXJ0IH0pO1xuICAgICAgcGVyaW9kID0gZGF0ZS5ncmFudWxhcml0eSgnbW9udGgnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQgPSBkYXRlLmdyYW51bGFyaXR5KHRoaXMuZ3JhbnVsYXJpdHksIHsgd2Vla1N0YXJ0OiB0aGlzLndlZWtTdGFydCB9KTtcbiAgICAgIGVuZCA9IGRhdGUuZW5kR3JhbnVsYXJpdHkodGhpcy5ncmFudWxhcml0eSwgeyB3ZWVrU3RhcnQ6IHRoaXMud2Vla1N0YXJ0IH0pO1xuICAgICAgcGVyaW9kID0gc3RhcnQ7XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXJ0LCBlbmQsIHBlcmlvZCB9O1xuICB9XG4gIGluY3JlbWVudFBlcmlvZChkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuYWRkKDEsIHRoaXMuZ3JhbnVsYXJpdHkpO1xuICB9XG4gIG9jY3VycmVuY2VJdGVyYXRvcigpIHtcbiAgICBsZXQgc3RhcnQgPSB0aGlzLmFyZ3Muc3RhcnQgfHwgdGhpcy5pdGVyYWJsZS5fcnVuKCkubmV4dCgpLnZhbHVlO1xuICAgIGlmICghc3RhcnQpIHJldHVybiB0aGlzLml0ZXJhYmxlLl9ydW4odGhpcy5hcmdzKTtcbiAgICBzdGFydCA9IHRoaXMuZ2V0UGVyaW9kKHN0YXJ0KS5zdGFydDtcbiAgICByZXR1cm4gdGhpcy5pdGVyYWJsZS5fcnVuKHtcbiAgICAgIHN0YXJ0LFxuICAgICAgZW5kOiB0aGlzLmFyZ3MuZW5kLFxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBPcGVyYXRvciBleHRlbmRzIE9jY3VycmVuY2VHZW5lcmF0b3Ige1xuICBjb25zdHJ1Y3RvcihzdHJlYW1zLCBjb25maWcpIHtcbiAgICBzdXBlcihjb25maWcpO1xuICAgIHRoaXMuc3RyZWFtcyA9IHN0cmVhbXM7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy50aW1lem9uZSA9IGNvbmZpZy50aW1lem9uZTtcbiAgICB0aGlzLnN0cmVhbXMgPSBzdHJlYW1zLm1hcChzdHJlYW0gPT5cbiAgICAgIHN0cmVhbSBpbnN0YW5jZW9mIE9wZXJhdG9yID8gc3RyZWFtIDogc3RyZWFtLnNldCgndGltZXpvbmUnLCB0aGlzLnRpbWV6b25lKSxcbiAgICApO1xuICAgIHRoaXMuaXNJbmZpbml0ZSA9IHRoaXMuY2FsY3VsYXRlSXNJbmZpbml0ZSgpO1xuICAgIHRoaXMuaGFzRHVyYXRpb24gPSB0aGlzLmNhbGN1bGF0ZUhhc0R1cmF0aW9uKCk7XG4gIH1cbiAgbm9ybWFsaXplRGF0ZUlucHV0KGRhdGUpIHtcbiAgICBpZiAoIWRhdGUpIHJldHVybjtcbiAgICByZXR1cm4gZGF0ZUlucHV0VG9EYXRlVGltZShkYXRlLCB0aGlzLnRpbWV6b25lKTtcbiAgfVxuICBub3JtYWxpemVSdW5PdXRwdXQoZGF0ZSkge1xuICAgIHJldHVybiBub3JtYWxpemVEYXRlVGltZVRpbWV6b25lJDEoZGF0ZSwgdGhpcy50aW1lem9uZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBTaW1wbGUgY2xhc3MgdGhhdCBsZXRzIHVzIGFjY2VzcyB0aGUgYHZhbHVlYCwgYHJ1bkFyZ3NgLCBhbmQgYGRvbmVgXG4gKiBzdGF0dXMgb2YgYW4gT2NjdXJyZW5jZUdlbmVyYXRvciBpdGVyYXRvclxuICovXG5jbGFzcyBJdGVyYWJsZVdyYXBwZXIge1xuICBjb25zdHJ1Y3RvcihnZW5lcmF0b3IsIHJ1bkFyZ3MpIHtcbiAgICB0aGlzLnJ1bkFyZ3MgPSBydW5BcmdzO1xuICAgIHRoaXMuc3RyZWFtID0gZ2VuZXJhdG9yLl9ydW4odGhpcy5ydW5BcmdzKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgfVxuICBuZXh0KGFyZ3MpIHtcbiAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSB0aGlzLnN0cmVhbS5uZXh0KGFyZ3MpO1xuICAgIHRoaXMuZG9uZSA9IHR5cGVvZiBkb25lID09PSAnYm9vbGVhbicgPyBkb25lIDogdHJ1ZTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHsgZG9uZSwgdmFsdWUgfTtcbiAgfVxufVxuZnVuY3Rpb24gcHJvY2Vzc1lpZWxkQXJncyhzdHJlYW1zLCBvcHRpb25zID0ge30sIHlpZWxkQXJncyA9IHt9KSB7XG4gIGlmICgheWllbGRBcmdzLnNraXBUb0RhdGUgfHwgc3RyZWFtcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgLy8gY2hlY2sgZm9yIGludmFsaWQgYHNraXBUb0RhdGVgIG9wdGlvblxuICBpZiAoXG4gICAgb3B0aW9ucy5yZXZlcnNlXG4gICAgICA/IHN0cmVhbXMuZXZlcnkocyA9PiBzLnZhbHVlLmlzQmVmb3JlT3JFcXVhbCh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSkpXG4gICAgICA6IHN0cmVhbXMuZXZlcnkocyA9PiBzLnZhbHVlLmlzQWZ0ZXJPckVxdWFsKHlpZWxkQXJncy5za2lwVG9EYXRlKSlcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0EgcHJvdmlkZWQgYHNraXBUb0RhdGVgIG9wdGlvbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgbGFzdCB5aWVsZGVkIGRhdGUgJyArXG4gICAgICAgICcob3Igc21hbGxlciwgaW4gdGhlIGNhc2Ugb2YgcmV2ZXJzZSBpdGVyYXRpb24pJyxcbiAgICApO1xuICB9XG4gIGZvciAoY29uc3Qgc3RyZWFtIG9mIHN0cmVhbXMpIHtcbiAgICBpZiAoc3RyZWFtLmRvbmUpIGNvbnRpbnVlOyAvLyBubyBwb2ludCBpbiBjYWxsaW5nIGBuZXh0KClgXG4gICAgaWYgKFxuICAgICAgb3B0aW9ucy5yZXZlcnNlXG4gICAgICAgID8gc3RyZWFtLnZhbHVlLmlzQmVmb3JlT3JFcXVhbCh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSlcbiAgICAgICAgOiBzdHJlYW0udmFsdWUuaXNBZnRlck9yRXF1YWwoeWllbGRBcmdzLnNraXBUb0RhdGUpXG4gICAgKSB7XG4gICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gdGhlcmUgYXJlIHR3byBzdHJlYW1zIGFuZCBvbmUgc3RyZWFtIHN0YXJ0cyBhZnRlciB0aGUgb3RoZXIgZmluaXNoZXMuXG4gICAgICAvLyBPciwgd2hlbiBpdGVyYXRpbmcgaW4gcmV2ZXJzZSwgd2hlbiBvbmUgc3RyZWFtIGVuZHMgYmVmb3JlIHRoZSBvdGhlciBzdGFydHMuXG4gICAgICAvLyBJbiB0aGlzIGNhc2Ugd2UgZG9uJ3Qgd2FudCB0byBjYWxsIGBuZXh0KClgIGJlY2F1c2UgaXQgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAgIC8vIEluIGJvdGggb2YgdGhlc2UgY2FzZXMsIGNhbGxpbmcgYG5leHQoKWAgd29uJ3QgZG8gYW55dGhpbmcgYW55d2F5LlxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHN0cmVhbS5uZXh0KHlpZWxkQXJncyk7XG4gIH1cbn1cbi8qKiBzb3J0cyBhc2NlbmRpbmcgd2l0aCBjb21wbGV0ZWQgaXRlcmFibGVzIGF0IHRoZSBlbmQgKi9cbmZ1bmN0aW9uIHN0cmVhbXNDb21wYXJlcihhLCBiKSB7XG4gIGlmIChhLmRvbmUgJiYgYi5kb25lKSByZXR1cm4gMDtcbiAgaWYgKGEuZG9uZSkgcmV0dXJuIDE7XG4gIGlmIChiLmRvbmUpIHJldHVybiAtMTtcbiAgaWYgKGEudmFsdWUuaXNBZnRlcihiLnZhbHVlKSkgcmV0dXJuIDE7XG4gIHJldHVybiAtMTtcbn1cbi8qKiBzb3J0cyBkZXNjZW5kaW5nIHdpdGggY29tcGxldGVkIGl0ZXJhYmxlcyBhdCB0aGUgc3RhcnQgKi9cbmZ1bmN0aW9uIHN0cmVhbXNSZXZlcnNlQ29tcGFyZXIoYSwgYikge1xuICBpZiAoYS5kb25lICYmIGIuZG9uZSkgcmV0dXJuIDA7XG4gIGlmIChhLmRvbmUpIHJldHVybiAtMTtcbiAgaWYgKGIuZG9uZSkgcmV0dXJuIDE7XG4gIGlmIChhLnZhbHVlLmlzQWZ0ZXIoYi52YWx1ZSkpIHJldHVybiAtMTtcbiAgcmV0dXJuIDE7XG59XG5mdW5jdGlvbiBzZWxlY3ROZXh0SXRlcmFibGUoc3RyZWFtcywgb3B0aW9ucyA9IHt9LCB5aWVsZEFyZ3MgPSB7fSkge1xuICBwcm9jZXNzWWllbGRBcmdzKHN0cmVhbXMsIG9wdGlvbnMsIHlpZWxkQXJncyk7XG4gIHJldHVybiBzdHJlYW1zXG4gICAgLnNvcnQob3B0aW9ucy5yZXZlcnNlID8gc3RyZWFtc1JldmVyc2VDb21wYXJlciA6IHN0cmVhbXNDb21wYXJlcilcbiAgICAuZmlsdGVyKHMgPT4gIXMuZG9uZSlcbiAgICAuc2hpZnQoKTtcbn1cbmZ1bmN0aW9uIHNlbGVjdExhc3RJdGVyYWJsZShzdHJlYW1zLCBvcHRpb25zID0ge30sIHlpZWxkQXJncyA9IHt9KSB7XG4gIHByb2Nlc3NZaWVsZEFyZ3Moc3RyZWFtcywgb3B0aW9ucywgeWllbGRBcmdzKTtcbiAgcmV0dXJuIHN0cmVhbXNcbiAgICAuc29ydChvcHRpb25zLnJldmVyc2UgPyBzdHJlYW1zUmV2ZXJzZUNvbXBhcmVyIDogc3RyZWFtc0NvbXBhcmVyKVxuICAgIC5maWx0ZXIocyA9PiAhcy5kb25lKVxuICAgIC5wb3AoKTtcbn1cblxuLyoqXG4gKiBBbiBvcGVyYXRvciBmdW5jdGlvbiB3aGljaCBhY2NlcHRzIGEgc3ByZWFkIG9mIG9jY3VycmVuY2UgZ2VuZXJhdG9yc1xuICogYW5kIGFkZHMgdGhlaXIgb2NjdXJyZW5jZXMgdG8gdGhlIG91dHB1dC5cbiAqXG4gKiBAcGFyYW0gc3RyZWFtcyBhIHNwcmVhZCBvZiBvY2N1cnJlbmNlIGdlbmVyYXRvcnNcbiAqL1xuZnVuY3Rpb24gYWRkKC4uLnN0cmVhbXMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgPT4gbmV3IEFkZE9wZXJhdG9yKHN0cmVhbXMsIG9wdGlvbnMpO1xufVxuY2xhc3MgQWRkT3BlcmF0b3IgZXh0ZW5kcyBPcGVyYXRvciB7XG4gIHNldChfLCB2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgQWRkT3BlcmF0b3IoXG4gICAgICB0aGlzLnN0cmVhbXMubWFwKHN0cmVhbSA9PiBzdHJlYW0uc2V0KCd0aW1lem9uZScsIHZhbHVlKSksXG4gICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnKSwge1xuICAgICAgICBiYXNlOiB0aGlzLmNvbmZpZy5iYXNlICYmIHRoaXMuY29uZmlnLmJhc2Uuc2V0KCd0aW1lem9uZScsIHZhbHVlKSxcbiAgICAgICAgdGltZXpvbmU6IHZhbHVlLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuICAqX3J1bihhcmdzID0ge30pIHtcbiAgICBjb25zdCB3cmFwcGVkU3RyZWFtcyA9IHRoaXMuc3RyZWFtcy5tYXAoaW5wdXQgPT4gbmV3IEl0ZXJhYmxlV3JhcHBlcihpbnB1dCwgYXJncykpO1xuICAgIGlmICh0aGlzLmNvbmZpZy5iYXNlKSB7XG4gICAgICB3cmFwcGVkU3RyZWFtcy5wdXNoKG5ldyBJdGVyYWJsZVdyYXBwZXIodGhpcy5jb25maWcuYmFzZSwgYXJncykpO1xuICAgIH1cbiAgICBpZiAod3JhcHBlZFN0cmVhbXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgbGV0IHN0cmVhbSA9IHNlbGVjdE5leHRJdGVyYWJsZSh3cmFwcGVkU3RyZWFtcywgYXJncyk7XG4gICAgd2hpbGUgKHN0cmVhbSAmJiAhc3RyZWFtLmRvbmUpIHtcbiAgICAgIC8vIHlpZWxkIHRoZSBjdXJyZW50IHN0cmVhbSdzIHZhbHVlXG4gICAgICBjb25zdCB5aWVsZEFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZVJ1bk91dHB1dChzdHJlYW0udmFsdWUpO1xuICAgICAgaWYgKCEoeWllbGRBcmdzICYmIHlpZWxkQXJncy5za2lwVG9EYXRlKSkge1xuICAgICAgICAvLyBpdGVyYXRlIHRoZSBjdXJyZW50IHN0cmVhbVxuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgfVxuICAgICAgLy8gc2VsZWN0IHRoZSBuZXh0IHN0cmVhbVxuICAgICAgc3RyZWFtID0gc2VsZWN0TmV4dEl0ZXJhYmxlKHdyYXBwZWRTdHJlYW1zLCBhcmdzLCB5aWVsZEFyZ3MpO1xuICAgIH1cbiAgfVxuICBjYWxjdWxhdGVJc0luZmluaXRlKCkge1xuICAgIHJldHVybiAoXG4gICAgICAodGhpcy5jb25maWcuYmFzZSAmJiB0aGlzLmNvbmZpZy5iYXNlLmlzSW5maW5pdGUpIHx8XG4gICAgICB0aGlzLnN0cmVhbXMuc29tZShzdHJlYW0gPT4gc3RyZWFtLmlzSW5maW5pdGUpXG4gICAgKTtcbiAgfVxuICBjYWxjdWxhdGVIYXNEdXJhdGlvbigpIHtcbiAgICBjb25zdCBzdHJlYW1zRHVyYXRpb24gPSB0aGlzLnN0cmVhbXMuZXZlcnkoc3RyZWFtID0+IHN0cmVhbS5oYXNEdXJhdGlvbik7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5iYXNlKSByZXR1cm4gc3RyZWFtc0R1cmF0aW9uO1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5iYXNlLmhhc0R1cmF0aW9uICYmIHN0cmVhbXNEdXJhdGlvbjtcbiAgfVxufVxuXG5jbGFzcyBDYWxlbmRhciBleHRlbmRzIE9jY3VycmVuY2VHZW5lcmF0b3Ige1xuICAvKipcbiAgICpcbiAgICogQ3JlYXRlIGEgbmV3IENhbGVuZGFyIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgb3B0aW9ucy5cbiAgICpcbiAgICogIyMjIE9wdGlvbnNcbiAgICpcbiAgICogLSAqKnRpbWV6b25lKio6IFRoZSB0aW1lem9uZSB0aGF0IHlpZWxkZWQgb2NjdXJyZW5jZXMgc2hvdWxkIGJlICpkaXNwbGF5ZWQqIGluLlxuICAgKiAgIE5vdGUsIHRoaXMgb25lIGFmZmVjdHMgdGhlICpkaXNwbGF5ZWQqIHRpbWV6b25lIG9mIHlpZWxkZWQgb2NjdXJyZW5jZXMuXG4gICAqICAgRm9yIHJ1bGVzLCBvY2N1cnJlbmNlcyBhcmUgZmlyc3QgZm91bmQgdXNpbmcgdGhlIHVubW9kaWZpZWQgcnVsZVxuICAgKiAgIGNvbmZpZyAoaW5jbHVkaW5nIHdoYXRldmVyIHRpbWV6b25lIHRoZSBgc3RhcnRgIGRhdGV0aW1lIGlzIGRlZmluZWRcbiAgICogICBpbiksIGFuZCB0aGVuIGNvbnZlcnRlZCB0byB0aGUgdGltZXpvbmUgc3BlY2lmaWVkIGhlcmUgYmVmb3JlIGJlaW5nXG4gICAqICAgeWllbGRlZC4gQnkgZGVmYXVsdCwgdGhlIHRpbWV6b25lIGlzICpsb2NhbCogdGltZSAoYG51bGxgKS4gU28gaWYgeW91IGRvbid0XG4gICAqICAgd2FudCB5b3VyIHJ1bGVzIHRvIGJlIGRpc3BsYXllZCBpbiBsb2NhbCB0aW1lLCB5b3UgbXVzdCBzdXBwbHkgYVxuICAgKiAgIHRpbWV6b25lIGFyZ3VtZW50LlxuICAgKiAtICoqZGF0YSoqOiBhcmJpdHJhcnkgZGF0YSB5b3UgY2FuIGFzc29jaWF0ZSB3aXRoIHRoaXMgQ2FsZW5kYXIuIFRoaXNcbiAgICogICBpcyB0aGUgb25seSBtdXRhYmxlIHByb3BlcnR5IG9mIGBDYWxlbmRhcmAgb2JqZWN0cy5cbiAgICogLSAqKm1heER1cmF0aW9uKio6IGN1cnJlbnRseSB1bnVzZWQuXG4gICAqIC0gKipzY2hlZHVsZXMqKjogZWl0aGVyIGFuIG9jY3VycmVuY2UgZ2VuZXJhdG9yLCBvciBhbiBhcnJheSBvZiBvY2N1cnJlbmNlIGdlbmVyYXRvcnMsIHdoaWNoIHNob3VsZFxuICAgKiAgIGJlIHVzZWQgdG8gYnVpbGQgdXAgdGhpcyBDYWxlbmRhcidzIG9jY3VycmVuY2VzLiBUaGUgQ2FsZW5kYXIgd2lsbCBkaXNwbGF5IHRoZSB1bmlvbiBvZiBvY2N1cnJlbmNlc1xuICAgKiAgIGl0cyBzY2hlZHVsZXMgcHJvZHVjZS5cbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKGFyZ3MgPSB7fSkge1xuICAgIHN1cGVyKGFyZ3MpO1xuICAgIHRoaXMuc2NoZWR1bGVzID0gW107XG4gICAgdGhpcy5kYXRhID0gYXJncy5kYXRhO1xuICAgIGlmIChhcmdzLnNjaGVkdWxlcykge1xuICAgICAgdGhpcy5zY2hlZHVsZXMgPSBBcnJheS5pc0FycmF5KGFyZ3Muc2NoZWR1bGVzKSA/IGFyZ3Muc2NoZWR1bGVzIDogW2FyZ3Muc2NoZWR1bGVzXTtcbiAgICAgIHRoaXMuc2NoZWR1bGVzID0gdGhpcy5zY2hlZHVsZXMubWFwKHNjaGVkdWxlID0+IHNjaGVkdWxlLnNldCgndGltZXpvbmUnLCB0aGlzLnRpbWV6b25lKSk7XG4gICAgfVxuICAgIHRoaXMuaXNJbmZpbml0ZSA9IHRoaXMuc2NoZWR1bGVzLnNvbWUoc2NoZWR1bGUgPT4gc2NoZWR1bGUuaXNJbmZpbml0ZSk7XG4gICAgdGhpcy5oYXNEdXJhdGlvbiA9IHRoaXMuc2NoZWR1bGVzLmV2ZXJ5KHNjaGVkdWxlID0+IHNjaGVkdWxlLmhhc0R1cmF0aW9uKTtcbiAgfVxuICBvY2N1cnJlbmNlcyhhcmdzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IE9jY3VycmVuY2VJdGVyYXRvcih0aGlzLCB0aGlzLm5vcm1hbGl6ZU9jY3VycmVuY2VzQXJncyhhcmdzKSk7XG4gIH1cbiAgY29sbGVjdGlvbnMoYXJncyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uSXRlcmF0b3IodGhpcywgdGhpcy5ub3JtYWxpemVDb2xsZWN0aW9uc0FyZ3MoYXJncykpO1xuICB9XG4gIHNldChwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wID09PSAndGltZXpvbmUnKSB7XG4gICAgICByZXR1cm4gbmV3IENhbGVuZGFyKHtcbiAgICAgICAgc2NoZWR1bGVzOiB0aGlzLnNjaGVkdWxlcy5tYXAoc2NoZWR1bGUgPT4gc2NoZWR1bGUuc2V0KHByb3AsIHZhbHVlLCBvcHRpb25zKSksXG4gICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgICAgdGltZXpvbmU6IHZhbHVlLFxuICAgICAgICBtYXhEdXJhdGlvbjogdGhpcy5tYXhEdXJhdGlvbixcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ3NjaGVkdWxlcycpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FsZW5kYXIoe1xuICAgICAgICBzY2hlZHVsZXM6IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdLFxuICAgICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgICBtYXhEdXJhdGlvbjogdGhpcy5tYXhEdXJhdGlvbixcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcignVW5rbm93biB2YWx1ZSBmb3IgYHByb3BgOiAnICsgYFwiJHtwcm9wfVwiYCk7XG4gIH1cbiAgKl9ydW4oYXJncyA9IHt9KSB7XG4gICAgaWYgKHRoaXMuc2NoZWR1bGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0IGNvdW50ID0gYXJncy50YWtlO1xuICAgIGRlbGV0ZSBhcmdzLnRha2U7XG4gICAgbGV0IGl0ZXJhdG9yO1xuICAgIGlmICh0aGlzLnNjaGVkdWxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGl0ZXJhdG9yID0gdGhpcy5zY2hlZHVsZXNbMF0uX3J1bihhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0b3IgPSBuZXcgQWRkT3BlcmF0b3IodGhpcy5zY2hlZHVsZXMsIHtcbiAgICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICB9KS5fcnVuKGFyZ3MpO1xuICAgIH1cbiAgICBsZXQgZGF0ZSA9IGl0ZXJhdG9yLm5leHQoKS52YWx1ZTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIHdoaWxlIChkYXRlICYmIChjb3VudCA9PT0gdW5kZWZpbmVkIHx8IGNvdW50ID4gaW5kZXgpKSB7XG4gICAgICBkYXRlID0gZGF0ZS5hZGQodGhpcywgJ2dlbmVyYXRvcicpO1xuICAgICAgY29uc3QgeWllbGRBcmdzID0geWllbGQgdGhpcy5ub3JtYWxpemVSdW5PdXRwdXQoZGF0ZSk7XG4gICAgICBkYXRlID0gaXRlcmF0b3IubmV4dCh5aWVsZEFyZ3MpLnZhbHVlO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5jbGFzcyBEYXRlcyBleHRlbmRzIE9jY3VycmVuY2VHZW5lcmF0b3Ige1xuICBjb25zdHJ1Y3RvcihhcmdzID0ge30pIHtcbiAgICBzdXBlcihhcmdzKTtcbiAgICB0aGlzLmFkYXB0ZXJzID0gW107XG4gICAgdGhpcy5pc0luZmluaXRlID0gZmFsc2U7XG4gICAgdGhpcy5tYXhEdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5kYXRldGltZXMgPSBbXTtcbiAgICB0aGlzLmRhdGEgPSBhcmdzLmRhdGE7XG4gICAgaWYgKGFyZ3MuZGF0ZXMpIHtcbiAgICAgIHRoaXMuYWRhcHRlcnMgPSBhcmdzLmRhdGVzLm1hcChkYXRlID0+IHtcbiAgICAgICAgbGV0IGFkYXB0ZXIgPSB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dFRvQWRhcHRlcihkYXRlKTtcbiAgICAgICAgaWYgKGFyZ3MuZHVyYXRpb24gJiYgIWFkYXB0ZXIuZHVyYXRpb24pIHtcbiAgICAgICAgICBhZGFwdGVyID0gYWRhcHRlci5zZXQoJ2R1cmF0aW9uJywgYXJncy5kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIuc2V0KCd0aW1lem9uZScsIHRoaXMudGltZXpvbmUpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmRhdGV0aW1lcyA9IHRoaXMuYWRhcHRlcnMubWFwKGFkYXB0ZXIgPT4gYWRhcHRlci50b0RhdGVUaW1lKCkpO1xuICAgIH1cbiAgICB0aGlzLmhhc0R1cmF0aW9uID0gdGhpcy5kYXRldGltZXMuZXZlcnkoZGF0ZSA9PiAhIWRhdGUuZHVyYXRpb24pO1xuICAgIGlmICh0aGlzLmhhc0R1cmF0aW9uKSB7XG4gICAgICB0aGlzLm1heER1cmF0aW9uID0gdGhpcy5hZGFwdGVycy5yZWR1Y2UoXG4gICAgICAgIChwcmV2LCBjdXJyKSA9PiAoY3Vyci5kdXJhdGlvbiA+IHByZXYgPyBjdXJyLmR1cmF0aW9uIDogcHJldiksXG4gICAgICAgIDAsXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBnZXQgbGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXJzLmxlbmd0aDtcbiAgfVxuICAvKiogUmV0dXJucyB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvciwgaWYgdGhlcmUgYXJlIG5vIG9jY3VycmVuY2VzLCBudWxsLiAqL1xuICBnZXQgZmlyc3REYXRlKCkge1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXJzWzBdIHx8IG51bGw7XG4gIH1cbiAgLyoqIFJldHVybnMgdGhlIGxhc3Qgb2NjdXJyZW5jZSBvciwgaWYgdGhlcmUgYXJlIG5vIG9jY3VycmVuY2VzLCBudWxsLiAqL1xuICBnZXQgbGFzdERhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlcnNbdGhpcy5sZW5ndGggLSAxXSB8fCBudWxsO1xuICB9XG4gIG9jY3VycmVuY2VzKGFyZ3MgPSB7fSkge1xuICAgIHJldHVybiBuZXcgT2NjdXJyZW5jZUl0ZXJhdG9yKHRoaXMsIHRoaXMubm9ybWFsaXplT2NjdXJyZW5jZXNBcmdzKGFyZ3MpKTtcbiAgfVxuICBjb2xsZWN0aW9ucyhhcmdzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IENvbGxlY3Rpb25JdGVyYXRvcih0aGlzLCB0aGlzLm5vcm1hbGl6ZUNvbGxlY3Rpb25zQXJncyhhcmdzKSk7XG4gIH1cbiAgYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlcyh7XG4gICAgICBkYXRlczogWy4uLnRoaXMuYWRhcHRlcnMsIHZhbHVlXSxcbiAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgIH0pO1xuICB9XG4gIHJlbW92ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGRhdGVzID0gdGhpcy5hZGFwdGVycy5zbGljZSgpO1xuICAgIGNvbnN0IGlucHV0ID0gdGhpcy5ub3JtYWxpemVEYXRlSW5wdXRUb0FkYXB0ZXIodmFsdWUpO1xuICAgIGNvbnN0IGluZGV4ID0gZGF0ZXMuZmluZEluZGV4KGRhdGUgPT4gZGF0ZS52YWx1ZU9mKCkgPT09IGlucHV0LnZhbHVlT2YoKSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGRhdGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGF0ZXMoe1xuICAgICAgZGF0ZXMsXG4gICAgICB0aW1lem9uZTogdGhpcy50aW1lem9uZSxcbiAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICB9KTtcbiAgfVxuICBzZXQocHJvcCwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCB0aW1lem9uZSA9IHRoaXMudGltZXpvbmU7XG4gICAgbGV0IGRhdGVzID0gdGhpcy5hZGFwdGVycy5zbGljZSgpO1xuICAgIGlmIChwcm9wID09PSAndGltZXpvbmUnKSB7XG4gICAgICBpZiAodmFsdWUgPT09IHRoaXMudGltZXpvbmUpIHJldHVybiB0aGlzO1xuICAgICAgZWxzZSBpZiAob3B0aW9ucy5rZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGRhdGVzID0gdGhpcy5hZGFwdGVycy5tYXAoYWRhcHRlciA9PiB7XG4gICAgICAgICAgY29uc3QganNvbiA9IGFkYXB0ZXIudG9KU09OKCk7XG4gICAgICAgICAganNvbi50aW1lem9uZSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVBZGFwdGVyLmZyb21KU09OKGpzb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRpbWV6b25lID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSAnZGF0ZXMnKSB7XG4gICAgICBkYXRlcyA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ2R1cmF0aW9uJykge1xuICAgICAgZGF0ZXMgPSBkYXRlcy5tYXAoZGF0ZSA9PiBkYXRlLnNldCgnZHVyYXRpb24nLCB2YWx1ZSB8fCAwKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKFxuICAgICAgICBgVW5leHBlY3RlZCBwcm9wIGFyZ3VtZW50IFwiJHtwcm9wfVwiLiBBY2NlcHRlZCB2YWx1ZXMgYXJlIFwidGltZXpvbmVcIiBvciBcImRhdGVzXCJgLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlcyh7XG4gICAgICBkYXRlcyxcbiAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgIHRpbWV6b25lLFxuICAgIH0pO1xuICB9XG4gIGZpbHRlcihmbikge1xuICAgIHJldHVybiBuZXcgRGF0ZXMoe1xuICAgICAgZGF0ZXM6IHRoaXMuYWRhcHRlcnMuZmlsdGVyKGZuKSxcbiAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgIH0pO1xuICB9XG4gICpfcnVuKGFyZ3MgPSB7fSkge1xuICAgIGxldCBkYXRlcyA9IHRoaXMuZGF0ZXRpbWVzLnNvcnQoZGF0ZVRpbWVTb3J0Q29tcGFyZXIpO1xuICAgIGlmIChhcmdzLnN0YXJ0KSB7XG4gICAgICBkYXRlcyA9IGRhdGVzLmZpbHRlcihkYXRlID0+IGRhdGUuaXNBZnRlck9yRXF1YWwoYXJncy5zdGFydCkpO1xuICAgIH1cbiAgICBpZiAoYXJncy5lbmQpIHtcbiAgICAgIGRhdGVzID0gZGF0ZXMuZmlsdGVyKGRhdGUgPT4gZGF0ZS5pc0JlZm9yZU9yRXF1YWwoYXJncy5lbmQpKTtcbiAgICB9XG4gICAgaWYgKGFyZ3MucmV2ZXJzZSkge1xuICAgICAgZGF0ZXMgPSBkYXRlcy5zbGljZSgpLnJldmVyc2UoKTtcbiAgICB9XG4gICAgaWYgKGFyZ3MudGFrZSkge1xuICAgICAgZGF0ZXMgPSBkYXRlcy5zbGljZSgwLCBhcmdzLnRha2UpO1xuICAgIH1cbiAgICBjb25zdCBkYXRlQ2FjaGUgPSBkYXRlcy5zbGljZSgpO1xuICAgIGxldCBkYXRlID0gZGF0ZUNhY2hlLnNoaWZ0KCk7XG4gICAgbGV0IHlpZWxkQXJncztcbiAgICB3aGlsZSAoZGF0ZSkge1xuICAgICAgaWYgKFxuICAgICAgICB5aWVsZEFyZ3MgJiZcbiAgICAgICAgeWllbGRBcmdzLnNraXBUb0RhdGUgJiZcbiAgICAgICAgKGFyZ3MucmV2ZXJzZSA/IHlpZWxkQXJncy5za2lwVG9EYXRlLmlzQmVmb3JlKGRhdGUpIDogeWllbGRBcmdzLnNraXBUb0RhdGUuaXNBZnRlcihkYXRlKSlcbiAgICAgICkge1xuICAgICAgICBkYXRlID0gZGF0ZUNhY2hlLnNoaWZ0KCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZGF0ZSA9IGRhdGUuYWRkKHRoaXMsICdnZW5lcmF0b3InKTtcbiAgICAgIHlpZWxkQXJncyA9IHlpZWxkIHRoaXMubm9ybWFsaXplUnVuT3V0cHV0KGRhdGUpO1xuICAgICAgLy8gSGVyZSwgd2UgYXJlIG1hdGNoaW5nIHRoZSBiZWhhdmlvciBvZiB0aGUgUmVjdXJyZW5jZVJ1bGVzSXRlcmF0b3JcbiAgICAgIGlmIChcbiAgICAgICAgeWllbGRBcmdzICYmXG4gICAgICAgIHlpZWxkQXJncy5za2lwVG9EYXRlICYmXG4gICAgICAgIChhcmdzLnJldmVyc2VcbiAgICAgICAgICA/IHlpZWxkQXJncy5za2lwVG9EYXRlLmlzQWZ0ZXJPckVxdWFsKGRhdGUpXG4gICAgICAgICAgOiB5aWVsZEFyZ3Muc2tpcFRvRGF0ZS5pc0JlZm9yZU9yRXF1YWwoZGF0ZSkpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBIHByb3ZpZGVkIGBza2lwVG9EYXRlYCBvcHRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIGxhc3QgeWllbGRlZCBkYXRlICcgK1xuICAgICAgICAgICAgJyhvciBzbWFsbGVyLCBpbiB0aGUgY2FzZSBvZiByZXZlcnNlIGl0ZXJhdGlvbiknLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGF0ZSA9IGRhdGVDYWNoZS5zaGlmdCgpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmNsYXNzIEludmFsaWREYXRlQWRhcHRlckVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmxldCBkYXRlQWRhcHRlckNvbmZpZztcbmNsYXNzIERhdGVBZGFwdGVyQmFzZSB7XG4gIGNvbnN0cnVjdG9yKF9kYXRlLCBvcHRpb25zKSB7XG4gICAgdGhpcy5kdXJhdGlvbiA9IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IDA7XG4gICAgdGhpcy5nZW5lcmF0b3JzID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5nZW5lcmF0b3JzICYmIG9wdGlvbnMuZ2VuZXJhdG9ycy5zbGljZSgpKSB8fCBbXTtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodGhpcy5kdXJhdGlvbikgfHwgdGhpcy5kdXJhdGlvbiA8IDApIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZUFkYXB0ZXJFcnJvcignZHVyYXRpb24gbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyJyk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBzZXQgYWRhcHRlcih2YWx1ZSkge1xuICAgIGlmIChkYXRlQWRhcHRlckNvbmZpZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7ZGF0ZUFkYXB0ZXJDb25maWcubmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIGNvbmZpZ3VyZWQuYCk7XG4gICAgfVxuICAgIGRhdGVBZGFwdGVyQ29uZmlnID0gdmFsdWU7XG4gIH1cbiAgc3RhdGljIGdldCBhZGFwdGVyKCkge1xuICAgIGlmICghZGF0ZUFkYXB0ZXJDb25maWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF0ZSBhZGFwdGVyIGhhcyBiZWVuIGNvbmZpZ3VyZWQuIFNlZSByU2NoZWR1bGUgZG9jcy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGVBZGFwdGVyQ29uZmlnO1xuICB9XG4gIHN0YXRpYyBpc0RhdGUoX29iamVjdCkge1xuICAgIHRocm93IHVuaW1wbGVtZW50ZWRFcnJvcignaXNEYXRlKCknKTtcbiAgfVxuICBzdGF0aWMgZnJvbURhdGUoX2RhdGUsIF9vcHRpb25zKSB7XG4gICAgdGhyb3cgdW5pbXBsZW1lbnRlZEVycm9yKCdmcm9tRGF0ZSgpJyk7XG4gIH1cbiAgc3RhdGljIGZyb21KU09OKF9qc29uKSB7XG4gICAgdGhyb3cgdW5pbXBsZW1lbnRlZEVycm9yKCdmcm9tSlNPTigpJyk7XG4gIH1cbiAgc3RhdGljIGZyb21EYXRlVGltZShfZGF0ZXRpbWUpIHtcbiAgICB0aHJvdyB1bmltcGxlbWVudGVkRXJyb3IoJ2Zyb21EYXRlVGltZSgpJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgaW4gc2ltcGxpZmllZCBleHRlbmRlZCBJU08gZm9ybWF0IChJU08gODYwMSkuXG4gICAqXG4gICAqIF9Ob3RlOiB0aGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGVzdGluZyBhbmQgaXRzXG4gICAqIGltcGxlbWVudGF0aW9uIGlzbid0IHBhcnRpY3VsYXJseSBwZXJmb3JtYW50Ll9cbiAgICovXG4gIHRvSVNPU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnNldCgndGltZXpvbmUnLCAnVVRDJylcbiAgICAgIC50b0RhdGVUaW1lKClcbiAgICAgIC50b0lTT1N0cmluZygpO1xuICB9XG4gIHRvRGF0ZVRpbWUoKSB7XG4gICAgY29uc3QgZGF0ZSA9IERhdGVUaW1lLmZyb21KU09OKFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnRvSlNPTigpKSwgeyBnZW5lcmF0b3JzOiB0aGlzLmdlbmVyYXRvcnMgfSksXG4gICAgKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufVxuRGF0ZUFkYXB0ZXJCYXNlLmhhc1RpbWV6b25lU3VwcG9ydCA9IGZhbHNlO1xuZnVuY3Rpb24gdW5pbXBsZW1lbnRlZEVycm9yKG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcihgWW91IG11c3QgaW1wbGVtZW50IHRoZSBcIiR7bmFtZX1cIiBtZXRob2QgZm9yIHRoaXMgRGF0ZUFkYXB0ZXIgY2xhc3NgKTtcbn1cbnZhciBEYXRlQWRhcHRlcjtcbihmdW5jdGlvbihEYXRlQWRhcHRlcikge1xuICBEYXRlQWRhcHRlci5XRUVLREFZUyA9IFsnU1UnLCAnTU8nLCAnVFUnLCAnV0UnLCAnVEgnLCAnRlInLCAnU0EnXTtcbiAgRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX1NFQ09ORCA9IDEwMDA7XG4gIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9NSU5VVEUgPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fU0VDT05EICogNjA7XG4gIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9IT1VSID0gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX01JTlVURSAqIDYwO1xuICBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fREFZID0gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0hPVVIgKiAyNDtcbiAgRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX1dFRUsgPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fREFZICogNztcbn0pKERhdGVBZGFwdGVyIHx8IChEYXRlQWRhcHRlciA9IHt9KSk7XG5jbGFzcyBJbnZhbGlkRGF0ZVRpbWVFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBEYXRlVGltZSB7XG4gIGNvbnN0cnVjdG9yKGRhdGUsIHRpbWV6b25lLCBkdXJhdGlvbiwgZ2VuZXJhdG9ycykge1xuICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIHRoaXMudGltZXpvbmUgPSB0aW1lem9uZSB8fCBudWxsO1xuICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbiB8fCAwO1xuICAgIHRoaXMuZ2VuZXJhdG9ycyA9IChnZW5lcmF0b3JzICYmIGdlbmVyYXRvcnMuc2xpY2UoKSkgfHwgW107XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHRoaXMuZHVyYXRpb24pIHx8IHRoaXMuZHVyYXRpb24gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVUaW1lRXJyb3IoJ2R1cmF0aW9uIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcicpO1xuICAgIH1cbiAgICB0aGlzLmFzc2VydElzVmFsaWQoKTtcbiAgfVxuICAvLyAvKipcbiAgLy8gICogU2ltaWxhciB0byBgQXJyYXkuaXNBcnJheSgpYCwgYGlzSW5zdGFuY2UoKWAgcHJvdmlkZXMgYSBzdXJlZmlyZSBtZXRob2RcbiAgLy8gICogb2YgZGV0ZXJtaW5pbmcgaWYgYW4gb2JqZWN0IGlzIGEgYERhdGVUaW1lYCBieSBjaGVja2luZyBhZ2FpbnN0IHRoZVxuICAvLyAgKiBnbG9iYWwgc3ltYm9sIHJlZ2lzdHJ5LlxuICAvLyAgKi9cbiAgLy8gc3RhdGljIGlzSW5zdGFuY2Uob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgRGF0ZVRpbWUge1xuICAvLyAgIHJldHVybiAhIShvYmplY3QgJiYgb2JqZWN0W0RBVEVUSU1FX0lEXSk7XG4gIC8vIH1cbiAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoXG4gICAgICBEYXRlLlVUQyhcbiAgICAgICAganNvbi55ZWFyLFxuICAgICAgICBqc29uLm1vbnRoIC0gMSxcbiAgICAgICAganNvbi5kYXksXG4gICAgICAgIGpzb24uaG91cixcbiAgICAgICAganNvbi5taW51dGUsXG4gICAgICAgIGpzb24uc2Vjb25kLFxuICAgICAgICBqc29uLm1pbGxpc2Vjb25kLFxuICAgICAgKSxcbiAgICApO1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoZGF0ZSwganNvbi50aW1lem9uZSwganNvbi5kdXJhdGlvbiwganNvbi5nZW5lcmF0b3JzKTtcbiAgfVxuICBzdGF0aWMgZnJvbURhdGVBZGFwdGVyKGFkYXB0ZXIpIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUpTT04oXG4gICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFkYXB0ZXIudG9KU09OKCkpLCB7IGdlbmVyYXRvcnM6IGFkYXB0ZXIuZ2VuZXJhdG9ycyB9KSxcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIGBkdXJhdGlvbmAgaXMgYDBgLiBFbHNlIHJldHVybnNcbiAgICogdGhlIGBlbmRgIGRhdGUuXG4gICAqL1xuICBnZXQgZW5kKCkge1xuICAgIGlmICghdGhpcy5kdXJhdGlvbikgcmV0dXJuO1xuICAgIGlmICh0aGlzLl9lbmQpIHJldHVybiB0aGlzLl9lbmQ7XG4gICAgdGhpcy5fZW5kID0gdGhpcy5hZGQodGhpcy5kdXJhdGlvbiwgJ21pbGxpc2Vjb25kJyk7XG4gICAgcmV0dXJuIHRoaXMuX2VuZDtcbiAgfVxuICAvLyBXaGlsZSB3ZSBjb25zdHJhaW4gdGhlIGFyZ3VtZW50IHRvIGJlIGFub3RoZXIgRGF0ZUFkYXB0ZXIgaW4gdHlwZXNjcmlwdFxuICAvLyB3ZSBoYW5kbGUgdGhlIGNhc2Ugb2Ygc29tZW9uZSBwYXNzaW5nIGluIGFub3RoZXIgdHlwZSBvZiBvYmplY3QgaW4gamF2YXNjcmlwdFxuICBpc0VxdWFsKG9iamVjdCkge1xuICAgIGlmICghb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGFzc2VydFNhbWVUaW1lWm9uZSh0aGlzLCBvYmplY3QpO1xuICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gb2JqZWN0LnZhbHVlT2YoKTtcbiAgfVxuICBpc0JlZm9yZShvYmplY3QpIHtcbiAgICBhc3NlcnRTYW1lVGltZVpvbmUodGhpcywgb2JqZWN0KTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBvYmplY3QudmFsdWVPZigpO1xuICB9XG4gIGlzQmVmb3JlT3JFcXVhbChvYmplY3QpIHtcbiAgICBhc3NlcnRTYW1lVGltZVpvbmUodGhpcywgb2JqZWN0KTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPD0gb2JqZWN0LnZhbHVlT2YoKTtcbiAgfVxuICBpc0FmdGVyKG9iamVjdCkge1xuICAgIGFzc2VydFNhbWVUaW1lWm9uZSh0aGlzLCBvYmplY3QpO1xuICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IG9iamVjdC52YWx1ZU9mKCk7XG4gIH1cbiAgaXNBZnRlck9yRXF1YWwob2JqZWN0KSB7XG4gICAgYXNzZXJ0U2FtZVRpbWVab25lKHRoaXMsIG9iamVjdCk7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID49IG9iamVjdC52YWx1ZU9mKCk7XG4gIH1cbiAgaXNPY2N1cnJpbmcob2JqZWN0KSB7XG4gICAgaWYgKCF0aGlzLmR1cmF0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGVUaW1lI2lzT2NjdXJyaW5nKCkgaXMgb25seSBhcHBsaWNhYmxlIHRvIERhdGVUaW1lcyB3aXRoIGR1cmF0aW9ucycpO1xuICAgIH1cbiAgICBhc3NlcnRTYW1lVGltZVpvbmUodGhpcywgb2JqZWN0KTtcbiAgICByZXR1cm4gKFxuICAgICAgb2JqZWN0LmlzQWZ0ZXJPckVxdWFsKHRoaXMpICYmIG9iamVjdC5pc0JlZm9yZU9yRXF1YWwodGhpcy5hZGQodGhpcy5kdXJhdGlvbiwgJ21pbGxpc2Vjb25kJykpXG4gICAgKTtcbiAgfVxuICBhZGQoYW1vdW50LCB1bml0KSB7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICdnZW5lcmF0b3InOiB7XG4gICAgICAgIGNvbnN0IGdlbmVyYXRvcnMgPSB0aGlzLmdlbmVyYXRvcnMuc2xpY2UoKTtcbiAgICAgICAgZ2VuZXJhdG9ycy51bnNoaWZ0KGFtb3VudCk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUodGhpcy5kYXRlLCB0aGlzLnRpbWV6b25lLCB0aGlzLmR1cmF0aW9uLCBnZW5lcmF0b3JzKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDWWVhcnModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ01vbnRocyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENXZWVrcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ0RheXModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDSG91cnModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENNaW51dGVzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDU2Vjb25kcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDTWlsbGlzZWNvbmRzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdW5pdCBwcm92aWRlZCB0byBgRGF0ZVRpbWUjYWRkYCcpO1xuICAgIH1cbiAgfVxuICBzdWJ0cmFjdChhbW91bnQsIHVuaXQpIHtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDWWVhcnModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ01vbnRocyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENXZWVrcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ0RheXModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDSG91cnModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENNaW51dGVzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDU2Vjb25kcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDTWlsbGlzZWNvbmRzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdW5pdCBwcm92aWRlZCB0byBgRGF0ZVRpbWUjc3VidHJhY3RgJyk7XG4gICAgfVxuICB9XG4gIGdldCh1bml0KSB7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ01vbnRoKCkgKyAxO1xuICAgICAgY2FzZSAneWVhcmRheSc6XG4gICAgICAgIHJldHVybiBnZXRVVENZZWFyRGF5KHRoaXMuZGF0ZSk7XG4gICAgICBjYXNlICd3ZWVrZGF5JzpcbiAgICAgICAgcmV0dXJuIERhdGVBZGFwdGVyLldFRUtEQVlTW3RoaXMuZGF0ZS5nZXRVVENEYXkoKV07XG4gICAgICBjYXNlICdkYXknOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ01pbnV0ZXMoKTtcbiAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0VVRDU2Vjb25kcygpO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVuaXQgcHJvdmlkZWQgdG8gYERhdGVUaW1lI3NldGAnKTtcbiAgICB9XG4gIH1cbiAgc2V0KHVuaXQsIHZhbHVlKSB7XG4gICAgaWYgKHVuaXQgPT09ICdkdXJhdGlvbicpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUodGhpcy5kYXRlLCB0aGlzLnRpbWV6b25lLCB2YWx1ZSwgdGhpcy5nZW5lcmF0b3JzKTtcbiAgICB9XG4gICAgaWYgKHVuaXQgPT09ICdnZW5lcmF0b3JzJykge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh0aGlzLmRhdGUsIHRoaXMudGltZXpvbmUsIHRoaXMuZHVyYXRpb24sIHZhbHVlKTtcbiAgICB9XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21vbnRoJzoge1xuICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBkYXkgb2YgdGhlIG1vbnRoXG4gICAgICAgIC8vIGlzIGdyZWF0ZXIgdGhhbiBkYXlzIGluIHRoZSBtb250aCB3ZSBhcmUgbW92aW5nIHRvLCB3ZSBuZWVkIHRvIGFsc29cbiAgICAgICAgLy8gc2V0IHRoZSBkYXkgdG8gdGhlIGVuZCBvZiB0aGF0IG1vbnRoLlxuICAgICAgICBjb25zdCBsZW5ndGggPSBtb250aExlbmd0aCh2YWx1ZSwgZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgY29uc3QgZGF5ID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIGlmIChkYXkgPiBsZW5ndGgpIHtcbiAgICAgICAgICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gICAgICAgICAgZGF0ZS5zZXRVVENNb250aCh2YWx1ZSk7XG4gICAgICAgICAgZGF0ZSA9IHN1YlVUQ0RheXMoZGF0ZSwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0ZS5zZXRVVENNb250aCh2YWx1ZSAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgZGF0ZS5zZXRVVENEYXRlKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgZGF0ZS5zZXRVVENNaW51dGVzKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICBkYXRlLnNldFVUQ1NlY29uZHModmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgZGF0ZS5zZXRVVENNaWxsaXNlY29uZHModmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1bml0IHByb3ZpZGVkIHRvIGBEYXRlVGltZSNzZXRgJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShkYXRlKTtcbiAgfVxuICBncmFudWxhcml0eShncmFudWxhcml0eSwgb3B0ID0ge30pIHtcbiAgICBsZXQgZGF0ZSA9IHRoaXMuZm9ya0RhdGVUaW1lKHRoaXMuZGF0ZSk7XG4gICAgc3dpdGNoIChncmFudWxhcml0eSkge1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnbW9udGgnLCAxKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdkYXknLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgZGF0ZSA9IHNldERhdGVUb1N0YXJ0T2ZXZWVrKGRhdGUsIG9wdC53ZWVrU3RhcnQpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGdyYW51bGFyaXR5KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdob3VyJywgMCk7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdtaW51dGUnLCAwKTtcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnc2Vjb25kJywgMCk7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ21pbGxpc2Vjb25kJywgMCk7XG4gICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGdyYW51bGFyaXR5IHByb3ZpZGVkIHRvIGBEYXRlVGltZSNncmFudWxhcml0eWA6ICcgKyBncmFudWxhcml0eSk7XG4gICAgfVxuICB9XG4gIGVuZEdyYW51bGFyaXR5KGdyYW51bGFyaXR5LCBvcHQgPSB7fSkge1xuICAgIGxldCBkYXRlID0gdGhpcy5mb3JrRGF0ZVRpbWUodGhpcy5kYXRlKTtcbiAgICBzd2l0Y2ggKGdyYW51bGFyaXR5KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdtb250aCcsIDEyKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdkYXknLCBtb250aExlbmd0aChkYXRlLmdldCgnbW9udGgnKSwgZGF0ZS5nZXQoJ3llYXInKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICBkYXRlID0gc2V0RGF0ZVRvRW5kT2ZXZWVrKGRhdGUsIG9wdC53ZWVrU3RhcnQpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGdyYW51bGFyaXR5KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdob3VyJywgMjMpO1xuICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnbWludXRlJywgNTkpO1xuICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdzZWNvbmQnLCA1OSk7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ21pbGxpc2Vjb25kJywgOTk5KTtcbiAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZ3JhbnVsYXJpdHkgcHJvdmlkZWQgdG8gYERhdGVUaW1lI2dyYW51bGFyaXR5YDogJyArIGdyYW51bGFyaXR5KTtcbiAgICB9XG4gIH1cbiAgdG9JU09TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0ZS50b0lTT1N0cmluZygpO1xuICB9XG4gIHRvRGF0ZVRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IGpzb24gPSB7XG4gICAgICB0aW1lem9uZTogdGhpcy50aW1lem9uZSxcbiAgICAgIHllYXI6IHRoaXMuZ2V0KCd5ZWFyJyksXG4gICAgICBtb250aDogdGhpcy5nZXQoJ21vbnRoJyksXG4gICAgICBkYXk6IHRoaXMuZ2V0KCdkYXknKSxcbiAgICAgIGhvdXI6IHRoaXMuZ2V0KCdob3VyJyksXG4gICAgICBtaW51dGU6IHRoaXMuZ2V0KCdtaW51dGUnKSxcbiAgICAgIHNlY29uZDogdGhpcy5nZXQoJ3NlY29uZCcpLFxuICAgICAgbWlsbGlzZWNvbmQ6IHRoaXMuZ2V0KCdtaWxsaXNlY29uZCcpLFxuICAgIH07XG4gICAgaWYgKHRoaXMuZHVyYXRpb24pIHtcbiAgICAgIGpzb24uZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGUudmFsdWVPZigpO1xuICB9XG4gIGFzc2VydElzVmFsaWQoKSB7XG4gICAgaWYgKGlzTmFOKHRoaXMudmFsdWVPZigpKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlVGltZUVycm9yKCdEYXRlVGltZSBoYXMgaW52YWxpZCBkYXRlLicpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmb3JrRGF0ZVRpbWUoZGF0ZSkge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoZGF0ZSwgdGhpcy50aW1lem9uZSwgdGhpcy5kdXJhdGlvbiwgdGhpcy5nZW5lcmF0b3JzKTtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0U2FtZVRpbWVab25lKHgsIHkpIHtcbiAgaWYgKHgudGltZXpvbmUgIT09IHkudGltZXpvbmUpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVUaW1lRXJyb3IoXG4gICAgICAnQXR0ZW1wdGVkIHRvIGNvbXBhcmUgYSBkYXRldGltZSB0byBhbm90aGVyIGRhdGUgaW4gYSBkaWZmZXJlbnQgdGltZXpvbmU6ICcgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeSh4KSArXG4gICAgICAgICcgYW5kICcgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeSh5KSxcbiAgICApO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gc2V0RGF0ZVRvU3RhcnRPZldlZWsoZGF0ZSwgd2tzdCkge1xuICBjb25zdCBpbmRleCA9IG9yZGVyZWRXZWVrZGF5cyh3a3N0KS5pbmRleE9mKGRhdGUuZ2V0KCd3ZWVrZGF5JykpO1xuICByZXR1cm4gZGF0ZS5zdWJ0cmFjdChpbmRleCwgJ2RheScpO1xufVxuZnVuY3Rpb24gc2V0RGF0ZVRvRW5kT2ZXZWVrKGRhdGUsIHdrc3QpIHtcbiAgY29uc3QgaW5kZXggPSBvcmRlcmVkV2Vla2RheXMod2tzdCkuaW5kZXhPZihkYXRlLmdldCgnd2Vla2RheScpKTtcbiAgcmV0dXJuIGRhdGUuYWRkKDYgLSBpbmRleCwgJ2RheScpO1xufVxuZnVuY3Rpb24gb3JkZXJlZFdlZWtkYXlzKHdrc3QgPSAnU1UnKSB7XG4gIGNvbnN0IHdrZGF5cyA9IERhdGVBZGFwdGVyLldFRUtEQVlTLnNsaWNlKCk7XG4gIGxldCBpbmRleCA9IHdrZGF5cy5pbmRleE9mKHdrc3QpO1xuICB3aGlsZSAoaW5kZXggIT09IDApIHtcbiAgICBzaGlmdEFycmF5KHdrZGF5cyk7XG4gICAgaW5kZXgtLTtcbiAgfVxuICByZXR1cm4gd2tkYXlzO1xufVxuZnVuY3Rpb24gc2hpZnRBcnJheShhcnJheSwgZnJvbSA9ICdmaXJzdCcpIHtcbiAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBhcnJheTtcbiAgfSBlbHNlIGlmIChmcm9tID09PSAnZmlyc3QnKSB7XG4gICAgYXJyYXkucHVzaChhcnJheS5zaGlmdCgpKTtcbiAgfSBlbHNlIHtcbiAgICBhcnJheS51bnNoaWZ0KGFycmF5LnBvcCgpKTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGRheXMgaW4gdGhlIGdpdmVuIG1vbnRoLlxuICpcbiAqIEBwYXJhbSBtb250aCBiYXNlLTFcbiAqIEBwYXJhbSB5ZWFyXG4gKi9cbmZ1bmN0aW9uIG1vbnRoTGVuZ3RoKG1vbnRoLCB5ZWFyKSB7XG4gIGNvbnN0IGJsb2NrID0ge1xuICAgIDE6IDMxLFxuICAgIDI6IGdldERheXNJbkZlYnJ1YXJ5KHllYXIpLFxuICAgIDM6IDMxLFxuICAgIDQ6IDMwLFxuICAgIDU6IDMxLFxuICAgIDY6IDMwLFxuICAgIDc6IDMxLFxuICAgIDg6IDMxLFxuICAgIDk6IDMwLFxuICAgIDEwOiAzMSxcbiAgICAxMTogMzAsXG4gICAgMTI6IDMxLFxuICB9O1xuICByZXR1cm4gYmxvY2tbbW9udGhdO1xufVxuZnVuY3Rpb24gZ2V0RGF5c0luRmVicnVhcnkoeWVhcikge1xuICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjg7XG59XG4vLyB0YWtlbiBmcm9tIGRhdGUtZm5cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQwMCA9PT0gMCB8fCAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCk7XG59XG5mdW5jdGlvbiBnZXRVVENZZWFyRGF5KG5vdykge1xuICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKERhdGUuVVRDKG5vdy5nZXRVVENGdWxsWWVhcigpLCAwLCAxKSk7XG4gIGNvbnN0IGRpZmYgPSBub3cudmFsdWVPZigpIC0gc3RhcnQudmFsdWVPZigpO1xuICByZXR1cm4gMSArIE1hdGguZmxvb3IoZGlmZiAvIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9EQVkpO1xufVxuLyoqXG4gKiBUaGVzZSBmdW5jdGlvbnMgYXJlIGJhc2ljYWxseSBsaWZ0ZWQgZnJvbSBgZGF0ZS1mbnNgLCBidXQgY2hhbmdlZFxuICogdG8gdXNlIHRoZSBVVEMgZGF0ZSBtZXRob2RzLCB3aGljaCBgZGF0ZS1mbnNgIGRvZXNuJ3Qgc3VwcG9ydC5cbiAqL1xuZnVuY3Rpb24gdG9JbnRlZ2VyKGlucHV0KSB7XG4gIGlmIChpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdHJ1ZSB8fCBpbnB1dCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIGNvbnN0IGludCA9IE51bWJlcihpbnB1dCk7XG4gIGlmIChpc05hTihpbnQpKSB7XG4gICAgcmV0dXJuIGludDtcbiAgfVxuICByZXR1cm4gaW50IDwgMCA/IE1hdGguY2VpbChpbnQpIDogTWF0aC5mbG9vcihpbnQpO1xufVxuZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMiBhcmd1bWVudHMgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbiAgY29uc3QgdGltZXN0YW1wID0gZGlydHlEYXRlLnZhbHVlT2YoKTtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59XG5mdW5jdGlvbiBhZGRVVENZZWFycyhkYXRlLCBpbnB1dCkge1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoaW5wdXQpO1xuICByZXR1cm4gYWRkVVRDTW9udGhzKGRhdGUsIGFtb3VudCAqIDEyKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ01vbnRocyhkYXRlLCBpbnB1dCkge1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoaW5wdXQpO1xuICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gIGNvbnN0IGRlc2lyZWRNb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKSArIGFtb3VudDtcbiAgY29uc3QgZGF0ZVdpdGhEZXNpcmVkTW9udGggPSBuZXcgRGF0ZSgwKTtcbiAgZGF0ZVdpdGhEZXNpcmVkTW9udGguc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkZXNpcmVkTW9udGgsIDEpO1xuICBkYXRlV2l0aERlc2lyZWRNb250aC5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgY29uc3QgZGF5c0luTW9udGggPSBtb250aExlbmd0aChcbiAgICBkYXRlV2l0aERlc2lyZWRNb250aC5nZXRVVENNb250aCgpICsgMSxcbiAgICBkYXRlV2l0aERlc2lyZWRNb250aC5nZXRVVENGdWxsWWVhcigpLFxuICApO1xuICAvLyBTZXQgdGhlIGxhc3QgZGF5IG9mIHRoZSBuZXcgbW9udGhcbiAgLy8gaWYgdGhlIG9yaWdpbmFsIGRhdGUgd2FzIHRoZSBsYXN0IGRheSBvZiB0aGUgbG9uZ2VyIG1vbnRoXG4gIGRhdGUuc2V0VVRDTW9udGgoZGVzaXJlZE1vbnRoLCBNYXRoLm1pbihkYXlzSW5Nb250aCwgZGF0ZS5nZXRVVENEYXRlKCkpKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5mdW5jdGlvbiBhZGRVVENXZWVrcyhkYXRlLCBpbnB1dCkge1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoaW5wdXQpO1xuICBjb25zdCBkYXlzID0gYW1vdW50ICogNztcbiAgcmV0dXJuIGFkZFVUQ0RheXMoZGF0ZSwgZGF5cyk7XG59XG5mdW5jdGlvbiBhZGRVVENEYXlzKGRhdGUsIGlucHV0KSB7XG4gIC8vIGJ5IGFkZGluZyBtaWxsaXNlY29uZHMgcmF0aGVyIHRoYW4gZGF5cywgd2Ugc3VwcmVzcyB0aGUgbmF0aXZlIERhdGUgb2JqZWN0J3MgYXV0b21hdGljXG4gIC8vIGRheWxpZ2h0IHNhdmluZ3MgdGltZSBjb252ZXJzaW9ucyB3aGljaCB3ZSBkb24ndCB3YW50IGluIFVUQyBtb2RlXG4gIHJldHVybiBhZGRVVENNaWxsaXNlY29uZHMoZGF0ZSwgdG9JbnRlZ2VyKGlucHV0KSAqIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9EQVkpO1xufVxuZnVuY3Rpb24gYWRkVVRDSG91cnMoZGF0ZSwgaW5wdXQpIHtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGlucHV0KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkYXRlLCBhbW91bnQgKiBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fSE9VUik7XG59XG5mdW5jdGlvbiBhZGRVVENNaW51dGVzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGF0ZSwgYW1vdW50ICogRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX01JTlVURSk7XG59XG5mdW5jdGlvbiBhZGRVVENTZWNvbmRzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGF0ZSwgYW1vdW50ICogRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX1NFQ09ORCk7XG59XG5mdW5jdGlvbiBhZGRVVENNaWxsaXNlY29uZHMoZGF0ZSwgaW5wdXQpIHtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGlucHV0KTtcbiAgY29uc3QgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDWWVhcnMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENZZWFycyhkYXRlLCAtYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ01vbnRocyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ01vbnRocyhkYXRlLCAtYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ1dlZWtzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkVVRDV2Vla3MoZGF0ZSwgLWFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENEYXlzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkVVRDRGF5cyhkYXRlLCAtYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ0hvdXJzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkVVRDSG91cnMoZGF0ZSwgLWFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENNaW51dGVzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkVVRDTWludXRlcyhkYXRlLCAtYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ1NlY29uZHMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENTZWNvbmRzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDTWlsbGlzZWNvbmRzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkVVRDTWlsbGlzZWNvbmRzKGRhdGUsIC1hbW91bnQpO1xufVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplRGF0ZUlucHV0PFQgZXh0ZW5kcyBEYXRlQWRhcHRlcj4oXG4vLyAgIGRhdGVBZGFwdGVyOiBEYXRlQWRhcHRlckNvbnN0cnVjdG9yPFQ+LFxuLy8gICBpbnB1dDogRGF0ZUlucHV0PFQ+LFxuLy8gICB0aW1lem9uZTogc3RyaW5nIHwgbnVsbCxcbi8vICk6IERhdGVUaW1lIHtcbi8vICAgaWYgKGlucHV0IGluc3RhbmNlb2YgRGF0ZVRpbWUpIHtcbi8vICAgICBpZiAoaW5wdXQudGltZXpvbmUgIT09IHRpbWV6b25lKSB7XG4vLyAgICAgICByZXR1cm4gZGF0ZUFkYXB0ZXJcbi8vICAgICAgICAgLmZyb21EYXRlVGltZShpbnB1dClcbi8vICAgICAgICAgLnNldCgndGltZXpvbmUnLCB0aW1lem9uZSlcbi8vICAgICAgICAgLnRvRGF0ZVRpbWUoKTtcbi8vICAgICB9XG4vLyAgICAgcmV0dXJuIGlucHV0O1xuLy8gICB9XG4vLyAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGVBZGFwdGVyXG4vLyAgICAgPyBpbnB1dC5zZXQoJ3RpbWV6b25lJywgdGltZXpvbmUpLnRvRGF0ZVRpbWUoKVxuLy8gICAgIDogbmV3IGRhdGVBZGFwdGVyKGlucHV0KS50b0RhdGVUaW1lKCk7XG4vLyB9XG5mdW5jdGlvbiBub3JtYWxpemVEYXRlVGltZVRpbWV6b25lKGRhdGUsIHRpbWV6b25lKSB7XG4gIGlmIChkYXRlLnRpbWV6b25lICE9PSB0aW1lem9uZSkge1xuICAgIHJldHVybiBEYXRlQWRhcHRlckJhc2UuYWRhcHRlclxuICAgICAgLmZyb21EYXRlVGltZShkYXRlKVxuICAgICAgLnNldCgndGltZXpvbmUnLCB0aW1lem9uZSlcbiAgICAgIC50b0RhdGVUaW1lKCk7XG4gIH1cbiAgcmV0dXJuIGRhdGU7XG59XG5cbmNsYXNzIFJ1bGVCYXNlIGV4dGVuZHMgT2NjdXJyZW5jZUdlbmVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKHJlY3VycmVuY2VSdWxlcywgY29uZmlnLCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLnJlY3VycmVuY2VSdWxlcyA9IHJlY3VycmVuY2VSdWxlcztcbiAgICB0aGlzLm9wdGlvbnMgPSBjbG9uZVJ1bGVPcHRpb25zKGNvbmZpZyk7XG4gICAgdGhpcy5ub3JtT3B0aW9ucyA9IG5vcm1hbGl6ZVJ1bGVPcHRpb25zKHRoaXMucmVjdXJyZW5jZVJ1bGVzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMudGltZXpvbmUgPVxuICAgICAgb3B0aW9ucy50aW1lem9uZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy50aW1lem9uZSA6IHRoaXMubm9ybU9wdGlvbnMuc3RhcnQudGltZXpvbmU7XG4gICAgdGhpcy5kYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgIHRoaXMuaGFzRHVyYXRpb24gPSAhIWNvbmZpZy5kdXJhdGlvbjtcbiAgICBpZiAodGhpcy5oYXNEdXJhdGlvbikgdGhpcy5kdXJhdGlvbiA9IGNvbmZpZy5kdXJhdGlvbjtcbiAgICB0aGlzLmlzSW5maW5pdGUgPSB0aGlzLm5vcm1PcHRpb25zLmVuZCA9PT0gdW5kZWZpbmVkICYmIHRoaXMubm9ybU9wdGlvbnMuY291bnQgPT09IHVuZGVmaW5lZDtcbiAgfVxuICBvY2N1cnJlbmNlcyhhcmdzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IE9jY3VycmVuY2VJdGVyYXRvcih0aGlzLCB0aGlzLm5vcm1hbGl6ZU9jY3VycmVuY2VzQXJncyhhcmdzKSk7XG4gIH1cbiAgY29sbGVjdGlvbnMoYXJncyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uSXRlcmF0b3IodGhpcywgdGhpcy5ub3JtYWxpemVDb2xsZWN0aW9uc0FyZ3MoYXJncykpO1xuICB9XG4gICpfcnVuKHJhd0FyZ3MgPSB7fSkge1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLm5vcm1hbGl6ZVJ1bkFyZ3MocmF3QXJncyk7XG4gICAgY29uc3QgaXRlcmF0b3IgPSBuZXcgUmVjdXJyZW5jZVJ1bGVzSXRlcmF0b3IoXG4gICAgICByZWN1cnJlbmNlUnVsZXNSZWR1Y2VyKHRoaXMucmVjdXJyZW5jZVJ1bGVzKSxcbiAgICAgIHRoaXMubm9ybU9wdGlvbnMsXG4gICAgICBhcmdzLFxuICAgICk7XG4gICAgbGV0IGRhdGUgPSBpdGVyYXRvci5uZXh0KCkudmFsdWU7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZGF0ZSAmJiAoYXJncy50YWtlID09PSB1bmRlZmluZWQgfHwgaW5kZXggPCBhcmdzLnRha2UpKSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgZGF0ZSA9IGRhdGUuYWRkKHRoaXMsICdnZW5lcmF0b3InKTtcbiAgICAgIGNvbnN0IHlpZWxkQXJncyA9IHlpZWxkIHRoaXMubm9ybWFsaXplUnVuT3V0cHV0KGRhdGUpO1xuICAgICAgaWYgKHlpZWxkQXJncyA9PT0gbnVsbCB8fCB5aWVsZEFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHlpZWxkQXJncy5za2lwVG9EYXRlKSB7XG4gICAgICAgIC8vIFRoZSBSZWN1cnJlbmNlUnVsZUl0ZXJhdG9yIG1pZ2h0IGhhdmUgYSBkaWZmZXJlbnQgdGltZXpvbmUgZnJvbSB0aGUgcnVsZS5cbiAgICAgICAgLy8gQmVjYXVzZSBvZiB0aGlzLCB0aGUgeWllbGRBcmdzIHdpbGwgbm90IHByb3Blcmx5IGJlIG5vcm1hbGl6ZWQgYnkgdGhlXG4gICAgICAgIC8vIE9jY3VycmVuY2VJdGVyYXRvciwgc28gd2UgbmVlZCB0byBkbyBpdCBoZXJlXG4gICAgICAgIGRhdGUgPSBpdGVyYXRvci5uZXh0KFxuICAgICAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgeWllbGRBcmdzKSwge1xuICAgICAgICAgICAgc2tpcFRvRGF0ZTogbm9ybWFsaXplRGF0ZVRpbWVUaW1lem9uZSh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSwgaXRlcmF0b3Iuc3RhcnQudGltZXpvbmUpLFxuICAgICAgICAgIH0pLFxuICAgICAgICApLnZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlb3JldGljYWxseSwgdGhlIHlpZWxkQXJncyBhcmUgdW5kZWZpbmVkIGhlcmVcbiAgICAgICAgLy8gbWF5YmUgaW4gdGhlIGZ1dHVyZSB0aGVyZSB3aWxsIGJlIG90aGVyIHlpZWxkQXJnIG9wdGlvbnMgdGhvdWdoXG4gICAgICAgIGRhdGUgPSBpdGVyYXRvci5uZXh0KHlpZWxkQXJncykudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuY2xhc3MgUnVsZSBleHRlbmRzIFJ1bGVCYXNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBSdWxlIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgcnVsZSBjb25maWcgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqICMjIyBPcHRpb25zXG4gICAqXG4gICAqIC0gKip0aW1lem9uZSoqOiB0aGUgdGltZXpvbmUgdGhhdCB5aWVsZGVkIG9jY3VycmVuY2VzIHNob3VsZCBiZSBpbi4gTm90ZSxcbiAgICogICB0aGlzIGRvZXMgbm90IGNoYW5nZSB0aGUgcnVsZSBjb25maWcuIE9jY3VycmVuY2VzIGFyZSBmaXJzdCBmb3VuZCB1c2luZ1xuICAgKiAgIHRoZSB1bm1vZGlmaWVkIHJ1bGUgY29uZmlnLCBhbmQgdGhlbiBjb252ZXJ0ZWQgdG8gdGhlIHRpbWV6b25lIHNwZWNpZmllZFxuICAgKiAgIGhlcmUgYmVmb3JlIGJlaW5nIHlpZWxkZWQuXG4gICAqIC0gKipkYXRhKio6IGFyYml0cmFyeSBkYXRhIHlvdSBjYW4gYXNzb2NpYXRlIHdpdGggdGhpcyBydWxlLiBUaGlzXG4gICAqICAgaXMgdGhlIG9ubHkgbXV0YWJsZSBwcm9wZXJ0eSBvZiBgUnVsZWAgb2JqZWN0cy5cbiAgICpcbiAgICogIyMjIFJ1bGUgQ29uZmlnXG4gICAqXG4gICAqIC0gIyMjIyBmcmVxdWVuY3lcbiAgICpcbiAgICogICBUaGUgZnJlcXVlbmN5IHJ1bGUgcGFydCBpZGVudGlmaWVzIHRoZSB0eXBlIG9mIHJlY3VycmVuY2UgcnVsZS4gVmFsaWQgdmFsdWVzXG4gICAqICAgaW5jbHVkZSBgXCJTRUNPTkRMWVwiYCwgYFwiTUlOVVRFTFlcImAsIGBcIkhPVVJMWVwiYCwgYFwiREFJTFlcImAsIGBcIldFRUtMWVwiYCxcbiAgICogICBgXCJNT05USExZXCJgLCBvciBgXCJZRUFSTFlcImAuXG4gICAqXG4gICAqIC0gIyMjIyBzdGFydFxuICAgKlxuICAgKiAgIFRoZSBzdGFydCBvZiB0aGUgcnVsZSAobm90IG5lY2Vzc2FyaWx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlKS5cbiAgICogICBFaXRoZXIgYSBgRGF0ZUFkYXB0ZXJgIGluc3RhbmNlLCBkYXRlIG9iamVjdCwgb3IgYERhdGVUaW1lYCBvYmplY3QuXG4gICAqICAgVGhlIHR5cGUgb2YgZGF0ZSBvYmplY3QgZGVwZW5kcyBvbiB0aGUgYERhdGVBZGFwdGVyYCBjbGFzcyB1c2VkIGZvciB0aGlzXG4gICAqICAgYFJ1bGVgLlxuICAgKlxuICAgKiAtICMjIyMgZW5kP1xuICAgKlxuICAgKiAgIFRoZSBlbmQgb2YgdGhlIHJ1bGUgKG5vdCBuZWNlc3NhcmlseSB0aGUgbGFzdCBvY2N1cnJlbmNlKS5cbiAgICogICBFaXRoZXIgYSBgRGF0ZUFkYXB0ZXJgIGluc3RhbmNlLCBkYXRlIG9iamVjdCwgb3IgYERhdGVUaW1lYCBvYmplY3QuXG4gICAqICAgVGhlIHR5cGUgb2YgZGF0ZSBvYmplY3QgZGVwZW5kcyBvbiB0aGUgYERhdGVBZGFwdGVyYCBjbGFzcyB1c2VkIGZvciB0aGlzXG4gICAqICAgYFJ1bGVgLlxuICAgKlxuICAgKiAtICMjIyMgZHVyYXRpb24/XG4gICAqXG4gICAqICAgQSBsZW5ndGggb2YgdGltZSBleHByZXNzZWQgaW4gbWlsbGlzZWNvbmRzLlxuICAgKlxuICAgKiAtICMjIyMgaW50ZXJ2YWw/XG4gICAqXG4gICAqICAgVGhlIGludGVydmFsIHJ1bGUgcGFydCBjb250YWlucyBhIHBvc2l0aXZlIGludGVnZXIgcmVwcmVzZW50aW5nIGF0XG4gICAqICAgd2hpY2ggaW50ZXJ2YWxzIHRoZSByZWN1cnJlbmNlIHJ1bGUgcmVwZWF0cy4gVGhlIGRlZmF1bHQgdmFsdWUgaXNcbiAgICogICBgMWAsIG1lYW5pbmcgZXZlcnkgc2Vjb25kIGZvciBhIFNFQ09ORExZIHJ1bGUsIGV2ZXJ5IG1pbnV0ZSBmb3IgYVxuICAgKiAgIE1JTlVURUxZIHJ1bGUsIGV2ZXJ5IGhvdXIgZm9yIGFuIEhPVVJMWSBydWxlLCBldmVyeSBkYXkgZm9yIGFcbiAgICogICBEQUlMWSBydWxlLCBldmVyeSB3ZWVrIGZvciBhIFdFRUtMWSBydWxlLCBldmVyeSBtb250aCBmb3IgYVxuICAgKiAgIE1PTlRITFkgcnVsZSwgYW5kIGV2ZXJ5IHllYXIgZm9yIGEgWUVBUkxZIHJ1bGUuIEZvciBleGFtcGxlLFxuICAgKiAgIHdpdGhpbiBhIERBSUxZIHJ1bGUsIGEgdmFsdWUgb2YgYDhgIG1lYW5zIGV2ZXJ5IGVpZ2h0IGRheXMuXG4gICAqXG4gICAqIC0gIyMjIyBjb3VudD9cbiAgICpcbiAgICogICBUaGUgY291bnQgcnVsZSBwYXJ0IGRlZmluZXMgdGhlIG51bWJlciBvZiBvY2N1cnJlbmNlcyBhdCB3aGljaCB0b1xuICAgKiAgIHJhbmdlLWJvdW5kIHRoZSByZWN1cnJlbmNlLiBgY291bnRgIGFuZCBgZW5kYCBhcmUgYm90aCB0d28gZGlmZmVyZW50XG4gICAqICAgd2F5cyBvZiBzcGVjaWZ5aW5nIGhvdyBhIHJlY3VycmVuY2UgY29tcGxldGVzLlxuICAgKlxuICAgKiAtICMjIyMgd2Vla1N0YXJ0P1xuICAgKlxuICAgKiAgIFRoZSB3ZWVrU3RhcnQgcnVsZSBwYXJ0IHNwZWNpZmllcyB0aGUgZGF5IG9uIHdoaWNoIHRoZSB3b3Jrd2VlayBzdGFydHMuXG4gICAqICAgVmFsaWQgdmFsdWVzIGFyZSBgXCJNT1wiYCwgYFwiVFVcImAsIGBcIldFXCJgLCBgXCJUSFwiYCwgYFwiRlJcImAsIGBcIlNBXCJgLCBhbmQgYFwiU1VcImAuXG4gICAqICAgVGhpcyBpcyBzaWduaWZpY2FudCB3aGVuIGEgV0VFS0xZIHJ1bGUgaGFzIGFuIGludGVydmFsIGdyZWF0ZXIgdGhhbiAxLFxuICAgKiAgIGFuZCBhIGBieURheU9mV2Vla2AgcnVsZSBwYXJ0IGlzIHNwZWNpZmllZC4gVGhlXG4gICAqICAgZGVmYXVsdCB2YWx1ZSBpcyBgXCJNT1wiYC5cbiAgICpcbiAgICogLSAjIyMjIGJ5U2Vjb25kT2ZNaW51dGU/XG4gICAqXG4gICAqICAgVGhlIGJ5U2Vjb25kT2ZNaW51dGUgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2Ygc2Vjb25kc1xuICAgKiAgIHdpdGhpbiBhIG1pbnV0ZS4gVmFsaWQgdmFsdWVzIGFyZSAwIHRvIDYwLlxuICAgKlxuICAgKiAtICMjIyMgYnlNaW51dGVPZkhvdXI/XG4gICAqXG4gICAqICAgVGhlIGJ5TWludXRlT2ZIb3VyIHJ1bGUgcGFydCBleHBlY3RzIGFuIGFycmF5IG9mIG1pbnV0ZXMgd2l0aGluIGFuIGhvdXIuXG4gICAqICAgVmFsaWQgdmFsdWVzIGFyZSAwIHRvIDU5LlxuICAgKlxuICAgKiAtICMjIyMgYnlIb3VyT2ZEYXk/XG4gICAqXG4gICAqICAgVGhlIGJ5SG91ck9mRGF5IHJ1bGUgcGFydCBleHBlY3RzIGFuIGFycmF5IG9mIGhvdXJzIG9mIHRoZSBkYXkuXG4gICAqICAgVmFsaWQgdmFsdWVzIGFyZSAwIHRvIDIzLlxuICAgKlxuICAgKiAtICMjIyMgYnlEYXlPZldlZWs/XG4gICAqXG4gICAqICAgKm5vdGU6IHRoZSBieURheU9mV2VlayBydWxlIHBhcnQgaXMga2luZGEgY29tcGxleC4gQmxhbWUgdGhlIElDQUwgc3BlYy4qXG4gICAqXG4gICAqICAgVGhlIGJ5RGF5T2ZXZWVrIHJ1bGUgcGFydCBleHBlY3RzIGFuIGFycmF5LiBFYWNoIGFycmF5IGVudHJ5IGNhblxuICAgKiAgIGJlIGEgZGF5IG9mIHRoZSB3ZWVrIChgXCJTVVwiYCwgYFwiTU9cImAgLCBgXCJUVVwiYCwgYFwiV0VcImAsIGBcIlRIXCJgLFxuICAgKiAgIGBcIkZSXCJgLCBgXCJTQVwiYCkuIElmIHRoZSBydWxlJ3MgYGZyZXF1ZW5jeWAgaXMgZWl0aGVyIE1PTlRITFkgb3IgWUVBUkxZLFxuICAgKiAgIEFueSBlbnRyeSBjYW4gYWxzbyBiZSBhIHR1cGxlIHdoZXJlIHRoZSBmaXJzdCB2YWx1ZSBvZiB0aGUgdHVwbGUgaXMgYVxuICAgKiAgIGRheSBvZiB0aGUgd2VlayBhbmQgdGhlIHNlY29uZCB2YWx1ZSBpcyBhbiBwb3NpdGl2ZS9uZWdhdGl2ZSBpbnRlZ2VyXG4gICAqICAgKGUuZy4gYFtcIlNVXCIsIDFdYCkuIEluIHRoaXMgY2FzZSwgdGhlIG51bWJlciBpbmRpY2F0ZXMgdGhlIG50aCBvY2N1cnJlbmNlIG9mXG4gICAqICAgdGhlIHNwZWNpZmllZCBkYXkgd2l0aGluIHRoZSBNT05USExZIG9yIFlFQVJMWSBydWxlLlxuICAgKlxuICAgKiAgIFRoZSBiZWhhdmlvciBvZiBieURheU9mV2VlayBjaGFuZ2VzIGRlcGVuZGluZyBvbiB0aGUgYGZyZXF1ZW5jeWBcbiAgICogICBvZiB0aGUgcnVsZS5cbiAgICpcbiAgICogICBXaXRoaW4gYSBNT05USExZIHJ1bGUsIGBbXCJNT1wiLCAxXWAgcmVwcmVzZW50cyB0aGUgZmlyc3QgTW9uZGF5XG4gICAqICAgd2l0aGluIHRoZSBtb250aCwgd2hlcmVhcyBgW1wiTU9cIiwgLTFdYCByZXByZXNlbnRzIHRoZSBsYXN0IE1vbmRheVxuICAgKiAgIG9mIHRoZSBtb250aC5cbiAgICpcbiAgICogICBXaXRoaW4gYSBZRUFSTFkgcnVsZSwgdGhlIG51bWVyaWMgdmFsdWUgaW4gYSBieURheU9mV2VlayB0dXBsZSBlbnRyeVxuICAgKiAgIGNvcnJlc3BvbmRzIHRvIGFuIG9mZnNldCB3aXRoaW4gdGhlIG1vbnRoIHdoZW4gdGhlIGJ5TW9udGhPZlllYXIgcnVsZSBwYXJ0IGlzXG4gICAqICAgcHJlc2VudCwgYW5kIGNvcnJlc3BvbmRzIHRvIGFuIG9mZnNldCB3aXRoaW4gdGhlIHllYXIgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiAgIFJlZ2FyZGxlc3Mgb2YgcnVsZSBgZnJlcXVlbmN5YCwgaWYgYSBieURheU9mV2VlayBlbnRyeSBpcyBhIHN0cmluZ1xuICAgKiAgIChyYXRoZXIgdGhhbiBhIHR1cGxlKSwgaXQgbWVhbnMgXCJhbGwgb2YgdGhlc2UgZGF5c1wiIHdpdGhpbiB0aGUgc3BlY2lmaWVkXG4gICAqICAgZnJlcXVlbmN5IChlLmcuIHdpdGhpbiBhIE1PTlRITFkgcnVsZSwgYFwiTU9cImAgcmVwcmVzZW50cyBhbGwgTW9uZGF5cyB3aXRoaW5cbiAgICogICB0aGUgbW9udGgpLlxuICAgKlxuICAgKiAtICMjIyMgYnlEYXlPZk1vbnRoP1xuICAgKlxuICAgKiAgIFRoZSBieURheU9mTW9udGggcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2YgZGF5c1xuICAgKiAgIG9mIHRoZSBtb250aC4gVmFsaWQgdmFsdWVzIGFyZSAxIHRvIDMxIG9yIC0zMSB0byAtMS5cbiAgICpcbiAgICogICBGb3IgZXhhbXBsZSwgLTEwIHJlcHJlc2VudHMgdGhlIHRlbnRoIHRvIHRoZSBsYXN0IGRheSBvZiB0aGUgbW9udGguXG4gICAqICAgVGhlIGJ5RGF5T2ZNb250aCBydWxlIHBhcnQgKm11c3Qgbm90KiBiZSBzcGVjaWZpZWQgd2hlbiB0aGUgcnVsZSdzXG4gICAqICAgYGZyZXF1ZW5jeWAgaXMgc2V0IHRvIFdFRUtMWS5cbiAgICpcbiAgICogLSAjIyMjIGJ5TW9udGhPZlllYXI/XG4gICAqXG4gICAqICAgVGhlIGJ5TW9udGhPZlllYXIgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2YgbW9udGhzXG4gICAqICAgb2YgdGhlIHllYXIuIFZhbGlkIHZhbHVlcyBhcmUgMSB0byAxMi5cbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZywgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoUnVsZS5yZWN1cnJlbmNlUnVsZXMsIGNvbmZpZywgb3B0aW9ucyk7XG4gIH1cbiAgc2V0KHByb3AsIHZhbHVlLCB0em9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBvcHRpb25zID0gY2xvbmVSdWxlT3B0aW9ucyh0aGlzLm9wdGlvbnMpO1xuICAgIGxldCB0aW1lem9uZSA9IHRoaXMudGltZXpvbmU7XG4gICAgaWYgKHByb3AgPT09ICd0aW1lem9uZScpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcy50aW1lem9uZSAmJiAhdHpvcHRpb25zLmtlZXBMb2NhbFRpbWUpIHJldHVybiB0aGlzO1xuICAgICAgZWxzZSBpZiAodHpvcHRpb25zLmtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgY29uc3QganNvbiA9IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KG9wdGlvbnMuc3RhcnQpLnRvSlNPTigpO1xuICAgICAgICBqc29uLnRpbWV6b25lID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLmRhdGVBZGFwdGVyLmZyb21KU09OKGpzb24pO1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgb3B0aW9ucy5zdGFydCA9XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RhcnQgaW5zdGFuY2VvZiB0aGlzLmRhdGVBZGFwdGVyID8gYWRhcHRlciA6XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN0YXJ0IGluc3RhbmNlb2YgRGF0ZVRpbWUkMSA/IGFkYXB0ZXIudG9EYXRlVGltZSgpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGFwdGVyLmRhdGU7XG4gICAgICB9XG4gICAgICB0aW1lem9uZSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ29wdGlvbnMnKSB7XG4gICAgICBvcHRpb25zID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnNbcHJvcF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSdWxlKG9wdGlvbnMsIHtcbiAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgIG1heER1cmF0aW9uOiB0aGlzLm1heER1cmF0aW9uLFxuICAgICAgdGltZXpvbmUsXG4gICAgfSk7XG4gIH1cbn1cblJ1bGUucmVjdXJyZW5jZVJ1bGVzID0gW107XG5cbmNsYXNzIFNjaGVkdWxlQmFzZSBleHRlbmRzIE9jY3VycmVuY2VHZW5lcmF0b3Ige1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IFNjaGVkdWxlIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgb3B0aW9ucy5cbiAgICpcbiAgICogVGhlIG9yZGVyIG9mIHByZWNpZGVuY2UgZm9yIHJydWxlcywgcmRhdGVzLCBleHJ1bGVzLCBhbmQgZXhkYXRlcyBpczpcbiAgICpcbiAgICogMS4gcnJ1bGVzIGFyZSBpbmNsdWRlZFxuICAgKiAyLiBleHJ1bGVzIGFyZSBleGNsdWRlZFxuICAgKiAzLiByZGF0ZXMgYXJlIGluY2x1ZGVkXG4gICAqIDQuIGV4ZGF0ZXMgYXJlIGV4Y2x1ZGVkXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy5kYXRhID0gb3B0aW9ucy5kYXRhO1xuICB9XG4gIG9jY3VycmVuY2VzKGFyZ3MgPSB7fSkge1xuICAgIHJldHVybiBuZXcgT2NjdXJyZW5jZUl0ZXJhdG9yKHRoaXMsIHRoaXMubm9ybWFsaXplT2NjdXJyZW5jZXNBcmdzKGFyZ3MpKTtcbiAgfVxuICBjb2xsZWN0aW9ucyhhcmdzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IENvbGxlY3Rpb25JdGVyYXRvcih0aGlzLCB0aGlzLm5vcm1hbGl6ZUNvbGxlY3Rpb25zQXJncyhhcmdzKSk7XG4gIH1cbiAgKl9ydW4oYXJncyA9IHt9KSB7XG4gICAgY29uc3QgY291bnQgPSBhcmdzLnRha2U7XG4gICAgZGVsZXRlIGFyZ3MudGFrZTtcbiAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMub2NjdXJyZW5jZVN0cmVhbS5fcnVuKGFyZ3MpO1xuICAgIGxldCBkYXRlID0gaXRlcmF0b3IubmV4dCgpLnZhbHVlO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGRhdGUgJiYgKGNvdW50ID09PSB1bmRlZmluZWQgfHwgY291bnQgPiBpbmRleCkpIHtcbiAgICAgIGRhdGUgPSBkYXRlLmFkZCh0aGlzLCAnZ2VuZXJhdG9yJyk7XG4gICAgICBjb25zdCB5aWVsZEFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZVJ1bk91dHB1dChkYXRlKTtcbiAgICAgIGRhdGUgPSBpdGVyYXRvci5uZXh0KHlpZWxkQXJncykudmFsdWU7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogQW4gb3BlcmF0b3IgZnVuY3Rpb24gd2hpY2ggYWNjZXB0cyBhIHNwcmVhZCBvZiBvY2N1cnJlbmNlIGdlbmVyYXRvcnNcbiAqIGFuZCByZW1vdmVzIHRoZWlyIG9jY3VycmVuY2VzIGZyb20gdGhlIG91dHB1dC5cbiAqXG4gKiBAcGFyYW0gc3RyZWFtcyBhIHNwcmVhZCBvZiBvY2N1cnJlbmNlIGdlbmVyYXRvcnNcbiAqL1xuZnVuY3Rpb24gc3VidHJhY3QoLi4uc3RyZWFtcykge1xuICByZXR1cm4gb3B0aW9ucyA9PiBuZXcgU3VidHJhY3RPcGVyYXRvcihzdHJlYW1zLCBvcHRpb25zKTtcbn1cbmNsYXNzIFN1YnRyYWN0T3BlcmF0b3IgZXh0ZW5kcyBPcGVyYXRvciB7XG4gIC8qKiBOb3QgYWN0dWFsbHkgdXNlZCBidXQgbmVjZXNzYXJ5IGZvciBJUnVubmFibGUgaW50ZXJmYWNlICovXG4gIHNldChfLCB2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgU3VidHJhY3RPcGVyYXRvcihcbiAgICAgIHRoaXMuc3RyZWFtcy5tYXAoc3RyZWFtID0+IHN0cmVhbS5zZXQoJ3RpbWV6b25lJywgdmFsdWUpKSxcbiAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcpLCB7XG4gICAgICAgIGJhc2U6IHRoaXMuY29uZmlnLmJhc2UgJiYgdGhpcy5jb25maWcuYmFzZS5zZXQoJ3RpbWV6b25lJywgdmFsdWUpLFxuICAgICAgICB0aW1lem9uZTogdmFsdWUsXG4gICAgICB9KSxcbiAgICApO1xuICB9XG4gICpfcnVuKGFyZ3MgPSB7fSkge1xuICAgIGlmICghdGhpcy5jb25maWcuYmFzZSkgcmV0dXJuO1xuICAgIGNvbnN0IGluY2x1c2lvbiA9IG5ldyBJdGVyYWJsZVdyYXBwZXIodGhpcy5jb25maWcuYmFzZSwgYXJncyk7XG4gICAgY29uc3QgZXhjbHVzaW9uID0gbmV3IEl0ZXJhYmxlV3JhcHBlcihcbiAgICAgIG5ldyBBZGRPcGVyYXRvcih0aGlzLnN0cmVhbXMsIHtcbiAgICAgICAgdGltZXpvbmU6IHRoaXMuY29uZmlnLnRpbWV6b25lLFxuICAgICAgfSksXG4gICAgICBhcmdzLFxuICAgICk7XG4gICAgY3ljbGVTdHJlYW1zKGluY2x1c2lvbiwgZXhjbHVzaW9uLCBhcmdzKTtcbiAgICB3aGlsZSAoIWluY2x1c2lvbi5kb25lKSB7XG4gICAgICBjb25zdCB5aWVsZEFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZVJ1bk91dHB1dChpbmNsdXNpb24udmFsdWUpO1xuICAgICAgaWYgKCEoeWllbGRBcmdzICYmIHlpZWxkQXJncy5za2lwVG9EYXRlKSkge1xuICAgICAgICBpbmNsdXNpb24ubmV4dCgpO1xuICAgICAgfVxuICAgICAgY3ljbGVTdHJlYW1zKGluY2x1c2lvbiwgZXhjbHVzaW9uLCBhcmdzLCB5aWVsZEFyZ3MpO1xuICAgIH1cbiAgfVxuICBjYWxjdWxhdGVJc0luZmluaXRlKCkge1xuICAgIHJldHVybiAhISh0aGlzLmNvbmZpZy5iYXNlICYmIHRoaXMuY29uZmlnLmJhc2UuaXNJbmZpbml0ZSk7XG4gIH1cbiAgY2FsY3VsYXRlSGFzRHVyYXRpb24oKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuY29uZmlnLmJhc2UgJiYgdGhpcy5jb25maWcuYmFzZS5oYXNEdXJhdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGN5Y2xlU3RyZWFtcyhpbmNsdXNpb24sIGV4Y2x1c2lvbiwgb3B0aW9ucyA9IHt9LCB5aWVsZEFyZ3MgPSB7fSkge1xuICBwcm9jZXNzWWllbGRBcmdzKFtpbmNsdXNpb24sIGV4Y2x1c2lvbl0sIG9wdGlvbnMsIHlpZWxkQXJncyk7XG4gIGl0ZXJhdGVFeGNsdXNpb24oaW5jbHVzaW9uLCBleGNsdXNpb24sIG9wdGlvbnMpO1xuICB3aGlsZSAoIWluY2x1c2lvbi5kb25lICYmICFleGNsdXNpb24uZG9uZSAmJiBpbmNsdXNpb24udmFsdWUuaXNFcXVhbChleGNsdXNpb24udmFsdWUpKSB7XG4gICAgaW5jbHVzaW9uLm5leHQoKTtcbiAgICBpdGVyYXRlRXhjbHVzaW9uKGluY2x1c2lvbiwgZXhjbHVzaW9uLCBvcHRpb25zKTtcbiAgfVxufVxuZnVuY3Rpb24gaXRlcmF0ZUV4Y2x1c2lvbihpbmNsdXNpb24sIGV4Y2x1c2lvbiwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICB3aGlsZSAoIWV4Y2x1c2lvbi5kb25lICYmICFpbmNsdXNpb24uZG9uZSAmJiBleGNsdXNpb24udmFsdWUuaXNBZnRlcihpbmNsdXNpb24udmFsdWUpKSB7XG4gICAgICBleGNsdXNpb24ubmV4dCgpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgd2hpbGUgKCFleGNsdXNpb24uZG9uZSAmJiAhaW5jbHVzaW9uLmRvbmUgJiYgZXhjbHVzaW9uLnZhbHVlLmlzQmVmb3JlKGluY2x1c2lvbi52YWx1ZSkpIHtcbiAgICBleGNsdXNpb24ubmV4dCgpO1xuICB9XG59XG5cbi8qKlxuICogQW4gb3BlcmF0b3IgZnVuY3Rpb24gd2hpY2ggZGVkdXBsaWNhdGVzIGFuIG9jY3VycmVuY2Ugc3RyZWFtLiBPY2N1cnJlbmNlXG4gKiBgZHVyYXRpb25gIGlzIGN1cnJlbnRseSBpZ25vcmVkLlxuICovXG5mdW5jdGlvbiB1bmlxdWUoKSB7XG4gIHJldHVybiBvcHRpb25zID0+IG5ldyBVbmlxdWVPcGVyYXRvcihbXSwgb3B0aW9ucyk7XG59XG5jbGFzcyBVbmlxdWVPcGVyYXRvciBleHRlbmRzIE9wZXJhdG9yIHtcbiAgLyoqIE5vdCBhY3R1YWxseSB1c2VkIGJ1dCBuZWNlc3NhcnkgZm9yIElSdW5uYWJsZSBpbnRlcmZhY2UgKi9cbiAgc2V0KF8sIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBVbmlxdWVPcGVyYXRvcihcbiAgICAgIFtdLFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZyksIHtcbiAgICAgICAgYmFzZTogdGhpcy5jb25maWcuYmFzZSAmJiB0aGlzLmNvbmZpZy5iYXNlLnNldCgndGltZXpvbmUnLCB2YWx1ZSksXG4gICAgICAgIHRpbWV6b25lOiB2YWx1ZSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbiAgKl9ydW4oYXJncyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5iYXNlKSByZXR1cm47XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IEl0ZXJhYmxlV3JhcHBlcih0aGlzLmNvbmZpZy5iYXNlLCBhcmdzKTtcbiAgICB3aGlsZSAoIXN0cmVhbS5kb25lKSB7XG4gICAgICBjb25zdCB5aWVsZEFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZVJ1bk91dHB1dChzdHJlYW0udmFsdWUpO1xuICAgICAgY29uc3QgbGFzdFZhbHVlID0gc3RyZWFtLnZhbHVlO1xuICAgICAgLy8gaXRlcmF0ZSB0aGUgY3VycmVudCBzdHJlYW1cbiAgICAgIHN0cmVhbS5uZXh0KHlpZWxkQXJncyk7XG4gICAgICB3aGlsZSAoXG4gICAgICAgICEoeWllbGRBcmdzICYmIHlpZWxkQXJncy5za2lwVG9EYXRlKSAmJlxuICAgICAgICAhc3RyZWFtLmRvbmUgJiZcbiAgICAgICAgc3RyZWFtLnZhbHVlLmlzRXF1YWwobGFzdFZhbHVlKVxuICAgICAgKSB7XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGN1bGF0ZUlzSW5maW5pdGUoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuY29uZmlnLmJhc2UgJiYgdGhpcy5jb25maWcuYmFzZS5pc0luZmluaXRlKTtcbiAgfVxuICBjYWxjdWxhdGVIYXNEdXJhdGlvbigpIHtcbiAgICByZXR1cm4gISEodGhpcy5jb25maWcuYmFzZSAmJiB0aGlzLmNvbmZpZy5iYXNlLmhhc0R1cmF0aW9uKTtcbiAgfVxufVxuXG5jbGFzcyBTY2hlZHVsZSBleHRlbmRzIFNjaGVkdWxlQmFzZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgU2NoZWR1bGUgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBvcHRpb25zLlxuICAgKlxuICAgKiBUaGUgb3JkZXIgb2YgcHJlY2lkZW5jZSBmb3IgcnJ1bGVzLCByZGF0ZXMsIGV4cnVsZXMsIGFuZCBleGRhdGVzIGlzOlxuICAgKlxuICAgKiAxLiBycnVsZXMgYXJlIGluY2x1ZGVkXG4gICAqIDIuIGV4cnVsZXMgYXJlIGV4Y2x1ZGVkXG4gICAqIDMuIHJkYXRlcyBhcmUgaW5jbHVkZWRcbiAgICogNC4gZXhkYXRlcyBhcmUgZXhjbHVkZWRcbiAgICpcbiAgICogIyMjIE9wdGlvbnNcbiAgICpcbiAgICogLSAqKnRpbWV6b25lKio6IFRoZSB0aW1lem9uZSB0aGF0IHlpZWxkZWQgb2NjdXJyZW5jZXMgc2hvdWxkIGJlICpkaXNwbGF5ZWQqIGluLlxuICAgKiAgIE5vdGUsIHRoaXMgb25lIGFmZmVjdHMgdGhlICpkaXNwbGF5ZWQqIHRpbWV6b25lIG9mIHlpZWxkZWQgb2NjdXJyZW5jZXMuXG4gICAqICAgRm9yIHJ1bGVzLCBvY2N1cnJlbmNlcyBhcmUgZmlyc3QgZm91bmQgdXNpbmcgdGhlIHVubW9kaWZpZWQgcnVsZVxuICAgKiAgIGNvbmZpZyAoaW5jbHVkaW5nIHdoYXRldmVyIHRpbWV6b25lIHRoZSBgc3RhcnRgIGRhdGV0aW1lIGlzIGRlZmluZWRcbiAgICogICBpbiksIGFuZCB0aGVuIGNvbnZlcnRlZCB0byB0aGUgdGltZXpvbmUgc3BlY2lmaWVkIGhlcmUgYmVmb3JlIGJlaW5nXG4gICAqICAgeWllbGRlZC4gQnkgZGVmYXVsdCwgdGhlIHRpbWV6b25lIGlzICpsb2NhbCogdGltZSAoYG51bGxgKS4gU28gaWYgeW91IGRvbid0XG4gICAqICAgd2FudCB5b3VyIHJ1bGVzIHRvIGJlIGRpc3BsYXllZCBpbiBsb2NhbCB0aW1lLCB5b3UgbXVzdCBzdXBwbHkgYVxuICAgKiAgIHRpbWV6b25lIGFyZ3VtZW50LlxuICAgKiAtICoqZGF0YSoqOiBhcmJpdHJhcnkgZGF0YSB5b3UgY2FuIGFzc29jaWF0ZSB3aXRoIHRoaXMgU2NoZWR1bGUuIFRoaXNcbiAgICogICBpcyB0aGUgb25seSBtdXRhYmxlIHByb3BlcnR5IG9mIGBTY2hlZHVsZWAgb2JqZWN0cy5cbiAgICogLSAqKm1heER1cmF0aW9uKio6IGN1cnJlbnRseSB1bnVzZWQuXG4gICAqIC0gKipycnVsZXMqKjogcnVsZXMgc3BlY2lmeWluZyB3aGVuIG9jY3VycmVuY2VzIGhhcHBlbi4gU2VlIHRoZSBcIlJ1bGUgQ29uZmlnXCJcbiAgICogICBzZWN0aW9uIGJlbG93LlxuICAgKiAtICoqcmRhdGVzKio6IGluZGl2aWR1YWwgZGF0ZXMgdGhhdCBzaG91bGQgYmUgX2luY2x1ZGVkXyBpbiB0aGUgc2NoZWR1bGUuXG4gICAqIC0gKipleGRhdGVzKio6IGluZGl2aWR1YWwgZGF0ZXMgdGhhdCBzaG91bGQgYmUgX2V4Y2x1ZGVkXyBmcm9tIHRoZSBzY2hlZHVsZS5cbiAgICogLSAqKmV4cnVsZXMqKjogcnVsZXMgc3BlY2lmeWluZyB3aGVuIG9jY3VycmVuY2VzIHNob3VsZG4ndCBoYXBwZW4uIFNlZSB0aGVcbiAgICogICBcIlJ1bGUgQ29uZmlnXCIgc2VjdGlvbiBiZWxvdy5cbiAgICpcbiAgICogIyMjIFJ1bGUgQ29uZmlnXG4gICAqXG4gICAqIC0gIyMjIyBmcmVxdWVuY3lcbiAgICpcbiAgICogICBUaGUgZnJlcXVlbmN5IHJ1bGUgcGFydCBpZGVudGlmaWVzIHRoZSB0eXBlIG9mIHJlY3VycmVuY2UgcnVsZS4gVmFsaWQgdmFsdWVzXG4gICAqICAgaW5jbHVkZSBgXCJTRUNPTkRMWVwiYCwgYFwiTUlOVVRFTFlcImAsIGBcIkhPVVJMWVwiYCwgYFwiREFJTFlcImAsIGBcIldFRUtMWVwiYCxcbiAgICogICBgXCJNT05USExZXCJgLCBvciBgXCJZRUFSTFlcImAuXG4gICAqXG4gICAqIC0gIyMjIyBzdGFydFxuICAgKlxuICAgKiAgIFRoZSBzdGFydCBvZiB0aGUgcnVsZSAobm90IG5lY2Vzc2FyaWx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlKS5cbiAgICogICBFaXRoZXIgYSBgRGF0ZUFkYXB0ZXJgIGluc3RhbmNlLCBkYXRlIG9iamVjdCwgb3IgYERhdGVUaW1lYCBvYmplY3QuXG4gICAqICAgVGhlIHR5cGUgb2YgZGF0ZSBvYmplY3QgZGVwZW5kcyBvbiB0aGUgYERhdGVBZGFwdGVyYCBjbGFzcyB1c2VkIGZvciB0aGlzXG4gICAqICAgYFJ1bGVgLlxuICAgKlxuICAgKiAtICMjIyMgZW5kP1xuICAgKlxuICAgKiAgIFRoZSBlbmQgb2YgdGhlIHJ1bGUgKG5vdCBuZWNlc3NhcmlseSB0aGUgbGFzdCBvY2N1cnJlbmNlKS5cbiAgICogICBFaXRoZXIgYSBgRGF0ZUFkYXB0ZXJgIGluc3RhbmNlLCBkYXRlIG9iamVjdCwgb3IgYERhdGVUaW1lYCBvYmplY3QuXG4gICAqICAgVGhlIHR5cGUgb2YgZGF0ZSBvYmplY3QgZGVwZW5kcyBvbiB0aGUgYERhdGVBZGFwdGVyYCBjbGFzcyB1c2VkIGZvciB0aGlzXG4gICAqICAgYFJ1bGVgLlxuICAgKlxuICAgKiAtICMjIyMgZHVyYXRpb24/XG4gICAqXG4gICAqICAgQSBsZW5ndGggb2YgdGltZSBleHByZXNzZWQgaW4gbWlsbGlzZWNvbmRzLlxuICAgKlxuICAgKiAtICMjIyMgaW50ZXJ2YWw/XG4gICAqXG4gICAqICAgVGhlIGludGVydmFsIHJ1bGUgcGFydCBjb250YWlucyBhIHBvc2l0aXZlIGludGVnZXIgcmVwcmVzZW50aW5nIGF0XG4gICAqICAgd2hpY2ggaW50ZXJ2YWxzIHRoZSByZWN1cnJlbmNlIHJ1bGUgcmVwZWF0cy4gVGhlIGRlZmF1bHQgdmFsdWUgaXNcbiAgICogICBgMWAsIG1lYW5pbmcgZXZlcnkgc2Vjb25kIGZvciBhIFNFQ09ORExZIHJ1bGUsIGV2ZXJ5IG1pbnV0ZSBmb3IgYVxuICAgKiAgIE1JTlVURUxZIHJ1bGUsIGV2ZXJ5IGhvdXIgZm9yIGFuIEhPVVJMWSBydWxlLCBldmVyeSBkYXkgZm9yIGFcbiAgICogICBEQUlMWSBydWxlLCBldmVyeSB3ZWVrIGZvciBhIFdFRUtMWSBydWxlLCBldmVyeSBtb250aCBmb3IgYVxuICAgKiAgIE1PTlRITFkgcnVsZSwgYW5kIGV2ZXJ5IHllYXIgZm9yIGEgWUVBUkxZIHJ1bGUuIEZvciBleGFtcGxlLFxuICAgKiAgIHdpdGhpbiBhIERBSUxZIHJ1bGUsIGEgdmFsdWUgb2YgYDhgIG1lYW5zIGV2ZXJ5IGVpZ2h0IGRheXMuXG4gICAqXG4gICAqIC0gIyMjIyBjb3VudD9cbiAgICpcbiAgICogICBUaGUgY291bnQgcnVsZSBwYXJ0IGRlZmluZXMgdGhlIG51bWJlciBvZiBvY2N1cnJlbmNlcyBhdCB3aGljaCB0b1xuICAgKiAgIHJhbmdlLWJvdW5kIHRoZSByZWN1cnJlbmNlLiBgY291bnRgIGFuZCBgZW5kYCBhcmUgYm90aCB0d28gZGlmZmVyZW50XG4gICAqICAgd2F5cyBvZiBzcGVjaWZ5aW5nIGhvdyBhIHJlY3VycmVuY2UgY29tcGxldGVzLlxuICAgKlxuICAgKiAtICMjIyMgd2Vla1N0YXJ0P1xuICAgKlxuICAgKiAgIFRoZSB3ZWVrU3RhcnQgcnVsZSBwYXJ0IHNwZWNpZmllcyB0aGUgZGF5IG9uIHdoaWNoIHRoZSB3b3Jrd2VlayBzdGFydHMuXG4gICAqICAgVmFsaWQgdmFsdWVzIGFyZSBgXCJNT1wiYCwgYFwiVFVcImAsIGBcIldFXCJgLCBgXCJUSFwiYCwgYFwiRlJcImAsIGBcIlNBXCJgLCBhbmQgYFwiU1VcImAuXG4gICAqICAgVGhpcyBpcyBzaWduaWZpY2FudCB3aGVuIGEgV0VFS0xZIHJ1bGUgaGFzIGFuIGludGVydmFsIGdyZWF0ZXIgdGhhbiAxLFxuICAgKiAgIGFuZCBhIGBieURheU9mV2Vla2AgcnVsZSBwYXJ0IGlzIHNwZWNpZmllZC4gVGhlXG4gICAqICAgZGVmYXVsdCB2YWx1ZSBpcyBgXCJNT1wiYC5cbiAgICpcbiAgICogLSAjIyMjIGJ5U2Vjb25kT2ZNaW51dGU/XG4gICAqXG4gICAqICAgVGhlIGJ5U2Vjb25kT2ZNaW51dGUgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2Ygc2Vjb25kc1xuICAgKiAgIHdpdGhpbiBhIG1pbnV0ZS4gVmFsaWQgdmFsdWVzIGFyZSAwIHRvIDYwLlxuICAgKlxuICAgKiAtICMjIyMgYnlNaW51dGVPZkhvdXI/XG4gICAqXG4gICAqICAgVGhlIGJ5TWludXRlT2ZIb3VyIHJ1bGUgcGFydCBleHBlY3RzIGFuIGFycmF5IG9mIG1pbnV0ZXMgd2l0aGluIGFuIGhvdXIuXG4gICAqICAgVmFsaWQgdmFsdWVzIGFyZSAwIHRvIDU5LlxuICAgKlxuICAgKiAtICMjIyMgYnlIb3VyT2ZEYXk/XG4gICAqXG4gICAqICAgVGhlIGJ5SG91ck9mRGF5IHJ1bGUgcGFydCBleHBlY3RzIGFuIGFycmF5IG9mIGhvdXJzIG9mIHRoZSBkYXkuXG4gICAqICAgVmFsaWQgdmFsdWVzIGFyZSAwIHRvIDIzLlxuICAgKlxuICAgKiAtICMjIyMgYnlEYXlPZldlZWs/XG4gICAqXG4gICAqICAgKm5vdGU6IHRoZSBieURheU9mV2VlayBydWxlIHBhcnQgaXMga2luZGEgY29tcGxleC4gQmxhbWUgdGhlIElDQUwgc3BlYy4qXG4gICAqXG4gICAqICAgVGhlIGJ5RGF5T2ZXZWVrIHJ1bGUgcGFydCBleHBlY3RzIGFuIGFycmF5LiBFYWNoIGFycmF5IGVudHJ5IGNhblxuICAgKiAgIGJlIGEgZGF5IG9mIHRoZSB3ZWVrIChgXCJTVVwiYCwgYFwiTU9cImAgLCBgXCJUVVwiYCwgYFwiV0VcImAsIGBcIlRIXCJgLFxuICAgKiAgIGBcIkZSXCJgLCBgXCJTQVwiYCkuIElmIHRoZSBydWxlJ3MgYGZyZXF1ZW5jeWAgaXMgZWl0aGVyIE1PTlRITFkgb3IgWUVBUkxZLFxuICAgKiAgIEFueSBlbnRyeSBjYW4gYWxzbyBiZSBhIHR1cGxlIHdoZXJlIHRoZSBmaXJzdCB2YWx1ZSBvZiB0aGUgdHVwbGUgaXMgYVxuICAgKiAgIGRheSBvZiB0aGUgd2VlayBhbmQgdGhlIHNlY29uZCB2YWx1ZSBpcyBhbiBwb3NpdGl2ZS9uZWdhdGl2ZSBpbnRlZ2VyXG4gICAqICAgKGUuZy4gYFtcIlNVXCIsIDFdYCkuIEluIHRoaXMgY2FzZSwgdGhlIG51bWJlciBpbmRpY2F0ZXMgdGhlIG50aCBvY2N1cnJlbmNlIG9mXG4gICAqICAgdGhlIHNwZWNpZmllZCBkYXkgd2l0aGluIHRoZSBNT05USExZIG9yIFlFQVJMWSBydWxlLlxuICAgKlxuICAgKiAgIFRoZSBiZWhhdmlvciBvZiBieURheU9mV2VlayBjaGFuZ2VzIGRlcGVuZGluZyBvbiB0aGUgYGZyZXF1ZW5jeWBcbiAgICogICBvZiB0aGUgcnVsZS5cbiAgICpcbiAgICogICBXaXRoaW4gYSBNT05USExZIHJ1bGUsIGBbXCJNT1wiLCAxXWAgcmVwcmVzZW50cyB0aGUgZmlyc3QgTW9uZGF5XG4gICAqICAgd2l0aGluIHRoZSBtb250aCwgd2hlcmVhcyBgW1wiTU9cIiwgLTFdYCByZXByZXNlbnRzIHRoZSBsYXN0IE1vbmRheVxuICAgKiAgIG9mIHRoZSBtb250aC5cbiAgICpcbiAgICogICBXaXRoaW4gYSBZRUFSTFkgcnVsZSwgdGhlIG51bWVyaWMgdmFsdWUgaW4gYSBieURheU9mV2VlayB0dXBsZSBlbnRyeVxuICAgKiAgIGNvcnJlc3BvbmRzIHRvIGFuIG9mZnNldCB3aXRoaW4gdGhlIG1vbnRoIHdoZW4gdGhlIGJ5TW9udGhPZlllYXIgcnVsZSBwYXJ0IGlzXG4gICAqICAgcHJlc2VudCwgYW5kIGNvcnJlc3BvbmRzIHRvIGFuIG9mZnNldCB3aXRoaW4gdGhlIHllYXIgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiAgIFJlZ2FyZGxlc3Mgb2YgcnVsZSBgZnJlcXVlbmN5YCwgaWYgYSBieURheU9mV2VlayBlbnRyeSBpcyBhIHN0cmluZ1xuICAgKiAgIChyYXRoZXIgdGhhbiBhIHR1cGxlKSwgaXQgbWVhbnMgXCJhbGwgb2YgdGhlc2UgZGF5c1wiIHdpdGhpbiB0aGUgc3BlY2lmaWVkXG4gICAqICAgZnJlcXVlbmN5IChlLmcuIHdpdGhpbiBhIE1PTlRITFkgcnVsZSwgYFwiTU9cImAgcmVwcmVzZW50cyBhbGwgTW9uZGF5cyB3aXRoaW5cbiAgICogICB0aGUgbW9udGgpLlxuICAgKlxuICAgKiAtICMjIyMgYnlEYXlPZk1vbnRoP1xuICAgKlxuICAgKiAgIFRoZSBieURheU9mTW9udGggcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2YgZGF5c1xuICAgKiAgIG9mIHRoZSBtb250aC4gVmFsaWQgdmFsdWVzIGFyZSAxIHRvIDMxIG9yIC0zMSB0byAtMS5cbiAgICpcbiAgICogICBGb3IgZXhhbXBsZSwgLTEwIHJlcHJlc2VudHMgdGhlIHRlbnRoIHRvIHRoZSBsYXN0IGRheSBvZiB0aGUgbW9udGguXG4gICAqICAgVGhlIGJ5RGF5T2ZNb250aCBydWxlIHBhcnQgKm11c3Qgbm90KiBiZSBzcGVjaWZpZWQgd2hlbiB0aGUgcnVsZSdzXG4gICAqICAgYGZyZXF1ZW5jeWAgaXMgc2V0IHRvIFdFRUtMWS5cbiAgICpcbiAgICogLSAjIyMjIGJ5TW9udGhPZlllYXI/XG4gICAqXG4gICAqICAgVGhlIGJ5TW9udGhPZlllYXIgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2YgbW9udGhzXG4gICAqICAgb2YgdGhlIHllYXIuIFZhbGlkIHZhbHVlcyBhcmUgMSB0byAxMi5cbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMucnJ1bGVzID0gW107XG4gICAgdGhpcy5leHJ1bGVzID0gW107XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIFsncnJ1bGVzJywgJ2V4cnVsZXMnXSkge1xuICAgICAgY29uc3QgYXJnID0gb3B0aW9uc1twcm9wXTtcbiAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgdGhpc1twcm9wXSA9IGFyZy5tYXAocnVsZUFyZ3MgPT4ge1xuICAgICAgICAgIGlmIChydWxlQXJncyBpbnN0YW5jZW9mIFJ1bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBydWxlQXJncy5zZXQoJ3RpbWV6b25lJywgdGhpcy50aW1lem9uZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUnVsZShydWxlQXJncywge1xuICAgICAgICAgICAgICB0aW1lem9uZTogdGhpcy50aW1lem9uZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBbJ3JkYXRlcycsICdleGRhdGVzJ10pIHtcbiAgICAgIGNvbnN0IGFyZyA9IG9wdGlvbnNbcHJvcF07XG4gICAgICBpZiAoYXJnKSB7XG4gICAgICAgIHRoaXNbcHJvcF0gPVxuICAgICAgICAgIGFyZyBpbnN0YW5jZW9mIERhdGVzXG4gICAgICAgICAgICA/IGFyZy5zZXQoJ3RpbWV6b25lJywgdGhpcy50aW1lem9uZSlcbiAgICAgICAgICAgIDogbmV3IERhdGVzKHtcbiAgICAgICAgICAgICAgICBkYXRlczogYXJnLFxuICAgICAgICAgICAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbcHJvcF0gPSBuZXcgRGF0ZXMoe1xuICAgICAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5oYXNEdXJhdGlvbiA9XG4gICAgICB0aGlzLnJydWxlcy5ldmVyeShydWxlID0+IHJ1bGUuaGFzRHVyYXRpb24pICYmXG4gICAgICB0aGlzLmV4cnVsZXMuZXZlcnkocnVsZSA9PiBydWxlLmhhc0R1cmF0aW9uKSAmJlxuICAgICAgdGhpcy5yZGF0ZXMuaGFzRHVyYXRpb24gJiZcbiAgICAgIHRoaXMuZXhkYXRlcy5oYXNEdXJhdGlvbjtcbiAgICB0aGlzLmlzSW5maW5pdGUgPSB0aGlzLnJydWxlcy5zb21lKHJ1bGUgPT4gcnVsZS5pc0luZmluaXRlKTtcbiAgICB0aGlzLm9jY3VycmVuY2VTdHJlYW0gPSBbXG4gICAgICBhZGQoLi4udGhpcy5ycnVsZXMpLFxuICAgICAgc3VidHJhY3QoLi4udGhpcy5leHJ1bGVzKSxcbiAgICAgIGFkZCh0aGlzLnJkYXRlcyksXG4gICAgICBzdWJ0cmFjdCh0aGlzLmV4ZGF0ZXMpLFxuICAgICAgdW5pcXVlKCksXG4gICAgXS5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IGN1cnIoeyBiYXNlOiBwcmV2LCB0aW1lem9uZTogdGhpcy50aW1lem9uZSB9KSwgdW5kZWZpbmVkKTtcbiAgfVxuICBhZGQocHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCBycnVsZXMgPSB0aGlzLnJydWxlcy5zbGljZSgpO1xuICAgIGNvbnN0IGV4cnVsZXMgPSB0aGlzLmV4cnVsZXMuc2xpY2UoKTtcbiAgICBsZXQgcmRhdGVzID0gdGhpcy5yZGF0ZXM7XG4gICAgbGV0IGV4ZGF0ZXMgPSB0aGlzLmV4ZGF0ZXM7XG4gICAgc3dpdGNoIChwcm9wKSB7XG4gICAgICBjYXNlICdycnVsZSc6XG4gICAgICAgIHJydWxlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdleHJ1bGUnOlxuICAgICAgICBleHJ1bGVzLnB1c2godmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JkYXRlJzpcbiAgICAgICAgcmRhdGVzID0gdGhpcy5yZGF0ZXMuYWRkKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdleGRhdGUnOlxuICAgICAgICBleGRhdGVzID0gdGhpcy5leGRhdGVzLmFkZCh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNjaGVkdWxlKHtcbiAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgcnJ1bGVzLFxuICAgICAgZXhydWxlcyxcbiAgICAgIHJkYXRlcyxcbiAgICAgIGV4ZGF0ZXMsXG4gICAgfSk7XG4gIH1cbiAgcmVtb3ZlKHByb3AsIHZhbHVlKSB7XG4gICAgbGV0IHJydWxlcyA9IHRoaXMucnJ1bGVzO1xuICAgIGxldCBleHJ1bGVzID0gdGhpcy5leHJ1bGVzO1xuICAgIGxldCByZGF0ZXMgPSB0aGlzLnJkYXRlcztcbiAgICBsZXQgZXhkYXRlcyA9IHRoaXMuZXhkYXRlcztcbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ3JydWxlJzpcbiAgICAgICAgcnJ1bGVzID0gcnJ1bGVzLmZpbHRlcihydWxlID0+IHJ1bGUgIT09IHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdleHJ1bGUnOlxuICAgICAgICBleHJ1bGVzID0gZXhydWxlcy5maWx0ZXIocnVsZSA9PiBydWxlICE9PSB2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmRhdGUnOlxuICAgICAgICByZGF0ZXMgPSB0aGlzLnJkYXRlcy5yZW1vdmUodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2V4ZGF0ZSc6XG4gICAgICAgIGV4ZGF0ZXMgPSB0aGlzLmV4ZGF0ZXMucmVtb3ZlKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2NoZWR1bGUoe1xuICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICBycnVsZXMsXG4gICAgICBleHJ1bGVzLFxuICAgICAgcmRhdGVzLFxuICAgICAgZXhkYXRlcyxcbiAgICB9KTtcbiAgfVxuICBzZXQocHJvcCwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCB0aW1lem9uZSA9IHRoaXMudGltZXpvbmU7XG4gICAgbGV0IHJydWxlcyA9IHRoaXMucnJ1bGVzO1xuICAgIGxldCBleHJ1bGVzID0gdGhpcy5leHJ1bGVzO1xuICAgIGxldCByZGF0ZXMgPSB0aGlzLnJkYXRlcztcbiAgICBsZXQgZXhkYXRlcyA9IHRoaXMuZXhkYXRlcztcbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ3RpbWV6b25lJzpcbiAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzLnRpbWV6b25lICYmICFvcHRpb25zLmtlZXBMb2NhbFRpbWUpIHJldHVybiB0aGlzO1xuICAgICAgICBlbHNlIGlmIChvcHRpb25zLmtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICBycnVsZXMgPSBycnVsZXMubWFwKHJ1bGUgPT4gcnVsZS5zZXQoJ3RpbWV6b25lJywgdmFsdWUsIG9wdGlvbnMpKTtcbiAgICAgICAgICBleHJ1bGVzID0gZXhydWxlcy5tYXAocnVsZSA9PiBydWxlLnNldCgndGltZXpvbmUnLCB2YWx1ZSwgb3B0aW9ucykpO1xuICAgICAgICAgIHJkYXRlcyA9IHJkYXRlcy5zZXQoJ3RpbWV6b25lJywgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICAgIGV4ZGF0ZXMgPSBleGRhdGVzLnNldCgndGltZXpvbmUnLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZXpvbmUgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdycnVsZXMnOlxuICAgICAgICBycnVsZXMgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdleHJ1bGVzJzpcbiAgICAgICAgZXhydWxlcyA9IHZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JkYXRlcyc6XG4gICAgICAgIHJkYXRlcyA9IHZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2V4ZGF0ZXMnOlxuICAgICAgICBleGRhdGVzID0gdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNjaGVkdWxlKHtcbiAgICAgIHRpbWV6b25lLFxuICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgcnJ1bGVzLFxuICAgICAgZXhydWxlcyxcbiAgICAgIHJkYXRlcyxcbiAgICAgIGV4ZGF0ZXMsXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBvcGVyYXRvciBmdW5jdGlvbiwgd2hpY2ggdGFrZXMgYSBzcHJlYWQgb2Ygb2NjdXJyZW5jZSBnZW5lcmF0b3JzIGFuZCBvbmx5XG4gKiByZXR1cm5zIHRoZSBkYXRlcyB3aGljaCBpbnRlcnNlY3QgZXZlcnkgb2NjdXJyZW5jZSBnZW5lcmF0b3IuXG4gKlxuICogQmVjYXVzZSBpdCdzIHBvc3NpYmxlIGZvciBhbGwgdGhlIGdlbmVyYXRvcnMgdG8gbmV2ZXIgaW50ZXJzZWN0LFxuICogYW5kIGJlY2F1c2UgdGhlIGludGVyc2VjdGlvbiBvcGVyYXRvciBjYW4ndCBkZXRlY3QgdGhpcyBsYWNrIG9mIGludGVyc2VjdGlvbixcbiAqIHlvdSBtdXN0IGNhbGwgYGludGVyc2VjdGlvbigpYCB3aXRoIGEgYHttYXhGYWlsZWRJdGVyYXRpb25zOiBudW1iZXJ9YCBhcmd1bWVudC5cbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBnbG9iYWxseSBzZXQgYFJTY2hlZHVsZUNvbmZpZy5kZWZhdWx0TWF4RmFpbGVkSXRlcmF0aW9uc2AuXG4gKiBXaXRob3V0IGZ1cnRoZXIgaW5mb3JtYXRpb24sIEknZCBwcm9iYWJseSBzZXQgYGRlZmF1bHRNYXhGYWlsZWRJdGVyYXRpb25zID0gNTBgLlxuICpcbiAqIFRoZSBgbWF4RmFpbGVkSXRlcmF0aW9uc2AgYXJndW1lbnQgY2FwcyB0aGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdGhlIG9wZXJhdG9yIHdpbGxcbiAqIHJ1biB0aHJvdWdoIHdpdGhvdXQgZmluZGluZyBhIHNpbmdsZSB2YWxpZCBvY2N1cnJlbmNlLiBJZiB0aGlzIG51bWJlciBpcyByZWFjaGVkLCB0aGUgb3BlcmF0b3Igd2lsbFxuICogc3RvcCBpdGVyYXRpbmcgKHByZXZlbnRpbmcgYSBwb3NzaWJsZSBpbmZpbml0ZSBsb29wKS5cbiAqXG4gKiAtIE5vdGU6IGBtYXhGYWlsZWRJdGVyYXRpb25zYCBjYXBzIHRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyB3aGljaFxuICogICAqZmFpbCB0byB0dXJuIHVwIGEgc2luZ2xlIHZhbGlkIG9jY3VycmVuY2UqLiBFdmVyeSB0aW1lIGEgdmFsaWQgb2NjdXJyZW5jZSBpcyByZXR1cm5lZCxcbiAqICAgdGhlIGN1cnJlbnQgaXRlcmF0aW9uIGNvdW50IGlzIHJlc2V0IHRvIDAuXG4gKlxuICovXG5mdW5jdGlvbiBpbnRlcnNlY3Rpb24oYXJncykge1xuICByZXR1cm4gb3B0aW9ucyA9PiBuZXcgSW50ZXJzZWN0aW9uT3BlcmF0b3IoYXJncywgb3B0aW9ucyk7XG59XG5jbGFzcyBJbnRlcnNlY3Rpb25PcGVyYXRvciBleHRlbmRzIE9wZXJhdG9yIHtcbiAgY29uc3RydWN0b3IoYXJncywgY29uZmlnKSB7XG4gICAgc3VwZXIoYXJncy5zdHJlYW1zLCBjb25maWcpO1xuICAgIGlmICh0aGlzLmlzSW5maW5pdGUpIHtcbiAgICAgIHRoaXMubWF4RmFpbGVkSXRlcmF0aW9ucyA9XG4gICAgICAgIGFyZ3MubWF4RmFpbGVkSXRlcmF0aW9ucyB8fCBJbnRlcnNlY3Rpb25PcGVyYXRvci5kZWZhdWx0TWF4RmFpbGVkSXRlcmF0aW9ucztcbiAgICAgIGlmICghdGhpcy5tYXhGYWlsZWRJdGVyYXRpb25zKSB7XG4gICAgICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKFxuICAgICAgICAgICdUaGUgSW50ZXJzZWN0aW9uT3BlcmF0b3IgbXVzdCBiZSBwcm92aWRlZCAnICtcbiAgICAgICAgICAgICdhIGBtYXhGYWlsZWRJdGVyYXRpb25zYCBhcmd1bWVudCB3aGVuIGl0IGlzIGJ1aWx0IGZyb20gc2NoZWR1bGVzIG9mIGluZmluaXRlIGxlbmd0aC4gJyArXG4gICAgICAgICAgICAnVGhpcyBhcmd1bWVudCBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IHRoZSBJbnRlcnNlY3Rpb25PcGVyYXRvciBkb2VzIG5vdCBlbnRlciAnICtcbiAgICAgICAgICAgICdhbiBpbmZpbml0ZSBsb29wIGJlY2F1c2UgdGhlIHVuZGVybHlpbmcgc2NoZWR1bGVzIG5ldmVyIGludGVyc2VjdC4gJyArXG4gICAgICAgICAgICAnSWYgdGhlIGBtYXhGYWlsZWRJdGVyYXRpb25zYCBjb3VudCBpcyByZWFjaGVkIGl0IHdpbGwgYmUgYXNzdW1lZCB0aGF0ICcgK1xuICAgICAgICAgICAgJ2FsbCB2YWxpZCBvY2N1cnJlbmNlcyBoYXZlIGJlZW4gZm91bmQgYW5kIGl0ZXJhdGlvbiB3aWxsIGVuZCB3aXRob3V0IGVycm9yLicgK1xuICAgICAgICAgICAgJ1dpdGhvdXQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiwgXCI1MFwiIGlzIHByb2JhYmx5IGEgZ29vZCAnICtcbiAgICAgICAgICAgICdgbWF4RmFpbGVkSXRlcmF0aW9uc2AgdmFsdWUuICcgK1xuICAgICAgICAgICAgJ0lmIHRoZSBzY2hlZHVsZXMgYXJlIG5vdCBvZiBpbmZpbml0ZSBsZW5ndGgsIGBtYXhGYWlsZWRJdGVyYXRpb25zYCBpcyBpZ25vcmVkLiAnICtcbiAgICAgICAgICAgICdOb3RlIGFsc28gdGhhdCB5b3UgY2FuIHByb3ZpZGUgYSBgZGVmYXVsdE1heEZhaWxlZEl0ZXJhdGlvbnNgIG51bWJlciB2aWEgJyArXG4gICAgICAgICAgICAnSW50ZXJzZWN0aW9uT3BlcmF0b3IuZGVmYXVsdE1heEZhaWxlZEl0ZXJhdGlvbnMuJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc2V0KF8sIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBJbnRlcnNlY3Rpb25PcGVyYXRvcihcbiAgICAgIHtcbiAgICAgICAgbWF4RmFpbGVkSXRlcmF0aW9uczogdGhpcy5tYXhGYWlsZWRJdGVyYXRpb25zLFxuICAgICAgICBzdHJlYW1zOiB0aGlzLnN0cmVhbXMubWFwKHN0cmVhbSA9PiBzdHJlYW0uc2V0KCd0aW1lem9uZScsIHZhbHVlKSksXG4gICAgICB9LFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZyksIHtcbiAgICAgICAgYmFzZTogdGhpcy5jb25maWcuYmFzZSAmJiB0aGlzLmNvbmZpZy5iYXNlLnNldCgndGltZXpvbmUnLCB2YWx1ZSksXG4gICAgICAgIHRpbWV6b25lOiB2YWx1ZSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbiAgKl9ydW4oYXJncyA9IHt9KSB7XG4gICAgY29uc3Qgc3RyZWFtcyA9IHRoaXMuc3RyZWFtcy5tYXAoc3RyZWFtID0+IG5ldyBJdGVyYWJsZVdyYXBwZXIoc3RyZWFtLCBhcmdzKSk7XG4gICAgaWYgKHRoaXMuY29uZmlnLmJhc2UpIHtcbiAgICAgIHN0cmVhbXMucHVzaChuZXcgSXRlcmFibGVXcmFwcGVyKHRoaXMuY29uZmlnLmJhc2UsIGFyZ3MpKTtcbiAgICB9XG4gICAgaWYgKHN0cmVhbXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgaGFzRW5kRGF0ZSA9ICEhKCF0aGlzLmlzSW5maW5pdGUgfHwgYXJncy5yZXZlcnNlIHx8IGFyZ3MuZW5kKTtcbiAgICBpZiAoXG4gICAgICAhY3ljbGVTdHJlYW1zJDEoXG4gICAgICAgIHN0cmVhbXMsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmdzKSwge1xuICAgICAgICAgIGhhc0VuZERhdGUsXG4gICAgICAgICAgaXRlcmF0aW9uOiAwLFxuICAgICAgICAgIG1heEl0ZXJhdGlvbnM6IHRoaXMubWF4RmFpbGVkSXRlcmF0aW9ucyxcbiAgICAgICAgfSksXG4gICAgICApXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzdHJlYW0gPSBzZWxlY3ROZXh0SXRlcmFibGUoc3RyZWFtcywgYXJncyk7XG4gICAgd2hpbGUgKHN0cmVhbSkge1xuICAgICAgY29uc3QgeWllbGRBcmdzID0geWllbGQgdGhpcy5ub3JtYWxpemVSdW5PdXRwdXQoc3RyZWFtLnZhbHVlKTtcbiAgICAgIGNvbnN0IGxhc3RWYWxpZERhdGUgPSBzdHJlYW0udmFsdWU7XG4gICAgICBpZiAoISh5aWVsZEFyZ3MgPT09IG51bGwgfHwgeWllbGRBcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiB5aWVsZEFyZ3Muc2tpcFRvRGF0ZSkpIHtcbiAgICAgICAgLy8gaXRlcmF0ZSB0aGUgY3VycmVudCBzdHJlYW1cbiAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgIWN5Y2xlU3RyZWFtcyQxKFxuICAgICAgICAgIHN0cmVhbXMsXG4gICAgICAgICAgbGFzdFZhbGlkRGF0ZSxcbiAgICAgICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpLCB7XG4gICAgICAgICAgICBoYXNFbmREYXRlLFxuICAgICAgICAgICAgaXRlcmF0aW9uOiAwLFxuICAgICAgICAgICAgbWF4SXRlcmF0aW9uczogdGhpcy5tYXhGYWlsZWRJdGVyYXRpb25zLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHlpZWxkQXJncyxcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFRoZSBjYWxsIHRvIGBjeWNsZVN0cmVhbXMoKWAsIGFib3ZlLCBoYXMgYWxyZWFkeSBjYWxsZWRcbiAgICAgIC8vIHNlbGVjdE5leHRJdGVyYWJsZSB3aXRoIHRoZSBgeWllbGRBcmdzYFxuICAgICAgc3RyZWFtID0gc2VsZWN0TmV4dEl0ZXJhYmxlKHN0cmVhbXMsIGFyZ3MpO1xuICAgIH1cbiAgfVxuICBjYWxjdWxhdGVJc0luZmluaXRlKCkge1xuICAgIC8vIE5vdGU6IEFycmF5I2V2ZXJ5KCkgPT09IHRydWUgd2hlbiBsZW5ndGggPT09IDBcbiAgICBpZiAoIXRoaXMuY29uZmlnLmJhc2UpIHtcbiAgICAgIGlmICh0aGlzLnN0cmVhbXMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW1zLmV2ZXJ5KHN0cmVhbSA9PiBzdHJlYW0uaXNJbmZpbml0ZSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0cmVhbXMubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpcy5jb25maWcuYmFzZS5pc0luZmluaXRlO1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5iYXNlLmlzSW5maW5pdGUgJiYgdGhpcy5zdHJlYW1zLmV2ZXJ5KHN0cmVhbSA9PiBzdHJlYW0uaXNJbmZpbml0ZSk7XG4gIH1cbiAgY2FsY3VsYXRlSGFzRHVyYXRpb24oKSB7XG4gICAgY29uc3Qgc3RyZWFtc0R1cmF0aW9uID0gdGhpcy5zdHJlYW1zLmV2ZXJ5KHN0cmVhbSA9PiBzdHJlYW0uaGFzRHVyYXRpb24pO1xuICAgIGlmICghdGhpcy5jb25maWcuYmFzZSkgcmV0dXJuIHN0cmVhbXNEdXJhdGlvbjtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuYmFzZS5oYXNEdXJhdGlvbiAmJiBzdHJlYW1zRHVyYXRpb247XG4gIH1cbn1cbmZ1bmN0aW9uIGN5Y2xlU3RyZWFtcyQxKHN0cmVhbXMsIGxhc3RWYWxpZERhdGUsIG9wdGlvbnMsIHlpZWxkQXJncykge1xuICBjb25zdCBuZXh0ID0gc2VsZWN0TmV4dEl0ZXJhYmxlKHN0cmVhbXMsIG9wdGlvbnMsIHlpZWxkQXJncyk7XG4gIGlmICghbmV4dCkgcmV0dXJuIGZhbHNlO1xuICBpZiAobGFzdFZhbGlkRGF0ZSAmJiBuZXh0LnZhbHVlLmlzRXF1YWwobGFzdFZhbGlkRGF0ZSkpIHJldHVybiB0cnVlO1xuICBpZiAoc3RyZWFtcy5zb21lKHN0cmVhbSA9PiBzdHJlYW0uZG9uZSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKHN0cmVhbXMuZXZlcnkoc3RyZWFtID0+IHN0cmVhbS52YWx1ZS5pc0VxdWFsKG5leHQudmFsdWUpKSkgcmV0dXJuIHRydWU7XG4gIG9wdGlvbnMuaXRlcmF0aW9uKys7XG4gIGlmIChvcHRpb25zLm1heEl0ZXJhdGlvbnMgJiYgIW9wdGlvbnMuaGFzRW5kRGF0ZSAmJiBvcHRpb25zLml0ZXJhdGlvbiA+IG9wdGlvbnMubWF4SXRlcmF0aW9ucykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBTaW5jZSBub3QgYWxsIG9mIHRoZSBzdHJlYW1zIGFyZSBlcXVhbCwgd2UgZ3JhYiB0aGUgbGFzdCBzdHJlYW0uLi5cbiAgY29uc3QgbGFzdCA9IHNlbGVjdExhc3RJdGVyYWJsZShzdHJlYW1zLCBvcHRpb25zKTtcbiAgLy8gLi4uYW5kIHNraXAgYWxsIHRoZSBvdGhlciBzdHJlYW1zIHNvIHRoZXkgYXJlIGVxdWFsIG9yIHBhc3QgdGhlIGxhc3Qgb25lXG4gIHN0cmVhbXMuZm9yRWFjaChzdHJlYW0gPT4ge1xuICAgIC8vIEJlY2F1c2Ugc3RyZWFtcyBjYW4gaGF2ZSBtdWx0aXBsZSwgaWRlbnRpY2FsIGRhdGVzIGluIGEgcm93LFxuICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gYHNraXBUb0RhdGVgIGlmIHRoZSBwcm92aWRlZCBkYXRlIGlzIGVxdWFsIHRvIHRoZSBjdXJyZW50IGRhdGUuXG4gICAgaWYgKGxhc3QudmFsdWUuaXNFcXVhbChzdHJlYW0udmFsdWUpKSByZXR1cm47XG4gICAgc3RyZWFtLm5leHQoeyBza2lwVG9EYXRlOiBsYXN0LnZhbHVlIH0pO1xuICB9KTtcbiAgLy8gdGhlbiB3ZSByZXBlYXRcbiAgcmV0dXJuIGN5Y2xlU3RyZWFtcyQxKHN0cmVhbXMsIGxhc3RWYWxpZERhdGUsIG9wdGlvbnMpO1xufVxuXG5jbGFzcyBEdXJhdGlvbkl0ZXJhYmxlV3JhcHBlciBleHRlbmRzIEl0ZXJhYmxlV3JhcHBlciB7XG4gIGNvbnN0cnVjdG9yKGdlbmVyYXRvciwgcnVuQXJncykge1xuICAgIHN1cGVyKGdlbmVyYXRvciwgcnVuQXJncyk7XG4gICAgdGhpcy53b3JraW5nVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIHRoaXMubmV4dCgpO1xuICB9XG59XG5jbGFzcyBNZXJnZUR1cmF0aW9uT3BlcmF0b3JFcnJvciBleHRlbmRzIEVycm9yIHt9XG4vKipcbiAqIEFuIG9wZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGFuIG9jY3VycmVuY2Ugc3RyZWFtIHdpdGhcbiAqIGBoYXNEdXJhdGlvbiA9PT0gdHJ1ZWAgYW5kIG1lcmdlcyBvY2N1cnJlbmNlcyB3aGljaCBoYXZlIG92ZXJsYXBwaW5nXG4gKiBzdGFydCBhbmQgZW5kIHRpbWVzLlxuICpcbiAqIEJlY2F1c2UgaXQncyBwb3NzaWJsZSBmb3IgYWxsIHRoZSBvY2N1cnJlbmNlcyBpbiB0aGUgc3RyZWFtIHRvIGhhdmVcbiAqIG92ZXJsYXBwaW5nIHN0YXJ0IGFuZCBlbmQgdGltZXMsIHlvdSBtdXN0IHByb3ZpZGUgYSBgbWF4RHVyYXRpb25gXG4gKiBhcmd1bWVudCB0aGF0IHJlcHJlc2VudHMgdGhlIG1heGltdW0gcG9zc2libGUgZHVyYXRpb24gZm9yIGEgc2luZ2xlXG4gKiBvY2N1cnJlbmNlLiBJZiB0aGlzIGR1cmF0aW9uIGlzIGV4Y2VlZGVkLCBhIGBNZXJnZUR1cmF0aW9uT3BlcmF0b3JFcnJvcmBcbiAqIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIC0gRm9yIHlvdXIgY29udmVuaWVuY2UsIHlvdSBjYW4gZ2xvYmFsbHkgc2V0IGEgZGVmYXVsdFxuICogICBgTWVyZ2VEdXJhdGlvbk9wZXJhdG9yI21heER1cmF0aW9uYCB2aWFcbiAqICAgYFJTY2hlZHVsZUNvbmZpZy5NZXJnZUR1cmF0aW9uT3BlcmF0b3IuZGVmYXVsdE1heER1cmF0aW9uYC5cbiAqXG4gKiBVc2FnZSBleGFtcGxlOlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IE1JTExJU0VDT05EU19JTl9IT1VSID0gMTAwMCAqIDYwICogNjA7XG4gKlxuICogY29uc3QgZGF0ZXMgPSBuZXcgRGF0ZXMoe1xuICogICBkYXRlczogW1xuICogICAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMCwgMTMpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDEgfSksXG4gKiAgICAgbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIobmV3IERhdGUoMjAxMCwgMTAsIDExLCAxMyksIHsgZHVyYXRpb246IE1JTExJU0VDT05EU19JTl9IT1VSICogMiB9KSxcbiAqICAgICBuZXcgU3RhbmRhcmREYXRlQWRhcHRlcihuZXcgRGF0ZSgyMDEwLCAxMCwgMTEsIDE0KSwgeyBkdXJhdGlvbjogTUlMTElTRUNPTkRTX0lOX0hPVVIgKiAyIH0pLFxuICogICAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMiwgMTMpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDEgfSksXG4gKiAgIF0sXG4gKiAgIGRhdGVBZHB0ZXI6IFN0YW5kYXJkRGF0ZUFkYXB0ZXIsXG4gKiB9KS5waXBlKFxuICogICBtZXJnZUR1cmF0aW9uKHtcbiAqICAgICBtYXhEdXJhdGlvbjogTUlMTElTRUNPTkRTX0lOX0hPVVIgKiAyNFxuICogICB9KVxuICogKVxuICpcbiAqIGRhdGVzLm9jY3VycmVuY2VzKCkudG9BcnJheSgpID09PSBbXG4gKiAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMCwgMTMpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDEgfSksXG4gKiAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMSwgMTMpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDMgfSksXG4gKiAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMiwgMTMpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDEgfSksXG4gKiBdXG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEdXJhdGlvbihhcmdzKSB7XG4gIHJldHVybiBvcHRpb25zID0+IG5ldyBNZXJnZUR1cmF0aW9uT3BlcmF0b3IoYXJncywgb3B0aW9ucyk7XG59XG5jbGFzcyBNZXJnZUR1cmF0aW9uT3BlcmF0b3IgZXh0ZW5kcyBPcGVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKGFyZ3MsIGNvbmZpZykge1xuICAgIHN1cGVyKFtdLCBjb25maWcpO1xuICAgIHRoaXMubWF4RHVyYXRpb24gPSBhcmdzLm1heER1cmF0aW9uO1xuICAgIGlmIChjb25maWcuYmFzZSAmJiAhY29uZmlnLmJhc2UuaGFzRHVyYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKFxuICAgICAgICAnQmFzZSBzdHJlYW0gcHJvdmlkZWQgdG8gTWVyZ2VEdXJhdGlvbk9wZXJhdG9yIGRvZXMgbm90IGhhdmUgYW4gYXNzb2NpYXRlZCBkdXJhdGlvbi4gJyArXG4gICAgICAgICAgJ1RoZSBNZXJnZUR1cmF0aW9uT3BlcmF0b3IgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIHN0cmVhbXMgd2hpY2ggaGF2ZSBhIGR1cmF0aW9uLiAnLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLyoqIE5vdCBhY3R1YWxseSB1c2VkIGJ1dCBuZWNlc3NhcnkgZm9yIElSdW5uYWJsZSBpbnRlcmZhY2UgKi9cbiAgc2V0KF8sIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBNZXJnZUR1cmF0aW9uT3BlcmF0b3IoXG4gICAgICB7XG4gICAgICAgIG1heER1cmF0aW9uOiB0aGlzLm1heER1cmF0aW9uLFxuICAgICAgfSxcbiAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcpLCB7XG4gICAgICAgIGJhc2U6IHRoaXMuY29uZmlnLmJhc2UgJiYgdGhpcy5jb25maWcuYmFzZS5zZXQoJ3RpbWV6b25lJywgdmFsdWUpLFxuICAgICAgICB0aW1lem9uZTogdmFsdWUsXG4gICAgICB9KSxcbiAgICApO1xuICB9XG4gIF9ydW4oYXJncyA9IHt9KSB7XG4gICAgcmV0dXJuIGFyZ3MucmV2ZXJzZSA/IHRoaXMucmV2ZXJzZVJ1bihhcmdzKSA6IHRoaXMuZm9yd2FyZFJ1bihhcmdzKTtcbiAgfVxuICBjYWxjdWxhdGVJc0luZmluaXRlKCkge1xuICAgIHJldHVybiAhISh0aGlzLmNvbmZpZy5iYXNlICYmIHRoaXMuY29uZmlnLmJhc2UuaXNJbmZpbml0ZSk7XG4gIH1cbiAgY2FsY3VsYXRlSGFzRHVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgKmZvcndhcmRSdW4oYXJncyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5iYXNlKSByZXR1cm47XG4gICAgLy8gV2Ugd2FudCB0byBmaW5kIG9jY3VycmVuY2VzIHRoYXQgZW5kIGFmdGVyIHRoZSBwcm92aWRlZFxuICAgIC8vIGBzdGFydGAgdGltZSBldmVuIGlmIHRoZXkgYmVnaW4gYmVmb3JlIHRoZSBwcm92aWRlZCBgc3RhcnRgXG4gICAgLy8gdGltZS4gQmVjYXVzZSBvZiB0aGlzLCB3ZSBtdXN0IGJlZ2luIGl0ZXJhdGluZyBgbWF4RHVyYXRpb25gXG4gICAgLy8gYmVmb3JlIHRoZSBwcm92aWRlZCBzdGFydCB0aW1lLlxuICAgIGxldCBjaGVja0Zyb21TdGFydCA9IGFyZ3Muc3RhcnQ7XG4gICAgaWYgKGFyZ3Muc3RhcnQpIHtcbiAgICAgIGNoZWNrRnJvbVN0YXJ0ID0gYXJncy5zdGFydC5zdWJ0cmFjdCh0aGlzLm1heER1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKTtcbiAgICB9XG4gICAgbGV0IGNoZWNrRnJvbUVuZCA9IGFyZ3MuZW5kO1xuICAgIGlmIChhcmdzLmVuZCkge1xuICAgICAgY2hlY2tGcm9tRW5kID0gYXJncy5lbmQuYWRkKHRoaXMubWF4RHVyYXRpb24sICdtaWxsaXNlY29uZCcpO1xuICAgIH1cbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgRHVyYXRpb25JdGVyYWJsZVdyYXBwZXIoXG4gICAgICB0aGlzLmNvbmZpZy5iYXNlLFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmdzKSwgeyBzdGFydDogY2hlY2tGcm9tU3RhcnQsIGVuZDogY2hlY2tGcm9tRW5kIH0pLFxuICAgICk7XG4gICAgbGV0IHlpZWxkQXJncztcbiAgICAvLyBjaGVja2luZyBgc3RyZWFtLndvcmtpbmdWYWx1ZWAgYmVjYXVzZSB3aGVuIGBzdHJlYW0uZG9uZSA9PT0gdHJ1ZWBcbiAgICAvLyBgc3RyZWFtLndvcmtpbmdWYWx1ZWAgd2lsbCBub3QgaGF2ZSBiZWVuIHlpZWxkZWQgeWV0XG4gICAgd2hpbGUgKHN0cmVhbS53b3JraW5nVmFsdWUpIHtcbiAgICAgIC8vIFRPRE8oQGpvaG4uY2Fycm9sbC5wKTogZmlndXJlIG91dCBob3cgdG8gaGFuZGxlIGBEYXRlVGltZSNnZW5lcmF0b3JzYCBmb3IgbWVyZ2VkIGBEYXRlVGltZXNgXG4gICAgICB3aGlsZSAoIXN0cmVhbS5kb25lICYmIHN0cmVhbS53b3JraW5nVmFsdWUuZW5kLmlzQWZ0ZXJPckVxdWFsKHN0cmVhbS52YWx1ZSkpIHtcbiAgICAgICAgaWYgKHN0cmVhbS53b3JraW5nVmFsdWUuZHVyYXRpb24gPiB0aGlzLm1heER1cmF0aW9uKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE1lcmdlRHVyYXRpb25PcGVyYXRvckVycm9yKFxuICAgICAgICAgICAgYE1lcmdlRHVyYXRpb25PcGVyYXRvckVycm9yOiBPY2N1cnJlbmNlIGR1cmF0aW9uIGV4Y2VlZGVkIG1heER1cmF0aW9uIG9mIGAgK1xuICAgICAgICAgICAgICB0aGlzLm1heER1cmF0aW9uLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cmVhbS52YWx1ZS5lbmQuaXNBZnRlcihzdHJlYW0ud29ya2luZ1ZhbHVlLmVuZCkpIHtcbiAgICAgICAgICBjb25zdCBkaWZmID0gc3RyZWFtLnZhbHVlLmVuZC52YWx1ZU9mKCkgLSBzdHJlYW0ud29ya2luZ1ZhbHVlLmVuZC52YWx1ZU9mKCk7XG4gICAgICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZSA9IHN0cmVhbS53b3JraW5nVmFsdWUuc2V0KFxuICAgICAgICAgICAgJ2R1cmF0aW9uJyxcbiAgICAgICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUuZHVyYXRpb24gKyBkaWZmLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIH1cbiAgICAgIC8vIGNoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgb2NjdXJyZW5jZSB3ZSBhcmUgYWJvdXQgdG8geWllbGQgZW5kcyBhZnRlciB0aGVcbiAgICAgIC8vIHByb3ZpZGVkIHN0YXJ0IHRpbWUuXG4gICAgICBpZiAoYXJncy5zdGFydCAmJiBzdHJlYW0ud29ya2luZ1ZhbHVlLmVuZC5pc0JlZm9yZShhcmdzLnN0YXJ0KSkge1xuICAgICAgICBzdHJlYW0ud29ya2luZ1ZhbHVlID0gc3RyZWFtLnZhbHVlO1xuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgb2NjdXJyZW5jZSB3ZSBhcmUgYWJvdXQgdG8geWllbGQgZW5kcyBhZnRlciB0aGVcbiAgICAgIC8vIHByb3ZpZGVkIHNraXBUb0RhdGVcbiAgICAgIGlmIChcbiAgICAgICAgKHlpZWxkQXJncyA9PT0gbnVsbCB8fCB5aWVsZEFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHlpZWxkQXJncy5za2lwVG9EYXRlKSAmJlxuICAgICAgICBzdHJlYW0ud29ya2luZ1ZhbHVlLmVuZC5pc0JlZm9yZSh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSlcbiAgICAgICkge1xuICAgICAgICBzdHJlYW0ud29ya2luZ1ZhbHVlID0gc3RyZWFtLnZhbHVlO1xuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBhcmUgbm90IGFmdGVyIHRoZSB1c2VyIHJlcXVlc3RlZCBgZW5kYCB0aW1lLlxuICAgICAgaWYgKGFyZ3MuZW5kICYmIHN0cmVhbS53b3JraW5nVmFsdWUgJiYgc3RyZWFtLndvcmtpbmdWYWx1ZS5pc0FmdGVyKGFyZ3MuZW5kKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzdHJlYW0ud29ya2luZ1ZhbHVlLmR1cmF0aW9uID4gdGhpcy5tYXhEdXJhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgTWVyZ2VEdXJhdGlvbk9wZXJhdG9yRXJyb3IoXG4gICAgICAgICAgYE1lcmdlRHVyYXRpb25PcGVyYXRvckVycm9yOiBPY2N1cnJlbmNlIGR1cmF0aW9uIGV4Y2VlZGVkIG1heER1cmF0aW9uIG9mIGAgK1xuICAgICAgICAgICAgdGhpcy5tYXhEdXJhdGlvbixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHlpZWxkQXJncyA9IHlpZWxkIHRoaXMubm9ybWFsaXplUnVuT3V0cHV0KHN0cmVhbS53b3JraW5nVmFsdWUpO1xuICAgICAgaWYgKFxuICAgICAgICAoeWllbGRBcmdzID09PSBudWxsIHx8IHlpZWxkQXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogeWllbGRBcmdzLnNraXBUb0RhdGUpICYmXG4gICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUuaXNBZnRlck9yRXF1YWwoeWllbGRBcmdzLnNraXBUb0RhdGUpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBIHByb3ZpZGVkIGBza2lwVG9EYXRlYCBvcHRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIGxhc3QgeWllbGRlZCBkYXRlICcgK1xuICAgICAgICAgICAgJyhvciBzbWFsbGVyLCBpbiB0aGUgY2FzZSBvZiByZXZlcnNlIGl0ZXJhdGlvbiknLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZSA9IHN0cmVhbS52YWx1ZTtcbiAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgfVxuICB9XG4gICpyZXZlcnNlUnVuKGFyZ3MgPSB7fSkge1xuICAgIGlmICghdGhpcy5jb25maWcuYmFzZSkgcmV0dXJuO1xuICAgIC8vIFdlIHdhbnQgdG8gZmluZCBvY2N1cnJlbmNlcyB0aGF0IGVuZCBhZnRlciB0aGUgcHJvdmlkZWRcbiAgICAvLyBgc3RhcnRgIHRpbWUgZXZlbiBpZiB0aGV5IGJlZ2luIGJlZm9yZSB0aGUgcHJvdmlkZWQgYHN0YXJ0YFxuICAgIC8vIHRpbWUuIEJlY2F1c2Ugb2YgdGhpcywgd2UgbXVzdCBiZWdpbiBpdGVyYXRpbmcgYG1heER1cmF0aW9uYFxuICAgIC8vIGJlZm9yZSB0aGUgcHJvdmlkZWQgc3RhcnQgdGltZS5cbiAgICBsZXQgY2hlY2tGcm9tU3RhcnQgPSBhcmdzLnN0YXJ0O1xuICAgIGlmIChhcmdzLnN0YXJ0KSB7XG4gICAgICBjaGVja0Zyb21TdGFydCA9IGFyZ3Muc3RhcnQuc3VidHJhY3QodGhpcy5tYXhEdXJhdGlvbiwgJ21pbGxpc2Vjb25kJyk7XG4gICAgfVxuICAgIGxldCBjaGVja0Zyb21FbmQgPSBhcmdzLmVuZDtcbiAgICBpZiAoYXJncy5lbmQpIHtcbiAgICAgIGNoZWNrRnJvbUVuZCA9IGFyZ3MuZW5kLmFkZCh0aGlzLm1heER1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKTtcbiAgICB9XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IER1cmF0aW9uSXRlcmFibGVXcmFwcGVyKFxuICAgICAgdGhpcy5jb25maWcuYmFzZSxcbiAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXJncyksIHsgc3RhcnQ6IGNoZWNrRnJvbVN0YXJ0LCBlbmQ6IGNoZWNrRnJvbUVuZCB9KSxcbiAgICApO1xuICAgIGxldCB5aWVsZEFyZ3M7XG4gICAgLy8gY2hlY2tpbmcgYHN0cmVhbS53b3JraW5nVmFsdWVgIGJlY2F1c2Ugd2hlbiBgc3RyZWFtLmRvbmUgPT09IHRydWVgXG4gICAgLy8gYHN0cmVhbS53b3JraW5nVmFsdWVgIHdpbGwgbm90IGhhdmUgYmVlbiB5aWVsZGVkIHlldFxuICAgIHdoaWxlIChzdHJlYW0ud29ya2luZ1ZhbHVlKSB7XG4gICAgICAvLyBUT0RPKEBqb2huLmNhcnJvbGwucCk6IGZpZ3VyZSBvdXQgaG93IHRvIGhhbmRsZSBgRGF0ZVRpbWUjZ2VuZXJhdG9yc2AgZm9yIG1lcmdlZCBgRGF0ZVRpbWVzYFxuICAgICAgd2hpbGUgKCFzdHJlYW0uZG9uZSAmJiBzdHJlYW0ud29ya2luZ1ZhbHVlLmlzQmVmb3JlT3JFcXVhbChzdHJlYW0udmFsdWUuZW5kKSkge1xuICAgICAgICBpZiAoc3RyZWFtLndvcmtpbmdWYWx1ZS5kdXJhdGlvbiA+IHRoaXMubWF4RHVyYXRpb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWVyZ2VEdXJhdGlvbk9wZXJhdG9yRXJyb3IoXG4gICAgICAgICAgICBgTWVyZ2VEdXJhdGlvbk9wZXJhdG9yRXJyb3I6IE9jY3VycmVuY2UgZHVyYXRpb24gZXhjZWVkZWQgbWF4RHVyYXRpb24gb2YgYCArXG4gICAgICAgICAgICAgIHRoaXMubWF4RHVyYXRpb24sXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgc3RyZWFtLnZhbHVlLmlzQmVmb3JlKHN0cmVhbS53b3JraW5nVmFsdWUpIHx8XG4gICAgICAgICAgc3RyZWFtLnZhbHVlLmVuZC5pc0FmdGVyKHN0cmVhbS53b3JraW5nVmFsdWUuZW5kKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoc3RyZWFtLnZhbHVlLmVuZC5pc0FmdGVyKHN0cmVhbS53b3JraW5nVmFsdWUuZW5kKSkge1xuICAgICAgICAgICAgLy8gYHN0cmVhbS53b3JraW5nVmFsdWVgIGlzIGEgc3Vic2V0IG9mIGBzdHJlYW0udmFsdWVgXG4gICAgICAgICAgICAvLyBzbyBzaW1wbHkgcmVwbGFjZSBgc3RyZWFtLndvcmtpbmdWYWx1ZWAgd2l0aCBgc3RyZWFtLnZhbHVlYFxuICAgICAgICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZSA9IHN0cmVhbS52YWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGlmZiA9IHN0cmVhbS53b3JraW5nVmFsdWUudmFsdWVPZigpIC0gc3RyZWFtLnZhbHVlLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUgPSBzdHJlYW0udmFsdWUuc2V0KCdkdXJhdGlvbicsIHN0cmVhbS53b3JraW5nVmFsdWUuZHVyYXRpb24gKyBkaWZmKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIH1cbiAgICAgIC8vIGNoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgb2NjdXJyZW5jZSB3ZSBhcmUgYWJvdXQgdG8geWllbGQgc3RhcnRzIGJlZm9yZSB0aGVcbiAgICAgIC8vIHByb3ZpZGVkIHN0YXJ0IHRpbWUuXG4gICAgICBpZiAoYXJncy5zdGFydCAmJiBzdHJlYW0ud29ya2luZ1ZhbHVlLmVuZC5pc0JlZm9yZShhcmdzLnN0YXJ0KSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgeWllbGRBcmdzICYmXG4gICAgICAgIHlpZWxkQXJncy5za2lwVG9EYXRlICYmXG4gICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUuZW5kLmlzQmVmb3JlKHlpZWxkQXJncy5za2lwVG9EYXRlKVxuICAgICAgKSB7XG4gICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUgPSBzdHJlYW0udmFsdWU7XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gbWFrZSBzdXJlIHdlIGFyZSBub3QgYWZ0ZXIgdGhlIHVzZXIgcmVxdWVzdGVkIGBlbmRgIHRpbWUuXG4gICAgICBpZiAoYXJncy5lbmQgJiYgc3RyZWFtLndvcmtpbmdWYWx1ZSAmJiBzdHJlYW0ud29ya2luZ1ZhbHVlLmlzQWZ0ZXIoYXJncy5lbmQpKSB7XG4gICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUgPSBzdHJlYW0udmFsdWU7XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHN0cmVhbS53b3JraW5nVmFsdWUuZHVyYXRpb24gPiB0aGlzLm1heER1cmF0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXJnZUR1cmF0aW9uT3BlcmF0b3JFcnJvcihcbiAgICAgICAgICBgTWVyZ2VEdXJhdGlvbk9wZXJhdG9yRXJyb3I6IE9jY3VycmVuY2UgZHVyYXRpb24gZXhjZWVkZWQgbWF4RHVyYXRpb24gb2YgYCArXG4gICAgICAgICAgICB0aGlzLm1heER1cmF0aW9uLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgeWllbGRBcmdzID0geWllbGQgdGhpcy5ub3JtYWxpemVSdW5PdXRwdXQoc3RyZWFtLndvcmtpbmdWYWx1ZSk7XG4gICAgICBpZiAoXG4gICAgICAgIHlpZWxkQXJncyAmJlxuICAgICAgICB5aWVsZEFyZ3Muc2tpcFRvRGF0ZSAmJlxuICAgICAgICBzdHJlYW0ud29ya2luZ1ZhbHVlLmVuZC5pc0JlZm9yZU9yRXF1YWwoeWllbGRBcmdzLnNraXBUb0RhdGUpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBIHByb3ZpZGVkIGBza2lwVG9EYXRlYCBvcHRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIGxhc3QgeWllbGRlZCBkYXRlICcgK1xuICAgICAgICAgICAgJyhvciBzbWFsbGVyLCBpbiB0aGUgY2FzZSBvZiByZXZlcnNlIGl0ZXJhdGlvbiknLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZSA9IHN0cmVhbS52YWx1ZTtcbiAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIFNwbGl0RHVyYXRpb25PcGVyYXRvckVycm9yIGV4dGVuZHMgRXJyb3Ige31cbi8qKlxuICogQW4gb3BlcmF0b3IgZnVuY3Rpb24gd2hpY2ggdGFrZXMgYW4gb2NjdXJyZW5jZSBzdHJlYW0gd2l0aFxuICogYGhhc0R1cmF0aW9uID09PSB0cnVlYCBhbmQgcGFzc2VzIG9jY3VycmVuY2VzIHRocm91Z2ggYSBzcGxpdHRpbmdcbiAqIGZ1bmN0aW9uLiBPbmUgdXNlY2FzZSBmb3IgdGhpcyBvcGVyYXRvciBpcyB0byBkeW5hbWljYWxseSBicmVhayB1cFxuICogb2NjdXJyZW5jZXMgd2l0aCBhIGxhcmdlIGR1cmF0aW9uIGludG8gc2V2ZXJhbCBzbWFsbGVyIG9jY3VycmVuY2VzLlxuICpcbiAqIFlvdSBtdXN0IHByb3ZpZGUgYSBgbWF4RHVyYXRpb25gIGFyZ3VtZW50IHRoYXQgcmVwcmVzZW50cyB0aGVcbiAqIG1heGltdW0gcG9zc2libGUgZHVyYXRpb24gZm9yIGEgc2luZ2xlIG9jY3VycmVuY2UuIElmIHRoaXNcbiAqIGR1cmF0aW9uIGlzIGV4Y2VlZGVkLCBhIGBTcGxpdER1cmF0aW9uT3BlcmF0b3JFcnJvcmAgd2lsbCBiZVxuICogdGhyb3duLlxuICpcbiAqIC0gRm9yIHlvdXIgY29udmVuaWVuY2UsIHlvdSBjYW4gZ2xvYmFsbHkgc2V0IGEgZGVmYXVsdFxuICogICBgU3BsaXREdXJhdGlvbk9wZXJhdG9yI21heER1cmF0aW9uYCB2aWFcbiAqICAgYFJTY2hlZHVsZUNvbmZpZy5TcGxpdER1cmF0aW9uT3BlcmF0b3IuZGVmYXVsdE1heER1cmF0aW9uYC5cbiAqXG4gKiBVc2FnZSBleGFtcGxlOlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IE1JTExJU0VDT05EU19JTl9IT1VSID0gMTAwMCAqIDYwICogNjA7XG4gKlxuICogY29uc3Qgc3BsaXRGbiA9IChkYXRlOiBEYXRlVGltZSkgPT4ge1xuICogICBpZiAoZGF0ZS5kdXJhdGlvbiA+IE1JTExJU0VDT05EU19JTl9IT1VSKSB7XG4gKiAgICAgY29uc3QgZGlmZiA9IGRhdGUuZHVyYXRpb24hIC8gMjtcbiAqXG4gKiAgICAgcmV0dXJuIFtcbiAqICAgICAgIGRhdGUuc2V0KCdkdXJhdGlvbicsIGRpZmYpLFxuICogICAgICAgZGF0ZS5hZGQoZGlmZiwgJ21pbGxpc2Vjb25kJykuc2V0KCdkdXJhdGlvbicsIGRpZmYpLFxuICogICAgIF07XG4gKiAgIH1cbiAqXG4gKiAgIHJldHVybiBbZGF0ZV07XG4gKiB9O1xuICpcbiAqIGNvbnN0IGRhdGVzID0gbmV3IERhdGVzKHtcbiAqICAgZGF0ZXM6IFtcbiAqICAgICBuZXcgU3RhbmRhcmREYXRlQWRhcHRlcihuZXcgRGF0ZSgyMDEwLCAxMCwgMTAsIDEzKSwgeyBkdXJhdGlvbjogTUlMTElTRUNPTkRTX0lOX0hPVVIgKiAxIH0pLFxuICogICAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMSwgMTMpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDIgfSksXG4gKiAgIF0sXG4gKiAgIGRhdGVBZHB0ZXI6IFN0YW5kYXJkRGF0ZUFkYXB0ZXIsXG4gKiB9KS5waXBlKFxuICogICBzcGxpdER1cmF0aW9uKHtcbiAqICAgICBzcGxpdEZuLFxuICogICAgIG1heER1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDFcbiAqICAgfSlcbiAqIClcbiAqXG4gKiBleHBlY3QoZGF0ZXMub2NjdXJyZW5jZXMoKS50b0FycmF5KCkpLnRvRXF1YWwoW1xuICogICBuZXcgU3RhbmRhcmREYXRlQWRhcHRlcihuZXcgRGF0ZSgyMDEwLCAxMCwgMTAsIDEzKSwgeyBkdXJhdGlvbjogTUlMTElTRUNPTkRTX0lOX0hPVVIgKiAxIH0pLFxuICogICBuZXcgU3RhbmRhcmREYXRlQWRhcHRlcihuZXcgRGF0ZSgyMDEwLCAxMCwgMTEsIDEzKSwgeyBkdXJhdGlvbjogTUlMTElTRUNPTkRTX0lOX0hPVVIgKiAxIH0pLFxuICogICBuZXcgU3RhbmRhcmREYXRlQWRhcHRlcihuZXcgRGF0ZSgyMDEwLCAxMCwgMTEsIDE0KSwgeyBkdXJhdGlvbjogTUlMTElTRUNPTkRTX0lOX0hPVVIgKiAxIH0pLFxuICogXSlcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBzcGxpdER1cmF0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG9wdGlvbnMgPT4gbmV3IFNwbGl0RHVyYXRpb25PcGVyYXRvcihhcmdzLCBvcHRpb25zKTtcbn1cbmNsYXNzIFNwbGl0RHVyYXRpb25PcGVyYXRvciBleHRlbmRzIE9wZXJhdG9yIHtcbiAgY29uc3RydWN0b3IoYXJncywgY29uZmlnKSB7XG4gICAgc3VwZXIoW10sIGNvbmZpZyk7XG4gICAgdGhpcy5zcGxpdEZuID0gYXJncy5zcGxpdEZuO1xuICAgIHRoaXMubWF4RHVyYXRpb24gPSBhcmdzLm1heER1cmF0aW9uO1xuICAgIGlmIChjb25maWcuYmFzZSAmJiAhY29uZmlnLmJhc2UuaGFzRHVyYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKFxuICAgICAgICAnQmFzZSBzdHJlYW0gcHJvdmlkZWQgdG8gU3BsaXREdXJhdGlvbk9wZXJhdG9yIGRvZXMgbm90IGhhdmUgYW4gYXNzb2NpYXRlZCBkdXJhdGlvbi4gJyArXG4gICAgICAgICAgJ1RoZSBTcGxpdER1cmF0aW9uT3BlcmF0b3IgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIHN0cmVhbXMgd2hpY2ggaGF2ZSBhIGR1cmF0aW9uLicsXG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvKiogTm90IGFjdHVhbGx5IHVzZWQgYnV0IG5lY2Vzc2FyeSBmb3IgSVJ1bm5hYmxlIGludGVyZmFjZSAqL1xuICBzZXQoXywgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFNwbGl0RHVyYXRpb25PcGVyYXRvcihcbiAgICAgIHtcbiAgICAgICAgbWF4RHVyYXRpb246IHRoaXMubWF4RHVyYXRpb24sXG4gICAgICAgIHNwbGl0Rm46IHRoaXMuc3BsaXRGbixcbiAgICAgIH0sXG4gICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnKSwge1xuICAgICAgICBiYXNlOiB0aGlzLmNvbmZpZy5iYXNlICYmIHRoaXMuY29uZmlnLmJhc2Uuc2V0KCd0aW1lem9uZScsIHZhbHVlKSxcbiAgICAgICAgdGltZXpvbmU6IHZhbHVlLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuICAqX3J1bihhcmdzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmJhc2UpIHJldHVybjtcbiAgICBjb25zdCByZXZlcnNlID0gYXJncy5yZXZlcnNlIHx8IGZhbHNlO1xuICAgIC8vIFdlIHdhbnQgdG8gZmluZCBvY2N1cnJlbmNlcyB0aGF0IGVuZCBhZnRlciB0aGUgcHJvdmlkZWRcbiAgICAvLyBgc3RhcnRgIHRpbWUgZXZlbiBpZiB0aGV5IGJlZ2luIGJlZm9yZSB0aGUgcHJvdmlkZWQgYHN0YXJ0YFxuICAgIC8vIHRpbWUuIEJlY2F1c2Ugb2YgdGhpcywgd2UgYWRkIGBtYXhEdXJhdGlvbmAgdG9cbiAgICAvLyB0aGUgcHJvdmlkZWQgc3RhcnQgdGltZS5cbiAgICBsZXQgY2hlY2tGcm9tU3RhcnQgPSBhcmdzLnN0YXJ0O1xuICAgIGlmIChhcmdzLnN0YXJ0KSB7XG4gICAgICBjaGVja0Zyb21TdGFydCA9IGFyZ3Muc3RhcnQuc3VidHJhY3QodGhpcy5tYXhEdXJhdGlvbiwgJ21pbGxpc2Vjb25kJyk7XG4gICAgfVxuICAgIC8vIHNhbWUgZ29lcyBmb3IgYGVuZGAgdGltZSBhcyB3aXRoIGBzdGFydGAgdGltZS5cbiAgICBsZXQgY2hlY2tGcm9tRW5kID0gYXJncy5lbmQ7XG4gICAgaWYgKGFyZ3MuZW5kKSB7XG4gICAgICBjaGVja0Zyb21FbmQgPSBhcmdzLmVuZC5hZGQodGhpcy5tYXhEdXJhdGlvbiwgJ21pbGxpc2Vjb25kJyk7XG4gICAgfVxuICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBJdGVyYWJsZVdyYXBwZXIoXG4gICAgICB0aGlzLmNvbmZpZy5iYXNlLFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmdzKSwgeyBzdGFydDogY2hlY2tGcm9tU3RhcnQsIGVuZDogY2hlY2tGcm9tRW5kIH0pLFxuICAgICk7XG4gICAgbGV0IHlpZWxkQXJncztcbiAgICBjb25zdCBkYXRlc0J1Y2tldCA9IFtdO1xuICAgIHdoaWxlICghc3RyZWFtLmRvbmUgfHwgKGRhdGVzQnVja2V0WzBdICYmIGRhdGVzQnVja2V0WzBdWzBdKSkge1xuICAgICAgLyoqXG4gICAgICAgKiBFeGFtcGxlOlxuICAgICAgICogMTBhbSAtIDJwbSAtPiAxMGFtIC0gMTJwbSwgMTJwbSAtIDJwbVxuICAgICAgICogMTFhbSAtIDNwbSAtPiAxMWFtIC0gMXBtLCAxcG0gLSAzcG1cbiAgICAgICAqIDJwbSAtIDRwbSAtPiAycG0gLSAzcG0sIDNwbSAtIDRwbVxuICAgICAgICovXG4gICAgICBpZiAoIShkYXRlc0J1Y2tldFswXSAmJiBkYXRlc0J1Y2tldFswXVswXSkpIHtcbiAgICAgICAgLy8gd2UncmUgb3V0IG9mIGRhdGVzXG4gICAgICAgIGRhdGVzQnVja2V0LnB1c2godGhpcy5zcGxpdERhdGUoc3RyZWFtLnZhbHVlLCByZXZlcnNlKSk7XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoXG4gICAgICAgICFzdHJlYW0uZG9uZSAmJlxuICAgICAgICAocmV2ZXJzZVxuICAgICAgICAgID8gZGF0ZXNCdWNrZXRbMF0uc29tZShkYXRlID0+IGRhdGUuaXNCZWZvcmVPckVxdWFsKHN0cmVhbS52YWx1ZS5lbmQpKVxuICAgICAgICAgIDogZGF0ZXNCdWNrZXRbMF0uc29tZShkYXRlID0+IGRhdGUuaXNBZnRlck9yRXF1YWwoc3RyZWFtLnZhbHVlKSkpXG4gICAgICApIHtcbiAgICAgICAgZGF0ZXNCdWNrZXQucHVzaCh0aGlzLnNwbGl0RGF0ZShzdHJlYW0udmFsdWUsIHJldmVyc2UpKTtcbiAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIH1cbiAgICAgIGxldCBzZWxlY3RlZERhdGUgPSBkYXRlc0J1Y2tldFswXSAmJiBkYXRlc0J1Y2tldFswXVswXTtcbiAgICAgIGxldCBidWNrZXRJbmRleCA9IC0xO1xuICAgICAgbGV0IHNlbGVjdGVkQnVja2V0SW5kZXggPSAwO1xuICAgICAgbGV0IGRhdGVJbmRleCA9IC0xO1xuICAgICAgbGV0IHNlbGVjdGVkRGF0ZUluZGV4ID0gMDtcbiAgICAgIC8vIGZpbmQgdGhlIG5leHQgZGF0ZSBhcyB3ZWxsIGFzIGl0cyBsb2NhdGlvbiBpbiB0aGUgZGF0ZXNCdWNrZXRcbiAgICAgIGZvciAoY29uc3QgYnVja2V0IG9mIGRhdGVzQnVja2V0KSB7XG4gICAgICAgIGJ1Y2tldEluZGV4Kys7XG4gICAgICAgIGRhdGVJbmRleCA9IC0xO1xuICAgICAgICBmb3IgKGNvbnN0IGRhdGUgb2YgYnVja2V0KSB7XG4gICAgICAgICAgZGF0ZUluZGV4Kys7XG4gICAgICAgICAgbGV0IGRhdGVTaG91bGRDb21lTmV4dDtcbiAgICAgICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICAgICAgZGF0ZVNob3VsZENvbWVOZXh0ID1cbiAgICAgICAgICAgICAgZGF0ZS5pc0FmdGVyKHNlbGVjdGVkRGF0ZSkgfHxcbiAgICAgICAgICAgICAgKGRhdGUuaXNFcXVhbChzZWxlY3RlZERhdGUpICYmIGRhdGUuZHVyYXRpb24gPiBzZWxlY3RlZERhdGUuZHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlU2hvdWxkQ29tZU5leHQgPVxuICAgICAgICAgICAgICBkYXRlLmlzQmVmb3JlKHNlbGVjdGVkRGF0ZSkgfHxcbiAgICAgICAgICAgICAgKGRhdGUuaXNFcXVhbChzZWxlY3RlZERhdGUpICYmIGRhdGUuZHVyYXRpb24gPCBzZWxlY3RlZERhdGUuZHVyYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZGF0ZVNob3VsZENvbWVOZXh0KSB7XG4gICAgICAgICAgICBzZWxlY3RlZERhdGUgPSBkYXRlO1xuICAgICAgICAgICAgc2VsZWN0ZWRCdWNrZXRJbmRleCA9IGJ1Y2tldEluZGV4O1xuICAgICAgICAgICAgc2VsZWN0ZWREYXRlSW5kZXggPSBkYXRlSW5kZXg7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRhdGVzQnVja2V0W3NlbGVjdGVkQnVja2V0SW5kZXhdLnNwbGljZShzZWxlY3RlZERhdGVJbmRleCwgMSk7XG4gICAgICBpZiAoZGF0ZXNCdWNrZXRbc2VsZWN0ZWRCdWNrZXRJbmRleF0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRhdGVzQnVja2V0LnNwbGljZShzZWxlY3RlZEJ1Y2tldEluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHdlJ3ZlIGJlZW4geWllbGRlZEFyZ3MgZnJvbSB0aGUgbGFzdCBjeWNsZSwgY2hlY2sgdG8gc2VlXG4gICAgICAvLyB0aGF0IHRoZSBzZWxlY3RlZERhdGUgaG9ub3JzIHRoZSBgc2tpcFRvRGF0ZWAgcmVxdWlyZW1lbnRcbiAgICAgIC8vIGlmIG5vdCwgZGlzY2FyZCB0aGlzIHNlbGVjdGVkRGF0ZVxuICAgICAgaWYgKFxuICAgICAgICB5aWVsZEFyZ3MgJiZcbiAgICAgICAgeWllbGRBcmdzLnNraXBUb0RhdGUgJiZcbiAgICAgICAgc2VsZWN0ZWREYXRlICYmXG4gICAgICAgICFkYXRlUGFzdEVuZChzZWxlY3RlZERhdGUsIGFyZ3MpICYmXG4gICAgICAgICFkYXRlUGFzdFNraXBUb0RhdGUoc2VsZWN0ZWREYXRlLCB5aWVsZEFyZ3Muc2tpcFRvRGF0ZSwgYXJncylcbiAgICAgICkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIGJlY2F1c2Ugd2Ugc3VidHJhY3RlZCBgbWF4RHVyYXRpb25gIHRvIHRoZSBiYXNlIGl0ZXJhdG9yJ3Mgc3RhcnQgdGltZSxcbiAgICAgIC8vIGNoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgc2VsZWN0ZWREYXRlIHdlIGFyZSBhYm91dCB0byB5aWVsZCBzaG91bGRcbiAgICAgIC8vIGFjdHVhbGx5IGJlIHlpZWxkZWQgKGl0IG1heSBiZSBiZWZvcmUgdGhlIHByb3ZpZGVkIGBzdGFydGAgdGltZSkuXG4gICAgICAvLyBJZiBub3QsIGRpc2NhcmQgdGhlIHNlbGVjdGVkRGF0ZS5cbiAgICAgIGlmIChhcmdzLnN0YXJ0ICYmIHNlbGVjdGVkRGF0ZS5lbmQuaXNCZWZvcmUoYXJncy5zdGFydCkpIHtcbiAgICAgICAgaWYgKHJldmVyc2UpIGJyZWFrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIGJlY2F1c2Ugd2UgYWRkZWQgYG1heER1cmF0aW9uYCB0byB0aGUgYmFzZSBpdGVyYXRvcidzIGVuZCB0aW1lLFxuICAgICAgLy8gY2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBzZWxlY3RlZERhdGUgd2UgYXJlIGFib3V0IHRvIHlpZWxkIHNob3VsZFxuICAgICAgLy8gYWN0dWFsbHkgYmUgeWllbGRlZCAoaXQgbWF5IGJlIGFmdGVyIHRoZSBwcm92aWRlZCBgZW5kYCB0aW1lKS5cbiAgICAgIC8vIElmIG5vdCwgZW5kIGl0ZXJhdGlvbi5cbiAgICAgIGlmIChhcmdzLmVuZCAmJiBzZWxlY3RlZERhdGUuaXNBZnRlcihhcmdzLmVuZCkpIHtcbiAgICAgICAgaWYgKHJldmVyc2UpIGNvbnRpbnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RlZERhdGUuZHVyYXRpb24gPiB0aGlzLm1heER1cmF0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBTcGxpdER1cmF0aW9uT3BlcmF0b3JFcnJvcihcbiAgICAgICAgICBgU3BsaXREdXJhdGlvbk9wZXJhdG9yRXJyb3I6IE9jY3VycmVuY2UgZHVyYXRpb24gZXhjZWVkZWQgbWF4RHVyYXRpb24gb2YgYCArXG4gICAgICAgICAgICB0aGlzLm1heER1cmF0aW9uLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgeWllbGRBcmdzID0geWllbGQgdGhpcy5ub3JtYWxpemVSdW5PdXRwdXQoc2VsZWN0ZWREYXRlKTtcbiAgICAgIGlmIChcbiAgICAgICAgeWllbGRBcmdzICYmXG4gICAgICAgIHlpZWxkQXJncy5za2lwVG9EYXRlICYmXG4gICAgICAgIChhcmdzLnJldmVyc2VcbiAgICAgICAgICA/IHNlbGVjdGVkRGF0ZS5pc0JlZm9yZU9yRXF1YWwoeWllbGRBcmdzLnNraXBUb0RhdGUpXG4gICAgICAgICAgOiBzZWxlY3RlZERhdGUuaXNBZnRlck9yRXF1YWwoeWllbGRBcmdzLnNraXBUb0RhdGUpKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQSBwcm92aWRlZCBgc2tpcFRvRGF0ZWAgb3B0aW9uIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBsYXN0IHlpZWxkZWQgZGF0ZSAnICtcbiAgICAgICAgICAgICcob3Igc21hbGxlciwgaW4gdGhlIGNhc2Ugb2YgcmV2ZXJzZSBpdGVyYXRpb24pJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsY3VsYXRlSXNJbmZpbml0ZSgpIHtcbiAgICByZXR1cm4gISEodGhpcy5jb25maWcuYmFzZSAmJiB0aGlzLmNvbmZpZy5iYXNlLmlzSW5maW5pdGUpO1xuICB9XG4gIGNhbGN1bGF0ZUhhc0R1cmF0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHNwbGl0RGF0ZShkYXRlLCByZXZlcnNlKSB7XG4gICAgY29uc3QgZGF0ZXMgPSB0aGlzLnNwbGl0Rm4oZGF0ZSk7XG4gICAgbGV0IHZhbGlkO1xuICAgIGlmIChkYXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChkYXRlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhbGlkID0gZGF0ZS5kdXJhdGlvbiA9PT0gZGF0ZXNbMF0uZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbGlkID0gZGF0ZS5kdXJhdGlvbiA9PT0gZGF0ZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2ICsgY3Vyci5kdXJhdGlvbiwgMCk7XG4gICAgfVxuICAgIGlmICghdmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSBwcm92aWRlZCBTcGxpdER1cmF0aW9uT3BlcmF0b3Igc3BsaXQgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ211c3QgcmV0dXJuIGFuIGFycmF5IG9mIERhdGVUaW1lcyB3aXRoIGxlbmd0aCA+IDAgJyArXG4gICAgICAgICAgJ3doZXJlIHRoZSB0b3RhbCBkdXJhdGlvbiBvZiB0aGUgbmV3IGRhdGVzIGVxdWFscyB0aGUgZHVyYXRpb24gb2YgJyArXG4gICAgICAgICAgJ3RoZSBvcmlnaW5hbCBkYXRlLicsXG4gICAgICApO1xuICAgIH1cbiAgICBkYXRlcy5zb3J0KGRhdGVUaW1lU29ydENvbXBhcmVyKTtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgZGF0ZXMucmV2ZXJzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZXM7XG4gIH1cbn1cbmZ1bmN0aW9uIGRhdGVQYXN0RW5kKGRhdGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuICEhKG9wdGlvbnMucmV2ZXJzZVxuICAgID8gb3B0aW9ucy5zdGFydCAmJiBkYXRlLmlzQmVmb3JlKG9wdGlvbnMuc3RhcnQpXG4gICAgOiBvcHRpb25zLmVuZCAmJiBkYXRlLmlzQWZ0ZXIob3B0aW9ucy5lbmQpKTtcbn1cbmZ1bmN0aW9uIGRhdGVQYXN0U2tpcFRvRGF0ZShkYXRlLCBza2lwVG9EYXRlLCBvcHRpb25zKSB7XG4gIHJldHVybiAhIShvcHRpb25zLnJldmVyc2UgPyBza2lwVG9EYXRlLmlzQWZ0ZXJPckVxdWFsKGRhdGUpIDogc2tpcFRvRGF0ZS5pc0JlZm9yZU9yRXF1YWwoZGF0ZSkpO1xufVxuXG5leHBvcnQge1xuICBBZGRPcGVyYXRvcixcbiAgQ2FsZW5kYXIsXG4gIENvbGxlY3Rpb24sXG4gIENvbGxlY3Rpb25JdGVyYXRvcixcbiAgRGF0ZXMsXG4gIEludGVyc2VjdGlvbk9wZXJhdG9yLFxuICBNZXJnZUR1cmF0aW9uT3BlcmF0b3IsXG4gIE1lcmdlRHVyYXRpb25PcGVyYXRvckVycm9yLFxuICBPY2N1cnJlbmNlR2VuZXJhdG9yLFxuICBPY2N1cnJlbmNlSXRlcmF0b3IsXG4gIE9wZXJhdG9yLFxuICBSdWxlLFxuICBSdWxlQmFzZSxcbiAgU2NoZWR1bGUsXG4gIFNjaGVkdWxlQmFzZSxcbiAgU3BsaXREdXJhdGlvbk9wZXJhdG9yLFxuICBTcGxpdER1cmF0aW9uT3BlcmF0b3JFcnJvcixcbiAgU3VidHJhY3RPcGVyYXRvcixcbiAgVW5pcXVlT3BlcmF0b3IsXG4gIGFkZCxcbiAgaW50ZXJzZWN0aW9uLFxuICBtZXJnZUR1cmF0aW9uLFxuICBzcGxpdER1cmF0aW9uLFxuICBzdWJ0cmFjdCxcbiAgdW5pcXVlLFxufTtcbiIsImltcG9ydCB7XG4gIGZyZXFUb0dyYW51bGFyaXR5LFxuICBWYWxpZERhdGVUaW1lLFxuICBJbnZhbGlkRGF0ZVRpbWUsXG4gIERhdGVBZGFwdGVyLFxuICBSdWxlT3B0aW9uRXJyb3IsXG4gIG51bWJlclNvcnRDb21wYXJlcixcbiAgZ2V0RGlmZmVyZW5jZUJldHdlZW5XZWVrZGF5cyxcbiAgUmVjdXJyZW5jZVJ1bGVFcnJvcixcbiAgdW5pcURhdGVUaW1lcyxcbiAgZGF0ZVRpbWVTb3J0Q29tcGFyZXIsXG59IGZyb20gJ0Byc2NoZWR1bGUvY29yZSc7XG5cbmNsYXNzIFJlY3VycmVuY2VSdWxlIHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yKSB7XG4gICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gICAgdGhpcy5zdGFydCA9IHByb2Nlc3Nvci5zdGFydDtcbiAgICB0aGlzLmVuZCA9IHByb2Nlc3Nvci5lbmQ7XG4gICAgdGhpcy5vcHRpb25zID0gcHJvY2Vzc29yLm9wdGlvbnM7XG4gIH1cbn1cblxuY2xhc3MgRnJlcXVlbmN5UnVsZSBleHRlbmRzIFJlY3VycmVuY2VSdWxlIHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yLCBpbml0RGF0ZSkge1xuICAgIHN1cGVyKHByb2Nlc3Nvcik7XG4gICAgdGhpcy5pbml0RGF0ZSA9IGluaXREYXRlO1xuICAgIHRoaXMuaW50ZXJ2YWxVbml0ID0gZnJlcVRvR3JhbnVsYXJpdHkodGhpcy5vcHRpb25zLmZyZXF1ZW5jeSk7XG4gICAgdGhpcy5maXJzdEludGVydmFsU3RhcnREYXRlID0gdGhpcy5ub3JtYWxpemVkU3RhcnREYXRlKHRoaXMub3B0aW9ucy5zdGFydCk7XG4gICAgdGhpcy5pbnRlcnZhbFN0YXJ0RGF0ZSA9IHRoaXMuZmlyc3RJbnRlcnZhbFN0YXJ0RGF0ZTtcbiAgICB0aGlzLmludGVydmFsRW5kRGF0ZSA9IHRoaXMubm9ybWFsaXplZEVuZERhdGUodGhpcy5maXJzdEludGVydmFsU3RhcnREYXRlKTtcbiAgICB0aGlzLnNraXBUb0ludGVydmFsKHRoaXMuaW5pdERhdGUpO1xuICB9XG4gIHJ1bihkYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBWYWxpZERhdGVUaW1lKGRhdGUpKTtcbiAgfVxuICB2YWxpZGF0ZURhdGUoYXJnKSB7XG4gICAgY29uc3QgeyBkYXRlIH0gPSBhcmc7XG4gICAgaWYgKGFyZyBpbnN0YW5jZW9mIFZhbGlkRGF0ZVRpbWUgJiYgdGhpcy5kYXRlSXNXaXRoaW5JbnRlcnZhbChkYXRlKSkge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9XG4gICAgdGhpcy5za2lwVG9JbnRlcnZhbChkYXRlKTtcbiAgICByZXR1cm4gbmV3IEludmFsaWREYXRlVGltZShcbiAgICAgIC8vIGlmIHRoZSBpbnRlcnZhbCBpcyAxLCBkYXRlIHdpbGwgYWx3YXlzIGJlIHdpdGhpbiB0aGUgaW50ZXJ2YWxcbiAgICAgIHRoaXMuZGF0ZUlzV2l0aGluSW50ZXJ2YWwoZGF0ZSkgPyBkYXRlIDogdGhpcy5zZXRUb0N1cnJlbnRJbnRlcnZhbCgpLFxuICAgICk7XG4gIH1cbiAgc2V0VG9DdXJyZW50SW50ZXJ2YWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJ2YWxTdGFydERhdGU7XG4gIH1cbiAgbm9ybWFsaXplZFN0YXJ0RGF0ZShkYXRlKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5mcmVxdWVuY3kgPT09ICdXRUVLTFknKSB7XG4gICAgICByZXR1cm4gZGF0ZS5ncmFudWxhcml0eSgnd2VlaycsIHsgd2Vla1N0YXJ0OiB0aGlzLm9wdGlvbnMud2Vla1N0YXJ0IH0pO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZS5ncmFudWxhcml0eSh0aGlzLmludGVydmFsVW5pdCk7XG4gIH1cbiAgbm9ybWFsaXplZEVuZERhdGUoc3RhcnQpIHtcbiAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5mcmVxdWVuY3kpIHtcbiAgICAgIGNhc2UgJ1lFQVJMWSc6XG4gICAgICAgIHJldHVybiBzdGFydC5hZGQoMSwgJ3llYXInKTtcbiAgICAgIGNhc2UgJ01PTlRITFknOlxuICAgICAgICByZXR1cm4gc3RhcnQuYWRkKDEsICdtb250aCcpO1xuICAgICAgY2FzZSAnV0VFS0xZJzpcbiAgICAgICAgcmV0dXJuIHN0YXJ0LmFkZCgxLCAnd2VlaycpO1xuICAgICAgY2FzZSAnREFJTFknOlxuICAgICAgICByZXR1cm4gc3RhcnQuYWRkKDEsICdkYXknKTtcbiAgICAgIGNhc2UgJ0hPVVJMWSc6XG4gICAgICAgIHJldHVybiBzdGFydC5hZGQoMSwgJ2hvdXInKTtcbiAgICAgIGNhc2UgJ01JTlVURUxZJzpcbiAgICAgICAgcmV0dXJuIHN0YXJ0LmFkZCgxLCAnbWludXRlJyk7XG4gICAgICBjYXNlICdTRUNPTkRMWSc6XG4gICAgICAgIHJldHVybiBzdGFydC5hZGQoMSwgJ3NlY29uZCcpO1xuICAgICAgY2FzZSAnTUlMTElTRUNPTkRMWSc6XG4gICAgICAgIHJldHVybiBzdGFydC5hZGQoMSwgJ21pbGxpc2Vjb25kJyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZnJlcXVlbmN5ICR7dGhpcy5vcHRpb25zLmZyZXF1ZW5jeX1gKTtcbiAgICB9XG4gIH1cbiAgc2tpcFRvSW50ZXJ2YWwoZGF0ZSkge1xuICAgIGNvbnN0IGFtb3VudCA9IHRoaXMuaW50ZXJ2YWxEaWZmZXJlbmNlKGRhdGUpO1xuICAgIHRoaXMuaW50ZXJ2YWxTdGFydERhdGUgPSB0aGlzLmZpcnN0SW50ZXJ2YWxTdGFydERhdGUuYWRkKGFtb3VudCwgdGhpcy5pbnRlcnZhbFVuaXQpO1xuICAgIHRoaXMuaW50ZXJ2YWxFbmREYXRlID0gdGhpcy5ub3JtYWxpemVkRW5kRGF0ZSh0aGlzLmludGVydmFsU3RhcnREYXRlKTtcbiAgfVxuICBkYXRlSXNXaXRoaW5JbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJ2YWxTdGFydERhdGUuaXNCZWZvcmVPckVxdWFsKGRhdGUpICYmIHRoaXMuaW50ZXJ2YWxFbmREYXRlLmlzQWZ0ZXIoZGF0ZSk7XG4gIH1cbiAgaW50ZXJ2YWxEaWZmZXJlbmNlKGRhdGUpIHtcbiAgICByZXR1cm4gaW50ZXJ2YWxEaWZmZXJlbmNlQmV0d2VlbkRhdGVzKHtcbiAgICAgIGZpcnN0OiB0aGlzLmZpcnN0SW50ZXJ2YWxTdGFydERhdGUsXG4gICAgICBzZWNvbmQ6IGRhdGUsXG4gICAgICB1bml0OiB0aGlzLmludGVydmFsVW5pdCxcbiAgICAgIGludGVydmFsOiB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwsXG4gICAgICB3ZWVrU3RhcnQ6IHRoaXMub3B0aW9ucy53ZWVrU3RhcnQsXG4gICAgICBkaXJlY3Rpb246ICdhZnRlcicsXG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gdGhlIGZyZXF1ZW5jeSAodW5pdCkgYW5kIGludGVydmFsLCB0aGlzIGZ1bmN0aW9uIGZpbmRzXG4gKiBob3cgbWFueSBqdW1wcyBmb3J3YXJkIHRoZSBmaXJzdCBkYXRlIG5lZWRzIGluIG9yZGVyIHRvIGVxdWFsXG4gKiBvciBleGNlZWQgdGhlIHNlY29uZCBkYXRlLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqIDEuIFVuaXQgaXMgZGFpbHkgYW5kIGludGVydmFsIGlzIDEuIFRoZSBzZWNvbmQgZGF0ZSBpcyAzIGRheXNcbiAqICAgIGFmdGVyIHRoZSBmaXJzdC4gVGhpcyB3aWxsIHJldHVybiAzLlxuICogMi4gVW5pdCBpcyB5ZWFybHkgYW5kIGludGVydmFsIGlzIDEuIFRoZSBzZWNvbmQgZGF0ZSBpcyAzIGRheXNcbiAqICAgIGFmdGVyIHRoZSBmaXJzdC4gVGhpcyB3aWxsIHJldHVybiAwLlxuICogMy4gVW5pdCBpcyB5ZWFybHkgYW5kIGludGVydmFsIGlzIDMuIFRoZSBzZWNvbmQgZGF0ZSBpcyA0IHllYXJzXG4gKiAgICBhZnRlciB0aGUgZmlyc3QuIFRoaXMgd2lsbCByZXR1cm4gNi5cbiAqL1xuZnVuY3Rpb24gaW50ZXJ2YWxEaWZmZXJlbmNlQmV0d2VlbkRhdGVzKHsgZmlyc3QsIHNlY29uZCwgdW5pdCwgaW50ZXJ2YWwsIHdlZWtTdGFydCwgZGlyZWN0aW9uIH0pIHtcbiAgbGV0IGRpZmZlcmVuY2UgPSAoKCkgPT4ge1xuICAgIGxldCBpbnRlcnZhbER1cmF0aW9uO1xuICAgIGxldCBtb250aHM7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgbW9udGhzID0gKHNlY29uZC5nZXQoJ3llYXInKSAtIGZpcnN0LmdldCgneWVhcicpKSAqIDEyO1xuICAgICAgICBtb250aHMgPSBtb250aHMgKyBzZWNvbmQuZ2V0KCdtb250aCcpIC0gZmlyc3QuZ2V0KCdtb250aCcpO1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihtb250aHMgLyAxMik7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIG1vbnRocyA9IChzZWNvbmQuZ2V0KCd5ZWFyJykgLSBmaXJzdC5nZXQoJ3llYXInKSkgKiAxMjtcbiAgICAgICAgbW9udGhzID0gbW9udGhzICsgc2Vjb25kLmdldCgnbW9udGgnKSAtIGZpcnN0LmdldCgnbW9udGgnKTtcbiAgICAgICAgcmV0dXJuIG1vbnRocztcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICBmaXJzdCA9IGZpcnN0LmdyYW51bGFyaXR5KCd3ZWVrJywgeyB3ZWVrU3RhcnQgfSk7XG4gICAgICAgIGludGVydmFsRHVyYXRpb24gPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fV0VFSztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkYXknOlxuICAgICAgICBpbnRlcnZhbER1cmF0aW9uID0gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0RBWTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgaW50ZXJ2YWxEdXJhdGlvbiA9IERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9IT1VSO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIGludGVydmFsRHVyYXRpb24gPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fTUlOVVRFO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIGludGVydmFsRHVyYXRpb24gPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fU0VDT05EO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgaW50ZXJ2YWxEdXJhdGlvbiA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGB1bml0YCB2YWx1ZScpO1xuICAgIH1cbiAgICBjb25zdCBkaWZmID0gc2Vjb25kLnZhbHVlT2YoKSAtIGZpcnN0LnZhbHVlT2YoKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihkaWZmIC8gaW50ZXJ2YWxEdXJhdGlvbik7XG4gIH0pKCk7XG4gIGNvbnN0IGZuID0gZGlyZWN0aW9uID09PSAnYWZ0ZXInID8gTWF0aC5jZWlsIDogTWF0aC5mbG9vcjtcbiAgZGlmZmVyZW5jZSA9IGZuKGRpZmZlcmVuY2UgLyBpbnRlcnZhbCkgKiBpbnRlcnZhbDtcbiAgcmV0dXJuIGRpZmZlcmVuY2U7XG59XG5cbmNsYXNzIFJldkZyZXF1ZW5jeVJ1bGUgZXh0ZW5kcyBGcmVxdWVuY3lSdWxlIHtcbiAgc2V0VG9DdXJyZW50SW50ZXJ2YWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJ2YWxFbmREYXRlLnN1YnRyYWN0KDEsICdtaWxsaXNlY29uZCcpO1xuICB9XG4gIGludGVydmFsRGlmZmVyZW5jZShkYXRlKSB7XG4gICAgcmV0dXJuIGludGVydmFsRGlmZmVyZW5jZUJldHdlZW5EYXRlcyh7XG4gICAgICBmaXJzdDogdGhpcy5maXJzdEludGVydmFsU3RhcnREYXRlLFxuICAgICAgc2Vjb25kOiBkYXRlLFxuICAgICAgdW5pdDogdGhpcy5pbnRlcnZhbFVuaXQsXG4gICAgICBpbnRlcnZhbDogdGhpcy5vcHRpb25zLmludGVydmFsLFxuICAgICAgd2Vla1N0YXJ0OiB0aGlzLm9wdGlvbnMud2Vla1N0YXJ0LFxuICAgICAgZGlyZWN0aW9uOiAnYmVmb3JlJyxcbiAgICB9KTtcbiAgfVxufVxuXG5jb25zdCBGUkVRVUVOQ0lFUyA9IFtcbiAgJ01JTExJU0VDT05ETFknLFxuICAnU0VDT05ETFknLFxuICAnTUlOVVRFTFknLFxuICAnSE9VUkxZJyxcbiAgJ0RBSUxZJyxcbiAgJ1dFRUtMWScsXG4gICdNT05USExZJyxcbiAgJ1lFQVJMWScsXG5dO1xuY29uc3QgRnJlcXVlbmN5UnVsZU1vZHVsZSA9IHtcbiAgbmFtZTogJ0ZyZXF1ZW5jeVJ1bGUnLFxuICBnZXQ6IHByb2Nlc3NvciA9PiB7XG4gICAgaWYgKFxuICAgICAgcHJvY2Vzc29yLm9wdGlvbnMuYnlNaWxsaXNlY29uZE9mU2Vjb25kICE9PSB1bmRlZmluZWQgfHxcbiAgICAgIHByb2Nlc3Nvci5vcHRpb25zLmZyZXF1ZW5jeSAhPT0gJ01JTExJU0VDT05ETFknXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3Nvci5yZXZlcnNlKSByZXR1cm4gbmV3IFJldkZyZXF1ZW5jeVJ1bGUocHJvY2Vzc29yLCBwcm9jZXNzb3IuZW5kKTtcbiAgICByZXR1cm4gbmV3IEZyZXF1ZW5jeVJ1bGUocHJvY2Vzc29yLCBwcm9jZXNzb3Iuc3RhcnQpO1xuICB9LFxuICBub3JtYWxpemVPcHRpb25zOiAob3B0aW9ucywgbm9ybSkgPT4ge1xuICAgIGlmICghRlJFUVVFTkNJRVMuaW5jbHVkZXMob3B0aW9ucy5mcmVxdWVuY3kpKSB7XG4gICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKGBcImZyZXF1ZW5jeVwiIG11c3QgYmUgb25lIG9mICR7SlNPTi5zdHJpbmdpZnkoRlJFUVVFTkNJRVMpfWApO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5pbnRlcnZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5pbnRlcnZhbCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJpbnRlcnZhbFwiIGV4cGVjdHMgYSB3aG9sZSBudW1iZXInKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmludGVydmFsIDwgMSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImludGVydmFsXCIgY2Fubm90IGJlIGxlc3MgdGhhbiAxJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLndlZWtTdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIURhdGVBZGFwdGVyLldFRUtEQVlTLmluY2x1ZGVzKG9wdGlvbnMud2Vla1N0YXJ0KSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKFxuICAgICAgICAgIGBcIndlZWtTdGFydFwiIG11c3QgYmUgb25lIG9mICR7SlNPTi5zdHJpbmdpZnkoRGF0ZUFkYXB0ZXIuV0VFS0RBWVMpfWAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIG5vcm0uZnJlcXVlbmN5ID0gb3B0aW9ucy5mcmVxdWVuY3k7XG4gICAgbm9ybS5pbnRlcnZhbCA9IG9wdGlvbnMuaW50ZXJ2YWwgfHwgMTtcbiAgICBub3JtLndlZWtTdGFydCA9IG9wdGlvbnMud2Vla1N0YXJ0IHx8ICdNTyc7XG4gIH0sXG4gIGRlcHM6ICgpID0+IFtGcmVxdWVuY3lSdWxlTW9kdWxlXSxcbn07XG5cbmZ1bmN0aW9uIHJ1bGVPcHRpb25GaWxsZWQob3B0aW9uKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG9wdGlvbikgJiYgb3B0aW9uLmxlbmd0aCA+IDA7XG59XG5cbmNvbnN0IGZyZXFDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5jbGFzcyBSZWN1cnJlbmNlUnVsZUJhc2UgZXh0ZW5kcyBSZWN1cnJlbmNlUnVsZSB7XG4gIGNvbnN0cnVjdG9yKHByb2Nlc3Nvcikge1xuICAgIHN1cGVyKHByb2Nlc3Nvcik7XG4gICAgaWYgKCFmcmVxQ2FjaGUuaGFzKHRoaXMucHJvY2Vzc29yKSkge1xuICAgICAgZnJlcUNhY2hlLnNldCh0aGlzLnByb2Nlc3NvciwgbmV3IEZyZXF1ZW5jeVJ1bGUocHJvY2Vzc29yLCBwcm9jZXNzb3Iuc3RhcnQpKTtcbiAgICB9XG4gICAgdGhpcy5mcmVxdWVuY3kgPSBmcmVxQ2FjaGUuZ2V0KHRoaXMucHJvY2Vzc29yKTtcbiAgfVxuICB2YWxpZGF0ZURhdGUoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuZnJlcXVlbmN5LnZhbGlkYXRlRGF0ZShhcmcpO1xuICB9XG59XG5jbGFzcyBSZXZSZWN1cnJlbmNlUnVsZUJhc2UgZXh0ZW5kcyBSZWN1cnJlbmNlUnVsZSB7XG4gIGNvbnN0cnVjdG9yKHByb2Nlc3Nvcikge1xuICAgIHN1cGVyKHByb2Nlc3Nvcik7XG4gICAgaWYgKCFmcmVxQ2FjaGUuaGFzKHRoaXMucHJvY2Vzc29yKSkge1xuICAgICAgZnJlcUNhY2hlLnNldCh0aGlzLnByb2Nlc3NvciwgbmV3IFJldkZyZXF1ZW5jeVJ1bGUocHJvY2Vzc29yLCBwcm9jZXNzb3IuZW5kKSk7XG4gICAgfVxuICAgIHRoaXMuZnJlcXVlbmN5ID0gZnJlcUNhY2hlLmdldCh0aGlzLnByb2Nlc3Nvcik7XG4gIH1cbiAgdmFsaWRhdGVEYXRlKGFyZykge1xuICAgIHJldHVybiB0aGlzLmZyZXF1ZW5jeS52YWxpZGF0ZURhdGUoYXJnKTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnRhaW5zIHNoYXJlZCBsb2dpYyBmb3IgQnlIb3VyT2ZEYXksIEJ5TWludXRlT2ZIb3VyLFxuICogQnlTZWNvbmRPZk1pbnV0ZSwgYW5kIEJ5TWlsbGlzZWNvbmRPZlNlY29uZCByZXZlcnNlIHJ1bGUgcGlwZXNcbiAqL1xuY2xhc3MgUmV2QnlUaW1lT2ZVbml0UnVsZSBleHRlbmRzIFJldlJlY3VycmVuY2VSdWxlQmFzZSB7XG4gIHJ1bihkYXRlKSB7XG4gICAgLy8gZS5nLiBjb25zdCBjdXJyZW50VGltZSA9IGRhdGUuZ2V0KCdob3VyJyk7XG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBkYXRlLmdldCh0aGlzLmdyYW51bGFyaXR5KTtcbiAgICAvLyBlLmcuIGZvciAoY29uc3QgdGltZSBvZiB0aGlzLm9wdGlvbnMuYnlIb3VyT2ZEYXkpIHtcbiAgICBmb3IgKGNvbnN0IHRpbWUgb2YgdGhpcy5vcHRpb24pIHtcbiAgICAgIGlmIChjdXJyZW50VGltZSA8IHRpbWUpIGNvbnRpbnVlO1xuICAgICAgaWYgKGN1cnJlbnRUaW1lID09PSB0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgVmFsaWREYXRlVGltZShkYXRlKSk7XG4gICAgICB9XG4gICAgICAvLyBlLmcuIHJldHVybiB0aGlzLm5leHRWYWxpZERhdGUoYXJncywgZGF0ZS5lbmRHcmFudWxhcml0eSgnZGF5Jykuc2V0KCdob3VyJywgdGltZSkpO1xuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKFxuICAgICAgICBuZXcgSW52YWxpZERhdGVUaW1lKGRhdGUuZW5kR3JhbnVsYXJpdHkodGhpcy5iYXNlR3JhbnVsYXJpdHkpLnNldCh0aGlzLmdyYW51bGFyaXR5LCB0aW1lKSksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUoXG4gICAgICBuZXcgSW52YWxpZERhdGVUaW1lKFxuICAgICAgICBkYXRlXG4gICAgICAgICAgLy8gZS5nLiAuZW5kR3JhbnVsYXJpdHkoJ2RheScpXG4gICAgICAgICAgLmVuZEdyYW51bGFyaXR5KHRoaXMuYmFzZUdyYW51bGFyaXR5KVxuICAgICAgICAgIC8vIGUuZy4gLnN1YnRyYWN0KDEsICdkYXknKVxuICAgICAgICAgIC5zdWJ0cmFjdCgxLCB0aGlzLmJhc2VHcmFudWxhcml0eSlcbiAgICAgICAgICAvLyBlLmcuIC5zZXQoJ2hvdXInLCB0aGlzLm9wdGlvbnMuYnlIb3VyT2ZEYXlbMF0pO1xuICAgICAgICAgIC5zZXQodGhpcy5ncmFudWxhcml0eSwgdGhpcy5vcHRpb25bMF0pLFxuICAgICAgKSxcbiAgICApO1xuICB9XG59XG5cbmNsYXNzIFJldkJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGUgZXh0ZW5kcyBSZXZCeVRpbWVPZlVuaXRSdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmJhc2VHcmFudWxhcml0eSA9ICdzZWNvbmQnO1xuICAgIHRoaXMuZ3JhbnVsYXJpdHkgPSAnbWlsbGlzZWNvbmQnO1xuICAgIHRoaXMub3B0aW9uID0gdGhpcy5vcHRpb25zLmJ5TWlsbGlzZWNvbmRPZlNlY29uZC5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnRhaW5zIHNoYXJlZCBsb2dpYyBmb3IgQnlIb3VyT2ZEYXksIEJ5TWludXRlT2ZIb3VyLFxuICogQnlTZWNvbmRPZk1pbnV0ZSwgYW5kIEJ5TWlsbGlzZWNvbmRPZlNlY29uZCBydWxlIHBpcGVzXG4gKi9cbmNsYXNzIEJ5VGltZU9mVW5pdFJ1bGUgZXh0ZW5kcyBSZWN1cnJlbmNlUnVsZUJhc2Uge1xuICBydW4oZGF0ZSkge1xuICAgIC8vIGUuZy4gY29uc3QgY3VycmVudFRpbWUgPSBkYXRlLmdldCgnaG91cicpO1xuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gZGF0ZS5nZXQodGhpcy5ncmFudWxhcml0eSk7XG4gICAgLy8gZS5nLiBmb3IgKGNvbnN0IHRpbWUgb2YgdGhpcy5vcHRpb25zLmJ5SG91ck9mRGF5KSB7XG4gICAgZm9yIChjb25zdCB0aW1lIG9mIHRoaXMub3B0aW9uKSB7XG4gICAgICBpZiAoY3VycmVudFRpbWUgPiB0aW1lKSBjb250aW51ZTtcbiAgICAgIGlmIChjdXJyZW50VGltZSA9PT0gdGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IFZhbGlkRGF0ZVRpbWUoZGF0ZSkpO1xuICAgICAgfVxuICAgICAgLy8gZS5nLiByZXR1cm4gdGhpcy5uZXh0VmFsaWREYXRlKGFyZ3MsIGRhdGUuZ3JhbnVsYXJpdHkoJ2RheScpLnNldCgnaG91cicsIHRpbWUpKTtcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShcbiAgICAgICAgbmV3IEludmFsaWREYXRlVGltZShkYXRlLmdyYW51bGFyaXR5KHRoaXMuYmFzZUdyYW51bGFyaXR5KS5zZXQodGhpcy5ncmFudWxhcml0eSwgdGltZSkpLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKFxuICAgICAgbmV3IEludmFsaWREYXRlVGltZShcbiAgICAgICAgZGF0ZVxuICAgICAgICAgIC8vIGUuZy4gLmdyYW51bGFyaXR5KCdkYXknKVxuICAgICAgICAgIC5ncmFudWxhcml0eSh0aGlzLmJhc2VHcmFudWxhcml0eSlcbiAgICAgICAgICAvLyBlLmcuIC5hZGQoMSwgJ2RheScpXG4gICAgICAgICAgLmFkZCgxLCB0aGlzLmJhc2VHcmFudWxhcml0eSlcbiAgICAgICAgICAvLyBlLmcuIC5zZXQoJ2hvdXInLCB0aGlzLm9wdGlvbnMuYnlIb3VyT2ZEYXlbMF0pO1xuICAgICAgICAgIC5zZXQodGhpcy5ncmFudWxhcml0eSwgdGhpcy5vcHRpb25bMF0pLFxuICAgICAgKSxcbiAgICApO1xuICB9XG59XG5cbmNsYXNzIEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGUgZXh0ZW5kcyBCeVRpbWVPZlVuaXRSdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmJhc2VHcmFudWxhcml0eSA9ICdzZWNvbmQnO1xuICAgIHRoaXMuZ3JhbnVsYXJpdHkgPSAnbWlsbGlzZWNvbmQnO1xuICAgIHRoaXMub3B0aW9uID0gdGhpcy5vcHRpb25zLmJ5TWlsbGlzZWNvbmRPZlNlY29uZDtcbiAgfVxufVxuXG5jb25zdCBCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlTW9kdWxlID0ge1xuICBuYW1lOiAnQnlNaWxsaXNlY29uZE9mU2Vjb25kJyxcbiAgZ2V0OiBwcm9jZXNzb3IgPT4ge1xuICAgIGlmIChwcm9jZXNzb3Iub3B0aW9ucy5ieU1pbGxpc2Vjb25kT2ZTZWNvbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKHByb2Nlc3Nvci5yZXZlcnNlKSByZXR1cm4gbmV3IFJldkJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGUocHJvY2Vzc29yKTtcbiAgICByZXR1cm4gbmV3IEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGUocHJvY2Vzc29yKTtcbiAgfSxcbiAgbm9ybWFsaXplT3B0aW9uczogKG9wdGlvbnMsIG5vcm0pID0+IHtcbiAgICBpZiAob3B0aW9ucy5ieU1pbGxpc2Vjb25kT2ZTZWNvbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlNaWxsaXNlY29uZE9mU2Vjb25kKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5TWlsbGlzZWNvbmRPZlNlY29uZFwiIGV4cGVjdHMgYSBub24tZW1wdHkgYXJyYXknKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmJ5TWlsbGlzZWNvbmRPZlNlY29uZC5zb21lKG51bSA9PiBudW0gPCAwIHx8IG51bSA+IDk5OSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJieU1pbGxpc2Vjb25kT2ZTZWNvbmRcIiB2YWx1ZXMgbXVzdCBiZSA+PSAwICYmIDw9IDk5OScpO1xuICAgICAgfVxuICAgICAgbm9ybS5ieU1pbGxpc2Vjb25kT2ZTZWNvbmQgPSBvcHRpb25zLmJ5TWlsbGlzZWNvbmRPZlNlY29uZDtcbiAgICAgIG5vcm0uYnlNaWxsaXNlY29uZE9mU2Vjb25kLnNvcnQobnVtYmVyU29ydENvbXBhcmVyKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZnJlcXVlbmN5ICE9PSAnTUlMTElTRUNPTkRMWScpIHtcbiAgICAgIG5vcm0uYnlNaWxsaXNlY29uZE9mU2Vjb25kID0gW25vcm0uc3RhcnQuZ2V0KCdtaWxsaXNlY29uZCcpXTtcbiAgICB9XG4gIH0sXG4gIGRlcHM6ICgpID0+IFtGcmVxdWVuY3lSdWxlTW9kdWxlLCBCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlTW9kdWxlXSxcbn07XG5cbmNsYXNzIFJldkJ5U2Vjb25kT2ZNaW51dGVSdWxlIGV4dGVuZHMgUmV2QnlUaW1lT2ZVbml0UnVsZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5iYXNlR3JhbnVsYXJpdHkgPSAnbWludXRlJztcbiAgICB0aGlzLmdyYW51bGFyaXR5ID0gJ3NlY29uZCc7XG4gICAgdGhpcy5vcHRpb24gPSB0aGlzLm9wdGlvbnMuYnlTZWNvbmRPZk1pbnV0ZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxufVxuXG5jbGFzcyBCeVNlY29uZE9mTWludXRlUnVsZSBleHRlbmRzIEJ5VGltZU9mVW5pdFJ1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuYmFzZUdyYW51bGFyaXR5ID0gJ21pbnV0ZSc7XG4gICAgdGhpcy5ncmFudWxhcml0eSA9ICdzZWNvbmQnO1xuICAgIHRoaXMub3B0aW9uID0gdGhpcy5vcHRpb25zLmJ5U2Vjb25kT2ZNaW51dGU7XG4gIH1cbn1cblxuY29uc3QgQnlTZWNvbmRPZk1pbnV0ZVJ1bGVNb2R1bGUgPSB7XG4gIG5hbWU6ICdCeVNlY29uZE9mTWludXRlJyxcbiAgZ2V0OiBwcm9jZXNzb3IgPT4ge1xuICAgIGlmIChwcm9jZXNzb3Iub3B0aW9ucy5ieVNlY29uZE9mTWludXRlID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuICAgIGlmIChwcm9jZXNzb3IucmV2ZXJzZSkgcmV0dXJuIG5ldyBSZXZCeVNlY29uZE9mTWludXRlUnVsZShwcm9jZXNzb3IpO1xuICAgIHJldHVybiBuZXcgQnlTZWNvbmRPZk1pbnV0ZVJ1bGUocHJvY2Vzc29yKTtcbiAgfSxcbiAgbm9ybWFsaXplT3B0aW9uczogKG9wdGlvbnMsIG5vcm0pID0+IHtcbiAgICBpZiAob3B0aW9ucy5ieVNlY29uZE9mTWludXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghcnVsZU9wdGlvbkZpbGxlZChvcHRpb25zLmJ5U2Vjb25kT2ZNaW51dGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiYnlTZWNvbmRPZk1pbnV0ZVwiIGV4cGVjdHMgYSBub24tZW1wdHkgYXJyYXknKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmJ5U2Vjb25kT2ZNaW51dGUuc29tZShudW0gPT4gbnVtIDwgMCB8fCBudW0gPiA2MCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJieVNlY29uZE9mTWludXRlXCIgdmFsdWVzIG11c3QgYmUgPj0gMCAmJiA8PSA2MCcpO1xuICAgICAgfVxuICAgICAgbm9ybS5ieVNlY29uZE9mTWludXRlID0gb3B0aW9ucy5ieVNlY29uZE9mTWludXRlO1xuICAgICAgbm9ybS5ieVNlY29uZE9mTWludXRlLnNvcnQobnVtYmVyU29ydENvbXBhcmVyKTtcbiAgICB9IGVsc2UgaWYgKCFbJ1NFQ09ORExZJywgJ01JTExJU0VDT05ETFknXS5pbmNsdWRlcyhvcHRpb25zLmZyZXF1ZW5jeSkpIHtcbiAgICAgIG5vcm0uYnlTZWNvbmRPZk1pbnV0ZSA9IFtub3JtLnN0YXJ0LmdldCgnc2Vjb25kJyldO1xuICAgIH1cbiAgfSxcbiAgZGVwczogKCkgPT4gW0ZyZXF1ZW5jeVJ1bGVNb2R1bGUsIEJ5U2Vjb25kT2ZNaW51dGVSdWxlTW9kdWxlLCBCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlTW9kdWxlXSxcbn07XG5cbmNsYXNzIFJldkJ5TWludXRlT2ZIb3VyUnVsZSBleHRlbmRzIFJldkJ5VGltZU9mVW5pdFJ1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuYmFzZUdyYW51bGFyaXR5ID0gJ2hvdXInO1xuICAgIHRoaXMuZ3JhbnVsYXJpdHkgPSAnbWludXRlJztcbiAgICB0aGlzLm9wdGlvbiA9IHRoaXMub3B0aW9ucy5ieU1pbnV0ZU9mSG91ci5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxufVxuXG5jbGFzcyBCeU1pbnV0ZU9mSG91clJ1bGUgZXh0ZW5kcyBCeVRpbWVPZlVuaXRSdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmJhc2VHcmFudWxhcml0eSA9ICdob3VyJztcbiAgICB0aGlzLmdyYW51bGFyaXR5ID0gJ21pbnV0ZSc7XG4gICAgdGhpcy5vcHRpb24gPSB0aGlzLm9wdGlvbnMuYnlNaW51dGVPZkhvdXI7XG4gIH1cbn1cblxuY29uc3QgQnlNaW51dGVPZkhvdXJSdWxlTW9kdWxlID0ge1xuICBuYW1lOiAnQnlNaW51dGVPZkhvdXInLFxuICBnZXQ6IHByb2Nlc3NvciA9PiB7XG4gICAgaWYgKHByb2Nlc3Nvci5vcHRpb25zLmJ5TWludXRlT2ZIb3VyID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuICAgIGlmIChwcm9jZXNzb3IucmV2ZXJzZSkgcmV0dXJuIG5ldyBSZXZCeU1pbnV0ZU9mSG91clJ1bGUocHJvY2Vzc29yKTtcbiAgICByZXR1cm4gbmV3IEJ5TWludXRlT2ZIb3VyUnVsZShwcm9jZXNzb3IpO1xuICB9LFxuICBub3JtYWxpemVPcHRpb25zOiAob3B0aW9ucywgbm9ybSkgPT4ge1xuICAgIGlmIChvcHRpb25zLmJ5TWludXRlT2ZIb3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghcnVsZU9wdGlvbkZpbGxlZChvcHRpb25zLmJ5TWludXRlT2ZIb3VyKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5TWludXRlT2ZIb3VyXCIgZXhwZWN0cyBhIG5vbi1lbXB0eSBhcnJheScpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYnlNaW51dGVPZkhvdXIuc29tZShudW0gPT4gbnVtIDwgMCB8fCBudW0gPiA1OSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJieU1pbnV0ZU9mSG91clwiIHZhbHVlcyBtdXN0IGJlID49IDAgJiYgPD0gNTknKTtcbiAgICAgIH1cbiAgICAgIG5vcm0uYnlNaW51dGVPZkhvdXIgPSBvcHRpb25zLmJ5TWludXRlT2ZIb3VyO1xuICAgICAgbm9ybS5ieU1pbnV0ZU9mSG91ci5zb3J0KG51bWJlclNvcnRDb21wYXJlcik7XG4gICAgfSBlbHNlIGlmICghWydNSU5VVEVMWScsICdTRUNPTkRMWScsICdNSUxMSVNFQ09ORExZJ10uaW5jbHVkZXMob3B0aW9ucy5mcmVxdWVuY3kpKSB7XG4gICAgICBub3JtLmJ5TWludXRlT2ZIb3VyID0gW25vcm0uc3RhcnQuZ2V0KCdtaW51dGUnKV07XG4gICAgfVxuICB9LFxuICBkZXBzOiAoKSA9PiBbXG4gICAgRnJlcXVlbmN5UnVsZU1vZHVsZSxcbiAgICBCeU1pbnV0ZU9mSG91clJ1bGVNb2R1bGUsXG4gICAgQnlTZWNvbmRPZk1pbnV0ZVJ1bGVNb2R1bGUsXG4gICAgQnlNaWxsaXNlY29uZE9mU2Vjb25kUnVsZU1vZHVsZSxcbiAgXSxcbn07XG5cbmNsYXNzIFJldkJ5SG91ck9mRGF5UnVsZSBleHRlbmRzIFJldkJ5VGltZU9mVW5pdFJ1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuYmFzZUdyYW51bGFyaXR5ID0gJ2RheSc7XG4gICAgdGhpcy5ncmFudWxhcml0eSA9ICdob3VyJztcbiAgICB0aGlzLm9wdGlvbiA9IHRoaXMub3B0aW9ucy5ieUhvdXJPZkRheS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxufVxuXG5jbGFzcyBCeUhvdXJPZkRheVJ1bGUgZXh0ZW5kcyBCeVRpbWVPZlVuaXRSdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmJhc2VHcmFudWxhcml0eSA9ICdkYXknO1xuICAgIHRoaXMuZ3JhbnVsYXJpdHkgPSAnaG91cic7XG4gICAgdGhpcy5vcHRpb24gPSB0aGlzLm9wdGlvbnMuYnlIb3VyT2ZEYXk7XG4gIH1cbn1cblxuY29uc3QgQnlIb3VyT2ZEYXlSdWxlTW9kdWxlID0ge1xuICBuYW1lOiAnQnlIb3VyT2ZEYXknLFxuICBnZXQ6IHByb2Nlc3NvciA9PiB7XG4gICAgaWYgKHByb2Nlc3Nvci5vcHRpb25zLmJ5SG91ck9mRGF5ID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuICAgIGlmIChwcm9jZXNzb3IucmV2ZXJzZSkgcmV0dXJuIG5ldyBSZXZCeUhvdXJPZkRheVJ1bGUocHJvY2Vzc29yKTtcbiAgICByZXR1cm4gbmV3IEJ5SG91ck9mRGF5UnVsZShwcm9jZXNzb3IpO1xuICB9LFxuICBub3JtYWxpemVPcHRpb25zOiAob3B0aW9ucywgbm9ybSkgPT4ge1xuICAgIGlmIChvcHRpb25zLmJ5SG91ck9mRGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghcnVsZU9wdGlvbkZpbGxlZChvcHRpb25zLmJ5SG91ck9mRGF5KSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5SG91ck9mRGF5XCIgZXhwZWN0cyBhIG5vbi1lbXB0eSBhcnJheScpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYnlIb3VyT2ZEYXkuc29tZShudW0gPT4gbnVtIDwgMCB8fCBudW0gPiAyMykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJieUhvdXJPZkRheVwiIHZhbHVlcyBtdXN0IGJlID49IDAgJiYgPD0gMjMnKTtcbiAgICAgIH1cbiAgICAgIG5vcm0uYnlIb3VyT2ZEYXkgPSBvcHRpb25zLmJ5SG91ck9mRGF5O1xuICAgICAgbm9ybS5ieUhvdXJPZkRheS5zb3J0KG51bWJlclNvcnRDb21wYXJlcik7XG4gICAgfSBlbHNlIGlmIChbJ1lFQVJMWScsICdNT05USExZJywgJ1dFRUtMWScsICdEQUlMWSddLmluY2x1ZGVzKG9wdGlvbnMuZnJlcXVlbmN5KSkge1xuICAgICAgbm9ybS5ieUhvdXJPZkRheSA9IFtub3JtLnN0YXJ0LmdldCgnaG91cicpXTtcbiAgICB9XG4gIH0sXG4gIGRlcHM6ICgpID0+IFtcbiAgICBGcmVxdWVuY3lSdWxlTW9kdWxlLFxuICAgIEJ5SG91ck9mRGF5UnVsZU1vZHVsZSxcbiAgICBCeU1pbnV0ZU9mSG91clJ1bGVNb2R1bGUsXG4gICAgQnlTZWNvbmRPZk1pbnV0ZVJ1bGVNb2R1bGUsXG4gICAgQnlNaWxsaXNlY29uZE9mU2Vjb25kUnVsZU1vZHVsZSxcbiAgXSxcbn07XG5cbmZ1bmN0aW9uIGdldE5leHRXZWVrZGF5KGRhdGUsIHdlZWtkYXkpIHtcbiAgcmV0dXJuIGRhdGUuYWRkKGdldERpZmZlcmVuY2VCZXR3ZWVuV2Vla2RheXMoZGF0ZS5nZXQoJ3dlZWtkYXknKSwgd2Vla2RheSksICdkYXknKTtcbn1cblxuZnVuY3Rpb24gZ2V0TnRoV2Vla2RheU9mTW9udGgoZGF0ZSwgd2Vla2RheSwgbnRoKSB7XG4gIGxldCBiYXNlID0gZGF0ZS5zZXQoJ2RheScsIDEpO1xuICBpZiAobnRoIDwgMCkge1xuICAgIGJhc2UgPSBiYXNlLmFkZCgxLCAnbW9udGgnKTtcbiAgfVxuICBiYXNlID0gZ2V0TmV4dFdlZWtkYXkoYmFzZSwgd2Vla2RheSk7XG4gIC8vIHdoZW4gbnRoIGlzIG5lZ2F0aXZlLCBhZGRpbmcgaXQgd2lsbCBhY3QgYXMgc3VidHJhY3Rpb25cbiAgcmV0dXJuIG50aCA8IDAgPyBiYXNlLmFkZChudGgsICd3ZWVrJykgOiBiYXNlLmFkZChudGggLSAxLCAnd2VlaycpO1xufVxuXG5jbGFzcyBCeURheU9mTW9udGhSdWxlIGV4dGVuZHMgUmVjdXJyZW5jZVJ1bGVCYXNlIHtcbiAgcnVuKGRhdGUpIHtcbiAgICBjb25zdCBub3JtYWxpemVkQnlEYXlPZk1vbnRoID0gbm9ybWFsaXplQnlEYXlPZk1vbnRoKFxuICAgICAgZGF0ZSxcbiAgICAgIHRoaXMub3B0aW9ucy5ieURheU9mTW9udGgsXG4gICAgICB0aGlzLm9wdGlvbnMuYnlEYXlPZldlZWssXG4gICAgKTtcbiAgICBjb25zdCBjdXJyZW50RGF5ID0gZGF0ZS5nZXQoJ2RheScpO1xuICAgIGZvciAoY29uc3QgZGF5IG9mIG5vcm1hbGl6ZWRCeURheU9mTW9udGgpIHtcbiAgICAgIGlmIChjdXJyZW50RGF5ID4gZGF5KSBjb250aW51ZTtcbiAgICAgIGlmIChjdXJyZW50RGF5ID09PSBkYXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBWYWxpZERhdGVUaW1lKGRhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgSW52YWxpZERhdGVUaW1lKGRhdGUuZ3JhbnVsYXJpdHkoJ21vbnRoJykuc2V0KCdkYXknLCBkYXkpKSk7XG4gICAgfVxuICAgIGxldCBuZXh0O1xuICAgIGxldCBuZXh0TW9udGggPSBkYXRlO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgd2hpbGUgKCFuZXh0ICYmIGluZGV4IDwgMzApIHtcbiAgICAgIG5leHRNb250aCA9IG5leHRNb250aC5ncmFudWxhcml0eSgnbW9udGgnKS5hZGQoMSwgJ21vbnRoJyk7XG4gICAgICBuZXh0ID0gbm9ybWFsaXplQnlEYXlPZk1vbnRoKFxuICAgICAgICBuZXh0TW9udGgsXG4gICAgICAgIHRoaXMub3B0aW9ucy5ieURheU9mTW9udGgsXG4gICAgICAgIHRoaXMub3B0aW9ucy5ieURheU9mV2VlayxcbiAgICAgIClbMF07XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPj0gMTMpIHtcbiAgICAgIHRocm93IG5ldyBSZWN1cnJlbmNlUnVsZUVycm9yKCdieURheU9mTW9udGggSW5maW5pdGUgd2hpbGUgbG9vcCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IEludmFsaWREYXRlVGltZShuZXh0TW9udGguc2V0KCdkYXknLCBuZXh0KSkpO1xuICB9XG59XG4vKipcbiAqIERvZXMgYSBmZXcgdGhpbmdzOlxuICpcbiAqIDEuIGZpbHRlcnMgb3V0IGJ5RGF5T2ZNb250aCBlbnRyaWVzIHdoaWNoIGFyZSBub3QgYXBwbGljYWJsZVxuICogICAgdG8gY3VycmVudCBtb250aFxuICogMi4gbmVnYXRpdmUgZW50cmllcyB0byBwb3NpdGl2ZSBvbmVzXG4gKiAzLiBpZiBhIGJ5RGF5T2ZXZWVrIG9wdGlvbiBpcyBnaXZlbiwgcmVtb3ZlcyBkYXlzIHdoaWNoIGFyZVxuICogICAgbm90IG9uIHRoZSBjb3JyZWN0IGRheSBvZiB0aGUgd2Vla1xuICovXG5mdW5jdGlvbiBub3JtYWxpemVCeURheU9mTW9udGgoZGF0ZSwgYnlEYXlPZk1vbnRoLCBieURheU9mV2Vlaykge1xuICBjb25zdCBsZW5ndGhPZk1vbnRoID0gZGF0ZS5lbmRHcmFudWxhcml0eSgnbW9udGgnKS5nZXQoJ2RheScpO1xuICBsZXQgbm9ybWFsaXplZEJ5RGF5T2ZNb250aCA9IGJ5RGF5T2ZNb250aFxuICAgIC5maWx0ZXIoZGF5ID0+IGxlbmd0aE9mTW9udGggPj0gTWF0aC5hYnMoZGF5KSlcbiAgICAubWFwKGRheSA9PiAoZGF5ID4gMCA/IGRheSA6IGxlbmd0aE9mTW9udGggKyBkYXkgKyAxKSk7XG4gIGlmIChieURheU9mV2Vlaykge1xuICAgIGNvbnN0IGJhc2UgPSBkYXRlLmdyYW51bGFyaXR5KCdtb250aCcpO1xuICAgIGNvbnN0IGZpbHRlcmVkQnlEYXlPZk1vbnRoID0gW107XG4gICAgYnlEYXlPZldlZWsuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBmaWx0ZXJlZEJ5RGF5T2ZNb250aC5wdXNoKFxuICAgICAgICAgIC4uLm5vcm1hbGl6ZWRCeURheU9mTW9udGguZmlsdGVyKGRheSA9PiBiYXNlLnNldCgnZGF5JywgZGF5KS5nZXQoJ3dlZWtkYXknKSA9PT0gZW50cnkpLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBudGhXZWVrZGF5T2ZNb250aCA9IGdldE50aFdlZWtkYXlPZk1vbnRoKGRhdGUsIC4uLmVudHJ5KS5nZXQoJ2RheScpO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRCeURheU9mTW9udGguaW5jbHVkZXMobnRoV2Vla2RheU9mTW9udGgpKSB7XG4gICAgICAgIGZpbHRlcmVkQnlEYXlPZk1vbnRoLnB1c2gobnRoV2Vla2RheU9mTW9udGgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5vcm1hbGl6ZWRCeURheU9mTW9udGggPSBBcnJheS5mcm9tKG5ldyBTZXQoZmlsdGVyZWRCeURheU9mTW9udGgpKTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZEJ5RGF5T2ZNb250aC5zb3J0KChhLCBiKSA9PiB7XG4gICAgaWYgKGEgPiBiKSByZXR1cm4gMTtcbiAgICBpZiAoYSA8IGIpIHJldHVybiAtMTtcbiAgICBlbHNlIHJldHVybiAwO1xuICB9KTtcbn1cblxuY2xhc3MgUmV2QnlEYXlPZk1vbnRoUnVsZSBleHRlbmRzIFJldlJlY3VycmVuY2VSdWxlQmFzZSB7XG4gIHJ1bihkYXRlKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZEJ5RGF5T2ZNb250aCA9IG5vcm1hbGl6ZUJ5RGF5T2ZNb250aChcbiAgICAgIGRhdGUsXG4gICAgICB0aGlzLm9wdGlvbnMuYnlEYXlPZk1vbnRoLFxuICAgICAgdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrLFxuICAgICkucmV2ZXJzZSgpO1xuICAgIGNvbnN0IGN1cnJlbnREYXkgPSBkYXRlLmdldCgnZGF5Jyk7XG4gICAgZm9yIChjb25zdCBkYXkgb2Ygbm9ybWFsaXplZEJ5RGF5T2ZNb250aCkge1xuICAgICAgaWYgKGN1cnJlbnREYXkgPCBkYXkpIGNvbnRpbnVlO1xuICAgICAgaWYgKGN1cnJlbnREYXkgPT09IGRheSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IFZhbGlkRGF0ZVRpbWUoZGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBJbnZhbGlkRGF0ZVRpbWUoZGF0ZS5lbmRHcmFudWxhcml0eSgnbW9udGgnKS5zZXQoJ2RheScsIGRheSkpKTtcbiAgICB9XG4gICAgbGV0IG5leHQ7XG4gICAgbGV0IG5leHRNb250aCA9IGRhdGU7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB3aGlsZSAoIW5leHQgJiYgaW5kZXggPCAzMCkge1xuICAgICAgbmV4dE1vbnRoID0gbmV4dE1vbnRoLmVuZEdyYW51bGFyaXR5KCdtb250aCcpLnN1YnRyYWN0KDEsICdtb250aCcpO1xuICAgICAgbmV4dCA9IG5vcm1hbGl6ZUJ5RGF5T2ZNb250aChcbiAgICAgICAgbmV4dE1vbnRoLFxuICAgICAgICB0aGlzLm9wdGlvbnMuYnlEYXlPZk1vbnRoLFxuICAgICAgICB0aGlzLm9wdGlvbnMuYnlEYXlPZldlZWssXG4gICAgICApLnBvcCgpO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgaWYgKGluZGV4ID49IDEzKSB7XG4gICAgICB0aHJvdyBuZXcgUmVjdXJyZW5jZVJ1bGVFcnJvcignYnlEYXlPZk1vbnRoIEluZmluaXRlIHdoaWxlIGxvb3AnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBJbnZhbGlkRGF0ZVRpbWUobmV4dE1vbnRoLnNldCgnZGF5JywgbmV4dCkpKTtcbiAgfVxufVxuXG5jb25zdCBCeURheU9mTW9udGhSdWxlTW9kdWxlID0ge1xuICBuYW1lOiAnQnlEYXlPZk1vbnRoJyxcbiAgZ2V0OiBwcm9jZXNzb3IgPT4ge1xuICAgIGlmIChwcm9jZXNzb3Iub3B0aW9ucy5ieURheU9mTW9udGggPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKHByb2Nlc3Nvci5yZXZlcnNlKSByZXR1cm4gbmV3IFJldkJ5RGF5T2ZNb250aFJ1bGUocHJvY2Vzc29yKTtcbiAgICByZXR1cm4gbmV3IEJ5RGF5T2ZNb250aFJ1bGUocHJvY2Vzc29yKTtcbiAgfSxcbiAgbm9ybWFsaXplT3B0aW9uczogKG9wdGlvbnMsIG5vcm0pID0+IHtcbiAgICBpZiAob3B0aW9ucy5ieURheU9mTW9udGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG9wdGlvbnMuZnJlcXVlbmN5ID09PSAnV0VFS0xZJykge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCd3aGVuIFwiZnJlcXVlbmN5XCIgaXMgXCJXRUVLTFlcIiwgXCJieURheU9mTW9udGhcIiBjYW5ub3QgYmUgcHJlc2VudCcpO1xuICAgICAgfVxuICAgICAgaWYgKCFydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlEYXlPZk1vbnRoKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5RGF5T2ZNb250aFwiIGV4cGVjdHMgYSBub24tZW1wdHkgYXJyYXknKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmJ5RGF5T2ZNb250aC5zb21lKG51bSA9PiBudW0gPT09IDAgfHwgbnVtIDwgLTMxIHx8IG51bSA+IDMxKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKFxuICAgICAgICAgICdcImJ5RGF5T2ZNb250aFwiIHZhbHVlcyBtdXN0IGJlIGBudW0gIT09IDAgJiYgbnVtIDw9IDMxICYmIG51bSA+PSAtMzFgJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG5vcm0uYnlEYXlPZk1vbnRoID0gb3B0aW9ucy5ieURheU9mTW9udGguc2xpY2UoKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgIShydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlEYXlPZldlZWspIHx8IHJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieURheU9mWWVhcikpICYmXG4gICAgICBbJ1lFQVJMWScsICdNT05USExZJ10uaW5jbHVkZXMob3B0aW9ucy5mcmVxdWVuY3kpXG4gICAgKSB7XG4gICAgICBub3JtLmJ5RGF5T2ZNb250aCA9IFtub3JtLnN0YXJ0LmdldCgnZGF5JyldO1xuICAgIH1cbiAgfSxcbiAgZGVwczogKCkgPT4gW1xuICAgIEZyZXF1ZW5jeVJ1bGVNb2R1bGUsXG4gICAgQnlEYXlPZk1vbnRoUnVsZU1vZHVsZSxcbiAgICBCeUhvdXJPZkRheVJ1bGVNb2R1bGUsXG4gICAgQnlNaW51dGVPZkhvdXJSdWxlTW9kdWxlLFxuICAgIEJ5U2Vjb25kT2ZNaW51dGVSdWxlTW9kdWxlLFxuICAgIEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGVNb2R1bGUsXG4gIF0sXG59O1xuXG5mdW5jdGlvbiBnZXROdGhXZWVrZGF5T2ZZZWFyKGRhdGUsIHdlZWtkYXksIG50aCkge1xuICBsZXQgYmFzZSA9IGRhdGUuc2V0KCdtb250aCcsIDEpLnNldCgnZGF5JywgMSk7XG4gIGlmIChudGggPCAwKSB7XG4gICAgYmFzZSA9IGJhc2UuYWRkKDEsICd5ZWFyJyk7XG4gIH1cbiAgYmFzZSA9IGdldE5leHRXZWVrZGF5KGJhc2UsIHdlZWtkYXkpO1xuICAvLyB3aGVuIG50aCBpcyBuZWdhdGl2ZSwgYWRkaW5nIGl0IHdpbGwgYWN0IGFzIHN1YnRyYWN0aW9uXG4gIHJldHVybiBudGggPCAwID8gYmFzZS5hZGQobnRoLCAnd2VlaycpIDogYmFzZS5hZGQobnRoIC0gMSwgJ3dlZWsnKTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJldmlvdXNXZWVrZGF5KGRhdGUsIHdlZWtkYXkpIHtcbiAgY29uc3QgZGlmZiA9IGdldERpZmZlcmVuY2VCZXR3ZWVuV2Vla2RheXMoZGF0ZS5nZXQoJ3dlZWtkYXknKSwgd2Vla2RheSk7XG4gIHJldHVybiBkYXRlLnN1YnRyYWN0KGRpZmYgPT09IDAgPyAwIDogNyAtIGRpZmYsICdkYXknKTtcbn1cblxuY2xhc3MgUmV2QnlEYXlPZldlZWtSdWxlIGV4dGVuZHMgUmV2UmVjdXJyZW5jZVJ1bGVCYXNlIHtcbiAgcnVuKGRhdGUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmZyZXF1ZW5jeSA9PT0gJ1lFQVJMWScpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYnlNb250aE9mWWVhciA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gdGhpcy5leHBhbmRZZWFybHkoZGF0ZSlcbiAgICAgICAgOiB0aGlzLmV4cGFuZE1vbnRobHkoZGF0ZSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZnJlcXVlbmN5ID09PSAnTU9OVEhMWScpIHtcbiAgICAgIHJldHVybiB0aGlzLmV4cGFuZE1vbnRobHkoZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmV4cGFuZChkYXRlKTtcbiAgfVxuICBleHBhbmRZZWFybHkoZGF0ZSkge1xuICAgIGxldCBuZXh0ID0gZ2V0UHJldldlZWtkYXlzT2ZZZWFyKGRhdGUsIHRoaXMub3B0aW9ucy5ieURheU9mV2VlaylbMF07XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgYmFzZSA9IGRhdGU7XG4gICAgLy8gSWYgd2UgY2FuJ3QgZmluZCBhIHZhbGlkIGRhdGUgdGhpcyB5ZWFyLFxuICAgIC8vIHNlYXJjaCB0aGUgcHJldmlvdXMgeWVhci4gT25seSBzZWFyY2ggdGhlIHBhc3QgMjggeWVhcnMuXG4gICAgLy8gKHRoZSBjYWxlbmRhciByZXBlYXRzIG9uIGEgMjggeWVhciBjeWNsZSwgYWNjb3JkaW5nXG4gICAgLy8gdG8gdGhlIGludGVybmV0KS5cbiAgICB3aGlsZSAoIW5leHQgJiYgaW5kZXggPCAyOCkge1xuICAgICAgaW5kZXgrKztcbiAgICAgIGJhc2UgPSBiYXNlLmdyYW51bGFyaXR5KCd5ZWFyJykuc3VidHJhY3QoMSwgJ21pbGxpc2Vjb25kJyk7XG4gICAgICBuZXh0ID0gZ2V0UHJldldlZWtkYXlzT2ZZZWFyKGJhc2UsIHRoaXMub3B0aW9ucy5ieURheU9mV2VlaylbMF07XG4gICAgfVxuICAgIGlmICghbmV4dCkge1xuICAgICAgdGhyb3cgbmV3IFJlY3VycmVuY2VSdWxlRXJyb3IoXG4gICAgICAgICdUaGUgYnlEYXlPZldlZWsgcnVsZSBhcHBlYXJzIHRvIGNvbnRhaW4gYW4gaW1wb3NzaWJsZSBjb21iaW5hdGlvbicsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZXN1bHQoZGF0ZSwgbmV4dCk7XG4gIH1cbiAgZXhwYW5kTW9udGhseShkYXRlKSB7XG4gICAgbGV0IG5leHQgPSBnZXRQcmV2V2Vla2RheXNPZk1vbnRoKGRhdGUsIHRoaXMub3B0aW9ucy5ieURheU9mV2VlaylbMF07XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgYmFzZSA9IGRhdGU7XG4gICAgLy8gVE9ETzogcGVyZm9ybWFuY2UgaW1wcm92bWVudFxuICAgIC8vIElmLCBpbiB0aGUgZmlyc3QgeWVhciwgYSBtYXRjaCBpc24ndCBmb3VuZCwgd2Ugc2hvdWxkIGJlIGFibGUgdG9cbiAgICAvLyBqdW1wdCB0byB0aGUgcHJldmlvdXMgbGVhcCB5ZWFyIGFuZCBjaGVjayB0aGF0LiBPciwgaWYgYWxyZWFkeSBvblxuICAgIC8vIGEgbGVhcCB5ZWFyLCB3ZSBjYW4ganVzdCBlcnJvciBpbW1lZGlhdGVseS5cbiAgICAvLyBJZiB3ZSBjYW4ndCBmaW5kIGEgdmFsaWQgZGF0ZSB0aGlzIG1vbnRoLFxuICAgIC8vIHNlYXJjaCB0aGUgcHJldmlvdXMgbW9udGguIE9ubHkgc2VhcmNoIHRoZSBwYXN0IDQgeWVhcnNcbiAgICAvLyAodG8gYWNjb3VudCBmb3IgbGVhcCB5ZWFyKS5cbiAgICB3aGlsZSAoIW5leHQgJiYgaW5kZXggPCA1MCkge1xuICAgICAgaW5kZXgrKztcbiAgICAgIGJhc2UgPSBiYXNlLmdyYW51bGFyaXR5KCdtb250aCcpLnN1YnRyYWN0KDEsICdtaWxsaXNlY29uZCcpO1xuICAgICAgbmV4dCA9IGdldFByZXZXZWVrZGF5c09mTW9udGgoYmFzZSwgdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrKVswXTtcbiAgICB9XG4gICAgaWYgKCFuZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgUmVjdXJyZW5jZVJ1bGVFcnJvcihcbiAgICAgICAgJ1RoZSBieURheU9mV2VlayBydWxlIGFwcGVhcnMgdG8gY29udGFpbiBhbiBpbXBvc3NpYmxlIGNvbWJpbmF0aW9uJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlc3VsdChkYXRlLCBuZXh0KTtcbiAgfVxuICBleHBhbmQoZGF0ZSkge1xuICAgIGNvbnN0IG5leHQgPSB0aGlzLm9wdGlvbnMuYnlEYXlPZldlZWtcbiAgICAgIC5tYXAod2Vla2RheSA9PiBnZXRQcmV2aW91c1dlZWtkYXkoZGF0ZSwgd2Vla2RheSkpXG4gICAgICAuc29ydChkYXRlVGltZVNvcnRDb21wYXJlcilcbiAgICAgIC5wb3AoKTtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQoZGF0ZSwgbmV4dCk7XG4gIH1cbiAgcmVzdWx0KGRhdGUsIG5leHQpIHtcbiAgICBpZiAobmV4dC5pc0VxdWFsKGRhdGUpKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IFZhbGlkRGF0ZVRpbWUoZGF0ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IEludmFsaWREYXRlVGltZShuZXh0LmVuZEdyYW51bGFyaXR5KCdkYXknKSkpO1xuICB9XG59XG4vKiogRm9yIGVhY2ggYnlEYXlPZldlZWsgZW50cnksIGZpbmQgdGhlIHByZXZpb3VzIERhdGVUaW1lICovXG5mdW5jdGlvbiBnZXRQcmV2V2Vla2RheXNPZlllYXIoZGF0ZSwgYnlEYXlPZldlZWspIHtcbiAgY29uc3Qgbm9ybWFsaXplZE50aFdlZWtkYXlzT2ZZZWFyID0gYnlEYXlPZldlZWtcbiAgICAuZmlsdGVyKGVudHJ5ID0+IEFycmF5LmlzQXJyYXkoZW50cnkpKVxuICAgIC5tYXAoZW50cnkgPT4gZ2V0TnRoV2Vla2RheU9mWWVhcihkYXRlLCAuLi5lbnRyeSkpO1xuICBjb25zdCBub3JtYWxpemVkTmV4dFdlZWtkYXlzID0gYnlEYXlPZldlZWtcbiAgICAuZmlsdGVyKGVudHJ5ID0+IHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycpXG4gICAgLm1hcCh3ZWVrZGF5ID0+IGdldFByZXZpb3VzV2Vla2RheShkYXRlLCB3ZWVrZGF5KSlcbiAgICAuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmdldCgneWVhcicpID09PSBkYXRlLmdldCgneWVhcicpKTtcbiAgcmV0dXJuIHVuaXFEYXRlVGltZXMoWy4uLm5vcm1hbGl6ZWROdGhXZWVrZGF5c09mWWVhciwgLi4ubm9ybWFsaXplZE5leHRXZWVrZGF5c10pXG4gICAgLmZpbHRlcihlbnRyeSA9PiBlbnRyeS5pc0JlZm9yZU9yRXF1YWwoZGF0ZSkpXG4gICAgLnNvcnQoZGF0ZVRpbWVTb3J0Q29tcGFyZXIpXG4gICAgLnJldmVyc2UoKTtcbn1cbi8qKiBGb3IgZWFjaCBieURheU9mV2VlayBlbnRyeSwgZmluZCB0aGUgcHJldmlvdXMgRGF0ZVRpbWUgKi9cbmZ1bmN0aW9uIGdldFByZXZXZWVrZGF5c09mTW9udGgoZGF0ZSwgYnlEYXlPZldlZWspIHtcbiAgY29uc3Qgbm9ybWFsaXplZE50aFdlZWtkYXlzT2ZNb250aCA9IGJ5RGF5T2ZXZWVrXG4gICAgLmZpbHRlcihlbnRyeSA9PiBBcnJheS5pc0FycmF5KGVudHJ5KSlcbiAgICAubWFwKGVudHJ5ID0+IGdldE50aFdlZWtkYXlPZk1vbnRoKGRhdGUsIC4uLmVudHJ5KSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWROZXh0V2Vla2RheXMgPSBieURheU9mV2Vla1xuICAgIC5maWx0ZXIoZW50cnkgPT4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJylcbiAgICAubWFwKHdlZWtkYXkgPT4gZ2V0UHJldmlvdXNXZWVrZGF5KGRhdGUsIHdlZWtkYXkpKVxuICAgIC5maWx0ZXIoXG4gICAgICBlbnRyeSA9PiBlbnRyeS5nZXQoJ3llYXInKSA9PT0gZGF0ZS5nZXQoJ3llYXInKSAmJiBlbnRyeS5nZXQoJ21vbnRoJykgPT09IGRhdGUuZ2V0KCdtb250aCcpLFxuICAgICk7XG4gIHJldHVybiB1bmlxRGF0ZVRpbWVzKFsuLi5ub3JtYWxpemVkTnRoV2Vla2RheXNPZk1vbnRoLCAuLi5ub3JtYWxpemVkTmV4dFdlZWtkYXlzXSlcbiAgICAuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmlzQmVmb3JlT3JFcXVhbChkYXRlKSlcbiAgICAuc29ydChkYXRlVGltZVNvcnRDb21wYXJlcilcbiAgICAucmV2ZXJzZSgpO1xufVxuXG5jbGFzcyBCeURheU9mV2Vla1J1bGUgZXh0ZW5kcyBSZWN1cnJlbmNlUnVsZUJhc2Uge1xuICBydW4oZGF0ZSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZnJlcXVlbmN5ID09PSAnWUVBUkxZJykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ieU1vbnRoT2ZZZWFyID09PSB1bmRlZmluZWRcbiAgICAgICAgPyB0aGlzLmV4cGFuZFllYXJseShkYXRlKVxuICAgICAgICA6IHRoaXMuZXhwYW5kTW9udGhseShkYXRlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5mcmVxdWVuY3kgPT09ICdNT05USExZJykge1xuICAgICAgcmV0dXJuIHRoaXMuZXhwYW5kTW9udGhseShkYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZXhwYW5kKGRhdGUpO1xuICB9XG4gIGV4cGFuZFllYXJseShkYXRlKSB7XG4gICAgbGV0IG5leHQgPSBnZXROZXh0V2Vla2RheXNPZlllYXIoZGF0ZSwgdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrKVswXTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGxldCBiYXNlID0gZGF0ZTtcbiAgICAvLyBJZiB3ZSBjYW4ndCBmaW5kIGEgdmFsaWQgZGF0ZSB0aGlzIHllYXIsXG4gICAgLy8gc2VhcmNoIG5leHQgeWVhci4gT25seSBzZWFyY2ggdGhlIG5leHQgMjggeWVhcnMuXG4gICAgLy8gKHRoZSBjYWxlbmRhciByZXBlYXRzIG9uIGEgMjggeWVhciBjeWNsZSwgYWNjb3JkaW5nXG4gICAgLy8gdG8gdGhlIGludGVybmV0KS5cbiAgICB3aGlsZSAoIW5leHQgJiYgaW5kZXggPCAyOCkge1xuICAgICAgaW5kZXgrKztcbiAgICAgIGJhc2UgPSBiYXNlLmdyYW51bGFyaXR5KCd5ZWFyJykuYWRkKDEsICd5ZWFyJyk7XG4gICAgICBuZXh0ID0gZ2V0TmV4dFdlZWtkYXlzT2ZZZWFyKGJhc2UsIHRoaXMub3B0aW9ucy5ieURheU9mV2VlaylbMF07XG4gICAgfVxuICAgIGlmICghbmV4dCkge1xuICAgICAgdGhyb3cgbmV3IFJlY3VycmVuY2VSdWxlRXJyb3IoXG4gICAgICAgICdUaGUgYnlEYXlPZldlZWsgcnVsZSBhcHBlYXJzIHRvIGNvbnRhaW4gYW4gaW1wb3NzaWJsZSBjb21iaW5hdGlvbicsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZXN1bHQoZGF0ZSwgbmV4dCk7XG4gIH1cbiAgZXhwYW5kTW9udGhseShkYXRlKSB7XG4gICAgbGV0IG5leHQgPSBnZXROZXh0V2Vla2RheXNPZk1vbnRoKGRhdGUsIHRoaXMub3B0aW9ucy5ieURheU9mV2VlaylbMF07XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgYmFzZSA9IGRhdGU7XG4gICAgLy8gVE9ETzogcGVyZm9ybWFuY2UgaW1wcm92bWVudFxuICAgIC8vIElmLCBpbiB0aGUgZmlyc3QgeWVhciwgYSBtYXRjaCBpc24ndCBmb3VuZCwgd2Ugc2hvdWxkIGJlIGFibGUgdG9cbiAgICAvLyBqdW1wdCB0byB0aGUgbmV4dCBsZWFwIHllYXIgYW5kIGNoZWNrIHRoYXQuIE9yLCBpZiBhbHJlYWR5IG9uXG4gICAgLy8gYSBsZWFwIHllYXIsIHdlIGNhbiBqdXN0IGVycm9yIGltbWVkaWF0ZWx5LlxuICAgIC8vIElmIHdlIGNhbid0IGZpbmQgYSB2YWxpZCBkYXRlIHRoaXMgbW9udGgsXG4gICAgLy8gc2VhcmNoIHRoZSBuZXh0IG1vbnRoLiBPbmx5IHNlYXJjaCB0aGUgbmV4dCA0IHllYXJzXG4gICAgLy8gKHRvIGFjY291bnQgZm9yIGxlYXAgeWVhcikuXG4gICAgd2hpbGUgKCFuZXh0ICYmIGluZGV4IDwgNTApIHtcbiAgICAgIGluZGV4Kys7XG4gICAgICBiYXNlID0gYmFzZS5ncmFudWxhcml0eSgnbW9udGgnKS5hZGQoMSwgJ21vbnRoJyk7XG4gICAgICBuZXh0ID0gZ2V0TmV4dFdlZWtkYXlzT2ZNb250aChiYXNlLCB0aGlzLm9wdGlvbnMuYnlEYXlPZldlZWspWzBdO1xuICAgIH1cbiAgICBpZiAoIW5leHQpIHtcbiAgICAgIHRocm93IG5ldyBSZWN1cnJlbmNlUnVsZUVycm9yKFxuICAgICAgICAnVGhlIGJ5RGF5T2ZXZWVrIHJ1bGUgYXBwZWFycyB0byBjb250YWluIGFuIGltcG9zc2libGUgY29tYmluYXRpb24nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0KGRhdGUsIG5leHQpO1xuICB9XG4gIGV4cGFuZChkYXRlKSB7XG4gICAgY29uc3QgbmV4dCA9IHRoaXMub3B0aW9ucy5ieURheU9mV2Vla1xuICAgICAgLm1hcCh3ZWVrZGF5ID0+IGdldE5leHRXZWVrZGF5KGRhdGUsIHdlZWtkYXkpKVxuICAgICAgLnNvcnQoZGF0ZVRpbWVTb3J0Q29tcGFyZXIpWzBdO1xuICAgIHJldHVybiB0aGlzLnJlc3VsdChkYXRlLCBuZXh0KTtcbiAgfVxuICByZXN1bHQoZGF0ZSwgbmV4dCkge1xuICAgIGlmIChuZXh0LmlzRXF1YWwoZGF0ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgVmFsaWREYXRlVGltZShkYXRlKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgSW52YWxpZERhdGVUaW1lKG5leHQuZ3JhbnVsYXJpdHkoJ2RheScpKSk7XG4gIH1cbn1cbi8qKiBGb3IgZWFjaCBieURheU9mV2VlayBlbnRyeSwgZmluZCB0aGUgbmV4dCBEYXRlVGltZSAqL1xuZnVuY3Rpb24gZ2V0TmV4dFdlZWtkYXlzT2ZZZWFyKGRhdGUsIGJ5RGF5T2ZXZWVrKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWROdGhXZWVrZGF5c09mWWVhciA9IGJ5RGF5T2ZXZWVrXG4gICAgLmZpbHRlcihlbnRyeSA9PiBBcnJheS5pc0FycmF5KGVudHJ5KSlcbiAgICAubWFwKGVudHJ5ID0+IGdldE50aFdlZWtkYXlPZlllYXIoZGF0ZSwgLi4uZW50cnkpKTtcbiAgY29uc3Qgbm9ybWFsaXplZE5leHRXZWVrZGF5cyA9IGJ5RGF5T2ZXZWVrXG4gICAgLmZpbHRlcihlbnRyeSA9PiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKVxuICAgIC5tYXAod2Vla2RheSA9PiBnZXROZXh0V2Vla2RheShkYXRlLCB3ZWVrZGF5KSlcbiAgICAuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmdldCgneWVhcicpID09PSBkYXRlLmdldCgneWVhcicpKTtcbiAgcmV0dXJuIHVuaXFEYXRlVGltZXMoWy4uLm5vcm1hbGl6ZWROdGhXZWVrZGF5c09mWWVhciwgLi4ubm9ybWFsaXplZE5leHRXZWVrZGF5c10pXG4gICAgLmZpbHRlcihlbnRyeSA9PiBlbnRyeS5pc0FmdGVyT3JFcXVhbChkYXRlKSlcbiAgICAuc29ydChkYXRlVGltZVNvcnRDb21wYXJlcik7XG59XG4vKiogRm9yIGVhY2ggYnlEYXlPZldlZWsgZW50cnksIGZpbmQgdGhlIG5leHQgRGF0ZVRpbWUgKi9cbmZ1bmN0aW9uIGdldE5leHRXZWVrZGF5c09mTW9udGgoZGF0ZSwgYnlEYXlPZldlZWspIHtcbiAgY29uc3Qgbm9ybWFsaXplZE50aFdlZWtkYXlzT2ZNb250aCA9IGJ5RGF5T2ZXZWVrXG4gICAgLmZpbHRlcihlbnRyeSA9PiBBcnJheS5pc0FycmF5KGVudHJ5KSlcbiAgICAubWFwKGVudHJ5ID0+IGdldE50aFdlZWtkYXlPZk1vbnRoKGRhdGUsIC4uLmVudHJ5KSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWROZXh0V2Vla2RheXMgPSBieURheU9mV2Vla1xuICAgIC5maWx0ZXIoZW50cnkgPT4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJylcbiAgICAubWFwKHdlZWtkYXkgPT4gZ2V0TmV4dFdlZWtkYXkoZGF0ZSwgd2Vla2RheSkpXG4gICAgLmZpbHRlcihcbiAgICAgIGVudHJ5ID0+IGVudHJ5LmdldCgneWVhcicpID09PSBkYXRlLmdldCgneWVhcicpICYmIGVudHJ5LmdldCgnbW9udGgnKSA9PT0gZGF0ZS5nZXQoJ21vbnRoJyksXG4gICAgKTtcbiAgcmV0dXJuIHVuaXFEYXRlVGltZXMoWy4uLm5vcm1hbGl6ZWROdGhXZWVrZGF5c09mTW9udGgsIC4uLm5vcm1hbGl6ZWROZXh0V2Vla2RheXNdKVxuICAgIC5maWx0ZXIoZW50cnkgPT4gZW50cnkuaXNBZnRlck9yRXF1YWwoZGF0ZSkpXG4gICAgLnNvcnQoZGF0ZVRpbWVTb3J0Q29tcGFyZXIpO1xufVxuXG5jb25zdCBCeURheU9mV2Vla1J1bGVNb2R1bGUgPSB7XG4gIG5hbWU6ICdCeURheU9mV2VlaycsXG4gIGdldDogcHJvY2Vzc29yID0+IHtcbiAgICBpZiAocHJvY2Vzc29yLm9wdGlvbnMuYnlEYXlPZldlZWsgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKHByb2Nlc3Nvci5yZXZlcnNlKSByZXR1cm4gbmV3IFJldkJ5RGF5T2ZXZWVrUnVsZShwcm9jZXNzb3IpO1xuICAgIHJldHVybiBuZXcgQnlEYXlPZldlZWtSdWxlKHByb2Nlc3Nvcik7XG4gIH0sXG4gIG5vcm1hbGl6ZU9wdGlvbnM6IChvcHRpb25zLCBub3JtKSA9PiB7XG4gICAgaWYgKG9wdGlvbnMuYnlEYXlPZldlZWsgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlEYXlPZldlZWspKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiYnlEYXlPZldlZWtcIiBleHBlY3RzIGEgbm9uLWVtcHR5IGFycmF5Jyk7XG4gICAgICB9XG4gICAgICBjb25zdCBpbnZhbGlkV2VlZGF5ID0gb3B0aW9ucy5ieURheU9mV2Vlay5maW5kKGRheSA9PlxuICAgICAgICBBcnJheS5pc0FycmF5KGRheSlcbiAgICAgICAgICA/ICFEYXRlQWRhcHRlci5XRUVLREFZUy5pbmNsdWRlcyhkYXlbMF0pXG4gICAgICAgICAgOiAhRGF0ZUFkYXB0ZXIuV0VFS0RBWVMuaW5jbHVkZXMoZGF5KSxcbiAgICAgICk7XG4gICAgICBpZiAoaW52YWxpZFdlZWRheSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKFxuICAgICAgICAgIGBcImJ5RGF5T2ZXZWVrXCIgZXhwZWN0cyB3ZWVkYXlzIGluIHRoZSBmb3JtIGAgK1xuICAgICAgICAgICAgYCR7SlNPTi5zdHJpbmdpZnkoRGF0ZUFkYXB0ZXIuV0VFS0RBWVMpfSBidXQgXCIke2ludmFsaWRXZWVkYXl9XCIgd2FzIHByb3ZpZGVkYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgIVsnWUVBUkxZJywgJ01PTlRITFknXS5pbmNsdWRlcyhvcHRpb25zLmZyZXF1ZW5jeSkgJiZcbiAgICAgICAgb3B0aW9ucy5ieURheU9mV2Vlay5zb21lKHdlZWtkYXkgPT4gQXJyYXkuaXNBcnJheSh3ZWVrZGF5KSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKFxuICAgICAgICAgICdcImJ5RGF5T2ZXZWVrXCIgY2FuIG9ubHkgaW5jbHVkZSBhIG51bWVyaWMgdmFsdWUgKGkuZS4gYFtzdHJpbmcsIG51bWJlcl1gKSB3aGVuIHRoZSBcImZyZXF1ZW5jeVwiIGlzICcgK1xuICAgICAgICAgICAgJ2VpdGhlciBcIk1PTlRITFlcIiBvciBcIllFQVJMWVwiJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgb3B0aW9ucy5mcmVxdWVuY3kgPT09ICdNT05USExZJyAmJlxuICAgICAgICBvcHRpb25zLmJ5RGF5T2ZXZWVrLnNvbWUoXG4gICAgICAgICAgd2Vla2RheSA9PlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh3ZWVrZGF5KSAmJiAod2Vla2RheVsxXSA8IC0zMSB8fCB3ZWVrZGF5WzFdID09PSAwIHx8IHdlZWtkYXlbMV0gPiAzMSksXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKFxuICAgICAgICAgICd3aGVuIFwiZnJlcXVlbmN5XCIgaXMgXCJNT05USExZXCIsIGVhY2ggXCJieURheU9mV2Vla1wiIGNhbiBvcHRpb25hbGx5IG9ubHknICtcbiAgICAgICAgICAgICcgaGF2ZSBhIG51bWVyaWMgdmFsdWUgPj0gLTMxIGFuZCA8PSAzMSBhbmQgIT09IDAnLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBvcHRpb25zLmZyZXF1ZW5jeSA9PT0gJ1lFQVJMWScgJiZcbiAgICAgICAgb3B0aW9ucy5ieURheU9mV2Vlay5zb21lKFxuICAgICAgICAgIHdlZWtkYXkgPT5cbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkod2Vla2RheSkgJiYgKHdlZWtkYXlbMV0gPCAtMzY2IHx8IHdlZWtkYXlbMV0gPT09IDAgfHwgd2Vla2RheVsxXSA+IDM2NiksXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKFxuICAgICAgICAgICd3aGVuIFwiZnJlcXVlbmN5XCIgaXMgXCJZRUFSTFlcIiwgZWFjaCBcImJ5RGF5T2ZXZWVrXCIgY2FuIG9wdGlvbmFsbHkgb25seScgK1xuICAgICAgICAgICAgJyBoYXZlIGEgbnVtZXJpYyB2YWx1ZSA+PSAtMzY2IGFuZCA8PSAzNjYgYW5kICE9PSAwJyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG5vcm0uYnlEYXlPZldlZWsgPSBvcHRpb25zLmJ5RGF5T2ZXZWVrO1xuICAgIH0gZWxzZSBpZiAoIXJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieURheU9mTW9udGgpICYmIG9wdGlvbnMuZnJlcXVlbmN5ID09PSAnV0VFS0xZJykge1xuICAgICAgbm9ybS5ieURheU9mV2VlayA9IFtub3JtLnN0YXJ0LmdldCgnd2Vla2RheScpXTtcbiAgICB9XG4gIH0sXG4gIGRlcHM6ICgpID0+IFtcbiAgICBGcmVxdWVuY3lSdWxlTW9kdWxlLFxuICAgIEJ5RGF5T2ZXZWVrUnVsZU1vZHVsZSxcbiAgICBCeUhvdXJPZkRheVJ1bGVNb2R1bGUsXG4gICAgQnlNaW51dGVPZkhvdXJSdWxlTW9kdWxlLFxuICAgIEJ5U2Vjb25kT2ZNaW51dGVSdWxlTW9kdWxlLFxuICAgIEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGVNb2R1bGUsXG4gIF0sXG59O1xuXG5jbGFzcyBSZXZCeU1vbnRoT2ZZZWFyUnVsZSBleHRlbmRzIFJldlJlY3VycmVuY2VSdWxlQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5vcHRpb24gPSB0aGlzLnByb2Nlc3Nvci5vcHRpb25zLmJ5TW9udGhPZlllYXIuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cbiAgcnVuKGRhdGUpIHtcbiAgICBjb25zdCBjdXJyZW50TW9udGggPSBkYXRlLmdldCgnbW9udGgnKTtcbiAgICBmb3IgKGNvbnN0IG1vbnRoIG9mIHRoaXMub3B0aW9uKSB7XG4gICAgICBpZiAoY3VycmVudE1vbnRoIDwgbW9udGgpIGNvbnRpbnVlO1xuICAgICAgaWYgKGN1cnJlbnRNb250aCA9PT0gbW9udGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBWYWxpZERhdGVUaW1lKGRhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShcbiAgICAgICAgbmV3IEludmFsaWREYXRlVGltZShkYXRlLmVuZEdyYW51bGFyaXR5KCd5ZWFyJykuc2V0KCdtb250aCcsIG1vbnRoKSksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUoXG4gICAgICBuZXcgSW52YWxpZERhdGVUaW1lKFxuICAgICAgICBkYXRlXG4gICAgICAgICAgLmVuZEdyYW51bGFyaXR5KCd5ZWFyJylcbiAgICAgICAgICAuc3VidHJhY3QoMSwgJ3llYXInKVxuICAgICAgICAgIC5zZXQoJ21vbnRoJywgdGhpcy5vcHRpb25bMF0pLFxuICAgICAgKSxcbiAgICApO1xuICB9XG59XG5cbmNsYXNzIEJ5TW9udGhPZlllYXJSdWxlIGV4dGVuZHMgUmVjdXJyZW5jZVJ1bGVCYXNlIHtcbiAgcnVuKGRhdGUpIHtcbiAgICBjb25zdCBjdXJyZW50TW9udGggPSBkYXRlLmdldCgnbW9udGgnKTtcbiAgICBmb3IgKGNvbnN0IG1vbnRoIG9mIHRoaXMub3B0aW9ucy5ieU1vbnRoT2ZZZWFyKSB7XG4gICAgICBpZiAoY3VycmVudE1vbnRoID4gbW9udGgpIGNvbnRpbnVlO1xuICAgICAgaWYgKGN1cnJlbnRNb250aCA9PT0gbW9udGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBWYWxpZERhdGVUaW1lKGRhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgSW52YWxpZERhdGVUaW1lKGRhdGUuZ3JhbnVsYXJpdHkoJ3llYXInKS5zZXQoJ21vbnRoJywgbW9udGgpKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShcbiAgICAgIG5ldyBJbnZhbGlkRGF0ZVRpbWUoXG4gICAgICAgIGRhdGVcbiAgICAgICAgICAuZ3JhbnVsYXJpdHkoJ3llYXInKVxuICAgICAgICAgIC5hZGQoMSwgJ3llYXInKVxuICAgICAgICAgIC5zZXQoJ21vbnRoJywgdGhpcy5vcHRpb25zLmJ5TW9udGhPZlllYXJbMF0pLFxuICAgICAgKSxcbiAgICApO1xuICB9XG59XG5cbmNvbnN0IEJ5TW9udGhPZlllYXJSdWxlTW9kdWxlID0ge1xuICBuYW1lOiAnQnlNb250aE9mWWVhcicsXG4gIGdldDogcHJvY2Vzc29yID0+IHtcbiAgICBpZiAocHJvY2Vzc29yLm9wdGlvbnMuYnlNb250aE9mWWVhciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcbiAgICBpZiAocHJvY2Vzc29yLnJldmVyc2UpIHtcbiAgICAgIHJldHVybiBuZXcgUmV2QnlNb250aE9mWWVhclJ1bGUocHJvY2Vzc29yKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCeU1vbnRoT2ZZZWFyUnVsZShwcm9jZXNzb3IpO1xuICB9LFxuICBub3JtYWxpemVPcHRpb25zOiAob3B0aW9ucywgbm9ybSkgPT4ge1xuICAgIGlmIChvcHRpb25zLmJ5TW9udGhPZlllYXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlNb250aE9mWWVhcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJieU1vbnRoT2ZZZWFyXCIgZXhwZWN0cyBhIG5vbi1lbXB0eSBhcnJheScpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYnlNb250aE9mWWVhci5zb21lKG51bSA9PiBudW0gPCAxIHx8IG51bSA+IDEyKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5TW9udGhPZlllYXJcIiB2YWx1ZXMgbXVzdCBiZSBgbnVtID49IDEgJiYgbnVtID49IDEyYCcpO1xuICAgICAgfVxuICAgICAgbm9ybS5ieU1vbnRoT2ZZZWFyID0gb3B0aW9ucy5ieU1vbnRoT2ZZZWFyLnNsaWNlKCk7XG4gICAgICBub3JtLmJ5TW9udGhPZlllYXIuc29ydChudW1iZXJTb3J0Q29tcGFyZXIpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAhKFxuICAgICAgICBydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlEYXlPZk1vbnRoKSB8fFxuICAgICAgICBydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlEYXlPZldlZWspIHx8XG4gICAgICAgIHJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieURheU9mWWVhcilcbiAgICAgICkgJiZcbiAgICAgIG9wdGlvbnMuZnJlcXVlbmN5ID09PSAnWUVBUkxZJ1xuICAgICkge1xuICAgICAgbm9ybS5ieU1vbnRoT2ZZZWFyID0gW25vcm0uc3RhcnQuZ2V0KCdtb250aCcpXTtcbiAgICB9XG4gIH0sXG4gIGRlcHM6ICgpID0+IFtcbiAgICBGcmVxdWVuY3lSdWxlTW9kdWxlLFxuICAgIEJ5TW9udGhPZlllYXJSdWxlTW9kdWxlLFxuICAgIEJ5RGF5T2ZNb250aFJ1bGVNb2R1bGUsXG4gICAgQnlIb3VyT2ZEYXlSdWxlTW9kdWxlLFxuICAgIEJ5TWludXRlT2ZIb3VyUnVsZU1vZHVsZSxcbiAgICBCeVNlY29uZE9mTWludXRlUnVsZU1vZHVsZSxcbiAgICBCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlTW9kdWxlLFxuICBdLFxufTtcblxuY29uc3QgSUNBTF9SVUxFUyA9IFtcbiAgRnJlcXVlbmN5UnVsZU1vZHVsZSxcbiAgQnlNb250aE9mWWVhclJ1bGVNb2R1bGUsXG4gIEJ5RGF5T2ZNb250aFJ1bGVNb2R1bGUsXG4gIEJ5RGF5T2ZXZWVrUnVsZU1vZHVsZSxcbiAgQnlIb3VyT2ZEYXlSdWxlTW9kdWxlLFxuICBCeU1pbnV0ZU9mSG91clJ1bGVNb2R1bGUsXG4gIEJ5U2Vjb25kT2ZNaW51dGVSdWxlTW9kdWxlLFxuICBCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlTW9kdWxlLFxuXTtcblxuZXhwb3J0IHtcbiAgQnlEYXlPZk1vbnRoUnVsZSxcbiAgQnlEYXlPZk1vbnRoUnVsZU1vZHVsZSxcbiAgQnlEYXlPZldlZWtSdWxlLFxuICBCeURheU9mV2Vla1J1bGVNb2R1bGUsXG4gIEJ5SG91ck9mRGF5UnVsZSxcbiAgQnlIb3VyT2ZEYXlSdWxlTW9kdWxlLFxuICBCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlLFxuICBCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlTW9kdWxlLFxuICBCeU1pbnV0ZU9mSG91clJ1bGUsXG4gIEJ5TWludXRlT2ZIb3VyUnVsZU1vZHVsZSxcbiAgQnlNb250aE9mWWVhclJ1bGUsXG4gIEJ5TW9udGhPZlllYXJSdWxlTW9kdWxlLFxuICBCeVNlY29uZE9mTWludXRlUnVsZSxcbiAgQnlTZWNvbmRPZk1pbnV0ZVJ1bGVNb2R1bGUsXG4gIEZyZXF1ZW5jeVJ1bGUsXG4gIEZyZXF1ZW5jeVJ1bGVNb2R1bGUsXG4gIElDQUxfUlVMRVMsXG4gIFJldkJ5RGF5T2ZNb250aFJ1bGUsXG4gIFJldkJ5RGF5T2ZXZWVrUnVsZSxcbiAgUmV2QnlIb3VyT2ZEYXlSdWxlLFxuICBSZXZCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlLFxuICBSZXZCeU1pbnV0ZU9mSG91clJ1bGUsXG4gIFJldkJ5TW9udGhPZlllYXJSdWxlLFxuICBSZXZCeVNlY29uZE9mTWludXRlUnVsZSxcbiAgUmV2RnJlcXVlbmN5UnVsZSxcbiAgZ2V0UHJldldlZWtkYXlzT2ZNb250aCxcbiAgZ2V0UHJldldlZWtkYXlzT2ZZZWFyLFxufTtcbiIsImltcG9ydCB7IERhdGVBZGFwdGVyQmFzZSwgSW52YWxpZERhdGVBZGFwdGVyRXJyb3IsIEFyZ3VtZW50RXJyb3IgfSBmcm9tICdAcnNjaGVkdWxlL2NvcmUnO1xuXG5jbGFzcyBTdGFuZGFyZERhdGVBZGFwdGVyIGV4dGVuZHMgRGF0ZUFkYXB0ZXJCYXNlIHtcbiAgY29uc3RydWN0b3IoZGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIodW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICBpZiAoIVsnVVRDJywgbnVsbCwgdW5kZWZpbmVkXS5pbmNsdWRlcyhvcHRpb25zLnRpbWV6b25lKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlQWRhcHRlckVycm9yKFxuICAgICAgICBgU3RhbmRhcmREYXRlQWRhcHRlciBvbmx5IHN1cHBvcnRzIFwiVVRDXCIgYW5kIGAgK1xuICAgICAgICAgIGBsb2NhbCB0aW1lIHpvbmVzIGJ1dCBcIiR7b3B0aW9ucy50aW1lem9uZX1cIiB3YXMgcHJvdmlkZWQuYCxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX2RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICB0aGlzLnRpbWV6b25lID0gb3B0aW9ucy50aW1lem9uZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy50aW1lem9uZSA6IG51bGw7XG4gICAgdGhpcy5hc3NlcnRJc1ZhbGlkKCk7XG4gIH1cbiAgc3RhdGljIGlzRGF0ZShvYmplY3QpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IERhdGVdJztcbiAgfVxuICBzdGF0aWMgZnJvbURhdGUoZGF0ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgU3RhbmRhcmREYXRlQWRhcHRlcihkYXRlLCBvcHRpb25zKTtcbiAgfVxuICBzdGF0aWMgZnJvbUpTT04oanNvbikge1xuICAgIGNvbnN0IGFyZ3MgPSBbXG4gICAgICBqc29uLnllYXIsXG4gICAgICBqc29uLm1vbnRoIC0gMSxcbiAgICAgIGpzb24uZGF5LFxuICAgICAganNvbi5ob3VyLFxuICAgICAganNvbi5taW51dGUsXG4gICAgICBqc29uLnNlY29uZCxcbiAgICAgIGpzb24ubWlsbGlzZWNvbmQsXG4gICAgXTtcbiAgICBzd2l0Y2ggKGpzb24udGltZXpvbmUpIHtcbiAgICAgIGNhc2UgJ1VUQyc6IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKERhdGUuVVRDKC4uLmFyZ3MpKSwge1xuICAgICAgICAgIHRpbWV6b25lOiAnVVRDJyxcbiAgICAgICAgICBkdXJhdGlvbjoganNvbi5kdXJhdGlvbixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjYXNlIG51bGw6IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKC4uLmFyZ3MpLCB7XG4gICAgICAgICAgdGltZXpvbmU6IG51bGwsXG4gICAgICAgICAgZHVyYXRpb246IGpzb24uZHVyYXRpb24sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlQWRhcHRlckVycm9yKFxuICAgICAgICAgICdUaGUgYFN0YW5kYXJkRGF0ZUFkYXB0ZXJgIG9ubHkgc3VwcG9ydHMgZGF0ZXRpbWVzIGluICcgK1xuICAgICAgICAgICAgYFVUQyBvciBMT0NBTCAobnVsbCkgdGltZS4gWW91IHByb3ZpZGVkIGEgSlNPTiBvYmplY3QgYCArXG4gICAgICAgICAgICBgd2l0aCB0aW1lem9uZSBcIiR7anNvbi50aW1lem9uZX1cIi5gLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZnJvbURhdGVUaW1lKGRhdGV0aW1lKSB7XG4gICAgY29uc3QgZGF0ZSA9IFN0YW5kYXJkRGF0ZUFkYXB0ZXIuZnJvbUpTT04oZGF0ZXRpbWUudG9KU09OKCkpO1xuICAgIGRhdGUuZ2VuZXJhdG9ycy5wdXNoKC4uLmRhdGV0aW1lLmdlbmVyYXRvcnMpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIGdldCBkYXRlKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLl9kYXRlKTtcbiAgfVxuICBnZXQgZW5kKCkge1xuICAgIGlmICghdGhpcy5kdXJhdGlvbikgcmV0dXJuO1xuICAgIGlmICh0aGlzLl9lbmQpIHJldHVybiB0aGlzLl9lbmQ7XG4gICAgdGhpcy5fZW5kID0gU3RhbmRhcmREYXRlQWRhcHRlci5mcm9tRGF0ZVRpbWUoXG4gICAgICB0aGlzLnRvRGF0ZVRpbWUoKS5hZGQodGhpcy5kdXJhdGlvbiwgJ21pbGxpc2Vjb25kJyksXG4gICAgKS5kYXRlO1xuICAgIHJldHVybiB0aGlzLl9lbmQ7XG4gIH1cbiAgc2V0KHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHByb3AgPT09ICd0aW1lem9uZScpIHtcbiAgICAgIGlmICh0aGlzLnRpbWV6b25lID09PSB2YWx1ZSkgcmV0dXJuIHRoaXM7XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKHRoaXMuX2RhdGUsIHtcbiAgICAgICAgICB0aW1lem9uZTogdmFsdWUsXG4gICAgICAgICAgZHVyYXRpb246IHRoaXMuZHVyYXRpb24sXG4gICAgICAgICAgZ2VuZXJhdG9yczogdGhpcy5nZW5lcmF0b3JzLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3AgPT09ICdkdXJhdGlvbicpIHtcbiAgICAgIGlmICh0aGlzLmR1cmF0aW9uID09PSB2YWx1ZSkgcmV0dXJuIHRoaXM7XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKHRoaXMuX2RhdGUsIHtcbiAgICAgICAgICB0aW1lem9uZTogdGhpcy50aW1lem9uZSxcbiAgICAgICAgICBkdXJhdGlvbjogdmFsdWUsXG4gICAgICAgICAgZ2VuZXJhdG9yczogdGhpcy5nZW5lcmF0b3JzLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoYFVua25vd24gcHJvcCBcIiR7cHJvcH1cIiBmb3IgU3RhbmRhcmREYXRlQWRhcHRlciNzZXQoKWApO1xuICB9XG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGUudmFsdWVPZigpO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICBsZXQganNvbjtcbiAgICBpZiAodGhpcy50aW1lem9uZSA9PT0gJ1VUQycpIHtcbiAgICAgIGpzb24gPSB7XG4gICAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgICB5ZWFyOiB0aGlzLl9kYXRlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgIG1vbnRoOiB0aGlzLl9kYXRlLmdldFVUQ01vbnRoKCkgKyAxLFxuICAgICAgICBkYXk6IHRoaXMuX2RhdGUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgICBob3VyOiB0aGlzLl9kYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICAgIG1pbnV0ZTogdGhpcy5fZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICAgIHNlY29uZDogdGhpcy5fZGF0ZS5nZXRVVENTZWNvbmRzKCksXG4gICAgICAgIG1pbGxpc2Vjb25kOiB0aGlzLl9kYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAganNvbiA9IHtcbiAgICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICAgIHllYXI6IHRoaXMuX2RhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgbW9udGg6IHRoaXMuX2RhdGUuZ2V0TW9udGgoKSArIDEsXG4gICAgICAgIGRheTogdGhpcy5fZGF0ZS5nZXREYXRlKCksXG4gICAgICAgIGhvdXI6IHRoaXMuX2RhdGUuZ2V0SG91cnMoKSxcbiAgICAgICAgbWludXRlOiB0aGlzLl9kYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAgICAgc2Vjb25kOiB0aGlzLl9kYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgbWlsbGlzZWNvbmQ6IHRoaXMuX2RhdGUuZ2V0TWlsbGlzZWNvbmRzKCksXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodGhpcy5kdXJhdGlvbikge1xuICAgICAganNvbi5kdXJhdGlvbiA9IHRoaXMuZHVyYXRpb247XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xuICB9XG4gIGFzc2VydElzVmFsaWQoKSB7XG4gICAgaWYgKCFTdGFuZGFyZERhdGVBZGFwdGVyLmlzRGF0ZSh0aGlzLl9kYXRlKSB8fCBpc05hTih0aGlzLl9kYXRlLnZhbHVlT2YoKSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZUFkYXB0ZXJFcnJvcignU3RhbmRhcmREYXRlQWRhcHRlciBoYXMgaW52YWxpZCBkYXRlLicpO1xuICAgIH0gZWxzZSBpZiAoIVtudWxsLCAnVVRDJ10uaW5jbHVkZXModGhpcy50aW1lem9uZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZUFkYXB0ZXJFcnJvcihcbiAgICAgICAgJ1N0YW5kYXJkRGF0ZUFkYXB0ZXIgb25seSBzdXBwb3J0cyBsb2NhbCAobnVsbCkgYW5kIFVUQyB0aW1lem9uZXMgYnV0ICcgK1xuICAgICAgICAgIGBcIiR7dGhpcy50aW1lem9uZX1cIiB3YXMgc3BlY2lmaWVkLmAsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5kdXJhdGlvbiAmJiB0aGlzLmR1cmF0aW9uIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZUFkYXB0ZXJFcnJvcignSWYgcHJvdmlkZWQsIGR1cmF0aW9uIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAuJyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5TdGFuZGFyZERhdGVBZGFwdGVyLmhhc1RpbWV6b25lU3VwcG9ydCA9IGZhbHNlO1xuXG5leHBvcnQgeyBTdGFuZGFyZERhdGVBZGFwdGVyIH07XG4iLCJpbXBvcnQgeyBEYXRlQWRhcHRlckJhc2UgfSBmcm9tICdAcnNjaGVkdWxlL2NvcmUnO1xuaW1wb3J0IHsgUnVsZSB9IGZyb20gJ0Byc2NoZWR1bGUvY29yZS9nZW5lcmF0b3JzJztcbmltcG9ydCB7IElDQUxfUlVMRVMgfSBmcm9tICdAcnNjaGVkdWxlL2NvcmUvcnVsZXMvSUNBTF9SVUxFUyc7XG5pbXBvcnQgeyBTdGFuZGFyZERhdGVBZGFwdGVyIH0gZnJvbSAnQHJzY2hlZHVsZS9zdGFuZGFyZC1kYXRlLWFkYXB0ZXInO1xuXG5EYXRlQWRhcHRlckJhc2UuYWRhcHRlciA9IFN0YW5kYXJkRGF0ZUFkYXB0ZXI7XG5SdWxlLnJlY3VycmVuY2VSdWxlcyA9IElDQUxfUlVMRVM7XG4iLCJpbXBvcnQgeyBzdG9yZSB9IGZyb20gXCIuL3NyY1wiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHtcbiAgICBjbGVhclN0dWR5R3JvdXBzLFxuICAgIHNob3dFcnJvck5vdGlmaWNhdGlvbixcbiAgICBzaG93U3VjY2Vzc05vdGlmaWNhdGlvbixcbiAgICBzaWduT3V0LFxuICAgIHN0YXJ0TG9hZGluZyxcbiAgICBzdG9wTG9hZGluZ1xufSBmcm9tIFwiLi9zcmMvc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vU2VydmVyL1ZhbGlkYXRvclwiO1xuaW1wb3J0IHsgU2NoZWR1bGUgfSBmcm9tIFwiLi9yc2NoZWR1bGVcIjtcblxuLyoqXG4gKiBTdWJtaXRzIGEgZ2VuZXJhbCBwb3N0IHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSByb3V0ZSBUaGUgcm91dGUgb2Ygd2hpY2ggdG8gc2VuZCB0aGUgcmVxdWVzdFxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIGRhdGEgdG8gYmUgc2VudCB0byB0aGUgc2VydmVyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3VjY2Vzc1Jlc3BvbnNlTWVzc2FnZSBUaGUgbWVzc2FnZSB0byBpbmRpY2F0ZSBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICogQHBhcmFtIHtTdHJpbmd9IGNhdGNoTWVzc2FnZSBJZiB0aGUgY2F0Y2ggc3RhdGVtZW50IHJ1bnMsIGEgbm90aWZpY2F0aW9uIHdpbGwgYmUgc2hvd24gd2l0aCB0aGlzIG1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNBdXRoZW50aWNhdGVkIFRydWUgaWYgdGhpcyByb3V0ZSByZXF1aXJlcyBhdXRoZW50aWNhdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgb24gZXJyb3Igb3Igc3VjY2VzcyBhbmQgcmV0dXJucyAoZGF0YSwgZXJyb3IpXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMi8xMS8yMDIyXG4gKiBAYXN5bmNcbiAqL1xuZXhwb3J0IGNvbnN0IHNlbmRQb3N0UmVxdWVzdCA9IGFzeW5jIChcbiAgICByb3V0ZSxcbiAgICBkYXRhLFxuICAgIHN1Y2Nlc3NSZXNwb25zZU1lc3NhZ2UsXG4gICAgY2F0Y2hNZXNzYWdlLFxuICAgIGlzQXV0aGVudGljYXRlZCxcbiAgICBjYWxsYmFjayA9ICgpID0+IHt9LFxuICAgIHNob3VsZFNob3dOb3RpZmljYXRpb24gPSB0cnVlXG4pID0+IHtcbiAgICBsZXQgcmVzcG9uc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzQXV0aGVudGljYXRlZCkgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b2tlblwiKTtcblxuICAgICAgICBzdG9yZS5kaXNwYXRjaChzdGFydExvYWRpbmcoKSk7XG4gICAgICAgIHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChyb3V0ZSwgZGF0YSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgc2hvdWxkU2hvd05vdGlmaWNhdGlvbiAmJlxuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yTm90aWZpY2F0aW9uKGNhdGNoTWVzc2FnZSB8fCBcIkNhbm5vdCBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIsIHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBcIlRoZXJlIHdhcyBhIHByb2JsZW0gY29ubmVjdGluZyB0byB0aGUgc2VydmVyOiBcIiArIGUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0b3BMb2FkaW5nKCkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlSXNEZWZpbmVkID0gVmFsaWRhdG9yLmlzRGVmaW5lZChyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlSXNEZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0V2FzVmFsaWQgPSBzdWNjZXNzUmVzcG9uc2VNZXNzYWdlID09PSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7XG5cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0V2FzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRTaG93Tm90aWZpY2F0aW9uICYmIHN0b3JlLmRpc3BhdGNoKHNob3dTdWNjZXNzTm90aWZpY2F0aW9uKHJlc3BvbnNlLmRhdGEubWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaG91bGRTaG93Tm90aWZpY2F0aW9uICYmIHN0b3JlLmRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihyZXNwb25zZS5kYXRhLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZS5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiVGhlcmUgd2FzIGFuIGVycm9yLCB0aGUgc2VydmVyIHNlbnQgdW5kZWZpbmVkIHJlc3VsdHNcIikpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgXCJUaGVyZSB3YXMgYW4gZXJyb3IsIHRoZSBzZXJ2ZXIgc2VudCB1bmRlZmluZWQgcmVzdWx0c1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogU3VibWl0cyBhIGdlbmVyYWwgZ2V0IHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSByb3V0ZSBUaGUgcm91dGUgb2Ygd2hpY2ggdG8gc2VuZCB0aGUgcmVxdWVzdFxuICogQHBhcmFtIHtTdHJpbmd9IHN1Y2Nlc3NSZXNwb25zZU1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaW5kaWNhdGUgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBjYXRjaE1lc3NhZ2UgSWYgdGhlIGNhdGNoIHN0YXRlbWVudCBydW5zLCBhIG5vdGlmaWNhdGlvbiB3aWxsIGJlIHNob3duIHdpdGggdGhpcyBtZXNzYWdlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQXV0aGVudGljYXRlZCBUcnVlIGlmIHRoaXMgcm91dGUgcmVxdWlyZXMgYXV0aGVudGljYXRpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIG9uIGVycm9yIG9yIHN1Y2Nlc3MgYW5kIHJldHVybnMgKGRhdGEsIGVycm9yKVxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDIvMTEvMjAyMlxuICogQGFzeW5jXG4gKi9cbmV4cG9ydCBjb25zdCBzZW5kR2V0UmVxdWVzdCA9IGFzeW5jIChcbiAgICByb3V0ZSxcbiAgICBzdWNjZXNzUmVzcG9uc2VNZXNzYWdlLFxuICAgIGNhdGNoTWVzc2FnZSxcbiAgICBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgY2FsbGJhY2sgPSAoKSA9PiB7fSxcbiAgICBzaG91bGRTaG93Tm90aWZpY2F0aW9uID0gdHJ1ZVxuKSA9PiB7XG4gICAgbGV0IHJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0F1dGhlbnRpY2F0ZWQpIGF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidG9rZW5cIik7XG5cbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goc3RhcnRMb2FkaW5nKCkpO1xuICAgICAgICByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChyb3V0ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgc2hvdWxkU2hvd05vdGlmaWNhdGlvbiAmJlxuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yTm90aWZpY2F0aW9uKGNhdGNoTWVzc2FnZSB8fCBcIkNhbm5vdCBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIsIHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBcIlRoZXJlIHdhcyBhIHByb2JsZW0gY29ubmVjdGluZyB0byB0aGUgc2VydmVyOiBcIiArIGUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0b3BMb2FkaW5nKCkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlSXNEZWZpbmVkID0gVmFsaWRhdG9yLmlzRGVmaW5lZChyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlSXNEZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0V2FzVmFsaWQgPSBzdWNjZXNzUmVzcG9uc2VNZXNzYWdlID09PSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7XG5cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0V2FzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRTaG93Tm90aWZpY2F0aW9uICYmIHN0b3JlLmRpc3BhdGNoKHNob3dTdWNjZXNzTm90aWZpY2F0aW9uKHJlc3BvbnNlLmRhdGEubWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaG91bGRTaG93Tm90aWZpY2F0aW9uICYmIHN0b3JlLmRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihyZXNwb25zZS5kYXRhLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZS5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiVGhlcmUgd2FzIGFuIGVycm9yLCB0aGUgc2VydmVyIHNlbnQgdW5kZWZpbmVkIHJlc3VsdHNcIikpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgXCJUaGVyZSB3YXMgYW4gZXJyb3IsIHRoZSBzZXJ2ZXIgc2VudCB1bmRlZmluZWQgcmVzdWx0c1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogU3VibWl0cyBhIGdlbmVyYWwgZGVsZXRlIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAqIEBwYXJhbSB7U3RyaW5nfSByb3V0ZSBUaGUgcm91dGUgb2Ygd2hpY2ggdG8gc2VuZCB0aGUgcmVxdWVzdFxuICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIGRhdGEgdG8gYmUgc2VudCB0byB0aGUgc2VydmVyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3VjY2Vzc1Jlc3BvbnNlTWVzc2FnZSBUaGUgbWVzc2FnZSB0byBpbmRpY2F0ZSBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICogQHBhcmFtIHtTdHJpbmd9IGNhdGNoTWVzc2FnZSBJZiB0aGUgY2F0Y2ggc3RhdGVtZW50IHJ1bnMsIGEgbm90aWZpY2F0aW9uIHdpbGwgYmUgc2hvd24gd2l0aCB0aGlzIG1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNBdXRoZW50aWNhdGVkIFRydWUgaWYgdGhpcyByb3V0ZSByZXF1aXJlcyBhdXRoZW50aWNhdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgb24gZXJyb3Igb3Igc3VjY2VzcyBhbmQgcmV0dXJucyAoZGF0YSwgZXJyb3IpXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMi8xMS8yMDIyXG4gKiBAYXN5bmNcbiAqL1xuZXhwb3J0IGNvbnN0IHNlbmREZWxldGVSZXF1ZXN0ID0gYXN5bmMgKFxuICAgIHJvdXRlLFxuICAgIGRhdGEsXG4gICAgc3VjY2Vzc1Jlc3BvbnNlTWVzc2FnZSxcbiAgICBjYXRjaE1lc3NhZ2UsXG4gICAgaXNBdXRoZW50aWNhdGVkLFxuICAgIGNhbGxiYWNrID0gKCkgPT4ge30sXG4gICAgc2hvdWxkU2hvd05vdGlmaWNhdGlvbiA9IHRydWVcbikgPT4ge1xuICAgIGxldCByZXNwb25zZTtcbiAgICB0cnkge1xuICAgICAgICBpZiAoaXNBdXRoZW50aWNhdGVkKSBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRva2VuXCIpO1xuXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0YXJ0TG9hZGluZygpKTtcbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5kZWxldGUocm91dGUsIHsgZGF0YSB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBjb25uZWN0aW5nIHRvIHRoZSBzZXJ2ZXI6IFwiICsgZSk7XG4gICAgICAgIHNob3VsZFNob3dOb3RpZmljYXRpb24gJiZcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKFxuICAgICAgICAgICAgICAgIHNob3dFcnJvck5vdGlmaWNhdGlvbihjYXRjaE1lc3NhZ2UgfHwgXCJDYW5ub3QgY29ubmVjdCB0byB0aGUgc2VydmVyLCBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyLlwiKVxuICAgICAgICAgICAgKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBzdG9yZS5kaXNwYXRjaChzdG9wTG9hZGluZygpKTtcblxuICAgICAgICBjb25zdCByZXNwb25zZUlzRGVmaW5lZCA9IFZhbGlkYXRvci5pc0RlZmluZWQocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIGlmIChyZXNwb25zZUlzRGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdFdhc1ZhbGlkID0gc3VjY2Vzc1Jlc3BvbnNlTWVzc2FnZSA9PT0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlO1xuICAgICAgICAgICAgaWYgKHJlcXVlc3RXYXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIHNob3VsZFNob3dOb3RpZmljYXRpb24gJiYgc3RvcmUuZGlzcGF0Y2goc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlLmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgc2hvdWxkU2hvd05vdGlmaWNhdGlvbiAmJiBzdG9yZS5kaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBcIlRoZXJlIHdhcyBhbiBlcnJvciwgdGhlIHNlcnZlciBzZW50IHVuZGVmaW5lZCByZXN1bHRzXCIpO1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiVGhlcmUgd2FzIGFuIGVycm9yLCB0aGUgc2VydmVyIHNlbnQgdW5kZWZpbmVkIHJlc3VsdHNcIikpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBTdWJtaXRzIGEgZ2VuZXJhbCBkZWxldGUgcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICogQHBhcmFtIHtTdHJpbmd9IHJvdXRlIFRoZSByb3V0ZSBvZiB3aGljaCB0byBzZW5kIHRoZSByZXF1ZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gZm9ybURhdGEgVGhlIGZvcm1EYXRhIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlclxuICogQHBhcmFtIHtTdHJpbmd9IHN1Y2Nlc3NSZXNwb25zZU1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaW5kaWNhdGUgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBjYXRjaE1lc3NhZ2UgSWYgdGhlIGNhdGNoIHN0YXRlbWVudCBydW5zLCBhIG5vdGlmaWNhdGlvbiB3aWxsIGJlIHNob3duIHdpdGggdGhpcyBtZXNzYWdlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQXV0aGVudGljYXRlZCBUcnVlIGlmIHRoaXMgcm91dGUgcmVxdWlyZXMgYXV0aGVudGljYXRpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIG9uIGVycm9yIG9yIHN1Y2Nlc3MgYW5kIHJldHVybnMgKGRhdGEsIGVycm9yKVxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDIvMTEvMjAyMlxuICogQGFzeW5jXG4gKi9cbmV4cG9ydCBjb25zdCBzZW5kUG9zdFJlcXVlc3RXaXRoRm9ybURhdGEgPSBhc3luYyAoXG4gICAgcm91dGUsXG4gICAgZm9ybWRhdGEsXG4gICAgc3VjY2Vzc1Jlc3BvbnNlTWVzc2FnZSxcbiAgICBjYXRjaE1lc3NhZ2UsXG4gICAgaXNBdXRoZW50aWNhdGVkLFxuICAgIGNhbGxiYWNrID0gKCkgPT4ge31cbikgPT4ge1xuICAgIGxldCByZXNwb25zZTtcbiAgICB0cnkge1xuICAgICAgICBpZiAoaXNBdXRoZW50aWNhdGVkKSBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRva2VuXCIpO1xuXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0YXJ0TG9hZGluZygpKTtcbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KHJvdXRlLCBmb3JtZGF0YSwge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihjYXRjaE1lc3NhZ2UgfHwgXCJDYW5ub3QgY29ubmVjdCB0byB0aGUgc2VydmVyLCBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyLlwiKSk7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBjb25uZWN0aW5nIHRvIHRoZSBzZXJ2ZXI6IFwiICsgZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goc3RvcExvYWRpbmcoKSk7XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VJc0RlZmluZWQgPSBWYWxpZGF0b3IuaXNEZWZpbmVkKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICBpZiAocmVzcG9uc2VJc0RlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RXYXNWYWxpZCA9IHN1Y2Nlc3NSZXNwb25zZU1lc3NhZ2UgPT09IHJlc3BvbnNlLmRhdGEubWVzc2FnZTtcblxuICAgICAgICAgICAgaWYgKHJlcXVlc3RXYXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHNob3dTdWNjZXNzTm90aWZpY2F0aW9uKHJlc3BvbnNlLmRhdGEubWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIlRoZXJlIHdhcyBhbiBlcnJvciwgdGhlIHNlcnZlciBzZW50IHVuZGVmaW5lZCByZXN1bHRzXCIpKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIFwiVGhlcmUgd2FzIGFuIGVycm9yLCB0aGUgc2VydmVyIHNlbnQgdW5kZWZpbmVkIHJlc3VsdHNcIik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TmV4dE1lZXRpbmcgPSAoZ3JvdXApID0+IHtcbiAgICB2YXIgbmV4dE9uZVRpbWVNZWV0aW5nID0ge307XG5cbiAgICBpZiAoZ3JvdXAubWVldGluZ3MgJiYgZ3JvdXAubWVldGluZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIG5leHRPbmVUaW1lTWVldGluZyA9IGdyb3VwLm1lZXRpbmdzWzBdO1xuICAgICAgICBncm91cC5tZWV0aW5ncy5mb3JFYWNoKChtZWV0aW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAobmV3IERhdGUobWVldGluZy5kYXRlKSA8PSBuZXcgRGF0ZShuZXh0T25lVGltZU1lZXRpbmcuZGF0ZSkgJiYgbmV3IERhdGUobWVldGluZy5kYXRlKSA+PSBuZXcgRGF0ZSgpKVxuICAgICAgICAgICAgICAgIG5leHRPbmVUaW1lTWVldGluZyA9IG1lZXRpbmc7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhuZXh0T25lVGltZU1lZXRpbmcpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZ3JvdXAucmVjdXJyaW5nTWVldGluZykge1xuICAgICAgICBjb25zdCByZWN1cnJpbmdTdGFydERhdGUgPSBuZXcgRGF0ZShncm91cC5yZWN1cnJpbmdNZWV0aW5nLmRhdGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNUQVJUIERBVEVcIiwgcmVjdXJyaW5nU3RhcnREYXRlLCBncm91cC5yZWN1cnJpbmdNZWV0aW5nKTtcbiAgICAgICAgY29uc3Qgc2NoZWR1bGUgPSBuZXcgU2NoZWR1bGUoe1xuICAgICAgICAgICAgcnJ1bGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IGdyb3VwLnJlY3VycmluZ01lZXRpbmcuZnJlcXVlbmN5LnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiByZWN1cnJpbmdTdGFydERhdGUsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICByZWN1cnJpbmdTdGFydERhdGUuZ2V0RnVsbFllYXIoKSArIDUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWN1cnJpbmdTdGFydERhdGUuZ2V0TW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3VycmluZ1N0YXJ0RGF0ZS5nZXREYXRlKClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIG5leHRSZWN1cnJpbmdNZWV0aW5nID0ge307XG4gICAgICAgIG5leHRSZWN1cnJpbmdNZWV0aW5nID0gc2NoZWR1bGVcbiAgICAgICAgICAgIC5vY2N1cnJlbmNlcygpXG4gICAgICAgICAgICAudG9BcnJheSgpXG4gICAgICAgICAgICAuZmlsdGVyKCh7IGRhdGUgfSkgPT4gZGF0ZSA+PSBuZXcgRGF0ZSgpKVxuICAgICAgICAgICAgLm1hcCgoeyBkYXRlIH0pID0+IG5ldyBEYXRlKGRhdGUpLnRvTG9jYWxlRGF0ZVN0cmluZygpKVswXTtcblxuICAgICAgICBncm91cC5yZWN1cnJpbmdNZWV0aW5nLmRhdGUgPSBuZXh0UmVjdXJyaW5nTWVldGluZztcblxuICAgICAgICBpZiAoZ3JvdXAubWVldGluZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobmV4dFJlY3VycmluZ01lZXRpbmcpID4gbmV3IERhdGUobmV4dE9uZVRpbWVNZWV0aW5nLmRhdGUpXG4gICAgICAgICAgICAgICAgPyBuZXh0T25lVGltZU1lZXRpbmdcbiAgICAgICAgICAgICAgICA6IGdyb3VwLnJlY3VycmluZ01lZXRpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXAucmVjdXJyaW5nTWVldGluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV4dE9uZVRpbWVNZWV0aW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IHBlcmZvcm1TaWduT3V0ID0gKCkgPT4ge1xuICAgIHN0b3JlLmRpc3BhdGNoKHNpZ25PdXQoKSk7XG4gICAgc3RvcmUuZGlzcGF0Y2goc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24oXCJZb3UgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBzaWduZWQgb3V0LlwiKSk7XG4gICAgc3RvcmUuZGlzcGF0Y2goY2xlYXJTdHVkeUdyb3VwcygpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRSZWZyZXNoID0gKCkgPT4ge307XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBDcmVhdGVTdHVkeUdyb3VwRm9ybSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9DcmVhdGVTdHVkeUdyb3VwRm9ybS9DcmVhdGVTdHVkeUdyb3VwRm9ybVwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBhZGRTdHVkeUdyb3VwLCBjbG9zZVBvcHVwLCBzaG93U3VjY2Vzc05vdGlmaWNhdGlvbiwgc2hvd0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnMvaW5kZXhcIjtcblxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlcy5qc1wiO1xuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1ZhbGlkYXRvclwiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCBTdWJqZWN0cyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9TdWJqZWN0cy5qc1wiO1xuaW1wb3J0IHsgc2VuZFBvc3RSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uLy4uL0hlbHBlclwiO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzcGVjaWZpYyB2aWV3IHRoYXQgaXMgdXNlZCBpbiBhIHBvcHVwIHRvIGFsbG93IGEgdXNlciB0byBjcmVhdGUgYSBzdHVkeSBncm91cFxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDExLzIwLzIwMjFcbiAqL1xuY29uc3QgQ3JlYXRlU3R1ZHlHcm91cFZpZXcgPSAoKSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IHVzZXIgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLnVzZXIpO1xuXG4gICAgY29uc3QgQkxBTksgPSBcIlwiO1xuICAgIGNvbnN0IFtuYW1lLCBzZXROYW1lXSA9IHVzZVN0YXRlKEJMQU5LKTsgLy9UZXh0SW5wdXQgdGFnXG4gICAgY29uc3QgW2Rlc2NyaXB0aW9uLCBzZXREZXNjcmlwdGlvbl0gPSB1c2VTdGF0ZShCTEFOSyk7IC8vVGV4dElucHV0IHRhZ1xuICAgIGNvbnN0IFtzdWJqZWN0LCBzZXRTdWJqZWN0XSA9IHVzZVN0YXRlKFN1YmplY3RzLkFueSk7IC8vc2VsZWN0IHRhZywgZmlsbGVkIHdpdGggb3B0aW9uIHRhZ3NcbiAgICBjb25zdCBbcHJpdmFjeSwgc2V0UHJpdmFjeV0gPSB1c2VTdGF0ZShcIlB1YmxpY1wiKTsgLy9zZWxlY3QgdGFnLCBmaWxsZWQgd2l0aCBvcHRpb24gdGFnc1xuICAgIGNvbnN0IFtjb3Vyc2VDb2RlLCBzZXRDb3Vyc2VDb2RlXSA9IHVzZVN0YXRlKEJMQU5LKTsgLy9UZXh0SW5wdXQgdGFnXG4gICAgY29uc3QgW2lzQXNzb2NpYXRlZFdpdGhTY2hvb2wsIHNldElzQXNzb2NpYXRlZFdpdGhTY2hvb2xdID0gdXNlU3RhdGUoZmFsc2UpOyAvL0lucHV0IHRhZyB3aXRoIHR5cGUgXCJjaGVja2JveFwiXG4gICAgY29uc3QgW2lzVHV0b3JHcm91cCwgc2V0SXNUdXRvckdyb3VwXSA9IHVzZVN0YXRlKGZhbHNlKTsgLy9Ub2dnbGUgdGFnXG4gICAgY29uc3QgW2lzT25saW5lR3JvdXAsIHNldElzT25saW5lR3JvdXBdID0gdXNlU3RhdGUoZmFsc2UpOyAvL1RvZ2dsZSB0YWdcbiAgICBjb25zdCBbZ3JvdXBDb2xvciwgc2V0R3JvdXBDb2xvcl0gPSB1c2VTdGF0ZShcIiMwMDAwMDBcIik7IC8vVGV4dElucHV0IHRhZyBmb3Igbm93XG4gICAgY29uc3QgW2dyb3VwUGhvdG8sIHNldEdyb3VwUGhvdG9dID0gdXNlU3RhdGUoQkxBTkspOyAvL1RleHRJbnB1dCB0YWcgZm9yIG5vd1xuXG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gYXBpIGNhbGwgdG8gdGhlIENyZWF0ZSBzdHVkeSBncm91cCByb3V0ZSwgcGFzc2luZyBpbiB0aGUgaW5mb3JtYXRpb24gZW50ZXJlZCBpbiB0aGUgZm9ybSBhbmQgcmVuZGVyaW5nIHRoZSBjbGllbnQgYWNjb3JkaW5nIHRvIHRoZSByZXNwb25zZSByZWNlaXZlZFxuICAgICAqIEBhdXRob3IgU3RhY2V5IFBvcGVuZm9vc2UgYW5kIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIxXG4gICAgICovXG4gICAgY29uc3Qgc3VibWl0Q3JlYXRlU3R1ZHlHcm91cCA9IGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAvL1ByZXZlbnQgZGVmYXVsdCBmb3JtIGJlaGF2aW9yXG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgYXdhaXQgc2VuZFBvc3RSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLlN0dWR5R3JvdXAuQ3JlYXRlU3R1ZHlHcm91cCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGdyb3VwQ29sb3IsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgc3ViamVjdCxcbiAgICAgICAgICAgICAgICBwcml2YWN5U2V0dGluZzogcHJpdmFjeSxcbiAgICAgICAgICAgICAgICBjb3Vyc2U6IGNvdXJzZUNvZGUsXG4gICAgICAgICAgICAgICAgc2Nob29sOiBpc0Fzc29jaWF0ZWRXaXRoU2Nob29sID8gdXNlci5zY2hvb2wgOiBcIlwiLFxuICAgICAgICAgICAgICAgIGlzVHV0b3JHcm91cCxcbiAgICAgICAgICAgICAgICBpc09ubGluZUdyb3VwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLlN1Y2Nlc3NTdHVkeUdyb3VwQ3JlYXRlZCxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5FcnJvckNyZWF0ZVN0dWR5R3JvdXAsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goYWRkU3R1ZHlHcm91cChkYXRhLm5ld1N0dWR5R3JvdXApKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgbmFtZSBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMi8wOC8yMDIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlTmFtZUZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldE5hbWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGdyb3VwIGNvbG9yIGZpZWxkIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVHcm91cENvbG9yID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldEdyb3VwQ29sb3IoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGRlc2NyaXB0aW9uIGZpZWxkIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVEZXNjcmlwdGlvbkZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldERlc2NyaXB0aW9uKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBzdWJqZWN0IGZpZWxkIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVTdWJqZWN0RmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0U3ViamVjdChldmVudC50YXJnZXQub3B0aW9uc1tldmVudC50YXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgcHJpdmFjeSBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMi8wOC8yMDIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlUHJpdmFjeSA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRQcml2YWN5KGV2ZW50LnRhcmdldC5vcHRpb25zW2V2ZW50LnRhcmdldC5zZWxlY3RlZEluZGV4XS52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBjb3Vyc2UgY29kZSBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMi8wOC8yMDIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlQ291cnNlQ29kZUZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldENvdXJzZUNvZGUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGlzIG9ubGluZSBncm91cCBzd2l0Y2ggdmFsdWUgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTIvMDgvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUlzT25saW5lR3JvdXAgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0SXNPbmxpbmVHcm91cChldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBpcyBhc3NvY2lhdGVkIHdpdGggc2Nob29sIHN3aXRjaCB2YWx1ZSBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMi8wOC8yMDIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRJc0Fzc29jaWF0ZWRXaXRoU2Nob29sKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGlzIHR1dG9yIGdyb3VwIHN3aXRjaCB2YWx1ZSBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMi8wOC8yMDIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlSXNUdXRvckdyb3VwID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldElzVHV0b3JHcm91cChldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3JlYXRlLXN0dWR5Z3JvdXAtdmlld1wiPlxuICAgICAgICAgICAgPENyZWF0ZVN0dWR5R3JvdXBGb3JtXG4gICAgICAgICAgICAgICAgc3VibWl0Q3JlYXRlU3R1ZHlHcm91cD17c3VibWl0Q3JlYXRlU3R1ZHlHcm91cH1cbiAgICAgICAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICBzdWJqZWN0PXtzdWJqZWN0fVxuICAgICAgICAgICAgICAgIHByaXZhY3k9e3ByaXZhY3l9XG4gICAgICAgICAgICAgICAgY291cnNlQ29kZT17Y291cnNlQ29kZX1cbiAgICAgICAgICAgICAgICBpc0Fzc29jaWF0ZWRXaXRoU2Nob29sPXtpc0Fzc29jaWF0ZWRXaXRoU2Nob29sfVxuICAgICAgICAgICAgICAgIGlzVHV0b3JHcm91cD17aXNUdXRvckdyb3VwfVxuICAgICAgICAgICAgICAgIGlzT25saW5lR3JvdXA9e2lzT25saW5lR3JvdXB9XG4gICAgICAgICAgICAgICAgZ3JvdXBDb2xvcj17Z3JvdXBDb2xvcn1cbiAgICAgICAgICAgICAgICB1cGRhdGVOYW1lRmllbGQ9e3VwZGF0ZU5hbWVGaWVsZH1cbiAgICAgICAgICAgICAgICB1cGRhdGVEZXNjcmlwdGlvbkZpZWxkPXt1cGRhdGVEZXNjcmlwdGlvbkZpZWxkfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVN1YmplY3RGaWVsZD17dXBkYXRlU3ViamVjdEZpZWxkfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVByaXZhY3k9e3VwZGF0ZVByaXZhY3l9XG4gICAgICAgICAgICAgICAgdXBkYXRlQ291cnNlQ29kZUZpZWxkPXt1cGRhdGVDb3Vyc2VDb2RlRmllbGR9XG4gICAgICAgICAgICAgICAgdXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbD17dXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbH1cbiAgICAgICAgICAgICAgICB1cGRhdGVJc1R1dG9yR3JvdXA9e3VwZGF0ZUlzVHV0b3JHcm91cH1cbiAgICAgICAgICAgICAgICB1cGRhdGVJc09ubGluZUdyb3VwPXt1cGRhdGVJc09ubGluZUdyb3VwfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUdyb3VwQ29sb3I9e3VwZGF0ZUdyb3VwQ29sb3J9XG4gICAgICAgICAgICAgICAgc3VibWl0Q3JlYXRlU3R1ZHlHcm91cD17c3VibWl0Q3JlYXRlU3R1ZHlHcm91cH1cbiAgICAgICAgICAgICAgICB1c2VyU2Nob29sPXt1c2VyLnNjaG9vbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVTdHVkeUdyb3VwVmlldztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSm9pblN0dWR5R3JvdXBWaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Kb2luU3R1ZHlHcm91cFZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vSm9pblN0dWR5R3JvdXBWaWV3LnNjc3NcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IHsgc2VuZFBvc3RSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL0hlbHBlclwiO1xuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vLi4vY29yZS9MYWJlbC9MYWJlbFwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1ZhbGlkYXRvclwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IHsgYWRkU3R1ZHlHcm91cCwgc2hvd0Vycm9yTm90aWZpY2F0aW9uLCBjbG9zZVBvcHVwLCBzaG93U3VjY2Vzc05vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5cbmNvbnN0IEpvaW5TdHVkeUdyb3VwVmlldyA9ICh7IGdyb3VwLCBpc0xvZ2dlZEluIH0pID0+IHtcbiAgICBjb25zdCB7IG5hbWUsIHNjaG9vbCwgb3duZXIsIHN1YmplY3QsIGNvdXJzZSwgaXNUdXRvckdyb3VwLCBpc09ubGluZUdyb3VwLCBncm91cENvbG9yLCBkZXNjcmlwdGlvbiwgX2lkIH0gPSBncm91cDtcblxuICAgIGNvbnN0IHVzZXIgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLnVzZXIpO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG5cbiAgICBjb25zdCBzdWJtaXRKb2luID0gYXN5bmMgKGUpID0+IHtcbiAgICAgICAgLy8gU1VCTUlUIFRIRSBTRUFSQ0ggUkVRVUVTVC5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3VibWl0dGluZ1wiKTtcblxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5Kb2luU3R1ZHlHcm91cCxcbiAgICAgICAgICAgIHsgc3R1ZHlHcm91cElkOiBfaWQgfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5TdWNjZXNzU3R1ZHlHcm91cEpvaW5lZCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goYWRkU3R1ZHlHcm91cChncm91cCkpO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNsb3NlUG9wdXAoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IHN1Ym1pdE1lc3NhZ2VTdHVkeUdyb3VwT3duZXIgPSBhc3luYyAoZSkgPT4ge1xuICAgICAgICAvLyBTVUJNSVQgVEhFIFNFQVJDSCBSRVFVRVNULlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgYXdhaXQgc2VuZFBvc3RSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLk1lc3NhZ2UuQ3JlYXRlQ29udmVyc2F0aW9uLFxuICAgICAgICAgICAgeyByZWNlaXZlcklkOiBvd25lci5faWQgfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuTWVzc2FnZS5TdWNjZXNzQ3JlYXRlQ29udmVyc2F0aW9uLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2goXCIvbWVzc2FnZVwiKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImpvaW4tZ3JvdXAtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLXBvcHVwLXRpdGxlXCIgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBgJHtncm91cENvbG9yfTcwYCB9fT5cbiAgICAgICAgICAgICAgICA8aDE+e25hbWV9PC9oMT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3B1cC1pbmZvLWZpZWxkc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+RGVzY3JpcHRpb248L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8cD57ZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3ViLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+T3duZXI8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+e293bmVyLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+Q291cnNlIENvZGU8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2NvdXJzZX08L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5TdWJqZWN0PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPntzdWJqZWN0fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPkFzc29jaWF0ZWQgV2l0aDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57c2Nob29sfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPlR5cGU8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2lzVHV0b3JHcm91cCA/IDxwPlR1dG9yPC9wPiA6IDxwPkdyb3VwPC9wPn08L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5NZWV0aW5nIEZvcm1hdDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57aXNPbmxpbmVHcm91cCA/IDxwPk9ubGluZTwvcD4gOiA8cD5JbiBQZXJzb248L3A+fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5pc09ubGluZUdyb3VwID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZWV0cyA8c3Ryb25nPk9ubGluZTwvc3Ryb25nPjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZWV0cyA8c3Ryb25nPkluLVBlcnNvbjwvc3Ryb25nPjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z3JvdXAucmVjdXJyaW5nTWVldGluZy5mcmVxdWVuY3l9IG9uIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nLmRheX0gYXR7XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nLnRpbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAge2lzTG9nZ2VkSW4gPyAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5QcmltYXJ5fSBvbkNsaWNrPXtzdWJtaXRNZXNzYWdlU3R1ZHlHcm91cE93bmVyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2UgU3R1ZHkgR3JvdXAgT3duZXJcbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259IG9uQ2xpY2s9e3N1Ym1pdEpvaW59PlxuICAgICAgICAgICAgICAgICAgICAgICAgSm9pblxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPHA+UGxlYXNlIGxvZ2luIG9yIHNpZ251cCB0byBqb2luIHRoaXMgc3R1ZHkgZ3JvdXAgb3IgbWVzc2FnZSBpdHMgb3duZXIuPC9wPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEpvaW5TdHVkeUdyb3VwVmlldztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSW5wdXRWaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9JbnB1dFZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vSW5wdXRWaWV3LnNjc3NcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGNsb3NlUG9wdXAgfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcbmltcG9ydCBJbnB1dEZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL0lucHV0RmllbGQvSW5wdXRGaWVsZFwiO1xuaW1wb3J0IFRleHRJbnB1dCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dHMvVGV4dElucHV0L1RleHRJbnB1dFwiO1xuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi9jb3JlL0xhYmVsL0xhYmVsXCI7XG5cbmNvbnN0IElucHV0VmlldyA9ICh7IGxhYmVsLCBkZWZhdWx0SW5wdXQgPSBcIlwiLCBjYWxsYmFjaywgbGFiZWwyID0gXCJcIiB9KSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IFtpbnB1dCwgc2V0SW5wdXRdID0gdXNlU3RhdGUoZGVmYXVsdElucHV0KTtcbiAgICBjb25zdCBbaW5wdXQyLCBzZXRJbnB1dDJdID0gdXNlU3RhdGUoZGVmYXVsdElucHV0KTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBpbnB1dCBmaWVsZCBpbiB0aGUgaW5wdXQgcG9wdXBcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMDcvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUlucHV0ID0gKGUpID0+IHtcbiAgICAgICAgc2V0SW5wdXQoZS50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgc2Vjb25kIGlucHV0IGZpZWxkIGluIHRoZSBpbnB1dCBwb3B1cFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8wNy8yMDIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlSW5wdXQyID0gKGUpID0+IHtcbiAgICAgICAgc2V0SW5wdXQyKGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm1cbiAgICAgICAgICAgIG9uU3VibWl0PXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBpbnB1dDIpO1xuICAgICAgICAgICAgICAgIHNldElucHV0KFwiXCIpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPExhYmVsPntsYWJlbH08L0xhYmVsPlxuICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgb25DaGFuZ2U9e3VwZGF0ZUlucHV0fSB2YWx1ZT17aW5wdXR9IC8+XG4gICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgIHtsYWJlbDIgIT09IFwiXCIgJiYgKFxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+e2xhYmVsMn08L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IG9uQ2hhbmdlPXt1cGRhdGVJbnB1dDJ9IHZhbHVlPXtpbnB1dDJ9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259PkRvbmU8L0J1dHRvbj5cbiAgICAgICAgPC9Gb3JtPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbnB1dFZpZXc7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvbmZpcm1hdGlvbkZvcm0uc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvbmZpcm1hdGlvbkZvcm0uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCBcIi4vQ29uZmlybWF0aW9uRm9ybS5zY3NzXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgeyBjbG9zZVBvcHVwIH0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcblxuY29uc3QgQ29uZmlybWF0aW9uRm9ybSA9ICh7IGNhbGxiYWNrLCBtZXNzYWdlLCBpc0NvbmZpcm1hdGlvbiwgZmlyc3RCdXR0b25UaXRsZSwgc2Vjb25kQnV0dG9uVGl0bGUgfSkgPT4ge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm1hdGlvbi1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxwPnttZXNzYWdlfTwvcD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2lkZS1ieS1zaWRlXCI+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9e2lzQ29uZmlybWF0aW9uID8gQnV0dG9uVHlwZXMuRGVzdHJ1Y2l2ZSA6IEJ1dHRvblR5cGVzLlByaW1hcnl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7Zmlyc3RCdXR0b25UaXRsZSB8fCBcIlllc1wifVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgdHlwZT17QnV0dG9uVHlwZXMuUHJpbWFyeX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtzZWNvbmRCdXR0b25UaXRsZSB8fCBcIk5vXCJ9XG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbmZpcm1hdGlvbkZvcm07XG4iLCIvKipcbiAqIFRoZSB2YXJpb3VzIHBvc3NpYmxlIHZpZXdzIGFuZCBwb3B1cHMgdGhhdCBlYWNoIHBhZ2UgY2FuIHByZXNlbnQuXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlciBhbmQgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMC8yMC8yMDIxXG4gKi9cbmNvbnN0IFZpZXdzID0ge1xuICAgIEhvbWU6IHtcbiAgICAgICAgTG9naW46IFwiTG9naW5cIixcbiAgICAgICAgRm9yZ290UGFzc3dvcmQ6IFwiRm9yZ290IHBhc3N3b3JkXCIsXG4gICAgICAgIENyZWF0ZUFjY291bnQ6IFwiQ3JlYXRlIGFjY291bnRcIixcbiAgICAgICAgVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb246IFwiVmVyaWZpY2F0aW9uIGVtYWlsIGNvbmZpcm1hdGlvblwiLFxuICAgICAgICBBY2NvdW50U2V0dXA6IFwiQWNjb3VudCBzZXR1cFwiXG4gICAgfSxcbiAgICBQb3B1cDoge1xuICAgICAgICBTdHVkeUdyb3VwOiB7XG4gICAgICAgICAgICBKb2luOiBcIkpvaW4gU3R1ZHkgR3JvdXBcIixcbiAgICAgICAgICAgIENyZWF0ZTogXCJDcmVhdGUgU3R1ZHkgR3JvdXBcIixcbiAgICAgICAgICAgIEVkaXQ6IFwiRWRpdCBTdHVkeSBHcm91cFwiLFxuICAgICAgICAgICAgQ3JlYXRlTWVldGluZzogXCJDcmVhdGUgTWVldGluZ1wiLFxuICAgICAgICAgICAgQ3JlYXRlUG9zdDogXCJDcmVhdGUgUG9zdFwiLFxuICAgICAgICAgICAgVmlld1Bvc3Q6IFwiVmlldyBQb3N0XCIsXG4gICAgICAgICAgICBWaWV3TWVldGluZ3M6IFwiVmlldyBNZWV0aW5nc1wiLFxuICAgICAgICAgICAgVmlld01lbWJlcjogXCJWaWV3IE1lbWJlclwiXG4gICAgICAgIH0sXG4gICAgICAgIElucHV0OiBcIklucHV0IEluZm9ybWF0aW9uXCIsXG4gICAgICAgIENvbmZpcm1hdGlvbjogXCJDb25maXJtXCIsXG4gICAgICAgIFJlcG9ydDogXCJSZXBvcnRcIlxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXdzO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XHJcbmltcG9ydCB7IGFkZFN0dWR5R3JvdXAsIGNsb3NlUG9wdXAgfSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvYWN0aW9ucy9pbmRleFwiO1xyXG5pbXBvcnQgeyBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vSGVscGVyXCI7XHJcblxyXG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XHJcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XHJcblxyXG5pbXBvcnQgQ3JlYXRlU3R1ZHlHcm91cEZvcm0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvQ3JlYXRlU3R1ZHlHcm91cEZvcm0vQ3JlYXRlU3R1ZHlHcm91cEZvcm1cIjtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgc3BlY2lmaWMgdmlldyB0aGF0IGlzIHVzZWQgaW4gYSBwb3B1cCB0byBhbGxvdyBhIHVzZXIgdG8gZWRpdCBhIHN0dWR5IGdyb3VwXHJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDAyLzE0LzIwMjJcclxuICovXHJcbmNvbnN0IEVkaXRTdHVkeUdyb3VwVmlldyA9ICh7IGdyb3VwIH0pID0+IHtcclxuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuICAgIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XHJcbiAgICBjb25zdCBbbmFtZSwgc2V0TmFtZV0gPSB1c2VTdGF0ZShncm91cC5uYW1lKTtcclxuICAgIGNvbnN0IFtkZXNjcmlwdGlvbiwgc2V0RGVzY3JpcHRpb25dID0gdXNlU3RhdGUoZ3JvdXAuZGVzY3JpcHRpb24pO1xyXG4gICAgY29uc3QgW3N1YmplY3QsIHNldFN1YmplY3RdID0gdXNlU3RhdGUoZ3JvdXAuc3ViamVjdCk7XHJcbiAgICBjb25zdCBbcHJpdmFjeSwgc2V0UHJpdmFjeV0gPSB1c2VTdGF0ZShncm91cC5wcml2YWN5U2V0dGluZyk7XHJcbiAgICBjb25zdCBbY291cnNlQ29kZSwgc2V0Q291cnNlQ29kZV0gPSB1c2VTdGF0ZShncm91cC5jb3Vyc2UpO1xyXG4gICAgY29uc3QgW2lzVHV0b3JHcm91cCwgc2V0SXNUdXRvckdyb3VwXSA9IHVzZVN0YXRlKGdyb3VwLmlzVHV0b3JHcm91cCk7XHJcbiAgICBjb25zdCBbaXNPbmxpbmVHcm91cCwgc2V0SXNPbmxpbmVHcm91cF0gPSB1c2VTdGF0ZShncm91cC5pc09ubGluZUdyb3VwKTtcclxuICAgIGNvbnN0IFtncm91cENvbG9yLCBzZXRHcm91cENvbG9yXSA9IHVzZVN0YXRlKGdyb3VwLmdyb3VwQ29sb3IpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFrZXMgYW4gYXBpIGNhbGwgdG8gdGhlIEVkaXQgc3R1ZHkgZ3JvdXAgcm91dGUsIHBhc3NpbmcgaW4gdGhlIGluZm9ybWF0aW9uIGVudGVyZWQgaW4gdGhlIGZvcm0gYW5kIHJlbmRlcmluZyB0aGUgY2xpZW50IGFjY29yZGluZyB0byB0aGUgcmVzcG9uc2UgcmVjZWl2ZWRcclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAwMi8xNC8yMDIyXHJcbiAgICAgKiBAYXN5bmNcclxuICAgICAqICovXHJcbiAgICBjb25zdCBzdWJtaXRFZGl0U3R1ZHlHcm91cCA9IGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vUHJldmVudCBkZWZhdWx0IGZvcm0gYmVoYXZpb3JcclxuXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgYXdhaXQgc2VuZFBvc3RSZXF1ZXN0KFxyXG4gICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5FZGl0U3R1ZHlHcm91cCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3R1ZHlHcm91cElkOiBncm91cC5faWQsXHJcbiAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgZ3JvdXBDb2xvcixcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgc3ViamVjdCxcclxuICAgICAgICAgICAgICAgIHByaXZhY3lTZXR0aW5nOiBwcml2YWN5LFxyXG4gICAgICAgICAgICAgICAgY291cnNlOiBjb3Vyc2VDb2RlLFxyXG4gICAgICAgICAgICAgICAgaXNUdXRvckdyb3VwLFxyXG4gICAgICAgICAgICAgICAgaXNPbmxpbmVHcm91cFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU3VjY2Vzc1N0dWR5R3JvdXBFZGl0ZWQsXHJcbiAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5LmdvKDApO1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIG5hbWUgZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMDIvMTQvMjAyMlxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVOYW1lRmllbGQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXROYW1lKGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGdyb3VwIGNvbG9yIGZpZWxkIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDAyLzE0LzIwMjJcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlR3JvdXBDb2xvciA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldEdyb3VwQ29sb3IoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgZGVzY3JpcHRpb24gZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMDIvMTQvMjAyMlxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVEZXNjcmlwdGlvbkZpZWxkID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0RGVzY3JpcHRpb24oZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgc3ViamVjdCBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAwMi8xNC8yMDIyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZVN1YmplY3RGaWVsZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldFN1YmplY3QoZXZlbnQudGFyZ2V0Lm9wdGlvbnNbZXZlbnQudGFyZ2V0LnNlbGVjdGVkSW5kZXhdLnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgcHJpdmFjeSBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAwMi8xNC8yMDIyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZVByaXZhY3kgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXRQcml2YWN5KGV2ZW50LnRhcmdldC5vcHRpb25zW2V2ZW50LnRhcmdldC5zZWxlY3RlZEluZGV4XS52YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNvdXJzZSBjb2RlIGZpZWxkIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDAyLzE0LzIwMjJcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlQ291cnNlQ29kZUZpZWxkID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0Q291cnNlQ29kZShldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBpcyBvbmxpbmUgZ3JvdXAgc3dpdGNoIHZhbHVlIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDAyLzE0LzIwMjJcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlSXNPbmxpbmVHcm91cCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldElzT25saW5lR3JvdXAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBpcyB0dXRvciBncm91cCBzd2l0Y2ggdmFsdWUgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMDIvMTQvMjAyMlxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVJc1R1dG9yR3JvdXAgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXRJc1R1dG9yR3JvdXAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1zdHVkeWdyb3VwLXZpZXdcIj5cclxuICAgICAgICAgICAge2NvbnNvbGUubG9nKFwiR1JPVVA6Ojo6Ojo6Ojo6XCIsIGdyb3VwKX1cclxuICAgICAgICAgICAgPENyZWF0ZVN0dWR5R3JvdXBGb3JtXHJcbiAgICAgICAgICAgICAgICBzdWJtaXRDcmVhdGVTdHVkeUdyb3VwPXtzdWJtaXRFZGl0U3R1ZHlHcm91cH1cclxuICAgICAgICAgICAgICAgIG5hbWU9e25hbWV9XHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17ZGVzY3JpcHRpb259XHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0PXtzdWJqZWN0fVxyXG4gICAgICAgICAgICAgICAgcHJpdmFjeT17cHJpdmFjeX1cclxuICAgICAgICAgICAgICAgIGNvdXJzZUNvZGU9e2NvdXJzZUNvZGV9XHJcbiAgICAgICAgICAgICAgICBpc1R1dG9yR3JvdXA9e2lzVHV0b3JHcm91cH1cclxuICAgICAgICAgICAgICAgIGlzT25saW5lR3JvdXA9e2lzT25saW5lR3JvdXB9XHJcbiAgICAgICAgICAgICAgICBncm91cENvbG9yPXtncm91cENvbG9yfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlTmFtZUZpZWxkPXt1cGRhdGVOYW1lRmllbGR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVEZXNjcmlwdGlvbkZpZWxkPXt1cGRhdGVEZXNjcmlwdGlvbkZpZWxkfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlU3ViamVjdEZpZWxkPXt1cGRhdGVTdWJqZWN0RmllbGR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVQcml2YWN5PXt1cGRhdGVQcml2YWN5fVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlQ291cnNlQ29kZUZpZWxkPXt1cGRhdGVDb3Vyc2VDb2RlRmllbGR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVJc1R1dG9yR3JvdXA9e3VwZGF0ZUlzVHV0b3JHcm91cH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUlzT25saW5lR3JvdXA9e3VwZGF0ZUlzT25saW5lR3JvdXB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVHcm91cENvbG9yPXt1cGRhdGVHcm91cENvbG9yfVxyXG4gICAgICAgICAgICAgICAgdXNlclNjaG9vbD17bnVsbH1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFZGl0U3R1ZHlHcm91cFZpZXc7XHJcblxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vY29yZS9Gb3JtL0Zvcm1cIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXRcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGRcIjtcbmltcG9ydCBEcm9wZG93biBmcm9tIFwiLi4vLi4vY29yZS9Ecm9wZG93bi9Ecm9wZG93blwiO1xuaW1wb3J0IHsgTWVldGluZ0ZyZXF1ZW5jaWVzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvVGltZVwiO1xuXG5jb25zdCBDcmVhdGVNZWV0aW5nRm9ybSA9ICh7XG4gICAgZGF0ZSxcbiAgICB0aW1lLFxuICAgIGZyZXF1ZW5jeSxcbiAgICBkZXRhaWxzLFxuICAgIGxvY2F0aW9uLFxuICAgIHJvb21OdW1iZXIsXG4gICAgdXBkYXRlRGF0ZUZpZWxkLFxuICAgIHVwZGF0ZVRpbWVGaWVsZCxcbiAgICB1cGRhdGVGcmVxdWVuY3lGaWVsZCxcbiAgICB1cGRhdGVEZXRhaWxzRmllbGQsXG4gICAgdXBkYXRlTG9jYXRpb25GaWVsZCxcbiAgICB1cGRhdGVSb29tTnVtYmVyRmllbGQsXG4gICAgc3VibWl0Q3JlYXRlTWVldGluZyxcbiAgICBpc1JlY3VycmluZ01lZXRpbmdcbn0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNyZWF0ZS1tZWV0aW5nLWZvcm1cIj5cbiAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtzdWJtaXRDcmVhdGVNZWV0aW5nfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5EYXRlPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e2RhdGV9IG9uQ2hhbmdlPXt1cGRhdGVEYXRlRmllbGR9IHR5cGU9XCJkYXRlXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPlRpbWU8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17dGltZX0gb25DaGFuZ2U9e3VwZGF0ZVRpbWVGaWVsZH0gdHlwZT1cInRpbWVcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICAgICAge2lzUmVjdXJyaW5nTWVldGluZyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+RnJlcXVlbmN5PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17Wy4uLk9iamVjdC52YWx1ZXMoTWVldGluZ0ZyZXF1ZW5jaWVzKV19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmcmVxdWVuY3l9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt1cGRhdGVGcmVxdWVuY3lGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+RGV0YWlsczwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e2RldGFpbHN9IG9uQ2hhbmdlPXt1cGRhdGVEZXRhaWxzRmllbGR9IGlzVGV4dEFyZWE9e3RydWV9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TG9jYXRpb248L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtsb2NhdGlvbn0gb25DaGFuZ2U9e3VwZGF0ZUxvY2F0aW9uRmllbGR9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+Um9vbSBOdW1iZXIgKGlmIGFwcGxpY2FibGUpPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17cm9vbU51bWJlcn0gb25DaGFuZ2U9e3VwZGF0ZVJvb21OdW1iZXJGaWVsZH0gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0+Q3JlYXRlPC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVNZWV0aW5nRm9ybTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XHJcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XHJcbmltcG9ydCB7IHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcclxuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgY2xvc2VQb3B1cCB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XHJcbmltcG9ydCBDcmVhdGVNZWV0aW5nRm9ybSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9DcmVhdGVNZWV0aW5nRm9ybS9DcmVhdGVNZWV0aW5nRm9ybVwiO1xyXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBNZWV0aW5nRnJlcXVlbmNpZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9UaW1lXCI7XHJcbmltcG9ydCB7IFRpbWUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9UaW1lXCI7XHJcblxyXG4vKipcclxuICogVGhpcyBpcyBhIHNwZWNpZmljIHZpZXcgdGhhdCBpcyB1c2VkIGluIGEgcG9wdXBcclxuICogdG8gYWxsb3cgYSB1c2VyIHRvIGNyZWF0ZSBhIG1lZXRpbmdcclxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqIEBkYXRlICAgMDIvMTcvMjAyMlxyXG4gKi9cclxuY29uc3QgQ3JlYXRlTWVldGluZ1ZpZXcgPSAoeyBncm91cCwgaXNSZWN1cnJpbmdNZWV0aW5nIH0pID0+IHtcclxuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuICAgIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XHJcbiAgICBjb25zdCBbZGF0ZSwgc2V0RGF0ZV0gPSB1c2VTdGF0ZShcclxuICAgICAgICBpc1JlY3VycmluZ01lZXRpbmcgJiYgZ3JvdXAucmVjdXJyaW5nTWVldGluZyA/IGdyb3VwLnJlY3VycmluZ01lZXRpbmcuZGF0ZS5yZXBsYWNlKFwiL1wiLCBcIi1cIikgOiBcIlwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgW3RpbWUsIHNldFRpbWVdID0gdXNlU3RhdGUoaXNSZWN1cnJpbmdNZWV0aW5nICYmIGdyb3VwLnJlY3VycmluZ01lZXRpbmcgPyBncm91cC5yZWN1cnJpbmdNZWV0aW5nLnRpbWUgOiBcIlwiKTtcclxuXHJcbiAgICBjb25zdCBbZnJlcXVlbmN5LCBzZXRGcmVxdWVuY3ldID0gdXNlU3RhdGUoXHJcbiAgICAgICAgaXNSZWN1cnJpbmdNZWV0aW5nICYmIGdyb3VwLnJlY3VycmluZ01lZXRpbmcgPyBncm91cC5yZWN1cnJpbmdNZWV0aW5nLmZyZXF1ZW5jeSA6IE1lZXRpbmdGcmVxdWVuY2llcy5EYWlseVxyXG4gICAgKTtcclxuICAgIGNvbnN0IFtkZXRhaWxzLCBzZXREZXRhaWxzXSA9IHVzZVN0YXRlKFxyXG4gICAgICAgIGlzUmVjdXJyaW5nTWVldGluZyAmJiBncm91cC5yZWN1cnJpbmdNZWV0aW5nID8gZ3JvdXAucmVjdXJyaW5nTWVldGluZy5kZXRhaWxzIDogXCJcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IFtsb2NhdGlvbiwgc2V0TG9jYXRpb25dID0gdXNlU3RhdGUoXHJcbiAgICAgICAgaXNSZWN1cnJpbmdNZWV0aW5nICYmIGdyb3VwLnJlY3VycmluZ01lZXRpbmcgPyBncm91cC5yZWN1cnJpbmdNZWV0aW5nLmxvY2F0aW9uIDogXCJcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IFtyb29tTnVtYmVyLCBzZXRSb29tTnVtYmVyXSA9IHVzZVN0YXRlKFxyXG4gICAgICAgIGlzUmVjdXJyaW5nTWVldGluZyAmJiBncm91cC5yZWN1cnJpbmdNZWV0aW5nID8gZ3JvdXAucmVjdXJyaW5nTWVldGluZy5yb29tTnVtYmVyIDogXCJcIlxyXG4gICAgKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ha2VzIGFuIGFwaSBjYWxsIHRvIHRoZSBjcmVhdGUgbWVldGluZyByb3V0ZSwgcGFzc2luZyBpbiB0aGUgaW5mb3JtYXRpb24gZW50ZXJlZCBpbiB0aGUgZm9ybSBhbmQgcmVuZGVyaW5nIHRoZSBjbGllbnQgYWNjb3JkaW5nIHRvIHRoZSByZXNwb25zZSByZWNlaXZlZFxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDAyLzE3LzIwMjJcclxuICAgICAqIEBhc3luY1xyXG4gICAgICogKi9cclxuICAgIGNvbnN0IHN1Ym1pdENyZWF0ZU1lZXRpbmcgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBpZiAoaXNSZWN1cnJpbmdNZWV0aW5nKVxyXG4gICAgICAgICAgICBzZW5kUG9zdFJlcXVlc3QoXHJcbiAgICAgICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5TZXRSZWN1cnJpbmdNZWV0aW5nLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGRheTogbmV3IERhdGUoZGF0ZSkuZ2V0RGF5KCksXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF0ZS5yZXBsYWNlKC8tL2csIFwiL1wiKSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBUaW1lLnBhcnNlMjRIb3VyVGltZVN0cmluZyh0aW1lKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeSxcclxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvb21OdW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R1ZHlHcm91cElkOiBncm91cC5faWRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU2V0UmVjdXJyaW5nTWVldGluZy5TdWNjZXNzLFxyXG4gICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnkuZ28oMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBzZW5kUG9zdFJlcXVlc3QoXHJcbiAgICAgICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5BZGRPbmVUaW1lTWVldGluZyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXk6IG5ldyBEYXRlKGRhdGUpLmdldERheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGUucmVwbGFjZSgvLS9nLCBcIi9cIiksXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZTogVGltZS5wYXJzZTI0SG91clRpbWVTdHJpbmcodGltZSkudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvb21OdW1iZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R1ZHlHcm91cElkOiBncm91cC5faWRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuQWRkT25lVGltZU1lZXRpbmcuU3VjY2VzcyxcclxuICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LmdvKDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGRhdGUgZmllbGQgaW4gdGhlIGNyZWF0ZSBtZWV0aW5nIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAwMi8xNy8yMDIyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZURhdGVGaWVsZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldERhdGUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgdGltZSBmaWVsZCBpbiB0aGUgY3JlYXRlIG1lZXRpbmcgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDAyLzE3LzIwMjJcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlVGltZUZpZWxkID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0VGltZShldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBmcmVxdWVuY3kgdmFsdWUgaW4gdGhlIGNyZWF0ZSBtZWV0aW5nIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAwMi8xNy8yMDIyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZUZyZXF1ZW5jeUZpZWxkID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0RnJlcXVlbmN5KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGRldGFpbHMgZmllbGQgaW4gdGhlIGNyZWF0ZSBtZWV0aW5nIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAwMi8xNy8yMDIyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZURldGFpbHNGaWVsZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldERldGFpbHMoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgbG9jYXRpb24gZmllbGQgaW4gdGhlIGNyZWF0ZSBtZWV0aW5nIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAwMi8xNy8yMDIyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZUxvY2F0aW9uRmllbGQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXRMb2NhdGlvbihldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSByb29tIG51bWJlciBmaWVsZCBpbiB0aGUgY3JlYXRlIG1lZXRpbmcgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDAyLzE3LzIwMjJcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlUm9vbU51bWJlckZpZWxkID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0Um9vbU51bWJlcihldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPENyZWF0ZU1lZXRpbmdGb3JtXHJcbiAgICAgICAgICAgICAgICBkYXRlPXtkYXRlfVxyXG4gICAgICAgICAgICAgICAgdGltZT17dGltZX1cclxuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeT17ZnJlcXVlbmN5fVxyXG4gICAgICAgICAgICAgICAgZGV0YWlscz17ZGV0YWlsc31cclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uPXtsb2NhdGlvbn1cclxuICAgICAgICAgICAgICAgIHJvb21OdW1iZXI9e3Jvb21OdW1iZXJ9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVEYXRlRmllbGQ9e3VwZGF0ZURhdGVGaWVsZH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWVGaWVsZD17dXBkYXRlVGltZUZpZWxkfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlRnJlcXVlbmN5RmllbGQ9e3VwZGF0ZUZyZXF1ZW5jeUZpZWxkfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGV0YWlsc0ZpZWxkPXt1cGRhdGVEZXRhaWxzRmllbGR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVMb2NhdGlvbkZpZWxkPXt1cGRhdGVMb2NhdGlvbkZpZWxkfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlUm9vbU51bWJlckZpZWxkPXt1cGRhdGVSb29tTnVtYmVyRmllbGR9XHJcbiAgICAgICAgICAgICAgICBzdWJtaXRDcmVhdGVNZWV0aW5nPXtzdWJtaXRDcmVhdGVNZWV0aW5nfVxyXG4gICAgICAgICAgICAgICAgaXNSZWN1cnJpbmdNZWV0aW5nPXtpc1JlY3VycmluZ01lZXRpbmd9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ3JlYXRlTWVldGluZ1ZpZXc7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtXCI7XHJcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXRcIjtcclxuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi9jb3JlL0xhYmVsL0xhYmVsXCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xyXG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XHJcbmltcG9ydCBJbnB1dEZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL0lucHV0RmllbGQvSW5wdXRGaWVsZFwiO1xyXG5pbXBvcnQgRHJvcGRvd24gZnJvbSBcIi4uLy4uL2NvcmUvRHJvcGRvd24vRHJvcGRvd25cIjtcclxuXHJcbmNvbnN0IENyZWF0ZVBvc3RGb3JtID0gKHtcclxuICAgIHRpdGxlLFxyXG4gICAgYm9keSxcclxuICAgIGNhdGVnb3J5LFxyXG4gICAgYXR0YWNobWVudCxcclxuICAgIHVwZGF0ZVRpdGxlRmllbGQsXHJcbiAgICB1cGRhdGVCb2R5RmllbGQsXHJcbiAgICB1cGRhdGVDYXRlZ29yeUZpZWxkLFxyXG4gICAgdXBkYXRlQXR0YWNobWVudCxcclxuICAgIHN1Ym1pdENyZWF0ZVBvc3RcclxufSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNyZWF0ZS1tZWV0aW5nLWZvcm1cIj5cclxuICAgICAgICAgICAgPEZvcm0gb25TdWJtaXQ9e3N1Ym1pdENyZWF0ZVBvc3R9PlxyXG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPlRpdGxlPC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXt0aXRsZX0gb25DaGFuZ2U9e3VwZGF0ZVRpdGxlRmllbGR9IC8+XHJcbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPkJvZHk8L0xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e2JvZHl9IG9uQ2hhbmdlPXt1cGRhdGVCb2R5RmllbGR9IGlzVGV4dEFyZWE9e3RydWV9IC8+XHJcbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPkNhdGVnb3J5PC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17Y2F0ZWdvcnl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlQ2F0ZWdvcnlGaWVsZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e1tcIlByb2JsZW1cIiwgXCJEaXNjdXNzaW9uXCIsIFwiUXVlc3Rpb25cIiwgXCJBbm5vdW5jZW1lbnRcIl19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPkltYWdlPC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwaG90b1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZmlsZUlucHV0IHJpZ2h0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQ9XCIucG5nLCAuanBnLCAuanBlZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInByb2ZpbGVQaWN0dXJlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlQXR0YWNobWVudH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJpbWdQcmV2aWV3XCIgaWQ9XCJsZWZ0XCIgc3JjPXthdHRhY2htZW50fSBhbHQ9XCJcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5DcmVhdGU8L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9Gb3JtPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENyZWF0ZVBvc3RGb3JtO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBDcmVhdGVQb3N0Rm9ybSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9DcmVhdGVQb3N0Rm9ybS9DcmVhdGVQb3N0Rm9ybVwiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgUG9zdFR5cGVzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL1Bvc3RUeXBlc1wiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGNsb3NlUG9wdXAgfSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IHsgc2VuZFBvc3RSZXF1ZXN0V2l0aEZvcm1EYXRhIH0gZnJvbSBcIi4uLy4uLy4uLy4uL0hlbHBlclwiO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzcGVjaWZpYyB2aWV3IHRoYXQgaXMgdXNlZCBpbiBhIHBvcHVwXG4gKiB0byBhbGxvdyBhIHVzZXIgdG8gY3JlYXRlIGEgcG9zdCBmb3IgYSBzdHVkeSBncm91cFxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDAyLzE3LzIwMjJcbiAqL1xuY29uc3QgQ3JlYXRlUG9zdFZpZXcgPSAoeyBncm91cCB9KSA9PiB7XG4gICAgY29uc3QgW3RpdGxlLCBzZXRUaXRsZV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgICBjb25zdCBbYm9keSwgc2V0Qm9keV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgICBjb25zdCBbY2F0ZWdvcnksIHNldENhdGVnb3J5XSA9IHVzZVN0YXRlKFBvc3RUeXBlcy5Qcm9ibGVtKTtcbiAgICBjb25zdCBbYXR0YWNobWVudCwgc2V0QXR0YWNobWVudF0gPSB1c2VTdGF0ZShcIlwiKTtcblxuICAgIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gYXBpIGNhbGwgdG8gdGhlIGNyZWF0ZSBtZWV0aW5nIHJvdXRlLCBwYXNzaW5nIGluIHRoZSBpbmZvcm1hdGlvbiBlbnRlcmVkIGluIHRoZSBmb3JtIGFuZCByZW5kZXJpbmcgdGhlIGNsaWVudCBhY2NvcmRpbmcgdG8gdGhlIHJlc3BvbnNlIHJlY2VpdmVkXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNy8yMDIyXG4gICAgICogQGFzeW5jXG4gICAgICogKi9cbiAgICBjb25zdCBzdWJtaXRDcmVhdGVQb3N0ID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcInRpdGxlXCIsIHRpdGxlKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwibWVzc2FnZVwiLCBib2R5KTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiY2F0ZWdvcnlcIiwgY2F0ZWdvcnkpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJhdHRhY2htZW50XCIsIGF0dGFjaG1lbnQpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJzdHVkeUdyb3VwSWRcIiwgZ3JvdXAuX2lkKTtcbiAgICAgICAgYXdhaXQgc2VuZFBvc3RSZXF1ZXN0V2l0aEZvcm1EYXRhKFxuICAgICAgICAgICAgUm91dGVzLlN0dWR5R3JvdXAuQ3JlYXRlUG9zdCxcbiAgICAgICAgICAgIGZvcm1EYXRhLFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLkNyZWF0ZVBvc3QuU3VjY2VzcyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcbiAgICAgICAgICAgICAgICBoaXN0b3J5LmdvKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIHRpdGxlIGZpZWxkIGluIHRoZSBjcmVhdGUgcG9zdCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMTcvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZVRpdGxlRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0VGl0bGUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGJvZHkgZmllbGQgaW4gdGhlIGNyZWF0ZSBwb3N0IGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNy8yMDIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlQm9keUZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldEJvZHkoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNhdGVnb3J5IGZpZWxkIGluIHRoZSBjcmVhdGUgcG9zdCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMTcvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUNhdGVnb3J5RmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0Q2F0ZWdvcnkoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGF0dGFjaG1lbnQgcHV0IGluIHRoZSBjcmVhdGUgcG9zdCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMTcvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUF0dGFjaG1lbnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0QXR0YWNobWVudChldmVudC50YXJnZXQuZmlsZXNbMF0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Q3JlYXRlUG9zdEZvcm1cbiAgICAgICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgICAgIGJvZHk9e2JvZHl9XG4gICAgICAgICAgICBjYXRlZ29yeT17Y2F0ZWdvcnl9XG4gICAgICAgICAgICBhdHRhY2htZW50PXthdHRhY2htZW50fVxuICAgICAgICAgICAgdXBkYXRlVGl0bGVGaWVsZD17dXBkYXRlVGl0bGVGaWVsZH1cbiAgICAgICAgICAgIHVwZGF0ZUJvZHlGaWVsZD17dXBkYXRlQm9keUZpZWxkfVxuICAgICAgICAgICAgdXBkYXRlQ2F0ZWdvcnlGaWVsZD17dXBkYXRlQ2F0ZWdvcnlGaWVsZH1cbiAgICAgICAgICAgIHVwZGF0ZUF0dGFjaG1lbnQ9e3VwZGF0ZUF0dGFjaG1lbnR9XG4gICAgICAgICAgICBzdWJtaXRDcmVhdGVQb3N0PXtzdWJtaXRDcmVhdGVQb3N0fVxuICAgICAgICAvPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVQb3N0VmlldztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVmlld1Bvc3RWaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9WaWV3UG9zdFZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUHJvZmlsZVBpY3R1cmUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Byb2ZpbGVQaWN0dXJlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL1Byb2ZpbGVQaWN0dXJlLnNjc3NcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY29uc3QgUHJvZmlsZVBpY3R1cmUgPSAoeyBpbWFnZSwgbmFtZSB9KSA9PiB7XG4gICAgcmV0dXJuIGltYWdlID8gKFxuICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInByb2ZpbGUtcGljdHVyZVwiIHNyYz17XCJkYXRhOmltYWdlL3BuZztjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIiArIGltYWdlfSBhbHQ9XCJcIiAvPlxuICAgICkgOiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZmlsZS1waWN0dXJlLWluaXRpYWxcIj57bmFtZSA/IG5hbWVbMF0gOiBcIlwifTwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9maWxlUGljdHVyZTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUG9zdC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUG9zdC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9Qb3N0LnNjc3NcIjtcclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcclxuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBzaG93Vmlld1Bvc3RTdHVkeUdyb3VwUG9wdXAsIHNob3dWaWV3TWVldGluZ3NTdHVkeUdyb3VwUG9wdXAsIHNob3dWaWV3TWVtYmVyUG9wdXAgfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xyXG5CdXR0b25UeXBlcztcclxuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlXCI7XHJcbmltcG9ydCBQb3N0VHlwZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvUG9zdFR5cGVzXCI7XHJcbmltcG9ydCBRdWVzdGlvbk1hcmtJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL1F1ZXN0aW9uTWFya1wiOyAvL1F1ZXN0aW9uXHJcbmltcG9ydCBDYW1wYWlnbkljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvQ2FtcGFpZ25cIjsgLy9Bbm5vdW5jZW1lbnRcclxuaW1wb3J0IENvbW1lbnRJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL0NvbW1lbnRcIjsgLy9EaXNjdXNzaW9uXHJcbmltcG9ydCBFcnJvckljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvRXJyb3JcIjsgLy9Qcm9ibGVtXHJcbmltcG9ydCBFdmVudE5vdGVJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL0V2ZW50Tm90ZVwiOyAvL01lZXRpbmdcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQb3N0VHlwZURldGFpbHMgPSAocG9zdCkgPT4ge1xyXG4gICAgdmFyIGljb247XHJcbiAgICB2YXIgcmVzcG9uc2VUeXBlO1xyXG4gICAgc3dpdGNoIChwb3N0LnR5cGUpIHtcclxuICAgICAgICBjYXNlIFBvc3RUeXBlcy5RdWVzdGlvbjpcclxuICAgICAgICAgICAgaWNvbiA9IDxRdWVzdGlvbk1hcmtJY29uIGNsYXNzTmFtZT1cInRvcC1pY29uXCIgc3R5bGU9e3sgY29sb3I6IHBvc3QuY29sb3IgfX0gLz47XHJcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9IFwiQW5zd2VyXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgUG9zdFR5cGVzLkFubm91bmNlbWVudDpcclxuICAgICAgICAgICAgaWNvbiA9IDxDYW1wYWlnbkljb24gY2xhc3NOYW1lPVwidG9wLWljb25cIiBzdHlsZT17eyBjb2xvcjogcG9zdC5jb2xvciB9fSAvPjtcclxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gXCJDb21tZW50XCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgUG9zdFR5cGVzLkRpc2N1c3Npb246XHJcbiAgICAgICAgICAgIGljb24gPSA8Q29tbWVudEljb24gY2xhc3NOYW1lPVwidG9wLWljb25cIiBzdHlsZT17eyBjb2xvcjogcG9zdC5jb2xvciB9fSAvPjtcclxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gXCJSZXBseVwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFBvc3RUeXBlcy5Qcm9ibGVtOlxyXG4gICAgICAgICAgICBpY29uID0gPEVycm9ySWNvbiBjbGFzc05hbWU9XCJ0b3AtaWNvblwiIHN0eWxlPXt7IGNvbG9yOiBwb3N0LmNvbG9yIH19IC8+O1xyXG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSBcIlNvbHV0aW9uXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgUG9zdFR5cGVzLk1lZXRpbmc6XHJcbiAgICAgICAgICAgIGljb24gPSA8RXZlbnROb3RlSWNvbiBjbGFzc05hbWU9XCJ0b3AtaWNvblwiIHN0eWxlPXt7IGNvbG9yOiBwb3N0LmNvbG9yIH19IC8+O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHJldHVybiB7IGljb24sIHJlc3BvbnNlVHlwZSB9O1xyXG59O1xyXG5jb25zdCBQb3N0ID0gKHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcbiAgICBjb25zb2xlLmxvZyhwcm9wcyk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWlubmVyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicG9zdC1kZXRhaWxzXCJcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy50eXBlICE9PSBQb3N0VHlwZXMuTWVldGluZyA/IFwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjkpXCIgOiBwcm9wcy5jb2xvciArIFwiMTBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBwcm9wcy50eXBlID09PSBQb3N0VHlwZXMuTWVldGluZyAmJiBcIndoaXRlIDlweCBzb2xpZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy50eXBlICE9PSBQb3N0VHlwZXMuTWVldGluZykgZGlzcGF0Y2goc2hvd1ZpZXdQb3N0U3R1ZHlHcm91cFBvcHVwKHByb3BzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgZGlzcGF0Y2goc2hvd1ZpZXdNZWV0aW5nc1N0dWR5R3JvdXBQb3B1cChwcm9wcy5ncm91cCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWlubmVyLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LXRvcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldFBvc3RUeXBlRGV0YWlscyhwcm9wcykuaWNvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IHByb3BzLmNvbG9yIH19Pntwcm9wcy50eXBlfTwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwicG9zdC10aXRsZVwiPntwcm9wcy50aXRsZX08L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJwb3N0LWJvZHlcIj4ge3Byb3BzLm1lc3NhZ2V9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7cHJvcHMuYXR0YWNobWVudCAmJiBwcm9wcy5hdHRhY2htZW50ICE9PSBcIlwiID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXR0YWNobWVudFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtcImRhdGE6aW1hZ2UvcG5nO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiICsgcHJvcHMuYXR0YWNobWVudH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1tZXRhaW5mb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIHsvKiA8cCBjbGFzc05hbWU9XCJwb3N0LXJlc3BvbnNlLWNvdW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntwcm9wcy5yZXNwb25zZXMubGVuZ3RofSA8L3NwYW4+UmVzcG9uc2VzXHJcbiAgICAgICAgICAgICAgICAgICAgPC9wPiAqL31cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJwb3N0LWRhdGVcIj57cHJvcHMudGltZXN0YW1wICYmIG5ldyBEYXRlKHByb3BzLnRpbWVzdGFtcCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWNyZWF0b3JcIiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzaG93Vmlld01lbWJlclBvcHVwKHByb3BzLmNyZWF0b3IpKX0+XHJcbiAgICAgICAgICAgICAgICA8UHJvZmlsZVBpY3R1cmUgaW1hZ2U9e3Byb3BzLmNyZWF0b3IucHJvZmlsZVBpY3R1cmV9IG5hbWU9e3Byb3BzLmNyZWF0b3IubmFtZX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9zdDtcclxuIiwiaW1wb3J0IFwiLi9WaWV3UG9zdFZpZXcuc2Nzc1wiO1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQb3N0VHlwZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvUG9zdFR5cGVzXCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vLi4vY29yZS9Gb3JtL0Zvcm1cIjtcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXQuanNcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkLmpzXCI7XG5pbXBvcnQgUHJvZmlsZVBpY3R1cmUgZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvUHJvZmlsZVBpY3R1cmUvUHJvZmlsZVBpY3R1cmVcIjtcbmltcG9ydCB7IGdldFBvc3RUeXBlRGV0YWlscyB9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL0ZlZWQvUG9zdFwiO1xuaW1wb3J0IHsgc2hvd1JlcG9ydFBvcHVwLCBzaG93Vmlld01lbWJlclBvcHVwIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBSZXBvcnRUeXBlcyB9IGZyb20gXCIuLi8uLi9SZXBvcnQvUmVwb3J0VHlwZXNcIjtcblxuY29uc3QgVmlld1Bvc3RWaWV3ID0gKHsgcG9zdCB9KSA9PiB7XG4gICAgY29uc3QgW3Jlc3BvbnNlLCBzZXRSZXNwb25zZV0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgICBjb25zdCB1cGRhdGVSZXNwb25zZUZpZWxkID0gKGUpID0+IHtcbiAgICAgICAgc2V0UmVzcG9uc2UoZS50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICBjb25zdCBzdWJtaXRSZXNwb25zZSA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlldy1wb3N0LXRvcFwiPlxuICAgICAgICAgICAgICAgIHtnZXRQb3N0VHlwZURldGFpbHMocG9zdCkuaWNvbn1cbiAgICAgICAgICAgICAgICA8aDEgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBwb3N0LmNvbG9yIH19Pntwb3N0LnR5cGV9PC9oMT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWNvbnRlbnRzXCI+XG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInBvc3QtdGl0bGVcIj57cG9zdC50aXRsZX08L2gxPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1ib2R5XCI+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInBvc3QtbWVzc2FnZVwiPntwb3N0Lm1lc3NhZ2V9PC9wPlxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5hdHRhY2htZW50ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwb3N0LWF0dGFjaG1lbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17XCJkYXRhOmltYWdlL3BuZztjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIiArIHBvc3QuYXR0YWNobWVudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWNyZWF0b3JcIiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzaG93Vmlld01lbWJlclBvcHVwKHBvc3QuY3JlYXRvcikpfT5cbiAgICAgICAgICAgICAgICAgICAgPHA+e3Bvc3QuY3JlYXRvci5uYW1lfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPFByb2ZpbGVQaWN0dXJlIGltYWdlPXtwb3N0LmNyZWF0b3IucHJvZmlsZVBpY3R1cmV9IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsvKiA8ZGl2IGNsYXNzTmFtZT1cInJlc3BvbnNlcy1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8aDE+e2dldFBvc3RUeXBlRGV0YWlscyhwb3N0KS5yZXNwb25zZVR5cGV9czo8L2gxPlxuICAgICAgICAgICAgICAgIHtwb3N0LnJlc3BvbnNlcy5tYXAoKHJlc3BvbnNlKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVzcG9uc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPntyZXNwb25zZS5tZXNzYWdlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZSBpbWFnZT17cmVzcG9uc2UucHJvZmlsZVBpY3R1cmV9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDxGb3JtIHN0eWxlPXt7IHBhZGRpbmc6IDAsIG1hcmdpbjogMCB9fSBvblN1Ym1pdD17c3VibWl0UmVzcG9uc2V9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQgc3R5bGU9e3sgZmxleDogXCI3MCVcIiB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtyZXNwb25zZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3VwZGF0ZVJlc3BvbnNlRmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtnZXRQb3N0VHlwZURldGFpbHMocG9zdCkucmVzcG9uc2VUeXBlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259PlN1Ym1pdDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgICAgICA8L2Rpdj4gKi99XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzaG93UmVwb3J0UG9wdXAoUmVwb3J0VHlwZXMuUE9TVCwgcG9zdCkpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgUmVwb3J0XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXdQb3N0VmlldztcbiIsImV4cG9ydCBjb25zdCBSZXBvcnRUeXBlcyA9IHtcbiAgICBTVFVEWV9HUk9VUDogXCJTdHVkeSBHcm91cFwiLFxuICAgIFVTRVI6IFwiVXNlclwiLFxuICAgIFBPU1Q6IFwiUG9zdFwiXG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2FkaW5nLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2FkaW5nLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCB1c2VDb250ZXh0LCB1c2VSZWYsIHVzZUxheW91dEVmZmVjdCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCB7IGggYXMgaGFzT3duUHJvcGVydHksIEUgYXMgRW1vdGlvbiwgYyBhcyBjcmVhdGVFbW90aW9uUHJvcHMsIHcgYXMgd2l0aEVtb3Rpb25DYWNoZSwgVCBhcyBUaGVtZUNvbnRleHQgfSBmcm9tICcuL2Vtb3Rpb24tZWxlbWVudC02OTllNjkwOC5icm93c2VyLmVzbS5qcyc7XG5leHBvcnQgeyBDIGFzIENhY2hlUHJvdmlkZXIsIFQgYXMgVGhlbWVDb250ZXh0LCBhIGFzIFRoZW1lUHJvdmlkZXIsIF8gYXMgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlLCB1IGFzIHVzZVRoZW1lLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIGIgYXMgd2l0aFRoZW1lIH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtNjk5ZTY5MDguYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBpbnNlcnRTdHlsZXMsIGdldFJlZ2lzdGVyZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcblxudmFyIHBrZyA9IHtcblx0bmFtZTogXCJAZW1vdGlvbi9yZWFjdFwiLFxuXHR2ZXJzaW9uOiBcIjExLjcuMVwiLFxuXHRtYWluOiBcImRpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIixcblx0bW9kdWxlOiBcImRpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIixcblx0YnJvd3Nlcjoge1xuXHRcdFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuY2pzLmpzXCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5janMuanNcIixcblx0XHRcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzXCJcblx0fSxcblx0dHlwZXM6IFwidHlwZXMvaW5kZXguZC50c1wiLFxuXHRmaWxlczogW1xuXHRcdFwic3JjXCIsXG5cdFx0XCJkaXN0XCIsXG5cdFx0XCJqc3gtcnVudGltZVwiLFxuXHRcdFwianN4LWRldi1ydW50aW1lXCIsXG5cdFx0XCJfaXNvbGF0ZWQtaG5yc1wiLFxuXHRcdFwidHlwZXMvKi5kLnRzXCIsXG5cdFx0XCJtYWNyby5qc1wiLFxuXHRcdFwibWFjcm8uZC50c1wiLFxuXHRcdFwibWFjcm8uanMuZmxvd1wiXG5cdF0sXG5cdHNpZGVFZmZlY3RzOiBmYWxzZSxcblx0YXV0aG9yOiBcIm1pdGNoZWxsaGFtaWx0b24gPG1pdGNoZWxsQG1pdGNoZWxsaGFtaWx0b24ubWU+XCIsXG5cdGxpY2Vuc2U6IFwiTUlUXCIsXG5cdHNjcmlwdHM6IHtcblx0XHRcInRlc3Q6dHlwZXNjcmlwdFwiOiBcImR0c2xpbnQgdHlwZXNcIlxuXHR9LFxuXHRkZXBlbmRlbmNpZXM6IHtcblx0XHRcIkBiYWJlbC9ydW50aW1lXCI6IFwiXjcuMTMuMTBcIixcblx0XHRcIkBlbW90aW9uL2NhY2hlXCI6IFwiXjExLjcuMVwiLFxuXHRcdFwiQGVtb3Rpb24vc2VyaWFsaXplXCI6IFwiXjEuMC4yXCIsXG5cdFx0XCJAZW1vdGlvbi9zaGVldFwiOiBcIl4xLjEuMFwiLFxuXHRcdFwiQGVtb3Rpb24vdXRpbHNcIjogXCJeMS4wLjBcIixcblx0XHRcIkBlbW90aW9uL3dlYWstbWVtb2l6ZVwiOiBcIl4wLjIuNVwiLFxuXHRcdFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjogXCJeMy4zLjFcIlxuXHR9LFxuXHRwZWVyRGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvY29yZVwiOiBcIl43LjAuMFwiLFxuXHRcdHJlYWN0OiBcIj49MTYuOC4wXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llc01ldGE6IHtcblx0XHRcIkBiYWJlbC9jb3JlXCI6IHtcblx0XHRcdG9wdGlvbmFsOiB0cnVlXG5cdFx0fSxcblx0XHRcIkB0eXBlcy9yZWFjdFwiOiB7XG5cdFx0XHRvcHRpb25hbDogdHJ1ZVxuXHRcdH1cblx0fSxcblx0ZGV2RGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvY29yZVwiOiBcIl43LjEzLjEwXCIsXG5cdFx0XCJAZW1vdGlvbi9jc3NcIjogXCIxMS43LjFcIixcblx0XHRcIkBlbW90aW9uL2Nzcy1wcmV0dGlmaWVyXCI6IFwiMS4wLjFcIixcblx0XHRcIkBlbW90aW9uL3NlcnZlclwiOiBcIjExLjQuMFwiLFxuXHRcdFwiQGVtb3Rpb24vc3R5bGVkXCI6IFwiMTEuNi4wXCIsXG5cdFx0XCJAdHlwZXMvcmVhY3RcIjogXCJeMTYuOS4xMVwiLFxuXHRcdGR0c2xpbnQ6IFwiXjAuMy4wXCIsXG5cdFx0XCJodG1sLXRhZy1uYW1lc1wiOiBcIl4xLjEuMlwiLFxuXHRcdHJlYWN0OiBcIjE2LjE0LjBcIixcblx0XHRcInN2Zy10YWctbmFtZXNcIjogXCJeMS4xLjFcIlxuXHR9LFxuXHRyZXBvc2l0b3J5OiBcImh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vdHJlZS9tYWluL3BhY2thZ2VzL3JlYWN0XCIsXG5cdHB1Ymxpc2hDb25maWc6IHtcblx0XHRhY2Nlc3M6IFwicHVibGljXCJcblx0fSxcblx0XCJ1bWQ6bWFpblwiOiBcImRpc3QvZW1vdGlvbi1yZWFjdC51bWQubWluLmpzXCIsXG5cdHByZWNvbnN0cnVjdDoge1xuXHRcdGVudHJ5cG9pbnRzOiBbXG5cdFx0XHRcIi4vaW5kZXguanNcIixcblx0XHRcdFwiLi9qc3gtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL2pzeC1kZXYtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL19pc29sYXRlZC1obnJzLmpzXCJcblx0XHRdLFxuXHRcdHVtZE5hbWU6IFwiZW1vdGlvblJlYWN0XCJcblx0fVxufTtcblxudmFyIGpzeCA9IGZ1bmN0aW9uIGpzeCh0eXBlLCBwcm9wcykge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICBpZiAocHJvcHMgPT0gbnVsbCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgJ2NzcycpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gIH1cblxuICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgY3JlYXRlRWxlbWVudEFyZ0FycmF5ID0gbmV3IEFycmF5KGFyZ3NMZW5ndGgpO1xuICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMF0gPSBFbW90aW9uO1xuICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMV0gPSBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpO1xuXG4gIGZvciAodmFyIGkgPSAyOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlRWxlbWVudEFyZ0FycmF5W2ldID0gYXJnc1tpXTtcbiAgfSAvLyAkRmxvd0ZpeE1lXG5cblxuICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseShudWxsLCBjcmVhdGVFbGVtZW50QXJnQXJyYXkpO1xufTtcblxudmFyIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IGZhbHNlOyAvLyBtYWludGFpbiBwbGFjZSBvdmVyIHJlcmVuZGVycy5cbi8vIGluaXRpYWwgcmVuZGVyIGZyb20gYnJvd3NlciwgaW5zZXJ0QmVmb3JlIGNvbnRleHQuc2hlZXQudGFnc1swXSBvciBpZiBhIHN0eWxlIGhhc24ndCBiZWVuIGluc2VydGVkIHRoZXJlIHlldCwgYXBwZW5kQ2hpbGRcbi8vIGluaXRpYWwgY2xpZW50LXNpZGUgcmVuZGVyIGZyb20gU1NSLCB1c2UgcGxhY2Ugb2YgaHlkcmF0aW5nIHRhZ1xuXG52YXIgR2xvYmFsID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgJiYgKCAvLyBjaGVjayBmb3IgY2xhc3NOYW1lIGFzIHdlbGwgc2luY2UgdGhlIHVzZXIgaXNcbiAgLy8gcHJvYmFibHkgdXNpbmcgdGhlIGN1c3RvbSBjcmVhdGVFbGVtZW50IHdoaWNoXG4gIC8vIG1lYW5zIGl0IHdpbGwgYmUgdHVybmVkIGludG8gYSBjbGFzc05hbWUgcHJvcFxuICAvLyAkRmxvd0ZpeE1lIEkgZG9uJ3QgcmVhbGx5IHdhbnQgdG8gYWRkIGl0IHRvIHRoZSB0eXBlIHNpbmNlIGl0IHNob3VsZG4ndCBiZSB1c2VkXG4gIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wcy5jc3MpKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIHRoZSBjc3MgcHJvcCBvbiBHbG9iYWwsIGRpZCB5b3UgbWVhbiB0byB1c2UgdGhlIHN0eWxlcyBwcm9wIGluc3RlYWQ/XCIpO1xuICAgIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IHRydWU7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gcHJvcHMuc3R5bGVzO1xuICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhbc3R5bGVzXSwgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuICAvLyBidXQgaXQgaXMgYmFzZWQgb24gYSBjb25zdGFudCB0aGF0IHdpbGwgbmV2ZXIgY2hhbmdlIGF0IHJ1bnRpbWVcbiAgLy8gaXQncyBlZmZlY3RpdmVseSBsaWtlIGhhdmluZyB0d28gaW1wbGVtZW50YXRpb25zIGFuZCBzd2l0Y2hpbmcgdGhlbSBvdXRcbiAgLy8gc28gaXQncyBub3QgYWN0dWFsbHkgYnJlYWtpbmcgYW55dGhpbmdcblxuXG4gIHZhciBzaGVldFJlZiA9IHVzZVJlZigpO1xuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBrZXkgPSBjYWNoZS5rZXkgKyBcIi1nbG9iYWxcIjtcbiAgICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIG5vbmNlOiBjYWNoZS5zaGVldC5ub25jZSxcbiAgICAgIGNvbnRhaW5lcjogY2FjaGUuc2hlZXQuY29udGFpbmVyLFxuICAgICAgc3BlZWR5OiBjYWNoZS5zaGVldC5pc1NwZWVkeVxuICAgIH0pO1xuICAgIHZhciByZWh5ZHJhdGluZyA9IGZhbHNlOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb249XFxcIlwiICsga2V5ICsgXCIgXCIgKyBzZXJpYWxpemVkLm5hbWUgKyBcIlxcXCJdXCIpO1xuXG4gICAgaWYgKGNhY2hlLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICBzaGVldC5iZWZvcmUgPSBjYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICByZWh5ZHJhdGluZyA9IHRydWU7IC8vIGNsZWFyIHRoZSBoYXNoIHNvIHRoaXMgbm9kZSB3b24ndCBiZSByZWNvZ25pemFibGUgYXMgcmVoeWRyYXRhYmxlIGJ5IG90aGVyIDxHbG9iYWwvPnNcblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIGtleSk7XG4gICAgICBzaGVldC5oeWRyYXRlKFtub2RlXSk7XG4gICAgfVxuXG4gICAgc2hlZXRSZWYuY3VycmVudCA9IFtzaGVldCwgcmVoeWRyYXRpbmddO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH07XG4gIH0sIFtjYWNoZV0pO1xuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGVldFJlZkN1cnJlbnQgPSBzaGVldFJlZi5jdXJyZW50O1xuICAgIHZhciBzaGVldCA9IHNoZWV0UmVmQ3VycmVudFswXSxcbiAgICAgICAgcmVoeWRyYXRpbmcgPSBzaGVldFJlZkN1cnJlbnRbMV07XG5cbiAgICBpZiAocmVoeWRyYXRpbmcpIHtcbiAgICAgIHNoZWV0UmVmQ3VycmVudFsxXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gc2hlZXQudGFnc1tzaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH1cblxuICAgIGNhY2hlLmluc2VydChcIlwiLCBzZXJpYWxpemVkLCBzaGVldCwgZmFsc2UpO1xuICB9LCBbY2FjaGUsIHNlcmlhbGl6ZWQubmFtZV0pO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHbG9iYWwuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkdsb2JhbCc7XG59XG5cbmZ1bmN0aW9uIGNzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVTdHlsZXMoYXJncyk7XG59XG5cbnZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIG5hbWUgKyBcIntcIiArIGluc2VydGFibGUuc3R5bGVzICsgXCJ9XCIsXG4gICAgYW5pbTogMSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJfRU1PX1wiICsgdGhpcy5uYW1lICsgXCJfXCIgKyB0aGlzLnN0eWxlcyArIFwiX0VNT19cIjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZy5zdHlsZXMgIT09IHVuZGVmaW5lZCAmJiBhcmcubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBoYXZlIHBhc3NlZCBzdHlsZXMgY3JlYXRlZCB3aXRoIGBjc3NgIGZyb20gYEBlbW90aW9uL3JlYWN0YCBwYWNrYWdlIHRvIHRoZSBgY3hgLlxcbicgKyAnYGN4YCBpcyBtZWFudCB0byBjb21wb3NlIGNsYXNzIG5hbWVzIChzdHJpbmdzKSBzbyB5b3Ugc2hvdWxkIGNvbnZlcnQgdGhvc2Ugc3R5bGVzIHRvIGEgY2xhc3MgbmFtZSBieSBwYXNzaW5nIHRoZW0gdG8gdGhlIGBjc3NgIHJlY2VpdmVkIGZyb20gPENsYXNzTmFtZXMvPiBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgTm9vcCA9IGZ1bmN0aW9uIE5vb3AoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIENsYXNzTmFtZXMgPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUpIHtcbiAgdmFyIGhhc1JlbmRlcmVkID0gZmFsc2U7XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjc3MgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQpO1xuXG4gICAge1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgIGlmIChoYXNSZW5kZXJlZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2N4IGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShjYWNoZS5yZWdpc3RlcmVkLCBjc3MsIGNsYXNzbmFtZXMoYXJncykpO1xuICB9O1xuXG4gIHZhciBjb250ZW50ID0ge1xuICAgIGNzczogY3NzLFxuICAgIGN4OiBjeCxcbiAgICB0aGVtZTogdXNlQ29udGV4dChUaGVtZUNvbnRleHQpXG4gIH07XG4gIHZhciBlbGUgPSBwcm9wcy5jaGlsZHJlbihjb250ZW50KTtcbiAgaGFzUmVuZGVyZWQgPSB0cnVlO1xuICB2YXIgcG9zc2libHlTdHlsZUVsZW1lbnQgPSAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChOb29wLCBudWxsKTtcblxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgcG9zc2libHlTdHlsZUVsZW1lbnQsIGVsZSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQ2xhc3NOYW1lcy5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ2xhc3NOYW1lcyc7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBpc0Jyb3dzZXIgPSBcIm9iamVjdFwiICE9PSAndW5kZWZpbmVkJzsgLy8gIzE3MjcgZm9yIHNvbWUgcmVhc29uIEplc3QgZXZhbHVhdGVzIG1vZHVsZXMgdHdpY2UgaWYgc29tZSBjb25zdW1pbmcgbW9kdWxlIGdldHMgbW9ja2VkIHdpdGggamVzdC5tb2NrXG5cbiAgdmFyIGlzSmVzdCA9IHR5cGVvZiBqZXN0ICE9PSAndW5kZWZpbmVkJztcblxuICBpZiAoaXNCcm93c2VyICYmICFpc0plc3QpIHtcbiAgICAvLyBnbG9iYWxUaGlzIGhhcyB3aWRlIGJyb3dzZXIgc3VwcG9ydCAtIGh0dHBzOi8vY2FuaXVzZS5jb20vP3NlYXJjaD1nbG9iYWxUaGlzLCBOb2RlLmpzIDEyIGFuZCBsYXRlclxuICAgIHZhciBnbG9iYWxDb250ZXh0ID0gLy8gJEZsb3dJZ25vcmVcbiAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICA6IGlzQnJvd3NlciA/IHdpbmRvdyA6IGdsb2JhbDtcbiAgICB2YXIgZ2xvYmFsS2V5ID0gXCJfX0VNT1RJT05fUkVBQ1RfXCIgKyBwa2cudmVyc2lvbi5zcGxpdCgnLicpWzBdICsgXCJfX1wiO1xuXG4gICAgaWYgKGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSkge1xuICAgICAgY29uc29sZS53YXJuKCdZb3UgYXJlIGxvYWRpbmcgQGVtb3Rpb24vcmVhY3Qgd2hlbiBpdCBpcyBhbHJlYWR5IGxvYWRlZC4gUnVubmluZyAnICsgJ211bHRpcGxlIGluc3RhbmNlcyBtYXkgY2F1c2UgcHJvYmxlbXMuIFRoaXMgY2FuIGhhcHBlbiBpZiBtdWx0aXBsZSAnICsgJ3ZlcnNpb25zIGFyZSB1c2VkLCBvciBpZiBtdWx0aXBsZSBidWlsZHMgb2YgdGhlIHNhbWUgdmVyc2lvbiBhcmUgJyArICd1c2VkLicpO1xuICAgIH1cblxuICAgIGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSA9IHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2xhc3NOYW1lcywgR2xvYmFsLCBqc3ggYXMgY3JlYXRlRWxlbWVudCwgY3NzLCBqc3gsIGtleWZyYW1lcyB9O1xuIiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLCBzbG90KTtcbn1cbmNvbnN0IGNpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2lyY3VsYXJQcm9ncmVzcycsIFsncm9vdCcsICdkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdzdmcnLCAnY2lyY2xlJywgJ2NpcmNsZURldGVybWluYXRlJywgJ2NpcmNsZUluZGV0ZXJtaW5hdGUnLCAnY2lyY2xlRGlzYWJsZVNocmluayddKTtcbmV4cG9ydCBkZWZhdWx0IGNpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVTaHJpbmtcIiwgXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ0aGlja25lc3NcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl07XG5cbmxldCBfID0gdCA9PiB0LFxuICAgIF90LFxuICAgIF90MixcbiAgICBfdDMsXG4gICAgX3Q0O1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsga2V5ZnJhbWVzLCBjc3MgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jaXJjdWxhclByb2dyZXNzQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgU0laRSA9IDQ0O1xuY29uc3QgY2lyY3VsYXJSb3RhdGVLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG5gKSk7XG5jb25zdCBjaXJjdWxhckRhc2hLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDIgfHwgKF90MiA9IF9gXG4gIDAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICB9XG5cbiAgNTAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxMDBweCwgMjAwcHg7XG4gICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0xNXB4O1xuICB9XG5cbiAgMTAwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMTAwcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAtMTI1cHg7XG4gIH1cbmApKTtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlU2hyaW5rXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIHN2ZzogWydzdmcnXSxcbiAgICBjaXJjbGU6IFsnY2lyY2xlJywgYGNpcmNsZSR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBkaXNhYmxlU2hyaW5rICYmICdjaXJjbGVEaXNhYmxlU2hyaW5rJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScpXG59LCBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICBjb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG59KSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gb3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgJiYgY3NzKF90MyB8fCAoX3QzID0gX2BcbiAgICAgIGFuaW1hdGlvbjogJHswfSAxLjRzIGxpbmVhciBpbmZpbml0ZTtcbiAgICBgKSwgY2lyY3VsYXJSb3RhdGVLZXlmcmFtZSkpO1xuY29uc3QgQ2lyY3VsYXJQcm9ncmVzc1NWRyA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdTdmcnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5zdmdcbn0pKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyAvLyBLZWVwcyB0aGUgcHJvZ3Jlc3MgY2VudGVyZWRcblxufSk7XG5jb25zdCBDaXJjdWxhclByb2dyZXNzQ2lyY2xlID0gc3R5bGVkKCdjaXJjbGUnLCB7XG4gIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ0NpcmNsZScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuY2lyY2xlLCBzdHlsZXNbYGNpcmNsZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnZhcmlhbnQpfWBdLCBvd25lclN0YXRlLmRpc2FibGVTaHJpbmsgJiYgc3R5bGVzLmNpcmNsZURpc2FibGVTaHJpbmtdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBzdHJva2U6ICdjdXJyZW50Q29sb3InXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3N0cm9rZS1kYXNob2Zmc2V0Jylcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmIHtcbiAgLy8gU29tZSBkZWZhdWx0IHZhbHVlIHRoYXQgbG9va3MgZmluZSB3YWl0aW5nIGZvciB0aGUgYW5pbWF0aW9uIHRvIGtpY2tzIGluLlxuICBzdHJva2VEYXNoYXJyYXk6ICc4MHB4LCAyMDBweCcsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDAgLy8gQWRkIHRoZSB1bml0IHRvIGZpeCBhIEVkZ2UgMTYgYW5kIGJlbG93IGJ1Zy5cblxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmICFvd25lclN0YXRlLmRpc2FibGVTaHJpbmsgJiYgY3NzKF90NCB8fCAoX3Q0ID0gX2BcbiAgICAgIGFuaW1hdGlvbjogJHswfSAxLjRzIGVhc2UtaW4tb3V0IGluZmluaXRlO1xuICAgIGApLCBjaXJjdWxhckRhc2hLZXlmcmFtZSkpO1xuLyoqXG4gKiAjIyBBUklBXG4gKlxuICogSWYgdGhlIHByb2dyZXNzIGJhciBpcyBkZXNjcmliaW5nIHRoZSBsb2FkaW5nIHByb2dyZXNzIG9mIGEgcGFydGljdWxhciByZWdpb24gb2YgYSBwYWdlLFxuICogeW91IHNob3VsZCB1c2UgYGFyaWEtZGVzY3JpYmVkYnlgIHRvIHBvaW50IHRvIHRoZSBwcm9ncmVzcyBiYXIsIGFuZCBzZXQgdGhlIGBhcmlhLWJ1c3lgXG4gKiBhdHRyaWJ1dGUgdG8gYHRydWVgIG9uIHRoYXQgcmVnaW9uIHVudGlsIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICovXG5cbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3MgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaXJjdWxhclByb2dyZXNzKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgIGRpc2FibGVTaHJpbmsgPSBmYWxzZSxcbiAgICBzaXplID0gNDAsXG4gICAgc3R5bGUsXG4gICAgdGhpY2tuZXNzID0gMy42LFxuICAgIHZhbHVlID0gMCxcbiAgICB2YXJpYW50ID0gJ2luZGV0ZXJtaW5hdGUnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgZGlzYWJsZVNocmluayxcbiAgICBzaXplLFxuICAgIHRoaWNrbmVzcyxcbiAgICB2YWx1ZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgY2lyY2xlU3R5bGUgPSB7fTtcbiAgY29uc3Qgcm9vdFN0eWxlID0ge307XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHt9O1xuXG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnKSB7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IDIgKiBNYXRoLlBJICogKChTSVpFIC0gdGhpY2tuZXNzKSAvIDIpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hhcnJheSA9IGNpcmN1bWZlcmVuY2UudG9GaXhlZCgzKTtcbiAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVub3cnXSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBgJHsoKDEwMCAtIHZhbHVlKSAvIDEwMCAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyl9cHhgO1xuICAgIHJvb3RTdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKC05MGRlZyknO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3NSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBoZWlnaHQ6IHNpemVcbiAgICB9LCByb290U3R5bGUsIHN0eWxlKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmLFxuICAgIHJvbGU6IFwicHJvZ3Jlc3NiYXJcIlxuICB9LCByb290UHJvcHMsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3NTVkcsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdmcsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgdmlld0JveDogYCR7U0laRSAvIDJ9ICR7U0laRSAvIDJ9ICR7U0laRX0gJHtTSVpFfWAsXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ2lyY3VsYXJQcm9ncmVzc0NpcmNsZSwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY2lyY2xlLFxuICAgICAgICBzdHlsZTogY2lyY2xlU3R5bGUsXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgIGN4OiBTSVpFLFxuICAgICAgICBjeTogU0laRSxcbiAgICAgICAgcjogKFNJWkUgLSB0aGlja25lc3MpIC8gMixcbiAgICAgICAgZmlsbDogXCJub25lXCIsXG4gICAgICAgIHN0cm9rZVdpZHRoOiB0aGlja25lc3NcbiAgICAgIH0pXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDaXJjdWxhclByb2dyZXNzLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlU2hyaW5rICYmIHByb3BzLnZhcmlhbnQgJiYgcHJvcHMudmFyaWFudCAhPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIHRoZSBgZGlzYWJsZVNocmlua2AgcHJvcCAnICsgJ3dpdGggYSB2YXJpYW50IG90aGVyIHRoYW4gYGluZGV0ZXJtaW5hdGVgLiBUaGlzIHdpbGwgaGF2ZSBubyBlZmZlY3QuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJZiB1c2luZyBhIG51bWJlciwgdGhlIHBpeGVsIHVuaXQgaXMgYXNzdW1lZC5cbiAgICogSWYgdXNpbmcgYSBzdHJpbmcsIHlvdSBuZWVkIHRvIHByb3ZpZGUgdGhlIENTUyB1bml0LCBlLmcgJzNyZW0nLlxuICAgKiBAZGVmYXVsdCA0MFxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdGhpY2tuZXNzIG9mIHRoZSBjaXJjbGUuXG4gICAqIEBkZWZhdWx0IDMuNlxuICAgKi9cbiAgdGhpY2tuZXNzOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGluZGljYXRvciBmb3IgdGhlIGRldGVybWluYXRlIHZhcmlhbnQuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKiBAZGVmYXVsdCAnaW5kZXRlcm1pbmF0ZSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDaXJjdWxhclByb2dyZXNzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJzeFwiXTtcbmltcG9ydCB7IGlzUGxhaW5PYmplY3QgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHByb3BUb1N0eWxlRnVuY3Rpb24gfSBmcm9tICcuLi9nZXRUaGVtZVZhbHVlJztcblxuY29uc3Qgc3BsaXRQcm9wcyA9IHByb3BzID0+IHtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHN5c3RlbVByb3BzOiB7fSxcbiAgICBvdGhlclByb3BzOiB7fVxuICB9O1xuICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICBpZiAocHJvcFRvU3R5bGVGdW5jdGlvbltwcm9wXSkge1xuICAgICAgcmVzdWx0LnN5c3RlbVByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5vdGhlclByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dGVuZFN4UHJvcChwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3g6IGluU3hcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHtcbiAgICBzeXN0ZW1Qcm9wcyxcbiAgICBvdGhlclByb3BzXG4gIH0gPSBzcGxpdFByb3BzKG90aGVyKTtcbiAgbGV0IGZpbmFsU3g7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5TeCkpIHtcbiAgICBmaW5hbFN4ID0gW3N5c3RlbVByb3BzLCAuLi5pblN4XTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgaW5TeCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZpbmFsU3ggPSAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaW5TeCguLi5hcmdzKTtcblxuICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN5c3RlbVByb3BzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN5c3RlbVByb3BzLCByZXN1bHQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZmluYWxTeCA9IF9leHRlbmRzKHt9LCBzeXN0ZW1Qcm9wcywgaW5TeCk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBzeDogZmluYWxTeFxuICB9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCwgeyBleHRlbmRTeFByb3AgfSBmcm9tICcuL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQm94KG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdFRoZW1lLFxuICAgIGRlZmF1bHRDbGFzc05hbWUgPSAnTXVpQm94LXJvb3QnLFxuICAgIGdlbmVyYXRlQ2xhc3NOYW1lXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBCb3hSb290ID0gc3R5bGVkKCdkaXYnKShzdHlsZUZ1bmN0aW9uU3gpO1xuICBjb25zdCBCb3ggPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCb3goaW5Qcm9wcywgcmVmKSB7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuXG4gICAgY29uc3QgX2V4dGVuZFN4UHJvcCA9IGV4dGVuZFN4UHJvcChpblByb3BzKSxcbiAgICAgICAgICB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAnZGl2J1xuICAgIH0gPSBfZXh0ZW5kU3hQcm9wLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX2V4dGVuZFN4UHJvcCwgX2V4Y2x1ZGVkKTtcblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChCb3hSb290LCBfZXh0ZW5kcyh7XG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3NOYW1lLCBnZW5lcmF0ZUNsYXNzTmFtZSA/IGdlbmVyYXRlQ2xhc3NOYW1lKGRlZmF1bHRDbGFzc05hbWUpIDogZGVmYXVsdENsYXNzTmFtZSksXG4gICAgICB0aGVtZTogdGhlbWVcbiAgICB9LCBvdGhlcikpO1xuICB9KTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQm94LnByb3BUeXBlc1xuICAvKiByZW1vdmUtcHJvcHR5cGVzICovXG4gID0ge1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gICAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gICAgLyoqXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYXJyYXksIFByb3BUeXBlcy5mdW5jXSlcbiAgfSA6IHZvaWQgMDtcbiAgcmV0dXJuIEJveDtcbn0iLCJpbXBvcnQgeyBjcmVhdGVCb3ggfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICcuLi9zdHlsZXMnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqL1xuXG5jb25zdCBCb3ggPSBjcmVhdGVCb3goe1xuICBkZWZhdWx0VGhlbWUsXG4gIGRlZmF1bHRDbGFzc05hbWU6ICdNdWlCb3gtcm9vdCcsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGVcbn0pO1xuZXhwb3J0IGRlZmF1bHQgQm94OyIsImltcG9ydCBcIi4vTG9hZGluZy5zY3NzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQ2lyY3VsYXJQcm9ncmVzcyBmcm9tIFwiQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzXCI7XG5pbXBvcnQgQm94IGZyb20gXCJAbXVpL21hdGVyaWFsL0JveFwiO1xuXG5jb25zdCBMb2FkaW5nID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9hZGluZ1wiPlxuICAgICAgICAgICAgPEJveCBzeD17eyBvdmVyZmxvdzogXCJoaWRkZW5cIiB9fT5cbiAgICAgICAgICAgICAgICA8Q2lyY3VsYXJQcm9ncmVzcyBzeD17eyBjb2xvcjogXCIjZDRhYThjXCIgfX0gLz5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTG9hZGluZztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVmlld01lZXRpbmdWaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9WaWV3TWVldGluZ1ZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2hvd0NvbmZpcm1hdGlvblBvcHVwLCBzaG93Vmlld01lZXRpbmdzU3R1ZHlHcm91cFBvcHVwIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCB7IERheXMsIE1lZXRpbmdGcmVxdWVuY2llcyB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL1RpbWVcIjtcbmltcG9ydCB7IGdldE5leHRNZWV0aW5nLCBzZW5kRGVsZXRlUmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcbmltcG9ydCBFdmVudE5vdGVJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL0V2ZW50Tm90ZVwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgXCIuL1ZpZXdNZWV0aW5nVmlldy5zY3NzXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlc1wiO1xuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzcGVjaWZpYyB2aWV3IHRoYXQgaXMgdXNlZCBpbiBhIHBvcHVwXG4gKiB0byBhbGxvdyBhIHVzZXIgdG8gdmlldyBhbGwgdGhlIG1lZXRpbmdzIGluIGEgc3R1ZHkgZ3JvdXBcbiAqIEBwYXJhbSB7T2JqZWN0fSBncm91cCBUaGUgZ3JvdXAgdG8gcmVmZXJlbmNlIHRoZSBtZWV0aW5nc1xuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDAyLzIzLzIwMjJcbiAqL1xuY29uc3QgVmlld01lZXRpbmdWaWV3ID0gKHsgZ3JvdXAgfSkgPT4ge1xuICAgIGNvbnN0IFtuZXh0TWVldGluZywgc2V0TmV4dE1lZXRpbmddID0gdXNlU3RhdGUoXCJBbGwgQ2xlYXIhXCIpO1xuICAgIGNvbnN0IHVzZXIgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLnVzZXIpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0TmV4dE1lZXRpbmcoZ2V0TmV4dE1lZXRpbmcoZ3JvdXApKTtcbiAgICB9LCBbXSk7XG5cbiAgICBjb25zdCBnZXRSZWN1cnJpbmdNZWV0aW5nRnJlcXVlbmN5SlNYID0gKCkgPT4ge1xuICAgICAgICBpZiAoZ3JvdXAucmVjdXJyaW5nTWVldGluZykge1xuICAgICAgICAgICAgaWYgKGdyb3VwLnJlY3VycmluZ01lZXRpbmcuZnJlcXVlbmN5ID09PSBNZWV0aW5nRnJlcXVlbmNpZXMuRGFpbHkpIHJldHVybiA8PkV2ZXJ5IGRheTwvPjtcblxuICAgICAgICAgICAgaWYgKGdyb3VwLnJlY3VycmluZ01lZXRpbmcuZnJlcXVlbmN5ID09PSBNZWV0aW5nRnJlcXVlbmNpZXMuV2Vla2x5KVxuICAgICAgICAgICAgICAgIHJldHVybiA8PkV2ZXJ5IHtncm91cC5yZWN1cnJpbmdNZWV0aW5nLmRheX08Lz47XG5cbiAgICAgICAgICAgIGlmIChncm91cC5yZWN1cnJpbmdNZWV0aW5nLmZyZXF1ZW5jeSA9PT0gTWVldGluZ0ZyZXF1ZW5jaWVzLk1vbnRobHkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDw+T24gdGhlIHtuZXcgRGF0ZShncm91cC5yZWN1cnJpbmdNZWV0aW5nLmRhdGUpLmdldERhdGV9dGggb2YgZXZlcnkgbW9udGguPC8+O1xuXG4gICAgICAgICAgICBpZiAoZ3JvdXAucmVjdXJyaW5nTWVldGluZy5mcmVxdWVuY3kgPT09IE1lZXRpbmdGcmVxdWVuY2llcy5ZZWFybHkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDw+T24ge2dyb3VwLnJlY3VycmluZ01lZXRpbmcuZGF0ZX0gb2YgZXZlcnkgeWVhci48Lz47XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgc3VibWl0RGVsZXRlT25lVGltZU1lZXRpbmcgPSAobWVldGluZ0lkKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgc2hvd0NvbmZpcm1hdGlvblBvcHVwKFxuICAgICAgICAgICAgICAgIGFzeW5jIChjb25maXJtZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm1lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlbmREZWxldGVSZXF1ZXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJvdXRlcy5TdHVkeUdyb3VwLkRlbGV0ZU1lZXRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHVkeUdyb3VwSWQ6IGdyb3VwLl9pZCwgbWVldGluZ0lkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLlN1Y2Nlc3NEZWxldGVNZWV0aW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcnkuZ28oMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBkaXNwYXRjaChzaG93Vmlld01lZXRpbmdzU3R1ZHlHcm91cFBvcHVwKGdyb3VwKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIkNvbmZpcm0gRGVsZXRpb25cIixcbiAgICAgICAgICAgICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIG1lZXRpbmc/XCJcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlldy1tZWV0aW5nLXRvcFwiPlxuICAgICAgICAgICAgICAgIDxFdmVudE5vdGVJY29uIGNsYXNzTmFtZT1cInRvcC1pY29uXCIgc3R5bGU9e3sgY29sb3I6IGdyb3VwLmdyb3VwQ29sb3IgfX0gLz5cbiAgICAgICAgICAgICAgICA8aDEgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBncm91cC5ncm91cENvbG9yIH19Pk1lZXRpbmcgU2NoZWR1bGUgZm9yIHtncm91cC5uYW1lfTwvaDE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZy1jb250YWluZXIgbmV4dC1tZWV0aW5nLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxoMT5OZXh0IE1lZXRpbmc6PC9oMT5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZ1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lZXRpbmctdGltZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RGF0ZTogPC9zcGFuPiB7bmV4dE1lZXRpbmcuZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlRpbWU6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmV4dE1lZXRpbmcudGltZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkxvY2F0aW9uOiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge25leHRNZWV0aW5nLmxvY2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZWV0aW5nLWRldGFpbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkRldGFpbHM6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmV4dE1lZXRpbmcuZGV0YWlsc31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAge2dyb3VwLnJlY3VycmluZ01lZXRpbmcgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZy1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgxPlJlY3VycmluZyBTY2hlZHVsZTo8L2gxPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZWV0aW5nLXRpbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RnJlcXVlbmN5OiA8L3NwYW4+IHtnZXRSZWN1cnJpbmdNZWV0aW5nRnJlcXVlbmN5SlNYKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UaW1lOiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nLnRpbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Mb2NhdGlvbjogPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z3JvdXAucmVjdXJyaW5nTWVldGluZy5sb2NhdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZy1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkRldGFpbHM6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2dyb3VwLnJlY3VycmluZ01lZXRpbmcuZGV0YWlsc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9uZS10aW1lLW1lZXRpbmdzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxoMT5PbmUtdGltZSBNZWV0aW5nczo8L2gxPlxuXG4gICAgICAgICAgICAgICAge2dyb3VwLm93bmVyICYmXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLm93bmVyLl9pZCA9PT0gdXNlci5faWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAubWVldGluZ3MubWFwKChtZWV0aW5nKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9uZS10aW1lLW1lZXRpbmctY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvbmUtdGltZS1tZWV0aW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RGF0ZTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttZWV0aW5nLmRhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UaW1lPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge21lZXRpbmcudGltZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZWxldGUtbWVldGluZy1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdERlbGV0ZU9uZVRpbWVNZWV0aW5nKG1lZXRpbmcuX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlbGV0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmlld01lZXRpbmdWaWV3O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9WaWV3TWVtYmVyVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVmlld01lbWJlclZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlXCI7XG5pbXBvcnQgXCIuL1ZpZXdNZW1iZXJWaWV3LnNjc3NcIjtcbmltcG9ydCB7IHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgY2xvc2VQb3B1cCwgc2hvd1JlcG9ydFBvcHVwIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBSZXBvcnRUeXBlcyB9IGZyb20gXCIuLi8uLi9SZXBvcnQvUmVwb3J0VHlwZXNcIjtcblxuY29uc3QgVmlld01lbWJlclZpZXcgPSAoeyBtZW1iZXIgfSkgPT4ge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICAgIGNvbnN0IGNyZWF0ZUNvbnZlcnNhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgc2VuZFBvc3RSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLk1lc3NhZ2UuQ3JlYXRlQ29udmVyc2F0aW9uLFxuICAgICAgICAgICAgeyByZWNlaXZlcklkOiBtZW1iZXIuX2lkIH0sXG4gICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLk1lc3NhZ2UuU3VjY2Vzc0NyZWF0ZUNvbnZlcnNhdGlvbixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKFwiL21lc3NhZ2VcIik7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlldy1tZW1iZXJzLXZpZXctY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lbWJlci1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZW1iZXItcHJpbWFyeS1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZSBpbWFnZT17bWVtYmVyLnByb2ZpbGVQaWN0dXJlfSBuYW1lPXttZW1iZXIubmFtZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPGgxPnttZW1iZXIubmFtZX08L2gxPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVtYmVyLXNlY29uZGFyeS1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPnttZW1iZXIuZW1haWx9PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcHRpb25zIHNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259IG9uQ2xpY2s9e2NyZWF0ZUNvbnZlcnNhdGlvbn0+XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9e0J1dHRvblR5cGVzLkRlc3RydWNpdmV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dSZXBvcnRQb3B1cChSZXBvcnRUeXBlcy5VU0VSLCBtZW1iZXIpKX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIFJlcG9ydFxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBWaWV3TWVtYmVyVmlldztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVwb3J0Vmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUmVwb3J0Vmlldy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9SZXBvcnRWaWV3LnNjc3NcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgeyBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vSGVscGVyXCI7XG5pbXBvcnQgeyBjbG9zZVBvcHVwIH0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBGb3JtIGZyb20gXCIuLi8uLi9jb3JlL0Zvcm0vRm9ybVwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGRcIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXRcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbFwiO1xuXG5jb25zdCBSZXBvcnRWaWV3ID0gKHsgdHlwZSwgcmVwb3J0RGF0YSB9KSA9PiB7XG4gICAgY29uc3QgW2NvbW1lbnQsIHNldENvbW1lbnRdID0gdXNlU3RhdGUoXCJcIik7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gICAgY29uc3Qgc3VibWl0UmVwb3J0ID0gKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBjb25zb2xlLmxvZyhyZXBvcnREYXRhKTtcblxuICAgICAgICBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuUmVwb3J0LlNlbmRSZXBvcnQsXG4gICAgICAgICAgICB7IGlkOiByZXBvcnREYXRhLl9pZCwgY29tbWVudCwgcmVwb3J0VHlwZTogdHlwZSB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5SZXBvcnQuRW1haWxTZW50LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXBvcnQtdmlld1wiPlxuICAgICAgICAgICAgPGgxPlBsZWFzZSBhZGQgYSBjb21tZW50IGZvciB0aGUgcmVhc29uIHlvdSBhcmUgcmVwb3J0aW5nIHRoaXMge3R5cGV9PC9oMT5cbiAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtzdWJtaXRSZXBvcnR9PlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+Q29tbWVudHM6PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCBvbkNoYW5nZT17KGUpID0+IHNldENvbW1lbnQoZS50YXJnZXQudmFsdWUpfSB2YWx1ZT17Y29tbWVudH0gaXNUZXh0QXJlYT17dHJ1ZX0gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5Eb25lPC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZXBvcnRWaWV3O1xuIiwiaW1wb3J0IFwiLi9Qb3B1cC5zY3NzXCI7XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGNsb3NlUG9wdXAsIHNob3dKb2luU3R1ZHlHcm91cFBvcHVwIH0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBDcmVhdGVTdHVkeUdyb3VwVmlldyBmcm9tIFwiLi4vU3R1ZHkvQ3JlYXRlU3R1ZHlHcm91cFZpZXdcIjtcbmltcG9ydCBKb2luU3R1ZHlHcm91cFZpZXcgZnJvbSBcIi4uL1N0dWR5L2pvaW5TdHVkeUdyb3VwVmlldy9Kb2luU3R1ZHlHcm91cFZpZXdcIjtcbmltcG9ydCBJbnB1dFZpZXcgZnJvbSBcIi4uL0lucHV0L0lucHV0Vmlld1wiO1xuaW1wb3J0IENvbmZpcm1hdGlvbkZvcm0gZnJvbSBcIi4uL0NvbmZpcm1hdGlvbkZvcm0vQ29uZmlybWF0aW9uRm9ybVwiO1xuXG5pbXBvcnQgdmlld3MgZnJvbSBcIi4uL1ZpZXdzXCI7XG5pbXBvcnQgRWRpdFN0dWR5R3JvdXAgZnJvbSBcIi4uLy4uL1ZpZXdzL1N0dWR5R3JvdXAvRWRpdFN0dWR5R3JvdXAvRWRpdFN0dWR5R3JvdXBWaWV3XCI7XG5pbXBvcnQgQ3JlYXRlTWVldGluZ1ZpZXcgZnJvbSBcIi4uL1N0dWR5R3JvdXAvQ3JlYXRlTWVldGluZ1ZpZXcvQ3JlYXRlTWVldGluZ1ZpZXdcIjtcbmltcG9ydCBDcmVhdGVQb3N0VmlldyBmcm9tIFwiLi4vU3R1ZHlHcm91cC9DcmVhdGVQb3N0Vmlldy9DcmVhdGVQb3N0Vmlld1wiO1xuaW1wb3J0IFZpZXdQb3N0VmlldyBmcm9tIFwiLi4vU3R1ZHlHcm91cC9WaWV3UG9zdFZpZXcvVmlld1Bvc3RWaWV3XCI7XG5pbXBvcnQgTG9hZGluZyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Mb2FkaW5nL0xvYWRpbmdcIjtcbmltcG9ydCBWaWV3TWVldGluZ1ZpZXcgZnJvbSBcIi4uL1N0dWR5R3JvdXAvVmlld01lZXRpbmdWaWV3L1ZpZXdNZWV0aW5nVmlld1wiO1xuaW1wb3J0IFZpZXdNZW1iZXJWaWV3IGZyb20gXCIuLi9TdHVkeUdyb3VwL01lbWJlcnMvVmlld01lbWJlclZpZXdcIjtcbmltcG9ydCBSZXBvcnRWaWV3IGZyb20gXCIuLi9SZXBvcnQvUmVwb3J0Vmlld1wiO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHByZXNlbnRhdGlvbmFsIGNvbXBvbmVudCB0aGF0IHByZXNlbnRzIGRpZmZlcmVudCBwb3B1cCB2aWV3cyBhY2NvcmRpbmcgdG8gdGhlXG4gKiB2aWV3IHByb3BlcnR5IGluIHRoZSBwb3B1cFJlZHVjZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2hvd2luZyB0cnVlIGlmIHRoZSBwb3B1cCBpcyBjdXJyZW50bHkgc2hvd2luZyBvbiB0aGUgc2NyZWVuIGFuZCBmYWxzZSBvdGhlcndpc2VcbiAqIEBwYXJhbSB7SlNYfSBjaGlsZHJlbiBjb250ZW50IG9mIHRoZSBwb3B1cFxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDExLzI1LzIwMjFcbiAqL1xuY29uc3QgUG9wdXAgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHZpZXcsIHBheWxvYWQsIHNob3dUb3AgfSA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUucG9wdXBSZWR1Y2VyKTtcbiAgICBjb25zdCBpc0xvYWRpbmcgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLm5vdGlmaWNhdGlvblJlZHVjZXIubG9hZGluZyk7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgbGV0IHBvcHVwVmlldyA9IDw+PC8+O1xuXG4gICAgc3dpdGNoICh2aWV3KSB7XG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5DcmVhdGU6XG4gICAgICAgICAgICBwb3B1cFZpZXcgPSA8Q3JlYXRlU3R1ZHlHcm91cFZpZXcgLz47XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB2aWV3cy5Qb3B1cC5TdHVkeUdyb3VwLkpvaW46XG4gICAgICAgICAgICBwb3B1cFZpZXcgPSA8Sm9pblN0dWR5R3JvdXBWaWV3IGdyb3VwPXtwYXlsb2FkfSBpc0xvZ2dlZEluPXtwcm9wcy5pc0xvZ2dlZElufSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5FZGl0OlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gPEVkaXRTdHVkeUdyb3VwIGdyb3VwPXtwYXlsb2FkfSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5DcmVhdGVNZWV0aW5nOlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gPENyZWF0ZU1lZXRpbmdWaWV3IGdyb3VwPXtwYXlsb2FkLmdyb3VwfSBpc1JlY3VycmluZ01lZXRpbmc9e3BheWxvYWQuaXNSZWN1cnJpbmdNZWV0aW5nfSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5DcmVhdGVQb3N0OlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gPENyZWF0ZVBvc3RWaWV3IGdyb3VwPXtwYXlsb2FkfSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5WaWV3UG9zdDpcbiAgICAgICAgICAgIHBvcHVwVmlldyA9IDxWaWV3UG9zdFZpZXcgcG9zdD17cGF5bG9hZH0gLz47XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuVmlld01lZXRpbmdzOlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gPFZpZXdNZWV0aW5nVmlldyBncm91cD17cGF5bG9hZH0gLz47XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuVmlld01lbWJlcjpcbiAgICAgICAgICAgIHBvcHVwVmlldyA9IDxWaWV3TWVtYmVyVmlldyBtZW1iZXI9e3BheWxvYWR9IC8+O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSB2aWV3cy5Qb3B1cC5JbnB1dDpcbiAgICAgICAgICAgIHBvcHVwVmlldyA9IChcbiAgICAgICAgICAgICAgICA8SW5wdXRWaWV3XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXtwYXlsb2FkLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0SW5wdXQ9e3BheWxvYWQuZGVmYXVsdElucHV0fVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaz17cGF5bG9hZC5jYWxsYmFja31cbiAgICAgICAgICAgICAgICAgICAgbGFiZWwyPXtwYXlsb2FkLmxhYmVsMn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuQ29uZmlybWF0aW9uOlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gKFxuICAgICAgICAgICAgICAgIDxDb25maXJtYXRpb25Gb3JtXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrPXtwYXlsb2FkLmNhbGxiYWNrfVxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17cGF5bG9hZC50aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT17cGF5bG9hZC5tZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICBpc0NvbmZpcm1hdGlvbj17cGF5bG9hZC5pc0NvbmZpcm1hdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgZmlyc3RCdXR0b25UaXRsZT17cGF5bG9hZC5maXJzdEJ1dHRvblRpdGxlfVxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRCdXR0b25UaXRsZT17cGF5bG9hZC5zZWNvbmRCdXR0b25UaXRsZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHZpZXdzLlBvcHVwLlJlcG9ydDpcbiAgICAgICAgICAgIHBvcHVwVmlldyA9IDxSZXBvcnRWaWV3IHR5cGU9e3BheWxvYWQudHlwZX0gcmVwb3J0RGF0YT17cGF5bG9hZC5yZXBvcnREYXRhfSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wdXAtd3JhcHBlclwiPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJiYWNrZ3JvdW5kIFwiICsgKHByb3BzLmlzU2hvd2luZyA/IFwiYWN0aXZlXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChjbG9zZVBvcHVwKCkpfVxuICAgICAgICAgICAgPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wicG9wdXAgXCIgKyAocHJvcHMuaXNTaG93aW5nID8gXCJhY3RpdmVcIiA6IFwiXCIpfT5cbiAgICAgICAgICAgICAgICB7c2hvd1RvcCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wdXAtdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+e3BheWxvYWQudGl0bGUgfHwgdmlld308L2gxPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAge2lzTG9hZGluZyA/IChcbiAgICAgICAgICAgICAgICAgICAgPExvYWRpbmcgLz5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcHVwLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJwb3B1cC1jbG9zZS1idXR0b25cIiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChjbG9zZVBvcHVwKCkpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBYXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgeyFwcm9wcy5jaGlsZHJlbiA/IHBvcHVwVmlldyA6IHByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3B1cDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTm90aWZpY2F0aW9uLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ob3RpZmljYXRpb24uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBFUlJPUjogXCJFUlJPUlwiLFxuICAgIFNVQ0NFU1M6IFwiU1VDQ0VTU1wiXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9Ob3RpZmljYXRpb24uc2Nzc1wiO1xuaW1wb3J0IG5vdGlmaWNhdGlvblR5cGVzIGZyb20gXCIuL25vdGlmaWNhdGlvblR5cGVzXCI7XG5cbi8vUmVkdXhcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgaGlkZU5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgQ2hlY2ttYXJrSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9DaGVja0NpcmNsZVwiO1xuaW1wb3J0IEVycm9ySWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9FcnJvclwiO1xuXG4vKipcbiAqIFJlbmRlcnMgYSBub3RpZmljYXRpb24gdmlldywgd2hpY2ggd2lsbCBiZSBzaG93biB3aGVuZXZlciB0aGVcbiAqIHNob3dOb3RpZmljYXRpb24gYWN0aW9uIGlzIGRpc3BhdGNoZWQgdG8gdGhlIE5vdGlmaWNhdGlvblJlZHVjZXIuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHByb3BzLmlzU2hvd2luZyB0cnVlIGlmIHRoZSBub3RpZmljYXRpb24gaXMgY3VycmVudGx5IGJlaW5nXG4gKiBzaG93blxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDAxLzMwLzIwMjJcbiAqL1xuY29uc3QgTm90aWZpY2F0aW9uID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgdHlwZSA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUubm90aWZpY2F0aW9uUmVkdWNlci50eXBlKTtcbiAgICBjb25zdCBtZXNzYWdlID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLm1lc3NhZ2UpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICAgIHZhciBjbGFzc05hbWUgPSBcIlwiO1xuICAgIHZhciBpY29uID0gPD48Lz47XG4gICAgY29uc3QgdGltZW91dCA9IHVzZVJlZigpO1xuXG4gICAgY29uc3QgY29uZmlndXJlVGltZW91dCA9ICgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQuY3VycmVudCk7XG5cbiAgICAgICAgdGltZW91dC5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaChoaWRlTm90aWZpY2F0aW9uKCkpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQuY3VycmVudCk7XG4gICAgICAgIH0sIDUwMDApO1xuICAgIH07XG4gICAgc3dpdGNoIChcbiAgICAgICAgdHlwZSAvL1RPRE86IGFkZCBhIHggb3IgY2hlY2ttYXJrIHRvIHRoZSBub3RpZmljYXRpb25cbiAgICApIHtcbiAgICAgICAgY2FzZSBub3RpZmljYXRpb25UeXBlcy5FUlJPUjpcbiAgICAgICAgICAgIGNvbmZpZ3VyZVRpbWVvdXQoKTtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgIGljb24gPSA8RXJyb3JJY29uIGNsYXNzTmFtZT1cImljb25cIiAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIG5vdGlmaWNhdGlvblR5cGVzLlNVQ0NFU1M6XG4gICAgICAgICAgICBjb25maWd1cmVUaW1lb3V0KCk7XG4gICAgICAgICAgICBjbGFzc05hbWUgPSBcInN1Y2Nlc3NcIjtcbiAgICAgICAgICAgIGljb24gPSA8Q2hlY2ttYXJrSWNvbiBjbGFzc05hbWU9XCJpY29uXCIgLz47XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wibm90aWZpY2F0aW9uIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKyAocHJvcHMuaXNTaG93aW5nID8gXCJhY3RpdmVcIiA6IFwiXCIpfT5cbiAgICAgICAgICAgIHtpY29ufVxuICAgICAgICAgICAgPGgxPnttZXNzYWdlIHx8IFwiTm8gTWVzc2FnZVwifTwvaDE+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb247XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hvbWUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hvbWUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVG9wQmFyLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ub3BCYXIuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVudS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVudS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9NZW51LnNjc3NcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2lnbk91dCwgc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24sIHNob3dDb25maXJtYXRpb25Qb3B1cCB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IHBlcmZvcm1TaWduT3V0IH0gZnJvbSBcIi4uLy4uLy4uL0hlbHBlclwiO1xuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi9Qcm9maWxlUGljdHVyZS9Qcm9maWxlUGljdHVyZVwiO1xuXG5jb25zdCBNZW51ID0gKHsgaXNTaG93aW5nLCBzZXRJc1Nob3dpbmcsIGN1cnJlbnRQYWdlLCB1c2VyIH0pID0+IHtcbiAgICBjb25zdCBpc0xvZ2dlZEluID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlci5pc0xvZ2dlZEluKTtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcbiAgICBjb25zdCBzaWduT3V0VXNlciA9IChjb25maXJtZWQpID0+IHtcbiAgICAgICAgaWYgKGNvbmZpcm1lZCkge1xuICAgICAgICAgICAgcGVyZm9ybVNpZ25PdXQoKTtcbiAgICAgICAgICAgIHNldElzU2hvd2luZyhmYWxzZSk7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goXCIvc3R1ZHlcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17aXNTaG93aW5nID8gXCJpc1Nob3dpbmcgbWVudVwiIDogXCJtZW51XCJ9PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGlua3NcIj5cbiAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvc3R1ZHlcIiBjbGFzc05hbWU9e2N1cnJlbnRQYWdlID09PSBcInN0dWR5XCIgPyBcImFjdGl2ZSBuYXYtaXRlbVwiIDogXCJuYXYtaXRlbVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlN0dWR5PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL3NlYXJjaFwiIGNsYXNzTmFtZT17Y3VycmVudFBhZ2UgPT09IFwic2VhcmNoXCIgPyBcImFjdGl2ZSBuYXYtaXRlbVwiIDogXCJuYXYtaXRlbVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlYXJjaDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9tZXNzYWdlXCIgY2xhc3NOYW1lPXtjdXJyZW50UGFnZSA9PT0gXCJtZXNzYWdlXCIgPyBcImFjdGl2ZSBuYXYtaXRlbVwiIDogXCJuYXYtaXRlbVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1lc3NhZ2U8L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7aXNMb2dnZWRJbiA/IChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyLWFjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlci1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYW1lLWFuZC1zY2hvb2xcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibmFtZVwiPnt1c2VyLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzY2hvb2xcIj57dXNlci5zY2hvb2x9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvZmlsZS1waWMtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZSBpbWFnZT17dXNlci5wcm9maWxlUGljdHVyZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29uZmlybWF0aW9uUG9wdXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbk91dFVzZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb25maXJtIFNpZ24gT3V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gc2lnbiBvdXQgb2YgU3R1ZHkgU3BhY2VzPyAgWW91IHdpbGwgYmUgbWlzc2VkLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nIG91dFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuUHJpbWFyeX0gb25DbGljaz17KCkgPT4gaGlzdG9yeS5wdXNoKFwiL2FjY291bnRcIil9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259PkxvZyBpbjwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2lzU2hvd2luZyA/IFwiYWN0aXZlIGJhY2tncm91bmQgbWVudS1iYWNrZ3JvdW5kXCIgOiBcImJhY2tncm91bmQgbWVudS1iYWNrZ3JvdW5kXCJ9PjwvZGl2PlxuICAgICAgICA8Lz5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVudTtcbiIsImltcG9ydCBcIi4vVG9wQmFyLnNjc3NcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi9Qcm9maWxlUGljdHVyZS9Qcm9maWxlUGljdHVyZVwiO1xuXG5pbXBvcnQgTWVudSBmcm9tIFwiLi9NZW51XCI7XG5jb25zdCBUb3BCYXIgPSAoeyBjdXJyZW50UGFnZSwgY29sb3IgfSkgPT4ge1xuICAgIGNvbnN0IHsgdXNlciwgaXNMb2dnZWRJbiB9ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlcik7XG4gICAgY29uc3QgW21lbnVJc1Nob3dpbmcsIHNldE1lbnVJc1Nob3dpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wLWJhclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid3JhcHBlclwiIHN0eWxlPXt7IGJvcmRlckNvbG9yOiBjb2xvciB9fT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWZ0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9cIiBzdHlsZT17eyB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCIgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlN0dWR5IFNwYWNlczwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9zdHVkeVwiIGNsYXNzTmFtZT17Y3VycmVudFBhZ2UgPT09IFwic3R1ZHlcIiA/IFwiYWN0aXZlIG5hdi1pdGVtXCIgOiBcIm5hdi1pdGVtXCJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlN0dWR5PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvc2VhcmNoXCIgY2xhc3NOYW1lPXtjdXJyZW50UGFnZSA9PT0gXCJzZWFyY2hcIiA/IFwiYWN0aXZlIG5hdi1pdGVtXCIgOiBcIm5hdi1pdGVtXCJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlYXJjaDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL21lc3NhZ2VcIiBjbGFzc05hbWU9e2N1cnJlbnRQYWdlID09PSBcIm1lc3NhZ2VcIiA/IFwiYWN0aXZlIG5hdi1pdGVtXCIgOiBcIm5hdi1pdGVtXCJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1lc3NhZ2U8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB7aXNMb2dnZWRJbiA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRNZW51SXNTaG93aW5nKCFtZW51SXNTaG93aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobWVudUlzU2hvd2luZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVzZXJJbmZvQ29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNjaG9vbFwiPnt1c2VyLnNjaG9vbH08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm5hbWVcIj57dXNlci5uYW1lfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByb2ZpbGVQaWN0dXJlIGltYWdlPXt1c2VyLnByb2ZpbGVQaWN0dXJlfSBuYW1lPXt1c2VyLm5hbWV9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJoYW1idXJnZXJcIiArIFwiIFwiICsgKG1lbnVJc1Nob3dpbmcgJiYgXCJhY3RpdmVIYW1idXJnZXJcIil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lbnVJc1Nob3dpbmcoIW1lbnVJc1Nob3dpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibGluZTFcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImxpbmUyXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJsaW5lM1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0+TG9nIGluPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPE1lbnUgaXNTaG93aW5nPXttZW51SXNTaG93aW5nfSBzZXRJc1Nob3dpbmc9e3NldE1lbnVJc1Nob3dpbmd9IGN1cnJlbnRQYWdlPXtjdXJyZW50UGFnZX0gdXNlcj17dXNlcn0gLz5cbiAgICAgICAgPC8+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvcEJhcjtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUGFnZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUGFnZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFRvcEJhciBmcm9tIFwiLi4vY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyXCI7XG5pbXBvcnQgXCIuL1BhZ2Uuc2Nzc1wiO1xuXG4vKipcbiAqIFJlbmRlcnMgYSBwYWdlLlxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXIgYW5kIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTAvMjAvMjAyMVxuICovXG5jb25zdCBQYWdlID0gKHsgY3VycmVudFBhZ2UsIHRvcEJhciwgc2hvd2luZ1BhZ2VUaXRsZSwgY2hpbGRyZW4gfSkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7dG9wQmFyICYmIDxUb3BCYXIgY3VycmVudFBhZ2U9e2N1cnJlbnRQYWdlfSAvPn1cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3Nob3dpbmdQYWdlVGl0bGUgPT09IHVuZGVmaW5lZCA/IFwicGFnZSBzaG93aW5nUGFnZVRpdGxlXCIgOiBcInBhZ2VcIn0+e2NoaWxkcmVufTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFnZTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTG9naW5Gb3JtLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2dpbkZvcm0uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vTG9naW5Gb3JtLnNjc3NcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uLmpzXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vY29yZS9Gb3JtL0Zvcm0uanNcIjtcbmltcG9ydCBJbnB1dEZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL0lucHV0RmllbGQvSW5wdXRGaWVsZC5qc1wiO1xuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi9jb3JlL0xhYmVsL0xhYmVsLmpzXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlcy5qc1wiO1xuaW1wb3J0IFRleHRJbnB1dCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dHMvVGV4dElucHV0L1RleHRJbnB1dC5qc1wiO1xuXG4vKipcbiAqIFJlbmRlcnMgYSBsb2dpbiBmb3JtLlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLmVtYWlsIFRoZSBlbWFpbCBhZGRyZXNzIGluIHRoZSBmb3JtLlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnBhc3N3b3JkIFRoZSBwYXNzd29yZCBpbiB0aGUgZm9ybS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnN1Ym1pdExvZ2luIFVzZWQgdG8gc3VibWl0IHRoZSBsb2dpbiBmb3JtLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMudXBkYXRlRW1haWxGaWVsZCBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIGVtYWlsIGFkZHJlc3MuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVQYXNzd29yZEZpZWxkIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgcGFzc3dvcmQuXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICogQGRhdGUgICAxMC8yMS8yMDIxXG4gKi9cbmNvbnN0IExvZ2luRm9ybSA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9naW4tZm9ybVwiPlxuICAgICAgICAgICAgPEZvcm0gb25TdWJtaXQ9e3Byb3BzLnN1Ym1pdExvZ2lufT5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPkVtYWlsPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17cHJvcHMuZW1haWx9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVFbWFpbEZpZWxkfSB0eXBlPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPlBhc3N3b3JkPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17cHJvcHMucGFzc3dvcmR9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVQYXNzd29yZEZpZWxkfSB0eXBlPVwicGFzc3dvcmRcIiAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICB7Lyoge3Byb3BzLmxvZ2luRGlkRmFpbH0gKi99XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5QcmltYXJ5fT5TaWduIGluPC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dpbkZvcm07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0F1dGhWaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BdXRoVmlldy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0xvYWRpbmcvTG9hZGluZ1wiO1xuaW1wb3J0IFwiLi9BdXRoVmlldy5zY3NzXCI7XG5cbmNvbnN0IEF1dGhWaWV3ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgaXNMb2FkaW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLmxvYWRpbmcpO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXV0aC12aWV3XCI+XG4gICAgICAgICAgICB7aXNMb2FkaW5nID8gKFxuICAgICAgICAgICAgICAgIDxMb2FkaW5nIC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgIDxoMT5TdHVkeSBTcGFjZXM8L2gxPlxuICAgICAgICAgICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXV0aFZpZXc7XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBzaWduSW4sIHNpZ25PdXQsIHNob3dFcnJvck5vdGlmaWNhdGlvbiwgc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xyXG5cclxuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlcy5qc1wiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b24uanNcIjtcclxuaW1wb3J0IExvZ2luRm9ybSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9Mb2dpbkZvcm0vTG9naW5Gb3JtLmpzXCI7XHJcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXMuanNcIjtcclxuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXMuanNcIjtcclxuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1ZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgVmlld3MgZnJvbSBcIi4uLy4uL1ZpZXdzLmpzXCI7XHJcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vLi4vY29yZS9MYWJlbC9MYWJlbFwiO1xyXG5pbXBvcnQgQXV0aFZpZXcgZnJvbSBcIi4uL0F1dGhWaWV3XCI7XHJcbmltcG9ydCB7IHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcclxuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBVc2VkIHRvIGRpc3BsYXkgdGhlIGxvZ2luIGZvcm0gYW5kIGxvZyB0aGUgdXNlciBpbi5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2xpZW50U2lkZUxvZ2luIFVzZWQgdG8gbG9nIHRoZSB1c2VyIGluIGZyb20gdGhlIGNsaWVudC1zaWRlIHBlcnNwZWN0aXZlLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjbGllbnRTaWRlTG9nb3V0IFVzZWQgdG8gbG9nIHRoZSB1c2VyIG91dCBmcm9tIHRoZSBjbGllbnQtc2lkZSBwZXJzcGVjdGl2ZS5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2V0SG9tZVZpZXcgVXNlZCB0byBzZXQgdGhlIHZpZXcgb2YgdGhlIGhvbWUgcGFnZSwgaWYgdGhlIHVzZXIgcHJlc3NlcyB0aGUgY3JlYXRlIGFjY291bnQgYnV0dG9uXHJcbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyIGFuZCBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxyXG4gKi9cclxuY29uc3QgTG9naW5WaWV3ID0gKHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCBCTEFOSyA9IFwiXCI7XHJcbiAgICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKEJMQU5LKTtcclxuICAgIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGUoQkxBTkspO1xyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG4gICAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN1Ym1pdHMgdGhlIGxvZ2luIHJlcXVlc3QgdG8gdGhlIHNlcnZlciBmb3IgdmVyaWZpY2F0aW9uLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGZvcm0gc3VibWlzc2lvbiBldmVudCB0aGF0IHRyaWdnZXJzIHRoZSBsb2dpbi5cclxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXHJcbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcclxuICAgICAqL1xyXG4gICAgY29uc3Qgc3VibWl0TG9naW4gPSBhc3luYyAoZXZlbnQpID0+IHtcclxuICAgICAgICAvLyBQUkVWRU5UIFRIRSBERUZBVUxUIEZPUk0gU1VCTUlTU0lPTiBCRUhBVklPUi5cclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXHJcbiAgICAgICAgICAgIFJvdXRlcy5BY2NvdW50LkxvZ2luLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlbWFpbCxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzTG9naW4sXHJcbiAgICAgICAgICAgIFwiRXJyb3IgbG9nZ2luZyBpbjogQ2Fubm90IGNvbm5lY3QgdG8gdGhlIHNlcnZlclwiLFxyXG4gICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgYXV0aGVudGljYXRpb25Ub2tlbiwgYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlLCB1c2VyIH0gPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goc2lnbkluKHsgYXV0aGVudGljYXRpb25Ub2tlbiwgYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlLCB1c2VyIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGVtYWlsIGZpZWxkIGluIHRoZSBsb2dpbiBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXHJcbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlRW1haWxGaWVsZCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0RW1haWwoZS50YXJnZXQudmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBwYXNzd29yZCBmaWVsZCBpbiB0aGUgbG9naW4gZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gICAgICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZVBhc3N3b3JkRmllbGQgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldFBhc3N3b3JkKGUudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBob21lIHZpZXcgdG8gdGhlIHNpZ24gdXAgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTAvMjEvMjAyMVxyXG4gICAgICovXHJcbiAgICBjb25zdCBzaWduVXBDbGlja2VkID0gKGUpID0+IHtcclxuICAgICAgICBwcm9wcy5zZXRIb21lVmlldyhWaWV3cy5Ib21lLkNyZWF0ZUFjY291bnQpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxBdXRoVmlldz5cclxuICAgICAgICAgICAgPExvZ2luRm9ybVxyXG4gICAgICAgICAgICAgICAgZW1haWw9e2VtYWlsfVxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgICAgICAgc3VibWl0TG9naW49e3N1Ym1pdExvZ2lufVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlRW1haWxGaWVsZD17dXBkYXRlRW1haWxGaWVsZH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZVBhc3N3b3JkRmllbGQ9e3VwZGF0ZVBhc3N3b3JkRmllbGR9XHJcbiAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm90aGVyLW9wdGlvbnNcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2lkZS1ieS1zaWRlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+RG9uJ3QgaGF2ZSBhbiBhY2NvdW50PzwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0gb25DbGljaz17c2lnblVwQ2xpY2tlZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaWduIFVwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkp1c3QgbG9va2luZyB0byBicm93c2U/PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9IG9uQ2xpY2s9eygpID0+IGhpc3RvcnkucHVzaChcIi9zZWFyY2hcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VhcmNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvQXV0aFZpZXc+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTG9naW5WaWV3O1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NyZWF0ZUFjY291bnRGb3JtLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DcmVhdGVBY2NvdW50Rm9ybS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9DcmVhdGVBY2NvdW50Rm9ybS5zY3NzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuXG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vY29yZS9Gb3JtL0Zvcm0uanNcIjtcbmltcG9ydCBJbnB1dEZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL0lucHV0RmllbGQvSW5wdXRGaWVsZC5qc1wiO1xuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi9jb3JlL0xhYmVsL0xhYmVsLmpzXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlcy5qc1wiO1xuaW1wb3J0IFRleHRJbnB1dCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dHMvVGV4dElucHV0L1RleHRJbnB1dC5qc1wiO1xuXG4vKipcbiAqIFJlbmRlcnMgYSBjcmVhdGUgYWNjb3VudCBmb3JtLlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLmVtYWlsIFRoZSBlbWFpbCBhZGRyZXNzIGluIHRoZSBmb3JtLlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnBhc3N3b3JkIFRoZSBwYXNzd29yZCBpbiB0aGUgZm9ybS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcy5jb25maXJtUGFzc3dvcmQgVGhlIHZhbHVlIG9mIHRoZSBjb25maXJtIHBhc3N3b3JkIGZpZWxkIGluIHRoZSBmb3JtLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMuc3VibWl0QWNjb3VudENyZWF0aW9uIFVzZWQgdG8gc3VibWl0IHRoZSBBY2NvdW50Q3JlYXRpb24gZm9ybS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnVwZGF0ZUVtYWlsRmllbGQgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSBlbWFpbCBhZGRyZXNzLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMudXBkYXRlUGFzc3dvcmRGaWVsZCBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIHBhc3N3b3JkLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMudXBkYXRlQ29uZmlybVBhc3N3b3JkRmllbGQgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSBjb25maXJtIHBhc3N3b3JkLlxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDExLzEwLzIwMjFcbiAqL1xuY29uc3QgQ3JlYXRlQWNjb3VudEZvcm0gPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNyZWF0ZS1hY2NvdW50LWZvcm1cIj5cbiAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtwcm9wcy5zdWJtaXRBY2NvdW50Q3JlYXRpb259PlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+RW1haWw8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5lbWFpbH0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUVtYWlsRmllbGR9IHR5cGU9XCJlbWFpbFwiIC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+UGFzc3dvcmQ8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5wYXNzd29yZH0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZVBhc3N3b3JkRmllbGR9IHR5cGU9XCJwYXNzd29yZFwiIC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+Q29uZmlybSBQYXNzd29yZDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy5jb25maXJtUGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMudXBkYXRlQ29uZmlybVBhc3N3b3JkRmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cblxuICAgICAgICAgICAgICAgIHtwcm9wcy5sb2dpbkRpZEZhaWx9XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0+TmV4dDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Gb3JtPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3JlYXRlQWNjb3VudEZvcm07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yXCI7XG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGNyZWF0ZUFjY291bnQsIHNob3dFcnJvck5vdGlmaWNhdGlvbiwgc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IENyZWF0ZUFjY291bnRGb3JtIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL0NyZWF0ZUFjY291bnRGb3JtL0NyZWF0ZUFjY291bnRGb3JtXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlcy5qc1wiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlcy5qc1wiO1xuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlcy5qc1wiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uLmpzXCI7XG5pbXBvcnQgVmlld3MgZnJvbSBcIi4uLy4uL1ZpZXdzLmpzXCI7XG5cbmltcG9ydCBBdXRoVmlldyBmcm9tIFwiLi4vQXV0aFZpZXdcIjtcbmltcG9ydCB7IHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcblxuLyoqXG4gKiBUaGlzIHZpZXcgcHJlc2VudHMgdGhlIGNyZWF0ZSBhY2NvdW50IGZvcm0gb24gdGhlIGhvbWUgcGFnZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2V0SG9tZVZpZXcgVXNlZCB0byBzZXQgdGhlIHZpZXcgb2YgdGhpcyBwYWdlLCBpZiB0aGUgdXNlciBwcmVzc2VzIHRoZSBsb2cgaW4gYnV0dG9uXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICovXG5jb25zdCBDcmVhdGVBY2NvdW50VmlldyA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IEJMQU5LID0gXCJcIjtcbiAgICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKEJMQU5LKTtcbiAgICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKEJMQU5LKTtcbiAgICBjb25zdCBbY29uZmlybVBhc3N3b3JkLCBzZXRDb25maXJtUGFzc3dvcmRdID0gdXNlU3RhdGUoQkxBTkspO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gICAgLyoqXG4gICAgICogU3VibWl0cyB0aGUgY3JlYXRlIGFjY291bnQgcmVxdWVzdCB0byB0aGUgc2VydmVyIGZvciB2ZXJpZmljYXRpb24uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGZvcm0gc3VibWlzc2lvbiBldmVudCB0aGF0IHRyaWdnZXJzIHRoZSBsb2dpbi5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCBzdWJtaXRBY2NvdW50Q3JlYXRpb24gPSBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgLy8gUFJFVkVOVCBUSEUgREVGQVVMVCBGT1JNIFNVQk1JU1NJT04gQkVIQVZJT1IuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIC8vIEZJUlNULCBDT01QQVJFIFRIRSBQQVNTV09SRCBBTkQgQ09ORklSTSBQQVNTV09SRCBGSUVMRFNcbiAgICAgICAgaWYgKHBhc3N3b3JkID09PSBCTEFOSyAmJiBjb25maXJtUGFzc3dvcmQgPT09IEJMQU5LICYmIGVtYWlsID09PSBCTEFOSykge1xuICAgICAgICAgICAgZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiUGxlYXNlIGZpbGwgaW4gdGhlIGluZm9ybWF0aW9uXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXNzd29yZCAhPT0gY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24oXCJQYXNzd29yZHMgZG9uJ3QgbWF0Y2hcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgc2VuZFBvc3RSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLkFjY291bnQuQ3JlYXRlQWNjb3VudCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZF9jb25maXJtYXRpb246IGNvbmZpcm1QYXNzd29yZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzQWNjb3VudENyZWF0ZWQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHVudmVyaWZpZWRVc2VyIH0gPSBkYXRhO1xuXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goY3JlYXRlQWNjb3VudCh1bnZlcmlmaWVkVXNlcikpO1xuXG4gICAgICAgICAgICAgICAgcHJvcHMuc2V0SG9tZVZpZXcoVmlld3MuSG9tZS5WZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBlbWFpbCBmaWVsZCBpbiB0aGUgY3JlYXRlIGFjY291bnQgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUVtYWlsRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0RW1haWwoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIHBhc3N3b3JkIGZpZWxkIGluIHRoZSBjcmVhdGUgYWNjb3VudCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAxMC8yMS8yMDIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlUGFzc3dvcmRGaWVsZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRQYXNzd29yZChldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgY29uZmlybSBwYXNzd29yZCBmaWVsZCBpbiB0aGUgY3JlYXRlIGFjY291bnQgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVDb25maXJtUGFzc3dvcmRGaWVsZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRDb25maXJtUGFzc3dvcmQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaG9tZSB2aWV3IHRvIHRoZSBzaWduIGluIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMC8yMS8yMDIxXG4gICAgICovXG4gICAgY29uc3Qgc2lnbkluQ2xpY2tlZCA9IChldmVudCkgPT4ge1xuICAgICAgICBwcm9wcy5zZXRIb21lVmlldyhWaWV3cy5Ib21lLkxvZ2luKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEF1dGhWaWV3PlxuICAgICAgICAgICAgPHA+Q3JlYXRlIFlvdXIgQWNjb3VudDwvcD5cbiAgICAgICAgICAgIDxDcmVhdGVBY2NvdW50Rm9ybVxuICAgICAgICAgICAgICAgIGVtYWlsPXtlbWFpbH1cbiAgICAgICAgICAgICAgICBwYXNzd29yZD17cGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkPXtjb25maXJtUGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgc3VibWl0QWNjb3VudENyZWF0aW9uPXtzdWJtaXRBY2NvdW50Q3JlYXRpb259XG4gICAgICAgICAgICAgICAgdXBkYXRlRW1haWxGaWVsZD17dXBkYXRlRW1haWxGaWVsZH1cbiAgICAgICAgICAgICAgICB1cGRhdGVQYXNzd29yZEZpZWxkPXt1cGRhdGVQYXNzd29yZEZpZWxkfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUNvbmZpcm1QYXNzd29yZEZpZWxkPXt1cGRhdGVDb25maXJtUGFzc3dvcmRGaWVsZH1cbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3RoZXItb3B0aW9uc1wiPlxuICAgICAgICAgICAgICAgIDxwPkFscmVhZHkgaGF2ZSBhbiBhY2NvdW50PzwvcD5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9IG9uQ2xpY2s9e3NpZ25JbkNsaWNrZWR9PlxuICAgICAgICAgICAgICAgICAgICBTaWduIEluXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9BdXRoVmlldz5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3JlYXRlQWNjb3VudFZpZXc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IFZpZXdzIGZyb20gXCIuLi8uLi9WaWV3c1wiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgQXV0aFZpZXcgZnJvbSBcIi4uL0F1dGhWaWV3XCI7XG5cbi8qKlxuICogT25jZSBhIHVzZXIgY3JlYXRlcyBhbiBhY2NvdW50LCB0aGlzIHZpZXcgd2lsbCBiZSBkaXNwbGF5ZWQgb24gdGhlIGhvbWUgcGFnZSB0byBpbmRpY2F0ZSB0aGF0IHRoZSB1c2VyIG5lZWRzIHRvIHZlcmlmeSB0aGUgYWNjb3VudCB0byBjb250aW51ZSBzZXR0aW5nIGl0IHVwXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZXRIb21lVmlldyBVc2VkIHRvIHNldCB0aGUgdmlldyBvZiB0aGUgaG9tZSBwYWdlLCBpZiB0aGUgdXNlciBwcmVzc2VzIHRoZSBsb2cgaW4gYnV0dG9uXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTEvMDIvMjAyMVxuICovXG5jb25zdCBWZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvblZpZXcgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB1bnZlcmlmaWVkVXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudW52ZXJpZmllZFVzZXIpO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxBdXRoVmlldz5cbiAgICAgICAgICAgIDxoMT5Zb3UncmUgYWxtb3N0IHRoZXJlITwvaDE+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICBDaGVjayB5b3VyIGVtYWlsOiA8c3Ryb25nPnt1bnZlcmlmaWVkVXNlci5lbWFpbH08L3N0cm9uZz4gZm9yIGEgbGluayB0byBjb250aW51ZSB0aGUgc2lnbnVwIHByb2Nlc3NcbiAgICAgICAgICAgIDwvcD5cblxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuc2V0SG9tZVZpZXcoVmlld3MuSG9tZS5Mb2dpbik7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBSZXR1cm5cbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L0F1dGhWaWV3PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBWZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvblZpZXc7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FjY291bnRTZXR1cEZvcm0uc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FjY291bnRTZXR1cEZvcm0uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vQWNjb3VudFNldHVwRm9ybS5zY3NzXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b24uanNcIjtcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcbmltcG9ydCBGaWxlQmFzZTY0IGZyb20gXCJyZWFjdC1maWxlLWJhc2U2NFwiO1xuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtLmpzXCI7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGQuanNcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbC5qc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXMuanNcIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXQuanNcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGFuIGFjY291bnQgc2V0dXAgZm9ybS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcy5uYW1lIFRoZSB2YWx1ZSBvZiB0aGUgZnVsbCBuYW1lIGZpZWxkIGluIHRoZSBmb3JtXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMuYXJlYUNvZGUgVGhlIHZhbHVlIG9mIHRoZSBhcmVhIGNvZGUgZmllbGQgaW4gdGhlIGZvcm1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJvcHMuaXMxOE9yT3ZlciBUaGUgdmFsdWUgb2YgdGhlIGlzIDE4IG9yIG92ZXIgc3dpdGNoIGluIHRoZSBmb3JtLlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnByb2ZpbGVQaWN0dXJlIHRoZSBiaW5hcnkgdmFsdWUgb2YgdGhlIHVwbG9hZGVkIHByb2ZpbGUgcGljdHVyZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMuc3VibWl0QWNjb3VudFNldHVwIFVzZWQgdG8gc3VibWl0IHRoZSBBY2NvdW50IFNldHVwIGZvcm0uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVOYW1lRmllbGQgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSBuYW1lIHZhbHVlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMudXBkYXRlQXJlYUNvZGVGaWVsZCBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIGFyZWEgY29kZSB2YWx1ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnVwZGF0ZUlzMThPck92ZXIgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSB2YWx1ZSBvZiB0aGUgaXMgMTggb3Igb3ZlciBzd2l0Y2guXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVQcm9maWxlUGljdHVyZSBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIHByb2ZpbGUgcGljdHVyZS5cbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMS8xMC8yMDIxXG4gKi9cbmNvbnN0IEFjY291bnRTZXR1cEZvcm0gPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEZvcm0gb25TdWJtaXQ9e3Byb3BzLnN1Ym1pdEFjY291bnRTZXR1cH0+XG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5GdWxsIE5hbWU8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5uYW1lfSBvbkNoYW5nZT17cHJvcHMudXBkYXRlTmFtZUZpZWxkfSB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuXG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5BcmVhIENvZGU8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5hcmVhQ29kZX0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUFyZWFDb2RlRmllbGR9IHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5saW5lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWwgY2xhc3NOYW1lPVwibGVmdCBMYWJlbFwiPkFyZSB5b3UgMTggb3Igb2xkZXI8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJpZ2h0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cHJvcHMuaXMxOE9yT3Zlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMudXBkYXRlSXMxOE9yT3Zlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+UHJvZmlsZSBQaWN0dXJlPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwaG90b1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZmlsZUlucHV0IHJpZ2h0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQ9XCIucG5nLCAuanBnLCAuanBlZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInByb2ZpbGVQaWN0dXJlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMudXBkYXRlUHJvZmlsZVBpY3R1cmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImltZ1ByZXZpZXdcIiBpZD1cImxlZnRcIiBzcmM9e3Byb3BzLnByb2ZpbGVQaWN0dXJlfSBhbHQ9XCJcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5DcmVhdGUgQWNjb3VudDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Gb3JtPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQWNjb3VudFNldHVwRm9ybTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQWNjb3VudFNldHVwRm9ybSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9BY2NvdW50U2V0dXBGb3JtL0FjY291bnRTZXR1cEZvcm1cIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vLi4vY29yZS9MYWJlbC9MYWJlbFwiO1xuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2lnbkluLCBzaG93RXJyb3JOb3RpZmljYXRpb24sIHNob3dTdWNjZXNzTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1ZhbGlkYXRvclwiO1xuaW1wb3J0IFZpZXdzIGZyb20gXCIuLi8uLi9WaWV3c1wiO1xuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkXCI7XG5pbXBvcnQgQXV0aFZpZXcgZnJvbSBcIi4uL0F1dGhWaWV3XCI7XG5pbXBvcnQgeyBzZW5kUG9zdFJlcXVlc3QsIHNlbmRQb3N0UmVxdWVzdFdpdGhGb3JtRGF0YSB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcblxuLyoqXG4gKiBPbmNlIHRoZSB1c2VyIGhhcyB2ZXJpZmllZCB0aGVpciBhY2NvdW50IGFuZCBjbGlja2VkIHRoZSBsaW5rLCB0aGlzIHZpZXcgaXMgdXNlZCB0byBwcmVzZW50IHRoZSBhY291bnQgc2V0dXAgZm9ybSBzbyB0aGV5IGNhbiBvZmZpY2FsbHkgY3JlYXRlIHRoZWlyIGFjY291bnQgb24gdGhlIGhvbWUgcGFnZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2V0SG9tZVZpZXcgVXNlZCB0byBzZXQgdGhlIHZpZXcgb2YgdGhpcyBwYWdlLCBpZiB0aGUgdXNlciBwcmVzc2VzIHRoZSBsb2cgaW4gYnV0dG9uXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICovXG5jb25zdCBBY2NvdW50U2V0dXBWaWV3ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgQkxBTksgPSBcIlwiO1xuICAgIGNvbnN0IFt1c2VySXNWZXJpZmllZCwgc2V0VXNlcklzVmVyaWZpZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtuYW1lLCBzZXROYW1lXSA9IHVzZVN0YXRlKEJMQU5LKTtcbiAgICBjb25zdCBbYXJlYUNvZGUsIHNldEFyZWFDb2RlXSA9IHVzZVN0YXRlKEJMQU5LKTtcbiAgICBjb25zdCBbaXMxOE9yT3Zlciwgc2V0SXMxOE9yT3Zlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW3Byb2ZpbGVQaWN0dXJlLCBzZXRQcm9maWxlUGljdHVyZV0gPSB1c2VTdGF0ZShCTEFOSyk7XG4gICAgY29uc3QgW3VzZXIsIHNldFVzZXJdID0gdXNlU3RhdGUoe30pO1xuICAgIGNvbnN0IHZlcmlmaWNhdGlvblRva2VuID0gcHJvcHMudmVyaWZpY2F0aW9uVG9rZW47XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB2ZXJpZnlVc2VyKHZlcmlmaWNhdGlvblRva2VuKTtcbiAgICB9LCBbXSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHZlcmlmeSB0aGUgdXNlciBhc3NvY2lhdGVkIHdpdGggdGhlIHRva2VuIHRoYXQgd2FzIHJlY2VpdmVkIGZyb20gdGhlIGxpbmtcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9rZW4gVGhlIHZlcmlmaWNhdGlvbiB0b2tlblxuICAgICAqIEBkYXRlICAgMTEvMTMvMjFcbiAgICAgKi9cbiAgICBjb25zdCB2ZXJpZnlVc2VyID0gYXN5bmMgKHZlcmlmaWNhdGlvblRva2VuKSA9PiB7XG4gICAgICAgIC8vIFNVQk1JVCBUSEUgVkVSSUZZIFVTRVIgUkVRVUVTVC5cbiAgICAgICAgYXdhaXQgc2VuZFBvc3RSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLkFjY291bnQuR2V0VW52ZXJpZmllZFVzZXIsXG4gICAgICAgICAgICB7IHZlcmlmaWNhdGlvblRva2VuOiB2ZXJpZmljYXRpb25Ub2tlbiB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlVudmVyaWZpZWRVc2VyV2FzRm91bmQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNldFVzZXIoZGF0YS51bnZlcmlmaWVkVXNlcik7XG4gICAgICAgICAgICAgICAgc2V0VXNlcklzVmVyaWZpZWQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoZSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgZm9yIHRoZSBuZXcgKGNvbXBsZXRlKSB1c2VyIHRvIGJlIGNyZWF0ZWQgd2l0aCB0aGUgcHJvdmlkZWQgaW5mb3JtYXRpb25cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDExLzEzLzIxXG4gICAgICovXG4gICAgY29uc3Qgc3VibWl0QWNjb3VudFNldHVwID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIC8vIFNVQk1JVCBUSEUgQ1JFQVRFIEFDQ09VTlQgUkVRVUVTVC5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwicHJvZmlsZVBpY3R1cmVcIiwgcHJvZmlsZVBpY3R1cmUpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJ2ZXJpZmljYXRpb25Ub2tlblwiLCB2ZXJpZmljYXRpb25Ub2tlbik7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcInVzZXJcIiwgdXNlcik7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcImFyZWFDb2RlXCIsIGFyZWFDb2RlKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiaXMxOE9yT3ZlclwiLCBpczE4T3JPdmVyKTtcblxuICAgICAgICBpZiAoIWlzMThPck92ZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTk9UIDE4XCIpO1xuICAgICAgICAgICAgZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiWW91IG5lZWQgdG8gYmUgMTggb3Igb2xkZXIgdG8gc2lnbiB1cFwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3RXaXRoRm9ybURhdGEoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5TZXR1cEFjY291bnQsXG4gICAgICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzQWNjb3VudFNldHVwLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgeyBhdXRoZW50aWNhdGlvblRva2VuLCBhdXRoZW50aWNhdGlvblRva2VuRXhwaXJhdGlvbkRhdGUsIHVzZXIsIHN0dWR5R3JvdXBzIH0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNpZ25Jbih7IGF1dGhlbnRpY2F0aW9uVG9rZW4sIGF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZSwgdXNlciB9KSk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24oXCJTdWNjZXNzZnVsbHkgc2lnbmVkIGluOiBcIiArIHVzZXIubmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBob21lIHZpZXcgdG8gdGhlIHNpZ24gaW4gZm9ybS5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDExLzEzLzIxXG4gICAgICovXG4gICAgY29uc3Qgc2lnbkluQ2xpY2tlZCA9ICgpID0+IHtcbiAgICAgICAgcHJvcHMuc2V0SG9tZVZpZXcoVmlld3MuSG9tZS5Mb2dpbik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBmdWxsIG5hbWUgZmllbGQgaW4gdGhlIHNldHVwIGFjY291bnQgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDExLzEzLzIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlTmFtZUZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldE5hbWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGZ1bGwgbmFtZSBmaWVsZCBpbiB0aGUgc2V0dXAgYWNjb3VudCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTEvMTMvMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVBcmVhQ29kZUZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldEFyZWFDb2RlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBkYXRlIG9mIGJpcnRoIGZpZWxkIGluIHRoZSBzZXR1cCBhY2NvdW50IGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMS8xMy8yMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUlzMThPck92ZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0SXMxOE9yT3ZlcihldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBmdWxsIG5hbWUgZmllbGQgaW4gdGhlIHNldHVwIGFjY291bnQgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDExLzEzLzIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlUHJvZmlsZVBpY3R1cmUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0UHJvZmlsZVBpY3R1cmUoZXZlbnQudGFyZ2V0LmZpbGVzWzBdKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEF1dGhWaWV3PlxuICAgICAgICAgICAgPGgzPlNldHVwIFlvdXIgQWNjb3VudDwvaDM+XG4gICAgICAgICAgICA8cD57dXNlci5lbWFpbH08L3A+XG4gICAgICAgICAgICB7dXNlcklzVmVyaWZpZWQgPyAoXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPEFjY291bnRTZXR1cEZvcm1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI9e3VzZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJlYUNvZGU9e2FyZWFDb2RlfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXMxOE9yT3Zlcj17aXMxOE9yT3Zlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2ZpbGVQaWN0dXJlPXtwcm9maWxlUGljdHVyZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5hbWVGaWVsZD17dXBkYXRlTmFtZUZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQXJlYUNvZGVGaWVsZD17dXBkYXRlQXJlYUNvZGVGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUlzMThPck92ZXI9e3VwZGF0ZUlzMThPck92ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVQcm9maWxlUGljdHVyZT17dXBkYXRlUHJvZmlsZVBpY3R1cmV9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRBY2NvdW50U2V0dXA9e3N1Ym1pdEFjY291bnRTZXR1cH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPGgxPllvdSBzaG91bGRuJ3QgYmUgaGVyZSE8L2gxPlxuICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvdGhlci1vcHRpb25zXCI+XG4gICAgICAgICAgICAgICAgPHA+QWxyZWFkeSBoYXZlIGFuIGFjY291bnQ/PC9wPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259IG9uQ2xpY2s9e3NpZ25JbkNsaWNrZWR9PlxuICAgICAgICAgICAgICAgICAgICBTaWduIEluXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9BdXRoVmlldz5cbiAgICApO1xufTtcbmV4cG9ydCBkZWZhdWx0IEFjY291bnRTZXR1cFZpZXc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgXCIuL0hvbWUuc2Nzc1wiO1xuXG5pbXBvcnQgUGFnZSBmcm9tIFwiLi4vUGFnZS5qc1wiO1xuaW1wb3J0IFZpZXdzIGZyb20gXCIuLi8uLi9WaWV3cy9WaWV3cy5qc1wiO1xuXG4vLyBJTVBPUlQgVklFV1MgRk9SIFRISVMgUEFHRS5cbmltcG9ydCBMb2dpblZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL0hvbWUvTG9naW5WaWV3L0xvZ2luVmlld1wiO1xuaW1wb3J0IENyZWF0ZUFjY291bnRWaWV3IGZyb20gXCIuLi8uLi9WaWV3cy9Ib21lL0NyZWF0ZUFjY291bnRWaWV3L0NyZWF0ZUFjY291bnRWaWV3XCI7XG5pbXBvcnQgVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb25WaWV3IGZyb20gXCIuLi8uLi9WaWV3cy9Ib21lL1ZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uVmlldy9WZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvblZpZXdcIjtcbmltcG9ydCBBY2NvdW50U2V0dXBWaWV3IGZyb20gXCIuLi8uLi9WaWV3cy9Ib21lL0FjY291bnRTZXR1cFZpZXcvQWNjb3VudFNldHVwVmlld1wiO1xuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1ZhbGlkYXRvci5qc1wiO1xuXG4vKipcbiAqIFRoZSBob21lIHBhZ2Ugb2YgdGhlIGFwcGxpY2F0aW9uLiBUaGlzIGlzIHNob3duIHdoZW4gdGhlIHVzZXIgaGFzIG5vdCBsb2dnZWQgaW4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjbGllbnRTaWRlTG9naW4gVGhlIGZ1bmN0aW9uIHVzZWQgdG8gbG9nIGluIGEgdXNlciBmcm9tIHRoZSBjbGllbnQtc2lkZSBwZXJzcGVjdGl2ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNsaWVudFNpZGVMb2dvdXQgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gbG9nIG91dCBhIHVzZXIgZnJvbSB0aGUgY2xpZW50LXNpZGUgcGVyc3BlY3RpdmUuXG4gKiBAcGFyYW0ge1N0cmluZ30gaG9tZVZpZXcgVGhlIHZpZXcgdGhhdCBpcyBzdXBwb3NlZCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGhvbWUgcGFnZSwgZGVmaW5lZCBpbiBWaWV3cy5qc1xuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXIgYW5kIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTAvMjAvMjAyMVxuICovXG5jb25zdCBIb21lID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgW3ZpZXcsIHNldEhvbWVWaWV3XSA9IHVzZVN0YXRlKHByb3BzLmhvbWVWaWV3ID8gcHJvcHMuaG9tZVZpZXcgOiBWaWV3cy5Ib21lLkxvZ2luKTtcbiAgICBsZXQgaG9tZVZpZXcgPSA8PjwvPjtcblxuICAgIHN3aXRjaCAodmlldykge1xuICAgICAgICBjYXNlIFZpZXdzLkhvbWUuTG9naW46XG4gICAgICAgICAgICBob21lVmlldyA9IDxMb2dpblZpZXcgc2V0SG9tZVZpZXc9e3NldEhvbWVWaWV3fSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVmlld3MuSG9tZS5DcmVhdGVBY2NvdW50OlxuICAgICAgICAgICAgaG9tZVZpZXcgPSA8Q3JlYXRlQWNjb3VudFZpZXcgc2V0SG9tZVZpZXc9e3NldEhvbWVWaWV3fSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVmlld3MuSG9tZS5WZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvbjpcbiAgICAgICAgICAgIGhvbWVWaWV3ID0gPFZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uVmlldyBzZXRIb21lVmlldz17c2V0SG9tZVZpZXd9IC8+O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBWaWV3cy5Ib21lLkFjY291bnRTZXR1cDpcbiAgICAgICAgICAgIGhvbWVWaWV3ID0gKFxuICAgICAgICAgICAgICAgIDxBY2NvdW50U2V0dXBWaWV3IHNldEhvbWVWaWV3PXtzZXRIb21lVmlld30gdmVyaWZpY2F0aW9uVG9rZW49e3Byb3BzLm1hdGNoLnBhcmFtcy52ZXJpZmljYXRpb25Ub2tlbn0gLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8UGFnZSB0b3BCYXI9e2ZhbHNlfSBzaG93aW5nUGFnZVRpdGxlPXtmYWxzZX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkhvbWVQYWdlXCI+XG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInN1YnRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgIFN0dWR5IDxiciAvPiB3aXRoIDxiciAvPiBleGNlbGxlbmNlLlxuICAgICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgICAgPGRpdj57IXByb3BzLmNoaWxkcmVuID8gaG9tZVZpZXcgOiBwcm9wcy5jaGlsZHJlbn08L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1BhZ2U+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWU7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0dWR5LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHVkeS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHVkeUdyb3VwVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R1ZHlHcm91cFZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IFwiLi9TdHVkeUdyb3VwVmlldy5zY3NzXCI7XG5cbi8qKlxuICogVXNlZCB0byBkaXNwbGF5IGEgam9pbmVkIHN0dWR5IGdyb3VwIG9uIHRoZSBzdHVkeSBwYWdlXG4gKiBAcGFyYW0ge1N0cmluZ30gdGl0bGUgdGl0bGUgb2YgdGhlIHN0dWR5IGdyb3VwXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTEvMDIvMjAyMVxuICovXG5jb25zdCBTdHVkeUdyb3VwVmlldyA9ICh7IGdyb3VwIH0pID0+IHtcbiAgICBjb25zdCB7IG5hbWUsIHNjaG9vbCwgb3duZXIsIHN1YmplY3QsIGNvdXJzZSwgaXNUdXRvckdyb3VwLCBpc09ubGluZUdyb3VwLCBncm91cENvbG9yLCBkZXNjcmlwdGlvbiwgX2lkIH0gPSBncm91cDtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxMaW5rIHRvPXtcIi9ncm91cC9cIiArIF9pZH0gc3R5bGU9e3sgdGV4dERlY29yYXRpb246IFwibm9uZVwiIH19PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInN0dWR5LWdyb3VwLXZpZXdcIlxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogYCR7Z3JvdXBDb2xvcn0gNHB4IHNvbGlkYCxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBncm91cENvbG9yICsgXCI5OVwiLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCJcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJncm91cC10aXRsZVwiPntuYW1lfTwvaDE+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC12aWV3LXN1Yi1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPntpc1R1dG9yR3JvdXAgPyBcIlR1dG9yXCIgOiBcIkdyb3VwXCJ9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD57aXNPbmxpbmVHcm91cCA/IFwiT25saW5lXCIgOiBcIkluLXBlcnNvblwifTwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLXZpZXctZGV0YWlsc1wiPlxuICAgICAgICAgICAgICAgICAgICA8cD5Pd25lcjoge293bmVyLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD5Db3Vyc2UgQ29kZToge2NvdXJzZX08L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9MaW5rPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdHVkeUdyb3VwVmlldztcbiIsImltcG9ydCBcIi4vU3R1ZHkuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgc2VuZEdldFJlcXVlc3QsIHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi9IZWxwZXJcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHtcbiAgICBzaWduT3V0LFxuICAgIHNob3dDcmVhdGVTdHVkeUdyb3VwUG9wdXAsXG4gICAgbG9hZFN0dWR5R3JvdXAsXG4gICAgc2hvd0Vycm9yTm90aWZpY2F0aW9uLFxuICAgIHNldFVzZXJcbn0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3JcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XG5cbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xuaW1wb3J0IHsgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcblxuaW1wb3J0IFRvcEJhciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyXCI7XG5pbXBvcnQgU3R1ZHlHcm91cFZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL1N0dWR5L3N0dWR5R3JvdXBWaWV3L1N0dWR5R3JvdXBWaWV3XCI7XG5pbXBvcnQgUGFnZSBmcm9tIFwiLi4vUGFnZVwiO1xuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTG9hZGluZy9Mb2FkaW5nXCI7XG5cbi8qKlxuICogUmVuZGVycyB0aGUgc3R1ZHkgcGFnZSwgZGlzcGxheWluZyBhbGwgdGhlIHN0dWR5IGdyb3VwcyB0aGUgdXNlciBpcyBhIG1lbWJlciBvZi5cbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMS8yMC8yMDIxXG4gKi9cbmNvbnN0IFN0dWR5ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgaXNMb2FkaW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLmxvYWRpbmcpO1xuICAgIGNvbnN0IGlzTG9nZ2VkSW4gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLmlzTG9nZ2VkSW4pO1xuICAgIGNvbnN0IHN0dWR5R3JvdXBzID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5zdHVkeUdyb3Vwc1JlZHVjZXIuc3R1ZHlHcm91cHMpO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gZ2V0R3JvdXBzKCkge1xuICAgICAgICAgICAgYXdhaXQgZ2V0U3R1ZHlHcm91cHMoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhzdHVkeUdyb3Vwcyk7XG4gICAgICAgIGlzTG9nZ2VkSW4gJiYgc3R1ZHlHcm91cHMubGVuZ3RoID09PSAwICYmIGdldEdyb3VwcygpO1xuXG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIHZlcmlmeVVzZXJFbWFpbCgpIHtcbiAgICAgICAgICAgIGF3YWl0IHZlcmlmeUVtYWlsKHByb3BzLm1hdGNoLnBhcmFtcy52ZXJpZmljYXRpb25Ub2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMuaXNWZXJpZnlpbmdFbWFpbCAmJiBpc0xvZ2dlZEluICYmIHZlcmlmeVVzZXJFbWFpbCgpO1xuICAgIH0sIFtdKTtcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbGwgc3R1ZHkgZ3JvdXBzIHRoZSB1c2VyIGlzIGEgbWVtYmVyIG9mIGZyb20gdGhlIHNlcnZlclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTEvMjAvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IGdldFN0dWR5R3JvdXBzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJ1bm5pbmdcIik7XG4gICAgICAgIGF3YWl0IHNlbmRHZXRSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLlN0dWR5R3JvdXAuR2V0VXNlclN0dWR5R3JvdXBzLFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLlN1Y2Nlc3NTdHVkeUdyb3Vwc1JldHJpZXZlZCxcbiAgICAgICAgICAgIFwiVGhlcmUncyBiZWVuIGFuIGVycm9yIGxvYWRpbmcgeW91ciBzdHVkeSBncm91cHMuICBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLiBcIixcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IHN0dWR5R3JvdXBzIH0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGlmIChzdHVkeUdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICBzdHVkeUdyb3Vwcy5tYXAoKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGxvYWRTdHVkeUdyb3VwKHN0dWR5R3JvdXBzKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHZlcmlmeSB0aGUgZW1haWwsIGlmIGEgdXNlciBjaGFuZ2VkIHRoZWlyIGVtYWlsLCBmcm9tIGFcbiAgICAgKiB0b2tlbiB0aGF0IHdhcyByZWNlaXZlZCBmcm9tIHRoZSBsaW5rXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZlcmlmaWNhdGlvblRva2VuIFRoZSB2ZXJpZmljYXRpb24gdG9rZW5cbiAgICAgKiBAZGF0ZSAgIDAyLzA5LzIyXG4gICAgICogQGFzeW5jXG4gICAgICovXG4gICAgY29uc3QgdmVyaWZ5RW1haWwgPSBhc3luYyAodmVyaWZpY2F0aW9uVG9rZW4pID0+IHtcbiAgICAgICAgLy8gU1VCTUlUIFRIRSBWRVJJRlkgVVNFUiBSRVFVRVNULlxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5WZXJpZnlFbWFpbENoYW5nZSxcbiAgICAgICAgICAgIHsgdmVyaWZpY2F0aW9uVG9rZW4gfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzQ2hhbmdpbmdFbWFpbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNldFVzZXIoZGF0YS51c2VyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxQYWdlIHRvcEJhcj17dHJ1ZX0gY3VycmVudFBhZ2U9XCJzdHVkeVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHVkeS1wYWdlXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMT5TdHVkeTwvaDE+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAge2lzTG9nZ2VkSW4gPyAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT1cImFkZC1idXR0b25cIiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzaG93Q3JlYXRlU3R1ZHlHcm91cFBvcHVwKCkpfT48L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtpc0xvYWRpbmcgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRpbmcgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHVkeS1ncm91cHMtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtWYWxpZGF0b3IuaXNEZWZpbmVkKHN0dWR5R3JvdXBzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R1ZHlHcm91cHMubWFwKChzdHVkeUdyb3VwKSA9PiA8U3R1ZHlHcm91cFZpZXcgZ3JvdXA9e3N0dWR5R3JvdXB9IC8+KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3Vlc3QtbWVzc2FnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxPllvdSBhcmUgY3VycmVudGx5IGJyb3dzaW5nIFN0dWR5IFNwYWNlcyBhcyBhIGd1ZXN0ITwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2Ugc2lnbi11cCBvciBsb2ctaW4gdG8gYmUgYWJsZSB0byBqb2luIGFuZCBjcmVhdGUgc3R1ZHkgZ3JvdXBzPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+RmVlbCBmcmVlIHRvIHVzZSBvdXIgc2VhcmNoIHRvb2wgdG8gZGlzY292ZXIgc3R1ZHkgZ3JvdXBzIGluIHlvdXIgYXJlYS48L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9QYWdlPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdHVkeTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2guc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoVmlldy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hGb3JtLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hGb3JtLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTbGlkZXInLCBzbG90KTtcbn1cbmNvbnN0IHNsaWRlclVuc3R5bGVkQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNsaWRlcicsIFsncm9vdCcsICdhY3RpdmUnLCAnZm9jdXNWaXNpYmxlJywgJ2Rpc2FibGVkJywgJ2RyYWdnaW5nJywgJ21hcmtlZCcsICd2ZXJ0aWNhbCcsICd0cmFja0ludmVydGVkJywgJ3RyYWNrRmFsc2UnLCAncmFpbCcsICd0cmFjaycsICdtYXJrJywgJ21hcmtBY3RpdmUnLCAnbWFya0xhYmVsJywgJ21hcmtMYWJlbEFjdGl2ZScsICd0aHVtYicsICd2YWx1ZUxhYmVsJywgJ3ZhbHVlTGFiZWxPcGVuJywgJ3ZhbHVlTGFiZWxDaXJjbGUnLCAndmFsdWVMYWJlbExhYmVsJ10pO1xuZXhwb3J0IGRlZmF1bHQgc2xpZGVyVW5zdHlsZWRDbGFzc2VzOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzbGlkZXJVbnN0eWxlZENsYXNzZXMgZnJvbSAnLi9zbGlkZXJVbnN0eWxlZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVmFsdWVMYWJlbENsYXNzZXMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcGVuXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgdXRpbGl0eUNsYXNzZXMgPSB7XG4gICAgb2Zmc2V0OiBjbHN4KG9wZW4gJiYgc2xpZGVyVW5zdHlsZWRDbGFzc2VzLnZhbHVlTGFiZWxPcGVuKSxcbiAgICBjaXJjbGU6IHNsaWRlclVuc3R5bGVkQ2xhc3Nlcy52YWx1ZUxhYmVsQ2lyY2xlLFxuICAgIGxhYmVsOiBzbGlkZXJVbnN0eWxlZENsYXNzZXMudmFsdWVMYWJlbExhYmVsXG4gIH07XG4gIHJldHVybiB1dGlsaXR5Q2xhc3Nlcztcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICB2YWx1ZSxcbiAgICB0aGVtZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VWYWx1ZUxhYmVsQ2xhc3Nlcyhwcm9wcyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSlcbiAgfSwgLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbi5wcm9wcy5jaGlsZHJlbiwgLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLm9mZnNldCwgY2xhc3NOYW1lKSxcbiAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY2lyY2xlLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWwsXG4gICAgICAgICAgY2hpbGRyZW46IHZhbHVlXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXVxuICB9KSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlclZhbHVlTGFiZWxVbnN0eWxlZC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRoZW1lOiBQcm9wVHlwZXMuYW55LFxuICB2YWx1ZTogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQ7IiwiLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIERPTSBlbGVtZW50IG5hbWUgKGkuZS4gbm90IGEgUmVhY3QgY29tcG9uZW50KS5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0Q29tcG9uZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNIb3N0Q29tcG9uZW50OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICcuL2lzSG9zdENvbXBvbmVudCc7XG4vKipcbiAqIEFwcGVuZHMgdGhlIG93bmVyU3RhdGUgb2JqZWN0IHRvIHRoZSBwcm9wcywgbWVyZ2luZyB3aXRoIHRoZSBleGlzdGluZyBvbmUgaWYgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSBlbGVtZW50VHlwZSBUeXBlIG9mIHRoZSBlbGVtZW50IHRoYXQgb3ducyB0aGUgYGV4aXN0aW5nUHJvcHNgLiBJZiB0aGUgZWxlbWVudCBpcyBhIERPTSBub2RlLCBgb3duZXJTdGF0ZWAgYXJlIG5vdCBhcHBsaWVkLlxuICogQHBhcmFtIGV4aXN0aW5nUHJvcHMgUHJvcHMgb2YgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gb3duZXJTdGF0ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIGV4aXN0aW5nUHJvcHMgPSB7fSwgb3duZXJTdGF0ZSkge1xuICBpZiAoaXNIb3N0Q29tcG9uZW50KGVsZW1lbnRUeXBlKSkge1xuICAgIHJldHVybiBleGlzdGluZ1Byb3BzO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBleGlzdGluZ1Byb3BzLCB7XG4gICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIGV4aXN0aW5nUHJvcHMub3duZXJTdGF0ZSwgb3duZXJTdGF0ZSlcbiAgfSk7XG59IiwiY29uc3QgdmlzdWFsbHlIaWRkZW4gPSB7XG4gIGJvcmRlcjogMCxcbiAgY2xpcDogJ3JlY3QoMCAwIDAgMCknLFxuICBoZWlnaHQ6ICcxcHgnLFxuICBtYXJnaW46IC0xLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBhZGRpbmc6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgd2lkdGg6ICcxcHgnXG59O1xuZXhwb3J0IGRlZmF1bHQgdmlzdWFsbHlIaWRkZW47IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VJc0ZvY3VzVmlzaWJsZSBhcyB1c2VJc0ZvY3VzVmlzaWJsZSwgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QsIHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCwgdW5zdGFibGVfdXNlRXZlbnRDYWxsYmFjayBhcyB1c2VFdmVudENhbGxiYWNrLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUNvbnRyb2xsZWQgYXMgdXNlQ29udHJvbGxlZCwgdmlzdWFsbHlIaWRkZW4gfSBmcm9tICdAbXVpL3V0aWxzJztcbmNvbnN0IElOVEVOVElPTkFMX0RSQUdfQ09VTlRfVEhSRVNIT0xEID0gMjtcblxuZnVuY3Rpb24gYXNjKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xufVxuXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdCh2YWx1ZXMsIGN1cnJlbnRWYWx1ZSkge1xuICB2YXIgX3ZhbHVlcyRyZWR1Y2U7XG5cbiAgY29uc3Qge1xuICAgIGluZGV4OiBjbG9zZXN0SW5kZXhcbiAgfSA9IChfdmFsdWVzJHJlZHVjZSA9IHZhbHVlcy5yZWR1Y2UoKGFjYywgdmFsdWUsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLmFicyhjdXJyZW50VmFsdWUgLSB2YWx1ZSk7XG5cbiAgICBpZiAoYWNjID09PSBudWxsIHx8IGRpc3RhbmNlIDwgYWNjLmRpc3RhbmNlIHx8IGRpc3RhbmNlID09PSBhY2MuZGlzdGFuY2UpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3RhbmNlLFxuICAgICAgICBpbmRleFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBudWxsKSkgIT0gbnVsbCA/IF92YWx1ZXMkcmVkdWNlIDoge307XG4gIHJldHVybiBjbG9zZXN0SW5kZXg7XG59XG5cbmZ1bmN0aW9uIHRyYWNrRmluZ2VyKGV2ZW50LCB0b3VjaElkKSB7XG4gIC8vIFRoZSBldmVudCBpcyBUb3VjaEV2ZW50XG4gIGlmICh0b3VjaElkLmN1cnJlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuICAgIGNvbnN0IHRvdWNoRXZlbnQgPSBldmVudDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldO1xuXG4gICAgICBpZiAodG91Y2guaWRlbnRpZmllciA9PT0gdG91Y2hJZC5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogdG91Y2guY2xpZW50WCxcbiAgICAgICAgICB5OiB0b3VjaC5jbGllbnRZXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIFRoZSBldmVudCBpcyBNb3VzZUV2ZW50XG5cblxuICByZXR1cm4ge1xuICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgeTogZXZlbnQuY2xpZW50WVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb1BlcmNlbnQodmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiAodmFsdWUgLSBtaW4pICogMTAwIC8gKG1heCAtIG1pbik7XG59XG5cbmZ1bmN0aW9uIHBlcmNlbnRUb1ZhbHVlKHBlcmNlbnQsIG1pbiwgbWF4KSB7XG4gIHJldHVybiAobWF4IC0gbWluKSAqIHBlcmNlbnQgKyBtaW47XG59XG5cbmZ1bmN0aW9uIGdldERlY2ltYWxQcmVjaXNpb24obnVtKSB7XG4gIC8vIFRoaXMgaGFuZGxlcyB0aGUgY2FzZSB3aGVuIG51bSBpcyB2ZXJ5IHNtYWxsICgwLjAwMDAwMDAxKSwganMgd2lsbCB0dXJuIHRoaXMgaW50byAxZS04LlxuICAvLyBXaGVuIG51bSBpcyBiaWdnZXIgdGhhbiAxIG9yIGxlc3MgdGhhbiAtMSBpdCB3b24ndCBnZXQgY29udmVydGVkIHRvIHRoaXMgbm90YXRpb24gc28gaXQncyBmaW5lLlxuICBpZiAoTWF0aC5hYnMobnVtKSA8IDEpIHtcbiAgICBjb25zdCBwYXJ0cyA9IG51bS50b0V4cG9uZW50aWFsKCkuc3BsaXQoJ2UtJyk7XG4gICAgY29uc3QgbWF0aXNzYURlY2ltYWxQYXJ0ID0gcGFydHNbMF0uc3BsaXQoJy4nKVsxXTtcbiAgICByZXR1cm4gKG1hdGlzc2FEZWNpbWFsUGFydCA/IG1hdGlzc2FEZWNpbWFsUGFydC5sZW5ndGggOiAwKSArIHBhcnNlSW50KHBhcnRzWzFdLCAxMCk7XG4gIH1cblxuICBjb25zdCBkZWNpbWFsUGFydCA9IG51bS50b1N0cmluZygpLnNwbGl0KCcuJylbMV07XG4gIHJldHVybiBkZWNpbWFsUGFydCA/IGRlY2ltYWxQYXJ0Lmxlbmd0aCA6IDA7XG59XG5cbmZ1bmN0aW9uIHJvdW5kVmFsdWVUb1N0ZXAodmFsdWUsIHN0ZXAsIG1pbikge1xuICBjb25zdCBuZWFyZXN0ID0gTWF0aC5yb3VuZCgodmFsdWUgLSBtaW4pIC8gc3RlcCkgKiBzdGVwICsgbWluO1xuICByZXR1cm4gTnVtYmVyKG5lYXJlc3QudG9GaXhlZChnZXREZWNpbWFsUHJlY2lzaW9uKHN0ZXApKSk7XG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlSW5kZXgoe1xuICB2YWx1ZXMsXG4gIG5ld1ZhbHVlLFxuICBpbmRleFxufSkge1xuICBjb25zdCBvdXRwdXQgPSB2YWx1ZXMuc2xpY2UoKTtcbiAgb3V0cHV0W2luZGV4XSA9IG5ld1ZhbHVlO1xuICByZXR1cm4gb3V0cHV0LnNvcnQoYXNjKTtcbn1cblxuZnVuY3Rpb24gZm9jdXNUaHVtYih7XG4gIHNsaWRlclJlZixcbiAgYWN0aXZlSW5kZXgsXG4gIHNldEFjdGl2ZVxufSkge1xuICB2YXIgX3NsaWRlclJlZiRjdXJyZW50LCBfZG9jJGFjdGl2ZUVsZW1lbnQ7XG5cbiAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChzbGlkZXJSZWYuY3VycmVudCk7XG5cbiAgaWYgKCEoKF9zbGlkZXJSZWYkY3VycmVudCA9IHNsaWRlclJlZi5jdXJyZW50KSAhPSBudWxsICYmIF9zbGlkZXJSZWYkY3VycmVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHx8IE51bWJlcihkb2MgPT0gbnVsbCA/IHZvaWQgMCA6IChfZG9jJGFjdGl2ZUVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kb2MkYWN0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSkgIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgdmFyIF9zbGlkZXJSZWYkY3VycmVudDI7XG5cbiAgICAoX3NsaWRlclJlZiRjdXJyZW50MiA9IHNsaWRlclJlZi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX3NsaWRlclJlZiRjdXJyZW50Mi5xdWVyeVNlbGVjdG9yKGBbdHlwZT1cInJhbmdlXCJdW2RhdGEtaW5kZXg9XCIke2FjdGl2ZUluZGV4fVwiXWApLmZvY3VzKCk7XG4gIH1cblxuICBpZiAoc2V0QWN0aXZlKSB7XG4gICAgc2V0QWN0aXZlKGFjdGl2ZUluZGV4KTtcbiAgfVxufVxuXG5jb25zdCBheGlzUHJvcHMgPSB7XG4gIGhvcml6b250YWw6IHtcbiAgICBvZmZzZXQ6IHBlcmNlbnQgPT4gKHtcbiAgICAgIGxlZnQ6IGAke3BlcmNlbnR9JWBcbiAgICB9KSxcbiAgICBsZWFwOiBwZXJjZW50ID0+ICh7XG4gICAgICB3aWR0aDogYCR7cGVyY2VudH0lYFxuICAgIH0pXG4gIH0sXG4gICdob3Jpem9udGFsLXJldmVyc2UnOiB7XG4gICAgb2Zmc2V0OiBwZXJjZW50ID0+ICh7XG4gICAgICByaWdodDogYCR7cGVyY2VudH0lYFxuICAgIH0pLFxuICAgIGxlYXA6IHBlcmNlbnQgPT4gKHtcbiAgICAgIHdpZHRoOiBgJHtwZXJjZW50fSVgXG4gICAgfSlcbiAgfSxcbiAgdmVydGljYWw6IHtcbiAgICBvZmZzZXQ6IHBlcmNlbnQgPT4gKHtcbiAgICAgIGJvdHRvbTogYCR7cGVyY2VudH0lYFxuICAgIH0pLFxuICAgIGxlYXA6IHBlcmNlbnQgPT4gKHtcbiAgICAgIGhlaWdodDogYCR7cGVyY2VudH0lYFxuICAgIH0pXG4gIH1cbn07XG5leHBvcnQgY29uc3QgSWRlbnRpdHkgPSB4ID0+IHg7IC8vIFRPRE86IHJlbW92ZSBzdXBwb3J0IGZvciBTYWZhcmkgPCAxMy5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10b3VjaC1hY3Rpb25cbi8vXG4vLyBTYWZhcmksIG9uIGlPUywgc3VwcG9ydHMgdG91Y2ggYWN0aW9uIHNpbmNlIHYxMy5cbi8vIE92ZXIgODAlIG9mIHRoZSBpT1MgcGhvbmVzIGFyZSBjb21wYXRpYmxlXG4vLyBpbiBBdWd1c3QgMjAyMC5cbi8vIFV0aWxpemluZyB0aGUgQ1NTLnN1cHBvcnRzIG1ldGhvZCB0byBjaGVjayBpZiB0b3VjaC1hY3Rpb24gaXMgc3VwcG9ydGVkLlxuLy8gU2luY2UgQ1NTLnN1cHBvcnRzIGlzIHN1cHBvcnRlZCBvbiBhbGwgYnV0IEVkZ2VAMTIgYW5kIElFIGFuZCB0b3VjaC1hY3Rpb25cbi8vIGlzIHN1cHBvcnRlZCBvbiBib3RoIEVkZ2VAMTIgYW5kIElFIGlmIENTUy5zdXBwb3J0cyBpcyBub3QgYXZhaWxhYmxlIHRoYXQgbWVhbnMgdGhhdFxuLy8gdG91Y2gtYWN0aW9uIHdpbGwgYmUgc3VwcG9ydGVkXG5cbmxldCBjYWNoZWRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZTtcblxuZnVuY3Rpb24gZG9lc1N1cHBvcnRUb3VjaEFjdGlvbk5vbmUoKSB7XG4gIGlmIChjYWNoZWRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBDU1MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBDU1Muc3VwcG9ydHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhY2hlZFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lID0gQ1NTLnN1cHBvcnRzKCd0b3VjaC1hY3Rpb24nLCAnbm9uZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZWRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhY2hlZFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTbGlkZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHJlZixcbiAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGVkYnksXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVTd2FwID0gZmFsc2UsXG4gICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICBtYXJrczogbWFya3NQcm9wID0gZmFsc2UsXG4gICAgbWF4ID0gMTAwLFxuICAgIG1pbiA9IDAsXG4gICAgbmFtZSxcbiAgICBvbkNoYW5nZSxcbiAgICBvbkNoYW5nZUNvbW1pdHRlZCxcbiAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyxcbiAgICBzY2FsZSA9IElkZW50aXR5LFxuICAgIHN0ZXAgPSAxLFxuICAgIHRhYkluZGV4LFxuICAgIHZhbHVlOiB2YWx1ZVByb3AsXG4gICAgaXNSdGwgPSBmYWxzZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHRvdWNoSWQgPSBSZWFjdC51c2VSZWYoKTsgLy8gV2UgY2FuJ3QgdXNlIHRoZSA6YWN0aXZlIGJyb3dzZXIgcHNldWRvLWNsYXNzZXMuXG4gIC8vIC0gVGhlIGFjdGl2ZSBzdGF0ZSBpc24ndCB0cmlnZ2VyZWQgd2hlbiBjbGlja2luZyBvbiB0aGUgcmFpbC5cbiAgLy8gLSBUaGUgYWN0aXZlIHN0YXRlIGlzbid0IHRyYW5zZmVycmVkIHdoZW4gaW52ZXJzaW5nIGEgcmFuZ2Ugc2xpZGVyLlxuXG4gIGNvbnN0IFthY3RpdmUsIHNldEFjdGl2ZV0gPSBSZWFjdC51c2VTdGF0ZSgtMSk7XG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKC0xKTtcbiAgY29uc3QgW2RyYWdnaW5nLCBzZXREcmFnZ2luZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IG1vdmVDb3VudCA9IFJlYWN0LnVzZVJlZigwKTtcbiAgY29uc3QgW3ZhbHVlRGVyaXZlZCwgc2V0VmFsdWVTdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiB2YWx1ZVByb3AsXG4gICAgZGVmYXVsdDogZGVmYXVsdFZhbHVlICE9IG51bGwgPyBkZWZhdWx0VmFsdWUgOiBtaW4sXG4gICAgbmFtZTogJ1NsaWRlcidcbiAgfSk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gb25DaGFuZ2UgJiYgKChldmVudCwgdmFsdWUsIHRodW1iSW5kZXgpID0+IHtcbiAgICAvLyBSZWRlZmluZSB0YXJnZXQgdG8gYWxsb3cgbmFtZSBhbmQgdmFsdWUgdG8gYmUgcmVhZC5cbiAgICAvLyBUaGlzIGFsbG93cyBzZWFtbGVzcyBpbnRlZ3JhdGlvbiB3aXRoIHRoZSBtb3N0IHBvcHVsYXIgZm9ybSBsaWJyYXJpZXMuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNDg1I2lzc3VlY29tbWVudC02NzYwNDg0OTJcbiAgICAvLyBDbG9uZSB0aGUgZXZlbnQgdG8gbm90IG92ZXJyaWRlIGB0YXJnZXRgIG9mIHRoZSBvcmlnaW5hbCBldmVudC5cbiAgICBjb25zdCBuYXRpdmVFdmVudCA9IGV2ZW50Lm5hdGl2ZUV2ZW50IHx8IGV2ZW50OyAvLyBAdHMtaWdub3JlIFRoZSBuYXRpdmVFdmVudCBpcyBmdW5jdGlvbiwgbm90IG9iamVjdFxuXG4gICAgY29uc3QgY2xvbmVkRXZlbnQgPSBuZXcgbmF0aXZlRXZlbnQuY29uc3RydWN0b3IobmF0aXZlRXZlbnQudHlwZSwgbmF0aXZlRXZlbnQpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbG9uZWRFdmVudCwgJ3RhcmdldCcsIHtcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG5hbWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbkNoYW5nZShjbG9uZWRFdmVudCwgdmFsdWUsIHRodW1iSW5kZXgpO1xuICB9KTtcblxuICBjb25zdCByYW5nZSA9IEFycmF5LmlzQXJyYXkodmFsdWVEZXJpdmVkKTtcbiAgbGV0IHZhbHVlcyA9IHJhbmdlID8gdmFsdWVEZXJpdmVkLnNsaWNlKCkuc29ydChhc2MpIDogW3ZhbHVlRGVyaXZlZF07XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gY2xhbXAodmFsdWUsIG1pbiwgbWF4KSk7XG4gIGNvbnN0IG1hcmtzID0gbWFya3NQcm9wID09PSB0cnVlICYmIHN0ZXAgIT09IG51bGwgPyBbLi4uQXJyYXkoTWF0aC5mbG9vcigobWF4IC0gbWluKSAvIHN0ZXApICsgMSldLm1hcCgoXywgaW5kZXgpID0+ICh7XG4gICAgdmFsdWU6IG1pbiArIHN0ZXAgKiBpbmRleFxuICB9KSkgOiBtYXJrc1Byb3AgfHwgW107XG4gIGNvbnN0IG1hcmtzVmFsdWVzID0gbWFya3MubWFwKG1hcmsgPT4gbWFyay52YWx1ZSk7XG4gIGNvbnN0IHtcbiAgICBpc0ZvY3VzVmlzaWJsZVJlZixcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICByZWY6IGZvY3VzVmlzaWJsZVJlZlxuICB9ID0gdXNlSXNGb2N1c1Zpc2libGUoKTtcbiAgY29uc3QgW2ZvY3VzVmlzaWJsZSwgc2V0Rm9jdXNWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlKC0xKTtcbiAgY29uc3Qgc2xpZGVyUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZUZvY3VzUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIHNsaWRlclJlZik7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBoYW5kbGVGb2N1c1JlZik7XG5cbiAgY29uc3QgY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRGb2N1cyA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkZvY3U7XG5cbiAgICBjb25zdCBpbmRleCA9IE51bWJlcihldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpKTtcbiAgICBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpO1xuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IHRydWUpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShpbmRleCk7XG4gICAgfVxuXG4gICAgc2V0T3BlbihpbmRleCk7XG4gICAgb3RoZXJIYW5kbGVycyA9PSBudWxsID8gdm9pZCAwIDogKF9vdGhlckhhbmRsZXJzJG9uRm9jdSA9IG90aGVySGFuZGxlcnMub25Gb2N1cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uRm9jdS5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVIYW5kbGVIaWRlbklucHV0Qmx1ciA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkJsdXI7XG5cbiAgICBoYW5kbGVCbHVyVmlzaWJsZShldmVudCk7XG5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gZmFsc2UpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSgtMSk7XG4gICAgfVxuXG4gICAgc2V0T3BlbigtMSk7XG4gICAgb3RoZXJIYW5kbGVycyA9PSBudWxsID8gdm9pZCAwIDogKF9vdGhlckhhbmRsZXJzJG9uQmx1ciA9IG90aGVySGFuZGxlcnMub25CbHVyKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVySGFuZGxlcnMkb25CbHVyLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICB9O1xuXG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGlzYWJsZWQgJiYgc2xpZGVyUmVmLmN1cnJlbnQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIHZhciBfZG9jdW1lbnQkYWN0aXZlRWxlbWU7XG5cbiAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgRmlyZWZveCBhbmQgU2FmYXJpIHdpbGwga2VlcCBmb2N1c1xuICAgICAgLy8gb24gYSBkaXNhYmxlZCBlbGVtZW50OlxuICAgICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL211aS1wci0yMjI0Ny1mb3JrZWQtaDE1MWg/ZmlsZT0vc3JjL0FwcC5qc1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgKF9kb2N1bWVudCRhY3RpdmVFbGVtZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZG9jdW1lbnQkYWN0aXZlRWxlbWUuYmx1cigpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVkXSk7XG5cbiAgaWYgKGRpc2FibGVkICYmIGFjdGl2ZSAhPT0gLTEpIHtcbiAgICBzZXRBY3RpdmUoLTEpO1xuICB9XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSAhPT0gLTEpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoLTEpO1xuICB9XG5cbiAgY29uc3QgY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRDaGFuZ2UgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25DaGFuO1xuXG4gICAgKF9vdGhlckhhbmRsZXJzJG9uQ2hhbiA9IG90aGVySGFuZGxlcnMub25DaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbkNoYW4uY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSk7XG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdO1xuICAgIGNvbnN0IG1hcmtzSW5kZXggPSBtYXJrc1ZhbHVlcy5pbmRleE9mKHZhbHVlKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgbGV0IG5ld1ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlQXNOdW1iZXI7XG5cbiAgICBpZiAobWFya3MgJiYgc3RlcCA9PSBudWxsKSB7XG4gICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlIDwgdmFsdWUgPyBtYXJrc1ZhbHVlc1ttYXJrc0luZGV4IC0gMV0gOiBtYXJrc1ZhbHVlc1ttYXJrc0luZGV4ICsgMV07XG4gICAgfVxuXG4gICAgbmV3VmFsdWUgPSBjbGFtcChuZXdWYWx1ZSwgbWluLCBtYXgpO1xuXG4gICAgaWYgKG1hcmtzICYmIHN0ZXAgPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudE1hcmtJbmRleCA9IG1hcmtzVmFsdWVzLmluZGV4T2YodmFsdWVzW2luZGV4XSk7XG4gICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlIDwgdmFsdWVzW2luZGV4XSA/IG1hcmtzVmFsdWVzW2N1cnJlbnRNYXJrSW5kZXggLSAxXSA6IG1hcmtzVmFsdWVzW2N1cnJlbnRNYXJrSW5kZXggKyAxXTtcbiAgICB9XG5cbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIC8vIEJvdW5kIHRoZSBuZXcgdmFsdWUgdG8gdGhlIHRodW1iJ3MgbmVpZ2hib3Vycy5cbiAgICAgIGlmIChkaXNhYmxlU3dhcCkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNsYW1wKG5ld1ZhbHVlLCB2YWx1ZXNbaW5kZXggLSAxXSB8fCAtSW5maW5pdHksIHZhbHVlc1tpbmRleCArIDFdIHx8IEluZmluaXR5KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgbmV3VmFsdWUgPSBzZXRWYWx1ZUluZGV4KHtcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgaW5kZXhcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGl2ZUluZGV4ID0gaW5kZXg7IC8vIFBvdGVudGlhbGx5IHN3YXAgdGhlIGluZGV4IGlmIG5lZWRlZC5cblxuICAgICAgaWYgKCFkaXNhYmxlU3dhcCkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IG5ld1ZhbHVlLmluZGV4T2YocHJldmlvdXNWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZvY3VzVGh1bWIoe1xuICAgICAgICBzbGlkZXJSZWYsXG4gICAgICAgIGFjdGl2ZUluZGV4XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcbiAgICBzZXRGb2N1c1Zpc2libGUoaW5kZXgpO1xuXG4gICAgaWYgKGhhbmRsZUNoYW5nZSkge1xuICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50LCBuZXdWYWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZUNvbW1pdHRlZCkge1xuICAgICAgb25DaGFuZ2VDb21taXR0ZWQoZXZlbnQsIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcHJldmlvdXNJbmRleCA9IFJlYWN0LnVzZVJlZigpO1xuICBsZXQgYXhpcyA9IG9yaWVudGF0aW9uO1xuXG4gIGlmIChpc1J0bCAmJiBvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgYXhpcyArPSAnLXJldmVyc2UnO1xuICB9XG5cbiAgY29uc3QgZ2V0RmluZ2VyTmV3VmFsdWUgPSAoe1xuICAgIGZpbmdlcixcbiAgICBtb3ZlID0gZmFsc2UsXG4gICAgdmFsdWVzOiB2YWx1ZXMyXG4gIH0pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50OiBzbGlkZXJcbiAgICB9ID0gc2xpZGVyUmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgbGVmdFxuICAgIH0gPSBzbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IHBlcmNlbnQ7XG5cbiAgICBpZiAoYXhpcy5pbmRleE9mKCd2ZXJ0aWNhbCcpID09PSAwKSB7XG4gICAgICBwZXJjZW50ID0gKGJvdHRvbSAtIGZpbmdlci55KSAvIGhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGVyY2VudCA9IChmaW5nZXIueCAtIGxlZnQpIC8gd2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKGF4aXMuaW5kZXhPZignLXJldmVyc2UnKSAhPT0gLTEpIHtcbiAgICAgIHBlcmNlbnQgPSAxIC0gcGVyY2VudDtcbiAgICB9XG5cbiAgICBsZXQgbmV3VmFsdWU7XG4gICAgbmV3VmFsdWUgPSBwZXJjZW50VG9WYWx1ZShwZXJjZW50LCBtaW4sIG1heCk7XG5cbiAgICBpZiAoc3RlcCkge1xuICAgICAgbmV3VmFsdWUgPSByb3VuZFZhbHVlVG9TdGVwKG5ld1ZhbHVlLCBzdGVwLCBtaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjbG9zZXN0SW5kZXggPSBmaW5kQ2xvc2VzdChtYXJrc1ZhbHVlcywgbmV3VmFsdWUpO1xuICAgICAgbmV3VmFsdWUgPSBtYXJrc1ZhbHVlc1tjbG9zZXN0SW5kZXhdO1xuICAgIH1cblxuICAgIG5ld1ZhbHVlID0gY2xhbXAobmV3VmFsdWUsIG1pbiwgbWF4KTtcbiAgICBsZXQgYWN0aXZlSW5kZXggPSAwO1xuXG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICBpZiAoIW1vdmUpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBmaW5kQ2xvc2VzdCh2YWx1ZXMyLCBuZXdWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVJbmRleCA9IHByZXZpb3VzSW5kZXguY3VycmVudDtcbiAgICAgIH0gLy8gQm91bmQgdGhlIG5ldyB2YWx1ZSB0byB0aGUgdGh1bWIncyBuZWlnaGJvdXJzLlxuXG5cbiAgICAgIGlmIChkaXNhYmxlU3dhcCkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNsYW1wKG5ld1ZhbHVlLCB2YWx1ZXMyW2FjdGl2ZUluZGV4IC0gMV0gfHwgLUluZmluaXR5LCB2YWx1ZXMyW2FjdGl2ZUluZGV4ICsgMV0gfHwgSW5maW5pdHkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmV2aW91c1ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBuZXdWYWx1ZSA9IHNldFZhbHVlSW5kZXgoe1xuICAgICAgICB2YWx1ZXM6IHZhbHVlczIsXG4gICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICBpbmRleDogYWN0aXZlSW5kZXhcbiAgICAgIH0pOyAvLyBQb3RlbnRpYWxseSBzd2FwIHRoZSBpbmRleCBpZiBuZWVkZWQuXG5cbiAgICAgIGlmICghKGRpc2FibGVTd2FwICYmIG1vdmUpKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gbmV3VmFsdWUuaW5kZXhPZihwcmV2aW91c1ZhbHVlKTtcbiAgICAgICAgcHJldmlvdXNJbmRleC5jdXJyZW50ID0gYWN0aXZlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgYWN0aXZlSW5kZXhcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVRvdWNoTW92ZSA9IHVzZUV2ZW50Q2FsbGJhY2sobmF0aXZlRXZlbnQgPT4ge1xuICAgIGNvbnN0IGZpbmdlciA9IHRyYWNrRmluZ2VyKG5hdGl2ZUV2ZW50LCB0b3VjaElkKTtcblxuICAgIGlmICghZmluZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbW92ZUNvdW50LmN1cnJlbnQgKz0gMTsgLy8gQ2FuY2VsIG1vdmUgaW4gY2FzZSBzb21lIG90aGVyIGVsZW1lbnQgY29uc3VtZWQgYSBtb3VzZXVwIGV2ZW50IGFuZCBpdCB3YXMgbm90IGZpcmVkLlxuICAgIC8vIEB0cy1pZ25vcmUgYnV0dG9ucyBkb2Vzbid0IG5vdCBleGlzdHMgb24gdG91Y2ggZXZlbnRcblxuICAgIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAnbW91c2Vtb3ZlJyAmJiBuYXRpdmVFdmVudC5idXR0b25zID09PSAwKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICBoYW5kbGVUb3VjaEVuZChuYXRpdmVFdmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgbmV3VmFsdWUsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBnZXRGaW5nZXJOZXdWYWx1ZSh7XG4gICAgICBmaW5nZXIsXG4gICAgICBtb3ZlOiB0cnVlLFxuICAgICAgdmFsdWVzXG4gICAgfSk7XG4gICAgZm9jdXNUaHVtYih7XG4gICAgICBzbGlkZXJSZWYsXG4gICAgICBhY3RpdmVJbmRleCxcbiAgICAgIHNldEFjdGl2ZVxuICAgIH0pO1xuICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuXG4gICAgaWYgKCFkcmFnZ2luZyAmJiBtb3ZlQ291bnQuY3VycmVudCA+IElOVEVOVElPTkFMX0RSQUdfQ09VTlRfVEhSRVNIT0xEKSB7XG4gICAgICBzZXREcmFnZ2luZyh0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoaGFuZGxlQ2hhbmdlKSB7XG4gICAgICBoYW5kbGVDaGFuZ2UobmF0aXZlRXZlbnQsIG5ld1ZhbHVlLCBhY3RpdmVJbmRleCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlVG91Y2hFbmQgPSB1c2VFdmVudENhbGxiYWNrKG5hdGl2ZUV2ZW50ID0+IHtcbiAgICBjb25zdCBmaW5nZXIgPSB0cmFja0ZpbmdlcihuYXRpdmVFdmVudCwgdG91Y2hJZCk7XG4gICAgc2V0RHJhZ2dpbmcoZmFsc2UpO1xuXG4gICAgaWYgKCFmaW5nZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBuZXdWYWx1ZVxuICAgIH0gPSBnZXRGaW5nZXJOZXdWYWx1ZSh7XG4gICAgICBmaW5nZXIsXG4gICAgICB2YWx1ZXNcbiAgICB9KTtcbiAgICBzZXRBY3RpdmUoLTEpO1xuXG4gICAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICd0b3VjaGVuZCcpIHtcbiAgICAgIHNldE9wZW4oLTEpO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZUNvbW1pdHRlZCkge1xuICAgICAgb25DaGFuZ2VDb21taXR0ZWQobmF0aXZlRXZlbnQsIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICB0b3VjaElkLmN1cnJlbnQgPSB1bmRlZmluZWQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcblxuICAgIHN0b3BMaXN0ZW5pbmcoKTtcbiAgfSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VFdmVudENhbGxiYWNrKG5hdGl2ZUV2ZW50ID0+IHtcbiAgICAvLyBJZiB0b3VjaC1hY3Rpb246IG5vbmU7IGlzIG5vdCBzdXBwb3J0ZWQgd2UgbmVlZCB0byBwcmV2ZW50IHRoZSBzY3JvbGwgbWFudWFsbHkuXG4gICAgaWYgKCFkb2VzU3VwcG9ydFRvdWNoQWN0aW9uTm9uZSgpKSB7XG4gICAgICBuYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGNvbnN0IHRvdWNoID0gbmF0aXZlRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG5cbiAgICBpZiAodG91Y2ggIT0gbnVsbCkge1xuICAgICAgLy8gQSBudW1iZXIgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBjdXJyZW50IGZpbmdlciBpbiB0aGUgdG91Y2ggc2Vzc2lvbi5cbiAgICAgIHRvdWNoSWQuY3VycmVudCA9IHRvdWNoLmlkZW50aWZpZXI7XG4gICAgfVxuXG4gICAgY29uc3QgZmluZ2VyID0gdHJhY2tGaW5nZXIobmF0aXZlRXZlbnQsIHRvdWNoSWQpO1xuXG4gICAgaWYgKGZpbmdlciAhPT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgIGFjdGl2ZUluZGV4XG4gICAgICB9ID0gZ2V0RmluZ2VyTmV3VmFsdWUoe1xuICAgICAgICBmaW5nZXIsXG4gICAgICAgIHZhbHVlc1xuICAgICAgfSk7XG4gICAgICBmb2N1c1RodW1iKHtcbiAgICAgICAgc2xpZGVyUmVmLFxuICAgICAgICBhY3RpdmVJbmRleCxcbiAgICAgICAgc2V0QWN0aXZlXG4gICAgICB9KTtcbiAgICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAoaGFuZGxlQ2hhbmdlKSB7XG4gICAgICAgIGhhbmRsZUNoYW5nZShuYXRpdmVFdmVudCwgbmV3VmFsdWUsIGFjdGl2ZUluZGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtb3ZlQ291bnQuY3VycmVudCA9IDA7XG4gICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChzbGlkZXJSZWYuY3VycmVudCk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlVG91Y2hFbmQpO1xuICB9KTtcbiAgY29uc3Qgc3RvcExpc3RlbmluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHNsaWRlclJlZi5jdXJyZW50KTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZVRvdWNoRW5kKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVUb3VjaEVuZCk7XG4gIH0sIFtoYW5kbGVUb3VjaEVuZCwgaGFuZGxlVG91Y2hNb3ZlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY3VycmVudDogc2xpZGVyXG4gICAgfSA9IHNsaWRlclJlZjtcbiAgICBzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVRvdWNoU3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IGRvZXNTdXBwb3J0VG91Y2hBY3Rpb25Ob25lKClcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgc2xpZGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0LCB7XG4gICAgICAgIHBhc3NpdmU6IGRvZXNTdXBwb3J0VG91Y2hBY3Rpb25Ob25lKClcbiAgICAgIH0pO1xuICAgICAgc3RvcExpc3RlbmluZygpO1xuICAgIH07XG4gIH0sIFtzdG9wTGlzdGVuaW5nLCBoYW5kbGVUb3VjaFN0YXJ0XSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBzdG9wTGlzdGVuaW5nKCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZWQsIHN0b3BMaXN0ZW5pbmddKTtcblxuICBjb25zdCBjcmVhdGVIYW5kbGVNb3VzZURvd24gPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25Nb3VzO1xuXG4gICAgKF9vdGhlckhhbmRsZXJzJG9uTW91cyA9IG90aGVySGFuZGxlcnMub25Nb3VzZURvd24pID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbk1vdXMuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG5cbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gT25seSBoYW5kbGUgbGVmdCBjbGlja3NcblxuXG4gICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQXZvaWQgdGV4dCBzZWxlY3Rpb25cblxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBmaW5nZXIgPSB0cmFja0ZpbmdlcihldmVudCwgdG91Y2hJZCk7XG5cbiAgICBpZiAoZmluZ2VyICE9PSBmYWxzZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgYWN0aXZlSW5kZXhcbiAgICAgIH0gPSBnZXRGaW5nZXJOZXdWYWx1ZSh7XG4gICAgICAgIGZpbmdlcixcbiAgICAgICAgdmFsdWVzXG4gICAgICB9KTtcbiAgICAgIGZvY3VzVGh1bWIoe1xuICAgICAgICBzbGlkZXJSZWYsXG4gICAgICAgIGFjdGl2ZUluZGV4LFxuICAgICAgICBzZXRBY3RpdmVcbiAgICAgIH0pO1xuICAgICAgc2V0VmFsdWVTdGF0ZShuZXdWYWx1ZSk7XG5cbiAgICAgIGlmIChoYW5kbGVDaGFuZ2UpIHtcbiAgICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50LCBuZXdWYWx1ZSwgYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1vdmVDb3VudC5jdXJyZW50ID0gMDtcbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHNsaWRlclJlZi5jdXJyZW50KTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZVRvdWNoRW5kKTtcbiAgfTtcblxuICBjb25zdCB0cmFja09mZnNldCA9IHZhbHVlVG9QZXJjZW50KHJhbmdlID8gdmFsdWVzWzBdIDogbWluLCBtaW4sIG1heCk7XG4gIGNvbnN0IHRyYWNrTGVhcCA9IHZhbHVlVG9QZXJjZW50KHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0sIG1pbiwgbWF4KSAtIHRyYWNrT2Zmc2V0O1xuXG4gIGNvbnN0IGdldFJvb3RQcm9wcyA9IG90aGVySGFuZGxlcnMgPT4ge1xuICAgIGNvbnN0IG93bkV2ZW50SGFuZGxlcnMgPSB7XG4gICAgICBvbk1vdXNlRG93bjogY3JlYXRlSGFuZGxlTW91c2VEb3duKG90aGVySGFuZGxlcnMgfHwge30pXG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlZEV2ZW50SGFuZGxlcnMgPSBfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywgb3duRXZlbnRIYW5kbGVycyk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBtZXJnZWRFdmVudEhhbmRsZXJzKTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVIYW5kbGVNb3VzZU92ZXIgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25Nb3VzMjtcblxuICAgIChfb3RoZXJIYW5kbGVycyRvbk1vdXMyID0gb3RoZXJIYW5kbGVycy5vbk1vdXNlT3ZlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uTW91czIuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSk7XG4gICAgc2V0T3BlbihpbmRleCk7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlSGFuZGxlTW91c2VMZWF2ZSA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbk1vdXMzO1xuXG4gICAgKF9vdGhlckhhbmRsZXJzJG9uTW91czMgPSBvdGhlckhhbmRsZXJzLm9uTW91c2VMZWF2ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uTW91czMuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgc2V0T3BlbigtMSk7XG4gIH07XG5cbiAgY29uc3QgZ2V0VGh1bWJQcm9wcyA9IG90aGVySGFuZGxlcnMgPT4ge1xuICAgIGNvbnN0IG93bkV2ZW50SGFuZGxlcnMgPSB7XG4gICAgICBvbk1vdXNlT3ZlcjogY3JlYXRlSGFuZGxlTW91c2VPdmVyKG90aGVySGFuZGxlcnMgfHwge30pLFxuICAgICAgb25Nb3VzZUxlYXZlOiBjcmVhdGVIYW5kbGVNb3VzZUxlYXZlKG90aGVySGFuZGxlcnMgfHwge30pXG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlZEV2ZW50SGFuZGxlcnMgPSBfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywgb3duRXZlbnRIYW5kbGVycyk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG1lcmdlZEV2ZW50SGFuZGxlcnMpO1xuICB9O1xuXG4gIGNvbnN0IGdldEhpZGRlbklucHV0UHJvcHMgPSBvdGhlckhhbmRsZXJzID0+IHtcbiAgICBjb25zdCBvd25FdmVudEhhbmRsZXJzID0ge1xuICAgICAgb25DaGFuZ2U6IGNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Q2hhbmdlKG90aGVySGFuZGxlcnMgfHwge30pLFxuICAgICAgb25Gb2N1czogY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRGb2N1cyhvdGhlckhhbmRsZXJzIHx8IHt9KSxcbiAgICAgIG9uQmx1cjogY3JlYXRlSGFuZGxlSGlkZW5JbnB1dEJsdXIob3RoZXJIYW5kbGVycyB8fCB7fSlcbiAgICB9O1xuXG4gICAgY29uc3QgbWVyZ2VkRXZlbnRIYW5kbGVycyA9IF9leHRlbmRzKHt9LCBvdGhlckhhbmRsZXJzLCBvd25FdmVudEhhbmRsZXJzKTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICB0YWJJbmRleCxcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBhcmlhTGFiZWxsZWRieSxcbiAgICAgICdhcmlhLW9yaWVudGF0aW9uJzogb3JpZW50YXRpb24sXG4gICAgICAnYXJpYS12YWx1ZW1heCc6IHNjYWxlKG1heCksXG4gICAgICAnYXJpYS12YWx1ZW1pbic6IHNjYWxlKG1pbiksXG4gICAgICBuYW1lLFxuICAgICAgdHlwZTogJ3JhbmdlJyxcbiAgICAgIG1pbjogcHJvcHMubWluLFxuICAgICAgbWF4OiBwcm9wcy5tYXgsXG4gICAgICBzdGVwOiBwcm9wcy5zdGVwLFxuICAgICAgZGlzYWJsZWRcbiAgICB9LCBtZXJnZWRFdmVudEhhbmRsZXJzLCB7XG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHZpc3VhbGx5SGlkZGVuLCB7XG4gICAgICAgIGRpcmVjdGlvbjogaXNSdGwgPyAncnRsJyA6ICdsdHInLFxuICAgICAgICAvLyBTbyB0aGF0IFZvaWNlT3ZlcidzIGZvY3VzIGluZGljYXRvciBtYXRjaGVzIHRoZSB0aHVtYidzIGRpbWVuc2lvbnNcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH0pXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBheGlzLFxuICAgIGF4aXNQcm9wcyxcbiAgICBnZXRSb290UHJvcHMsXG4gICAgZ2V0SGlkZGVuSW5wdXRQcm9wcyxcbiAgICBnZXRUaHVtYlByb3BzLFxuICAgIGRyYWdnaW5nLFxuICAgIG1hcmtzLFxuICAgIHZhbHVlcyxcbiAgICBhY3RpdmUsXG4gICAgZm9jdXNWaXNpYmxlLFxuICAgIG9wZW4sXG4gICAgcmFuZ2UsXG4gICAgdHJhY2tPZmZzZXQsXG4gICAgdHJhY2tMZWFwXG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFyaWEtbGFiZWxcIiwgXCJhcmlhLXZhbHVldGV4dFwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImNsYXNzZXNcIiwgXCJkaXNhYmxlU3dhcFwiLCBcImRpc2FibGVkXCIsIFwiZ2V0QXJpYUxhYmVsXCIsIFwiZ2V0QXJpYVZhbHVlVGV4dFwiLCBcIm1hcmtzXCIsIFwibWF4XCIsIFwibWluXCIsIFwibmFtZVwiLCBcIm9uQ2hhbmdlXCIsIFwib25DaGFuZ2VDb21taXR0ZWRcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9yaWVudGF0aW9uXCIsIFwic2NhbGVcIiwgXCJzdGVwXCIsIFwidGFiSW5kZXhcIiwgXCJ0cmFja1wiLCBcInZhbHVlXCIsIFwidmFsdWVMYWJlbERpc3BsYXlcIiwgXCJ2YWx1ZUxhYmVsRm9ybWF0XCIsIFwiaXNSdGxcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBhcHBlbmRPd25lclN0YXRlIGZyb20gJy4uL3V0aWxzL2FwcGVuZE93bmVyU3RhdGUnO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICcuLi91dGlscy9pc0hvc3RDb21wb25lbnQnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJy4uL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGdldFNsaWRlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc2xpZGVyVW5zdHlsZWRDbGFzc2VzJztcbmltcG9ydCBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQgZnJvbSAnLi9TbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQnO1xuaW1wb3J0IHVzZVNsaWRlciwgeyB2YWx1ZVRvUGVyY2VudCB9IGZyb20gJy4vdXNlU2xpZGVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IElkZW50aXR5ID0geCA9PiB4O1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgZGlzYWJsZWQsXG4gICAgZHJhZ2dpbmcsXG4gICAgbWFya2VkLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIHRyYWNrLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGRyYWdnaW5nICYmICdkcmFnZ2luZycsIG1hcmtlZCAmJiAnbWFya2VkJywgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgJ3ZlcnRpY2FsJywgdHJhY2sgPT09ICdpbnZlcnRlZCcgJiYgJ3RyYWNrSW52ZXJ0ZWQnLCB0cmFjayA9PT0gZmFsc2UgJiYgJ3RyYWNrRmFsc2UnXSxcbiAgICByYWlsOiBbJ3JhaWwnXSxcbiAgICB0cmFjazogWyd0cmFjayddLFxuICAgIG1hcms6IFsnbWFyayddLFxuICAgIG1hcmtBY3RpdmU6IFsnbWFya0FjdGl2ZSddLFxuICAgIG1hcmtMYWJlbDogWydtYXJrTGFiZWwnXSxcbiAgICBtYXJrTGFiZWxBY3RpdmU6IFsnbWFya0xhYmVsQWN0aXZlJ10sXG4gICAgdmFsdWVMYWJlbDogWyd2YWx1ZUxhYmVsJ10sXG4gICAgdGh1bWI6IFsndGh1bWInLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBhY3RpdmU6IFsnYWN0aXZlJ10sXG4gICAgZGlzYWJsZWQ6IFsnZGlzYWJsZWQnXSxcbiAgICBmb2N1c1Zpc2libGU6IFsnZm9jdXNWaXNpYmxlJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTbGlkZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgRm9yd2FyZCA9ICh7XG4gIGNoaWxkcmVuXG59KSA9PiBjaGlsZHJlbjtcblxuY29uc3QgU2xpZGVyVW5zdHlsZWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTbGlkZXJVbnN0eWxlZChwcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfY29tcG9uZW50cyRSYWlsLCBfY29tcG9uZW50cyRUcmFjaywgX2NvbXBvbmVudHMkVGh1bWIsIF9jb21wb25lbnRzJFZhbHVlTGFiZSwgX2NvbXBvbmVudHMkTWFyaywgX2NvbXBvbmVudHMkTWFya0xhYmVsO1xuXG4gIGNvbnN0IHtcbiAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICAnYXJpYS12YWx1ZXRleHQnOiBhcmlhVmFsdWV0ZXh0LFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQsXG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgZGlzYWJsZVN3YXAgPSBmYWxzZSxcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGdldEFyaWFMYWJlbCxcbiAgICBnZXRBcmlhVmFsdWVUZXh0LFxuICAgIG1hcmtzOiBtYXJrc1Byb3AgPSBmYWxzZSxcbiAgICBtYXggPSAxMDAsXG4gICAgbWluID0gMCxcbiAgICBvbk1vdXNlRG93bixcbiAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyxcbiAgICBzY2FsZSA9IElkZW50aXR5LFxuICAgIHN0ZXAgPSAxLFxuICAgIHRyYWNrID0gJ25vcm1hbCcsXG4gICAgdmFsdWVMYWJlbERpc3BsYXkgPSAnb2ZmJyxcbiAgICB2YWx1ZUxhYmVsRm9ybWF0ID0gSWRlbnRpdHksXG4gICAgaXNSdGwgPSBmYWxzZSxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzID0ge31cbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpOyAvLyBhbGwgcHJvcHMgd2l0aCBkZWZhdWx0c1xuICAvLyBjb25zaWRlciBleHRyYWN0aW5nIHRvIGhvb2sgYW4gcmV1c2luZyB0aGUgbGludCBydWxlIGZvciB0aGUgdmFyaW50c1xuXG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIG1hcms6IG1hcmtzUHJvcCxcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcCxcbiAgICBkaXNhYmxlZCxcbiAgICBpc1J0bCxcbiAgICBtYXgsXG4gICAgbWluLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIHNjYWxlLFxuICAgIHN0ZXAsXG4gICAgdHJhY2ssXG4gICAgdmFsdWVMYWJlbERpc3BsYXksXG4gICAgdmFsdWVMYWJlbEZvcm1hdFxuICB9KTtcblxuICBjb25zdCB7XG4gICAgYXhpc1Byb3BzLFxuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRIaWRkZW5JbnB1dFByb3BzLFxuICAgIGdldFRodW1iUHJvcHMsXG4gICAgb3BlbixcbiAgICBhY3RpdmUsXG4gICAgYXhpcyxcbiAgICByYW5nZSxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZHJhZ2dpbmcsXG4gICAgbWFya3MsXG4gICAgdmFsdWVzLFxuICAgIHRyYWNrT2Zmc2V0LFxuICAgIHRyYWNrTGVhcFxuICB9ID0gdXNlU2xpZGVyKF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCB7XG4gICAgcmVmXG4gIH0pKTtcbiAgb3duZXJTdGF0ZS5tYXJrZWQgPSBtYXJrcy5sZW5ndGggPiAwICYmIG1hcmtzLnNvbWUobWFyayA9PiBtYXJrLmxhYmVsKTtcbiAgb3duZXJTdGF0ZS5kcmFnZ2luZyA9IGRyYWdnaW5nO1xuICBjb25zdCBSb290ID0gKF9yZWYgPSBjb21wb25lbnQgIT0gbnVsbCA/IGNvbXBvbmVudCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiAnc3Bhbic7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoUm9vdCwgX2V4dGVuZHMoe30sIG90aGVyLCBjb21wb25lbnRzUHJvcHMucm9vdCksIG93bmVyU3RhdGUpO1xuICBjb25zdCBSYWlsID0gKF9jb21wb25lbnRzJFJhaWwgPSBjb21wb25lbnRzLlJhaWwpICE9IG51bGwgPyBfY29tcG9uZW50cyRSYWlsIDogJ3NwYW4nO1xuICBjb25zdCByYWlsUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKFJhaWwsIGNvbXBvbmVudHNQcm9wcy5yYWlsLCBvd25lclN0YXRlKTtcbiAgY29uc3QgVHJhY2sgPSAoX2NvbXBvbmVudHMkVHJhY2sgPSBjb21wb25lbnRzLlRyYWNrKSAhPSBudWxsID8gX2NvbXBvbmVudHMkVHJhY2sgOiAnc3Bhbic7XG4gIGNvbnN0IHRyYWNrUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKFRyYWNrLCBjb21wb25lbnRzUHJvcHMudHJhY2ssIG93bmVyU3RhdGUpO1xuXG4gIGNvbnN0IHRyYWNrU3R5bGUgPSBfZXh0ZW5kcyh7fSwgYXhpc1Byb3BzW2F4aXNdLm9mZnNldCh0cmFja09mZnNldCksIGF4aXNQcm9wc1theGlzXS5sZWFwKHRyYWNrTGVhcCkpO1xuXG4gIGNvbnN0IFRodW1iID0gKF9jb21wb25lbnRzJFRodW1iID0gY29tcG9uZW50cy5UaHVtYikgIT0gbnVsbCA/IF9jb21wb25lbnRzJFRodW1iIDogJ3NwYW4nO1xuICBjb25zdCB0aHVtYlByb3BzID0gYXBwZW5kT3duZXJTdGF0ZShUaHVtYiwgY29tcG9uZW50c1Byb3BzLnRodW1iLCBvd25lclN0YXRlKTtcbiAgY29uc3QgVmFsdWVMYWJlbCA9IChfY29tcG9uZW50cyRWYWx1ZUxhYmUgPSBjb21wb25lbnRzLlZhbHVlTGFiZWwpICE9IG51bGwgPyBfY29tcG9uZW50cyRWYWx1ZUxhYmUgOiBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQ7XG4gIGNvbnN0IHZhbHVlTGFiZWxQcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoVmFsdWVMYWJlbCwgY29tcG9uZW50c1Byb3BzLnZhbHVlTGFiZWwsIG93bmVyU3RhdGUpO1xuICBjb25zdCBNYXJrID0gKF9jb21wb25lbnRzJE1hcmsgPSBjb21wb25lbnRzLk1hcmspICE9IG51bGwgPyBfY29tcG9uZW50cyRNYXJrIDogJ3NwYW4nO1xuICBjb25zdCBtYXJrUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKE1hcmssIGNvbXBvbmVudHNQcm9wcy5tYXJrLCBvd25lclN0YXRlKTtcbiAgY29uc3QgTWFya0xhYmVsID0gKF9jb21wb25lbnRzJE1hcmtMYWJlbCA9IGNvbXBvbmVudHMuTWFya0xhYmVsKSAhPSBudWxsID8gX2NvbXBvbmVudHMkTWFya0xhYmVsIDogJ3NwYW4nO1xuICBjb25zdCBtYXJrTGFiZWxQcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoTWFya0xhYmVsLCBjb21wb25lbnRzUHJvcHMubWFya0xhYmVsLCBvd25lclN0YXRlKTtcbiAgY29uc3QgSW5wdXQgPSBjb21wb25lbnRzLklucHV0IHx8ICdpbnB1dCc7XG4gIGNvbnN0IGlucHV0UHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKElucHV0LCBjb21wb25lbnRzUHJvcHMuaW5wdXQsIG93bmVyU3RhdGUpO1xuICBjb25zdCBoaWRkZW5JbnB1dFByb3BzID0gZ2V0SGlkZGVuSW5wdXRQcm9wcygpO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgZ2V0Um9vdFByb3BzKHtcbiAgICBvbk1vdXNlRG93blxuICB9KSwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHJvb3RQcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSksXG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChSYWlsLCBfZXh0ZW5kcyh7fSwgcmFpbFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yYWlsLCByYWlsUHJvcHMuY2xhc3NOYW1lKVxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goVHJhY2ssIF9leHRlbmRzKHt9LCB0cmFja1Byb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy50cmFjaywgdHJhY2tQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCB0cmFja1N0eWxlLCB0cmFja1Byb3BzLnN0eWxlKVxuICAgIH0pKSwgbWFya3MubWFwKChtYXJrLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgcGVyY2VudCA9IHZhbHVlVG9QZXJjZW50KG1hcmsudmFsdWUsIG1pbiwgbWF4KTtcbiAgICAgIGNvbnN0IHN0eWxlID0gYXhpc1Byb3BzW2F4aXNdLm9mZnNldChwZXJjZW50KTtcbiAgICAgIGxldCBtYXJrQWN0aXZlO1xuXG4gICAgICBpZiAodHJhY2sgPT09IGZhbHNlKSB7XG4gICAgICAgIG1hcmtBY3RpdmUgPSB2YWx1ZXMuaW5kZXhPZihtYXJrLnZhbHVlKSAhPT0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXJrQWN0aXZlID0gdHJhY2sgPT09ICdub3JtYWwnICYmIChyYW5nZSA/IG1hcmsudmFsdWUgPj0gdmFsdWVzWzBdICYmIG1hcmsudmFsdWUgPD0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXSA6IG1hcmsudmFsdWUgPD0gdmFsdWVzWzBdKSB8fCB0cmFjayA9PT0gJ2ludmVydGVkJyAmJiAocmFuZ2UgPyBtYXJrLnZhbHVlIDw9IHZhbHVlc1swXSB8fCBtYXJrLnZhbHVlID49IHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0gOiBtYXJrLnZhbHVlID49IHZhbHVlc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChNYXJrLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGluZGV4XG4gICAgICAgIH0sIG1hcmtQcm9wcywgIWlzSG9zdENvbXBvbmVudChNYXJrKSAmJiB7XG4gICAgICAgICAgbWFya0FjdGl2ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZSwgbWFya1Byb3BzLnN0eWxlKSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5tYXJrLCBtYXJrUHJvcHMuY2xhc3NOYW1lLCBtYXJrQWN0aXZlICYmIGNsYXNzZXMubWFya0FjdGl2ZSlcbiAgICAgICAgfSkpLCBtYXJrLmxhYmVsICE9IG51bGwgPyAvKiNfX1BVUkVfXyovX2pzeChNYXJrTGFiZWwsIF9leHRlbmRzKHtcbiAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGluZGV4XG4gICAgICAgIH0sIG1hcmtMYWJlbFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KE1hcmtMYWJlbCkgJiYge1xuICAgICAgICAgIG1hcmtMYWJlbEFjdGl2ZTogbWFya0FjdGl2ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZSwgbWFya0xhYmVsUHJvcHMuc3R5bGUpLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLm1hcmtMYWJlbCwgbWFya0xhYmVsUHJvcHMuY2xhc3NOYW1lLCBtYXJrQWN0aXZlICYmIGNsYXNzZXMubWFya0xhYmVsQWN0aXZlKSxcbiAgICAgICAgICBjaGlsZHJlbjogbWFyay5sYWJlbFxuICAgICAgICB9KSkgOiBudWxsXVxuICAgICAgfSwgbWFyay52YWx1ZSk7XG4gICAgfSksIHZhbHVlcy5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgcGVyY2VudCA9IHZhbHVlVG9QZXJjZW50KHZhbHVlLCBtaW4sIG1heCk7XG4gICAgICBjb25zdCBzdHlsZSA9IGF4aXNQcm9wc1theGlzXS5vZmZzZXQocGVyY2VudCk7XG4gICAgICBjb25zdCBWYWx1ZUxhYmVsQ29tcG9uZW50ID0gdmFsdWVMYWJlbERpc3BsYXkgPT09ICdvZmYnID8gRm9yd2FyZCA6IFZhbHVlTGFiZWw7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFZhbHVlTGFiZWxDb21wb25lbnQsIF9leHRlbmRzKHt9LCAhaXNIb3N0Q29tcG9uZW50KFZhbHVlTGFiZWxDb21wb25lbnQpICYmIHtcbiAgICAgICAgICB2YWx1ZUxhYmVsRm9ybWF0LFxuICAgICAgICAgIHZhbHVlTGFiZWxEaXNwbGF5LFxuICAgICAgICAgIHZhbHVlOiB0eXBlb2YgdmFsdWVMYWJlbEZvcm1hdCA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlTGFiZWxGb3JtYXQoc2NhbGUodmFsdWUpLCBpbmRleCkgOiB2YWx1ZUxhYmVsRm9ybWF0LFxuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIG9wZW46IG9wZW4gPT09IGluZGV4IHx8IGFjdGl2ZSA9PT0gaW5kZXggfHwgdmFsdWVMYWJlbERpc3BsYXkgPT09ICdvbicsXG4gICAgICAgICAgZGlzYWJsZWRcbiAgICAgICAgfSwgdmFsdWVMYWJlbFByb3BzLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMudmFsdWVMYWJlbCwgdmFsdWVMYWJlbFByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRodW1iLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBcImRhdGEtaW5kZXhcIjogaW5kZXhcbiAgICAgICAgICB9LCB0aHVtYlByb3BzLCBnZXRUaHVtYlByb3BzKCksIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnRodW1iLCB0aHVtYlByb3BzLmNsYXNzTmFtZSwgYWN0aXZlID09PSBpbmRleCAmJiBjbGFzc2VzLmFjdGl2ZSwgZm9jdXNWaXNpYmxlID09PSBpbmRleCAmJiBjbGFzc2VzLmZvY3VzVmlzaWJsZSlcbiAgICAgICAgICB9LCAhaXNIb3N0Q29tcG9uZW50KFRodW1iKSAmJiB7XG4gICAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgdGh1bWJQcm9wcy5vd25lclN0YXRlKVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGUsIHtcbiAgICAgICAgICAgICAgcG9pbnRlckV2ZW50czogZGlzYWJsZVN3YXAgJiYgYWN0aXZlICE9PSBpbmRleCA/ICdub25lJyA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSwgdGh1bWJQcm9wcy5zdHlsZSksXG4gICAgICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goSW5wdXQsIF9leHRlbmRzKHt9LCBoaWRkZW5JbnB1dFByb3BzLCB7XG4gICAgICAgICAgICAgIFwiZGF0YS1pbmRleFwiOiBpbmRleCxcbiAgICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGdldEFyaWFMYWJlbCA/IGdldEFyaWFMYWJlbChpbmRleCkgOiBhcmlhTGFiZWwsXG4gICAgICAgICAgICAgIFwiYXJpYS12YWx1ZW5vd1wiOiBzY2FsZSh2YWx1ZSksXG4gICAgICAgICAgICAgIFwiYXJpYS12YWx1ZXRleHRcIjogZ2V0QXJpYVZhbHVlVGV4dCA/IGdldEFyaWFWYWx1ZVRleHQoc2NhbGUodmFsdWUpLCBpbmRleCkgOiBhcmlhVmFsdWV0ZXh0LFxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVzW2luZGV4XVxuICAgICAgICAgICAgfSwgIWlzSG9zdENvbXBvbmVudChJbnB1dCkgJiYge1xuICAgICAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgaW5wdXRQcm9wcy5vd25lclN0YXRlKVxuICAgICAgICAgICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIGhpZGRlbklucHV0UHJvcHMuc3R5bGUsIGlucHV0UHJvcHMuc3R5bGUpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSkpXG4gICAgICB9LCBpbmRleCk7XG4gICAgfSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyVW5zdHlsZWQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgc2xpZGVyLlxuICAgKi9cbiAgJ2FyaWEtbGFiZWwnOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuc3RyaW5nLCBwcm9wcyA9PiB7XG4gICAgY29uc3QgcmFuZ2UgPSBBcnJheS5pc0FycmF5KHByb3BzLnZhbHVlIHx8IHByb3BzLmRlZmF1bHRWYWx1ZSk7XG5cbiAgICBpZiAocmFuZ2UgJiYgcHJvcHNbJ2FyaWEtbGFiZWwnXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgYGdldEFyaWFMYWJlbGAgcHJvcCBpbnN0ZWFkIG9mIGBhcmlhLWxhYmVsYCB3aGVuIHVzaW5nIGEgcmFuZ2Ugc2xpZGVyLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBlbGVtZW50IGNvbnRhaW5pbmcgYSBsYWJlbCBmb3IgdGhlIHNsaWRlci5cbiAgICovXG4gICdhcmlhLWxhYmVsbGVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKi9cbiAgJ2FyaWEtdmFsdWV0ZXh0JzogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLnN0cmluZywgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHJhbmdlID0gQXJyYXkuaXNBcnJheShwcm9wcy52YWx1ZSB8fCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuXG4gICAgaWYgKHJhbmdlICYmIHByb3BzWydhcmlhLXZhbHVldGV4dCddICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogWW91IG5lZWQgdG8gdXNlIHRoZSBgZ2V0QXJpYVZhbHVlVGV4dGAgcHJvcCBpbnN0ZWFkIG9mIGBhcmlhLXZhbHVldGV4dGAgd2hlbiB1c2luZyBhIHJhbmdlIHNsaWRlci4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgU2xpZGVyLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIE1hcms6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBNYXJrTGFiZWw6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSYWlsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFRodW1iOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgVHJhY2s6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBWYWx1ZUxhYmVsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBTbGlkZXIuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWFyazogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtYXJrTGFiZWw6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcmFpbDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRodW1iOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRyYWNrOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHZhbHVlTGFiZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgICAgIH0pLFxuICAgICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICAgIHZhbHVlTGFiZWxEaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ29mZicsICdvbiddKVxuICAgIH0pXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBhY3RpdmUgdGh1bWIgZG9lc24ndCBzd2FwIHdoZW4gbW92aW5nIHBvaW50ZXIgb3ZlciBhIHRodW1iIHdoaWxlIGRyYWdnaW5nIGFub3RoZXIgdGh1bWIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU3dhcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFjY2VwdHMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlIHRoYXQgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IG5hbWUgZm9yIHRoZSB0aHVtYiBsYWJlbHMgb2YgdGhlIHNsaWRlci5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgdGh1bWIgbGFiZWwncyBpbmRleCB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRBcmlhTGFiZWw6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBY2NlcHRzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBUaGlzIGlzIGltcG9ydGFudCBmb3Igc2NyZWVuIHJlYWRlciB1c2Vycy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB0aHVtYiBsYWJlbCdzIHZhbHVlIHRvIGZvcm1hdC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSB0aHVtYiBsYWJlbCdzIGluZGV4IHRvIGZvcm1hdC5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldEFyaWFWYWx1ZVRleHQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdGhlbWUgY29udGV4dCBoYXMgcnRsIGRpcmVjdGlvbi4gSXQgaXMgc2V0IGF1dG9tYXRpY2FsbHkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpc1J0bDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE1hcmtzIGluZGljYXRlIHByZWRldGVybWluZWQgdmFsdWVzIHRvIHdoaWNoIHRoZSB1c2VyIGNhbiBtb3ZlIHRoZSBzbGlkZXIuXG4gICAqIElmIGB0cnVlYCB0aGUgbWFya3MgYXJlIHNwYWNlZCBhY2NvcmRpbmcgdGhlIHZhbHVlIG9mIHRoZSBgc3RlcGAgcHJvcC5cbiAgICogSWYgYW4gYXJyYXksIGl0IHNob3VsZCBjb250YWluIG9iamVjdHMgd2l0aCBgdmFsdWVgIGFuZCBhbiBvcHRpb25hbCBgbGFiZWxgIGtleXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtYXJrczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSksIFByb3BUeXBlcy5ib29sXSksXG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGFsbG93ZWQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogU2hvdWxkIG5vdCBiZSBlcXVhbCB0byBtaW4uXG4gICAqIEBkZWZhdWx0IDEwMFxuICAgKi9cbiAgbWF4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBhbGxvd2VkIHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIFNob3VsZCBub3QgYmUgZXF1YWwgdG8gbWF4LlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBtaW46IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBzbGlkZXIncyB2YWx1ZSBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoYW55KS5cbiAgICogKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50IG5vdCBhIGNoYW5nZSBldmVudC5cbiAgICogQHBhcmFtIHtudW1iZXIgfCBudW1iZXJbXX0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGFjdGl2ZVRodW1iIEluZGV4IG9mIHRoZSBjdXJyZW50bHkgbW92ZWQgdGh1bWIuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgYG1vdXNldXBgIGlzIHRyaWdnZXJlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudCB8IEV2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay4gKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50IG5vdCBhIGNoYW5nZSBldmVudC5cbiAgICogQHBhcmFtIHtudW1iZXIgfCBudW1iZXJbXX0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cbiAgICovXG4gIG9uQ2hhbmdlQ29tbWl0dGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG9yaWVudGF0aW9uLlxuICAgKiBAZGVmYXVsdCAnaG9yaXpvbnRhbCdcbiAgICovXG4gIG9yaWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLFxuXG4gIC8qKlxuICAgKiBBIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uLCB0byBjaGFuZ2UgdGhlIHNjYWxlIG9mIHRoZSBzbGlkZXIuXG4gICAqIEBkZWZhdWx0ICh4KSA9PiB4XG4gICAqL1xuICBzY2FsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBncmFudWxhcml0eSB3aXRoIHdoaWNoIHRoZSBzbGlkZXIgY2FuIHN0ZXAgdGhyb3VnaCB2YWx1ZXMuIChBIFwiZGlzY3JldGVcIiBzbGlkZXIuKVxuICAgKiBUaGUgYG1pbmAgcHJvcCBzZXJ2ZXMgYXMgdGhlIG9yaWdpbiBmb3IgdGhlIHZhbGlkIHZhbHVlcy5cbiAgICogV2UgcmVjb21tZW5kIChtYXggLSBtaW4pIHRvIGJlIGV2ZW5seSBkaXZpc2libGUgYnkgdGhlIHN0ZXAuXG4gICAqXG4gICAqIFdoZW4gc3RlcCBpcyBgbnVsbGAsIHRoZSB0aHVtYiBjYW4gb25seSBiZSBzbGlkIG9udG8gbWFya3MgcHJvdmlkZWQgd2l0aCB0aGUgYG1hcmtzYCBwcm9wLlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBzdGVwOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUYWIgaW5kZXggYXR0cmlidXRlIG9mIHRoZSBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB0cmFjayBwcmVzZW50YXRpb246XG4gICAqXG4gICAqIC0gYG5vcm1hbGAgdGhlIHRyYWNrIHdpbGwgcmVuZGVyIGEgYmFyIHJlcHJlc2VudGluZyB0aGUgc2xpZGVyIHZhbHVlLlxuICAgKiAtIGBpbnZlcnRlZGAgdGhlIHRyYWNrIHdpbGwgcmVuZGVyIGEgYmFyIHJlcHJlc2VudGluZyB0aGUgcmVtYWluaW5nIHNsaWRlciB2YWx1ZS5cbiAgICogLSBgZmFsc2VgIHRoZSB0cmFjayB3aWxsIHJlbmRlciB3aXRob3V0IGEgYmFyLlxuICAgKiBAZGVmYXVsdCAnbm9ybWFsJ1xuICAgKi9cbiAgdHJhY2s6IFByb3BUeXBlcy5vbmVPZihbJ2ludmVydGVkJywgJ25vcm1hbCcsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBGb3IgcmFuZ2VkIHNsaWRlcnMsIHByb3ZpZGUgYW4gYXJyYXkgd2l0aCB0d28gdmFsdWVzLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZW4gdGhlIHZhbHVlIGxhYmVsIGlzIGRpc3BsYXllZDpcbiAgICpcbiAgICogLSBgYXV0b2AgdGhlIHZhbHVlIGxhYmVsIHdpbGwgZGlzcGxheSB3aGVuIHRoZSB0aHVtYiBpcyBob3ZlcmVkIG9yIGZvY3VzZWQuXG4gICAqIC0gYG9uYCB3aWxsIGRpc3BsYXkgcGVyc2lzdGVudGx5LlxuICAgKiAtIGBvZmZgIHdpbGwgbmV2ZXIgZGlzcGxheS5cbiAgICogQGRlZmF1bHQgJ29mZidcbiAgICovXG4gIHZhbHVlTGFiZWxEaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ29mZicsICdvbiddKSxcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBmdW5jdGlvbiB0aGUgdmFsdWUgbGFiZWwncyB2YWx1ZS5cbiAgICpcbiAgICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCBpdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZTpcbiAgICpcbiAgICogLSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgbGFiZWwncyB2YWx1ZSB0byBmb3JtYXRcbiAgICogLSB7bnVtYmVyfSBpbmRleCBUaGUgdmFsdWUgbGFiZWwncyBpbmRleCB0byBmb3JtYXRcbiAgICogQGRlZmF1bHQgKHgpID0+IHhcbiAgICovXG4gIHZhbHVlTGFiZWxGb3JtYXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZXJVbnN0eWxlZDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUaGVtZSBhcyB1c2VUaGVtZVN5c3RlbSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWVTeXN0ZW0oZGVmYXVsdFRoZW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCB7IGlzSG9zdENvbXBvbmVudCB9IGZyb20gJ0BtdWkvYmFzZSc7XG5cbmNvbnN0IHNob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcyA9IFNsb3QgPT4ge1xuICByZXR1cm4gIVNsb3QgfHwgIWlzSG9zdENvbXBvbmVudChTbG90KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50XCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImNvbG9yXCIsIFwic2l6ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBTbGlkZXJVbnN0eWxlZCwgeyBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQsIHNsaWRlclVuc3R5bGVkQ2xhc3NlcywgZ2V0U2xpZGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnQG11aS9iYXNlL1NsaWRlclVuc3R5bGVkJztcbmltcG9ydCB7IGFscGhhLCBsaWdodGVuLCBkYXJrZW4gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkLCB7IHNsb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzIGZyb20gJy4uL3V0aWxzL3Nob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgY29uc3Qgc2xpZGVyQ2xhc3NlcyA9IF9leHRlbmRzKHt9LCBzbGlkZXJVbnN0eWxlZENsYXNzZXMsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNsaWRlcicsIFsnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ3RodW1iQ29sb3JQcmltYXJ5JywgJ3RodW1iQ29sb3JTZWNvbmRhcnknLCAnc2l6ZVNtYWxsJywgJ3RodW1iU2l6ZVNtYWxsJ10pKTtcbmNvbnN0IFNsaWRlclJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3QgbWFya3MgPSBvd25lclN0YXRlLm1hcmtzUHJvcCA9PT0gdHJ1ZSAmJiBvd25lclN0YXRlLnN0ZXAgIT09IG51bGwgPyBbLi4uQXJyYXkoTWF0aC5mbG9vcigob3duZXJTdGF0ZS5tYXggLSBvd25lclN0YXRlLm1pbikgLyBvd25lclN0YXRlLnN0ZXApICsgMSldLm1hcCgoXywgaW5kZXgpID0+ICh7XG4gICAgICB2YWx1ZTogb3duZXJTdGF0ZS5taW4gKyBvd25lclN0YXRlLnN0ZXAgKiBpbmRleFxuICAgIH0pKSA6IG93bmVyU3RhdGUubWFya3NQcm9wIHx8IFtdO1xuICAgIGNvbnN0IG1hcmtlZCA9IG1hcmtzLmxlbmd0aCA+IDAgJiYgbWFya3Muc29tZShtYXJrID0+IG1hcmsubGFiZWwpO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIG93bmVyU3RhdGUuc2l6ZSAhPT0gJ21lZGl1bScgJiYgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIG1hcmtlZCAmJiBzdHlsZXMubWFya2VkLCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHN0eWxlcy52ZXJ0aWNhbCwgb3duZXJTdGF0ZS50cmFjayA9PT0gJ2ludmVydGVkJyAmJiBzdHlsZXMudHJhY2tJbnZlcnRlZCwgb3duZXJTdGF0ZS50cmFjayA9PT0gZmFsc2UgJiYgc3R5bGVzLnRyYWNrRmFsc2VdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBib3JkZXJSYWRpdXM6IDEyLFxuICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHRvdWNoQWN0aW9uOiAnbm9uZScsXG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgX2V4dGVuZHMoe1xuICBoZWlnaHQ6IDQsXG4gIHdpZHRoOiAnMTAwJScsXG4gIHBhZGRpbmc6ICcxM3B4IDAnLFxuICAvLyBUaGUgcHJpbWFyeSBpbnB1dCBtZWNoYW5pc20gb2YgdGhlIGRldmljZSBpbmNsdWRlcyBhIHBvaW50aW5nIGRldmljZSBvZiBsaW1pdGVkIGFjY3VyYWN5LlxuICAnQG1lZGlhIChwb2ludGVyOiBjb2Fyc2UpJzoge1xuICAgIC8vIFJlYWNoIDQycHggdG91Y2ggdGFyZ2V0LCBhYm91dCB+OG1tIG9uIHNjcmVlbi5cbiAgICBwYWRkaW5nOiAnMjBweCAwJ1xuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBoZWlnaHQ6IDJcbn0sIG93bmVyU3RhdGUubWFya2VkICYmIHtcbiAgbWFyZ2luQm90dG9tOiAyMFxufSksIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgX2V4dGVuZHMoe1xuICBoZWlnaHQ6ICcxMDAlJyxcbiAgd2lkdGg6IDQsXG4gIHBhZGRpbmc6ICcwIDEzcHgnLFxuICAvLyBUaGUgcHJpbWFyeSBpbnB1dCBtZWNoYW5pc20gb2YgdGhlIGRldmljZSBpbmNsdWRlcyBhIHBvaW50aW5nIGRldmljZSBvZiBsaW1pdGVkIGFjY3VyYWN5LlxuICAnQG1lZGlhIChwb2ludGVyOiBjb2Fyc2UpJzoge1xuICAgIC8vIFJlYWNoIDQycHggdG91Y2ggdGFyZ2V0LCBhYm91dCB+OG1tIG9uIHNjcmVlbi5cbiAgICBwYWRkaW5nOiAnMCAyMHB4J1xuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICB3aWR0aDogMlxufSwgb3duZXJTdGF0ZS5tYXJrZWQgJiYge1xuICBtYXJnaW5SaWdodDogNDRcbn0pLCB7XG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgfSxcbiAgW2AmLiR7c2xpZGVyQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF1cbiAgfSxcbiAgW2AmLiR7c2xpZGVyQ2xhc3Nlcy5kcmFnZ2luZ31gXToge1xuICAgIFtgJiAuJHtzbGlkZXJDbGFzc2VzLnRodW1ifSwgJiAuJHtzbGlkZXJDbGFzc2VzLnRyYWNrfWBdOiB7XG4gICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICB9XG4gIH1cbn0pKTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlclJvb3QucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcbmV4cG9ydCB7IFNsaWRlclJvb3QgfTtcbmNvbnN0IFNsaWRlclJhaWwgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnUmFpbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJhaWxcbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICBvcGFjaXR5OiAwLjM4XG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICdpbmhlcml0JyxcbiAgdG9wOiAnNTAlJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICBoZWlnaHQ6ICcxMDAlJyxcbiAgd2lkdGg6ICdpbmhlcml0JyxcbiAgbGVmdDogJzUwJScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknXG59LCBvd25lclN0YXRlLnRyYWNrID09PSAnaW52ZXJ0ZWQnICYmIHtcbiAgb3BhY2l0eTogMVxufSkpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyUmFpbC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgU2xpZGVyUmFpbCB9O1xuY29uc3QgU2xpZGVyVHJhY2sgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnVHJhY2snLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy50cmFja1xufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgY29sb3IgPSAvLyBTYW1lIGxvZ2ljIGFzIHRoZSBMaW5lYXJQcm9ncmVzcyB0cmFjayBjb2xvclxuICB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBsaWdodGVuKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC42MikgOiBkYXJrZW4odGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjUpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkIGN1cnJlbnRDb2xvcicsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydsZWZ0JywgJ3dpZHRoJywgJ2JvdHRvbScsICdoZWlnaHQnXSwge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgfSlcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBib3JkZXI6ICdub25lJ1xuICB9LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICAgIGhlaWdodDogJ2luaGVyaXQnLFxuICAgIHRvcDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbiAgfSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gICAgd2lkdGg6ICdpbmhlcml0JyxcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJ1xuICB9LCBvd25lclN0YXRlLnRyYWNrID09PSBmYWxzZSAmJiB7XG4gICAgZGlzcGxheTogJ25vbmUnXG4gIH0sIG93bmVyU3RhdGUudHJhY2sgPT09ICdpbnZlcnRlZCcgJiYge1xuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgYm9yZGVyQ29sb3I6IGNvbG9yXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXJUcmFjay5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgU2xpZGVyVHJhY2sgfTtcbmNvbnN0IFNsaWRlclRodW1iID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpU2xpZGVyJyxcbiAgc2xvdDogJ1RodW1iJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy50aHVtYiwgc3R5bGVzW2B0aHVtYkNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLnNpemUgIT09ICdtZWRpdW0nICYmIHN0eWxlc1tgdGh1bWJTaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6IDIwLFxuICBoZWlnaHQ6IDIwLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgb3V0bGluZTogMCxcbiAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydib3gtc2hhZG93JywgJ2xlZnQnLCAnYm90dG9tJ10sIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfSlcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHdpZHRoOiAxMixcbiAgaGVpZ2h0OiAxMlxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgdG9wOiAnNTAlJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJ1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGxlZnQ6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgNTAlKSdcbn0sIHtcbiAgJyY6YmVmb3JlJzogX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1syXVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIGJveFNoYWRvdzogJ25vbmUnXG4gIH0pLFxuICAnJjo6YWZ0ZXInOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgLy8gNDJweCBpcyB0aGUgaGl0IHRhcmdldFxuICAgIHdpZHRoOiA0MixcbiAgICBoZWlnaHQ6IDQyLFxuICAgIHRvcDogJzUwJScsXG4gICAgbGVmdDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJ1xuICB9LFxuICBbYCY6aG92ZXIsICYuJHtzbGlkZXJDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJveFNoYWRvdzogYDBweCAwcHggMHB4IDhweCAke2FscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC4xNil9YCxcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgIH1cbiAgfSxcbiAgW2AmLiR7c2xpZGVyQ2xhc3Nlcy5hY3RpdmV9YF06IHtcbiAgICBib3hTaGFkb3c6IGAwcHggMHB4IDBweCAxNHB4ICR7YWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjE2KX1gXG4gIH0sXG4gIFtgJi4ke3NsaWRlckNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgfVxuICB9XG59KSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXJUaHVtYi5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgU2xpZGVyVGh1bWIgfTtcbmNvbnN0IFNsaWRlclZhbHVlTGFiZWwgPSBzdHlsZWQoU2xpZGVyVmFsdWVMYWJlbFVuc3R5bGVkLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnVmFsdWVMYWJlbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnZhbHVlTGFiZWxcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIFtgJi4ke3NsaWRlckNsYXNzZXMudmFsdWVMYWJlbE9wZW59YF06IHtcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0xMDAlKSBzY2FsZSgxKSdcbiAgfSxcbiAgekluZGV4OiAxLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBmb250V2VpZ2h0OiA1MDAsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ3RyYW5zZm9ybSddLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pLFxuICB0b3A6IC0xMCxcbiAgdHJhbnNmb3JtT3JpZ2luOiAnYm90dG9tIGNlbnRlcicsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTEwMCUpIHNjYWxlKDApJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzYwMF0sXG4gIGJvcmRlclJhZGl1czogMixcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHBhZGRpbmc6ICcwLjI1cmVtIDAuNzVyZW0nXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgcGFkZGluZzogJzAuMjVyZW0gMC41cmVtJ1xufSwge1xuICAnJjpiZWZvcmUnOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIHdpZHRoOiA4LFxuICAgIGhlaWdodDogOCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIDUwJSkgcm90YXRlKDQ1ZGVnKScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnaW5oZXJpdCdcbiAgfVxufSkpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyVmFsdWVMYWJlbC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgU2xpZGVyVmFsdWVMYWJlbCB9O1xuY29uc3QgU2xpZGVyTWFyayA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVNsaWRlcicsXG4gIHNsb3Q6ICdNYXJrJyxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gc2xvdFNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdtYXJrQWN0aXZlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubWFya1xufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGUsXG4gIG1hcmtBY3RpdmVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHdpZHRoOiAyLFxuICBoZWlnaHQ6IDIsXG4gIGJvcmRlclJhZGl1czogMSxcbiAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJ1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgdG9wOiAnNTAlJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC0xcHgsIC01MCUpJ1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGxlZnQ6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgMXB4KSdcbn0sIG1hcmtBY3RpdmUgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgb3BhY2l0eTogMC44XG59KSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXJNYXJrLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBTbGlkZXJNYXJrIH07XG5jb25zdCBTbGlkZXJNYXJrTGFiZWwgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnTWFya0xhYmVsJyxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gc2xvdFNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdtYXJrTGFiZWxBY3RpdmUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5tYXJrTGFiZWxcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlLFxuICBtYXJrTGFiZWxBY3RpdmVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gIHRvcDogMzAsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknLFxuICAnQG1lZGlhIChwb2ludGVyOiBjb2Fyc2UpJzoge1xuICAgIHRvcDogNDBcbiAgfVxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGxlZnQ6IDM2LFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDUwJSknLFxuICAnQG1lZGlhIChwb2ludGVyOiBjb2Fyc2UpJzoge1xuICAgIGxlZnQ6IDQ0XG4gIH1cbn0sIG1hcmtMYWJlbEFjdGl2ZSAmJiB7XG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxufSkpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyTWFya0xhYmVsLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBTbGlkZXJNYXJrTGFiZWwgfTtcblxuY29uc3QgZXh0ZW5kVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIHNpemUsXG4gICAgY2xhc3NlcyA9IHt9XG4gIH0gPSBvd25lclN0YXRlO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICByb290OiBjbHN4KGNsYXNzZXMucm9vdCwgZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCksIGNsYXNzZXNbYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSwgc2l6ZSAmJiBbZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWApLCBjbGFzc2VzW2BzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXSksXG4gICAgdGh1bWI6IGNsc3goY2xhc3Nlcy50aHVtYiwgZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKGB0aHVtYkNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gKSwgY2xhc3Nlc1tgdGh1bWJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sIHNpemUgJiYgW2dldFNsaWRlclV0aWxpdHlDbGFzcyhgdGh1bWJTaXplJHtjYXBpdGFsaXplKHNpemUpfWApLCBjbGFzc2VzW2B0aHVtYlNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF1dKVxuICB9KTtcbn07XG5cbmNvbnN0IFNsaWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNsaWRlcihpbnB1dFByb3BzLCByZWYpIHtcbiAgdmFyIF9jb21wb25lbnRzUHJvcHMkcm9vdCwgX2NvbXBvbmVudHNQcm9wcyR0aHVtLCBfY29tcG9uZW50c1Byb3BzJHRyYWMsIF9jb21wb25lbnRzUHJvcHMkdmFsdTtcblxuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpbnB1dFByb3BzLFxuICAgIG5hbWU6ICdNdWlTbGlkZXInXG4gIH0pO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGlzUnRsID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJztcblxuICBjb25zdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBjb21wb25lbnQgPSAnc3BhbicsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgIHNpemUgPSAnbWVkaXVtJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIHNpemVcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IGV4dGVuZFV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU2xpZGVyVW5zdHlsZWQsIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgIGlzUnRsOiBpc1J0bCxcbiAgICBjb21wb25lbnRzOiBfZXh0ZW5kcyh7XG4gICAgICBSb290OiBTbGlkZXJSb290LFxuICAgICAgUmFpbDogU2xpZGVyUmFpbCxcbiAgICAgIFRyYWNrOiBTbGlkZXJUcmFjayxcbiAgICAgIFRodW1iOiBTbGlkZXJUaHVtYixcbiAgICAgIFZhbHVlTGFiZWw6IFNsaWRlclZhbHVlTGFiZWwsXG4gICAgICBNYXJrOiBTbGlkZXJNYXJrLFxuICAgICAgTWFya0xhYmVsOiBTbGlkZXJNYXJrTGFiZWxcbiAgICB9LCBjb21wb25lbnRzKSxcbiAgICBjb21wb25lbnRzUHJvcHM6IF9leHRlbmRzKHt9LCBjb21wb25lbnRzUHJvcHMsIHtcbiAgICAgIHJvb3Q6IF9leHRlbmRzKHt9LCBjb21wb25lbnRzUHJvcHMucm9vdCwgc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzKGNvbXBvbmVudHMuUm9vdCkgJiYge1xuICAgICAgICBhczogY29tcG9uZW50LFxuICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkcm9vdCA9IGNvbXBvbmVudHNQcm9wcy5yb290KSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHNQcm9wcyRyb290Lm93bmVyU3RhdGUsIHtcbiAgICAgICAgICBjb2xvcixcbiAgICAgICAgICBzaXplXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICAgIHRodW1iOiBfZXh0ZW5kcyh7fSwgY29tcG9uZW50c1Byb3BzLnRodW1iLCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMoY29tcG9uZW50cy5UaHVtYikgJiYge1xuICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkdGh1bSA9IGNvbXBvbmVudHNQcm9wcy50aHVtYikgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb21wb25lbnRzUHJvcHMkdGh1bS5vd25lclN0YXRlLCB7XG4gICAgICAgICAgY29sb3IsXG4gICAgICAgICAgc2l6ZVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICB0cmFjazogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcy50cmFjaywgc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzKGNvbXBvbmVudHMuVHJhY2spICYmIHtcbiAgICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIChfY29tcG9uZW50c1Byb3BzJHRyYWMgPSBjb21wb25lbnRzUHJvcHMudHJhY2spID09IG51bGwgPyB2b2lkIDAgOiBfY29tcG9uZW50c1Byb3BzJHRyYWMub3duZXJTdGF0ZSwge1xuICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgIHNpemVcbiAgICAgICAgfSlcbiAgICAgIH0pLFxuICAgICAgdmFsdWVMYWJlbDogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcy52YWx1ZUxhYmVsLCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMoY29tcG9uZW50cy5WYWx1ZUxhYmVsKSAmJiB7XG4gICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCAoX2NvbXBvbmVudHNQcm9wcyR2YWx1ID0gY29tcG9uZW50c1Byb3BzLnZhbHVlTGFiZWwpID09IG51bGwgPyB2b2lkIDAgOiBfY29tcG9uZW50c1Byb3BzJHZhbHUub3duZXJTdGF0ZSwge1xuICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgIHNpemVcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSksXG4gICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICByZWY6IHJlZlxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlci5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBzbGlkZXIuXG4gICAqL1xuICAnYXJpYS1sYWJlbCc6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5zdHJpbmcsIHByb3BzID0+IHtcbiAgICBjb25zdCByYW5nZSA9IEFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUgfHwgcHJvcHMuZGVmYXVsdFZhbHVlKTtcblxuICAgIGlmIChyYW5nZSAmJiBwcm9wc1snYXJpYS1sYWJlbCddICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogWW91IG5lZWQgdG8gdXNlIHRoZSBgZ2V0QXJpYUxhYmVsYCBwcm9wIGluc3RlYWQgb2YgYGFyaWEtbGFiZWxgIHdoZW4gdXNpbmcgYSByYW5nZSBzbGlkZXIuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGVsZW1lbnQgY29udGFpbmluZyBhIGxhYmVsIGZvciB0aGUgc2xpZGVyLlxuICAgKi9cbiAgJ2FyaWEtbGFiZWxsZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEEgc3RyaW5nIHZhbHVlIHRoYXQgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IG5hbWUgZm9yIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqL1xuICAnYXJpYS12YWx1ZXRleHQnOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuc3RyaW5nLCBwcm9wcyA9PiB7XG4gICAgY29uc3QgcmFuZ2UgPSBBcnJheS5pc0FycmF5KHByb3BzLnZhbHVlIHx8IHByb3BzLmRlZmF1bHRWYWx1ZSk7XG5cbiAgICBpZiAocmFuZ2UgJiYgcHJvcHNbJ2FyaWEtdmFsdWV0ZXh0J10gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTVVJOiBZb3UgbmVlZCB0byB1c2UgdGhlIGBnZXRBcmlhVmFsdWVUZXh0YCBwcm9wIGluc3RlYWQgb2YgYGFyaWEtdmFsdWV0ZXh0YCB3aGVuIHVzaW5nIGEgcmFuZ2Ugc2xpZGVyLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFNsaWRlci5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBNYXJrOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgTWFya0xhYmVsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUmFpbDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBUaHVtYjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFRyYWNrOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgVmFsdWVMYWJlbDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgU2xpZGVyLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1hcms6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWFya0xhYmVsOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJhaWw6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0aHVtYjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0cmFjazogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB2YWx1ZUxhYmVsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gICAgICB9KSxcbiAgICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gICAgICB2YWx1ZUxhYmVsRGlzcGxheTogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdvZmYnLCAnb24nXSlcbiAgICB9KVxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYWN0aXZlIHRodW1iIGRvZXNuJ3Qgc3dhcCB3aGVuIG1vdmluZyBwb2ludGVyIG92ZXIgYSB0aHVtYiB3aGlsZSBkcmFnZ2luZyBhbm90aGVyIHRodW1iLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVN3YXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBY2NlcHRzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgdGh1bWIgbGFiZWxzIG9mIHRoZSBzbGlkZXIuXG4gICAqIFRoaXMgaXMgaW1wb3J0YW50IGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIHRodW1iIGxhYmVsJ3MgaW5kZXggdG8gZm9ybWF0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0QXJpYUxhYmVsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdGh1bWIgbGFiZWwncyB2YWx1ZSB0byBmb3JtYXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgdGh1bWIgbGFiZWwncyBpbmRleCB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRBcmlhVmFsdWVUZXh0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHRoZW1lIGNvbnRleHQgaGFzIHJ0bCBkaXJlY3Rpb24uIEl0IGlzIHNldCBhdXRvbWF0aWNhbGx5LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNSdGw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNYXJrcyBpbmRpY2F0ZSBwcmVkZXRlcm1pbmVkIHZhbHVlcyB0byB3aGljaCB0aGUgdXNlciBjYW4gbW92ZSB0aGUgc2xpZGVyLlxuICAgKiBJZiBgdHJ1ZWAgdGhlIG1hcmtzIGFyZSBzcGFjZWQgYWNjb3JkaW5nIHRoZSB2YWx1ZSBvZiB0aGUgYHN0ZXBgIHByb3AuXG4gICAqIElmIGFuIGFycmF5LCBpdCBzaG91bGQgY29udGFpbiBvYmplY3RzIHdpdGggYHZhbHVlYCBhbmQgYW4gb3B0aW9uYWwgYGxhYmVsYCBrZXlzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbWFya3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfSkpLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIFNob3VsZCBub3QgYmUgZXF1YWwgdG8gbWluLlxuICAgKiBAZGVmYXVsdCAxMDBcbiAgICovXG4gIG1heDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIG1pbmltdW0gYWxsb3dlZCB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBTaG91bGQgbm90IGJlIGVxdWFsIHRvIG1heC5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgbWluOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgc2xpZGVyJ3MgdmFsdWUgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqICoqV2FybmluZyoqOiBUaGlzIGlzIGEgZ2VuZXJpYyBldmVudCBub3QgYSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVtYmVyW119IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhY3RpdmVUaHVtYiBJbmRleCBvZiB0aGUgY3VycmVudGx5IG1vdmVkIHRodW1iLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGBtb3VzZXVwYCBpcyB0cmlnZ2VyZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnQgfCBFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suICoqV2FybmluZyoqOiBUaGlzIGlzIGEgZ2VuZXJpYyBldmVudCBub3QgYSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVtYmVyW119IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAqL1xuICBvbkNoYW5nZUNvbW1pdHRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgb3JpZW50YXRpb24uXG4gICAqIEBkZWZhdWx0ICdob3Jpem9udGFsJ1xuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG5cbiAgLyoqXG4gICAqIEEgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24sIHRvIGNoYW5nZSB0aGUgc2NhbGUgb2YgdGhlIHNsaWRlci5cbiAgICogQGRlZmF1bHQgKHgpID0+IHhcbiAgICovXG4gIHNjYWxlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHNsaWRlci5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bSddKSxcblxuICAvKipcbiAgICogVGhlIGdyYW51bGFyaXR5IHdpdGggd2hpY2ggdGhlIHNsaWRlciBjYW4gc3RlcCB0aHJvdWdoIHZhbHVlcy4gKEEgXCJkaXNjcmV0ZVwiIHNsaWRlci4pXG4gICAqIFRoZSBgbWluYCBwcm9wIHNlcnZlcyBhcyB0aGUgb3JpZ2luIGZvciB0aGUgdmFsaWQgdmFsdWVzLlxuICAgKiBXZSByZWNvbW1lbmQgKG1heCAtIG1pbikgdG8gYmUgZXZlbmx5IGRpdmlzaWJsZSBieSB0aGUgc3RlcC5cbiAgICpcbiAgICogV2hlbiBzdGVwIGlzIGBudWxsYCwgdGhlIHRodW1iIGNhbiBvbmx5IGJlIHNsaWQgb250byBtYXJrcyBwcm92aWRlZCB3aXRoIHRoZSBgbWFya3NgIHByb3AuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHN0ZXA6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGFiIGluZGV4IGF0dHJpYnV0ZSBvZiB0aGUgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgdHJhY2sgcHJlc2VudGF0aW9uOlxuICAgKlxuICAgKiAtIGBub3JtYWxgIHRoZSB0cmFjayB3aWxsIHJlbmRlciBhIGJhciByZXByZXNlbnRpbmcgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICogLSBgaW52ZXJ0ZWRgIHRoZSB0cmFjayB3aWxsIHJlbmRlciBhIGJhciByZXByZXNlbnRpbmcgdGhlIHJlbWFpbmluZyBzbGlkZXIgdmFsdWUuXG4gICAqIC0gYGZhbHNlYCB0aGUgdHJhY2sgd2lsbCByZW5kZXIgd2l0aG91dCBhIGJhci5cbiAgICogQGRlZmF1bHQgJ25vcm1hbCdcbiAgICovXG4gIHRyYWNrOiBQcm9wVHlwZXMub25lT2YoWydpbnZlcnRlZCcsICdub3JtYWwnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogRm9yIHJhbmdlZCBzbGlkZXJzLCBwcm92aWRlIGFuIGFycmF5IHdpdGggdHdvIHZhbHVlcy5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyKSwgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGVuIHRoZSB2YWx1ZSBsYWJlbCBpcyBkaXNwbGF5ZWQ6XG4gICAqXG4gICAqIC0gYGF1dG9gIHRoZSB2YWx1ZSBsYWJlbCB3aWxsIGRpc3BsYXkgd2hlbiB0aGUgdGh1bWIgaXMgaG92ZXJlZCBvciBmb2N1c2VkLlxuICAgKiAtIGBvbmAgd2lsbCBkaXNwbGF5IHBlcnNpc3RlbnRseS5cbiAgICogLSBgb2ZmYCB3aWxsIG5ldmVyIGRpc3BsYXkuXG4gICAqIEBkZWZhdWx0ICdvZmYnXG4gICAqL1xuICB2YWx1ZUxhYmVsRGlzcGxheTogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdvZmYnLCAnb24nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBmb3JtYXQgZnVuY3Rpb24gdGhlIHZhbHVlIGxhYmVsJ3MgdmFsdWUuXG4gICAqXG4gICAqIFdoZW4gYSBmdW5jdGlvbiBpcyBwcm92aWRlZCwgaXQgc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBzaWduYXR1cmU6XG4gICAqXG4gICAqIC0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIGxhYmVsJ3MgdmFsdWUgdG8gZm9ybWF0XG4gICAqIC0ge251bWJlcn0gaW5kZXggVGhlIHZhbHVlIGxhYmVsJ3MgaW5kZXggdG8gZm9ybWF0XG4gICAqIEBkZWZhdWx0ICh4KSA9PiB4XG4gICAqL1xuICB2YWx1ZUxhYmVsRm9ybWF0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2xpZGVyOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQm94IGZyb20gXCJAbXVpL21hdGVyaWFsL0JveFwiO1xuaW1wb3J0IFNsaWRlciBmcm9tIFwiQG11aS9tYXRlcmlhbC9TbGlkZXJcIjtcblxuY29uc3QgVGltZVJhbmdlID0gKHsgdXBkYXRlVGltZVJhbmdlIH0pID0+IHtcbiAgICBjb25zdCBbdmFsdWVzLCBzZXRWYWx1ZXNdID0gUmVhY3QudXNlU3RhdGUoWzAsIDE0NDBdKTtcblxuICAgIGZ1bmN0aW9uIHZhbHVldGV4dCh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCBuZXdOdW0pID0+IHtcbiAgICAgICAgLy9Db252ZXJ0IG1pbnV0ZXMgdG8gMjQgaHIgdGltZVxuICAgICAgICB2YXIgaG91cnMgPSBuZXdOdW1bMF0gLyA2MDtcbiAgICAgICAgdmFyIHJob3VycyA9IE1hdGguZmxvb3IoaG91cnMpO1xuICAgICAgICB2YXIgbWludXRlcyA9IChob3VycyAtIHJob3VycykgKiA2MDtcbiAgICAgICAgdmFyIHJtaW51dGVzID0gTWF0aC5yb3VuZChtaW51dGVzKTtcblxuICAgICAgICB2YXIgaG91cnMyID0gbmV3TnVtWzFdIC8gNjA7XG4gICAgICAgIHZhciByaG91cnMyID0gTWF0aC5mbG9vcihob3VyczIpO1xuICAgICAgICB2YXIgbWludXRlczIgPSAoaG91cnMyIC0gcmhvdXJzMikgKiA2MDtcbiAgICAgICAgdmFyIHJtaW51dGVzMiA9IE1hdGgucm91bmQobWludXRlczIpO1xuXG4gICAgICAgIC8vQWRkIGEgemVybyBpZiBuZWVkZWRcbiAgICAgICAgaWYgKHJtaW51dGVzIDwgMTApIHJtaW51dGVzID0gcm1pbnV0ZXMgKyBcIjBcIjtcbiAgICAgICAgaWYgKHJtaW51dGVzMiA8IDEwKSBybWludXRlczIgPSBybWludXRlczIgKyBcIjBcIjtcblxuICAgICAgICAvL0NvbnZlcnQgdG8gMTIgaG91clxuICAgICAgICB2YXIgQW1PclBtMSA9IHJob3VycyA+PSAxMiA/IFwiUE1cIiA6IFwiQU1cIjtcbiAgICAgICAgdmFyIEFtT3JQbTIgPSByaG91cnMyID49IDEyID8gXCJQTVwiIDogXCJBTVwiO1xuXG4gICAgICAgIHJob3VycyA9IHJob3VycyAlIDEyIHx8IDEyO1xuICAgICAgICByaG91cnMyID0gcmhvdXJzMiAlIDEyIHx8IDEyO1xuXG4gICAgICAgIC8vRm9ybWF0IHRpbWUgaW50byBhIHN0cmluZ1xuICAgICAgICB2YXIgdGltZTEgPSByaG91cnMgKyBcIjpcIiArIHJtaW51dGVzICsgQW1PclBtMTtcblxuICAgICAgICB2YXIgdGltZTIgPSByaG91cnMyICsgXCI6XCIgKyBybWludXRlczIgKyBBbU9yUG0yO1xuXG4gICAgICAgIC8vVXBkYXRlIHRoZSB0aW1lIHJhbmdlIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICBpZiAodGltZTIgPT09IFwiMTI6MDBQTVwiKSB7XG4gICAgICAgICAgICB0aW1lMiA9IFwiMTE6NDVQTVwiO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVRpbWVSYW5nZShbdGltZTEsIHRpbWUyXSk7XG4gICAgICAgIHNldFZhbHVlcyhuZXdOdW0pO1xuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgICAgPEJveCBzeD17eyB3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCI5MHB4XCIsIG92ZXJmbG93OiBcImhpZGRlblwiIH19PlxuICAgICAgICAgICAgPFNsaWRlclxuICAgICAgICAgICAgICAgIHN4PXt7IGhlaWdodDogXCI0MHB4XCIsIGNvbG9yOiBcInJnYmEoMTM5LCA3OSwgMTEsIDAuNjE2KVwiLCBvdmVyZmxvdzogXCJoaWRkZW5cIiB9fVxuICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXN9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICBzdGVwPXsxNX1cbiAgICAgICAgICAgICAgICBtaW49ezB9XG4gICAgICAgICAgICAgICAgbWF4PXsxNDQwfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRpbWVSYW5nZTtcbiIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJsYWJlbFwiLCBcIm5vdGNoZWRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBOb3RjaGVkT3V0bGluZVJvb3QgPSBzdHlsZWQoJ2ZpZWxkc2V0Jykoe1xuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogMCxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogLTUsXG4gIGxlZnQ6IDAsXG4gIG1hcmdpbjogMCxcbiAgcGFkZGluZzogJzAgOHB4JyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIG1pbldpZHRoOiAnMCUnXG59KTtcbmNvbnN0IE5vdGNoZWRPdXRsaW5lTGVnZW5kID0gc3R5bGVkKCdsZWdlbmQnLCB7XG4gIHNraXBTeDogdHJ1ZVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgZmxvYXQ6ICd1bnNldCdcbn0sIG93bmVyU3RhdGUubGFiZWwgPT09IHVuZGVmaW5lZCAmJiB7XG4gIHBhZGRpbmc6IDAsXG4gIGxpbmVIZWlnaHQ6ICcxMXB4JyxcbiAgLy8gc3luYyB3aXRoIGBoZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3dpZHRoJywge1xuICAgIGR1cmF0aW9uOiAxNTAsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICB9KVxufSwgb3duZXJTdGF0ZS5sYWJlbCAhPT0gdW5kZWZpbmVkICYmIF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgLy8gRml4IGNvbmZsaWN0IHdpdGggbm9ybWFsaXplLmNzcyBhbmQgc2FuaXRpemUuY3NzXG4gIHdpZHRoOiAnYXV0bycsXG4gIC8vIEZpeCBjb25mbGljdCB3aXRoIGJvb3RzdHJhcFxuICBwYWRkaW5nOiAwLFxuICBoZWlnaHQ6IDExLFxuICAvLyBzeW5jIHdpdGggYGxpbmVIZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICBmb250U2l6ZTogJzAuNzVlbScsXG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICBtYXhXaWR0aDogMC4wMSxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdtYXgtd2lkdGgnLCB7XG4gICAgZHVyYXRpb246IDUwLFxuICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgfSksXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAnJiA+IHNwYW4nOiB7XG4gICAgcGFkZGluZ0xlZnQ6IDUsXG4gICAgcGFkZGluZ1JpZ2h0OiA1LFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gIH1cbn0sIG93bmVyU3RhdGUubm90Y2hlZCAmJiB7XG4gIG1heFdpZHRoOiAnMTAwJScsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgIGR1cmF0aW9uOiAxMDAsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dCxcbiAgICBkZWxheTogNTBcbiAgfSlcbn0pKSk7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90Y2hlZE91dGxpbmUocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBsYWJlbCxcbiAgICBub3RjaGVkXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgbm90Y2hlZCxcbiAgICBsYWJlbFxuICB9KTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTm90Y2hlZE91dGxpbmVSb290LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTm90Y2hlZE91dGxpbmVMZWdlbmQsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogbGFiZWwgPyAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjaGlsZHJlbjogbGFiZWxcbiAgICAgIH0pIDpcbiAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgIC8vIG5vdHJhbnNsYXRlIG5lZWRlZCB3aGlsZSBHb29nbGUgVHJhbnNsYXRlIHdpbGwgbm90IGZpeCB6ZXJvLXdpZHRoIHNwYWNlIGlzc3VlXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gICAgICBfanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJub3RyYW5zbGF0ZVwiLFxuICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgIF9faHRtbDogJyYjODIwMzsnXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfSkpO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTm90Y2hlZE91dGxpbmUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5jb25zdCBGb3JtQ29udHJvbENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBGb3JtQ29udHJvbENvbnRleHQuZGlzcGxheU5hbWUgPSAnRm9ybUNvbnRyb2xDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xDb250ZXh0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2woKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gIHByb3BzLFxuICBzdGF0ZXMsXG4gIG11aUZvcm1Db250cm9sXG59KSB7XG4gIHJldHVybiBzdGF0ZXMucmVkdWNlKChhY2MsIHN0YXRlKSA9PiB7XG4gICAgYWNjW3N0YXRlXSA9IHByb3BzW3N0YXRlXTtcblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1tzdGF0ZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFjY1tzdGF0ZV0gPSBtdWlGb3JtQ29udHJvbFtzdGF0ZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufSIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMsIGdlbmVyYXRlVXRpbGl0eUNsYXNzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlPdXRsaW5lZElucHV0Jywgc2xvdCk7XG59XG5jb25zdCBvdXRsaW5lZElucHV0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU91dGxpbmVkSW5wdXQnLCBbJ3Jvb3QnLCAnY29sb3JTZWNvbmRhcnknLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdhZG9ybmVkU3RhcnQnLCAnYWRvcm5lZEVuZCcsICdlcnJvcicsICdzaXplU21hbGwnLCAnbXVsdGlsaW5lJywgJ25vdGNoZWRPdXRsaW5lJywgJ2lucHV0JywgJ2lucHV0U2l6ZVNtYWxsJywgJ2lucHV0TXVsdGlsaW5lJywgJ2lucHV0QWRvcm5lZFN0YXJ0JywgJ2lucHV0QWRvcm5lZEVuZCddKTtcbmV4cG9ydCBkZWZhdWx0IG91dGxpbmVkSW5wdXRDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNoYW5nZVwiLCBcIm1heFJvd3NcIiwgXCJtaW5Sb3dzXCIsIFwic3R5bGVcIiwgXCJ2YWx1ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9kZWJvdW5jZSBhcyBkZWJvdW5jZSwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCwgdW5zdGFibGVfb3duZXJXaW5kb3cgYXMgb3duZXJXaW5kb3cgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmZ1bmN0aW9uIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbcHJvcGVydHldLCAxMCkgfHwgMDtcbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBzaGFkb3c6IHtcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaVBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAvLyBSZW1vdmUgZnJvbSB0aGUgY29udGVudCBmbG93XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGxiYXIgd2lkdGhcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIC8vIENyZWF0ZSBhIG5ldyBsYXllciwgaW5jcmVhc2UgdGhlIGlzb2xhdGlvbiBvZiB0aGUgY29tcHV0ZWQgdmFsdWVzXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKSdcbiAgfVxufTtcbmNvbnN0IFRleHRhcmVhQXV0b3NpemUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0YXJlYUF1dG9zaXplKHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIG9uQ2hhbmdlLFxuICAgIG1heFJvd3MsXG4gICAgbWluUm93cyA9IDEsXG4gICAgc3R5bGUsXG4gICAgdmFsdWVcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBpbnB1dFJlZik7XG4gIGNvbnN0IHNoYWRvd1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgcmVuZGVycyA9IFJlYWN0LnVzZVJlZigwKTtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7fSk7XG4gIGNvbnN0IHN5bmNIZWlnaHQgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gY29udGFpbmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5wdXQpOyAvLyBJZiBpbnB1dCdzIHdpZHRoIGlzIHNocnVuayBhbmQgaXQncyBub3QgdmlzaWJsZSwgZG9uJ3Qgc3luYyBoZWlnaHQuXG5cbiAgICBpZiAoY29tcHV0ZWRTdHlsZS53aWR0aCA9PT0gJzBweCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbnB1dFNoYWxsb3cgPSBzaGFkb3dSZWYuY3VycmVudDtcbiAgICBpbnB1dFNoYWxsb3cuc3R5bGUud2lkdGggPSBjb21wdXRlZFN0eWxlLndpZHRoO1xuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9IGlucHV0LnZhbHVlIHx8IHByb3BzLnBsYWNlaG9sZGVyIHx8ICd4JztcblxuICAgIGlmIChpbnB1dFNoYWxsb3cudmFsdWUuc2xpY2UoLTEpID09PSAnXFxuJykge1xuICAgICAgLy8gQ2VydGFpbiBmb250cyB3aGljaCBvdmVyZmxvdyB0aGUgbGluZSBoZWlnaHQgd2lsbCBjYXVzZSB0aGUgdGV4dGFyZWFcbiAgICAgIC8vIHRvIHJlcG9ydCBhIGRpZmZlcmVudCBzY3JvbGxIZWlnaHQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGxhc3QgbGluZVxuICAgICAgLy8gaXMgZW1wdHkuIE1ha2UgaXQgbm9uLWVtcHR5IHRvIGF2b2lkIHRoaXMgaXNzdWUuXG4gICAgICBpbnB1dFNoYWxsb3cudmFsdWUgKz0gJyAnO1xuICAgIH1cblxuICAgIGNvbnN0IGJveFNpemluZyA9IGNvbXB1dGVkU3R5bGVbJ2JveC1zaXppbmcnXTtcbiAgICBjb25zdCBwYWRkaW5nID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAncGFkZGluZy1ib3R0b20nKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ3BhZGRpbmctdG9wJyk7XG4gICAgY29uc3QgYm9yZGVyID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAnYm9yZGVyLWJvdHRvbS13aWR0aCcpICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAnYm9yZGVyLXRvcC13aWR0aCcpOyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBpbm5lciBjb250ZW50XG5cbiAgICBjb25zdCBpbm5lckhlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQ7IC8vIE1lYXN1cmUgaGVpZ2h0IG9mIGEgdGV4dGFyZWEgd2l0aCBhIHNpbmdsZSByb3dcblxuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9ICd4JztcbiAgICBjb25zdCBzaW5nbGVSb3dIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0OyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBvdXRlciBjb250ZW50XG5cbiAgICBsZXQgb3V0ZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcblxuICAgIGlmIChtaW5Sb3dzKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KE51bWJlcihtaW5Sb3dzKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIGlmIChtYXhSb3dzKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWluKE51bWJlcihtYXhSb3dzKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7IC8vIFRha2UgdGhlIGJveCBzaXppbmcgaW50byBhY2NvdW50IGZvciBhcHBseWluZyB0aGlzIHZhbHVlIGFzIGEgc3R5bGUuXG5cbiAgICBjb25zdCBvdXRlckhlaWdodFN0eWxlID0gb3V0ZXJIZWlnaHQgKyAoYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcgPyBwYWRkaW5nICsgYm9yZGVyIDogMCk7XG4gICAgY29uc3Qgb3ZlcmZsb3cgPSBNYXRoLmFicyhvdXRlckhlaWdodCAtIGlubmVySGVpZ2h0KSA8PSAxO1xuICAgIHNldFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICAvLyBOZWVkIGEgbGFyZ2UgZW5vdWdoIGRpZmZlcmVuY2UgdG8gdXBkYXRlIHRoZSBoZWlnaHQuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgaWYgKHJlbmRlcnMuY3VycmVudCA8IDIwICYmIChvdXRlckhlaWdodFN0eWxlID4gMCAmJiBNYXRoLmFicygocHJldlN0YXRlLm91dGVySGVpZ2h0U3R5bGUgfHwgMCkgLSBvdXRlckhlaWdodFN0eWxlKSA+IDEgfHwgcHJldlN0YXRlLm92ZXJmbG93ICE9PSBvdmVyZmxvdykpIHtcbiAgICAgICAgcmVuZGVycy5jdXJyZW50ICs9IDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3ZlcmZsb3csXG4gICAgICAgICAgb3V0ZXJIZWlnaHRTdHlsZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAocmVuZGVycy5jdXJyZW50ID09PSAyMCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRvbyBtYW55IHJlLXJlbmRlcnMuIFRoZSBsYXlvdXQgaXMgdW5zdGFibGUuJywgJ1RleHRhcmVhQXV0b3NpemUgbGltaXRzIHRoZSBudW1iZXIgb2YgcmVuZGVycyB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgfSk7XG4gIH0sIFttYXhSb3dzLCBtaW5Sb3dzLCBwcm9wcy5wbGFjZWhvbGRlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKCgpID0+IHtcbiAgICAgIHJlbmRlcnMuY3VycmVudCA9IDA7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfSk7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coaW5wdXRSZWYuY3VycmVudCk7XG4gICAgY29udGFpbmVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgbGV0IHJlc2l6ZU9ic2VydmVyO1xuXG4gICAgaWYgKHR5cGVvZiBSZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGhhbmRsZVJlc2l6ZSk7XG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGlucHV0UmVmLmN1cnJlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIGNvbnRhaW5lcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuXG4gICAgICBpZiAocmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtzeW5jSGVpZ2h0XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBzeW5jSGVpZ2h0KCk7XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlbmRlcnMuY3VycmVudCA9IDA7XG4gIH0sIFt2YWx1ZV0pO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IGV2ZW50ID0+IHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuXG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCBfZXh0ZW5kcyh7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgcmVmOiBoYW5kbGVSZWYgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAgICxcbiAgICAgIHJvd3M6IG1pblJvd3MsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBoZWlnaHQ6IHN0YXRlLm91dGVySGVpZ2h0U3R5bGUsXG4gICAgICAgIC8vIE5lZWQgYSBsYXJnZSBlbm91Z2ggZGlmZmVyZW5jZSB0byBhbGxvdyBzY3JvbGxpbmcuXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgICAgIG92ZXJmbG93OiBzdGF0ZS5vdmVyZmxvdyA/ICdoaWRkZW4nIDogbnVsbFxuICAgICAgfSwgc3R5bGUpXG4gICAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgcmVmOiBzaGFkb3dSZWYsXG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5zaGFkb3csIHN0eWxlLCB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH0pXG4gICAgfSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0YXJlYUF1dG9zaXplLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhQXV0b3NpemU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGwgfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdsb2JhbFN0eWxlcyhwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3R5bGVzLFxuICAgIGRlZmF1bHRUaGVtZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgY29uc3QgZ2xvYmFsU3R5bGVzID0gdHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoZW1lSW5wdXQgPT4gc3R5bGVzKGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0KSA6IHN0eWxlcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEdsb2JhbCwge1xuICAgIHN0eWxlczogZ2xvYmFsU3R5bGVzXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyA9IHtcbiAgZGVmYXVsdFRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSlcbn0gOiB2b2lkIDA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIGFzIFN5c3RlbUdsb2JhbFN0eWxlcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi4vc3R5bGVzL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5mdW5jdGlvbiBHbG9iYWxTdHlsZXMocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN5c3RlbUdsb2JhbFN0eWxlcywgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSkpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHbG9iYWxTdHlsZXMucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBzdHlsZXMgeW91IHdhbnQgdG8gYXBwbHkgZ2xvYmFsbHkuXG4gICAqL1xuICBzdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIF9fZW1vdGlvbl9zdHlsZXM6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZFxuICB9KSwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFN0eWxlczsiLCIvLyBTdXBwb3J0cyBkZXRlcm1pbmF0aW9uIG9mIGlzQ29udHJvbGxlZCgpLlxuLy8gQ29udHJvbGxlZCBpbnB1dCBhY2NlcHRzIGl0cyBjdXJyZW50IHZhbHVlIGFzIGEgcHJvcC5cbi8vXG4vLyBAc2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHNcbi8vIEBwYXJhbSB2YWx1ZVxuLy8gQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgc3RyaW5nIChpbmNsdWRpbmcgJycpIG9yIG51bWJlciAoaW5jbHVkaW5nIHplcm8pXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xufSAvLyBEZXRlcm1pbmUgaWYgZmllbGQgaXMgZW1wdHkgb3IgZmlsbGVkLlxuLy8gUmVzcG9uc2UgZGV0ZXJtaW5lcyBpZiBsYWJlbCBpcyBwcmVzZW50ZWQgYWJvdmUgZmllbGQgb3IgYXMgcGxhY2Vob2xkZXIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHBhcmFtIFNTUlxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm90IHByZXNlbnQgb3IgZW1wdHkgc3RyaW5nLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhbnkgbnVtYmVyIG9yIHN0cmluZyB3aXRoIGxlbmd0aC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsbGVkKG9iaiwgU1NSID0gZmFsc2UpIHtcbiAgcmV0dXJuIG9iaiAmJiAoaGFzVmFsdWUob2JqLnZhbHVlKSAmJiBvYmoudmFsdWUgIT09ICcnIHx8IFNTUiAmJiBoYXNWYWx1ZShvYmouZGVmYXVsdFZhbHVlKSAmJiBvYmouZGVmYXVsdFZhbHVlICE9PSAnJyk7XG59IC8vIERldGVybWluZSBpZiBhbiBJbnB1dCBpcyBhZG9ybmVkIG9uIHN0YXJ0LlxuLy8gSXQncyBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHdpdGggTFRSLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vIGFkb3JubWVudHMuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFkb3JuZWQgYXQgdGhlIHN0YXJ0LlxuXG5leHBvcnQgZnVuY3Rpb24gaXNBZG9ybmVkU3RhcnQob2JqKSB7XG4gIHJldHVybiBvYmouc3RhcnRBZG9ybm1lbnQ7XG59IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0QmFzZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXRCYXNlJywgc2xvdCk7XG59XG5jb25zdCBpbnB1dEJhc2VDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXRCYXNlJywgWydyb290JywgJ2Zvcm1Db250cm9sJywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnYWRvcm5lZFN0YXJ0JywgJ2Fkb3JuZWRFbmQnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdjb2xvclNlY29uZGFyeScsICdmdWxsV2lkdGgnLCAnaGlkZGVuTGFiZWwnLCAnaW5wdXQnLCAnaW5wdXRTaXplU21hbGwnLCAnaW5wdXRNdWx0aWxpbmUnLCAnaW5wdXRUeXBlU2VhcmNoJywgJ2lucHV0QWRvcm5lZFN0YXJ0JywgJ2lucHV0QWRvcm5lZEVuZCcsICdpbnB1dEhpZGRlbkxhYmVsJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRCYXNlQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlc1wiLCBcImVuZEFkb3JubWVudFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWRcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm1hcmdpblwiLCBcIm1heFJvd3NcIiwgXCJtaW5Sb3dzXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclN1ZmZpeFwiLCBcInJvd3NcIiwgXCJzaXplXCIsIFwic3RhcnRBZG9ybm1lbnRcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlLCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMsIGlzSG9zdENvbXBvbmVudCwgVGV4dGFyZWFBdXRvc2l6ZSB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi4vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICcuLi91dGlscy91c2VFbmhhbmNlZEVmZmVjdCc7XG5pbXBvcnQgR2xvYmFsU3R5bGVzIGZyb20gJy4uL0dsb2JhbFN0eWxlcyc7XG5pbXBvcnQgeyBpc0ZpbGxlZCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGlucHV0QmFzZUNsYXNzZXMsIHsgZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbnB1dEJhc2VDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgY29uc3Qgcm9vdE92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmZvcm1Db250cm9sICYmIHN0eWxlcy5mb3JtQ29udHJvbCwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiBzdHlsZXMuYWRvcm5lZFN0YXJ0LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiBzdHlsZXMuYWRvcm5lZEVuZCwgb3duZXJTdGF0ZS5lcnJvciAmJiBzdHlsZXMuZXJyb3IsIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBzdHlsZXMuc2l6ZVNtYWxsLCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBzdHlsZXMubXVsdGlsaW5lLCBvd25lclN0YXRlLmNvbG9yICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHN0eWxlcy5mdWxsV2lkdGgsIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgc3R5bGVzLmhpZGRlbkxhYmVsXTtcbn07XG5leHBvcnQgY29uc3QgaW5wdXRPdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMuaW5wdXQsIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBzdHlsZXMuaW5wdXRTaXplU21hbGwsIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHN0eWxlcy5pbnB1dE11bHRpbGluZSwgb3duZXJTdGF0ZS50eXBlID09PSAnc2VhcmNoJyAmJiBzdHlsZXMuaW5wdXRUeXBlU2VhcmNoLCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHN0eWxlcy5pbnB1dEFkb3JuZWRTdGFydCwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYgc3R5bGVzLmlucHV0QWRvcm5lZEVuZCwgb3duZXJTdGF0ZS5oaWRkZW5MYWJlbCAmJiBzdHlsZXMuaW5wdXRIaWRkZW5MYWJlbF07XG59O1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbCxcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHNpemUsXG4gICAgc3RhcnRBZG9ybm1lbnQsXG4gICAgdHlwZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBlcnJvciAmJiAnZXJyb3InLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCcsIGZvY3VzZWQgJiYgJ2ZvY3VzZWQnLCBmb3JtQ29udHJvbCAmJiAnZm9ybUNvbnRyb2wnLCBzaXplID09PSAnc21hbGwnICYmICdzaXplU21hbGwnLCBtdWx0aWxpbmUgJiYgJ211bHRpbGluZScsIHN0YXJ0QWRvcm5tZW50ICYmICdhZG9ybmVkU3RhcnQnLCBlbmRBZG9ybm1lbnQgJiYgJ2Fkb3JuZWRFbmQnLCBoaWRkZW5MYWJlbCAmJiAnaGlkZGVuTGFiZWwnXSxcbiAgICBpbnB1dDogWydpbnB1dCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIHR5cGUgPT09ICdzZWFyY2gnICYmICdpbnB1dFR5cGVTZWFyY2gnLCBtdWx0aWxpbmUgJiYgJ2lucHV0TXVsdGlsaW5lJywgc2l6ZSA9PT0gJ3NtYWxsJyAmJiAnaW5wdXRTaXplU21hbGwnLCBoaWRkZW5MYWJlbCAmJiAnaW5wdXRIaWRkZW5MYWJlbCcsIHN0YXJ0QWRvcm5tZW50ICYmICdpbnB1dEFkb3JuZWRTdGFydCcsIGVuZEFkb3JubWVudCAmJiAnaW5wdXRBZG9ybmVkRW5kJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IElucHV0QmFzZVJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUlucHV0QmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IHJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgbGluZUhlaWdodDogJzEuNDM3NWVtJyxcbiAgLy8gMjNweFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggZnVsbFdpZHRoLlxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgY3Vyc29yOiAndGV4dCcsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBbYCYuJHtpbnB1dEJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZCxcbiAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICB9XG59LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBfZXh0ZW5kcyh7XG4gIHBhZGRpbmc6ICc0cHggMCA1cHgnXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBwYWRkaW5nVG9wOiAxXG59KSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYge1xuICB3aWR0aDogJzEwMCUnXG59KSk7XG5leHBvcnQgY29uc3QgSW5wdXRCYXNlQ29tcG9uZW50ID0gc3R5bGVkKCdpbnB1dCcsIHtcbiAgbmFtZTogJ011aUlucHV0QmFzZScsXG4gIHNsb3Q6ICdJbnB1dCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBsaWdodCA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JztcbiAgY29uc3QgcGxhY2Vob2xkZXIgPSB7XG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH07XG4gIGNvbnN0IHBsYWNlaG9sZGVySGlkZGVuID0ge1xuICAgIG9wYWNpdHk6ICcwICFpbXBvcnRhbnQnXG4gIH07XG4gIGNvbnN0IHBsYWNlaG9sZGVyVmlzaWJsZSA9IHtcbiAgICBvcGFjaXR5OiBsaWdodCA/IDAuNDIgOiAwLjVcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgbGV0dGVyU3BhY2luZzogJ2luaGVyaXQnLFxuICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICBwYWRkaW5nOiAnNHB4IDAgNXB4JyxcbiAgICBib3JkZXI6IDAsXG4gICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICBoZWlnaHQ6ICcxLjQzNzVlbScsXG4gICAgLy8gUmVzZXQgMjNweHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVzZXQgZm9yIFNhZmFyaVxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgLy8gTWFrZSB0aGUgZmxleCBpdGVtIHNocmluayB3aXRoIEZpcmVmb3hcbiAgICBtaW5XaWR0aDogMCxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIC8vIEZpeCBJRTExIHdpZHRoIGlzc3VlXG4gICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwtY2FuY2VsJyxcbiAgICBhbmltYXRpb25EdXJhdGlvbjogJzEwbXMnLFxuICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAvLyBGaXJlZm94IDE5K1xuICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgIC8vIElFMTFcbiAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgLy8gRWRnZVxuICAgICcmOmZvY3VzJzoge1xuICAgICAgb3V0bGluZTogMFxuICAgIH0sXG4gICAgLy8gUmVzZXQgRmlyZWZveCBpbnZhbGlkIHJlcXVpcmVkIGlucHV0IHN0eWxlXG4gICAgJyY6aW52YWxpZCc6IHtcbiAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgfSxcbiAgICAnJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbic6IHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyB3aGVuIHR5cGU9c2VhcmNoLlxuICAgICAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnXG4gICAgfSxcbiAgICAvLyBTaG93IGFuZCBoaWRlIHRoZSBwbGFjZWhvbGRlciBsb2dpY1xuICAgIFtgbGFiZWxbZGF0YS1zaHJpbms9ZmFsc2VdICsgLiR7aW5wdXRCYXNlQ2xhc3Nlcy5mb3JtQ29udHJvbH0gJmBdOiB7XG4gICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgIC8vIElFMTFcbiAgICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgIC8vIEVkZ2VcbiAgICAgICcmOmZvY3VzOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgJyY6Zm9jdXM6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgJyY6Zm9jdXM6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgLy8gSUUxMVxuICAgICAgJyY6Zm9jdXM6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSAvLyBFZGdlXG5cbiAgICB9LFxuICAgIFtgJi4ke2lucHV0QmFzZUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAvLyBSZXNldCBpT1Mgb3BhY2l0eVxuICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkIC8vIEZpeCBvcGFjaXR5IFNhZmFyaSBidWdcblxuICAgIH0sXG4gICAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnNTAwMHMnLFxuICAgICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwnXG4gICAgfVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIHBhZGRpbmdUb3A6IDFcbiAgfSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYge1xuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgcGFkZGluZ1RvcDogMFxuICB9LCBvd25lclN0YXRlLnR5cGUgPT09ICdzZWFyY2gnICYmIHtcbiAgICAvLyBJbXByb3ZlIHR5cGUgc2VhcmNoIHN0eWxlLlxuICAgIE1vekFwcGVhcmFuY2U6ICd0ZXh0ZmllbGQnXG4gIH0pO1xufSk7XG5cbmNvbnN0IGlucHV0R2xvYmFsU3R5bGVzID0gLyojX19QVVJFX18qL19qc3goR2xvYmFsU3R5bGVzLCB7XG4gIHN0eWxlczoge1xuICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwnOiB7XG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwtY2FuY2VsJzoge1xuICAgICAgZnJvbToge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbi8qKlxuICogYElucHV0QmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGFuIGlucHV0LlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIHN0YXRlIGxvZ2ljLlxuICovXG5cblxuY29uc3QgSW5wdXRCYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJbnB1dEJhc2UnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFEZXNjcmliZWRieSxcbiAgICBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXMsXG4gICAgZW5kQWRvcm5tZW50LFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIGlkLFxuICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzUHJvcCA9IHt9LFxuICAgIGlucHV0UmVmOiBpbnB1dFJlZlByb3AsXG4gICAgbWF4Um93cyxcbiAgICBtaW5Sb3dzLFxuICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgIG5hbWUsXG4gICAgb25CbHVyLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uQ2xpY2ssXG4gICAgb25Gb2N1cyxcbiAgICBvbktleURvd24sXG4gICAgb25LZXlVcCxcbiAgICBwbGFjZWhvbGRlcixcbiAgICByZWFkT25seSxcbiAgICByZW5kZXJTdWZmaXgsXG4gICAgcm93cyxcbiAgICBzdGFydEFkb3JubWVudCxcbiAgICB0eXBlID0gJ3RleHQnLFxuICAgIHZhbHVlOiB2YWx1ZVByb3BcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHZhbHVlID0gaW5wdXRQcm9wc1Byb3AudmFsdWUgIT0gbnVsbCA/IGlucHV0UHJvcHNQcm9wLnZhbHVlIDogdmFsdWVQcm9wO1xuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCk7XG4gIGNvbnN0IGlucHV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZUlucHV0UmVmV2FybmluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKGluc3RhbmNlID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLm5vZGVOYW1lICE9PSAnSU5QVVQnICYmICFpbnN0YW5jZS5mb2N1cykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBZb3UgaGF2ZSBwcm92aWRlZCBhIGBpbnB1dENvbXBvbmVudGAgdG8gdGhlIGlucHV0IGNvbXBvbmVudCcsICd0aGF0IGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgdGhlIGByZWZgIHByb3AuJywgJ01ha2Ugc3VyZSB0aGUgYHJlZmAgcHJvcCBpcyBjYWxsZWQgd2l0aCBhIEhUTUxJbnB1dEVsZW1lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCA9IHVzZUZvcmtSZWYoaW5wdXRQcm9wc1Byb3AucmVmLCBoYW5kbGVJbnB1dFJlZldhcm5pbmcpO1xuICBjb25zdCBoYW5kbGVJbnB1dFJlZlByb3AgPSB1c2VGb3JrUmVmKGlucHV0UmVmUHJvcCwgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3ApO1xuICBjb25zdCBoYW5kbGVJbnB1dFJlZiA9IHVzZUZvcmtSZWYoaW5wdXRSZWYsIGhhbmRsZUlucHV0UmVmUHJvcCk7XG4gIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgICByZXR1cm4gbXVpRm9ybUNvbnRyb2wucmVnaXN0ZXJFZmZlY3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LCBbbXVpRm9ybUNvbnRyb2xdKTtcbiAgfVxuXG4gIGNvbnN0IGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdkaXNhYmxlZCcsICdlcnJvcicsICdoaWRkZW5MYWJlbCcsICdzaXplJywgJ3JlcXVpcmVkJywgJ2ZpbGxlZCddXG4gIH0pO1xuICBmY3MuZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IGZvY3VzZWQ7IC8vIFRoZSBibHVyIHdvbid0IGZpcmUgd2hlbiB0aGUgZGlzYWJsZWQgc3RhdGUgaXMgc2V0IG9uIGEgZm9jdXNlZCBpbnB1dC5cbiAgLy8gV2UgbmVlZCB0byBib29rIGtlZXAgdGhlIGZvY3VzZWQgc3RhdGUgbWFudWFsbHkuXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW11aUZvcm1Db250cm9sICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuXG4gICAgICBpZiAob25CbHVyKSB7XG4gICAgICAgIG9uQmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBkaXNhYmxlZCwgZm9jdXNlZCwgb25CbHVyXSk7XG4gIGNvbnN0IG9uRmlsbGVkID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQ7XG4gIGNvbnN0IG9uRW1wdHkgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkVtcHR5O1xuICBjb25zdCBjaGVja0RpcnR5ID0gUmVhY3QudXNlQ2FsbGJhY2sob2JqID0+IHtcbiAgICBpZiAoaXNGaWxsZWQob2JqKSkge1xuICAgICAgaWYgKG9uRmlsbGVkKSB7XG4gICAgICAgIG9uRmlsbGVkKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkVtcHR5KSB7XG4gICAgICBvbkVtcHR5KCk7XG4gICAgfVxuICB9LCBbb25GaWxsZWQsIG9uRW1wdHldKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbdmFsdWUsIGNoZWNrRGlydHksIGlzQ29udHJvbGxlZF0pO1xuXG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZXZlbnQgPT4ge1xuICAgIC8vIEZpeCBhIGJ1ZyB3aXRoIElFMTEgd2hlcmUgdGhlIGZvY3VzL2JsdXIgZXZlbnRzIGFyZSB0cmlnZ2VyZWRcbiAgICAvLyB3aGlsZSB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgIGlmIChmY3MuZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25Gb2N1cykge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uQmx1cikge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25CbHVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25CbHVyKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcblxuICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogRXhwZWN0ZWQgdmFsaWQgaW5wdXQgdGFyZ2V0LiBEaWQgeW91IHVzZSBhIGN1c3RvbSBcXGBpbnB1dENvbXBvbmVudFxcYCBhbmQgZm9yZ2V0IHRvIGZvcndhcmQgcmVmcz8gU2VlIGh0dHBzOi8vbXVpLmNvbS9yL2lucHV0LWNvbXBvbmVudC1yZWYtaW50ZXJmYWNlIGZvciBtb3JlIGluZm8uYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMSkpO1xuICAgICAgfVxuXG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWU6IGVsZW1lbnQudmFsdWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkNoYW5nZSkge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH0gLy8gUGVyZm9ybSBpbiB0aGUgd2lsbFVwZGF0ZVxuXG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07IC8vIENoZWNrIHRoZSBpbnB1dCBzdGF0ZSBvbiBtb3VudCwgaW4gY2FzZSBpdCB3YXMgZmlsbGVkIGJ5IHRoZSB1c2VyXG4gIC8vIG9yIGF1dG8gZmlsbGVkIGJ5IHRoZSBicm93c2VyIGJlZm9yZSB0aGUgaHlkcmF0aW9uIChmb3IgU1NSKS5cblxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY2hlY2tEaXJ0eShpbnB1dFJlZi5jdXJyZW50KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQgJiYgZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBsZXQgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcbiAgbGV0IGlucHV0UHJvcHMgPSBpbnB1dFByb3BzUHJvcDtcblxuICBpZiAobXVsdGlsaW5lICYmIElucHV0Q29tcG9uZW50ID09PSAnaW5wdXQnKSB7XG4gICAgaWYgKHJvd3MpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChtaW5Sb3dzIHx8IG1heFJvd3MpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ01VSTogWW91IGNhbiBub3QgdXNlIHRoZSBgbWluUm93c2Agb3IgYG1heFJvd3NgIHByb3BzIHdoZW4gdGhlIGlucHV0IGByb3dzYCBwcm9wIGlzIHNldC4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgIG1pblJvd3M6IHJvd3MsXG4gICAgICAgIG1heFJvd3M6IHJvd3NcbiAgICAgIH0sIGlucHV0UHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFJvd3MsXG4gICAgICAgIG1pblJvd3NcbiAgICAgIH0sIGlucHV0UHJvcHMpO1xuICAgIH1cblxuICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUF1dG9GaWxsID0gZXZlbnQgPT4ge1xuICAgIC8vIFByb3ZpZGUgYSBmYWtlIHZhbHVlIGFzIENocm9tZSBtaWdodCBub3QgbGV0IHlvdSBhY2Nlc3MgaXQgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG4gICAgY2hlY2tEaXJ0eShldmVudC5hbmltYXRpb25OYW1lID09PSAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnID8gaW5wdXRSZWYuY3VycmVudCA6IHtcbiAgICAgIHZhbHVlOiAneCdcbiAgICB9KTtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgbXVpRm9ybUNvbnRyb2wuc2V0QWRvcm5lZFN0YXJ0KEJvb2xlYW4oc3RhcnRBZG9ybm1lbnQpKTtcbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgc3RhcnRBZG9ybm1lbnRdKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3I6IGZjcy5jb2xvciB8fCAncHJpbWFyeScsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsOiBmY3MuaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHNpemU6IGZjcy5zaXplLFxuICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgIHR5cGVcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBSb290ID0gY29tcG9uZW50cy5Sb290IHx8IElucHV0QmFzZVJvb3Q7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICBjb25zdCBJbnB1dCA9IGNvbXBvbmVudHMuSW5wdXQgfHwgSW5wdXRCYXNlQ29tcG9uZW50O1xuICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHMsIGNvbXBvbmVudHNQcm9wcy5pbnB1dCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWyFkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzICYmIGlucHV0R2xvYmFsU3R5bGVzLCAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgcm9vdFByb3BzLm93bmVyU3RhdGUpXG4gICAgfSwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgIH0sIG90aGVyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCByb290UHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpLFxuICAgICAgY2hpbGRyZW46IFtzdGFydEFkb3JubWVudCwgLyojX19QVVJFX18qL19qc3goRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goSW5wdXQsIF9leHRlbmRzKHtcbiAgICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IGZjcy5lcnJvcixcbiAgICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZGJ5LFxuICAgICAgICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgICAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIG9uQW5pbWF0aW9uU3RhcnQ6IGhhbmRsZUF1dG9GaWxsLFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgICAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgICAgICAgIG9uS2V5VXA6IG9uS2V5VXAsXG4gICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICB9LCBpbnB1dFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KElucHV0KSAmJiB7XG4gICAgICAgICAgYXM6IElucHV0Q29tcG9uZW50LFxuICAgICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCBpbnB1dFByb3BzLm93bmVyU3RhdGUpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICByZWY6IGhhbmRsZUlucHV0UmVmLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmlucHV0LCBpbnB1dFByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgb25Gb2N1czogaGFuZGxlRm9jdXNcbiAgICAgICAgfSkpXG4gICAgICB9KSwgZW5kQWRvcm5tZW50LCByZW5kZXJTdWZmaXggPyByZW5kZXJTdWZmaXgoX2V4dGVuZHMoe30sIGZjcywge1xuICAgICAgICBzdGFydEFkb3JubWVudFxuICAgICAgfSkpIDogbnVsbF1cbiAgICB9KSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dEJhc2UucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gICdhcmlhLWRlc2NyaWJlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAncHJpbWFyeSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dEJhc2UuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgSW5wdXQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBHbG9iYWxTdHlsZXMgZm9yIHRoZSBhdXRvLWZpbGwga2V5ZnJhbWVzIHdpbGwgbm90IGJlIGluamVjdGVkL3JlbW92ZWQgb24gbW91bnQvdW5tb3VudC4gTWFrZSBzdXJlIHRvIGluamVjdCB0aGVtIGF0IHRoZSB0b3Agb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICogVGhpcyBvcHRpb24gaXMgaW50ZW5kZWQgdG8gaGVscCB3aXRoIGJvb3N0aW5nIHRoZSBpbml0aWFsIHJlbmRlcmluZyBwZXJmb3JtYW5jZSBpZiB5b3UgYXJlIGxvYWRpbmcgYSBiaWcgYW1vdW50IG9mIElucHV0IGNvbXBvbmVudHMgYXQgb25jZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIGB0ZXh0YXJlYWAgZWxlbWVudCBpcyByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBgaW5wdXRgIGlzIGJsdXJyZWQuXG4gICAqXG4gICAqIE5vdGljZSB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCAoZXZlbnQpIG1pZ2h0IGJlIHVuZGVmaW5lZC5cbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudCB8IEhUTUxJbnB1dEVsZW1lbnQ+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBgaW5wdXRgIGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVuZGVyU3VmZml4OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIHJlcXVpcmVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBJbnB1dEJhc2U7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNvbXBvbmVudHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImxhYmVsXCIsIFwibXVsdGlsaW5lXCIsIFwibm90Y2hlZFwiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IE5vdGNoZWRPdXRsaW5lIGZyb20gJy4vTm90Y2hlZE91dGxpbmUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBvdXRsaW5lZElucHV0Q2xhc3NlcywgeyBnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9vdXRsaW5lZElucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgSW5wdXRCYXNlLCB7IHJvb3RPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIsIGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlciwgSW5wdXRCYXNlUm9vdCwgSW5wdXRCYXNlQ29tcG9uZW50IGFzIElucHV0QmFzZUlucHV0IH0gZnJvbSAnLi4vSW5wdXRCYXNlL0lucHV0QmFzZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgbm90Y2hlZE91dGxpbmU6IFsnbm90Y2hlZE91dGxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBjbGFzc2VzLCBjb21wb3NlZENsYXNzZXMpO1xufTtcblxuY29uc3QgT3V0bGluZWRJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgW2AmOmhvdmVyIC4ke291dGxpbmVkSW5wdXRDbGFzc2VzLm5vdGNoZWRPdXRsaW5lfWBdOiB7XG4gICAgICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgW2AmOmhvdmVyIC4ke291dGxpbmVkSW5wdXRDbGFzc2VzLm5vdGNoZWRPdXRsaW5lfWBdOiB7XG4gICAgICAgIGJvcmRlckNvbG9yXG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5mb2N1c2VkfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgICAgIGJvcmRlcldpZHRoOiAyXG4gICAgfSxcbiAgICBbYCYuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5lcnJvcn0gLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuICAgIFtgJi4ke291dGxpbmVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfVxuICB9LCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nTGVmdDogMTRcbiAgfSwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYge1xuICAgIHBhZGRpbmdSaWdodDogMTRcbiAgfSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgX2V4dGVuZHMoe1xuICAgIHBhZGRpbmc6ICcxNi41cHggMTRweCdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nOiAnOC41cHggMTRweCdcbiAgfSkpO1xufSk7XG5jb25zdCBOb3RjaGVkT3V0bGluZVJvb3QgPSBzdHlsZWQoTm90Y2hlZE91dGxpbmUsIHtcbiAgbmFtZTogJ011aU91dGxpbmVkSW5wdXQnLFxuICBzbG90OiAnTm90Y2hlZE91dGxpbmUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5ub3RjaGVkT3V0bGluZVxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSdcbn0pKTtcbmNvbnN0IE91dGxpbmVkSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCcsXG4gIHNsb3Q6ICdJbnB1dCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwYWRkaW5nOiAnMTYuNXB4IDE0cHgnLFxuICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICBXZWJraXRUZXh0RmlsbENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCdcbiAgfVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZzogJzguNXB4IDE0cHgnXG59LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiB7XG4gIHBhZGRpbmc6IDBcbn0sIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nTGVmdDogMFxufSwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nUmlnaHQ6IDBcbn0pKTtcbmNvbnN0IE91dGxpbmVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBPdXRsaW5lZElucHV0KGluUHJvcHMsIHJlZikge1xuICB2YXIgX1JlYWN0JEZyYWdtZW50O1xuXG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aU91dGxpbmVkSW5wdXQnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgaW5wdXRDb21wb25lbnQgPSAnaW5wdXQnLFxuICAgIGxhYmVsLFxuICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgIG5vdGNoZWQsXG4gICAgdHlwZSA9ICd0ZXh0J1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsncmVxdWlyZWQnXVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgIFJvb3Q6IE91dGxpbmVkSW5wdXRSb290LFxuICAgICAgSW5wdXQ6IE91dGxpbmVkSW5wdXRJbnB1dFxuICAgIH0sIGNvbXBvbmVudHMpLFxuICAgIHJlbmRlclN1ZmZpeDogc3RhdGUgPT4gLyojX19QVVJFX18qL19qc3goTm90Y2hlZE91dGxpbmVSb290LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubm90Y2hlZE91dGxpbmUsXG4gICAgICBsYWJlbDogbGFiZWwgJiYgZmNzLnJlcXVpcmVkID8gX1JlYWN0JEZyYWdtZW50IHx8IChfUmVhY3QkRnJhZ21lbnQgPSAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IFtsYWJlbCwgXCJcXHhBMFwiLCAnKiddXG4gICAgICB9KSkgOiBsYWJlbCxcbiAgICAgIG5vdGNoZWQ6IHR5cGVvZiBub3RjaGVkICE9PSAndW5kZWZpbmVkJyA/IG5vdGNoZWQgOiBCb29sZWFuKHN0YXRlLnN0YXJ0QWRvcm5tZW50IHx8IHN0YXRlLmZpbGxlZCB8fCBzdGF0ZS5mb2N1c2VkKVxuICAgIH0pLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIG5vdGNoZWRPdXRsaW5lOiBudWxsXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBPdXRsaW5lZElucHV0LnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAncHJpbWFyeSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dEJhc2UuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgYGlucHV0YC4gSXQgaXMgb25seSB1c2VkIGZvciBsYXlvdXQuIFRoZSBhY3R1YWwgbGFiZWxsaW5nXG4gICAqIGlzIGhhbmRsZWQgYnkgYElucHV0TGFiZWxgLlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgYHRleHRhcmVhYCBlbGVtZW50IGlzIHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG91dGxpbmUgaXMgbm90Y2hlZCB0byBhY2NvbW1vZGF0ZSB0aGUgbGFiZWwuXG4gICAqL1xuICBub3RjaGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5PdXRsaW5lZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgT3V0bGluZWRJbnB1dDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuY29uc3QgTGlzdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIExpc3RDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0xpc3RDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlzdENvbnRleHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIHJ1biB0aGUgbWFwIGZ1bmN0aW9uIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHRoZSBrZXkgaXMgdGhlIGNvbXB1dGVkIG9uZVxuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gbWFwcGVyKGNoaWxkKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0gKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgaGFzTmV4dCA9IChrZXkgaW4gbmV4dENoaWxkTWFwcGluZyk7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuLyoqXG4gKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAqXG4gKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAqXG4gKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAqIGl0ZW1zLlxuICovXG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBub2RlIGlzIGB1bmRlZmluZWRgIHdoZW4gdXNlciBwcm92aWRlZCBgbm9kZVJlZmAgcHJvcFxuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG91Y2hSaXBwbGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvdWNoUmlwcGxlJywgc2xvdCk7XG59XG5jb25zdCB0b3VjaFJpcHBsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb3VjaFJpcHBsZScsIFsncm9vdCcsICdyaXBwbGUnLCAncmlwcGxlVmlzaWJsZScsICdyaXBwbGVQdWxzYXRlJywgJ2NoaWxkJywgJ2NoaWxkTGVhdmluZycsICdjaGlsZFB1bHNhdGUnXSk7XG5leHBvcnQgZGVmYXVsdCB0b3VjaFJpcHBsZUNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNlbnRlclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl07XG5cbmxldCBfID0gdCA9PiB0LFxuICAgIF90LFxuICAgIF90MixcbiAgICBfdDMsXG4gICAgX3Q0O1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbmltcG9ydCB0b3VjaFJpcHBsZUNsYXNzZXMgZnJvbSAnLi90b3VjaFJpcHBsZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IGNvbnN0IERFTEFZX1JJUFBMRSA9IDgwO1xuY29uc3QgZW50ZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgICBvcGFjaXR5OiAwLjE7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIG9wYWNpdHk6IDAuMztcbiAgfVxuYCkpO1xuY29uc3QgZXhpdEtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5gKSk7XG5jb25zdCBwdWxzYXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QzIHx8IChfdDMgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuXG4gIDUwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmApKTtcbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgc2tpcFN4OiB0cnVlXG59KSh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgekluZGV4OiAwLFxuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG59KTsgLy8gVGhpcyBgc3R5bGVkKClgIGZ1bmN0aW9uIGludm9rZXMga2V5ZnJhbWVzLiBgc3R5bGVkLWNvbXBvbmVudHNgIG9ubHkgc3VwcG9ydHMga2V5ZnJhbWVzXG4vLyBpbiBzdHJpbmcgdGVtcGxhdGVzLiBEbyBub3QgY29udmVydCB0aGVzZSBzdHlsZXMgaW4gSlMgb2JqZWN0IGFzIGl0IHdpbGwgYnJlYWsuXG5cbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJpcHBsZSA9IHN0eWxlZChSaXBwbGUsIHtcbiAgbmFtZTogJ011aVRvdWNoUmlwcGxlJyxcbiAgc2xvdDogJ1JpcHBsZSdcbn0pKF90NCB8fCAoX3Q0ID0gX2BcbiAgb3BhY2l0eTogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuXG4gICYuJHswfSB7XG4gICAgb3BhY2l0eTogMC4zO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAkezB9bXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgfVxuXG4gICYuJHswfSB7XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAkezB9bXM7XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xuICB9XG5cbiAgJiAuJHswfSB7XG4gICAgb3BhY2l0eTogMDtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICB9XG5cbiAgJiAuJHswfSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIC8qIEBub2ZsaXAgKi9cbiAgICBsZWZ0OiAwcHg7XG4gICAgdG9wOiAwO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMjUwMG1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAyMDBtcztcbiAgfVxuYCksIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCBlbnRlcktleWZyYW1lLCBEVVJBVElPTiwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlciwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRMZWF2aW5nLCBleGl0S2V5ZnJhbWUsIERVUkFUSU9OLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkUHVsc2F0ZSwgcHVsc2F0ZUtleWZyYW1lLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCk7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogVE9ETyB2NTogTWFrZSBwcml2YXRlXG4gKi9cblxuY29uc3QgVG91Y2hSaXBwbGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUb3VjaFJpcHBsZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjZW50ZXI6IGNlbnRlclByb3AgPSBmYWxzZSxcbiAgICBjbGFzc2VzID0ge30sXG4gICAgY2xhc3NOYW1lXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBbcmlwcGxlcywgc2V0UmlwcGxlc10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG4gIGNvbnN0IG5leHRLZXkgPSBSZWFjdC51c2VSZWYoMCk7XG4gIGNvbnN0IHJpcHBsZUNhbGxiYWNrID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyaXBwbGVDYWxsYmFjay5jdXJyZW50KSB7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50KCk7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIFtyaXBwbGVzXSk7IC8vIFVzZWQgdG8gZmlsdGVyIG91dCBtb3VzZSBlbXVsYXRlZCBldmVudHMgb24gbW9iaWxlLlxuXG4gIGNvbnN0IGlnbm9yaW5nTW91c2VEb3duID0gUmVhY3QudXNlUmVmKGZhbHNlKTsgLy8gV2UgdXNlIGEgdGltZXIgaW4gb3JkZXIgdG8gb25seSBzaG93IHRoZSByaXBwbGVzIGZvciB0b3VjaCBcImNsaWNrXCIgbGlrZSBldmVudHMuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gZGlzcGxheSB0aGUgcmlwcGxlIGZvciB0b3VjaCBzY3JvbGwgZXZlbnRzLlxuXG4gIGNvbnN0IHN0YXJ0VGltZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgaXMgdGhlIGhvb2sgY2FsbGVkIG9uY2UgdGhlIHByZXZpb3VzIHRpbWVvdXQgaXMgcmVhZHkuXG5cbiAgY29uc3Qgc3RhcnRUaW1lckNvbW1pdCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgY29udGFpbmVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIGNvbnN0IHN0YXJ0Q29tbWl0ID0gUmVhY3QudXNlQ2FsbGJhY2socGFyYW1zID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlLFxuICAgICAgcmlwcGxlWCxcbiAgICAgIHJpcHBsZVksXG4gICAgICByaXBwbGVTaXplLFxuICAgICAgY2JcbiAgICB9ID0gcGFyYW1zO1xuICAgIHNldFJpcHBsZXMob2xkUmlwcGxlcyA9PiBbLi4ub2xkUmlwcGxlcywgLyojX19QVVJFX18qL19qc3goVG91Y2hSaXBwbGVSaXBwbGUsIHtcbiAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgcmlwcGxlOiBjbHN4KGNsYXNzZXMucmlwcGxlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlKSxcbiAgICAgICAgcmlwcGxlVmlzaWJsZTogY2xzeChjbGFzc2VzLnJpcHBsZVZpc2libGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVWaXNpYmxlKSxcbiAgICAgICAgcmlwcGxlUHVsc2F0ZTogY2xzeChjbGFzc2VzLnJpcHBsZVB1bHNhdGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVQdWxzYXRlKSxcbiAgICAgICAgY2hpbGQ6IGNsc3goY2xhc3Nlcy5jaGlsZCwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkKSxcbiAgICAgICAgY2hpbGRMZWF2aW5nOiBjbHN4KGNsYXNzZXMuY2hpbGRMZWF2aW5nLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRMZWF2aW5nKSxcbiAgICAgICAgY2hpbGRQdWxzYXRlOiBjbHN4KGNsYXNzZXMuY2hpbGRQdWxzYXRlLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRQdWxzYXRlKVxuICAgICAgfSxcbiAgICAgIHRpbWVvdXQ6IERVUkFUSU9OLFxuICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZVxuICAgIH0sIG5leHRLZXkuY3VycmVudCldKTtcbiAgICBuZXh0S2V5LmN1cnJlbnQgKz0gMTtcbiAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gY2I7XG4gIH0sIFtjbGFzc2VzXSk7XG4gIGNvbnN0IHN0YXJ0ID0gUmVhY3QudXNlQ2FsbGJhY2soKGV2ZW50ID0ge30sIG9wdGlvbnMgPSB7fSwgY2IpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlID0gZmFsc2UsXG4gICAgICBjZW50ZXIgPSBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgIGZha2VFbGVtZW50ID0gZmFsc2UgLy8gRm9yIHRlc3QgcHVycG9zZXNcblxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQpIHtcbiAgICAgIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50ID0gZmFrZUVsZW1lbnQgPyBudWxsIDogY29udGFpbmVyLmN1cnJlbnQ7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQgPyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwXG4gICAgfTsgLy8gR2V0IHRoZSBzaXplIG9mIHRoZSByaXBwbGVcblxuICAgIGxldCByaXBwbGVYO1xuICAgIGxldCByaXBwbGVZO1xuICAgIGxldCByaXBwbGVTaXplO1xuXG4gICAgaWYgKGNlbnRlciB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdIDogZXZlbnQ7XG4gICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChjbGllbnRYIC0gcmVjdC5sZWZ0KTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKGNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgfVxuXG4gICAgaWYgKGNlbnRlcikge1xuICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydCgoMiAqIHJlY3Qud2lkdGggKiogMiArIHJlY3QuaGVpZ2h0ICoqIDIpIC8gMyk7IC8vIEZvciBzb21lIHJlYXNvbiB0aGUgYW5pbWF0aW9uIGlzIGJyb2tlbiBvbiBNb2JpbGUgQ2hyb21lIGlmIHRoZSBzaXplIGlzIGV2ZW4uXG5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIGNvbnN0IHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KHNpemVYICoqIDIgKyBzaXplWSAqKiAyKTtcbiAgICB9IC8vIFRvdWNoZSBkZXZpY2VzXG5cblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAvLyBjaGVjayB0aGF0IHRoaXMgaXNuJ3QgYW5vdGhlciB0b3VjaHN0YXJ0IGR1ZSB0byBtdWx0aXRvdWNoXG4gICAgICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCBvbmx5IGNsZWFyIGEgc2luZ2xlIHRpbWVyIHdoZW4gdW5tb3VudGluZyB3aGlsZSB0d29cbiAgICAgIC8vIGFyZSBydW5uaW5nXG4gICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9ICgpID0+IHtcbiAgICAgICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYLFxuICAgICAgICByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplLFxuICAgICAgICBjYlxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY2VudGVyUHJvcCwgc3RhcnRDb21taXRdKTtcbiAgY29uc3QgcHVsc2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzdGFydCh7fSwge1xuICAgICAgcHVsc2F0ZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbc3RhcnRdKTtcbiAgY29uc3Qgc3RvcCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCwgY2IpID0+IHtcbiAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTsgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cblxuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN0b3AoZXZlbnQsIGNiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgc2V0UmlwcGxlcyhvbGRSaXBwbGVzID0+IHtcbiAgICAgIGlmIChvbGRSaXBwbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG9sZFJpcHBsZXMuc2xpY2UoMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHtcbiAgICBwdWxzYXRlLFxuICAgIHN0YXJ0LFxuICAgIHN0b3BcbiAgfSksIFtwdWxzYXRlLCBzdGFydCwgc3RvcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVG91Y2hSaXBwbGVSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgdG91Y2hSaXBwbGVDbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiBjb250YWluZXJcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgICBleGl0OiB0cnVlLFxuICAgICAgY2hpbGRyZW46IHJpcHBsZXNcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvdWNoUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBzdGFydHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY29tcG9uZW50XG4gICAqIHJhdGhlciB0aGFuIGF0IHRoZSBwb2ludCBvZiBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG91Y2hSaXBwbGU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzZXMsXG4gICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgIHJpcHBsZVgsXG4gICAgcmlwcGxlWSxcbiAgICByaXBwbGVTaXplLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FeGl0ZWQsXG4gICAgdGltZW91dFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtsZWF2aW5nLCBzZXRMZWF2aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWUsIGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgY29uc3QgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgY29uc3QgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuXG4gIGlmICghaW5Qcm9wICYmICFsZWF2aW5nKSB7XG4gICAgc2V0TGVhdmluZyh0cnVlKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpblByb3AgJiYgb25FeGl0ZWQgIT0gbnVsbCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dChvbkV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW29uRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICB9KVxuICB9KTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCdXR0b25CYXNlJywgc2xvdCk7XG59XG5jb25zdCBidXR0b25CYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbkJhc2UnLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uQmFzZUNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJMaW5rQ29tcG9uZW50XCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uQ29udGV4dE1lbnVcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiwgcmVmVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgVG91Y2hSaXBwbGUgZnJvbSAnLi9Ub3VjaFJpcHBsZSc7XG5pbXBvcnQgYnV0dG9uQmFzZUNsYXNzZXMsIHsgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYnV0dG9uQmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZm9jdXNWaXNpYmxlICYmICdmb2N1c1Zpc2libGUnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG5cbiAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1Zpc2libGVDbGFzc05hbWUpIHtcbiAgICBjb21wb3NlZENsYXNzZXMucm9vdCArPSBgICR7Zm9jdXNWaXNpYmxlQ2xhc3NOYW1lfWA7XG4gIH1cblxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvbkJhc2VSb290ID0gc3R5bGVkKCdidXR0b24nLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwLFxuICBib3JkZXI6IDAsXG4gIG1hcmdpbjogMCxcbiAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gIGJvcmRlclJhZGl1czogMCxcbiAgcGFkZGluZzogMCxcbiAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICAvLyBSZXNldFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICBjb2xvcjogJ2luaGVyaXQnLFxuICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gIH0sXG4gIFtgJi4ke2J1dHRvbkJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIC8vIERpc2FibGUgbGluayBpbnRlcmFjdGlvbnNcbiAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICB9LFxuICAnQG1lZGlhIHByaW50Jzoge1xuICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gIH1cbn0pO1xuLyoqXG4gKiBgQnV0dG9uQmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGEgYnV0dG9uLlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIGZvY3VzL3JpcHBsZSBsb2dpYy5cbiAqL1xuXG5jb25zdCBCdXR0b25CYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQnV0dG9uQmFzZSdcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGFjdGlvbixcbiAgICBjZW50ZXJSaXBwbGUgPSBmYWxzZSxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50ID0gJ2J1dHRvbicsXG4gICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICBkaXNhYmxlUmlwcGxlID0gZmFsc2UsXG4gICAgZGlzYWJsZVRvdWNoUmlwcGxlID0gZmFsc2UsXG4gICAgZm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICBMaW5rQ29tcG9uZW50ID0gJ2EnLFxuICAgIG9uQmx1cixcbiAgICBvbkNsaWNrLFxuICAgIG9uQ29udGV4dE1lbnUsXG4gICAgb25EcmFnTGVhdmUsXG4gICAgb25Gb2N1cyxcbiAgICBvbkZvY3VzVmlzaWJsZSxcbiAgICBvbktleURvd24sXG4gICAgb25LZXlVcCxcbiAgICBvbk1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwLFxuICAgIG9uVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0LFxuICAgIHRhYkluZGV4ID0gMCxcbiAgICBUb3VjaFJpcHBsZVByb3BzLFxuICAgIHR5cGVcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmOiBmb2N1c1Zpc2libGVSZWZcbiAgfSA9IHVzZUlzRm9jdXNWaXNpYmxlKCk7XG4gIGNvbnN0IFtmb2N1c1Zpc2libGUsIHNldEZvY3VzVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSkge1xuICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gIH1cblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgKCkgPT4gKHtcbiAgICBmb2N1c1Zpc2libGU6ICgpID0+IHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9KSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNSaXBwbGUgJiYgIWRpc2FibGVSaXBwbGUpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlUmlwcGxlLCBmb2N1c1JpcHBsZSwgZm9jdXNWaXNpYmxlXSk7XG5cbiAgZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGVBY3Rpb24sIGV2ZW50Q2FsbGJhY2ssIHNraXBSaXBwbGVBY3Rpb24gPSBkaXNhYmxlVG91Y2hSaXBwbGUpIHtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaWdub3JlID0gc2tpcFJpcHBsZUFjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgaGFuZGxlTW91c2VEb3duID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvbk1vdXNlRG93bik7XG4gIGNvbnN0IGhhbmRsZUNvbnRleHRNZW51ID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uQ29udGV4dE1lbnUpO1xuICBjb25zdCBoYW5kbGVEcmFnTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25EcmFnTGVhdmUpO1xuICBjb25zdCBoYW5kbGVNb3VzZVVwID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uTW91c2VVcCk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZXZlbnQgPT4ge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoRW5kKTtcbiAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hNb3ZlKTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBldmVudCA9PiB7XG4gICAgaGFuZGxlQmx1clZpc2libGUoZXZlbnQpO1xuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcbiAgICBpZiAoIWJ1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICBidXR0b25SZWYuY3VycmVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgfVxuXG4gICAgaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KTtcblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG5cbiAgICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgaXNOb25OYXRpdmVCdXR0b24gPSAoKSA9PiB7XG4gICAgY29uc3QgYnV0dG9uID0gYnV0dG9uUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZik7XG4gIH07XG4gIC8qKlxuICAgKiBJRTExIHNoaW0gZm9yIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L3JlcGVhdFxuICAgKi9cblxuXG4gIGNvbnN0IGtleWRvd25SZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBoYW5kbGVLZXlEb3duID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgIWtleWRvd25SZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0YXJ0KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICdFbnRlcicgJiYgIWRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVLZXlVcCA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIGNhbGxpbmcgcHJldmVudERlZmF1bHQgaW4ga2V5VXAgb24gYSA8YnV0dG9uPiB3aWxsIG5vdCBkaXNwYXRjaCBhIGNsaWNrIGV2ZW50IGlmIFNwYWNlIGlzIHByZXNzZWRcbiAgICAvLyBodHRwczovL2NvZGVzYW5kYm94LmlvL3MvYnV0dG9uLWtleXVwLXByZXZlbnRkZWZhdWx0LWRuN2YwXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5VXApIHtcbiAgICAgIG9uS2V5VXAoZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChvbkNsaWNrICYmIGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBsZXQgQ29tcG9uZW50UHJvcCA9IGNvbXBvbmVudDtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicgJiYgKG90aGVyLmhyZWYgfHwgb3RoZXIudG8pKSB7XG4gICAgQ29tcG9uZW50UHJvcCA9IExpbmtDb21wb25lbnQ7XG4gIH1cblxuICBjb25zdCBidXR0b25Qcm9wcyA9IHt9O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlID09PSB1bmRlZmluZWQgPyAnYnV0dG9uJyA6IHR5cGU7XG4gICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW90aGVyLmhyZWYgJiYgIW90aGVyLnRvKSB7XG4gICAgICBidXR0b25Qcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBidXR0b25Qcm9wc1snYXJpYS1kaXNhYmxlZCddID0gZGlzYWJsZWQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgaGFuZGxlT3duUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIGJ1dHRvblJlZik7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBoYW5kbGVPd25SZWYpO1xuICBjb25zdCBbbW91bnRlZFN0YXRlLCBzZXRNb3VudGVkU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgYGNvbXBvbmVudGAgcHJvcCBwcm92aWRlZCB0byBCdXR0b25CYXNlIGlzIGludmFsaWQuJywgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIGNoaWxkcmVuIHByb3AgaXMgcmVuZGVyZWQgaW4gdGhpcyBjdXN0b20gY29tcG9uZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZW5hYmxlVG91Y2hSaXBwbGVdKTtcbiAgfVxuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjZW50ZXJSaXBwbGUsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVSaXBwbGUsXG4gICAgZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgIGZvY3VzUmlwcGxlLFxuICAgIHRhYkluZGV4LFxuICAgIGZvY3VzVmlzaWJsZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoQnV0dG9uQmFzZVJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogQ29tcG9uZW50UHJvcCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgb25Db250ZXh0TWVudTogaGFuZGxlQ29udGV4dE1lbnUsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd24sXG4gICAgb25Nb3VzZUxlYXZlOiBoYW5kbGVNb3VzZUxlYXZlLFxuICAgIG9uTW91c2VVcDogaGFuZGxlTW91c2VVcCxcbiAgICBvbkRyYWdMZWF2ZTogaGFuZGxlRHJhZ0xlYXZlLFxuICAgIG9uVG91Y2hFbmQ6IGhhbmRsZVRvdWNoRW5kLFxuICAgIG9uVG91Y2hNb3ZlOiBoYW5kbGVUb3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0OiBoYW5kbGVUb3VjaFN0YXJ0LFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IC0xIDogdGFiSW5kZXgsXG4gICAgdHlwZTogdHlwZVxuICB9LCBidXR0b25Qcm9wcywgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCBlbmFibGVUb3VjaFJpcHBsZSA/XG4gICAgLyojX19QVVJFX18qL1xuXG4gICAgLyogVG91Y2hSaXBwbGUgaXMgb25seSBuZWVkZWQgY2xpZW50LXNpZGUsIHgyIGJvb3N0IG9uIHRoZSBzZXJ2ZXIuICovXG4gICAgX2pzeChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiByaXBwbGVSZWYsXG4gICAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICAgIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGxdXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uQmFzZS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYGZvY3VzVmlzaWJsZSgpYCBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgYXJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG91Y2ggcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgaGF2ZSBhIGtleWJvYXJkIGZvY3VzIHJpcHBsZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGlkZW50aWZ5IHdoaWNoIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWlucyB0aGUgZm9jdXMgdGhyb3VnaCBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvSEVBRC9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgYSBsaW5rIHdoZW4gdGhlIGBocmVmYCBwcm9wIGlzIHByb3ZpZGVkLlxuICAgKiBAZGVmYXVsdCAnYSdcbiAgICovXG4gIExpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ29udGV4dE1lbnU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkRyYWdMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaE1vdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICBUb3VjaFJpcHBsZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b25CYXNlOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXREaXZpZGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlEaXZpZGVyJywgc2xvdCk7XG59XG5jb25zdCBkaXZpZGVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aURpdmlkZXInLCBbJ3Jvb3QnLCAnYWJzb2x1dGUnLCAnZnVsbFdpZHRoJywgJ2luc2V0JywgJ21pZGRsZScsICdmbGV4SXRlbScsICdsaWdodCcsICd2ZXJ0aWNhbCcsICd3aXRoQ2hpbGRyZW4nLCAnd2l0aENoaWxkcmVuVmVydGljYWwnLCAndGV4dEFsaWduUmlnaHQnLCAndGV4dEFsaWduTGVmdCcsICd3cmFwcGVyJywgJ3dyYXBwZXJWZXJ0aWNhbCddKTtcbmV4cG9ydCBkZWZhdWx0IGRpdmlkZXJDbGFzc2VzOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbUljb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtSWNvbicsIHNsb3QpO1xufVxuY29uc3QgbGlzdEl0ZW1JY29uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtSWNvbicsIFsncm9vdCcsICdhbGlnbkl0ZW1zRmxleFN0YXJ0J10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1JY29uQ2xhc3NlczsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdEl0ZW1UZXh0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaXN0SXRlbVRleHQnLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtVGV4dENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbVRleHQnLCBbJ3Jvb3QnLCAnbXVsdGlsaW5lJywgJ2RlbnNlJywgJ2luc2V0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1UZXh0Q2xhc3NlczsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVudUl0ZW1VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU1lbnVJdGVtJywgc2xvdCk7XG59XG5jb25zdCBtZW51SXRlbUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlNZW51SXRlbScsIFsncm9vdCcsICdmb2N1c1Zpc2libGUnLCAnZGVuc2UnLCAnZGlzYWJsZWQnLCAnZGl2aWRlcicsICdndXR0ZXJzJywgJ3NlbGVjdGVkJ10pO1xuZXhwb3J0IGRlZmF1bHQgbWVudUl0ZW1DbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhdXRvRm9jdXNcIiwgXCJjb21wb25lbnRcIiwgXCJkZW5zZVwiLCBcImRpdmlkZXJcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcInJvbGVcIiwgXCJ0YWJJbmRleFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsgZGl2aWRlckNsYXNzZXMgfSBmcm9tICcuLi9EaXZpZGVyJztcbmltcG9ydCB7IGxpc3RJdGVtSWNvbkNsYXNzZXMgfSBmcm9tICcuLi9MaXN0SXRlbUljb24nO1xuaW1wb3J0IHsgbGlzdEl0ZW1UZXh0Q2xhc3NlcyB9IGZyb20gJy4uL0xpc3RJdGVtVGV4dCc7XG5pbXBvcnQgbWVudUl0ZW1DbGFzc2VzLCB7IGdldE1lbnVJdGVtVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tZW51SXRlbUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBvdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2UsIG93bmVyU3RhdGUuZGl2aWRlciAmJiBzdHlsZXMuZGl2aWRlciwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYgc3R5bGVzLmd1dHRlcnNdO1xufTtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGRlbnNlLFxuICAgIGRpdmlkZXIsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgc2VsZWN0ZWQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGVuc2UgJiYgJ2RlbnNlJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJywgZGl2aWRlciAmJiAnZGl2aWRlcicsIHNlbGVjdGVkICYmICdzZWxlY3RlZCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRNZW51SXRlbVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IE1lbnVJdGVtUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlNZW51SXRlbScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5MSwge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgbWluSGVpZ2h0OiA0OCxcbiAgcGFkZGluZ1RvcDogNixcbiAgcGFkZGluZ0JvdHRvbTogNixcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAxNixcbiAgcGFkZGluZ1JpZ2h0OiAxNlxufSwgb3duZXJTdGF0ZS5kaXZpZGVyICYmIHtcbiAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5kaXZpZGVyfWAsXG4gIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG59LCB7XG4gICcmOmhvdmVyJzoge1xuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3ZlcixcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLnNlbGVjdGVkfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICBbYCYuJHttZW51SXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LFxuICBbYCYuJHttZW51SXRlbUNsYXNzZXMuc2VsZWN0ZWR9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KVxuICAgIH1cbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNcbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH0sXG4gIFtgJiArIC4ke2RpdmlkZXJDbGFzc2VzLnJvb3R9YF06IHtcbiAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDEpXG4gIH0sXG4gIFtgJiArIC4ke2RpdmlkZXJDbGFzc2VzLmluc2V0fWBdOiB7XG4gICAgbWFyZ2luTGVmdDogNTJcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMucm9vdH1gXToge1xuICAgIG1hcmdpblRvcDogMCxcbiAgICBtYXJnaW5Cb3R0b206IDBcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMuaW5zZXR9YF06IHtcbiAgICBwYWRkaW5nTGVmdDogMzZcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtSWNvbkNsYXNzZXMucm9vdH1gXToge1xuICAgIG1pbldpZHRoOiAzNlxuICB9XG59LCAhb3duZXJTdGF0ZS5kZW5zZSAmJiB7XG4gIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICBtaW5IZWlnaHQ6ICdhdXRvJ1xuICB9XG59LCBvd25lclN0YXRlLmRlbnNlICYmIF9leHRlbmRzKHtcbiAgbWluSGVpZ2h0OiAzMixcbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9jb21wb25lbnRzL21lbnVzI3NwZWNzID4gRGVuc2VcbiAgcGFkZGluZ1RvcDogNCxcbiAgcGFkZGluZ0JvdHRvbTogNFxufSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBbYCYgLiR7bGlzdEl0ZW1JY29uQ2xhc3Nlcy5yb290fSBzdmdgXToge1xuICAgIGZvbnRTaXplOiAnMS4yNXJlbSdcbiAgfVxufSkpKTtcbmNvbnN0IE1lbnVJdGVtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUl0ZW0oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aU1lbnVJdGVtJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgY29tcG9uZW50ID0gJ2xpJyxcbiAgICBkZW5zZSA9IGZhbHNlLFxuICAgIGRpdmlkZXIgPSBmYWxzZSxcbiAgICBkaXNhYmxlR3V0dGVycyA9IGZhbHNlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICByb2xlID0gJ21lbnVpdGVtJyxcbiAgICB0YWJJbmRleDogdGFiSW5kZXhQcm9wXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIGNvbnN0IGNoaWxkQ29udGV4dCA9IHtcbiAgICBkZW5zZTogZGVuc2UgfHwgY29udGV4dC5kZW5zZSB8fCBmYWxzZSxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9O1xuICBjb25zdCBtZW51SXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGlmIChtZW51SXRlbVJlZi5jdXJyZW50KSB7XG4gICAgICAgIG1lbnVJdGVtUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBNZW51SXRlbSB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkZW5zZTogY2hpbGRDb250ZXh0LmRlbnNlLFxuICAgIGRpdmlkZXIsXG4gICAgZGlzYWJsZUd1dHRlcnNcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihtZW51SXRlbVJlZiwgcmVmKTtcbiAgbGV0IHRhYkluZGV4O1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcCAhPT0gdW5kZWZpbmVkID8gdGFiSW5kZXhQcm9wIDogLTE7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChNZW51SXRlbVJvb3QsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgcm9sZTogcm9sZSxcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWUpXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51SXRlbS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogRm9jdXMgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBpZiB0aGUgdmFsdWUgY2hhbmdlcyBmcm9tIGZhbHNlIHRvIHRydWUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb21wYWN0IHZlcnRpY2FsIHBhZGRpbmcgZGVzaWduZWQgZm9yIGtleWJvYXJkIGFuZCBtb3VzZSBpbnB1dCBpcyB1c2VkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBNZW51IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSAxcHggbGlnaHQgYm9yZGVyIGlzIGFkZGVkIHRvIHRoZSBib3R0b20gb2YgdGhlIG1lbnUgaXRlbS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpdmlkZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudUl0ZW07IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZvcm1Db250cm9sJywgc2xvdCk7XG59XG5jb25zdCBmb3JtQ29udHJvbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtQ29udHJvbCcsIFsncm9vdCcsICdtYXJnaW5Ob25lJywgJ21hcmdpbk5vcm1hbCcsICdtYXJnaW5EZW5zZScsICdmdWxsV2lkdGgnLCAnZGlzYWJsZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtQ29udHJvbENsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZm9jdXNlZFwiLCBcImZ1bGxXaWR0aFwiLCBcImhpZGRlbkxhYmVsXCIsIFwibWFyZ2luXCIsIFwicmVxdWlyZWRcIiwgXCJzaXplXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBpc0ZpbGxlZCwgaXNBZG9ybmVkU3RhcnQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgaXNNdWlFbGVtZW50IGZyb20gJy4uL3V0aWxzL2lzTXVpRWxlbWVudCc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4vRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB7IGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL2Zvcm1Db250cm9sQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBtYXJnaW4sXG4gICAgZnVsbFdpZHRoXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBtYXJnaW4gIT09ICdub25lJyAmJiBgbWFyZ2luJHtjYXBpdGFsaXplKG1hcmdpbil9YCwgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgRm9ybUNvbnRyb2xSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlGb3JtQ29udHJvbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6ICh7XG4gICAgb3duZXJTdGF0ZVxuICB9LCBzdHlsZXMpID0+IHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0eWxlcy5yb290LCBzdHlsZXNbYG1hcmdpbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLm1hcmdpbil9YF0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHN0eWxlcy5mdWxsV2lkdGgpO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgLy8gUmVzZXQgZmllbGRzZXQgZGVmYXVsdCBzdHlsZS5cbiAgbWluV2lkdGg6IDAsXG4gIHBhZGRpbmc6IDAsXG4gIG1hcmdpbjogMCxcbiAgYm9yZGVyOiAwLFxuICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xufSwgb3duZXJTdGF0ZS5tYXJnaW4gPT09ICdub3JtYWwnICYmIHtcbiAgbWFyZ2luVG9wOiAxNixcbiAgbWFyZ2luQm90dG9tOiA4XG59LCBvd25lclN0YXRlLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiB7XG4gIG1hcmdpblRvcDogOCxcbiAgbWFyZ2luQm90dG9tOiA0XG59LCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiB7XG4gIHdpZHRoOiAnMTAwJSdcbn0pKTtcbi8qKlxuICogUHJvdmlkZXMgY29udGV4dCBzdWNoIGFzIGZpbGxlZC9mb2N1c2VkL2Vycm9yL3JlcXVpcmVkIGZvciBmb3JtIGlucHV0cy5cbiAqIFJlbHlpbmcgb24gdGhlIGNvbnRleHQgcHJvdmlkZXMgaGlnaCBmbGV4aWJpbGl0eSBhbmQgZW5zdXJlcyB0aGF0IHRoZSBzdGF0ZSBhbHdheXMgc3RheXNcbiAqIGNvbnNpc3RlbnQgYWNyb3NzIHRoZSBjaGlsZHJlbiBvZiB0aGUgYEZvcm1Db250cm9sYC5cbiAqIFRoaXMgY29udGV4dCBpcyB1c2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAgLSBGb3JtTGFiZWxcbiAqICAtIEZvcm1IZWxwZXJUZXh0XG4gKiAgLSBJbnB1dFxuICogIC0gSW5wdXRMYWJlbFxuICpcbiAqIFlvdSBjYW4gZmluZCBvbmUgY29tcG9zaXRpb24gZXhhbXBsZSBiZWxvdyBhbmQgbW9yZSBnb2luZyB0byBbdGhlIGRlbW9zXSgvY29tcG9uZW50cy90ZXh0LWZpZWxkcy8jY29tcG9uZW50cykuXG4gKlxuICogYGBganN4XG4gKiA8Rm9ybUNvbnRyb2w+XG4gKiAgIDxJbnB1dExhYmVsIGh0bWxGb3I9XCJteS1pbnB1dFwiPkVtYWlsIGFkZHJlc3M8L0lucHV0TGFiZWw+XG4gKiAgIDxJbnB1dCBpZD1cIm15LWlucHV0XCIgYXJpYS1kZXNjcmliZWRieT1cIm15LWhlbHBlci10ZXh0XCIgLz5cbiAqICAgPEZvcm1IZWxwZXJUZXh0IGlkPVwibXktaGVscGVyLXRleHRcIj5XZSdsbCBuZXZlciBzaGFyZSB5b3VyIGVtYWlsLjwvRm9ybUhlbHBlclRleHQ+XG4gKiA8L0Zvcm1Db250cm9sPlxuICogYGBgXG4gKlxuICog4pqg77iPIE9ubHkgb25lIGBJbnB1dEJhc2VgIGNhbiBiZSB1c2VkIHdpdGhpbiBhIEZvcm1Db250cm9sIGJlY2F1c2UgaXQgY3JlYXRlIHZpc3VhbCBpbmNvbnNpc3RlbmNpZXMuXG4gKiBGb3IgaW5zdGFuY2UsIG9ubHkgb25lIGlucHV0IGNhbiBiZSBmb2N1c2VkIGF0IHRoZSBzYW1lIHRpbWUsIHRoZSBzdGF0ZSBzaG91bGRuJ3QgYmUgc2hhcmVkLlxuICovXG5cbmNvbnN0IEZvcm1Db250cm9sID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUNvbnRyb2woaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUZvcm1Db250cm9sJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgZXJyb3IgPSBmYWxzZSxcbiAgICBmb2N1c2VkOiB2aXN1YWxseUZvY3VzZWQsXG4gICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgaGlkZGVuTGFiZWwgPSBmYWxzZSxcbiAgICBtYXJnaW4gPSAnbm9uZScsXG4gICAgcmVxdWlyZWQgPSBmYWxzZSxcbiAgICBzaXplID0gJ21lZGl1bScsXG4gICAgdmFyaWFudCA9ICdvdXRsaW5lZCdcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsLFxuICAgIG1hcmdpbixcbiAgICByZXF1aXJlZCxcbiAgICBzaXplLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBbYWRvcm5lZFN0YXJ0LCBzZXRBZG9ybmVkU3RhcnRdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgZmluZCB0aGUgSW5wdXQgaW4gb3JkZXJcbiAgICAvLyB0byBmdWxseSBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICBsZXQgaW5pdGlhbEFkb3JuZWRTdGFydCA9IGZhbHNlO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmICghaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlucHV0ID0gaXNNdWlFbGVtZW50KGNoaWxkLCBbJ1NlbGVjdCddKSA/IGNoaWxkLnByb3BzLmlucHV0IDogY2hpbGQ7XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIGlzQWRvcm5lZFN0YXJ0KGlucHV0LnByb3BzKSkge1xuICAgICAgICAgIGluaXRpYWxBZG9ybmVkU3RhcnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSk7XG4gIGNvbnN0IFtmaWxsZWQsIHNldEZpbGxlZF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGxldCBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRmlsbGVkKGNoaWxkLnByb3BzLCB0cnVlKSkge1xuICAgICAgICAgIGluaXRpYWxGaWxsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEZpbGxlZDtcbiAgfSk7XG4gIGNvbnN0IFtmb2N1c2VkU3RhdGUsIHNldEZvY3VzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c2VkU3RhdGUpIHtcbiAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGZvY3VzZWQgPSB2aXN1YWxseUZvY3VzZWQgIT09IHVuZGVmaW5lZCAmJiAhZGlzYWJsZWQgPyB2aXN1YWxseUZvY3VzZWQgOiBmb2N1c2VkU3RhdGU7XG4gIGxldCByZWdpc3RlckVmZmVjdDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHJlZ2lzdGVyZWRJbnB1dCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgICByZWdpc3RlckVmZmVjdCA9ICgpID0+IHtcbiAgICAgIGlmIChyZWdpc3RlcmVkSW5wdXQuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGVyZSBhcmUgbXVsdGlwbGUgYElucHV0QmFzZWAgY29tcG9uZW50cyBpbnNpZGUgYSBGb3JtQ29udHJvbC4nLCAnVGhpcyBjcmVhdGVzIHZpc3VhbCBpbmNvbnNpc3RlbmNpZXMsIG9ubHkgdXNlIG9uZSBgSW5wdXRCYXNlYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG5cbiAgICAgIHJlZ2lzdGVyZWRJbnB1dC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHJlZ2lzdGVyZWRJbnB1dC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICBjb25zdCBvbkZpbGxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRGaWxsZWQodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgY29uc3Qgb25FbXB0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRGaWxsZWQoZmFsc2UpO1xuICB9LCBbXSk7XG4gIGNvbnN0IGNoaWxkQ29udGV4dCA9IHtcbiAgICBhZG9ybmVkU3RhcnQsXG4gICAgc2V0QWRvcm5lZFN0YXJ0LFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGZpbGxlZCxcbiAgICBmb2N1c2VkLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbCxcbiAgICBzaXplLFxuICAgIG9uQmx1cjogKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgfSxcbiAgICBvbkVtcHR5LFxuICAgIG9uRmlsbGVkLFxuICAgIG9uRm9jdXM6ICgpID0+IHtcbiAgICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfSxcbiAgICByZWdpc3RlckVmZmVjdCxcbiAgICByZXF1aXJlZCxcbiAgICB2YXJpYW50XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUNvbnRyb2wucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwsIGlucHV0IGFuZCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc3BsYXllZCBpbiBmb2N1c2VkIHN0YXRlLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGhpZGRlbi5cbiAgICogVGhpcyBpcyB1c2VkIHRvIGluY3JlYXNlIGRlbnNpdHkgZm9yIGEgYEZpbGxlZElucHV0YC5cbiAgICogQmUgc3VyZSB0byBhZGQgYGFyaWEtbGFiZWxgIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBoaWRkZW5MYWJlbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAgb3IgYG5vcm1hbGAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcgb2YgdGhpcyBhbmQgY29udGFpbmVkIGNvbXBvbmVudHMuXG4gICAqIEBkZWZhdWx0ICdub25lJ1xuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJywgJ25vcm1hbCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBgaW5wdXRgIGlzIHJlcXVpcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnb3V0bGluZWQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbDsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdCcsIHNsb3QpO1xufVxuY29uc3QgbGlzdENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0JywgWydyb290JywgJ3BhZGRpbmcnLCAnZGVuc2UnLCAnc3ViaGVhZGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdENsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlUGFkZGluZ1wiLCBcInN1YmhlYWRlclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi9MaXN0Q29udGV4dCc7XG5pbXBvcnQgeyBnZXRMaXN0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlUGFkZGluZyxcbiAgICBkZW5zZSxcbiAgICBzdWJoZWFkZXJcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlUGFkZGluZyAmJiAncGFkZGluZycsIGRlbnNlICYmICdkZW5zZScsIHN1YmhlYWRlciAmJiAnc3ViaGVhZGVyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaXN0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IExpc3RSb290ID0gc3R5bGVkKCd1bCcsIHtcbiAgbmFtZTogJ011aUxpc3QnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYgc3R5bGVzLnBhZGRpbmcsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlLCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiBzdHlsZXMuc3ViaGVhZGVyXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYge1xuICBwYWRkaW5nVG9wOiA4LFxuICBwYWRkaW5nQm90dG9tOiA4XG59LCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiB7XG4gIHBhZGRpbmdUb3A6IDBcbn0pKTtcbmNvbnN0IExpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaXN0J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCA9ICd1bCcsXG4gICAgZGVuc2UgPSBmYWxzZSxcbiAgICBkaXNhYmxlUGFkZGluZyA9IGZhbHNlLFxuICAgIHN1YmhlYWRlclxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBkZW5zZVxuICB9KSwgW2RlbnNlXSk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBkZW5zZSxcbiAgICBkaXNhYmxlUGFkZGluZ1xuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBbc3ViaGVhZGVyLCBjaGlsZHJlbl1cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3QucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgaXMgdXNlZCBmb3JcbiAgICogdGhlIGxpc3QgYW5kIGxpc3QgaXRlbXMuXG4gICAqIFRoZSBwcm9wIGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlIGBkZW5zZWAgY29udGV4dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHN1YmhlYWRlciwgbm9ybWFsbHkgYExpc3RTdWJoZWFkZXJgLlxuICAgKi9cbiAgc3ViaGVhZGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdDsiLCIvLyBBIGNoYW5nZSBvZiB0aGUgYnJvd3NlciB6b29tIGNoYW5nZSB0aGUgc2Nyb2xsYmFyIHNpemUuXG4vLyBDcmVkaXQgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvNDg4ZmQ4YWZjNTM1Y2EzYTZhZDRkYzU4MWY1ZTg5MjE3YjZhMzZhYy9qcy9zcmMvdXRpbC9zY3JvbGxiYXIuanMjTDE0LUwxOFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyU2l6ZShkb2MpIHtcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9pbm5lcldpZHRoI3VzYWdlX25vdGVzXG4gIGNvbnN0IGRvY3VtZW50V2lkdGggPSBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICByZXR1cm4gTWF0aC5hYnMod2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudFdpZHRoKTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9nZXRTY3JvbGxiYXJTaXplIGFzIGdldFNjcm9sbGJhclNpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGdldFNjcm9sbGJhclNpemU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvbnNcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvRm9jdXNJdGVtXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlXCIsIFwiZGlzYWJsZUxpc3RXcmFwXCIsIFwib25LZXlEb3duXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJy4uL3V0aWxzL2dldFNjcm9sbGJhclNpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuZnVuY3Rpb24gbmV4dEl0ZW0obGlzdCwgaXRlbSwgZGlzYWJsZUxpc3RXcmFwKSB7XG4gIGlmIChsaXN0ID09PSBpdGVtKSB7XG4gICAgcmV0dXJuIGxpc3QuZmlyc3RDaGlsZDtcbiAgfVxuXG4gIGlmIChpdGVtICYmIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0LmZpcnN0Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHByZXZpb3VzSXRlbShsaXN0LCBpdGVtLCBkaXNhYmxlTGlzdFdyYXApIHtcbiAgaWYgKGxpc3QgPT09IGl0ZW0pIHtcbiAgICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbGlzdC5maXJzdENoaWxkIDogbGlzdC5sYXN0Q2hpbGQ7XG4gIH1cblxuICBpZiAoaXRlbSAmJiBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0Lmxhc3RDaGlsZDtcbn1cblxuZnVuY3Rpb24gdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkge1xuICBpZiAodGV4dENyaXRlcmlhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGxldCB0ZXh0ID0gbmV4dEZvY3VzLmlubmVyVGV4dDtcblxuICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8ganNkb20gZG9lc24ndCBzdXBwb3J0IGlubmVyVGV4dFxuICAgIHRleHQgPSBuZXh0Rm9jdXMudGV4dENvbnRlbnQ7XG4gIH1cblxuICB0ZXh0ID0gdGV4dC50cmltKCkudG9Mb3dlckNhc2UoKTtcblxuICBpZiAodGV4dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodGV4dENyaXRlcmlhLnJlcGVhdGluZykge1xuICAgIHJldHVybiB0ZXh0WzBdID09PSB0ZXh0Q3JpdGVyaWEua2V5c1swXTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0LmluZGV4T2YodGV4dENyaXRlcmlhLmtleXMuam9pbignJykpID09PSAwO1xufVxuXG5mdW5jdGlvbiBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHRyYXZlcnNhbEZ1bmN0aW9uLCB0ZXh0Q3JpdGVyaWEpIHtcbiAgbGV0IHdyYXBwZWRPbmNlID0gZmFsc2U7XG4gIGxldCBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBjdXJyZW50Rm9jdXMsIGN1cnJlbnRGb2N1cyA/IGRpc2FibGVMaXN0V3JhcCA6IGZhbHNlKTtcblxuICB3aGlsZSAobmV4dEZvY3VzKSB7XG4gICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wLlxuICAgIGlmIChuZXh0Rm9jdXMgPT09IGxpc3QuZmlyc3RDaGlsZCkge1xuICAgICAgaWYgKHdyYXBwZWRPbmNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlZE9uY2UgPSB0cnVlO1xuICAgIH0gLy8gU2FtZSBsb2dpYyBhcyB1c2VBdXRvY29tcGxldGUuanNcblxuXG4gICAgY29uc3QgbmV4dEZvY3VzRGlzYWJsZWQgPSBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID8gZmFsc2UgOiBuZXh0Rm9jdXMuZGlzYWJsZWQgfHwgbmV4dEZvY3VzLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZSc7XG5cbiAgICBpZiAoIW5leHRGb2N1cy5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykgfHwgIXRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpIHx8IG5leHRGb2N1c0Rpc2FibGVkKSB7XG4gICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnQuXG4gICAgICBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBuZXh0Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRGb2N1cy5mb2N1cygpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBBIHBlcm1hbmVudGx5IGRpc3BsYXllZCBtZW51IGZvbGxvd2luZyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLyNtZW51YnV0dG9uLlxuICogSXQncyBleHBvc2VkIHRvIGhlbHAgY3VzdG9taXphdGlvbiBvZiB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgY29tcG9uZW50IGlmIHlvdVxuICogdXNlIGl0IHNlcGFyYXRlbHkgeW91IG5lZWQgdG8gbW92ZSBmb2N1cyBpbnRvIHRoZSBjb21wb25lbnQgbWFudWFsbHkuIE9uY2VcbiAqIHRoZSBmb2N1cyBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgaXQgaXMgZnVsbHkga2V5Ym9hcmQgYWNjZXNzaWJsZS5cbiAqL1xuXG5cbmNvbnN0IE1lbnVMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUxpc3QocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgLy8gcHJpdmF0ZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgYWN0aW9ucyxcbiAgICBhdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBhdXRvRm9jdXNJdGVtID0gZmFsc2UsXG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPSBmYWxzZSxcbiAgICBkaXNhYmxlTGlzdFdyYXAgPSBmYWxzZSxcbiAgICBvbktleURvd24sXG4gICAgdmFyaWFudCA9ICdzZWxlY3RlZE1lbnUnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBsaXN0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCB0ZXh0Q3JpdGVyaWFSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIGtleXM6IFtdLFxuICAgIHJlcGVhdGluZzogdHJ1ZSxcbiAgICBwcmV2aW91c0tleU1hdGNoZWQ6IHRydWUsXG4gICAgbGFzdFRpbWU6IG51bGxcbiAgfSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBsaXN0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb25zLCAoKSA9PiAoe1xuICAgIGFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyOiAoY29udGFpbmVyRWxlbWVudCwgdGhlbWUpID0+IHtcbiAgICAgIC8vIExldCdzIGlnbm9yZSB0aGF0IHBpZWNlIG9mIGxvZ2ljIGlmIHVzZXJzIGFyZSBhbHJlYWR5IG92ZXJyaWRpbmcgdGhlIHdpZHRoXG4gICAgICAvLyBvZiB0aGUgbWVudS5cbiAgICAgIGNvbnN0IG5vRXhwbGljaXRXaWR0aCA9ICFsaXN0UmVmLmN1cnJlbnQuc3R5bGUud2lkdGg7XG5cbiAgICAgIGlmIChjb250YWluZXJFbGVtZW50LmNsaWVudEhlaWdodCA8IGxpc3RSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgJiYgbm9FeHBsaWNpdFdpZHRoKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbGJhclNpemUgPSBgJHtnZXRTY3JvbGxiYXJTaXplKG93bmVyRG9jdW1lbnQoY29udGFpbmVyRWxlbWVudCkpfXB4YDtcbiAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlW3RoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCddID0gc2Nyb2xsYmFyU2l6ZTtcbiAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlLndpZHRoID0gYGNhbGMoMTAwJSArICR7c2Nyb2xsYmFyU2l6ZX0pYDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3RSZWYuY3VycmVudDtcbiAgICB9XG4gIH0pLCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBsaXN0ID0gbGlzdFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RWxlbWVudH0gLSB3aWxsIGFsd2F5cyBiZSBkZWZpbmVkIHNpbmNlIHdlIGFyZSBpbiBhIGtleWRvd24gaGFuZGxlclxuICAgICAqIGF0dGFjaGVkIHRvIGFuIGVsZW1lbnQuIEEga2V5ZG93biBldmVudCBpcyBlaXRoZXIgZGlzcGF0Y2hlZCB0byB0aGUgYWN0aXZlRWxlbWVudFxuICAgICAqIG9yIGRvY3VtZW50LmJvZHkgb3IgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LiBPbmx5IHRoZSBmaXJzdCBjYXNlIHdpbGxcbiAgICAgKiB0cmlnZ2VyIHRoaXMgc3BlY2lmaWMgaGFuZGxlci5cbiAgICAgKi9cblxuICAgIGNvbnN0IGN1cnJlbnRGb2N1cyA9IG93bmVyRG9jdW1lbnQobGlzdCkuYWN0aXZlRWxlbWVudDtcblxuICAgIGlmIChrZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdIb21lJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0VuZCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBwcmV2aW91c0l0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgY3JpdGVyaWEgPSB0ZXh0Q3JpdGVyaWFSZWYuY3VycmVudDtcbiAgICAgIGNvbnN0IGxvd2VyS2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCBjdXJyVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgICBpZiAoY3JpdGVyaWEua2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFJlc2V0XG4gICAgICAgIGlmIChjdXJyVGltZSAtIGNyaXRlcmlhLmxhc3RUaW1lID4gNTAwKSB7XG4gICAgICAgICAgY3JpdGVyaWEua2V5cyA9IFtdO1xuICAgICAgICAgIGNyaXRlcmlhLnJlcGVhdGluZyA9IHRydWU7XG4gICAgICAgICAgY3JpdGVyaWEucHJldmlvdXNLZXlNYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjcml0ZXJpYS5yZXBlYXRpbmcgJiYgbG93ZXJLZXkgIT09IGNyaXRlcmlhLmtleXNbMF0pIHtcbiAgICAgICAgICBjcml0ZXJpYS5yZXBlYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjcml0ZXJpYS5sYXN0VGltZSA9IGN1cnJUaW1lO1xuICAgICAgY3JpdGVyaWEua2V5cy5wdXNoKGxvd2VyS2V5KTtcbiAgICAgIGNvbnN0IGtlZXBGb2N1c09uQ3VycmVudCA9IGN1cnJlbnRGb2N1cyAmJiAhY3JpdGVyaWEucmVwZWF0aW5nICYmIHRleHRDcml0ZXJpYU1hdGNoZXMoY3VycmVudEZvY3VzLCBjcml0ZXJpYSk7XG5cbiAgICAgIGlmIChjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgJiYgKGtlZXBGb2N1c09uQ3VycmVudCB8fCBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBmYWxzZSwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0sIGNyaXRlcmlhKSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobGlzdFJlZiwgcmVmKTtcbiAgLyoqXG4gICAqIHRoZSBpbmRleCBvZiB0aGUgaXRlbSBzaG91bGQgcmVjZWl2ZSBmb2N1c1xuICAgKiBpbiBhIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgIGl0J3MgdGhlIGZpcnN0IGBzZWxlY3RlZGAgaXRlbVxuICAgKiBvdGhlcndpc2UgaXQncyB0aGUgdmVyeSBmaXJzdCBpdGVtLlxuICAgKi9cblxuICBsZXQgYWN0aXZlSXRlbUluZGV4ID0gLTE7IC8vIHNpbmNlIHdlIGluamVjdCBmb2N1cyByZWxhdGVkIHByb3BzIGludG8gY2hpbGRyZW4gd2UgaGF2ZSB0byBkbyBhIGxvb2thaGVhZFxuICAvLyB0byBjaGVjayBpZiB0aGVyZSBpcyBhIGBzZWxlY3RlZGAgaXRlbS4gV2UncmUgbG9va2luZyBmb3IgdGhlIGxhc3QgYHNlbGVjdGVkYFxuICAvLyBpdGVtIGFuZCB1c2UgdGhlIGZpcnN0IHZhbGlkIGl0ZW0gYXMgYSBmYWxsYmFja1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIE1lbnUgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUl0ZW1JbmRleCkge1xuICAgICAgY29uc3QgbmV3Q2hpbGRQcm9wcyA9IHt9O1xuXG4gICAgICBpZiAoYXV0b0ZvY3VzSXRlbSkge1xuICAgICAgICBuZXdDaGlsZFByb3BzLmF1dG9Gb2N1cyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkICYmIHZhcmlhbnQgPT09ICdzZWxlY3RlZE1lbnUnKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMudGFiSW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3QsIF9leHRlbmRzKHtcbiAgICByb2xlOiBcIm1lbnVcIixcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgdGFiSW5kZXg6IGF1dG9Gb2N1cyA/IDAgOiAtMVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBpdGVtc1xuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1lbnVMaXN0LnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGNvbnRhaW5lciBhbmQgbW92ZSBpbnRvIHRhYiBvcmRlci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBmb2N1cyB0aGUgZmlyc3QgbWVudWl0ZW0gaWYgYHZhcmlhbnQ9XCJtZW51XCJgIG9yIHNlbGVjdGVkIGl0ZW1cbiAgICogaWYgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXNJdGVtOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudUxpc3QgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBhbGxvdyBmb2N1cyBvbiBkaXNhYmxlZCBpdGVtcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkSXRlbXNGb2N1c2FibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGl0ZW1zIHdpbGwgbm90IHdyYXAgZm9jdXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlTGlzdFdyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1c1xuICAgKiBhbmQgdGhlIHZlcnRpY2FsIGFsaWdubWVudCByZWxhdGl2ZSB0byB0aGUgYW5jaG9yIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0ICdzZWxlY3RlZE1lbnUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydtZW51JywgJ3NlbGVjdGVkTWVudSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1lbnVMaXN0OyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXBlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpUGFwZXInLCBzbG90KTtcbn1cbmNvbnN0IHBhcGVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVBhcGVyJywgWydyb290JywgJ3JvdW5kZWQnLCAnb3V0bGluZWQnLCAnZWxldmF0aW9uJywgJ2VsZXZhdGlvbjAnLCAnZWxldmF0aW9uMScsICdlbGV2YXRpb24yJywgJ2VsZXZhdGlvbjMnLCAnZWxldmF0aW9uNCcsICdlbGV2YXRpb241JywgJ2VsZXZhdGlvbjYnLCAnZWxldmF0aW9uNycsICdlbGV2YXRpb244JywgJ2VsZXZhdGlvbjknLCAnZWxldmF0aW9uMTAnLCAnZWxldmF0aW9uMTEnLCAnZWxldmF0aW9uMTInLCAnZWxldmF0aW9uMTMnLCAnZWxldmF0aW9uMTQnLCAnZWxldmF0aW9uMTUnLCAnZWxldmF0aW9uMTYnLCAnZWxldmF0aW9uMTcnLCAnZWxldmF0aW9uMTgnLCAnZWxldmF0aW9uMTknLCAnZWxldmF0aW9uMjAnLCAnZWxldmF0aW9uMjEnLCAnZWxldmF0aW9uMjInLCAnZWxldmF0aW9uMjMnLCAnZWxldmF0aW9uMjQnXSk7XG5leHBvcnQgZGVmYXVsdCBwYXBlckNsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImVsZXZhdGlvblwiLCBcInNxdWFyZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgaW50ZWdlclByb3BUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IGdldFBhcGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wYXBlckNsYXNzZXMnOyAvLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLWlvcy9ibG9iL2JjYTM2MTA3NDA1NTk0ZDViN2IxNjI2NWE1YjBlZDY5OGY4NWE1ZWUvY29tcG9uZW50cy9FbGV2YXRpb24vc3JjL1VJQ29sb3IlMkJNYXRlcmlhbEVsZXZhdGlvbi5tI0w2MVxuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCBnZXRPdmVybGF5QWxwaGEgPSBlbGV2YXRpb24gPT4ge1xuICBsZXQgYWxwaGFWYWx1ZTtcblxuICBpZiAoZWxldmF0aW9uIDwgMSkge1xuICAgIGFscGhhVmFsdWUgPSA1LjExOTE2ICogZWxldmF0aW9uICoqIDI7XG4gIH0gZWxzZSB7XG4gICAgYWxwaGFWYWx1ZSA9IDQuNSAqIE1hdGgubG9nKGVsZXZhdGlvbiArIDEpICsgMjtcbiAgfVxuXG4gIHJldHVybiAoYWxwaGFWYWx1ZSAvIDEwMCkudG9GaXhlZCgyKTtcbn07XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBzcXVhcmUsXG4gICAgZWxldmF0aW9uLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgIXNxdWFyZSAmJiAncm91bmRlZCcsIHZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIGBlbGV2YXRpb24ke2VsZXZhdGlvbn1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBhcGVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IFBhcGVyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpUGFwZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sICFvd25lclN0YXRlLnNxdWFyZSAmJiBzdHlsZXMucm91bmRlZCwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBzdHlsZXNbYGVsZXZhdGlvbiR7b3duZXJTdGF0ZS5lbGV2YXRpb259YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxufSwgIW93bmVyU3RhdGUuc3F1YXJlICYmIHtcbiAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIGJvcmRlcjogYDFweCBzb2xpZCAke3RoZW1lLnBhbGV0dGUuZGl2aWRlcn1gXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIF9leHRlbmRzKHtcbiAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzW293bmVyU3RhdGUuZWxldmF0aW9uXVxufSwgdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnZGFyaycgJiYge1xuICBiYWNrZ3JvdW5kSW1hZ2U6IGBsaW5lYXItZ3JhZGllbnQoJHthbHBoYSgnI2ZmZicsIGdldE92ZXJsYXlBbHBoYShvd25lclN0YXRlLmVsZXZhdGlvbikpfSwgJHthbHBoYSgnI2ZmZicsIGdldE92ZXJsYXlBbHBoYShvd25lclN0YXRlLmVsZXZhdGlvbikpfSlgXG59KSkpO1xuY29uc3QgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpUGFwZXInXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgZWxldmF0aW9uID0gMSxcbiAgICBzcXVhcmUgPSBmYWxzZSxcbiAgICB2YXJpYW50ID0gJ2VsZXZhdGlvbidcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZWxldmF0aW9uLFxuICAgIHNxdWFyZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcblxuICAgIGlmICh0aGVtZS5zaGFkb3dzW2VsZXZhdGlvbl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGVsZXZhdGlvbiBwcm92aWRlZCA8UGFwZXIgZWxldmF0aW9uPXske2VsZXZhdGlvbn19PiBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSB0aGVtZS5gLCBgUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IFxcYHRoZW1lLnNoYWRvd3NbJHtlbGV2YXRpb259XVxcYCBpcyBkZWZpbmVkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUGFwZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUGFwZXIucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNoYWRvdyBkZXB0aCwgY29ycmVzcG9uZHMgdG8gYGRwYCBpbiB0aGUgc3BlYy5cbiAgICogSXQgYWNjZXB0cyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIGVsZXZhdGlvbjogY2hhaW5Qcm9wVHlwZXMoaW50ZWdlclByb3BUeXBlLCBwcm9wcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uLFxuICAgICAgdmFyaWFudFxuICAgIH0gPSBwcm9wcztcblxuICAgIGlmIChlbGV2YXRpb24gPiAwICYmIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYE1VSTogQ29tYmluaW5nIFxcYGVsZXZhdGlvbj17JHtlbGV2YXRpb259fVxcYCB3aXRoIFxcYHZhcmlhbnQ9XCIke3ZhcmlhbnR9XCJcXGAgaGFzIG5vIGVmZmVjdC4gRWl0aGVyIHVzZSBcXGBlbGV2YXRpb249ezB9XFxgIG9yIHVzZSBhIGRpZmZlcmVudCBcXGB2YXJpYW50XFxgLmApO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdlbGV2YXRpb24nXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlbGV2YXRpb24nLCAnb3V0bGluZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFBhcGVyOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmV4cG9ydCB2YXIgVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG5leHBvcnQgdmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0IHZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnQgdmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnQgdmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIC0tLVxuICpcbiAqICoqTm90ZSoqOiBgVHJhbnNpdGlvbmAgaXMgYSBwbGF0Zm9ybS1hZ25vc3RpYyBiYXNlIGNvbXBvbmVudC4gSWYgeW91J3JlIHVzaW5nXG4gKiB0cmFuc2l0aW9ucyBpbiBDU1MsIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZVxuICogW2BDU1NUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9jc3MtdHJhbnNpdGlvbilcbiAqIGluc3RlYWQuIEl0IGluaGVyaXRzIGFsbCB0aGUgZmVhdHVyZXMgb2YgYFRyYW5zaXRpb25gLCBidXQgY29udGFpbnNcbiAqIGFkZGl0aW9uYWwgZmVhdHVyZXMgbmVjZXNzYXJ5IHRvIHBsYXkgbmljZSB3aXRoIENTUyB0cmFuc2l0aW9ucyAoaGVuY2UgdGhlXG4gKiBuYW1lIG9mIHRoZSBjb21wb25lbnQpLlxuICpcbiAqIC0tLVxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGVcbiAqIGNvbXBvbmVudHMuIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yXG4gKiBleGFtcGxlIHdlIGNhbiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMSB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGV4aXRpbmc6ICB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZXhpdGVkOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50XG4gKiBiZWdpbnMgdGhlIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tXG4gKiBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLCB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UgaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZVxuICogdGhlIGZvbGxvd2luZyBleGFtcGxlICh3ZSdsbCB1c2UgdGhlXG4gKiBbdXNlU3RhdGVdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VzdGF0ZSkgaG9vayk6XG4gKlxuICogYGBganN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IFtpblByb3AsIHNldEluUHJvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9ezUwMH0+XG4gKiAgICAgICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICAgICAgLy8gLi4uXG4gKiAgICAgICAgICl9XG4gKiAgICAgICA8L1RyYW5zaXRpb24+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlXG4gKiBhbmQgc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzXG4gKiB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbVxuICogYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuICA7XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW2FwcGVhcmluZ10gOiBbUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIGFwcGVhcmluZ10sXG4gICAgICAgIG1heWJlTm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICBtYXliZUFwcGVhcmluZyA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQoZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgbWF5YmVOb2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdW5kZWZpbmVkIDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobWF5YmVOb2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQodGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbdGhpcy5uZXh0Q2FsbGJhY2tdIDogW25vZGUsIHRoaXMubmV4dENhbGxiYWNrXSxcbiAgICAgICAgICBtYXliZU5vZGUgPSBfcmVmM1swXSxcbiAgICAgICAgICBtYXliZU5leHRDYWxsYmFjayA9IF9yZWYzWzFdO1xuXG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG1heWJlTm9kZSwgbWF5YmVOZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX2luID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIF9tb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIF91bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgX2FwcGVhciA9IF90aGlzJHByb3BzLmFwcGVhcixcbiAgICAgICAgX2VudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgIF9leGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgX3RpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICBfYWRkRW5kTGlzdGVuZXIgPSBfdGhpcyRwcm9wcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgX29uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBfb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIF9vbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIF9vbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIF9vbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIF9vbkV4aXRlZCA9IF90aGlzJHByb3BzLm9uRXhpdGVkLFxuICAgICAgICBfbm9kZVJlZiA9IF90aGlzJHByb3BzLm5vZGVSZWYsXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIiwgXCJ0aW1lb3V0XCIsIFwiYWRkRW5kTGlzdGVuZXJcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRXhpdGVkXCIsIFwibm9kZVJlZlwiXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSA6IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgUmVhY3QgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50IHRoYXQgbmVlZCB0byB0cmFuc2l0aW9uOlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTExMjcxMzAvNDY3MTkzMlxuICAgKlxuICAgKiAgIC0gV2hlbiBgbm9kZVJlZmAgcHJvcCBpcyB1c2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogICAgICAoZS5nLiBgb25FbnRlcmApIGJlY2F1c2UgdXNlciBhbHJlYWR5IGhhcyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBub2RlLlxuICAgKiAgIC0gV2hlbiBjaGFuZ2luZyBga2V5YCBwcm9wIG9mIGBUcmFuc2l0aW9uYCBpbiBhIGBUcmFuc2l0aW9uR3JvdXBgIGEgbmV3XG4gICAqICAgICBgbm9kZVJlZmAgbmVlZCB0byBiZSBwcm92aWRlZCB0byBgVHJhbnNpdGlvbmAgd2l0aCBjaGFuZ2VkIGBrZXlgIHByb3BcbiAgICogICAgIChzZWVcbiAgICogICAgIFt0ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qc10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzEzNDM1Zjg5N2IzYWI3MWY2ZTE5ZDcyNGYxNDU1OTZmNTkxMDU4MWMvdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanMjTDM2Mi1MNDM3KSkuXG4gICAqL1xuICBub2RlUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IFByb3BUeXBlcy5hbnkgOiBmdW5jdGlvbiAocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHZhbHVlID0gcHJvcFZhbHVlW2tleV07XG4gICAgICByZXR1cm4gUHJvcFR5cGVzLmluc3RhbmNlT2YodmFsdWUgJiYgJ293bmVyRG9jdW1lbnQnIGluIHZhbHVlID8gdmFsdWUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5FbGVtZW50IDogRWxlbWVudCkocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCk7XG4gICAgfVxuICB9KSxcblxuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBkb2VzIG5vdCBwZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW5cbiAgICogaXQgZmlyc3QgbW91bnRzLCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgaW5gLiBJZiB5b3Ugd2FudCB0aGlzXG4gICAqIGJlaGF2aW9yLCBzZXQgYm90aCBgYXBwZWFyYCBhbmQgYGluYCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9OyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IEVYSVRFRDtcblRyYW5zaXRpb24uRU5URVJJTkcgPSBFTlRFUklORztcblRyYW5zaXRpb24uRU5URVJFRCA9IEVOVEVSRUQ7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSBFWElUSU5HO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJleHBvcnQgY29uc3QgcmVmbG93ID0gbm9kZSA9PiBub2RlLnNjcm9sbFRvcDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcHMocHJvcHMsIG9wdGlvbnMpIHtcbiAgdmFyIF9zdHlsZSR0cmFuc2l0aW9uRHVyYSwgX3N0eWxlJHRyYW5zaXRpb25UaW1pO1xuXG4gIGNvbnN0IHtcbiAgICB0aW1lb3V0LFxuICAgIGVhc2luZyxcbiAgICBzdHlsZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbjogKF9zdHlsZSR0cmFuc2l0aW9uRHVyYSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbikgIT0gbnVsbCA/IF9zdHlsZSR0cmFuc2l0aW9uRHVyYSA6IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiB0aW1lb3V0W29wdGlvbnMubW9kZV0gfHwgMCxcbiAgICBlYXNpbmc6IChfc3R5bGUkdHJhbnNpdGlvblRpbWkgPSBzdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24pICE9IG51bGwgPyBfc3R5bGUkdHJhbnNpdGlvblRpbWkgOiB0eXBlb2YgZWFzaW5nID09PSAnb2JqZWN0JyA/IGVhc2luZ1tvcHRpb25zLm1vZGVdIDogZWFzaW5nLFxuICAgIGRlbGF5OiBzdHlsZS50cmFuc2l0aW9uRGVsYXlcbiAgfTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWRkRW5kTGlzdGVuZXJcIiwgXCJhcHBlYXJcIiwgXCJjaGlsZHJlblwiLCBcImVhc2luZ1wiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuZnVuY3Rpb24gZ2V0U2NhbGUodmFsdWUpIHtcbiAgcmV0dXJuIGBzY2FsZSgke3ZhbHVlfSwgJHt2YWx1ZSAqKiAyfSlgO1xufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDEpXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogJ25vbmUnXG4gIH1cbn07XG4vKipcbiAqIFRoZSBHcm93IHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW1Rvb2x0aXBdKC9jb21wb25lbnRzL3Rvb2x0aXBzLykgYW5kXG4gKiBbUG9wb3Zlcl0oL2NvbXBvbmVudHMvcG9wb3Zlci8pIGNvbXBvbmVudHMuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cbmNvbnN0IEdyb3cgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcm93KHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIGFkZEVuZExpc3RlbmVyLFxuICAgIGFwcGVhciA9IHRydWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZWFzaW5nLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FbnRlcixcbiAgICBvbkVudGVyZWQsXG4gICAgb25FbnRlcmluZyxcbiAgICBvbkV4aXQsXG4gICAgb25FeGl0ZWQsXG4gICAgb25FeGl0aW5nLFxuICAgIHN0eWxlLFxuICAgIHRpbWVvdXQgPSAnYXV0bycsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgdGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgYXV0b1RpbWVvdXQgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBmb3JlaWduUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobm9kZVJlZiwgZm9yZWlnblJlZik7XG5cbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGNhbGxiYWNrID0+IG1heWJlSXNBcHBlYXJpbmcgPT4ge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVSZWYuY3VycmVudDsgLy8gb25FbnRlclh4eCBhbmQgb25FeGl0WHh4IGNhbGxiYWNrcyBoYXZlIGEgZGlmZmVyZW50IGFyZ3VtZW50cy5sZW5ndGggdmFsdWUuXG5cbiAgICAgIGlmIChtYXliZUlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhub2RlLCBtYXliZUlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHtcbiAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBkZWxheSxcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbGV0IGR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb24sXG4gICAgICBkZWxheVxuICAgIH0pLCB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXksXG4gICAgICBlYXNpbmc6IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuICAgIH0pXS5qb2luKCcsJyk7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmVkKTtcbiAgY29uc3QgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgY29uc3QgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIGRlbGF5LFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIGxldCBkdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgIGF1dG9UaW1lb3V0LmN1cnJlbnQgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgfVxuXG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gW3RoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5OiBkZWxheSB8fCBkdXJhdGlvbiAqIDAuMzMzLFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9KV0uam9pbignLCcpO1xuICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGdldFNjYWxlKDAuNzUpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuXG4gIGNvbnN0IGhhbmRsZUFkZEVuZExpc3RlbmVyID0gbmV4dCA9PiB7XG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgdGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQobmV4dCwgYXV0b1RpbWVvdXQuY3VycmVudCB8fCAwKTtcbiAgICB9XG5cbiAgICBpZiAoYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIC8vIE9sZCBjYWxsIHNpZ25hdHVyZSBiZWZvcmUgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBgIGltcGxlbWVudGVkIGBub2RlUmVmYFxuICAgICAgYWRkRW5kTGlzdGVuZXIobm9kZVJlZi5jdXJyZW50LCBuZXh0KTtcbiAgICB9XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IGFwcGVhcixcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IG5vZGVSZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogaGFuZGxlQWRkRW5kTGlzdGVuZXIsXG4gICAgdGltZW91dDogdGltZW91dCA9PT0gJ2F1dG8nID8gbnVsbCA6IHRpbWVvdXRcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogKHN0YXRlLCBjaGlsZFByb3BzKSA9PiB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgwLjc1KSxcbiAgICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICAgIH0sIHN0eWxlc1tzdGF0ZV0sIHN0eWxlLCBjaGlsZHJlbi5wcm9wcy5zdHlsZSksXG4gICAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgICB9LCBjaGlsZFByb3BzKSk7XG4gICAgfVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyb3cucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZyBET01cbiAgICogbm9kZSBhbmQgYSBkb25lIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiBOb3RlOiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW4gaXQgZmlyc3QgbW91bnRzIGlmIGBpbmAgaXMgYWxzbyBgdHJ1ZWAuXG4gICAqIFNldCB0aGlzIHRvIGBmYWxzZWAgdG8gZGlzYWJsZSB0aGlzIGJlaGF2aW9yLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb24uXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSBlYXNpbmcgb3IgYSBvYmplY3QgY29udGFpbmluZyBlbnRlciBhbmQgZXhpdCB2YWx1ZXMuXG4gICAqL1xuICBlYXNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhpdDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluLlxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKlxuICAgKiBTZXQgdG8gJ2F1dG8nIHRvIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHRyYW5zaXRpb24gdGltZSBiYXNlZCBvbiBoZWlnaHQuXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuR3Jvdy5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCBHcm93OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCBIVE1MRWxlbWVudFR5cGUsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3NldFJlZiBhcyBzZXRSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xufVxuLyoqXG4gKiBQb3J0YWxzIHByb3ZpZGUgYSBmaXJzdC1jbGFzcyB3YXkgdG8gcmVuZGVyIGNoaWxkcmVuIGludG8gYSBET00gbm9kZVxuICogdGhhdCBleGlzdHMgb3V0c2lkZSB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqL1xuXG5cbmNvbnN0IFBvcnRhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcnRhbChwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgW21vdW50Tm9kZSwgc2V0TW91bnROb2RlXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gY2hpbGRyZW4ucmVmIDogbnVsbCwgcmVmKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0TW91bnROb2RlKGdldENvbnRhaW5lcihjb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHkpO1xuICAgIH1cbiAgfSwgW2NvbnRhaW5lciwgZGlzYWJsZVBvcnRhbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1vdW50Tm9kZSAmJiAhZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0UmVmKHJlZiwgbW91bnROb2RlKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHNldFJlZihyZWYsIG51bGwpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbcmVmLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcblxuICBpZiAoZGlzYWJsZVBvcnRhbCkge1xuICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiBtb3VudE5vZGUgPyAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBtb3VudE5vZGUpIDogbW91bnROb2RlO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3J0YWwucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjaGlsZHJlbiB0byByZW5kZXIgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIFRoZSBgY2hpbGRyZW5gIHdpbGwgYmUgdW5kZXIgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFBvcnRhbFsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChQb3J0YWwucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsImltcG9ydCB7IHVuc3RhYmxlX293bmVyV2luZG93IGFzIG93bmVyV2luZG93LCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQsIHVuc3RhYmxlX2dldFNjcm9sbGJhclNpemUgYXMgZ2V0U2Nyb2xsYmFyU2l6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuXG4vLyBJcyBhIHZlcnRpY2FsIHNjcm9sbGJhciBkaXNwbGF5ZWQ/XG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KGNvbnRhaW5lcik7XG5cbiAgaWYgKGRvYy5ib2R5ID09PSBjb250YWluZXIpIHtcbiAgICByZXR1cm4gb3duZXJXaW5kb3coY29udGFpbmVyKS5pbm5lcldpZHRoID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIHJldHVybiBjb250YWluZXIuc2Nyb2xsSGVpZ2h0ID4gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFyaWFIaWRkZW4oZWxlbWVudCwgc2hvdykge1xuICBpZiAoc2hvdykge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGFkZGluZ1JpZ2h0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHBhcnNlSW50KG93bmVyV2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucGFkZGluZ1JpZ2h0LCAxMCkgfHwgMDtcbn1cblxuZnVuY3Rpb24gYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnRFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgZWxlbWVudHNUb0V4Y2x1ZGUgPSBbXSwgc2hvdykge1xuICBjb25zdCBibGFja2xpc3QgPSBbbW91bnRFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgLi4uZWxlbWVudHNUb0V4Y2x1ZGVdO1xuICBjb25zdCBibGFja2xpc3RUYWdOYW1lcyA9IFsnVEVNUExBVEUnLCAnU0NSSVBUJywgJ1NUWUxFJ107XG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGVsZW1lbnQgPT4ge1xuICAgIGlmIChibGFja2xpc3QuaW5kZXhPZihlbGVtZW50KSA9PT0gLTEgJiYgYmxhY2tsaXN0VGFnTmFtZXMuaW5kZXhPZihlbGVtZW50LnRhZ05hbWUpID09PSAtMSkge1xuICAgICAgYXJpYUhpZGRlbihlbGVtZW50LCBzaG93KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihpdGVtcywgY2FsbGJhY2spIHtcbiAgbGV0IGlkeCA9IC0xO1xuICBpdGVtcy5zb21lKChpdGVtLCBpbmRleCkgPT4ge1xuICAgIGlmIChjYWxsYmFjayhpdGVtKSkge1xuICAgICAgaWR4ID0gaW5kZXg7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpIHtcbiAgY29uc3QgcmVzdG9yZVN0eWxlID0gW107XG4gIGNvbnN0IGNvbnRhaW5lciA9IGNvbnRhaW5lckluZm8uY29udGFpbmVyO1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZVNjcm9sbExvY2spIHtcbiAgICBpZiAoaXNPdmVyZmxvd2luZyhjb250YWluZXIpKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBzaXplIGJlZm9yZSBhcHBseWluZyBvdmVyZmxvdyBoaWRkZW4gdG8gYXZvaWQgYW55IHNjcm9sbCBqdW1wcy5cbiAgICAgIGNvbnN0IHNjcm9sbGJhclNpemUgPSBnZXRTY3JvbGxiYXJTaXplKG93bmVyRG9jdW1lbnQoY29udGFpbmVyKSk7XG4gICAgICByZXN0b3JlU3R5bGUucHVzaCh7XG4gICAgICAgIHZhbHVlOiBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0LFxuICAgICAgICBwcm9wZXJ0eTogJ3BhZGRpbmctcmlnaHQnLFxuICAgICAgICBlbDogY29udGFpbmVyXG4gICAgICB9KTsgLy8gVXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nIHRvIGFkZCBvdXIgc2Nyb2xsYmFyIHdpZHRoLlxuXG4gICAgICBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7Z2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplfXB4YDsgLy8gLm11aS1maXhlZCBpcyBhIGdsb2JhbCBoZWxwZXIuXG5cbiAgICAgIGNvbnN0IGZpeGVkRWxlbWVudHMgPSBvd25lckRvY3VtZW50KGNvbnRhaW5lcikucXVlcnlTZWxlY3RvckFsbCgnLm11aS1maXhlZCcpO1xuICAgICAgW10uZm9yRWFjaC5jYWxsKGZpeGVkRWxlbWVudHMsIGVsZW1lbnQgPT4ge1xuICAgICAgICByZXN0b3JlU3R5bGUucHVzaCh7XG4gICAgICAgICAgdmFsdWU6IGVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0LFxuICAgICAgICAgIHByb3BlcnR5OiAncGFkZGluZy1yaWdodCcsXG4gICAgICAgICAgZWw6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7Z2V0UGFkZGluZ1JpZ2h0KGVsZW1lbnQpICsgc2Nyb2xsYmFyU2l6ZX1weGA7XG4gICAgICB9KTtcbiAgICB9IC8vIEltcHJvdmUgR2F0c2J5IHN1cHBvcnRcbiAgICAvLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9mb3JjZS12ZXJ0aWNhbC1zY3JvbGxiYXIvXG5cblxuICAgIGNvbnN0IHBhcmVudCA9IGNvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGNvbnRhaW5lcik7XG4gICAgY29uc3Qgc2Nyb2xsQ29udGFpbmVyID0gKHBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50Lm5vZGVOYW1lKSA9PT0gJ0hUTUwnICYmIGNvbnRhaW5lcldpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudCkub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyA/IHBhcmVudCA6IGNvbnRhaW5lcjsgLy8gQmxvY2sgdGhlIHNjcm9sbCBldmVuIGlmIG5vIHNjcm9sbGJhciBpcyB2aXNpYmxlIHRvIGFjY291bnQgZm9yIG1vYmlsZSBrZXlib2FyZFxuICAgIC8vIHNjcmVlbnNpemUgc2hyaW5rLlxuXG4gICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyxcbiAgICAgIHByb3BlcnR5OiAnb3ZlcmZsb3cnLFxuICAgICAgZWw6IHNjcm9sbENvbnRhaW5lclxuICAgIH0sIHtcbiAgICAgIHZhbHVlOiBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3dYLFxuICAgICAgcHJvcGVydHk6ICdvdmVyZmxvdy14JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9LCB7XG4gICAgICB2YWx1ZTogc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93WSxcbiAgICAgIHByb3BlcnR5OiAnb3ZlcmZsb3cteScsXG4gICAgICBlbDogc2Nyb2xsQ29udGFpbmVyXG4gICAgfSk7XG4gICAgc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gIH1cblxuICBjb25zdCByZXN0b3JlID0gKCkgPT4ge1xuICAgIHJlc3RvcmVTdHlsZS5mb3JFYWNoKCh7XG4gICAgICB2YWx1ZSxcbiAgICAgIGVsLFxuICAgICAgcHJvcGVydHlcbiAgICB9KSA9PiB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gcmVzdG9yZTtcbn1cblxuZnVuY3Rpb24gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKSB7XG4gIGNvbnN0IGhpZGRlblNpYmxpbmdzID0gW107XG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGVsZW1lbnQgPT4ge1xuICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnKSB7XG4gICAgICBoaWRkZW5TaWJsaW5ncy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoaWRkZW5TaWJsaW5ncztcbn1cblxuLyoqXG4gKiBAaWdub3JlIC0gZG8gbm90IGRvY3VtZW50LlxuICpcbiAqIFByb3BlciBzdGF0ZSBtYW5hZ2VtZW50IGZvciBjb250YWluZXJzIGFuZCB0aGUgbW9kYWxzIGluIHRob3NlIGNvbnRhaW5lcnMuXG4gKiBTaW1wbGlmaWVkLCBidXQgaW5zcGlyZWQgYnkgcmVhY3Qtb3ZlcmxheSdzIE1vZGFsTWFuYWdlciBjbGFzcy5cbiAqIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lcnMgPSB2b2lkIDA7XG4gICAgdGhpcy5tb2RhbHMgPSB2b2lkIDA7XG4gICAgdGhpcy5tb2RhbHMgPSBbXTtcbiAgICB0aGlzLmNvbnRhaW5lcnMgPSBbXTtcbiAgfVxuXG4gIGFkZChtb2RhbCwgY29udGFpbmVyKSB7XG4gICAgbGV0IG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcblxuICAgIGlmIChtb2RhbEluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgfVxuXG4gICAgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmxlbmd0aDtcbiAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTsgLy8gSWYgdGhlIG1vZGFsIHdlIGFyZSBhZGRpbmcgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuXG4gICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGlkZGVuU2libGluZ3MgPSBnZXRIaWRkZW5TaWJsaW5ncyhjb250YWluZXIpO1xuICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vZGFsLm1vdW50LCBtb2RhbC5tb2RhbFJlZiwgaGlkZGVuU2libGluZ3MsIHRydWUpO1xuICAgIGNvbnN0IGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBpdGVtID0+IGl0ZW0uY29udGFpbmVyID09PSBjb250YWluZXIpO1xuXG4gICAgaWYgKGNvbnRhaW5lckluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRhaW5lcnMucHVzaCh7XG4gICAgICBtb2RhbHM6IFttb2RhbF0sXG4gICAgICBjb250YWluZXIsXG4gICAgICByZXN0b3JlOiBudWxsLFxuICAgICAgaGlkZGVuU2libGluZ3NcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgfVxuXG4gIG1vdW50KG1vZGFsLCBwcm9wcykge1xuICAgIGNvbnN0IGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBpdGVtID0+IGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMSk7XG4gICAgY29uc3QgY29udGFpbmVySW5mbyA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF07XG5cbiAgICBpZiAoIWNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlID0gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmUobW9kYWwpIHtcbiAgICBjb25zdCBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG5cbiAgICBpZiAobW9kYWxJbmRleCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBpdGVtID0+IGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMSk7XG4gICAgY29uc3QgY29udGFpbmVySW5mbyA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF07XG4gICAgY29udGFpbmVySW5mby5tb2RhbHMuc3BsaWNlKGNvbnRhaW5lckluZm8ubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcbiAgICB0aGlzLm1vZGFscy5zcGxpY2UobW9kYWxJbmRleCwgMSk7IC8vIElmIHRoYXQgd2FzIHRoZSBsYXN0IG1vZGFsIGluIGEgY29udGFpbmVyLCBjbGVhbiB1cCB0aGUgY29udGFpbmVyLlxuXG4gICAgaWYgKGNvbnRhaW5lckluZm8ubW9kYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gVGhlIG1vZGFsIG1pZ2h0IGJlIGNsb3NlZCBiZWZvcmUgaXQgaGFkIHRoZSBjaGFuY2UgdG8gYmUgbW91bnRlZCBpbiB0aGUgRE9NLlxuICAgICAgaWYgKGNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICAgIC8vIEluIGNhc2UgdGhlIG1vZGFsIHdhc24ndCBpbiB0aGUgRE9NIHlldC5cbiAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXJJbmZvLmNvbnRhaW5lciwgbW9kYWwubW91bnQsIG1vZGFsLm1vZGFsUmVmLCBjb250YWluZXJJbmZvLmhpZGRlblNpYmxpbmdzLCBmYWxzZSk7XG4gICAgICB0aGlzLmNvbnRhaW5lcnMuc3BsaWNlKGNvbnRhaW5lckluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIHNjcmVlbiByZWFkZXIuXG4gICAgICBjb25zdCBuZXh0VG9wID0gY29udGFpbmVySW5mby5tb2RhbHNbY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoIC0gMV07IC8vIGFzIHNvb24gYXMgYSBtb2RhbCBpcyBhZGRpbmcgaXRzIG1vZGFsUmVmIGlzIHVuZGVmaW5lZC4gaXQgY2FuJ3Qgc2V0XG4gICAgICAvLyBhcmlhLWhpZGRlbiBiZWNhdXNlIHRoZSBkb20gZWxlbWVudCBkb2Vzbid0IGV4aXN0IGVpdGhlclxuICAgICAgLy8gd2hlbiBtb2RhbCB3YXMgdW5tb3VudGVkIGJlZm9yZSBtb2RhbFJlZiBnZXRzIG51bGxcblxuICAgICAgaWYgKG5leHRUb3AubW9kYWxSZWYpIHtcbiAgICAgICAgYXJpYUhpZGRlbihuZXh0VG9wLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gIH1cblxuICBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kYWxzLmxlbmd0aCA+IDAgJiYgdGhpcy5tb2RhbHNbdGhpcy5tb2RhbHMubGVuZ3RoIC0gMV0gPT09IG1vZGFsO1xuICB9XG5cbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24sIGNvbnNpc3RlbnQtcmV0dXJuLCBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS10YWJpbmRleCAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCwgZWxlbWVudEFjY2VwdGluZ1JlZiwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQgfSBmcm9tICdAbXVpL3V0aWxzJzsgLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZvY3VzLXRyYXAvdGFiYmFibGVcblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IGNhbmRpZGF0ZXNTZWxlY3RvciA9IFsnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJywgJ2FbaHJlZl0nLCAnYnV0dG9uJywgJ1t0YWJpbmRleF0nLCAnYXVkaW9bY29udHJvbHNdJywgJ3ZpZGVvW2NvbnRyb2xzXScsICdbY29udGVudGVkaXRhYmxlXTpub3QoW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdKSddLmpvaW4oJywnKTtcblxuZnVuY3Rpb24gZ2V0VGFiSW5kZXgobm9kZSkge1xuICBjb25zdCB0YWJpbmRleEF0dHIgPSBwYXJzZUludChub2RlLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSwgMTApO1xuXG4gIGlmICghTnVtYmVyLmlzTmFOKHRhYmluZGV4QXR0cikpIHtcbiAgICByZXR1cm4gdGFiaW5kZXhBdHRyO1xuICB9IC8vIEJyb3dzZXJzIGRvIG5vdCByZXR1cm4gYHRhYkluZGV4YCBjb3JyZWN0bHkgZm9yIGNvbnRlbnRFZGl0YWJsZSBub2RlcztcbiAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjYxMTA4JnE9Y29udGVudGVkaXRhYmxlJTIwdGFiaW5kZXgmY2FuPTJcbiAgLy8gc28gaWYgdGhleSBkb24ndCBoYXZlIGEgdGFiaW5kZXggYXR0cmlidXRlIHNwZWNpZmljYWxseSBzZXQsIGFzc3VtZSBpdCdzIDAuXG4gIC8vIGluIENocm9tZSwgPGRldGFpbHMvPiwgPGF1ZGlvIGNvbnRyb2xzLz4gYW5kIDx2aWRlbyBjb250cm9scy8+IGVsZW1lbnRzIGdldCBhIGRlZmF1bHRcbiAgLy8gIGB0YWJJbmRleGAgb2YgLTEgd2hlbiB0aGUgJ3RhYmluZGV4JyBhdHRyaWJ1dGUgaXNuJ3Qgc3BlY2lmaWVkIGluIHRoZSBET00sXG4gIC8vICB5ZXQgdGhleSBhcmUgc3RpbGwgcGFydCBvZiB0aGUgcmVndWxhciB0YWIgb3JkZXI7IGluIEZGLCB0aGV5IGdldCBhIGRlZmF1bHRcbiAgLy8gIGB0YWJJbmRleGAgb2YgMDsgc2luY2UgQ2hyb21lIHN0aWxsIHB1dHMgdGhvc2UgZWxlbWVudHMgaW4gdGhlIHJlZ3VsYXIgdGFiXG4gIC8vICBvcmRlciwgY29uc2lkZXIgdGhlaXIgdGFiIGluZGV4IHRvIGJlIDAuXG5cblxuICBpZiAobm9kZS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyB8fCAobm9kZS5ub2RlTmFtZSA9PT0gJ0FVRElPJyB8fCBub2RlLm5vZGVOYW1lID09PSAnVklERU8nIHx8IG5vZGUubm9kZU5hbWUgPT09ICdERVRBSUxTJykgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykgPT09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBub2RlLnRhYkluZGV4O1xufVxuXG5mdW5jdGlvbiBpc05vblRhYmJhYmxlUmFkaW8obm9kZSkge1xuICBpZiAobm9kZS50YWdOYW1lICE9PSAnSU5QVVQnIHx8IG5vZGUudHlwZSAhPT0gJ3JhZGlvJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghbm9kZS5uYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgZ2V0UmFkaW8gPSBzZWxlY3RvciA9PiBub2RlLm93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihgaW5wdXRbdHlwZT1cInJhZGlvXCJdJHtzZWxlY3Rvcn1gKTtcblxuICBsZXQgcm92aW5nID0gZ2V0UmFkaW8oYFtuYW1lPVwiJHtub2RlLm5hbWV9XCJdOmNoZWNrZWRgKTtcblxuICBpZiAoIXJvdmluZykge1xuICAgIHJvdmluZyA9IGdldFJhZGlvKGBbbmFtZT1cIiR7bm9kZS5uYW1lfVwiXWApO1xuICB9XG5cbiAgcmV0dXJuIHJvdmluZyAhPT0gbm9kZTtcbn1cblxuZnVuY3Rpb24gaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZShub2RlKSB7XG4gIGlmIChub2RlLmRpc2FibGVkIHx8IG5vZGUudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBub2RlLnR5cGUgPT09ICdoaWRkZW4nIHx8IGlzTm9uVGFiYmFibGVSYWRpbyhub2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0R2V0VGFiYmFibGUocm9vdCkge1xuICBjb25zdCByZWd1bGFyVGFiTm9kZXMgPSBbXTtcbiAgY29uc3Qgb3JkZXJlZFRhYk5vZGVzID0gW107XG4gIEFycmF5LmZyb20ocm9vdC5xdWVyeVNlbGVjdG9yQWxsKGNhbmRpZGF0ZXNTZWxlY3RvcikpLmZvckVhY2goKG5vZGUsIGkpID0+IHtcbiAgICBjb25zdCBub2RlVGFiSW5kZXggPSBnZXRUYWJJbmRleChub2RlKTtcblxuICAgIGlmIChub2RlVGFiSW5kZXggPT09IC0xIHx8ICFpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG5vZGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGVUYWJJbmRleCA9PT0gMCkge1xuICAgICAgcmVndWxhclRhYk5vZGVzLnB1c2gobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yZGVyZWRUYWJOb2Rlcy5wdXNoKHtcbiAgICAgICAgZG9jdW1lbnRPcmRlcjogaSxcbiAgICAgICAgdGFiSW5kZXg6IG5vZGVUYWJJbmRleCxcbiAgICAgICAgbm9kZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9yZGVyZWRUYWJOb2Rlcy5zb3J0KChhLCBiKSA9PiBhLnRhYkluZGV4ID09PSBiLnRhYkluZGV4ID8gYS5kb2N1bWVudE9yZGVyIC0gYi5kb2N1bWVudE9yZGVyIDogYS50YWJJbmRleCAtIGIudGFiSW5kZXgpLm1hcChhID0+IGEubm9kZSkuY29uY2F0KHJlZ3VsYXJUYWJOb2Rlcyk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRJc0VuYWJsZWQoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBVdGlsaXR5IGNvbXBvbmVudCB0aGF0IGxvY2tzIGZvY3VzIGluc2lkZSB0aGUgY29tcG9uZW50LlxuICovXG5cblxuZnVuY3Rpb24gVW5zdGFibGVfVHJhcEZvY3VzKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBmYWxzZSxcbiAgICBnZXRUYWJiYWJsZSA9IGRlZmF1bHRHZXRUYWJiYWJsZSxcbiAgICBpc0VuYWJsZWQgPSBkZWZhdWx0SXNFbmFibGVkLFxuICAgIG9wZW5cbiAgfSA9IHByb3BzO1xuICBjb25zdCBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IHNlbnRpbmVsU3RhcnQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHNlbnRpbmVsRW5kID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBub2RlVG9SZXN0b3JlID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCByZWFjdEZvY3VzRXZlbnRUYXJnZXQgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgdmFyaWFibGUgaXMgdXNlZnVsIHdoZW4gZGlzYWJsZUF1dG9Gb2N1cyBpcyB0cnVlLlxuICAvLyBJdCB3YWl0cyBmb3IgdGhlIGFjdGl2ZSBlbGVtZW50IHRvIG1vdmUgaW50byB0aGUgY29tcG9uZW50IHRvIGFjdGl2YXRlLlxuXG4gIGNvbnN0IGFjdGl2YXRlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IHJvb3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCByb290UmVmKTtcbiAgY29uc3QgbGFzdEtleWRvd24gPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gV2UgbWlnaHQgcmVuZGVyIGFuIGVtcHR5IGNoaWxkLlxuICAgIGlmICghb3BlbiB8fCAhcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYWN0aXZhdGVkLmN1cnJlbnQgPSAhZGlzYWJsZUF1dG9Gb2N1cztcbiAgfSwgW2Rpc2FibGVBdXRvRm9jdXMsIG9wZW5dKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBXZSBtaWdodCByZW5kZXIgYW4gZW1wdHkgY2hpbGQuXG4gICAgaWYgKCFvcGVuIHx8ICFyb290UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7XG5cbiAgICBpZiAoIXJvb3RSZWYuY3VycmVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGlmICghcm9vdFJlZi5jdXJyZW50Lmhhc0F0dHJpYnV0ZSgndGFiSW5kZXgnKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRoZSBtb2RhbCBjb250ZW50IG5vZGUgZG9lcyBub3QgYWNjZXB0IGZvY3VzLicsICdGb3IgdGhlIGJlbmVmaXQgb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgJyArICd0aGUgdGFiSW5kZXggb2YgdGhlIG5vZGUgaXMgYmVpbmcgc2V0IHRvIFwiLTFcIi4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICByb290UmVmLmN1cnJlbnQuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2YXRlZC5jdXJyZW50KSB7XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyByZXN0b3JlTGFzdEZvY3VzKClcbiAgICAgIGlmICghZGlzYWJsZVJlc3RvcmVGb2N1cykge1xuICAgICAgICAvLyBJbiBJRTExIGl0IGlzIHBvc3NpYmxlIGZvciBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHRvIGJlIG51bGwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIG5vZGVUb1Jlc3RvcmUuY3VycmVudCBiZWluZyBudWxsLlxuICAgICAgICAvLyBOb3QgYWxsIGVsZW1lbnRzIGluIElFMTEgaGF2ZSBhIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgLy8gT25jZSBJRTExIHN1cHBvcnQgaXMgZHJvcHBlZCB0aGUgZm9jdXMoKSBjYWxsIGNhbiBiZSB1bmNvbmRpdGlvbmFsLlxuICAgICAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ICYmIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cykge1xuICAgICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH07IC8vIE1pc3NpbmcgYGRpc2FibGVSZXN0b3JlRm9jdXNgIHdoaWNoIGlzIGZpbmUuXG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBjaGFuZ2luZyB0aGF0IHByb3Agb24gYW4gb3BlbiBUcmFwRm9jdXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtvcGVuXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gV2UgbWlnaHQgcmVuZGVyIGFuIGVtcHR5IGNoaWxkLlxuICAgIGlmICghb3BlbiB8fCAhcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChyb290UmVmLmN1cnJlbnQpO1xuXG4gICAgY29uc3QgY29udGFpbiA9IG5hdGl2ZUV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY3VycmVudDogcm9vdEVsZW1lbnRcbiAgICAgIH0gPSByb290UmVmOyAvLyBDbGVhbnVwIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQgbGF6aWx5IGluIFJlYWN0IDE3LlxuICAgICAgLy8gQ29udGFpbiBjYW4gYmUgY2FsbGVkIGJldHdlZW4gdGhlIGNvbXBvbmVudCBiZWluZyB1bm1vdW50ZWQgYW5kIGl0cyBjbGVhbnVwIGZ1bmN0aW9uIGJlaW5nIHJ1bi5cblxuICAgICAgaWYgKHJvb3RFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkb2MuaGFzRm9jdXMoKSB8fCBkaXNhYmxlRW5mb3JjZUZvY3VzIHx8ICFpc0VuYWJsZWQoKSB8fCBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQpIHtcbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb290RWxlbWVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgLy8gaWYgdGhlIGZvY3VzIGV2ZW50IGlzIG5vdCBjb21pbmcgZnJvbSBpbnNpZGUgdGhlIGNoaWxkcmVuJ3MgcmVhY3QgdHJlZSwgcmVzZXQgdGhlIHJlZnNcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50ICYmIHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50ICE9PSBuYXRpdmVFdmVudC50YXJnZXQgfHwgZG9jLmFjdGl2ZUVsZW1lbnQgIT09IHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50KSB7XG4gICAgICAgICAgcmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhY3RpdmF0ZWQuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0YWJiYWJsZSA9IFtdO1xuXG4gICAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCA9PT0gc2VudGluZWxTdGFydC5jdXJyZW50IHx8IGRvYy5hY3RpdmVFbGVtZW50ID09PSBzZW50aW5lbEVuZC5jdXJyZW50KSB7XG4gICAgICAgICAgdGFiYmFibGUgPSBnZXRUYWJiYWJsZShyb290UmVmLmN1cnJlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhYmJhYmxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgX2xhc3RLZXlkb3duJGN1cnJlbnQsIF9sYXN0S2V5ZG93biRjdXJyZW50MjtcblxuICAgICAgICAgIGNvbnN0IGlzU2hpZnRUYWIgPSBCb29sZWFuKCgoX2xhc3RLZXlkb3duJGN1cnJlbnQgPSBsYXN0S2V5ZG93bi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2xhc3RLZXlkb3duJGN1cnJlbnQuc2hpZnRLZXkpICYmICgoX2xhc3RLZXlkb3duJGN1cnJlbnQyID0gbGFzdEtleWRvd24uY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sYXN0S2V5ZG93biRjdXJyZW50Mi5rZXkpID09PSAnVGFiJyk7XG4gICAgICAgICAgY29uc3QgZm9jdXNOZXh0ID0gdGFiYmFibGVbMF07XG4gICAgICAgICAgY29uc3QgZm9jdXNQcmV2aW91cyA9IHRhYmJhYmxlW3RhYmJhYmxlLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgaWYgKGlzU2hpZnRUYWIpIHtcbiAgICAgICAgICAgIGZvY3VzUHJldmlvdXMuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9jdXNOZXh0LmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvb3RFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgbG9vcEZvY3VzID0gbmF0aXZlRXZlbnQgPT4ge1xuICAgICAgbGFzdEtleWRvd24uY3VycmVudCA9IG5hdGl2ZUV2ZW50O1xuXG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgbmF0aXZlRXZlbnQua2V5ICE9PSAnVGFiJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgbmV4dCB0YWIgc3RhcnRzIGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuICAgICAgLy8gZG9jLmFjdGl2ZUVsZW1lbnQgcmVmZXJlcyB0byB0aGUgb3JpZ2luLlxuXG5cbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCA9PT0gcm9vdFJlZi5jdXJyZW50ICYmIG5hdGl2ZUV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gaWdub3JlIHRoZSBuZXh0IGNvbnRhaW4gYXNcbiAgICAgICAgLy8gaXQgd2lsbCB0cnkgdG8gbW92ZSB0aGUgZm9jdXMgYmFjayB0byB0aGUgcm9vdFJlZiBlbGVtZW50LlxuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBzZW50aW5lbEVuZC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgY29udGFpbik7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpOyAvLyBXaXRoIEVkZ2UsIFNhZmFyaSBhbmQgRmlyZWZveCwgbm8gZm9jdXMgcmVsYXRlZCBldmVudHMgYXJlIGZpcmVkIHdoZW4gdGhlIGZvY3VzZWQgYXJlYSBzdG9wcyBiZWluZyBhIGZvY3VzZWQgYXJlYS5cbiAgICAvLyBlLmcuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU1OTU2MS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBjYW4gbG9vayBpZiB0aGUgYWN0aXZlIGVsZW1lbnQgd2FzIHJlc3RvcmVkIG9uIHRoZSBCT0RZIGVsZW1lbnQuXG4gICAgLy9cbiAgICAvLyBUaGUgd2hhdHdnIHNwZWMgZGVmaW5lcyBob3cgdGhlIGJyb3dzZXIgc2hvdWxkIGJlaGF2ZSBidXQgZG9lcyBub3QgZXhwbGljaXRseSBtZW50aW9uIGFueSBldmVudHM6XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNmb2N1cy1maXh1cC1ydWxlLlxuXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGNvbnRhaW4oKTtcbiAgICAgIH1cbiAgICB9LCA1MCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjb250YWluKTtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgbG9vcEZvY3VzLCB0cnVlKTtcbiAgICB9O1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgZGlzYWJsZUVuZm9yY2VGb2N1cywgZGlzYWJsZVJlc3RvcmVGb2N1cywgaXNFbmFibGVkLCBvcGVuLCBnZXRUYWJiYWJsZV0pO1xuXG4gIGNvbnN0IG9uRm9jdXMgPSBldmVudCA9PiB7XG4gICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9IHRydWU7XG4gICAgcmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQgPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgY2hpbGRyZW5Qcm9wc0hhbmRsZXIgPSBjaGlsZHJlbi5wcm9wcy5vbkZvY3VzO1xuXG4gICAgaWYgKGNoaWxkcmVuUHJvcHNIYW5kbGVyKSB7XG4gICAgICBjaGlsZHJlblByb3BzSGFuZGxlcihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUZvY3VzU2VudGluZWwgPSBldmVudCA9PiB7XG4gICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9IHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goXCJkaXZcIiwge1xuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1NlbnRpbmVsLFxuICAgICAgcmVmOiBzZW50aW5lbFN0YXJ0LFxuICAgICAgXCJkYXRhLXRlc3RcIjogXCJzZW50aW5lbFN0YXJ0XCJcbiAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICBvbkZvY3VzXG4gICAgfSksIC8qI19fUFVSRV9fKi9fanN4KFwiZGl2XCIsIHtcbiAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgb25Gb2N1czogaGFuZGxlRm9jdXNTZW50aW5lbCxcbiAgICAgIHJlZjogc2VudGluZWxFbmQsXG4gICAgICBcImRhdGEtdGVzdFwiOiBcInNlbnRpbmVsRW5kXCJcbiAgICB9KV1cbiAgfSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVuc3RhYmxlX1RyYXBGb2N1cy5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRyYXAgZm9jdXMgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IHRyYXAgZm9jdXMgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgZGlzYWJsZUF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIHRyYXAgZm9jdXMgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhcCBmb2N1cyB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgdHJhcCBmb2N1cyB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgdHJhcCBmb2N1cyBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFwIGZvY3VzIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiB0cmFwIGZvY3VzIGlzIGhpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIG9yZGVyZWQgdGFiYmFibGUgbm9kZXMgKGkuZS4gaW4gdGFiIG9yZGVyKSB3aXRoaW4gdGhlIHJvb3QuXG4gICAqIEZvciBpbnN0YW5jZSwgeW91IGNhbiBwcm92aWRlIHRoZSBcInRhYmJhYmxlXCIgbnBtIGRlcGVuZGVuY3kuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3RcbiAgICovXG4gIGdldFRhYmJhYmxlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGV4dGVuZHMgdGhlIGBvcGVuYCBwcm9wLlxuICAgKiBJdCBhbGxvd3MgdG8gdG9nZ2xlIHRoZSBvcGVuIHN0YXRlIHdpdGhvdXQgaGF2aW5nIHRvIHdhaXQgZm9yIGEgcmVyZW5kZXIgd2hlbiBjaGFuZ2luZyB0aGUgYG9wZW5gIHByb3AuXG4gICAqIFRoaXMgcHJvcCBzaG91bGQgYmUgbWVtb2l6ZWQuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHRvIHN1cHBvcnQgbXVsdGlwbGUgdHJhcCBmb2N1cyBtb3VudGVkIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAqIEBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRJc0VuYWJsZWQoKSB7XG4gICAqICAgcmV0dXJuIHRydWU7XG4gICAqIH1cbiAgICovXG4gIGlzRW5hYmxlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZm9jdXMgaXMgbG9ja2VkLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFVuc3RhYmxlX1RyYXBGb2N1c1sncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChVbnN0YWJsZV9UcmFwRm9jdXMucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5zdGFibGVfVHJhcEZvY3VzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RhbFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTW9kYWwnLCBzbG90KTtcbn1cbmNvbnN0IG1vZGFsVW5zdHlsZWRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTW9kYWwnLCBbJ3Jvb3QnLCAnaGlkZGVuJ10pO1xuZXhwb3J0IGRlZmF1bHQgbW9kYWxVbnN0eWxlZENsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIkJhY2tkcm9wQ29tcG9uZW50XCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNsb3NlQWZ0ZXJUcmFuc2l0aW9uXCIsIFwiY29tcG9uZW50XCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImNvbnRhaW5lclwiLCBcImRpc2FibGVBdXRvRm9jdXNcIiwgXCJkaXNhYmxlRW5mb3JjZUZvY3VzXCIsIFwiZGlzYWJsZUVzY2FwZUtleURvd25cIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwiZGlzYWJsZVJlc3RvcmVGb2N1c1wiLCBcImRpc2FibGVTY3JvbGxMb2NrXCIsIFwiaGlkZUJhY2tkcm9wXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtYW5hZ2VyXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uS2V5RG93blwiLCBcIm9wZW5cIiwgXCJ0aGVtZVwiLCBcIm9uVHJhbnNpdGlvbkVudGVyXCIsIFwib25UcmFuc2l0aW9uRXhpdGVkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiwgSFRNTEVsZW1lbnRUeXBlLCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGFzIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiwgdW5zdGFibGVfdXNlRXZlbnRDYWxsYmFjayBhcyB1c2VFdmVudENhbGxiYWNrIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnLi4vY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICcuLi91dGlscy9pc0hvc3RDb21wb25lbnQnO1xuaW1wb3J0IFBvcnRhbCBmcm9tICcuLi9Qb3J0YWwnO1xuaW1wb3J0IE1vZGFsTWFuYWdlciwgeyBhcmlhSGlkZGVuIH0gZnJvbSAnLi9Nb2RhbE1hbmFnZXInO1xuaW1wb3J0IFRyYXBGb2N1cyBmcm9tICcuLi9VbnN0YWJsZV9UcmFwRm9jdXMnO1xuaW1wb3J0IHsgZ2V0TW9kYWxVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL21vZGFsVW5zdHlsZWRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcGVuLFxuICAgIGV4aXRlZCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhb3BlbiAmJiBleGl0ZWQgJiYgJ2hpZGRlbiddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TW9kYWxVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbiA/IHByb3BzLmNoaWxkcmVuLnByb3BzLmhhc093blByb3BlcnR5KCdpbicpIDogZmFsc2U7XG59IC8vIEEgbW9kYWwgbWFuYWdlciB1c2VkIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHN0YXRlIG9mIG9wZW4gTW9kYWxzLlxuLy8gTW9kYWxzIGRvbid0IG9wZW4gb24gdGhlIHNlcnZlciBzbyB0aGlzIHdvbid0IGNvbmZsaWN0IHdpdGggY29uY3VycmVudCByZXF1ZXN0cy5cblxuXG5jb25zdCBkZWZhdWx0TWFuYWdlciA9IG5ldyBNb2RhbE1hbmFnZXIoKTtcbi8qKlxuICogTW9kYWwgaXMgYSBsb3dlci1sZXZlbCBjb25zdHJ1Y3QgdGhhdCBpcyBsZXZlcmFnZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqIC0gW0RpYWxvZ10oL2FwaS9kaWFsb2cvKVxuICogLSBbRHJhd2VyXSgvYXBpL2RyYXdlci8pXG4gKiAtIFtNZW51XSgvYXBpL21lbnUvKVxuICogLSBbUG9wb3Zlcl0oL2FwaS9wb3BvdmVyLylcbiAqXG4gKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgbW9kYWwgZGlhbG9nLCB5b3UgcHJvYmFibHkgd2FudCB0byB1c2UgdGhlIFtEaWFsb2ddKC9hcGkvZGlhbG9nLykgY29tcG9uZW50XG4gKiByYXRoZXIgdGhhbiBkaXJlY3RseSB1c2luZyBNb2RhbC5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBzaGFyZXMgbWFueSBjb25jZXB0cyB3aXRoIFtyZWFjdC1vdmVybGF5c10oaHR0cHM6Ly9yZWFjdC1ib290c3RyYXAuZ2l0aHViLmlvL3JlYWN0LW92ZXJsYXlzLyNtb2RhbHMpLlxuICovXG5cbmNvbnN0IE1vZGFsVW5zdHlsZWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNb2RhbFVuc3R5bGVkKHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIEJhY2tkcm9wQ29tcG9uZW50LFxuICAgIEJhY2tkcm9wUHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgY2xhc3NOYW1lLFxuICAgIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uID0gZmFsc2UsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gZmFsc2UsXG4gICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlU2Nyb2xsTG9jayA9IGZhbHNlLFxuICAgIGhpZGVCYWNrZHJvcCA9IGZhbHNlLFxuICAgIGtlZXBNb3VudGVkID0gZmFsc2UsXG4gICAgLy8gcHJpdmF0ZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgbWFuYWdlciA9IGRlZmF1bHRNYW5hZ2VyLFxuICAgIG9uQmFja2Ryb3BDbGljayxcbiAgICBvbkNsb3NlLFxuICAgIG9uS2V5RG93bixcbiAgICBvcGVuLFxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuICAgIHRoZW1lLFxuICAgIG9uVHJhbnNpdGlvbkVudGVyLFxuICAgIG9uVHJhbnNpdGlvbkV4aXRlZFxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgW2V4aXRlZCwgc2V0RXhpdGVkXSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBtb2RhbCA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIGNvbnN0IG1vdW50Tm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgbW9kYWxSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobW9kYWxSZWYsIHJlZik7XG4gIGNvbnN0IGhhc1RyYW5zaXRpb24gPSBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKTtcblxuICBjb25zdCBnZXREb2MgPSAoKSA9PiBvd25lckRvY3VtZW50KG1vdW50Tm9kZVJlZi5jdXJyZW50KTtcblxuICBjb25zdCBnZXRNb2RhbCA9ICgpID0+IHtcbiAgICBtb2RhbC5jdXJyZW50Lm1vZGFsUmVmID0gbW9kYWxSZWYuY3VycmVudDtcbiAgICBtb2RhbC5jdXJyZW50Lm1vdW50Tm9kZSA9IG1vdW50Tm9kZVJlZi5jdXJyZW50O1xuICAgIHJldHVybiBtb2RhbC5jdXJyZW50O1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU1vdW50ZWQgPSAoKSA9PiB7XG4gICAgbWFuYWdlci5tb3VudChnZXRNb2RhbCgpLCB7XG4gICAgICBkaXNhYmxlU2Nyb2xsTG9ja1xuICAgIH0pOyAvLyBGaXggYSBidWcgb24gQ2hyb21lIHdoZXJlIHRoZSBzY3JvbGwgaXNuJ3QgaW5pdGlhbGx5IDAuXG5cbiAgICBtb2RhbFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IDA7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlT3BlbiA9IHVzZUV2ZW50Q2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IHJlc29sdmVkQ29udGFpbmVyID0gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZ2V0RG9jKCkuYm9keTtcbiAgICBtYW5hZ2VyLmFkZChnZXRNb2RhbCgpLCByZXNvbHZlZENvbnRhaW5lcik7IC8vIFRoZSBlbGVtZW50IHdhcyBhbHJlYWR5IG1vdW50ZWQuXG5cbiAgICBpZiAobW9kYWxSZWYuY3VycmVudCkge1xuICAgICAgaGFuZGxlTW91bnRlZCgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGlzVG9wTW9kYWwgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBtYW5hZ2VyLmlzVG9wTW9kYWwoZ2V0TW9kYWwoKSksIFttYW5hZ2VyXSk7XG4gIGNvbnN0IGhhbmRsZVBvcnRhbFJlZiA9IHVzZUV2ZW50Q2FsbGJhY2sobm9kZSA9PiB7XG4gICAgbW91bnROb2RlUmVmLmN1cnJlbnQgPSBub2RlO1xuXG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9wZW4gJiYgaXNUb3BNb2RhbCgpKSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyaWFIaWRkZW4obW9kYWxSZWYuY3VycmVudCwgdHJ1ZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlQ2xvc2UgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgbWFuYWdlci5yZW1vdmUoZ2V0TW9kYWwoKSk7XG4gIH0sIFttYW5hZ2VyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZUNsb3NlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGhhbmRsZU9wZW4oKTtcbiAgICB9IGVsc2UgaWYgKCFoYXNUcmFuc2l0aW9uIHx8ICFjbG9zZUFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9XG4gIH0sIFtvcGVuLCBoYW5kbGVDbG9zZSwgaGFzVHJhbnNpdGlvbiwgY2xvc2VBZnRlclRyYW5zaXRpb24sIGhhbmRsZU9wZW5dKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb24sXG4gICAgZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgIGRpc2FibGVQb3J0YWwsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICBkaXNhYmxlU2Nyb2xsTG9jayxcbiAgICBleGl0ZWQsXG4gICAgaGlkZUJhY2tkcm9wLFxuICAgIGtlZXBNb3VudGVkXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcblxuICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghaGFzVHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBoYW5kbGVFbnRlciA9ICgpID0+IHtcbiAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuXG4gICAgaWYgKG9uVHJhbnNpdGlvbkVudGVyKSB7XG4gICAgICBvblRyYW5zaXRpb25FbnRlcigpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSAoKSA9PiB7XG4gICAgc2V0RXhpdGVkKHRydWUpO1xuXG4gICAgaWYgKG9uVHJhbnNpdGlvbkV4aXRlZCkge1xuICAgICAgb25UcmFuc2l0aW9uRXhpdGVkKCk7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVCYWNrZHJvcENsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25CYWNrZHJvcENsaWNrKSB7XG4gICAgICBvbkJhY2tkcm9wQ2xpY2soZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50LCAnYmFja2Ryb3BDbGljaycpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfSAvLyBUaGUgaGFuZGxlciBkb2Vzbid0IHRha2UgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCBpbnRvIGFjY291bnQ6XG4gICAgLy9cbiAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvcnMgbGlrZVxuICAgIC8vIGNsaWNraW5nIGEgY2hlY2tib3ggdG8gY2hlY2sgaXQsIGhpdHRpbmcgYSBidXR0b24gdG8gc3VibWl0IGEgZm9ybSxcbiAgICAvLyBhbmQgaGl0dGluZyBsZWZ0IGFycm93IHRvIG1vdmUgdGhlIGN1cnNvciBpbiBhIHRleHQgaW5wdXQgZXRjLlxuICAgIC8vIE9ubHkgc3BlY2lhbCBIVE1MIGVsZW1lbnRzIGhhdmUgdGhlc2UgZGVmYXVsdCBiZWhhdmlvcnMuXG5cblxuICAgIGlmIChldmVudC5rZXkgIT09ICdFc2NhcGUnIHx8ICFpc1RvcE1vZGFsKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRpc2FibGVFc2NhcGVLZXlEb3duKSB7XG4gICAgICAvLyBTd2FsbG93IHRoZSBldmVudCwgaW4gY2FzZSBzb21lb25lIGlzIGxpc3RlbmluZyBmb3IgdGhlIGVzY2FwZSBrZXkgb24gdGhlIGJvZHkuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2hpbGRQcm9wcyA9IHt9O1xuXG4gIGlmIChjaGlsZHJlbi5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2hpbGRQcm9wcy50YWJJbmRleCA9ICctMSc7XG4gIH0gLy8gSXQncyBhIFRyYW5zaXRpb24gbGlrZSBjb21wb25lbnRcblxuXG4gIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgY2hpbGRQcm9wcy5vbkVudGVyID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUVudGVyLCBjaGlsZHJlbi5wcm9wcy5vbkVudGVyKTtcbiAgICBjaGlsZFByb3BzLm9uRXhpdGVkID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUV4aXRlZCwgY2hpbGRyZW4ucHJvcHMub25FeGl0ZWQpO1xuICB9XG5cbiAgY29uc3QgUm9vdCA9IGNvbXBvbmVudHMuUm9vdCB8fCBjb21wb25lbnQ7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUG9ydGFsLCB7XG4gICAgcmVmOiBoYW5kbGVQb3J0YWxSZWYsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCJcbiAgICB9LCByb290UHJvcHMsICFpc0hvc3RDb21wb25lbnQoUm9vdCkgJiYge1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCByb290UHJvcHMub3duZXJTdGF0ZSksXG4gICAgICB0aGVtZVxuICAgIH0sIG90aGVyLCB7XG4gICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHJvb3RQcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSksXG4gICAgICBjaGlsZHJlbjogWyFoaWRlQmFja2Ryb3AgJiYgQmFja2Ryb3BDb21wb25lbnQgPyAvKiNfX1BVUkVfXyovX2pzeChCYWNrZHJvcENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBvbkNsaWNrOiBoYW5kbGVCYWNrZHJvcENsaWNrXG4gICAgICB9LCBCYWNrZHJvcFByb3BzKSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeChUcmFwRm9jdXMsIHtcbiAgICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1czogZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICAgICAgZGlzYWJsZUF1dG9Gb2N1czogZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1czogZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICAgICAgaXNFbmFibGVkOiBpc1RvcE1vZGFsLFxuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcylcbiAgICAgIH0pXVxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTW9kYWxVbnN0eWxlZC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBiYWNrZHJvcCBjb21wb25lbnQuIFRoaXMgcHJvcCBlbmFibGVzIGN1c3RvbSBiYWNrZHJvcCByZW5kZXJpbmcuXG4gICAqL1xuICBCYWNrZHJvcENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEJhY2tkcm9wVW5zdHlsZWRgXSgvYXBpL2JhY2tkcm9wLXVuc3R5bGVkLykgZWxlbWVudC5cbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNb2RhbC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgTW9kYWwuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50IG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgbW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGl0dGluZyBlc2NhcGUgd2lsbCBub3QgZmlyZSB0aGUgYG9uQ2xvc2VgIGNhbGxiYWNrLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1vZGFsVW5zdHlsZWQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCYWNrZHJvcCcsIHNsb3QpO1xufVxuY29uc3QgYmFja2Ryb3BVbnN0eWxlZENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCYWNrZHJvcCcsIFsncm9vdCcsICdpbnZpc2libGUnXSk7XG5leHBvcnQgZGVmYXVsdCBiYWNrZHJvcFVuc3R5bGVkQ2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImludmlzaWJsZVwiLCBcImNvbXBvbmVudFwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJ0aGVtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICcuLi9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgaXNIb3N0Q29tcG9uZW50IGZyb20gJy4uL3V0aWxzL2lzSG9zdENvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXRCYWNrZHJvcFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYmFja2Ryb3BVbnN0eWxlZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgaW52aXNpYmxlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBpbnZpc2libGUgJiYgJ2ludmlzaWJsZSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgQmFja2Ryb3BVbnN0eWxlZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJhY2tkcm9wVW5zdHlsZWQocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgY2xhc3NOYW1lLFxuICAgIGludmlzaWJsZSA9IGZhbHNlLFxuICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cbiAgICB0aGVtZVxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wLFxuICAgIGludmlzaWJsZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFJvb3QgPSBjb21wb25lbnRzLlJvb3QgfHwgY29tcG9uZW50O1xuICBjb25zdCByb290UHJvcHMgPSBjb21wb25lbnRzUHJvcHMucm9vdCB8fCB7fTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJvb3QsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWVcbiAgfSwgcm9vdFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KFJvb3QpICYmIHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCByb290UHJvcHMub3duZXJTdGF0ZSksXG4gICAgdGhlbWVcbiAgfSwge1xuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgcm9vdFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJhY2tkcm9wVW5zdHlsZWQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIEJhY2tkcm9wLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWNrZHJvcC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBpbnZpc2libGUuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIGEgcG9wb3ZlciBvciBhIGN1c3RvbSBzZWxlY3QgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJhY2tkcm9wVW5zdHlsZWQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFkZEVuZExpc3RlbmVyXCIsIFwiYXBwZWFyXCIsIFwiY2hpbGRyZW5cIiwgXCJlYXNpbmdcIiwgXCJpblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB7IGVsZW1lbnRBY2NlcHRpbmdSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGR1cmF0aW9uIH0gZnJvbSAnLi4vc3R5bGVzL2NyZWF0ZVRyYW5zaXRpb25zJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMVxuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgb3BhY2l0eTogMVxuICB9XG59O1xuY29uc3QgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIEZhZGUgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbTW9kYWxdKC9jb21wb25lbnRzL21vZGFsLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG5jb25zdCBGYWRlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRmFkZShwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICBhcHBlYXIgPSB0cnVlLFxuICAgIGNoaWxkcmVuLFxuICAgIGVhc2luZyxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRW50ZXIsXG4gICAgb25FbnRlcmVkLFxuICAgIG9uRW50ZXJpbmcsXG4gICAgb25FeGl0LFxuICAgIG9uRXhpdGVkLFxuICAgIG9uRXhpdGluZyxcbiAgICBzdHlsZSxcbiAgICB0aW1lb3V0ID0gZGVmYXVsdFRpbWVvdXQsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID0gdHJ1ZTtcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgZm9yZWlnblJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCByZWYpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKG5vZGVSZWYsIGZvcmVpZ25SZWYpO1xuXG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiBtYXliZUlzQXBwZWFyaW5nID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7IC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuXG4gICAgICBpZiAobWF5YmVJc0FwcGVhcmluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSwgbWF5YmVJc0FwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUVudGVyaW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyaW5nKTtcbiAgY29uc3QgaGFuZGxlRW50ZXIgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIHJlZmxvdyhub2RlKTsgLy8gU28gdGhlIGFuaW1hdGlvbiBhbHdheXMgc3RhcnQgZnJvbSB0aGUgc3RhcnQuXG5cbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2VudGVyJ1xuICAgIH0pO1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcblxuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICBjb25zdCBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICBjb25zdCBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuXG4gIGNvbnN0IGhhbmRsZUFkZEVuZExpc3RlbmVyID0gbmV4dCA9PiB7XG4gICAgaWYgKGFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAvLyBPbGQgY2FsbCBzaWduYXR1cmUgYmVmb3JlIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwYCBpbXBsZW1lbnRlZCBgbm9kZVJlZmBcbiAgICAgIGFkZEVuZExpc3RlbmVyKG5vZGVSZWYuY3VycmVudCwgbmV4dCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiBhcHBlYXIsXG4gICAgaW46IGluUHJvcCxcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBoYW5kbGVBZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IChzdGF0ZSwgY2hpbGRQcm9wcykgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmFkZS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nIERPTVxuICAgKiBub2RlIGFuZCBhIGRvbmUgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIE5vdGU6IFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSB0cmFuc2l0aW9uIHRpbWluZyBmdW5jdGlvbi5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIGVhc2luZyBvciBhIG9iamVjdCBjb250YWluaW5nIGVudGVyIGFuZCBleGl0IHZhbHVlcy5cbiAgICovXG4gIGVhc2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbnRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGl0OiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAqICAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlbixcbiAgICogfVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRmFkZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiY2xhc3NOYW1lXCIsIFwiaW52aXNpYmxlXCIsIFwib3BlblwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgaXNIb3N0Q29tcG9uZW50IH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBCYWNrZHJvcFVuc3R5bGVkLCB7IGJhY2tkcm9wVW5zdHlsZWRDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL0JhY2tkcm9wVW5zdHlsZWQnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBGYWRlIGZyb20gJy4uL0ZhZGUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBiYWNrZHJvcENsYXNzZXMgPSBiYWNrZHJvcFVuc3R5bGVkQ2xhc3NlcztcblxuY29uc3QgZXh0ZW5kVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIHJldHVybiBjbGFzc2VzO1xufTtcblxuY29uc3QgQmFja2Ryb3BSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlCYWNrZHJvcCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmludmlzaWJsZSAmJiBzdHlsZXMuaW52aXNpYmxlXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC41KScsXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG59LCBvd25lclN0YXRlLmludmlzaWJsZSAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xufSkpO1xuY29uc3QgQmFja2Ryb3AgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCYWNrZHJvcChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9jb21wb25lbnRzUHJvcHMkcm9vdDtcblxuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCYWNrZHJvcCdcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICBjbGFzc05hbWUsXG4gICAgaW52aXNpYmxlID0gZmFsc2UsXG4gICAgb3BlbixcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gRmFkZVxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGludmlzaWJsZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gZXh0ZW5kVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEJhY2tkcm9wVW5zdHlsZWQsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgaW52aXNpYmxlOiBpbnZpc2libGUsXG4gICAgICBjb21wb25lbnRzOiBfZXh0ZW5kcyh7XG4gICAgICAgIFJvb3Q6IEJhY2tkcm9wUm9vdFxuICAgICAgfSwgY29tcG9uZW50cyksXG4gICAgICBjb21wb25lbnRzUHJvcHM6IHtcbiAgICAgICAgcm9vdDogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcy5yb290LCAoIWNvbXBvbmVudHMuUm9vdCB8fCAhaXNIb3N0Q29tcG9uZW50KGNvbXBvbmVudHMuUm9vdCkpICYmIHtcbiAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkcm9vdCA9IGNvbXBvbmVudHNQcm9wcy5yb290KSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHNQcm9wcyRyb290Lm93bmVyU3RhdGUpXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWNrZHJvcC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWNrZHJvcC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgQmFja2Ryb3AuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgaW52aXNpYmxlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB3aGVuIHJlbmRlcmluZyBhIHBvcG92ZXIgb3IgYSBjdXN0b20gc2VsZWN0IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJhY2tkcm9wOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJCYWNrZHJvcENvbXBvbmVudFwiLCBcImNsb3NlQWZ0ZXJUcmFuc2l0aW9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c1wiLCBcImRpc2FibGVFbmZvcmNlRm9jdXNcIiwgXCJkaXNhYmxlRXNjYXBlS2V5RG93blwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJkaXNhYmxlUmVzdG9yZUZvY3VzXCIsIFwiZGlzYWJsZVNjcm9sbExvY2tcIiwgXCJoaWRlQmFja2Ryb3BcIiwgXCJrZWVwTW91bnRlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiwgSFRNTEVsZW1lbnRUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgTW9kYWxVbnN0eWxlZCwgeyBtb2RhbFVuc3R5bGVkQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9Nb2RhbFVuc3R5bGVkJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQmFja2Ryb3AgZnJvbSAnLi4vQmFja2Ryb3AnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBtb2RhbENsYXNzZXMgPSBtb2RhbFVuc3R5bGVkQ2xhc3NlcztcblxuY29uc3QgZXh0ZW5kVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgcmV0dXJuIG93bmVyU3RhdGUuY2xhc3Nlcztcbn07XG5cbmNvbnN0IE1vZGFsUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpTW9kYWwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUub3BlbiAmJiBvd25lclN0YXRlLmV4aXRlZCAmJiBzdHlsZXMuaGlkZGVuXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHpJbmRleDogdGhlbWUuekluZGV4Lm1vZGFsLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDBcbn0sICFvd25lclN0YXRlLm9wZW4gJiYgb3duZXJTdGF0ZS5leGl0ZWQgJiYge1xuICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xufSkpO1xuY29uc3QgTW9kYWxCYWNrZHJvcCA9IHN0eWxlZChCYWNrZHJvcCwge1xuICBuYW1lOiAnTXVpTW9kYWwnLFxuICBzbG90OiAnQmFja2Ryb3AnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICByZXR1cm4gc3R5bGVzLmJhY2tkcm9wO1xuICB9XG59KSh7XG4gIHpJbmRleDogLTFcbn0pO1xuLyoqXG4gKiBNb2RhbCBpcyBhIGxvd2VyLWxldmVsIGNvbnN0cnVjdCB0aGF0IGlzIGxldmVyYWdlZCBieSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogLSBbRGlhbG9nXSgvYXBpL2RpYWxvZy8pXG4gKiAtIFtEcmF3ZXJdKC9hcGkvZHJhd2VyLylcbiAqIC0gW01lbnVdKC9hcGkvbWVudS8pXG4gKiAtIFtQb3BvdmVyXSgvYXBpL3BvcG92ZXIvKVxuICpcbiAqIElmIHlvdSBhcmUgY3JlYXRpbmcgYSBtb2RhbCBkaWFsb2csIHlvdSBwcm9iYWJseSB3YW50IHRvIHVzZSB0aGUgW0RpYWxvZ10oL2FwaS9kaWFsb2cvKSBjb21wb25lbnRcbiAqIHJhdGhlciB0aGFuIGRpcmVjdGx5IHVzaW5nIE1vZGFsLlxuICpcbiAqIFRoaXMgY29tcG9uZW50IHNoYXJlcyBtYW55IGNvbmNlcHRzIHdpdGggW3JlYWN0LW92ZXJsYXlzXShodHRwczovL3JlYWN0LWJvb3RzdHJhcC5naXRodWIuaW8vcmVhY3Qtb3ZlcmxheXMvI21vZGFscykuXG4gKi9cblxuY29uc3QgTW9kYWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNb2RhbChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9jb21wb25lbnRzUHJvcHMkcm9vdDtcblxuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIG5hbWU6ICdNdWlNb2RhbCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gTW9kYWxCYWNrZHJvcCxcbiAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IGZhbHNlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICBkaXNhYmxlQXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gZmFsc2UsXG4gICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlU2Nyb2xsTG9jayA9IGZhbHNlLFxuICAgIGhpZGVCYWNrZHJvcCA9IGZhbHNlLFxuICAgIGtlZXBNb3VudGVkID0gZmFsc2VcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IFtleGl0ZWQsIHNldEV4aXRlZF0gPSBSZWFjdC51c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgY29tbW9uUHJvcHMgPSB7XG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb24sXG4gICAgZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgIGRpc2FibGVQb3J0YWwsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICBkaXNhYmxlU2Nyb2xsTG9jayxcbiAgICBoaWRlQmFja2Ryb3AsXG4gICAga2VlcE1vdW50ZWRcbiAgfTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCBjb21tb25Qcm9wcywge1xuICAgIGV4aXRlZFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gZXh0ZW5kVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChNb2RhbFVuc3R5bGVkLCBfZXh0ZW5kcyh7XG4gICAgY29tcG9uZW50czogX2V4dGVuZHMoe1xuICAgICAgUm9vdDogTW9kYWxSb290XG4gICAgfSwgY29tcG9uZW50cyksXG4gICAgY29tcG9uZW50c1Byb3BzOiB7XG4gICAgICByb290OiBfZXh0ZW5kcyh7fSwgY29tcG9uZW50c1Byb3BzLnJvb3QsICghY29tcG9uZW50cy5Sb290IHx8ICFpc0hvc3RDb21wb25lbnQoY29tcG9uZW50cy5Sb290KSkgJiYge1xuICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkcm9vdCA9IGNvbXBvbmVudHNQcm9wcy5yb290KSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHNQcm9wcyRyb290Lm93bmVyU3RhdGUpXG4gICAgICB9KVxuICAgIH0sXG4gICAgQmFja2Ryb3BDb21wb25lbnQ6IEJhY2tkcm9wQ29tcG9uZW50LFxuICAgIG9uVHJhbnNpdGlvbkVudGVyOiAoKSA9PiBzZXRFeGl0ZWQoZmFsc2UpLFxuICAgIG9uVHJhbnNpdGlvbkV4aXRlZDogKCkgPT4gc2V0RXhpdGVkKHRydWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1xuICB9LCBjb21tb25Qcm9wcywge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1vZGFsLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIGJhY2tkcm9wIGNvbXBvbmVudC4gVGhpcyBwcm9wIGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICogQGRlZmF1bHQgc3R5bGVkKEJhY2tkcm9wLCB7XG4gICAqICAgbmFtZTogJ011aU1vZGFsJyxcbiAgICogICBzbG90OiAnQmFja2Ryb3AnLFxuICAgKiAgIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgKiAgICAgcmV0dXJuIHN0eWxlcy5iYWNrZHJvcDtcbiAgICogICB9LFxuICAgKiB9KSh7XG4gICAqICAgekluZGV4OiAtMSxcbiAgICogfSlcbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgQmFja2Ryb3BgXSgvYXBpL2JhY2tkcm9wLykgZWxlbWVudC5cbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFdoZW4gc2V0IHRvIHRydWUgdGhlIE1vZGFsIHdhaXRzIHVudGlsIGEgbmVzdGVkIFRyYW5zaXRpb24gaXMgY29tcGxldGVkIGJlZm9yZSBjbG9zaW5nLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY2xvc2VBZnRlclRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNb2RhbC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgTW9kYWwuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50IG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgbW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGl0dGluZyBlc2NhcGUgd2lsbCBub3QgZmlyZSB0aGUgYG9uQ2xvc2VgIGNhbGxiYWNrLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBvcG92ZXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVBvcG92ZXInLCBzbG90KTtcbn1cbmNvbnN0IHBvcG92ZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUG9wb3ZlcicsIFsncm9vdCcsICdwYXBlciddKTtcbmV4cG9ydCBkZWZhdWx0IHBvcG92ZXJDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkVudGVyaW5nXCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcImFjdGlvblwiLCBcImFuY2hvckVsXCIsIFwiYW5jaG9yT3JpZ2luXCIsIFwiYW5jaG9yUG9zaXRpb25cIiwgXCJhbmNob3JSZWZlcmVuY2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRhaW5lclwiLCBcImVsZXZhdGlvblwiLCBcIm1hcmdpblRocmVzaG9sZFwiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwidHJhbnNmb3JtT3JpZ2luXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBpbnRlZ2VyUHJvcFR5cGUsIGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLCByZWZUeXBlLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgb3duZXJXaW5kb3cgZnJvbSAnLi4vdXRpbHMvb3duZXJXaW5kb3cnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgR3JvdyBmcm9tICcuLi9Hcm93JztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Nb2RhbCc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IHsgZ2V0UG9wb3ZlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vcG9wb3ZlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRUb3AocmVjdCwgdmVydGljYWwpIHtcbiAgbGV0IG9mZnNldCA9IDA7XG5cbiAgaWYgKHR5cGVvZiB2ZXJ0aWNhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSB2ZXJ0aWNhbDtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodCAvIDI7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdib3R0b20nKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldExlZnQocmVjdCwgaG9yaXpvbnRhbCkge1xuICBsZXQgb2Zmc2V0ID0gMDtcblxuICBpZiAodHlwZW9mIGhvcml6b250YWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gaG9yaXpvbnRhbDtcbiAgfSBlbHNlIGlmIChob3Jpem9udGFsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGggLyAyO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdyaWdodCcpIHtcbiAgICBvZmZzZXQgPSByZWN0LndpZHRoO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKSB7XG4gIHJldHVybiBbdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbF0ubWFwKG4gPT4gdHlwZW9mIG4gPT09ICdudW1iZXInID8gYCR7bn1weGAgOiBuKS5qb2luKCcgJyk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkge1xuICByZXR1cm4gdHlwZW9mIGFuY2hvckVsID09PSAnZnVuY3Rpb24nID8gYW5jaG9yRWwoKSA6IGFuY2hvckVsO1xufVxuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgcGFwZXI6IFsncGFwZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBvcG92ZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgUG9wb3ZlclJvb3QgPSBzdHlsZWQoTW9kYWwsIHtcbiAgbmFtZTogJ011aVBvcG92ZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbmNvbnN0IFBvcG92ZXJQYXBlciA9IHN0eWxlZChQYXBlciwge1xuICBuYW1lOiAnTXVpUG9wb3ZlcicsXG4gIHNsb3Q6ICdQYXBlcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnBhcGVyXG59KSh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgLy8gU28gd2Ugc2VlIHRoZSBwb3BvdmVyIHdoZW4gaXQncyBlbXB0eS5cbiAgLy8gSXQncyBtb3N0IGxpa2VseSBvbiBpc3N1ZSBvbiB1c2VybGFuZC5cbiAgbWluV2lkdGg6IDE2LFxuICBtaW5IZWlnaHQ6IDE2LFxuICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gMzJweCknLFxuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwXG59KTtcbmNvbnN0IFBvcG92ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BvdmVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQb3BvdmVyJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYWN0aW9uLFxuICAgIGFuY2hvckVsLFxuICAgIGFuY2hvck9yaWdpbiA9IHtcbiAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICAgIH0sXG4gICAgYW5jaG9yUG9zaXRpb24sXG4gICAgYW5jaG9yUmVmZXJlbmNlID0gJ2FuY2hvckVsJyxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29udGFpbmVyOiBjb250YWluZXJQcm9wLFxuICAgIGVsZXZhdGlvbiA9IDgsXG4gICAgbWFyZ2luVGhyZXNob2xkID0gMTYsXG4gICAgb3BlbixcbiAgICBQYXBlclByb3BzID0ge30sXG4gICAgdHJhbnNmb3JtT3JpZ2luID0ge1xuICAgICAgdmVydGljYWw6ICd0b3AnLFxuICAgICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gICAgfSxcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gR3JvdyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblByb3AgPSAnYXV0bycsXG4gICAgVHJhbnNpdGlvblByb3BzOiB7XG4gICAgICBvbkVudGVyaW5nXG4gICAgfSA9IHt9XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgVHJhbnNpdGlvblByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMuVHJhbnNpdGlvblByb3BzLCBfZXhjbHVkZWQpLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcblxuICBjb25zdCBwYXBlclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBoYW5kbGVQYXBlclJlZiA9IHVzZUZvcmtSZWYocGFwZXJSZWYsIFBhcGVyUHJvcHMucmVmKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYW5jaG9yT3JpZ2luLFxuICAgIGFuY2hvclJlZmVyZW5jZSxcbiAgICBlbGV2YXRpb24sXG4gICAgbWFyZ2luVGhyZXNob2xkLFxuICAgIFBhcGVyUHJvcHMsXG4gICAgdHJhbnNmb3JtT3JpZ2luLFxuICAgIFRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wLFxuICAgIFRyYW5zaXRpb25Qcm9wc1xuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7IC8vIFJldHVybnMgdGhlIHRvcC9sZWZ0IG9mZnNldCBvZiB0aGUgcG9zaXRpb25cbiAgLy8gdG8gYXR0YWNoIHRvIG9uIHRoZSBhbmNob3IgZWxlbWVudCAob3IgYm9keSBpZiBub25lIGlzIHByb3ZpZGVkKVxuXG4gIGNvbnN0IGdldEFuY2hvck9mZnNldCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnYW5jaG9yUG9zaXRpb24nKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIWFuY2hvclBvc2l0aW9uKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgYGFuY2hvclBvc2l0aW9uYCBwcm9wIHdoZW4gdXNpbmcgJyArICc8UG9wb3ZlciBhbmNob3JSZWZlcmVuY2U9XCJhbmNob3JQb3NpdGlvblwiIC8+LicpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhbmNob3JQb3NpdGlvbjtcbiAgICB9XG5cbiAgICBjb25zdCByZXNvbHZlZEFuY2hvckVsID0gcmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKTsgLy8gSWYgYW4gYW5jaG9yIGVsZW1lbnQgd2Fzbid0IHByb3ZpZGVkLCBqdXN0IHVzZSB0aGUgcGFyZW50IGJvZHkgZWxlbWVudCBvZiB0aGlzIFBvcG92ZXJcblxuICAgIGNvbnN0IGFuY2hvckVsZW1lbnQgPSByZXNvbHZlZEFuY2hvckVsICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEgPyByZXNvbHZlZEFuY2hvckVsIDogb3duZXJEb2N1bWVudChwYXBlclJlZi5jdXJyZW50KS5ib2R5O1xuICAgIGNvbnN0IGFuY2hvclJlY3QgPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGJveCA9IGFuY2hvckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGJveC50b3AgPT09IDAgJiYgYm94LmxlZnQgPT09IDAgJiYgYm94LnJpZ2h0ID09PSAwICYmIGJveC5ib3R0b20gPT09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBhbmNob3JSZWN0LnRvcCArIGdldE9mZnNldFRvcChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4udmVydGljYWwpLFxuICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0ICsgZ2V0T2Zmc2V0TGVmdChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsLCBhbmNob3JPcmlnaW4udmVydGljYWwsIGFuY2hvclBvc2l0aW9uLCBhbmNob3JSZWZlcmVuY2VdKTsgLy8gUmV0dXJucyB0aGUgYmFzZSB0cmFuc2Zvcm0gb3JpZ2luIHVzaW5nIHRoZSBlbGVtZW50XG5cbiAgY29uc3QgZ2V0VHJhbnNmb3JtT3JpZ2luID0gUmVhY3QudXNlQ2FsbGJhY2soZWxlbVJlY3QgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJ0aWNhbDogZ2V0T2Zmc2V0VG9wKGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWwpLFxuICAgICAgaG9yaXpvbnRhbDogZ2V0T2Zmc2V0TGVmdChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwpXG4gICAgfTtcbiAgfSwgW3RyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsLCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWxdKTtcbiAgY29uc3QgZ2V0UG9zaXRpb25pbmdTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGVsZW1lbnQgPT4ge1xuICAgIGNvbnN0IGVsZW1SZWN0ID0ge1xuICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gICAgfTsgLy8gR2V0IHRoZSB0cmFuc2Zvcm0gb3JpZ2luIHBvaW50IG9uIHRoZSBlbGVtZW50IGl0c2VsZlxuXG4gICAgY29uc3QgZWxlbVRyYW5zZm9ybU9yaWdpbiA9IGdldFRyYW5zZm9ybU9yaWdpbihlbGVtUmVjdCk7XG5cbiAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgbGVmdDogbnVsbCxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZShlbGVtVHJhbnNmb3JtT3JpZ2luKVxuICAgICAgfTtcbiAgICB9IC8vIEdldCB0aGUgb2Zmc2V0IG9mIHRoZSBhbmNob3JpbmcgZWxlbWVudFxuXG5cbiAgICBjb25zdCBhbmNob3JPZmZzZXQgPSBnZXRBbmNob3JPZmZzZXQoKTsgLy8gQ2FsY3VsYXRlIGVsZW1lbnQgcG9zaXRpb25pbmdcblxuICAgIGxldCB0b3AgPSBhbmNob3JPZmZzZXQudG9wIC0gZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbDtcbiAgICBsZXQgbGVmdCA9IGFuY2hvck9mZnNldC5sZWZ0IC0gZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsO1xuICAgIGNvbnN0IGJvdHRvbSA9IHRvcCArIGVsZW1SZWN0LmhlaWdodDtcbiAgICBjb25zdCByaWdodCA9IGxlZnQgKyBlbGVtUmVjdC53aWR0aDsgLy8gVXNlIHRoZSBwYXJlbnQgd2luZG93IG9mIHRoZSBhbmNob3JFbCBpZiBwcm92aWRlZFxuXG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3cocmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKSk7IC8vIFdpbmRvdyB0aHJlc2hvbGRzIHRha2luZyByZXF1aXJlZCBtYXJnaW4gaW50byBhY2NvdW50XG5cbiAgICBjb25zdCBoZWlnaHRUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJIZWlnaHQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgY29uc3Qgd2lkdGhUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJXaWR0aCAtIG1hcmdpblRocmVzaG9sZDsgLy8gQ2hlY2sgaWYgdGhlIHZlcnRpY2FsIGF4aXMgbmVlZHMgc2hpZnRpbmdcblxuICAgIGlmICh0b3AgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSB0b3AgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICB0b3AgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKGJvdHRvbSA+IGhlaWdodFRocmVzaG9sZCkge1xuICAgICAgY29uc3QgZGlmZiA9IGJvdHRvbSAtIGhlaWdodFRocmVzaG9sZDtcbiAgICAgIHRvcCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCArPSBkaWZmO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWxlbVJlY3QuaGVpZ2h0ID4gaGVpZ2h0VGhyZXNob2xkICYmIGVsZW1SZWN0LmhlaWdodCAmJiBoZWlnaHRUaHJlc2hvbGQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlIHBvcG92ZXIgY29tcG9uZW50IGlzIHRvbyB0YWxsLicsIGBTb21lIHBhcnQgb2YgaXQgY2FuIG5vdCBiZSBzZWVuIG9uIHRoZSBzY3JlZW4gKCR7ZWxlbVJlY3QuaGVpZ2h0IC0gaGVpZ2h0VGhyZXNob2xkfXB4KS5gLCAnUGxlYXNlIGNvbnNpZGVyIGFkZGluZyBhIGBtYXgtaGVpZ2h0YCB0byBpbXByb3ZlIHRoZSB1c2VyLWV4cGVyaWVuY2UuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0gLy8gQ2hlY2sgaWYgdGhlIGhvcml6b250YWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuXG5cbiAgICBpZiAobGVmdCA8IG1hcmdpblRocmVzaG9sZCkge1xuICAgICAgY29uc3QgZGlmZiA9IGxlZnQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICBsZWZ0IC09IGRpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKHJpZ2h0ID4gd2lkdGhUaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSByaWdodCAtIHdpZHRoVGhyZXNob2xkO1xuICAgICAgbGVmdCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IGRpZmY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYCR7TWF0aC5yb3VuZCh0b3ApfXB4YCxcbiAgICAgIGxlZnQ6IGAke01hdGgucm91bmQobGVmdCl9cHhgLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZShlbGVtVHJhbnNmb3JtT3JpZ2luKVxuICAgIH07XG4gIH0sIFthbmNob3JFbCwgYW5jaG9yUmVmZXJlbmNlLCBnZXRBbmNob3JPZmZzZXQsIGdldFRyYW5zZm9ybU9yaWdpbiwgbWFyZ2luVGhyZXNob2xkXSk7XG4gIGNvbnN0IHNldFBvc2l0aW9uaW5nU3R5bGVzID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBwYXBlclJlZi5jdXJyZW50O1xuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcG9zaXRpb25pbmcgPSBnZXRQb3NpdGlvbmluZ1N0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKHBvc2l0aW9uaW5nLnRvcCAhPT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSBwb3NpdGlvbmluZy50b3A7XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uaW5nLmxlZnQgIT09IG51bGwpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IHBvc2l0aW9uaW5nLmxlZnQ7XG4gICAgfVxuXG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBwb3NpdGlvbmluZy50cmFuc2Zvcm1PcmlnaW47XG4gIH0sIFtnZXRQb3NpdGlvbmluZ1N0eWxlXSk7XG5cbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSAoZWxlbWVudCwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZyk7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCAoKSA9PiBvcGVuID8ge1xuICAgIHVwZGF0ZVBvc2l0aW9uOiAoKSA9PiB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSA6IG51bGwsIFtvcGVuLCBzZXRQb3NpdGlvbmluZ1N0eWxlc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGFuY2hvckVsKTtcbiAgICBjb250YWluZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICBjb250YWluZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIG9wZW4sIHNldFBvc2l0aW9uaW5nU3R5bGVzXSk7XG4gIGxldCB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wO1xuXG4gIGlmICh0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID09PSAnYXV0bycgJiYgIVRyYW5zaXRpb25Db21wb25lbnQubXVpU3VwcG9ydEF1dG8pIHtcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSB1bmRlZmluZWQ7XG4gIH0gLy8gSWYgdGhlIGNvbnRhaW5lciBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgdGhhdFxuICAvLyBJZiB0aGUgYW5jaG9yRWwgcHJvcCBpcyBwcm92aWRlZCwgdXNlIGl0cyBwYXJlbnQgYm9keSBlbGVtZW50IGFzIHRoZSBjb250YWluZXJcbiAgLy8gSWYgbmVpdGhlciBhcmUgcHJvdmlkZWQgbGV0IHRoZSBNb2RhbCB0YWtlIGNhcmUgb2YgY2hvb3NpbmcgdGhlIGNvbnRhaW5lclxuXG5cbiAgY29uc3QgY29udGFpbmVyID0gY29udGFpbmVyUHJvcCB8fCAoYW5jaG9yRWwgPyBvd25lckRvY3VtZW50KHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkpLmJvZHkgOiB1bmRlZmluZWQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUG9wb3ZlclJvb3QsIF9leHRlbmRzKHtcbiAgICBCYWNrZHJvcFByb3BzOiB7XG4gICAgICBpbnZpc2libGU6IHRydWVcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgb3Blbjogb3BlbixcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgIGluOiBvcGVuLFxuICAgICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICB9LCBUcmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChQb3BvdmVyUGFwZXIsIF9leHRlbmRzKHtcbiAgICAgICAgZWxldmF0aW9uOiBlbGV2YXRpb25cbiAgICAgIH0sIFBhcGVyUHJvcHMsIHtcbiAgICAgICAgcmVmOiBoYW5kbGVQYXBlclJlZixcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIFBhcGVyUHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KSlcbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3BvdmVyLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyB1cGRhdGVQb3NpdGlvbigpIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKi9cbiAgYW5jaG9yRWw6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5vcGVuICYmICghcHJvcHMuYW5jaG9yUmVmZXJlbmNlIHx8IHByb3BzLmFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvckVsJykpIHtcbiAgICAgIGNvbnN0IHJlc29sdmVkQW5jaG9yRWwgPSByZXNvbHZlQW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuXG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCAmJiByZXNvbHZlZEFuY2hvckVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIGNvbnN0IGJveCA9IHJlc29sdmVkQW5jaG9yRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCBgSXQgc2hvdWxkIGJlIGFuIEVsZW1lbnQgaW5zdGFuY2UgYnV0IGl0J3MgXFxgJHtyZXNvbHZlZEFuY2hvckVsfVxcYCBpbnN0ZWFkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBhbmNob3Igd2hlcmUgdGhlIHBvcG92ZXInc1xuICAgKiBgYW5jaG9yRWxgIHdpbGwgYXR0YWNoIHRvLiBUaGlzIGlzIG5vdCB1c2VkIHdoZW4gdGhlXG4gICAqIGFuY2hvclJlZmVyZW5jZSBpcyAnYW5jaG9yUG9zaXRpb24nLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodF0uXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAqICAgaG9yaXpvbnRhbDogJ2xlZnQnLFxuICAgKiB9XG4gICAqL1xuICBhbmNob3JPcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2xlZnQnLCAncmlnaHQnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnY2VudGVyJywgJ3RvcCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvc2l0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogVGhlIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSB0byB0aGUgYXBwbGljYXRpb24ncyBjbGllbnQgYXJlYS5cbiAgICovXG4gIGFuY2hvclBvc2l0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxlZnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0b3A6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhpcyBkZXRlcm1pbmVzIHdoaWNoIGFuY2hvciBwcm9wIHRvIHJlZmVyIHRvIHdoZW4gc2V0dGluZ1xuICAgKiB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIEBkZWZhdWx0ICdhbmNob3JFbCdcbiAgICovXG4gIGFuY2hvclJlZmVyZW5jZTogUHJvcFR5cGVzLm9uZU9mKFsnYW5jaG9yRWwnLCAnYW5jaG9yUG9zaXRpb24nLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgcGFzc2VkIHRvIHRoZSBNb2RhbCBjb21wb25lbnQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIGFuY2hvckVsJ3MgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogQGRlZmF1bHQgOFxuICAgKi9cbiAgZWxldmF0aW9uOiBpbnRlZ2VyUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBob3cgY2xvc2UgdG8gdGhlIGVkZ2Ugb2YgdGhlIHdpbmRvdyB0aGUgcG9wb3ZlciBjYW4gYXBwZWFyLlxuICAgKiBAZGVmYXVsdCAxNlxuICAgKi9cbiAgbWFyZ2luVGhyZXNob2xkOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBUaGUgYHJlYXNvbmAgcGFyYW1ldGVyIGNhbiBvcHRpb25hbGx5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmVzcG9uc2UgdG8gYG9uQ2xvc2VgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgUGFwZXJgXSgvYXBpL3BhcGVyLykgZWxlbWVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5zaGFwZSh7XG4gICAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZlxuICB9KSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgcG9wb3ZlciB3aGljaFxuICAgKiB3aWxsIGF0dGFjaCB0byB0aGUgYW5jaG9yJ3Mgb3JpZ2luLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b20sIHgocHgpXTtcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIGNlbnRlciwgcmlnaHQsIHgocHgpXS5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICogICBob3Jpem9udGFsOiAnbGVmdCcsXG4gICAqIH1cbiAgICovXG4gIHRyYW5zZm9ybU9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdjZW50ZXInLCAndG9wJ10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICogW0ZvbGxvdyB0aGlzIGd1aWRlXSgvY29tcG9uZW50cy90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBHcm93XG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uLykgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlcjsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVudVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTWVudScsIHNsb3QpO1xufVxuY29uc3QgbWVudUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlNZW51JywgWydyb290JywgJ3BhcGVyJywgJ2xpc3QnXSk7XG5leHBvcnQgZGVmYXVsdCBtZW51Q2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25FbnRlcmluZ1wiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImRpc2FibGVBdXRvRm9jdXNJdGVtXCIsIFwiTWVudUxpc3RQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlBvcG92ZXJDbGFzc2VzXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBNZW51TGlzdCBmcm9tICcuLi9NZW51TGlzdCc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi4vUG9wb3Zlcic7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRNZW51VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tZW51Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgUlRMX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAncmlnaHQnXG59O1xuY29uc3QgTFRSX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAnbGVmdCdcbn07XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBwYXBlcjogWydwYXBlciddLFxuICAgIGxpc3Q6IFsnbGlzdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TWVudVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBNZW51Um9vdCA9IHN0eWxlZChQb3BvdmVyLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlNZW51JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7fSk7XG5jb25zdCBNZW51UGFwZXIgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aU1lbnUnLFxuICBzbG90OiAnUGFwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5wYXBlclxufSkoe1xuICAvLyBzcGVjWjogVGhlIG1heGltdW0gaGVpZ2h0IG9mIGEgc2ltcGxlIG1lbnUgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHJvd3MgbGVzcyB0aGFuIHRoZSB2aWV3XG4gIC8vIGhlaWdodC4gVGhpcyBlbnN1cmVzIGEgdGFwYWJsZSBhcmVhIG91dHNpZGUgb2YgdGhlIHNpbXBsZSBtZW51IHdpdGggd2hpY2ggdG8gZGlzbWlzc1xuICAvLyB0aGUgbWVudS5cbiAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gOTZweCknLFxuICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZyBmb3IgaU9TIDwgMTMuMFxuICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xufSk7XG5jb25zdCBNZW51TWVudUxpc3QgPSBzdHlsZWQoTWVudUxpc3QsIHtcbiAgbmFtZTogJ011aU1lbnUnLFxuICBzbG90OiAnTGlzdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmxpc3Rcbn0pKHtcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMFxufSk7XG5jb25zdCBNZW51ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTWVudSdcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGF1dG9Gb2N1cyA9IHRydWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gPSBmYWxzZSxcbiAgICBNZW51TGlzdFByb3BzID0ge30sXG4gICAgb25DbG9zZSxcbiAgICBvcGVuLFxuICAgIFBhcGVyUHJvcHMgPSB7fSxcbiAgICBQb3BvdmVyQ2xhc3NlcyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSAnYXV0bycsXG4gICAgVHJhbnNpdGlvblByb3BzOiB7XG4gICAgICBvbkVudGVyaW5nXG4gICAgfSA9IHt9LFxuICAgIHZhcmlhbnQgPSAnc2VsZWN0ZWRNZW51J1xuICB9ID0gcHJvcHMsXG4gICAgICAgIFRyYW5zaXRpb25Qcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLlRyYW5zaXRpb25Qcm9wcywgX2V4Y2x1ZGVkKSxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG5cbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBpc1J0bCA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCc7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlQXV0b0ZvY3VzSXRlbSxcbiAgICBNZW51TGlzdFByb3BzLFxuICAgIG9uRW50ZXJpbmcsXG4gICAgUGFwZXJQcm9wcyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgVHJhbnNpdGlvblByb3BzLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBhdXRvRm9jdXNJdGVtID0gYXV0b0ZvY3VzICYmICFkaXNhYmxlQXV0b0ZvY3VzSXRlbSAmJiBvcGVuO1xuICBjb25zdCBtZW51TGlzdEFjdGlvbnNSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSAoZWxlbWVudCwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICBpZiAobWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQpIHtcbiAgICAgIG1lbnVMaXN0QWN0aW9uc1JlZi5jdXJyZW50LmFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyKGVsZW1lbnQsIHRoZW1lKTtcbiAgICB9XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUxpc3RLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdUYWInKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKGV2ZW50LCAndGFiS2V5RG93bicpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIHRoZSBpbmRleCBvZiB0aGUgaXRlbSBzaG91bGQgcmVjZWl2ZSBmb2N1c1xuICAgKiBpbiBhIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgIGl0J3MgdGhlIGZpcnN0IGBzZWxlY3RlZGAgaXRlbVxuICAgKiBvdGhlcndpc2UgaXQncyB0aGUgdmVyeSBmaXJzdCBpdGVtLlxuICAgKi9cblxuXG4gIGxldCBhY3RpdmVJdGVtSW5kZXggPSAtMTsgLy8gc2luY2Ugd2UgaW5qZWN0IGZvY3VzIHJlbGF0ZWQgcHJvcHMgaW50byBjaGlsZHJlbiB3ZSBoYXZlIHRvIGRvIGEgbG9va2FoZWFkXG4gIC8vIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgYHNlbGVjdGVkYCBpdGVtLiBXZSdyZSBsb29raW5nIGZvciB0aGUgbGFzdCBgc2VsZWN0ZWRgXG4gIC8vIGl0ZW0gYW5kIHVzZSB0aGUgZmlyc3QgdmFsaWQgaXRlbSBhcyBhIGZhbGxiYWNrXG5cbiAgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNVUk6IFRoZSBNZW51IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgaWYgKHZhcmlhbnQgPT09ICdzZWxlY3RlZE1lbnUnICYmIGNoaWxkLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfSBlbHNlIGlmIChhY3RpdmVJdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChNZW51Um9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzZXM6IFBvcG92ZXJDbGFzc2VzLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgYW5jaG9yT3JpZ2luOiB7XG4gICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICBob3Jpem9udGFsOiBpc1J0bCA/ICdyaWdodCcgOiAnbGVmdCdcbiAgICB9LFxuICAgIHRyYW5zZm9ybU9yaWdpbjogaXNSdGwgPyBSVExfT1JJR0lOIDogTFRSX09SSUdJTixcbiAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjb21wb25lbnQ6IE1lbnVQYXBlclxuICAgIH0sIFBhcGVyUHJvcHMsIHtcbiAgICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBQYXBlclByb3BzLmNsYXNzZXMsIHtcbiAgICAgICAgcm9vdDogY2xhc3Nlcy5wYXBlclxuICAgICAgfSlcbiAgICB9KSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdCxcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIFRyYW5zaXRpb25Qcm9wczogX2V4dGVuZHMoe1xuICAgICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmdcbiAgICB9LCBUcmFuc2l0aW9uUHJvcHMpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTWVudU1lbnVMaXN0LCBfZXh0ZW5kcyh7XG4gICAgICBvbktleURvd246IGhhbmRsZUxpc3RLZXlEb3duLFxuICAgICAgYWN0aW9uczogbWVudUxpc3RBY3Rpb25zUmVmLFxuICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMgJiYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEgfHwgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0pLFxuICAgICAgYXV0b0ZvY3VzSXRlbTogYXV0b0ZvY3VzSXRlbSxcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5saXN0LCBNZW51TGlzdFByb3BzLmNsYXNzTmFtZSksXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51LnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIG1lbnUuXG4gICAqL1xuICBhbmNob3JFbDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgKERlZmF1bHQpIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGlmIG5vIGZvY3VzYWJsZSBjaGlsZCBpcyBmb3VuZC4gRGlzYWJsZWRcbiAgICogY2hpbGRyZW4gYXJlIG5vdCBmb2N1c2FibGUuIElmIHlvdSBzZXQgdGhpcyBwcm9wIHRvIGBmYWxzZWAgZm9jdXMgd2lsbCBiZSBwbGFjZWRcbiAgICogb24gdGhlIHBhcmVudCBtb2RhbCBjb250YWluZXIuIFRoaXMgaGFzIHNldmVyZSBhY2Nlc3NpYmlsaXR5IGltcGxpY2F0aW9uc1xuICAgKiBhbmQgc2hvdWxkIG9ubHkgYmUgY29uc2lkZXJlZCBpZiB5b3UgbWFuYWdlIGZvY3VzIG90aGVyd2lzZS5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudSBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFdoZW4gb3BlbmluZyB0aGUgbWVudSB3aWxsIG5vdCBmb2N1cyB0aGUgYWN0aXZlIGl0ZW0gYnV0IHRoZSBgW3JvbGU9XCJtZW51XCJdYFxuICAgKiB1bmxlc3MgYGF1dG9Gb2N1c2AgaXMgYWxzbyBzZXQgdG8gYGZhbHNlYC4gTm90IHVzaW5nIHRoZSBkZWZhdWx0IG1lYW5zIG5vdFxuICAgKiBmb2xsb3dpbmcgV0FJLUFSSUEgYXV0aG9yaW5nIHByYWN0aWNlcy4gUGxlYXNlIGJlIGNvbnNpZGVyYXRlIGFib3V0IHBvc3NpYmxlXG4gICAqIGFjY2Vzc2liaWxpdHkgaW1wbGljYXRpb25zLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVMaXN0YF0oL2FwaS9tZW51LWxpc3QvKSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgTWVudUxpc3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYCwgYFwidGFiS2V5RG93blwiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcCBhcHBsaWVkIHRvIHRoZSBbYFBvcG92ZXJgXSgvYXBpL3BvcG92ZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUG9wb3ZlckNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIGxlbmd0aCBvZiB0aGUgdHJhbnNpdGlvbiBpbiBgbXNgLCBvciAnYXV0bydcbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uLykgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1cy5cbiAgICogQGRlZmF1bHQgJ3NlbGVjdGVkTWVudSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ21lbnUnLCAnc2VsZWN0ZWRNZW51J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudTsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU5hdGl2ZVNlbGVjdCcsIHNsb3QpO1xufVxuY29uc3QgbmF0aXZlU2VsZWN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU5hdGl2ZVNlbGVjdCcsIFsncm9vdCcsICdzZWxlY3QnLCAnbXVsdGlwbGUnLCAnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJywgJ2Rpc2FibGVkJywgJ2ljb24nLCAnaWNvbk9wZW4nLCAnaWNvbkZpbGxlZCcsICdpY29uT3V0bGluZWQnLCAnaWNvblN0YW5kYXJkJywgJ25hdGl2ZUlucHV0J10pO1xuZXhwb3J0IGRlZmF1bHQgbmF0aXZlU2VsZWN0Q2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgbmF0aXZlU2VsZWN0Q2xhc3NlcywgeyBnZXROYXRpdmVTZWxlY3RVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vbmF0aXZlU2VsZWN0Q2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBkaXNhYmxlZCxcbiAgICBtdWx0aXBsZSxcbiAgICBvcGVuXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBzZWxlY3Q6IFsnc2VsZWN0JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgbXVsdGlwbGUgJiYgJ211bHRpcGxlJ10sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUodmFyaWFudCl9YCwgb3BlbiAmJiAnaWNvbk9wZW4nLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE5hdGl2ZVNlbGVjdFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMgPSAoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgLy8gV2hlbiBpbnRlcmFjdGluZyBxdWlja2x5LCB0aGUgdGV4dCBjYW4gZW5kIHVwIHNlbGVjdGVkLlxuICAvLyBOYXRpdmUgc2VsZWN0IGNhbid0IGJlIHNlbGVjdGVkIGVpdGhlci5cbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBib3JkZXJSYWRpdXM6IDAsXG4gIC8vIFJlc2V0XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICAnJjpmb2N1cyc6IHtcbiAgICAvLyBTaG93IHRoYXQgaXQncyBub3QgYW4gdGV4dCBpbnB1dFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4wNSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNSknLFxuICAgIGJvcmRlclJhZGl1czogMCAvLyBSZXNldCBDaHJvbWUgc3R5bGVcblxuICB9LFxuICAvLyBSZW1vdmUgSUUxMSBhcnJvd1xuICAnJjo6LW1zLWV4cGFuZCc6IHtcbiAgICBkaXNwbGF5OiAnbm9uZSdcbiAgfSxcbiAgW2AmLiR7bmF0aXZlU2VsZWN0Q2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH0sXG4gICcmW211bHRpcGxlXSc6IHtcbiAgICBoZWlnaHQ6ICdhdXRvJ1xuICB9LFxuICAnJjpub3QoW211bHRpcGxlXSkgb3B0aW9uLCAmOm5vdChbbXVsdGlwbGVdKSBvcHRncm91cCc6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICB9LFxuICAvLyBCdW1wIHNwZWNpZmljaXR5IHRvIGFsbG93IGV4dGVuZGluZyBjdXN0b20gaW5wdXRzXG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAyNCxcbiAgICBtaW5XaWR0aDogMTYgLy8gU28gaXQgZG9lc24ndCBjb2xsYXBzZS5cblxuICB9XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdmaWxsZWQnICYmIHtcbiAgJyYmJic6IHtcbiAgICBwYWRkaW5nUmlnaHQ6IDMyXG4gIH1cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAnJjpmb2N1cyc6IHtcbiAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyAvLyBSZXNldCB0aGUgcmVzZXQgZm9yIENocm9tZSBzdHlsZVxuXG4gIH0sXG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAzMlxuICB9XG59KTtcbmNvbnN0IE5hdGl2ZVNlbGVjdFNlbGVjdCA9IHN0eWxlZCgnc2VsZWN0Jywge1xuICBuYW1lOiAnTXVpTmF0aXZlU2VsZWN0JyxcbiAgc2xvdDogJ1NlbGVjdCcsXG4gIHNob3VsZEZvcndhcmRQcm9wOiByb290U2hvdWxkRm9yd2FyZFByb3AsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuc2VsZWN0LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwge1xuICAgICAgW2AmLiR7bmF0aXZlU2VsZWN0Q2xhc3Nlcy5tdWx0aXBsZX1gXTogc3R5bGVzLm11bHRpcGxlXG4gICAgfV07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdFNlbGVjdFN0eWxlcyk7XG5leHBvcnQgY29uc3QgbmF0aXZlU2VsZWN0SWNvblN0eWxlcyA9ICh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIC8vIFdlIHVzZSBhIHBvc2l0aW9uIGFic29sdXRlIG92ZXIgYSBmbGV4Ym94IGluIG9yZGVyIHRvIGZvcndhcmQgdGhlIHBvaW50ZXIgZXZlbnRzXG4gIC8vIHRvIHRoZSBpbnB1dCBhbmQgdG8gc3VwcG9ydCB3cmFwcGluZyB0YWdzLi5cbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHJpZ2h0OiAwLFxuICB0b3A6ICdjYWxjKDUwJSAtIC41ZW0pJyxcbiAgLy8gQ2VudGVyIHZlcnRpY2FsbHksIGhlaWdodCBpcyAxZW1cbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAvLyBEb24ndCBibG9jayBwb2ludGVyIGV2ZW50cyBvbiB0aGUgc2VsZWN0IHVuZGVyIHRoZSBpY29uLlxuICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gIH1cbn0sIG93bmVyU3RhdGUub3BlbiAmJiB7XG4gIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZmlsbGVkJyAmJiB7XG4gIHJpZ2h0OiA3XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICByaWdodDogN1xufSk7XG5jb25zdCBOYXRpdmVTZWxlY3RJY29uID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlOYXRpdmVTZWxlY3QnLFxuICBzbG90OiAnSWNvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuaWNvbiwgb3duZXJTdGF0ZS52YXJpYW50ICYmIHN0eWxlc1tgaWNvbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnZhcmlhbnQpfWBdLCBvd25lclN0YXRlLm9wZW4gJiYgc3R5bGVzLmljb25PcGVuXTtcbiAgfVxufSkobmF0aXZlU2VsZWN0SWNvblN0eWxlcyk7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuY29uc3QgTmF0aXZlU2VsZWN0SW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXRpdmVTZWxlY3RJbnB1dChwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgZGlzYWJsZWQsXG4gICAgSWNvbkNvbXBvbmVudCxcbiAgICBpbnB1dFJlZixcbiAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVkLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChOYXRpdmVTZWxlY3RTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5zZWxlY3QsIGNsYXNzTmFtZSksXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICByZWY6IGlucHV0UmVmIHx8IHJlZlxuICAgIH0sIG90aGVyKSksIHByb3BzLm11bHRpcGxlID8gbnVsbCA6IC8qI19fUFVSRV9fKi9fanN4KE5hdGl2ZVNlbGVjdEljb24sIHtcbiAgICAgIGFzOiBJY29uQ29tcG9uZW50LFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uXG4gICAgfSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOYXRpdmVTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxvcHRpb24+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3QgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgbmF0aXZlIHNlbGVjdCBlbGVtZW50LlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBOYXRpdmVTZWxlY3RJbnB1dDsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVNlbGVjdCcsIHNsb3QpO1xufVxuY29uc3Qgc2VsZWN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNlbGVjdCcsIFsnc2VsZWN0JywgJ211bHRpcGxlJywgJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCcsICdkaXNhYmxlZCcsICdmb2N1c2VkJywgJ2ljb24nLCAnaWNvbk9wZW4nLCAnaWNvbkZpbGxlZCcsICdpY29uT3V0bGluZWQnLCAnaWNvblN0YW5kYXJkJywgJ25hdGl2ZUlucHV0J10pO1xuZXhwb3J0IGRlZmF1bHQgc2VsZWN0Q2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImFyaWEtbGFiZWxcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRPcGVuXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJsYWJlbElkXCIsIFwiTWVudVByb3BzXCIsIFwibXVsdGlwbGVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsb3NlXCIsIFwib25Gb2N1c1wiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclZhbHVlXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCIsIFwidGFiSW5kZXhcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgTWVudSBmcm9tICcuLi9NZW51L01lbnUnO1xuaW1wb3J0IHsgbmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzLCBuYXRpdmVTZWxlY3RJY29uU3R5bGVzIH0gZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi4vSW5wdXRCYXNlL3V0aWxzJztcbmltcG9ydCBzdHlsZWQsIHsgc2xvdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuaW1wb3J0IHNlbGVjdENsYXNzZXMsIHsgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL3NlbGVjdENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFNlbGVjdFNlbGVjdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ1NlbGVjdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFsvLyBXaW4gc3BlY2lmaWNpdHkgb3ZlciB0aGUgaW5wdXQgYmFzZVxuICAgIHtcbiAgICAgIFtgJi4ke3NlbGVjdENsYXNzZXMuc2VsZWN0fWBdOiBzdHlsZXMuc2VsZWN0XG4gICAgfSwge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5zZWxlY3R9YF06IHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXG4gICAgfSwge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5tdWx0aXBsZX1gXTogc3R5bGVzLm11bHRpcGxlXG4gICAgfV07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdFNlbGVjdFN0eWxlcywge1xuICAvLyBXaW4gc3BlY2lmaWNpdHkgb3ZlciB0aGUgaW5wdXQgYmFzZVxuICBbYCYuJHtzZWxlY3RDbGFzc2VzLnNlbGVjdH1gXToge1xuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIC8vIFJlc2V0cyBmb3IgbXVsdGlwbGUgc2VsZWN0IHdpdGggY2hpcHNcbiAgICBtaW5IZWlnaHQ6ICcxLjQzNzVlbScsXG4gICAgLy8gUmVxdWlyZWQgZm9yIHNlbGVjdFxcdGV4dC1maWVsZCBoZWlnaHQgY29uc2lzdGVuY3lcbiAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH1cbn0pO1xuY29uc3QgU2VsZWN0SWNvbiA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ0ljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmljb24sIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5pY29uT3Blbl07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdEljb25TdHlsZXMpO1xuY29uc3QgU2VsZWN0TmF0aXZlSW5wdXQgPSBzdHlsZWQoJ2lucHV0Jywge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBzbG90U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ05hdGl2ZUlucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubmF0aXZlSW5wdXRcbn0pKHtcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgb3BhY2l0eTogMCxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94J1xufSk7XG5cbmZ1bmN0aW9uIGFyZUVxdWFsVmFsdWVzKGEsIGIpIHtcbiAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH0gLy8gVGhlIHZhbHVlIGNvdWxkIGJlIGEgbnVtYmVyLCB0aGUgRE9NIHdpbGwgc3RyaW5naWZ5IGl0IGFueXdheS5cblxuXG4gIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eShkaXNwbGF5KSB7XG4gIHJldHVybiBkaXNwbGF5ID09IG51bGwgfHwgdHlwZW9mIGRpc3BsYXkgPT09ICdzdHJpbmcnICYmICFkaXNwbGF5LnRyaW0oKTtcbn1cblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBkaXNhYmxlZCxcbiAgICBtdWx0aXBsZSxcbiAgICBvcGVuXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBzZWxlY3Q6IFsnc2VsZWN0JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgbXVsdGlwbGUgJiYgJ211bHRpcGxlJ10sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUodmFyaWFudCl9YCwgb3BlbiAmJiAnaWNvbk9wZW4nLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBuYXRpdmVJbnB1dDogWyduYXRpdmVJbnB1dCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5cbmNvbnN0IFNlbGVjdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gICAgYXV0b0ZvY3VzLFxuICAgIGF1dG9XaWR0aCxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgZGVmYXVsdE9wZW4sXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc3BsYXlFbXB0eSxcbiAgICBJY29uQ29tcG9uZW50LFxuICAgIGlucHV0UmVmOiBpbnB1dFJlZlByb3AsXG4gICAgbGFiZWxJZCxcbiAgICBNZW51UHJvcHMgPSB7fSxcbiAgICBtdWx0aXBsZSxcbiAgICBuYW1lLFxuICAgIG9uQmx1cixcbiAgICBvbkNoYW5nZSxcbiAgICBvbkNsb3NlLFxuICAgIG9uRm9jdXMsXG4gICAgb25PcGVuLFxuICAgIG9wZW46IG9wZW5Qcm9wLFxuICAgIHJlYWRPbmx5LFxuICAgIHJlbmRlclZhbHVlLFxuICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IHt9LFxuICAgIHRhYkluZGV4OiB0YWJJbmRleFByb3AsXG4gICAgdmFsdWU6IHZhbHVlUHJvcCxcbiAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZVN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IHZhbHVlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgbmFtZTogJ1NlbGVjdCdcbiAgfSk7XG4gIGNvbnN0IFtvcGVuU3RhdGUsIHNldE9wZW5TdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiBvcGVuUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0T3BlbixcbiAgICBuYW1lOiAnU2VsZWN0J1xuICB9KTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGRpc3BsYXlSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IFtkaXNwbGF5Tm9kZSwgc2V0RGlzcGxheU5vZGVdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc09wZW5Db250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYob3BlblByb3AgIT0gbnVsbCk7XG4gIGNvbnN0IFttZW51TWluV2lkdGhTdGF0ZSwgc2V0TWVudU1pbldpZHRoU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmUHJvcCk7XG4gIGNvbnN0IGhhbmRsZURpc3BsYXlSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBkaXNwbGF5UmVmLmN1cnJlbnQgPSBub2RlO1xuXG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIHNldERpc3BsYXlOb2RlKG5vZGUpO1xuICAgIH1cbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGhhbmRsZVJlZiwgKCkgPT4gKHtcbiAgICBmb2N1czogKCkgPT4ge1xuICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfSxcbiAgICBub2RlOiBpbnB1dFJlZi5jdXJyZW50LFxuICAgIHZhbHVlXG4gIH0pLCBbdmFsdWVdKTsgLy8gUmVzaXplIG1lbnUgb24gYGRlZmF1bHRPcGVuYCBhdXRvbWF0aWMgdG9nZ2xlLlxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRlZmF1bHRPcGVuICYmIG9wZW5TdGF0ZSAmJiBkaXNwbGF5Tm9kZSAmJiAhaXNPcGVuQ29udHJvbGxlZCkge1xuICAgICAgc2V0TWVudU1pbldpZHRoU3RhdGUoYXV0b1dpZHRoID8gbnVsbCA6IGRpc3BsYXlOb2RlLmNsaWVudFdpZHRoKTtcbiAgICAgIGRpc3BsYXlSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuXG4gIH0sIFtkaXNwbGF5Tm9kZSwgYXV0b1dpZHRoXSk7IC8vIGBpc09wZW5Db250cm9sbGVkYCBpcyBpZ25vcmVkIGJlY2F1c2UgdGhlIGNvbXBvbmVudCBzaG91bGQgbmV2ZXIgc3dpdGNoIGJldHdlZW4gY29udHJvbGxlZCBhbmQgdW5jb250cm9sbGVkIG1vZGVzLlxuICAvLyBgZGVmYXVsdE9wZW5gIGFuZCBgb3BlblN0YXRlYCBhcmUgaWdub3JlZCB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjYWxsYmFja3MuXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBsYWJlbCA9IG93bmVyRG9jdW1lbnQoZGlzcGxheVJlZi5jdXJyZW50KS5nZXRFbGVtZW50QnlJZChsYWJlbElkKTtcblxuICAgIGlmIChsYWJlbCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKGdldFNlbGVjdGlvbigpLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsYWJlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbbGFiZWxJZF0pO1xuXG4gIGNvbnN0IHVwZGF0ZSA9IChvcGVuLCBldmVudCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgIG9uT3BlbihldmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBkaXNwbGF5Tm9kZS5jbGllbnRXaWR0aCk7XG4gICAgICBzZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEhpamFjayB0aGUgZGVmYXVsdCBmb2N1cyBiZWhhdmlvci5cblxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB1cGRhdGUodHJ1ZSwgZXZlbnQpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gZXZlbnQgPT4ge1xuICAgIHVwZGF0ZShmYWxzZSwgZXZlbnQpO1xuICB9O1xuXG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTsgLy8gU3VwcG9ydCBhdXRvZmlsbC5cblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiBjaGlsZC5wcm9wcy52YWx1ZSkuaW5kZXhPZihldmVudC50YXJnZXQudmFsdWUpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5BcnJheVtpbmRleF07XG4gICAgc2V0VmFsdWVTdGF0ZShjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBjaGlsZCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUl0ZW1DbGljayA9IGNoaWxkID0+IGV2ZW50ID0+IHtcbiAgICBsZXQgbmV3VmFsdWU7IC8vIFdlIHVzZSB0aGUgdGFiaW5kZXggYXR0cmlidXRlIHRvIHNpZ25hbCB0aGUgYXZhaWxhYmxlIG9wdGlvbnMuXG5cbiAgICBpZiAoIWV2ZW50LmN1cnJlbnRUYXJnZXQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICBuZXdWYWx1ZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuc2xpY2UoKSA6IFtdO1xuICAgICAgY29uc3QgaXRlbUluZGV4ID0gdmFsdWUuaW5kZXhPZihjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIG5ld1ZhbHVlLnB1c2goY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1ZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgLy8gUmVkZWZpbmUgdGFyZ2V0IHRvIGFsbG93IG5hbWUgYW5kIHZhbHVlIHRvIGJlIHJlYWQuXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHNlYW1sZXNzIGludGVncmF0aW9uIHdpdGggdGhlIG1vc3QgcG9wdWxhciBmb3JtIGxpYnJhcmllcy5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNDg1I2lzc3VlY29tbWVudC02NzYwNDg0OTJcbiAgICAgICAgLy8gQ2xvbmUgdGhlIGV2ZW50IHRvIG5vdCBvdmVycmlkZSBgdGFyZ2V0YCBvZiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gICAgICAgIGNvbnN0IG5hdGl2ZUV2ZW50ID0gZXZlbnQubmF0aXZlRXZlbnQgfHwgZXZlbnQ7XG4gICAgICAgIGNvbnN0IGNsb25lZEV2ZW50ID0gbmV3IG5hdGl2ZUV2ZW50LmNvbnN0cnVjdG9yKG5hdGl2ZUV2ZW50LnR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsb25lZEV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3VmFsdWUsXG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb25DaGFuZ2UoY2xvbmVkRXZlbnQsIGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIW11bHRpcGxlKSB7XG4gICAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICBpZiAoIXJlYWRPbmx5KSB7XG4gICAgICBjb25zdCB2YWxpZEtleXMgPSBbJyAnLCAnQXJyb3dVcCcsICdBcnJvd0Rvd24nLCAvLyBUaGUgbmF0aXZlIHNlbGVjdCBkb2Vzbid0IHJlc3BvbmQgdG8gZW50ZXIgb24gTWFjT1MsIGJ1dCBpdCdzIHJlY29tbWVuZGVkIGJ5XG4gICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzL2V4YW1wbGVzL2xpc3Rib3gvbGlzdGJveC1jb2xsYXBzaWJsZS5odG1sXG4gICAgICAnRW50ZXInXTtcblxuICAgICAgaWYgKHZhbGlkS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9wZW4gPSBkaXNwbGF5Tm9kZSAhPT0gbnVsbCAmJiBvcGVuU3RhdGU7XG5cbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICAvLyBpZiBvcGVuIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblxuICAgIGlmICghb3BlbiAmJiBvbkJsdXIpIHtcbiAgICAgIC8vIFByZWFjdCBzdXBwb3J0LCB0YXJnZXQgaXMgcmVhZCBvbmx5IHByb3BlcnR5IG9uIGEgbmF0aXZlIGV2ZW50LlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBuYW1lXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgZGVsZXRlIG90aGVyWydhcmlhLWludmFsaWQnXTtcbiAgbGV0IGRpc3BsYXk7XG4gIGxldCBkaXNwbGF5U2luZ2xlO1xuICBjb25zdCBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgbGV0IGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIGxldCBmb3VuZE1hdGNoID0gZmFsc2U7IC8vIE5vIG5lZWQgdG8gZGlzcGxheSBhbnkgdmFsdWUgaWYgdGhlIGZpZWxkIGlzIGVtcHR5LlxuXG4gIGlmIChpc0ZpbGxlZCh7XG4gICAgdmFsdWVcbiAgfSkgfHwgZGlzcGxheUVtcHR5KSB7XG4gICAgaWYgKHJlbmRlclZhbHVlKSB7XG4gICAgICBkaXNwbGF5ID0gcmVuZGVyVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wdXRlRGlzcGxheSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgaXRlbXMgPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIFNlbGVjdCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzZWxlY3RlZDtcblxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIFxcYHZhbHVlXFxgIHByb3AgbXVzdCBiZSBhbiBhcnJheSB3aGVuIHVzaW5nIHRoZSBcXGBTZWxlY3RcXGAgY29tcG9uZW50IHdpdGggXFxgbXVsdGlwbGVcXGAuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMikpO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3RlZCA9IHZhbHVlLnNvbWUodiA9PiBhcmVFcXVhbFZhbHVlcyh2LCBjaGlsZC5wcm9wcy52YWx1ZSkpO1xuXG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheU11bHRpcGxlLnB1c2goY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZCA9IGFyZUVxdWFsVmFsdWVzKHZhbHVlLCBjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBjb21wdXRlRGlzcGxheSkge1xuICAgICAgICBkaXNwbGF5U2luZ2xlID0gY2hpbGQucHJvcHMuY2hpbGRyZW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBzZWxlY3RlZCA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgb25LZXlVcDogZXZlbnQgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugb3VyIE1lbnVJdGVtcyBkaXNwYXRjaGVzIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAvLyBpdCdzIG5vdCBiZWhhdmlvciBvZiB0aGUgbmF0aXZlIDxvcHRpb24+IGFuZCBjYXVzZXNcbiAgICAgICAgICAvLyB0aGUgc2VsZWN0IHRvIGNsb3NlIGltbWVkaWF0ZWx5IHNpbmNlIHdlIG9wZW4gb24gc3BhY2Uga2V5ZG93blxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQucHJvcHMub25LZXlVcCkge1xuICAgICAgICAgIGNoaWxkLnByb3BzLm9uS2V5VXAoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICBzZWxlY3RlZCxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAvLyBUaGUgdmFsdWUgaXMgbW9zdCBsaWtlbHkgbm90IGEgdmFsaWQgSFRNTCBhdHRyaWJ1dGUuXG4gICAgICAnZGF0YS12YWx1ZSc6IGNoaWxkLnByb3BzLnZhbHVlIC8vIEluc3RlYWQsIHdlIHByb3ZpZGUgaXQgYXMgYSBkYXRhIGF0dHJpYnV0ZS5cblxuICAgIH0pO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWZvdW5kTWF0Y2ggJiYgIW11bHRpcGxlICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIGNvbnNvbGUud2FybihbYE1VSTogWW91IGhhdmUgcHJvdmlkZWQgYW4gb3V0LW9mLXJhbmdlIHZhbHVlIFxcYCR7dmFsdWV9XFxgIGZvciB0aGUgc2VsZWN0ICR7bmFtZSA/IGAobmFtZT1cIiR7bmFtZX1cIikgYCA6ICcnfWNvbXBvbmVudC5gLCBcIkNvbnNpZGVyIHByb3ZpZGluZyBhIHZhbHVlIHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIG9yICcnLlwiLCBgVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlICR7dmFsdWVzLmZpbHRlcih4ID0+IHggIT0gbnVsbCkubWFwKHggPT4gYFxcYCR7eH1cXGBgKS5qb2luKCcsICcpIHx8ICdcIlwiJ30uYF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtmb3VuZE1hdGNoLCBjaGlsZHJlbkFycmF5LCBtdWx0aXBsZSwgbmFtZSwgdmFsdWVdKTtcbiAgfVxuXG4gIGlmIChjb21wdXRlRGlzcGxheSkge1xuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKGRpc3BsYXlNdWx0aXBsZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGlzcGxheSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwbGF5ID0gZGlzcGxheU11bHRpcGxlLnJlZHVjZSgob3V0cHV0LCBjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBvdXRwdXQucHVzaChjaGlsZCk7XG5cbiAgICAgICAgICBpZiAoaW5kZXggPCBkaXNwbGF5TXVsdGlwbGUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goJywgJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwbGF5ID0gZGlzcGxheVNpbmdsZTtcbiAgICB9XG4gIH0gLy8gQXZvaWQgcGVyZm9ybWluZyBhIGxheW91dCBjb21wdXRhdGlvbiBpbiB0aGUgcmVuZGVyIG1ldGhvZC5cblxuXG4gIGxldCBtZW51TWluV2lkdGggPSBtZW51TWluV2lkdGhTdGF0ZTtcblxuICBpZiAoIWF1dG9XaWR0aCAmJiBpc09wZW5Db250cm9sbGVkICYmIGRpc3BsYXlOb2RlKSB7XG4gICAgbWVudU1pbldpZHRoID0gZGlzcGxheU5vZGUuY2xpZW50V2lkdGg7XG4gIH1cblxuICBsZXQgdGFiSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiB0YWJJbmRleFByb3AgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGFiSW5kZXggPSB0YWJJbmRleFByb3A7XG4gIH0gZWxzZSB7XG4gICAgdGFiSW5kZXggPSBkaXNhYmxlZCA/IG51bGwgOiAwO1xuICB9XG5cbiAgY29uc3QgYnV0dG9uSWQgPSBTZWxlY3REaXNwbGF5UHJvcHMuaWQgfHwgKG5hbWUgPyBgbXVpLWNvbXBvbmVudC1zZWxlY3QtJHtuYW1lfWAgOiB1bmRlZmluZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB2YXJpYW50LFxuICAgIHZhbHVlLFxuICAgIG9wZW5cbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlRGlzcGxheVJlZixcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogW2xhYmVsSWQsIGJ1dHRvbklkXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpIHx8IHVuZGVmaW5lZCxcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgb25Gb2N1czogb25Gb2N1c1xuICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNlbGVjdCwgY2xhc3NOYW1lLCBTZWxlY3REaXNwbGF5UHJvcHMuY2xhc3NOYW1lKSAvLyBUaGUgaWQgaXMgcmVxdWlyZWQgZm9yIHByb3BlciBhMTF5XG4gICAgICAsXG4gICAgICBpZDogYnV0dG9uSWQsXG4gICAgICBjaGlsZHJlbjogaXNFbXB0eShkaXNwbGF5KSA/XG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBub3RyYW5zbGF0ZSBuZWVkZWQgd2hpbGUgR29vZ2xlIFRyYW5zbGF0ZSB3aWxsIG5vdCBmaXggemVyby13aWR0aCBzcGFjZSBpc3N1ZVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWRhbmdlclxuICAgICAgX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwibm90cmFuc2xhdGVcIixcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgICAgICB9XG4gICAgICB9KSA6IGRpc3BsYXlcbiAgICB9KSksIC8qI19fUFVSRV9fKi9fanN4KFNlbGVjdE5hdGl2ZUlucHV0LCBfZXh0ZW5kcyh7XG4gICAgICB2YWx1ZTogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsJykgOiB2YWx1ZSxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5uYXRpdmVJbnB1dCxcbiAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0sIG90aGVyKSksIC8qI19fUFVSRV9fKi9fanN4KFNlbGVjdEljb24sIHtcbiAgICAgIGFzOiBJY29uQ29tcG9uZW50LFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmljb24sXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSksIC8qI19fUFVSRV9fKi9fanN4KE1lbnUsIF9leHRlbmRzKHtcbiAgICAgIGlkOiBgbWVudS0ke25hbWUgfHwgJyd9YCxcbiAgICAgIGFuY2hvckVsOiBkaXNwbGF5Tm9kZSxcbiAgICAgIG9wZW46IG9wZW4sXG4gICAgICBvbkNsb3NlOiBoYW5kbGVDbG9zZSxcbiAgICAgIGFuY2hvck9yaWdpbjoge1xuICAgICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICAgIGhvcml6b250YWw6ICdjZW50ZXInXG4gICAgICB9LFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiB7XG4gICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgaG9yaXpvbnRhbDogJ2NlbnRlcidcbiAgICAgIH1cbiAgICB9LCBNZW51UHJvcHMsIHtcbiAgICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxhYmVsSWQsXG4gICAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgICAgZGlzYWJsZUxpc3RXcmFwOiB0cnVlXG4gICAgICB9LCBNZW51UHJvcHMuTWVudUxpc3RQcm9wcyksXG4gICAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7fSwgTWVudVByb3BzLlBhcGVyUHJvcHMsIHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBtaW5XaWR0aDogbWVudU1pbldpZHRoXG4gICAgICAgIH0sIE1lbnVQcm9wcy5QYXBlclByb3BzICE9IG51bGwgPyBNZW51UHJvcHMuUGFwZXJQcm9wcy5zdHlsZSA6IG51bGwpXG4gICAgICB9KSxcbiAgICAgIGNoaWxkcmVuOiBpdGVtc1xuICAgIH0pKV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNlbGVjdElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gICdhcmlhLWRlc2NyaWJlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtbGFiZWwnOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPE1lbnVJdGVtPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHRvZ2dsZWQgb24gbW91bnQuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZC5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEltcGVyYXRpdmUgaGFuZGxlIGltcGxlbWVudGluZyBgeyB2YWx1ZTogVCwgbm9kZTogSFRNTEVsZW1lbnQsIGZvY3VzKCk6IHZvaWQgfWBcbiAgICogRXF1aXZhbGVudCB0byBgcmVmYFxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0SW5wdXQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTcgMTBsNSA1IDUtNXpcIlxufSksICdBcnJvd0Ryb3BEb3duJyk7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJbnB1dCcsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXQnLCBbJ3Jvb3QnLCAnZm9ybUNvbnRyb2wnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdjb2xvclNlY29uZGFyeScsICd1bmRlcmxpbmUnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdmdWxsV2lkdGgnLCAnaW5wdXQnLCAnaW5wdXRTaXplU21hbGwnLCAnaW5wdXRNdWx0aWxpbmUnLCAnaW5wdXRUeXBlU2VhcmNoJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyByZWZUeXBlLCBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgaW5wdXRDbGFzc2VzLCB7IGdldElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbnB1dENsYXNzZXMnO1xuaW1wb3J0IHsgcm9vdE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlciwgaW5wdXRPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyLCBJbnB1dEJhc2VSb290LCBJbnB1dEJhc2VDb21wb25lbnQgYXMgSW5wdXRCYXNlSW5wdXQgfSBmcm9tICcuLi9JbnB1dEJhc2UvSW5wdXRCYXNlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IElucHV0Um9vdCA9IHN0eWxlZChJbnB1dEJhc2VSb290LCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gWy4uLmlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlcihwcm9wcywgc3R5bGVzKSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiBzdHlsZXMudW5kZXJsaW5lXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgfSwgb3duZXJTdGF0ZS5mb3JtQ29udHJvbCAmJiB7XG4gICAgJ2xhYmVsICsgJic6IHtcbiAgICAgIG1hcmdpblRvcDogMTZcbiAgICB9XG4gIH0sICFvd25lclN0YXRlLmRpc2FibGVVbmRlcmxpbmUgJiYge1xuICAgICcmOmFmdGVyJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWlufWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICB9LFxuICAgIFtgJi4ke2lucHV0Q2xhc3Nlcy5mb2N1c2VkfTphZnRlcmBdOiB7XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknXG4gICAgfSxcbiAgICBbYCYuJHtpbnB1dENsYXNzZXMuZXJyb3J9OmFmdGVyYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknIC8vIGVycm9yIGlzIGFsd2F5cyB1bmRlcmxpbmVkIGluIHJlZFxuXG4gICAgfSxcbiAgICAnJjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHtib3R0b21MaW5lQ29sb3J9YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgfSxcbiAgICBbYCY6aG92ZXI6bm90KC4ke2lucHV0Q2xhc3Nlcy5kaXNhYmxlZH0pOmJlZm9yZWBdOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHt0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeX1gLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7Ym90dG9tTGluZUNvbG9yfWBcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke2lucHV0Q2xhc3Nlcy5kaXNhYmxlZH06YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgIH1cbiAgfSk7XG59KTtcbmNvbnN0IElucHV0SW5wdXQgPSBzdHlsZWQoSW5wdXRCYXNlSW5wdXQsIHtcbiAgbmFtZTogJ011aUlucHV0JyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKHt9KTtcbmNvbnN0IElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUlucHV0J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgZGlzYWJsZVVuZGVybGluZSxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHNQcm9wLFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICB0eXBlID0gJ3RleHQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfTtcbiAgY29uc3QgaW5wdXRDb21wb25lbnRzUHJvcHMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH1cbiAgfTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzID0gY29tcG9uZW50c1Byb3BzUHJvcCA/IGRlZXBtZXJnZShjb21wb25lbnRzUHJvcHNQcm9wLCBpbnB1dENvbXBvbmVudHNQcm9wcykgOiBpbnB1dENvbXBvbmVudHNQcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgIFJvb3Q6IElucHV0Um9vdCxcbiAgICAgIElucHV0OiBJbnB1dElucHV0XG4gICAgfSwgY29tcG9uZW50cyksXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIElucHV0QmFzZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2lucHV0J1xuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIGB0ZXh0YXJlYWAgZWxlbWVudCBpcyByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgYGlucHV0YCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGxlZElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlGaWxsZWRJbnB1dCcsIHNsb3QpO1xufVxuY29uc3QgZmlsbGVkSW5wdXRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRmlsbGVkSW5wdXQnLCBbJ3Jvb3QnLCAnY29sb3JTZWNvbmRhcnknLCAndW5kZXJsaW5lJywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnYWRvcm5lZFN0YXJ0JywgJ2Fkb3JuZWRFbmQnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdoaWRkZW5MYWJlbCcsICdpbnB1dCcsICdpbnB1dFNpemVTbWFsbCcsICdpbnB1dEhpZGRlbkxhYmVsJywgJ2lucHV0TXVsdGlsaW5lJywgJ2lucHV0QWRvcm5lZFN0YXJ0JywgJ2lucHV0QWRvcm5lZEVuZCddKTtcbmV4cG9ydCBkZWZhdWx0IGZpbGxlZElucHV0Q2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZGlzYWJsZVVuZGVybGluZVwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoaWRkZW5MYWJlbFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlZlR5cGUsIGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgZmlsbGVkSW5wdXRDbGFzc2VzLCB7IGdldEZpbGxlZElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9maWxsZWRJbnB1dENsYXNzZXMnO1xuaW1wb3J0IHsgcm9vdE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlciwgaW5wdXRPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyLCBJbnB1dEJhc2VSb290LCBJbnB1dEJhc2VDb21wb25lbnQgYXMgSW5wdXRCYXNlSW5wdXQgfSBmcm9tICcuLi9JbnB1dEJhc2UvSW5wdXRCYXNlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IEZpbGxlZElucHV0Um9vdCA9IHN0eWxlZChJbnB1dEJhc2VSb290LCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gWy4uLmlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlcihwcm9wcywgc3R5bGVzKSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiBzdHlsZXMudW5kZXJsaW5lXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wNiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJhY2tncm91bmRDb2xvcixcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICB9KSxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjA5KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEzKScsXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5mb2N1c2VkfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJ1xuICAgIH1cbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiB7XG4gICAgJyY6YWZ0ZXInOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHt0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW59YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmZvY3VzZWR9OmFmdGVyYF06IHtcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5lcnJvcn06YWZ0ZXJgXToge1xuICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKScgLy8gZXJyb3IgaXMgYWx3YXlzIHVuZGVybGluZWQgaW4gcmVkXG5cbiAgICB9LFxuICAgICcmOmJlZm9yZSc6IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAke2JvdHRvbUxpbmVDb2xvcn1gLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICBjb250ZW50OiAnXCJcXFxcMDBhMFwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JvcmRlci1ib3R0b20tY29sb3InLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICB9LFxuICAgIFtgJjpob3Zlcjpub3QoLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSk6YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAke3RoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5fWBcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5kaXNhYmxlZH06YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ0xlZnQ6IDEyXG4gIH0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nUmlnaHQ6IDEyXG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgICBwYWRkaW5nOiAnMjVweCAxMnB4IDhweCdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nVG9wOiAyMSxcbiAgICBwYWRkaW5nQm90dG9tOiA0XG4gIH0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYge1xuICAgIHBhZGRpbmdUb3A6IDE2LFxuICAgIHBhZGRpbmdCb3R0b206IDE3XG4gIH0pKTtcbn0pO1xuY29uc3QgRmlsbGVkSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcGFkZGluZ1RvcDogMjUsXG4gIHBhZGRpbmdSaWdodDogMTIsXG4gIHBhZGRpbmdCb3R0b206IDgsXG4gIHBhZGRpbmdMZWZ0OiAxMixcbiAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICBjYXJldENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICdpbmhlcml0JyxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJ2luaGVyaXQnXG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDIxLFxuICBwYWRkaW5nQm90dG9tOiA0XG59LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHtcbiAgcGFkZGluZ1RvcDogMTYsXG4gIHBhZGRpbmdCb3R0b206IDE3XG59LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiB7XG4gIHBhZGRpbmdUb3A6IDAsXG4gIHBhZGRpbmdCb3R0b206IDAsXG4gIHBhZGRpbmdMZWZ0OiAwLFxuICBwYWRkaW5nUmlnaHQ6IDBcbn0sIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nTGVmdDogMFxufSwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nUmlnaHQ6IDBcbn0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ1RvcDogOCxcbiAgcGFkZGluZ0JvdHRvbTogOVxufSkpO1xuY29uc3QgRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHNQcm9wLFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIC8vIGRlY2xhcmUgaGVyZSB0byBwcmV2ZW50IHNwcmVhZGluZyB0byBET01cbiAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgbXVsdGlsaW5lID0gZmFsc2UsXG4gICAgdHlwZSA9ICd0ZXh0J1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmUsXG4gICAgdHlwZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcyA9IHtcbiAgICByb290OiB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSxcbiAgICBpbnB1dDoge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH1cbiAgfTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzID0gY29tcG9uZW50c1Byb3BzUHJvcCA/IGRlZXBtZXJnZShjb21wb25lbnRzUHJvcHNQcm9wLCBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcykgOiBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgIFJvb3Q6IEZpbGxlZElucHV0Um9vdCxcbiAgICAgIElucHV0OiBGaWxsZWRJbnB1dElucHV0XG4gICAgfSwgY29tcG9uZW50cyksXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmlsbGVkSW5wdXQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIElucHV0QmFzZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIG5vdCBoYXZlIGFuIHVuZGVybGluZS5cbiAgICovXG4gIGRpc2FibGVVbmRlcmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBoaWRkZW4uXG4gICAqIFRoaXMgaXMgdXNlZCB0byBpbmNyZWFzZSBkZW5zaXR5IGZvciBhIGBGaWxsZWRJbnB1dGAuXG4gICAqIEJlIHN1cmUgdG8gYWRkIGBhcmlhLWxhYmVsYCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZGVuTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ25vbmUnYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSBgdGV4dGFyZWFgIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IEZpbGxlZElucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5cbnZhciBfSW5wdXQsIF9GaWxsZWRJbnB1dDtcblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaWRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJsYWJlbFwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hdGl2ZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnLi9TZWxlY3RJbnB1dCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmltcG9ydCBOYXRpdmVTZWxlY3RJbnB1dCBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IEZpbGxlZElucHV0IGZyb20gJy4uL0ZpbGxlZElucHV0JztcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gJy4uL091dGxpbmVkSW5wdXQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgcmV0dXJuIGNsYXNzZXM7XG59O1xuXG5jb25zdCBTZWxlY3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3QoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgbmFtZTogJ011aVNlbGVjdCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGF1dG9XaWR0aCA9IGZhbHNlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wID0ge30sXG4gICAgY2xhc3NOYW1lLFxuICAgIGRlZmF1bHRPcGVuID0gZmFsc2UsXG4gICAgZGlzcGxheUVtcHR5ID0gZmFsc2UsXG4gICAgSWNvbkNvbXBvbmVudCA9IEFycm93RHJvcERvd25JY29uLFxuICAgIGlkLFxuICAgIGlucHV0LFxuICAgIGlucHV0UHJvcHMsXG4gICAgbGFiZWwsXG4gICAgbGFiZWxJZCxcbiAgICBNZW51UHJvcHMsXG4gICAgbXVsdGlwbGUgPSBmYWxzZSxcbiAgICBuYXRpdmUgPSBmYWxzZSxcbiAgICBvbkNsb3NlLFxuICAgIG9uT3BlbixcbiAgICBvcGVuLFxuICAgIHJlbmRlclZhbHVlLFxuICAgIFNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICB2YXJpYW50OiB2YXJpYW50UHJvcHMgPSAnb3V0bGluZWQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBpbnB1dENvbXBvbmVudCA9IG5hdGl2ZSA/IE5hdGl2ZVNlbGVjdElucHV0IDogU2VsZWN0SW5wdXQ7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnXVxuICB9KTtcbiAgY29uc3QgdmFyaWFudCA9IGZjcy52YXJpYW50IHx8IHZhcmlhbnRQcm9wcztcbiAgY29uc3QgSW5wdXRDb21wb25lbnQgPSBpbnB1dCB8fCB7XG4gICAgc3RhbmRhcmQ6IF9JbnB1dCB8fCAoX0lucHV0ID0gLyojX19QVVJFX18qL19qc3goSW5wdXQsIHt9KSksXG4gICAgb3V0bGluZWQ6IC8qI19fUFVSRV9fKi9fanN4KE91dGxpbmVkSW5wdXQsIHtcbiAgICAgIGxhYmVsOiBsYWJlbFxuICAgIH0pLFxuICAgIGZpbGxlZDogX0ZpbGxlZElucHV0IHx8IChfRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovX2pzeChGaWxsZWRJbnB1dCwge30pKVxuICB9W3ZhcmlhbnRdO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50UmVmID0gdXNlRm9ya1JlZihyZWYsIElucHV0Q29tcG9uZW50LnJlZik7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYFNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudCxcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIEljb25Db21wb25lbnQsXG4gICAgICB2YXJpYW50LFxuICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgLy8gV2UgcmVuZGVyIGEgc2VsZWN0LiBXZSBjYW4gaWdub3JlIHRoZSB0eXBlIHByb3ZpZGVkIGJ5IHRoZSBgSW5wdXRgLlxuICAgICAgbXVsdGlwbGVcbiAgICB9LCBuYXRpdmUgPyB7XG4gICAgICBpZFxuICAgIH0gOiB7XG4gICAgICBhdXRvV2lkdGgsXG4gICAgICBkZWZhdWx0T3BlbixcbiAgICAgIGRpc3BsYXlFbXB0eSxcbiAgICAgIGxhYmVsSWQsXG4gICAgICBNZW51UHJvcHMsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3BlbixcbiAgICAgIHJlbmRlclZhbHVlLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAgIGlkXG4gICAgICB9LCBTZWxlY3REaXNwbGF5UHJvcHMpXG4gICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgY2xhc3NlczogaW5wdXRQcm9wcyA/IGRlZXBtZXJnZShjbGFzc2VzLCBpbnB1dFByb3BzLmNsYXNzZXMpIDogY2xhc3Nlc1xuICAgIH0sIGlucHV0ID8gaW5wdXQucHJvcHMuaW5wdXRQcm9wcyA6IHt9KVxuICB9LCBtdWx0aXBsZSAmJiBuYXRpdmUgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJyA/IHtcbiAgICBub3RjaGVkOiB0cnVlXG4gIH0gOiB7fSwge1xuICAgIHJlZjogaW5wdXRDb21wb25lbnRSZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KElucHV0Q29tcG9uZW50LnByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3QucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHdpZHRoIG9mIHRoZSBwb3BvdmVyIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSBpdGVtcyBpbnNpZGUgdGhlXG4gICAqIG1lbnUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGF0IGxlYXN0IHRoZSB3aWR0aCBvZiB0aGUgc2VsZWN0IGlucHV0LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b1dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGBNZW51SXRlbWAgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZSBhbmQgYG9wdGlvbmAgd2hlbiBgbmF0aXZlYCBpcyB0cnVlLlxuICAgKlxuICAgKiDimqDvuI9UaGUgYE1lbnVJdGVtYCBlbGVtZW50cyAqKm11c3QqKiBiZSBkaXJlY3QgZGVzY2VuZGFudHMgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IG9wZW4uIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZCAoaS5lLiB0aGUgYG9wZW5gIHByb3AgaXMgbm90IGRlZmluZWQpLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWZhdWx0T3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdmFsdWUgaXMgZGlzcGxheWVkIGV2ZW4gaWYgbm8gaXRlbXMgYXJlIHNlbGVjdGVkLlxuICAgKlxuICAgKiBJbiBvcmRlciB0byBkaXNwbGF5IGEgbWVhbmluZ2Z1bCB2YWx1ZSwgYSBmdW5jdGlvbiBjYW4gYmUgcGFzc2VkIHRvIHRoZSBgcmVuZGVyVmFsdWVgIHByb3Agd2hpY2hcbiAgICogcmV0dXJucyB0aGUgdmFsdWUgdG8gYmUgZGlzcGxheWVkIHdoZW4gbm8gaXRlbXMgYXJlIHNlbGVjdGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2hlbiB1c2luZyB0aGlzIHByb3AsIG1ha2Ugc3VyZSB0aGUgbGFiZWwgZG9lc24ndCBvdmVybGFwIHdpdGggdGhlIGVtcHR5IGRpc3BsYXllZCB2YWx1ZS5cbiAgICogVGhlIGxhYmVsIHNob3VsZCBlaXRoZXIgYmUgaGlkZGVuIG9yIGZvcmNlZCB0byBhIHNocnVuayBzdGF0ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKiBAZGVmYXVsdCBBcnJvd0Ryb3BEb3duSWNvblxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgYGlkYCBvZiB0aGUgd3JhcHBlciBlbGVtZW50IG9yIHRoZSBgc2VsZWN0YCBlbGVtZW50IHdoZW4gYG5hdGl2ZWAuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQW4gYElucHV0YCBlbGVtZW50OyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgbWF0ZXJpYWwtdWkgc3BlY2lmaWMgYElucHV0YC5cbiAgICovXG4gIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFdoZW4gYG5hdGl2ZWAgaXMgYHRydWVgLCB0aGUgYXR0cmlidXRlcyBhcmUgYXBwbGllZCBvbiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFNlZSBbT3V0bGluZWRJbnB1dCNsYWJlbF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8jcHJvcHMpXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHVzZXMgYSBuYXRpdmUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG5hdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U2VsZWN0Q2hhbmdlRXZlbnQ8VD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChhbnkpLlxuICAgKiAqKldhcm5pbmcqKjogVGhpcyBpcyBhIGdlbmVyaWMgZXZlbnQgbm90IGEgY2hhbmdlIGV2ZW50IHVubGVzcyB0aGUgY2hhbmdlIGV2ZW50IGlzIGNhdXNlZCBieSBicm93c2VyIGF1dG9maWxsLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZCB3aGVuIGBuYXRpdmVgIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNsaWNrYWJsZSBkaXYgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdERpc3BsYXlQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgYGlucHV0YCB2YWx1ZS4gUHJvdmlkaW5nIGFuIGVtcHR5IHN0cmluZyB3aWxsIHNlbGVjdCBubyBvcHRpb25zLlxuICAgKiBTZXQgdG8gYW4gZW1wdHkgc3RyaW5nIGAnJ2AgaWYgeW91IGRvbid0IHdhbnQgYW55IG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucyB0byBiZSBzZWxlY3RlZC5cbiAgICpcbiAgICogSWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdCBpdCBtdXN0IGhhdmUgcmVmZXJlbmNlIGVxdWFsaXR5IHdpdGggdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICogSWYgdGhlIHZhbHVlIGlzIG5vdCBhbiBvYmplY3QsIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gbXVzdCBtYXRjaCB3aXRoIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcblNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDNi40NyAyIDIgNi40NyAyIDEyczQuNDcgMTAgMTAgMTAgMTAtNC40NyAxMC0xMFMxNy41MyAyIDEyIDJ6bTUgMTMuNTlMMTUuNTkgMTcgMTIgMTMuNDEgOC40MSAxNyA3IDE1LjU5IDEwLjU5IDEyIDcgOC40MSA4LjQxIDcgMTIgMTAuNTkgMTUuNTkgNyAxNyA4LjQxIDEzLjQxIDEyIDE3IDE1LjU5elwiXG59KSwgJ0NhbmNlbCcpOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlwVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDaGlwJywgc2xvdCk7XG59XG5jb25zdCBjaGlwQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNoaXAnLCBbJ3Jvb3QnLCAnc2l6ZVNtYWxsJywgJ3NpemVNZWRpdW0nLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2Rpc2FibGVkJywgJ2NsaWNrYWJsZScsICdjbGlja2FibGVDb2xvclByaW1hcnknLCAnY2xpY2thYmxlQ29sb3JTZWNvbmRhcnknLCAnZGVsZXRhYmxlJywgJ2RlbGV0YWJsZUNvbG9yUHJpbWFyeScsICdkZWxldGFibGVDb2xvclNlY29uZGFyeScsICdvdXRsaW5lZCcsICdmaWxsZWQnLCAnb3V0bGluZWRQcmltYXJ5JywgJ291dGxpbmVkU2Vjb25kYXJ5JywgJ2F2YXRhcicsICdhdmF0YXJTbWFsbCcsICdhdmF0YXJNZWRpdW0nLCAnYXZhdGFyQ29sb3JQcmltYXJ5JywgJ2F2YXRhckNvbG9yU2Vjb25kYXJ5JywgJ2ljb24nLCAnaWNvblNtYWxsJywgJ2ljb25NZWRpdW0nLCAnaWNvbkNvbG9yUHJpbWFyeScsICdpY29uQ29sb3JTZWNvbmRhcnknLCAnbGFiZWwnLCAnbGFiZWxTbWFsbCcsICdsYWJlbE1lZGl1bScsICdkZWxldGVJY29uJywgJ2RlbGV0ZUljb25TbWFsbCcsICdkZWxldGVJY29uTWVkaXVtJywgJ2RlbGV0ZUljb25Db2xvclByaW1hcnknLCAnZGVsZXRlSWNvbkNvbG9yU2Vjb25kYXJ5JywgJ2RlbGV0ZUljb25PdXRsaW5lZENvbG9yUHJpbWFyeScsICdkZWxldGVJY29uT3V0bGluZWRDb2xvclNlY29uZGFyeScsICdmb2N1c1Zpc2libGUnXSk7XG5leHBvcnQgZGVmYXVsdCBjaGlwQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXZhdGFyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xpY2thYmxlXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkZWxldGVJY29uXCIsIFwiZGlzYWJsZWRcIiwgXCJpY29uXCIsIFwibGFiZWxcIiwgXCJvbkNsaWNrXCIsIFwib25EZWxldGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBDYW5jZWxJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DYW5jZWwnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdW5zdXBwb3J0ZWRQcm9wIGZyb20gJy4uL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBjaGlwQ2xhc3NlcywgeyBnZXRDaGlwVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jaGlwQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlZCxcbiAgICBzaXplLFxuICAgIGNvbG9yLFxuICAgIG9uRGVsZXRlLFxuICAgIGNsaWNrYWJsZSxcbiAgICB2YXJpYW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGNsaWNrYWJsZSAmJiAnY2xpY2thYmxlJywgY2xpY2thYmxlICYmIGBjbGlja2FibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgb25EZWxldGUgJiYgJ2RlbGV0YWJsZScsIG9uRGVsZXRlICYmIGBkZWxldGFibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYCR7dmFyaWFudH0ke2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIGxhYmVsOiBbJ2xhYmVsJywgYGxhYmVsJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIGF2YXRhcjogWydhdmF0YXInLCBgYXZhdGFyJHtjYXBpdGFsaXplKHNpemUpfWAsIGBhdmF0YXJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUoc2l6ZSl9YCwgYGljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgZGVsZXRlSWNvbjogWydkZWxldGVJY29uJywgYGRlbGV0ZUljb24ke2NhcGl0YWxpemUoc2l6ZSl9YCwgYGRlbGV0ZUljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYGRlbGV0ZUljb25PdXRsaW5lZENvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENoaXBVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgQ2hpcFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNoaXAnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgY29sb3IsXG4gICAgICBjbGlja2FibGUsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIHNpemUsXG4gICAgICB2YXJpYW50XG4gICAgfSA9IG93bmVyU3RhdGU7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiBzdHlsZXMuYXZhdGFyXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXTogc3R5bGVzW2BhdmF0YXIke2NhcGl0YWxpemUoc2l6ZSl9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiBzdHlsZXNbYGF2YXRhckNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBzdHlsZXMuaWNvblxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUoc2l6ZSl9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvbn1gXTogc3R5bGVzW2BpY29uQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHN0eWxlcy5kZWxldGVJY29uXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHN0eWxlc1tgZGVsZXRlSWNvbiR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5kZWxldGVJY29ufWBdOiBzdHlsZXNbYGRlbGV0ZUljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXTogc3R5bGVzW2BkZWxldGVJY29uT3V0bGluZWRDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgICB9LCBzdHlsZXMucm9vdCwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLCBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSwgY2xpY2thYmxlICYmIHN0eWxlcy5jbGlja2FibGUsIGNsaWNrYWJsZSAmJiBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIHN0eWxlc1tgY2xpY2thYmxlQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfSlgXSwgb25EZWxldGUgJiYgc3R5bGVzLmRlbGV0YWJsZSwgb25EZWxldGUgJiYgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGRlbGV0YWJsZUNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSwgc3R5bGVzW3ZhcmlhbnRdLCB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHN0eWxlc1tgb3V0bGluZWQke2NhcGl0YWxpemUoY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgZGVsZXRlSWNvbkNvbG9yID0gYWxwaGEodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIDAuMjYpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKSxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6IDMyLFxuICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLFxuICAgIGJvcmRlclJhZGl1czogMzIgLyAyLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdyddKSxcbiAgICAvLyBsYWJlbCB3aWxsIGluaGVyaXQgdGhpcyBmcm9tIHJvb3QsIHRoZW4gYGNsaWNrYWJsZWAgY2xhc3Mgb3ZlcnJpZGVzIHRoaXMgZm9yIGJvdGhcbiAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6IDAsXG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICBib3JkZXI6IDAsXG4gICAgLy8gUmVtb3ZlIGBidXR0b25gIGJvcmRlclxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIGBidXR0b25gIHBhZGRpbmdcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBbYCYuJHtjaGlwQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5LFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgfSxcbiAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiB7XG4gICAgICBtYXJnaW5MZWZ0OiA1LFxuICAgICAgbWFyZ2luUmlnaHQ6IC02LFxuICAgICAgd2lkdGg6IDI0LFxuICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMilcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5hdmF0YXJDb2xvclByaW1hcnl9YF06IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuZGFya1xuICAgIH0sXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhckNvbG9yU2Vjb25kYXJ5fWBdOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5kYXJrXG4gICAgfSxcbiAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyU21hbGx9YF06IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICBtYXJnaW5SaWdodDogLTQsXG4gICAgICB3aWR0aDogMTgsXG4gICAgICBoZWlnaHQ6IDE4LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMClcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBfZXh0ZW5kcyh7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgICBtYXJnaW5SaWdodDogLTZcbiAgICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgICAgZm9udFNpemU6IDE4LFxuICAgICAgbWFyZ2luTGVmdDogNCxcbiAgICAgIG1hcmdpblJpZ2h0OiAtNFxuICAgIH0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSksXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IF9leHRlbmRzKHtcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6IGRlbGV0ZUljb25Db2xvcixcbiAgICAgIGZvbnRTaXplOiAyMixcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgbWFyZ2luOiAnMCA1cHggMCAtNnB4JyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogYWxwaGEoZGVsZXRlSWNvbkNvbG9yLCAwLjQpXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgIG1hcmdpblJpZ2h0OiA0LFxuICAgICAgbWFyZ2luTGVmdDogLTRcbiAgICB9LCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYge1xuICAgICAgY29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uY29udHJhc3RUZXh0LCAwLjcpLFxuICAgICAgJyY6aG92ZXIsICY6YWN0aXZlJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHRcbiAgICAgIH1cbiAgICB9KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIGhlaWdodDogMjRcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHRcbiAgfSwgb3duZXJTdGF0ZS5vbkRlbGV0ZSAmJiB7XG4gICAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LCBvd25lclN0YXRlLm9uRGVsZXRlICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gICAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFya1xuICAgIH1cbiAgfSk7XG59LCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY2xpY2thYmxlICYmIHtcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gICcmOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWQsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSlcbiAgfSxcbiAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZCwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5ICsgdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5KVxuICB9LFxuICAnJjphY3RpdmUnOiB7XG4gICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzFdXG4gIH1cbn0sIG93bmVyU3RhdGUuY2xpY2thYmxlICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIFtgJjpob3ZlciwgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5kYXJrXG4gIH1cbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXX1gLFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5jbGlja2FibGV9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyXG4gIH0sXG4gIFtgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDRcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhclNtYWxsfWBdOiB7XG4gICAgbWFyZ2luTGVmdDogMlxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvbn1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDRcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmljb25TbWFsbH1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDJcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHtcbiAgICBtYXJnaW5SaWdodDogNVxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvblNtYWxsfWBdOiB7XG4gICAgbWFyZ2luUmlnaHQ6IDNcbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gIGJvcmRlcjogYDFweCBzb2xpZCAke2FscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC43KX1gLFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5jbGlja2FibGV9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KVxuICB9LFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5KVxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXToge1xuICAgIGNvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIDAuNyksXG4gICAgJyY6aG92ZXIsICY6YWN0aXZlJzoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICAgIH1cbiAgfVxufSkpO1xuY29uc3QgQ2hpcExhYmVsID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQ2hpcCcsXG4gIHNsb3Q6ICdMYWJlbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZVxuICAgIH0gPSBvd25lclN0YXRlO1xuICAgIHJldHVybiBbc3R5bGVzLmxhYmVsLCBzdHlsZXNbYGxhYmVsJHtjYXBpdGFsaXplKHNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgcGFkZGluZ0xlZnQ6IDEyLFxuICBwYWRkaW5nUmlnaHQ6IDEyLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDgsXG4gIHBhZGRpbmdSaWdodDogOFxufSkpO1xuXG5mdW5jdGlvbiBpc0RlbGV0ZUtleWJvYXJkRXZlbnQoa2V5Ym9hcmRFdmVudCkge1xuICByZXR1cm4ga2V5Ym9hcmRFdmVudC5rZXkgPT09ICdCYWNrc3BhY2UnIHx8IGtleWJvYXJkRXZlbnQua2V5ID09PSAnRGVsZXRlJztcbn1cbi8qKlxuICogQ2hpcHMgcmVwcmVzZW50IGNvbXBsZXggZW50aXRpZXMgaW4gc21hbGwgYmxvY2tzLCBzdWNoIGFzIGEgY29udGFjdC5cbiAqL1xuXG5cbmNvbnN0IENoaXAgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaGlwKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDaGlwJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYXZhdGFyOiBhdmF0YXJQcm9wLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjbGlja2FibGU6IGNsaWNrYWJsZVByb3AsXG4gICAgY29sb3IgPSAnZGVmYXVsdCcsXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRQcm9wLFxuICAgIGRlbGV0ZUljb246IGRlbGV0ZUljb25Qcm9wLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgaWNvbjogaWNvblByb3AsXG4gICAgbGFiZWwsXG4gICAgb25DbGljayxcbiAgICBvbkRlbGV0ZSxcbiAgICBvbktleURvd24sXG4gICAgb25LZXlVcCxcbiAgICBzaXplID0gJ21lZGl1bScsXG4gICAgdmFyaWFudCA9ICdmaWxsZWQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjaGlwUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaXBSZWYsIHJlZik7XG5cbiAgY29uc3QgaGFuZGxlRGVsZXRlSWNvbkNsaWNrID0gZXZlbnQgPT4ge1xuICAgIC8vIFN0b3AgdGhlIGV2ZW50IGZyb20gYnViYmxpbmcgdXAgdG8gdGhlIGBDaGlwYFxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKG9uRGVsZXRlKSB7XG4gICAgICBvbkRlbGV0ZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgLy8gSWdub3JlIGV2ZW50cyBmcm9tIGNoaWxkcmVuIG9mIGBDaGlwYC5cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0ICYmIGlzRGVsZXRlS2V5Ym9hcmRFdmVudChldmVudCkpIHtcbiAgICAgIC8vIFdpbGwgYmUgaGFuZGxlZCBpbiBrZXlVcCwgb3RoZXJ3aXNlIHNvbWUgYnJvd3NlcnNcbiAgICAgIC8vIG1pZ2h0IGluaXQgbmF2aWdhdGlvblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVLZXlVcCA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlbnRzIGZyb20gY2hpbGRyZW4gb2YgYENoaXBgLlxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlmIChvbkRlbGV0ZSAmJiBpc0RlbGV0ZUtleWJvYXJkRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIG9uRGVsZXRlKGV2ZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJyAmJiBjaGlwUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2hpcFJlZi5jdXJyZW50LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25LZXlVcCkge1xuICAgICAgb25LZXlVcChldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNsaWNrYWJsZSA9IGNsaWNrYWJsZVByb3AgIT09IGZhbHNlICYmIG9uQ2xpY2sgPyB0cnVlIDogY2xpY2thYmxlUHJvcDtcbiAgY29uc3Qgc21hbGwgPSBzaXplID09PSAnc21hbGwnO1xuICBjb25zdCBjb21wb25lbnQgPSBjbGlja2FibGUgfHwgb25EZWxldGUgPyBCdXR0b25CYXNlIDogQ29tcG9uZW50UHJvcCB8fCAnZGl2JztcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIHNpemUsXG4gICAgY29sb3IsXG4gICAgb25EZWxldGU6ICEhb25EZWxldGUsXG4gICAgY2xpY2thYmxlLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBtb3JlUHJvcHMgPSBjb21wb25lbnQgPT09IEJ1dHRvbkJhc2UgPyBfZXh0ZW5kcyh7XG4gICAgY29tcG9uZW50OiBDb21wb25lbnRQcm9wIHx8ICdkaXYnLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xhc3Nlcy5mb2N1c1Zpc2libGVcbiAgfSwgb25EZWxldGUgJiYge1xuICAgIGRpc2FibGVSaXBwbGU6IHRydWVcbiAgfSkgOiB7fTtcbiAgbGV0IGRlbGV0ZUljb24gPSBudWxsO1xuXG4gIGlmIChvbkRlbGV0ZSkge1xuICAgIGNvbnN0IGN1c3RvbUNsYXNzZXMgPSBjbHN4KGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgKHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgPyBjbGFzc2VzW2BkZWxldGVJY29uT3V0bGluZWRDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0gOiBjbGFzc2VzW2BkZWxldGVJY29uQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdKSwgc21hbGwgJiYgY2xhc3Nlcy5kZWxldGVJY29uU21hbGwpO1xuICAgIGRlbGV0ZUljb24gPSBkZWxldGVJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZGVsZXRlSWNvblByb3ApID8gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChkZWxldGVJY29uUHJvcCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGRlbGV0ZUljb25Qcm9wLnByb3BzLmNsYXNzTmFtZSwgY2xhc3Nlcy5kZWxldGVJY29uLCBjdXN0b21DbGFzc2VzKSxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZURlbGV0ZUljb25DbGlja1xuICAgIH0pIDogLyojX19QVVJFX18qL19qc3goQ2FuY2VsSWNvbiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZGVsZXRlSWNvbiwgY3VzdG9tQ2xhc3NlcyksXG4gICAgICBvbkNsaWNrOiBoYW5kbGVEZWxldGVJY29uQ2xpY2tcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBhdmF0YXIgPSBudWxsO1xuXG4gIGlmIChhdmF0YXJQcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChhdmF0YXJQcm9wKSkge1xuICAgIGF2YXRhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoYXZhdGFyUHJvcCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYXZhdGFyLCBhdmF0YXJQcm9wLnByb3BzLmNsYXNzTmFtZSlcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBpY29uID0gbnVsbDtcblxuICBpZiAoaWNvblByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGljb25Qcm9wKSkge1xuICAgIGljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGljb25Qcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pY29uLCBpY29uUHJvcC5wcm9wcy5jbGFzc05hbWUpXG4gICAgfSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChhdmF0YXIgJiYgaWNvbikge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBUaGUgQ2hpcCBjb21wb25lbnQgY2FuIG5vdCBoYW5kbGUgdGhlIGF2YXRhciAnICsgJ2FuZCB0aGUgaWNvbiBwcm9wIGF0IHRoZSBzYW1lIHRpbWUuIFBpY2sgb25lLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoQ2hpcFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZGlzYWJsZWQ6IGNsaWNrYWJsZSAmJiBkaXNhYmxlZCA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBtb3JlUHJvcHMsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFthdmF0YXIgfHwgaWNvbiwgLyojX19QVVJFX18qL19qc3goQ2hpcExhYmVsLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5sYWJlbCksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgfSksIGRlbGV0ZUljb25dXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2hpcC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIEF2YXRhciBlbGVtZW50IHRvIGRpc3BsYXkuXG4gICAqL1xuICBhdmF0YXI6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaXNuJ3Qgc3VwcG9ydGVkLlxuICAgKiBVc2UgdGhlIGBjb21wb25lbnRgIHByb3AgaWYgeW91IG5lZWQgdG8gY2hhbmdlIHRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogdW5zdXBwb3J0ZWRQcm9wLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaXAgd2lsbCBhcHBlYXIgY2xpY2thYmxlLCBhbmQgd2lsbCByYWlzZSB3aGVuIHByZXNzZWQsXG4gICAqIGV2ZW4gaWYgdGhlIG9uQ2xpY2sgcHJvcCBpcyBub3QgZGVmaW5lZC5cbiAgICogSWYgYGZhbHNlYCwgdGhlIGNoaXAgd2lsbCBub3QgYXBwZWFyIGNsaWNrYWJsZSwgZXZlbiBpZiBvbkNsaWNrIHByb3AgaXMgZGVmaW5lZC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsXG4gICAqIGFsb25nIHdpdGggdGhlIGNvbXBvbmVudCBwcm9wIHRvIGluZGljYXRlIGFuIGFuY2hvciBDaGlwIGlzIGNsaWNrYWJsZS5cbiAgICogTm90ZTogdGhpcyBjb250cm9scyB0aGUgVUkgYW5kIGRvZXMgbm90IGFmZmVjdCB0aGUgb25DbGljayBldmVudC5cbiAgICovXG4gIGNsaWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgZGVsZXRlIGljb24gZWxlbWVudC4gU2hvd24gb25seSBpZiBgb25EZWxldGVgIGlzIHNldC5cbiAgICovXG4gIGRlbGV0ZUljb246IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEljb24gZWxlbWVudC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZGVsZXRlIGljb24gaXMgY2xpY2tlZC5cbiAgICogSWYgc2V0LCB0aGUgZGVsZXRlIGljb24gd2lsbCBiZSBzaG93bi5cbiAgICovXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdmaWxsZWQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENoaXA7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gXCJAbXVpL21hdGVyaWFsL3N0eWxlc1wiO1xuaW1wb3J0IEJveCBmcm9tIFwiQG11aS9tYXRlcmlhbC9Cb3hcIjtcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gXCJAbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXRcIjtcbmltcG9ydCBJbnB1dExhYmVsIGZyb20gXCJAbXVpL21hdGVyaWFsL0lucHV0TGFiZWxcIjtcbmltcG9ydCBNZW51SXRlbSBmcm9tIFwiQG11aS9tYXRlcmlhbC9NZW51SXRlbVwiO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gXCJAbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sXCI7XG5pbXBvcnQgU2VsZWN0IGZyb20gXCJAbXVpL21hdGVyaWFsL1NlbGVjdFwiO1xuaW1wb3J0IENoaXAgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvQ2hpcFwiO1xuXG5jb25zdCBJVEVNX0hFSUdIVCA9IDQ4O1xuY29uc3QgSVRFTV9QQURESU5HX1RPUCA9IDg7XG5jb25zdCBNZW51UHJvcHMgPSB7XG4gICAgUGFwZXJQcm9wczoge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgbWF4SGVpZ2h0OiBJVEVNX0hFSUdIVCAqIDQuNSArIElURU1fUEFERElOR19UT1AsXG4gICAgICAgICAgICB3aWR0aDogMjUwXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5mdW5jdGlvbiBnZXRTdHlsZXMobmFtZSwgcGVyc29uTmFtZSwgdGhlbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmb250V2VpZ2h0OlxuICAgICAgICAgICAgcGVyc29uTmFtZS5pbmRleE9mKG5hbWUpID09PSAtMSA/IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodFJlZ3VsYXIgOiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW1cbiAgICB9O1xufVxuXG5jb25zdCBNdWx0aXBsZURyb3Bkb3duID0gKHsgaXRlbXMsIHNldEl0ZW1zIH0pID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2Nob3Nlbkl0ZW0sIHNldENob3Nlbkl0ZW1dID0gdXNlU3RhdGUoW10pO1xuXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRhcmdldDogeyB2YWx1ZSB9XG4gICAgICAgIH0gPSBldmVudDtcbiAgICAgICAgc2V0Q2hvc2VuSXRlbShcbiAgICAgICAgICAgIC8vIE9uIGF1dG9maWxsIHdlIGdldCBhIHN0cmluZ2lmaWVkIHZhbHVlLlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoXCIsXCIpIDogdmFsdWVcbiAgICAgICAgKTtcbiAgICAgICAgc2V0SXRlbXMoXG4gICAgICAgICAgICAvLyBPbiBhdXRvZmlsbCB3ZSBnZXQgYSBzdHJpbmdpZmllZCB2YWx1ZS5cbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KFwiLFwiKSA6IHZhbHVlXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgc3g9e3sgd2lkdGg6IFwiMTAwJVwiIH19PlxuICAgICAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxJZD1cImRlbW8tbXVsdGlwbGUtY2hpcC1sYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgIGlkPVwiZGVtby1tdWx0aXBsZS1jaGlwXCJcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2Nob3Nlbkl0ZW19XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIGlucHV0PXs8T3V0bGluZWRJbnB1dCBpZD1cInNlbGVjdC1tdWx0aXBsZS1jaGlwXCIgLz59XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclZhbHVlPXsoc2VsZWN0ZWQpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGZsZXhXcmFwOiBcIndyYXBcIiwgZ2FwOiAwLjUgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3NlbGVjdGVkLm1hcCgodmFsdWUpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoaXAga2V5PXt2YWx1ZX0gbGFiZWw9e3ZhbHVlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIE1lbnVQcm9wcz17TWVudVByb3BzfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPE1lbnVJdGVtIGtleT17aXRlbX0gdmFsdWU9e2l0ZW19IHN0eWxlPXtnZXRTdHlsZXMoaXRlbSwgY2hvc2VuSXRlbSwgdGhlbWUpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE11bHRpcGxlRHJvcGRvd247XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9TZWFyY2hGb3JtLnNjc3NcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtLmpzXCI7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGQuanNcIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXRcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbC5qc1wiO1xuaW1wb3J0IFRvZ2dsZUZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL1RvZ2dsZUZpZWxkL1RvZ2dsZUZpZWxkLmpzXCI7XG5pbXBvcnQgVG9nZ2xlIGZyb20gXCIuLi8uLi9jb3JlL1RvZ2dsZS9Ub2dnbGUuanNcIjtcbmltcG9ydCBEcm9wZG93biBmcm9tIFwiLi4vLi4vY29yZS9Ecm9wZG93bi9Ecm9wZG93bi5qc1wiO1xuaW1wb3J0IE1lZXRpbmdGb3JtYXRzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL01lZXRpbmdGb3JtYXRzXCI7XG5pbXBvcnQgU3ViamVjdHMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvU3ViamVjdHMuanNcIjtcbmltcG9ydCBUaW1lUmFuZ2UgZnJvbSBcIi4uLy4uL2NvcmUvUmFuZ2UvVGltZVJhbmdlXCI7XG5pbXBvcnQgTXVsdGlwbGVEcm9wZG93biBmcm9tIFwiLi4vLi4vY29yZS9Ecm9wZG93bi9NdWx0aXBsZURyb3Bkb3duXCI7XG5pbXBvcnQgeyBEYXlzLCBNZWV0aW5nRnJlcXVlbmNpZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9UaW1lXCI7XG5cbi8qKlxuICogUmVuZGVycyBhIHNlYXJjaCBmb3JtIGZvciBzZWFyY2hpbmcgc3R1ZHkgZ3JvdXBzXG4gKiBAYXV0aG9yIFN0YWNleSBQb3BlbmZvb3NlIGFuZCBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAxLzI3LzIwMjJcbiAqL1xuY29uc3QgU2VhcmNoRm9ybSA9ICh7XG4gICAgc2VhcmNoVGVybSxcbiAgICBzdWJqZWN0LFxuICAgIGlzQXNzb2NpYXRlZFdpdGhTY2hvb2wsXG4gICAgbWVldGluZ0Zvcm1hdCxcbiAgICB0eXBlLFxuICAgIHRpbWVSYW5nZSxcbiAgICBkYXlzLFxuICAgIG1lZXRpbmdGcmVxdWVuY2llcyxcbiAgICB1cGRhdGVTZWFyY2hUZXJtLFxuICAgIHVwZGF0ZVN1YmplY3QsXG4gICAgdXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbCxcbiAgICB1cGRhdGVNZWV0aW5nRm9ybWF0LFxuICAgIHVwZGF0ZVR5cGUsXG4gICAgdXBkYXRlVGltZVJhbmdlLFxuICAgIHVwZGF0ZURheXMsXG4gICAgdXBkYXRlTWVldGluZ0ZyZXF1ZW5jaWVzLFxuICAgIHN1Ym1pdFNlYXJjaCxcbiAgICB1c2VyU2Nob29sXG59KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtzdWJtaXRTZWFyY2h9IGNsYXNzTmFtZT1cInNlYXJjaC1mb3JtXCI+XG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5TZWFyY2ggVGVybTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3NlYXJjaFRlcm19IG9uQ2hhbmdlPXt1cGRhdGVTZWFyY2hUZXJtfSAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPkNhdGVnb3J5PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duIG9wdGlvbnM9e09iamVjdC5rZXlzKFN1YmplY3RzKX0gdmFsdWU9e3N1YmplY3R9IG9uQ2hhbmdlPXt1cGRhdGVTdWJqZWN0fSAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPk1lZXRpbmcgRnJlcXVlbmN5PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPE11bHRpcGxlRHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zPXtbLi4uT2JqZWN0LnZhbHVlcyhNZWV0aW5nRnJlcXVlbmNpZXMpXX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW1zPXt1cGRhdGVNZWV0aW5nRnJlcXVlbmNpZXN9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TWVldGluZyBEYXlzPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPE11bHRpcGxlRHJvcGRvd24gaXRlbXM9e1suLi5PYmplY3QudmFsdWVzKERheXMpXX0gc2V0SXRlbXM9e3VwZGF0ZURheXN9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TWVldGluZyBUaW1lIFJhbmdlPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGg0PlxuICAgICAgICAgICAgICAgICAgICAgICAge3RpbWVSYW5nZVswXX0gdG8ge3RpbWVSYW5nZVsxXX1cbiAgICAgICAgICAgICAgICAgICAgPC9oND5cbiAgICAgICAgICAgICAgICAgICAgPFRpbWVSYW5nZSB1cGRhdGVUaW1lUmFuZ2U9e3VwZGF0ZVRpbWVSYW5nZX0gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TWVldGluZyBGb3JtYXQ8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17Wy4uLk9iamVjdC52YWx1ZXMoTWVldGluZ0Zvcm1hdHMpXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlTWVldGluZ0Zvcm1hdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bWVldGluZ0Zvcm1hdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+VHlwZTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd24gb3B0aW9ucz17W1wiR3JvdXBcIiwgXCJUdXRvclwiLCBcIk1peGVkXCJdfSBvbkNoYW5nZT17dXBkYXRlVHlwZX0gdmFsdWU9e3R5cGV9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7dXNlclNjaG9vbCAhPT0gXCJcIiAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxUb2dnbGVGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5TaG93IE9ubHkgR3JvdXBzIEFzc29jaWF0ZWQgd2l0aCB7dXNlclNjaG9vbH0/PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb2dnbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aXNBc3NvY2lhdGVkV2l0aFNjaG9vbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Ub2dnbGVGaWVsZD5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5QcmltYXJ5fT5TZWFyY2g8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaEZvcm07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NpZGVWaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TaWRlVmlldy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL1NpZGVWaWV3LnNjc3NcIjtcclxuXHJcbi8vV2hlbiBhIHVzZXIgaXMgdXNpbmcgU3R1ZHkgU3BhY2VzIG9uIGEgbW9iaWxlIGRldmljZSwgdGhlIFNpZGVWaWV3IHdpbGwgYmUgdXNlZCB0byBoZWxwIHRoZW0gbmF2aWdhdGUgdGhyb3VnaCB0aGUgYXBwIGFuZCB0byBhY2Nlc3MgdGhlIGFwcCdzIGZlYXR1cmVzLiAgSXQgaGlkZXMgb2ZmIHRoZSBzY3JlZW4gdW50aWwgYW4gYWN0aW9uIGlzIHRha2VuIHRoYXQgcmVxdWlyZXMgaXQgc2xpZGUgaW50byB2aWV3LiAgVGhhdCBhY3Rpb24gaXMgdHJpZ2dlcmVkIGJ5IHRoZSB1c2VyIGNsaWNraW5nIG9uIGEgYnV0dG9uIGluIHRoZSBhcHAsIG1ha2luZyBwcm9wcy5zaWRlVmlld0lzU2hvd2luZyA9IHRydWUuICBUaGUgU2lkZVZpZXcgd2lsbCBzbGlkZSBpbnRvIHZpZXcgYW5kIGRpc3BsYXkgdGhlIGNvbnRlbnQgb2YgdGhlIGNoaWxkcmVuIG9mIHRoZSBzaWRlIHZpZXcuICBUaGUgU2lkZVZpZXcgd2lsbCBzbGlkZSBvdXQgb2YgdmlldyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhbiBYIGJ1dHRvbiBpbiB0aGUgc2lkZSB2aWV3LlxyXG5jb25zdCBTaWRlVmlldyA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uIHx8IFwibGVmdFwiO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17XHJcbiAgICAgICAgICAgICAgICBwcm9wcy5zaWRlVmlld0lzU2hvd2luZ1xyXG4gICAgICAgICAgICAgICAgICAgID8gcHJvcHMubmFtZU9mQ2xhc3MgKyBcIiBcIiArIGRpcmVjdGlvbiArIFwiIHNpZGUtdmlldyBzaG93aW5nXCJcclxuICAgICAgICAgICAgICAgICAgICA6IHByb3BzLm5hbWVPZkNsYXNzICsgXCIgXCIgKyBkaXJlY3Rpb24gKyBcIiBzaWRlLXZpZXdcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICB7Y29uc29sZS5sb2coZGlyZWN0aW9uKX1cclxuICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2xvc2Utc2lkZS12aWV3LWJ0blwiXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuc2V0U2lkZVZpZXdJc1Nob3dpbmcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgWFxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNpZGVWaWV3O1xyXG4iLCJpbXBvcnQgXCIuL1NlYXJjaFZpZXcuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCBTZWFyY2hGb3JtIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1NlYXJjaEZvcm0vU2VhcmNoRm9ybVwiO1xuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCB7IFRpbWUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9UaW1lLmpzXCI7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgcG9wdWxhdGVTdHVkeUdyb3VwU2VhcmNoLCBzaG93RXJyb3JOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IE1lZXRpbmdGb3JtYXRzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL01lZXRpbmdGb3JtYXRzXCI7XG5pbXBvcnQgeyBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vSGVscGVyXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IFN1YmplY3RzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL1N1YmplY3RzLmpzXCI7XG5pbXBvcnQgU2lkZVZpZXcgZnJvbSBcIi4uL1NpZGVWaWV3L1NpZGVWaWV3XCI7XG5cbi8qKlxuICogQSB2aWV3IGZvciBpbnB1dHRpbmcgc2VhcmNoIHRlcm1zIGFuZCBmaWx0ZXJzIGZvciBzZWFyY2hpbmcgc3R1ZHkgZ3JvdXBzXG4gKiBUaGUgcmVzdWx0cyBvZiB0aGlzIHNlYXJjaCB3aWxsIGJlIGRpc3BsYXllZCBvbiB0aGUgU2VhcmNoUmVzdWx0cy5qcyBWaWV3XG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqL1xuY29uc3QgU2VhcmNoVmlldyA9ICh7IHNlYXJjaFZpZXdJc1Nob3dpbmcsIHNldFNlYXJjaFZpZXdJc1Nob3dpbmcgfSkgPT4ge1xuICAgIGNvbnN0IFtzZWFyY2hUZXJtLCBzZXRTZWFyY2hUZXJtXSA9IHVzZVN0YXRlKFwiXCIpO1xuICAgIGNvbnN0IFtzdWJqZWN0LCBzZXRTdWJqZWN0XSA9IHVzZVN0YXRlKFN1YmplY3RzLkFueSk7XG4gICAgY29uc3QgW2lzQXNzb2NpYXRlZFdpdGhTY2hvb2wsIHNldElzQXNzb2NpYXRlZFdpdGhTY2hvb2xdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFttZWV0aW5nRm9ybWF0LCBzZXRNZWV0aW5nRm9ybWF0XSA9IHVzZVN0YXRlKE1lZXRpbmdGb3JtYXRzLk1peGVkKTtcbiAgICBjb25zdCBbdHlwZSwgc2V0VHlwZV0gPSB1c2VTdGF0ZShcIk1peGVkXCIpO1xuICAgIGNvbnN0IFt0aW1lUmFuZ2UsIHNldFRpbWVSYW5nZV0gPSB1c2VTdGF0ZShbXCIxMjowMEFNXCIsIFwiMTE6NDVQTVwiXSk7XG4gICAgY29uc3QgW2RheXMsIHNldERheXNdID0gdXNlU3RhdGUoW10pO1xuICAgIGNvbnN0IFttZWV0aW5nRnJlcXVlbmNpZXMsIHNldE1lZXRpbmdGcmVxdWVuY2llc10gPSB1c2VTdGF0ZShbXSk7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgdXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlciB8fCBcIlwiKTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgc3R1ZHkgZ3JvdXBzIGZyb20gc2VhcmNoIHF1ZXJ5IGJ5IHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAwMS8yOS8yMlxuICAgICAqL1xuICAgIGNvbnN0IHN1Ym1pdFNlYXJjaCA9IGFzeW5jIChlKSA9PiB7XG4gICAgICAgIC8vIFNVQk1JVCBUSEUgU0VBUkNIIFJFUVVFU1QuXG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHNldFNlYXJjaFZpZXdJc1Nob3dpbmcoZmFsc2UpO1xuXG4gICAgICAgIGF3YWl0IHNlbmRQb3N0UmVxdWVzdChcbiAgICAgICAgICAgIFJvdXRlcy5TZWFyY2guR2V0U2VhcmNoUmVzdWx0cyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hUZXJtLFxuICAgICAgICAgICAgICAgIHN1YmplY3QsXG4gICAgICAgICAgICAgICAgc2Nob29sOiBpc0Fzc29jaWF0ZWRXaXRoU2Nob29sID8gdXNlci5zY2hvb2wgOiBcIlwiLFxuICAgICAgICAgICAgICAgIG1lZXRpbmdGb3JtYXQsXG4gICAgICAgICAgICAgICAgbWVldGluZ0ZyZXF1ZW5jaWVzLFxuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lOiBUaW1lLnBhcnNlVGltZVN0cmluZyh0aW1lUmFuZ2VbMF0pLFxuICAgICAgICAgICAgICAgIGVuZFRpbWU6IFRpbWUucGFyc2VUaW1lU3RyaW5nKHRpbWVSYW5nZVsxXSksXG4gICAgICAgICAgICAgICAgZGF5c1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5TdWNjZXNzU3R1ZHlHcm91cHNSZXRyaWV2ZWQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHBvcHVsYXRlU3R1ZHlHcm91cFNlYXJjaChkYXRhLnN0dWR5R3JvdXBzKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIHNlYXJjaCB0ZXJtIGZpZWxkIGluIHRoZSBzZWFyY2ggZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAwMS8yNi8yMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZVNlYXJjaFRlcm0gPSAoZSkgPT4ge1xuICAgICAgICBzZXRTZWFyY2hUZXJtKGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIHN1YmplY3QgZHJvcGRvd24gZmllbGQgaW4gdGhlIHNlYXJjaCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgIDAxLzI2LzIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlU3ViamVjdCA9IChlKSA9PiB7XG4gICAgICAgIHNldFN1YmplY3QoZS50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgXCJzaG93IG9ubHkgZ3JvdXBzIGFzc29jaWF0ZWQgd2l0aCBzY2hvb2xcIiBjaGVja2JveCBpbiB0aGUgc2VhcmNoIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgMDEvMjYvMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVJc0Fzc29jaWF0ZWRXaXRoU2Nob29sID0gKGUpID0+IHtcbiAgICAgICAgc2V0SXNBc3NvY2lhdGVkV2l0aFNjaG9vbChlLnRhcmdldC5jaGVja2VkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNob3NlbiBtZWV0aW5nIGZvcm1hdCBmcm9tIHRoZSBkcm9wZG93biBtZW51IGluIHRoZSBzZWFyY2ggZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAwMS8yNi8yMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZU1lZXRpbmdGb3JtYXQgPSAoZSkgPT4ge1xuICAgICAgICBzZXRNZWV0aW5nRm9ybWF0KGUudGFyZ2V0Lm9wdGlvbnNbZS50YXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgY2hvc2VuIHR5cGUgZnJvbSB0aGUgZHJvcGRvd24gbWVudSBpbiB0aGUgc2VhcmNoIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgMDEvMjYvMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVUeXBlID0gKGUpID0+IHtcbiAgICAgICAgc2V0VHlwZShlLnRhcmdldC5vcHRpb25zW2UudGFyZ2V0LnNlbGVjdGVkSW5kZXhdLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNob3NlbiB0aW1lIHJhbmdlIGluIHRoZSBzZWFyY2ggZm9ybS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZSBUaGUgW3N0YXJ0VGltZSwgZW5kVGltZV1cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgMDEvMjkvMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVUaW1lUmFuZ2UgPSAodmFsdWUpID0+IHtcbiAgICAgICAgc2V0VGltZVJhbmdlKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNob3NlbiB0aW1lIHJhbmdlIGluIHRoZSBzZWFyY2ggZm9ybS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZSBBbiBhcnJheSBvZiBjaG9zZW4gZGF5c1xuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAwMS8yOS8yMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZURheXMgPSAodmFsdWUpID0+IHtcbiAgICAgICAgc2V0RGF5cyh2YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBjaG9zZW4gdGltZSByYW5nZSBpbiB0aGUgc2VhcmNoIGZvcm0uXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWUgQW4gYXJyYXkgb2YgY2hvc2VuIG1lZXRpbmcgZnJlcXVlbmNpZXNcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgMDEvMjkvMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVNZWV0aW5nRnJlcXVlbmNpZXMgPSAodmFsdWUpID0+IHtcbiAgICAgICAgc2V0TWVldGluZ0ZyZXF1ZW5jaWVzKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBkZWZhdWx0IHNlYXJjaCB1cG9uIGluaXRpYWxseSBsb2FkaW5nIHRoZSBwYWdlLlxuICAgICAqL1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHN1Ym1pdFNlYXJjaCgpO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8U2lkZVZpZXdcbiAgICAgICAgICAgIHNldFNpZGVWaWV3SXNTaG93aW5nPXtzZXRTZWFyY2hWaWV3SXNTaG93aW5nfVxuICAgICAgICAgICAgc2lkZVZpZXdJc1Nob3dpbmc9e3NlYXJjaFZpZXdJc1Nob3dpbmd9XG4gICAgICAgICAgICBuYW1lT2ZDbGFzcz1cInNlYXJjaC12aWV3XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8U2VhcmNoRm9ybVxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hUZXJtPXtzZWFyY2hUZXJtfVxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0PXtzdWJqZWN0fVxuICAgICAgICAgICAgICAgICAgICBpc0Fzc29jaWF0ZWRXaXRoU2Nob29sPXtpc0Fzc29jaWF0ZWRXaXRoU2Nob29sfVxuICAgICAgICAgICAgICAgICAgICBtZWV0aW5nRm9ybWF0PXttZWV0aW5nRm9ybWF0fVxuICAgICAgICAgICAgICAgICAgICB0eXBlPXt0eXBlfVxuICAgICAgICAgICAgICAgICAgICB0aW1lUmFuZ2U9e3RpbWVSYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgZGF5cz17ZGF5c31cbiAgICAgICAgICAgICAgICAgICAgbWVldGluZ0ZyZXF1ZW5jaWVzPXttZWV0aW5nRnJlcXVlbmNpZXN9XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVNlYXJjaFRlcm09e3VwZGF0ZVNlYXJjaFRlcm19XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVN1YmplY3Q9e3VwZGF0ZVN1YmplY3R9XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUlzQXNzb2NpYXRlZFdpdGhTY2hvb2w9e3VwZGF0ZUlzQXNzb2NpYXRlZFdpdGhTY2hvb2x9XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZU1lZXRpbmdGb3JtYXQ9e3VwZGF0ZU1lZXRpbmdGb3JtYXR9XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVR5cGU9e3VwZGF0ZVR5cGV9XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWVSYW5nZT17dXBkYXRlVGltZVJhbmdlfVxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXlzPXt1cGRhdGVEYXlzfVxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVNZWV0aW5nRnJlcXVlbmNpZXM9e3VwZGF0ZU1lZXRpbmdGcmVxdWVuY2llc31cbiAgICAgICAgICAgICAgICAgICAgc3VibWl0U2VhcmNoPXtzdWJtaXRTZWFyY2h9XG4gICAgICAgICAgICAgICAgICAgIHVzZXJTY2hvb2w9e3VzZXIuc2Nob29sIHx8IFwiXCJ9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1NpZGVWaWV3PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hWaWV3O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hSZXN1bHRzLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hSZXN1bHRzLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaExpc3Rpbmcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaExpc3Rpbmcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vU2VhcmNoTGlzdGluZy5zY3NzXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2hvd0pvaW5TdHVkeUdyb3VwUG9wdXAgfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuLyoqXG4gKiBBIHZpZXcgZm9yIGRpc3BsYXlpbmcgYSBzaW5nbGUgc3R1ZHkgZ3JvdXAgbGlzdGluZyByZXN1bHRpbmcgZnJvbSBhIHNlYXJjaCBxdWVyeVxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKi9cbmNvbnN0IFNlYXJjaExpc3RpbmcgPSAoeyBncm91cCB9KSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdyb3VwKTtcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJsaXN0aW5nLWNvbnRhaW5lclwiXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGJvcmRlcjogYCR7Z3JvdXAuZ3JvdXBDb2xvcn0gNXB4IHNvbGlkYFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dKb2luU3R1ZHlHcm91cFBvcHVwKGdyb3VwKSl9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0aXRsZS1waG90by1jb250YWluZXJcIlxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZ3JvdXAuZ3JvdXBDb2xvclxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImdyb3VwLXRpdGxlXCI+e2dyb3VwLm5hbWV9PC9oMT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC1pbmZvLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtaW5mby1pdGVtXCIgaWQ9XCJvd25lci1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIHtncm91cC5pc1R1dG9yR3JvdXAgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlR1dG9yOjwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5Pd25lcjo8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgPGgyPntncm91cC5vd25lci5uYW1lfTwvaDI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC1pbmZvLWl0ZW1cIiBpZD1cInNjaG9vbC1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlNjaG9vbDo8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxoMj57Z3JvdXAuc2Nob29sID8gZ3JvdXAuc2Nob29sIDogXCJOb25lXCJ9PC9oMj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLWluZm8taXRlbVwiIGlkPVwic3ViamVjdC1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlN1YmplY3Q6PC9wPlxuICAgICAgICAgICAgICAgICAgICA8aDI+e2dyb3VwLnN1YmplY3R9PC9oMj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLWluZm8taXRlbVwiIGlkPVwiY291cnNlQ29kZS1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPkNvdXJzZSBDb2RlOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGgyPntncm91cC5jb3Vyc2UgPyBncm91cC5jb3Vyc2UgOiBcIk5vbmVcIn08L2gyPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nICYmIChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC1pbmZvLWl0ZW1cIiBpZD1cInNjaGVkdWxlLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5pc09ubGluZUdyb3VwID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZWV0cyA8c3Ryb25nPk9ubGluZTwvc3Ryb25nPjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZWV0cyA8c3Ryb25nPkluLVBlcnNvbjwvc3Ryb25nPjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nLmZyZXF1ZW5jeX0gb24ge2dyb3VwLnJlY3VycmluZ01lZXRpbmcuZGF5fSBhdHtcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z3JvdXAucmVjdXJyaW5nTWVldGluZy50aW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoTGlzdGluZztcbiIsImltcG9ydCBcIi4vU2VhcmNoUmVzdWx0cy5zY3NzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgU2VhcmNoTGlzdGluZyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9TZWFyY2hMaXN0aW5nL1NlYXJjaExpc3RpbmdcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgQ2lyY3VsYXJQcm9ncmVzcyBmcm9tIFwiQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzXCI7XG5pbXBvcnQgQm94IGZyb20gXCJAbXVpL21hdGVyaWFsL0JveFwiO1xuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTG9hZGluZy9Mb2FkaW5nXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcbi8qKlxuICogQSB2aWV3IGZvciBkaXNwbGF5aW5nIHJlc3VsdGluZyBzdHVkeSBncm91cHMgZnJvbSBhIHNlYXJjaCBxdWVyeVxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKi9cbmNvbnN0IFNlYXJjaFJlc3VsdFZpZXcgPSAoeyBzZWFyY2hWaWV3SXNTaG93aW5nIH0pID0+IHtcbiAgICBjb25zdCBzZWFyY2ggPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnN0dWR5R3JvdXBzUmVkdWNlci5zZWFyY2gpO1xuICAgIGNvbnN0IGlzTG9hZGluZyA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUubm90aWZpY2F0aW9uUmVkdWNlci5sb2FkaW5nKTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaC1yZXN1bHRzXCI+XG4gICAgICAgICAgICB7LyogUmVuZGVyIGdyb3VwcyBmcm9tIHNlYXJjaCB1c2luZyBzZWFyY2ggbGlzdGluZyBmb3VuZCB3aXRoaW4gc3RhdGUgKi99XG4gICAgICAgICAgICB7aXNMb2FkaW5nID8gPExvYWRpbmcgLz4gOiBzZWFyY2gubWFwKChncm91cCkgPT4gPFNlYXJjaExpc3RpbmcgZ3JvdXA9e2dyb3VwfSBrZXk9e2dyb3VwLl9pZH0gLz4pfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoUmVzdWx0VmlldztcbiIsImltcG9ydCBcIi4vU2VhcmNoLnNjc3NcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBUb3BCYXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvVG9wQmFyL1RvcEJhclwiO1xuaW1wb3J0IFNlYXJjaFZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL1NlYXJjaC9TZWFyY2hWaWV3XCI7XG5pbXBvcnQgU2VhcmNoUmVzdWx0c1ZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL1NlYXJjaC9TZWFyY2hSZXN1bHRWaWV3XCI7XG5pbXBvcnQgUGFnZSBmcm9tIFwiLi4vUGFnZVwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgU2VhcmNoSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9TZWFyY2hcIjtcblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBTZWFyY2ggcGFnZVxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDEvMjQvMjAyMlxuICovXG5jb25zdCBTZWFyY2ggPSAoKSA9PiB7XG4gICAgY29uc3QgW3NlYXJjaFZpZXdJc1Nob3dpbmcsIHNldFNlYXJjaFZpZXdJc1Nob3dpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8UGFnZSB0b3BCYXI9e3RydWV9IGN1cnJlbnRQYWdlPVwic2VhcmNoXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2gtcGFnZVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2UtdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5TZWFyY2g8L2gxPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2gtYXJlYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hWaWV3SXNTaG93aW5nPXtzZWFyY2hWaWV3SXNTaG93aW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNlYXJjaFZpZXdJc1Nob3dpbmc9e3NldFNlYXJjaFZpZXdJc1Nob3dpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFJlc3VsdHNWaWV3IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW4tc2VhcmNoLWZpbHRlci1idXR0b24tY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTZWFyY2hWaWV3SXNTaG93aW5nKCFzZWFyY2hWaWV3SXNTaG93aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWFyY2hJY29uIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1BhZ2U+XG4gICAgICAgIDwvPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2g7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0dWR5R3JvdXAuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0dWR5R3JvdXAuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVtYmVyc1ZpZXcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL01lbWJlcnNWaWV3LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL01lbWJlcnNWaWV3LnNjc3NcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vLi4vY29yZS9MYWJlbC9MYWJlbFwiO1xuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2hvd1ZpZXdNZW1iZXJQb3B1cCB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zL2luZGV4XCI7XG5pbXBvcnQgU2lkZVZpZXcgZnJvbSBcIi4uLy4uL1NpZGVWaWV3L1NpZGVWaWV3XCI7XG5cbmNvbnN0IE1lbWJlcnNWaWV3ID0gKHsgZ3JvdXAsIG1lbWJlcnNWaWV3SXNTaG93aW5nLCBzZXRNZW1iZXJzVmlld0lzU2hvd2luZyB9KSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxTaWRlVmlld1xuICAgICAgICAgICAgbmFtZU9mQ2xhc3M9XCJtZW1iZXJzLWNvbnRhaW5lclwiXG4gICAgICAgICAgICBzZXRTaWRlVmlld0lzU2hvd2luZz17c2V0TWVtYmVyc1ZpZXdJc1Nob3dpbmd9XG4gICAgICAgICAgICBzaWRlVmlld0lzU2hvd2luZz17bWVtYmVyc1ZpZXdJc1Nob3dpbmd9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPExhYmVsIHN0eWxlPXt7IHBhZGRpbmc6IFwiMTBweFwiIH19Pk93bmVyPC9MYWJlbD5cblxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibWVtYmVyIG93bmVyXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2hvd1ZpZXdNZW1iZXJQb3B1cChncm91cC5vd25lcikpfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBib3JkZXJDb2xvcjogZ3JvdXAuZ3JvdXBDb2xvciB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2dyb3VwLm93bmVyICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByb2ZpbGVQaWN0dXJlIGltYWdlPXtncm91cC5vd25lci5wcm9maWxlUGljdHVyZX0gbmFtZT17Z3JvdXAub3duZXIubmFtZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57Z3JvdXAub3duZXIubmFtZX08L3A+e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPExhYmVsIHN0eWxlPXt7IHBhZGRpbmc6IFwiMTBweFwiIH19Pk1lbWJlcnM8L0xhYmVsPlxuICAgICAgICAgICAgICAgIHtncm91cC5tZW1iZXJzICYmXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLm1lbWJlcnMubWFwKChtZW1iZXIpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtZW1iZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dWaWV3TWVtYmVyUG9wdXAobWVtYmVyKSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgYm9yZGVyQ29sb3I6IGdyb3VwLmdyb3VwQ29sb3IgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvZmlsZVBpY3R1cmUgaW1hZ2U9e21lbWJlci5wcm9maWxlUGljdHVyZX0gbmFtZT17bWVtYmVyLm5hbWV9IC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57bWVtYmVyLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU2lkZVZpZXc+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lbWJlcnNWaWV3O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9EZXRhaWxzVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGV0YWlsc1ZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vRGV0YWlsc1ZpZXcuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IHtcbiAgICBzaG93RWRpdFN0dWR5R3JvdXBQb3B1cCxcbiAgICBzaG93Q29uZmlybWF0aW9uUG9wdXAsXG4gICAgc2hvd1ZpZXdNZWV0aW5nc1N0dWR5R3JvdXBQb3B1cCxcbiAgICBjbGVhclN0dWR5R3JvdXBzLFxuICAgIHNob3dSZXBvcnRQb3B1cFxufSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IHsgZ2V0TmV4dE1lZXRpbmcsIHNlbmREZWxldGVSZXF1ZXN0LCBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vSGVscGVyXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlc1wiO1xuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xuaW1wb3J0IHsgUmVwb3J0VHlwZXMgfSBmcm9tIFwiLi4vLi4vUmVwb3J0L1JlcG9ydFR5cGVzXCI7XG5pbXBvcnQgU2lkZVZpZXcgZnJvbSBcIi4uLy4uL1NpZGVWaWV3L1NpZGVWaWV3XCI7XG5cbi8qKlxuICogUmVuZGVycyBhIHZpZXcgZm9yIGEgdXNlciB0byB2aWV3IGRldGFpbHMgYWJvdXQgYSBqb2luZWQgb3IgZWRpdCBhbiBvd25lZCBzdHVkeSBncm91cFxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDAyLzE1LzIwMjJcbiAqIEBwYXJhbSB7T2JqZWN0fSBncm91cCB0aGUgc3R1ZHkgZ3JvdXBcbiAqICovXG5jb25zdCBEZXRhaWxzVmlldyA9ICh7IGdyb3VwLCBkZXRhaWxzVmlld0lzU2hvd2luZywgc2V0RGV0YWlsc1ZpZXdJc1Nob3dpbmcgfSkgPT4ge1xuICAgIGNvbnN0IHVzZXIgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLnVzZXIpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuXG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gYXBpIGNhbGwgdG8gdGhlIERlbGV0ZSBzdHVkeSBncm91cCByb3V0ZSwgcGFzc2luZyBpbiB0aGUgaW5mb3JtYXRpb24gZW50ZXJlZCBpblxuICAgICAqIHRoZSBmb3JtIGFuZCByZW5kZXJpbmcgdGhlIGNsaWVudCBhY2NvcmRpbmcgdG8gdGhlIHJlc3BvbnNlIHJlY2VpdmVkXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNi8yMDIyXG4gICAgICogQGFzeW5jXG4gICAgICogKi9cbiAgICBjb25zdCBzdWJtaXREZWxldGUgPSBhc3luYyAoY29uZmlybWVkKSA9PiB7XG4gICAgICAgIGlmIChjb25maXJtZWQpXG4gICAgICAgICAgICBhd2FpdCBzZW5kRGVsZXRlUmVxdWVzdChcbiAgICAgICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5EZWxldGVTdHVkeUdyb3VwLFxuICAgICAgICAgICAgICAgIHsgc3R1ZHlHcm91cElkOiBncm91cC5faWQgfSxcbiAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU3VjY2Vzc1N0dWR5R3JvdXBEZWxldGVkLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaChcIi9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICB9O1xuICAgIGNvbnN0IHN1Ym1pdExlYXZlID0gYXN5bmMgKGNvbmZpcm1lZCkgPT4ge1xuICAgICAgICBpZiAoY29uZmlybWVkKSB7XG4gICAgICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICAgICAgUm91dGVzLlN0dWR5R3JvdXAuTGVhdmVTdHVkeUdyb3VwLFxuICAgICAgICAgICAgICAgIHsgc3R1ZHlHcm91cElkOiBncm91cC5faWQgfSxcbiAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU3VjY2Vzc1N0dWR5R3JvdXBMZWZ0LFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaChcIi9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFNpZGVWaWV3XG4gICAgICAgICAgICBuYW1lT2ZDbGFzcz1cImRldGFpbHMtY29udGFpbmVyXCJcbiAgICAgICAgICAgIGRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgIHNldFNpZGVWaWV3SXNTaG93aW5nPXtzZXREZXRhaWxzVmlld0lzU2hvd2luZ31cbiAgICAgICAgICAgIHNpZGVWaWV3SXNTaG93aW5nPXtkZXRhaWxzVmlld0lzU2hvd2luZ31cbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lZXRpbmdpbmZvLWNvbnRhaW5lclwiIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dWaWV3TWVldGluZ3NTdHVkeUdyb3VwUG9wdXAoZ3JvdXApKX0+XG4gICAgICAgICAgICAgICAgICAgIDxoMT5OZXh0IE1lZXRpbmc8L2gxPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lZXRpbmdpbmZvLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEYXRlOiA8c3Ryb25nPntncm91cCAmJiBnZXROZXh0TWVldGluZyhncm91cCkuZGF0ZX08L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpbWU6IDxzdHJvbmc+e2dyb3VwICYmIGdldE5leHRNZWV0aW5nKGdyb3VwKS50aW1lfTwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRlc2NyaXB0aW9uLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8aDE+R3JvdXAgRGVzY3JpcHRpb248L2gxPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJkZXRhaWxzLWRlc2NyaXB0aW9uXCI+e2dyb3VwLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgICAgICB7Z3JvdXAub3duZXIgJiYgZ3JvdXAub3duZXIuX2lkID09PSB1c2VyLl9pZCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2hvd0VkaXRTdHVkeUdyb3VwUG9wdXAoZ3JvdXApKX0+RURJVDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1hdGlvblBvcHVwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXREZWxldGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29uZmlybSBEZWxldGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIHN0dWR5IGdyb3VwOiBcIiArIGdyb3VwLm5hbWUgKyBcIj9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChjbGVhclN0dWR5R3JvdXBzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVsZXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAge2dyb3VwLm93bmVyICYmIGdyb3VwLm93bmVyLl9pZCAhPT0gdXNlci5faWQgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtYXRpb25Qb3B1cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0TGVhdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29uZmlybSBMZWF2ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZSB0aGUgc3R1ZHkgZ3JvdXA6IFwiICsgZ3JvdXAubmFtZSArIFwiP1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNsZWFyU3R1ZHlHcm91cHMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZWF2ZSBHcm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIHtncm91cC5vd25lciAmJiBncm91cC5vd25lci5faWQgIT09IHVzZXIuX2lkICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzaG93UmVwb3J0UG9wdXAoUmVwb3J0VHlwZXMuU1RVRFlfR1JPVVAsIGdyb3VwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXBvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvU2lkZVZpZXc+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERldGFpbHNWaWV3O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9GZWVkVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRmVlZFZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vRmVlZFZpZXcuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7XG4gICAgc2hvd0NvbmZpcm1hdGlvblBvcHVwLFxuICAgIHNob3dDcmVhdGVNZWV0aW5nU3R1ZHlHcm91cFBvcHVwLFxuICAgIHNob3dDcmVhdGVQb3N0U3R1ZHlHcm91cFBvcHVwXG59IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgUG9zdCBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9GZWVkL1Bvc3RcIjtcbmltcG9ydCBQb3N0VHlwZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvUG9zdFR5cGVzXCI7XG5pbXBvcnQgTWVtYmVyc0ljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvUGVvcGxlXCI7XG5pbXBvcnQgRGV0YWlsc0ljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvSW5mb1wiO1xuXG5jb25zdCBGZWVkVmlldyA9ICh7XG4gICAgZ3JvdXAsXG4gICAgc2V0RGV0YWlsc1ZpZXdJc1Nob3dpbmcsXG4gICAgc2V0TWVtYmVyc1ZpZXdJc1Nob3dpbmcsXG4gICAgbWVtYmVyc1ZpZXdJc1Nob3dpbmcsXG4gICAgZGV0YWlsc1ZpZXdJc1Nob3dpbmdcbn0pID0+IHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgdXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlcik7XG4gICAgY29uc3QgZmVlZFJlZiA9IHVzZVJlZigpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZmVlZFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IGZlZWRSZWYuY3VycmVudC5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnVubmluZ1wiKTtcbiAgICB9LCBbZ3JvdXAucG9zdHNdKTtcblxuICAgIGNvbnN0IGhhbmRsZVNlbGVjdE1lZXRpbmcgPSAocmVjdXJyaW5nTWVldGluZ1NlbGVjdGVkKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHNob3dDcmVhdGVNZWV0aW5nU3R1ZHlHcm91cFBvcHVwKGdyb3VwLCByZWN1cnJpbmdNZWV0aW5nU2VsZWN0ZWQpKTtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZlZWQtY29udGFpbmVyXCIgcmVmPXtmZWVkUmVmfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3RzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICB7Z3JvdXAucG9zdHMgJiYgZ3JvdXAucG9zdHMubGVuZ3RoICE9PSAwID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAucG9zdHMubWFwKChwb3N0KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBvc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudD17cG9zdC5hdHRhY2htZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17cG9zdC50aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT17cG9zdC5tZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdG9yPXtwb3N0LmNyZWF0b3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pZD17cG9zdC5faWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcD17cG9zdC5jcmVhdGVkQXR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9e3Bvc3QudHlwZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9e2dyb3VwLmdyb3VwQ29sb3J9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlcz17cG9zdC5yZXNwb25zZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwPXtncm91cH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibm8tcG9zdHMtbWVzc2FnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5XZWxjb21lITwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+U3RhcnQgdGhlIGNvbnZlcnNhdGlvbiBieSBjcmVhdGluZyB0aGUgZmlyc3QgcG9zdCE8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcHRpb25zLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3Blbi12aWV3LWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lbWJlcnNWaWV3SXNTaG93aW5nKCFtZW1iZXJzVmlld0lzU2hvd2luZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TWVtYmVyc0ljb24gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dDcmVhdGVQb3N0U3R1ZHlHcm91cFBvcHVwKGdyb3VwKSl9PlN0YXJ0IFBvc3Q8L0J1dHRvbj5cblxuICAgICAgICAgICAgICAgIHtncm91cC5vd25lciAmJiB1c2VyLl9pZCA9PT0gZ3JvdXAub3duZXIuX2lkICYmIChcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1hdGlvblBvcHVwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2VsZWN0TWVldGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2hvb3NlIE1lZXRpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiV2hpY2ggbWVldGluZyB3b3VsZCB5b3UgbGlrZSB0byBjcmVhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJSZWN1cnJpbmcgTWVldGluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJPbmUtdGltZSBNZWV0aW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgU2NoZWR1bGUgTWVldGluZ1xuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuLXZpZXctYnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RGV0YWlsc1ZpZXdJc1Nob3dpbmcoIWRldGFpbHNWaWV3SXNTaG93aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEZXRhaWxzSWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8Lz5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRmVlZFZpZXc7XG4iLCJpbXBvcnQgXCIuL1N0dWR5R3JvdXAuc2Nzc1wiO1xyXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcclxuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBUb3BCYXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvVG9wQmFyL1RvcEJhclwiO1xyXG5pbXBvcnQgUGFnZSBmcm9tIFwiLi4vUGFnZVwiO1xyXG5pbXBvcnQgTWVtYmVyc1ZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL1N0dWR5R3JvdXAvTWVtYmVycy9NZW1iZXJzVmlld1wiO1xyXG5pbXBvcnQgRGV0YWlsc1ZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL1N0dWR5R3JvdXAvRGV0YWlsc1ZpZXcvRGV0YWlsc1ZpZXdcIjtcclxuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcclxuaW1wb3J0IHsgc2VuZEdldFJlcXVlc3QsIHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi9IZWxwZXJcIjtcclxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgc2hvd0VkaXRTdHVkeUdyb3VwUG9wdXAgfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgRmVlZFZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL1N0dWR5R3JvdXAvRmVlZC9GZWVkVmlld1wiO1xyXG5pbXBvcnQgTG9hZGluZyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Mb2FkaW5nL0xvYWRpbmdcIjtcclxuaW1wb3J0IE1lbWJlcnNJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL1Blb3BsZVwiO1xyXG5pbXBvcnQgRGV0YWlsc0ljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvRGV0YWlsc1wiO1xyXG5cclxuY29uc3QgU3R1ZHlHcm91cCA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG4gICAgY29uc3QgdXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlcik7XHJcbiAgICBjb25zdCBpc0xvYWRpbmcgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLm5vdGlmaWNhdGlvblJlZHVjZXIubG9hZGluZyk7XHJcblxyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIG1hdGNoOiB7XHJcbiAgICAgICAgICAgIHBhcmFtczogeyBpZCB9XHJcbiAgICAgICAgfVxyXG4gICAgfSA9IHByb3BzO1xyXG5cclxuICAgIGNvbnN0IFtncm91cCwgc2V0R3JvdXBdID0gdXNlU3RhdGUoe30pO1xyXG4gICAgY29uc3QgW25leHRNZWV0aW5nLCBzZXROZXh0TWVldGluZ10gPSB1c2VTdGF0ZShcIkFsbCBDbGVhclwiKTtcclxuXHJcbiAgICBjb25zdCBbbWVtYmVyc1ZpZXdJc1Nob3dpbmcsIHNldE1lbWJlcnNWaWV3SXNTaG93aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtkZXRhaWxzVmlld0lzU2hvd2luZywgc2V0RGV0YWlsc1ZpZXdJc1Nob3dpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICAgIGNvbnN0IGdldE5leHRNZWV0aW5nID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciBuZXh0TWVldGluZyA9IHsgZGF0ZTogXCJBbGwgQ2xlYXJcIiB9O1xyXG5cclxuICAgICAgICBncm91cC5tZWV0aW5ncy5mb3JFYWNoKChtZWV0aW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChuZXcgRGF0ZShtZWV0aW5nLmRhdGUpID4gRGF0ZS5ub3coKSkgbmV4dE1lZXRpbmcgPSBtZWV0aW5nO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV4dE1lZXRpbmc7XHJcbiAgICB9O1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gZ2V0R3JvdXBzKCkge1xyXG4gICAgICAgICAgICBhd2FpdCBnZXRTdHVkeUdyb3VwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdldEdyb3VwcygpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSBzdHVkeSBncm91cCBhc3NvY2lhdGVkIHdpdGggdGhlIGlkIGZyb20gdGhlIHVybFxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAwMi8xMC8yMDIyXHJcbiAgICAgKi9cclxuXHJcbiAgICBjb25zdCBnZXRTdHVkeUdyb3VwID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHNlbmRHZXRSZXF1ZXN0KFxyXG4gICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5HZXRTdHVkeUdyb3VwICsgXCI/c3R1ZHlHcm91cElkPVwiICsgaWQsXHJcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5TdWNjZXNzU3R1ZHlHcm91cFJldHJpZXZlZCxcclxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLkVycm9yR2V0U3R1ZHlHcm91cCxcclxuICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIC8vTG9hZCBzdHVkeSBncm91cCBpbnRvIHN0YXRlXHJcbiAgICAgICAgICAgICAgICBzZXRHcm91cChkYXRhLnN0dWR5R3JvdXApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8UGFnZSB0b3BCYXI9e3RydWV9IGN1cnJlbnRQYWdlPVwic3R1ZHlcIiBzaG93aW5nUGFnZVRpdGxlPXtmYWxzZX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0dWR5LWdyb3VwLXBhZ2VcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2UtdGl0bGUtc3R1ZHktZ3JvdXBcIiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IGdyb3VwLmdyb3VwQ29sb3IgKyBcIjkwXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzdHlsZT17eyBtYXJnaW5MZWZ0OiBcIjBweFwiLCBiYWNrZ3JvdW5kQ29sb3I6IGdyb3VwLmdyb3VwQ29sb3IgfX0+e1wiPFwifTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT57Z3JvdXAubmFtZX08L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW4tdmlld1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7aXNMb2FkaW5nID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRpbmcgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1lbWJlcnNWaWV3XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwPXtncm91cH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWVtYmVyc1ZpZXdJc1Nob3dpbmc9e3NldE1lbWJlcnNWaWV3SXNTaG93aW5nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW1iZXJzVmlld0lzU2hvd2luZz17bWVtYmVyc1ZpZXdJc1Nob3dpbmd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RmVlZFZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA9e2dyb3VwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXREZXRhaWxzVmlld0lzU2hvd2luZz17c2V0RGV0YWlsc1ZpZXdJc1Nob3dpbmd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lbWJlcnNWaWV3SXNTaG93aW5nPXtzZXRNZW1iZXJzVmlld0lzU2hvd2luZ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsc1ZpZXdJc1Nob3dpbmc9e2RldGFpbHNWaWV3SXNTaG93aW5nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW1iZXJzVmlld0lzU2hvd2luZz17bWVtYmVyc1ZpZXdJc1Nob3dpbmd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGV0YWlsc1ZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA9e2dyb3VwfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXREZXRhaWxzVmlld0lzU2hvd2luZz17c2V0RGV0YWlsc1ZpZXdJc1Nob3dpbmd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHNWaWV3SXNTaG93aW5nPXtkZXRhaWxzVmlld0lzU2hvd2luZ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9QYWdlPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN0dWR5R3JvdXA7XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQWNjb3VudC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQWNjb3VudC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9BY2NvdW50LnNjc3NcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IHBlcmZvcm1TaWduT3V0LCBzZW5kRGVsZXRlUmVxdWVzdCwgc2VuZFBvc3RSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uLy4uL0hlbHBlclwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQge1xuICAgIHNob3dJbnB1dFBvcHVwLFxuICAgIHNob3dFcnJvck5vdGlmaWNhdGlvbixcbiAgICBzaG93U3VjY2Vzc05vdGlmaWNhdGlvbixcbiAgICBzaWduT3V0LFxuICAgIGNsb3NlUG9wdXBcbn0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3JcIjtcbmltcG9ydCBUb3BCYXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvVG9wQmFyL1RvcEJhclwiO1xuaW1wb3J0IFBhZ2UgZnJvbSBcIi4uL1BhZ2VcIjtcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlXCI7XG5pbXBvcnQgTG9hZGluZyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Mb2FkaW5nL0xvYWRpbmdcIjtcblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBBY2NvdW50IHBhZ2VcbiAqIEBhdXRob3IgU3RhY2V5IFBvcGVuZm9vc2VcbiAqIEBkYXRlICAgMi8wNS8yMDIyXG4gKi9cbmNvbnN0IEFjY291bnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IHsgdXNlciB9ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlcik7XG4gICAgY29uc3QgaXNMb2FkaW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLmxvYWRpbmcpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzdWJtaXQgdGhlIG5ldyBlbWFpbCByZXF1ZXN0XG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xMS8yMDIyXG4gICAgICogQGFzeW5jXG4gICAgICovXG4gICAgY29uc3Qgc3VibWl0TmV3RW1haWwgPSBhc3luYyAobmV3RW1haWwsIGN1cnJlbnRQYXNzd29yZCkgPT4ge1xuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5DaGFuZ2VFbWFpbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuZXdFbWFpbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFzc3dvcmRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLkFjY291bnQuRW1haWxTZW50LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0ZSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHN1Ym1pdCB0aGUgbmV3IHBhc3N3b3JkIHJlcXVlc3RcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzA3LzIwMjJcbiAgICAgKiBAYXN5bmNcbiAgICAgKi9cbiAgICBjb25zdCBzdWJtaXROZXdQYXNzd29yZCA9IGFzeW5jIChjdXJyZW50UGFzc3dvcmQsIG5ld1Bhc3N3b3JkKSA9PiB7XG4gICAgICAgIGF3YWl0IHNlbmRQb3N0UmVxdWVzdChcbiAgICAgICAgICAgIFJvdXRlcy5BY2NvdW50LkNoYW5nZVBhc3N3b3JkLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXNzd29yZCxcbiAgICAgICAgICAgICAgICBuZXdQYXNzd29yZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzQ2hhbmdpbmdQYXNzd29yZCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGUsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzdWJtaXQgdGhlIGRlbGV0ZSBhY2NvdW50IHJlcXVlc3QgYW5kIHNpZ24gdGhlIHVzZXIgb3V0XG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8wNy8yMDIyXG4gICAgICogQGFzeW5jXG4gICAgICovXG4gICAgY29uc3Qgc3VibWl0RGVsZXRlQWNjb3VudCA9IGFzeW5jIChjdXJyZW50UGFzc3dvcmQpID0+IHtcbiAgICAgICAgYXdhaXQgc2VuZERlbGV0ZVJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5EZWxldGUsXG4gICAgICAgICAgICB7IGN1cnJlbnRQYXNzd29yZCB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlN1Y2Nlc3NBY2NvdW50RGVsZXRlZCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goc2lnbk91dCgpKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgICAgIHBlcmZvcm1TaWduT3V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPFBhZ2UgdG9wQmFyPXt0cnVlfSBjdXJyZW50UGFnZT17XCJcIn0+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoMT5BY2NvdW50PC9oMT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWNjb3VudC1wYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb3NcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlci1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPkZ1bGwgTmFtZTo8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm5hbWVcIj57dXNlci5uYW1lfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+RW1haWw6PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJlbWFpbFwiPnt1c2VyLmVtYWlsfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+QXJlYSBDb2RlOjwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYXJlYUNvZGVcIj57dXNlci5hcmVhQ29kZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlci1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlByb2ZpbGUgUGljdHVyZTo8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZSBpbWFnZT17dXNlci5wcm9maWxlUGljdHVyZX0gbmFtZT17dXNlci5uYW1lfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtYWNjb3VudC1idXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT17QnV0dG9uVHlwZXMuUHJpbWFyeX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dJbnB1dFBvcHVwKFwiQ2hhbmdlIEVtYWlsXCIsIFwiTmV3IEVtYWlsXCIsIFwiXCIsIHN1Ym1pdE5ld0VtYWlsLCBcIkN1cnJlbnQgUGFzc3dvcmRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFuZ2UgRW1haWxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93SW5wdXRQb3B1cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNoYW5nZSBQYXNzd29yZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ3VycmVudCBQYXNzd29yZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0TmV3UGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJOZXcgUGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5nZSBQYXNzd29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPXtCdXR0b25UeXBlcy5EZXN0cnVjaXZlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0lucHV0UG9wdXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb25maXJtIFBhc3N3b3JkIHRvIERlbGV0ZSBBY2NvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb25maXJtIHlvdXIgcGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdERlbGV0ZUFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWxldGUgQWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9QYWdlPlxuICAgICAgICA8Lz5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQWNjb3VudDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVzc2FnZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVzc2FnZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGRlZmF1bHQgKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG4gICAgfVxufSkoKTtcbiIsIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXG5pbXBvcnQgaGFzQ09SUyBmcm9tIFwiaGFzLWNvcnNcIjtcbmltcG9ydCBnbG9iYWxUaGlzIGZyb20gXCIuLi9nbG9iYWxUaGlzLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob3B0cykge1xuICAgIGNvbnN0IHhkb21haW4gPSBvcHRzLnhkb21haW47XG4gICAgLy8gWE1MSHR0cFJlcXVlc3QgY2FuIGJlIGRpc2FibGVkIG9uIElFXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkgeyB9XG4gICAgaWYgKCF4ZG9tYWluKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGdsb2JhbFRoaXNbW1wiQWN0aXZlXCJdLmNvbmNhdChcIk9iamVjdFwiKS5qb2luKFwiWFwiKV0oXCJNaWNyb3NvZnQuWE1MSFRUUFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfVxufVxuIiwiaW1wb3J0IGdsb2JhbFRoaXMgZnJvbSBcIi4vZ2xvYmFsVGhpcy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBpY2sob2JqLCAuLi5hdHRyKSB7XG4gICAgcmV0dXJuIGF0dHIucmVkdWNlKChhY2MsIGspID0+IHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgYWNjW2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xufVxuLy8gS2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgcmVhbCB0aW1lb3V0IGZ1bmN0aW9ucyBzbyB0aGV5IGNhbiBiZSB1c2VkIHdoZW4gb3ZlcnJpZGRlblxuY29uc3QgTkFUSVZFX1NFVF9USU1FT1VUID0gc2V0VGltZW91dDtcbmNvbnN0IE5BVElWRV9DTEVBUl9USU1FT1VUID0gY2xlYXJUaW1lb3V0O1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxUaW1lckZ1bmN0aW9ucyhvYmosIG9wdHMpIHtcbiAgICBpZiAob3B0cy51c2VOYXRpdmVUaW1lcnMpIHtcbiAgICAgICAgb2JqLnNldFRpbWVvdXRGbiA9IE5BVElWRV9TRVRfVElNRU9VVC5iaW5kKGdsb2JhbFRoaXMpO1xuICAgICAgICBvYmouY2xlYXJUaW1lb3V0Rm4gPSBOQVRJVkVfQ0xFQVJfVElNRU9VVC5iaW5kKGdsb2JhbFRoaXMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgb2JqLnNldFRpbWVvdXRGbiA9IHNldFRpbWVvdXQuYmluZChnbG9iYWxUaGlzKTtcbiAgICAgICAgb2JqLmNsZWFyVGltZW91dEZuID0gY2xlYXJUaW1lb3V0LmJpbmQoZ2xvYmFsVGhpcyk7XG4gICAgfVxufVxuIiwiY29uc3QgUEFDS0VUX1RZUEVTID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gbm8gTWFwID0gbm8gcG9seWZpbGxcblBBQ0tFVF9UWVBFU1tcIm9wZW5cIl0gPSBcIjBcIjtcblBBQ0tFVF9UWVBFU1tcImNsb3NlXCJdID0gXCIxXCI7XG5QQUNLRVRfVFlQRVNbXCJwaW5nXCJdID0gXCIyXCI7XG5QQUNLRVRfVFlQRVNbXCJwb25nXCJdID0gXCIzXCI7XG5QQUNLRVRfVFlQRVNbXCJtZXNzYWdlXCJdID0gXCI0XCI7XG5QQUNLRVRfVFlQRVNbXCJ1cGdyYWRlXCJdID0gXCI1XCI7XG5QQUNLRVRfVFlQRVNbXCJub29wXCJdID0gXCI2XCI7XG5jb25zdCBQQUNLRVRfVFlQRVNfUkVWRVJTRSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5PYmplY3Qua2V5cyhQQUNLRVRfVFlQRVMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBQQUNLRVRfVFlQRVNfUkVWRVJTRVtQQUNLRVRfVFlQRVNba2V5XV0gPSBrZXk7XG59KTtcbmNvbnN0IEVSUk9SX1BBQ0tFVCA9IHsgdHlwZTogXCJlcnJvclwiLCBkYXRhOiBcInBhcnNlciBlcnJvclwiIH07XG5leHBvcnQgeyBQQUNLRVRfVFlQRVMsIFBBQ0tFVF9UWVBFU19SRVZFUlNFLCBFUlJPUl9QQUNLRVQgfTtcbiIsImltcG9ydCB7IFBBQ0tFVF9UWVBFUyB9IGZyb20gXCIuL2NvbW1vbnMuanNcIjtcbmNvbnN0IHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoQmxvYikgPT09IFwiW29iamVjdCBCbG9iQ29uc3RydWN0b3JdXCIpO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG4vLyBBcnJheUJ1ZmZlci5pc1ZpZXcgbWV0aG9kIGlzIG5vdCBkZWZpbmVkIGluIElFMTBcbmNvbnN0IGlzVmlldyA9IG9iaiA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopXG4gICAgICAgIDogb2JqICYmIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcjtcbn07XG5jb25zdCBlbmNvZGVQYWNrZXQgPSAoeyB0eXBlLCBkYXRhIH0sIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykgPT4ge1xuICAgIGlmICh3aXRoTmF0aXZlQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgICAgICBpZiAoc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVCbG9iQXNCYXNlNjQoZGF0YSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJlxuICAgICAgICAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhkYXRhKSkpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzQmluYXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlQmxvYkFzQmFzZTY0KG5ldyBCbG9iKFtkYXRhXSksIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBwbGFpbiBzdHJpbmdcbiAgICByZXR1cm4gY2FsbGJhY2soUEFDS0VUX1RZUEVTW3R5cGVdICsgKGRhdGEgfHwgXCJcIikpO1xufTtcbmNvbnN0IGVuY29kZUJsb2JBc0Jhc2U2NCA9IChkYXRhLCBjYWxsYmFjaykgPT4ge1xuICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gZmlsZVJlYWRlci5yZXN1bHQuc3BsaXQoXCIsXCIpWzFdO1xuICAgICAgICBjYWxsYmFjayhcImJcIiArIGNvbnRlbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChkYXRhKTtcbn07XG5leHBvcnQgZGVmYXVsdCBlbmNvZGVQYWNrZXQ7XG4iLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyIDEuMC4xIDxodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyPlxuICogQ29weXJpZ2h0IChjKSAyMDIyIE5pa2xhcyB2b24gSGVydHplbiA8aHR0cHM6Ly9oZXJ0emVuLmNvbT5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBMaWNlbnNlXG4gKi9cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcbi8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbnZhciBsb29rdXAgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyBbXSA6IG5ldyBVaW50OEFycmF5KDI1Nik7XG5mb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbG9va3VwW2NoYXJzLmNoYXJDb2RlQXQoaSldID0gaTtcbn1cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoYXJyYXlidWZmZXIpIHtcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlciksIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gJyc7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAzKSB7XG4gICAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaV0gJiAzKSA8PCA0KSB8IChieXRlc1tpICsgMV0gPj4gNCldO1xuICAgICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG4gICAgaWYgKGxlbiAlIDMgPT09IDIpIHtcbiAgICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyAnPSc7XG4gICAgfVxuICAgIGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyAnPT0nO1xuICAgIH1cbiAgICByZXR1cm4gYmFzZTY0O1xufTtcbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAoYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LCBsZW4gPSBiYXNlNjQubGVuZ3RoLCBpLCBwID0gMCwgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09ICc9Jykge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09ICc9Jykge1xuICAgICAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGFycmF5YnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCksIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICBlbmNvZGVkMSA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKV07XG4gICAgICAgIGVuY29kZWQyID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkgKyAxKV07XG4gICAgICAgIGVuY29kZWQzID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkgKyAyKV07XG4gICAgICAgIGVuY29kZWQ0ID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkgKyAzKV07XG4gICAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7XG4gICAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXlidWZmZXI7XG59O1xuXG5leHBvcnQgeyBkZWNvZGUsIGVuY29kZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0LWFycmF5YnVmZmVyLmVzNS5qcy5tYXBcbiIsImltcG9ydCB7IEVSUk9SX1BBQ0tFVCwgUEFDS0VUX1RZUEVTX1JFVkVSU0UgfSBmcm9tIFwiLi9jb21tb25zLmpzXCI7XG5pbXBvcnQgeyBkZWNvZGUgfSBmcm9tIFwiQHNvY2tldC5pby9iYXNlNjQtYXJyYXlidWZmZXJcIjtcbmNvbnN0IHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3QgZGVjb2RlUGFja2V0ID0gKGVuY29kZWRQYWNrZXQsIGJpbmFyeVR5cGUpID0+IHtcbiAgICBpZiAodHlwZW9mIGVuY29kZWRQYWNrZXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwibWVzc2FnZVwiLFxuICAgICAgICAgICAgZGF0YTogbWFwQmluYXJ5KGVuY29kZWRQYWNrZXQsIGJpbmFyeVR5cGUpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBlbmNvZGVkUGFja2V0LmNoYXJBdCgwKTtcbiAgICBpZiAodHlwZSA9PT0gXCJiXCIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwibWVzc2FnZVwiLFxuICAgICAgICAgICAgZGF0YTogZGVjb2RlQmFzZTY0UGFja2V0KGVuY29kZWRQYWNrZXQuc3Vic3RyaW5nKDEpLCBiaW5hcnlUeXBlKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBwYWNrZXRUeXBlID0gUEFDS0VUX1RZUEVTX1JFVkVSU0VbdHlwZV07XG4gICAgaWYgKCFwYWNrZXRUeXBlKSB7XG4gICAgICAgIHJldHVybiBFUlJPUl9QQUNLRVQ7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkUGFja2V0Lmxlbmd0aCA+IDFcbiAgICAgICAgPyB7XG4gICAgICAgICAgICB0eXBlOiBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXSxcbiAgICAgICAgICAgIGRhdGE6IGVuY29kZWRQYWNrZXQuc3Vic3RyaW5nKDEpXG4gICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICB0eXBlOiBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXVxuICAgICAgICB9O1xufTtcbmNvbnN0IGRlY29kZUJhc2U2NFBhY2tldCA9IChkYXRhLCBiaW5hcnlUeXBlKSA9PiB7XG4gICAgaWYgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlcikge1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gZGVjb2RlKGRhdGEpO1xuICAgICAgICByZXR1cm4gbWFwQmluYXJ5KGRlY29kZWQsIGJpbmFyeVR5cGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgYmFzZTY0OiB0cnVlLCBkYXRhIH07IC8vIGZhbGxiYWNrIGZvciBvbGQgYnJvd3NlcnNcbiAgICB9XG59O1xuY29uc3QgbWFwQmluYXJ5ID0gKGRhdGEsIGJpbmFyeVR5cGUpID0+IHtcbiAgICBzd2l0Y2ggKGJpbmFyeVR5cGUpIHtcbiAgICAgICAgY2FzZSBcImJsb2JcIjpcbiAgICAgICAgICAgIHJldHVybiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBuZXcgQmxvYihbZGF0YV0pIDogZGF0YTtcbiAgICAgICAgY2FzZSBcImFycmF5YnVmZmVyXCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZGF0YTsgLy8gYXNzdW1pbmcgdGhlIGRhdGEgaXMgYWxyZWFkeSBhbiBBcnJheUJ1ZmZlclxuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBkZWNvZGVQYWNrZXQ7XG4iLCJpbXBvcnQgZW5jb2RlUGFja2V0IGZyb20gXCIuL2VuY29kZVBhY2tldC5qc1wiO1xuaW1wb3J0IGRlY29kZVBhY2tldCBmcm9tIFwiLi9kZWNvZGVQYWNrZXQuanNcIjtcbmNvbnN0IFNFUEFSQVRPUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMzApOyAvLyBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVsaW1pdGVyI0FTQ0lJX2RlbGltaXRlZF90ZXh0XG5jb25zdCBlbmNvZGVQYXlsb2FkID0gKHBhY2tldHMsIGNhbGxiYWNrKSA9PiB7XG4gICAgLy8gc29tZSBwYWNrZXRzIG1heSBiZSBhZGRlZCB0byB0aGUgYXJyYXkgd2hpbGUgZW5jb2RpbmcsIHNvIHRoZSBpbml0aWFsIGxlbmd0aCBtdXN0IGJlIHNhdmVkXG4gICAgY29uc3QgbGVuZ3RoID0gcGFja2V0cy5sZW5ndGg7XG4gICAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIHBhY2tldHMuZm9yRWFjaCgocGFja2V0LCBpKSA9PiB7XG4gICAgICAgIC8vIGZvcmNlIGJhc2U2NCBlbmNvZGluZyBmb3IgYmluYXJ5IHBhY2tldHNcbiAgICAgICAgZW5jb2RlUGFja2V0KHBhY2tldCwgZmFsc2UsIGVuY29kZWRQYWNrZXQgPT4ge1xuICAgICAgICAgICAgZW5jb2RlZFBhY2tldHNbaV0gPSBlbmNvZGVkUGFja2V0O1xuICAgICAgICAgICAgaWYgKCsrY291bnQgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVuY29kZWRQYWNrZXRzLmpvaW4oU0VQQVJBVE9SKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmNvbnN0IGRlY29kZVBheWxvYWQgPSAoZW5jb2RlZFBheWxvYWQsIGJpbmFyeVR5cGUpID0+IHtcbiAgICBjb25zdCBlbmNvZGVkUGFja2V0cyA9IGVuY29kZWRQYXlsb2FkLnNwbGl0KFNFUEFSQVRPUik7XG4gICAgY29uc3QgcGFja2V0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGVjb2RlZFBhY2tldCA9IGRlY29kZVBhY2tldChlbmNvZGVkUGFja2V0c1tpXSwgYmluYXJ5VHlwZSk7XG4gICAgICAgIHBhY2tldHMucHVzaChkZWNvZGVkUGFja2V0KTtcbiAgICAgICAgaWYgKGRlY29kZWRQYWNrZXQudHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFja2V0cztcbn07XG5leHBvcnQgY29uc3QgcHJvdG9jb2wgPSA0O1xuZXhwb3J0IHsgZW5jb2RlUGFja2V0LCBlbmNvZGVQYXlsb2FkLCBkZWNvZGVQYWNrZXQsIGRlY29kZVBheWxvYWQgfTtcbiIsImltcG9ydCB7IGRlY29kZVBhY2tldCB9IGZyb20gXCJlbmdpbmUuaW8tcGFyc2VyXCI7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSBcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIjtcbmltcG9ydCB7IGluc3RhbGxUaW1lckZ1bmN0aW9ucyB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmV4cG9ydCBjbGFzcyBUcmFuc3BvcnQgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBUcmFuc3BvcnQgYWJzdHJhY3QgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgICAgaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJcIjtcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAgICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAgICAgKiBAYXBpIHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uRXJyb3IobXNnLCBkZXNjKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGVyci50eXBlID0gXCJUcmFuc3BvcnRFcnJvclwiO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGVyci5kZXNjcmlwdGlvbiA9IGRlc2M7XG4gICAgICAgIHN1cGVyLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHRyYW5zcG9ydC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgb3BlbigpIHtcbiAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIlwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiO1xuICAgICAgICAgICAgdGhpcy5kb09wZW4oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gICAgICpcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgc2VuZChwYWNrZXRzKSB7XG4gICAgICAgIGlmIChcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpcyBtaWdodCBoYXBwZW4gaWYgdGhlIHRyYW5zcG9ydCB3YXMgc2lsZW50bHkgY2xvc2VkIGluIHRoZSBiZWZvcmV1bmxvYWQgZXZlbnQgaGFuZGxlclxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIG9wZW5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5cIjtcbiAgICAgICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIHN1cGVyLmVtaXQoXCJvcGVuXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBkYXRhLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiAgICAgKiBAYXBpIHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uRGF0YShkYXRhKSB7XG4gICAgICAgIGNvbnN0IHBhY2tldCA9IGRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgICAgICAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICAgICAqXG4gICAgICogQGFwaSBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvblBhY2tldChwYWNrZXQpIHtcbiAgICAgICAgc3VwZXIuZW1pdChcInBhY2tldFwiLCBwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25DbG9zZSgpIHtcbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgc3VwZXIuZW1pdChcImNsb3NlXCIpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFRyYW5zcG9ydCB9IGZyb20gXCIuLi90cmFuc3BvcnQuanNcIjtcbmltcG9ydCB5ZWFzdCBmcm9tIFwieWVhc3RcIjtcbmltcG9ydCBwYXJzZXFzIGZyb20gXCJwYXJzZXFzXCI7XG5pbXBvcnQgeyBlbmNvZGVQYXlsb2FkLCBkZWNvZGVQYXlsb2FkIH0gZnJvbSBcImVuZ2luZS5pby1wYXJzZXJcIjtcbmV4cG9ydCBjbGFzcyBQb2xsaW5nIGV4dGVuZHMgVHJhbnNwb3J0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5wb2xsaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9ydCBuYW1lLlxuICAgICAqL1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJwb2xsaW5nXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBzb2NrZXQgKHRyaWdnZXJzIHBvbGxpbmcpLiBXZSB3cml0ZSBhIFBJTkcgbWVzc2FnZSB0byBkZXRlcm1pbmVcbiAgICAgKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGRvT3BlbigpIHtcbiAgICAgICAgdGhpcy5wb2xsKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhdXNlcyBwb2xsaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdXBvbiBidWZmZXJzIGFyZSBmbHVzaGVkIGFuZCB0cmFuc3BvcnQgaXMgcGF1c2VkXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgcGF1c2Uob25QYXVzZSkge1xuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcInBhdXNpbmdcIjtcbiAgICAgICAgY29uc3QgcGF1c2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcInBhdXNlZFwiO1xuICAgICAgICAgICAgb25QYXVzZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5wb2xsaW5nIHx8ICF0aGlzLndyaXRhYmxlKSB7XG4gICAgICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgICAgICAgICAgIHRvdGFsKys7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwicG9sbENvbXBsZXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLndyaXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdG90YWwrKztcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJkcmFpblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gICAgICpcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIHBvbGwoKSB7XG4gICAgICAgIHRoaXMucG9sbGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZG9Qb2xsKCk7XG4gICAgICAgIHRoaXMuZW1pdChcInBvbGxcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJsb2FkcyBvbkRhdGEgdG8gZGV0ZWN0IHBheWxvYWRzLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25EYXRhKGRhdGEpIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBwYWNrZXQgPT4ge1xuICAgICAgICAgICAgLy8gaWYgaXRzIHRoZSBmaXJzdCBtZXNzYWdlIHdlIGNvbnNpZGVyIHRoZSB0cmFuc3BvcnQgb3BlblxuICAgICAgICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgcGFja2V0LnR5cGUgPT09IFwib3BlblwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbk9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGl0cyBhIGNsb3NlIHBhY2tldCwgd2UgY2xvc2UgdGhlIG9uZ29pbmcgcmVxdWVzdHNcbiAgICAgICAgICAgIGlmIChcImNsb3NlXCIgPT09IHBhY2tldC50eXBlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGJ5cGFzcyBvbkRhdGEgYW5kIGhhbmRsZSB0aGUgbWVzc2FnZVxuICAgICAgICAgICAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBkZWNvZGUgcGF5bG9hZFxuICAgICAgICBkZWNvZGVQYXlsb2FkKGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpLmZvckVhY2goY2FsbGJhY2spO1xuICAgICAgICAvLyBpZiBhbiBldmVudCBkaWQgbm90IHRyaWdnZXIgY2xvc2luZ1xuICAgICAgICBpZiAoXCJjbG9zZWRcIiAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBnb3QgZGF0YSB3ZSdyZSBub3QgcG9sbGluZ1xuICAgICAgICAgICAgdGhpcy5wb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJwb2xsQ29tcGxldGVcIik7XG4gICAgICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucG9sbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBkb0Nsb3NlKCkge1xuICAgICAgICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud3JpdGUoW3sgdHlwZTogXCJjbG9zZVwiIH1dKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpbiBjYXNlIHdlJ3JlIHRyeWluZyB0byBjbG9zZSB3aGlsZVxuICAgICAgICAgICAgLy8gaGFuZHNoYWtpbmcgaXMgaW4gcHJvZ3Jlc3MgKEdILTE2NClcbiAgICAgICAgICAgIHRoaXMub25jZShcIm9wZW5cIiwgY2xvc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBhIHBhY2tldHMgcGF5bG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRyYWluIGNhbGxiYWNrXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgd3JpdGUocGFja2V0cykge1xuICAgICAgICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICAgIGVuY29kZVBheWxvYWQocGFja2V0cywgZGF0YSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRvV3JpdGUoZGF0YSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRyYWluXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgdXJpKCkge1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm9wdHMuc2VjdXJlID8gXCJodHRwc1wiIDogXCJodHRwXCI7XG4gICAgICAgIGxldCBwb3J0ID0gXCJcIjtcbiAgICAgICAgLy8gY2FjaGUgYnVzdGluZyBpcyBmb3JjZWRcbiAgICAgICAgaWYgKGZhbHNlICE9PSB0aGlzLm9wdHMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICAgICAgICAgIHF1ZXJ5W3RoaXMub3B0cy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7XG4gICAgICAgICAgICBxdWVyeS5iNjQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gICAgICAgIGlmICh0aGlzLm9wdHMucG9ydCAmJlxuICAgICAgICAgICAgKChcImh0dHBzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICAgICAgICAgICAgKFwiaHR0cFwiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gODApKSkge1xuICAgICAgICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5vcHRzLnBvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW5jb2RlZFF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuICAgICAgICBjb25zdCBpcHY2ID0gdGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICAgICAgcmV0dXJuIChzY2hlbWEgK1xuICAgICAgICAgICAgXCI6Ly9cIiArXG4gICAgICAgICAgICAoaXB2NiA/IFwiW1wiICsgdGhpcy5vcHRzLmhvc3RuYW1lICsgXCJdXCIgOiB0aGlzLm9wdHMuaG9zdG5hbWUpICtcbiAgICAgICAgICAgIHBvcnQgK1xuICAgICAgICAgICAgdGhpcy5vcHRzLnBhdGggK1xuICAgICAgICAgICAgKGVuY29kZWRRdWVyeS5sZW5ndGggPyBcIj9cIiArIGVuY29kZWRRdWVyeSA6IFwiXCIpKTtcbiAgICB9XG59XG4iLCIvKiBnbG9iYWwgYXR0YWNoRXZlbnQgKi9cbmltcG9ydCBYTUxIdHRwUmVxdWVzdCBmcm9tIFwiLi94bWxodHRwcmVxdWVzdC5qc1wiO1xuaW1wb3J0IGdsb2JhbFRoaXMgZnJvbSBcIi4uL2dsb2JhbFRoaXMuanNcIjtcbmltcG9ydCB7IGluc3RhbGxUaW1lckZ1bmN0aW9ucywgcGljayB9IGZyb20gXCIuLi91dGlsLmpzXCI7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSBcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIjtcbmltcG9ydCB7IFBvbGxpbmcgfSBmcm9tIFwiLi9wb2xsaW5nLmpzXCI7XG4vKipcbiAqIEVtcHR5IGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGVtcHR5KCkgeyB9XG5jb25zdCBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qoe1xuICAgICAgICB4ZG9tYWluOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiBudWxsICE9IHhoci5yZXNwb25zZVR5cGU7XG59KSgpO1xuZXhwb3J0IGNsYXNzIFhIUiBleHRlbmRzIFBvbGxpbmcge1xuICAgIC8qKlxuICAgICAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIob3B0cyk7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzU1NMID0gXCJodHRwczpcIiA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgICAgICBsZXQgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG4gICAgICAgICAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgICAgICAgICBpZiAoIXBvcnQpIHtcbiAgICAgICAgICAgICAgICBwb3J0ID0gaXNTU0wgPyBcIjQ0M1wiIDogXCI4MFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy54ZCA9XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgICAgICAgICBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgICAgICAgICAgdGhpcy54cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogWEhSIHN1cHBvcnRzIGJpbmFyeVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZm9yY2VCYXNlNjQgPSBvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQ7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBoYXNYSFIyICYmICFmb3JjZUJhc2U2NDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgcmVxdWVzdChvcHRzID0ge30pIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRzLCB7IHhkOiB0aGlzLnhkLCB4czogdGhpcy54cyB9LCB0aGlzLm9wdHMpO1xuICAgICAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcy51cmkoKSwgb3B0cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGRvV3JpdGUoZGF0YSwgZm4pIHtcbiAgICAgICAgY29uc3QgcmVxID0gdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgICByZXEub24oXCJzdWNjZXNzXCIsIGZuKTtcbiAgICAgICAgcmVxLm9uKFwiZXJyb3JcIiwgZXJyID0+IHtcbiAgICAgICAgICAgIHRoaXMub25FcnJvcihcInhociBwb3N0IGVycm9yXCIsIGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZG9Qb2xsKCkge1xuICAgICAgICBjb25zdCByZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgICAgICAgcmVxLm9uKFwiZGF0YVwiLCB0aGlzLm9uRGF0YS5iaW5kKHRoaXMpKTtcbiAgICAgICAgcmVxLm9uKFwiZXJyb3JcIiwgZXJyID0+IHtcbiAgICAgICAgICAgIHRoaXMub25FcnJvcihcInhociBwb2xsIGVycm9yXCIsIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBvbGxYaHIgPSByZXE7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJlcXVlc3QgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IGNvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodXJpLCBvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGluc3RhbGxUaW1lckZ1bmN0aW9ucyh0aGlzLCBvcHRzKTtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZCB8fCBcIkdFVFwiO1xuICAgICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICAgICAgICB0aGlzLmRhdGEgPSB1bmRlZmluZWQgIT09IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7XG4gICAgICAgIHRoaXMuY3JlYXRlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIFhIUiBvYmplY3QgYW5kIHNlbmRzIHRoZSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgY3JlYXRlKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gcGljayh0aGlzLm9wdHMsIFwiYWdlbnRcIiwgXCJwZnhcIiwgXCJrZXlcIiwgXCJwYXNzcGhyYXNlXCIsIFwiY2VydFwiLCBcImNhXCIsIFwiY2lwaGVyc1wiLCBcInJlamVjdFVuYXV0aG9yaXplZFwiLCBcImF1dG9VbnJlZlwiKTtcbiAgICAgICAgb3B0cy54ZG9tYWluID0gISF0aGlzLm9wdHMueGQ7XG4gICAgICAgIG9wdHMueHNjaGVtZSA9ICEhdGhpcy5vcHRzLnhzO1xuICAgICAgICBjb25zdCB4aHIgPSAodGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cykpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayAmJiB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMub3B0cy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5vcHRzLmV4dHJhSGVhZGVyc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgICAgICBpZiAoXCJQT1NUXCIgPT09IHRoaXMubWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgICAgICAvLyBpZTYgY2hlY2tcbiAgICAgICAgICAgIGlmIChcIndpdGhDcmVkZW50aWFsc1wiIGluIHhocikge1xuICAgICAgICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLm9wdHMud2l0aENyZWRlbnRpYWxzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5yZXF1ZXN0VGltZW91dCkge1xuICAgICAgICAgICAgICAgIHhoci50aW1lb3V0ID0gdGhpcy5vcHRzLnJlcXVlc3RUaW1lb3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoNCAhPT0geGhyLnJlYWR5U3RhdGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoMjAwID09PSB4aHIuc3RhdHVzIHx8IDEyMjMgPT09IHhoci5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYGVycm9yYCBldmVudCBoYW5kbGVyIHRoYXQncyB1c2VyLXNldFxuICAgICAgICAgICAgICAgICAgICAvLyBkb2VzIG5vdCB0aHJvdyBpbiB0aGUgc2FtZSB0aWNrIGFuZCBnZXRzIGNhdWdodCBoZXJlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcih0eXBlb2YgeGhyLnN0YXR1cyA9PT0gXCJudW1iZXJcIiA/IHhoci5zdGF0dXMgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhoci5zZW5kKHRoaXMuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmcm9tIHRoZSBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgLy8gYW5kIHRodXMgdGhlICdlcnJvcicgZXZlbnQgY2FuIG9ubHkgYmUgb25seSBib3VuZCAqYWZ0ZXIqIHRoaXMgZXhjZXB0aW9uXG4gICAgICAgICAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICAgICAgICAgIHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IoZSk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gUmVxdWVzdC5yZXF1ZXN0c0NvdW50Kys7XG4gICAgICAgICAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25TdWNjZXNzKCkge1xuICAgICAgICB0aGlzLmVtaXQoXCJzdWNjZXNzXCIpO1xuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGlmIHdlIGhhdmUgZGF0YS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uRGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuZW1pdChcImRhdGFcIiwgZGF0YSk7XG4gICAgICAgIHRoaXMub25TdWNjZXNzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVycm9yLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25FcnJvcihlcnIpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgdGhpcy5jbGVhbnVwKHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgaG91c2UuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBjbGVhbnVwKGZyb21FcnJvcikge1xuICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHRoaXMueGhyIHx8IG51bGwgPT09IHRoaXMueGhyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gICAgICAgIGlmIChmcm9tRXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhociA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGxvYWQuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvbkxvYWQoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBYm9ydHMgdGhlIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIGFib3J0KCkge1xuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICB9XG59XG5SZXF1ZXN0LnJlcXVlc3RzQ291bnQgPSAwO1xuUmVxdWVzdC5yZXF1ZXN0cyA9IHt9O1xuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmICh0eXBlb2YgYXR0YWNoRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGF0dGFjaEV2ZW50KFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlcik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY29uc3QgdGVybWluYXRpb25FdmVudCA9IFwib25wYWdlaGlkZVwiIGluIGdsb2JhbFRoaXMgPyBcInBhZ2VoaWRlXCIgOiBcInVubG9hZFwiO1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKHRlcm1pbmF0aW9uRXZlbnQsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB1bmxvYWRIYW5kbGVyKCkge1xuICAgIGZvciAobGV0IGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgICAgICBpZiAoUmVxdWVzdC5yZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgUmVxdWVzdC5yZXF1ZXN0c1tpXS5hYm9ydCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IGdsb2JhbFRoaXMgZnJvbSBcIi4uL2dsb2JhbFRoaXMuanNcIjtcbmV4cG9ydCBjb25zdCBuZXh0VGljayA9ICgoKSA9PiB7XG4gICAgY29uc3QgaXNQcm9taXNlQXZhaWxhYmxlID0gdHlwZW9mIFByb21pc2UgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgUHJvbWlzZS5yZXNvbHZlID09PSBcImZ1bmN0aW9uXCI7XG4gICAgaWYgKGlzUHJvbWlzZUF2YWlsYWJsZSkge1xuICAgICAgICByZXR1cm4gY2IgPT4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihjYik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gKGNiLCBzZXRUaW1lb3V0Rm4pID0+IHNldFRpbWVvdXRGbihjYiwgMCk7XG4gICAgfVxufSkoKTtcbmV4cG9ydCBjb25zdCBXZWJTb2NrZXQgPSBnbG9iYWxUaGlzLldlYlNvY2tldCB8fCBnbG9iYWxUaGlzLk1veldlYlNvY2tldDtcbmV4cG9ydCBjb25zdCB1c2luZ0Jyb3dzZXJXZWJTb2NrZXQgPSB0cnVlO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRCaW5hcnlUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuIiwiaW1wb3J0IHsgVHJhbnNwb3J0IH0gZnJvbSBcIi4uL3RyYW5zcG9ydC5qc1wiO1xuaW1wb3J0IHBhcnNlcXMgZnJvbSBcInBhcnNlcXNcIjtcbmltcG9ydCB5ZWFzdCBmcm9tIFwieWVhc3RcIjtcbmltcG9ydCB7IHBpY2sgfSBmcm9tIFwiLi4vdXRpbC5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdEJpbmFyeVR5cGUsIG5leHRUaWNrLCB1c2luZ0Jyb3dzZXJXZWJTb2NrZXQsIFdlYlNvY2tldCB9IGZyb20gXCIuL3dlYnNvY2tldC1jb25zdHJ1Y3Rvci5qc1wiO1xuaW1wb3J0IHsgZW5jb2RlUGFja2V0IH0gZnJvbSBcImVuZ2luZS5pby1wYXJzZXJcIjtcbi8vIGRldGVjdCBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudFxuY29uc3QgaXNSZWFjdE5hdGl2ZSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwic3RyaW5nXCIgJiZcbiAgICBuYXZpZ2F0b3IucHJvZHVjdC50b0xvd2VyQ2FzZSgpID09PSBcInJlYWN0bmF0aXZlXCI7XG5leHBvcnQgY2xhc3MgV1MgZXh0ZW5kcyBUcmFuc3BvcnQge1xuICAgIC8qKlxuICAgICAqIFdlYlNvY2tldCB0cmFuc3BvcnQgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcihvcHRzKTtcbiAgICAgICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9ICFvcHRzLmZvcmNlQmFzZTY0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc3BvcnQgbmFtZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIndlYnNvY2tldFwiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPcGVucyBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBkb09wZW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgICAgICAgICAvLyBsZXQgcHJvYmUgdGltZW91dFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVyaSA9IHRoaXMudXJpKCk7XG4gICAgICAgIGNvbnN0IHByb3RvY29scyA9IHRoaXMub3B0cy5wcm90b2NvbHM7XG4gICAgICAgIC8vIFJlYWN0IE5hdGl2ZSBvbmx5IHN1cHBvcnRzIHRoZSAnaGVhZGVycycgb3B0aW9uLCBhbmQgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgYW55dGhpbmcgZWxzZSBpcyBwYXNzZWRcbiAgICAgICAgY29uc3Qgb3B0cyA9IGlzUmVhY3ROYXRpdmVcbiAgICAgICAgICAgID8ge31cbiAgICAgICAgICAgIDogcGljayh0aGlzLm9wdHMsIFwiYWdlbnRcIiwgXCJwZXJNZXNzYWdlRGVmbGF0ZVwiLCBcInBmeFwiLCBcImtleVwiLCBcInBhc3NwaHJhc2VcIiwgXCJjZXJ0XCIsIFwiY2FcIiwgXCJjaXBoZXJzXCIsIFwicmVqZWN0VW5hdXRob3JpemVkXCIsIFwibG9jYWxBZGRyZXNzXCIsIFwicHJvdG9jb2xWZXJzaW9uXCIsIFwib3JpZ2luXCIsIFwibWF4UGF5bG9hZFwiLCBcImZhbWlseVwiLCBcImNoZWNrU2VydmVySWRlbnRpdHlcIik7XG4gICAgICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgICAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndzID1cbiAgICAgICAgICAgICAgICB1c2luZ0Jyb3dzZXJXZWJTb2NrZXQgJiYgIWlzUmVhY3ROYXRpdmVcbiAgICAgICAgICAgICAgICAgICAgPyBwcm90b2NvbHNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IFdlYlNvY2tldCh1cmkpXG4gICAgICAgICAgICAgICAgICAgIDogbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cy5iaW5hcnlUeXBlID0gdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSB8fCBkZWZhdWx0QmluYXJ5VHlwZTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc29ja2V0XG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy53cy5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICAgICAgICAgIHRoaXMud3MuX3NvY2tldC51bnJlZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vbk9wZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy53cy5vbmNsb3NlID0gdGhpcy5vbkNsb3NlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMud3Mub25tZXNzYWdlID0gZXYgPT4gdGhpcy5vbkRhdGEoZXYuZGF0YSk7XG4gICAgICAgIHRoaXMud3Mub25lcnJvciA9IGUgPT4gdGhpcy5vbkVycm9yKFwid2Vic29ja2V0IGVycm9yXCIsIGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBvZiBwYWNrZXRzLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHdyaXRlKHBhY2tldHMpIHtcbiAgICAgICAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgICAvLyBlbmNvZGVQYWNrZXQgZWZmaWNpZW50IGFzIGl0IHVzZXMgV1MgZnJhbWluZ1xuICAgICAgICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGFja2V0ID0gcGFja2V0c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RQYWNrZXQgPSBpID09PSBwYWNrZXRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBlbmNvZGVQYWNrZXQocGFja2V0LCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdHMgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAoIXVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW4gPSBcInN0cmluZ1wiID09PSB0eXBlb2YgZGF0YSA/IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpIDogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuIDwgdGhpcy5vcHRzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0XG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGNoYW5jZSBvZiBpbmZvcm1pbmcgdXMgYWJvdXQgaXQgeWV0LCBpbiB0aGF0IGNhc2Ugc2VuZCB3aWxsXG4gICAgICAgICAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUeXBlRXJyb3IgaXMgdGhyb3duIHdoZW4gcGFzc2luZyB0aGUgc2Vjb25kIGFyZ3VtZW50IG9uIFNhZmFyaVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cy5zZW5kKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cy5zZW5kKGRhdGEsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsYXN0UGFja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZha2UgZHJhaW5cbiAgICAgICAgICAgICAgICAgICAgLy8gZGVmZXIgdG8gbmV4dCB0aWNrIHRvIGFsbG93IFNvY2tldCB0byBjbGVhciB3cml0ZUJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRyYWluXCIpO1xuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnNldFRpbWVvdXRGbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGRvQ2xvc2UoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy53cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhpcy53cy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy53cyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHVyaSgpIHtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5vcHRzLnNlY3VyZSA/IFwid3NzXCIgOiBcIndzXCI7XG4gICAgICAgIGxldCBwb3J0ID0gXCJcIjtcbiAgICAgICAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgICAgICAgaWYgKHRoaXMub3B0cy5wb3J0ICYmXG4gICAgICAgICAgICAoKFwid3NzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICAgICAgICAgICAgKFwid3NcIiA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLm9wdHMucG9ydCkgIT09IDgwKSkpIHtcbiAgICAgICAgICAgIHBvcnQgPSBcIjpcIiArIHRoaXMub3B0cy5wb3J0O1xuICAgICAgICB9XG4gICAgICAgIC8vIGFwcGVuZCB0aW1lc3RhbXAgdG8gVVJJXG4gICAgICAgIGlmICh0aGlzLm9wdHMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICAgICAgICAgIHF1ZXJ5W3RoaXMub3B0cy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbW11bmljYXRlIGJpbmFyeSBzdXBwb3J0IGNhcGFiaWxpdGllc1xuICAgICAgICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgICAgICAgIHF1ZXJ5LmI2NCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW5jb2RlZFF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuICAgICAgICBjb25zdCBpcHY2ID0gdGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICAgICAgcmV0dXJuIChzY2hlbWEgK1xuICAgICAgICAgICAgXCI6Ly9cIiArXG4gICAgICAgICAgICAoaXB2NiA/IFwiW1wiICsgdGhpcy5vcHRzLmhvc3RuYW1lICsgXCJdXCIgOiB0aGlzLm9wdHMuaG9zdG5hbWUpICtcbiAgICAgICAgICAgIHBvcnQgK1xuICAgICAgICAgICAgdGhpcy5vcHRzLnBhdGggK1xuICAgICAgICAgICAgKGVuY29kZWRRdWVyeS5sZW5ndGggPyBcIj9cIiArIGVuY29kZWRRdWVyeSA6IFwiXCIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHdoZXRoZXIgdGhpcyB0cmFuc3BvcnQgaXMgYXZhaWxhYmxlLlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY2hlY2soKSB7XG4gICAgICAgIHJldHVybiAoISFXZWJTb2NrZXQgJiZcbiAgICAgICAgICAgICEoXCJfX2luaXRpYWxpemVcIiBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFhIUiB9IGZyb20gXCIuL3BvbGxpbmcteGhyLmpzXCI7XG5pbXBvcnQgeyBXUyB9IGZyb20gXCIuL3dlYnNvY2tldC5qc1wiO1xuZXhwb3J0IGNvbnN0IHRyYW5zcG9ydHMgPSB7XG4gICAgd2Vic29ja2V0OiBXUyxcbiAgICBwb2xsaW5nOiBYSFJcbn07XG4iLCJpbXBvcnQgeyB0cmFuc3BvcnRzIH0gZnJvbSBcIi4vdHJhbnNwb3J0cy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaW5zdGFsbFRpbWVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuaW1wb3J0IHBhcnNlcXMgZnJvbSBcInBhcnNlcXNcIjtcbmltcG9ydCBwYXJzZXVyaSBmcm9tIFwicGFyc2V1cmlcIjtcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tIFwiQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlclwiO1xuaW1wb3J0IHsgcHJvdG9jb2wgfSBmcm9tIFwiZW5naW5lLmlvLXBhcnNlclwiO1xuZXhwb3J0IGNsYXNzIFNvY2tldCBleHRlbmRzIEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdXJpIG9yIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHVyaSwgb3B0cyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICh1cmkgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVyaSkge1xuICAgICAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgICAgIHVyaSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVyaSkge1xuICAgICAgICAgICAgdXJpID0gcGFyc2V1cmkodXJpKTtcbiAgICAgICAgICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICAgICAgICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSBcImh0dHBzXCIgfHwgdXJpLnByb3RvY29sID09PSBcIndzc1wiO1xuICAgICAgICAgICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgICAgICAgICBpZiAodXJpLnF1ZXJ5KVxuICAgICAgICAgICAgICAgIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgICAgICAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbGxUaW1lckZ1bmN0aW9ucyh0aGlzLCBvcHRzKTtcbiAgICAgICAgdGhpcy5zZWN1cmUgPVxuICAgICAgICAgICAgbnVsbCAhPSBvcHRzLnNlY3VyZVxuICAgICAgICAgICAgICAgID8gb3B0cy5zZWN1cmVcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcImh0dHBzOlwiID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICAgICAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgICAgICAgICAgLy8gaWYgbm8gcG9ydCBpcyBzcGVjaWZpZWQgbWFudWFsbHksIHVzZSB0aGUgcHJvdG9jb2wgZGVmYXVsdFxuICAgICAgICAgICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyBcIjQ0M1wiIDogXCI4MFwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgPVxuICAgICAgICAgICAgb3B0cy5ob3N0bmFtZSB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgPyBsb2NhdGlvbi5ob3N0bmFtZSA6IFwibG9jYWxob3N0XCIpO1xuICAgICAgICB0aGlzLnBvcnQgPVxuICAgICAgICAgICAgb3B0cy5wb3J0IHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBsb2NhdGlvbi5wb3J0XG4gICAgICAgICAgICAgICAgICAgID8gbG9jYXRpb24ucG9ydFxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuc2VjdXJlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFwiNDQzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCI4MFwiKTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFtcInBvbGxpbmdcIiwgXCJ3ZWJzb2NrZXRcIl07XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiXCI7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgICAgICAgdGhpcy5vcHRzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBwYXRoOiBcIi9lbmdpbmUuaW9cIixcbiAgICAgICAgICAgIGFnZW50OiBmYWxzZSxcbiAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogZmFsc2UsXG4gICAgICAgICAgICB1cGdyYWRlOiB0cnVlLFxuICAgICAgICAgICAgdGltZXN0YW1wUGFyYW06IFwidFwiLFxuICAgICAgICAgICAgcmVtZW1iZXJVcGdyYWRlOiBmYWxzZSxcbiAgICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogdHJ1ZSxcbiAgICAgICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlOiB7XG4gICAgICAgICAgICAgICAgdGhyZXNob2xkOiAxMDI0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhbnNwb3J0T3B0aW9uczoge30sXG4gICAgICAgICAgICBjbG9zZU9uQmVmb3JldW5sb2FkOiB0cnVlXG4gICAgICAgIH0sIG9wdHMpO1xuICAgICAgICB0aGlzLm9wdHMucGF0aCA9IHRoaXMub3B0cy5wYXRoLnJlcGxhY2UoL1xcLyQvLCBcIlwiKSArIFwiL1wiO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0cy5xdWVyeSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5vcHRzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5vcHRzLnF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gICAgICAgIHRoaXMuaWQgPSBudWxsO1xuICAgICAgICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgLy8gc2V0IG9uIGhlYXJ0YmVhdFxuICAgICAgICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuICAgICAgICBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5jbG9zZU9uQmVmb3JldW5sb2FkKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCBjbG9zZXMgdGhlIGNvbm5lY3Rpb24gd2hlbiB0aGUgXCJiZWZvcmV1bmxvYWRcIiBldmVudCBpcyBlbWl0dGVkIGJ1dCBub3QgQ2hyb21lLiBUaGlzIGV2ZW50IGxpc3RlbmVyXG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlcyBldmVyeSBicm93c2VyIGJlaGF2ZXMgdGhlIHNhbWUgKG5vIFwiZGlzY29ubmVjdFwiIGV2ZW50IGF0IHRoZSBTb2NrZXQuSU8gbGV2ZWwgd2hlbiB0aGUgcGFnZSBpc1xuICAgICAgICAgICAgICAgIC8vIGNsb3NlZC9yZWxvYWRlZClcbiAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaWxlbnRseSBjbG9zZSB0aGUgdHJhbnNwb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5ob3N0bmFtZSAhPT0gXCJsb2NhbGhvc3RcIikge1xuICAgICAgICAgICAgICAgIHRoaXMub2ZmbGluZUV2ZW50TGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBjbG9zZVwiKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIHRoaXMub2ZmbGluZUV2ZW50TGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0cmFuc3BvcnQgb2YgdGhlIGdpdmVuIHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtUcmFuc3BvcnR9XG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgY3JlYXRlVHJhbnNwb3J0KG5hbWUpIHtcbiAgICAgICAgY29uc3QgcXVlcnkgPSBjbG9uZSh0aGlzLm9wdHMucXVlcnkpO1xuICAgICAgICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgICAgICAgcXVlcnkuRUlPID0gcHJvdG9jb2w7XG4gICAgICAgIC8vIHRyYW5zcG9ydCBuYW1lXG4gICAgICAgIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG4gICAgICAgIC8vIHNlc3Npb24gaWQgaWYgd2UgYWxyZWFkeSBoYXZlIG9uZVxuICAgICAgICBpZiAodGhpcy5pZClcbiAgICAgICAgICAgIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdHMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSwgdGhpcy5vcHRzLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIHNvY2tldDogdGhpcyxcbiAgICAgICAgICAgIGhvc3RuYW1lOiB0aGlzLmhvc3RuYW1lLFxuICAgICAgICAgICAgc2VjdXJlOiB0aGlzLnNlY3VyZSxcbiAgICAgICAgICAgIHBvcnQ6IHRoaXMucG9ydFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyB0cmFuc3BvcnRzW25hbWVdKG9wdHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvcGVuKCkge1xuICAgICAgICBsZXQgdHJhbnNwb3J0O1xuICAgICAgICBpZiAodGhpcy5vcHRzLnJlbWVtYmVyVXBncmFkZSAmJlxuICAgICAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJlxuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoXCJ3ZWJzb2NrZXRcIikgIT09IC0xKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSBcIndlYnNvY2tldFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIEVtaXQgZXJyb3Igb24gbmV4dCB0aWNrIHNvIGl0IGNhbiBiZSBsaXN0ZW5lZCB0b1xuICAgICAgICAgICAgdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgXCJObyB0cmFuc3BvcnRzIGF2YWlsYWJsZVwiKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiO1xuICAgICAgICAvLyBSZXRyeSB3aXRoIHRoZSBuZXh0IHRyYW5zcG9ydCBpZiB0aGUgdHJhbnNwb3J0IGlzIGRpc2FibGVkIChqc29ucDogZmFsc2UpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zcG9ydC5vcGVuKCk7XG4gICAgICAgIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0LiBEaXNhYmxlcyB0aGUgZXhpc3Rpbmcgb25lIChpZiBhbnkpLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCkge1xuICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNldCB1cCB0cmFuc3BvcnRcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgICAgIC8vIHNldCB1cCB0cmFuc3BvcnQgbGlzdGVuZXJzXG4gICAgICAgIHRyYW5zcG9ydFxuICAgICAgICAgICAgLm9uKFwiZHJhaW5cIiwgdGhpcy5vbkRyYWluLmJpbmQodGhpcykpXG4gICAgICAgICAgICAub24oXCJwYWNrZXRcIiwgdGhpcy5vblBhY2tldC5iaW5kKHRoaXMpKVxuICAgICAgICAgICAgLm9uKFwiZXJyb3JcIiwgdGhpcy5vbkVycm9yLmJpbmQodGhpcykpXG4gICAgICAgICAgICAub24oXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2UoXCJ0cmFuc3BvcnQgY2xvc2VcIik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9iZXMgYSB0cmFuc3BvcnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBwcm9iZShuYW1lKSB7XG4gICAgICAgIGxldCB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lKTtcbiAgICAgICAgbGV0IGZhaWxlZCA9IGZhbHNlO1xuICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IG9uVHJhbnNwb3J0T3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogXCJwaW5nXCIsIGRhdGE6IFwicHJvYmVcIiB9XSk7XG4gICAgICAgICAgICB0cmFuc3BvcnQub25jZShcInBhY2tldFwiLCBtc2cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoXCJwb25nXCIgPT09IG1zZy50eXBlICYmIFwicHJvYmVcIiA9PT0gbXNnLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInVwZ3JhZGluZ1wiLCB0cmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRyYW5zcG9ydClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IFwid2Vic29ja2V0XCIgPT09IHRyYW5zcG9ydC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5wYXVzZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFpbGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6IFwidXBncmFkZVwiIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwidXBncmFkZVwiLCB0cmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwicHJvYmUgZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgZXJyLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInVwZ3JhZGVFcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBmcmVlemVUcmFuc3BvcnQoKSB7XG4gICAgICAgICAgICBpZiAoZmFpbGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vIEFueSBjYWxsYmFjayBjYWxsZWQgYnkgdHJhbnNwb3J0IHNob3VsZCBiZSBpZ25vcmVkIHNpbmNlIG5vd1xuICAgICAgICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICAgICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gICAgICAgIGNvbnN0IG9uZXJyb3IgPSBlcnIgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJwcm9iZSBlcnJvcjogXCIgKyBlcnIpO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgZXJyb3IudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwidXBncmFkZUVycm9yXCIsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSgpIHtcbiAgICAgICAgICAgIG9uZXJyb3IoXCJ0cmFuc3BvcnQgY2xvc2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICAgICAgICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgICAgICAgICAgb25lcnJvcihcInNvY2tldCBjbG9zZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgICAgICAgZnVuY3Rpb24gb251cGdyYWRlKHRvKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNwb3J0ICYmIHRvLm5hbWUgIT09IHRyYW5zcG9ydC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgZnJlZXplVHJhbnNwb3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnMgb24gdGhlIHRyYW5zcG9ydCBhbmQgb24gc2VsZlxuICAgICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgICAgICAgICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwib3BlblwiLCBvblRyYW5zcG9ydE9wZW4pO1xuICAgICAgICAgICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgICAgICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICAgICAgICAgIHRoaXMub2ZmKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgICAgICAgICB0aGlzLm9mZihcInVwZ3JhZGluZ1wiLCBvbnVwZ3JhZGUpO1xuICAgICAgICB9O1xuICAgICAgICB0cmFuc3BvcnQub25jZShcIm9wZW5cIiwgb25UcmFuc3BvcnRPcGVuKTtcbiAgICAgICAgdHJhbnNwb3J0Lm9uY2UoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgICAgdHJhbnNwb3J0Lm9uY2UoXCJjbG9zZVwiLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICAgICAgdGhpcy5vbmNlKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgICAgIHRoaXMub25jZShcInVwZ3JhZGluZ1wiLCBvbnVwZ3JhZGUpO1xuICAgICAgICB0cmFuc3BvcnQub3BlbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5cIjtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IFwid2Vic29ja2V0XCIgPT09IHRoaXMudHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwib3BlblwiKTtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gICAgICAgIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgICAgICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgJiZcbiAgICAgICAgICAgIHRoaXMub3B0cy51cGdyYWRlICYmXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgY29uc3QgbCA9IHRoaXMudXBncmFkZXMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2JlKHRoaXMudXBncmFkZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvblBhY2tldChwYWNrZXQpIHtcbiAgICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICAgICAgIFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGFja2V0XCIsIHBhY2tldCk7XG4gICAgICAgICAgICAvLyBTb2NrZXQgaXMgbGl2ZSAtIGFueSBwYWNrZXQgY291bnRzXG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImhlYXJ0YmVhdFwiKTtcbiAgICAgICAgICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwib3BlblwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uSGFuZHNoYWtlKEpTT04ucGFyc2UocGFja2V0LmRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInBpbmdcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFBpbmdUaW1lb3V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFBhY2tldChcInBvbmdcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGluZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwb25nXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwic2VydmVyIGVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImRhdGFcIiwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcIm1lc3NhZ2VcIiwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gaGFuZHNoYWtlIG9ialxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uSGFuZHNoYWtlKGRhdGEpIHtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJoYW5kc2hha2VcIiwgZGF0YSk7XG4gICAgICAgIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gICAgICAgIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICAgICAgICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICAgICAgICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgICAgICAgdGhpcy5vbk9wZW4oKTtcbiAgICAgICAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICAgICAgICBpZiAoXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhbmQgcmVzZXRzIHBpbmcgdGltZW91dCB0aW1lciBiYXNlZCBvbiBzZXJ2ZXIgcGluZ3MuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICByZXNldFBpbmdUaW1lb3V0KCkge1xuICAgICAgICB0aGlzLmNsZWFyVGltZW91dEZuKHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gICAgICAgIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZShcInBpbmcgdGltZW91dFwiKTtcbiAgICAgICAgfSwgdGhpcy5waW5nSW50ZXJ2YWwgKyB0aGlzLnBpbmdUaW1lb3V0KTtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5hdXRvVW5yZWYpIHtcbiAgICAgICAgICAgIHRoaXMucGluZ1RpbWVvdXRUaW1lci51bnJlZigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCBvbiBgZHJhaW5gIGV2ZW50XG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvbkRyYWluKCkge1xuICAgICAgICB0aGlzLndyaXRlQnVmZmVyLnNwbGljZSgwLCB0aGlzLnByZXZCdWZmZXJMZW4pO1xuICAgICAgICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gICAgICAgIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAgICAgICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICAgICAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICAgICAgICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZHJhaW5cIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGZsdXNoKCkge1xuICAgICAgICBpZiAoXCJjbG9zZWRcIiAhPT0gdGhpcy5yZWFkeVN0YXRlICYmXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICAgICAgICAgIXRoaXMudXBncmFkaW5nICYmXG4gICAgICAgICAgICB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAgICAgICAgIC8vIHNwbGljZSB3cml0ZUJ1ZmZlciBhbmQgY2FsbGJhY2tCdWZmZXIgb24gYGRyYWluYFxuICAgICAgICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImZsdXNoXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgbWVzc2FnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICAgICAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgd3JpdGUobXNnLCBvcHRpb25zLCBmbikge1xuICAgICAgICB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIG1zZywgb3B0aW9ucywgZm4pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2VuZChtc2csIG9wdGlvbnMsIGZuKSB7XG4gICAgICAgIHRoaXMuc2VuZFBhY2tldChcIm1lc3NhZ2VcIiwgbXNnLCBvcHRpb25zLCBmbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrZXQgdHlwZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBzZW5kUGFja2V0KHR5cGUsIGRhdGEsIG9wdGlvbnMsIGZuKSB7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkYXRhKSB7XG4gICAgICAgICAgICBmbiA9IGRhdGE7XG4gICAgICAgICAgICBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgICAgICAgICBmbiA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJjbG9zaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuICAgICAgICBjb25zdCBwYWNrZXQgPSB7XG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwYWNrZXRDcmVhdGVcIiwgcGFja2V0KTtcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gICAgICAgIGlmIChmbilcbiAgICAgICAgICAgIHRoaXMub25jZShcImZsdXNoXCIsIGZuKTtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZShcImZvcmNlZCBjbG9zZVwiKTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNsZWFudXBBbmRDbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub2ZmKFwidXBncmFkZVwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgICAgICAgdGhpcy5vZmYoXCJ1cGdyYWRlRXJyb3JcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHdhaXRGb3JVcGdyYWRlID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICAgICAgICAgIHRoaXMub25jZShcInVwZ3JhZGVcIiwgY2xlYW51cEFuZENsb3NlKTtcbiAgICAgICAgICAgIHRoaXMub25jZShcInVwZ3JhZGVFcnJvclwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NpbmdcIjtcbiAgICAgICAgICAgIGlmICh0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25jZShcImRyYWluXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudXBncmFkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGVycm9yXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvbkVycm9yKGVycikge1xuICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgdGhpcy5vbkNsb3NlKFwidHJhbnNwb3J0IGVycm9yXCIsIGVycik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uQ2xvc2UocmVhc29uLCBkZXNjKSB7XG4gICAgICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAgICAgICBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAgICAgICBcImNsb3NpbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICAvLyBjbGVhciB0aW1lcnNcbiAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0Rm4odGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgICAgICAgICAgIC8vIHN0b3AgZXZlbnQgZnJvbSBmaXJpbmcgYWdhaW4gZm9yIHRyYW5zcG9ydFxuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKFwiY2xvc2VcIik7XG4gICAgICAgICAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3BlblxuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgIC8vIGlnbm9yZSBmdXJ0aGVyIHRyYW5zcG9ydCBjb21tdW5pY2F0aW9uXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICAgICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgICAgICAgICAgdGhpcy5pZCA9IG51bGw7XG4gICAgICAgICAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNsb3NlXCIsIHJlYXNvbiwgZGVzYyk7XG4gICAgICAgICAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAgICAgICAgIC8vIGdyYWIgdGhlIGJ1ZmZlcnMgb24gYGNsb3NlYCBldmVudFxuICAgICAgICAgICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNlcnZlciB1cGdyYWRlc1xuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqXG4gICAgICovXG4gICAgZmlsdGVyVXBncmFkZXModXBncmFkZXMpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGNvbnN0IGogPSB1cGdyYWRlcy5sZW5ndGg7XG4gICAgICAgIGZvciAoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICBpZiAofnRoaXMudHJhbnNwb3J0cy5pbmRleE9mKHVwZ3JhZGVzW2ldKSlcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZFVwZ3JhZGVzLnB1c2godXBncmFkZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJlZFVwZ3JhZGVzO1xuICAgIH1cbn1cblNvY2tldC5wcm90b2NvbCA9IHByb3RvY29sO1xuZnVuY3Rpb24gY2xvbmUob2JqKSB7XG4gICAgY29uc3QgbyA9IHt9O1xuICAgIGZvciAobGV0IGkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIG9baV0gPSBvYmpbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG87XG59XG4iLCJpbXBvcnQgeyBTb2NrZXQgfSBmcm9tIFwiLi9zb2NrZXQuanNcIjtcbmV4cG9ydCB7IFNvY2tldCB9O1xuZXhwb3J0IGNvbnN0IHByb3RvY29sID0gU29ja2V0LnByb3RvY29sO1xuZXhwb3J0IHsgVHJhbnNwb3J0IH0gZnJvbSBcIi4vdHJhbnNwb3J0LmpzXCI7XG5leHBvcnQgeyB0cmFuc3BvcnRzIH0gZnJvbSBcIi4vdHJhbnNwb3J0cy9pbmRleC5qc1wiO1xuZXhwb3J0IHsgaW5zdGFsbFRpbWVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuIiwiY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5jb25zdCBpc1ZpZXcgPSAob2JqKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopXG4gICAgICAgIDogb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufTtcbmNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmNvbnN0IHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKEJsb2IpID09PSBcIltvYmplY3QgQmxvYkNvbnN0cnVjdG9yXVwiKTtcbmNvbnN0IHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgRmlsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKEZpbGUpID09PSBcIltvYmplY3QgRmlsZUNvbnN0cnVjdG9yXVwiKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIEJ1ZmZlciwgYW4gQXJyYXlCdWZmZXIsIGEgQmxvYiBvciBhIEZpbGUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQmluYXJ5KG9iaikge1xuICAgIHJldHVybiAoKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJiAob2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNCaW5hcnkob2JqLCB0b0pTT04pIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzQmluYXJ5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChvYmoudG9KU09OICYmXG4gICAgICAgIHR5cGVvZiBvYmoudG9KU09OID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gaGFzQmluYXJ5KG9iai50b0pTT04oKSwgdHJ1ZSk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgeyBpc0JpbmFyeSB9IGZyb20gXCIuL2lzLWJpbmFyeS5qc1wiO1xuLyoqXG4gKiBSZXBsYWNlcyBldmVyeSBCdWZmZXIgfCBBcnJheUJ1ZmZlciB8IEJsb2IgfCBGaWxlIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBkZWNvbnN0cnVjdGVkIHBhY2tldCBhbmQgbGlzdCBvZiBidWZmZXJzXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbnN0cnVjdFBhY2tldChwYWNrZXQpIHtcbiAgICBjb25zdCBidWZmZXJzID0gW107XG4gICAgY29uc3QgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuICAgIGNvbnN0IHBhY2sgPSBwYWNrZXQ7XG4gICAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEsIGJ1ZmZlcnMpO1xuICAgIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gICAgcmV0dXJuIHsgcGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzIH07XG59XG5mdW5jdGlvbiBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICAgIGlmICghZGF0YSlcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgaWYgKGlzQmluYXJ5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICAgICAgYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbmV3RGF0YVtpXSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG4vKipcbiAqIFJlY29uc3RydWN0cyBhIGJpbmFyeSBwYWNrZXQgZnJvbSBpdHMgcGxhY2Vob2xkZXIgcGFja2V0IGFuZCBidWZmZXJzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIGV2ZW50IHBhY2tldCB3aXRoIHBsYWNlaG9sZGVyc1xuICogQHBhcmFtIHtBcnJheX0gYnVmZmVycyAtIGJpbmFyeSBidWZmZXJzIHRvIHB1dCBpbiBwbGFjZWhvbGRlciBwb3NpdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjb25zdHJ1Y3RlZCBwYWNrZXRcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29uc3RydWN0UGFja2V0KHBhY2tldCwgYnVmZmVycykge1xuICAgIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcbiAgICByZXR1cm4gcGFja2V0O1xufVxuZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgICBpZiAoIWRhdGEpXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgICAgIHJldHVybiBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpXG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuIiwiaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCJAc29ja2V0LmlvL2NvbXBvbmVudC1lbWl0dGVyXCI7XG5pbXBvcnQgeyBkZWNvbnN0cnVjdFBhY2tldCwgcmVjb25zdHJ1Y3RQYWNrZXQgfSBmcm9tIFwiLi9iaW5hcnkuanNcIjtcbmltcG9ydCB7IGlzQmluYXJ5LCBoYXNCaW5hcnkgfSBmcm9tIFwiLi9pcy1iaW5hcnkuanNcIjtcbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b2NvbCA9IDU7XG5leHBvcnQgdmFyIFBhY2tldFR5cGU7XG4oZnVuY3Rpb24gKFBhY2tldFR5cGUpIHtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJDT05ORUNUXCJdID0gMF0gPSBcIkNPTk5FQ1RcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJESVNDT05ORUNUXCJdID0gMV0gPSBcIkRJU0NPTk5FQ1RcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJFVkVOVFwiXSA9IDJdID0gXCJFVkVOVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkFDS1wiXSA9IDNdID0gXCJBQ0tcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJDT05ORUNUX0VSUk9SXCJdID0gNF0gPSBcIkNPTk5FQ1RfRVJST1JcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJCSU5BUllfRVZFTlRcIl0gPSA1XSA9IFwiQklOQVJZX0VWRU5UXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQklOQVJZX0FDS1wiXSA9IDZdID0gXCJCSU5BUllfQUNLXCI7XG59KShQYWNrZXRUeXBlIHx8IChQYWNrZXRUeXBlID0ge30pKTtcbi8qKlxuICogQSBzb2NrZXQuaW8gRW5jb2RlciBpbnN0YW5jZVxuICovXG5leHBvcnQgY2xhc3MgRW5jb2RlciB7XG4gICAgLyoqXG4gICAgICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhXG4gICAgICogYnVmZmVyIHNlcXVlbmNlLCBkZXBlbmRpbmcgb24gcGFja2V0IHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdFxuICAgICAqL1xuICAgIGVuY29kZShvYmopIHtcbiAgICAgICAgaWYgKG9iai50eXBlID09PSBQYWNrZXRUeXBlLkVWRU5UIHx8IG9iai50eXBlID09PSBQYWNrZXRUeXBlLkFDSykge1xuICAgICAgICAgICAgaWYgKGhhc0JpbmFyeShvYmopKSB7XG4gICAgICAgICAgICAgICAgb2JqLnR5cGUgPVxuICAgICAgICAgICAgICAgICAgICBvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5FVkVOVFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBQYWNrZXRUeXBlLkJJTkFSWV9BQ0s7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlQXNCaW5hcnkob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RoaXMuZW5jb2RlQXNTdHJpbmcob2JqKV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICAgICAqL1xuICAgIGVuY29kZUFzU3RyaW5nKG9iaikge1xuICAgICAgICAvLyBmaXJzdCBpcyB0eXBlXG4gICAgICAgIGxldCBzdHIgPSBcIlwiICsgb2JqLnR5cGU7XG4gICAgICAgIC8vIGF0dGFjaG1lbnRzIGlmIHdlIGhhdmUgdGhlbVxuICAgICAgICBpZiAob2JqLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICBvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfQUNLKSB7XG4gICAgICAgICAgICBzdHIgKz0gb2JqLmF0dGFjaG1lbnRzICsgXCItXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG5hbWVzcGFjZSBvdGhlciB0aGFuIGAvYFxuICAgICAgICAvLyB3ZSBhcHBlbmQgaXQgZm9sbG93ZWQgYnkgYSBjb21tYSBgLGBcbiAgICAgICAgaWYgKG9iai5uc3AgJiYgXCIvXCIgIT09IG9iai5uc3ApIHtcbiAgICAgICAgICAgIHN0ciArPSBvYmoubnNwICsgXCIsXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gICAgICAgIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgICAgICAgICAgc3RyICs9IG9iai5pZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBqc29uIGRhdGFcbiAgICAgICAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICAgICAgICAgIHN0ciArPSBKU09OLnN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5jb2RlIHBhY2tldCBhcyAnYnVmZmVyIHNlcXVlbmNlJyBieSByZW1vdmluZyBibG9icywgYW5kXG4gICAgICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICAgICAqIGEgbGlzdCBvZiBidWZmZXJzLlxuICAgICAqL1xuICAgIGVuY29kZUFzQmluYXJ5KG9iaikge1xuICAgICAgICBjb25zdCBkZWNvbnN0cnVjdGlvbiA9IGRlY29uc3RydWN0UGFja2V0KG9iaik7XG4gICAgICAgIGNvbnN0IHBhY2sgPSB0aGlzLmVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuICAgICAgICBidWZmZXJzLnVuc2hpZnQocGFjayk7IC8vIGFkZCBwYWNrZXQgaW5mbyB0byBiZWdpbm5pbmcgb2YgZGF0YSBsaXN0XG4gICAgICAgIHJldHVybiBidWZmZXJzOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgICB9XG59XG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqL1xuZXhwb3J0IGNsYXNzIERlY29kZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhbiBlbmNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvYmogLSBlbmNvZGVkIHBhY2tldFxuICAgICAqL1xuICAgIGFkZChvYmopIHtcbiAgICAgICAgbGV0IHBhY2tldDtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHBhY2tldCA9IHRoaXMuZGVjb2RlU3RyaW5nKG9iaik7XG4gICAgICAgICAgICBpZiAocGFja2V0LnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICAgICAgcGFja2V0LnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgICAgIC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcbiAgICAgICAgICAgICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQuYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdFJlc2VydmVkKFwiZGVjb2RlZFwiLCBwYWNrZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vbi1iaW5hcnkgZnVsbCBwYWNrZXRcbiAgICAgICAgICAgICAgICBzdXBlci5lbWl0UmVzZXJ2ZWQoXCJkZWNvZGVkXCIsIHBhY2tldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNCaW5hcnkob2JqKSB8fCBvYmouYmFzZTY0KSB7XG4gICAgICAgICAgICAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICAgICAgICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldCkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdFJlc2VydmVkKFwiZGVjb2RlZFwiLCBwYWNrZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHlwZTogXCIgKyBvYmopO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICAgICAqL1xuICAgIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAvLyBsb29rIHVwIHR5cGVcbiAgICAgICAgY29uc3QgcCA9IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFBhY2tldFR5cGVbcC50eXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHBhY2tldCB0eXBlIFwiICsgcC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gICAgICAgIGlmIChwLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICBwLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09IFwiLVwiICYmIGkgIT0gc3RyLmxlbmd0aCkgeyB9XG4gICAgICAgICAgICBjb25zdCBidWYgPSBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKTtcbiAgICAgICAgICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGF0dGFjaG1lbnRzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gICAgICAgIGlmIChcIi9cIiA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKFwiLFwiID09PSBjKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLm5zcCA9IHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcC5uc3AgPSBcIi9cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIGlkXG4gICAgICAgIGNvbnN0IG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgICAgICAgaWYgKFwiXCIgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAgICAgICAgICAgICAtLWk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLmlkID0gTnVtYmVyKHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHRyeVBhcnNlKHN0ci5zdWJzdHIoaSkpO1xuICAgICAgICAgICAgaWYgKERlY29kZXIuaXNQYXlsb2FkVmFsaWQocC50eXBlLCBwYXlsb2FkKSkge1xuICAgICAgICAgICAgICAgIHAuZGF0YSA9IHBheWxvYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBheWxvYWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICAgIHN0YXRpYyBpc1BheWxvYWRWYWxpZCh0eXBlLCBwYXlsb2FkKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkNPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBwYXlsb2FkID09PSBcIm9iamVjdFwiO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkRJU0NPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5DT05ORUNUX0VSUk9SOlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcGF5bG9hZCA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgcGF5bG9hZCA9PT0gXCJvYmplY3RcIjtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5FVkVOVDpcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5CSU5BUllfRVZFTlQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocGF5bG9hZCkgJiYgcGF5bG9hZC5sZW5ndGggPiAwO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkFDSzpcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5CSU5BUllfQUNLOlxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHBheWxvYWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlYWxsb2NhdGVzIGEgcGFyc2VyJ3MgcmVzb3VyY2VzXG4gICAgICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRyeVBhcnNlKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgQmluYXJ5UmVjb25zdHJ1Y3RvciB7XG4gICAgY29uc3RydWN0b3IocGFja2V0KSB7XG4gICAgICAgIHRoaXMucGFja2V0ID0gcGFja2V0O1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAgICAgKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICAgICAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gICAgICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gICAgICovXG4gICAgdGFrZUJpbmFyeURhdGEoYmluRGF0YSkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7XG4gICAgICAgICAgICAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICAgICAgICAgIGNvbnN0IHBhY2tldCA9IHJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgICAgICAgICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gcGFja2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gICAgICovXG4gICAgZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gb24ob2JqLCBldiwgZm4pIHtcbiAgICBvYmoub24oZXYsIGZuKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gc3ViRGVzdHJveSgpIHtcbiAgICAgICAgb2JqLm9mZihldiwgZm4pO1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBQYWNrZXRUeXBlIH0gZnJvbSBcInNvY2tldC5pby1wYXJzZXJcIjtcbmltcG9ydCB7IG9uIH0gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCB7IEVtaXR0ZXIsIH0gZnJvbSBcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIjtcbi8qKlxuICogSW50ZXJuYWwgZXZlbnRzLlxuICogVGhlc2UgZXZlbnRzIGNhbid0IGJlIGVtaXR0ZWQgYnkgdGhlIHVzZXIuXG4gKi9cbmNvbnN0IFJFU0VSVkVEX0VWRU5UUyA9IE9iamVjdC5mcmVlemUoe1xuICAgIGNvbm5lY3Q6IDEsXG4gICAgY29ubmVjdF9lcnJvcjogMSxcbiAgICBkaXNjb25uZWN0OiAxLFxuICAgIGRpc2Nvbm5lY3Rpbmc6IDEsXG4gICAgLy8gRXZlbnRFbWl0dGVyIHJlc2VydmVkIGV2ZW50czogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9ldmVudHMuaHRtbCNldmVudHNfZXZlbnRfbmV3bGlzdGVuZXJcbiAgICBuZXdMaXN0ZW5lcjogMSxcbiAgICByZW1vdmVMaXN0ZW5lcjogMSxcbn0pO1xuZXhwb3J0IGNsYXNzIFNvY2tldCBleHRlbmRzIEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIGBTb2NrZXRgIGNvbnN0cnVjdG9yLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlvLCBuc3AsIG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuaWRzID0gMDtcbiAgICAgICAgdGhpcy5hY2tzID0ge307XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgdGhpcy5pbyA9IGlvO1xuICAgICAgICB0aGlzLm5zcCA9IG5zcDtcbiAgICAgICAgaWYgKG9wdHMgJiYgb3B0cy5hdXRoKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGggPSBvcHRzLmF1dGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW8uX2F1dG9Db25uZWN0KVxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzdWJFdmVudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGlvID0gdGhpcy5pbztcbiAgICAgICAgdGhpcy5zdWJzID0gW1xuICAgICAgICAgICAgb24oaW8sIFwib3BlblwiLCB0aGlzLm9ub3Blbi5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIG9uKGlvLCBcInBhY2tldFwiLCB0aGlzLm9ucGFja2V0LmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb24oaW8sIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb24oaW8sIFwiY2xvc2VcIiwgdGhpcy5vbmNsb3NlLmJpbmQodGhpcykpLFxuICAgICAgICBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBTb2NrZXQgd2lsbCB0cnkgdG8gcmVjb25uZWN0IHdoZW4gaXRzIE1hbmFnZXIgY29ubmVjdHMgb3IgcmVjb25uZWN0c1xuICAgICAqL1xuICAgIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuc3VicztcbiAgICB9XG4gICAgLyoqXG4gICAgICogXCJPcGVuc1wiIHRoZSBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuc3ViRXZlbnRzKCk7XG4gICAgICAgIGlmICghdGhpcy5pb1tcIl9yZWNvbm5lY3RpbmdcIl0pXG4gICAgICAgICAgICB0aGlzLmlvLm9wZW4oKTsgLy8gZW5zdXJlIG9wZW5cbiAgICAgICAgaWYgKFwib3BlblwiID09PSB0aGlzLmlvLl9yZWFkeVN0YXRlKVxuICAgICAgICAgICAgdGhpcy5vbm9wZW4oKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBjb25uZWN0KClcbiAgICAgKi9cbiAgICBvcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgYG1lc3NhZ2VgIGV2ZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIHNlbmQoLi4uYXJncykge1xuICAgICAgICBhcmdzLnVuc2hpZnQoXCJtZXNzYWdlXCIpO1xuICAgICAgICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBgZW1pdGAuXG4gICAgICogSWYgdGhlIGV2ZW50IGlzIGluIGBldmVudHNgLCBpdCdzIGVtaXR0ZWQgbm9ybWFsbHkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZW1pdChldiwgLi4uYXJncykge1xuICAgICAgICBpZiAoUkVTRVJWRURfRVZFTlRTLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBldiArICdcIiBpcyBhIHJlc2VydmVkIGV2ZW50IG5hbWUnKTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnVuc2hpZnQoZXYpO1xuICAgICAgICBjb25zdCBwYWNrZXQgPSB7XG4gICAgICAgICAgICB0eXBlOiBQYWNrZXRUeXBlLkVWRU5ULFxuICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgfTtcbiAgICAgICAgcGFja2V0Lm9wdGlvbnMgPSB7fTtcbiAgICAgICAgcGFja2V0Lm9wdGlvbnMuY29tcHJlc3MgPSB0aGlzLmZsYWdzLmNvbXByZXNzICE9PSBmYWxzZTtcbiAgICAgICAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5pZHMrKztcbiAgICAgICAgICAgIGNvbnN0IGFjayA9IGFyZ3MucG9wKCk7XG4gICAgICAgICAgICB0aGlzLl9yZWdpc3RlckFja0NhbGxiYWNrKGlkLCBhY2spO1xuICAgICAgICAgICAgcGFja2V0LmlkID0gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNUcmFuc3BvcnRXcml0YWJsZSA9IHRoaXMuaW8uZW5naW5lICYmXG4gICAgICAgICAgICB0aGlzLmlvLmVuZ2luZS50cmFuc3BvcnQgJiZcbiAgICAgICAgICAgIHRoaXMuaW8uZW5naW5lLnRyYW5zcG9ydC53cml0YWJsZTtcbiAgICAgICAgY29uc3QgZGlzY2FyZFBhY2tldCA9IHRoaXMuZmxhZ3Mudm9sYXRpbGUgJiYgKCFpc1RyYW5zcG9ydFdyaXRhYmxlIHx8ICF0aGlzLmNvbm5lY3RlZCk7XG4gICAgICAgIGlmIChkaXNjYXJkUGFja2V0KSB7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHBhY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRCdWZmZXIucHVzaChwYWNrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlZ2lzdGVyQWNrQ2FsbGJhY2soaWQsIGFjaykge1xuICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5mbGFncy50aW1lb3V0O1xuICAgICAgICBpZiAodGltZW91dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmFja3NbaWRdID0gYWNrO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgdGltZXIgPSB0aGlzLmlvLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hY2tzW2lkXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VuZEJ1ZmZlcltpXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kQnVmZmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2suY2FsbCh0aGlzLCBuZXcgRXJyb3IoXCJvcGVyYXRpb24gaGFzIHRpbWVkIG91dFwiKSk7XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB0aGlzLmFja3NbaWRdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMuaW8uY2xlYXJUaW1lb3V0Rm4odGltZXIpO1xuICAgICAgICAgICAgYWNrLmFwcGx5KHRoaXMsIFtudWxsLCAuLi5hcmdzXSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgcGFja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcGFja2V0KHBhY2tldCkge1xuICAgICAgICBwYWNrZXQubnNwID0gdGhpcy5uc3A7XG4gICAgICAgIHRoaXMuaW8uX3BhY2tldChwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgYG9wZW5gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbm9wZW4oKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5hdXRoID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5hdXRoKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBQYWNrZXRUeXBlLkNPTk5FQ1QsIGRhdGEgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogUGFja2V0VHlwZS5DT05ORUNULCBkYXRhOiB0aGlzLmF1dGggfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIG9yIG1hbmFnZXIgYGVycm9yYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlcnJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZXJyb3IoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVuZ2luZSBgY2xvc2VgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlYXNvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25jbG9zZShyZWFzb24pIHtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICBkZWxldGUgdGhpcy5pZDtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJkaXNjb25uZWN0XCIsIHJlYXNvbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aXRoIHNvY2tldCBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbnBhY2tldChwYWNrZXQpIHtcbiAgICAgICAgY29uc3Qgc2FtZU5hbWVzcGFjZSA9IHBhY2tldC5uc3AgPT09IHRoaXMubnNwO1xuICAgICAgICBpZiAoIXNhbWVOYW1lc3BhY2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5DT05ORUNUOlxuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQuZGF0YSAmJiBwYWNrZXQuZGF0YS5zaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBwYWNrZXQuZGF0YS5zaWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25jb25uZWN0KGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBuZXcgRXJyb3IoXCJJdCBzZWVtcyB5b3UgYXJlIHRyeWluZyB0byByZWFjaCBhIFNvY2tldC5JTyBzZXJ2ZXIgaW4gdjIueCB3aXRoIGEgdjMueCBjbGllbnQsIGJ1dCB0aGV5IGFyZSBub3QgY29tcGF0aWJsZSAobW9yZSBpbmZvcm1hdGlvbiBoZXJlOiBodHRwczovL3NvY2tldC5pby9kb2NzL3YzL21pZ3JhdGluZy1mcm9tLTIteC10by0zLTAvKVwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkVWRU5UOlxuICAgICAgICAgICAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5BQ0s6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0s6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkRJU0NPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5DT05ORUNUX0VSUk9SOlxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihwYWNrZXQuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgZXJyLmRhdGEgPSBwYWNrZXQuZGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25ldmVudChwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICAgICAgICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goT2JqZWN0LmZyZWV6ZShhcmdzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdEV2ZW50KGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FueUxpc3RlbmVycyAmJiB0aGlzLl9hbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYWNrKGlkKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgc2VudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgICAgICAgICAgaWYgKHNlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc2VudCA9IHRydWU7XG4gICAgICAgICAgICBzZWxmLnBhY2tldCh7XG4gICAgICAgICAgICAgICAgdHlwZTogUGFja2V0VHlwZS5BQ0ssXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgYWNrbm93bGVnZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmFjayhwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgYWNrID0gdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY2spIHtcbiAgICAgICAgICAgIGFjay5hcHBseSh0aGlzLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc2VydmVyIGNvbm5lY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY29ubmVjdChpZCkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBlbWl0QnVmZmVyZWQoKSB7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5mb3JFYWNoKChhcmdzKSA9PiB0aGlzLmVtaXRFdmVudChhcmdzKSk7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIuZm9yRWFjaCgocGFja2V0KSA9PiB0aGlzLnBhY2tldChwYWNrZXQpKTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBzZXJ2ZXIgZGlzY29ubmVjdFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAgICAgKiB0aGlzIG1ldGhvZCBlbnN1cmVzIHRoZSBtYW5hZ2VyIHN0b3BzIHRyYWNraW5nIHVzIGFuZFxuICAgICAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzKSB7XG4gICAgICAgICAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICAgICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xuICAgICAgICAgICAgdGhpcy5zdWJzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW9bXCJfZGVzdHJveVwiXSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogUGFja2V0VHlwZS5ESVNDT05ORUNUIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBjbGllbnQgZGlzY29ubmVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGRpc2Nvbm5lY3QoKVxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcHJlc3MgLSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb21wcmVzcyhjb21wcmVzcykge1xuICAgICAgICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbW9kaWZpZXIgZm9yIGEgc3Vic2VxdWVudCBldmVudCBlbWlzc2lvbiB0aGF0IHRoZSBldmVudCBtZXNzYWdlIHdpbGwgYmUgZHJvcHBlZCB3aGVuIHRoaXMgc29ja2V0IGlzIG5vdFxuICAgICAqIHJlYWR5IHRvIHNlbmQgbWVzc2FnZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldCB2b2xhdGlsZSgpIHtcbiAgICAgICAgdGhpcy5mbGFncy52b2xhdGlsZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbW9kaWZpZXIgZm9yIGEgc3Vic2VxdWVudCBldmVudCBlbWlzc2lvbiB0aGF0IHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCB3aXRoIGFuIGVycm9yIHdoZW4gdGhlXG4gICAgICogZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgd2l0aG91dCBhbiBhY2tub3dsZWRnZW1lbnQgZnJvbSB0aGUgc2VydmVyOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogc29ja2V0LnRpbWVvdXQoNTAwMCkuZW1pdChcIm15LWV2ZW50XCIsIChlcnIpID0+IHtcbiAgICAgKiAgIGlmIChlcnIpIHtcbiAgICAgKiAgICAgLy8gdGhlIHNlcnZlciBkaWQgbm90IGFja25vd2xlZGdlIHRoZSBldmVudCBpbiB0aGUgZ2l2ZW4gZGVsYXlcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgdGltZW91dCh0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMuZmxhZ3MudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb25BbnkobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suIFRoZSBsaXN0ZW5lciBpcyBhZGRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcHJlcGVuZEFueShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMgfHwgW107XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIGFueSBldmVudCBpcyBlbWl0dGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpc3RlbmVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIG9mZkFueShsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXRoaXMuX2FueUxpc3RlbmVycykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lciA9PT0gbGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FueUxpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0aGF0IGFyZSBsaXN0ZW5pbmcgZm9yIGFueSBldmVudCB0aGF0IGlzIHNwZWNpZmllZC4gVGhpcyBhcnJheSBjYW4gYmUgbWFuaXB1bGF0ZWQsXG4gICAgICogZS5nLiB0byByZW1vdmUgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGxpc3RlbmVyc0FueSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTb2NrZXQgYXMgRW5naW5lLCBpbnN0YWxsVGltZXJGdW5jdGlvbnMsIH0gZnJvbSBcImVuZ2luZS5pby1jbGllbnRcIjtcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuaW1wb3J0ICogYXMgcGFyc2VyIGZyb20gXCJzb2NrZXQuaW8tcGFyc2VyXCI7XG5pbXBvcnQgeyBvbiB9IGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgQmFja29mZiBmcm9tIFwiYmFja28yXCI7XG5pbXBvcnQgeyBFbWl0dGVyLCB9IGZyb20gXCJAc29ja2V0LmlvL2NvbXBvbmVudC1lbWl0dGVyXCI7XG5leHBvcnQgY2xhc3MgTWFuYWdlciBleHRlbmRzIEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHVyaSwgb3B0cykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubnNwcyA9IHt9O1xuICAgICAgICB0aGlzLnN1YnMgPSBbXTtcbiAgICAgICAgaWYgKHVyaSAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgdXJpKSB7XG4gICAgICAgICAgICBvcHRzID0gdXJpO1xuICAgICAgICAgICAgdXJpID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgICAgICBvcHRzLnBhdGggPSBvcHRzLnBhdGggfHwgXCIvc29ja2V0LmlvXCI7XG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgICAgIGluc3RhbGxUaW1lckZ1bmN0aW9ucyh0aGlzLCBvcHRzKTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb24ob3B0cy5yZWNvbm5lY3Rpb24gIT09IGZhbHNlKTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheShvcHRzLnJlY29ubmVjdGlvbkRlbGF5IHx8IDEwMDApO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KG9wdHMucmVjb25uZWN0aW9uRGVsYXlNYXggfHwgNTAwMCk7XG4gICAgICAgIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcigoX2EgPSBvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAuNSk7XG4gICAgICAgIHRoaXMuYmFja29mZiA9IG5ldyBCYWNrb2ZmKHtcbiAgICAgICAgICAgIG1pbjogdGhpcy5yZWNvbm5lY3Rpb25EZWxheSgpLFxuICAgICAgICAgICAgbWF4OiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KCksXG4gICAgICAgICAgICBqaXR0ZXI6IHRoaXMucmFuZG9taXphdGlvbkZhY3RvcigpLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50aW1lb3V0KG51bGwgPT0gb3B0cy50aW1lb3V0ID8gMjAwMDAgOiBvcHRzLnRpbWVvdXQpO1xuICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgdGhpcy51cmkgPSB1cmk7XG4gICAgICAgIGNvbnN0IF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XG4gICAgICAgIHRoaXMuZW5jb2RlciA9IG5ldyBfcGFyc2VyLkVuY29kZXIoKTtcbiAgICAgICAgdGhpcy5kZWNvZGVyID0gbmV3IF9wYXJzZXIuRGVjb2RlcigpO1xuICAgICAgICB0aGlzLl9hdXRvQ29ubmVjdCA9IG9wdHMuYXV0b0Nvbm5lY3QgIT09IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fYXV0b0Nvbm5lY3QpXG4gICAgICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gICAgcmVjb25uZWN0aW9uKHYpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uID0gISF2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVjb25uZWN0aW9uQXR0ZW1wdHModikge1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cyA9IHY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb25EZWxheSh2KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXkgPSB2O1xuICAgICAgICAoX2EgPSB0aGlzLmJhY2tvZmYpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRNaW4odik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByYW5kb21pemF0aW9uRmFjdG9yKHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XG4gICAgICAgIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3IgPSB2O1xuICAgICAgICAoX2EgPSB0aGlzLmJhY2tvZmYpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRKaXR0ZXIodik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb25EZWxheU1heCh2KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heDtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXggPSB2O1xuICAgICAgICAoX2EgPSB0aGlzLmJhY2tvZmYpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRNYXgodik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0aW1lb3V0KHYpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVvdXQ7XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRyeWluZyB0byByZWNvbm5lY3QgaWYgcmVjb25uZWN0aW9uIGlzIGVuYWJsZWQgYW5kIHdlIGhhdmUgbm90XG4gICAgICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG1heWJlUmVjb25uZWN0T25PcGVuKCkge1xuICAgICAgICAvLyBPbmx5IHRyeSB0byByZWNvbm5lY3QgaWYgaXQncyB0aGUgZmlyc3QgdGltZSB3ZSdyZSBjb25uZWN0aW5nXG4gICAgICAgIGlmICghdGhpcy5fcmVjb25uZWN0aW5nICYmXG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb24gJiZcbiAgICAgICAgICAgIHRoaXMuYmFja29mZi5hdHRlbXB0cyA9PT0gMCkge1xuICAgICAgICAgICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydCBgc29ja2V0YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gb3B0aW9uYWwsIGNhbGxiYWNrXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIG9wZW4oZm4pIHtcbiAgICAgICAgaWYgKH50aGlzLl9yZWFkeVN0YXRlLmluZGV4T2YoXCJvcGVuXCIpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuZW5naW5lID0gbmV3IEVuZ2luZSh0aGlzLnVyaSwgdGhpcy5vcHRzKTtcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7XG4gICAgICAgIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlO1xuICAgICAgICAvLyBlbWl0IGBvcGVuYFxuICAgICAgICBjb25zdCBvcGVuU3ViRGVzdHJveSA9IG9uKHNvY2tldCwgXCJvcGVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYub25vcGVuKCk7XG4gICAgICAgICAgICBmbiAmJiBmbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gZW1pdCBgZXJyb3JgXG4gICAgICAgIGNvbnN0IGVycm9yU3ViID0gb24oc29ja2V0LCBcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgIHNlbGYuY2xlYW51cCgpO1xuICAgICAgICAgICAgc2VsZi5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIGVycik7XG4gICAgICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICAgICAgICBmbihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSBkbyB0aGlzIGlmIHRoZXJlIGlzIG5vIGZuIHRvIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgICAgICAgICAgICBzZWxmLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZmFsc2UgIT09IHRoaXMuX3RpbWVvdXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSB0aGlzLl90aW1lb3V0O1xuICAgICAgICAgICAgaWYgKHRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBvcGVuU3ViRGVzdHJveSgpOyAvLyBwcmV2ZW50cyBhIHJhY2UgY29uZGl0aW9uIHdpdGggdGhlICdvcGVuJyBldmVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2V0IHRpbWVyXG4gICAgICAgICAgICBjb25zdCB0aW1lciA9IHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBvcGVuU3ViRGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdChcImVycm9yXCIsIG5ldyBFcnJvcihcInRpbWVvdXRcIikpO1xuICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICAgICAgICAgIHRpbWVyLnVucmVmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaChmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1YnMucHVzaChvcGVuU3ViRGVzdHJveSk7XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBvcGVuKClcbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KGZuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZW4oZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgb3Blbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25vcGVuKCkge1xuICAgICAgICAvLyBjbGVhciBvbGQgc3Vic1xuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgLy8gbWFyayBhcyBvcGVuXG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcIm9wZW5cIjtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJvcGVuXCIpO1xuICAgICAgICAvLyBhZGQgbmV3IHN1YnNcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgXCJwaW5nXCIsIHRoaXMub25waW5nLmJpbmQodGhpcykpLCBvbihzb2NrZXQsIFwiZGF0YVwiLCB0aGlzLm9uZGF0YS5iaW5kKHRoaXMpKSwgb24oc29ja2V0LCBcImVycm9yXCIsIHRoaXMub25lcnJvci5iaW5kKHRoaXMpKSwgb24oc29ja2V0LCBcImNsb3NlXCIsIHRoaXMub25jbG9zZS5iaW5kKHRoaXMpKSwgb24odGhpcy5kZWNvZGVyLCBcImRlY29kZWRcIiwgdGhpcy5vbmRlY29kZWQuYmluZCh0aGlzKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucGluZygpIHtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwaW5nXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBkYXRhLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmRlY29kZXIuYWRkKGRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBwYXJzZXIgZnVsbHkgZGVjb2RlcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25kZWNvZGVkKHBhY2tldCkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBhY2tldFwiLCBwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZXJyb3IoZXJyKSB7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgZXJyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzb2NrZXQgZm9yIHRoZSBnaXZlbiBgbnNwYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1NvY2tldH1cbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc29ja2V0KG5zcCwgb3B0cykge1xuICAgICAgICBsZXQgc29ja2V0ID0gdGhpcy5uc3BzW25zcF07XG4gICAgICAgIGlmICghc29ja2V0KSB7XG4gICAgICAgICAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgICAgICAgICB0aGlzLm5zcHNbbnNwXSA9IHNvY2tldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc29ja2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzb2NrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9kZXN0cm95KHNvY2tldCkge1xuICAgICAgICBjb25zdCBuc3BzID0gT2JqZWN0LmtleXModGhpcy5uc3BzKTtcbiAgICAgICAgZm9yIChjb25zdCBuc3Agb2YgbnNwcykge1xuICAgICAgICAgICAgY29uc3Qgc29ja2V0ID0gdGhpcy5uc3BzW25zcF07XG4gICAgICAgICAgICBpZiAoc29ja2V0LmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcGFja2V0KHBhY2tldCkge1xuICAgICAgICBjb25zdCBlbmNvZGVkUGFja2V0cyA9IHRoaXMuZW5jb2Rlci5lbmNvZGUocGFja2V0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5lbmdpbmUud3JpdGUoZW5jb2RlZFBhY2tldHNbaV0sIHBhY2tldC5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY2xlYW51cCgpIHtcbiAgICAgICAgdGhpcy5zdWJzLmZvckVhY2goKHN1YkRlc3Ryb3kpID0+IHN1YkRlc3Ryb3koKSk7XG4gICAgICAgIHRoaXMuc3Vicy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmRlY29kZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgY3VycmVudCBzb2NrZXQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jbG9zZSgpIHtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25jbG9zZShcImZvcmNlZCBjbG9zZVwiKTtcbiAgICAgICAgaWYgKHRoaXMuZW5naW5lKVxuICAgICAgICAgICAgdGhpcy5lbmdpbmUuY2xvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGNsb3NlKClcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25jbG9zZShyZWFzb24pIHtcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjbG9zZVwiLCByZWFzb24pO1xuICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW9uICYmICF0aGlzLnNraXBSZWNvbm5lY3QpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcmVjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW5nIHx8IHRoaXMuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuYmFja29mZi5hdHRlbXB0cyA+PSB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cykge1xuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInJlY29ubmVjdF9mYWlsZWRcIik7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5iYWNrb2ZmLmR1cmF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgdGltZXIgPSB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0X2F0dGVtcHRcIiwgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBhZ2FpbiBmb3IgdGhlIGNhc2Ugc29ja2V0IGNsb3NlZCBpbiBhYm92ZSBldmVudHNcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgc2VsZi5vcGVuKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5hdXRvVW5yZWYpIHtcbiAgICAgICAgICAgICAgICB0aW1lci51bnJlZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdWJzLnB1c2goZnVuY3Rpb24gc3ViRGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZWNvbm5lY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucmVjb25uZWN0KCkge1xuICAgICAgICBjb25zdCBhdHRlbXB0ID0gdGhpcy5iYWNrb2ZmLmF0dGVtcHRzO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0XCIsIGF0dGVtcHQpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IHVybCB9IGZyb20gXCIuL3VybC5qc1wiO1xuaW1wb3J0IHsgTWFuYWdlciB9IGZyb20gXCIuL21hbmFnZXIuanNcIjtcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuY29uc3QgY2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGxvb2t1cCh1cmksIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBvcHRzID0gdXJpO1xuICAgICAgICB1cmkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIGNvbnN0IHBhcnNlZCA9IHVybCh1cmksIG9wdHMucGF0aCB8fCBcIi9zb2NrZXQuaW9cIik7XG4gICAgY29uc3Qgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgICBjb25zdCBpZCA9IHBhcnNlZC5pZDtcbiAgICBjb25zdCBwYXRoID0gcGFyc2VkLnBhdGg7XG4gICAgY29uc3Qgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXVtcIm5zcHNcIl07XG4gICAgY29uc3QgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHxcbiAgICAgICAgb3B0c1tcImZvcmNlIG5ldyBjb25uZWN0aW9uXCJdIHx8XG4gICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fFxuICAgICAgICBzYW1lTmFtZXNwYWNlO1xuICAgIGxldCBpbztcbiAgICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgICAgICBpbyA9IG5ldyBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgICAgICAgY2FjaGVbaWRdID0gbmV3IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpbyA9IGNhY2hlW2lkXTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5xdWVyeSAmJiAhb3B0cy5xdWVyeSkge1xuICAgICAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5S2V5O1xuICAgIH1cbiAgICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cbi8vIHNvIHRoYXQgXCJsb29rdXBcIiBjYW4gYmUgdXNlZCBib3RoIGFzIGEgZnVuY3Rpb24gKGUuZy4gYGlvKC4uLilgKSBhbmQgYXMgYVxuLy8gbmFtZXNwYWNlIChlLmcuIGBpby5jb25uZWN0KC4uLilgKSwgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbk9iamVjdC5hc3NpZ24obG9va3VwLCB7XG4gICAgTWFuYWdlcixcbiAgICBTb2NrZXQsXG4gICAgaW86IGxvb2t1cCxcbiAgICBjb25uZWN0OiBsb29rdXAsXG59KTtcbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB7IHByb3RvY29sIH0gZnJvbSBcInNvY2tldC5pby1wYXJzZXJcIjtcbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB7IE1hbmFnZXIsIFNvY2tldCwgbG9va3VwIGFzIGlvLCBsb29rdXAgYXMgY29ubmVjdCwgbG9va3VwIGFzIGRlZmF1bHQsIH07XG4iLCJpbXBvcnQgcGFyc2V1cmkgZnJvbSBcInBhcnNldXJpXCI7XG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHVyaSAtIHVybFxuICogQHBhcmFtIHBhdGggLSB0aGUgcmVxdWVzdCBwYXRoIG9mIHRoZSBjb25uZWN0aW9uXG4gKiBAcGFyYW0gbG9jIC0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cmwodXJpLCBwYXRoID0gXCJcIiwgbG9jKSB7XG4gICAgbGV0IG9iaiA9IHVyaTtcbiAgICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICAgIGxvYyA9IGxvYyB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIGxvY2F0aW9uKTtcbiAgICBpZiAobnVsbCA9PSB1cmkpXG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIGxvYy5ob3N0O1xuICAgIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydFxuICAgIGlmICh0eXBlb2YgdXJpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChcIi9cIiA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgaWYgKFwiL1wiID09PSB1cmkuY2hhckF0KDEpKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gXCJodHRwczovL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHBhcnNlXG4gICAgICAgIG9iaiA9IHBhcnNldXJpKHVyaSk7XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICAgIGlmICghb2JqLnBvcnQpIHtcbiAgICAgICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICAgICAgICBvYmoucG9ydCA9IFwiODBcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgICAgICAgIG9iai5wb3J0ID0gXCI0NDNcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvYmoucGF0aCA9IG9iai5wYXRoIHx8IFwiL1wiO1xuICAgIGNvbnN0IGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgY29uc3QgaG9zdCA9IGlwdjYgPyBcIltcIiArIG9iai5ob3N0ICsgXCJdXCIgOiBvYmouaG9zdDtcbiAgICAvLyBkZWZpbmUgdW5pcXVlIGlkXG4gICAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgXCI6Ly9cIiArIGhvc3QgKyBcIjpcIiArIG9iai5wb3J0ICsgcGF0aDtcbiAgICAvLyBkZWZpbmUgaHJlZlxuICAgIG9iai5ocmVmID1cbiAgICAgICAgb2JqLnByb3RvY29sICtcbiAgICAgICAgICAgIFwiOi8vXCIgK1xuICAgICAgICAgICAgaG9zdCArXG4gICAgICAgICAgICAobG9jICYmIGxvYy5wb3J0ID09PSBvYmoucG9ydCA/IFwiXCIgOiBcIjpcIiArIG9iai5wb3J0KTtcbiAgICByZXR1cm4gb2JqO1xufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Db252ZXJzYXRpb25WaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Db252ZXJzYXRpb25WaWV3LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL0NvbnZlcnNhdGlvblZpZXcuc2Nzc1wiO1xyXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgRXZlbnRzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvRXZlbnRzLmpzXCI7XHJcbmltcG9ydCBpbyBmcm9tIFwic29ja2V0LmlvLWNsaWVudFwiO1xyXG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XHJcbmltcG9ydCBGb3JtIGZyb20gXCIuLi8uLi9jb3JlL0Zvcm0vRm9ybVwiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcclxuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkXCI7XHJcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXRcIjtcclxuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi9jb3JlL0xhYmVsL0xhYmVsXCI7XHJcbmltcG9ydCBQcm9maWxlUGljdHVyZSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Qcm9maWxlUGljdHVyZS9Qcm9maWxlUGljdHVyZVwiO1xyXG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlc1wiO1xyXG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XHJcbmltcG9ydCB7IHNlbmRHZXRSZXF1ZXN0LCBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vSGVscGVyXCI7XHJcbmltcG9ydCB7IHNob3dFcnJvck5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XHJcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0xvYWRpbmcvTG9hZGluZ1wiO1xyXG5cclxuLyoqXHJcbiAqIEEgdmlldyBmb3IgbWVzc2FnaW5nIGEgY2VydGFpbiB1c2VyXHJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gKi9cclxuY29uc3QgQ29udmVyc2F0aW9uVmlldyA9ICh7IGNvbnZlcnNhdGlvbiB9KSA9PiB7XHJcbiAgICBjb25zdCBtZXNzYWdlc1ZpZXdSZWYgPSB1c2VSZWYoKTtcclxuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuXHJcbiAgICBjb25zdCBsb2dnZWRJblVzZXIgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLnVzZXIpO1xyXG4gICAgY29uc3QgaXNMb2FkaW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLmxvYWRpbmcpO1xyXG5cclxuICAgIGNvbnN0IHJlY2VpdmluZ1VzZXIgPVxyXG4gICAgICAgIGNvbnZlcnNhdGlvbi5wYXJ0aWNpcGFudHMgJiZcclxuICAgICAgICAoU3RyaW5nKGNvbnZlcnNhdGlvbi5wYXJ0aWNpcGFudHNbMF0uX2lkKSAhPT0gbG9nZ2VkSW5Vc2VyLl9pZFxyXG4gICAgICAgICAgICA/IGNvbnZlcnNhdGlvbi5wYXJ0aWNpcGFudHNbMF1cclxuICAgICAgICAgICAgOiBjb252ZXJzYXRpb24ucGFydGljaXBhbnRzWzFdKTtcclxuXHJcbiAgICBjb25zdCByZWNlaXZlcklkID0gcmVjZWl2aW5nVXNlciAmJiByZWNlaXZpbmdVc2VyLl9pZDtcclxuICAgIGNvbnN0IGxvZ2dlZEluVXNlcklkID0gbG9nZ2VkSW5Vc2VyLl9pZDtcclxuXHJcbiAgICBjb25zdCBTRVJWRVJfVVJMID1cclxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9jZXNzLmVudi5QUk9EVUNUSU9OX1NFUlZFUl9VUkwgOiBwcm9jZXNzLmVudi5ERVZFTE9QTUVOVF9TRVJWRVJfVVJMO1xyXG5cclxuICAgIGNvbnN0IFtzb2NrZXQsIHNldFNvY2tldF0gPSB1c2VTdGF0ZSh7fSk7XHJcblxyXG4gICAgY29uc3QgW2lucHV0dGVkTWVzc2FnZSwgc2V0SW5wdXR0ZWRNZXNzYWdlXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW21lc3NhZ2VzLCBzZXRNZXNzYWdlc10gPSB1c2VTdGF0ZShbXSk7XHJcblxyXG4gICAgY29uc3QgbG9hZENvbnZlcnNhdGlvbiA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXHJcbiAgICAgICAgICAgIFJvdXRlcy5NZXNzYWdlLkdldENvbnZlcnNhdGlvbixcclxuICAgICAgICAgICAgeyByZWNlaXZlcklkOiByZWNlaXZpbmdVc2VyLl9pZCB9LFxyXG4gICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLk1lc3NhZ2UuU3VjY2Vzc0dldENvbnZlcnNhdGlvbixcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHNldE1lc3NhZ2VzKGRhdGEuY29udmVyc2F0aW9uLm1lc3NhZ2VzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvL0xvYWQgdGhlIGNvbnZlcnNhdGlvbiBtZXNzYWdlc1xyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoY29udmVyc2F0aW9uLnBhcnRpY2lwYW50cykge1xyXG4gICAgICAgICAgICBsb2FkQ29udmVyc2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2NvbnZlcnNhdGlvbl0pO1xyXG5cclxuICAgIC8vU2V0dXAgc29ja2V0IGNvbm5lY3Rpb25cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlY2VpdmluZ1VzZXIpIHtcclxuICAgICAgICAgICAgbGV0IGluaXRpYWxTb2NrZXQgPSBpbyhTRVJWRVJfVVJMLCB7IGF1dG9Db25uZWN0OiBmYWxzZSB9KTtcclxuXHJcbiAgICAgICAgICAgIGluaXRpYWxTb2NrZXQuYXV0aCA9IHsgaWQ6IGxvZ2dlZEluVXNlcklkIH07XHJcblxyXG4gICAgICAgICAgICBpbml0aWFsU29ja2V0Lm9uKEV2ZW50cy5NZXNzYWdlLCAoeyBtZXNzYWdlLCBzZW5kZXJJZCwgY3JlYXRlZEF0IH0pID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB0ZW1wTWVzc2FnZXMgPSBbLi4ubWVzc2FnZXNdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZVdhc1JlY2VpdmVkID0gc2VuZGVySWQgPT09IHJlY2VpdmVySWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZVdhc1JlY2VpdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcE1lc3NhZ2VzLnB1c2goeyB2YWx1ZTogbWVzc2FnZSwgc2VuZGVySWQsIGNyZWF0ZWRBdCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRNZXNzYWdlcyh0ZW1wTWVzc2FnZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGluaXRpYWxTb2NrZXQub24oRXZlbnRzLk1lc3NhZ2VGYWlsdXJlLCAoZXJyb3JNZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKGVycm9yTWVzc2FnZSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGluaXRpYWxTb2NrZXQuY29ubmVjdCgpO1xyXG4gICAgICAgICAgICBzZXRTb2NrZXQoaW5pdGlhbFNvY2tldCk7XHJcblxyXG4gICAgICAgICAgICBtZXNzYWdlc1ZpZXdSZWYuY3VycmVudC5zY3JvbGxUb3AgPSBtZXNzYWdlc1ZpZXdSZWYuY3VycmVudC5zY3JvbGxIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW21lc3NhZ2VzXSk7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0SW5wdXR0ZWRNZXNzYWdlKGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coaW5wdXR0ZWRNZXNzYWdlLCByZWNlaXZlcklkKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0dGVkTWVzc2FnZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCB0ZW1wTWVzc2FnZXMgPSBbLi4ubWVzc2FnZXNdO1xyXG4gICAgICAgICAgICB0ZW1wTWVzc2FnZXMucHVzaCh7IHZhbHVlOiBpbnB1dHRlZE1lc3NhZ2UsIHNlbmRlcklkOiBsb2dnZWRJblVzZXJJZCwgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpIH0pO1xyXG4gICAgICAgICAgICBzZXRNZXNzYWdlcyh0ZW1wTWVzc2FnZXMpO1xyXG5cclxuICAgICAgICAgICAgc29ja2V0LmVtaXQoRXZlbnRzLk1lc3NhZ2UsIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGlucHV0dGVkTWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVySWQsXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNldElucHV0dGVkTWVzc2FnZShcIlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb252ZXJzYXRpb24tdmlld1wiPlxyXG4gICAgICAgICAgICB7cmVjZWl2aW5nVXNlciAmJiAoXHJcbiAgICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3VycmVudENvbnZlcnNhdGlvbkluZm9cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFByb2ZpbGVQaWN0dXJlIGltYWdlPXtyZWNlaXZpbmdVc2VyLnByb2ZpbGVQaWN0dXJlfSBuYW1lPXtyZWNlaXZpbmdVc2VyLm5hbWV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT57cmVjZWl2aW5nVXNlciAmJiByZWNlaXZpbmdVc2VyLm5hbWV9PC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgeyFpc0xvYWRpbmcgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lc3NhZ2VzLXZpZXdcIiByZWY9e21lc3NhZ2VzVmlld1JlZn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge21lc3NhZ2VzLm1hcCgobXNnKSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZS1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuc2VuZGVySWQgIT09IGxvZ2dlZEluVXNlcklkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwibWVzc2FnZS1ib3ggcmVjZWl2aW5nLW1zZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwibWVzc2FnZS1ib3ggc2VuZGluZy1tc2dcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bXNnLnNlbmRlcklkICE9PSBsb2dnZWRJblVzZXJJZCAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U9e3JlY2VpdmluZ1VzZXIucHJvZmlsZVBpY3R1cmV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtyZWNlaXZpbmdVc2VyLm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtZXNzYWdlLWNvbnRlbnRcIj57bXNnLnZhbHVlfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cuc2VuZGVySWQgIT09IGxvZ2dlZEluVXNlcklkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwibWVzc2FnZS10aW1lc3RhbXAgcmVjZWl2aW5nLW1zZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwibWVzc2FnZS10aW1lc3RhbXAgc2VuZGluZy1tc2dcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmV3IERhdGUobXNnLmNyZWF0ZWRBdCkudG9Mb2NhbGVTdHJpbmcoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZC1tZXNzYWdlLWZvcm1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkIHN0eWxlPXt7IGZsZXg6IFwiNTAlXCIsIG92ZXJmbG93OiBcImhpZGRlblwiIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5NZXNzYWdlPC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtpbnB1dHRlZE1lc3NhZ2V9IG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0gb25DbGljaz17aGFuZGxlU3VibWl0fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Gb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkaW5nIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnZlcnNhdGlvblZpZXc7XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ2hhdHNWaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DaGF0c1ZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vQ2hhdHNWaWV3LnNjc3NcIjtcclxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlXCI7XHJcbmltcG9ydCB7IHNlbmRHZXRSZXF1ZXN0LCBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vSGVscGVyXCI7XHJcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcclxuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcclxuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IFNpZGVWaWV3IGZyb20gXCIuLi9TaWRlVmlldy9TaWRlVmlld1wiO1xyXG5pbXBvcnQgTG9hZGluZyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Mb2FkaW5nL0xvYWRpbmdcIjtcclxuXHJcbi8qKlxyXG4gKiBBIHZpZXcgZm9yIGRpc3BsYXlpbmcgdGhlIGNoYXRzIG9mIGEgdXNlclxyXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICovXHJcbmNvbnN0IENoYXRzVmlldyA9ICh7IHNldFNlbGVjdGVkQ29udmVyc2F0aW9uLCBjaGF0c1ZpZXdJc1Nob3dpbmcsIHNldENoYXRzVmlld0lzU2hvd2luZyB9KSA9PiB7XHJcbiAgICBjb25zdCBbY29udmVyc2F0aW9ucywgc2V0Q29udmVyc2F0aW9uc10gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCB1c2VyID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlci51c2VyKTtcclxuICAgIGNvbnN0IGlzTG9hZGluZyA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUubm90aWZpY2F0aW9uUmVkdWNlci5sb2FkaW5nKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIGNoYXQgZ2V0IHJlcXVlc3QuXHJcbiAgICAgKiBAYXV0aG9yIFN0YWNleSBQb3BlbmZvb3NlXHJcbiAgICAgKiBAZGF0ZSAgMDMvMTgvMjJcclxuICAgICAqL1xyXG4gICAgY29uc3QgcG9wdWxhdGVDb252ZXJzYXRpb25zID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHNlbmRQb3N0UmVxdWVzdChcclxuICAgICAgICAgICAgUm91dGVzLk1lc3NhZ2UuR2V0Q29udmVyc2F0aW9ucyxcclxuICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuTWVzc2FnZS5HZXRDb252ZXJzYXRpb25zLlN1Y2Nlc3MsXHJcbiAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICAgICAgICAgIHNldENvbnZlcnNhdGlvbnMoZGF0YS5jb252ZXJzYXRpb25zKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHBvcHVsYXRlQ29udmVyc2F0aW9ucygpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFNpZGVWaWV3XHJcbiAgICAgICAgICAgIHNldFNpZGVWaWV3SXNTaG93aW5nPXtzZXRDaGF0c1ZpZXdJc1Nob3dpbmd9XHJcbiAgICAgICAgICAgIHNpZGVWaWV3SXNTaG93aW5nPXtjaGF0c1ZpZXdJc1Nob3dpbmd9XHJcbiAgICAgICAgICAgIG5hbWVPZkNsYXNzPVwiY2hhdHMtdmlld1wiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICB7IWlzTG9hZGluZyA/IChcclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAge2NvbnZlcnNhdGlvbnMubWFwKChjaGF0KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJjaGF0SXRlbSBcIiArIChjaGF0LmFjdGl2ZSAmJiBcImNoYXRBY3RpdmVcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVyc2F0aW9ucy5mb3JFYWNoKChvdGhlckNoYXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJDaGF0LmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXQuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZENvbnZlcnNhdGlvbihjaGF0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDaGF0c1ZpZXdJc1Nob3dpbmcoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByb2ZpbGVQaWN0dXJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcoY2hhdC5wYXJ0aWNpcGFudHNbMF0uX2lkKSAhPT0gdXNlci5faWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2hhdC5wYXJ0aWNpcGFudHNbMF0ucHJvZmlsZVBpY3R1cmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY2hhdC5wYXJ0aWNpcGFudHNbMV0ucHJvZmlsZVBpY3R1cmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhjaGF0LnBhcnRpY2lwYW50c1swXS5faWQpICE9PSB1c2VyLl9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjaGF0LnBhcnRpY2lwYW50c1swXS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNoYXQucGFydGljaXBhbnRzWzFdLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1N0cmluZyhjaGF0LnBhcnRpY2lwYW50c1swXS5faWQpICE9PSB1c2VyLl9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNoYXQucGFydGljaXBhbnRzWzBdLm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjaGF0LnBhcnRpY2lwYW50c1sxXS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgICAgPExvYWRpbmcgLz5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICA8L1NpZGVWaWV3PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENoYXRzVmlldztcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vTWVzc2FnZS5zY3NzXCI7XG5pbXBvcnQgaW8gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcbmltcG9ydCBQYWdlIGZyb20gXCIuLi9QYWdlLmpzXCI7XG5pbXBvcnQgQ29udmVyc2F0aW9uVmlldyBmcm9tIFwiLi4vLi4vVmlld3MvTWVzc2FnZS9Db252ZXJzYXRpb25WaWV3XCI7XG5pbXBvcnQgQ2hhdHNWaWV3IGZyb20gXCIuLi8uLi9WaWV3cy9NZXNzYWdlL0NoYXRzVmlld1wiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcblxuaW1wb3J0IEZyaWVuZHNJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL1Blb3BsZVwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5cbmNvbnN0IEV2ZW50cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvRXZlbnRzLmpzXCIpO1xuXG5jb25zdCBTRVJWRVJfVVJMID0gXCJodHRwOi8vbG9jYWxob3N0OjUwMDBcIjtcblxuY29uc3QgTWVzc2FnZSA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IFtjaGF0c1ZpZXdJc1Nob3dpbmcsIHNldENoYXRzVmlld0lzU2hvd2luZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW3NlbGVjdGVkQ29udmVyc2F0aW9uLCBzZXRTZWxlY3RlZENvbnZlcnNhdGlvbl0gPSB1c2VTdGF0ZSh7fSk7XG4gICAgY29uc3QgaXNMb2dnZWRJbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIuaXNMb2dnZWRJbik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8UGFnZSBjdXJyZW50UGFnZT1cIm1lc3NhZ2VcIiB0b3BCYXI9e3RydWV9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXNzYWdlLXBhZ2VcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2UtdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgxPk1lc3NhZ2U8L2gxPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHtpc0xvZ2dlZEluID8gKFxuICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCBzcmM9XCIvc29ja2V0LmlvL3NvY2tldC5pby5qc1wiPjwvc2NyaXB0PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lc3NhZ2UtYXJlYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGF0c1ZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2VsZWN0ZWRDb252ZXJzYXRpb249e3NldFNlbGVjdGVkQ29udmVyc2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDaGF0c1ZpZXdJc1Nob3dpbmc9e3NldENoYXRzVmlld0lzU2hvd2luZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhdHNWaWV3SXNTaG93aW5nPXtjaGF0c1ZpZXdJc1Nob3dpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29udmVyc2F0aW9uVmlldyBjb252ZXJzYXRpb249e3NlbGVjdGVkQ29udmVyc2F0aW9ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3Vlc3QtbWVzc2FnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxPllvdSBhcmUgY3VycmVudGx5IGJyb3dzaW5nIFN0dWR5IFNwYWNlcyBhcyBhIGd1ZXN0ITwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2Ugc2lnbi11cCBvciBsb2ctaW4gdG8gYmUgYWJsZSB0byBtZXNzYWdlIHVzZXJzPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+RmVlbCBmcmVlIHRvIHVzZSBvdXIgc2VhcmNoIHRvb2wgdG8gZGlzY292ZXIgc3R1ZHkgZ3JvdXBzIGluIHlvdXIgYXJlYS48L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuLWNoYXRzLXZpZXctYnV0dG9uLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q2hhdHNWaWV3SXNTaG93aW5nKCFjaGF0c1ZpZXdJc1Nob3dpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEZyaWVuZHNJY29uIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvUGFnZT5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZTtcbiIsImltcG9ydCBcIi4vQXBwLnNjc3NcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanNcIjtcclxuaW1wb3J0IHsgUm91dGUsIEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBTd2l0Y2ggfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgeyBSZWRpcmVjdCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IHNpZ25Jbiwgc2lnbk91dCB9IGZyb20gXCIuL3N0YXRlL2FjdGlvbnNcIjtcclxuaW1wb3J0IFBvcHVwIGZyb20gXCIuL1ZpZXdzL1BvcHVwL1BvcHVwXCI7XHJcbmltcG9ydCBOb3RpZmljYXRpb24gZnJvbSBcIi4vVmlld3MvTm90aWZpY2F0aW9uL05vdGlmaWNhdGlvblwiO1xyXG5cclxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlcy5qc1wiO1xyXG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlcy5qc1wiO1xyXG5cclxuLy8gUEFHRVMuXHJcbmltcG9ydCBIb21lIGZyb20gXCIuL1BhZ2VzL0hvbWUvSG9tZS5qc1wiO1xyXG5pbXBvcnQgU3R1ZHkgZnJvbSBcIi4vUGFnZXMvU3R1ZHkvU3R1ZHkuanNcIjtcclxuaW1wb3J0IFZpZXdzIGZyb20gXCIuL1ZpZXdzL1ZpZXdzXCI7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSBcIi4vUGFnZXMvU2VhcmNoL1NlYXJjaFwiO1xyXG5pbXBvcnQgU3R1ZHlHcm91cCBmcm9tIFwiLi9QYWdlcy9TdHVkeUdyb3VwL1N0dWR5R3JvdXBcIjtcclxuaW1wb3J0IEFjY291bnQgZnJvbSBcIi4vUGFnZXMvQWNjb3VudC9BY2NvdW50XCI7XHJcbmltcG9ydCB7IHNlbmRHZXRSZXF1ZXN0IH0gZnJvbSBcIi4uL0hlbHBlclwiO1xyXG5pbXBvcnQgTWVzc2FnZSBmcm9tIFwiLi9QYWdlcy9NZXNzYWdlL01lc3NhZ2VcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIHRoZSByb290IHByZXNlbnRhdGlvbmFsIGNvbXBvbmVudCB0aGF0IHByb2Nlc3NlcyB1c2VyIGF1dGhlbnRpY2F0aW9uXHJcbiAqIGFuZCBtYW5hZ2VzIHRoZSBkaXNwbGF5IG9mIHRoZSBhcHBsaWNhdGlvblwicyBwYWdlcy5cclxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXIgYW5kIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgICAxMC8yMC8yMDIxXHJcbiAqL1xyXG5jb25zdCBBcHAgPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IGlzTG9nZ2VkSW4gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLmlzTG9nZ2VkSW4pO1xyXG4gICAgY29uc3QgW2hhc05vdE1vdW50ZWQsIHNldEhhc05vdE1vdW50ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG4gICAgY29uc3QgcG9wdXBJc1Nob3dpbmcgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnBvcHVwUmVkdWNlci5pc1Nob3dpbmcpO1xyXG4gICAgY29uc3Qgbm90aWZpY2F0aW9uSXNTaG93aW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLmlzU2hvd2luZyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgdGhlIHBhZ2UgaGFzIGZpbmlzaGVkIGxvYWRlZCBhbmQgcmVmcmVzaGVzIHRoZSBhdXRoZW50aWNhdGlvbiB0b2tlblxyXG4gICAgICogaWYgdGhlIHVzZXIgaXMgYWxyZWFkeSBsb2dnZWQgaW4uIFVzaW5nIGFuIGVtcHR5IGRlcGVuZGVuY3kgYXJyYXkgZW5zdXJlc1xyXG4gICAgICogdGhhdCB0aGlzIG9ubHkgcnVucyBvbiB1bm1vdW50LlxyXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICAgICAqIEBkYXRlICAgMTAvMjAvMjAyMVxyXG4gICAgICovXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldEhhc05vdE1vdW50ZWQodHJ1ZSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4oKTtcclxuICAgICAgICB9O1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyB0aGUgdXNlcidzIGF1dGhlbnRpY2F0aW9uIHRva2VuIGZvciBwZXJzaXN0ZW50IGxvZ2lucy5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAxMC8yMi8yMDIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4gPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGlzTG9nZ2VkSW4pIHtcclxuICAgICAgICAgICAgYXdhaXQgc2VuZEdldFJlcXVlc3QoXHJcbiAgICAgICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5VcGRhdGVBdXRoZW50aWNhdGlvblRva2VuLFxyXG4gICAgICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlN1Y2Nlc3NVcGRhdGVBdXRoZW50aWNhdGlvblRva2VuLFxyXG4gICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goc2lnbk91dCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGF1dGhlbnRpY2F0aW9uVG9rZW4sIGF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZSwgdXNlciB9ID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzaWduSW4oeyBhdXRoZW50aWNhdGlvblRva2VuLCBhdXRoZW50aWNhdGlvblRva2VuRXhwaXJhdGlvbkRhdGUsIHVzZXIgfSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Um91dGVyPlxyXG4gICAgICAgICAgICA8UG9wdXAgaXNTaG93aW5nPXtwb3B1cElzU2hvd2luZ30gaXNMb2dnZWRJbj17aXNMb2dnZWRJbn0gLz5cclxuICAgICAgICAgICAgPE5vdGlmaWNhdGlvbiBpc1Nob3dpbmc9e25vdGlmaWNhdGlvbklzU2hvd2luZ30gLz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxTd2l0Y2g+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtpc0xvZ2dlZEluID8gPFJlZGlyZWN0IHRvPVwiL3N0dWR5XCIgLz4gOiA8SG9tZSAvPn1cclxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aD1cIi92ZXJpZnkvOnZlcmlmaWNhdGlvblRva2VuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXsocHJvcHMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRTZXR1cFZpZXcgPSBWaWV3cy5Ib21lLkFjY291bnRTZXR1cDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0xvZ2dlZEluID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWRpcmVjdCB0bz1cIi9zdHVkeVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxIb21lIHsuLi5wcm9wc30gaG9tZVZpZXc9e2FjY291bnRTZXR1cFZpZXd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoPVwiL3ZlcmlmeUVtYWlsLzp2ZXJpZmljYXRpb25Ub2tlblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcj17KHByb3BzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50TG9naW5WaWV3ID0gVmlld3MuSG9tZS5Mb2dpbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0xvZ2dlZEluID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdHVkeSB7Li4ucHJvcHN9IGlzVmVyaWZ5aW5nRW1haWw9e3RydWV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxIb21lIHsuLi5wcm9wc30gaG9tZVZpZXc9e2FjY291bnRMb2dpblZpZXd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3N0dWR5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHVkeSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm91dGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvc2VhcmNoXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWFyY2ggLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL21lc3NhZ2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPE1lc3NhZ2UgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aD1cIi9ncm91cC86aWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXI9eyhwcm9wcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzTG9nZ2VkSW4gPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0dWR5R3JvdXAgey4uLnByb3BzfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVkaXJlY3QgdG89XCIvXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aD1cIi9hY2NvdW50XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXsocHJvcHMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0xvZ2dlZEluID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBY2NvdW50IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWRpcmVjdCB0bz1cIi9cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoPVwiKlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcj17KHByb3BzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPFJlZGlyZWN0IHRvPVwiL1wiIC8+O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L1N3aXRjaD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9Sb3V0ZXI+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXBwO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJpbXBvcnQgZGVmaW5lUHJvcGVydHkgZnJvbSBcIi4vZGVmaW5lUHJvcGVydHkuanNcIjtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMic7XG5cbi8qKlxuICogQWRhcHRlZCBmcm9tIFJlYWN0OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9tYXN0ZXIvcGFja2FnZXMvc2hhcmVkL2Zvcm1hdFByb2RFcnJvck1lc3NhZ2UuanNcbiAqXG4gKiBEbyBub3QgcmVxdWlyZSB0aGlzIG1vZHVsZSBkaXJlY3RseSEgVXNlIG5vcm1hbCB0aHJvdyBlcnJvciBjYWxscy4gVGhlc2UgbWVzc2FnZXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGVycm9yIGNvZGVzXG4gKiBkdXJpbmcgYnVpbGQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgcmV0dXJuIFwiTWluaWZpZWQgUmVkdXggZXJyb3IgI1wiICsgY29kZSArIFwiOyB2aXNpdCBodHRwczovL3JlZHV4LmpzLm9yZy9FcnJvcnM/Y29kZT1cIiArIGNvZGUgKyBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciBcIiArICd1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzLiAnO1xufVxuXG4vLyBJbmxpbmVkIHZlcnNpb24gb2YgdGhlIGBzeW1ib2wtb2JzZXJ2YWJsZWAgcG9seWZpbGxcbnZhciAkJG9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSB8fCAnQEBvYnNlcnZhYmxlJztcbn0pKCk7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vLyBJbmxpbmVkIC8gc2hvcnRlbmVkIHZlcnNpb24gb2YgYGtpbmRPZmAgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9raW5kLW9mXG5mdW5jdGlvbiBtaW5pS2luZE9mKHZhbCkge1xuICBpZiAodmFsID09PSB2b2lkIDApIHJldHVybiAndW5kZWZpbmVkJztcbiAgaWYgKHZhbCA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzeW1ib2wnOlxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSByZXR1cm4gJ2FycmF5JztcbiAgaWYgKGlzRGF0ZSh2YWwpKSByZXR1cm4gJ2RhdGUnO1xuICBpZiAoaXNFcnJvcih2YWwpKSByZXR1cm4gJ2Vycm9yJztcbiAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGN0b3JOYW1lKHZhbCk7XG5cbiAgc3dpdGNoIChjb25zdHJ1Y3Rvck5hbWUpIHtcbiAgICBjYXNlICdTeW1ib2wnOlxuICAgIGNhc2UgJ1Byb21pc2UnOlxuICAgIGNhc2UgJ1dlYWtNYXAnOlxuICAgIGNhc2UgJ1dlYWtTZXQnOlxuICAgIGNhc2UgJ01hcCc6XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG4gIH0gLy8gb3RoZXJcblxuXG4gIHJldHVybiB0eXBlLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGN0b3JOYW1lKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbC5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJyA/IHZhbC5jb25zdHJ1Y3Rvci5uYW1lIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvcih2YWwpIHtcbiAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiB2YWwubWVzc2FnZSA9PT0gJ3N0cmluZycgJiYgdmFsLmNvbnN0cnVjdG9yICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3Iuc3RhY2tUcmFjZUxpbWl0ID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIHRydWU7XG4gIHJldHVybiB0eXBlb2YgdmFsLnRvRGF0ZVN0cmluZyA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLmdldERhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5zZXREYXRlID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBraW5kT2YodmFsKSB7XG4gIHZhciB0eXBlT2ZWYWwgPSB0eXBlb2YgdmFsO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdHlwZU9mVmFsID0gbWluaUtpbmRPZih2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVPZlZhbDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMCkgOiAnSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjY3JlYXRpbmctYS1zdG9yZS13aXRoLWVuaGFuY2VycyBmb3IgYW4gZXhhbXBsZS4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEpIDogXCJFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihlbmhhbmNlcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyKSA6IFwiRXhwZWN0ZWQgdGhlIHJvb3QgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKHJlZHVjZXIpICsgXCInXCIpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzKSA6ICdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQpIDogXCJFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihsaXN0ZW5lcikgKyBcIidcIik7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNikgOiAnWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgIG5leHRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNykgOiBcIkFjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiBJbnN0ZWFkLCB0aGUgYWN0dWFsIHR5cGUgd2FzOiAnXCIgKyBraW5kT2YoYWN0aW9uKSArIFwiJy4gWW91IG1heSBuZWVkIHRvIGFkZCBtaWRkbGV3YXJlIHRvIHlvdXIgc3RvcmUgc2V0dXAgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIG90aGVyIHZhbHVlcywgc3VjaCBhcyAncmVkdXgtdGh1bmsnIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBmdW5jdGlvbnMuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNtaWRkbGV3YXJlIGFuZCBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNi1hc3luYy1sb2dpYyN1c2luZy10aGUtcmVkdXgtdGh1bmstbWlkZGxld2FyZSBmb3IgZXhhbXBsZXMuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg4KSA6ICdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuIFlvdSBtYXkgaGF2ZSBtaXNzcGVsbGVkIGFuIGFjdGlvbiB0eXBlIHN0cmluZyBjb25zdGFudC4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOSkgOiAnUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEwKSA6IFwiRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YobmV4dFJlZHVjZXIpKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTEpIDogXCJFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKG9ic2VydmVyKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCIvKiogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSBwb3RlbnRpYWwgXCJleHRyYSBhcmd1bWVudFwiIHZhbHVlIHRvIGJlIGluamVjdGVkIGxhdGVyLFxyXG4gKiBhbmQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiB0aGUgdGh1bmsgbWlkZGxld2FyZSB0aGF0IHVzZXMgdGhhdCB2YWx1ZVxyXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIC8vIFN0YW5kYXJkIFJlZHV4IG1pZGRsZXdhcmUgZGVmaW5pdGlvbiBwYXR0ZXJuOlxuICAvLyBTZWU6IGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI3dyaXRpbmctY3VzdG9tLW1pZGRsZXdhcmVcbiAgdmFyIG1pZGRsZXdhcmUgPSBmdW5jdGlvbiBtaWRkbGV3YXJlKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAvLyBUaGUgdGh1bmsgbWlkZGxld2FyZSBsb29rcyBmb3IgYW55IGZ1bmN0aW9ucyB0aGF0IHdlcmUgcGFzc2VkIHRvIGBzdG9yZS5kaXNwYXRjaGAuXG4gICAgICAgIC8vIElmIHRoaXMgXCJhY3Rpb25cIiBpcyByZWFsbHkgYSBmdW5jdGlvbiwgY2FsbCBpdCBhbmQgcmV0dXJuIHRoZSByZXN1bHQuXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gSW5qZWN0IHRoZSBzdG9yZSdzIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgbWV0aG9kcywgYXMgd2VsbCBhcyBhbnkgXCJleHRyYSBhcmdcIlxuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHBhc3MgdGhlIGFjdGlvbiBkb3duIHRoZSBtaWRkbGV3YXJlIGNoYWluIGFzIHVzdWFsXG5cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBtaWRkbGV3YXJlO1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTsgLy8gQXR0YWNoIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIHNvIHVzZXJzIGNhbiBjcmVhdGUgYSBjdXN0b21pemVkIHZlcnNpb25cbi8vIHdpdGggd2hhdGV2ZXIgXCJleHRyYSBhcmdcIiB0aGV5IHdhbnQgdG8gaW5qZWN0IGludG8gdGhlaXIgdGh1bmtzXG5cbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwiaW1wb3J0IHsgYXV0aENvbnN0YW50cyB9IGZyb20gXCIuLi9jb25zdGFudHMvY29uc3RhbnRzXCI7XG5cbi8vIExvYWQgdGhlIHVzZXIgaW50byB0aGUgc3RhdGUgaWYgaXQgaXMgYWxyZWFkeSBsb2dnZWQgaW5cbmxldCB1c2VyID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJcIikpO1xuY29uc3QgY3VycmVudERhdGUgPSBEYXRlLm5vdygpO1xuY29uc3Qgand0RXhwaXJhdGlvbkRhdGUgPSBuZXcgRGF0ZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZVwiKSk7XG5jb25zdCB1c2VySXNMb2dnZWRJbiA9IGN1cnJlbnREYXRlIDwgand0RXhwaXJhdGlvbkRhdGU7XG5jb25zdCBpbml0aWFsU3RhdGUgPSB1c2VyID8geyBpc0xvZ2dlZEluOiB1c2VySXNMb2dnZWRJbiwgdXNlciB9IDogeyBpc0xvZ2dlZEluOiBmYWxzZSB9O1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHJlZHVjZXIgZm9yIGFsbCBhY3Rpb25zIHJlbGF0aW5nIHRvIGF1dGhlbnRpY2F0aW9uXG5cbiAqIEBwYXJhbSAge29iamVjdH0gc3RhdGUgVGhlIGluaXRhbCBzdGF0ZSBvZiB0aGUgcmVkdWNlclxuICogQHBhcmFtICB7U3RyaW5nfSBhY3Rpb24gVGhlIGFjdGlvbiBmcm9tIHBvcHVwQ29uc3RhbnRzIHRoYXQgdHJhbnNmb3JtcyB0aGUgc3RhdGUgaW50byB0aGUgbmV4dCBzdGF0ZVxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDExLzA5LzIwMjFcbiAqL1xuY29uc3QgYXV0aFJlZHVjZXIgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgLy9TaWduIHRoZSB1c2VyIGluIGFuZCBzYXZlIHRoZSB1c2VyIHRvIGxvY2FsIHN0b3JhZ2VcbiAgICAgICAgY2FzZSBhdXRoQ29uc3RhbnRzLlNJR05fSU46XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInRva2VuXCIsIGFjdGlvbi5wYXlsb2FkLmF1dGhlbnRpY2F0aW9uVG9rZW4pO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJhdXRoZW50aWNhdGlvblRva2VuRXhwaXJhdGlvbkRhdGVcIiwgYWN0aW9uLnBheWxvYWQuYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidXNlclwiLCBKU09OLnN0cmluZ2lmeShhY3Rpb24ucGF5bG9hZC51c2VyKSk7XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdXNlcjogYWN0aW9uLnBheWxvYWQudXNlciwgaXNMb2dnZWRJbjogdHJ1ZSB9O1xuXG4gICAgICAgIGNhc2UgYXV0aENvbnN0YW50cy5TSUdOX09VVDpcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHVzZXI6IHt9LCBpc0xvZ2dlZEluOiBmYWxzZSB9O1xuXG4gICAgICAgIGNhc2UgYXV0aENvbnN0YW50cy5DUkVBVEVfQUNDT1VOVDpcbiAgICAgICAgICAgIC8vIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidW52ZXJpZmllZFVzZXJcIiwgSlNPTi5zdHJpbmdpZnkoYWN0aW9uLnBheWxvYWQudW52ZXJpZmllZFVzZXIpKTtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1bnZlcmlmaWVkVXNlcjogYWN0aW9uLnBheWxvYWQudW52ZXJpZmllZFVzZXIgfTtcblxuICAgICAgICBjYXNlIGF1dGhDb25zdGFudHMuU0VUX1VTRVI6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdXNlcjogYWN0aW9uLnBheWxvYWQudXNlciB9O1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYXV0aFJlZHVjZXI7XG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcbmltcG9ydCBhdXRoUmVkdWNlciBmcm9tIFwiLi9hdXRoUmVkdWNlclwiO1xuaW1wb3J0IHBvcHVwUmVkdWNlciBmcm9tIFwiLi9wb3B1cFJlZHVjZXJcIjtcbmltcG9ydCBzdHVkeUdyb3Vwc1JlZHVjZXIgZnJvbSBcIi4vc3R1ZHlHcm91cHNSZWR1Y2VyXCI7XG5pbXBvcnQgbm90aWZpY2F0aW9uUmVkdWNlciBmcm9tIFwiLi9ub3RpZmljYXRpb25SZWR1Y2VyXCI7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjb21iaW5lcyBhbGwgdGhlIHJlZHVjZXJzIHNvIHRoZXkgYWxsIGNhbiBiZSByZWZlcmVuY2VkIGZyb20gdGhpcyBmaWxlXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTEvMDkvMjAyMVxuICovXG5jb25zdCBhbGxSZWR1Y2VycyA9IGNvbWJpbmVSZWR1Y2Vycyh7XG4gICAgYXV0aFJlZHVjZXIsXG4gICAgcG9wdXBSZWR1Y2VyLFxuICAgIHN0dWR5R3JvdXBzUmVkdWNlcixcbiAgICBub3RpZmljYXRpb25SZWR1Y2VyXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYWxsUmVkdWNlcnM7XG4iLCJpbXBvcnQgeyBwb3B1cENvbnN0YW50cyB9IGZyb20gXCIuLi9jb25zdGFudHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgdmlld3MgZnJvbSBcIi4uLy4uL1ZpZXdzL1ZpZXdzXCI7XG4vKipcbiAqIFRoaXMgaXMgdGhlIHJlZHVjZXIgZm9yIGFsbCBhY3Rpb25zIHJlbGF0aW5nIHRvIHBvcHVzXG4gKiBAcGFyYW0gIHtvYmplY3R9IHN0YXRlIFRoZSBpbml0YWwgc3RhdGUgb2YgdGhlIHJlZHVjZXJcbiAqIEBwYXJhbSAge1N0cmluZ30gYWN0aW9uIFRoZSBhY3Rpb24gZnJvbSBwb3B1cENvbnN0YW50cyB0aGF0IHRyYW5zZm9ybXMgdGhlIHN0YXRlIGludG8gdGhlIG5leHQgc3RhdGVcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMS8xOC8yMDIxXG4gKi9cbmNvbnN0IHBvcHVwUmVkdWNlciA9IChzdGF0ZSA9IHsgdmlldzogXCJcIiwgaXNTaG93aW5nOiBmYWxzZSwgcGF5bG9hZDoge30sIHNob3dUb3A6IHRydWUgfSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfQ1JFQVRFX1NUVURZX0dST1VQX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHZpZXc6IHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuQ3JlYXRlLCBpc1Nob3dpbmc6IHRydWUsIHBheWxvYWQ6IHt9LCBzaG93VG9wOiB0cnVlIH07XG4gICAgICAgIGNhc2UgcG9wdXBDb25zdGFudHMuU0hPV19KT0lOX1NUVURZX0dST1VQX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3cy5Qb3B1cC5TdHVkeUdyb3VwLkpvaW4sXG4gICAgICAgICAgICAgICAgaXNTaG93aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIHNob3dUb3A6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGNhc2UgcG9wdXBDb25zdGFudHMuU0hPV19FRElUX1NUVURZX0dST1VQX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3cy5Qb3B1cC5TdHVkeUdyb3VwLkVkaXQsXG4gICAgICAgICAgICAgICAgaXNTaG93aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIHNob3dUb3A6IHRydWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5TSE9XX0NSRUFURV9NRUVUSU5HX1NUVURZX0dST1VQX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3cy5Qb3B1cC5TdHVkeUdyb3VwLkNyZWF0ZU1lZXRpbmcsXG4gICAgICAgICAgICAgICAgaXNTaG93aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIHNob3dUb3A6IHRydWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5TSE9XX0NSRUFURV9QT1NUX1NUVURZX0dST1VQX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3cy5Qb3B1cC5TdHVkeUdyb3VwLkNyZWF0ZVBvc3QsXG4gICAgICAgICAgICAgICAgaXNTaG93aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIHNob3dUb3A6IHRydWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5TSE9XX1ZJRVdfUE9TVF9TVFVEWV9HUk9VUF9QT1BVUDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgdmlldzogdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5WaWV3UG9zdCxcbiAgICAgICAgICAgICAgICBpc1Nob3dpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1RvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogYWN0aW9uLnBheWxvYWRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5TSE9XX1ZJRVdfTUVFVElOR1NfU1RVRFlfR1JPVVBfUE9QVVA6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuVmlld01lZXRpbmdzLFxuICAgICAgICAgICAgICAgIGlzU2hvd2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93VG9wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfVklFV19NRU1CRVJfUE9QVVA6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuVmlld01lbWJlcixcbiAgICAgICAgICAgICAgICBpc1Nob3dpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1RvcDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogYWN0aW9uLnBheWxvYWRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5TSE9XX0lOUFVUX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHZpZXc6IHZpZXdzLlBvcHVwLklucHV0LCBpc1Nob3dpbmc6IHRydWUsIHBheWxvYWQ6IGFjdGlvbi5wYXlsb2FkLCBzaG93VG9wOiB0cnVlIH07XG5cbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5TSE9XX0NPTkZJUk1BVElPTl9QT1BVUDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgdmlldzogdmlld3MuUG9wdXAuQ29uZmlybWF0aW9uLFxuICAgICAgICAgICAgICAgIGlzU2hvd2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgICAgICAgICBzaG93VG9wOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfUkVQT1JUX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3cy5Qb3B1cC5SZXBvcnQsXG4gICAgICAgICAgICAgICAgaXNTaG93aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIHNob3dUb3A6IHRydWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5DTE9TRV9QT1BVUDpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1Nob3dpbmc6IGZhbHNlLCB2aWV3OiBcIlwiIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgcG9wdXBSZWR1Y2VyO1xuIiwiaW1wb3J0IHsgc3R1ZHlHcm91cHNDb25zdGFudHMgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHJlZHVjZXIgZm9yIGFsbCBhY3Rpb25zIHJlbGF0aW5nIHRvIHN0dWR5IGdyb3Vwc1xuICogQSByZWR1Y2VyIGlzIGhvdyBhY3Rpb25zIHRyYW5zZm9ybSB0aGUgc3RhdGUgaW50byB0aGUgbmV4dCBzdGF0ZVxuICogQHBhcmFtICB7b2JqZWN0fSBzdGF0ZSBUaGUgaW5pdGFsIHN0YXRlIG9mIHRoZSByZWR1Y2VyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGFjdGlvbiBUaGUgYWN0aW9uIGZyb20gcG9wdXBDb25zdGFudHMgdGhhdCB0cmFuc2Zvcm1zIHRoZSBzdGF0ZSBpbnRvIHRoZSBuZXh0IHN0YXRlXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTIvMjAvMjAyMVxuICovXG5jb25zdCBzdHVkeUdyb3Vwc1JlZHVjZXIgPSAoXG4gICAgc3RhdGUgPSB7XG4gICAgICAgIHN0dWR5R3JvdXBzOiBbXSxcbiAgICAgICAgc2VhcmNoOiBbXVxuICAgIH0sXG4gICAgYWN0aW9uXG4pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2Ugc3R1ZHlHcm91cHNDb25zdGFudHMuQUREX1NUVURZX0dST1VQOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHN0dWR5R3JvdXBzOiBbLi4uc3RhdGUuc3R1ZHlHcm91cHMsIGFjdGlvbi5wYXlsb2FkLmdyb3VwXSB9O1xuICAgICAgICBjYXNlIHN0dWR5R3JvdXBzQ29uc3RhbnRzLkxPQURfU1RVRFlfR1JPVVBTOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHN0dWR5R3JvdXBzOiBhY3Rpb24ucGF5bG9hZC5ncm91cHMgfTtcblxuICAgICAgICBjYXNlIHN0dWR5R3JvdXBzQ29uc3RhbnRzLlBPUFVMQVRFX1NFQVJDSDpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBzZWFyY2g6IFsuLi5hY3Rpb24ucGF5bG9hZC5ncm91cHNdIH07XG5cbiAgICAgICAgY2FzZSBzdHVkeUdyb3Vwc0NvbnN0YW50cy5DTEVBUl9TVFVEWV9HUk9VUFM6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3R1ZHlHcm91cHM6IFtdIH07XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzdHVkeUdyb3Vwc1JlZHVjZXI7XG4iLCJpbXBvcnQgeyBub3RpZmljYXRpb25Db25zdGFudHMgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xuXG5pbXBvcnQgbm90aWZpY2F0aW9uVHlwZXMgZnJvbSBcIi4uLy4uL1ZpZXdzL05vdGlmaWNhdGlvbi9ub3RpZmljYXRpb25UeXBlc1wiO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSByZWR1Y2VyIGZvciBhbGwgYWN0aW9ucyByZWxhdGluZyB0byBub3RpZmljYXRpb25zIChlcnJvcnMsIGluZm8sIHN1Y2Nlc3MpXG4gKiBAcGFyYW0gIHtvYmplY3R9IHN0YXRlIFRoZSBpbml0YWwgc3RhdGUgb2YgdGhlIHJlZHVjZXJcbiAqIEBwYXJhbSAge1N0cmluZ30gYWN0aW9uIFRoZSBhY3Rpb24gZnJvbSBub3RpZmljYXRpb25Db25zdGFudHMgdGhhdCB0cmFuc2Zvcm1zIHRoZSBzdGF0ZSBpbnRvIHRoZSBuZXh0IHN0YXRlXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMS8yNy8yMDIyXG4gKi9cbmNvbnN0IG5vdGlmaWNhdGlvblJlZHVjZXIgPSAoc3RhdGUgPSB7IGlzU2hvd2luZzogZmFsc2UsIGxvYWRpbmc6IGZhbHNlIH0sIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBub3RpZmljYXRpb25Db25zdGFudHMuU0hPV19FUlJPUl9OT1RJRklDQVRJT046XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdHlwZTogbm90aWZpY2F0aW9uVHlwZXMuRVJST1IsIGlzU2hvd2luZzogdHJ1ZSwgbWVzc2FnZTogYWN0aW9uLnBheWxvYWQubWVzc2FnZSB9O1xuXG4gICAgICAgIGNhc2Ugbm90aWZpY2F0aW9uQ29uc3RhbnRzLlNIT1dfU1VDQ0VTU19OT1RJRklDQVRJT046XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvblR5cGVzLlNVQ0NFU1MsXG4gICAgICAgICAgICAgICAgaXNTaG93aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGFjdGlvbi5wYXlsb2FkLm1lc3NhZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2Ugbm90aWZpY2F0aW9uQ29uc3RhbnRzLkhJREVfTk9USUZJQ0FUSU9OOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGlzU2hvd2luZzogZmFsc2UgfTtcblxuICAgICAgICBjYXNlIG5vdGlmaWNhdGlvbkNvbnN0YW50cy5TVEFSVF9MT0FESU5HOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGxvYWRpbmc6IHRydWUgfTtcblxuICAgICAgICBjYXNlIG5vdGlmaWNhdGlvbkNvbnN0YW50cy5TVE9QX0xPQURJTkc6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbG9hZGluZzogZmFsc2UgfTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG5vdGlmaWNhdGlvblJlZHVjZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHAuanNcIjtcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UgfSBmcm9tIFwicmVkdXhcIjtcbmltcG9ydCB0aHVuayBmcm9tIFwicmVkdXgtdGh1bmtcIjtcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgYWxsUmVkdWNlcnMgZnJvbSBcIi4vc3RhdGUvcmVkdWNlcnNcIjtcblxuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vU2VydmVyL1ZhbGlkYXRvci5qc1wiO1xuXG5jb25zdCBwZXJzaXN0aWVudFN0YXRlID0ge307XG5jb25zdCByZWR1eERldlRvb2xzQXJlSW5zdGFsbGVkID1cbiAgICBWYWxpZGF0b3IuaXNEZWZpbmVkKHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fKSAmJlxuICAgIFZhbGlkYXRvci5pc0RlZmluZWQod2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18oKSk7XG5leHBvcnQgY29uc3Qgc3RvcmUgPSByZWR1eERldlRvb2xzQXJlSW5zdGFsbGVkXG4gICAgPyBjcmVhdGVTdG9yZShcbiAgICAgICAgICBhbGxSZWR1Y2VycyxcbiAgICAgICAgICBwZXJzaXN0aWVudFN0YXRlLFxuICAgICAgICAgIGNvbXBvc2UoYXBwbHlNaWRkbGV3YXJlKHRodW5rKSwgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18oKSlcbiAgICAgIClcbiAgICA6IGNyZWF0ZVN0b3JlKGFsbFJlZHVjZXJzLCBwZXJzaXN0aWVudFN0YXRlKTtcblxuUmVhY3RET00ucmVuZGVyKFxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICAgICAgICAgIDxBcHAgLz5cbiAgICAgICAgPC9SZWFjdC5TdHJpY3RNb2RlPlxuICAgIDwvUHJvdmlkZXI+LFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKVxuKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwib2JqIiwiX19lc01vZHVsZSIsImFicyIsIk1hdGgiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJPYmplY3QiLCJhc3NpZ24iLCJ0cmltIiwidmFsdWUiLCJyZXBsYWNlIiwicGF0dGVybiIsInJlcGxhY2VtZW50IiwiaW5kZXhvZiIsInNlYXJjaCIsImluZGV4T2YiLCJpbmRleCIsImNoYXJDb2RlQXQiLCJiZWdpbiIsImVuZCIsInNsaWNlIiwibGVuZ3RoIiwiYXJyYXkiLCJwdXNoIiwibGluZSIsImNvbHVtbiIsInBvc2l0aW9uIiwiY2hhcmFjdGVyIiwiY2hhcmFjdGVycyIsIm5vZGUiLCJyb290IiwicGFyZW50IiwidHlwZSIsInByb3BzIiwiY2hpbGRyZW4iLCJyZXR1cm4iLCJjb3B5IiwicHJldiIsIm5leHQiLCJwZWVrIiwiY2FyZXQiLCJ0b2tlbiIsImFsbG9jIiwiZGVhbGxvYyIsImRlbGltaXQiLCJkZWxpbWl0ZXIiLCJ3aGl0ZXNwYWNlIiwiZXNjYXBpbmciLCJjb3VudCIsImNvbW1lbnRlciIsImlkZW50aWZpZXIiLCJNUyIsIk1PWiIsIldFQktJVCIsIkNPTU1FTlQiLCJERUNMQVJBVElPTiIsIktFWUZSQU1FUyIsInNlcmlhbGl6ZSIsImNhbGxiYWNrIiwib3V0cHV0IiwiaSIsInN0cmluZ2lmeSIsImVsZW1lbnQiLCJqb2luIiwicHJlZml4IiwiaGFzaCIsImNvbXBpbGUiLCJwYXJzZSIsInJ1bGUiLCJydWxlcyIsInJ1bGVzZXRzIiwicHNldWRvIiwicG9pbnRzIiwiZGVjbGFyYXRpb25zIiwib2Zmc2V0IiwiYXRydWxlIiwicHJvcGVydHkiLCJwcmV2aW91cyIsInZhcmlhYmxlIiwic2Nhbm5pbmciLCJhbXBlcnNhbmQiLCJyZWZlcmVuY2UiLCJjb21tZW50IiwiZGVjbGFyYXRpb24iLCJydWxlc2V0IiwicG9zdCIsInNpemUiLCJqIiwiayIsIngiLCJ5IiwieiIsImlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyIsImZpeGVkRWxlbWVudHMiLCJXZWFrTWFwIiwiY29tcGF0IiwiaXNJbXBsaWNpdFJ1bGUiLCJnZXQiLCJzZXQiLCJwYXJzZWQiLCJ0b1J1bGVzIiwiZ2V0UnVsZXMiLCJwYXJlbnRSdWxlcyIsInJlbW92ZUxhYmVsIiwiZGVmYXVsdFN0eWxpc1BsdWdpbnMiLCJtYXAiLCJleGVjIiwibWF0Y2giLCJvcHRpb25zIiwia2V5Iiwic3NyU3R5bGVzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJmb3JFYWNoIiwiY2FsbCIsImdldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInNldEF0dHJpYnV0ZSIsImNvbnRhaW5lciIsIl9pbnNlcnQiLCJzdHlsaXNQbHVnaW5zIiwiaW5zZXJ0ZWQiLCJub2Rlc1RvSHlkcmF0ZSIsImF0dHJpYiIsInNwbGl0IiwiY3VycmVudFNoZWV0IiwiY29sbGVjdGlvbiIsImZpbmFsaXppbmdQbHVnaW5zIiwiaW5zZXJ0Iiwic2VyaWFsaXplciIsImNvbmNhdCIsInNlbGVjdG9yIiwic2VyaWFsaXplZCIsInNoZWV0Iiwic2hvdWxkQ2FjaGUiLCJzdHlsZXMiLCJjYWNoZSIsIm5hbWUiLCJub25jZSIsInNwZWVkeSIsInByZXBlbmQiLCJpbnNlcnRpb25Qb2ludCIsInJlZ2lzdGVyZWQiLCJoeWRyYXRlIiwiZm4iLCJjcmVhdGUiLCJhcmciLCJ1bmRlZmluZWQiLCJFbW90aW9uQ2FjaGVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIkhUTUxFbGVtZW50IiwiUHJvdmlkZXIiLCJ3aXRoRW1vdGlvbkNhY2hlIiwiZnVuYyIsImZvcndhcmRSZWYiLCJyZWYiLCJ1c2VDb250ZXh0IiwiVGhlbWVDb250ZXh0Iiwic3RyIiwiaCIsImxlbiIsInRvU3RyaW5nIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJXZWJraXRMaW5lQ2xhbXAiLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJoeXBoZW5hdGVSZWdleCIsImFuaW1hdGlvblJlZ2V4IiwiaXNDdXN0b21Qcm9wZXJ0eSIsImlzUHJvY2Vzc2FibGVWYWx1ZSIsInByb2Nlc3NTdHlsZU5hbWUiLCJzdHlsZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsInByb2Nlc3NTdHlsZVZhbHVlIiwicDEiLCJwMiIsImN1cnNvciIsImhhbmRsZUludGVycG9sYXRpb24iLCJtZXJnZWRQcm9wcyIsImludGVycG9sYXRpb24iLCJfX2Vtb3Rpb25fc3R5bGVzIiwiYW5pbSIsInN0cmluZyIsImlzQXJyYXkiLCJfa2V5IiwiaW50ZXJwb2xhdGVkIiwiX2kiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwicHJldmlvdXNDdXJzb3IiLCJyZXN1bHQiLCJjYWNoZWQiLCJsYWJlbFBhdHRlcm4iLCJzZXJpYWxpemVTdHlsZXMiLCJhcmdzIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJsYXN0SW5kZXgiLCJpZGVudGlmaWVyTmFtZSIsIlN0eWxlU2hlZXQiLCJfdGhpcyIsInRoaXMiLCJfaW5zZXJ0VGFnIiwidGFnIiwiYmVmb3JlIiwidGFncyIsIm5leHRTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImluc2VydEJlZm9yZSIsImlzU3BlZWR5IiwiY3RyIiwiX3Byb3RvIiwibm9kZXMiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNoZWV0Rm9yVGFnIiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiZSIsImZsdXNoIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZ2V0UmVnaXN0ZXJlZFN0eWxlcyIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiaW5zZXJ0U3R5bGVzIiwiaXNTdHJpbmdUYWciLCJjdXJyZW50IiwiY29tcG9zZUNsYXNzZXMiLCJzbG90cyIsImdldFV0aWxpdHlDbGFzcyIsImNsYXNzZXMiLCJrZXlzIiwic2xvdCIsInJlZHVjZSIsImFjYyIsImRlZmF1bHRHZW5lcmF0b3IiLCJjb21wb25lbnROYW1lIiwiZ2VuZXJhdGUiLCJjb25maWd1cmUiLCJnZW5lcmF0b3IiLCJyZXNldCIsImNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciIsImdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmciLCJhY3RpdmUiLCJjaGVja2VkIiwiY29tcGxldGVkIiwiZGlzYWJsZWQiLCJlcnJvciIsImV4cGFuZGVkIiwiZm9jdXNlZCIsImZvY3VzVmlzaWJsZSIsInJlcXVpcmVkIiwic2VsZWN0ZWQiLCJnZW5lcmF0ZVV0aWxpdHlDbGFzcyIsImdlbmVyYXRlVXRpbGl0eUNsYXNzZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfanN4UnVudGltZSIsIl9kZWZhdWx0IiwiZGVmYXVsdCIsImpzeCIsImQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJfdXRpbHMiLCJjcmVhdGVTdmdJY29uIiwiU3ltYm9sIiwiZm9yIiwiYmxhY2siLCJ3aGl0ZSIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJfZXhjbHVkZWQiLCJsaWdodCIsInRleHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGl2aWRlciIsImJhY2tncm91bmQiLCJwYXBlciIsImFjdGlvbiIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWRPcGFjaXR5IiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZGlzYWJsZWRPcGFjaXR5IiwiZm9jdXMiLCJmb2N1c09wYWNpdHkiLCJhY3RpdmF0ZWRPcGFjaXR5IiwiZGFyayIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsImRpcmVjdGlvbiIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwiaGFzT3duUHJvcGVydHkiLCJtYWluIiwiY2FzZUFsbENhcHMiLCJ0ZXh0VHJhbnNmb3JtIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwicGFsZXR0ZSIsInR5cG9ncmFwaHkiLCJfcmVmIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwiZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodFJlZ3VsYXIiLCJmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodEJvbGQiLCJodG1sRm9udFNpemUiLCJhbGxWYXJpYW50cyIsInB4VG9SZW0iLCJweFRvUmVtMiIsIm90aGVyIiwiY29lZiIsImJ1aWxkVmFyaWFudCIsImxldHRlclNwYWNpbmciLCJjYXNpbmciLCJyb3VuZCIsInZhcmlhbnRzIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTEiLCJib2R5MiIsImJ1dHRvbiIsImNhcHRpb24iLCJvdmVybGluZSIsImRlZXBtZXJnZSIsImNsb25lIiwiY3JlYXRlU2hhZG93IiwicHgiLCJtb2JpbGVTdGVwcGVyIiwic3BlZWREaWFsIiwiYXBwQmFyIiwiZHJhd2VyIiwibW9kYWwiLCJzbmFja2JhciIsInRvb2x0aXAiLCJtaXhpbnMiLCJtaXhpbnNJbnB1dCIsInBhbGV0dGVJbnB1dCIsInRyYW5zaXRpb25zIiwidHJhbnNpdGlvbnNJbnB1dCIsInR5cG9ncmFwaHlJbnB1dCIsIm1vZGUiLCJjb250cmFzdFRocmVzaG9sZCIsImdldERlZmF1bHRQcmltYXJ5IiwiZ2V0RGVmYXVsdFNlY29uZGFyeSIsImdldERlZmF1bHRFcnJvciIsImluZm8iLCJnZXREZWZhdWx0SW5mbyIsInN1Y2Nlc3MiLCJnZXREZWZhdWx0U3VjY2VzcyIsIndhcm5pbmciLCJnZXREZWZhdWx0V2FybmluZyIsImdldENvbnRyYXN0VGV4dCIsImF1Z21lbnRDb2xvciIsImNvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIkVycm9yIiwiSlNPTiIsImNvbnRyYXN0VGV4dCIsIm1vZGVzIiwiY29tbW9uIiwiZ3JleSIsImNyZWF0ZVBhbGV0dGUiLCJzeXN0ZW1UaGVtZSIsIm11aVRoZW1lIiwiYnJlYWtwb2ludHMiLCJzcGFjaW5nIiwidG9vbGJhciIsIm1pbkhlaWdodCIsInVwIiwic2hhZG93cyIsImNyZWF0ZVRyYW5zaXRpb25zIiwiYXJndW1lbnQiLCJlYXNpbmciLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiZWFzZUluIiwic2hhcnAiLCJkdXJhdGlvbiIsInNob3J0ZXN0Iiwic2hvcnRlciIsInNob3J0Iiwic3RhbmRhcmQiLCJjb21wbGV4IiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwiZm9ybWF0TXMiLCJtaWxsaXNlY29uZHMiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJoZWlnaHQiLCJjb25zdGFudCIsImlucHV0VHJhbnNpdGlvbnMiLCJtZXJnZWRFYXNpbmciLCJtZXJnZWREdXJhdGlvbiIsImR1cmF0aW9uT3B0aW9uIiwiZWFzaW5nT3B0aW9uIiwiZGVsYXkiLCJhbmltYXRlZFByb3AiLCJpc0VtcHR5IiwicHJvcHNUb0NsYXNzS2V5IiwidmFyaWFudCIsImNsYXNzS2V5Iiwic29ydCIsImNhcGl0YWxpemUiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsInNob3VsZEZvcndhcmRQcm9wIiwicHJvcCIsInN5c3RlbURlZmF1bHRUaGVtZSIsImNyZWF0ZVRoZW1lIiwicm9vdFNob3VsZEZvcndhcmRQcm9wIiwic2xvdFNob3VsZEZvcndhcmRQcm9wIiwic3R5bGVkIiwiaW5wdXQiLCJkZWZhdWx0VGhlbWUiLCJpbnB1dE9wdGlvbnMiLCJjb21wb25lbnRTbG90Iiwic2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIiwic2tpcFN4IiwiaW5wdXRTa2lwU3giLCJvdmVycmlkZXNSZXNvbHZlciIsInNob3VsZEZvcndhcmRQcm9wT3B0aW9uIiwiZGVmYXVsdFN0eWxlZFJlc29sdmVyIiwibGFiZWwiLCJtdWlTdHlsZWRSZXNvbHZlciIsInN0eWxlQXJnIiwiZXhwcmVzc2lvbnMiLCJleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUiLCJzdHlsZXNBcmciLCJfX2Vtb3Rpb25fcmVhbCIsInRoZW1lIiwidGhlbWVJbnB1dCIsInRyYW5zZm9ybWVkU3R5bGVBcmciLCJzdHlsZU92ZXJyaWRlcyIsImNvbXBvbmVudHMiLCJnZXRTdHlsZU92ZXJyaWRlcyIsInJlc29sdmVkU3R5bGVPdmVycmlkZXMiLCJlbnRyaWVzIiwic2xvdEtleSIsInNsb3RTdHlsZSIsIl90aGVtZSRjb21wb25lbnRzIiwiX3RoZW1lJGNvbXBvbmVudHMkbmFtIiwib3duZXJTdGF0ZSIsInZhcmlhbnRzU3R5bGVzIiwidGhlbWVWYXJpYW50cyIsInRoZW1lVmFyaWFudCIsImlzTWF0Y2giLCJ2YXJpYW50c1Jlc29sdmVyIiwiZGVmaW5pdGlvbiIsInN0eWxlIiwiZ2V0VmFyaWFudFN0eWxlcyIsInN0eWxlRnVuY3Rpb25TeCIsIm51bU9mQ3VzdG9tRm5zQXBwbGllZCIsInBsYWNlaG9sZGVycyIsImZpbGwiLCJfcmVmMiIsIndpdGhDb25maWciLCJjcmVhdGVTdHlsZWQiLCJwYXJhbXMiLCJkZWZhdWx0UHJvcHMiLCJwcm9wTmFtZSIsInJlc29sdmVQcm9wcyIsImdldFRoZW1lUHJvcHMiLCJ1c2VUaGVtZSIsImdldFN2Z0ljb25VdGlsaXR5Q2xhc3MiLCJTdmdJY29uUm9vdCIsIl90aGVtZSR0cmFuc2l0aW9ucyIsIl90aGVtZSR0cmFuc2l0aW9ucyRjciIsIl90aGVtZSR0cmFuc2l0aW9uczIiLCJfdGhlbWUkdHJhbnNpdGlvbnMyJGQiLCJfdGhlbWUkdHlwb2dyYXBoeSIsIl90aGVtZSR0eXBvZ3JhcGh5JHB4VCIsIl90aGVtZSR0eXBvZ3JhcGh5MiIsIl90aGVtZSR0eXBvZ3JhcGh5MiRweCIsIl90aGVtZSR0eXBvZ3JhcGh5MyIsIl90aGVtZSR0eXBvZ3JhcGh5MyRweCIsIl90aGVtZSRwYWxldHRlJG93bmVyUyIsIl90aGVtZSRwYWxldHRlIiwiX3RoZW1lJHBhbGV0dGUkb3duZXJTMiIsIl90aGVtZSRwYWxldHRlMiIsIl90aGVtZSRwYWxldHRlMiRhY3RpbyIsIl90aGVtZSRwYWxldHRlMyIsIl90aGVtZSRwYWxldHRlMyRhY3RpbyIsInVzZXJTZWxlY3QiLCJ3aWR0aCIsImRpc3BsYXkiLCJ0cmFuc2l0aW9uIiwiaW5oZXJpdCIsInNtYWxsIiwibWVkaXVtIiwibGFyZ2UiLCJTdmdJY29uIiwiaW5Qcm9wcyIsInVzZVRoZW1lUHJvcHMiLCJjb21wb25lbnQiLCJodG1sQ29sb3IiLCJpbmhlcml0Vmlld0JveCIsInRpdGxlQWNjZXNzIiwidmlld0JveCIsIm1vcmUiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsImFzIiwiZm9jdXNhYmxlIiwicm9sZSIsIm11aU5hbWUiLCJwYXRoIiwiZGlzcGxheU5hbWUiLCJDb21wb25lbnQiLCJ2YWxpZGF0b3IiLCJyZWFzb24iLCJjb21wb25lbnROYW1lSW5FcnJvciIsImdsb2JhbElkIiwiaWRPdmVycmlkZSIsImRlZmF1bHRJZCIsInNldERlZmF1bHRJZCIsImlkIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJtdWlOYW1lcyIsInJlYWN0UHJvcHNSZWdleCIsInRlc3QiLCJ0ZXN0T21pdFByb3BzT25TdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25Db21wb25lbnQiLCJnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzIiwiaXNSZWFsIiwib3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wIiwiX19lbW90aW9uX2ZvcndhcmRQcm9wIiwiTm9vcCIsIm5ld1N0eWxlZCIsInRhcmdldENsYXNzTmFtZSIsImJhc2VUYWciLCJfX2Vtb3Rpb25fYmFzZSIsInRhcmdldCIsImRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsInNob3VsZFVzZUFzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJTdHlsZWQiLCJ3IiwiZmluYWxUYWciLCJjbGFzc0ludGVycG9sYXRpb25zIiwiVCIsImZpbmFsU2hvdWxkRm9yd2FyZFByb3AiLCJuZXdQcm9wcyIsImVsZSIsInBvc3NpYmx5U3R5bGVFbGVtZW50IiwiRnJhZ21lbnQiLCJ3aXRoQ29tcG9uZW50IiwibmV4dFRhZyIsIm5leHRPcHRpb25zIiwidGFnTmFtZSIsInZhbHVlcyIsInhzIiwic20iLCJtZCIsImxnIiwieGwiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJpdGVtIiwiYnJlYWtwb2ludCIsImNzc0tleSIsImNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCIsImJyZWFrcG9pbnRzSW5wdXQiLCJfYnJlYWtwb2ludHNJbnB1dCRrZXkiLCJyZW1vdmVVbnVzZWRCcmVha3BvaW50cyIsImJyZWFrcG9pbnRLZXlzIiwiYnJlYWtwb2ludE91dHB1dCIsImNsYW1wIiwibWluIiwibWF4IiwiZGVjb21wb3NlQ29sb3IiLCJjaGFyQXQiLCJzdWJzdHIiLCJyZSIsIlJlZ0V4cCIsImNvbG9ycyIsIm4iLCJwYXJzZUludCIsImhleFRvUmdiIiwibWFya2VyIiwic3Vic3RyaW5nIiwiY29sb3JTcGFjZSIsInNoaWZ0IiwicGFyc2VGbG9hdCIsInJlY29tcG9zZUNvbG9yIiwiZ2V0THVtaW5hbmNlIiwicmdiIiwicyIsImwiLCJhIiwiZiIsImhzbFRvUmdiIiwidmFsIiwiTnVtYmVyIiwidG9GaXhlZCIsImdldENvbnRyYXN0UmF0aW8iLCJmb3JlZ3JvdW5kIiwibHVtQSIsImx1bUIiLCJhbHBoYSIsImRhcmtlbiIsImNvZWZmaWNpZW50IiwibGlnaHRlbiIsImJvcmRlclJhZGl1cyIsInNwYWNpbmdJbnB1dCIsInNoYXBlIiwic2hhcGVJbnB1dCIsInVuaXQiLCJzdGVwIiwiZG93biIsImJldHdlZW4iLCJzdGFydCIsImVuZEluZGV4Iiwib25seSIsIm5vdCIsImtleUluZGV4IiwiY3JlYXRlQnJlYWtwb2ludHMiLCJtdWkiLCJ0cmFuc2Zvcm0iLCJhcmdzSW5wdXQiLCJjcmVhdGVTcGFjaW5nIiwiaGFuZGxlcnMiLCJmaWx0ZXJQcm9wcyIsIm1lcmdlIiwicHJvcFR5cGVzIiwiZ2V0Qm9yZGVyIiwiYm9yZGVyIiwidGhlbWVLZXkiLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwidHJhbnNmb3JtZXIiLCJjc3NQcm9wZXJ0eSIsImdhcCIsImNvbHVtbkdhcCIsInJvd0dhcCIsIm1heFdpZHRoIiwiX3Byb3BzJHRoZW1lIiwiX3Byb3BzJHRoZW1lJGJyZWFrcG9pIiwiX3Byb3BzJHRoZW1lJGJyZWFrcG9pMiIsIm1pbldpZHRoIiwibWF4SGVpZ2h0IiwiZm9udFN0eWxlIiwidGV4dEFsaWduIiwiZmlsdGVyUHJvcHNNYXBwaW5nIiwiYm9yZGVycyIsImZsZXhib3giLCJncmlkIiwicG9zaXRpb25zIiwic2l6aW5nIiwic3R5bGVGdW5jdGlvbk1hcHBpbmciLCJwcm9wVG9TdHlsZUZ1bmN0aW9uIiwic3R5bGVGbk5hbWUiLCJpbnB1dFByb3BzIiwic3R5bGVGdW5jdGlvbiIsInByb3BlcnRpZXMiLCJtIiwicCIsImRpcmVjdGlvbnMiLCJ0IiwiciIsImIiLCJhbGlhc2VzIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0Q3NzUHJvcGVydGllcyIsImRpciIsIm1lbW9pemUiLCJtYXJnaW5LZXlzIiwicGFkZGluZ0tleXMiLCJzcGFjaW5nS2V5cyIsImNyZWF0ZVVuYXJ5VW5pdCIsImRlZmF1bHRWYWx1ZSIsInRoZW1lU3BhY2luZyIsImNyZWF0ZVVuYXJ5U3BhY2luZyIsImdldFZhbHVlIiwidHJhbnNmb3JtZWQiLCJjc3NQcm9wZXJ0aWVzIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwicmVzb2x2ZUNzc1Byb3BlcnR5IiwibWFyZ2luIiwicGFkZGluZyIsImdldFBhdGgiLCJ0aGVtZU1hcHBpbmciLCJwcm9wVmFsdWVGaW5hbCIsInVzZXJWYWx1ZSIsInN4IiwidHJhdmVyc2UiLCJzeElucHV0Iiwic3hPYmplY3QiLCJlbXB0eUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHNLZXlzIiwiY3NzIiwic3R5bGVLZXkiLCJtYXliZUZuIiwiYnJlYWtwb2ludHNWYWx1ZXMiLCJvYmplY3RzIiwiYWxsS2V5cyIsIm9iamVjdCIsInVuaW9uIiwiU2V0IiwiZXZlcnkiLCJvYmplY3RzSGF2ZVNhbWVLZXlzIiwiY29udGV4dFRoZW1lIiwidXNlVGhlbWVXaXRob3V0RGVmYXVsdCIsInRvVXBwZXJDYXNlIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiZnVuY3MiLCJkZWJvdW5jZSIsIndhaXQiLCJ0aW1lb3V0IiwiZGVib3VuY2VkIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyIiwiaXNQbGFpbk9iamVjdCIsImNvbnN0cnVjdG9yIiwic291cmNlIiwiZm9ybWF0TXVpRXJyb3JNZXNzYWdlIiwiY29kZSIsInVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm93bmVyRG9jdW1lbnQiLCJvd25lcldpbmRvdyIsImRlZmF1bHRWaWV3Iiwid2luZG93Iiwic2V0UmVmIiwidXNlQ29udHJvbGxlZCIsImNvbnRyb2xsZWQiLCJkZWZhdWx0UHJvcCIsInN0YXRlIiwiaXNDb250cm9sbGVkIiwidmFsdWVTdGF0ZSIsInNldFZhbHVlIiwibmV3VmFsdWUiLCJ1c2VFdmVudENhbGxiYWNrIiwidXNlRm9ya1JlZiIsInJlZkEiLCJyZWZCIiwicmVmVmFsdWUiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQiLCJoYWRLZXlib2FyZEV2ZW50IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkiLCJpbnB1dFR5cGVzV2hpdGVsaXN0IiwidGVsIiwiZW1haWwiLCJwYXNzd29yZCIsIm51bWJlciIsImRhdGUiLCJtb250aCIsIndlZWsiLCJ0aW1lIiwiZGF0ZXRpbWUiLCJoYW5kbGVLZXlEb3duIiwiZXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsInVzZUlzRm9jdXNWaXNpYmxlIiwiZG9jIiwiYWRkRXZlbnRMaXN0ZW5lciIsImlzRm9jdXNWaXNpYmxlUmVmIiwib25Gb2N1cyIsIm1hdGNoZXMiLCJyZWFkT25seSIsImlzQ29udGVudEVkaXRhYmxlIiwiZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkiLCJpc0ZvY3VzVmlzaWJsZSIsIm9uQmx1ciIsIkVtaXR0ZXIiLCJtaXhpbiIsIm9uIiwiX2NhbGxiYWNrcyIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYiIsImNhbGxiYWNrcyIsInNwbGljZSIsImVtaXQiLCJlbWl0UmVzZXJ2ZWQiLCJsaXN0ZW5lcnMiLCJoYXNMaXN0ZW5lcnMiLCJ1dGlscyIsInNldHRsZSIsImNvb2tpZXMiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImRlZmF1bHRzIiwiQ2FuY2VsIiwiY29uZmlnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbkNhbmNlbGVkIiwicmVxdWVzdERhdGEiLCJkYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwiZG9uZSIsImNhbmNlbFRva2VuIiwidW5zdWJzY3JpYmUiLCJzaWduYWwiLCJpc0Zvcm1EYXRhIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwidW5lc2NhcGUiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImVyciIsIm9wZW4iLCJtZXRob2QiLCJwYXJhbXNTZXJpYWxpemVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwidHJhbnNpdGlvbmFsIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwieHNyZkhlYWRlck5hbWUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaXNVbmRlZmluZWQiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsIiwiYWJvcnQiLCJzdWJzY3JpYmUiLCJhYm9ydGVkIiwic2VuZCIsImJpbmQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJleHRlbmQiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJWRVJTSU9OIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJpc0F4aW9zRXJyb3IiLCJtZXNzYWdlIiwiX19DQU5DRUxfXyIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlIiwidGhlbiIsIl9saXN0ZW5lcnMiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwidGhyb3dJZlJlcXVlc3RlZCIsImxpc3RlbmVyIiwiYyIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsInZhbGlkYXRvcnMiLCJpbnRlcmNlcHRvcnMiLCJhc3NlcnRPcHRpb25zIiwic2lsZW50SlNPTlBhcnNpbmciLCJib29sZWFuIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicnVuV2hlbiIsInN5bmNocm9ub3VzIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwiY2hhaW4iLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJnZXRVcmkiLCJ1c2UiLCJlamVjdCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsImVuaGFuY2VFcnJvciIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidHJhbnNmb3JtUmVxdWVzdCIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJjb25maWdWYWx1ZSIsInZhbGlkYXRlU3RhdHVzIiwiZm5zIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwicHJvY2VzcyIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImlzU3RyZWFtIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJidWZmZXIiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzT2JqZWN0IiwicmF3VmFsdWUiLCJwYXJzZXIiLCJlbmNvZGVyIiwiaXNTdHJpbmciLCJzdHJpbmdpZnlTYWZlbHkiLCJzdHJpY3RKU09OUGFyc2luZyIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidGhpc0FyZyIsImVuY29kZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImhhc2htYXJrSW5kZXgiLCJyZWxhdGl2ZVVSTCIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwicGF5bG9hZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJocmVmIiwicHJvdG9jb2wiLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJyZXF1ZXN0VVJMIiwibm9ybWFsaXplZE5hbWUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsImFyciIsInRoaW5nIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwidmVyc2lvbiIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwib3B0cyIsImNvbnNvbGUiLCJ3YXJuIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Z1bmN0aW9uIiwiRm9ybURhdGEiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsInBpcGUiLCJVUkxTZWFyY2hQYXJhbXMiLCJwcm9kdWN0IiwiYXNzaWduVmFsdWUiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJDb25uZWN0IiwiRGlzY29ubmVjdCIsIkludmFsaWRVc2VySWQiLCJNZXNzYWdlIiwiTWVzc2FnZUZhaWx1cmUiLCJJblBlcnNvbiIsIk1peGVkIiwiT25saW5lIiwiQW5ub3VuY2VtZW50IiwiRGlzY3Vzc2lvbiIsIlF1ZXN0aW9uIiwiUHJvYmxlbSIsIk1lZXRpbmciLCJBbnkiLCJIaXN0b3J5IiwiTGl0ZXJhdHVyZSIsIlNjaWVuY2UiLCJQYXJ0T2ZEYXkiLCJBbSIsIlBtIiwiVGltZXMiLCJob3VyIiwibWludXRlIiwiVGltZSIsInBhcnRPZkRheSIsInRpbWVTdHJpbmciLCJjb2xvbkluZGV4IiwicGFydE9mRGF5SW5kZXgiLCJvdGhlclRpbWUiLCJob3Vyc01hdGNoIiwibWludXRlc01hdGNoIiwicGFydHNPZkRheU1hdGNoIiwiZmlyc3RUaW1lIiwiaXNBZnRlciIsImZpcnN0SG91ciIsImZpcnN0TWludXRlIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsInN0YXJ0VGltZUlzVmFsaWQiLCJlbmRUaW1lSXNWYWxpZCIsIkRheXMiLCJNb25kYXkiLCJUdWVzZGF5IiwiV2VkbmVzZGF5IiwiVGh1cnNkYXkiLCJGcmlkYXkiLCJTYXR1cmRheSIsIlN1bmRheSIsIk1lZXRpbmdGcmVxdWVuY2llcyIsIkRhaWx5IiwiTW9udGhseSIsIk9uZVRpbWUiLCJXZWVrbHkiLCJZZWFybHkiLCJBY2NvdW50IiwiRXJyb3JDaGFuZ2luZ0VtYWlsIiwiRXJyb3JDaGFuZ2luZ1Bhc3N3b3JkIiwiRXJyb3JDcmVhdGVBY2NvdW50IiwiRXJyb3JEZWxldGVBY2NvdW50IiwiRXJyb3JJbnZhbGlkUGFzc3dvcmRJbnB1dCIsIkVycm9yU2VuZGluZ0VtYWlsIiwiRXJyb3JTZXR0aW5nVG9rZW4iLCJFcnJvclVwbG9hZFByb2ZpbGVQaWN0dXJlIiwiRW1haWxTZW50IiwiTm90T3ZlcjE4IiwiSW52YWxpZEVtYWlsIiwiSW5jb3JyZWN0UGFzc3dvcmQiLCJJbnZhbGlkQWNjb3VudElucHV0IiwiU3VjY2Vzc0FjY291bnRDcmVhdGVkIiwiU3VjY2Vzc0FjY291bnREZWxldGVkIiwiU3VjY2Vzc0FjY291bnRTZXR1cCIsIlN1Y2Nlc3NDaGFuZ2luZ0VtYWlsIiwiU3VjY2Vzc0NoYW5naW5nUGFzc3dvcmQiLCJTdWNjZXNzTG9naW4iLCJTdWNjZXNzVXBkYXRlQXV0aGVudGljYXRpb25Ub2tlbiIsIlVudmVyaWZpZWRVc2VyV2FzRm91bmQiLCJVc2VyQWxyZWFkeUV4aXN0cyIsIlVzZXJOb3RGb3VuZCIsIlBhc3N3b3Jkc011c3RNYXRjaCIsIlBhc3N3b3JkVG9vU2hvcnQiLCJJbmFjdGl2ZUFjY291bnQiLCJFcnJvckFkZENvbnZlcnNhdGlvbiIsIkVycm9yQ29udmVyc2F0aW9uRXhpc3RzIiwiRXJyb3JHZXRDb252ZXJzYXRpb24iLCJFcnJvckdldFJlY2VpdmVyIiwiRXJyb3JDcmVhdGVDb252ZXJzYXRpb24iLCJHZXRDb252ZXJzYXRpb25zIiwiU3VjY2VzcyIsIlN1Y2Nlc3NHZXRDb252ZXJzYXRpb24iLCJTdWNjZXNzQ3JlYXRlQ29udmVyc2F0aW9uIiwiU3R1ZHlHcm91cCIsIkFkZE9uZVRpbWVNZWV0aW5nIiwiSW52YWxpZElucHV0IiwiQ3JlYXRlUG9zdCIsIkludmFsaWRBdHRhY2htZW50IiwiRXJyb3JDcmVhdGVTdHVkeUdyb3VwIiwiRXJyb3JEZWxldGVTdHVkeUdyb3VwIiwiRXJyb3JEZWxldGVNZWV0aW5nIiwiRXJyb3JFZGl0TWVldGluZyIsIkVycm9yR2V0U3R1ZHlHcm91cCIsIkVycm9yR3JvdXBJc1ByaXZhdGUiLCJFcnJvckxlYXZlU3R1ZHlHcm91cCIsIkVycm9ySm9pblN0dWR5R3JvdXAiLCJFcnJvclJlbW92ZVVzZXIiLCJFcnJvclJlbW92ZVN0dWR5R3JvdXAiLCJJbnZhbGlkRWRpdFN0dWR5R3JvdXAiLCJTdHVkeUdyb3VwSXNOb3RBY3RpdmUiLCJNZWV0aW5nTm90Rm91bmQiLCJTdHVkeUdyb3VwTm90Rm91bmQiLCJTdWNjZXNzRGVsZXRlTWVldGluZyIsIlN1Y2Nlc3NTdHVkeUdyb3VwQ3JlYXRlZCIsIlN1Y2Nlc3NTdHVkeUdyb3VwRGVsZXRlZCIsIlN1Y2Nlc3NTdHVkeUdyb3VwRWRpdGVkIiwiU3VjY2Vzc1N0dWR5R3JvdXBKb2luZWQiLCJTdWNjZXNzU3R1ZHlHcm91cExlZnQiLCJTdWNjZXNzU3R1ZHlHcm91cFJldHJpZXZlZCIsIlN1Y2Nlc3NTdHVkeUdyb3Vwc1JldHJpZXZlZCIsIkVycm9yR2V0dGluZ1NlYXJjaFJlc3VsdHMiLCJVc2VyQWxyZWFkeUpvaW5lZCIsIlVzZXJOb3RBc3NvY2lhdGVkV2l0aFNjaG9vbE9mU3R1ZHlHcm91cCIsIlVzZXJOb3RJblN0dWR5R3JvdXAiLCJVc2VyTm90T3duZXIiLCJFcnJvck51bGxTdHVkeUdyb3VwSW5wdXQiLCJTZXRSZWN1cnJpbmdNZWV0aW5nIiwiUmVwb3J0IiwiRW1wdHlGaWVsZCIsIkNoYW5nZUVtYWlsIiwiQ2hhbmdlUGFzc3dvcmQiLCJDcmVhdGVBY2NvdW50IiwiRGVsZXRlIiwiR2V0VW52ZXJpZmllZFVzZXIiLCJMb2dpbiIsIlNldHVwQWNjb3VudCIsIlVwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4iLCJWZXJpZnlFbWFpbENoYW5nZSIsIkdldENvbnZlcnNhdGlvbiIsIkNyZWF0ZUNvbnZlcnNhdGlvbiIsIlNlbmRSZXBvcnQiLCJTdGF0aWNSZXNvdXJjZXMiLCJJbmRleCIsIlNlYXJjaCIsIkdldFNlYXJjaFJlc3VsdHMiLCJDcmVhdGVTdHVkeUdyb3VwIiwiRGVsZXRlTWVldGluZyIsIkRlbGV0ZVN0dWR5R3JvdXAiLCJFZGl0U3R1ZHlHcm91cCIsIkVkaXRNZWV0aW5nIiwiR2V0VXNlclN0dWR5R3JvdXBzIiwiR2V0U3R1ZHlHcm91cCIsIkpvaW5TdHVkeUdyb3VwIiwiTGVhdmVTdHVkeUdyb3VwIiwiUmVzcG9uc2VNZXNzYWdlcyIsInJlcXVpcmUiLCJWYWxpZGF0b3IiLCJuZXh0TWlkZGxld2FyZUZ1bmN0aW9uIiwiaW5wdXRJc1ZhbGlkIiwibmV3RW1haWwiLCJib2R5IiwidmFsaWRhdGVFbWFpbCIsImpzb24iLCJjb25maXJtUGFzc3dvcmQiLCJwYXNzd29yZF9jb25maXJtYXRpb24iLCJ0aXRsZSIsImNhdGVnb3J5IiwiZ3JvdXBDb2xvciIsImlzT25saW5lR3JvdXAiLCJpc1R1dG9yR3JvdXAiLCJzdWJqZWN0IiwiY291cnNlIiwiZGF5IiwiZGV0YWlscyIsInJvb21OdW1iZXIiLCJmcmVxdWVuY3kiLCJhcmVhQ29kZSIsImN1cnJlbnRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiQmFja29mZiIsIm1zIiwiZmFjdG9yIiwiaml0dGVyIiwiYXR0ZW1wdHMiLCJwb3ciLCJyYW5kIiwicmFuZG9tIiwiZGV2aWF0aW9uIiwiZmxvb3IiLCJzZXRNaW4iLCJzZXRNYXgiLCJzZXRKaXR0ZXIiLCJ0b1ZhbCIsIm1peCIsInRtcCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9rIiwiY3NzTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwiZGVjb2RlIiwicXMiLCJxcnkiLCJwYWlycyIsInBhaXIiLCJuYW1lcyIsInNyYyIsInF1ZXJ5IiwidXJpIiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsInBhdGhOYW1lcyIsInF1ZXJ5S2V5IiwiJDAiLCIkMSIsIiQyIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJiYSIsImNhIiwiZGEiLCJlYSIsImFkZCIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJCIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsIm9hIiwicGEiLCJxYSIsIm1hIiwiaXNOYU4iLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkUiLCJNYSIsIkthIiwiaXRlcmF0b3IiLCJMYSIsIk5hIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlFhIiwiX3JlbmRlciIsIlJhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJjb25maWd1cmFibGUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiJGEiLCJhYiIsImJiIiwiZWIiLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJwYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicWIiLCJncmlkQXJlYSIsImxpbmVDbGFtcCIsInJiIiwic2IiLCJ0YiIsInNldFByb3BlcnR5IiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJiYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJNYXAiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsInRjIiwidmMiLCJ3YyIsImxhbmVQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiY2x6MzIiLCJiZCIsImNkIiwibG9nIiwiTE4yIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwidWMiLCJqZCIsImtkIiwibGQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwicmFuZ2UiLCJtZSIsIm5lIiwib2UiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIk1lIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsIkciLCIkZSIsImhhcyIsImFmIiwiYmYiLCJjZiIsImRmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJOYiIsInUiLCJxIiwiZWYiLCJmZiIsInBhcmVudFdpbmRvdyIsImdmIiwiaGYiLCJKIiwiSyIsIlEiLCJMIiwiamUiLCJjaGFyIiwia2UiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJwZiIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJIIiwiSSIsIkNmIiwiTSIsIk4iLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsIk8iLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsIkFnIiwiQmciLCJDZyIsIkEiLCJDIiwiRGciLCJFZyIsIkZnIiwicmVmcyIsIkdnIiwiS2ciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJIZyIsIklnIiwiSmciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIk1nIiwidXBkYXRlciIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlBnIiwiUWciLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJUZyIsIlVnIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZG9jdW1lbnRFbGVtZW50IiwiZmgiLCJnaCIsImhoIiwiUCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJ3aCIsInhoIiwiUiIsIlMiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJ1c2VTdGF0ZSIsImdldFNuYXBzaG90IiwidXNlRWZmZWN0Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsImNlaWwiLCJvaiIsInBqIiwiWCIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJJbmZpbml0eSIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsIldqIiwiWGoiLCJwaW5nQ2FjaGUiLCJZaiIsIlpqIiwidmEiLCJhayIsImJrIiwiZGsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJrayIsImxrIiwibWsiLCJuayIsIm9rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJoayIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJmb3JtIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwibyIsImxvYWRlZCIsIndyaXRhYmxlIiwiUmVmZXJlbmNlRXJyb3IiLCJfX3Byb3RvX18iLCJmaWxlcyIsInNldFByb3RvdHlwZU9mIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJvbmxvYWQiLCJmaWxlIiwib25Eb25lIiwib25DaGFuZ2UiLCJoYW5kbGVDaGFuZ2UiLCJydW4iLCJmdW4iLCJuZXh0VGljayIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIk5PREVfRU5WIiwiZnJhbWVzVG9Qb3AiLCJpc1JlYWN0V2FybmluZyIsIl9fc2VsZiIsIl9fc291cmNlIiwiX3N0b3JlIiwidmFsaWRhdGVkIiwiX3NlbGYiLCJmcmVlemUiLCJfIiwiY3JlYXRlRmFjdG9yeSIsImNsb25lQW5kUmVwbGFjZUtleSIsImNsb25lRWxlbWVudCIsImlzVmFsaWRFbGVtZW50IiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsIkZ1bmN0aW9uIiwiY2hpbGRJRHMiLCJnZXREaXNwbGF5TmFtZSIsImdldEVsZW1lbnQiLCJnZXRPd25lcklEIiwib25TZXRDaGlsZHJlbiIsInBhcmVudElEIiwib25CZWZvcmVNb3VudENvbXBvbmVudCIsInVwZGF0ZUNvdW50Iiwib25CZWZvcmVVcGRhdGVDb21wb25lbnQiLCJvbk1vdW50Q29tcG9uZW50Iiwib25VcGRhdGVDb21wb25lbnQiLCJvblVubW91bnRDb21wb25lbnQiLCJwdXJnZVVubW91bnRlZENvbXBvbmVudHMiLCJfcHJldmVudFB1cmdpbmciLCJnZXRDdXJyZW50U3RhY2tBZGRlbmR1bSIsImdldE5hbWUiLCJfZGVidWdJRCIsImdldFN0YWNrQWRkZW5kdW1CeUlEIiwiZ2V0UGFyZW50SUQiLCJnZXRDaGlsZElEcyIsImdldFNvdXJjZSIsImdldFRleHQiLCJnZXRVcGRhdGVDb3VudCIsImdldFJvb3RJRHMiLCJnZXRSZWdpc3RlcmVkSURzIiwicHVzaE5vblN0YW5kYXJkV2FybmluZ1N0YWNrIiwicmVhY3RTdGFjayIsInBvcE5vblN0YW5kYXJkV2FybmluZ1N0YWNrIiwicmVhY3RTdGFja0VuZCIsInNldFN0YXRlIiwiZW5xdWV1ZUNhbGxiYWNrIiwiZm9yY2VVcGRhdGUiLCJyZXBsYWNlU3RhdGUiLCJQdXJlQ29tcG9uZW50IiwidW5pcXVlS2V5IiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJjaGlsZENvbnRleHQiLCJfX3JlYWN0QXV0b0JpbmRQYWlycyIsImF1dG9iaW5kIiwiX19yZWFjdEJvdW5kQ29udGV4dCIsIl9fcmVhY3RCb3VuZE1ldGhvZCIsIl9fcmVhY3RCb3VuZEFyZ3VtZW50cyIsInN0YXRpY3MiLCJnZXRJbml0aWFsU3RhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJfX2lzTW91bnRlZCIsIl9fZGlkV2FybklzTW91bnRlZCIsIl9pc01vY2tGdW5jdGlvbiIsImNvbXBvbmVudFNob3VsZFVwZGF0ZSIsImNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMiLCJlc2NhcGUiLCJpbnN0YW5jZVBvb2wiLCJwb3AiLCJkZXN0cnVjdG9yIiwicG9vbFNpemUiLCJhZGRQb29saW5nVG8iLCJnZXRQb29sZWQiLCJyZWxlYXNlIiwib25lQXJndW1lbnRQb29sZXIiLCJ0d29Bcmd1bWVudFBvb2xlciIsInRocmVlQXJndW1lbnRQb29sZXIiLCJmb3VyQXJndW1lbnRQb29sZXIiLCJ0b0FycmF5IiwiY3JlYXRlQ2xhc3MiLCJjcmVhdGVNaXhpbiIsIkRPTSIsIl9fc3ByZWFkIiwia2V5UHJlZml4IiwibWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCIsImFiYnIiLCJhZGRyZXNzIiwiYXJ0aWNsZSIsImFzaWRlIiwiYXVkaW8iLCJiZGkiLCJiZG8iLCJiaWciLCJibG9ja3F1b3RlIiwiY2FudmFzIiwiY2l0ZSIsImNvbGdyb3VwIiwiZGF0YWxpc3QiLCJkZWwiLCJkZm4iLCJkaWFsb2ciLCJkaXYiLCJkbCIsImR0IiwiZW0iLCJmaWVsZHNldCIsImZpZ2NhcHRpb24iLCJmaWd1cmUiLCJmb290ZXIiLCJoZWFkZXIiLCJoZ3JvdXAiLCJodG1sIiwiaWZyYW1lIiwiaW5zIiwia2JkIiwibGVnZW5kIiwibWFyayIsIm1lbnUiLCJtZXRlciIsIm5hdiIsIm5vc2NyaXB0Iiwib2wiLCJvcHRncm91cCIsIm9wdGlvbiIsInBpY3R1cmUiLCJwcmUiLCJwcm9ncmVzcyIsInJwIiwicnQiLCJydWJ5Iiwic2FtcCIsInNjcmlwdCIsInNlY3Rpb24iLCJzZWxlY3QiLCJzcGFuIiwic3Ryb25nIiwic3ViIiwic3VtbWFyeSIsInN1cCIsInRhYmxlIiwidGJvZHkiLCJ0ZXh0YXJlYSIsInRmb290IiwidGhlYWQiLCJ0ciIsInVsIiwidmFyIiwidmlkZW8iLCJjaXJjbGUiLCJjbGlwUGF0aCIsImRlZnMiLCJlbGxpcHNlIiwiaW1hZ2UiLCJsaW5lYXJHcmFkaWVudCIsIm1hc2siLCJwb2x5Z29uIiwicG9seWxpbmUiLCJyYWRpYWxHcmFkaWVudCIsInJlY3QiLCJzdG9wIiwic3ZnIiwidHNwYW4iLCJfaXNSZWFjdEVsZW1lbnQiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwiZ3JvdXBzIiwib3B0aW9uYWwiLCJwYXJ0aWFsIiwiYXN0ZXJpc2siLCJhdHRhY2hLZXlzIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwidG9rZW5zVG9SZWdFeHAiLCJzdHJpbmdUb1JlZ2V4cCIsInRva2Vuc1RvRnVuY3Rpb24iLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJlc2NhcGVkIiwiZ3JvdXAiLCJtb2RpZmllciIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwicHJldHR5Iiwic2VnbWVudCIsInNlbnNpdGl2ZSIsInN0cmljdCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJqc3hzIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiQ29uc3VtZXIiLCJjcmVhdGVSZWYiLCJsYXp5IiwibWVtbyIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJyZXZlcnNlIiwic2tpcFRlbXBSZXNldCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudERvY3VtZW50IiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiYWxwaGFiZXQiLCJzZWVkIiwibnVtIiwiZW5jb2RlZCIsInllYXN0IiwiZGVjb2RlZCIsIl9leHRlbmRzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX3NldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwidmFsdWVFcXVhbCIsImFWYWx1ZSIsImJWYWx1ZSIsImNvbmRpdGlvbiIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJjcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwicGFydCIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImZpbHRlciIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjb21tb25qc0dsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXIiLCJjaGFuZ2VkQml0cyIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiZW1pdHRlciIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJoaXN0b3J5Q29udGV4dCIsIlJvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwiaXNFeGFjdCIsIkxpZmVjeWNsZSIsIm9uTW91bnQiLCJwcmV2UHJvcHMiLCJvblVubW91bnQiLCJjYWNoZUNvdW50IiwiZ2VuZXJhdGVQYXRoIiwiY29tcGlsZVBhdGgiLCJSZWRpcmVjdCIsImNvbXB1dGVkTWF0Y2giLCJfcmVmJHB1c2giLCJwcmV2TG9jYXRpb24iLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJSb3V0ZSIsImNvbnRleHQkMSIsIl90aGlzJHByb3BzIiwiaXNFbXB0eUNoaWxkcmVuIiwiU3dpdGNoIiwidXNlSGlzdG9yeSIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiaXNEdXBsaWNhdGVOYXZpZ2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJiYXRjaCIsImdldEJhdGNoIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsInN0b3JlIiwicGFyZW50U3ViIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsInN1YnNjcmlwdGlvbiIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlTdWJzY3JpYmUiLCJhZGROZXN0ZWRTdWIiLCJmaXJzdCIsImlzU3Vic2NyaWJlZCIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsIm5vdGlmeU5lc3RlZFN1YnMiLCJCb29sZWFuIiwidHJ5VW5zdWJzY3JpYmUiLCJnZXRMaXN0ZW5lcnMiLCJjb250ZXh0VmFsdWUiLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJjcmVhdGVTdG9yZUhvb2siLCJ1c2VSZWR1eENvbnRleHQiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsInVzZURpc3BhdGNoIiwicmVmRXF1YWxpdHkiLCJjcmVhdGVTZWxlY3Rvckhvb2siLCJlcXVhbGl0eUZuIiwiX3VzZVJlZHV4Q29udGV4dCIsInNlbGVjdGVkU3RhdGUiLCJjb250ZXh0U3ViIiwiZm9yY2VSZW5kZXIiLCJsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yIiwibGF0ZXN0U2VsZWN0b3IiLCJsYXRlc3RTdG9yZVN0YXRlIiwibGF0ZXN0U2VsZWN0ZWRTdGF0ZSIsInN0b3JlU3RhdGUiLCJuZXdTZWxlY3RlZFN0YXRlIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3U3RvcmVTdGF0ZSIsIl9uZXdTZWxlY3RlZFN0YXRlIiwidXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24iLCJuZXdCYXRjaCIsInVzZVNlbGVjdG9yIiwiYXV0aENvbnN0YW50cyIsInBvcHVwQ29uc3RhbnRzIiwic3R1ZHlHcm91cHNDb25zdGFudHMiLCJub3RpZmljYXRpb25Db25zdGFudHMiLCJzaWduSW4iLCJ1c2VyIiwic2lnbk91dCIsImNyZWF0ZUFjY291bnQiLCJ1bnZlcmlmaWVkVXNlciIsInNldFVzZXIiLCJzaG93Vmlld01lZXRpbmdzU3R1ZHlHcm91cFBvcHVwIiwic2hvd1ZpZXdNZW1iZXJQb3B1cCIsIm1lbWJlciIsInNob3dJbnB1dFBvcHVwIiwiZGVmYXVsdElucHV0IiwibGFiZWwyIiwic2hvd0NvbmZpcm1hdGlvblBvcHVwIiwiaXNDb25maXJtYXRpb24iLCJmaXJzdEJ1dHRvblRpdGxlIiwic2Vjb25kQnV0dG9uVGl0bGUiLCJzaG93UmVwb3J0UG9wdXAiLCJyZXBvcnREYXRhIiwiY2xvc2VQb3B1cCIsImFkZFN0dWR5R3JvdXAiLCJjbGVhclN0dWR5R3JvdXBzIiwic2hvd0Vycm9yTm90aWZpY2F0aW9uIiwic2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24iLCJzdGFydExvYWRpbmciLCJzdG9wTG9hZGluZyIsImJ1dHRvbkNsYXNzTmFtZSIsIkJ1dHRvblR5cGVzIiwiaXNUZXh0QXJlYSIsIm9uU3VibWl0Iiwic3VibWl0Q3JlYXRlU3R1ZHlHcm91cCIsInVwZGF0ZU5hbWVGaWVsZCIsInVwZGF0ZUdyb3VwQ29sb3IiLCJ1cGRhdGVEZXNjcmlwdGlvbkZpZWxkIiwiU3ViamVjdHMiLCJ1cGRhdGVTdWJqZWN0RmllbGQiLCJwcml2YWN5IiwidXBkYXRlUHJpdmFjeSIsImNvdXJzZUNvZGUiLCJ1cGRhdGVDb3Vyc2VDb2RlRmllbGQiLCJ1c2VyU2Nob29sIiwidXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbCIsImlzQXNzb2NpYXRlZFdpdGhTY2hvb2wiLCJ1cGRhdGVJc09ubGluZUdyb3VwIiwidXBkYXRlSXNUdXRvckdyb3VwIiwiSW52YWxpZERhdGVBZGFwdGVyRXJyb3IiLCJkYXRlQWRhcHRlckNvbmZpZyIsIkRhdGVBZGFwdGVyQmFzZSIsIl9kYXRlIiwiZ2VuZXJhdG9ycyIsImlzSW50ZWdlciIsInN0YXRpYyIsIl9vYmplY3QiLCJ1bmltcGxlbWVudGVkRXJyb3IiLCJfanNvbiIsIl9kYXRldGltZSIsInRvRGF0ZVRpbWUiLCJEYXRlVGltZSIsImZyb21KU09OIiwiRGF0ZUFkYXB0ZXIiLCJoYXNUaW1lem9uZVN1cHBvcnQiLCJXRUVLREFZUyIsIk1JTExJU0VDT05EU19JTl9TRUNPTkQiLCJNSUxMSVNFQ09ORFNfSU5fTUlOVVRFIiwiTUlMTElTRUNPTkRTX0lOX0hPVVIiLCJNSUxMSVNFQ09ORFNfSU5fREFZIiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJJbnZhbGlkRGF0ZVRpbWVFcnJvciIsInRpbWV6b25lIiwiYXNzZXJ0SXNWYWxpZCIsIlVUQyIsInllYXIiLCJzZWNvbmQiLCJtaWxsaXNlY29uZCIsIl9lbmQiLCJpc0VxdWFsIiwiYXNzZXJ0U2FtZVRpbWVab25lIiwiaXNCZWZvcmUiLCJpc0JlZm9yZU9yRXF1YWwiLCJpc0FmdGVyT3JFcXVhbCIsImlzT2NjdXJyaW5nIiwiYW1vdW50IiwiZm9ya0RhdGVUaW1lIiwiYWRkVVRDWWVhcnMiLCJhZGRVVENNb250aHMiLCJhZGRVVENXZWVrcyIsImFkZFVUQ0RheXMiLCJhZGRVVENIb3VycyIsImFkZFVUQ01pbnV0ZXMiLCJhZGRVVENTZWNvbmRzIiwiYWRkVVRDTWlsbGlzZWNvbmRzIiwic3VidHJhY3QiLCJzdWJVVENZZWFycyIsInN1YlVUQ01vbnRocyIsInN1YlVUQ1dlZWtzIiwic3ViVVRDRGF5cyIsInN1YlVUQ0hvdXJzIiwic3ViVVRDTWludXRlcyIsInN1YlVUQ1NlY29uZHMiLCJzdWJVVENNaWxsaXNlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZGlmZiIsImdldFVUQ1llYXJEYXkiLCJnZXRVVENEYXkiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInNldFVUQ0Z1bGxZZWFyIiwibW9udGhMZW5ndGgiLCJzZXRVVENEYXRlIiwic2V0VVRDTW9udGgiLCJzZXRVVENIb3VycyIsInNldFVUQ01pbnV0ZXMiLCJzZXRVVENTZWNvbmRzIiwic2V0VVRDTWlsbGlzZWNvbmRzIiwiZ3JhbnVsYXJpdHkiLCJ3a3N0Iiwib3JkZXJlZFdlZWtkYXlzIiwic2V0RGF0ZVRvU3RhcnRPZldlZWsiLCJ3ZWVrU3RhcnQiLCJlbmRHcmFudWxhcml0eSIsInNldERhdGVUb0VuZE9mV2VlayIsInVuaXFEYXRlVGltZXMiLCJkYXRlcyIsIndrZGF5cyIsInNoaWZ0QXJyYXkiLCJnZXREaWZmZXJlbmNlQmV0d2VlbldlZWtkYXlzIiwiZ2V0RGF5c0luRmVicnVhcnkiLCJpc0xlYXBZZWFyIiwidG9JbnRlZ2VyIiwiTmFOIiwiaW50IiwiYWRkTWlsbGlzZWNvbmRzIiwiZGlydHlEYXRlIiwiZGlydHlBbW91bnQiLCJ0aW1lc3RhbXAiLCJkZXNpcmVkTW9udGgiLCJkYXRlV2l0aERlc2lyZWRNb250aCIsImRheXNJbk1vbnRoIiwiZ2V0VGltZSIsIkluZmluaXRlTG9vcEVycm9yIiwibnVtYmVyU29ydENvbXBhcmVyIiwiY2xvbmVKU09OIiwiZGF0ZUlucHV0VG9EYXRlVGltZSIsImZyb21EYXRlVGltZSIsImZyb21EYXRlIiwibm9ybWFsaXplRGF0ZVRpbWVUaW1lem9uZSIsIlJ1bGVPcHRpb25FcnJvciIsImNsb25lUnVsZU9wdGlvbnMiLCJSZWN1cnJlbmNlUnVsZUVycm9yIiwiVmFsaWREYXRlVGltZSIsIkludmFsaWREYXRlVGltZSIsIlJlY3VycmVuY2VSdWxlc0l0ZXJhdG9yIiwicmVjdXJyZW5jZVJ1bGVzIiwiaXRlcmF0ZSIsIml0ZXJhdGVXaXRoUmV2ZXJzZUNvdW50IiwiaXRlcmF0ZVdpdGhDb3VudCIsIm5vcm1hbGl6ZURhdGVUaW1lQXJncyIsImlzSW5maW5pdGUiLCJoYXNEdXJhdGlvbiIsInlpZWxkQXJncyIsImRhdGVDYWNoZSIsInNraXBUb0RhdGUiLCJzdGFydGluZ0RhdGUiLCJuZXh0RGF0ZSIsIm5vcm1hbGl6ZVJ1bk91dHB1dCIsInJ1blJ1bGVzIiwiaXNEYXRlUGFzdEVuZCIsIk9jY3VycmVuY2VHZW5lcmF0b3IiLCJtYXhEdXJhdGlvbiIsImZpcnN0RGF0ZSIsIl9maXJzdERhdGUiLCJfcnVuIiwiZGF0ZUFkYXB0ZXIiLCJsYXN0RGF0ZSIsIl9sYXN0RGF0ZSIsIm9wZXJhdG9ycyIsImN1cnIiLCJvY2N1cnJlbmNlcyIsIk9jY3VycmVuY2VJdGVyYXRvciIsIm5vcm1hbGl6ZU9jY3VycmVuY2VzQXJncyIsImNvbGxlY3Rpb25zIiwiQ29sbGVjdGlvbkl0ZXJhdG9yIiwibm9ybWFsaXplQ29sbGVjdGlvbnNBcmdzIiwib2NjdXJzQmV0d2VlbiIsInN0YXJ0SW5wdXQiLCJlbmRJbnB1dCIsIm5vcm1hbGl6ZURhdGVJbnB1dCIsImV4Y2x1ZGVFbmRzIiwiZ2V0TWF4RHVyYXRpb24iLCJvY2N1cnNPbiIsInJhd0FyZ3MiLCJub3JtYWxpemVPY2N1cnNPbkFyZ3MiLCJ3ZWVrZGF5IiwiYWZ0ZXIiLCJvY2N1cnNBZnRlciIsImV4Y2x1ZGVTdGFydCIsIm9jY3Vyc0JlZm9yZSIsImV4Y2x1ZGVEYXRlcyIsIm5vcm1hbGl6ZVJ1bkFyZ3MiLCJub3JtYWxpemVEYXRlSW5wdXRUb0FkYXB0ZXIiLCJkYXRlSW5wdXRUb0RhdGVBZGFwdGVyIiwib2NjdXJyZW5jZUl0ZXJhdG9yIiwidGFrZSIsIm5vcm1hbGl6ZURhdGVPdXRwdXQiLCJDb2xsZWN0aW9uIiwicGVyaW9kU3RhcnQiLCJwZXJpb2RFbmQiLCJnZXRQZXJpb2QiLCJzdGFydERhdGUiLCJjb2xsZWN0aW9uSXRlcmF0b3IiLCJwZXJpb2QiLCJza2lwRW1wdHlQZXJpb2RzIiwiaW5jcmVtZW50UGVyaW9kIiwiT3BlcmF0b3IiLCJzdHJlYW1zIiwic3VwZXIiLCJzdHJlYW0iLCJjYWxjdWxhdGVJc0luZmluaXRlIiwiY2FsY3VsYXRlSGFzRHVyYXRpb24iLCJJdGVyYWJsZVdyYXBwZXIiLCJydW5BcmdzIiwicHJvY2Vzc1lpZWxkQXJncyIsInN0cmVhbXNDb21wYXJlciIsInN0cmVhbXNSZXZlcnNlQ29tcGFyZXIiLCJzZWxlY3ROZXh0SXRlcmFibGUiLCJBZGRPcGVyYXRvciIsIndyYXBwZWRTdHJlYW1zIiwic29tZSIsInN0cmVhbXNEdXJhdGlvbiIsIkRhdGVzIiwiYWRhcHRlcnMiLCJkYXRldGltZXMiLCJmaW5kSW5kZXgiLCJrZWVwTG9jYWxUaW1lIiwiUnVsZUJhc2UiLCJub3JtT3B0aW9ucyIsInJlY3VycmVuY2VNb2R1bGVzIiwibm9ybWFsaXplRGVmYXVsdE9wdGlvbnMiLCJzdGFydE9wdGlvbnMiLCJtb2QiLCJub3JtYWxpemVPcHRpb25zIiwibm9ybWFsaXplUnVsZU9wdGlvbnMiLCJSdWxlIiwidHpvcHRpb25zIiwiU2NoZWR1bGVCYXNlIiwib2NjdXJyZW5jZVN0cmVhbSIsIlN1YnRyYWN0T3BlcmF0b3IiLCJpbmNsdXNpb24iLCJleGNsdXNpb24iLCJjeWNsZVN0cmVhbXMiLCJpdGVyYXRlRXhjbHVzaW9uIiwiVW5pcXVlT3BlcmF0b3IiLCJsYXN0VmFsdWUiLCJTY2hlZHVsZSIsInJydWxlcyIsImV4cnVsZXMiLCJydWxlQXJncyIsInJkYXRlcyIsImV4ZGF0ZXMiLCJSZWN1cnJlbmNlUnVsZSIsInByb2Nlc3NvciIsIkZyZXF1ZW5jeVJ1bGUiLCJpbml0RGF0ZSIsImludGVydmFsVW5pdCIsImZyZXEiLCJmcmVxVG9HcmFudWxhcml0eSIsImZpcnN0SW50ZXJ2YWxTdGFydERhdGUiLCJub3JtYWxpemVkU3RhcnREYXRlIiwiaW50ZXJ2YWxTdGFydERhdGUiLCJpbnRlcnZhbEVuZERhdGUiLCJub3JtYWxpemVkRW5kRGF0ZSIsInNraXBUb0ludGVydmFsIiwidmFsaWRhdGVEYXRlIiwiZGF0ZUlzV2l0aGluSW50ZXJ2YWwiLCJzZXRUb0N1cnJlbnRJbnRlcnZhbCIsImludGVydmFsRGlmZmVyZW5jZSIsImludGVydmFsRGlmZmVyZW5jZUJldHdlZW5EYXRlcyIsImludGVydmFsIiwiZGlmZmVyZW5jZSIsImludGVydmFsRHVyYXRpb24iLCJtb250aHMiLCJSZXZGcmVxdWVuY3lSdWxlIiwiRlJFUVVFTkNJRVMiLCJGcmVxdWVuY3lSdWxlTW9kdWxlIiwiYnlNaWxsaXNlY29uZE9mU2Vjb25kIiwibm9ybSIsImluY2x1ZGVzIiwicnVsZU9wdGlvbkZpbGxlZCIsImZyZXFDYWNoZSIsIlJlY3VycmVuY2VSdWxlQmFzZSIsIlJldlJlY3VycmVuY2VSdWxlQmFzZSIsIlJldkJ5VGltZU9mVW5pdFJ1bGUiLCJjdXJyZW50VGltZSIsImJhc2VHcmFudWxhcml0eSIsIlJldkJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGUiLCJCeVRpbWVPZlVuaXRSdWxlIiwiQnlNaWxsaXNlY29uZE9mU2Vjb25kUnVsZSIsIkJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGVNb2R1bGUiLCJSZXZCeVNlY29uZE9mTWludXRlUnVsZSIsImJ5U2Vjb25kT2ZNaW51dGUiLCJCeVNlY29uZE9mTWludXRlUnVsZSIsIkJ5U2Vjb25kT2ZNaW51dGVSdWxlTW9kdWxlIiwiUmV2QnlNaW51dGVPZkhvdXJSdWxlIiwiYnlNaW51dGVPZkhvdXIiLCJCeU1pbnV0ZU9mSG91clJ1bGUiLCJCeU1pbnV0ZU9mSG91clJ1bGVNb2R1bGUiLCJSZXZCeUhvdXJPZkRheVJ1bGUiLCJieUhvdXJPZkRheSIsIkJ5SG91ck9mRGF5UnVsZSIsIkJ5SG91ck9mRGF5UnVsZU1vZHVsZSIsImdldE5leHRXZWVrZGF5IiwiZ2V0TnRoV2Vla2RheU9mTW9udGgiLCJudGgiLCJCeURheU9mTW9udGhSdWxlIiwibm9ybWFsaXplZEJ5RGF5T2ZNb250aCIsIm5vcm1hbGl6ZUJ5RGF5T2ZNb250aCIsImJ5RGF5T2ZNb250aCIsImJ5RGF5T2ZXZWVrIiwiY3VycmVudERheSIsIm5leHRNb250aCIsImxlbmd0aE9mTW9udGgiLCJmaWx0ZXJlZEJ5RGF5T2ZNb250aCIsIm50aFdlZWtkYXlPZk1vbnRoIiwiUmV2QnlEYXlPZk1vbnRoUnVsZSIsIkJ5RGF5T2ZNb250aFJ1bGVNb2R1bGUiLCJieURheU9mWWVhciIsImdldE50aFdlZWtkYXlPZlllYXIiLCJnZXRQcmV2aW91c1dlZWtkYXkiLCJSZXZCeURheU9mV2Vla1J1bGUiLCJieU1vbnRoT2ZZZWFyIiwiZXhwYW5kWWVhcmx5IiwiZXhwYW5kTW9udGhseSIsImV4cGFuZCIsImdldFByZXZXZWVrZGF5c09mWWVhciIsImdldFByZXZXZWVrZGF5c09mTW9udGgiLCJCeURheU9mV2Vla1J1bGUiLCJnZXROZXh0V2Vla2RheXNPZlllYXIiLCJnZXROZXh0V2Vla2RheXNPZk1vbnRoIiwiQnlEYXlPZldlZWtSdWxlTW9kdWxlIiwiaW52YWxpZFdlZWRheSIsImZpbmQiLCJSZXZCeU1vbnRoT2ZZZWFyUnVsZSIsImN1cnJlbnRNb250aCIsIkJ5TW9udGhPZlllYXJSdWxlIiwiQnlNb250aE9mWWVhclJ1bGVNb2R1bGUiLCJJQ0FMX1JVTEVTIiwiU3RhbmRhcmREYXRlQWRhcHRlciIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInNlbmRQb3N0UmVxdWVzdCIsInN1Y2Nlc3NSZXNwb25zZU1lc3NhZ2UiLCJjYXRjaE1lc3NhZ2UiLCJpc0F1dGhlbnRpY2F0ZWQiLCJzaG91bGRTaG93Tm90aWZpY2F0aW9uIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNlbmRHZXRSZXF1ZXN0Iiwic2VuZERlbGV0ZVJlcXVlc3QiLCJzZW5kUG9zdFJlcXVlc3RXaXRoRm9ybURhdGEiLCJmb3JtZGF0YSIsImdldE5leHRNZWV0aW5nIiwibmV4dE9uZVRpbWVNZWV0aW5nIiwibWVldGluZ3MiLCJtZWV0aW5nIiwicmVjdXJyaW5nTWVldGluZyIsIm5leHRSZWN1cnJpbmdNZWV0aW5nIiwicmVjdXJyaW5nU3RhcnREYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwicGVyZm9ybVNpZ25PdXQiLCJhdXRoUmVkdWNlciIsInNldE5hbWUiLCJzZXREZXNjcmlwdGlvbiIsInNldFN1YmplY3QiLCJzZXRQcml2YWN5Iiwic2V0Q291cnNlQ29kZSIsInNldElzQXNzb2NpYXRlZFdpdGhTY2hvb2wiLCJzZXRJc1R1dG9yR3JvdXAiLCJzZXRJc09ubGluZUdyb3VwIiwic2V0R3JvdXBDb2xvciIsIlJvdXRlcyIsInByaXZhY3lTZXR0aW5nIiwic2Nob29sIiwibmV3U3R1ZHlHcm91cCIsInNlbGVjdGVkSW5kZXgiLCJpc0xvZ2dlZEluIiwib3duZXIiLCJfaWQiLCJzdWJtaXRKb2luIiwic3R1ZHlHcm91cElkIiwic3VibWl0TWVzc2FnZVN0dWR5R3JvdXBPd25lciIsInJlY2VpdmVySWQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzZXRJbnB1dCIsImlucHV0MiIsInNldElucHV0MiIsIkZvcmdvdFBhc3N3b3JkIiwiVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb24iLCJBY2NvdW50U2V0dXAiLCJKb2luIiwiQ3JlYXRlIiwiRWRpdCIsIkNyZWF0ZU1lZXRpbmciLCJWaWV3UG9zdCIsIlZpZXdNZWV0aW5ncyIsIlZpZXdNZW1iZXIiLCJJbnB1dCIsIkNvbmZpcm1hdGlvbiIsInN1Ym1pdEVkaXRTdHVkeUdyb3VwIiwidXBkYXRlRGF0ZUZpZWxkIiwidXBkYXRlVGltZUZpZWxkIiwidXBkYXRlRnJlcXVlbmN5RmllbGQiLCJ1cGRhdGVEZXRhaWxzRmllbGQiLCJ1cGRhdGVMb2NhdGlvbkZpZWxkIiwidXBkYXRlUm9vbU51bWJlckZpZWxkIiwic3VibWl0Q3JlYXRlTWVldGluZyIsImlzUmVjdXJyaW5nTWVldGluZyIsInNldERhdGUiLCJzZXRUaW1lIiwic2V0RnJlcXVlbmN5Iiwic2V0RGV0YWlscyIsInNldExvY2F0aW9uIiwic2V0Um9vbU51bWJlciIsImdldERheSIsImF0dGFjaG1lbnQiLCJ1cGRhdGVUaXRsZUZpZWxkIiwidXBkYXRlQm9keUZpZWxkIiwidXBkYXRlQ2F0ZWdvcnlGaWVsZCIsInVwZGF0ZUF0dGFjaG1lbnQiLCJzdWJtaXRDcmVhdGVQb3N0IiwiYWNjZXB0IiwiYWx0Iiwic2V0VGl0bGUiLCJzZXRCb2R5IiwiUG9zdFR5cGVzIiwic2V0Q2F0ZWdvcnkiLCJzZXRBdHRhY2htZW50IiwiZm9ybURhdGEiLCJhcHBlbmQiLCJnZXRQb3N0VHlwZURldGFpbHMiLCJRdWVzdGlvbk1hcmsiLCJDYW1wYWlnbiIsIkNvbW1lbnQiLCJFdmVudE5vdGUiLCJjcmVhdG9yIiwicHJvZmlsZVBpY3R1cmUiLCJHbG9iYWwiLCJzaGVldFJlZiIsInJlaHlkcmF0aW5nIiwic2hlZXRSZWZDdXJyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwia2V5ZnJhbWVzIiwiaW5zZXJ0YWJsZSIsImdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MiLCJfdCIsIl90MiIsIl90MyIsIl90NCIsImNpcmN1bGFyUm90YXRlS2V5ZnJhbWUiLCJjaXJjdWxhckRhc2hLZXlmcmFtZSIsIkNpcmN1bGFyUHJvZ3Jlc3NSb290IiwiQ2lyY3VsYXJQcm9ncmVzc1NWRyIsIkNpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUiLCJkaXNhYmxlU2hyaW5rIiwiY2lyY2xlRGlzYWJsZVNocmluayIsInN0cm9rZSIsInRoaWNrbmVzcyIsImNpcmNsZVN0eWxlIiwicm9vdFN0eWxlIiwicm9vdFByb3BzIiwiY2lyY3VtZmVyZW5jZSIsIlBJIiwiY3giLCJjeSIsIkJveCIsImRlZmF1bHRDbGFzc05hbWUiLCJnZW5lcmF0ZUNsYXNzTmFtZSIsIkJveFJvb3QiLCJfZXh0ZW5kU3hQcm9wIiwiaW5TeCIsInN5c3RlbVByb3BzIiwib3RoZXJQcm9wcyIsInNwbGl0UHJvcHMiLCJmaW5hbFN4IiwiZXh0ZW5kU3hQcm9wIiwiY3JlYXRlQm94IiwiQ2xhc3NOYW1lR2VuZXJhdG9yIiwib3ZlcmZsb3ciLCJuZXh0TWVldGluZyIsInNldE5leHRNZWV0aW5nIiwiZ2V0UmVjdXJyaW5nTWVldGluZ0ZyZXF1ZW5jeUpTWCIsIm1lZXRpbmdJZCIsImNvbmZpcm1lZCIsInNldENvbW1lbnQiLCJyZXBvcnRUeXBlIiwicG9wdXBSZWR1Y2VyIiwic2hvd1RvcCIsImlzTG9hZGluZyIsIm5vdGlmaWNhdGlvblJlZHVjZXIiLCJsb2FkaW5nIiwicG9wdXBWaWV3Iiwidmlld3MiLCJpc1Nob3dpbmciLCJjb25maWd1cmVUaW1lb3V0Iiwibm90aWZpY2F0aW9uVHlwZXMiLCJzZXRJc1Nob3dpbmciLCJjdXJyZW50UGFnZSIsInNpZ25PdXRVc2VyIiwibWVudUlzU2hvd2luZyIsInNldE1lbnVJc1Nob3dpbmciLCJ0ZXh0RGVjb3JhdGlvbiIsInRvcEJhciIsInNob3dpbmdQYWdlVGl0bGUiLCJzdWJtaXRMb2dpbiIsInVwZGF0ZUVtYWlsRmllbGQiLCJ1cGRhdGVQYXNzd29yZEZpZWxkIiwic2V0RW1haWwiLCJzZXRQYXNzd29yZCIsImF1dGhlbnRpY2F0aW9uVG9rZW4iLCJhdXRoZW50aWNhdGlvblRva2VuRXhwaXJhdGlvbkRhdGUiLCJzZXRIb21lVmlldyIsIlZpZXdzIiwic3VibWl0QWNjb3VudENyZWF0aW9uIiwidXBkYXRlQ29uZmlybVBhc3N3b3JkRmllbGQiLCJsb2dpbkRpZEZhaWwiLCJCTEFOSyIsInNldENvbmZpcm1QYXNzd29yZCIsInN1Ym1pdEFjY291bnRTZXR1cCIsInVwZGF0ZUFyZWFDb2RlRmllbGQiLCJpczE4T3JPdmVyIiwidXBkYXRlSXMxOE9yT3ZlciIsInVwZGF0ZVByb2ZpbGVQaWN0dXJlIiwidXNlcklzVmVyaWZpZWQiLCJzZXRVc2VySXNWZXJpZmllZCIsInNldEFyZWFDb2RlIiwic2V0SXMxOE9yT3ZlciIsInNldFByb2ZpbGVQaWN0dXJlIiwidmVyaWZpY2F0aW9uVG9rZW4iLCJ2ZXJpZnlVc2VyIiwic3R1ZHlHcm91cHMiLCJob21lVmlldyIsInN0dWR5R3JvdXBzUmVkdWNlciIsImdldFN0dWR5R3JvdXBzIiwidmVyaWZ5RW1haWwiLCJnZXRHcm91cHMiLCJpc1ZlcmlmeWluZ0VtYWlsIiwidmVyaWZ5VXNlckVtYWlsIiwic3R1ZHlHcm91cCIsImdldFNsaWRlclV0aWxpdHlDbGFzcyIsInVzZVZhbHVlTGFiZWxDbGFzc2VzIiwiYXBwZW5kT3duZXJTdGF0ZSIsImV4aXN0aW5nUHJvcHMiLCJjbGlwIiwid2hpdGVTcGFjZSIsImFzYyIsImZpbmRDbG9zZXN0IiwiY3VycmVudFZhbHVlIiwiX3ZhbHVlcyRyZWR1Y2UiLCJjbG9zZXN0SW5kZXgiLCJkaXN0YW5jZSIsInRyYWNrRmluZ2VyIiwidG91Y2hJZCIsInRvdWNoRXZlbnQiLCJ0b3VjaCIsInZhbHVlVG9QZXJjZW50Iiwic2V0VmFsdWVJbmRleCIsImZvY3VzVGh1bWIiLCJzbGlkZXJSZWYiLCJhY3RpdmVJbmRleCIsInNldEFjdGl2ZSIsIl9zbGlkZXJSZWYkY3VycmVudCIsIl9kb2MkYWN0aXZlRWxlbWVudCIsIl9zbGlkZXJSZWYkY3VycmVudDIiLCJheGlzUHJvcHMiLCJob3Jpem9udGFsIiwicGVyY2VudCIsImxlYXAiLCJyaWdodCIsInZlcnRpY2FsIiwiYm90dG9tIiwiSWRlbnRpdHkiLCJjYWNoZWRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSIsImRvZXNTdXBwb3J0VG91Y2hBY3Rpb25Ob25lIiwiQ1NTIiwidXNlU2xpZGVyIiwiYXJpYUxhYmVsbGVkYnkiLCJkaXNhYmxlU3dhcCIsIm1hcmtzIiwibWFya3NQcm9wIiwib25DaGFuZ2VDb21taXR0ZWQiLCJvcmllbnRhdGlvbiIsInNjYWxlIiwidGFiSW5kZXgiLCJ2YWx1ZVByb3AiLCJpc1J0bCIsInNldE9wZW4iLCJkcmFnZ2luZyIsInNldERyYWdnaW5nIiwibW92ZUNvdW50IiwidmFsdWVEZXJpdmVkIiwic2V0VmFsdWVTdGF0ZSIsInRodW1iSW5kZXgiLCJjbG9uZWRFdmVudCIsIm1hcmtzVmFsdWVzIiwiaGFuZGxlQmx1clZpc2libGUiLCJoYW5kbGVGb2N1c1Zpc2libGUiLCJmb2N1c1Zpc2libGVSZWYiLCJzZXRGb2N1c1Zpc2libGUiLCJoYW5kbGVGb2N1c1JlZiIsImhhbmRsZVJlZiIsImNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Rm9jdXMiLCJvdGhlckhhbmRsZXJzIiwiX290aGVySGFuZGxlcnMkb25Gb2N1IiwiY3JlYXRlSGFuZGxlSGlkZW5JbnB1dEJsdXIiLCJfb3RoZXJIYW5kbGVycyRvbkJsdXIiLCJ1c2VFbmhhbmNlZEVmZmVjdCIsIl9kb2N1bWVudCRhY3RpdmVFbGVtZSIsImJsdXIiLCJjcmVhdGVIYW5kbGVIaWRkZW5JbnB1dENoYW5nZSIsIl9vdGhlckhhbmRsZXJzJG9uQ2hhbiIsIm1hcmtzSW5kZXgiLCJ2YWx1ZUFzTnVtYmVyIiwiY3VycmVudE1hcmtJbmRleCIsInByZXZpb3VzVmFsdWUiLCJwcmV2aW91c0luZGV4IiwiYXhpcyIsImdldEZpbmdlck5ld1ZhbHVlIiwiZmluZ2VyIiwibW92ZSIsInZhbHVlczIiLCJzbGlkZXIiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwZXJjZW50VG9WYWx1ZSIsIm5lYXJlc3QiLCJ0b0V4cG9uZW50aWFsIiwibWF0aXNzYURlY2ltYWxQYXJ0IiwiZGVjaW1hbFBhcnQiLCJnZXREZWNpbWFsUHJlY2lzaW9uIiwicm91bmRWYWx1ZVRvU3RlcCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZVRvdWNoRW5kIiwic3RvcExpc3RlbmluZyIsImhhbmRsZVRvdWNoU3RhcnQiLCJjcmVhdGVIYW5kbGVNb3VzZURvd24iLCJfb3RoZXJIYW5kbGVycyRvbk1vdXMiLCJvbk1vdXNlRG93biIsInRyYWNrT2Zmc2V0IiwidHJhY2tMZWFwIiwiY3JlYXRlSGFuZGxlTW91c2VPdmVyIiwiX290aGVySGFuZGxlcnMkb25Nb3VzMiIsIm9uTW91c2VPdmVyIiwiY3JlYXRlSGFuZGxlTW91c2VMZWF2ZSIsIl9vdGhlckhhbmRsZXJzJG9uTW91czMiLCJvbk1vdXNlTGVhdmUiLCJnZXRSb290UHJvcHMiLCJvd25FdmVudEhhbmRsZXJzIiwibWVyZ2VkRXZlbnRIYW5kbGVycyIsImdldEhpZGRlbklucHV0UHJvcHMiLCJnZXRUaHVtYlByb3BzIiwiRm9yd2FyZCIsIlNsaWRlclVuc3R5bGVkIiwiX2NvbXBvbmVudHMkUmFpbCIsIl9jb21wb25lbnRzJFRyYWNrIiwiX2NvbXBvbmVudHMkVGh1bWIiLCJfY29tcG9uZW50cyRWYWx1ZUxhYmUiLCJfY29tcG9uZW50cyRNYXJrIiwiX2NvbXBvbmVudHMkTWFya0xhYmVsIiwiYXJpYUxhYmVsIiwiYXJpYVZhbHVldGV4dCIsImNsYXNzZXNQcm9wIiwiZ2V0QXJpYUxhYmVsIiwiZ2V0QXJpYVZhbHVlVGV4dCIsInZhbHVlTGFiZWxEaXNwbGF5IiwidmFsdWVMYWJlbEZvcm1hdCIsImNvbXBvbmVudHNQcm9wcyIsIm1hcmtlZCIsIlJvb3QiLCJSYWlsIiwicmFpbFByb3BzIiwicmFpbCIsIlRyYWNrIiwidHJhY2tQcm9wcyIsInRyYWNrU3R5bGUiLCJUaHVtYiIsInRodW1iUHJvcHMiLCJ0aHVtYiIsIlZhbHVlTGFiZWwiLCJ2YWx1ZUxhYmVsUHJvcHMiLCJ2YWx1ZUxhYmVsIiwiTWFyayIsIm1hcmtQcm9wcyIsIk1hcmtMYWJlbCIsIm1hcmtMYWJlbFByb3BzIiwibWFya0xhYmVsIiwiaGlkZGVuSW5wdXRQcm9wcyIsIm1hcmtBY3RpdmUiLCJtYXJrTGFiZWxBY3RpdmUiLCJWYWx1ZUxhYmVsQ29tcG9uZW50IiwicG9pbnRlckV2ZW50cyIsIlNsb3QiLCJzbGlkZXJDbGFzc2VzIiwiU2xpZGVyUm9vdCIsInRyYWNrSW52ZXJ0ZWQiLCJ0cmFja0ZhbHNlIiwiYm94U2l6aW5nIiwidG91Y2hBY3Rpb24iLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblJpZ2h0IiwiY29sb3JBZGp1c3QiLCJTbGlkZXJSYWlsIiwiU2xpZGVyVHJhY2siLCJTbGlkZXJUaHVtYiIsIm91dGxpbmUiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJib3hTaGFkb3ciLCJTbGlkZXJWYWx1ZUxhYmVsIiwidmFsdWVMYWJlbE9wZW4iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJTbGlkZXJNYXJrIiwiU2xpZGVyTWFya0xhYmVsIiwiX2NvbXBvbmVudHNQcm9wcyRyb290IiwiX2NvbXBvbmVudHNQcm9wcyR0aHVtIiwiX2NvbXBvbmVudHNQcm9wcyR0cmFjIiwiX2NvbXBvbmVudHNQcm9wcyR2YWx1IiwiZXh0ZW5kVXRpbGl0eUNsYXNzZXMiLCJ1cGRhdGVUaW1lUmFuZ2UiLCJSZWFjdCIsInNldFZhbHVlcyIsIm5ld051bSIsImhvdXJzIiwicmhvdXJzIiwibWludXRlcyIsInJtaW51dGVzIiwiaG91cnMyIiwicmhvdXJzMiIsIm1pbnV0ZXMyIiwicm1pbnV0ZXMyIiwiQW1PclBtMSIsIkFtT3JQbTIiLCJ0aW1lMiIsIk5vdGNoZWRPdXRsaW5lUm9vdCIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJOb3RjaGVkT3V0bGluZUxlZ2VuZCIsImZsb2F0IiwidmlzaWJpbGl0eSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0Iiwibm90Y2hlZCIsInVzZUZvcm1Db250cm9sIiwiZm9ybUNvbnRyb2xTdGF0ZSIsInN0YXRlcyIsIm11aUZvcm1Db250cm9sIiwiZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcyIsImdldFN0eWxlVmFsdWUiLCJjb21wdXRlZFN0eWxlIiwibWF4Um93cyIsIm1pblJvd3MiLCJpbnB1dFJlZiIsInNoYWRvd1JlZiIsInJlbmRlcnMiLCJzeW5jSGVpZ2h0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImlucHV0U2hhbGxvdyIsInBsYWNlaG9sZGVyIiwiaW5uZXJIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJzaW5nbGVSb3dIZWlnaHQiLCJvdXRlckhlaWdodCIsIm91dGVySGVpZ2h0U3R5bGUiLCJwcmV2U3RhdGUiLCJoYW5kbGVSZXNpemUiLCJjb250YWluZXJXaW5kb3ciLCJyZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJyb3dzIiwiR2xvYmFsU3R5bGVzIiwiZ2xvYmFsU3R5bGVzIiwiaGFzVmFsdWUiLCJpc0ZpbGxlZCIsIlNTUiIsImdldElucHV0QmFzZVV0aWxpdHlDbGFzcyIsInJvb3RPdmVycmlkZXNSZXNvbHZlciIsImZvcm1Db250cm9sIiwic3RhcnRBZG9ybm1lbnQiLCJhZG9ybmVkU3RhcnQiLCJlbmRBZG9ybm1lbnQiLCJhZG9ybmVkRW5kIiwic2l6ZVNtYWxsIiwibXVsdGlsaW5lIiwiZnVsbFdpZHRoIiwiaGlkZGVuTGFiZWwiLCJpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIiwiaW5wdXRTaXplU21hbGwiLCJpbnB1dE11bHRpbGluZSIsImlucHV0VHlwZVNlYXJjaCIsImlucHV0QWRvcm5lZFN0YXJ0IiwiaW5wdXRBZG9ybmVkRW5kIiwiaW5wdXRIaWRkZW5MYWJlbCIsIklucHV0QmFzZVJvb3QiLCJwYWRkaW5nVG9wIiwiSW5wdXRCYXNlQ29tcG9uZW50IiwicGxhY2Vob2xkZXJIaWRkZW4iLCJwbGFjZWhvbGRlclZpc2libGUiLCJmb250IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJXZWJraXRBcHBlYXJhbmNlIiwiV2Via2l0VGV4dEZpbGxDb2xvciIsInJlc2l6ZSIsIk1vekFwcGVhcmFuY2UiLCJpbnB1dEdsb2JhbFN0eWxlcyIsIklucHV0QmFzZSIsImFyaWFEZXNjcmliZWRieSIsImF1dG9Db21wbGV0ZSIsImRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXMiLCJpbnB1dENvbXBvbmVudCIsImlucHV0UHJvcHNQcm9wIiwiaW5wdXRSZWZQcm9wIiwib25LZXlEb3duIiwib25LZXlVcCIsInJlbmRlclN1ZmZpeCIsImhhbmRsZUlucHV0UmVmV2FybmluZyIsImhhbmRsZUlucHV0UHJvcHNSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWYiLCJzZXRGb2N1c2VkIiwiZmNzIiwib25GaWxsZWQiLCJvbkVtcHR5IiwiY2hlY2tEaXJ0eSIsIklucHV0Q29tcG9uZW50Iiwic2V0QWRvcm5lZFN0YXJ0Iiwib25BbmltYXRpb25TdGFydCIsIk91dGxpbmVkSW5wdXRSb290Iiwibm90Y2hlZE91dGxpbmUiLCJPdXRsaW5lZElucHV0SW5wdXQiLCJXZWJraXRCb3hTaGFkb3ciLCJjYXJldENvbG9yIiwiT3V0bGluZWRJbnB1dCIsIl9SZWFjdCRGcmFnbWVudCIsImNvbXBvc2VkQ2xhc3NlcyIsImZpbGxlZCIsImdldENoaWxkTWFwcGluZyIsIm1hcEZuIiwibWFwcGVyIiwiZ2V0UHJvcCIsImdldE5leHRDaGlsZE1hcHBpbmciLCJwcmV2Q2hpbGRNYXBwaW5nIiwib25FeGl0ZWQiLCJuZXh0Q2hpbGRNYXBwaW5nIiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJjaGlsZE1hcHBpbmciLCJuZXh0S2V5IiwicGVuZGluZ05leHRLZXkiLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJoYXNQcmV2IiwiaGFzTmV4dCIsInByZXZDaGlsZCIsImlzTGVhdmluZyIsImluIiwiZXhpdCIsImVudGVyIiwiVHJhbnNpdGlvbkdyb3VwIiwiaGFuZGxlRXhpdGVkIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImlzTW91bnRpbmciLCJmaXJzdFJlbmRlciIsIm1vdW50ZWQiLCJhcHBlYXIiLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiY2hpbGRGYWN0b3J5IiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsImVudGVyS2V5ZnJhbWUiLCJleGl0S2V5ZnJhbWUiLCJwdWxzYXRlS2V5ZnJhbWUiLCJUb3VjaFJpcHBsZVJvb3QiLCJUb3VjaFJpcHBsZVJpcHBsZSIsInB1bHNhdGUiLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJpblByb3AiLCJsZWF2aW5nIiwic2V0TGVhdmluZyIsInJpcHBsZUNsYXNzTmFtZSIsInJpcHBsZSIsInJpcHBsZVZpc2libGUiLCJyaXBwbGVQdWxzYXRlIiwicmlwcGxlU3R5bGVzIiwiY2hpbGRDbGFzc05hbWUiLCJjaGlsZExlYXZpbmciLCJjaGlsZFB1bHNhdGUiLCJ0aW1lb3V0SWQiLCJUb3VjaFJpcHBsZSIsImNlbnRlciIsImNlbnRlclByb3AiLCJyaXBwbGVzIiwic2V0UmlwcGxlcyIsInJpcHBsZUNhbGxiYWNrIiwiaWdub3JpbmdNb3VzZURvd24iLCJzdGFydFRpbWVyIiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwib2xkUmlwcGxlcyIsImZha2VFbGVtZW50Iiwic3FydCIsInNpemVYIiwiY2xpZW50V2lkdGgiLCJzaXplWSIsImNsaWVudEhlaWdodCIsImdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MiLCJCdXR0b25CYXNlUm9vdCIsInZlcnRpY2FsQWxpZ24iLCJjZW50ZXJSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJMaW5rQ29tcG9uZW50Iiwib25Db250ZXh0TWVudSIsIm9uRHJhZ0xlYXZlIiwib25Gb2N1c1Zpc2libGUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJUb3VjaFJpcHBsZVByb3BzIiwiYnV0dG9uUmVmIiwicmlwcGxlUmVmIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlQ29udGV4dE1lbnUiLCJoYW5kbGVEcmFnTGVhdmUiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImlzTm9uTmF0aXZlQnV0dG9uIiwia2V5ZG93blJlZiIsImhhbmRsZUtleVVwIiwiQ29tcG9uZW50UHJvcCIsImJ1dHRvblByb3BzIiwiaGFuZGxlT3duUmVmIiwibW91bnRlZFN0YXRlIiwic2V0TW91bnRlZFN0YXRlIiwiZW5hYmxlVG91Y2hSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJnZXRNZW51SXRlbVV0aWxpdHlDbGFzcyIsIk1lbnVJdGVtUm9vdCIsImRlbnNlIiwiZGlzYWJsZUd1dHRlcnMiLCJndXR0ZXJzIiwicGFkZGluZ0JvdHRvbSIsImJhY2tncm91bmRDbGlwIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsIk1lbnVJdGVtIiwidGFiSW5kZXhQcm9wIiwibWVudUl0ZW1SZWYiLCJnZXRGb3JtQ29udHJvbFV0aWxpdHlDbGFzc2VzIiwiRm9ybUNvbnRyb2xSb290IiwiZmxleERpcmVjdGlvbiIsInZpc3VhbGx5Rm9jdXNlZCIsImluaXRpYWxBZG9ybmVkU3RhcnQiLCJpc011aUVsZW1lbnQiLCJzZXRGaWxsZWQiLCJpbml0aWFsRmlsbGVkIiwiZm9jdXNlZFN0YXRlIiwicmVnaXN0ZXJFZmZlY3QiLCJnZXRMaXN0VXRpbGl0eUNsYXNzIiwiTGlzdFJvb3QiLCJkaXNhYmxlUGFkZGluZyIsInN1YmhlYWRlciIsImxpc3RTdHlsZSIsIkxpc3QiLCJnZXRTY3JvbGxiYXJTaXplIiwiZG9jdW1lbnRXaWR0aCIsImlubmVyV2lkdGgiLCJuZXh0SXRlbSIsImRpc2FibGVMaXN0V3JhcCIsInByZXZpb3VzSXRlbSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJ0ZXh0Q3JpdGVyaWFNYXRjaGVzIiwibmV4dEZvY3VzIiwidGV4dENyaXRlcmlhIiwiaW5uZXJUZXh0IiwicmVwZWF0aW5nIiwibW92ZUZvY3VzIiwiY3VycmVudEZvY3VzIiwiZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSIsInRyYXZlcnNhbEZ1bmN0aW9uIiwid3JhcHBlZE9uY2UiLCJuZXh0Rm9jdXNEaXNhYmxlZCIsIk1lbnVMaXN0IiwiYWN0aW9ucyIsImF1dG9Gb2N1c0l0ZW0iLCJsaXN0UmVmIiwidGV4dENyaXRlcmlhUmVmIiwicHJldmlvdXNLZXlNYXRjaGVkIiwibGFzdFRpbWUiLCJhZGp1c3RTdHlsZUZvclNjcm9sbGJhciIsImNvbnRhaW5lckVsZW1lbnQiLCJub0V4cGxpY2l0V2lkdGgiLCJzY3JvbGxiYXJTaXplIiwiYWN0aXZlSXRlbUluZGV4IiwiaXRlbXMiLCJuZXdDaGlsZFByb3BzIiwiY3JpdGVyaWEiLCJsb3dlcktleSIsImN1cnJUaW1lIiwia2VlcEZvY3VzT25DdXJyZW50IiwiZ2V0UGFwZXJVdGlsaXR5Q2xhc3MiLCJnZXRPdmVybGF5QWxwaGEiLCJlbGV2YXRpb24iLCJhbHBoYVZhbHVlIiwiUGFwZXJSb290Iiwic3F1YXJlIiwicm91bmRlZCIsImJhY2tncm91bmRJbWFnZSIsIlVOTU9VTlRFRCIsIkVYSVRFRCIsIkVOVEVSSU5HIiwiRU5URVJFRCIsIkVYSVRJTkciLCJUcmFuc2l0aW9uIiwiaW5pdGlhbFN0YXR1cyIsImFwcGVhclN0YXR1cyIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJuZXh0Q2FsbGJhY2siLCJ1cGRhdGVTdGF0dXMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJtb3VudGluZyIsInBlcmZvcm1FbnRlciIsInBlcmZvcm1FeGl0IiwiYXBwZWFyaW5nIiwibm9kZVJlZiIsIm1heWJlTm9kZSIsIm1heWJlQXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJvbkVudGVyIiwic2FmZVNldFN0YXRlIiwib25FbnRlcmluZyIsIm9uVHJhbnNpdGlvbkVuZCIsIm9uRW50ZXJlZCIsIl90aGlzMyIsIm9uRXhpdCIsIm9uRXhpdGluZyIsInNldE5leHRDYWxsYmFjayIsIl90aGlzNCIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJhZGRFbmRMaXN0ZW5lciIsIl9yZWYzIiwibWF5YmVOZXh0Q2FsbGJhY2siLCJjaGlsZFByb3BzIiwicmVmbG93IiwiZ2V0VHJhbnNpdGlvblByb3BzIiwiX3N0eWxlJHRyYW5zaXRpb25EdXJhIiwiX3N0eWxlJHRyYW5zaXRpb25UaW1pIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwiZ2V0U2NhbGUiLCJlbnRlcmluZyIsImVudGVyZWQiLCJHcm93IiwiVHJhbnNpdGlvbkNvbXBvbmVudCIsInRpbWVyIiwiYXV0b1RpbWVvdXQiLCJmb3JlaWduUmVmIiwibm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayIsIm1heWJlSXNBcHBlYXJpbmciLCJoYW5kbGVFbnRlcmluZyIsImhhbmRsZUVudGVyIiwiaXNBcHBlYXJpbmciLCJoYW5kbGVFbnRlcmVkIiwiaGFuZGxlRXhpdGluZyIsImhhbmRsZUV4aXQiLCJtdWlTdXBwb3J0QXV0byIsImRpc2FibGVQb3J0YWwiLCJtb3VudE5vZGUiLCJzZXRNb3VudE5vZGUiLCJnZXRDb250YWluZXIiLCJhcmlhSGlkZGVuIiwic2hvdyIsImdldFBhZGRpbmdSaWdodCIsImFyaWFIaWRkZW5TaWJsaW5ncyIsIm1vdW50RWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwiZWxlbWVudHNUb0V4Y2x1ZGUiLCJibGFja2xpc3RUYWdOYW1lcyIsImZpbmRJbmRleE9mIiwiaWR4IiwiY2FuZGlkYXRlc1NlbGVjdG9yIiwiZGVmYXVsdEdldFRhYmJhYmxlIiwicmVndWxhclRhYk5vZGVzIiwib3JkZXJlZFRhYk5vZGVzIiwibm9kZVRhYkluZGV4IiwidGFiaW5kZXhBdHRyIiwiZ2V0VGFiSW5kZXgiLCJnZXRSYWRpbyIsInJvdmluZyIsImlzTm9uVGFiYmFibGVSYWRpbyIsImlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUiLCJkb2N1bWVudE9yZGVyIiwiZGVmYXVsdElzRW5hYmxlZCIsImRpc2FibGVBdXRvRm9jdXMiLCJkaXNhYmxlRW5mb3JjZUZvY3VzIiwiZGlzYWJsZVJlc3RvcmVGb2N1cyIsImdldFRhYmJhYmxlIiwiaXNFbmFibGVkIiwiaWdub3JlTmV4dEVuZm9yY2VGb2N1cyIsInNlbnRpbmVsU3RhcnQiLCJzZW50aW5lbEVuZCIsIm5vZGVUb1Jlc3RvcmUiLCJyZWFjdEZvY3VzRXZlbnRUYXJnZXQiLCJhY3RpdmF0ZWQiLCJyb290UmVmIiwibGFzdEtleWRvd24iLCJjb250YWluIiwicm9vdEVsZW1lbnQiLCJoYXNGb2N1cyIsInRhYmJhYmxlIiwiX2xhc3RLZXlkb3duJGN1cnJlbnQiLCJfbGFzdEtleWRvd24kY3VycmVudDIiLCJpc1NoaWZ0VGFiIiwiZm9jdXNOZXh0IiwiZm9jdXNQcmV2aW91cyIsImxvb3BGb2N1cyIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImhhbmRsZUZvY3VzU2VudGluZWwiLCJjaGlsZHJlblByb3BzSGFuZGxlciIsImdldE1vZGFsVXRpbGl0eUNsYXNzIiwiZGVmYXVsdE1hbmFnZXIiLCJjb250YWluZXJzIiwibW9kYWxzIiwibW9kYWxJbmRleCIsIm1vZGFsUmVmIiwiaGlkZGVuU2libGluZ3MiLCJnZXRIaWRkZW5TaWJsaW5ncyIsIm1vdW50IiwiY29udGFpbmVySW5kZXgiLCJyZXN0b3JlIiwicmVzdG9yZVN0eWxlIiwiZGlzYWJsZVNjcm9sbExvY2siLCJpc092ZXJmbG93aW5nIiwiZWwiLCJwYXJlbnRFbGVtZW50Iiwic2Nyb2xsQ29udGFpbmVyIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwicmVtb3ZlUHJvcGVydHkiLCJoYW5kbGVDb250YWluZXIiLCJuZXh0VG9wIiwiaXNUb3BNb2RhbCIsIkJhY2tkcm9wQ29tcG9uZW50IiwiQmFja2Ryb3BQcm9wcyIsImNsb3NlQWZ0ZXJUcmFuc2l0aW9uIiwiZGlzYWJsZUVzY2FwZUtleURvd24iLCJoaWRlQmFja2Ryb3AiLCJrZWVwTW91bnRlZCIsIm1hbmFnZXIiLCJvbkJhY2tkcm9wQ2xpY2siLCJvbkNsb3NlIiwib25UcmFuc2l0aW9uRW50ZXIiLCJvblRyYW5zaXRpb25FeGl0ZWQiLCJleGl0ZWQiLCJzZXRFeGl0ZWQiLCJtb3VudE5vZGVSZWYiLCJoYXNUcmFuc2l0aW9uIiwiZ2V0SGFzVHJhbnNpdGlvbiIsImdldE1vZGFsIiwiaGFuZGxlTW91bnRlZCIsImhhbmRsZU9wZW4iLCJyZXNvbHZlZENvbnRhaW5lciIsImhhbmRsZVBvcnRhbFJlZiIsImhhbmRsZUNsb3NlIiwiZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3MiLCJpbnZpc2libGUiLCJkZWZhdWx0VGltZW91dCIsInRyYW5zaXRpb25Qcm9wcyIsIndlYmtpdFRyYW5zaXRpb24iLCJCYWNrZHJvcFJvb3QiLCJNb2RhbFJvb3QiLCJoaWRkZW4iLCJNb2RhbEJhY2tkcm9wIiwiYmFja2Ryb3AiLCJjb21tb25Qcm9wcyIsImdldFBvcG92ZXJVdGlsaXR5Q2xhc3MiLCJnZXRPZmZzZXRUb3AiLCJnZXRPZmZzZXRMZWZ0IiwiZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUiLCJyZXNvbHZlQW5jaG9yRWwiLCJhbmNob3JFbCIsIlBvcG92ZXJSb290IiwiUG9wb3ZlclBhcGVyIiwiYW5jaG9yT3JpZ2luIiwiYW5jaG9yUG9zaXRpb24iLCJhbmNob3JSZWZlcmVuY2UiLCJjb250YWluZXJQcm9wIiwibWFyZ2luVGhyZXNob2xkIiwiUGFwZXJQcm9wcyIsInRyYW5zaXRpb25EdXJhdGlvblByb3AiLCJUcmFuc2l0aW9uUHJvcHMiLCJwYXBlclJlZiIsImhhbmRsZVBhcGVyUmVmIiwiZ2V0QW5jaG9yT2Zmc2V0IiwicmVzb2x2ZWRBbmNob3JFbCIsImFuY2hvclJlY3QiLCJnZXRUcmFuc2Zvcm1PcmlnaW4iLCJlbGVtUmVjdCIsImdldFBvc2l0aW9uaW5nU3R5bGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImVsZW1UcmFuc2Zvcm1PcmlnaW4iLCJoZWlnaHRUaHJlc2hvbGQiLCJ3aWR0aFRocmVzaG9sZCIsInNldFBvc2l0aW9uaW5nU3R5bGVzIiwicG9zaXRpb25pbmciLCJ1cGRhdGVQb3NpdGlvbiIsImdldE1lbnVVdGlsaXR5Q2xhc3MiLCJSVExfT1JJR0lOIiwiTFRSX09SSUdJTiIsIk1lbnVSb290IiwiTWVudVBhcGVyIiwiV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmciLCJNZW51TWVudUxpc3QiLCJkaXNhYmxlQXV0b0ZvY3VzSXRlbSIsIk1lbnVMaXN0UHJvcHMiLCJQb3BvdmVyQ2xhc3NlcyIsIm1lbnVMaXN0QWN0aW9uc1JlZiIsImdldE5hdGl2ZVNlbGVjdFV0aWxpdHlDbGFzc2VzIiwibmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzIiwiTmF0aXZlU2VsZWN0U2VsZWN0IiwibmF0aXZlU2VsZWN0SWNvblN0eWxlcyIsIk5hdGl2ZVNlbGVjdEljb24iLCJpY29uT3BlbiIsIkljb25Db21wb25lbnQiLCJnZXRTZWxlY3RVdGlsaXR5Q2xhc3NlcyIsIlNlbGVjdFNlbGVjdCIsInRleHRPdmVyZmxvdyIsIlNlbGVjdEljb24iLCJTZWxlY3ROYXRpdmVJbnB1dCIsIm5hdGl2ZUlucHV0IiwiYXJlRXF1YWxWYWx1ZXMiLCJTZWxlY3RJbnB1dCIsImF1dG9XaWR0aCIsImRlZmF1bHRPcGVuIiwiZGlzcGxheUVtcHR5IiwibGFiZWxJZCIsIk1lbnVQcm9wcyIsIm9uT3BlbiIsIm9wZW5Qcm9wIiwicmVuZGVyVmFsdWUiLCJTZWxlY3REaXNwbGF5UHJvcHMiLCJvcGVuU3RhdGUiLCJzZXRPcGVuU3RhdGUiLCJkaXNwbGF5UmVmIiwiZGlzcGxheU5vZGUiLCJzZXREaXNwbGF5Tm9kZSIsImlzT3BlbkNvbnRyb2xsZWQiLCJtZW51TWluV2lkdGhTdGF0ZSIsInNldE1lbnVNaW5XaWR0aFN0YXRlIiwiaGFuZGxlRGlzcGxheVJlZiIsImdldEVsZW1lbnRCeUlkIiwiaXNDb2xsYXBzZWQiLCJjaGlsZHJlbkFycmF5IiwiaGFuZGxlSXRlbUNsaWNrIiwiaXRlbUluZGV4IiwiZGlzcGxheVNpbmdsZSIsImRpc3BsYXlNdWx0aXBsZSIsImNvbXB1dGVEaXNwbGF5IiwiZm91bmRNYXRjaCIsIm1lbnVNaW5XaWR0aCIsImJ1dHRvbklkIiwiZ2V0SW5wdXRVdGlsaXR5Q2xhc3MiLCJJbnB1dFJvb3QiLCJkaXNhYmxlVW5kZXJsaW5lIiwidW5kZXJsaW5lIiwiYm90dG9tTGluZUNvbG9yIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJJbnB1dElucHV0IiwiY29tcG9uZW50c1Byb3BzUHJvcCIsImlucHV0Q29tcG9uZW50c1Byb3BzIiwiZ2V0RmlsbGVkSW5wdXRVdGlsaXR5Q2xhc3MiLCJGaWxsZWRJbnB1dFJvb3QiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJGaWxsZWRJbnB1dElucHV0IiwiRmlsbGVkSW5wdXQiLCJmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcyIsIl9JbnB1dCIsIl9GaWxsZWRJbnB1dCIsIlNlbGVjdCIsIkFycm93RHJvcERvd24iLCJuYXRpdmUiLCJ2YXJpYW50UHJvcHMiLCJvdXRsaW5lZCIsImlucHV0Q29tcG9uZW50UmVmIiwiZ2V0Q2hpcFV0aWxpdHlDbGFzcyIsIkNoaXBSb290IiwiY2xpY2thYmxlIiwib25EZWxldGUiLCJhdmF0YXIiLCJkZWxldGVJY29uIiwiZGVsZXRhYmxlIiwiZGVsZXRlSWNvbkNvbG9yIiwiQ2hpcExhYmVsIiwiaXNEZWxldGVLZXlib2FyZEV2ZW50Iiwia2V5Ym9hcmRFdmVudCIsImF2YXRhclByb3AiLCJjbGlja2FibGVQcm9wIiwiZGVsZXRlSWNvblByb3AiLCJpY29uUHJvcCIsImNoaXBSZWYiLCJoYW5kbGVEZWxldGVJY29uQ2xpY2siLCJtb3JlUHJvcHMiLCJjdXN0b21DbGFzc2VzIiwiZGVsZXRlSWNvblNtYWxsIiwiSVRFTV9IRUlHSFQiLCJnZXRTdHlsZXMiLCJwZXJzb25OYW1lIiwic2V0SXRlbXMiLCJjaG9zZW5JdGVtIiwic2V0Q2hvc2VuSXRlbSIsImZsZXhXcmFwIiwic2VhcmNoVGVybSIsIm1lZXRpbmdGb3JtYXQiLCJ0aW1lUmFuZ2UiLCJ1cGRhdGVTZWFyY2hUZXJtIiwiZGF5cyIsIm1lZXRpbmdGcmVxdWVuY2llcyIsInVwZGF0ZVN1YmplY3QiLCJ1cGRhdGVNZWV0aW5nRm9ybWF0IiwidXBkYXRlVHlwZSIsInVwZGF0ZURheXMiLCJ1cGRhdGVNZWV0aW5nRnJlcXVlbmNpZXMiLCJzdWJtaXRTZWFyY2giLCJNZWV0aW5nRm9ybWF0cyIsInNpZGVWaWV3SXNTaG93aW5nIiwibmFtZU9mQ2xhc3MiLCJzZXRTaWRlVmlld0lzU2hvd2luZyIsInNlYXJjaFZpZXdJc1Nob3dpbmciLCJzZXRTZWFyY2hWaWV3SXNTaG93aW5nIiwic2V0U2VhcmNoVGVybSIsInNldE1lZXRpbmdGb3JtYXQiLCJzZXRUeXBlIiwic2V0VGltZVJhbmdlIiwic2V0RGF5cyIsInNldE1lZXRpbmdGcmVxdWVuY2llcyIsInNob3dKb2luU3R1ZHlHcm91cFBvcHVwIiwibWVtYmVyc1ZpZXdJc1Nob3dpbmciLCJzZXRNZW1iZXJzVmlld0lzU2hvd2luZyIsIm1lbWJlcnMiLCJkZXRhaWxzVmlld0lzU2hvd2luZyIsInNldERldGFpbHNWaWV3SXNTaG93aW5nIiwic3VibWl0RGVsZXRlIiwic3VibWl0TGVhdmUiLCJzaG93RWRpdFN0dWR5R3JvdXBQb3B1cCIsImZlZWRSZWYiLCJwb3N0cyIsImhhbmRsZVNlbGVjdE1lZXRpbmciLCJyZWN1cnJpbmdNZWV0aW5nU2VsZWN0ZWQiLCJzaG93Q3JlYXRlTWVldGluZ1N0dWR5R3JvdXBQb3B1cCIsImNyZWF0ZWRBdCIsInJlc3BvbnNlcyIsInNob3dDcmVhdGVQb3N0U3R1ZHlHcm91cFBvcHVwIiwic2V0R3JvdXAiLCJnZXRTdHVkeUdyb3VwIiwic3VibWl0TmV3RW1haWwiLCJzdWJtaXROZXdQYXNzd29yZCIsInN1Ym1pdERlbGV0ZUFjY291bnQiLCJ4ZG9tYWluIiwicGljayIsImF0dHIiLCJOQVRJVkVfU0VUX1RJTUVPVVQiLCJOQVRJVkVfQ0xFQVJfVElNRU9VVCIsImluc3RhbGxUaW1lckZ1bmN0aW9ucyIsInVzZU5hdGl2ZVRpbWVycyIsInNldFRpbWVvdXRGbiIsImNsZWFyVGltZW91dEZuIiwiUEFDS0VUX1RZUEVTIiwiUEFDS0VUX1RZUEVTX1JFVkVSU0UiLCJFUlJPUl9QQUNLRVQiLCJ3aXRoTmF0aXZlQmxvYiIsIkJsb2IiLCJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJlbmNvZGVCbG9iQXNCYXNlNjQiLCJmaWxlUmVhZGVyIiwic3VwcG9ydHNCaW5hcnkiLCJjaGFycyIsImxvb2t1cCIsIlVpbnQ4QXJyYXkiLCJkZWNvZGVCYXNlNjRQYWNrZXQiLCJiaW5hcnlUeXBlIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJidWZmZXJMZW5ndGgiLCJhcnJheWJ1ZmZlciIsImJ5dGVzIiwibWFwQmluYXJ5IiwiZW5jb2RlZFBhY2tldCIsIlNFUEFSQVRPUiIsIlRyYW5zcG9ydCIsInNvY2tldCIsIm1zZyIsImRvT3BlbiIsImNsb3NlIiwiZG9DbG9zZSIsInBhY2tldHMiLCJvbkRhdGEiLCJwYWNrZXQiLCJvblBhY2tldCIsIlBvbGxpbmciLCJwb2xsaW5nIiwicG9sbCIsInBhdXNlIiwib25QYXVzZSIsInRvdGFsIiwiZG9Qb2xsIiwiZW5jb2RlZFBheWxvYWQiLCJlbmNvZGVkUGFja2V0cyIsImRlY29kZWRQYWNrZXQiLCJkZWNvZGVQYXlsb2FkIiwiZW5jb2RlUGF5bG9hZCIsImRvV3JpdGUiLCJ0aW1lc3RhbXBSZXF1ZXN0cyIsInRpbWVzdGFtcFBhcmFtIiwic2lkIiwiYjY0IiwiZW5jb2RlZFF1ZXJ5IiwicGFyc2VxcyIsImVtcHR5IiwiaGFzWEhSMiIsIlJlcXVlc3QiLCJ4c2NoZW1lIiwieGhyIiwiZXh0cmFIZWFkZXJzIiwic2V0RGlzYWJsZUhlYWRlckNoZWNrIiwicmVxdWVzdFRpbWVvdXQiLCJvbkxvYWQiLCJyZXF1ZXN0c0NvdW50IiwicmVxdWVzdHMiLCJvblN1Y2Nlc3MiLCJjbGVhbnVwIiwiZnJvbUVycm9yIiwidW5sb2FkSGFuZGxlciIsIldlYlNvY2tldCIsImlzUmVhY3ROYXRpdmUiLCJXUyIsImZvcmNlQmFzZTY0IiwiY2hlY2siLCJwcm90b2NvbHMiLCJ3cyIsImFkZEV2ZW50TGlzdGVuZXJzIiwib25vcGVuIiwiYXV0b1VucmVmIiwiX3NvY2tldCIsInVucmVmIiwib25jbG9zZSIsImV2IiwibGFzdFBhY2tldCIsInRyYW5zcG9ydHMiLCJ3ZWJzb2NrZXQiLCJpc1NTTCIsInJlcSIsInBvbGxYaHIiLCJTb2NrZXQiLCJwYXJzZXVyaSIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsImFnZW50IiwidXBncmFkZSIsInJlbWVtYmVyVXBncmFkZSIsInJlamVjdFVuYXV0aG9yaXplZCIsInBlck1lc3NhZ2VEZWZsYXRlIiwidGhyZXNob2xkIiwidHJhbnNwb3J0T3B0aW9ucyIsImNsb3NlT25CZWZvcmV1bmxvYWQiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ1RpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsIm9mZmxpbmVFdmVudExpc3RlbmVyIiwiY3JlYXRlVHJhbnNwb3J0IiwiRUlPIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwic2V0VHJhbnNwb3J0Iiwib25EcmFpbiIsInByb2JlIiwiZmFpbGVkIiwib25UcmFuc3BvcnRPcGVuIiwidXBncmFkaW5nIiwiZnJlZXplVHJhbnNwb3J0Iiwib25UcmFuc3BvcnRDbG9zZSIsIm9udXBncmFkZSIsIm9uSGFuZHNoYWtlIiwicmVzZXRQaW5nVGltZW91dCIsInNlbmRQYWNrZXQiLCJmaWx0ZXJVcGdyYWRlcyIsImNvbXByZXNzIiwiY2xlYW51cEFuZENsb3NlIiwid2FpdEZvclVwZ3JhZGUiLCJmaWx0ZXJlZFVwZ3JhZGVzIiwid2l0aE5hdGl2ZUZpbGUiLCJGaWxlIiwiaXNCaW5hcnkiLCJoYXNCaW5hcnkiLCJkZWNvbnN0cnVjdFBhY2tldCIsImJ1ZmZlcnMiLCJwYWNrZXREYXRhIiwicGFjayIsIl9kZWNvbnN0cnVjdFBhY2tldCIsImF0dGFjaG1lbnRzIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsInJlY29uc3RydWN0UGFja2V0IiwiX3JlY29uc3RydWN0UGFja2V0IiwiUGFja2V0VHlwZSIsIkVuY29kZXIiLCJFVkVOVCIsIkFDSyIsImVuY29kZUFzU3RyaW5nIiwiQklOQVJZX0VWRU5UIiwiQklOQVJZX0FDSyIsImVuY29kZUFzQmluYXJ5IiwibnNwIiwiZGVjb25zdHJ1Y3Rpb24iLCJEZWNvZGVyIiwiZGVjb2RlU3RyaW5nIiwicmVjb25zdHJ1Y3RvciIsIkJpbmFyeVJlY29uc3RydWN0b3IiLCJ0YWtlQmluYXJ5RGF0YSIsImJ1ZiIsInRyeVBhcnNlIiwiaXNQYXlsb2FkVmFsaWQiLCJDT05ORUNUIiwiRElTQ09OTkVDVCIsIkNPTk5FQ1RfRVJST1IiLCJmaW5pc2hlZFJlY29uc3RydWN0aW9uIiwicmVjb25QYWNrIiwiYmluRGF0YSIsIlJFU0VSVkVEX0VWRU5UUyIsImNvbm5lY3QiLCJjb25uZWN0X2Vycm9yIiwiZGlzY29ubmVjdGluZyIsIm5ld0xpc3RlbmVyIiwiaW8iLCJjb25uZWN0ZWQiLCJkaXNjb25uZWN0ZWQiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsImlkcyIsImFja3MiLCJfYXV0b0Nvbm5lY3QiLCJzdWJFdmVudHMiLCJzdWJzIiwib25wYWNrZXQiLCJfcmVhZHlTdGF0ZSIsImFjayIsIl9yZWdpc3RlckFja0NhbGxiYWNrIiwiaXNUcmFuc3BvcnRXcml0YWJsZSIsImVuZ2luZSIsInZvbGF0aWxlIiwiX3BhY2tldCIsIm9uY29ubmVjdCIsIm9uZXZlbnQiLCJvbmFjayIsIm9uZGlzY29ubmVjdCIsImVtaXRFdmVudCIsIl9hbnlMaXN0ZW5lcnMiLCJlbWl0QnVmZmVyZWQiLCJzdWJEZXN0cm95Iiwib25BbnkiLCJwcmVwZW5kQW55Iiwib2ZmQW55IiwibGlzdGVuZXJzQW55IiwiTWFuYWdlciIsIl9hIiwibnNwcyIsInJlY29ubmVjdGlvbiIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwicmVjb25uZWN0aW9uRGVsYXkiLCJyZWNvbm5lY3Rpb25EZWxheU1heCIsInJhbmRvbWl6YXRpb25GYWN0b3IiLCJiYWNrb2ZmIiwiX3BhcnNlciIsImRlY29kZXIiLCJhdXRvQ29ubmVjdCIsIl9yZWNvbm5lY3Rpb24iLCJfcmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJfcmVjb25uZWN0aW9uRGVsYXkiLCJfcmFuZG9taXphdGlvbkZhY3RvciIsIl9yZWNvbm5lY3Rpb25EZWxheU1heCIsIl90aW1lb3V0IiwibWF5YmVSZWNvbm5lY3RPbk9wZW4iLCJfcmVjb25uZWN0aW5nIiwicmVjb25uZWN0Iiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWJEZXN0cm95IiwiZXJyb3JTdWIiLCJvbnBpbmciLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJfZGVzdHJveSIsIl9jbG9zZSIsIm9ucmVjb25uZWN0IiwiYXR0ZW1wdCIsInNhbWVOYW1lc3BhY2UiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsImNvbnZlcnNhdGlvbiIsIm1lc3NhZ2VzVmlld1JlZiIsImxvZ2dlZEluVXNlciIsInJlY2VpdmluZ1VzZXIiLCJwYXJ0aWNpcGFudHMiLCJsb2dnZWRJblVzZXJJZCIsInNldFNvY2tldCIsImlucHV0dGVkTWVzc2FnZSIsInNldElucHV0dGVkTWVzc2FnZSIsIm1lc3NhZ2VzIiwic2V0TWVzc2FnZXMiLCJsb2FkQ29udmVyc2F0aW9uIiwiaW5pdGlhbFNvY2tldCIsInNlbmRlcklkIiwidGVtcE1lc3NhZ2VzIiwiZXJyb3JNZXNzYWdlIiwidG9Mb2NhbGVTdHJpbmciLCJzZXRTZWxlY3RlZENvbnZlcnNhdGlvbiIsImNoYXRzVmlld0lzU2hvd2luZyIsInNldENoYXRzVmlld0lzU2hvd2luZyIsImNvbnZlcnNhdGlvbnMiLCJzZXRDb252ZXJzYXRpb25zIiwicG9wdWxhdGVDb252ZXJzYXRpb25zIiwiY2hhdCIsIm90aGVyQ2hhdCIsInNlbGVjdGVkQ29udmVyc2F0aW9uIiwic2V0SGFzTm90TW91bnRlZCIsInBvcHVwSXNTaG93aW5nIiwibm90aWZpY2F0aW9uSXNTaG93aW5nIiwidXBkYXRlQXV0aGVudGljYXRpb25Ub2tlbiIsImFjY291bnRTZXR1cFZpZXciLCJhY2NvdW50TG9naW5WaWV3Iiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5Iiwic3ltIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJjb21wb3NlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJjdXJyZW50RGF0ZSIsImp3dEV4cGlyYXRpb25EYXRlIiwiaW5pdGlhbFN0YXRlIiwiYWxsUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJjb21iaW5lUmVkdWNlcnMiLCJzZXRJdGVtIiwicGVyc2lzdGllbnRTdGF0ZSIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiYXBwbHlNaWRkbGV3YXJlIiwiUmVhY3RET00iXSwic291cmNlUm9vdCI6IiJ9