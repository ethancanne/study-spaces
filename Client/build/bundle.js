/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={3023:(e,t)=>{"use strict";if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},6607:(e,t,n)=>{"use strict";n(3023)},9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),a=n(4372),i=n(5327),l=n(4097),s=n(4109),u=n(7985),c=n(5061),d=n(5655),p=n(5263);e.exports=function(e){return new Promise((function(t,n){var f,m=e.data,h=e.headers,g=e.responseType;function v(){e.cancelToken&&e.cancelToken.unsubscribe(f),e.signal&&e.signal.removeEventListener("abort",f)}r.isFormData(m)&&delete h["Content-Type"];var y=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",A=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";h.Authorization="Basic "+btoa(b+":"+A)}var x=l(e.baseURL,e.url);function C(){if(y){var r="getAllResponseHeaders"in y?s(y.getAllResponseHeaders()):null,a={data:g&&"text"!==g&&"json"!==g?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:r,config:e,request:y};o((function(e){t(e),v()}),(function(e){n(e),v()}),a),y=null}}if(y.open(e.method.toUpperCase(),i(x,e.params,e.paramsSerializer),!0),y.timeout=e.timeout,"onloadend"in y?y.onloadend=C:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))&&setTimeout(C)},y.onabort=function(){y&&(n(c("Request aborted",e,"ECONNABORTED",y)),y=null)},y.onerror=function(){n(c("Network Error",e,null,y)),y=null},y.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||d.transitional;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",y)),y=null},r.isStandardBrowserEnv()){var w=(e.withCredentials||u(x))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;w&&(h[e.xsrfHeaderName]=w)}"setRequestHeader"in y&&r.forEach(h,(function(e,t){void 0===m&&"content-type"===t.toLowerCase()?delete h[t]:y.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(y.withCredentials=!!e.withCredentials),g&&"json"!==g&&(y.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&y.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(f=function(e){y&&(n(!e||e&&e.type?new p("canceled"):e),y.abort(),y=null)},e.cancelToken&&e.cancelToken.subscribe(f),e.signal&&(e.signal.aborted?f():e.signal.addEventListener("abort",f))),m||(m=null),y.send(m)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),a=n(321),i=n(7185),l=function e(t){var n=new a(t),l=o(a.prototype.request,n);return r.extend(l,a.prototype,n),r.extend(l,n),l.create=function(n){return e(i(t,n))},l}(n(5655));l.Axios=a,l.Cancel=n(5263),l.CancelToken=n(4972),l.isCancel=n(6502),l.VERSION=n(7288).version,l.all=function(e){return Promise.all(e)},l.spread=n(8713),l.isAxiosError=n(6268),e.exports=l,e.exports.default=l},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var r=n(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),a=n(782),i=n(3572),l=n(7185),s=n(4875),u=s.validators;function c(e){this.defaults=e,this.interceptors={request:new a,response:new a}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;void 0!==t&&s.assertOptions(t,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var n=[],r=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(r=r&&t.synchronous,n.unshift(t.fulfilled,t.rejected))}));var o,a=[];if(this.interceptors.response.forEach((function(e){a.push(e.fulfilled,e.rejected)})),!r){var c=[i,void 0];for(Array.prototype.unshift.apply(c,n),c=c.concat(a),o=Promise.resolve(e);c.length;)o=o.then(c.shift(),c.shift());return o}for(var d=e;n.length;){var p=n.shift(),f=n.shift();try{d=p(d)}catch(e){f(e);break}}try{o=i(d)}catch(e){return Promise.reject(e)}for(;a.length;)o=o.then(a.shift(),a.shift());return o},c.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(l(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(l(r||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},5061:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),a=n(6502),i=n(5655),l=n(5263);function s(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new l("canceled")}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return s(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(s(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function a(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function i(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function l(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function s(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var u={url:i,method:i,data:i,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:s};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||a,o=t(e);r.isUndefined(o)&&t!==s||(n[e]=o)})),n}},6026:(e,t,n)=>{"use strict";var r=n(5061);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5655);e.exports=function(e,t,n){var a=this||o;return r.forEach(n,(function(n){e=n.call(a,e,t)})),e}},5655:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),a=n(481),i={"Content-Type":"application/x-www-form-urlencoded"};function l(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(s=n(5448)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(l(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(l(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||u.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,i=!n&&"json"===this.responseType;if(i||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw a(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(i)})),e.exports=u},7288:e=>{e.exports={version:"0.23.0"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4875:(e,t,n)=>{"use strict";var r=n(7288).version,o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={};o.transitional=function(e,t,n){function o(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,i){if(!1===e)throw new Error(o(r," has been removed"+(t?" in "+t:"")));return t&&!a[r]&&(a[r]=!0,console.warn(o(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,i)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var a=r[o],i=t[a];if(i){var l=e[a],s=void 0===l||i(l,a,e);if(!0!==s)throw new TypeError("option "+a+" must be "+s)}else if(!0!==n)throw Error("Unknown option "+a)}},validators:o}},4867:(e,t,n)=>{"use strict";var r=n(1849),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function s(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isPlainObject:s,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return l(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){s(t[r])&&s(n)?t[r]=e(t[r],n):s(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},5269:e=>{e.exports={InPerson:"In person",Mixed:"In person or online",Online:"Online"}},4193:e=>{function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var r,o=[];(r=Array(12).keys(),function(e){if(Array.isArray(e))return n(e)}(r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e){["00","15","30","45"].map((function(t){o.push("".concat(e,":").concat(t))}))}));var a=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.hour=t,this.minute=n,this.partOfDay=r}var n,r,o;return n=e,o=[{key:"isBetween",value:function(e,t,n){var r=e.isAfter(t),o=n.isAfter(e);return r&&o}},{key:"parseTimeString",value:function(t){var n=t.indexOf(":"),r=t.slice(0,n),o=t.length-2;return new e(r,t.slice(n+1,o),t.slice(o,t.length))}}],(r=[{key:"isAfter",value:function(e){return this.partOfDay===e.partOfDay?this.hour<e.hour||!(this.hour>e.hour)&&this.minute<e.minute:this.partOfDay<e.partOfDay}}])&&t(n.prototype,r),o&&t(n,o),e}();e.exports={Days:{Monday:"Monday",Tuesday:"Tuesday",Wednesday:"Wednesday",Thursday:"Thursday",Friday:"Friday",Saturday:"Saturday",Sunday:"Sunday"},MeetingFrequencies:{Daily:"Daily",Monthly:"Monthly",OneTime:"One-time",Weekly:"Weekly",Yearly:"Yearly"},PartOfDay:{Am:"AM",Pm:"PM"},Times:o,Time:a}},4308:e=>{e.exports={Account:{ErrorCreateAccount:"An error occurred while attempting to create an account.",NotOver18:"You need to be 18 or older to create an account.",IncorrectPassword:"The password provided is incorrect.",SuccessAccountCreated:"The account was created successfully.",SuccessAccountSetup:"The account was setup successfully.",SuccessLogin:"The login was successful.",SuccessUpdateAuthenticationToken:"The authentication token has been successfully updated.",UnverifiedUserWasFound:"The unverified user was found.",UserAlreadyExists:"A user with that email address already exists.",UserNotFound:"The user was not found."},StudyGroup:{ErrorCreateStudyGroup:"An error ocurred while attempting to create a study group.",SuccessStudyGroupCreated:"The study group was created sucessfully.",SuccessStudyGroupsRetrieved:"The study groups were retrieved sucessfully.",ErrorGettingSearchResults:"An error ocurred while attempting to get search results."}}},2239:e=>{e.exports={Account:{CreateAccount:"/api/account/create",GetUnverifiedUser:"/api/account/get-unverified-user",Login:"/api/account/login",SetupAccount:"/api/account/setup",UpdateAuthenticationToken:"/api/account/update-authentication-token"},StaticResources:{Index:"/*"},Search:{GetSearchResults:"/api/search/get"},StudyGroup:{CreateStudyGroup:"/api/study-group/create",GetUserStudyGroups:"/api/study-group/get"}}},4158:e=>{function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var r,o;return r=e,o=[{key:"isDefined",value:function(e){return"undefined"!==t(e)&&null!=e}},{key:"isError",value:function(e){return e instanceof Error}},{key:"isUndefined",value:function(e){return"undefined"===t(e)}}],null&&n(r.prototype,null),o&&n(r,o),e}();e.exports=r},6108:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap);"]),i.push([e.id,'*{font-family:"Merriweather", serif;overflow-x:hidden;margin:0;padding:0;box-sizing:border-box}html{background-color:#f9f5f1;background-image:url("https://www.flipnational.org/wp-content/uploads/2018/03/CAE-Website-Full-Background-Texture1902x1200-9.jpg");background-position:center;background-repeat:no-repeat;background-size:cover;height:100%}html body{height:100%}html body #root{height:100%}html body #root .container{height:100%;overflow:hidden}\n',"",{version:3,sources:["webpack://./Client/src/App.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAGA,EACI,iCAAkC,CAClC,iBAAkB,CAClB,QAAS,CACT,SAAU,CACV,qBAAsB,CACzB,KAEG,wBCX2B,CDa3B,kIAAmI,CAGnI,0BAA2B,CAC3B,2BAA4B,CAC5B,qBAAsB,CAEtB,WAAY,CAVhB,UAaQ,WAAY,CAbpB,gBAeY,WAAY,CAfxB,2BAiBgB,WAAY,CACZ,eAAgB",sourcesContent:['@import "./globals.scss";\r\n@import url("https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap");\r\n\r\n* {\r\n    font-family: "Merriweather", serif;\r\n    overflow-x: hidden;\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\nhtml {\r\n    background-color: $main-background-color;\r\n    /* The image used */\r\n    background-image: url("https://www.flipnational.org/wp-content/uploads/2018/03/CAE-Website-Full-Background-Texture1902x1200-9.jpg");\r\n\r\n    /* Center and scale the image nicely */\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n\r\n    height: 100%;\r\n\r\n    body {\r\n        height: 100%;\r\n        #root {\r\n            height: 100%;\r\n            .container {\r\n                height: 100%;\r\n                overflow: hidden;\r\n            }\r\n        }\r\n    }\r\n}\r\n',"$main-background-color: #f9f5f1;\r\n$primary-button-color: #d4aa8c75;\r\n$creation-button-color: #8cd48c75;\r\n$destructive-button-color: #d48c8c75;\r\n$border-color: #d4aa8c;\r\n$highlight-color: #ffda5a;\r\n\r\n$mobile-width: 800px;\r\n\r\n@mixin mobile {\r\n    @media (max-width:#{$mobile-width}) {\r\n        @content;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const l=i},1338:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,'.HomePage{width:100%;height:100%}.HomePage .subtitle{position:fixed;font-size:80px;margin:100px;overflow-x:visible;font-weight:300;color:rgba(58,58,58,0.872);font-weight:900;font-size:90px}.HomePage::after{content:"";width:94%;height:80px;background-color:#ffda5a;position:absolute;z-index:-2;top:7em;right:0}@media (max-width: 800px){.HomePage{display:block;padding:0;margin:0}.HomePage::after{display:none}.HomePage .subtitle{display:none}}\n',"",{version:3,sources:["webpack://./Client/src/Pages/Home/Home.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,UACI,UAAW,CACX,WAAY,CAFhB,oBASQ,cAAe,CACf,cAAe,CACf,YAAa,CACb,kBAAmB,CACnB,eAAgB,CAChB,0BAA8B,CAC9B,eAAgB,CAChB,cAAe,CAhBvB,iBAoBQ,UAAW,CACX,SAAU,CACV,WAAY,CACZ,wBCnBiB,CDoBjB,iBAAkB,CAClB,UAAW,CACX,OAAQ,CACR,OAAQ,CACX,0BA5BL,UAgCY,aAAc,CACd,SAAU,CACV,QAAS,CAlCrB,iBAqCY,YAAa,CArCzB,oBAwCY,YAAa,CAChB",sourcesContent:['@import "../../globals.scss";\r\n.HomePage {\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    // display: flex;\r\n    // justify-content: space-between;\r\n    // flex-direction: row;\r\n\r\n    .subtitle {\r\n        position: fixed;\r\n        font-size: 80px;\r\n        margin: 100px;\r\n        overflow-x: visible;\r\n        font-weight: 300;\r\n        color: rgba(58, 58, 58, 0.872);\r\n        font-weight: 900;\r\n        font-size: 90px;\r\n    }\r\n\r\n    &::after {\r\n        content: "";\r\n        width: 94%;\r\n        height: 80px;\r\n        background-color: $highlight-color;\r\n        position: absolute;\r\n        z-index: -2;\r\n        top: 7em;\r\n        right: 0;\r\n    }\r\n\r\n    @media (max-width: $mobile-width) {\r\n        & {\r\n            display: block;\r\n            padding: 0;\r\n            margin: 0;\r\n        }\r\n        &::after {\r\n            display: none;\r\n        }\r\n        .subtitle {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n',"$main-background-color: #f9f5f1;\r\n$primary-button-color: #d4aa8c75;\r\n$creation-button-color: #8cd48c75;\r\n$destructive-button-color: #d48c8c75;\r\n$border-color: #d4aa8c;\r\n$highlight-color: #ffda5a;\r\n\r\n$mobile-width: 800px;\r\n\r\n@mixin mobile {\r\n    @media (max-width:#{$mobile-width}) {\r\n        @content;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const l=i},4739:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".page{animation:page-load-up 0.3s ease-out;padding-top:0px;height:100%}.page .page-title{display:flex;align-items:center;height:7em;background-color:rgba(103,78,48,0.151);backdrop-filter:blur(10px);color:rgba(0,0,0,0.858);text-shadow:rgba(0,0,0,0.123) 0 3px 1px;box-shadow:rgba(120,120,120,0.249) 3px 5px 5px 1px;z-index:0;box-shadow:inset 0px 0px 10px rgba(0,0,0,0.123)}.page .page-title h1{background-color:#ffda5a;width:150px;text-align:center;margin-left:30px}@keyframes page-load-up{0%{opacity:0;padding-top:5px}100%{opacity:1;padding-top:0px}}\n","",{version:3,sources:["webpack://./Client/src/Pages/Page.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,MACI,oCAAqC,CACrC,eAAgB,CAEhB,WAAY,CAJhB,kBAQQ,YAAa,CACb,kBAAmB,CACnB,UAAW,CACX,sCAA0C,CAC1C,0BAA2B,CAC3B,uBAA2B,CAC3B,uCAA2C,CAC3C,kDAAsD,CACtD,SAAU,CACV,+CAAmD,CAjB3D,qBAoBY,wBChBa,CDiBb,WAAY,CACZ,iBAAkB,CAElB,gBAAiB,CACpB,wBAIL,GACI,SAAU,CACV,eAAgB,CAEpB,KACI,SAAU,CACV,eAAgB,CAAA",sourcesContent:['@import "../globals.scss";\r\n.page {\r\n    animation: page-load-up 0.3s ease-out;\r\n    padding-top: 0px;\r\n\r\n    height: 100%;\r\n\r\n    .page-title {\r\n        // padding: 40px;\r\n        display: flex;\r\n        align-items: center;\r\n        height: 7em;\r\n        background-color: rgba(103, 78, 48, 0.151);\r\n        backdrop-filter: blur(10px);\r\n        color: rgba(0, 0, 0, 0.858);\r\n        text-shadow: rgba(0, 0, 0, 0.123) 0 3px 1px;\r\n        box-shadow: rgba(120, 120, 120, 0.249) 3px 5px 5px 1px;\r\n        z-index: 0;\r\n        box-shadow: inset 0px 0px 10px rgba(0, 0, 0, 0.123);\r\n\r\n        h1 {\r\n            background-color: $highlight-color;\r\n            width: 150px;\r\n            text-align: center;\r\n            // padding-right: 20px;\r\n            margin-left: 30px;\r\n        }\r\n    }\r\n}\r\n@keyframes page-load-up {\r\n    0% {\r\n        opacity: 0;\r\n        padding-top: 5px;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        padding-top: 0px;\r\n    }\r\n}\r\n',"$main-background-color: #f9f5f1;\r\n$primary-button-color: #d4aa8c75;\r\n$creation-button-color: #8cd48c75;\r\n$destructive-button-color: #d48c8c75;\r\n$border-color: #d4aa8c;\r\n$highlight-color: #ffda5a;\r\n\r\n$mobile-width: 800px;\r\n\r\n@mixin mobile {\r\n    @media (max-width:#{$mobile-width}) {\r\n        @content;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const l=i},4455:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".search-page{display:flex;flex-direction:column;height:100%}.search-page .search-area{flex:1;display:flex;align-items:center;justify-content:center}\n","",{version:3,sources:["webpack://./Client/src/Pages/Search/Search.scss"],names:[],mappings:"AACA,aACI,YAAa,CACb,qBAAsB,CACtB,WAAY,CAHhB,0BAMQ,MAAO,CACP,YAAa,CACb,kBAAmB,CACnB,sBAAuB",sourcesContent:['@import "../../globals.scss";\r\n.search-page {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n\r\n    .search-area {\r\n        flex: 1;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const l=i},4221:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,'.study{position:relative}.add-button{position:fixed;top:15em;right:5em;height:40px;width:40px;border-radius:20px;color:white;border:none;background-color:#deb56b;box-shadow:0px 2px 10px rgba(109,109,109,0.249);cursor:pointer}.add-button::after{content:"+";font-size:44px;position:absolute;top:-8.5px;left:14%}.study-groups-container{display:flex;align-items:flex-start;justify-content:flex-start;padding:30px}\n',"",{version:3,sources:["webpack://./Client/src/Pages/Study/Study.scss"],names:[],mappings:"AAAA,OACI,iBAAkB,CACrB,YAIG,cAAe,CACf,QAAS,CACT,SAAU,CAGV,WAAY,CACZ,UAAW,CACX,kBAAmB,CAGnB,WAAY,CAGZ,WAAY,CACZ,wBAAoC,CACpC,+CAAmD,CACnD,cAAe,CAlBnB,mBAsBQ,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,QAAS,CACZ,wBAID,YAAa,CACb,sBAAuB,CACvB,0BAA2B,CAE3B,YAAa",sourcesContent:['.study {\r\n    position: relative;\r\n}\r\n\r\n.add-button {\r\n    //Position\r\n    position: fixed;\r\n    top: 15em;\r\n    right: 5em;\r\n\r\n    //Size\r\n    height: 40px;\r\n    width: 40px;\r\n    border-radius: 20px;\r\n\r\n    //text design\r\n    color: white;\r\n\r\n    //box Design\r\n    border: none;\r\n    background-color: rgb(222, 181, 107);\r\n    box-shadow: 0px 2px 10px rgba(109, 109, 109, 0.249);\r\n    cursor: pointer;\r\n\r\n    //Plus sign\r\n    &::after {\r\n        content: "+";\r\n        font-size: 44px;\r\n        position: absolute;\r\n        top: -8.5px;\r\n        left: 14%;\r\n    }\r\n}\r\n\r\n.study-groups-container {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: flex-start;\r\n\r\n    padding: 30px;\r\n}\r\n'],sourceRoot:""}]);const l=i},4487:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".auth-view{padding:3em 1em 1em 1em;background-color:rgba(255,255,255,0.646);backdrop-filter:blur(20px);box-shadow:0px 3px 4px rgba(128,128,128,0.377);width:30em;text-align:center;margin:50px 90px 0 0;animation:auth-view-load 0.3s ease-out;position:fixed;right:0;display:flex;flex-direction:column;justify-content:space-around}.auth-view h1{text-align:center}.auth-view p{padding-top:10px;color:#4f4f4f}.auth-view .error-message{color:rgba(136,17,17,0.63);font-size:15px;font-style:italic}.auth-view .other-options{padding-top:20px;width:100%;text-align:center;display:flex;flex-direction:column;justify-content:center;align-items:center}.auth-view .other-options p{font-size:10px;color:darkgray;margin-bottom:-10px}@media (max-width: 800px){.auth-view{width:100%;height:100%;margin:0}}@keyframes auth-view-load{0%{opacity:0;margin-top:40px}100%{opacity:1;margin-top:50px}}\n","",{version:3,sources:["webpack://./Client/src/Views/Home/AuthView.scss"],names:[],mappings:"AAEA,WACI,uBAAwB,CACxB,wCAA4C,CAC5C,0BAA2B,CAC3B,8CAAkD,CAClD,UAAW,CASX,iBAAkB,CAClB,oBAAqB,CACrB,sCAAuC,CACvC,cAAe,CACf,OAAQ,CAER,YAAa,CACb,qBAAsB,CACtB,4BAA6B,CAtBjC,cAOQ,iBAAkB,CAP1B,aAUQ,gBAAiB,CACjB,aAAsB,CAX9B,0BAyBQ,0BAA8B,CAC9B,cAAe,CACf,iBAAkB,CA3B1B,0BA+BQ,gBAAiB,CACjB,UAAW,CACX,iBAAkB,CAClB,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CACvB,kBAAmB,CArC3B,4BAuCY,cAAe,CACf,cAAe,CACf,mBAAoB,CACvB,0BA1CT,WA+CY,UAAW,CACX,WAAY,CACZ,QAAS,CACZ,CAIT,0BACI,GACI,SAAU,CACV,eAAgB,CAEpB,KACI,SAAU,CACV,eAAgB,CAAA",sourcesContent:['@import "../../globals.scss";\r\n\r\n.auth-view {\r\n    padding: 3em 1em 1em 1em;\r\n    background-color: rgba(255, 255, 255, 0.646);\r\n    backdrop-filter: blur(20px);\r\n    box-shadow: 0px 3px 4px rgba(128, 128, 128, 0.377);\r\n    width: 30em;\r\n    h1 {\r\n        text-align: center;\r\n    }\r\n    p {\r\n        padding-top: 10px;\r\n        color: rgb(79, 79, 79);\r\n    }\r\n\r\n    text-align: center;\r\n    margin: 50px 90px 0 0;\r\n    animation: auth-view-load 0.3s ease-out;\r\n    position: fixed;\r\n    right: 0;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n\r\n    .error-message {\r\n        color: rgba(136, 17, 17, 0.63);\r\n        font-size: 15px;\r\n        font-style: italic;\r\n    }\r\n\r\n    .other-options {\r\n        padding-top: 20px;\r\n        width: 100%;\r\n        text-align: center;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        p {\r\n            font-size: 10px;\r\n            color: darkgray;\r\n            margin-bottom: -10px;\r\n        }\r\n    }\r\n\r\n    @media (max-width: $mobile-width) {\r\n        & {\r\n            width: 100%;\r\n            height: 100%;\r\n            margin: 0;\r\n        }\r\n    }\r\n}\r\n\r\n@keyframes auth-view-load {\r\n    0% {\r\n        opacity: 0;\r\n        margin-top: 40px;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        margin-top: 50px;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const l=i},8771:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".notification{opacity:0;position:fixed;bottom:-100px;right:20px;backdrop-filter:blur(10px);padding:20px 80px 20px 80px;transition:all 0.4s ease-in-out;box-shadow:rgba(0,0,0,0.064) 5px 5px 5px;text-shadow:rgba(0,0,0,0.064) 5px 5px 5px;z-index:2020020;display:flex;align-items:start;justify-content:start}.notification.error{background-color:rgba(139,0,0,0.413);color:white}.notification.active{opacity:1;bottom:30px}\n","",{version:3,sources:["webpack://./Client/src/Views/Notifications/Notification.scss"],names:[],mappings:"AAAA,cACI,SAAU,CACV,cAAe,CACf,aAAc,CACd,UAAW,CACX,0BAA2B,CAC3B,2BAA4B,CAC5B,+BAAgC,CAChC,wCAA4C,CAC5C,yCAA6C,CAE7C,eAAgB,CAEhB,YAAa,CACb,iBAAkB,CAClB,qBAAsB,CAf1B,oBAiBQ,oCAAwC,CACxC,WAAY,CAlBpB,qBAqBQ,SAAU,CACV,WAAY",sourcesContent:[".notification {\r\n    opacity: 0;\r\n    position: fixed;\r\n    bottom: -100px;\r\n    right: 20px;\r\n    backdrop-filter: blur(10px);\r\n    padding: 20px 80px 20px 80px;\r\n    transition: all 0.4s ease-in-out;\r\n    box-shadow: rgba(0, 0, 0, 0.064) 5px 5px 5px;\r\n    text-shadow: rgba(0, 0, 0, 0.064) 5px 5px 5px;\r\n\r\n    z-index: 2020020;\r\n\r\n    display: flex;\r\n    align-items: start;\r\n    justify-content: start;\r\n    &.error {\r\n        background-color: rgba(139, 0, 0, 0.413);\r\n        color: white;\r\n    }\r\n    &.active {\r\n        opacity: 1;\r\n        bottom: 30px;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const l=i},4336:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,'.popup-wrapper{position:relative}.popup{position:fixed;overflow-y:scroll;width:60vw;height:auto;top:15%;left:20%;transform:translate(-50%, 0);z-index:99;background-color:white;box-shadow:rgba(0,0,0,0.123) 5px 5px 20px;transform:scale(0.8);opacity:0;transition:all 0.5s;pointer-events:none;overflow-y:auto}@media (max-width: 800px){.popup{border-radius:0px;top:0;left:0;width:100vw;height:100vh}}.popup-top{padding:20px 30px 0 30px;height:70px;overflow-y:hidden;display:flex;width:100%;flex-direction:row;align-items:center;justify-content:center;border-bottom:#d4aa8c 5px solid;background-color:rgba(255,255,255,0);backdrop-filter:blur(3px);padding-bottom:15px}.popup-top h1{color:black;flex:90%;font-size:25px;font-weight:800}.popup-top button{border:none;background-color:rgba(116,11,11,0.201);border-radius:50%;width:40px;height:40px;font-family:"Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;font-size:15px;font-weight:700;color:#fff;cursor:pointer}.popup-body{padding:20px;max-height:70vh}.active{transform:scale(1);pointer-events:all;opacity:1}\n',"",{version:3,sources:["webpack://./Client/src/Views/Popup/Popup.scss"],names:[],mappings:"AAEA,eACI,iBAAkB,CACrB,OAGG,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,OAAQ,CACR,QAAS,CACT,4BAA6B,CAC7B,UAAW,CACX,sBAAuB,CAEvB,yCAA6C,CAC7C,oBAAqB,CACrB,SAAU,CACV,mBAAoB,CACpB,mBAAoB,CACpB,eAAgB,CAQnB,0BAxBD,OAkBQ,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,WAAY,CACZ,YAAa,CAEpB,CAED,WACI,wBAAyB,CACzB,WAAY,CACZ,iBAAkB,CAElB,YAAa,CACb,UAAW,CAEX,kBAAmB,CACnB,kBAAmB,CACnB,sBAAuB,CACvB,+BAAsC,CACtC,oCAAwC,CACxC,yBAA0B,CAC1B,mBAAoB,CAdxB,cAiBQ,WAAY,CACZ,QAAS,CACT,cAAe,CACf,eAAgB,CApBxB,kBAuBQ,WAAY,CACZ,sCAA0C,CAC1C,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,4EAA6E,CAC7E,cAAe,CACf,eAAgB,CAChB,UAAyB,CAEzB,cAAe,CAClB,YAID,YAAa,CACb,eAAgB,CACnB,QAGG,kBAAmB,CACnB,kBAAmB,CACnB,SAAU",sourcesContent:['@import "../../globals.scss";\r\n\r\n.popup-wrapper {\r\n    position: relative;\r\n}\r\n\r\n.popup {\r\n    position: fixed;\r\n    overflow-y: scroll;\r\n    width: 60vw;\r\n    height: auto;\r\n    top: 15%;\r\n    left: 20%;\r\n    transform: translate(-50%, 0);\r\n    z-index: 99;\r\n    background-color: white;\r\n\r\n    box-shadow: rgba(0, 0, 0, 0.123) 5px 5px 20px;\r\n    transform: scale(0.8);\r\n    opacity: 0;\r\n    transition: all 0.5s;\r\n    pointer-events: none;\r\n    overflow-y: auto;\r\n    @include mobile {\r\n        border-radius: 0px;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100vw;\r\n        height: 100vh;\r\n    }\r\n}\r\n\r\n.popup-top {\r\n    padding: 20px 30px 0 30px;\r\n    height: 70px;\r\n    overflow-y: hidden;\r\n\r\n    display: flex;\r\n    width: 100%;\r\n\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-bottom: $border-color 5px solid;\r\n    background-color: rgba(255, 255, 255, 0);\r\n    backdrop-filter: blur(3px);\r\n    padding-bottom: 15px;\r\n\r\n    h1 {\r\n        color: black;\r\n        flex: 90%;\r\n        font-size: 25px;\r\n        font-weight: 800;\r\n    }\r\n    button {\r\n        border: none;\r\n        background-color: rgba(116, 11, 11, 0.201);\r\n        border-radius: 50%;\r\n        width: 40px;\r\n        height: 40px;\r\n        font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;\r\n        font-size: 15px;\r\n        font-weight: 700;\r\n        color: rgb(255, 255, 255);\r\n        // box-shadow: rgba(0, 0, 0, 0.132) 0px 1px 10px;\r\n        cursor: pointer;\r\n    }\r\n}\r\n\r\n.popup-body {\r\n    padding: 20px;\r\n    max-height: 70vh;\r\n}\r\n\r\n.active {\r\n    transform: scale(1);\r\n    pointer-events: all;\r\n    opacity: 1;\r\n}\r\n'],sourceRoot:""}]);const l=i},610:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".search-results{flex:70%;background-color:rgba(255,255,255,0.199);height:100%;backdrop-filter:blur(3px);padding:10px 20px 80px 10px;z-index:0;overflow-y:scroll}\n","",{version:3,sources:["webpack://./Client/src/Views/Search/SearchResults.scss"],names:[],mappings:"AAAA,gBACI,QAAS,CACT,wCAA4C,CAC5C,WAAY,CACZ,yBAA0B,CAE1B,2BAA4B,CAC5B,SAAU,CACV,iBAAkB",sourcesContent:[".search-results {\r\n    flex: 70%;\r\n    background-color: rgba(255, 255, 255, 0.199);\r\n    height: 100%;\r\n    backdrop-filter: blur(3px);\r\n\r\n    padding: 10px 20px 80px 10px;\r\n    z-index: 0;\r\n    overflow-y: scroll;\r\n}\r\n"],sourceRoot:""}]);const l=i},6891:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".search-view{flex:30%;height:100%;padding-bottom:50px;box-shadow:10px 0px 20px rgba(0,0,0,0.071);border-right:#d4aa8c 5px solid;background-color:#fff;z-index:4;overflow:auto}\n","",{version:3,sources:["webpack://./Client/src/Views/Search/SearchView.scss"],names:[],mappings:"AAEA,aACI,QAAS,CACT,WAAY,CACZ,mBAAoB,CACpB,0CAA8C,CAC9C,8BAAqC,CACrC,qBAAoC,CACpC,SAAU,CACV,aAAc",sourcesContent:['@import "../../globals.scss";\r\n\r\n.search-view {\r\n    flex: 30%;\r\n    height: 100%;\r\n    padding-bottom: 50px;\r\n    box-shadow: 10px 0px 20px rgba(0, 0, 0, 0.071);\r\n    border-right: $border-color 5px solid;\r\n    background-color: rgb(255, 255, 255);\r\n    z-index: 4;\r\n    overflow: auto;\r\n    // padding: 20px;\r\n}\r\n'],sourceRoot:""}]);const l=i},1918:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".study-group-view{width:200px;height:190px;background-color:white;box-shadow:0px 10px 10px #0000000a;margin:30px}.study-group-view h1{font-size:30px;text-align:center}\n","",{version:3,sources:["webpack://./Client/src/Views/Study/studyGroupView/StudyGroupView.scss"],names:[],mappings:"AAAA,kBACI,WAAY,CACZ,YAAa,CACb,sBAAuB,CAKvB,kCAAmC,CACnC,WAAY,CAThB,qBAKQ,cAAe,CACf,iBAAkB",sourcesContent:[".study-group-view {\r\n    width: 200px;\r\n    height: 190px;\r\n    background-color: white;\r\n    h1 {\r\n        font-size: 30px;\r\n        text-align: center;\r\n    }\r\n    box-shadow: 0px 10px 10px #0000000a;\r\n    margin: 30px;\r\n}\r\n"],sourceRoot:""}]);const l=i},3680:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,'.inline{display:flex;flex-direction:row;background-color:whitesmoke;padding:10px}.inline #left{flex:50%}.inline #right{flex:50%}.photo{background-color:whitesmoke}.photo img{width:90px;text-align:left}input[type="file"]{border:none;padding:25px;appearance:none}input[type="checkbox"]{-webkit-appearance:none;appearance:none;background-color:white;margin:0;box-shadow:1px 1px 1px #ebebeb;font:inherit;color:currentColor;width:1.2em;height:1.2em;border-radius:0.15em;transform:translateY(-0.075em);display:grid;place-content:center}input[type="checkbox"]::before{content:"";width:0.65em;height:0.65em;clip-path:polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);transform:scale(0);transform-origin:bottom left;transition:120ms transform ease-in-out;box-shadow:inset 1em 1em #028a22;background-color:CanvasText}input[type="checkbox"]:checked::before{transform:scale(1)}.imgPreview{width:100%;padding:20px}\n',"",{version:3,sources:["webpack://./Client/src/components/AccountSetupForm/AccountSetupForm.scss"],names:[],mappings:"AAAA,QACI,YAAa,CACb,kBAAmB,CACnB,2BAA4B,CAC5B,YAAa,CAJjB,cAMQ,QAAS,CANjB,eASQ,QAAS,CACZ,OAID,2BAA4B,CADhC,WAGQ,UAAW,CACX,eAAgB,CACnB,mBAID,WAAY,CACZ,YAAa,CACb,eAAgB,CACnB,uBAIG,uBAAwB,CAExB,eAAgB,CAEhB,sBAAuB,CAEvB,QAAS,CACT,8BAA0C,CAE1C,YAAa,CACb,kBAAmB,CACnB,WAAY,CACZ,YAAa,CACb,oBAAqB,CACrB,8BAA+B,CAE/B,YAAa,CACb,oBAAqB,CACxB,+BAGG,UAAW,CACX,YAAa,CACb,aAAc,CACd,sEAAuE,CACvE,kBAAmB,CACnB,4BAA6B,CAC7B,sCAAuC,CACvC,gCAAyC,CAEzC,2BAA4B,CAC/B,uCAGG,kBAAmB,CACtB,YAGG,UAAW,CACX,YAAa",sourcesContent:['.inline {\r\n    display: flex;\r\n    flex-direction: row;\r\n    background-color: whitesmoke;\r\n    padding: 10px;\r\n    #left {\r\n        flex: 50%;\r\n    }\r\n    #right {\r\n        flex: 50%;\r\n    }\r\n}\r\n\r\n.photo {\r\n    background-color: whitesmoke;\r\n    img {\r\n        width: 90px;\r\n        text-align: left;\r\n    }\r\n}\r\n\r\ninput[type="file"] {\r\n    border: none;\r\n    padding: 25px;\r\n    appearance: none;\r\n}\r\n\r\ninput[type="checkbox"] {\r\n    /* Add if not using autoprefixer */\r\n    -webkit-appearance: none;\r\n    /* Remove most all native input styles */\r\n    appearance: none;\r\n    /* For iOS < 15 */\r\n    background-color: white;\r\n    /* Not removed via appearance */\r\n    margin: 0;\r\n    box-shadow: 1px 1px 1px rgb(235, 235, 235);\r\n\r\n    font: inherit;\r\n    color: currentColor;\r\n    width: 1.2em;\r\n    height: 1.2em;\r\n    border-radius: 0.15em;\r\n    transform: translateY(-0.075em);\r\n\r\n    display: grid;\r\n    place-content: center;\r\n}\r\n\r\ninput[type="checkbox"]::before {\r\n    content: "";\r\n    width: 0.65em;\r\n    height: 0.65em;\r\n    clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);\r\n    transform: scale(0);\r\n    transform-origin: bottom left;\r\n    transition: 120ms transform ease-in-out;\r\n    box-shadow: inset 1em 1em rgb(2, 138, 34);\r\n    /* Windows High Contrast Mode */\r\n    background-color: CanvasText;\r\n}\r\n\r\ninput[type="checkbox"]:checked::before {\r\n    transform: scale(1);\r\n}\r\n\r\n.imgPreview {\r\n    width: 100%;\r\n    padding: 20px;\r\n}\r\n'],sourceRoot:""}]);const l=i},4497:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=i},7965:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".create-study-group-form{display:flex;flex-direction:column;justify-content:center}.side-by-side{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.side-by-side>*{width:200px;flex:1}\n","",{version:3,sources:["webpack://./Client/src/components/CreateStudyGroupForm/CreateStudyGroupForm.scss"],names:[],mappings:"AAAA,yBACI,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CAC1B,cAEG,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,kBAAmB,CAJvB,gBAOQ,WAAY,CACZ,MAAO",sourcesContent:[".create-study-group-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n}\r\n.side-by-side {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    > * {\r\n        width: 200px;\r\n        flex: 1;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const l=i},2440:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const l=i},8225:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".search-form{display:flex;flex-direction:column;justify-content:center}\n","",{version:3,sources:["webpack://./Client/src/components/SearchForm/SearchForm.scss"],names:[],mappings:"AAAA,aACI,YAAa,CACb,qBAAsB,CACtB,sBAAuB",sourcesContent:[".search-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n}\r\n"],sourceRoot:""}]);const l=i},9010:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".listing-container{background-color:#ffffff23;box-shadow:rgba(120,120,120,0.249) 3px 5px 5px 1px;display:flex;height:80px;margin:5px 10px 10px 10px;border-radius:10px;cursor:pointer}.listing-container .title-photo-container{display:flex;align-items:center;border-left:#ffffff7c 5px solid;color:white;box-shadow:rgba(48,48,48,0.153) 10px 10px 20px;overflow:hidden;padding:20px;font-size:10px}.listing-container .group-info-container{display:flex;align-items:center;justify-content:space-evenly}.listing-container .group-info-container .group-info-item{padding:5px 15px 5px 15px;border-left:rgba(125,125,125,0.345) 2px solid}.listing-container .group-info-container .group-info-item p{color:gray;font-size:8px}.listing-container .group-info-container .group-info-item h2{font-size:14px;white-space:nowrap}.listing-container .group-info-container .group-info-item#owner-info{border-left:none}.listing-container .group-info-container .group-info-item#owner-info h2{white-space:unset;word-wrap:break-word;max-width:100px}\n","",{version:3,sources:["webpack://./Client/src/components/SearchListing/SearchListing.scss"],names:[],mappings:"AAEA,mBACI,0BAA2B,CAC3B,kDAAsD,CACtD,YAAa,CACb,WAAY,CACZ,yBAA0B,CAC1B,kBAAmB,CACnB,cAAe,CAPnB,0CAUQ,YAAa,CACb,kBAAmB,CACnB,+BAAgC,CAChC,WAAY,CACZ,8CAAkD,CAClD,eAAgB,CAChB,YAAa,CACb,cAAe,CAjBvB,yCAoBQ,YAAa,CACb,kBAAmB,CACnB,4BAA6B,CAtBrC,0DA0CY,yBAA0B,CAC1B,6CAAiD,CA3C7D,4DA0BgB,UAAW,CACX,aAAc,CA3B9B,6DA8BgB,cAAe,CACf,kBAAmB,CA/BnC,qEAwCgB,gBAAiB,CAxCjC,wEAmCoB,iBAAkB,CAElB,oBAAqB,CACrB,eAAgB",sourcesContent:['@import "../../globals.scss";\r\n\r\n.listing-container {\r\n    background-color: #ffffff23;\r\n    box-shadow: rgba(120, 120, 120, 0.249) 3px 5px 5px 1px;\r\n    display: flex;\r\n    height: 80px;\r\n    margin: 5px 10px 10px 10px;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n\r\n    .title-photo-container {\r\n        display: flex;\r\n        align-items: center;\r\n        border-left: #ffffff7c 5px solid;\r\n        color: white;\r\n        box-shadow: rgba(48, 48, 48, 0.153) 10px 10px 20px;\r\n        overflow: hidden;\r\n        padding: 20px;\r\n        font-size: 10px;\r\n    }\r\n    .group-info-container {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-evenly;\r\n\r\n        .group-info-item {\r\n            p {\r\n                color: gray;\r\n                font-size: 8px;\r\n            }\r\n            h2 {\r\n                font-size: 14px;\r\n                white-space: nowrap;\r\n            }\r\n            &#owner-info {\r\n                h2 {\r\n                    white-space: unset;\r\n\r\n                    word-wrap: break-word;\r\n                    max-width: 100px;\r\n                }\r\n                border-left: none;\r\n            }\r\n            padding: 5px 15px 5px 15px;\r\n            border-left: rgba(125, 125, 125, 0.345) 2px solid;\r\n        }\r\n    }\r\n}\r\n'],sourceRoot:""}]);const l=i},7955:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,".menu{background-color:white;display:flex;align-items:center;justify-content:center;padding:20px;width:340px;border-bottom:#d4aa8c 5px solid;transition:all 0.5s ease-in-out;pointer-events:none;position:absolute;top:-3.5em;right:0px;z-index:10;box-shadow:inset 0px 10px 20px rgba(0,0,0,0.151)}.menu.isShowing{top:3em;pointer-events:all;overflow:visible}.background{width:100vw;height:100vh;position:fixed;top:0;z-index:20;background-color:#ffffff70;backdrop-filter:blur(5px);pointer-events:none;transition:all 0.5s;opacity:0}.background.active{pointer-events:all;opacity:1}\n","",{version:3,sources:["webpack://./Client/src/components/TopBar/Menu.scss"],names:[],mappings:"AAEA,MACI,sBAAuB,CACvB,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,YAAa,CACb,WAAY,CACZ,+BAAsC,CACtC,+BAAgC,CAChC,mBAAoB,CACpB,iBAAkB,CAClB,UAAW,CACX,SAAU,CACV,UAAW,CACX,gDAAoD,CAdxD,gBAgBQ,OAAQ,CACR,kBAAmB,CACnB,gBAAiB,CACpB,YAID,WAAY,CACZ,YAAa,CACb,cAAe,CACf,KAAM,CACN,UAAW,CACX,0BAA2B,CAC3B,yBAA0B,CAC1B,mBAAoB,CACpB,mBAAoB,CACpB,SAAU,CAVd,mBAaQ,kBAAmB,CACnB,SAAU",sourcesContent:['@import "../../globals.scss";\r\n\r\n.menu {\r\n    background-color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 20px;\r\n    width: 340px;\r\n    border-bottom: $border-color 5px solid;\r\n    transition: all 0.5s ease-in-out;\r\n    pointer-events: none;\r\n    position: absolute;\r\n    top: -3.5em;\r\n    right: 0px;\r\n    z-index: 10;\r\n    box-shadow: inset 0px 10px 20px rgba(0, 0, 0, 0.151);\r\n    &.isShowing {\r\n        top: 3em;\r\n        pointer-events: all;\r\n        overflow: visible;\r\n    }\r\n}\r\n\r\n.background {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    z-index: 20;\r\n    background-color: #ffffff70;\r\n    backdrop-filter: blur(5px);\r\n    pointer-events: none;\r\n    transition: all 0.5s;\r\n    opacity: 0;\r\n\r\n    &.active {\r\n        pointer-events: all;\r\n        opacity: 1;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const l=i},3189:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,'.border{border-bottom:#d4aa8c 5px solid;width:100%;box-shadow:0px 0px 10px rgba(0,0,0,0.146)}.top-bar{position:relative;overflow:visible;z-index:122;background-color:white;transition:all 0.4s}.top-bar .wrapper{padding:10px 30px;height:3.7em;display:flex;align-items:center;justify-content:space-between;overflow-y:hidden}.top-bar .wrapper .left{display:flex;flex-direction:row;align-items:center}.top-bar .wrapper .left h1{font-size:20px;padding-right:20px;color:black}.top-bar .wrapper .left .nav-item{margin:20px;padding:5px 10px 5px 10px;height:100%;text-decoration:none;color:black;font-size:15px;transition:all 0.4s}.top-bar .wrapper .left .nav-item:active{background-color:#ffe58d}.top-bar .wrapper .left .nav-item.active{background-color:#ffda5a;position:relative;overflow:visible;transition:all 0.4s}.top-bar .wrapper .left .nav-item.active::after{content:"";position:absolute;left:0;bottom:-15px;width:100%;height:4px;background-color:#d4aa8c;animation:rise 0.2s ease-in-out}.top-bar .wrapper .right{display:flex;flex-direction:row;align-items:center;cursor:pointer}.top-bar .wrapper .right .school{font-size:14px;border-right:black 1px solid;padding-right:10px}.top-bar .wrapper .right .name{font-size:14px;font-weight:800;padding-left:10px;padding-right:10px}.top-bar .wrapper .right .profile-picture{width:40px;height:40px;border-radius:27px;object-fit:cover;border:#d4aa8c 4px solid}@keyframes rise{0%{bottom:-17px}100%{bottom:-15px}}\n',"",{version:3,sources:["webpack://./Client/src/components/TopBar/TopBar.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAEA,QACI,+BAAsC,CACtC,UAAW,CACX,yCAA6C,CAChD,SAEG,iBAAkB,CAClB,gBAAiB,CACjB,WAAY,CACZ,sBAAuB,CACvB,mBAAoB,CALxB,kBAQQ,iBAAkB,CAClB,YAAa,CAEb,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,iBAAkB,CAd1B,wBAiBY,YAAa,CACb,kBAAmB,CACnB,kBAAmB,CAnB/B,2BAqBgB,cAAe,CACf,kBAAmB,CACnB,WAAY,CAvB5B,kCA0BgB,WAAY,CACZ,yBAA0B,CAC1B,WAAY,CACZ,oBAAqB,CACrB,WAAY,CACZ,cAAe,CACf,mBAAoB,CAhCpC,yCAmCoB,wBAAiE,CAnCrF,yCAsCoB,wBCxCK,CDyCL,iBAAkB,CAClB,gBAAiB,CACjB,mBAAoB,CAzCxC,gDA4CwB,UAAW,CACX,iBAAkB,CAClB,MAAO,CACP,YAAa,CACb,UAAW,CACX,UAAW,CACX,wBCrDF,CDsDE,+BAAgC,CAnDxD,yBAyDY,YAAa,CACb,kBAAmB,CACnB,kBAAmB,CACnB,cAAe,CA5D3B,iCA8DgB,cAAe,CACf,4BAA6B,CAC7B,kBAAmB,CAhEnC,+BAmEgB,cAAe,CACf,eAAgB,CAChB,iBAAkB,CAClB,kBAAmB,CAtEnC,0CAyEgB,UAAW,CACX,WAAY,CACZ,kBAAmB,CACnB,gBAAiB,CACjB,wBAA+B,CAClC,gBAMT,GACI,YAAa,CAEjB,KACI,YAAa,CAAA",sourcesContent:['@import "../../globals.scss";\r\n\r\n.border {\r\n    border-bottom: $border-color 5px solid;\r\n    width: 100%;\r\n    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.146);\r\n}\r\n.top-bar {\r\n    position: relative;\r\n    overflow: visible;\r\n    z-index: 122;\r\n    background-color: white;\r\n    transition: all 0.4s;\r\n\r\n    .wrapper {\r\n        padding: 10px 30px;\r\n        height: 3.7em;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        overflow-y: hidden;\r\n\r\n        .left {\r\n            display: flex;\r\n            flex-direction: row;\r\n            align-items: center;\r\n            h1 {\r\n                font-size: 20px;\r\n                padding-right: 20px;\r\n                color: black;\r\n            }\r\n            .nav-item {\r\n                margin: 20px;\r\n                padding: 5px 10px 5px 10px;\r\n                height: 100%;\r\n                text-decoration: none;\r\n                color: black;\r\n                font-size: 15px;\r\n                transition: all 0.4s;\r\n\r\n                &:active {\r\n                    background-color: lighten($color: $highlight-color, $amount: 10%);\r\n                }\r\n                &.active {\r\n                    background-color: $highlight-color;\r\n                    position: relative;\r\n                    overflow: visible;\r\n                    transition: all 0.4s;\r\n\r\n                    &::after {\r\n                        content: "";\r\n                        position: absolute;\r\n                        left: 0;\r\n                        bottom: -15px;\r\n                        width: 100%;\r\n                        height: 4px;\r\n                        background-color: $border-color;\r\n                        animation: rise 0.2s ease-in-out;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        .right {\r\n            display: flex;\r\n            flex-direction: row;\r\n            align-items: center;\r\n            cursor: pointer;\r\n            .school {\r\n                font-size: 14px;\r\n                border-right: black 1px solid;\r\n                padding-right: 10px;\r\n            }\r\n            .name {\r\n                font-size: 14px;\r\n                font-weight: 800;\r\n                padding-left: 10px;\r\n                padding-right: 10px;\r\n            }\r\n            .profile-picture {\r\n                width: 40px;\r\n                height: 40px;\r\n                border-radius: 27px;\r\n                object-fit: cover;\r\n                border: $border-color 4px solid;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@keyframes rise {\r\n    0% {\r\n        bottom: -17px;\r\n    }\r\n    100% {\r\n        bottom: -15px;\r\n    }\r\n}\r\n',"$main-background-color: #f9f5f1;\r\n$primary-button-color: #d4aa8c75;\r\n$creation-button-color: #8cd48c75;\r\n$destructive-button-color: #d48c8c75;\r\n$border-color: #d4aa8c;\r\n$highlight-color: #ffda5a;\r\n\r\n$mobile-width: 800px;\r\n\r\n@mixin mobile {\r\n    @media (max-width:#{$mobile-width}) {\r\n        @content;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const l=i},5057:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,'.Label{color:#acacac;font-size:11px;padding-bottom:10px;font-weight:600;text-align:center;width:100%}.InputField{padding:10px;margin:10px;display:flex;flex-direction:column;border:none;overflow-x:visible}.InputField .Label{text-align:left}.InputField .Input{box-shadow:0px 10px 10px rgba(128,128,128,0.13);padding:10px;border:none;border-bottom:rgba(211,211,211,0.591) 8px solid;transition-property:border-bottom;transition-duration:0.2s}.InputField .Input:focus{border:none;border-bottom:rgba(139,79,11,0.616) 8px solid;outline-width:0}.InputField .dropdown{padding:5px 5px 5px 5px;font-size:16px;box-shadow:0px 10px 10px rgba(128,128,128,0.13);border:none;border-bottom:rgba(211,211,211,0.591) 8px solid;transition-property:border-bottom;height:40px;transition-duration:0.2s;-webkit-appearance:none;-moz-appearance:none;background:url(http://assets.stickpng.com/images/58f8bd170ed2bdaf7c128308.png) 96%/15% no-repeat #fff;background-color:white;background-size:20px}.InputField .dropdown:focus{border:none;border-bottom:rgba(139,79,11,0.616) 8px solid;outline-width:0}.InputField .color-picker{border:none;height:50px;min-width:200px;position:relative}.InputField .color-picker::after{content:"(Click to Change)";position:absolute;color:white;margin-left:auto;margin-right:auto;top:33%;left:0;right:0;text-align:center}.Button{box-shadow:0px 2px 10px rgba(109,109,109,0.096);border:none;font-weight:900;text-align:center;min-width:60%;height:2.5em;margin:20px;cursor:pointer}.Button.ButtonPrimary{background-color:rgba(212,170,140,0.458824)}.Button.ButtonDestructive{background-color:rgba(212,140,140,0.458824)}.Button.ButtonCreation{background-color:rgba(140,212,140,0.458824)}.ToggleField{display:flex;flex-direction:row;background-color:white;box-shadow:0px 10px 10px rgba(128,128,128,0.13);justify-content:space-between;align-items:center;padding:10px;margin:20px}.ToggleField .Label{text-align:left;width:90px;font-size:12px;margin-top:10px}.ToggleField .Toggle{position:relative;display:inline-block;width:60px;height:34px}.ToggleField .Toggle input{opacity:0;width:0;height:0}.ToggleField .slider{position:absolute;border-radius:34px;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#e8e8e8;-webkit-transition:0.4s;transition:0.4s}.ToggleField .slider:before{position:absolute;border-radius:50%;content:"";height:26px;width:26px;left:4px;bottom:4px;background-color:rgba(143,28,28,0.482);-webkit-transition:0.4s;transition:0.4s}.ToggleField input:checked+.slider:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);background-color:rgba(0,128,0,0.452);transform:translateX(26px)}\n',"",{version:3,sources:["webpack://./Client/src/core/core.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAGA,OACI,aAAyB,CACzB,cAAe,CACf,mBAAoB,CACpB,eAAgB,CAChB,iBAAkB,CAClB,UAAW,CACd,YAGG,YAAa,CACb,WAAY,CACZ,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,kBAAmB,CANvB,mBASQ,eAAgB,CATxB,mBAYQ,+CAAmD,CACnD,YAAa,CACb,WAAY,CACZ,+CAAmD,CACnD,iCAAkC,CAClC,wBAAyB,CAjBjC,yBAoBQ,WAAY,CACZ,6CAAiD,CACjD,eAAgB,CAtBxB,sBA2BQ,uBAAwB,CACxB,cAAe,CACf,+CAAmD,CACnD,WAAY,CACZ,+CAAmD,CACnD,iCAAkC,CAClC,WAAY,CAEZ,wBAAyB,CACzB,uBAAwB,CACxB,oBAAqB,CAErB,qGACsB,CACtB,sBAAuB,CACvB,oBAAqB,CA1C7B,4BA8CQ,WAAY,CACZ,6CAAiD,CACjD,eAAgB,CAhDxB,0BAoDQ,WAAY,CACZ,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CAvD1B,iCAyDY,2BAA4B,CAC5B,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CAClB,OAAQ,CACR,MAAO,CACP,OAAQ,CACR,iBAAkB,CACrB,QAKL,+CAAmD,CACnD,WAAY,CAEZ,eAAgB,CAChB,iBAAkB,CAElB,aAAc,CACd,YAAa,CAEb,WAAY,CACZ,cAAe,CAXnB,sBAcQ,2CC/FwB,CDiFhC,0BAiBQ,2CChG4B,CD+EpC,uBAoBQ,2CCpGyB,CDqG5B,aAKD,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,+CAAmD,CACnD,6BAA8B,CAC9B,kBAAmB,CACnB,YAAa,CACb,WAAY,CARhB,oBAUQ,eAAgB,CAChB,UAAW,CACX,cAAe,CACf,eAAgB,CAbxB,qBAiBQ,iBAAkB,CAClB,oBAAqB,CACrB,UAAW,CACX,WAAY,CApBpB,2BAwBQ,SAAU,CACV,OAAQ,CACR,QAAS,CA1BjB,qBA8BQ,iBAAkB,CAClB,kBAAmB,CACnB,cAAe,CACf,KAAM,CACN,MAAO,CACP,OAAQ,CACR,QAAS,CACT,wBAAoC,CACpC,uBAAwB,CACxB,eAAgB,CAvCxB,4BA2CQ,iBAAkB,CAClB,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,UAAW,CACX,QAAS,CACT,UAAW,CACX,sCAA0C,CAC1C,uBAAwB,CACxB,eAAgB,CApDxB,0CAuDQ,kCAAmC,CACnC,8BAA+B,CAC/B,oCAAwC,CACxC,0BAA2B",sourcesContent:['//Input Field\r\n@import "../globals.scss";\r\n\r\n.Label {\r\n    color: rgb(172, 172, 172);\r\n    font-size: 11px;\r\n    padding-bottom: 10px;\r\n    font-weight: 600;\r\n    text-align: center;\r\n    width: 100%;\r\n}\r\n\r\n.InputField {\r\n    padding: 10px;\r\n    margin: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: none;\r\n    overflow-x: visible;\r\n\r\n    .Label {\r\n        text-align: left;\r\n    }\r\n    .Input {\r\n        box-shadow: 0px 10px 10px rgba(128, 128, 128, 0.13);\r\n        padding: 10px;\r\n        border: none;\r\n        border-bottom: rgba(211, 211, 211, 0.591) 8px solid;\r\n        transition-property: border-bottom;\r\n        transition-duration: 0.2s;\r\n    }\r\n    .Input:focus {\r\n        border: none;\r\n        border-bottom: rgba(139, 79, 11, 0.616) 8px solid;\r\n        outline-width: 0;\r\n    }\r\n\r\n    //Dropdown\r\n    .dropdown {\r\n        padding: 5px 5px 5px 5px;\r\n        font-size: 16px;\r\n        box-shadow: 0px 10px 10px rgba(128, 128, 128, 0.13);\r\n        border: none;\r\n        border-bottom: rgba(211, 211, 211, 0.591) 8px solid;\r\n        transition-property: border-bottom;\r\n        height: 40px;\r\n\r\n        transition-duration: 0.2s;\r\n        -webkit-appearance: none;\r\n        -moz-appearance: none;\r\n        // appearance: none;\r\n        background: url(http://assets.stickpng.com/images/58f8bd170ed2bdaf7c128308.png) 96% / 15% no-repeat\r\n            rgb(255, 255, 255);\r\n        background-color: white;\r\n        background-size: 20px;\r\n    }\r\n\r\n    .dropdown:focus {\r\n        border: none;\r\n        border-bottom: rgba(139, 79, 11, 0.616) 8px solid;\r\n        outline-width: 0;\r\n    }\r\n\r\n    .color-picker {\r\n        border: none;\r\n        height: 50px;\r\n        min-width: 200px;\r\n        position: relative;\r\n        &::after {\r\n            content: "(Click to Change)";\r\n            position: absolute;\r\n            color: white;\r\n            margin-left: auto;\r\n            margin-right: auto;\r\n            top: 33%;\r\n            left: 0;\r\n            right: 0;\r\n            text-align: center;\r\n        }\r\n    }\r\n}\r\n\r\n.Button {\r\n    box-shadow: 0px 2px 10px rgba(109, 109, 109, 0.096);\r\n    border: none;\r\n\r\n    font-weight: 900;\r\n    text-align: center;\r\n\r\n    min-width: 60%;\r\n    height: 2.5em;\r\n\r\n    margin: 20px;\r\n    cursor: pointer;\r\n\r\n    &.ButtonPrimary {\r\n        background-color: $primary-button-color;\r\n    }\r\n    &.ButtonDestructive {\r\n        background-color: $destructive-button-color;\r\n    }\r\n    &.ButtonCreation {\r\n        background-color: $creation-button-color;\r\n    }\r\n}\r\n\r\n//Toggle Switch\r\n.ToggleField {\r\n    display: flex;\r\n    flex-direction: row;\r\n    background-color: white;\r\n    box-shadow: 0px 10px 10px rgba(128, 128, 128, 0.13);\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    .Label {\r\n        text-align: left;\r\n        width: 90px;\r\n        font-size: 12px;\r\n        margin-top: 10px;\r\n    }\r\n\r\n    .Toggle {\r\n        position: relative;\r\n        display: inline-block;\r\n        width: 60px;\r\n        height: 34px;\r\n    }\r\n\r\n    .Toggle input {\r\n        opacity: 0;\r\n        width: 0;\r\n        height: 0;\r\n    }\r\n\r\n    .slider {\r\n        position: absolute;\r\n        border-radius: 34px;\r\n        cursor: pointer;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background-color: rgb(232, 232, 232);\r\n        -webkit-transition: 0.4s;\r\n        transition: 0.4s;\r\n    }\r\n\r\n    .slider:before {\r\n        position: absolute;\r\n        border-radius: 50%;\r\n        content: "";\r\n        height: 26px;\r\n        width: 26px;\r\n        left: 4px;\r\n        bottom: 4px;\r\n        background-color: rgba(143, 28, 28, 0.482);\r\n        -webkit-transition: 0.4s;\r\n        transition: 0.4s;\r\n    }\r\n    input:checked + .slider:before {\r\n        -webkit-transform: translateX(26px);\r\n        -ms-transform: translateX(26px);\r\n        background-color: rgba(0, 128, 0, 0.452);\r\n        transform: translateX(26px);\r\n    }\r\n}\r\n',"$main-background-color: #f9f5f1;\r\n$primary-button-color: #d4aa8c75;\r\n$creation-button-color: #8cd48c75;\r\n$destructive-button-color: #d48c8c75;\r\n$border-color: #d4aa8c;\r\n$highlight-color: #ffda5a;\r\n\r\n$mobile-width: 800px;\r\n\r\n@mixin mobile {\r\n    @media (max-width:#{$mobile-width}) {\r\n        @content;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const l=i},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=f(n);o&&o!==m&&e(t,o,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=s(t),h=s(n),g=0;g<i.length;++g){var v=i[g];if(!(a[v]||r&&r[v]||h&&h[v]||l&&l[v])){var y=p(n,v);try{u(t,v,y)}catch(e){}}}}return t}},5826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,s=o(e),u=1;u<arguments.length;u++){for(var c in i=Object(arguments[u]))n.call(i,c)&&(s[c]=i[c]);if(t){l=t(i);for(var d=0;d<l.length;d++)r.call(i,l[d])&&(s[l[d]]=i[l[d]])}}return s}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),a=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,s={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)l.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,m={},h={};function g(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function A(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(m,e)&&(p.test(e)?h[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,C=60103,w=60106,E=60107,k=60108,S=60114,B=60109,O=60110,P=60112,N=60113,T=60120,R=60115,_=60116,I=60121,j=60128,M=60129,D=60130,L=60131;if("function"==typeof Symbol&&Symbol.for){var z=Symbol.for;C=z("react.element"),w=z("react.portal"),E=z("react.fragment"),k=z("react.strict_mode"),S=z("react.profiler"),B=z("react.provider"),O=z("react.context"),P=z("react.forward_ref"),N=z("react.suspense"),T=z("react.suspense_list"),R=z("react.memo"),_=z("react.lazy"),I=z("react.block"),z("react.scope"),j=z("react.opaque.id"),M=z("react.debug_trace_mode"),D=z("react.offscreen"),L=z("react.legacy_hidden")}var $,F="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}function W(e){if(void 0===$)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);$=t&&t[1]||""}return"\n"+$+e}var V=!1;function Y(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function H(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return Y(e.type,!1);case 11:return Y(e.type.render,!1);case 22:return Y(e.type._render,!1);case 1:return Y(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case w:return"Portal";case S:return"Profiler";case k:return"StrictMode";case N:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case B:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return q(e.type);case I:return q(e._render);case _:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function G(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Z(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=Z(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Z(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&A(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function ue(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,he,ge=(he=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return he(e,t)}))}:he);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function Ae(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function xe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Ae(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Ce=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function we(e,t){if(t){if(Ce[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Be=null,Oe=null;function Pe(e){if(e=no(e)){if("function"!=typeof Se)throw Error(i(280));var t=e.stateNode;t&&(t=oo(t),Se(e.stateNode,e.type,t))}}function Ne(e){Be?Oe?Oe.push(e):Oe=[e]:Be=e}function Te(){if(Be){var e=Be,t=Oe;if(Oe=Be=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Re(e,t){return e(t)}function _e(e,t,n,r,o){return e(t,n,r,o)}function Ie(){}var je=Re,Me=!1,De=!1;function Le(){null===Be&&null===Oe||(Ie(),Te())}function ze(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var $e=!1;if(d)try{var Fe={};Object.defineProperty(Fe,"passive",{get:function(){$e=!0}}),window.addEventListener("test",Fe,Fe),window.removeEventListener("test",Fe,Fe)}catch(he){$e=!1}function Ue(e,t,n,r,o,a,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var We=!1,Ve=null,Ye=!1,He=null,qe={onError:function(e){We=!0,Ve=e}};function Ge(e,t,n,r,o,a,i,l,s){We=!1,Ve=null,Ue.apply(qe,arguments)}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(Ze(e)!==e)throw Error(i(188))}function Xe(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ke(o),e;if(a===r)return Ke(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,lt=null,st=null,ut=new Map,ct=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function mt(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function ht(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=ft(t,n,r,o,a),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=to(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){vt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&vt(it)&&(it=null),null!==lt&&vt(lt)&&(lt=null),null!==st&&vt(st)&&(st=null),ut.forEach(yt),ct.forEach(yt)}function At(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function xt(e){function t(t){return At(t,e)}if(0<at.length){At(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&At(it,e),null!==lt&&At(lt,e),null!==st&&At(st,e),ut.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)gt(n),null===n.blockedOn&&dt.shift()}function Ct(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wt={animationend:Ct("Animation","AnimationEnd"),animationiteration:Ct("Animation","AnimationIteration"),animationstart:Ct("Animation","AnimationStart"),transitionend:Ct("Transition","TransitionEnd")},Et={},kt={};function St(e){if(Et[e])return Et[e];if(!wt[e])return e;var t,n=wt[e];for(t in n)if(n.hasOwnProperty(t)&&t in kt)return Et[e]=n[t];return e}d&&(kt=document.createElement("div").style,"AnimationEvent"in window||(delete wt.animationend.animation,delete wt.animationiteration.animation,delete wt.animationstart.animation),"TransitionEvent"in window||delete wt.transitionend.transition);var Bt=St("animationend"),Ot=St("animationiteration"),Pt=St("animationstart"),Nt=St("transitionend"),Tt=new Map,Rt=new Map,_t=["abort","abort",Bt,"animationEnd",Ot,"animationIteration",Pt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Rt.set(r,t),Tt.set(r,o),u(o,[r])}}(0,a.unstable_now)();var jt=8;function Mt(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!=(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!=(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!=(t=4186112&e)?(jt=6,t):0!=(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!=(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=jt=15;else if(0!=(a=134217727&n)){var s=a&~i;0!==s?(r=Mt(s),o=jt):0!=(l&=a)&&(r=Mt(l),o=jt)}else 0!=(a=n&~i)?(r=Mt(a),o=jt):0!==l&&(r=Mt(l),o=jt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Mt(t),o<=jt)return t;jt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function Lt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function zt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=$t(24&~t))?zt(10,t):e;case 10:return 0===(e=$t(192&~t))?zt(8,t):e;case 8:return 0===(e=$t(3584&~t))&&0===(e=$t(4186112&~t))&&(e=512),e;case 2:return 0===(t=$t(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function $t(e){return e&-e}function Ft(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Vt(e)/Yt|0)|0},Vt=Math.log,Yt=Math.LN2,Ht=a.unstable_UserBlockingPriority,qt=a.unstable_runWithPriority,Gt=!0;function Zt(e,t,n,r){Me||Ie();var o=Kt,a=Me;Me=!0;try{_e(o,e,t,n,r)}finally{(Me=a)||Le()}}function Qt(e,t,n,r){qt(Ht,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){var o;if(Gt)if((o=0==(4&t))&&0<at.length&&-1<pt.indexOf(e))e=ft(null,e,t,n,r),at.push(e);else{var a=Xt(e,t,n,r);if(null===a)o&&mt(e,r);else{if(o){if(-1<pt.indexOf(e))return e=ft(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=ht(it,e,t,n,r,o),!0;case"dragenter":return lt=ht(lt,e,t,n,r,o),!0;case"mouseover":return st=ht(st,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return ut.set(a,ht(ut.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,ht(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;mt(e,r)}Ir(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=ke(r);if(null!==(o=to(o))){var a=Ze(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Qe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ir(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var sn,un,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},pn=ln(dn),fn=o({},dn,{view:0,detail:0}),mn=ln(fn),hn=o({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Bn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(sn=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=sn=0,cn=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:un}}),gn=ln(hn),vn=ln(o({},hn,{dataTransfer:0})),yn=ln(o({},fn,{relatedTarget:0})),bn=ln(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),An=o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),xn=ln(An),Cn=ln(o({},dn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function Bn(){return Sn}var On=o({},fn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Bn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Pn=ln(On),Nn=ln(o({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=ln(o({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Bn})),Rn=ln(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),_n=o({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),In=ln(_n),jn=[9,13,27,32],Mn=d&&"CompositionEvent"in window,Dn=null;d&&"documentMode"in document&&(Dn=document.documentMode);var Ln=d&&"TextEvent"in window&&!Dn,zn=d&&(!Mn||Dn&&8<Dn&&11>=Dn),$n=String.fromCharCode(32),Fn=!1;function Un(e,t){switch(e){case"keyup":return-1!==jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Wn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Yn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Yn[e.type]:"textarea"===t}function qn(e,t,n,r){Ne(r),0<(t=Mr(t,"onChange")).length&&(n=new pn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,Zn=null;function Qn(e){Or(e,0)}function Kn(e){if(K(ro(e)))return e}function Xn(e,t){if("change"===e)return t}var Jn=!1;if(d){var er;if(d){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Gn&&(Gn.detachEvent("onpropertychange",or),Zn=Gn=null)}function or(e){if("value"===e.propertyName&&Kn(Zn)){var t=[];if(qn(t,Zn,e,ke(e)),e=Qn,Me)e(t);else{Me=!0;try{Re(e,t)}finally{Me=!1,Le()}}}}function ar(e,t,n){"focusin"===e?(rr(),Zn=n,(Gn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Zn)}function lr(e,t){if("click"===e)return Kn(t)}function sr(e,t){if("input"===e||"change"===e)return Kn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function dr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!ur(e[n[r]],t[n[r]]))return!1;return!0}function pr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=pr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=pr(r)}}function mr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?mr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function gr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vr=d&&"documentMode"in document&&11>=document.documentMode,yr=null,br=null,Ar=null,xr=!1;function Cr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;xr||null==yr||yr!==X(r)||(r="selectionStart"in(r=yr)&&gr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Ar&&dr(Ar,r)||(Ar=r,0<(r=Mr(br,"onSelect")).length&&(t=new pn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(_t,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Er=0;Er<wr.length;Er++)Rt.set(wr[Er],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function Br(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,s,u){if(Ge.apply(this,arguments),We){if(!We)throw Error(i(198));var c=Ve;We=!1,Ve=null,Ye||(Ye=!0,He=c)}}(r,t,void 0,e),e.currentTarget=null}function Or(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;Br(o,l,u),a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;Br(o,l,u),a=s}}}if(Ye)throw e=He,Ye=!1,He=null,e}function Pr(e,t){var n=ao(t),r=e+"__bubble";n.has(r)||(_r(t,e,2,!1),n.add(r))}var Nr="_reactListening"+Math.random().toString(36).slice(2);function Tr(e){e[Nr]||(e[Nr]=!0,l.forEach((function(t){Sr.has(t)||Rr(t,!1,e,null),Rr(t,!0,e,null)})))}function Rr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=ao(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),_r(a,e,o,t),i.add(l))}function _r(e,t,n,r){var o=Rt.get(t);switch(void 0===o?2:o){case 0:o=Zt;break;case 1:o=Qt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!$e||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ir(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=to(l)))return;if(5===(s=i.tag)||6===s){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{je(e,t,n)}finally{De=!1,Le()}}((function(){var r=a,o=ke(n),i=[];e:{var l=Tt.get(e);if(void 0!==l){var s=pn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":s=Pn;break;case"focusin":u="focus",s=yn;break;case"focusout":u="blur",s=yn;break;case"beforeblur":case"afterblur":s=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case Bt:case Ot:case Pt:s=bn;break;case Nt:s=Rn;break;case"scroll":s=mn;break;case"wheel":s=In;break;case"copy":case"cut":case"paste":s=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Nn}var c=0!=(4&t),d=!c&&"scroll"===e,p=c?null!==l?l+"Capture":null:l;c=[];for(var f,m=r;null!==m;){var h=(f=m).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==p&&null!=(h=ze(m,p))&&c.push(jr(m,h,f))),d)break;m=m.return}0<c.length&&(l=new s(l,u,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!to(u)&&!u[Jr])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?to(u):null)&&(u!==(d=Ze(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=gn,h="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=Nn,h="onPointerLeave",p="onPointerEnter",m="pointer"),d=null==s?l:ro(s),f=null==u?l:ro(u),(l=new c(h,m+"leave",s,n,o)).target=d,l.relatedTarget=f,h=null,to(o)===r&&((c=new c(p,m+"enter",u,n,o)).target=f,c.relatedTarget=d,h=c),d=h,s&&u)e:{for(p=u,m=0,f=c=s;f;f=Dr(f))m++;for(f=0,h=p;h;h=Dr(h))f++;for(;0<m-f;)c=Dr(c),m--;for(;0<f-m;)p=Dr(p),f--;for(;m--;){if(c===p||null!==p&&c===p.alternate)break e;c=Dr(c),p=Dr(p)}c=null}else c=null;null!==s&&Lr(i,l,s,c,!1),null!==u&&null!==d&&Lr(i,d,u,c,!0)}if("select"===(s=(l=r?ro(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=Xn;else if(Hn(l))if(Jn)g=sr;else{g=ir;var v=ar}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=lr);switch(g&&(g=g(e,r))?qn(i,g,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&oe(l,"number",l.value)),v=r?ro(r):window,e){case"focusin":(Hn(v)||"true"===v.contentEditable)&&(yr=v,br=r,Ar=null);break;case"focusout":Ar=br=yr=null;break;case"mousedown":xr=!0;break;case"contextmenu":case"mouseup":case"dragend":xr=!1,Cr(i,n,o);break;case"selectionchange":if(vr)break;case"keydown":case"keyup":Cr(i,n,o)}var y;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(zn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Vn=!0)),0<(v=Mr(r,b)).length&&(b=new Cn(b,e,null,n,o),i.push({event:b,listeners:v}),(y||null!==(y=Wn(n)))&&(b.data=y))),(y=Ln?function(e,t){switch(e){case"compositionend":return Wn(t);case"keypress":return 32!==t.which?null:(Fn=!0,$n);case"textInput":return(e=t.data)===$n&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Mn&&Un(e,t)?(e=nn(),tn=en=Jt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Mr(r,"onBeforeInput")).length&&(o=new Cn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Or(i,t)}))}function jr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=ze(e,n))&&r.unshift(jr(e,a,o)),null!=(a=ze(e,t))&&r.push(jr(e,a,o))),e=e.return}return r}function Dr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=ze(n,a))&&i.unshift(jr(n,s,l)):o||null!=(s=ze(n,a))&&i.push(jr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function zr(){}var $r=null,Fr=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Wr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Vr="function"==typeof setTimeout?setTimeout:void 0,Yr="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function qr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Gr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Zr=0,Qr=Math.random().toString(36).slice(2),Kr="__reactFiber$"+Qr,Xr="__reactProps$"+Qr,Jr="__reactContainer$"+Qr,eo="__reactEvents$"+Qr;function to(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Gr(e);null!==e;){if(n=e[Kr])return n;e=Gr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Kr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function oo(e){return e[Xr]||null}function ao(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var io=[],lo=-1;function so(e){return{current:e}}function uo(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function co(e,t){lo++,io[lo]=e.current,e.current=t}var po={},fo=so(po),mo=so(!1),ho=po;function go(e,t){var n=e.type.contextTypes;if(!n)return po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vo(e){return null!=e.childContextTypes}function yo(){uo(mo),uo(fo)}function bo(e,t,n){if(fo.current!==po)throw Error(i(168));co(fo,t),co(mo,n)}function Ao(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,q(t)||"Unknown",a));return o({},n,r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||po,ho=fo.current,co(fo,e),co(mo,mo.current),!0}function Co(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Ao(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,uo(mo),uo(fo),co(fo,e)):uo(mo),co(mo,n)}var wo=null,Eo=null,ko=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,Bo=a.unstable_cancelCallback,Oo=a.unstable_shouldYield,Po=a.unstable_requestPaint,No=a.unstable_now,To=a.unstable_getCurrentPriorityLevel,Ro=a.unstable_ImmediatePriority,_o=a.unstable_UserBlockingPriority,Io=a.unstable_NormalPriority,jo=a.unstable_LowPriority,Mo=a.unstable_IdlePriority,Do={},Lo=void 0!==Po?Po:function(){},zo=null,$o=null,Fo=!1,Uo=No(),Wo=1e4>Uo?No:function(){return No()-Uo};function Vo(){switch(To()){case Ro:return 99;case _o:return 98;case Io:return 97;case jo:return 96;case Mo:return 95;default:throw Error(i(332))}}function Yo(e){switch(e){case 99:return Ro;case 98:return _o;case 97:return Io;case 96:return jo;case 95:return Mo;default:throw Error(i(332))}}function Ho(e,t){return e=Yo(e),ko(e,t)}function qo(e,t,n){return e=Yo(e),So(e,t,n)}function Go(){if(null!==$o){var e=$o;$o=null,Bo(e)}Zo()}function Zo(){if(!Fo&&null!==zo){Fo=!0;var e=0;try{var t=zo;Ho(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zo=null}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),So(Ro,Go),t}finally{Fo=!1}}}var Qo=x.ReactCurrentBatchConfig;function Ko(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Xo=so(null),Jo=null,ea=null,ta=null;function na(){ta=ea=Jo=null}function ra(e){var t=Xo.current;uo(Xo),e.type._context._currentValue=t}function oa(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function aa(e,t){Jo=e,ta=ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Mi=!0),e.firstContext=null)}function ia(e,t){if(ta!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ta=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ea){if(null===Jo)throw Error(i(308));ea=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ea=ea.next=t;return e._currentValue}var la=!1;function sa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ua(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ca(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function da(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function pa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function fa(e,t,n,r){var a=e.updateQueue;la=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var u=s,c=u.next;u.next=null,null===l?i=c:l.next=c,l=u;var d=e.alternate;if(null!==d){var p=(d=d.updateQueue).lastBaseUpdate;p!==l&&(null===p?d.firstBaseUpdate=c:p.next=c,d.lastBaseUpdate=u)}}if(null!==i){for(p=a.baseState,l=0,d=c=u=null;;){s=i.lane;var f=i.eventTime;if((r&s)===s){null!==d&&(d=d.next={eventTime:f,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var m=e,h=i;switch(s=t,f=n,h.tag){case 1:if("function"==typeof(m=h.payload)){p=m.call(f,p,s);break e}p=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(s="function"==typeof(m=h.payload)?m.call(f,p,s):m))break e;p=o({},p,s);break e;case 2:la=!0}}null!==i.callback&&(e.flags|=32,null===(s=a.effects)?a.effects=[i]:s.push(i))}else f={eventTime:f,lane:s,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===d?(c=d=f,u=p):d=d.next=f,l|=s;if(null===(i=i.next)){if(null===(s=a.shared.pending))break;i=s.next,s.next=null,a.lastBaseUpdate=s,a.shared.pending=null}}null===d&&(u=p),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=d,Ll|=l,e.lanes=l,e.memoizedState=p}}function ma(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var ha=(new r.Component).refs;function ga(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var va={isMounted:function(e){return!!(e=e._reactInternals)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=us(),o=cs(e),a=ca(r,o);a.payload=t,null!=n&&(a.callback=n),da(e,a),ds(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=us(),o=cs(e),a=ca(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),da(e,a),ds(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=us(),r=cs(e),o=ca(n,r);o.tag=2,null!=t&&(o.callback=t),da(e,o),ds(e,r,n)}};function ya(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&dr(n,r)&&dr(o,a))}function ba(e,t,n){var r=!1,o=po,a=t.contextType;return"object"==typeof a&&null!==a?a=ia(a):(o=vo(t)?ho:fo.current,a=(r=null!=(r=t.contextTypes))?go(e,o):po),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=va,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Aa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&va.enqueueReplaceState(t,t.state,null)}function xa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ha,sa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ia(a):(a=vo(t)?ho:fo.current,o.context=go(e,a)),fa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ga(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&va.enqueueReplaceState(o,o.state,null),fa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var Ca=Array.isArray;function wa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===ha&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Ea(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ka(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ws(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=qs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wa(e,t,n),r.return=e,r):((r=Vs(n.type,n.key,n.props,null,e.mode,r)).ref=wa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Ys(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=qs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case C:return(n=Vs(t.type,t.key,t.props,null,e.mode,n)).ref=wa(e,null,t),n.return=e,n;case w:return(t=Gs(t,e.mode,n)).return=e,t}if(Ca(t)||U(t))return(t=Ys(t,e.mode,n,null)).return=e,t;Ea(e,t)}return null}function f(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case C:return n.key===o?n.type===E?d(e,t,n.props.children,r,o):u(e,t,n,r):null;case w:return n.key===o?c(e,t,n,r):null}if(Ca(n)||U(n))return null!==o?null:d(e,t,n,r,null);Ea(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case C:return e=e.get(null===r.key?n:r.key)||null,r.type===E?d(t,e,r.props.children,o,r.key):u(t,e,r,o);case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ca(r)||U(r))return d(t,e=e.get(n)||null,r,o,null);Ea(t,r)}return null}function h(o,i,l,s){for(var u=null,c=null,d=i,h=i=0,g=null;null!==d&&h<l.length;h++){d.index>h?(g=d,d=null):g=d.sibling;var v=f(o,d,l[h],s);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(o,d),i=a(v,i,h),null===c?u=v:c.sibling=v,c=v,d=g}if(h===l.length)return n(o,d),u;if(null===d){for(;h<l.length;h++)null!==(d=p(o,l[h],s))&&(i=a(d,i,h),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(o,d);h<l.length;h++)null!==(g=m(d,o,h,l[h],s))&&(e&&null!==g.alternate&&d.delete(null===g.key?h:g.key),i=a(g,i,h),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(o,e)})),u}function g(o,l,s,u){var c=U(s);if("function"!=typeof c)throw Error(i(150));if(null==(s=c.call(s)))throw Error(i(151));for(var d=c=null,h=l,g=l=0,v=null,y=s.next();null!==h&&!y.done;g++,y=s.next()){h.index>g?(v=h,h=null):v=h.sibling;var b=f(o,h,y.value,u);if(null===b){null===h&&(h=v);break}e&&h&&null===b.alternate&&t(o,h),l=a(b,l,g),null===d?c=b:d.sibling=b,d=b,h=v}if(y.done)return n(o,h),c;if(null===h){for(;!y.done;g++,y=s.next())null!==(y=p(o,y.value,u))&&(l=a(y,l,g),null===d?c=y:d.sibling=y,d=y);return c}for(h=r(o,h);!y.done;g++,y=s.next())null!==(y=m(h,o,g,y.value,u))&&(e&&null!==y.alternate&&h.delete(null===y.key?g:y.key),l=a(y,l,g),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(o,e)})),c}return function(e,r,a,s){var u="object"==typeof a&&null!==a&&a.type===E&&null===a.key;u&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case C:e:{for(c=a.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(a.type===E){n(e,u.sibling),(r=o(u,a.props.children)).return=e,e=r;break e}}else if(u.elementType===a.type){n(e,u.sibling),(r=o(u,a.props)).ref=wa(e,u,a),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}a.type===E?((r=Ys(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Vs(a.type,a.key,a.props,null,e.mode,s)).ref=wa(e,r,a),s.return=e,e=s)}return l(e);case w:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gs(a,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=qs(a,e.mode,s)).return=e,e=r),l(e);if(Ca(a))return h(e,r,a,s);if(U(a))return g(e,r,a,s);if(c&&Ea(e,a),void 0===a&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,q(e.type)||"Component"))}return n(e,r)}}var Sa=ka(!0),Ba=ka(!1),Oa={},Pa=so(Oa),Na=so(Oa),Ta=so(Oa);function Ra(e){if(e===Oa)throw Error(i(174));return e}function _a(e,t){switch(co(Ta,t),co(Na,e),co(Pa,Oa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:fe(null,"");break;default:t=fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Pa),co(Pa,t)}function Ia(){uo(Pa),uo(Na),uo(Ta)}function ja(e){Ra(Ta.current);var t=Ra(Pa.current),n=fe(t,e.type);t!==n&&(co(Na,e),co(Pa,n))}function Ma(e){Na.current===e&&(uo(Pa),uo(Na))}var Da=so(0);function La(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var za=null,$a=null,Fa=!1;function Ua(e,t){var n=Fs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Wa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Va(e){if(Fa){var t=$a;if(t){var n=t;if(!Wa(e,t)){if(!(t=qr(n.nextSibling))||!Wa(e,t))return e.flags=-1025&e.flags|2,Fa=!1,void(za=e);Ua(za,n)}za=e,$a=qr(t.firstChild)}else e.flags=-1025&e.flags|2,Fa=!1,za=e}}function Ya(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;za=e}function Ha(e){if(e!==za)return!1;if(!Fa)return Ya(e),Fa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Wr(t,e.memoizedProps))for(t=$a;t;)Ua(e,t),t=qr(t.nextSibling);if(Ya(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){$a=qr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}$a=null}}else $a=za?qr(e.stateNode.nextSibling):null;return!0}function qa(){$a=za=null,Fa=!1}var Ga=[];function Za(){for(var e=0;e<Ga.length;e++)Ga[e]._workInProgressVersionPrimary=null;Ga.length=0}var Qa=x.ReactCurrentDispatcher,Ka=x.ReactCurrentBatchConfig,Xa=0,Ja=null,ei=null,ti=null,ni=!1,ri=!1;function oi(){throw Error(i(321))}function ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function ii(e,t,n,r,o,a){if(Xa=a,Ja=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?Ri:_i,e=n(r,o),ri){a=0;do{if(ri=!1,!(25>a))throw Error(i(301));a+=1,ti=ei=null,t.updateQueue=null,Qa.current=Ii,e=n(r,o)}while(ri)}if(Qa.current=Ti,t=null!==ei&&null!==ei.next,Xa=0,ti=ei=Ja=null,ni=!1,t)throw Error(i(300));return e}function li(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ti?Ja.memoizedState=ti=e:ti=ti.next=e,ti}function si(){if(null===ei){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var t=null===ti?Ja.memoizedState:ti.next;if(null!==t)ti=t,ei=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ti?Ja.memoizedState=ti=e:ti=ti.next=e}return ti}function ui(e,t){return"function"==typeof t?t(e):t}function ci(e){var t=si(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ei,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=l=a=null,u=o;do{var c=u.lane;if((Xa&c)===c)null!==s&&(s=s.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===s?(l=s=d,a=r):s=s.next=d,Ja.lanes|=c,Ll|=c}u=u.next}while(null!==u&&u!==o);null===s?a=r:s.next=l,ur(r,t.memoizedState)||(Mi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function di(e){var t=si(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ur(a,t.memoizedState)||(Mi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function pi(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Xa&e)===e)&&(t._workInProgressVersionPrimary=r,Ga.push(t))),e)return n(t._source);throw Ga.push(t),Error(i(350))}function fi(e,t,n,r){var o=Nl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),s=Qa.current,u=s.useState((function(){return pi(o,t,n)})),c=u[1],d=u[0];u=ti;var p=e.memoizedState,f=p.refs,m=f.getSnapshot,h=p.source;p=p.subscribe;var g=Ja;return e.memoizedState={refs:f,source:t,subscribe:r},s.useEffect((function(){f.getSnapshot=n,f.setSnapshot=c;var e=a(t._source);if(!ur(l,e)){e=n(t._source),ur(d,e)||(c(e),e=cs(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var s=31-Wt(i),u=1<<s;r[s]|=e,i&=~u}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=f.getSnapshot,n=f.setSnapshot;try{n(e(t._source));var r=cs(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(m,n)&&ur(h,t)&&ur(p,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ui,lastRenderedState:d}).dispatch=c=Ni.bind(null,Ja,e),u.queue=e,u.baseQueue=null,d=pi(o,t,n),u.memoizedState=u.baseState=d),d}function mi(e,t,n){return fi(si(),e,t,n)}function hi(e){var t=li();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ui,lastRenderedState:e}).dispatch=Ni.bind(null,Ja,e),[t.memoizedState,e]}function gi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ja.updateQueue)?(t={lastEffect:null},Ja.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function vi(e){return e={current:e},li().memoizedState=e}function yi(){return si().memoizedState}function bi(e,t,n,r){var o=li();Ja.flags|=e,o.memoizedState=gi(1|t,n,void 0,void 0===r?null:r)}function Ai(e,t,n,r){var o=si();r=void 0===r?null:r;var a=void 0;if(null!==ei){var i=ei.memoizedState;if(a=i.destroy,null!==r&&ai(r,i.deps))return void gi(t,n,a,r)}Ja.flags|=e,o.memoizedState=gi(1|t,n,a,r)}function xi(e,t){return bi(516,4,e,t)}function Ci(e,t){return Ai(516,4,e,t)}function wi(e,t){return Ai(4,2,e,t)}function Ei(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ki(e,t,n){return n=null!=n?n.concat([e]):null,Ai(4,2,Ei.bind(null,t,e),n)}function Si(){}function Bi(e,t){var n=si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Oi(e,t){var n=si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Pi(e,t){var n=Vo();Ho(98>n?98:n,(function(){e(!0)})),Ho(97<n?97:n,(function(){var n=Ka.transition;Ka.transition=1;try{e(!1),t()}finally{Ka.transition=n}}))}function Ni(e,t,n){var r=us(),o=cs(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ja||null!==i&&i===Ja)ri=ni=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=i(l,n);if(a.eagerReducer=i,a.eagerState=s,ur(s,l))return}catch(e){}ds(e,o,r)}}var Ti={readContext:ia,useCallback:oi,useContext:oi,useEffect:oi,useImperativeHandle:oi,useLayoutEffect:oi,useMemo:oi,useReducer:oi,useRef:oi,useState:oi,useDebugValue:oi,useDeferredValue:oi,useTransition:oi,useMutableSource:oi,useOpaqueIdentifier:oi,unstable_isNewReconciler:!1},Ri={readContext:ia,useCallback:function(e,t){return li().memoizedState=[e,void 0===t?null:t],e},useContext:ia,useEffect:xi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,2,Ei.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bi(4,2,e,t)},useMemo:function(e,t){var n=li();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=li();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ni.bind(null,Ja,e),[r.memoizedState,e]},useRef:vi,useState:hi,useDebugValue:Si,useDeferredValue:function(e){var t=hi(e),n=t[0],r=t[1];return xi((function(){var t=Ka.transition;Ka.transition=1;try{r(e)}finally{Ka.transition=t}}),[e]),n},useTransition:function(){var e=hi(!1),t=e[0];return vi(e=Pi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=li();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},fi(r,e,t,n)},useOpaqueIdentifier:function(){if(Fa){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Zr++).toString(36))),Error(i(355))})),n=hi(t)[1];return 0==(2&Ja.mode)&&(Ja.flags|=516,gi(5,(function(){n("r:"+(Zr++).toString(36))}),void 0,null)),t}return hi(t="r:"+(Zr++).toString(36)),t},unstable_isNewReconciler:!1},_i={readContext:ia,useCallback:Bi,useContext:ia,useEffect:Ci,useImperativeHandle:ki,useLayoutEffect:wi,useMemo:Oi,useReducer:ci,useRef:yi,useState:function(){return ci(ui)},useDebugValue:Si,useDeferredValue:function(e){var t=ci(ui),n=t[0],r=t[1];return Ci((function(){var t=Ka.transition;Ka.transition=1;try{r(e)}finally{Ka.transition=t}}),[e]),n},useTransition:function(){var e=ci(ui)[0];return[yi().current,e]},useMutableSource:mi,useOpaqueIdentifier:function(){return ci(ui)[0]},unstable_isNewReconciler:!1},Ii={readContext:ia,useCallback:Bi,useContext:ia,useEffect:Ci,useImperativeHandle:ki,useLayoutEffect:wi,useMemo:Oi,useReducer:di,useRef:yi,useState:function(){return di(ui)},useDebugValue:Si,useDeferredValue:function(e){var t=di(ui),n=t[0],r=t[1];return Ci((function(){var t=Ka.transition;Ka.transition=1;try{r(e)}finally{Ka.transition=t}}),[e]),n},useTransition:function(){var e=di(ui)[0];return[yi().current,e]},useMutableSource:mi,useOpaqueIdentifier:function(){return di(ui)[0]},unstable_isNewReconciler:!1},ji=x.ReactCurrentOwner,Mi=!1;function Di(e,t,n,r){t.child=null===e?Ba(t,null,n,r):Sa(t,e.child,n,r)}function Li(e,t,n,r,o){n=n.render;var a=t.ref;return aa(t,o),r=ii(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,Di(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function zi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Us(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Vs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,$i(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:dr)(o,r)&&e.ref===t.ref)?nl(e,t,a):(t.flags|=1,(e=Ws(i,r)).ref=t.ref,e.return=t,t.child=e)}function $i(e,t,n,r,o,a){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(Mi=!1,0==(a&o))return t.lanes=e.lanes,nl(e,t,a);0!=(16384&e.flags)&&(Mi=!0)}return Wi(e,t,n,r,a)}function Fi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bs(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bs(0,e),null;t.memoizedState={baseLanes:0},bs(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,bs(0,r);return Di(e,t,o,n),t.child}function Ui(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Wi(e,t,n,r,o){var a=vo(n)?ho:fo.current;return a=go(t,a),aa(t,o),n=ii(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,Di(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Vi(e,t,n,r,o){if(vo(n)){var a=!0;xo(t)}else a=!1;if(aa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ba(t,n,r),xa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?ia(u):go(t,u=vo(n)?ho:fo.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&Aa(t,i,r,u),la=!1;var p=t.memoizedState;i.state=p,fa(t,r,i,o),s=t.memoizedState,l!==r||p!==s||mo.current||la?("function"==typeof c&&(ga(t,n,c,r),s=t.memoizedState),(l=la||ya(t,n,l,r,p,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ua(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Ko(t.type,l),i.props=u,d=t.pendingProps,p=i.context,s="object"==typeof(s=n.contextType)&&null!==s?ia(s):go(t,s=vo(n)?ho:fo.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||p!==s)&&Aa(t,i,r,s),la=!1,p=t.memoizedState,i.state=p,fa(t,r,i,o);var m=t.memoizedState;l!==d||p!==m||mo.current||la?("function"==typeof f&&(ga(t,n,f,r),m=t.memoizedState),(u=la||ya(t,n,u,r,p,m,s))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),r=!1)}return Yi(e,t,n,r,a,o)}function Yi(e,t,n,r,o,a){Ui(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&Co(t,n,!1),nl(e,t,a);r=t.stateNode,ji.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):Di(e,t,l,a),t.memoizedState=r.state,o&&Co(t,n,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),_a(e,t.containerInfo)}var qi,Gi,Zi,Qi={dehydrated:null,retryLane:0};function Ki(e,t,n){var r,o=t.pendingProps,a=Da.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),co(Da,1&a),null===e?(void 0!==o.fallback&&Va(t),e=o.children,a=o.fallback,i?(e=Xi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Xi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,t.lanes=33554432,e):((n=Hs({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ws(i,l),null!==e?r=Ws(e,r):(r=Ys(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Qi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Ws(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Xi(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Hs(t,o,0,null),n=Ys(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Ji(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oa(e.return,t)}function el(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Di(e,t,r.children,n),0!=(2&(r=Da.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,n);else if(19===e.tag)Ji(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Da,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===La(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===La(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ll|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ws(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ws(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!Fa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return vo(t.type)&&yo(),null;case 3:return Ia(),uo(mo),uo(fo),Za(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ma(t);var a=Ra(Ta.current);if(n=t.type,null!==e&&null!=t.stateNode)Gi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ra(Pa.current),Ha(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Kr]=t,r[Xr]=l,n){case"dialog":Pr("cancel",r),Pr("close",r);break;case"iframe":case"object":case"embed":Pr("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)Pr(kr[e],r);break;case"source":Pr("error",r);break;case"img":case"image":case"link":Pr("error",r),Pr("load",r);break;case"details":Pr("toggle",r);break;case"input":ee(r,l),Pr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Pr("invalid",r);break;case"textarea":se(r,l),Pr("invalid",r)}for(var u in we(n,l),e=null,l)l.hasOwnProperty(u)&&(a=l[u],"children"===u?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):s.hasOwnProperty(u)&&null!=a&&"onScroll"===u&&Pr("scroll",r));switch(n){case"input":Q(r),re(r,l,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=zr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===a.nodeType?a:a.ownerDocument,e===de&&(e=pe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Kr]=t,e[Xr]=r,qi(e,t),t.stateNode=e,u=Ee(n,r),n){case"dialog":Pr("cancel",e),Pr("close",e),a=r;break;case"iframe":case"object":case"embed":Pr("load",e),a=r;break;case"video":case"audio":for(a=0;a<kr.length;a++)Pr(kr[a],e);a=r;break;case"source":Pr("error",e),a=r;break;case"img":case"image":case"link":Pr("error",e),Pr("load",e),a=r;break;case"details":Pr("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),Pr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Pr("invalid",e);break;case"textarea":se(e,r),a=le(e,r),Pr("invalid",e);break;default:a=r}we(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var d=c[l];"style"===l?xe(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&ge(e,d):"children"===l?"string"==typeof d?("textarea"!==n||""!==d)&&ve(e,d):"number"==typeof d&&ve(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(s.hasOwnProperty(l)?null!=d&&"onScroll"===l&&Pr("scroll",e):null!=d&&A(e,l,d,u))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=zr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Zi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Ra(Ta.current),Ra(Pa.current),Ha(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return uo(Da),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Da.current)?0===jl&&(jl=3):(0!==jl&&3!==jl||(jl=4),null===Nl||0==(134217727&Ll)&&0==(134217727&zl)||hs(Nl,Rl))),(r||n)&&(t.flags|=4),null);case 4:return Ia(),null===e&&Tr(t.stateNode.containerInfo),null;case 10:return ra(t),null;case 19:if(uo(Da),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(u=r.rendering))if(l)rl(r,!1);else{if(0!==jl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=La(e))){for(t.flags|=64,rl(r,!1),null!==(l=u.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(u=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,e=u.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Da,1&Da.current|2),t.child}e=e.sibling}null!==r.tail&&Wo()>Wl&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=La(u))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Fa)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wo()-r.renderingStartTime>Wl&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wo(),n.sibling=null,t=Da.current,co(Da,l?1&t|2:1&t),n):null;case 23:case 24:return As(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:vo(e.type)&&yo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ia(),uo(mo),uo(fo),Za(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ma(e),null;case 13:return uo(Da),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return uo(Da),null;case 4:return Ia(),null;case 10:return ra(e),null;case 23:case 24:return As(),null;default:return null}}function il(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}qi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Gi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Ra(Pa.current);var i,l=null;switch(n){case"input":a=J(e,a),r=J(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=zr)}for(d in we(n,r),n=null,a)if(!r.hasOwnProperty(d)&&a.hasOwnProperty(d)&&null!=a[d])if("style"===d){var u=a[d];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(s.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=a?a[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(i in u)!u.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&u[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(l=l||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(s.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Pr("scroll",e),l||u===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===j?c.toString():(l=l||[]).push(d,c))}n&&(l=l||[]).push("style",n);var d=l;(t.updateQueue=d)&&(t.flags|=4)}},Zi=function(e,t,n,r){n!==r&&(t.flags|=4)};var sl="function"==typeof WeakMap?WeakMap:Map;function ul(e,t,n){(n=ca(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ql||(ql=!0,Gl=r),ll(0,t)},n}function cl(e,t,n){(n=ca(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ll(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Zl?Zl=new Set([this]):Zl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var dl="function"==typeof WeakSet?WeakSet:Set;function pl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ds(e,t)}else t.current=null}function fl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo))}throw Error(i(163))}function ml(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Is(n,e),_s(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ma(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}ma(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))))}throw Error(i(163))}function hl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=Ae("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function gl(e,t){if(Eo&&"function"==typeof Eo.onCommitFiberUnmount)try{Eo.onCommitFiberUnmount(wo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Is(t,n);else{r=t;try{o()}catch(e){Ds(r,e)}}n=n.next}while(n!==e)}break;case 1:if(pl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ds(t,e)}break;case 5:pl(t);break;case 4:Cl(e,t)}}function vl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?Al(e,n,t):xl(e,n,t)}function Al(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=zr));else if(4!==r&&null!==(e=e.child))for(Al(e,t,n),e=e.sibling;null!==e;)Al(e,t,n),e=e.sibling}function xl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(xl(e,t,n),e=e.sibling;null!==e;)xl(e,t,n),e=e.sibling}function Cl(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,s=o,u=s;;)if(gl(l,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===s)break e;for(;null===u.sibling;){if(null===u.return||u.return===s)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(l=n,s=o.stateNode,8===l.nodeType?l.parentNode.removeChild(s):l.removeChild(s)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(gl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<a.length;o+=2){var l=a[o],s=a[o+1];"style"===l?xe(n,s):"dangerouslySetInnerHTML"===l?ge(n,s):"children"===l?ve(n,s):A(n,l,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Ul=Wo(),hl(t.child,!0)),void El(t);case 19:return void El(t);case 23:case 24:return void hl(t,null!==t.memoizedState)}throw Error(i(163))}function El(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new dl),t.forEach((function(t){var r=zs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function kl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Sl=Math.ceil,Bl=x.ReactCurrentDispatcher,Ol=x.ReactCurrentOwner,Pl=0,Nl=null,Tl=null,Rl=0,_l=0,Il=so(0),jl=0,Ml=null,Dl=0,Ll=0,zl=0,$l=0,Fl=null,Ul=0,Wl=1/0;function Vl(){Wl=Wo()+500}var Yl,Hl=null,ql=!1,Gl=null,Zl=null,Ql=!1,Kl=null,Xl=90,Jl=[],es=[],ts=null,ns=0,rs=null,os=-1,as=0,is=0,ls=null,ss=!1;function us(){return 0!=(48&Pl)?Wo():-1!==os?os:os=Wo()}function cs(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Vo()?1:2;if(0===as&&(as=Dl),0!==Qo.transition){0!==is&&(is=null!==Fl?Fl.pendingLanes:0),e=as;var t=4186112&~is;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Vo(),e=zt(0!=(4&Pl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),as)}function ds(e,t,n){if(50<ns)throw ns=0,rs=null,Error(i(185));if(null===(e=ps(e,t)))return null;Ut(e,t,n),e===Nl&&(zl|=t,4===jl&&hs(e,Rl));var r=Vo();1===t?0!=(8&Pl)&&0==(48&Pl)?gs(e):(fs(e,n),0===Pl&&(Vl(),Go())):(0==(4&Pl)||98!==r&&99!==r||(null===ts?ts=new Set([e]):ts.add(e)),fs(e,n)),Fl=e}function ps(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function fs(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var s=31-Wt(l),u=1<<s,c=a[s];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,Mt(u);var d=jt;a[s]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);l&=~u}if(r=Dt(e,e===Nl?Rl:0),t=jt,0===r)null!==n&&(n!==Do&&Bo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Do&&Bo(n)}15===t?(n=gs.bind(null,e),null===zo?(zo=[n],$o=So(Ro,Zo)):zo.push(n),n=Do):14===t?n=qo(99,gs.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=qo(n,ms.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function ms(e){if(os=-1,is=as=0,0!=(48&Pl))throw Error(i(327));var t=e.callbackNode;if(Rs()&&e.callbackNode!==t)return null;var n=Dt(e,e===Nl?Rl:0);if(0===n)return null;var r=n,o=Pl;Pl|=16;var a=ws();for(Nl===e&&Rl===r||(Vl(),xs(e,r));;)try{Ss();break}catch(t){Cs(e,t)}if(na(),Bl.current=a,Pl=o,null!==Tl?r=0:(Nl=null,Rl=0,r=jl),0!=(Dl&zl))xs(e,0);else if(0!==r){if(2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=Lt(e))&&(r=Es(e,n))),1===r)throw t=Ml,xs(e,0),hs(e,n),fs(e,Wo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:case 5:Ps(e);break;case 3:if(hs(e,n),(62914560&n)===n&&10<(r=Ul+500-Wo())){if(0!==Dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){us(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Vr(Ps.bind(null,e),r);break}Ps(e);break;case 4:if(hs(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Wt(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=Wo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Sl(n/1960))-n)){e.timeoutHandle=Vr(Ps.bind(null,e),n);break}Ps(e);break;default:throw Error(i(329))}}return fs(e,Wo()),e.callbackNode===t?ms.bind(null,e):null}function hs(e,t){for(t&=~$l,t&=~zl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function gs(e){if(0!=(48&Pl))throw Error(i(327));if(Rs(),e===Nl&&0!=(e.expiredLanes&Rl)){var t=Rl,n=Es(e,t);0!=(Dl&zl)&&(n=Es(e,t=Dt(e,t)))}else n=Es(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=Lt(e))&&(n=Es(e,t))),1===n)throw n=Ml,xs(e,0),hs(e,t),fs(e,Wo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ps(e),fs(e,Wo()),null}function vs(e,t){var n=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=n)&&(Vl(),Go())}}function ys(e,t){var n=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=n)&&(Vl(),Go())}}function bs(e,t){co(Il,_l),_l|=t,Dl|=t}function As(){_l=Il.current,uo(Il)}function xs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Yr(n)),null!==Tl)for(n=Tl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Ia(),uo(mo),uo(fo),Za();break;case 5:Ma(r);break;case 4:Ia();break;case 13:case 19:uo(Da);break;case 10:ra(r);break;case 23:case 24:As()}n=n.return}Nl=e,Tl=Ws(e.current,null),Rl=_l=Dl=t,jl=0,Ml=null,$l=zl=Ll=0}function Cs(e,t){for(;;){var n=Tl;try{if(na(),Qa.current=Ti,ni){for(var r=Ja.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ni=!1}if(Xa=0,ti=ei=Ja=null,ri=!1,Ol.current=null,null===n||null===n.return){jl=1,Ml=t,Tl=null;break}e:{var a=e,i=n.return,l=n,s=t;if(t=Rl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&Da.current),p=i;do{var f;if(f=13===p.tag){var m=p.memoizedState;if(null!==m)f=null!==m.dehydrated;else{var h=p.memoizedProps;f=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!d)}}if(f){var g=p.updateQueue;if(null===g){var v=new Set;v.add(u),p.updateQueue=v}else g.add(u);if(0==(2&p.mode)){if(p.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ca(-1,1);y.tag=2,da(l,y)}l.lanes|=1;break e}s=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new sl,s=new Set,b.set(u,s)):void 0===(s=b.get(u))&&(s=new Set,b.set(u,s)),!s.has(l)){s.add(l);var A=Ls.bind(null,a,u,l);u.then(A,A)}p.flags|=4096,p.lanes=t;break e}p=p.return}while(null!==p);s=Error((q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==jl&&(jl=2),s=il(s,l),p=i;do{switch(p.tag){case 3:a=s,p.flags|=4096,t&=-t,p.lanes|=t,pa(p,ul(0,a,t));break e;case 1:a=s;var x=p.type,C=p.stateNode;if(0==(64&p.flags)&&("function"==typeof x.getDerivedStateFromError||null!==C&&"function"==typeof C.componentDidCatch&&(null===Zl||!Zl.has(C)))){p.flags|=4096,t&=-t,p.lanes|=t,pa(p,cl(p,a,t));break e}}p=p.return}while(null!==p)}Os(n)}catch(e){t=e,Tl===n&&null!==n&&(Tl=n=n.return);continue}break}}function ws(){var e=Bl.current;return Bl.current=Ti,null===e?Ti:e}function Es(e,t){var n=Pl;Pl|=16;var r=ws();for(Nl===e&&Rl===t||xs(e,t);;)try{ks();break}catch(t){Cs(e,t)}if(na(),Pl=n,Bl.current=r,null!==Tl)throw Error(i(261));return Nl=null,Rl=0,jl}function ks(){for(;null!==Tl;)Bs(Tl)}function Ss(){for(;null!==Tl&&!Oo();)Bs(Tl)}function Bs(e){var t=Yl(e.alternate,e,_l);e.memoizedProps=e.pendingProps,null===t?Os(e):Tl=t,Ol.current=null}function Os(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,_l)))return void(Tl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&_l)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=al(t)))return n.flags&=2047,void(Tl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Tl=t);Tl=t=e}while(null!==t);0===jl&&(jl=5)}function Ps(e){var t=Vo();return Ho(99,Ns.bind(null,e,t)),null}function Ns(e,t){do{Rs()}while(null!==Kl);if(0!=(48&Pl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,s=e.expirationTimes;0<a;){var u=31-Wt(a),c=1<<u;o[u]=0,l[u]=-1,s[u]=-1,a&=~c}if(null!==ts&&0==(24&r)&&ts.has(e)&&ts.delete(e),e===Nl&&(Tl=Nl=null,Rl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Pl,Pl|=32,Ol.current=null,$r=Gt,gr(l=hr())){if("selectionStart"in l)s={start:l.selectionStart,end:l.selectionEnd};else e:if(s=(s=l.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,a=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{s.nodeType,u.nodeType}catch(e){s=null;break e}var d=0,p=-1,f=-1,m=0,h=0,g=l,v=null;t:for(;;){for(var y;g!==s||0!==a&&3!==g.nodeType||(p=d+a),g!==u||0!==c&&3!==g.nodeType||(f=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(y=g.firstChild);)v=g,g=y;for(;;){if(g===l)break t;if(v===s&&++m===a&&(p=d),v===u&&++h===c&&(f=d),null!==(y=g.nextSibling))break;v=(g=v).parentNode}g=y}s=-1===p||-1===f?null:{start:p,end:f}}else s=null;s=s||{start:0,end:0}}else s=null;Fr={focusedElem:l,selectionRange:s},Gt=!1,ls=null,ss=!1,Hl=r;do{try{Ts()}catch(e){if(null===Hl)throw Error(i(330));Ds(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);ls=null,Hl=r;do{try{for(l=e;null!==Hl;){var b=Hl.flags;if(16&b&&ve(Hl.stateNode,""),128&b){var A=Hl.alternate;if(null!==A){var x=A.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&b){case 2:bl(Hl),Hl.flags&=-3;break;case 6:bl(Hl),Hl.flags&=-3,wl(Hl.alternate,Hl);break;case 1024:Hl.flags&=-1025;break;case 1028:Hl.flags&=-1025,wl(Hl.alternate,Hl);break;case 4:wl(Hl.alternate,Hl);break;case 8:Cl(l,s=Hl);var C=s.alternate;vl(s),null!==C&&vl(C)}Hl=Hl.nextEffect}}catch(e){if(null===Hl)throw Error(i(330));Ds(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);if(x=Fr,A=hr(),b=x.focusedElem,l=x.selectionRange,A!==b&&b&&b.ownerDocument&&mr(b.ownerDocument.documentElement,b)){null!==l&&gr(b)&&(A=l.start,void 0===(x=l.end)&&(x=A),"selectionStart"in b?(b.selectionStart=A,b.selectionEnd=Math.min(x,b.value.length)):(x=(A=b.ownerDocument||document)&&A.defaultView||window).getSelection&&(x=x.getSelection(),s=b.textContent.length,C=Math.min(l.start,s),l=void 0===l.end?C:Math.min(l.end,s),!x.extend&&C>l&&(s=l,l=C,C=s),s=fr(b,C),a=fr(b,l),s&&a&&(1!==x.rangeCount||x.anchorNode!==s.node||x.anchorOffset!==s.offset||x.focusNode!==a.node||x.focusOffset!==a.offset)&&((A=A.createRange()).setStart(s.node,s.offset),x.removeAllRanges(),C>l?(x.addRange(A),x.extend(a.node,a.offset)):(A.setEnd(a.node,a.offset),x.addRange(A))))),A=[];for(x=b;x=x.parentNode;)1===x.nodeType&&A.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<A.length;b++)(x=A[b]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Gt=!!$r,Fr=$r=null,e.current=n,Hl=r;do{try{for(b=e;null!==Hl;){var w=Hl.flags;if(36&w&&ml(b,Hl.alternate,Hl),128&w){A=void 0;var E=Hl.ref;if(null!==E){var k=Hl.stateNode;Hl.tag,A=k,"function"==typeof E?E(A):E.current=A}}Hl=Hl.nextEffect}}catch(e){if(null===Hl)throw Error(i(330));Ds(Hl,e),Hl=Hl.nextEffect}}while(null!==Hl);Hl=null,Lo(),Pl=o}else e.current=n;if(Ql)Ql=!1,Kl=e,Xl=t;else for(Hl=r;null!==Hl;)t=Hl.nextEffect,Hl.nextEffect=null,8&Hl.flags&&((w=Hl).sibling=null,w.stateNode=null),Hl=t;if(0===(r=e.pendingLanes)&&(Zl=null),1===r?e===rs?ns++:(ns=0,rs=e):ns=0,n=n.stateNode,Eo&&"function"==typeof Eo.onCommitFiberRoot)try{Eo.onCommitFiberRoot(wo,n,void 0,64==(64&n.current.flags))}catch(e){}if(fs(e,Wo()),ql)throw ql=!1,e=Gl,Gl=null,e;return 0!=(8&Pl)||Go(),null}function Ts(){for(;null!==Hl;){var e=Hl.alternate;ss||null===ls||(0!=(8&Hl.flags)?Je(Hl,ls)&&(ss=!0):13===Hl.tag&&kl(e,Hl)&&Je(Hl,ls)&&(ss=!0));var t=Hl.flags;0!=(256&t)&&fl(e,Hl),0==(512&t)||Ql||(Ql=!0,qo(97,(function(){return Rs(),null}))),Hl=Hl.nextEffect}}function Rs(){if(90!==Xl){var e=97<Xl?97:Xl;return Xl=90,Ho(e,js)}return!1}function _s(e,t){Jl.push(t,e),Ql||(Ql=!0,qo(97,(function(){return Rs(),null})))}function Is(e,t){es.push(t,e),Ql||(Ql=!0,qo(97,(function(){return Rs(),null})))}function js(){if(null===Kl)return!1;var e=Kl;if(Kl=null,0!=(48&Pl))throw Error(i(331));var t=Pl;Pl|=32;var n=es;es=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Ds(a,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var s=o.create;o.destroy=s()}catch(e){if(null===a)throw Error(i(330));Ds(a,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Pl=t,Go(),!0}function Ms(e,t,n){da(e,t=ul(0,t=il(n,t),1)),t=us(),null!==(e=ps(e,1))&&(Ut(e,1,t),fs(e,t))}function Ds(e,t){if(3===e.tag)Ms(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ms(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Zl||!Zl.has(r))){var o=cl(n,e=il(t,e),1);if(da(n,o),o=us(),null!==(n=ps(n,1)))Ut(n,1,o),fs(n,o);else if("function"==typeof r.componentDidCatch&&(null===Zl||!Zl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ls(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=us(),e.pingedLanes|=e.suspendedLanes&n,Nl===e&&(Rl&n)===n&&(4===jl||3===jl&&(62914560&Rl)===Rl&&500>Wo()-Ul?xs(e,0):$l|=n),fs(e,t)}function zs(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Vo()?1:2:(0===as&&(as=Dl),0===(t=$t(62914560&~as))&&(t=4194304))),n=us(),null!==(e=ps(e,t))&&(Ut(e,t,n),fs(e,n))}function $s(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fs(e,t,n,r){return new $s(e,t,n,r)}function Us(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ws(e,t){var n=e.alternate;return null===n?((n=Fs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Vs(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Us(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case E:return Ys(n.children,o,a,t);case M:l=8,o|=16;break;case k:l=8,o|=1;break;case S:return(e=Fs(12,n,t,8|o)).elementType=S,e.type=S,e.lanes=a,e;case N:return(e=Fs(13,n,t,o)).type=N,e.elementType=N,e.lanes=a,e;case T:return(e=Fs(19,n,t,o)).elementType=T,e.lanes=a,e;case D:return Hs(n,o,a,t);case L:return(e=Fs(24,n,t,o)).elementType=L,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:l=10;break e;case O:l=9;break e;case P:l=11;break e;case R:l=14;break e;case _:l=16,r=null;break e;case I:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Fs(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Ys(e,t,n,r){return(e=Fs(7,e,r,t)).lanes=n,e}function Hs(e,t,n,r){return(e=Fs(23,e,r,t)).elementType=D,e.lanes=n,e}function qs(e,t,n){return(e=Fs(6,e,null,t)).lanes=n,e}function Gs(e,t,n){return(t=Fs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zs(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ft(0),this.expirationTimes=Ft(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ft(0),this.mutableSourceEagerHydrationData=null}function Qs(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ks(e,t,n,r){var o=t.current,a=us(),l=cs(o);e:if(n){t:{if(Ze(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(vo(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(i(171))}if(1===n.tag){var u=n.type;if(vo(u)){n=Ao(n,u,s);break e}}n=s}else n=po;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),da(o,t),ds(o,l,a),l}function Xs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Js(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function eu(e,t){Js(e,t),(e=e.alternate)&&Js(e,t)}function tu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Zs(e,t,null!=n&&!0===n.hydrate),t=Fs(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,sa(t),e[Jr]=n.current,Tr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ru(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Xs(i);l.call(e)}}Ks(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Xs(i);s.call(e)}}ys((function(){Ks(t,i,e,o)}))}return Xs(i)}function ou(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(t))throw Error(i(200));return Qs(e,t,null,n)}Yl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||mo.current)Mi=!0;else{if(0==(n&r)){switch(Mi=!1,t.tag){case 3:Hi(t),qa();break;case 5:ja(t);break;case 1:vo(t.type)&&xo(t);break;case 4:_a(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ki(e,t,n):(co(Da,1&Da.current),null!==(t=nl(e,t,n))?t.sibling:null);co(Da,1&Da.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Da,Da.current),r)break;return null;case 23:case 24:return t.lanes=0,Fi(e,t,n)}return nl(e,t,n)}Mi=0!=(16384&e.flags)}else Mi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=go(t,fo.current),aa(t,n),o=ii(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var a=!0;xo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,sa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ga(t,r,l,e),o.updater=va,t.stateNode=o,o._reactInternals=t,xa(t,r,e,n),t=Yi(null,t,r,!0,a,n)}else t.tag=0,Di(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Us(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===R)return 14}return 2}(o),e=Ko(o,e),a){case 0:t=Wi(null,t,o,e,n);break e;case 1:t=Vi(null,t,o,e,n);break e;case 11:t=Li(null,t,o,e,n);break e;case 14:t=zi(null,t,o,Ko(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Wi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,Vi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Hi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ua(e,t),fa(t,r,null,n),(r=t.memoizedState.element)===o)qa(),t=nl(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&($a=qr(t.stateNode.containerInfo.firstChild),za=t,a=Fa=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ga.push(a);for(n=Ba(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Di(e,t,r,n),qa();t=t.child}return t;case 5:return ja(t),null===e&&Va(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Wr(r,o)?l=null:null!==a&&Wr(r,a)&&(t.flags|=16),Ui(e,t),Di(e,t,l,n),t.child;case 6:return null===e&&Va(t),null;case 13:return Ki(e,t,n);case 4:return _a(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Sa(t,null,r,n):Di(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Li(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return Di(e,t,t.pendingProps,n),t.child;case 8:case 12:return Di(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var s=t.type._context;if(co(Xo,s._currentValue),s._currentValue=a,null!==l)if(s=l.value,0==(a=ur(s,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823))){if(l.children===o.children&&!mo.current){t=nl(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.dependencies;if(null!==u){l=s.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===s.tag&&((c=ca(-1,n&-n)).tag=2,da(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),oa(s.return,n),u.lanes|=n;break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}Di(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,aa(t,n),r=r(o=ia(o,a.unstable_observedBits)),t.flags|=1,Di(e,t,r,n),t.child;case 14:return a=Ko(o=t.type,t.pendingProps),zi(e,t,o,a=Ko(o.type,a),r,n);case 15:return $i(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,vo(r)?(e=!0,xo(t)):e=!1,aa(t,n),ba(t,r,o),xa(t,r,o,n),Yi(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return Fi(e,t,n)}throw Error(i(156,t.tag))},tu.prototype.render=function(e){Ks(e,this._internalRoot,null,null)},tu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ks(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(ds(e,4,us()),eu(e,4))},tt=function(e){13===e.tag&&(ds(e,67108864,us()),eu(e,67108864))},nt=function(e){if(13===e.tag){var t=us(),n=cs(e);ds(e,n,t),eu(e,n)}},rt=function(e,t){return t()},Se=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(i(90));K(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Re=vs,_e=function(e,t,n,r,o){var a=Pl;Pl|=4;try{return Ho(98,e.bind(null,t,n,r,o))}finally{0===(Pl=a)&&(Vl(),Go())}},Ie=function(){0==(49&Pl)&&(function(){if(null!==ts){var e=ts;ts=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,fs(e,Wo())}))}Go()}(),Rs())},je=function(e,t){var n=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=n)&&(Vl(),Go())}};var au={Events:[no,ro,oo,Ne,Te,Rs,{current:!1}]},iu={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},lu={bundleType:iu.bundleType,version:iu.version,rendererPackageName:iu.rendererPackageName,rendererConfig:iu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:iu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var su=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!su.isDisabled&&su.supportsFiber)try{wo=su.inject(lu),Eo=su}catch(he){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=au,t.createPortal=ou,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Pl;if(0!=(48&n))return e(t);Pl|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{Pl=n,Go()}},t.hydrate=function(e,t,n){if(!nu(t))throw Error(i(200));return ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!nu(t))throw Error(i(200));return ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nu(e))throw Error(i(40));return!!e._reactRootContainer&&(ys((function(){ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=vs,t.unstable_createPortal=function(e,t){return ou(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nu(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ru(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},2495:function(e){e.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(36)),a=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={files:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"handleChange",value:function(e){for(var t=this,n=e.target.files,r=[],o=function(){var e=n[a],o=new FileReader;o.readAsDataURL(e),o.onload=function(){var a={name:e.name,type:e.type,size:Math.round(e.size/1e3)+" kB",base64:o.result,file:e};r.push(a),r.length==n.length&&(t.props.multiple?t.props.onDone(r):t.props.onDone(r[0]))}},a=0;a<n.length;a++)o()}},{key:"render",value:function(){return o.default.createElement("input",{type:"file",onChange:this.handleChange.bind(this),multiple:this.props.multiple})}}]),t}(o.default.Component);t.default=a,a.defaultProps={multiple:!1}},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(u===setTimeout)return setTimeout(e,0);if((u===n||!u)&&setTimeout)return u=setTimeout,setTimeout(e,0);try{return u(e,0)}catch(t){try{return u.call(null,e,0)}catch(t){return u.call(this,e,0)}}}function a(){m&&p&&(m=!1,p.length?f=p.concat(f):h=-1,f.length&&i())}function i(){if(!m){var e=o(a);m=!0;for(var t=f.length;t;){for(p=f,f=[];++h<t;)p&&p[h].run();h=-1,t=f.length}p=null,m=!1,function(e){if(c===clearTimeout)return clearTimeout(e);if((c===r||!c)&&clearTimeout)return c=clearTimeout,clearTimeout(e);try{c(e)}catch(t){try{return c.call(null,e)}catch(t){return c.call(this,e)}}}(e)}}function l(e,t){this.fun=e,this.array=t}function s(){}var u,c,d=e.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:n}catch(e){u=n}try{c="function"==typeof clearTimeout?clearTimeout:r}catch(e){c=r}}();var p,f=[],m=!1,h=-1;d.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new l(e,t)),1!==f.length||m||o(i)},l.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=s,d.addListener=s,d.once=s,d.off=s,d.removeListener=s,d.removeAllListeners=s,d.emit=s,d.prependListener=s,d.prependOnceListener=s,d.listeners=function(e){return[]},d.binding=function(e){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(e){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(e,t,n){(function(t){"use strict";var n=function(e){};"production"!==t.env.NODE_ENV&&(n=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")}),e.exports=function(e,t,r,o,a,i,l,s){if(n(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[r,o,a,i,l,s],d=0;(u=new Error(t.replace(/%s/g,(function(){return c[d++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var r=n(9);if("production"!==t.env.NODE_ENV){var o=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,a="Warning: "+e.replace(/%s/g,(function(){return n[o++]}));"undefined"!=typeof console&&console.error(a);try{throw new Error(a)}catch(e){}};r=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var n=arguments.length,r=Array(n>2?n-2:0),a=2;a<n;a++)r[a-2]=arguments[a];o.apply(void 0,[t].concat(r))}}}e.exports=r}).call(t,n(1))},function(e,t,n){(function(t){"use strict";function r(e){if("production"!==t.env.NODE_ENV&&f.call(e,"ref")){var n=Object.getOwnPropertyDescriptor(e,"ref").get;if(n&&n.isReactWarning)return!1}return void 0!==e.ref}function o(e){if("production"!==t.env.NODE_ENV&&f.call(e,"key")){var n=Object.getOwnPropertyDescriptor(e,"key").get;if(n&&n.isReactWarning)return!1}return void 0!==e.key}function a(e,n){var r=function(){l||(l=!0,"production"!==t.env.NODE_ENV&&d(!1,"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",n))};r.isReactWarning=!0,Object.defineProperty(e,"key",{get:r,configurable:!0})}function i(e,n){var r=function(){s||(s=!0,"production"!==t.env.NODE_ENV&&d(!1,"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",n))};r.isReactWarning=!0,Object.defineProperty(e,"ref",{get:r,configurable:!0})}var l,s,u=n(6),c=n(7),d=n(3),p=n(8),f=Object.prototype.hasOwnProperty,m=n(15),h={key:!0,ref:!0,__self:!0,__source:!0},g=function(e,n,r,o,a,i,l){var s={$$typeof:m,type:e,key:n,ref:r,props:l,_owner:i};return"production"!==t.env.NODE_ENV&&(s._store={},p?(Object.defineProperty(s._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(s,"_self",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(s,"_source",{configurable:!1,enumerable:!1,writable:!1,value:a})):(s._store.validated=!1,s._self=o,s._source=a),Object.freeze&&(Object.freeze(s.props),Object.freeze(s))),s};g.createElement=function(e,n,l){var s,u={},d=null,p=null,v=null,y=null;if(null!=n)for(s in r(n)&&(p=n.ref),o(n)&&(d=""+n.key),v=void 0===n.__self?null:n.__self,y=void 0===n.__source?null:n.__source,n)f.call(n,s)&&!h.hasOwnProperty(s)&&(u[s]=n[s]);var b=arguments.length-2;if(1===b)u.children=l;else if(b>1){for(var A=Array(b),x=0;x<b;x++)A[x]=arguments[x+2];"production"!==t.env.NODE_ENV&&Object.freeze&&Object.freeze(A),u.children=A}if(e&&e.defaultProps){var C=e.defaultProps;for(s in C)void 0===u[s]&&(u[s]=C[s])}if("production"!==t.env.NODE_ENV&&(d||p)&&(void 0===u.$$typeof||u.$$typeof!==m)){var w="function"==typeof e?e.displayName||e.name||"Unknown":e;d&&a(u,w),p&&i(u,w)}return g(e,d,p,v,y,c.current,u)},g.createFactory=function(e){var t=g.createElement.bind(null,e);return t.type=e,t},g.cloneAndReplaceKey=function(e,t){return g(e.type,t,e.ref,e._self,e._source,e._owner,e.props)},g.cloneElement=function(e,t,n){var a,i,l=u({},e.props),s=e.key,d=e.ref,p=e._self,m=e._source,v=e._owner;if(null!=t)for(a in r(t)&&(d=t.ref,v=c.current),o(t)&&(s=""+t.key),e.type&&e.type.defaultProps&&(i=e.type.defaultProps),t)f.call(t,a)&&!h.hasOwnProperty(a)&&(void 0===t[a]&&void 0!==i?l[a]=i[a]:l[a]=t[a]);var y=arguments.length-2;if(1===y)l.children=n;else if(y>1){for(var b=Array(y),A=0;A<y;A++)b[A]=arguments[A+2];l.children=b}return g(e.type,s,d,p,m,v,l)},g.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===m},e.exports=g}).call(t,n(1))},function(e,t){"use strict";e.exports=function(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o=new Error(n);throw o.name="Invariant Violation",o.framesToPop=1,o}},function(e,t){"use strict";function n(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;var r=Object.getOwnPropertyNames(t).map((function(e){return t[e]}));if("0123456789"!==r.join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var i,l,s=n(e),u=1;u<arguments.length;u++){for(var c in i=Object(arguments[u]))o.call(i,c)&&(s[c]=i[c]);if(r){l=r(i);for(var d=0;d<l.length;d++)a.call(i,l[d])&&(s[l[d]]=i[l[d]])}}return s}},function(e,t){"use strict";e.exports={current:null}},function(e,t,n){(function(t){"use strict";var n=!1;if("production"!==t.env.NODE_ENV)try{Object.defineProperty({},"x",{get:function(){}}),n=!0}catch(e){}e.exports=n}).call(t,n(1))},function(e,t){"use strict";function n(e){return function(){return e}}var r=function(){};r.thatReturns=n,r.thatReturnsFalse=n(!1),r.thatReturnsTrue=n(!0),r.thatReturnsNull=n(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){(function(t){"use strict";function r(e){var t=Function.prototype.toString,n=Object.prototype.hasOwnProperty,r=RegExp("^"+t.call(n).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");try{var o=t.call(e);return r.test(o)}catch(e){return!1}}function o(e){var t=u(e);if(t){var n=t.childIDs;c(e),n.forEach(o)}}function a(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")}function i(e){return null==e?"#empty":"string"==typeof e||"number"==typeof e?"#text":"string"==typeof e.type?e.type:e.type.displayName||e.type.name||"Unknown"}function l(e){var n,r=S.getDisplayName(e),o=S.getElement(e),i=S.getOwnerID(e);return i&&(n=S.getDisplayName(i)),"production"!==t.env.NODE_ENV&&y(o,"ReactComponentTreeHook: Missing React element for debugID %s when building stack",e),a(r,o&&o._source,n)}var s,u,c,d,p,f,m,h=n(5),g=n(7),v=n(2),y=n(3);if("function"==typeof Array.from&&"function"==typeof Map&&r(Map)&&null!=Map.prototype&&"function"==typeof Map.prototype.keys&&r(Map.prototype.keys)&&"function"==typeof Set&&r(Set)&&null!=Set.prototype&&"function"==typeof Set.prototype.keys&&r(Set.prototype.keys)){var b=new Map,A=new Set;s=function(e,t){b.set(e,t)},u=function(e){return b.get(e)},c=function(e){b.delete(e)},d=function(){return Array.from(b.keys())},p=function(e){A.add(e)},f=function(e){A.delete(e)},m=function(){return Array.from(A.keys())}}else{var x={},C={},w=function(e){return"."+e},E=function(e){return parseInt(e.substr(1),10)};s=function(e,t){var n=w(e);x[n]=t},u=function(e){var t=w(e);return x[t]},c=function(e){var t=w(e);delete x[t]},d=function(){return Object.keys(x).map(E)},p=function(e){var t=w(e);C[t]=!0},f=function(e){var t=w(e);delete C[t]},m=function(){return Object.keys(C).map(E)}}var k=[],S={onSetChildren:function(e,n){var r=u(e);r||("production"!==t.env.NODE_ENV?v(!1,"Item must have been set"):h("144")),r.childIDs=n;for(var o=0;o<n.length;o++){var a=n[o],i=u(a);i||("production"!==t.env.NODE_ENV?v(!1,"Expected hook events to fire for the child before its parent includes it in onSetChildren()."):h("140")),null==i.childIDs&&"object"==typeof i.element&&null!=i.element&&("production"!==t.env.NODE_ENV?v(!1,"Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren()."):h("141")),i.isMounted||("production"!==t.env.NODE_ENV?v(!1,"Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren()."):h("71")),null==i.parentID&&(i.parentID=e),i.parentID!==e&&("production"!==t.env.NODE_ENV?v(!1,"Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).",a,i.parentID,e):h("142",a,i.parentID,e))}},onBeforeMountComponent:function(e,t,n){s(e,{element:t,parentID:n,text:null,childIDs:[],isMounted:!1,updateCount:0})},onBeforeUpdateComponent:function(e,t){var n=u(e);n&&n.isMounted&&(n.element=t)},onMountComponent:function(e){var n=u(e);n||("production"!==t.env.NODE_ENV?v(!1,"Item must have been set"):h("144")),n.isMounted=!0,0===n.parentID&&p(e)},onUpdateComponent:function(e){var t=u(e);t&&t.isMounted&&t.updateCount++},onUnmountComponent:function(e){var t=u(e);t&&(t.isMounted=!1,0===t.parentID&&f(e)),k.push(e)},purgeUnmountedComponents:function(){if(!S._preventPurging){for(var e=0;e<k.length;e++)o(k[e]);k.length=0}},isMounted:function(e){var t=u(e);return!!t&&t.isMounted},getCurrentStackAddendum:function(e){var t="";if(e){var n=i(e),r=e._owner;t+=a(n,e._source,r&&r.getName())}var o=g.current,l=o&&o._debugID;return t+S.getStackAddendumByID(l)},getStackAddendumByID:function(e){for(var t="";e;)t+=l(e),e=S.getParentID(e);return t},getChildIDs:function(e){var t=u(e);return t?t.childIDs:[]},getDisplayName:function(e){var t=S.getElement(e);return t?i(t):null},getElement:function(e){var t=u(e);return t?t.element:null},getOwnerID:function(e){var t=S.getElement(e);return t&&t._owner?t._owner._debugID:null},getParentID:function(e){var t=u(e);return t?t.parentID:null},getSource:function(e){var t=u(e),n=t?t.element:null;return null!=n?n._source:null},getText:function(e){var t=S.getElement(e);return"string"==typeof t?t:"number"==typeof t?""+t:null},getUpdateCount:function(e){var t=u(e);return t?t.updateCount:0},getRootIDs:m,getRegisteredIDs:d,pushNonStandardWarningStack:function(e,t){if("function"==typeof console.reactStack){var n=[],r=g.current,o=r&&r._debugID;try{for(e&&n.push({name:o?S.getDisplayName(o):null,fileName:t?t.fileName:null,lineNumber:t?t.lineNumber:null});o;){var a=S.getElement(o),i=S.getParentID(o),l=S.getOwnerID(o),s=l?S.getDisplayName(l):null,u=a&&a._source;n.push({name:s,fileName:u?u.fileName:null,lineNumber:u?u.lineNumber:null}),o=i}}catch(e){}console.reactStack(n)}},popNonStandardWarningStack:function(){"function"==typeof console.reactStackEnd&&console.reactStackEnd()}};e.exports=S}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var n=function(){};if("production"!==t.env.NODE_ENV){var r=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,a="Warning: "+e.replace(/%s/g,(function(){return n[o++]}));"undefined"!=typeof console&&console.warn(a);try{throw new Error(a)}catch(e){}};n=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!e){for(var n=arguments.length,o=Array(n>2?n-2:0),a=2;a<n;a++)o[a-2]=arguments[a];r.apply(void 0,[t].concat(o))}}}e.exports=n}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&Object.freeze(n),e.exports=n}).call(t,n(1))},function(e,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){(function(t){"use strict";function r(e,t,n){this.props=e,this.context=t,this.refs=c,this.updater=n||s}function o(e,t,n){this.props=e,this.context=t,this.refs=c,this.updater=n||s}function a(){}var i=n(5),l=n(6),s=n(17),u=n(8),c=n(12),d=n(2),p=n(11);if(r.prototype.isReactComponent={},r.prototype.setState=function(e,n){"object"!=typeof e&&"function"!=typeof e&&null!=e&&("production"!==t.env.NODE_ENV?d(!1,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):i("85")),this.updater.enqueueSetState(this,e),n&&this.updater.enqueueCallback(this,n,"setState")},r.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")},"production"!==t.env.NODE_ENV){var f={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},m=function(e,t){u&&Object.defineProperty(r.prototype,e,{get:function(){p(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var h in f)f.hasOwnProperty(h)&&m(h,f[h])}a.prototype=r.prototype,o.prototype=new a,o.prototype.constructor=o,l(o.prototype,r.prototype),o.prototype.isPureReactComponent=!0,e.exports={Component:r,PureComponent:o}}).call(t,n(1))},function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=n},function(e,t,n){(function(t){"use strict";function r(){if(u.current){var e=u.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e){if(null!=e&&void 0!==e.__source){var t=e.__source;return" Check your code at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+"."}return""}function a(e){var t=r();if(!t){var n="string"==typeof e?e:e.displayName||e.name;n&&(t=" Check the top-level render call using <"+n+">.")}return t}function i(e,n){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var r=v.uniqueKey||(v.uniqueKey={}),o=a(n);if(!r[o]){r[o]=!0;var i="";e&&e._owner&&e._owner!==u.current&&(i=" It was passed a child from "+e._owner.getName()+"."),"production"!==t.env.NODE_ENV&&h(!1,'Each child in an array or iterator should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.%s',o,i,c.getCurrentStackAddendum(e))}}}function l(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];d.isValidElement(r)&&i(r,t)}else if(d.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var o=m(e);if(o&&o!==e.entries)for(var a,l=o.call(e);!(a=l.next()).done;)d.isValidElement(a.value)&&i(a.value,t)}}function s(e){var n=e.type;if("function"==typeof n){var r=n.displayName||n.name;n.propTypes&&p(n.propTypes,e.props,"prop",r,e,null),"function"==typeof n.getDefaultProps&&"production"!==t.env.NODE_ENV&&h(n.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}var u=n(7),c=n(10),d=n(4),p=n(32),f=n(8),m=n(18),h=n(3),g=n(11),v={},y={createElement:function(e,n,a){var i="string"==typeof e||"function"==typeof e;if(!i&&"function"!=typeof e&&"string"!=typeof e){var u="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(u+=" You likely forgot to export your component from the file it's defined in.");var p=o(n);u+=p||r(),u+=c.getCurrentStackAddendum();var f=null!=n&&void 0!==n.__source?n.__source:null;c.pushNonStandardWarningStack(!0,f),"production"!==t.env.NODE_ENV&&h(!1,"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",null==e?e:typeof e,u),c.popNonStandardWarningStack()}var m=d.createElement.apply(this,arguments);if(null==m)return m;if(i)for(var g=2;g<arguments.length;g++)l(arguments[g],e);return s(m),m},createFactory:function(e){var n=y.createElement.bind(null,e);return n.type=e,"production"!==t.env.NODE_ENV&&f&&Object.defineProperty(n,"type",{enumerable:!1,get:function(){return g(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),n},cloneElement:function(e,t,n){for(var r=d.cloneElement.apply(this,arguments),o=2;o<arguments.length;o++)l(arguments[o],r.type);return s(r),r}};e.exports=y}).call(t,n(1))},function(e,t,n){(function(t){"use strict";function r(e,n){if("production"!==t.env.NODE_ENV){var r=e.constructor;"production"!==t.env.NODE_ENV&&o(!1,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.",n,n,r&&(r.displayName||r.name)||"ReactClass")}}var o=n(3),a={isMounted:function(e){return!1},enqueueCallback:function(e,t){},enqueueForceUpdate:function(e){r(e,"forceUpdate")},enqueueReplaceState:function(e,t){r(e,"replaceState")},enqueueSetState:function(e,t){r(e,"setState")}};e.exports=a}).call(t,n(1))},function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.iterator,r="@@iterator";e.exports=function(e){var t=e&&(n&&e[n]||e[r]);if("function"==typeof t)return t}},function(e,t,n){(function(t){"use strict";var r=n(6),o=n(12),a=n(2);if("production"!==t.env.NODE_ENV)var i=n(3);var l,s="mixins";l="production"!==t.env.NODE_ENV?{prop:"prop",context:"context",childContext:"child context"}:{},e.exports=function(e,n,u){function c(e,n,r){for(var o in n)n.hasOwnProperty(o)&&"production"!==t.env.NODE_ENV&&i("function"==typeof n[o],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e.displayName||"ReactClass",l[r],o)}function d(e,t){var n=y.hasOwnProperty(t)?y[t]:null;C.hasOwnProperty(t)&&a("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t),e&&a("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t)}function p(e,r){if(r){a("function"!=typeof r,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),a(!n(r),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var o=e.prototype,l=o.__reactAutoBindPairs;for(var u in r.hasOwnProperty(s)&&b.mixins(e,r.mixins),r)if(r.hasOwnProperty(u)&&u!==s){var c=r[u],p=o.hasOwnProperty(u);if(d(p,u),b.hasOwnProperty(u))b[u](e,c);else{var f=y.hasOwnProperty(u);if("function"!=typeof c||f||p||!1===r.autobind)if(p){var g=y[u];a(f&&("DEFINE_MANY_MERGED"===g||"DEFINE_MANY"===g),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",g,u),"DEFINE_MANY_MERGED"===g?o[u]=m(o[u],c):"DEFINE_MANY"===g&&(o[u]=h(o[u],c))}else o[u]=c,"production"!==t.env.NODE_ENV&&"function"==typeof c&&r.displayName&&(o[u].displayName=r.displayName+"_"+u);else l.push(u,c),o[u]=c}}}else if("production"!==t.env.NODE_ENV){var v=typeof r,A="object"===v&&null!==r;"production"!==t.env.NODE_ENV&&i(A,"%s: You're attempting to include a mixin that is either null or not an object. Check the mixins included by the component, as well as any mixins they include themselves. Expected object but got %s.",e.displayName||"ReactClass",null===r?null:v)}}function f(e,t){for(var n in a(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),t)t.hasOwnProperty(n)&&(a(void 0===e[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),e[n]=t[n]);return e}function m(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return f(o,n),f(o,r),o}}function h(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function g(e,n){var r=n.bind(e);if("production"!==t.env.NODE_ENV){r.__reactBoundContext=e,r.__reactBoundMethod=n,r.__reactBoundArguments=null;var o=e.constructor.displayName,a=r.bind;r.bind=function(l){for(var s=arguments.length,u=Array(s>1?s-1:0),c=1;c<s;c++)u[c-1]=arguments[c];if(l!==e&&null!==l)"production"!==t.env.NODE_ENV&&i(!1,"bind(): React component methods may only be bound to the component instance. See %s",o);else if(!u.length)return"production"!==t.env.NODE_ENV&&i(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",o),r;var d=a.apply(r,arguments);return d.__reactBoundContext=e,d.__reactBoundMethod=n,d.__reactBoundArguments=u,d}}return r}var v=[],y={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},b={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)p(e,t[n])},childContextTypes:function(e,n){"production"!==t.env.NODE_ENV&&c(e,n,"childContext"),e.childContextTypes=r({},e.childContextTypes,n)},contextTypes:function(e,n){"production"!==t.env.NODE_ENV&&c(e,n,"context"),e.contextTypes=r({},e.contextTypes,n)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=m(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,n){"production"!==t.env.NODE_ENV&&c(e,n,"prop"),e.propTypes=r({},e.propTypes,n)},statics:function(e,t){!function(e,t){if(t)for(var n in t){var r=t[n];t.hasOwnProperty(n)&&(a(!(n in b),'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n),a(!(n in e),"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),e[n]=r)}}(e,t)},autobind:function(){}},A={componentDidMount:function(){this.__isMounted=!0}},x={componentWillUnmount:function(){this.__isMounted=!1}},C={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e,t)},isMounted:function(){return"production"!==t.env.NODE_ENV&&(i(this.__didWarnIsMounted,"%s: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",this.constructor&&this.constructor.displayName||this.name||"Component"),this.__didWarnIsMounted=!0),!!this.__isMounted}},w=function(){};return r(w.prototype,e.prototype,C),function(e){var n=function(e,r,l){"production"!==t.env.NODE_ENV&&i(this instanceof n,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"),this.__reactAutoBindPairs.length&&function(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var r=t[n],o=t[n+1];e[r]=g(e,o)}}(this),this.props=e,this.context=r,this.refs=o,this.updater=l||u,this.state=null;var s=this.getInitialState?this.getInitialState():null;"production"!==t.env.NODE_ENV&&void 0===s&&this.getInitialState._isMockFunction&&(s=null),a("object"==typeof s&&!Array.isArray(s),"%s.getInitialState(): must return an object or null",n.displayName||"ReactCompositeComponent"),this.state=s};for(var r in n.prototype=new w,n.prototype.constructor=n,n.prototype.__reactAutoBindPairs=[],v.forEach(p.bind(null,n)),p(n,A),p(n,e),p(n,x),n.getDefaultProps&&(n.defaultProps=n.getDefaultProps()),"production"!==t.env.NODE_ENV&&(n.getDefaultProps&&(n.getDefaultProps.isReactClassApproved={}),n.prototype.getInitialState&&(n.prototype.getInitialState.isReactClassApproved={})),a(n.prototype.render,"createClass(...): Class specification must implement a `render` method."),"production"!==t.env.NODE_ENV&&(i(!n.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",e.displayName||"A component"),i(!n.prototype.componentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",e.displayName||"A component")),y)n.prototype[r]||(n.prototype[r]=null);return n}}}).call(t,n(1))},function(e,t,n){(function(t){"use strict";if("production"!==t.env.NODE_ENV)var r=n(2),o=n(3),a=n(13),i={};e.exports=function(e,n,l,s,u){if("production"!==t.env.NODE_ENV)for(var c in e)if(e.hasOwnProperty(c)){var d;try{r("function"==typeof e[c],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",s||"React class",l,c),d=e[c](n,c,s,l,null,a)}catch(e){d=e}if(o(!d||d instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",s||"React class",l,c,typeof d),d instanceof Error&&!(d.message in i)){i[d.message]=!0;var p=u?u():"";o(!1,"Failed %s type: %s%s",l,d.message,null!=p?p:"")}}}}).call(t,n(1))},function(e,t,n){"use strict";var r=n(22);e.exports=function(e){return r(e,!1)}},function(e,t,n){(function(t){"use strict";var r=n(9),o=n(2),a=n(3),i=n(13),l=n(20);e.exports=function(e,n){function s(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function u(e){this.message=e,this.stack=""}function c(e){function r(r,c,d,p,f,m,h){if(p=p||y,m=m||d,h!==i)if(n)o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else if("production"!==t.env.NODE_ENV&&"undefined"!=typeof console){var g=p+":"+d;!l[g]&&s<3&&(a(!1,"You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",m,p),l[g]=!0,s++)}return null==c[d]?r?new u(null===c[d]?"The "+f+" `"+m+"` is marked as required in `"+p+"`, but its value is `null`.":"The "+f+" `"+m+"` is marked as required in `"+p+"`, but its value is `undefined`."):null:e(c,d,p,f,m)}if("production"!==t.env.NODE_ENV)var l={},s=0;var c=r.bind(null,!1);return c.isRequired=r.bind(null,!0),c}function d(e){return c((function(t,n,r,o,a,i){var l=t[n];return f(l)!==e?new u("Invalid "+o+" `"+a+"` of type `"+m(l)+"` supplied to `"+r+"`, expected `"+e+"`."):null}))}function p(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(p);if(null===t||e(t))return!0;var n=function(e){var t=e&&(g&&e[g]||e[v]);if("function"==typeof t)return t}(t);if(!n)return!1;var r,o=n.call(t);if(n!==t.entries){for(;!(r=o.next()).done;)if(!p(r.value))return!1}else for(;!(r=o.next()).done;){var a=r.value;if(a&&!p(a[1]))return!1}return!0;default:return!1}}function f(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||"Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol}(t,e)?"symbol":t}function m(e){if(null==e)return""+e;var t=f(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function h(e){var t=m(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}var g="function"==typeof Symbol&&Symbol.iterator,v="@@iterator",y="<<anonymous>>",b={array:d("array"),bool:d("boolean"),func:d("function"),number:d("number"),object:d("object"),string:d("string"),symbol:d("symbol"),any:c(r.thatReturnsNull),arrayOf:function(e){return c((function(t,n,r,o,a){if("function"!=typeof e)return new u("Property `"+a+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var l=t[n];if(!Array.isArray(l))return new u("Invalid "+o+" `"+a+"` of type `"+f(l)+"` supplied to `"+r+"`, expected an array.");for(var s=0;s<l.length;s++){var c=e(l,s,r,o,a+"["+s+"]",i);if(c instanceof Error)return c}return null}))},element:c((function(t,n,r,o,a){var i=t[n];return e(i)?null:new u("Invalid "+o+" `"+a+"` of type `"+f(i)+"` supplied to `"+r+"`, expected a single ReactElement.")})),instanceOf:function(e){return c((function(t,n,r,o,a){if(!(t[n]instanceof e)){var i=e.name||y;return new u("Invalid "+o+" `"+a+"` of type `"+function(e){return e.constructor&&e.constructor.name?e.constructor.name:y}(t[n])+"` supplied to `"+r+"`, expected instance of `"+i+"`.")}return null}))},node:c((function(e,t,n,r,o){return p(e[t])?null:new u("Invalid "+r+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.")})),objectOf:function(e){return c((function(t,n,r,o,a){if("function"!=typeof e)return new u("Property `"+a+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var l=t[n],s=f(l);if("object"!==s)return new u("Invalid "+o+" `"+a+"` of type `"+s+"` supplied to `"+r+"`, expected an object.");for(var c in l)if(l.hasOwnProperty(c)){var d=e(l,c,r,o,a+"."+c,i);if(d instanceof Error)return d}return null}))},oneOf:function(e){return Array.isArray(e)?c((function(t,n,r,o,a){for(var i=t[n],l=0;l<e.length;l++)if(s(i,e[l]))return null;return new u("Invalid "+o+" `"+a+"` of value `"+i+"` supplied to `"+r+"`, expected one of "+JSON.stringify(e)+".")})):("production"!==t.env.NODE_ENV&&a(!1,"Invalid argument supplied to oneOf, expected an instance of array."),r.thatReturnsNull)},oneOfType:function(e){if(!Array.isArray(e))return"production"!==t.env.NODE_ENV&&a(!1,"Invalid argument supplied to oneOfType, expected an instance of array."),r.thatReturnsNull;for(var n=0;n<e.length;n++){var o=e[n];if("function"!=typeof o)return a(!1,"Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",h(o),n),r.thatReturnsNull}return c((function(t,n,r,o,a){for(var l=0;l<e.length;l++)if(null==(0,e[l])(t,n,r,o,a,i))return null;return new u("Invalid "+o+" `"+a+"` supplied to `"+r+"`.")}))},shape:function(e){return c((function(t,n,r,o,a){var l=t[n],s=f(l);if("object"!==s)return new u("Invalid "+o+" `"+a+"` of type `"+s+"` supplied to `"+r+"`, expected `object`.");for(var c in e){var d=e[c];if(d){var p=d(l,c,r,o,a+"."+c,i);if(p)return p}}return null}))}};return u.prototype=Error.prototype,b.checkPropTypes=l,b.PropTypes=b,b}}).call(t,n(1))},function(e,t){"use strict";var n={escape:function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))},unescape:function(e){var t={"=0":"=","=2":":"};return(""+("."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1))).replace(/(=0|=2)/g,(function(e){return t[e]}))}};e.exports=n},function(e,t,n){(function(t){"use strict";var r=n(5),o=n(2),a=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},i=function(e){var n=this;e instanceof n||("production"!==t.env.NODE_ENV?o(!1,"Trying to release an instance into a pool of a different type."):r("25")),e.destructor(),n.instancePool.length<n.poolSize&&n.instancePool.push(e)},l=a,s={addPoolingTo:function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||l,n.poolSize||(n.poolSize=10),n.release=i,n},oneArgumentPooler:a,twoArgumentPooler:function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},threeArgumentPooler:function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},fourArgumentPooler:function(e,t,n,r){var o=this;if(o.instancePool.length){var a=o.instancePool.pop();return o.call(a,e,t,n,r),a}return new o(e,t,n,r)}};e.exports=s}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var r=n(6),o=n(14),a=n(26),i=n(27),l=n(4),s=n(29),u=n(31),c=n(33),d=n(34),p=l.createElement,f=l.createFactory,m=l.cloneElement;if("production"!==t.env.NODE_ENV){var h=n(11),g=n(8),v=n(16),y=!1;p=v.createElement,f=v.createFactory,m=v.cloneElement}var b=r,A=function(e){return e};if("production"!==t.env.NODE_ENV){var x=!1,C=!1;b=function(){return h(x,"React.__spread is deprecated and should not be used. Use Object.assign directly or another helper function with similar semantics. You may be seeing this warning due to your compiler. See https://fb.me/react-spread-deprecation for more details."),x=!0,r.apply(null,arguments)},A=function(e){return h(C,"React.createMixin is deprecated and should not be used. In React v16.0, it will be removed. You can use this mixin directly instead. See https://fb.me/createmixin-was-never-implemented for more info."),C=!0,e}}var w={Children:{map:a.map,forEach:a.forEach,count:a.count,toArray:a.toArray,only:d},Component:o.Component,PureComponent:o.PureComponent,createElement:p,cloneElement:m,isValidElement:l.isValidElement,PropTypes:s,createClass:c,createFactory:f,createMixin:A,DOM:i,version:u,__spread:b};if("production"!==t.env.NODE_ENV){var E=!1;g&&(Object.defineProperty(w,"PropTypes",{get:function(){return h(y,"Accessing PropTypes via the main React package is deprecated, and will be removed in  React v16.0. Use the latest available v15.* prop-types package from npm instead. For info on usage, compatibility, migration and more, see https://fb.me/prop-types-docs"),y=!0,s}}),Object.defineProperty(w,"createClass",{get:function(){return h(E,"Accessing createClass via the main React package is deprecated, and will be removed in React v16.0. Use a plain JavaScript class instead. If you're not yet ready to migrate, create-react-class v15.* is available on npm as a temporary, drop-in replacement. For more info see https://fb.me/react-create-class"),E=!0,c}})),w.DOM={};var k=!1;Object.keys(i).forEach((function(e){w.DOM[e]=function(){return k||(h(!1,"Accessing factories like React.DOM.%s has been deprecated and will be removed in v16.0+. Use the react-dom-factories package instead.  Version 1.0 provides a drop-in replacement. For more info, see https://fb.me/react-dom-factories",e),k=!0),i[e].apply(i,arguments)}}))}e.exports=w}).call(t,n(1))},function(e,t,n){"use strict";function r(e){return(""+e).replace(g,"$&/")}function o(e,t){this.func=e,this.context=t,this.count=0}function a(e,t,n){var r=e.func,o=e.context;r.call(o,t,e.count++)}function i(e,t,n,r){this.result=e,this.keyPrefix=t,this.func=n,this.context=r,this.count=0}function l(e,t,n){var o=e.result,a=e.keyPrefix,i=e.func,l=e.context,u=i.call(l,t,e.count++);Array.isArray(u)?s(u,o,n,p.thatReturnsArgument):null!=u&&(d.isValidElement(u)&&(u=d.cloneAndReplaceKey(u,a+(!u.key||t&&t.key===u.key?"":r(u.key)+"/")+n)),o.push(u))}function s(e,t,n,o,a){var s="";null!=n&&(s=r(n)+"/");var u=i.getPooled(t,s,o,a);f(e,l,u),i.release(u)}function u(e,t,n){return null}var c=n(24),d=n(4),p=n(9),f=n(35),m=c.twoArgumentPooler,h=c.fourArgumentPooler,g=/\/+/g;o.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},c.addPoolingTo(o,m),i.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},c.addPoolingTo(i,h);var v={forEach:function(e,t,n){if(null==e)return e;var r=o.getPooled(t,n);f(e,a,r),o.release(r)},map:function(e,t,n){if(null==e)return e;var r=[];return s(e,r,null,t,n),r},mapIntoWithKeyPrefixInternal:s,count:function(e,t){return f(e,u,null)},toArray:function(e){var t=[];return s(e,t,null,p.thatReturnsArgument),t}};e.exports=v},function(e,t,n){(function(t){"use strict";var r=n(4).createFactory;"production"!==t.env.NODE_ENV&&(r=n(16).createFactory);var o={a:r("a"),abbr:r("abbr"),address:r("address"),area:r("area"),article:r("article"),aside:r("aside"),audio:r("audio"),b:r("b"),base:r("base"),bdi:r("bdi"),bdo:r("bdo"),big:r("big"),blockquote:r("blockquote"),body:r("body"),br:r("br"),button:r("button"),canvas:r("canvas"),caption:r("caption"),cite:r("cite"),code:r("code"),col:r("col"),colgroup:r("colgroup"),data:r("data"),datalist:r("datalist"),dd:r("dd"),del:r("del"),details:r("details"),dfn:r("dfn"),dialog:r("dialog"),div:r("div"),dl:r("dl"),dt:r("dt"),em:r("em"),embed:r("embed"),fieldset:r("fieldset"),figcaption:r("figcaption"),figure:r("figure"),footer:r("footer"),form:r("form"),h1:r("h1"),h2:r("h2"),h3:r("h3"),h4:r("h4"),h5:r("h5"),h6:r("h6"),head:r("head"),header:r("header"),hgroup:r("hgroup"),hr:r("hr"),html:r("html"),i:r("i"),iframe:r("iframe"),img:r("img"),input:r("input"),ins:r("ins"),kbd:r("kbd"),keygen:r("keygen"),label:r("label"),legend:r("legend"),li:r("li"),link:r("link"),main:r("main"),map:r("map"),mark:r("mark"),menu:r("menu"),menuitem:r("menuitem"),meta:r("meta"),meter:r("meter"),nav:r("nav"),noscript:r("noscript"),object:r("object"),ol:r("ol"),optgroup:r("optgroup"),option:r("option"),output:r("output"),p:r("p"),param:r("param"),picture:r("picture"),pre:r("pre"),progress:r("progress"),q:r("q"),rp:r("rp"),rt:r("rt"),ruby:r("ruby"),s:r("s"),samp:r("samp"),script:r("script"),section:r("section"),select:r("select"),small:r("small"),source:r("source"),span:r("span"),strong:r("strong"),style:r("style"),sub:r("sub"),summary:r("summary"),sup:r("sup"),table:r("table"),tbody:r("tbody"),td:r("td"),textarea:r("textarea"),tfoot:r("tfoot"),th:r("th"),thead:r("thead"),time:r("time"),title:r("title"),tr:r("tr"),track:r("track"),u:r("u"),ul:r("ul"),var:r("var"),video:r("video"),wbr:r("wbr"),circle:r("circle"),clipPath:r("clipPath"),defs:r("defs"),ellipse:r("ellipse"),g:r("g"),image:r("image"),line:r("line"),linearGradient:r("linearGradient"),mask:r("mask"),path:r("path"),pattern:r("pattern"),polygon:r("polygon"),polyline:r("polyline"),radialGradient:r("radialGradient"),rect:r("rect"),stop:r("stop"),svg:r("svg"),text:r("text"),tspan:r("tspan")};e.exports=o}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),e.exports=n}).call(t,n(1))},function(e,t,n){"use strict";var r=n(4).isValidElement,o=n(21);e.exports=o(r)},function(e,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){"use strict";e.exports="15.6.1"},function(e,t,n){(function(t){"use strict";var r,o=n(5),a=n(28),i=n(30),l=n(2),s=n(3);void 0!==t&&t.env&&"test"===t.env.NODE_ENV&&(r=n(10));var u={};e.exports=function(e,c,d,p,f,m){for(var h in e)if(e.hasOwnProperty(h)){var g;try{"function"!=typeof e[h]&&("production"!==t.env.NODE_ENV?l(!1,"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",p||"React class",a[d],h):o("84",p||"React class",a[d],h)),g=e[h](c,h,p,d,null,i)}catch(e){g=e}if("production"!==t.env.NODE_ENV&&s(!g||g instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",p||"React class",a[d],h,typeof g),g instanceof Error&&!(g.message in u)){u[g.message]=!0;var v="";"production"!==t.env.NODE_ENV&&(r||(r=n(10)),null!==m?v=r.getStackAddendumByID(m):null!==f&&(v=r.getCurrentStackAddendum(f))),"production"!==t.env.NODE_ENV&&s(!1,"Failed %s type: %s%s",d,g.message,v)}}}}).call(t,n(1))},function(e,t,n){"use strict";var r=n(14).Component,o=n(4).isValidElement,a=n(17),i=n(19);e.exports=i(r,o,a)},function(e,t,n){(function(t){"use strict";var r=n(5),o=n(4),a=n(2);e.exports=function(e){return o.isValidElement(e)||("production"!==t.env.NODE_ENV?a(!1,"React.Children.only expected to receive a single React element child."):r("143")),e}}).call(t,n(1))},function(e,t,n){(function(t){"use strict";function r(e,t){return e&&"object"==typeof e&&null!=e.key?c.escape(e.key):t.toString(36)}function o(e,n,h,g){var v=typeof e;if("undefined"!==v&&"boolean"!==v||(e=null),null===e||"string"===v||"number"===v||"object"===v&&e.$$typeof===l)return h(g,e,""===n?p+r(e,0):n),1;var y,b=0,A=""===n?p:n+f;if(Array.isArray(e))for(var x=0;x<e.length;x++)b+=o(y=e[x],A+r(y,x),h,g);else{var C=s(e);if(C){var w,E=C.call(e);if(C!==e.entries)for(var k=0;!(w=E.next()).done;)b+=o(y=w.value,A+r(y,k++),h,g);else{if("production"!==t.env.NODE_ENV){var S="";if(i.current){var B=i.current.getName();B&&(S=" Check the render method of `"+B+"`.")}"production"!==t.env.NODE_ENV&&d(m,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead.%s",S),m=!0}for(;!(w=E.next()).done;){var O=w.value;O&&(b+=o(y=O[1],A+c.escape(O[0])+f+r(y,0),h,g))}}}else if("object"===v){var P="";if("production"!==t.env.NODE_ENV&&(P=" If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.",e._isReactElement&&(P=" It looks like you're using an element created by a different version of React. Make sure to use only one copy of React."),i.current)){var N=i.current.getName();N&&(P+=" Check the render method of `"+N+"`.")}var T=String(e);"production"!==t.env.NODE_ENV?u(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===T?"object with keys {"+Object.keys(e).join(", ")+"}":T,P):a("31","[object Object]"===T?"object with keys {"+Object.keys(e).join(", ")+"}":T,P)}}return b}var a=n(5),i=n(7),l=n(15),s=n(18),u=n(2),c=n(23),d=n(3),p=".",f=":",m=!1;e.exports=function(e,t,n){return null==e?0:o(e,"",t,n)}}).call(t,n(1))},function(e,t,n){"use strict";e.exports=n(25)}])},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,A=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case l:case i:case f:return e;default:switch(e=e&&e.$$typeof){case u:case p:case g:case h:case s:return e;default:return t}}case o:return t}}}function C(e){return x(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=h,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=f,t.isAsyncMode=function(e){return C(e)||x(e)===c},t.isConcurrentMode=C,t.isContextConsumer=function(e){return x(e)===u},t.isContextProvider=function(e){return x(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===g},t.isMemo=function(e){return x(e)===h},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===i||e===f||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===s||e.$$typeof===u||e.$$typeof===p||e.$$typeof===y||e.$$typeof===b||e.$$typeof===A||e.$$typeof===v)},t.typeOf=x},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},8359:(e,t)=>{"use strict";if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},2973:(e,t,n)=>{"use strict";n(8359)},9658:(e,t,n)=>{var r=n(5826);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],a=0;a<t.length;a++)o.push(e(t[a],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",d(r)),n)}(t,n,o):function(e,t,n){return p(a(e,n),t,n)}(t,n,o)},e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var d=n[0],p=n[1],f=n.index;if(l+=e.slice(i,f),i=f+d.length,p)l+=p[1];else{var m=e[i],h=n[2],g=n[3],v=n[4],y=n[5],b=n[6],A=n[7];l&&(r.push(l),l="");var x=null!=h&&null!=m&&m!==h,C="+"===b||"*"===b,w="?"===b||"*"===b,E=n[2]||c,k=v||y;r.push({name:g||a++,prefix:h||"",delimiter:E,optional:w,repeat:C,partial:x,asterisk:!!A,pattern:k?u(k):A?".*":"[^"+s(E)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",d(t)));return function(t,o){for(var a="",l=t||{},s=(o||{}).pretty?i:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var d,p=l[c.name];if(null==p){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var f=0;f<p.length;f++){if(d=s(p[f]),!n[u].test(d))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(d)+"`");a+=(0===f?c.prefix:c.delimiter)+d}}else{if(d=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):s(p),!n[u].test(d))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+d+'"');a+=c.prefix+d}}else a+=c}return a}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function d(e){return e&&e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var u=e[l];if("string"==typeof u)i+=s(u);else{var p=s(u.prefix),f="(?:"+u.pattern+")";t.push(u),u.repeat&&(f+="(?:"+p+f+")*"),i+=f=u.optional?u.partial?p+"("+f+")?":"(?:"+p+"("+f+"))?":p+"("+f+")"}}var m=s(n.delimiter||"/"),h=i.slice(-m.length)===m;return o||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=a?"$":o&&h?"":"(?="+m+"|$)",c(new RegExp("^"+i,d(n)),t)}},5251:(e,t,n)=>{"use strict";n(7418);var r=n(7294),o=60103;if("function"==typeof Symbol&&Symbol.for){var a=Symbol.for;o=a("react.element"),a("react.fragment")}var i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l=Object.prototype.hasOwnProperty,s={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,a={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)l.call(t,r)&&!s.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:c,props:a,_owner:i.current}}t.jsx=u,t.jsxs=u},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,s=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),a=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),i=d("react.provider"),l=d("react.context"),s=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function g(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var b=y.prototype=new v;b.constructor=y,r(b,g.prototype),b.isPureReactComponent=!0;var A={current:null},x=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function w(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,r)&&!C.hasOwnProperty(r)&&(a[r]=t[r]);var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===a[r]&&(a[r]=s[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:A.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var k=/\/+/g;function S(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function B(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case a:s=!0}}if(s)return i=i(s=e),e=""===r?"."+S(s,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(k,"$&/")+"/"),B(i,t,n,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(k,"$&/")+"/")+e)),t.push(i)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+S(l=e[u],u);s+=B(l,t,n,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=B(l=l.value,t,n,c=r+S(l,u++),i);else if("object"===l)throw t=""+e,Error(f(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function O(e,t,n){if(null==e)return e;var r=[],o=0;return B(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function T(){var e=N.current;if(null===e)throw Error(f(321));return e}var R={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:A,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(f(143));return e}},t.Component=g,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(f(267,e));var a=r({},e.props),i=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=A.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)x.call(t,c)&&!C.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];a.children=u}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=w,t.createFactory=function(e){var t=w.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},5666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,a=Object.create(o.prototype),i=new O(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===f)throw new Error("Generator is already running");if(r===m){if("throw"===o)throw a;return N()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=k(i,n);if(l){if(l===h)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var s=c(e,t,n);if("normal"===s.type){if(r=n.done?m:p,s.arg===h)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=m,n.method="throw",n.arg=s.arg)}}}(e,n,i),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",p="suspendedYield",f="executing",m="completed",h={};function g(){}function v(){}function y(){}var b={};s(b,a,(function(){return this}));var A=Object.getPrototypeOf,x=A&&A(A(P([])));x&&x!==n&&r.call(x,a)&&(b=x);var C=y.prototype=g.prototype=Object.create(b);function w(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var s=c(e[o],e,a);if("throw"!==s.type){var u=s.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,l)}))}l(s.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function k(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,k(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function B(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function P(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:N}}function N(){return{value:t,done:!0}}return v.prototype=y,s(C,"constructor",y),s(y,"constructor",v),v.displayName=s(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,s(e,l,"GeneratorFunction")),e.prototype=Object.create(C),e},e.awrap=function(e){return{__await:e}},w(E.prototype),s(E.prototype,i,(function(){return this})),e.AsyncIterator=E,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new E(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},w(C),s(C,l,"Generator"),s(C,a,(function(){return this})),s(C,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=P,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(B),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return l.type="throw",l.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),B(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;B(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,g=null,v=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var A=new MessageChannel,x=A.port2;A.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+y;try{g(!0,e)?x.postMessage(null):(h=!1,g=null)}catch(e){throw x.postMessage(null),e}}else h=!1},n=function(e){g=e,h||(h=!0,x.postMessage(null))},r=function(e,n){v=p((function(){e(t.unstable_now())}),n)},o=function(){f(v),v=-1}}function C(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<k(o,t)))break e;e[r]=t,e[n]=o,n=r}}function w(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,s=e[l];if(void 0!==i&&0>k(i,n))void 0!==s&&0>k(s,i)?(e[r]=s,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==s&&0>k(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var S=[],B=[],O=1,P=null,N=3,T=!1,R=!1,_=!1;function I(e){for(var t=w(B);null!==t;){if(null===t.callback)E(B);else{if(!(t.startTime<=e))break;E(B),t.sortIndex=t.expirationTime,C(S,t)}t=w(B)}}function j(e){if(_=!1,I(e),!R)if(null!==w(S))R=!0,n(M);else{var t=w(B);null!==t&&r(j,t.startTime-e)}}function M(e,n){R=!1,_&&(_=!1,o()),T=!0;var a=N;try{for(I(n),P=w(S);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=P.callback;if("function"==typeof i){P.callback=null,N=P.priorityLevel;var l=i(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?P.callback=l:P===w(S)&&E(S),I(n)}else E(S);P=w(S)}if(null!==P)var s=!0;else{var u=w(B);null!==u&&r(j,u.startTime-n),s=!1}return s}finally{P=null,N=a,T=!1}}var D=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||T||(R=!0,n(M))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return w(S)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:O++,callback:a,priorityLevel:e,startTime:i,expirationTime:s=i+s,sortIndex:-1},i>l?(e.sortIndex=i,C(B,e),null===w(S)&&e===w(B)&&(_?o():_=!0,r(j,i-l))):(e.sortIndex=s,C(S,e),R||T||(R=!0,n(M))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var p=n(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var m=o(f,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var s=r(e,o),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=s}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(7294),t=n(3935),r=n(3379),o=n.n(r),a=n(7795),i=n.n(a),l=n(569),s=n.n(l),u=n(3565),c=n.n(u),d=n(9216),p=n.n(d),f=n(4589),m=n.n(f),h=n(6108),g={};g.styleTagTransform=m(),g.setAttributes=c(),g.insert=s().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=p(),o()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var v=n(9669),y=n.n(v);function b(e,t){return b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},b(e,t)}function A(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,b(e,t)}n(5666);var x=n(5697),C=n.n(x);function w(){return w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},w.apply(this,arguments)}function E(e){return"/"===e.charAt(0)}function k(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}function S(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}const B=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=S(t),o=S(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};const O=function(e,t){if(!e)throw new Error("Invariant failed")};function P(e){return"/"===e.charAt(0)?e:"/"+e}function N(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function T(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function R(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function _(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e),o.state=t):(void 0===(o=w({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&E(e),i=t&&E(t),l=a||i;if(e&&E(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var s=o[o.length-1];n="."===s||".."===s||""===s}else n=!1;for(var u=0,c=o.length;c>=0;c--){var d=o[c];"."===d?k(o,c):".."===d?(k(o,c),u++):u&&(k(o,c),u--)}if(!l)for(;u--;u)o.unshift("..");!l||""===o[0]||o[0]&&E(o[0])||o.unshift("");var p=o.join("/");return n&&"/"!==p.substr(-1)&&(p+="/"),p}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function I(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var j=!("undefined"==typeof window||!window.document||!window.document.createElement);function M(e,t){t(window.confirm(e))}var D="popstate",L="hashchange";function z(){try{return window.history.state||{}}catch(e){return{}}}function $(e){void 0===e&&(e={}),j||O(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,i=a.forceRefresh,l=void 0!==i&&i,s=a.getUserConfirmation,u=void 0===s?M:s,c=a.keyLength,d=void 0===c?6:c,p=e.basename?T(P(e.basename)):"";function f(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return p&&(a=N(a,p)),_(a,r,n)}function m(){return Math.random().toString(36).substr(2,d)}var h=I();function g(e){w(F,e),F.length=n.length,h.notifyListeners(F.location,F.action)}function v(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||A(f(e.state))}function y(){A(f(z()))}var b=!1;function A(e){b?(b=!1,g()):h.confirmTransitionTo(e,"POP",u,(function(t){t?g({action:"POP",location:e}):function(e){var t=F.location,n=C.indexOf(t.key);-1===n&&(n=0);var r=C.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,k(o))}(e)}))}var x=f(z()),C=[x.key];function E(e){return p+R(e)}function k(e){n.go(e)}var S=0;function B(e){1===(S+=e)&&1===e?(window.addEventListener(D,v),o&&window.addEventListener(L,y)):0===S&&(window.removeEventListener(D,v),o&&window.removeEventListener(L,y))}var $=!1,F={length:n.length,action:"POP",location:x,createHref:E,push:function(e,t){var o="PUSH",a=_(e,t,m(),F.location);h.confirmTransitionTo(a,o,u,(function(e){if(e){var t=E(a),i=a.key,s=a.state;if(r)if(n.pushState({key:i,state:s},null,t),l)window.location.href=t;else{var u=C.indexOf(F.location.key),c=C.slice(0,u+1);c.push(a.key),C=c,g({action:o,location:a})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",a=_(e,t,m(),F.location);h.confirmTransitionTo(a,o,u,(function(e){if(e){var t=E(a),i=a.key,s=a.state;if(r)if(n.replaceState({key:i,state:s},null,t),l)window.location.replace(t);else{var u=C.indexOf(F.location.key);-1!==u&&(C[u]=a.key),g({action:o,location:a})}else window.location.replace(t)}}))},go:k,goBack:function(){k(-1)},goForward:function(){k(1)},block:function(e){void 0===e&&(e=!1);var t=h.setPrompt(e);return $||(B(1),$=!0),function(){return $&&($=!1,B(-1)),t()}},listen:function(e){var t=h.appendListener(e);return B(1),function(){B(-1),t()}}};return F}var F=1073741823,U="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function W(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const V=e.createContext||function(t,n){var r,o,a,i="__create-react-context-"+((U[a="__global_unique_id__"]=(U[a]||0)+1)+"__"),l=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=W(t.props.value),t}A(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[i]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?t=0:(t="function"==typeof n?n(r,o):F,0!=(t|=0)&&this.emitter.set(e.value,t))}var a,i},r.render=function(){return this.props.children},t}(e.Component);l.childContextTypes=((r={})[i]=C().object.isRequired,r);var s=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}A(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?F:t},r.componentDidMount=function(){this.context[i]&&this.context[i].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?F:e},r.componentWillUnmount=function(){this.context[i]&&this.context[i].off(this.onUpdate)},r.getValue=function(){return this.context[i]?this.context[i].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return s.contextTypes=((o={})[i]=C().object,o),{Provider:l,Consumer:s}};var Y=n(9658),H=n.n(Y);function q(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n(9864),n(8679);var G=function(e){var t=V();return t.displayName=e,t},Z=G("Router-History"),Q=G("Router"),K=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}A(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},r.render=function(){return e.createElement(Q.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(Z.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component;var X=function(e){function t(){return e.apply(this,arguments)||this}A(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(e.Component),J={},ee=0;function te(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(J[e])return J[e];var t=H().compile(e);return ee<1e4&&(J[e]=t,ee++),t}(e)(t,{pretty:!0})}function ne(t){var n=t.computedMatch,r=t.to,o=t.push,a=void 0!==o&&o;return e.createElement(Q.Consumer,null,(function(t){t||O(!1);var o=t.history,i=t.staticContext,l=a?o.push:o.replace,s=_(n?"string"==typeof r?te(r,n.params):w({},r,{pathname:te(r.pathname,n.params)}):r);return i?(l(s),null):e.createElement(X,{onMount:function(){l(s)},onUpdate:function(e,t){var n,r,o=_(t.to);n=o,r=w({},s,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&B(n.state,r.state)||l(s)},to:r})}))}var re={},oe=0;function ae(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,l=void 0!==i&&i,s=n.sensitive,u=void 0!==s&&s;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=re[n]||(re[n]={});if(r[e])return r[e];var o=[],a={regexp:H()(e,o,t),keys:o};return oe<1e4&&(r[e]=a,oe++),a}(n,{end:a,strict:l,sensitive:u}),o=r.regexp,i=r.keys,s=o.exec(e);if(!s)return null;var c=s[0],d=s.slice(1),p=e===c;return a&&!p?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:p,params:i.reduce((function(e,t,n){return e[t.name]=d[n],e}),{})}}),null)}var ie=function(t){function n(){return t.apply(this,arguments)||this}return A(n,t),n.prototype.render=function(){var t=this;return e.createElement(Q.Consumer,null,(function(n){n||O(!1);var r=t.props.location||n.location,o=w({},n,{location:r,match:t.props.computedMatch?t.props.computedMatch:t.props.path?ae(r.pathname,t.props):n.match}),a=t.props,i=a.children,l=a.component,s=a.render;return Array.isArray(i)&&function(t){return 0===e.Children.count(t)}(i)&&(i=null),e.createElement(Q.Provider,{value:o},o.match?i?"function"==typeof i?i(o):i:l?e.createElement(l,o):s?s(o):null:"function"==typeof i?i(o):null)}))},n}(e.Component);e.Component;var le=function(t){function n(){return t.apply(this,arguments)||this}return A(n,t),n.prototype.render=function(){var t=this;return e.createElement(Q.Consumer,null,(function(n){n||O(!1);var r,o,a=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==o&&e.isValidElement(t)){r=t;var i=t.props.path||t.props.from;o=i?ae(a.pathname,w({},t.props,{path:i})):n.match}})),o?e.cloneElement(r,{location:a,computedMatch:o}):null}))},n}(e.Component);e.useContext;var se=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))||this).history=$(e.props),e}return A(n,t),n.prototype.render=function(){return e.createElement(K,{history:this.history,children:this.props.children})},n}(e.Component);e.Component;var ue=function(e,t){return"function"==typeof e?e(t):e},ce=function(e,t){return"string"==typeof e?_(e,null,null,t):e},de=function(e){return e},pe=e.forwardRef;void 0===pe&&(pe=de);var fe=pe((function(t,n){var r=t.innerRef,o=t.navigate,a=t.onClick,i=q(t,["innerRef","navigate","onClick"]),l=i.target,s=w({},i,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return s.ref=de!==pe&&n||r,e.createElement("a",s)})),me=pe((function(t,n){var r=t.component,o=void 0===r?fe:r,a=t.replace,i=t.to,l=t.innerRef,s=q(t,["component","replace","to","innerRef"]);return e.createElement(Q.Consumer,null,(function(t){t||O(!1);var r=t.history,u=ce(ue(i,t.location),t.location),c=u?r.createHref(u):"",d=w({},s,{href:c,navigate:function(){var e=ue(i,t.location),n=R(t.location)===R(ce(e));(a||n?r.replace:r.push)(e)}});return de!==pe?d.ref=n||l:d.innerRef=l,e.createElement(o,d)}))})),he=function(e){return e},ge=e.forwardRef;void 0===ge&&(ge=he),ge((function(t,n){var r=t["aria-current"],o=void 0===r?"page":r,a=t.activeClassName,i=void 0===a?"active":a,l=t.activeStyle,s=t.className,u=t.exact,c=t.isActive,d=t.location,p=t.sensitive,f=t.strict,m=t.style,h=t.to,g=t.innerRef,v=q(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(Q.Consumer,null,(function(t){t||O(!1);var r=d||t.location,a=ce(ue(h,r),r),y=a.pathname,b=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),A=b?ae(r.pathname,{path:b,exact:u,sensitive:p,strict:f}):null,x=!!(c?c(A,r):A),C="function"==typeof s?s(x):s,E="function"==typeof m?m(x):m;x&&(C=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(C,i),E=w({},E,l));var k=w({"aria-current":x&&o||null,className:C,style:E,to:a},v);return he!==ge?k.ref=n||g:k.innerRef=g,e.createElement(me,k)}))}));var ve=e.createContext(null),ye=function(e){e()},be=function(){return ye},Ae={notify:function(){},get:function(){return[]}};function xe(e,t){var n,r=Ae;function o(){i.onStateChange&&i.onStateChange()}function a(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){var e=be(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}var i={addNestedSub:function(e){return a(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:a,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=Ae)},getListeners:function(){return r}};return i}var Ce="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?e.useLayoutEffect:e.useEffect;const we=function(t){var n=t.store,r=t.context,o=t.children,a=(0,e.useMemo)((function(){var e=xe(n);return e.onStateChange=e.notifyNestedSubs,{store:n,subscription:e}}),[n]),i=(0,e.useMemo)((function(){return n.getState()}),[n]);Ce((function(){var e=a.subscription;return e.trySubscribe(),i!==n.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,i]);var l=r||ve;return e.createElement(l.Provider,{value:a},o)};function Ee(){return(0,e.useContext)(ve)}function ke(t){void 0===t&&(t=ve);var n=t===ve?Ee:function(){return(0,e.useContext)(t)};return function(){return n().store}}n(2973);var Se=ke();function Be(e){void 0===e&&(e=ve);var t=e===ve?Se:ke(e);return function(){return t().dispatch}}var Oe=Be(),Pe=function(e,t){return e===t};function Ne(t){void 0===t&&(t=ve);var n=t===ve?Ee:function(){return(0,e.useContext)(t)};return function(t,r){void 0===r&&(r=Pe);var o=n(),a=function(t,n,r,o){var a,i=(0,e.useReducer)((function(e){return e+1}),0)[1],l=(0,e.useMemo)((function(){return xe(r,o)}),[r,o]),s=(0,e.useRef)(),u=(0,e.useRef)(),c=(0,e.useRef)(),d=(0,e.useRef)(),p=r.getState();try{if(t!==u.current||p!==c.current||s.current){var f=t(p);a=void 0!==d.current&&n(f,d.current)?d.current:f}else a=d.current}catch(e){throw s.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+s.current.stack+"\n\n"),e}return Ce((function(){u.current=t,c.current=p,d.current=a,s.current=void 0})),Ce((function(){function e(){try{var e=r.getState();if(e===c.current)return;var t=u.current(e);if(n(t,d.current))return;d.current=t,c.current=e}catch(e){s.current=e}i()}return l.onStateChange=e,l.trySubscribe(),e(),function(){return l.tryUnsubscribe()}}),[r,l]),a}(t,r,o.store,o.subscription);return(0,e.useDebugValue)(a),a}}var Te,Re=Ne();Te=t.unstable_batchedUpdates,ye=Te;var _e="SIGN_IN",Ie="SIGN_OUT",je="CREATE_ACCOUNT",Me="SHOW_CREATE_STUDY_GROUP_POPUP",De="SHOW_JOIN_STUDY_GROUP_POPUP",Le="CLOSE_POPUP",ze="ADD_STUDY_GROUP",$e="POPULATE_SEARCH",Fe="SHOW_ERROR_NOTIFICATION",Ue="HIDE_NOTIFICATION",We=function(e){return{type:_e,payload:e}},Ve=function(){return{type:Ie}},Ye=function(e){return{type:je,payload:{unverifiedUser:e}}},He=function(){return{type:Le}},qe=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return{type:ze,payload:{group:e,reset:t}}},Ge=function(e){return{type:Fe,payload:{message:e}}},Ze=n(4336),Qe={};Qe.styleTagTransform=m(),Qe.setAttributes=c(),Qe.insert=s().bind(null,"head"),Qe.domAPI=i(),Qe.insertStyleElement=p(),o()(Ze.Z,Qe),Ze.Z&&Ze.Z.locals&&Ze.Z.locals;var Ke=n(7965),Xe={};function Je(){return Je=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Je.apply(this,arguments)}Xe.styleTagTransform=m(),Xe.setAttributes=c(),Xe.insert=s().bind(null,"head"),Xe.domAPI=i(),Xe.insertStyleElement=p(),o()(Ke.Z,Xe),Ke.Z&&Ke.Z.locals&&Ke.Z.locals;const et=function(t){return e.createElement("form",Je({className:"Form"},t),t.children)};var tt=n(5057),nt={};nt.styleTagTransform=m(),nt.setAttributes=c(),nt.insert=s().bind(null,"head"),nt.domAPI=i(),nt.insertStyleElement=p(),o()(tt.Z,nt),tt.Z&&tt.Z.locals&&tt.Z.locals;const rt={Primary:"Primary",Creation:"Creation",Destrucive:"Destructive"};function ot(){return ot=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ot.apply(this,arguments)}const at=function(t){var n;switch(t.type){case rt.Primary:n="ButtonPrimary";break;case rt.Creation:n="ButtonCreation";break;case rt.Destructive:n="ButtonDestructive";break;default:n="ButtonPrimary"}return e.createElement("button",ot({className:n+" Button"},t),t.children)};function it(){return it=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},it.apply(this,arguments)}const lt=function(t){return e.createElement("fieldset",it({className:"InputField"},t),t.children)};function st(){return st=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},st.apply(this,arguments)}const ut=function(t){return e.createElement("label",st({className:"Label"},t),t.children)};var ct=n(2239),dt=n.n(ct),pt=n(4158),ft=n.n(pt);function mt(){return mt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},mt.apply(this,arguments)}const ht=function(t){var n=ft().isDefined(t.type)?t.type:"text";return e.createElement(e.Fragment,null,t.isTextArea?e.createElement("textarea",mt({className:"Input",value:t.value,onChange:t.onChange,type:n},t)):e.createElement("input",mt({className:"Input",value:t.value,onChange:t.onChange,type:n},t)))};function gt(){return gt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},gt.apply(this,arguments)}const vt=function(t){return e.createElement("div",gt({className:"ToggleField"},t),t.children)},yt=function(t){return e.createElement("label",{className:"Toggle"},e.createElement("input",{type:"checkbox",value:t.value,onChange:t.onChange}),e.createElement("span",{className:"slider"}))};var bt=n(4308),At=n.n(bt);const xt=function(t){return(0,e.useEffect)((function(){console.log(t.options)}),[]),e.createElement("select",{className:"dropdown",onChange:t.onChange},t.options.map((function(t){return e.createElement("option",{value:t},t)})))},Ct=function(t){return e.createElement("input",{className:"color-picker",onChange:t.onChange,type:"color"})},wt=function(t){return e.createElement("div",null,e.createElement(et,{onSubmit:t.submitCreateStudyGroup,className:"create-study-group-form"},e.createElement("div",{className:"side-by-side"},e.createElement(lt,null,e.createElement(ut,null,"Study Group Name"),e.createElement(ht,{value:t.name,onChange:t.updateNameField,type:"text"})),e.createElement(lt,null,e.createElement(ut,null,"Color"),e.createElement(Ct,{value:t.groupColor,onChange:t.updateGroupColor,type:"color"}))),e.createElement(lt,null,e.createElement(ut,null,"Description"),e.createElement(ht,{value:t.description,onChange:t.updateDescriptionField,type:"text",isTextArea:!0})),e.createElement("div",{className:"side-by-side"},e.createElement(lt,null,e.createElement(ut,null,"Subject"),e.createElement(xt,{options:["This","That"],onChange:t.updateSubjectField})),e.createElement(lt,null,e.createElement(ut,null,"Privacy"),e.createElement(xt,{options:["Public","Public","Public"],onChange:t.updatePrivacy})),e.createElement(lt,null,e.createElement(ut,null,"Course Code"),e.createElement(ht,{value:t.courseCode,onChange:t.updateCourseCodeField,type:"text"}))),e.createElement("div",{className:"side-by-side"},e.createElement(vt,null,e.createElement(ut,null,"Is this group associated with your school?"),e.createElement(yt,{onChange:t.updateIsAssociatedWithSchool})),e.createElement(vt,null,e.createElement(ut,null,"Is this an online group?"),e.createElement(yt,{onChange:t.updateIsOnlineGroup})),e.createElement(vt,null,e.createElement(ut,null,"Is this a tutor group?"),e.createElement(yt,{onChange:t.updateIsTutorGroup}))),e.createElement(at,{type:rt.Creation},"Submit")))};function Et(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function kt(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function St(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Bt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Bt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ot=function(){var t,n=Oe(),r=Re((function(e){return e.authReducer.user})),o="",a=St((0,e.useState)(o),2),i=a[0],l=a[1],s=St((0,e.useState)(o),2),u=s[0],c=s[1],d=St((0,e.useState)("That"),2),p=d[0],f=d[1],m=St((0,e.useState)("Public"),2),h=m[0],g=m[1],v=St((0,e.useState)(o),2),b=v[0],A=v[1],x=St((0,e.useState)(!1),2),C=x[0],w=x[1],E=St((0,e.useState)(!1),2),k=E[0],S=E[1],B=St((0,e.useState)(!1),2),O=B[0],P=B[1],N=St((0,e.useState)("#000000"),2),T=N[0],R=N[1],_=St((0,e.useState)(o),2),I=(_[0],_[1],St((0,e.useState)(o),2)),j=I[0],M=I[1],D=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.prev=2,y().defaults.headers.common.Authorization=localStorage.getItem("token"),e.next=6,y().post(dt().StudyGroup.CreateStudyGroup,{name:i,groupColor:T,description:u,subject:p,privacySetting:h,course:b,school:r.school||"Liberty University",isTutorGroup:k,isOnlineGroup:O});case 6:o=e.sent,e.next=13;break;case 9:e.prev=9,e.t0=e.catch(2),console.log(e.t0),M(e.t0.message);case 13:return e.prev=13,ft().isDefined(o)?At().StudyGroup.SuccessStudyGroupCreated===o.data.message?(n(qe(o.data.newStudyGroup)),n(He())):M(o.data.message):M("There's been a problem with the server"),e.finish(13);case 17:case"end":return e.stop()}}),e,null,[[2,9,13,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){kt(a,r,o,i,l,"next",e)}function l(e){kt(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return e.createElement("div",{className:"create-studygroup-view"},e.createElement(wt,(Et(t={submitCreateStudyGroup:D,name:i,description:u,subject:p,privacy:h,courseCode:b,isAssociatedWithSchool:C,isTutorGroup:k,isOnlineGroup:O,groupColor:T,updateNameField:function(e){l(e.target.value),M(o)},updateDescriptionField:function(e){c(e.target.value),M(o)},updateSubjectField:function(e){f(e.target.options[e.target.selectedIndex].value),M(o)},updatePrivacy:function(e){g(e.target.options[e.target.selectedIndex].value),M(o)},updateCourseCodeField:function(e){A(e.target.value),M(o)},updateIsAssociatedWithSchool:function(e){w(e.target.checked),M(o)},updateIsTutorGroup:function(e){S(e.target.checked),M(o)},updateIsOnlineGroup:function(e){P(e.target.checked),M(o)},updateGroupColor:function(e){R(e.target.value),M(o)}},"submitCreateStudyGroup",D),Et(t,"studyGroupCreationErrorMsg",j),t)),e.createElement("p",{className:"error-message"},j))},Pt=function(t){var n=t.group,r=n.name,o=(n.school,n.owner,n.subject,n.courseCode,n.isTutor,n.isOnline,n.groupColor,n.description);return n._id,e.createElement("div",null,e.createElement("h1",null,r),e.createElement("p",null,o),e.createElement(at,{type:rt.Creation,onClick:function(){}},"Join"))},Nt={Join:"Join Study Group",Create:"Create Study Group"},Tt=function(t){var n=Re((function(e){return e.popupReducer})),r=n.view,o=n.payload,a=Oe(),i=e.createElement(e.Fragment,null);switch(r){case Nt.Create:i=e.createElement(Ot,null);break;case Nt.Join:i=e.createElement(Pt,{group:o});break;default:console.log(Nt.Join,r,Nt.Join===r)}return e.createElement("div",{className:"popup-wrapper"},e.createElement("div",{className:"background "+(t.isShowing?"active":""),onClick:function(){return a(He())}}),e.createElement("div",{className:"popup "+(t.isShowing?"active":"")},e.createElement("div",{className:"popup-top"},e.createElement("h1",null,r),e.createElement("button",{onClick:function(){return a(He())}},"X")),e.createElement("div",{className:"popup-body"},t.children?t.children:i)))};var Rt=n(8771),_t={};_t.styleTagTransform=m(),_t.setAttributes=c(),_t.insert=s().bind(null,"head"),_t.domAPI=i(),_t.insertStyleElement=p(),o()(Rt.Z,_t),Rt.Z&&Rt.Z.locals&&Rt.Z.locals;const It="ERROR",jt=function(t){var n,r=Re((function(e){return e.notificationReducer.type})),o=Re((function(e){return e.notificationReducer.message})),a=Oe(),i="";return r===It&&(clearTimeout(n),i="error",n=setTimeout((function(){a({type:Ue})}),5e3)),e.createElement("div",{className:"notification "+i+" "+(t.isShowing?"active":"")},e.createElement("h1",null,o||"No Message"))};var Mt=n(1338),Dt={};Dt.styleTagTransform=m(),Dt.setAttributes=c(),Dt.insert=s().bind(null,"head"),Dt.domAPI=i(),Dt.insertStyleElement=p(),o()(Mt.Z,Dt),Mt.Z&&Mt.Z.locals&&Mt.Z.locals;var Lt=n(4739),zt={};function $t(){return $t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},$t.apply(this,arguments)}zt.styleTagTransform=m(),zt.setAttributes=c(),zt.insert=s().bind(null,"head"),zt.domAPI=i(),zt.insertStyleElement=p(),o()(Lt.Z,zt),Lt.Z&&Lt.Z.locals&&Lt.Z.locals;const Ft=function(t){return e.createElement("div",$t({className:"page"},t),t.children)},Ut={Login:"Login",ForgotPassword:"Forgot password",CreateAccount:"Create account",VerificationEmailConfirmation:"Verification email confirmation",AccountSetup:"Account setup"};var Wt=n(2440),Vt={};Vt.styleTagTransform=m(),Vt.setAttributes=c(),Vt.insert=s().bind(null,"head"),Vt.domAPI=i(),Vt.insertStyleElement=p(),o()(Wt.Z,Vt),Wt.Z&&Wt.Z.locals&&Wt.Z.locals;const Yt=function(t){return e.createElement("div",{className:"login-form"},e.createElement(et,{onSubmit:t.submitLogin},e.createElement(lt,null,e.createElement(ut,null,"Email"),e.createElement(ht,{value:t.email,onChange:t.updateEmailField,type:"email"})),e.createElement(lt,null,e.createElement(ut,null,"Password"),e.createElement(ht,{value:t.password,onChange:t.updatePasswordField,type:"password"})),e.createElement(at,{type:rt.Primary},"Sign in")))};var Ht=n(4487),qt={};qt.styleTagTransform=m(),qt.setAttributes=c(),qt.insert=s().bind(null,"head"),qt.domAPI=i(),qt.insertStyleElement=p(),o()(Ht.Z,qt),Ht.Z&&Ht.Z.locals&&Ht.Z.locals;const Gt=function(t){return e.createElement("div",{className:"auth-view"},e.createElement("h1",null,"Study Spaces"),t.children,e.createElement("p",{className:"error-message"},t.errMsg))};function Zt(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Qt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Kt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Kt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xt=function(t){var n=Qt((0,e.useState)(""),2),r=n[0],o=n[1],a=Qt((0,e.useState)(""),2),i=a[0],l=a[1],s=Oe(),u=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var n,o,a,l,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.prev=2,e.next=5,y().post(dt().Account.Login,{email:r,password:i});case 5:n=e.sent,e.next=12;break;case 8:e.prev=8,e.t0=e.catch(2),console.log(e.t0),s(Ge("There was a problem connecting to the server:"+e.t0));case 12:return e.prev=12,ft().isDefined(n)&&(At().Account.SuccessLogin===n.data.message?(o=n.data,a=o.authenticationToken,l=o.authenticationTokenExpirationDate,u=o.user,o.studyGroups,s(We({authenticationToken:a,authenticationTokenExpirationDate:l,user:u}))):(s(Ge(n.data.message)),s(Ve))),e.finish(12);case 16:case"end":return e.stop()}}),e,null,[[2,8,12,16]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Zt(a,r,o,i,l,"next",e)}function l(e){Zt(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return e.createElement(Gt,null,e.createElement(Yt,{email:r,password:i,submitLogin:u,updateEmailField:function(e){o(e.target.value)},updatePasswordField:function(e){l(e.target.value)}}),e.createElement("div",{className:"other-options"},e.createElement("p",null,"Don't have an account?"),e.createElement(at,{type:rt.Creation,onClick:function(e){t.setHomeView(Ut.CreateAccount)}},"Sign Up")))};var Jt=n(4497),en={};en.styleTagTransform=m(),en.setAttributes=c(),en.insert=s().bind(null,"head"),en.domAPI=i(),en.insertStyleElement=p(),o()(Jt.Z,en),Jt.Z&&Jt.Z.locals&&Jt.Z.locals;const tn=function(t){return e.createElement("div",{className:"create-account-form"},e.createElement(et,{onSubmit:t.submitAccountCreation},e.createElement(lt,null,e.createElement(ut,null,"Email"),e.createElement(ht,{value:t.email,onChange:t.updateEmailField,type:"email"})),e.createElement(lt,null,e.createElement(ut,null,"Password"),e.createElement(ht,{value:t.password,onChange:t.updatePasswordField,type:"password"})),e.createElement(lt,null,e.createElement(ut,null,"Confirm Password"),e.createElement(ht,{value:t.confirmPassword,onChange:t.updateConfirmPasswordField,type:"password"})),t.loginDidFail,e.createElement(at,{type:rt.Creation},"Next")))};function nn(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function rn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return on(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?on(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function on(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const an=function(t){var n=rn((0,e.useState)(""),2),r=n[0],o=n[1],a=rn((0,e.useState)(""),2),i=a[0],l=a[1],s=rn((0,e.useState)(""),2),u=s[0],c=s[1],d=Oe(),p=function(){var e,n=(e=regeneratorRuntime.mark((function e(n){var o,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n.preventDefault(),n.stopPropagation(),i===u){e.next=5;break}return d(Ge("Passwords don't match")),e.abrupt("return");case 5:return e.prev=5,e.next=8,y().post(dt().Account.CreateAccount,{email:r,password:i,password_confirmation:u});case 8:o=e.sent,e.next=15;break;case 11:e.prev=11,e.t0=e.catch(5),console.log(e.t0),d(Ge("There was a problem connecting to the server:"+e.t0));case 15:return e.prev=15,ft().isDefined(o)?At().Account.SuccessAccountCreated===o.data.message?(a=o.data.unverifiedUser,d(Ye(a)),t.setHomeView(Ut.VerificationEmailConfirmation)):d(Ge(o.data.message)):d(Ge("There was an error")),e.finish(15);case 19:case"end":return e.stop()}}),e,null,[[5,11,15,19]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){nn(a,r,o,i,l,"next",e)}function l(e){nn(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return n.apply(this,arguments)}}();return e.createElement(Gt,null,e.createElement("p",null,"Create Your Account"),e.createElement(tn,{email:r,password:i,confirmPassword:u,submitAccountCreation:p,updateEmailField:function(e){o(e.target.value)},updatePasswordField:function(e){l(e.target.value)},updateConfirmPasswordField:function(e){c(e.target.value)}}),e.createElement("div",{className:"other-options"},e.createElement("p",null,"Already have an account?"),e.createElement(at,{type:rt.Primary,onClick:function(e){t.setHomeView(Ut.Login)}},"Sign In")))},ln=function(t){var n=Re((function(e){return e.authReducer.unverifiedUser}));return e.createElement(Gt,null,e.createElement("h1",null,"You're almost there!"),e.createElement("p",null,"Check your email: ",e.createElement("strong",null,n.email)," for a link to continue the signup process"),e.createElement(at,{onClick:function(){t.setHomeView(Ut.Login)}},"Return"))};var sn=n(3680),un={};un.styleTagTransform=m(),un.setAttributes=c(),un.insert=s().bind(null,"head"),un.domAPI=i(),un.insertStyleElement=p(),o()(sn.Z,un),sn.Z&&sn.Z.locals&&sn.Z.locals,n(2495);const cn=function(t){return e.createElement("div",null,e.createElement(et,{onSubmit:t.submitAccountSetup},e.createElement(lt,null,e.createElement(ut,null,"Full Name"),e.createElement(ht,{value:t.name,onChange:t.updateNameField,type:"text"})),e.createElement(lt,null,e.createElement(ut,null,"Area Code"),e.createElement(ht,{value:t.areaCode,onChange:t.updateAreaCodeField,type:"text"})),e.createElement(lt,null,e.createElement("div",{className:"inline"},e.createElement(ut,{className:"left Label"},"Are you 18 or older"),e.createElement(ht,{className:"right",value:t.is18OrOver,onChange:t.updateIs18OrOver,type:"checkbox"}))),e.createElement(lt,null,e.createElement(ut,null,"Profile Picture"),e.createElement("div",{className:"photo"},e.createElement("input",{type:"file",id:"fileInput right",accept:".png, .jpg, .jpeg",name:"profilePicture",onChange:t.updateProfilePicture}),e.createElement("img",{className:"imgPreview",id:"left",src:t.profilePicture,alt:""}))),e.createElement(at,{type:rt.Creation},"Create Account")))};function dn(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function pn(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){dn(a,r,o,i,l,"next",e)}function l(e){dn(a,r,o,i,l,"throw",e)}i(void 0)}))}}function fn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return mn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?mn(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const hn=function(t){var n=fn((0,e.useState)(!1),2),r=n[0],o=n[1],a=fn((0,e.useState)(""),2),i=a[0],l=a[1],s=fn((0,e.useState)(""),2),u=s[0],c=s[1],d=fn((0,e.useState)(!1),2),p=d[0],f=d[1],m=fn((0,e.useState)(""),2),h=m[0],g=m[1],v=fn((0,e.useState)(""),2),b=v[0],A=(v[1],fn((0,e.useState)({}),2)),x=A[0],C=A[1],w=t.verificationToken,E=Oe();(0,e.useEffect)(pn(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,k(w);case 2:case"end":return e.stop()}}),e)}))),[]);var k=function(){var e=pn(regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,y().post(dt().Account.GetUnverifiedUser,{verificationToken:t});case 3:n=e.sent,e.next=9;break;case 6:e.prev=6,e.t0=e.catch(0),console.log(e.t0);case 9:return e.prev=9,ft().isDefined(n)&&At().Account.UnverifiedUserWasFound===n.data.message&&(C(n.data.unverifiedUser),o(!0)),e.finish(9);case 13:case"end":return e.stop()}}),e,null,[[0,6,9,13]])})));return function(t){return e.apply(this,arguments)}}(),S=function(){var e=pn(regeneratorRuntime.mark((function e(t){var n,r,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),t.stopPropagation(),p){e.next=6;break}return console.log("NOT 18"),E(Ge("You need to be 18 or older to sign up")),e.abrupt("return");case 6:return e.prev=6,(r=new FormData).append("profilePicture",h),r.append("verificationToken",w),r.append("user",x),r.append("name",i),r.append("areaCode",u),r.append("is18OrOver",p),e.next=16,y().post(dt().Account.SetupAccount,r,{headers:{"Content-Type":"multipart/form-data"}});case 16:n=e.sent,e.next=23;break;case 19:e.prev=19,e.t0=e.catch(6),console.log(e.t0),E(Ge("There was a problem connecting to the server:"+e.t0));case 23:return e.prev=23,ft().isDefined(n)?(o=At().Account.SuccessAccountSetup===n.data.message,E(o?We(n.data):Ge(n.data.message))):E(Ge("There was a problem creating your account")),e.finish(23);case 27:case"end":return e.stop()}}),e,null,[[6,19,23,27]])})));return function(t){return e.apply(this,arguments)}}();return e.createElement(Gt,null,e.createElement("h3",null,"Setup Your Account"),e.createElement("p",null,x.email),r?e.createElement("div",null,e.createElement(cn,{user:x,name:i,areaCode:u,is18OrOver:p,profilePicture:h,updateNameField:function(e){l(e.target.value)},updateAreaCodeField:function(e){c(e.target.value)},updateIs18OrOver:function(e){f(e.target.checked)},updateProfilePicture:function(e){g(e.target.files[0])},submitAccountSetup:S}),e.createElement("p",{className:"error-message"},b)):e.createElement("h1",null,"You shouldn't be here!"),e.createElement("div",{className:"other-options"},e.createElement("p",null,"Already have an account?"),e.createElement(at,{type:rt.Creation,onClick:function(){t.setHomeView(Ut.Login)}},"Sign In")))};function gn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const vn=function(t){var n,r,o=(n=(0,e.useState)(t.homeView?t.homeView:Ut.Login),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return gn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?gn(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],i=o[1],l=e.createElement(e.Fragment,null);switch(a){case Ut.Login:l=e.createElement(Xt,{setHomeView:i});break;case Ut.CreateAccount:l=e.createElement(an,{setHomeView:i});break;case Ut.VerificationEmailConfirmation:l=e.createElement(ln,{setHomeView:i});break;case Ut.AccountSetup:l=e.createElement(hn,{setHomeView:i,verificationToken:t.match.params.verificationToken})}return e.createElement(Ft,null,e.createElement("div",{className:"HomePage"},e.createElement("h1",{className:"subtitle"},"Study ",e.createElement("br",null)," with ",e.createElement("br",null)," excellence."),e.createElement(Ft,null,t.children?t.children:l)))};var yn=n(4221),bn={};bn.styleTagTransform=m(),bn.setAttributes=c(),bn.insert=s().bind(null,"head"),bn.domAPI=i(),bn.insertStyleElement=p(),o()(yn.Z,bn),yn.Z&&yn.Z.locals&&yn.Z.locals;var An=n(3189),xn={};xn.styleTagTransform=m(),xn.setAttributes=c(),xn.insert=s().bind(null,"head"),xn.domAPI=i(),xn.insertStyleElement=p(),o()(An.Z,xn),An.Z&&An.Z.locals&&An.Z.locals;var Cn=n(7955),wn={};wn.styleTagTransform=m(),wn.setAttributes=c(),wn.insert=s().bind(null,"head"),wn.domAPI=i(),wn.insertStyleElement=p(),o()(Cn.Z,wn),Cn.Z&&Cn.Z.locals&&Cn.Z.locals;const En=function(t){var n=t.isShowing,r=Oe();return e.createElement(e.Fragment,null,e.createElement("div",{className:n?"isShowing menu":"menu"},e.createElement(at,{onClick:function(){return r(Ve())}},"Log out")))};function kn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Sn=function(t){var n,r,o=t.currentPage,a=(Oe(),Re((function(e){return e.authReducer}))),i=a.user,l=a.isLoggedIn,s=(n=(0,e.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return kn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kn(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=s[0],c=s[1];return e.createElement(e.Fragment,null,e.createElement("div",{className:"top-bar"},e.createElement("div",{className:"wrapper"},e.createElement("div",{className:"left"},e.createElement(me,{to:"/",style:{textDecoration:"none"}},e.createElement("h1",null,"Study Spaces")),e.createElement(me,{to:"/study",className:"study"===o?"active nav-item":"nav-item"},e.createElement("p",null,"Study")),e.createElement(me,{to:"/search",className:"search"===o?"active nav-item":"nav-item"},e.createElement("p",null,"Search")),e.createElement(me,{to:"/message",className:"message"===o?"active nav-item":"nav-item"},e.createElement("p",null,"Message"))),l?e.createElement("div",{className:"right",onClick:function(){c(!u),console.log(u)}},e.createElement("p",{className:"school"},"Liberty University"),e.createElement("p",{className:"name"},i.name),e.createElement("img",{className:"profile-picture",src:" data:image/png;charset=utf-8;base64,"+i.profilePicture,alt:""})):e.createElement(me,{to:"/"},e.createElement(at,{type:rt.Creation},"Log in")))),e.createElement("div",{className:"border"},e.createElement(En,{isShowing:u})))};var Bn=n(1918),On={};On.styleTagTransform=m(),On.setAttributes=c(),On.insert=s().bind(null,"head"),On.domAPI=i(),On.insertStyleElement=p(),o()(Bn.Z,On),Bn.Z&&Bn.Z.locals&&Bn.Z.locals;const Pn=function(t){var n=t.title;return e.createElement("div",{className:"study-group-view"},e.createElement("h1",null,n))};function Nn(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Tn(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Nn(a,r,o,i,l,"next",e)}function l(e){Nn(a,r,o,i,l,"throw",e)}i(void 0)}))}}const Rn=function(){var t=Re((function(e){return e.authReducer.isLoggedIn})),n=(Re((function(e){return e.authReducer.user})),Re((function(e){return e.studyGroupsReducer.studyGroups}))),r=Oe();(0,e.useEffect)((function(){function e(){return(e=Tn(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o();case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[]);var o=function(){var e=Tn(regeneratorRuntime.mark((function e(){var t,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,y().defaults.headers.common.Authorization=localStorage.getItem("token"),e.next=4,y().get(dt().StudyGroup.GetUserStudyGroups);case 4:t=e.sent,e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),console.log(e.t0);case 10:return e.prev=10,ft().isDefined(t)&&At().StudyGroup.SuccessStudyGroupsRetrieved===t.data.message?(n=t.data.studyGroups)&&n.map((function(e){r(qe(e,!0))})):console.log("That didn't work"),e.finish(10);case 14:case"end":return e.stop()}}),e,null,[[0,7,10,14]])})));return function(){return e.apply(this,arguments)}}();return e.createElement("div",null,e.createElement(Sn,{currentPage:"study"}),e.createElement(Ft,null,e.createElement("div",{className:"study"},e.createElement("div",{className:"page-title"},e.createElement("h1",null,"Study")),t?e.createElement("div",null,e.createElement(at,{onClick:function(){return r(Ve())}},"Log out"),e.createElement("button",{className:"add-button",onClick:function(){return r({type:Me})}}),e.createElement("div",{className:"study-groups-container"},ft().isDefined(n)&&n.map((function(t){return e.createElement(Pn,{title:t.name})})))):e.createElement("div",null,e.createElement("p",null,"You are currently a guest!"),e.createElement(me,{to:"/"},"Log In")))))};var _n=n(4455),In={};In.styleTagTransform=m(),In.setAttributes=c(),In.insert=s().bind(null,"head"),In.domAPI=i(),In.insertStyleElement=p(),o()(_n.Z,In),_n.Z&&_n.Z.locals&&_n.Z.locals;var jn=n(6891),Mn={};Mn.styleTagTransform=m(),Mn.setAttributes=c(),Mn.insert=s().bind(null,"head"),Mn.domAPI=i(),Mn.insertStyleElement=p(),o()(jn.Z,Mn),jn.Z&&jn.Z.locals&&jn.Z.locals;var Dn=n(8225),Ln={};Ln.styleTagTransform=m(),Ln.setAttributes=c(),Ln.insert=s().bind(null,"head"),Ln.domAPI=i(),Ln.insertStyleElement=p(),o()(Dn.Z,Ln),Dn.Z&&Dn.Z.locals&&Dn.Z.locals;var zn=n(5269),$n=n.n(zn);function Fn(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=Fn(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function Un(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=Fn(e))&&(r&&(r+=" "),r+=t);return r}const Wn=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var Vn=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const Yn=Wn((function(e){return Vn.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var Hn=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),qn=Math.abs,Gn=String.fromCharCode,Zn=Object.assign;function Qn(e){return e.trim()}function Kn(e,t,n){return e.replace(t,n)}function Xn(e,t){return e.indexOf(t)}function Jn(e,t){return 0|e.charCodeAt(t)}function er(e,t,n){return e.slice(t,n)}function tr(e){return e.length}function nr(e){return e.length}function rr(e,t){return t.push(e),e}var or=1,ar=1,ir=0,lr=0,sr=0,ur="";function cr(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:or,column:ar,length:i,return:""}}function dr(e,t){return Zn(cr("",null,null,"",null,null,0),e,{length:-e.length},t)}function pr(){return sr=lr>0?Jn(ur,--lr):0,ar--,10===sr&&(ar=1,or--),sr}function fr(){return sr=lr<ir?Jn(ur,lr++):0,ar++,10===sr&&(ar=1,or++),sr}function mr(){return Jn(ur,lr)}function hr(){return lr}function gr(e,t){return er(ur,e,t)}function vr(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function yr(e){return or=ar=1,ir=tr(ur=e),lr=0,[]}function br(e){return ur="",e}function Ar(e){return Qn(gr(lr-1,wr(91===e?e+2:40===e?e+1:e)))}function xr(e){for(;(sr=mr())&&sr<33;)fr();return vr(e)>2||vr(sr)>3?"":" "}function Cr(e,t){for(;--t&&fr()&&!(sr<48||sr>102||sr>57&&sr<65||sr>70&&sr<97););return gr(e,hr()+(t<6&&32==mr()&&32==fr()))}function wr(e){for(;fr();)switch(sr){case e:return lr;case 34:case 39:34!==e&&39!==e&&wr(sr);break;case 40:41===e&&wr(e);break;case 92:fr()}return lr}function Er(e,t){for(;fr()&&e+sr!==57&&(e+sr!==84||47!==mr()););return"/*"+gr(t,lr-1)+"*"+Gn(47===e?e:fr())}function kr(e){for(;!vr(mr());)fr();return gr(e,lr)}var Sr="-ms-",Br="-moz-",Or="-webkit-",Pr="comm",Nr="rule",Tr="decl",Rr="@keyframes";function _r(e,t){for(var n="",r=nr(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function Ir(e,t,n,r){switch(e.type){case"@import":case Tr:return e.return=e.return||e.value;case Pr:return"";case Rr:return e.return=e.value+"{"+_r(e.children,r)+"}";case Nr:e.value=e.props.join(",")}return tr(n=_r(e.children,r))?e.return=e.value+"{"+n+"}":""}function jr(e,t){switch(function(e,t){return(((t<<2^Jn(e,0))<<2^Jn(e,1))<<2^Jn(e,2))<<2^Jn(e,3)}(e,t)){case 5103:return Or+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Or+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Or+e+Br+e+Sr+e+e;case 6828:case 4268:return Or+e+Sr+e+e;case 6165:return Or+e+Sr+"flex-"+e+e;case 5187:return Or+e+Kn(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return Or+e+Sr+"flex-item-"+Kn(e,/flex-|-self/,"")+e;case 4675:return Or+e+Sr+"flex-line-pack"+Kn(e,/align-content|flex-|-self/,"")+e;case 5548:return Or+e+Sr+Kn(e,"shrink","negative")+e;case 5292:return Or+e+Sr+Kn(e,"basis","preferred-size")+e;case 6060:return Or+"box-"+Kn(e,"-grow","")+Or+e+Sr+Kn(e,"grow","positive")+e;case 4554:return Or+Kn(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return Kn(Kn(Kn(e,/(zoom-|grab)/,Or+"$1"),/(image-set)/,Or+"$1"),e,"")+e;case 5495:case 3959:return Kn(e,/(image-set\([^]*)/,Or+"$1$`$1");case 4968:return Kn(Kn(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+Or+e+e;case 4095:case 3583:case 4068:case 2532:return Kn(e,/(.+)-inline(.+)/,Or+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(tr(e)-1-t>6)switch(Jn(e,t+1)){case 109:if(45!==Jn(e,t+4))break;case 102:return Kn(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+Br+(108==Jn(e,t+3)?"$3":"$2-$3"))+e;case 115:return~Xn(e,"stretch")?jr(Kn(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==Jn(e,t+1))break;case 6444:switch(Jn(e,tr(e)-3-(~Xn(e,"!important")&&10))){case 107:return Kn(e,":",":"+Or)+e;case 101:return Kn(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Or+(45===Jn(e,14)?"inline-":"")+"box$3$1"+Or+"$2$3$1"+Sr+"$2box$3")+e}break;case 5936:switch(Jn(e,t+11)){case 114:return Or+e+Sr+Kn(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Or+e+Sr+Kn(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Or+e+Sr+Kn(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Or+e+Sr+e+e}return e}function Mr(e){return br(Dr("",null,null,null,[""],e=yr(e),0,[0],e))}function Dr(e,t,n,r,o,a,i,l,s){for(var u=0,c=0,d=i,p=0,f=0,m=0,h=1,g=1,v=1,y=0,b="",A=o,x=a,C=r,w=b;g;)switch(m=y,y=fr()){case 40:if(108!=m&&58==w.charCodeAt(d-1)){-1!=Xn(w+=Kn(Ar(y),"&","&\f"),"&\f")&&(v=-1);break}case 34:case 39:case 91:w+=Ar(y);break;case 9:case 10:case 13:case 32:w+=xr(m);break;case 92:w+=Cr(hr()-1,7);continue;case 47:switch(mr()){case 42:case 47:rr(zr(Er(fr(),hr()),t,n),s);break;default:w+="/"}break;case 123*h:l[u++]=tr(w)*v;case 125*h:case 59:case 0:switch(y){case 0:case 125:g=0;case 59+c:f>0&&tr(w)-d&&rr(f>32?$r(w+";",r,n,d-1):$r(Kn(w," ","")+";",r,n,d-2),s);break;case 59:w+=";";default:if(rr(C=Lr(w,t,n,u,c,o,l,b,A=[],x=[],d),a),123===y)if(0===c)Dr(w,t,C,C,A,a,d,l,x);else switch(p){case 100:case 109:case 115:Dr(e,C,C,r&&rr(Lr(e,C,C,0,0,o,l,b,o,A=[],d),x),o,x,d,l,r?A:x);break;default:Dr(w,C,C,C,[""],x,0,l,x)}}u=c=f=0,h=v=1,b=w="",d=i;break;case 58:d=1+tr(w),f=m;default:if(h<1)if(123==y)--h;else if(125==y&&0==h++&&125==pr())continue;switch(w+=Gn(y),y*h){case 38:v=c>0?1:(w+="\f",-1);break;case 44:l[u++]=(tr(w)-1)*v,v=1;break;case 64:45===mr()&&(w+=Ar(fr())),p=mr(),c=d=tr(b=w+=kr(hr())),y++;break;case 45:45===m&&2==tr(w)&&(h=0)}}return a}function Lr(e,t,n,r,o,a,i,l,s,u,c){for(var d=o-1,p=0===o?a:[""],f=nr(p),m=0,h=0,g=0;m<r;++m)for(var v=0,y=er(e,d+1,d=qn(h=i[m])),b=e;v<f;++v)(b=Qn(h>0?p[v]+" "+y:Kn(y,/&\f/g,p[v])))&&(s[g++]=b);return cr(e,t,n,0===o?Nr:l,s,u,c)}function zr(e,t,n){return cr(e,t,n,Pr,Gn(sr),er(e,2,-2),0)}function $r(e,t,n,r){return cr(e,t,n,Tr,er(e,0,r),er(e,r+1,-1),r)}var Fr=function(e,t,n){for(var r=0,o=0;r=o,o=mr(),38===r&&12===o&&(t[n]=1),!vr(o);)fr();return gr(e,lr)},Ur=new WeakMap,Wr=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||Ur.get(n))&&!r){Ur.set(e,!0);for(var o=[],a=function(e,t){return br(function(e,t){var n=-1,r=44;do{switch(vr(r)){case 0:38===r&&12===mr()&&(t[n]=1),e[n]+=Fr(lr-1,t,n);break;case 2:e[n]+=Ar(r);break;case 4:if(44===r){e[++n]=58===mr()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=Gn(r)}}while(r=fr());return e}(yr(e),t))}(t,o),i=n.props,l=0,s=0;l<a.length;l++)for(var u=0;u<i.length;u++,s++)e.props[s]=o[l]?a[l].replace(/&\f/g,i[u]):i[u]+" "+a[l]}}},Vr=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},Yr=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case Tr:e.return=jr(e.value,e.length);break;case Rr:return _r([dr(e,{value:Kn(e.value,"@","@"+Or)})],r);case Nr:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return _r([dr(e,{props:[Kn(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return _r([dr(e,{props:[Kn(t,/:(plac\w+)/,":-webkit-input-$1")]}),dr(e,{props:[Kn(t,/:(plac\w+)/,":-moz-$1")]}),dr(e,{props:[Kn(t,/:(plac\w+)/,Sr+"input-$1")]})],r)}return""}))}}];const Hr=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,a=e.stylisPlugins||Yr,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var s,u,c,d,p=[Ir,(d=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],f=(u=[Wr,Vr].concat(a,p),c=nr(u),function(e,t,n,r){for(var o="",a=0;a<c;a++)o+=u[a](e,t,n,r)||"";return o});o=function(e,t,n,r){s=n,_r(Mr(e?e+"{"+t.styles+"}":t.styles),f),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new Hn({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:o};return m.sheet.hydrate(l),m},qr=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},Gr={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Zr=/[A-Z]|^ms/g,Qr=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Kr=function(e){return 45===e.charCodeAt(1)},Xr=function(e){return null!=e&&"boolean"!=typeof e},Jr=Wn((function(e){return Kr(e)?e:e.replace(Zr,"-$&").toLowerCase()})),eo=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(Qr,(function(e,t,n){return no={name:t,styles:n,next:no},t}))}return 1===Gr[e]||Kr(e)||"number"!=typeof t||0===t?t:t+"px"};function to(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return no={name:n.name,styles:n.styles,next:no},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)no={name:r.name,styles:r.styles,next:no},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=to(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":Xr(i)&&(r+=Jr(a)+":"+eo(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=to(e,t,i);switch(a){case"animation":case"animationName":r+=Jr(a)+":"+l+";";break;default:r+=a+"{"+l+"}"}}else for(var s=0;s<i.length;s++)Xr(i[s])&&(r+=Jr(a)+":"+eo(a,i[s])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=no,a=n(e);return no=o,to(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var no,ro=/label:\s*([^\s;\n{]+)\s*(;|$)/g,oo=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";no=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=to(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=to(n,t,e[i]),r&&(o+=a[i]);ro.lastIndex=0;for(var l,s="";null!==(l=ro.exec(o));)s+="-"+l[1];return{name:qr(o)+s,styles:o,next:no}},ao=(0,e.createContext)("undefined"!=typeof HTMLElement?Hr({key:"css"}):null);ao.Provider;var io=function(t){return(0,e.forwardRef)((function(n,r){var o=(0,e.useContext)(ao);return t(n,o,r)}))},lo=(0,e.createContext)({});function so(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var uo=function(e,t,n){var r=e.key+"-"+t.name;if(!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles),void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}},co=Yn,po=function(e){return"theme"!==e},fo=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?co:po},mo=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},ho=function(){return null};var go=function t(n,r){var o,a,i=n.__emotion_real===n,l=i&&n.__emotion_base||n;void 0!==r&&(o=r.label,a=r.target);var s=mo(n,r,i),u=s||fo(l),c=!u("as");return function(){var d=arguments,p=i&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==o&&p.push("label:"+o+";"),null==d[0]||void 0===d[0].raw)p.push.apply(p,d);else{p.push(d[0][0]);for(var f=d.length,m=1;m<f;m++)p.push(d[m],d[0][m])}var h=io((function(t,n,r){var o=c&&t.as||l,i="",d=[],f=t;if(null==t.theme){for(var m in f={},t)f[m]=t[m];f.theme=(0,e.useContext)(lo)}"string"==typeof t.className?i=so(n.registered,d,t.className):null!=t.className&&(i=t.className+" ");var h=oo(p.concat(d),n.registered,f);uo(n,h,"string"==typeof o),i+=n.key+"-"+h.name,void 0!==a&&(i+=" "+a);var g=c&&void 0===s?fo(o):u,v={};for(var y in t)c&&"as"===y||g(y)&&(v[y]=t[y]);v.className=i,v.ref=r;var b=(0,e.createElement)(o,v),A=(0,e.createElement)(ho,null);return(0,e.createElement)(e.Fragment,null,A,b)}));return h.displayName=void 0!==o?o:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",h.defaultProps=n.defaultProps,h.__emotion_real=h,h.__emotion_base=l,h.__emotion_styles=p,h.__emotion_forwardProp=s,Object.defineProperty(h,"toString",{value:function(){return"."+a}}),h.withComponent=function(e,n){return t(e,w({},r,n,{shouldForwardProp:mo(h,n,!0)})).apply(void 0,p)},h}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){go[e]=go(e)}));const vo=go;function yo(e,t){return vo(e,t)}function bo(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function Ao(e,t,n={clone:!0}){const r=n.clone?w({},e):e;return bo(e)&&bo(t)&&Object.keys(t).forEach((o=>{"__proto__"!==o&&(bo(t[o])&&o in e&&bo(e[o])?r[o]=Ao(e[o],t[o],n):r[o]=t[o])})),r}const xo=function(e,t){return t?Ao(e,t,{clone:!1}):e};function Co(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}function wo(e){if("string"!=typeof e)throw new Error(Co(7));return e.charAt(0).toUpperCase()+e.slice(1)}const Eo={xs:0,sm:600,md:900,lg:1200,xl:1536},ko={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${Eo[e]}px)`};function So(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||ko;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||ko;return Object.keys(t).reduce(((r,o)=>{if(-1!==Object.keys(e.values||Eo).indexOf(o))r[e.up(o)]=n(t[o],o);else{const e=o;r[e]=t[e]}return r}),{})}return n(t)}function Bo(e,t){return t&&"string"==typeof t?t.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e):null}function Oo(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:Bo(e,n)||r,t&&(o=t(o)),o}const Po=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,a=e=>{if(null==e[t])return null;const a=e[t],i=Bo(e.theme,r)||{};return So(e,a,(e=>{let r=Oo(i,o,e);return e===r&&"string"==typeof e&&(r=Oo(i,o,`${t}${"default"===e?"":wo(e)}`,e)),!1===n?r:{[n]:r}}))};return a.propTypes={},a.filterProps=[t],a},No=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?xo(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n},To={m:"margin",p:"padding"},Ro={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},_o={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},Io=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!_o[e])return[e];e=_o[e]}const[t,n]=e.split(""),r=To[t],o=Ro[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),jo=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],Mo=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],Do=[...jo,...Mo];function Lo(e,t,n,r){const o=Bo(e,t)||n;return"number"==typeof o?e=>"string"==typeof e?e:o*e:Array.isArray(o)?e=>"string"==typeof e?e:o[e]:"function"==typeof o?o:()=>{}}function zo(e){return Lo(e,"spacing",8)}function $o(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function Fo(e,t){const n=zo(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=$o(t,n),e)),{})}(Io(n),r);return So(e,e[n],o)}(e,t,r,n))).reduce(xo,{})}function Uo(e){return Fo(e,jo)}function Wo(e){return Fo(e,Mo)}function Vo(e){return Fo(e,Do)}Uo.propTypes={},Uo.filterProps=jo,Wo.propTypes={},Wo.filterProps=Mo,Vo.propTypes={},Vo.filterProps=Do;const Yo=Vo;function Ho(e){return"number"!=typeof e?e:`${e}px solid`}const qo=Po({prop:"border",themeKey:"borders",transform:Ho}),Go=Po({prop:"borderTop",themeKey:"borders",transform:Ho}),Zo=Po({prop:"borderRight",themeKey:"borders",transform:Ho}),Qo=Po({prop:"borderBottom",themeKey:"borders",transform:Ho}),Ko=Po({prop:"borderLeft",themeKey:"borders",transform:Ho}),Xo=Po({prop:"borderColor",themeKey:"palette"}),Jo=Po({prop:"borderTopColor",themeKey:"palette"}),ea=Po({prop:"borderRightColor",themeKey:"palette"}),ta=Po({prop:"borderBottomColor",themeKey:"palette"}),na=Po({prop:"borderLeftColor",themeKey:"palette"}),ra=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=Lo(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:$o(t,e)});return So(e,e.borderRadius,n)}return null};ra.propTypes={},ra.filterProps=["borderRadius"];const oa=No(qo,Go,Zo,Qo,Ko,Xo,Jo,ea,ta,na,ra),aa=No(Po({prop:"displayPrint",cssProperty:!1,transform:e=>({"@media print":{display:e}})}),Po({prop:"display"}),Po({prop:"overflow"}),Po({prop:"textOverflow"}),Po({prop:"visibility"}),Po({prop:"whiteSpace"})),ia=No(Po({prop:"flexBasis"}),Po({prop:"flexDirection"}),Po({prop:"flexWrap"}),Po({prop:"justifyContent"}),Po({prop:"alignItems"}),Po({prop:"alignContent"}),Po({prop:"order"}),Po({prop:"flex"}),Po({prop:"flexGrow"}),Po({prop:"flexShrink"}),Po({prop:"alignSelf"}),Po({prop:"justifyItems"}),Po({prop:"justifySelf"})),la=e=>{if(void 0!==e.gap&&null!==e.gap){const t=Lo(e.theme,"spacing",8),n=e=>({gap:$o(t,e)});return So(e,e.gap,n)}return null};la.propTypes={},la.filterProps=["gap"];const sa=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=Lo(e.theme,"spacing",8),n=e=>({columnGap:$o(t,e)});return So(e,e.columnGap,n)}return null};sa.propTypes={},sa.filterProps=["columnGap"];const ua=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=Lo(e.theme,"spacing",8),n=e=>({rowGap:$o(t,e)});return So(e,e.rowGap,n)}return null};ua.propTypes={},ua.filterProps=["rowGap"];const ca=No(la,sa,ua,Po({prop:"gridColumn"}),Po({prop:"gridRow"}),Po({prop:"gridAutoFlow"}),Po({prop:"gridAutoColumns"}),Po({prop:"gridAutoRows"}),Po({prop:"gridTemplateColumns"}),Po({prop:"gridTemplateRows"}),Po({prop:"gridTemplateAreas"}),Po({prop:"gridArea"})),da=No(Po({prop:"position"}),Po({prop:"zIndex",themeKey:"zIndex"}),Po({prop:"top"}),Po({prop:"right"}),Po({prop:"bottom"}),Po({prop:"left"})),pa=No(Po({prop:"color",themeKey:"palette"}),Po({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"}),Po({prop:"backgroundColor",themeKey:"palette"})),fa=Po({prop:"boxShadow",themeKey:"shadows"});function ma(e){return e<=1&&0!==e?100*e+"%":e}const ha=Po({prop:"width",transform:ma}),ga=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,o;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(o=r.values)?void 0:o[t])||Eo[t]||ma(t)}};return So(e,e.maxWidth,t)}return null};ga.filterProps=["maxWidth"];const va=Po({prop:"minWidth",transform:ma}),ya=Po({prop:"height",transform:ma}),ba=Po({prop:"maxHeight",transform:ma}),Aa=Po({prop:"minHeight",transform:ma}),xa=(Po({prop:"size",cssProperty:"width",transform:ma}),Po({prop:"size",cssProperty:"height",transform:ma}),No(ha,ga,va,ya,ba,Aa,Po({prop:"boxSizing"}))),Ca=Po({prop:"fontFamily",themeKey:"typography"}),wa=Po({prop:"fontSize",themeKey:"typography"}),Ea=Po({prop:"fontStyle",themeKey:"typography"}),ka=Po({prop:"fontWeight",themeKey:"typography"}),Sa=Po({prop:"letterSpacing"}),Ba=Po({prop:"textTransform"}),Oa=Po({prop:"lineHeight"}),Pa=Po({prop:"textAlign"}),Na=No(Po({prop:"typography",cssProperty:!1,themeKey:"typography"}),Ca,wa,Ea,ka,Sa,Oa,Pa,Ba),Ta={borders:oa.filterProps,display:aa.filterProps,flexbox:ia.filterProps,grid:ca.filterProps,positions:da.filterProps,palette:pa.filterProps,shadows:fa.filterProps,sizing:xa.filterProps,spacing:Yo.filterProps,typography:Na.filterProps},Ra={borders:oa,display:aa,flexbox:ia,grid:ca,positions:da,palette:pa,shadows:fa,sizing:xa,spacing:Yo,typography:Na},_a=Object.keys(Ta).reduce(((e,t)=>(Ta[t].forEach((n=>{e[n]=Ra[t]})),e)),{}),Ia=function(e,t,n){const r={[e]:t,theme:n},o=_a[e];return o?o(r):{[e]:t}};function ja(e){const{sx:t,theme:n={}}=e||{};if(!t)return null;function r(e){let t=e;if("function"==typeof e)t=e(n);else if("object"!=typeof e)return e;const r=function(e={}){var t;return(null==e||null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(n.breakpoints),o=Object.keys(r);let a=r;return Object.keys(t).forEach((e=>{const r="function"==typeof(o=t[e])?o(n):o;var o;if(null!=r)if("object"==typeof r)if(_a[e])a=xo(a,Ia(e,r,n));else{const t=So({theme:n},r,(t=>({[e]:t})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(t,r)?a=xo(a,t):a[e]=ja({sx:r,theme:n})}else a=xo(a,Ia(e,r,n))})),i=a,o.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),i);var i}return Array.isArray(t)?t.map(r):r(t)}ja.filterProps=["sx"];const Ma=ja,Da=["sx"];const La=["values","unit","step"],za={borderRadius:4},$a=["breakpoints","palette","spacing","shape"],Fa=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:a={}}=e,i=q(e,$a),l=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5}=e,o=q(e,La),a=Object.keys(t);function i(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function l(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function s(e,o){const i=a.indexOf(o);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==i&&"number"==typeof t[a[i]]?t[a[i]]:o)-r/100}${n})`}return w({keys:a,values:t,up:i,down:l,between:s,only:function(e){return a.indexOf(e)+1<a.length?s(e,a[a.indexOf(e)+1]):i(e)},not:function(e){const t=a.indexOf(e);return 0===t?i(a[1]):t===a.length-1?l(a[t]):s(e,a[a.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},o)}(n),s=function(e=8){if(e.mui)return e;const t=zo({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(o);let u=Ao({breakpoints:l,direction:"ltr",components:{},palette:w({mode:"light"},r),spacing:s,shape:w({},za,a)},i);return u=t.reduce(((e,t)=>Ao(e,t)),u),u},Ua=e.createContext(null),Wa=Fa(),Va=function(t=Wa){return function(t=null){const n=e.useContext(Ua);return n&&(r=n,0!==Object.keys(r).length)?n:t;var r}(t)};var Ya=n(5893);const Ha=["className","component"],qa=e=>e,Ga=(()=>{let e=qa;return{configure(t){e=t},generate:t=>e(t),reset(){e=qa}}})();function Za(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function Qa(e){if(e.type)return e;if("#"===e.charAt(0))return Qa(function(e){e=e.substr(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(Co(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].substr(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(Co(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}function Ka(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function Xa(e){let t="hsl"===(e=Qa(e)).type?Qa(function(e){e=Qa(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const s=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),Ka({type:l,values:s})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Ja(e,t){return e=Qa(e),t=Za(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,Ka(e)}function ei(e,t){if(e=Qa(e),t=Za(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return Ka(e)}function ti(e,t){if(e=Qa(e),t=Za(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return Ka(e)}const ni={black:"#000",white:"#fff"},ri={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},oi="#f3e5f5",ai="#ce93d8",ii="#ba68c8",li="#ab47bc",si="#9c27b0",ui="#7b1fa2",ci="#e57373",di="#ef5350",pi="#f44336",fi="#d32f2f",mi="#c62828",hi="#ffb74d",gi="#ffa726",vi="#ff9800",yi="#f57c00",bi="#e65100",Ai="#e3f2fd",xi="#90caf9",Ci="#42a5f5",wi="#1976d2",Ei="#1565c0",ki="#4fc3f7",Si="#29b6f6",Bi="#03a9f4",Oi="#0288d1",Pi="#01579b",Ni="#81c784",Ti="#66bb6a",Ri="#4caf50",_i="#388e3c",Ii="#2e7d32",ji="#1b5e20",Mi=["mode","contrastThreshold","tonalOffset"],Di={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:ni.white,default:ni.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Li={text:{primary:ni.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:ni.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function zi(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=ti(e.main,o):"dark"===t&&(e.dark=ei(e.main,a)))}const $i=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],Fi={textTransform:"uppercase"},Ui='"Roboto", "Helvetica", "Arial", sans-serif';function Wi(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=Ui,fontSize:o=14,fontWeightLight:a=300,fontWeightRegular:i=400,fontWeightMedium:l=500,fontWeightBold:s=700,htmlFontSize:u=16,allVariants:c,pxToRem:d}=n,p=q(n,$i),f=o/14,m=d||(e=>e/u*f+"rem"),h=(e,t,n,o,a)=>{return w({fontFamily:r,fontWeight:e,fontSize:m(t),lineHeight:n},r===Ui?{letterSpacing:(i=o/t,Math.round(1e5*i)/1e5+"em")}:{},a,c);var i},g={h1:h(a,96,1.167,-1.5),h2:h(a,60,1.2,-.5),h3:h(i,48,1.167,0),h4:h(i,34,1.235,.25),h5:h(i,24,1.334,0),h6:h(l,20,1.6,.15),subtitle1:h(i,16,1.75,.15),subtitle2:h(l,14,1.57,.1),body1:h(i,16,1.5,.15),body2:h(i,14,1.43,.15),button:h(l,14,1.75,.4,Fi),caption:h(i,12,1.66,.4),overline:h(i,12,2.66,1,Fi)};return Ao(w({htmlFontSize:u,pxToRem:m,fontFamily:r,fontSize:o,fontWeightLight:a,fontWeightRegular:i,fontWeightMedium:l,fontWeightBold:s},g),p,{clone:!1})}function Vi(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Yi=["none",Vi(0,2,1,-1,0,1,1,0,0,1,3,0),Vi(0,3,1,-2,0,2,2,0,0,1,5,0),Vi(0,3,3,-2,0,3,4,0,0,1,8,0),Vi(0,2,4,-1,0,4,5,0,0,1,10,0),Vi(0,3,5,-1,0,5,8,0,0,1,14,0),Vi(0,3,5,-1,0,6,10,0,0,1,18,0),Vi(0,4,5,-2,0,7,10,1,0,2,16,1),Vi(0,5,5,-3,0,8,10,1,0,3,14,2),Vi(0,5,6,-3,0,9,12,1,0,3,16,2),Vi(0,6,6,-3,0,10,14,1,0,4,18,3),Vi(0,6,7,-4,0,11,15,1,0,4,20,3),Vi(0,7,8,-4,0,12,17,2,0,5,22,4),Vi(0,7,8,-4,0,13,19,2,0,5,24,4),Vi(0,7,9,-4,0,14,21,2,0,5,26,4),Vi(0,8,9,-5,0,15,22,2,0,6,28,5),Vi(0,8,10,-5,0,16,24,2,0,6,30,5),Vi(0,8,11,-5,0,17,26,2,0,6,32,5),Vi(0,9,11,-5,0,18,28,2,0,7,34,6),Vi(0,9,12,-6,0,19,29,2,0,7,36,6),Vi(0,10,13,-6,0,20,31,3,0,8,38,7),Vi(0,10,13,-6,0,21,33,3,0,8,40,7),Vi(0,10,14,-6,0,22,35,3,0,8,42,7),Vi(0,11,14,-7,0,23,36,3,0,9,44,8),Vi(0,11,15,-7,0,24,38,3,0,9,46,8)],Hi=["duration","easing","delay"],qi={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Gi={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Zi(e){return`${Math.round(e)}ms`}function Qi(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function Ki(e){const t=w({},qi,e.easing),n=w({},Gi,e.duration);return w({getAutoHeightDuration:Qi,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:i=0}=r;return q(r,Hi),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:Zi(o)} ${a} ${"string"==typeof i?i:Zi(i)}`)).join(",")}},e,{easing:t,duration:n})}const Xi={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},Ji=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const el=function(e={},...t){const{mixins:n={},palette:r={},transitions:o={},typography:a={}}=e,i=q(e,Ji),l=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,o=q(e,Mi),a=e.primary||function(e="light"){return"dark"===e?{main:xi,light:Ai,dark:Ci}:{main:wi,light:Ci,dark:Ei}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:ai,light:oi,dark:li}:{main:si,light:ii,dark:ui}}(t),l=e.error||function(e="light"){return"dark"===e?{main:pi,light:ci,dark:fi}:{main:fi,light:di,dark:mi}}(t),s=e.info||function(e="light"){return"dark"===e?{main:Si,light:ki,dark:Oi}:{main:Oi,light:Bi,dark:Pi}}(t),u=e.success||function(e="light"){return"dark"===e?{main:Ti,light:Ni,dark:_i}:{main:Ii,light:Ri,dark:ji}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:gi,light:hi,dark:yi}:{main:"#ed6c02",light:vi,dark:bi}}(t);function d(e){const t=function(e,t){const n=Xa(e),r=Xa(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Li.text.primary)>=n?Li.text.primary:Di.text.primary;return t}const p=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e=w({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(Co(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(Co(12,t?` (${t})`:"",JSON.stringify(e.main)));return zi(e,"light",o,r),zi(e,"dark",a,r),e.contrastText||(e.contrastText=d(e.main)),e},f={dark:Li,light:Di};return Ao(w({common:ni,mode:t,primary:p({color:a,name:"primary"}),secondary:p({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:p({color:l,name:"error"}),warning:p({color:c,name:"warning"}),info:p({color:s,name:"info"}),success:p({color:u,name:"success"}),grey:ri,contrastThreshold:n,getContrastText:d,augmentColor:p,tonalOffset:r},f[t]),o)}(r),s=Fa(e);let u=Ao(s,{mixins:(c=s.breakpoints,s.spacing,d=n,w({toolbar:{minHeight:56,[`${c.up("xs")} and (orientation: landscape)`]:{minHeight:48},[c.up("sm")]:{minHeight:64}}},d)),palette:l,shadows:Yi.slice(),typography:Wi(l,a),transitions:Ki(o),zIndex:w({},Xi)});var c,d;return u=Ao(u,i),u=t.reduce(((e,t)=>Ao(e,t)),u),u},tl=function(t={}){const{defaultTheme:n,defaultClassName:r="MuiBox-root",generateClassName:o}=t,a=yo("div")(Ma);return e.forwardRef((function(e,t){const i=Va(n),l=function(e){const{sx:t}=e,n=q(e,Da),{systemProps:r,otherProps:o}=(e=>{const t={systemProps:{},otherProps:{}};return Object.keys(e).forEach((n=>{_a[n]?t.systemProps[n]=e[n]:t.otherProps[n]=e[n]})),t})(n);let a;return a=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return bo(n)?w({},r,n):r}:w({},r,t),w({},o,{sx:a})}(e),{className:s,component:u="div"}=l,c=q(l,Ha);return(0,Ya.jsx)(a,w({as:u,ref:t,className:Un(s,o?o(r):r),theme:i},c))}))}({defaultTheme:el(),defaultClassName:"MuiBox-root",generateClassName:Ga.generate}),nl=tl,rl={active:"Mui-active",checked:"Mui-checked",completed:"Mui-completed",disabled:"Mui-disabled",error:"Mui-error",expanded:"Mui-expanded",focused:"Mui-focused",focusVisible:"Mui-focusVisible",required:"Mui-required",selected:"Mui-selected"};function ol(e,t){return rl[t]||`${Ga.generate(e)}-${t}`}function al(e,t){const n={};return t.forEach((t=>{n[t]=ol(e,t)})),n}function il(e){return ol("MuiSlider",e)}const ll=al("MuiSlider",["root","active","focusVisible","disabled","dragging","marked","vertical","trackInverted","trackFalse","rail","track","mark","markActive","markLabel","markLabelActive","thumb","valueLabel","valueLabelOpen","valueLabelCircle","valueLabelLabel"]),sl=function(t){const{children:n,className:r,value:o,theme:a}=t,i=(e=>{const{open:t}=e;return{offset:Un(t&&ll.valueLabelOpen),circle:ll.valueLabelCircle,label:ll.valueLabelLabel}})(t);return e.cloneElement(n,{className:Un(n.props.className)},(0,Ya.jsxs)(e.Fragment,{children:[n.props.children,(0,Ya.jsx)("span",{className:Un(i.offset,r),theme:a,"aria-hidden":!0,children:(0,Ya.jsx)("span",{className:i.circle,children:(0,Ya.jsx)("span",{className:i.label,children:o})})})]}))},ul=function(e){return"string"==typeof e};function cl(e,t={},n){return ul(e)?t:w({},t,{ownerState:w({},t.ownerState,n)})}function dl(e,t,n){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>(r&&(n&&n[r]&&e.push(n[r]),e.push(t(r))),e)),[]).join(" ")})),r}function pl(e){return e&&e.ownerDocument||document}function fl({controlled:t,default:n,name:r,state:o="value"}){const{current:a}=e.useRef(void 0!==t),[i,l]=e.useState(n);return[a?t:i,e.useCallback((e=>{a||l(e)}),[])]}let ml,hl=!0,gl=!1;const vl={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function yl(e){e.metaKey||e.altKey||e.ctrlKey||(hl=!0)}function bl(){hl=!1}function Al(){"hidden"===this.visibilityState&&gl&&(hl=!0)}function xl(){const t=e.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",yl,!0),t.addEventListener("mousedown",bl,!0),t.addEventListener("pointerdown",bl,!0),t.addEventListener("touchstart",bl,!0),t.addEventListener("visibilitychange",Al,!0))}),[]),n=e.useRef(!1);return{isFocusVisibleRef:n,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return hl||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!vl[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(n.current=!0,!0)},onBlur:function(){return!!n.current&&(gl=!0,window.clearTimeout(ml),ml=window.setTimeout((()=>{gl=!1}),100),n.current=!1,!0)},ref:t}}function Cl(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function wl(t,n){return e.useMemo((()=>null==t&&null==n?null:e=>{Cl(t,e),Cl(n,e)}),[t,n])}const El="undefined"!=typeof window?e.useLayoutEffect:e.useEffect;function kl(t){const n=e.useRef(t);return El((()=>{n.current=t})),e.useCallback(((...e)=>(0,n.current)(...e)),[])}const Sl={border:0,clip:"rect(0 0 0 0)",height:"1px",margin:-1,overflow:"hidden",padding:0,position:"absolute",whiteSpace:"nowrap",width:"1px"};function Bl(e,t){return e-t}function Ol(e,t,n){return null==e?t:Math.min(Math.max(t,e),n)}function Pl(e,t){var n;const{index:r}=null!=(n=e.reduce(((e,n,r)=>{const o=Math.abs(t-n);return null===e||o<e.distance||o===e.distance?{distance:o,index:r}:e}),null))?n:{};return r}function Nl(e,t){if(void 0!==t.current&&e.changedTouches){const n=e;for(let e=0;e<n.changedTouches.length;e+=1){const r=n.changedTouches[e];if(r.identifier===t.current)return{x:r.clientX,y:r.clientY}}return!1}return{x:e.clientX,y:e.clientY}}function Tl(e,t,n){return 100*(e-t)/(n-t)}function Rl({values:e,newValue:t,index:n}){const r=e.slice();return r[n]=t,r.sort(Bl)}function _l({sliderRef:e,activeIndex:t,setActive:n}){var r,o;const a=pl(e.current);var i;null!=(r=e.current)&&r.contains(a.activeElement)&&Number(null==a||null==(o=a.activeElement)?void 0:o.getAttribute("data-index"))===t||null==(i=e.current)||i.querySelector(`[type="range"][data-index="${t}"]`).focus(),n&&n(t)}const Il={horizontal:{offset:e=>({left:`${e}%`}),leap:e=>({width:`${e}%`})},"horizontal-reverse":{offset:e=>({right:`${e}%`}),leap:e=>({width:`${e}%`})},vertical:{offset:e=>({bottom:`${e}%`}),leap:e=>({height:`${e}%`})}},jl=e=>e;let Ml;function Dl(){return void 0===Ml&&(Ml="undefined"==typeof CSS||"function"!=typeof CSS.supports||CSS.supports("touch-action","none")),Ml}function Ll(t){const{ref:n,"aria-labelledby":r,defaultValue:o,disableSwap:a=!1,disabled:i=!1,marks:l=!1,max:s=100,min:u=0,name:c,onChange:d,onChangeCommitted:p,orientation:f="horizontal",scale:m=jl,step:h=1,tabIndex:g,value:v,isRtl:y=!1}=t,b=e.useRef(),[A,x]=e.useState(-1),[C,E]=e.useState(-1),[k,S]=e.useState(!1),B=e.useRef(0),[O,P]=fl({controlled:v,default:null!=o?o:u,name:"Slider"}),N=d&&((e,t,n)=>{const r=e.nativeEvent||e,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:t,name:c}}),d(o,t,n)}),T=Array.isArray(O);let R=T?O.slice().sort(Bl):[O];R=R.map((e=>Ol(e,u,s)));const _=!0===l&&null!==h?[...Array(Math.floor((s-u)/h)+1)].map(((e,t)=>({value:u+h*t}))):l||[],I=_.map((e=>e.value)),{isFocusVisibleRef:j,onBlur:M,onFocus:D,ref:L}=xl(),[z,$]=e.useState(-1),F=e.useRef(),U=wl(L,F),W=wl(n,U),V=e=>t=>{var n;const r=Number(t.currentTarget.getAttribute("data-index"));D(t),!0===j.current&&$(r),E(r),null==e||null==(n=e.onFocus)||n.call(e,t)},Y=e=>t=>{var n;M(t),!1===j.current&&$(-1),E(-1),null==e||null==(n=e.onBlur)||n.call(e,t)};El((()=>{var e;i&&F.current.contains(document.activeElement)&&(null==(e=document.activeElement)||e.blur())}),[i]),i&&-1!==A&&x(-1),i&&-1!==z&&$(-1);const H=e=>t=>{var n;null==(n=e.onChange)||n.call(e,t);const r=Number(t.currentTarget.getAttribute("data-index")),o=R[r],i=I.indexOf(o);let l=t.target.valueAsNumber;if(_&&null==h&&(l=l<o?I[i-1]:I[i+1]),l=Ol(l,u,s),_&&null==h){const e=I.indexOf(R[r]);l=l<R[r]?I[e-1]:I[e+1]}if(T){a&&(l=Ol(l,R[r-1]||-1/0,R[r+1]||1/0));const e=l;l=Rl({values:R,newValue:l,index:r});let t=r;a||(t=l.indexOf(e)),_l({sliderRef:F,activeIndex:t})}P(l),$(r),N&&N(t,l,r),p&&p(t,l)},q=e.useRef();let G=f;y&&"horizontal"===f&&(G+="-reverse");const Z=({finger:e,move:t=!1,values:n})=>{const{current:r}=F,{width:o,height:i,bottom:l,left:c}=r.getBoundingClientRect();let d,p;if(d=0===G.indexOf("vertical")?(l-e.y)/i:(e.x-c)/o,-1!==G.indexOf("-reverse")&&(d=1-d),p=function(e,t,n){return(n-t)*e+t}(d,u,s),h)p=function(e,t,n){const r=Math.round((e-n)/t)*t+n;return Number(r.toFixed(function(e){if(Math.abs(e)<1){const t=e.toExponential().split("e-"),n=t[0].split(".")[1];return(n?n.length:0)+parseInt(t[1],10)}const t=e.toString().split(".")[1];return t?t.length:0}(t)))}(p,h,u);else{const e=Pl(I,p);p=I[e]}p=Ol(p,u,s);let f=0;if(T){f=t?q.current:Pl(n,p),a&&(p=Ol(p,n[f-1]||-1/0,n[f+1]||1/0));const e=p;p=Rl({values:n,newValue:p,index:f}),a&&t||(f=p.indexOf(e),q.current=f)}return{newValue:p,activeIndex:f}},Q=kl((e=>{const t=Nl(e,b);if(!t)return;if(B.current+=1,"mousemove"===e.type&&0===e.buttons)return void K(e);const{newValue:n,activeIndex:r}=Z({finger:t,move:!0,values:R});_l({sliderRef:F,activeIndex:r,setActive:x}),P(n),!k&&B.current>2&&S(!0),N&&N(e,n,r)})),K=kl((e=>{const t=Nl(e,b);if(S(!1),!t)return;const{newValue:n}=Z({finger:t,values:R});x(-1),"touchend"===e.type&&E(-1),p&&p(e,n),b.current=void 0,J()})),X=kl((e=>{Dl()||e.preventDefault();const t=e.changedTouches[0];null!=t&&(b.current=t.identifier);const n=Nl(e,b);if(!1!==n){const{newValue:t,activeIndex:r}=Z({finger:n,values:R});_l({sliderRef:F,activeIndex:r,setActive:x}),P(t),N&&N(e,t,r)}B.current=0;const r=pl(F.current);r.addEventListener("touchmove",Q),r.addEventListener("touchend",K)})),J=e.useCallback((()=>{const e=pl(F.current);e.removeEventListener("mousemove",Q),e.removeEventListener("mouseup",K),e.removeEventListener("touchmove",Q),e.removeEventListener("touchend",K)}),[K,Q]);e.useEffect((()=>{const{current:e}=F;return e.addEventListener("touchstart",X,{passive:Dl()}),()=>{e.removeEventListener("touchstart",X,{passive:Dl()}),J()}}),[J,X]),e.useEffect((()=>{i&&J()}),[i,J]);const ee=e=>t=>{var n;if(null==(n=e.onMouseDown)||n.call(e,t),t.defaultPrevented)return;if(0!==t.button)return;t.preventDefault();const r=Nl(t,b);if(!1!==r){const{newValue:e,activeIndex:n}=Z({finger:r,values:R});_l({sliderRef:F,activeIndex:n,setActive:x}),P(e),N&&N(t,e,n)}B.current=0;const o=pl(F.current);o.addEventListener("mousemove",Q),o.addEventListener("mouseup",K)},te=Tl(T?R[0]:u,u,s),ne=Tl(R[R.length-1],u,s)-te,re=e=>t=>{var n;null==(n=e.onMouseOver)||n.call(e,t);const r=Number(t.currentTarget.getAttribute("data-index"));E(r)},oe=e=>t=>{var n;null==(n=e.onMouseLeave)||n.call(e,t),E(-1)};return{axis:G,axisProps:Il,getRootProps:e=>{const t=w({},e,{onMouseDown:ee(e||{})});return w({ref:W},t)},getHiddenInputProps:e=>{const n=w({},e,{onChange:H(e||{}),onFocus:V(e||{}),onBlur:Y(e||{})});return w({tabIndex:g,"aria-labelledby":r,"aria-orientation":f,"aria-valuemax":m(s),"aria-valuemin":m(u),name:c,type:"range",min:t.min,max:t.max,step:t.step,disabled:i},n,{style:w({},Sl,{direction:y?"rtl":"ltr",width:"100%",height:"100%"})})},getThumbProps:e=>{const t=w({},e,{onMouseOver:re(e||{}),onMouseLeave:oe(e||{})});return w({},t)},dragging:k,marks:_,values:R,active:A,focusVisible:z,open:C,range:T,trackOffset:te,trackLeap:ne}}const zl=["aria-label","aria-valuetext","className","component","classes","disableSwap","disabled","getAriaLabel","getAriaValueText","marks","max","min","name","onChange","onChangeCommitted","onMouseDown","orientation","scale","step","tabIndex","track","value","valueLabelDisplay","valueLabelFormat","isRtl","components","componentsProps"],$l=e=>e,Fl=({children:e})=>e,Ul=e.forwardRef((function(t,n){var r,o,a,i,l,s,u;const{"aria-label":c,"aria-valuetext":d,className:p,component:f,classes:m,disableSwap:h=!1,disabled:g=!1,getAriaLabel:v,getAriaValueText:y,marks:b=!1,max:A=100,min:x=0,onMouseDown:C,orientation:E="horizontal",scale:k=$l,step:S=1,track:B="normal",valueLabelDisplay:O="off",valueLabelFormat:P=$l,isRtl:N=!1,components:T={},componentsProps:R={}}=t,_=q(t,zl),I=w({},t,{mark:b,classes:m,disabled:g,isRtl:N,max:A,min:x,orientation:E,scale:k,step:S,track:B,valueLabelDisplay:O,valueLabelFormat:P}),{axisProps:j,getRootProps:M,getHiddenInputProps:D,getThumbProps:L,open:z,active:$,axis:F,range:U,focusVisible:W,dragging:V,marks:Y,values:H,trackOffset:G,trackLeap:Z}=Ll(w({},I,{ref:n}));I.marked=Y.length>0&&Y.some((e=>e.label)),I.dragging=V;const Q=null!=(r=null!=f?f:T.Root)?r:"span",K=cl(Q,w({},_,R.root),I),X=null!=(o=T.Rail)?o:"span",J=cl(X,R.rail,I),ee=null!=(a=T.Track)?a:"span",te=cl(ee,R.track,I),ne=w({},j[F].offset(G),j[F].leap(Z)),re=null!=(i=T.Thumb)?i:"span",oe=cl(re,R.thumb,I),ae=null!=(l=T.ValueLabel)?l:sl,ie=cl(ae,R.valueLabel,I),le=null!=(s=T.Mark)?s:"span",se=cl(le,R.mark,I),ue=null!=(u=T.MarkLabel)?u:"span",ce=cl(ue,R.markLabel,I),de=T.Input||"input",pe=cl(de,R.input,I),fe=D(),me=(e=>{const{disabled:t,dragging:n,marked:r,orientation:o,track:a,classes:i}=e;return dl({root:["root",t&&"disabled",n&&"dragging",r&&"marked","vertical"===o&&"vertical","inverted"===a&&"trackInverted",!1===a&&"trackFalse"],rail:["rail"],track:["track"],mark:["mark"],markActive:["markActive"],markLabel:["markLabel"],markLabelActive:["markLabelActive"],valueLabel:["valueLabel"],thumb:["thumb",t&&"disabled"],active:["active"],disabled:["disabled"],focusVisible:["focusVisible"]},il,i)})(I);return(0,Ya.jsxs)(Q,w({},K,M({onMouseDown:C}),{className:Un(me.root,K.className,p),children:[(0,Ya.jsx)(X,w({},J,{className:Un(me.rail,J.className)})),(0,Ya.jsx)(ee,w({},te,{className:Un(me.track,te.className),style:w({},ne,te.style)})),Y.map(((t,n)=>{const r=Tl(t.value,x,A),o=j[F].offset(r);let a;return a=!1===B?-1!==H.indexOf(t.value):"normal"===B&&(U?t.value>=H[0]&&t.value<=H[H.length-1]:t.value<=H[0])||"inverted"===B&&(U?t.value<=H[0]||t.value>=H[H.length-1]:t.value>=H[0]),(0,Ya.jsxs)(e.Fragment,{children:[(0,Ya.jsx)(le,w({"data-index":n},se,!ul(le)&&{markActive:a},{style:w({},o,se.style),className:Un(me.mark,se.className,a&&me.markActive)})),null!=t.label?(0,Ya.jsx)(ue,w({"aria-hidden":!0,"data-index":n},ce,!ul(ue)&&{markLabelActive:a},{style:w({},o,ce.style),className:Un(me.markLabel,ce.className,a&&me.markLabelActive),children:t.label})):null]},t.value)})),H.map(((t,n)=>{const r=Tl(t,x,A),o=j[F].offset(r),a="off"===O?Fl:ae;return(0,Ya.jsx)(e.Fragment,{children:(0,Ya.jsx)(a,w({},!ul(a)&&{valueLabelFormat:P,valueLabelDisplay:O,value:"function"==typeof P?P(k(t),n):P,index:n,open:z===n||$===n||"on"===O,disabled:g},ie,{className:Un(me.valueLabel,ie.className),children:(0,Ya.jsx)(re,w({"data-index":n},oe,L(),{className:Un(me.thumb,oe.className,$===n&&me.active,W===n&&me.focusVisible)},!ul(re)&&{ownerState:w({},I,oe.ownerState)},{style:w({},o,{pointerEvents:h&&$!==n?"none":void 0},oe.style),children:(0,Ya.jsx)(de,w({},fe,{"data-index":n,"aria-label":v?v(n):c,"aria-valuenow":k(t),"aria-valuetext":y?y(k(t),n):d,value:H[n]},!ul(de)&&{ownerState:w({},I,pe.ownerState)},pe,{style:w({},fe.style,pe.style)}))}))}))},n)}))]}))})),Wl=Ul;const Vl=el();function Yl({props:e,name:t}){return function({props:e,name:t,defaultTheme:n}){return function(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?function(e,t){const n=w({},t);return Object.keys(e).forEach((t=>{void 0===n[t]&&(n[t]=e[t])})),n}(t.components[n].defaultProps,r):r}({theme:Va(n),name:t,props:e})}({props:e,name:t,defaultTheme:Vl})}const Hl=["variant"];function ql(e){return 0===e.length}function Gl(e){const{variant:t}=e,n=q(e,Hl);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?ql(r)?e[t]:wo(e[t]):`${ql(r)?t:wo(t)}${wo(e[t].toString())}`})),r}const Zl=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],Ql=["theme"],Kl=["theme"];function Xl(e){return 0===Object.keys(e).length}function Jl(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const es=Fa(),ts=e=>Jl(e)&&"classes"!==e,ns=Jl,rs=function(e={}){const{defaultTheme:t=es,rootShouldForwardProp:n=Jl,slotShouldForwardProp:r=Jl}=e;return(e,o={})=>{const{name:a,slot:i,skipVariantsResolver:l,skipSx:s,overridesResolver:u}=o,c=q(o,Zl),d=void 0!==l?l:i&&"Root"!==i||!1,p=s||!1;let f=Jl;"Root"===i?f=n:i&&(f=r);const m=yo(e,w({shouldForwardProp:f,label:void 0},c)),h=(e,...n)=>{const r=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:r}=n,o=q(n,Ql);return e(w({theme:Xl(r)?t:r},o))}:e)):[];let o=e;a&&u&&r.push((e=>{const n=Xl(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(a,n);if(r){const t={};return Object.entries(r).forEach((([n,r])=>{t[n]="function"==typeof r?r(e):r})),u(e,t)}return null})),a&&!d&&r.push((e=>{const n=Xl(e.theme)?t:e.theme;return((e,t,n,r)=>{var o,a;const{ownerState:i={}}=e,l=[],s=null==n||null==(o=n.components)||null==(a=o[r])?void 0:a.variants;return s&&s.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{i[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&l.push(t[Gl(n.props)])})),l})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=Gl(e.props);r[t]=e.style})),r})(a,n),n,a)})),p||r.push((e=>{const n=Xl(e.theme)?t:e.theme;return Ma(w({},e,{theme:n}))}));const i=r.length-n.length;if(Array.isArray(e)&&i>0){const t=new Array(i).fill("");o=[...e,...t],o.raw=[...e.raw,...t]}else"function"==typeof e&&(o=n=>{let{theme:r}=n,o=q(n,Kl);return e(w({theme:Xl(r)?t:r},o))});return m(o,...r)};return m.withConfig&&(h.withConfig=m.withConfig),h}}({defaultTheme:Vl,rootShouldForwardProp:ts}),os=rs;function as(){return Va(Vl)}const is=e=>!e||!ul(e),ls=wo,ss=["component","components","componentsProps","color","size"],us=w({},ll,al("MuiSlider",["colorPrimary","colorSecondary","thumbColorPrimary","thumbColorSecondary","sizeSmall","thumbSizeSmall"])),cs=os("span",{name:"MuiSlider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,r=!0===n.marksProp&&null!==n.step?[...Array(Math.floor((n.max-n.min)/n.step)+1)].map(((e,t)=>({value:n.min+n.step*t}))):n.marksProp||[],o=r.length>0&&r.some((e=>e.label));return[t.root,t[`color${ls(n.color)}`],"medium"!==n.size&&t[`size${ls(n.size)}`],o&&t.marked,"vertical"===n.orientation&&t.vertical,"inverted"===n.track&&t.trackInverted,!1===n.track&&t.trackFalse]}})((({theme:e,ownerState:t})=>w({borderRadius:12,boxSizing:"content-box",display:"inline-block",position:"relative",cursor:"pointer",touchAction:"none",color:e.palette[t.color].main,WebkitTapHighlightColor:"transparent"},"horizontal"===t.orientation&&w({height:4,width:"100%",padding:"13px 0","@media (pointer: coarse)":{padding:"20px 0"}},"small"===t.size&&{height:2},t.marked&&{marginBottom:20}),"vertical"===t.orientation&&w({height:"100%",width:4,padding:"0 13px","@media (pointer: coarse)":{padding:"0 20px"}},"small"===t.size&&{width:2},t.marked&&{marginRight:44}),{"@media print":{colorAdjust:"exact"},[`&.${us.disabled}`]:{pointerEvents:"none",cursor:"default",color:e.palette.grey[400]},[`&.${us.dragging}`]:{[`& .${us.thumb}, & .${us.track}`]:{transition:"none"}}}))),ds=os("span",{name:"MuiSlider",slot:"Rail",overridesResolver:(e,t)=>t.rail})((({ownerState:e})=>w({display:"block",position:"absolute",borderRadius:"inherit",backgroundColor:"currentColor",opacity:.38},"horizontal"===e.orientation&&{width:"100%",height:"inherit",top:"50%",transform:"translateY(-50%)"},"vertical"===e.orientation&&{height:"100%",width:"inherit",left:"50%",transform:"translateX(-50%)"},"inverted"===e.track&&{opacity:1}))),ps=os("span",{name:"MuiSlider",slot:"Track",overridesResolver:(e,t)=>t.track})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?ti(e.palette[t.color].main,.62):ei(e.palette[t.color].main,.5);return w({display:"block",position:"absolute",borderRadius:"inherit",border:"1px solid currentColor",backgroundColor:"currentColor",transition:e.transitions.create(["left","width","bottom","height"],{duration:e.transitions.duration.shortest})},"small"===t.size&&{border:"none"},"horizontal"===t.orientation&&{height:"inherit",top:"50%",transform:"translateY(-50%)"},"vertical"===t.orientation&&{width:"inherit",left:"50%",transform:"translateX(-50%)"},!1===t.track&&{display:"none"},"inverted"===t.track&&{backgroundColor:n,borderColor:n})})),fs=os("span",{name:"MuiSlider",slot:"Thumb",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.thumb,t[`thumbColor${ls(n.color)}`],"medium"!==n.size&&t[`thumbSize${ls(n.size)}`]]}})((({theme:e,ownerState:t})=>w({position:"absolute",width:20,height:20,boxSizing:"border-box",borderRadius:"50%",outline:0,backgroundColor:"currentColor",display:"flex",alignItems:"center",justifyContent:"center",transition:e.transitions.create(["box-shadow","left","bottom"],{duration:e.transitions.duration.shortest})},"small"===t.size&&{width:12,height:12},"horizontal"===t.orientation&&{top:"50%",transform:"translate(-50%, -50%)"},"vertical"===t.orientation&&{left:"50%",transform:"translate(-50%, 50%)"},{"&:before":w({position:"absolute",content:'""',borderRadius:"inherit",width:"100%",height:"100%",boxShadow:e.shadows[2]},"small"===t.size&&{boxShadow:"none"}),"&::after":{position:"absolute",content:'""',borderRadius:"50%",width:42,height:42,top:"50%",left:"50%",transform:"translate(-50%, -50%)"},[`&:hover, &.${us.focusVisible}`]:{boxShadow:`0px 0px 0px 8px ${Ja(e.palette[t.color].main,.16)}`,"@media (hover: none)":{boxShadow:"none"}},[`&.${us.active}`]:{boxShadow:`0px 0px 0px 14px ${Ja(e.palette[t.color].main,.16)}`},[`&.${us.disabled}`]:{"&:hover":{boxShadow:"none"}}}))),ms=os(sl,{name:"MuiSlider",slot:"ValueLabel",overridesResolver:(e,t)=>t.valueLabel})((({theme:e,ownerState:t})=>w({[`&.${us.valueLabelOpen}`]:{transform:"translateY(-100%) scale(1)"},zIndex:1,whiteSpace:"nowrap"},e.typography.body2,{fontWeight:500,transition:e.transitions.create(["transform"],{duration:e.transitions.duration.shortest}),top:-10,transformOrigin:"bottom center",transform:"translateY(-100%) scale(0)",position:"absolute",backgroundColor:e.palette.grey[600],borderRadius:2,color:e.palette.common.white,display:"flex",alignItems:"center",justifyContent:"center",padding:"0.25rem 0.75rem"},"small"===t.size&&{fontSize:e.typography.pxToRem(12),padding:"0.25rem 0.5rem"},{"&:before":{position:"absolute",content:'""',width:8,height:8,bottom:0,left:"50%",transform:"translate(-50%, 50%) rotate(45deg)",backgroundColor:"inherit"}}))),hs=os("span",{name:"MuiSlider",slot:"Mark",shouldForwardProp:e=>ns(e)&&"markActive"!==e,overridesResolver:(e,t)=>t.mark})((({theme:e,ownerState:t,markActive:n})=>w({position:"absolute",width:2,height:2,borderRadius:1,backgroundColor:"currentColor"},"horizontal"===t.orientation&&{top:"50%",transform:"translate(-1px, -50%)"},"vertical"===t.orientation&&{left:"50%",transform:"translate(-50%, 1px)"},n&&{backgroundColor:e.palette.background.paper,opacity:.8}))),gs=os("span",{name:"MuiSlider",slot:"MarkLabel",shouldForwardProp:e=>ns(e)&&"markLabelActive"!==e,overridesResolver:(e,t)=>t.markLabel})((({theme:e,ownerState:t,markLabelActive:n})=>w({},e.typography.body2,{color:e.palette.text.secondary,position:"absolute",whiteSpace:"nowrap"},"horizontal"===t.orientation&&{top:30,transform:"translateX(-50%)","@media (pointer: coarse)":{top:40}},"vertical"===t.orientation&&{left:36,transform:"translateY(50%)","@media (pointer: coarse)":{left:44}},n&&{color:e.palette.text.primary}))),vs=e.forwardRef((function(e,t){var n,r,o,a;const i=Yl({props:e,name:"MuiSlider"}),l="rtl"===as().direction,{component:s="span",components:u={},componentsProps:c={},color:d="primary",size:p="medium"}=i,f=q(i,ss),m=(e=>{const{color:t,size:n,classes:r={}}=e;return w({},r,{root:Un(r.root,il(`color${ls(t)}`),r[`color${ls(t)}`],n&&[il(`size${ls(n)}`),r[`size${ls(n)}`]]),thumb:Un(r.thumb,il(`thumbColor${ls(t)}`),r[`thumbColor${ls(t)}`],n&&[il(`thumbSize${ls(n)}`),r[`thumbSize${ls(n)}`]])})})(w({},i,{color:d,size:p}));return(0,Ya.jsx)(Wl,w({},f,{isRtl:l,components:w({Root:cs,Rail:ds,Track:ps,Thumb:fs,ValueLabel:ms,Mark:hs,MarkLabel:gs},u),componentsProps:w({},c,{root:w({},c.root,is(u.Root)&&{as:s,ownerState:w({},null==(n=c.root)?void 0:n.ownerState,{color:d,size:p})}),thumb:w({},c.thumb,is(u.Thumb)&&{ownerState:w({},null==(r=c.thumb)?void 0:r.ownerState,{color:d,size:p})}),track:w({},c.track,is(u.Track)&&{ownerState:w({},null==(o=c.track)?void 0:o.ownerState,{color:d,size:p})}),valueLabel:w({},c.valueLabel,is(u.ValueLabel)&&{ownerState:w({},null==(a=c.valueLabel)?void 0:a.ownerState,{color:d,size:p})})}),classes:m,ref:t}))}));function ys(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const bs=function(t){var n,r,o=t.updateTimeRange,a=(n=e.useState([0,1440]),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return ys(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ys(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[0],l=a[1];return e.createElement(nl,{sx:{width:"100%",height:"90px",overflow:"hidden"}},e.createElement(vs,{sx:{height:"40px",color:"rgba(139, 79, 11, 0.616)"},value:i,onChange:function(e,t){var n=t[0]/60,r=Math.floor(n),a=60*(n-r),i=Math.round(a),s=t[1]/60,u=Math.floor(s),c=60*(s-u),d=Math.round(c);i<10&&(i+="0"),d<10&&(d+="0");var p=r>=12?"pm":"am",f=u>=12?"pm":"am";o([(r=r%12||12)+":"+i+" "+p,(u=u%12||12)+":"+d+" "+f]),l(t)},step:15,min:0,max:1440}))},As=["children","classes","className","label","notched"],xs=os("fieldset")({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),Cs=os("legend",{skipSx:!0})((({ownerState:e,theme:t})=>w({float:"unset"},void 0===e.label&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},void 0!==e.label&&w({display:"block",width:"auto",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})})))),ws=e.createContext();function Es(){return e.useContext(ws)}function ks({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}function Ss(e){return ol("MuiOutlinedInput",e)}const Bs=al("MuiOutlinedInput",["root","colorSecondary","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","notchedOutline","input","inputSizeSmall","inputMultiline","inputAdornedStart","inputAdornedEnd"]);function Os(e){return pl(e).defaultView||window}function Ps(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}const Ns=["onChange","maxRows","minRows","style","value"];function Ts(e,t){return parseInt(e[t],10)||0}const Rs={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},_s=e.forwardRef((function(t,n){const{onChange:r,maxRows:o,minRows:a=1,style:i,value:l}=t,s=q(t,Ns),{current:u}=e.useRef(null!=l),c=e.useRef(null),d=wl(n,c),p=e.useRef(null),f=e.useRef(0),[m,h]=e.useState({}),g=e.useCallback((()=>{const e=c.current,n=Os(e).getComputedStyle(e);if("0px"===n.width)return;const r=p.current;r.style.width=n.width,r.value=e.value||t.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const i=n["box-sizing"],l=Ts(n,"padding-bottom")+Ts(n,"padding-top"),s=Ts(n,"border-bottom-width")+Ts(n,"border-top-width"),u=r.scrollHeight;r.value="x";const d=r.scrollHeight;let m=u;a&&(m=Math.max(Number(a)*d,m)),o&&(m=Math.min(Number(o)*d,m)),m=Math.max(m,d);const g=m+("border-box"===i?l+s:0),v=Math.abs(m-u)<=1;h((e=>f.current<20&&(g>0&&Math.abs((e.outerHeightStyle||0)-g)>1||e.overflow!==v)?(f.current+=1,{overflow:v,outerHeightStyle:g}):e))}),[o,a,t.placeholder]);return e.useEffect((()=>{const e=Ps((()=>{f.current=0,g()})),t=Os(c.current);let n;return t.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(n=new ResizeObserver(e),n.observe(c.current)),()=>{e.clear(),t.removeEventListener("resize",e),n&&n.disconnect()}}),[g]),El((()=>{g()})),e.useEffect((()=>{f.current=0}),[l]),(0,Ya.jsxs)(e.Fragment,{children:[(0,Ya.jsx)("textarea",w({value:l,onChange:e=>{f.current=0,u||g(),r&&r(e)},ref:d,rows:a,style:w({height:m.outerHeightStyle,overflow:m.overflow?"hidden":null},i)},s)),(0,Ya.jsx)("textarea",{"aria-hidden":!0,className:t.className,readOnly:!0,ref:p,tabIndex:-1,style:w({},Rs,i,{padding:0})})]})})),Is=_s,js=wl,Ms=El;var Ds=io((function(t,n){var r=t.styles,o=oo([r],void 0,(0,e.useContext)(lo)),a=(0,e.useRef)();return(0,e.useLayoutEffect)((function(){var e=n.key+"-global",t=new Hn({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,i=document.querySelector('style[data-emotion="'+e+" "+o.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==i&&(r=!0,i.setAttribute("data-emotion",e),t.hydrate([i])),a.current=[t,r],function(){t.flush()}}),[n]),(0,e.useLayoutEffect)((function(){var e=a.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==o.next&&uo(n,o.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",o,t,!1)}}),[n,o.name]),null}));function Ls(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return oo(t)}var zs=function(){var e=Ls.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};function $s(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,Ya.jsx)(Ds,{styles:r})}const Fs=function(e){return(0,Ya.jsx)($s,w({},e,{defaultTheme:Vl}))};function Us(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Ws(e,t=!1){return e&&(Us(e.value)&&""!==e.value||t&&Us(e.defaultValue)&&""!==e.defaultValue)}function Vs(e){return ol("MuiInputBase",e)}const Ys=al("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),Hs=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","startAdornment","type","value"],qs=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${ls(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},Gs=(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},Zs=os("div",{name:"MuiInputBase",slot:"Root",overridesResolver:qs})((({theme:e,ownerState:t})=>w({},e.typography.body1,{color:e.palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${Ys.disabled}`]:{color:e.palette.text.disabled,cursor:"default"}},t.multiline&&w({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),Qs=os("input",{name:"MuiInputBase",slot:"Input",overridesResolver:Gs})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r={color:"currentColor",opacity:n?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},o={opacity:"0 !important"},a={opacity:n?.42:.5};return w({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${Ys.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},[`&.${Ys.disabled}`]:{opacity:1,WebkitTextFillColor:e.palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),Ks=(0,Ya.jsx)(Fs,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),Xs=e.forwardRef((function(t,n){const r=Yl({props:t,name:"MuiInputBase"}),{"aria-describedby":o,autoComplete:a,autoFocus:i,className:l,components:s={},componentsProps:u={},defaultValue:c,disabled:d,disableInjectingGlobalStyles:p,endAdornment:f,fullWidth:m=!1,id:h,inputComponent:g="input",inputProps:v={},inputRef:y,maxRows:b,minRows:A,multiline:x=!1,name:C,onBlur:E,onChange:k,onClick:S,onFocus:B,onKeyDown:O,onKeyUp:P,placeholder:N,readOnly:T,renderSuffix:R,rows:_,startAdornment:I,type:j="text",value:M}=r,D=q(r,Hs),L=null!=v.value?v.value:M,{current:z}=e.useRef(null!=L),$=e.useRef(),F=e.useCallback((e=>{}),[]),U=js(v.ref,F),W=js(y,U),V=js($,W),[Y,H]=e.useState(!1),G=Es(),Z=ks({props:r,muiFormControl:G,states:["color","disabled","error","hiddenLabel","size","required","filled"]});Z.focused=G?G.focused:Y,e.useEffect((()=>{!G&&d&&Y&&(H(!1),E&&E())}),[G,d,Y,E]);const Q=G&&G.onFilled,K=G&&G.onEmpty,X=e.useCallback((e=>{Ws(e)?Q&&Q():K&&K()}),[Q,K]);Ms((()=>{z&&X({value:L})}),[L,X,z]),e.useEffect((()=>{X($.current)}),[]);let J=g,ee=v;x&&"input"===J&&(ee=w(_?{type:void 0,minRows:_,maxRows:_}:{type:void 0,maxRows:b,minRows:A},ee),J=Is),e.useEffect((()=>{G&&G.setAdornedStart(Boolean(I))}),[G,I]);const te=w({},r,{color:Z.color||"primary",disabled:Z.disabled,endAdornment:f,error:Z.error,focused:Z.focused,formControl:G,fullWidth:m,hiddenLabel:Z.hiddenLabel,multiline:x,size:Z.size,startAdornment:I,type:j}),ne=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:a,focused:i,formControl:l,fullWidth:s,hiddenLabel:u,multiline:c,size:d,startAdornment:p,type:f}=e;return dl({root:["root",`color${ls(n)}`,r&&"disabled",o&&"error",s&&"fullWidth",i&&"focused",l&&"formControl","small"===d&&"sizeSmall",c&&"multiline",p&&"adornedStart",a&&"adornedEnd",u&&"hiddenLabel"],input:["input",r&&"disabled","search"===f&&"inputTypeSearch",c&&"inputMultiline","small"===d&&"inputSizeSmall",u&&"inputHiddenLabel",p&&"inputAdornedStart",a&&"inputAdornedEnd"]},Vs,t)})(te),re=s.Root||Zs,oe=u.root||{},ae=s.Input||Qs;return ee=w({},ee,u.input),(0,Ya.jsxs)(e.Fragment,{children:[!p&&Ks,(0,Ya.jsxs)(re,w({},oe,!ul(re)&&{ownerState:w({},te,oe.ownerState)},{ref:n,onClick:e=>{$.current&&e.currentTarget===e.target&&$.current.focus(),S&&S(e)}},D,{className:Un(ne.root,oe.className,l),children:[I,(0,Ya.jsx)(ws.Provider,{value:null,children:(0,Ya.jsx)(ae,w({ownerState:te,"aria-invalid":Z.error,"aria-describedby":o,autoComplete:a,autoFocus:i,defaultValue:c,disabled:Z.disabled,id:h,onAnimationStart:e=>{X("mui-auto-fill-cancel"===e.animationName?$.current:{value:"x"})},name:C,placeholder:N,readOnly:T,required:Z.required,rows:_,value:L,onKeyDown:O,onKeyUp:P,type:j},ee,!ul(ae)&&{as:J,ownerState:w({},te,ee.ownerState)},{ref:V,className:Un(ne.input,ee.className),onBlur:e=>{E&&E(e),v.onBlur&&v.onBlur(e),G&&G.onBlur?G.onBlur(e):H(!1)},onChange:(e,...t)=>{if(!z){const t=e.target||$.current;if(null==t)throw new Error(Co(1));X({value:t.value})}v.onChange&&v.onChange(e,...t),k&&k(e,...t)},onFocus:e=>{Z.disabled?e.stopPropagation():(B&&B(e),v.onFocus&&v.onFocus(e),G&&G.onFocus?G.onFocus(e):H(!0))}}))}),f,R?R(w({},Z,{startAdornment:I})):null]}))]})})),Js=Xs,eu=["components","fullWidth","inputComponent","label","multiline","notched","type"],tu=os(Zs,{shouldForwardProp:e=>ts(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:qs})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return w({position:"relative",borderRadius:e.shape.borderRadius,[`&:hover .${Bs.notchedOutline}`]:{borderColor:e.palette.text.primary},"@media (hover: none)":{[`&:hover .${Bs.notchedOutline}`]:{borderColor:n}},[`&.${Bs.focused} .${Bs.notchedOutline}`]:{borderColor:e.palette[t.color].main,borderWidth:2},[`&.${Bs.error} .${Bs.notchedOutline}`]:{borderColor:e.palette.error.main},[`&.${Bs.disabled} .${Bs.notchedOutline}`]:{borderColor:e.palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&w({padding:"16.5px 14px"},"small"===t.size&&{padding:"8.5px 14px"}))})),nu=os((function(e){const{className:t,label:n,notched:r}=e,o=q(e,As),a=w({},e,{notched:r,label:n});return(0,Ya.jsx)(xs,w({"aria-hidden":!0,className:t,ownerState:a},o,{children:(0,Ya.jsx)(Cs,{ownerState:a,children:n?(0,Ya.jsx)("span",{children:n}):(0,Ya.jsx)("span",{className:"notranslate",dangerouslySetInnerHTML:{__html:"&#8203;"}})})}))}),{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})((({theme:e})=>({borderColor:"light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"}))),ru=os(Qs,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:Gs})((({theme:e,ownerState:t})=>w({padding:"16.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},"small"===t.size&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0}))),ou=e.forwardRef((function(t,n){var r;const o=Yl({props:t,name:"MuiOutlinedInput"}),{components:a={},fullWidth:i=!1,inputComponent:l="input",label:s,multiline:u=!1,notched:c,type:d="text"}=o,p=q(o,eu),f=(e=>{const{classes:t}=e;return w({},t,dl({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},Ss,t))})(o),m=ks({props:o,muiFormControl:Es(),states:["required"]});return(0,Ya.jsx)(Js,w({components:w({Root:tu,Input:ru},a),renderSuffix:t=>(0,Ya.jsx)(nu,{className:f.notchedOutline,label:s&&m.required?r||(r=(0,Ya.jsxs)(e.Fragment,{children:[s," ","*"]})):s,notched:void 0!==c?c:Boolean(t.startAdornment||t.filled||t.focused)}),fullWidth:i,inputComponent:l,multiline:u,ref:n,type:d},p,{classes:w({},f,{notchedOutline:null})}))}));ou.muiName="Input";const au=ou,iu=e.createContext({}),lu=kl,su=xl,uu=e.createContext(null);function cu(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function du(e,t,n){return null!=n[t]?n[t]:e.props[t]}function pu(t,n,r){var o=cu(t.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];l[o[s][r]]=n(u)}l[s]=n(s)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(n,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,e.isValidElement)(l)){var s=i in n,u=i in o,c=n[i],d=(0,e.isValidElement)(c)&&!c.props.in;!u||s&&!d?u||!s||d?u&&s&&(0,e.isValidElement)(c)&&(a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:du(l,"exit",t),enter:du(l,"enter",t)})):a[i]=(0,e.cloneElement)(l,{in:!1}):a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:du(l,"exit",t),enter:du(l,"enter",t)})}})),a}var fu=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},mu=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}A(n,t);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,a=n.children,i=n.handleExited;return{children:n.firstRender?(r=t,o=i,cu(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:du(t,"appear",r),enter:du(t,"enter",r),exit:du(t,"exit",r)})}))):pu(t,a,i),firstRender:!1}},r.handleExited=function(e,t){var n=cu(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=w({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var t=this.props,n=t.component,r=t.childFactory,o=q(t,["component","childFactory"]),a=this.state.contextValue,i=fu(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(uu.Provider,{value:a},i):e.createElement(uu.Provider,{value:a},e.createElement(n,o,i))},n}(e.Component);mu.propTypes={},mu.defaultProps={component:"div",childFactory:function(e){return e}};const hu=mu,gu=al("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),vu=["center","classes","className"];let yu,bu,Au,xu,Cu=e=>e;const wu=zs(yu||(yu=Cu`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),Eu=zs(bu||(bu=Cu`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),ku=zs(Au||(Au=Cu`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),Su=os("span",{name:"MuiTouchRipple",slot:"Root",skipSx:!0})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),Bu=os((function(t){const{className:n,classes:r,pulsate:o=!1,rippleX:a,rippleY:i,rippleSize:l,in:s,onExited:u,timeout:c}=t,[d,p]=e.useState(!1),f=Un(n,r.ripple,r.rippleVisible,o&&r.ripplePulsate),m={width:l,height:l,top:-l/2+i,left:-l/2+a},h=Un(r.child,d&&r.childLeaving,o&&r.childPulsate);return s||d||p(!0),e.useEffect((()=>{if(!s&&null!=u){const e=setTimeout(u,c);return()=>{clearTimeout(e)}}}),[u,s,c]),(0,Ya.jsx)("span",{className:f,style:m,children:(0,Ya.jsx)("span",{className:h})})}),{name:"MuiTouchRipple",slot:"Ripple"})(xu||(xu=Cu`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),gu.rippleVisible,wu,550,(({theme:e})=>e.transitions.easing.easeInOut),gu.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),gu.child,gu.childLeaving,Eu,550,(({theme:e})=>e.transitions.easing.easeInOut),gu.childPulsate,ku,(({theme:e})=>e.transitions.easing.easeInOut)),Ou=e.forwardRef((function(t,n){const r=Yl({props:t,name:"MuiTouchRipple"}),{center:o=!1,classes:a={},className:i}=r,l=q(r,vu),[s,u]=e.useState([]),c=e.useRef(0),d=e.useRef(null);e.useEffect((()=>{d.current&&(d.current(),d.current=null)}),[s]);const p=e.useRef(!1),f=e.useRef(null),m=e.useRef(null),h=e.useRef(null);e.useEffect((()=>()=>{clearTimeout(f.current)}),[]);const g=e.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:i}=e;u((e=>[...e,(0,Ya.jsx)(Bu,{classes:{ripple:Un(a.ripple,gu.ripple),rippleVisible:Un(a.rippleVisible,gu.rippleVisible),ripplePulsate:Un(a.ripplePulsate,gu.ripplePulsate),child:Un(a.child,gu.child),childLeaving:Un(a.childLeaving,gu.childLeaving),childPulsate:Un(a.childPulsate,gu.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},c.current)])),c.current+=1,d.current=i}),[a]),v=e.useCallback(((e={},t={},n)=>{const{pulsate:r=!1,center:a=o||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===e.type&&p.current)return void(p.current=!1);"touchstart"===e.type&&(p.current=!0);const l=i?null:h.current,s=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,d;if(a||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(s.width/2),c=Math.round(s.height/2);else{const{clientX:t,clientY:n}=e.touches?e.touches[0]:e;u=Math.round(t-s.left),c=Math.round(n-s.top)}if(a)d=Math.sqrt((2*s.width**2+s.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}e.touches?null===m.current&&(m.current=()=>{g({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})},f.current=setTimeout((()=>{m.current&&(m.current(),m.current=null)}),80)):g({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})}),[o,g]),y=e.useCallback((()=>{v({},{pulsate:!0})}),[v]),b=e.useCallback(((e,t)=>{if(clearTimeout(f.current),"touchend"===e.type&&m.current)return m.current(),m.current=null,void(f.current=setTimeout((()=>{b(e,t)})));m.current=null,u((e=>e.length>0?e.slice(1):e)),d.current=t}),[]);return e.useImperativeHandle(n,(()=>({pulsate:y,start:v,stop:b})),[y,v,b]),(0,Ya.jsx)(Su,w({className:Un(a.root,gu.root,i),ref:h},l,{children:(0,Ya.jsx)(hu,{component:null,exit:!0,children:s})}))})),Pu=Ou;function Nu(e){return ol("MuiButtonBase",e)}const Tu=al("MuiButtonBase",["root","disabled","focusVisible"]),Ru=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","type"],_u=os("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${Tu.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Iu=e.forwardRef((function(t,n){const r=Yl({props:t,name:"MuiButtonBase"}),{action:o,centerRipple:a=!1,children:i,className:l,component:s="button",disabled:u=!1,disableRipple:c=!1,disableTouchRipple:d=!1,focusRipple:p=!1,LinkComponent:f="a",onBlur:m,onClick:h,onContextMenu:g,onDragLeave:v,onFocus:y,onFocusVisible:b,onKeyDown:A,onKeyUp:x,onMouseDown:C,onMouseLeave:E,onMouseUp:k,onTouchEnd:S,onTouchMove:B,onTouchStart:O,tabIndex:P=0,TouchRippleProps:N,type:T}=r,R=q(r,Ru),_=e.useRef(null),I=e.useRef(null),{isFocusVisibleRef:j,onFocus:M,onBlur:D,ref:L}=su(),[z,$]=e.useState(!1);function F(e,t,n=d){return lu((r=>(t&&t(r),!n&&I.current&&I.current[e](r),!0)))}u&&z&&$(!1),e.useImperativeHandle(o,(()=>({focusVisible:()=>{$(!0),_.current.focus()}})),[]),e.useEffect((()=>{z&&p&&!c&&I.current.pulsate()}),[c,p,z]);const U=F("start",C),W=F("stop",g),V=F("stop",v),Y=F("stop",k),H=F("stop",(e=>{z&&e.preventDefault(),E&&E(e)})),G=F("start",O),Z=F("stop",S),Q=F("stop",B),K=F("stop",(e=>{D(e),!1===j.current&&$(!1),m&&m(e)}),!1),X=lu((e=>{_.current||(_.current=e.currentTarget),M(e),!0===j.current&&($(!0),b&&b(e)),y&&y(e)})),J=()=>{const e=_.current;return s&&"button"!==s&&!("A"===e.tagName&&e.href)},ee=e.useRef(!1),te=lu((e=>{p&&!ee.current&&z&&I.current&&" "===e.key&&(ee.current=!0,I.current.stop(e,(()=>{I.current.start(e)}))),e.target===e.currentTarget&&J()&&" "===e.key&&e.preventDefault(),A&&A(e),e.target===e.currentTarget&&J()&&"Enter"===e.key&&!u&&(e.preventDefault(),h&&h(e))})),ne=lu((e=>{p&&" "===e.key&&I.current&&z&&!e.defaultPrevented&&(ee.current=!1,I.current.stop(e,(()=>{I.current.pulsate(e)}))),x&&x(e),h&&e.target===e.currentTarget&&J()&&" "===e.key&&!e.defaultPrevented&&h(e)}));let re=s;"button"===re&&(R.href||R.to)&&(re=f);const oe={};"button"===re?(oe.type=void 0===T?"button":T,oe.disabled=u):(R.href||R.to||(oe.role="button"),u&&(oe["aria-disabled"]=u));const ae=js(L,_),ie=js(n,ae),[le,se]=e.useState(!1);e.useEffect((()=>{se(!0)}),[]);const ue=le&&!c&&!u,ce=w({},r,{centerRipple:a,component:s,disabled:u,disableRipple:c,disableTouchRipple:d,focusRipple:p,tabIndex:P,focusVisible:z}),de=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a=dl({root:["root",t&&"disabled",n&&"focusVisible"]},Nu,o);return n&&r&&(a.root+=` ${r}`),a})(ce);return(0,Ya.jsxs)(_u,w({as:re,className:Un(de.root,l),ownerState:ce,onBlur:K,onClick:h,onContextMenu:W,onFocus:X,onKeyDown:te,onKeyUp:ne,onMouseDown:U,onMouseLeave:H,onMouseUp:Y,onDragLeave:V,onTouchEnd:Z,onTouchMove:Q,onTouchStart:G,ref:ie,tabIndex:u?-1:P,type:T},oe,R,{children:[i,ue?(0,Ya.jsx)(Pu,w({ref:I,center:a},N)):null]}))})),ju=Iu,Mu=al("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]),Du=al("MuiListItemIcon",["root","alignItemsFlexStart"]),Lu=al("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]);function zu(e){return ol("MuiMenuItem",e)}const $u=al("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]),Fu=["autoFocus","component","dense","divider","disableGutters","focusVisibleClassName","role","tabIndex"],Uu=os(ju,{shouldForwardProp:e=>ts(e)||"classes"===e,name:"MuiMenuItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,n.divider&&t.divider,!n.disableGutters&&t.gutters]}})((({theme:e,ownerState:t})=>w({},e.typography.body1,{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.divider&&{borderBottom:`1px solid ${e.palette.divider}`,backgroundClip:"padding-box"},{"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${$u.selected}`]:{backgroundColor:Ja(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${$u.focusVisible}`]:{backgroundColor:Ja(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${$u.selected}:hover`]:{backgroundColor:Ja(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:Ja(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${$u.focusVisible}`]:{backgroundColor:e.palette.action.focus},[`&.${$u.disabled}`]:{opacity:e.palette.action.disabledOpacity},[`& + .${Mu.root}`]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},[`& + .${Mu.inset}`]:{marginLeft:52},[`& .${Lu.root}`]:{marginTop:0,marginBottom:0},[`& .${Lu.inset}`]:{paddingLeft:36},[`& .${Du.root}`]:{minWidth:36}},!t.dense&&{[e.breakpoints.up("sm")]:{minHeight:"auto"}},t.dense&&w({minHeight:32,paddingTop:4,paddingBottom:4},e.typography.body2,{[`& .${Du.root} svg`]:{fontSize:"1.25rem"}})))),Wu=e.forwardRef((function(t,n){const r=Yl({props:t,name:"MuiMenuItem"}),{autoFocus:o=!1,component:a="li",dense:i=!1,divider:l=!1,disableGutters:s=!1,focusVisibleClassName:u,role:c="menuitem",tabIndex:d}=r,p=q(r,Fu),f=e.useContext(iu),m={dense:i||f.dense||!1,disableGutters:s},h=e.useRef(null);Ms((()=>{o&&h.current&&h.current.focus()}),[o]);const g=w({},r,{dense:m.dense,divider:l,disableGutters:s}),v=(e=>{const{disabled:t,dense:n,divider:r,disableGutters:o,selected:a,classes:i}=e;return w({},i,dl({root:["root",n&&"dense",t&&"disabled",!o&&"gutters",r&&"divider",a&&"selected"]},zu,i))})(r),y=js(h,n);let b;return r.disabled||(b=void 0!==d?d:-1),(0,Ya.jsx)(iu.Provider,{value:m,children:(0,Ya.jsx)(Uu,w({ref:y,role:c,tabIndex:b,component:a,focusVisibleClassName:Un(v.focusVisible,u)},p,{ownerState:g,classes:v}))})})),Vu=Wu,Yu=function(t,n){return e.isValidElement(t)&&-1!==n.indexOf(t.type.muiName)};function Hu(e){return ol("MuiFormControl",e)}al("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const qu=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],Gu=os("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>w({},t.root,t[`margin${ls(e.margin)}`],e.fullWidth&&t.fullWidth)})((({ownerState:e})=>w({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},"normal"===e.margin&&{marginTop:16,marginBottom:8},"dense"===e.margin&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"}))),Zu=e.forwardRef((function(t,n){const r=Yl({props:t,name:"MuiFormControl"}),{children:o,className:a,color:i="primary",component:l="div",disabled:s=!1,error:u=!1,focused:c,fullWidth:d=!1,hiddenLabel:p=!1,margin:f="none",required:m=!1,size:h="medium",variant:g="outlined"}=r,v=q(r,qu),y=w({},r,{color:i,component:l,disabled:s,error:u,fullWidth:d,hiddenLabel:p,margin:f,required:m,size:h,variant:g}),b=(e=>{const{classes:t,margin:n,fullWidth:r}=e;return dl({root:["root","none"!==n&&`margin${ls(n)}`,r&&"fullWidth"]},Hu,t)})(y),[A,x]=e.useState((()=>{let t=!1;return o&&e.Children.forEach(o,(e=>{if(!Yu(e,["Input","Select"]))return;const n=Yu(e,["Select"])?e.props.input:e;n&&n.props.startAdornment&&(t=!0)})),t})),[C,E]=e.useState((()=>{let t=!1;return o&&e.Children.forEach(o,(e=>{Yu(e,["Input","Select"])&&Ws(e.props,!0)&&(t=!0)})),t})),[k,S]=e.useState(!1);s&&k&&S(!1);const B=void 0===c||s?k:c,O=e.useCallback((()=>{E(!0)}),[]),P={adornedStart:A,setAdornedStart:x,color:i,disabled:s,error:u,filled:C,focused:B,fullWidth:d,hiddenLabel:p,size:h,onBlur:()=>{S(!1)},onEmpty:e.useCallback((()=>{E(!1)}),[]),onFilled:O,onFocus:()=>{S(!0)},registerEffect:void 0,required:m,variant:g};return(0,Ya.jsx)(ws.Provider,{value:P,children:(0,Ya.jsx)(Gu,w({as:l,ownerState:y,className:Un(b.root,a),ref:n},v,{children:o}))})})),Qu=Zu;n(6607);const Ku=pl;function Xu(e){return ol("MuiList",e)}al("MuiList",["root","padding","dense","subheader"]);const Ju=["children","className","component","dense","disablePadding","subheader"],ec=os("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})((({ownerState:e})=>w({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0}))),tc=e.forwardRef((function(t,n){const r=Yl({props:t,name:"MuiList"}),{children:o,className:a,component:i="ul",dense:l=!1,disablePadding:s=!1,subheader:u}=r,c=q(r,Ju),d=e.useMemo((()=>({dense:l})),[l]),p=w({},r,{component:i,dense:l,disablePadding:s}),f=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e;return dl({root:["root",!n&&"padding",r&&"dense",o&&"subheader"]},Xu,t)})(p);return(0,Ya.jsx)(iu.Provider,{value:d,children:(0,Ya.jsxs)(ec,w({as:i,className:Un(f.root,a),ref:n,ownerState:p},c,{children:[u,o]}))})})),nc=tc;function rc(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}const oc=rc,ac=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function ic(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function lc(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function sc(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function uc(e,t,n,r,o,a){let i=!1,l=o(e,t,!!t&&n);for(;l;){if(l===e.firstChild){if(i)return!1;i=!0}const t=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&sc(l,a)&&!t)return l.focus(),!0;l=o(e,l,n)}return!1}const cc=e.forwardRef((function(t,n){const{actions:r,autoFocus:o=!1,autoFocusItem:a=!1,children:i,className:l,disabledItemsFocusable:s=!1,disableListWrap:u=!1,onKeyDown:c,variant:d="selectedMenu"}=t,p=q(t,ac),f=e.useRef(null),m=e.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Ms((()=>{o&&f.current.focus()}),[o]),e.useImperativeHandle(r,(()=>({adjustStyleForScrollbar:(e,t)=>{const n=!f.current.style.width;if(e.clientHeight<f.current.clientHeight&&n){const n=`${oc(Ku(e))}px`;f.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=n,f.current.style.width=`calc(100% + ${n})`}return f.current}})),[]);const h=js(f,n);let g=-1;e.Children.forEach(i,((t,n)=>{e.isValidElement(t)&&(t.props.disabled||("selectedMenu"===d&&t.props.selected||-1===g)&&(g=n))}));const v=e.Children.map(i,((t,n)=>{if(n===g){const n={};return a&&(n.autoFocus=!0),void 0===t.props.tabIndex&&"selectedMenu"===d&&(n.tabIndex=0),e.cloneElement(t,n)}return t}));return(0,Ya.jsx)(nc,w({role:"menu",ref:h,className:l,onKeyDown:e=>{const t=f.current,n=e.key,r=Ku(t).activeElement;if("ArrowDown"===n)e.preventDefault(),uc(t,r,u,s,ic);else if("ArrowUp"===n)e.preventDefault(),uc(t,r,u,s,lc);else if("Home"===n)e.preventDefault(),uc(t,null,u,s,ic);else if("End"===n)e.preventDefault(),uc(t,null,u,s,lc);else if(1===n.length){const o=m.current,a=n.toLowerCase(),i=performance.now();o.keys.length>0&&(i-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&a!==o.keys[0]&&(o.repeating=!1)),o.lastTime=i,o.keys.push(a);const l=r&&!o.repeating&&sc(r,o);o.previousKeyMatched&&(l||uc(t,r,!1,s,ic,o))?e.preventDefault():o.previousKeyMatched=!1}c&&c(e)},tabIndex:o?0:-1},p,{children:v}))})),dc=cc;function pc(e){return ol("MuiPaper",e)}al("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const fc=["className","component","elevation","square","variant"],mc=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)},hc=os("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>w({backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${e.palette.divider}`},"elevation"===t.variant&&w({boxShadow:e.shadows[t.elevation]},"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${Ja("#fff",mc(t.elevation))}, ${Ja("#fff",mc(t.elevation))})`})))),gc=e.forwardRef((function(e,t){const n=Yl({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:a=1,square:i=!1,variant:l="elevation"}=n,s=q(n,fc),u=w({},n,{component:o,elevation:a,square:i,variant:l}),c=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e;return dl({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},pc,o)})(u);return(0,Ya.jsx)(hc,w({as:o,ownerState:u,className:Un(c.root,r),ref:t},s))})),vc=Ps,yc=Os;var bc="unmounted",Ac="exited",xc="entering",Cc="entered",wc="exiting",Ec=function(n){function r(e,t){var r;r=n.call(this,e,t)||this;var o,a=t&&!t.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?a?(o=Ac,r.appearStatus=xc):o=Cc:o=e.unmountOnExit||e.mountOnEnter?bc:Ac,r.state={status:o},r.nextCallback=null,r}A(r,n),r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===bc?{status:Ac}:null};var o=r.prototype;return o.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},o.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==xc&&n!==Cc&&(t=xc):n!==xc&&n!==Cc||(t=wc)}this.updateStatus(!1,t)},o.componentWillUnmount=function(){this.cancelNextCallback()},o.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},o.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),t===xc?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===Ac&&this.setState({status:bc})},o.performEnter=function(e){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:e,a=this.props.nodeRef?[o]:[t.findDOMNode(this),o],i=a[0],l=a[1],s=this.getTimeouts(),u=o?s.appear:s.enter;e||r?(this.props.onEnter(i,l),this.safeSetState({status:xc},(function(){n.props.onEntering(i,l),n.onTransitionEnd(u,(function(){n.safeSetState({status:Cc},(function(){n.props.onEntered(i,l)}))}))}))):this.safeSetState({status:Cc},(function(){n.props.onEntered(i)}))},o.performExit=function(){var e=this,n=this.props.exit,r=this.getTimeouts(),o=this.props.nodeRef?void 0:t.findDOMNode(this);n?(this.props.onExit(o),this.safeSetState({status:wc},(function(){e.props.onExiting(o),e.onTransitionEnd(r.exit,(function(){e.safeSetState({status:Ac},(function(){e.props.onExited(o)}))}))}))):this.safeSetState({status:Ac},(function(){e.props.onExited(o)}))},o.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},o.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},o.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},o.onTransitionEnd=function(e,n){this.setNextCallback(n);var r=this.props.nodeRef?this.props.nodeRef.current:t.findDOMNode(this),o=null==e&&!this.props.addEndListener;if(r&&!o){if(this.props.addEndListener){var a=this.props.nodeRef?[this.nextCallback]:[r,this.nextCallback],i=a[0],l=a[1];this.props.addEndListener(i,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},o.render=function(){var t=this.state.status;if(t===bc)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,q(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(uu.Provider,{value:null},"function"==typeof r?r(t,o):e.cloneElement(e.Children.only(r),o))},r}(e.Component);function kc(){}Ec.contextType=uu,Ec.propTypes={},Ec.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:kc,onEntering:kc,onEntered:kc,onExit:kc,onExiting:kc,onExited:kc},Ec.UNMOUNTED=bc,Ec.EXITED=Ac,Ec.ENTERING=xc,Ec.ENTERED=Cc,Ec.EXITING=wc;const Sc=Ec,Bc=e=>e.scrollTop;function Oc(e,t){var n,r;const{timeout:o,easing:a,style:i={}}=e;return{duration:null!=(n=i.transitionDuration)?n:"number"==typeof o?o:o[t.mode]||0,easing:null!=(r=i.transitionTimingFunction)?r:"object"==typeof a?a[t.mode]:a,delay:i.transitionDelay}}const Pc=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Nc(e){return`scale(${e}, ${e**2})`}const Tc={entering:{opacity:1,transform:Nc(1)},entered:{opacity:1,transform:"none"}},Rc=e.forwardRef((function(t,n){const{addEndListener:r,appear:o=!0,children:a,easing:i,in:l,onEnter:s,onEntered:u,onEntering:c,onExit:d,onExited:p,onExiting:f,style:m,timeout:h="auto",TransitionComponent:g=Sc}=t,v=q(t,Pc),y=e.useRef(),b=e.useRef(),A=as(),x=e.useRef(null),C=js(a.ref,n),E=js(x,C),k=e=>t=>{if(e){const n=x.current;void 0===t?e(n):e(n,t)}},S=k(c),B=k(((e,t)=>{Bc(e);const{duration:n,delay:r,easing:o}=Oc({style:m,timeout:h,easing:i},{mode:"enter"});let a;"auto"===h?(a=A.transitions.getAutoHeightDuration(e.clientHeight),b.current=a):a=n,e.style.transition=[A.transitions.create("opacity",{duration:a,delay:r}),A.transitions.create("transform",{duration:.666*a,delay:r,easing:o})].join(","),s&&s(e,t)})),O=k(u),P=k(f),N=k((e=>{const{duration:t,delay:n,easing:r}=Oc({style:m,timeout:h,easing:i},{mode:"exit"});let o;"auto"===h?(o=A.transitions.getAutoHeightDuration(e.clientHeight),b.current=o):o=t,e.style.transition=[A.transitions.create("opacity",{duration:o,delay:n}),A.transitions.create("transform",{duration:.666*o,delay:n||.333*o,easing:r})].join(","),e.style.opacity="0",e.style.transform=Nc(.75),d&&d(e)})),T=k(p);return e.useEffect((()=>()=>{clearTimeout(y.current)}),[]),(0,Ya.jsx)(g,w({appear:o,in:l,nodeRef:x,onEnter:B,onEntered:O,onEntering:S,onExit:N,onExited:T,onExiting:P,addEndListener:e=>{"auto"===h&&(y.current=setTimeout(e,b.current||0)),r&&r(x.current,e)},timeout:"auto"===h?null:h},v,{children:(t,n)=>e.cloneElement(a,w({style:w({opacity:0,transform:Nc(.75),visibility:"exited"!==t||l?void 0:"hidden"},Tc[t],m,a.props.style),ref:E},n))}))}));Rc.muiSupportAuto=!0;const _c=Rc;function Ic(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}const jc=e.forwardRef((function(n,r){const{children:o,container:a,disablePortal:i=!1}=n,[l,s]=e.useState(null),u=wl(e.isValidElement(o)?o.ref:null,r);return El((()=>{i||s(function(e){return"function"==typeof e?e():e}(a)||document.body)}),[a,i]),El((()=>{if(l&&!i)return Cl(r,l),()=>{Cl(r,null)}}),[r,l,i]),i?e.isValidElement(o)?e.cloneElement(o,{ref:u}):o:l?t.createPortal(o,l):l}));function Mc(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Dc(e){return parseInt(Os(e).getComputedStyle(e).paddingRight,10)||0}function Lc(e,t,n,r=[],o){const a=[t,n,...r],i=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(e=>{-1===a.indexOf(e)&&-1===i.indexOf(e.tagName)&&Mc(e,o)}))}function zc(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const $c=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function Fc(e){const t=[],n=[];return Array.from(e.querySelectorAll($c)).forEach(((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex"),10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function Uc(){return!0}const Wc=function(t){const{children:n,disableAutoFocus:r=!1,disableEnforceFocus:o=!1,disableRestoreFocus:a=!1,getTabbable:i=Fc,isEnabled:l=Uc,open:s}=t,u=e.useRef(),c=e.useRef(null),d=e.useRef(null),p=e.useRef(null),f=e.useRef(null),m=e.useRef(!1),h=e.useRef(null),g=wl(n.ref,h),v=e.useRef(null);e.useEffect((()=>{s&&h.current&&(m.current=!r)}),[r,s]),e.useEffect((()=>{if(!s||!h.current)return;const e=pl(h.current);return h.current.contains(e.activeElement)||(h.current.hasAttribute("tabIndex")||h.current.setAttribute("tabIndex",-1),m.current&&h.current.focus()),()=>{a||(p.current&&p.current.focus&&(u.current=!0,p.current.focus()),p.current=null)}}),[s]),e.useEffect((()=>{if(!s||!h.current)return;const e=pl(h.current),t=t=>{const{current:n}=h;if(null!==n)if(e.hasFocus()&&!o&&l()&&!u.current){if(!n.contains(e.activeElement)){if(t&&f.current!==t.target||e.activeElement!==f.current)f.current=null;else if(null!==f.current)return;if(!m.current)return;let o=[];if(e.activeElement!==c.current&&e.activeElement!==d.current||(o=i(h.current)),o.length>0){var r,a;const e=Boolean((null==(r=v.current)?void 0:r.shiftKey)&&"Tab"===(null==(a=v.current)?void 0:a.key)),t=o[0],n=o[o.length-1];e?n.focus():t.focus()}else n.focus()}}else u.current=!1},n=t=>{v.current=t,!o&&l()&&"Tab"===t.key&&e.activeElement===h.current&&t.shiftKey&&(u.current=!0,d.current.focus())};e.addEventListener("focusin",t),e.addEventListener("keydown",n,!0);const r=setInterval((()=>{"BODY"===e.activeElement.tagName&&t()}),50);return()=>{clearInterval(r),e.removeEventListener("focusin",t),e.removeEventListener("keydown",n,!0)}}),[r,o,a,l,s,i]);const y=e=>{null===p.current&&(p.current=e.relatedTarget),m.current=!0};return(0,Ya.jsxs)(e.Fragment,{children:[(0,Ya.jsx)("div",{tabIndex:0,onFocus:y,ref:c,"data-test":"sentinelStart"}),e.cloneElement(n,{ref:g,onFocus:e=>{null===p.current&&(p.current=e.relatedTarget),m.current=!0,f.current=e.target;const t=n.props.onFocus;t&&t(e)}}),(0,Ya.jsx)("div",{tabIndex:0,onFocus:y,ref:d,"data-test":"sentinelEnd"})]})};function Vc(e){return ol("MuiModal",e)}al("MuiModal",["root","hidden"]);const Yc=["BackdropComponent","BackdropProps","children","classes","className","closeAfterTransition","component","components","componentsProps","container","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onKeyDown","open","theme","onTransitionEnter","onTransitionExited"],Hc=new class{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Mc(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);Lc(t,e.mount,e.modalRef,r,!0);const o=zc(this.containers,(e=>e.container===t));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=zc(this.containers,(t=>-1!==t.modals.indexOf(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=pl(e);return t.body===e?Os(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=rc(pl(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${Dc(r)+e}px`;const t=pl(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${Dc(t)+e}px`}))}const e=r.parentElement,t=Os(r),o="HTML"===(null==e?void 0:e.nodeName)&&"scroll"===t.getComputedStyle(e).overflowY?e:r;n.push({value:o.style.overflow,property:"overflow",el:o},{value:o.style.overflowX,property:"overflow-x",el:o},{value:o.style.overflowY,property:"overflow-y",el:o}),o.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e){const t=this.modals.indexOf(e);if(-1===t)return t;const n=zc(this.containers,(t=>-1!==t.modals.indexOf(e))),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&Mc(e.modalRef,!0),Lc(r.container,e.mount,e.modalRef,r.hiddenSiblings,!1),this.containers.splice(n,1);else{const e=r.modals[r.modals.length-1];e.modalRef&&Mc(e.modalRef,!1)}return t}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}},qc=e.forwardRef((function(t,n){const{BackdropComponent:r,BackdropProps:o,children:a,classes:i,className:l,closeAfterTransition:s=!1,component:u="div",components:c={},componentsProps:d={},container:p,disableAutoFocus:f=!1,disableEnforceFocus:m=!1,disableEscapeKeyDown:h=!1,disablePortal:g=!1,disableRestoreFocus:v=!1,disableScrollLock:y=!1,hideBackdrop:b=!1,keepMounted:A=!1,manager:x=Hc,onBackdropClick:C,onClose:E,onKeyDown:k,open:S,theme:B,onTransitionEnter:O,onTransitionExited:P}=t,N=q(t,Yc),[T,R]=e.useState(!0),_=e.useRef({}),I=e.useRef(null),j=e.useRef(null),M=wl(j,n),D=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(t),L=()=>(_.current.modalRef=j.current,_.current.mountNode=I.current,_.current),z=()=>{x.mount(L(),{disableScrollLock:y}),j.current.scrollTop=0},$=kl((()=>{const e=function(e){return"function"==typeof e?e():e}(p)||pl(I.current).body;x.add(L(),e),j.current&&z()})),F=e.useCallback((()=>x.isTopModal(L())),[x]),U=kl((e=>{I.current=e,e&&(S&&F()?z():Mc(j.current,!0))})),W=e.useCallback((()=>{x.remove(L())}),[x]);e.useEffect((()=>()=>{W()}),[W]),e.useEffect((()=>{S?$():D&&s||W()}),[S,W,D,s,$]);const V=w({},t,{classes:i,closeAfterTransition:s,disableAutoFocus:f,disableEnforceFocus:m,disableEscapeKeyDown:h,disablePortal:g,disableRestoreFocus:v,disableScrollLock:y,exited:T,hideBackdrop:b,keepMounted:A}),Y=(e=>{const{open:t,exited:n,classes:r}=e;return dl({root:["root",!t&&n&&"hidden"]},Vc,r)})(V);if(!A&&!S&&(!D||T))return null;const H={};void 0===a.props.tabIndex&&(H.tabIndex="-1"),D&&(H.onEnter=Ic((()=>{R(!1),O&&O()}),a.props.onEnter),H.onExited=Ic((()=>{R(!0),P&&P(),s&&W()}),a.props.onExited));const G=c.Root||u,Z=d.root||{};return(0,Ya.jsx)(jc,{ref:U,container:p,disablePortal:g,children:(0,Ya.jsxs)(G,w({role:"presentation"},Z,!ul(G)&&{as:u,ownerState:w({},V,Z.ownerState),theme:B},N,{ref:M,onKeyDown:e=>{k&&k(e),"Escape"===e.key&&F()&&(h||(e.stopPropagation(),E&&E(e,"escapeKeyDown")))},className:Un(Y.root,Z.className,l),children:[!b&&r?(0,Ya.jsx)(r,w({open:S,onClick:e=>{e.target===e.currentTarget&&(C&&C(e),E&&E(e,"backdropClick"))}},o)):null,(0,Ya.jsx)(Wc,{disableEnforceFocus:m,disableAutoFocus:f,disableRestoreFocus:v,isEnabled:F,open:S,children:e.cloneElement(a,H)})]}))})})),Gc=qc;function Zc(e){return ol("MuiBackdrop",e)}al("MuiBackdrop",["root","invisible"]);const Qc=["classes","className","invisible","component","components","componentsProps","theme"],Kc=e.forwardRef((function(e,t){const{classes:n,className:r,invisible:o=!1,component:a="div",components:i={},componentsProps:l={},theme:s}=e,u=q(e,Qc),c=w({},e,{classes:n,invisible:o}),d=(e=>{const{classes:t,invisible:n}=e;return dl({root:["root",n&&"invisible"]},Zc,t)})(c),p=i.Root||a,f=l.root||{};return(0,Ya.jsx)(p,w({"aria-hidden":!0},f,!ul(p)&&{as:a,ownerState:w({},c,f.ownerState),theme:s},{ref:t},u,{className:Un(d.root,f.className,r)}))})),Xc=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],Jc={entering:{opacity:1},entered:{opacity:1}},ed={enter:Gi.enteringScreen,exit:Gi.leavingScreen},td=e.forwardRef((function(t,n){const{addEndListener:r,appear:o=!0,children:a,easing:i,in:l,onEnter:s,onEntered:u,onEntering:c,onExit:d,onExited:p,onExiting:f,style:m,timeout:h=ed,TransitionComponent:g=Sc}=t,v=q(t,Xc),y=as(),b=e.useRef(null),A=js(a.ref,n),x=js(b,A),C=e=>t=>{if(e){const n=b.current;void 0===t?e(n):e(n,t)}},E=C(c),k=C(((e,t)=>{Bc(e);const n=Oc({style:m,timeout:h,easing:i},{mode:"enter"});e.style.webkitTransition=y.transitions.create("opacity",n),e.style.transition=y.transitions.create("opacity",n),s&&s(e,t)})),S=C(u),B=C(f),O=C((e=>{const t=Oc({style:m,timeout:h,easing:i},{mode:"exit"});e.style.webkitTransition=y.transitions.create("opacity",t),e.style.transition=y.transitions.create("opacity",t),d&&d(e)})),P=C(p);return(0,Ya.jsx)(g,w({appear:o,in:l,nodeRef:b,onEnter:k,onEntered:S,onEntering:E,onExit:O,onExited:P,onExiting:B,addEndListener:e=>{r&&r(b.current,e)},timeout:h},v,{children:(t,n)=>e.cloneElement(a,w({style:w({opacity:0,visibility:"exited"!==t||l?void 0:"hidden"},Jc[t],m,a.props.style),ref:x},n))}))})),nd=td,rd=["children","components","componentsProps","className","invisible","open","transitionDuration","TransitionComponent"],od=os("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})((({ownerState:e})=>w({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"}))),ad=e.forwardRef((function(e,t){var n;const r=Yl({props:e,name:"MuiBackdrop"}),{children:o,components:a={},componentsProps:i={},className:l,invisible:s=!1,open:u,transitionDuration:c,TransitionComponent:d=nd}=r,p=q(r,rd),f=(e=>{const{classes:t}=e;return t})(w({},r,{invisible:s}));return(0,Ya.jsx)(d,w({in:u,timeout:c},p,{children:(0,Ya.jsx)(Kc,{className:l,invisible:s,components:w({Root:od},a),componentsProps:{root:w({},i.root,(!a.Root||!ul(a.Root))&&{ownerState:w({},null==(n=i.root)?void 0:n.ownerState)})},classes:f,ref:t,children:o})}))})),id=["BackdropComponent","closeAfterTransition","children","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted"],ld=os("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})((({theme:e,ownerState:t})=>w({position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"}))),sd=os(ad,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),ud=e.forwardRef((function(t,n){var r;const o=Yl({name:"MuiModal",props:t}),{BackdropComponent:a=sd,closeAfterTransition:i=!1,children:l,components:s={},componentsProps:u={},disableAutoFocus:c=!1,disableEnforceFocus:d=!1,disableEscapeKeyDown:p=!1,disablePortal:f=!1,disableRestoreFocus:m=!1,disableScrollLock:h=!1,hideBackdrop:g=!1,keepMounted:v=!1}=o,y=q(o,id),[b,A]=e.useState(!0),x={closeAfterTransition:i,disableAutoFocus:c,disableEnforceFocus:d,disableEscapeKeyDown:p,disablePortal:f,disableRestoreFocus:m,disableScrollLock:h,hideBackdrop:g,keepMounted:v},C=w({},o,x,{exited:b}).classes;return(0,Ya.jsx)(Gc,w({components:w({Root:ld},s),componentsProps:{root:w({},u.root,(!s.Root||!ul(s.Root))&&{ownerState:w({},null==(r=u.root)?void 0:r.ownerState)})},BackdropComponent:a,onTransitionEnter:()=>A(!1),onTransitionExited:()=>A(!0),ref:n},y,{classes:C},x,{children:l}))}));function cd(e){return ol("MuiPopover",e)}al("MuiPopover",["root","paper"]);const dd=["onEntering"],pd=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"];function fd(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function md(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function hd(e){return[e.horizontal,e.vertical].map((e=>"number"==typeof e?`${e}px`:e)).join(" ")}function gd(e){return"function"==typeof e?e():e}const vd=os(ud,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),yd=os(gc,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),bd=e.forwardRef((function(t,n){const r=Yl({props:t,name:"MuiPopover"}),{action:o,anchorEl:a,anchorOrigin:i={vertical:"top",horizontal:"left"},anchorPosition:l,anchorReference:s="anchorEl",children:u,className:c,container:d,elevation:p=8,marginThreshold:f=16,open:m,PaperProps:h={},transformOrigin:g={vertical:"top",horizontal:"left"},TransitionComponent:v=_c,transitionDuration:y="auto",TransitionProps:{onEntering:b}={}}=r,A=q(r.TransitionProps,dd),x=q(r,pd),C=e.useRef(),E=js(C,h.ref),k=w({},r,{anchorOrigin:i,anchorReference:s,elevation:p,marginThreshold:f,PaperProps:h,transformOrigin:g,TransitionComponent:v,transitionDuration:y,TransitionProps:A}),S=(e=>{const{classes:t}=e;return dl({root:["root"],paper:["paper"]},cd,t)})(k),B=e.useCallback((()=>{if("anchorPosition"===s)return l;const e=gd(a),t=(e&&1===e.nodeType?e:Ku(C.current).body).getBoundingClientRect();return{top:t.top+fd(t,i.vertical),left:t.left+md(t,i.horizontal)}}),[a,i.horizontal,i.vertical,l,s]),O=e.useCallback((e=>({vertical:fd(e,g.vertical),horizontal:md(e,g.horizontal)})),[g.horizontal,g.vertical]),P=e.useCallback((e=>{const t={width:e.offsetWidth,height:e.offsetHeight},n=O(t);if("none"===s)return{top:null,left:null,transformOrigin:hd(n)};const r=B();let o=r.top-n.vertical,i=r.left-n.horizontal;const l=o+t.height,u=i+t.width,c=yc(gd(a)),d=c.innerHeight-f,p=c.innerWidth-f;if(o<f){const e=o-f;o-=e,n.vertical+=e}else if(l>d){const e=l-d;o-=e,n.vertical+=e}if(i<f){const e=i-f;i-=e,n.horizontal+=e}else if(u>p){const e=u-p;i-=e,n.horizontal+=e}return{top:`${Math.round(o)}px`,left:`${Math.round(i)}px`,transformOrigin:hd(n)}}),[a,s,B,O,f]),N=e.useCallback((()=>{const e=C.current;if(!e)return;const t=P(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}),[P]);e.useEffect((()=>{m&&N()})),e.useImperativeHandle(o,(()=>m?{updatePosition:()=>{N()}}:null),[m,N]),e.useEffect((()=>{if(!m)return;const e=vc((()=>{N()})),t=yc(a);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[a,m,N]);let T=y;"auto"!==y||v.muiSupportAuto||(T=void 0);const R=d||(a?Ku(gd(a)).body:void 0);return(0,Ya.jsx)(vd,w({BackdropProps:{invisible:!0},className:Un(S.root,c),container:R,open:m,ref:n,ownerState:k},x,{children:(0,Ya.jsx)(v,w({appear:!0,in:m,onEntering:(e,t)=>{b&&b(e,t),N()},timeout:T},A,{children:(0,Ya.jsx)(yd,w({elevation:p},h,{ref:E,className:Un(S.paper,h.className),children:u}))}))}))}));function Ad(e){return ol("MuiMenu",e)}al("MuiMenu",["root","paper","list"]);const xd=["onEntering"],Cd=["autoFocus","children","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"],wd={vertical:"top",horizontal:"right"},Ed={vertical:"top",horizontal:"left"},kd=os(bd,{shouldForwardProp:e=>ts(e)||"classes"===e,name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Sd=os(gc,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),Bd=os(dc,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),Od=e.forwardRef((function(t,n){const r=Yl({props:t,name:"MuiMenu"}),{autoFocus:o=!0,children:a,disableAutoFocusItem:i=!1,MenuListProps:l={},onClose:s,open:u,PaperProps:c={},PopoverClasses:d,transitionDuration:p="auto",TransitionProps:{onEntering:f}={},variant:m="selectedMenu"}=r,h=q(r.TransitionProps,xd),g=q(r,Cd),v=as(),y="rtl"===v.direction,b=w({},r,{autoFocus:o,disableAutoFocusItem:i,MenuListProps:l,onEntering:f,PaperProps:c,transitionDuration:p,TransitionProps:h,variant:m}),A=(e=>{const{classes:t}=e;return dl({root:["root"],paper:["paper"],list:["list"]},Ad,t)})(b),x=o&&!i&&u,C=e.useRef(null);let E=-1;return e.Children.map(a,((t,n)=>{e.isValidElement(t)&&(t.props.disabled||("selectedMenu"===m&&t.props.selected||-1===E)&&(E=n))})),(0,Ya.jsx)(kd,w({classes:d,onClose:s,anchorOrigin:{vertical:"bottom",horizontal:y?"right":"left"},transformOrigin:y?wd:Ed,PaperProps:w({component:Sd},c,{classes:w({},c.classes,{root:A.paper})}),className:A.root,open:u,ref:n,transitionDuration:p,TransitionProps:w({onEntering:(e,t)=>{C.current&&C.current.adjustStyleForScrollbar(e,v),f&&f(e,t)}},h),ownerState:b},g,{children:(0,Ya.jsx)(Bd,w({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),s&&s(e,"tabKeyDown"))},actions:C,autoFocus:o&&(-1===E||i),autoFocusItem:x,variant:m},l,{className:Un(A.list,l.className),children:a}))}))})),Pd=Od;function Nd(e){return ol("MuiNativeSelect",e)}const Td=al("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput"]),Rd=["className","disabled","IconComponent","inputRef","variant"],_d=({ownerState:e,theme:t})=>w({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":{backgroundColor:"light"===t.palette.mode?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},[`&.${Td.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:t.palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},"filled"===e.variant&&{"&&&":{paddingRight:32}},"outlined"===e.variant&&{borderRadius:t.shape.borderRadius,"&:focus":{borderRadius:t.shape.borderRadius},"&&&":{paddingRight:32}}),Id=os("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:ts,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],{[`&.${Td.multiple}`]:t.multiple}]}})(_d),jd=({ownerState:e,theme:t})=>w({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:t.palette.action.active,[`&.${Td.disabled}`]:{color:t.palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},"filled"===e.variant&&{right:7},"outlined"===e.variant&&{right:7}),Md=os("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${ls(n.variant)}`],n.open&&t.iconOpen]}})(jd),Dd=e.forwardRef((function(t,n){const{className:r,disabled:o,IconComponent:a,inputRef:i,variant:l="standard"}=t,s=q(t,Rd),u=w({},t,{disabled:o,variant:l}),c=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:a}=e;return dl({select:["select",n,r&&"disabled",o&&"multiple"],icon:["icon",`icon${ls(n)}`,a&&"iconOpen",r&&"disabled"]},Nd,t)})(u);return(0,Ya.jsxs)(e.Fragment,{children:[(0,Ya.jsx)(Id,w({ownerState:u,className:Un(c.select,r),disabled:o,ref:i||n},s)),t.multiple?null:(0,Ya.jsx)(Md,{as:a,ownerState:u,className:c.icon})]})})),Ld=fl;function zd(e){return ol("MuiSelect",e)}const $d=al("MuiSelect",["select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput"]),Fd=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],Ud=os("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`&.${$d.select}`]:t.select},{[`&.${$d.select}`]:t[n.variant]},{[`&.${$d.multiple}`]:t.multiple}]}})(_d,{[`&.${$d.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),Wd=os("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${ls(n.variant)}`],n.open&&t.iconOpen]}})(jd),Vd=os("input",{shouldForwardProp:e=>ns(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function Yd(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function Hd(e){return null==e||"string"==typeof e&&!e.trim()}const qd=e.forwardRef((function(t,n){const{"aria-describedby":r,"aria-label":o,autoFocus:a,autoWidth:i,children:l,className:s,defaultOpen:u,defaultValue:c,disabled:d,displayEmpty:p,IconComponent:f,inputRef:m,labelId:h,MenuProps:g={},multiple:v,name:y,onBlur:b,onChange:A,onClose:x,onFocus:C,onOpen:E,open:k,readOnly:S,renderValue:B,SelectDisplayProps:O={},tabIndex:P,value:N,variant:T="standard"}=t,R=q(t,Fd),[_,I]=Ld({controlled:N,default:c,name:"Select"}),[j,M]=Ld({controlled:k,default:u,name:"Select"}),D=e.useRef(null),L=e.useRef(null),[z,$]=e.useState(null),{current:F}=e.useRef(null!=k),[U,W]=e.useState(),V=js(n,m),Y=e.useCallback((e=>{L.current=e,e&&$(e)}),[]);e.useImperativeHandle(V,(()=>({focus:()=>{L.current.focus()},node:D.current,value:_})),[_]),e.useEffect((()=>{u&&j&&z&&!F&&(W(i?null:z.clientWidth),L.current.focus())}),[z,i]),e.useEffect((()=>{a&&L.current.focus()}),[a]),e.useEffect((()=>{const e=Ku(L.current).getElementById(h);if(e){const t=()=>{getSelection().isCollapsed&&L.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}}),[h]);const H=(e,t)=>{e?E&&E(t):x&&x(t),F||(W(i?null:z.clientWidth),M(e))},G=e.Children.toArray(l),Z=e=>t=>{let n;if(t.currentTarget.hasAttribute("tabindex")){if(v){n=Array.isArray(_)?_.slice():[];const t=_.indexOf(e.props.value);-1===t?n.push(e.props.value):n.splice(t,1)}else n=e.props.value;if(e.props.onClick&&e.props.onClick(t),_!==n&&(I(n),A)){const r=t.nativeEvent||t,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:n,name:y}}),A(o,e)}v||H(!1,t)}},Q=null!==z&&j;let K,X;delete R["aria-invalid"];const J=[];let ee=!1,te=!1;(Ws({value:_})||p)&&(B?K=B(_):ee=!0);const ne=G.map((t=>{if(!e.isValidElement(t))return null;let n;if(v){if(!Array.isArray(_))throw new Error(Co(2));n=_.some((e=>Yd(e,t.props.value))),n&&ee&&J.push(t.props.children)}else n=Yd(_,t.props.value),n&&ee&&(X=t.props.children);return n&&(te=!0),e.cloneElement(t,{"aria-selected":n?"true":"false",onClick:Z(t),onKeyUp:e=>{" "===e.key&&e.preventDefault(),t.props.onKeyUp&&t.props.onKeyUp(e)},role:"option",selected:n,value:void 0,"data-value":t.props.value})}));ee&&(K=v?0===J.length?null:J.reduce(((e,t,n)=>(e.push(t),n<J.length-1&&e.push(", "),e)),[]):X);let re,oe=U;!i&&F&&z&&(oe=z.clientWidth),re=void 0!==P?P:d?null:0;const ae=O.id||(y?`mui-component-select-${y}`:void 0),ie=w({},t,{variant:T,value:_,open:Q}),le=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:a}=e;return dl({select:["select",n,r&&"disabled",o&&"multiple"],icon:["icon",`icon${ls(n)}`,a&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]},zd,t)})(ie);return(0,Ya.jsxs)(e.Fragment,{children:[(0,Ya.jsx)(Ud,w({ref:Y,tabIndex:re,role:"button","aria-disabled":d?"true":void 0,"aria-expanded":Q?"true":"false","aria-haspopup":"listbox","aria-label":o,"aria-labelledby":[h,ae].filter(Boolean).join(" ")||void 0,"aria-describedby":r,onKeyDown:e=>{S||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),H(!0,e))},onMouseDown:d||S?null:e=>{0===e.button&&(e.preventDefault(),L.current.focus(),H(!0,e))},onBlur:e=>{!Q&&b&&(Object.defineProperty(e,"target",{writable:!0,value:{value:_,name:y}}),b(e))},onFocus:C},O,{ownerState:ie,className:Un(le.select,s,O.className),id:ae,children:Hd(K)?(0,Ya.jsx)("span",{className:"notranslate",dangerouslySetInnerHTML:{__html:"&#8203;"}}):K})),(0,Ya.jsx)(Vd,w({value:Array.isArray(_)?_.join(","):_,name:y,ref:D,"aria-hidden":!0,onChange:e=>{const t=G.map((e=>e.props.value)).indexOf(e.target.value);if(-1===t)return;const n=G[t];I(n.props.value),A&&A(e,n)},tabIndex:-1,disabled:d,className:le.nativeInput,autoFocus:a,ownerState:ie},R)),(0,Ya.jsx)(Wd,{as:f,className:le.icon,ownerState:ie}),(0,Ya.jsx)(Pd,w({id:`menu-${y||""}`,anchorEl:z,open:Q,onClose:e=>{H(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},g,{MenuListProps:w({"aria-labelledby":h,role:"listbox",disableListWrap:!0},g.MenuListProps),PaperProps:w({},g.PaperProps,{style:w({minWidth:oe},null!=g.PaperProps?g.PaperProps.style:null)}),children:ne}))]})})),Gd=qd;function Zd(e){return ol("MuiSvgIcon",e)}al("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const Qd=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],Kd=os("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${ls(n.color)}`],t[`fontSize${ls(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,o,a,i,l,s,u,c,d,p,f,m,h,g,v,y;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(o=e.transitions)||null==(a=o.duration)?void 0:a.shorter}),fontSize:{inherit:"inherit",small:(null==(i=e.typography)||null==(l=i.pxToRem)?void 0:l.call(i,20))||"1.25rem",medium:(null==(s=e.typography)||null==(u=s.pxToRem)?void 0:u.call(s,24))||"1.5rem",large:(null==(c=e.typography)||null==(d=c.pxToRem)?void 0:d.call(c,35))||"2.1875"}[t.fontSize],color:null!=(p=null==(f=e.palette)||null==(m=f[t.color])?void 0:m.main)?p:{action:null==(h=e.palette)||null==(g=h.action)?void 0:g.active,disabled:null==(v=e.palette)||null==(y=v.action)?void 0:y.disabled,inherit:void 0}[t.color]}})),Xd=e.forwardRef((function(e,t){const n=Yl({props:e,name:"MuiSvgIcon"}),{children:r,className:o,color:a="inherit",component:i="svg",fontSize:l="medium",htmlColor:s,inheritViewBox:u=!1,titleAccess:c,viewBox:d="0 0 24 24"}=n,p=q(n,Qd),f=w({},n,{color:a,component:i,fontSize:l,inheritViewBox:u,viewBox:d}),m={};u||(m.viewBox=d);const h=(e=>{const{color:t,fontSize:n,classes:r}=e;return dl({root:["root","inherit"!==t&&`color${ls(t)}`,`fontSize${ls(n)}`]},Zd,r)})(f);return(0,Ya.jsxs)(Kd,w({as:i,className:Un(h.root,o),ownerState:f,focusable:"false",color:s,"aria-hidden":!c||void 0,role:c?"img":void 0,ref:t},m,p,{children:[r,c?(0,Ya.jsx)("title",{children:c}):null]}))}));Xd.muiName="SvgIcon";const Jd=Xd;function ep(t,n){const r=(e,r)=>(0,Ya.jsx)(Jd,w({"data-testid":`${n}Icon`,ref:r},e,{children:t}));return r.muiName=Jd.muiName,e.memo(e.forwardRef(r))}const tp=ep((0,Ya.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown");function np(e){return ol("MuiInput",e)}const rp=al("MuiInput",["root","formControl","focused","disabled","colorSecondary","underline","error","sizeSmall","multiline","fullWidth","input","inputSizeSmall","inputMultiline","inputTypeSearch"]),op=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","type"],ap=os(Zs,{shouldForwardProp:e=>ts(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...qs(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return w({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${e.palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${rp.focused}:after`]:{transform:"scaleX(1)"},[`&.${rp.error}:after`]:{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:`1px solid ${n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${rp.disabled}):before`]:{borderBottom:`2px solid ${e.palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${n}`}},[`&.${rp.disabled}:before`]:{borderBottomStyle:"dotted"}})})),ip=os(Qs,{name:"MuiInput",slot:"Input",overridesResolver:Gs})({}),lp=e.forwardRef((function(e,t){const n=Yl({props:e,name:"MuiInput"}),{disableUnderline:r,components:o={},componentsProps:a,fullWidth:i=!1,inputComponent:l="input",multiline:s=!1,type:u="text"}=n,c=q(n,op),d=(e=>{const{classes:t,disableUnderline:n}=e;return w({},t,dl({root:["root",!n&&"underline"],input:["input"]},np,t))})(n),p={root:{ownerState:{disableUnderline:r}}},f=a?Ao(a,p):p;return(0,Ya.jsx)(Js,w({components:w({Root:ap,Input:ip},o),componentsProps:f,fullWidth:i,inputComponent:l,multiline:s,ref:t,type:u},c,{classes:d}))}));lp.muiName="Input";const sp=lp;function up(e){return ol("MuiFilledInput",e)}const cp=al("MuiFilledInput",["root","colorSecondary","underline","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","hiddenLabel","input","inputSizeSmall","inputHiddenLabel","inputMultiline","inputAdornedStart","inputAdornedEnd"]),dp=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","type"],pp=os(Zs,{shouldForwardProp:e=>ts(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...qs(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=n?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",o=n?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)";return w({position:"relative",backgroundColor:o,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:n?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:o}},[`&.${cp.focused}`]:{backgroundColor:o},[`&.${cp.disabled}`]:{backgroundColor:n?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${e.palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${cp.focused}:after`]:{transform:"scaleX(1)"},[`&.${cp.error}:after`]:{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:`1px solid ${r}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${cp.disabled}):before`]:{borderBottom:`1px solid ${e.palette.text.primary}`},[`&.${cp.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&w({padding:"25px 12px 8px"},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17}))})),fp=os(Qs,{name:"MuiFilledInput",slot:"Input",overridesResolver:Gs})((({theme:e,ownerState:t})=>w({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12,"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9}))),mp=e.forwardRef((function(e,t){const n=Yl({props:e,name:"MuiFilledInput"}),{components:r={},componentsProps:o,fullWidth:a=!1,inputComponent:i="input",multiline:l=!1,type:s="text"}=n,u=q(n,dp),c=w({},n,{fullWidth:a,inputComponent:i,multiline:l,type:s}),d=(e=>{const{classes:t,disableUnderline:n}=e;return w({},t,dl({root:["root",!n&&"underline"],input:["input"]},up,t))})(n),p={root:{ownerState:c},input:{ownerState:c}},f=o?Ao(o,p):p;return(0,Ya.jsx)(Js,w({components:w({Root:pp,Input:fp},r),componentsProps:f,fullWidth:a,inputComponent:i,multiline:l,ref:t,type:s},u,{classes:d}))}));mp.muiName="Input";const hp=mp;var gp,vp;const yp=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],bp=e.forwardRef((function(t,n){const r=Yl({name:"MuiSelect",props:t}),{autoWidth:o=!1,children:a,classes:i={},className:l,defaultOpen:s=!1,displayEmpty:u=!1,IconComponent:c=tp,id:d,input:p,inputProps:f,label:m,labelId:h,MenuProps:g,multiple:v=!1,native:y=!1,onClose:b,onOpen:A,open:x,renderValue:C,SelectDisplayProps:E,variant:k="outlined"}=r,S=q(r,yp),B=y?Dd:Gd,O=ks({props:r,muiFormControl:Es(),states:["variant"]}).variant||k,P=p||{standard:gp||(gp=(0,Ya.jsx)(sp,{})),outlined:(0,Ya.jsx)(au,{label:m}),filled:vp||(vp=(0,Ya.jsx)(hp,{}))}[O],N=(e=>{const{classes:t}=e;return t})(w({},r,{classes:i})),T=js(n,P.ref);return e.cloneElement(P,w({inputComponent:B,inputProps:w({children:a,IconComponent:c,variant:O,type:void 0,multiple:v},y?{id:d}:{autoWidth:o,defaultOpen:s,displayEmpty:u,labelId:h,MenuProps:g,onClose:b,onOpen:A,open:x,renderValue:C,SelectDisplayProps:w({id:d},E)},f,{classes:f?Ao(N,f.classes):N},p?p.props.inputProps:{})},v&&y&&"outlined"===O?{notched:!0}:{},{ref:T,className:Un(P.props.className,l)},S))}));bp.muiName="Select";const Ap=bp,xp=ep((0,Ya.jsx)("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"}),"Cancel");function Cp(e){return ol("MuiChip",e)}const wp=al("MuiChip",["root","sizeSmall","sizeMedium","colorPrimary","colorSecondary","disabled","clickable","clickableColorPrimary","clickableColorSecondary","deletable","deletableColorPrimary","deletableColorSecondary","outlined","filled","outlinedPrimary","outlinedSecondary","avatar","avatarSmall","avatarMedium","avatarColorPrimary","avatarColorSecondary","icon","iconSmall","iconMedium","iconColorPrimary","iconColorSecondary","label","labelSmall","labelMedium","deleteIcon","deleteIconSmall","deleteIconMedium","deleteIconColorPrimary","deleteIconColorSecondary","deleteIconOutlinedColorPrimary","deleteIconOutlinedColorSecondary","focusVisible"]),Ep=["avatar","className","clickable","color","component","deleteIcon","disabled","icon","label","onClick","onDelete","onKeyDown","onKeyUp","size","variant"],kp=os("div",{name:"MuiChip",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,{color:r,clickable:o,onDelete:a,size:i,variant:l}=n;return[{[`& .${wp.avatar}`]:t.avatar},{[`& .${wp.avatar}`]:t[`avatar${ls(i)}`]},{[`& .${wp.avatar}`]:t[`avatarColor${ls(r)}`]},{[`& .${wp.icon}`]:t.icon},{[`& .${wp.icon}`]:t[`icon${ls(i)}`]},{[`& .${wp.icon}`]:t[`iconColor${ls(r)}`]},{[`& .${wp.deleteIcon}`]:t.deleteIcon},{[`& .${wp.deleteIcon}`]:t[`deleteIcon${ls(i)}`]},{[`& .${wp.deleteIcon}`]:t[`deleteIconColor${ls(r)}`]},{[`& .${wp.deleteIcon}`]:t[`deleteIconOutlinedColor${ls(r)}`]},t.root,t[`size${ls(i)}`],t[`color${ls(r)}`],o&&t.clickable,o&&"default"!==r&&t[`clickableColor${ls(r)})`],a&&t.deletable,a&&"default"!==r&&t[`deletableColor${ls(r)}`],t[l],"outlined"===l&&t[`outlined${ls(r)}`]]}})((({theme:e,ownerState:t})=>{const n=Ja(e.palette.text.primary,.26);return w({fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:e.palette.text.primary,backgroundColor:e.palette.action.selected,borderRadius:16,whiteSpace:"nowrap",transition:e.transitions.create(["background-color","box-shadow"]),cursor:"default",outline:0,textDecoration:"none",border:0,padding:0,verticalAlign:"middle",boxSizing:"border-box",[`&.${wp.disabled}`]:{opacity:e.palette.action.disabledOpacity,pointerEvents:"none"},[`& .${wp.avatar}`]:{marginLeft:5,marginRight:-6,width:24,height:24,color:"light"===e.palette.mode?e.palette.grey[700]:e.palette.grey[300],fontSize:e.typography.pxToRem(12)},[`& .${wp.avatarColorPrimary}`]:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.dark},[`& .${wp.avatarColorSecondary}`]:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.dark},[`& .${wp.avatarSmall}`]:{marginLeft:4,marginRight:-4,width:18,height:18,fontSize:e.typography.pxToRem(10)},[`& .${wp.icon}`]:w({color:"light"===e.palette.mode?e.palette.grey[700]:e.palette.grey[300],marginLeft:5,marginRight:-6},"small"===t.size&&{fontSize:18,marginLeft:4,marginRight:-4},"default"!==t.color&&{color:"inherit"}),[`& .${wp.deleteIcon}`]:w({WebkitTapHighlightColor:"transparent",color:n,fontSize:22,cursor:"pointer",margin:"0 5px 0 -6px","&:hover":{color:Ja(n,.4)}},"small"===t.size&&{fontSize:16,marginRight:4,marginLeft:-4},"default"!==t.color&&{color:Ja(e.palette[t.color].contrastText,.7),"&:hover, &:active":{color:e.palette[t.color].contrastText}})},"small"===t.size&&{height:24},"default"!==t.color&&{backgroundColor:e.palette[t.color].main,color:e.palette[t.color].contrastText},t.onDelete&&{[`&.${wp.focusVisible}`]:{backgroundColor:Ja(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},t.onDelete&&"default"!==t.color&&{[`&.${wp.focusVisible}`]:{backgroundColor:e.palette[t.color].dark}})}),(({theme:e,ownerState:t})=>w({},t.clickable&&{userSelect:"none",WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover":{backgroundColor:Ja(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity)},[`&.${wp.focusVisible}`]:{backgroundColor:Ja(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)},"&:active":{boxShadow:e.shadows[1]}},t.clickable&&"default"!==t.color&&{[`&:hover, &.${wp.focusVisible}`]:{backgroundColor:e.palette[t.color].dark}})),(({theme:e,ownerState:t})=>w({},"outlined"===t.variant&&{backgroundColor:"transparent",border:`1px solid ${"light"===e.palette.mode?e.palette.grey[400]:e.palette.grey[700]}`,[`&.${wp.clickable}:hover`]:{backgroundColor:e.palette.action.hover},[`&.${wp.focusVisible}`]:{backgroundColor:e.palette.action.focus},[`& .${wp.avatar}`]:{marginLeft:4},[`& .${wp.avatarSmall}`]:{marginLeft:2},[`& .${wp.icon}`]:{marginLeft:4},[`& .${wp.iconSmall}`]:{marginLeft:2},[`& .${wp.deleteIcon}`]:{marginRight:5},[`& .${wp.deleteIconSmall}`]:{marginRight:3}},"outlined"===t.variant&&"default"!==t.color&&{color:e.palette[t.color].main,border:`1px solid ${Ja(e.palette[t.color].main,.7)}`,[`&.${wp.clickable}:hover`]:{backgroundColor:Ja(e.palette[t.color].main,e.palette.action.hoverOpacity)},[`&.${wp.focusVisible}`]:{backgroundColor:Ja(e.palette[t.color].main,e.palette.action.focusOpacity)},[`& .${wp.deleteIcon}`]:{color:Ja(e.palette[t.color].main,.7),"&:hover, &:active":{color:e.palette[t.color].main}}}))),Sp=os("span",{name:"MuiChip",slot:"Label",overridesResolver:(e,t)=>{const{ownerState:n}=e,{size:r}=n;return[t.label,t[`label${ls(r)}`]]}})((({ownerState:e})=>w({overflow:"hidden",textOverflow:"ellipsis",paddingLeft:12,paddingRight:12,whiteSpace:"nowrap"},"small"===e.size&&{paddingLeft:8,paddingRight:8})));function Bp(e){return"Backspace"===e.key||"Delete"===e.key}const Op=e.forwardRef((function(t,n){const r=Yl({props:t,name:"MuiChip"}),{avatar:o,className:a,clickable:i,color:l="default",component:s,deleteIcon:u,disabled:c=!1,icon:d,label:p,onClick:f,onDelete:m,onKeyDown:h,onKeyUp:g,size:v="medium",variant:y="filled"}=r,b=q(r,Ep),A=e.useRef(null),x=js(A,n),C=e=>{e.stopPropagation(),m&&m(e)},E=!(!1===i||!f)||i,k="small"===v,S=E||m?ju:s||"div",B=w({},r,{component:S,disabled:c,size:v,color:l,onDelete:!!m,clickable:E,variant:y}),O=(e=>{const{classes:t,disabled:n,size:r,color:o,onDelete:a,clickable:i,variant:l}=e;return dl({root:["root",l,n&&"disabled",`size${ls(r)}`,`color${ls(o)}`,i&&"clickable",i&&`clickableColor${ls(o)}`,a&&"deletable",a&&`deletableColor${ls(o)}`,`${l}${ls(o)}`],label:["label",`label${ls(r)}`],avatar:["avatar",`avatar${ls(r)}`,`avatarColor${ls(o)}`],icon:["icon",`icon${ls(r)}`,`iconColor${ls(o)}`],deleteIcon:["deleteIcon",`deleteIcon${ls(r)}`,`deleteIconColor${ls(o)}`,`deleteIconOutlinedColor${ls(o)}`]},Cp,t)})(B),P=S===ju?w({component:s||"div",focusVisibleClassName:O.focusVisible},m&&{disableRipple:!0}):{};let N=null;if(m){const t=Un("default"!==l&&("outlined"===y?O[`deleteIconOutlinedColor${ls(l)}`]:O[`deleteIconColor${ls(l)}`]),k&&O.deleteIconSmall);N=u&&e.isValidElement(u)?e.cloneElement(u,{className:Un(u.props.className,O.deleteIcon,t),onClick:C}):(0,Ya.jsx)(xp,{className:Un(O.deleteIcon,t),onClick:C})}let T=null;o&&e.isValidElement(o)&&(T=e.cloneElement(o,{className:Un(O.avatar,o.props.className)}));let R=null;return d&&e.isValidElement(d)&&(R=e.cloneElement(d,{className:Un(O.icon,d.props.className)})),(0,Ya.jsxs)(kp,w({as:S,className:Un(O.root,a),disabled:!(!E||!c)||void 0,onClick:f,onKeyDown:e=>{e.currentTarget===e.target&&Bp(e)&&e.preventDefault(),h&&h(e)},onKeyUp:e=>{e.currentTarget===e.target&&(m&&Bp(e)?m(e):"Escape"===e.key&&A.current&&A.current.blur()),g&&g(e)},ref:x,ownerState:B},P,b,{children:[T||R,(0,Ya.jsx)(Sp,{className:Un(O.label),ownerState:B,children:p}),N]}))}));function Pp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Np={PaperProps:{style:{maxHeight:224,width:250}}};function Tp(e,t,n){return{fontWeight:-1===t.indexOf(e)?n.typography.fontWeightRegular:n.typography.fontWeightMedium}}const Rp=function(t){var n,r,o=t.items,a=t.setItems,i=as(),l=(n=(0,e.useState)([]),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Pp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pp(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=l[0],u=l[1];return e.createElement("div",null,e.createElement(Qu,{sx:{width:"100%"}},e.createElement(Ap,{labelId:"demo-multiple-chip-label",id:"demo-multiple-chip",multiple:!0,value:s,onChange:function(e){var t=e.target.value;u("string"==typeof t?t.split(","):t),a("string"==typeof t?t.split(","):t)},input:e.createElement(au,{id:"select-multiple-chip"}),renderValue:function(t){return e.createElement(nl,{sx:{display:"flex",flexWrap:"wrap",gap:.5}},t.map((function(t){return e.createElement(Op,{key:t,label:t})})))},MenuProps:Np},o.map((function(t){return e.createElement(Vu,{key:t,value:t,style:Tp(t,s,i)},t)})))))};var _p=n(4193);function Ip(e){return function(e){if(Array.isArray(e))return jp(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return jp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jp(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Mp=function(t){var n=t.searchTerm,r=t.subject,o=t.isAssociatedWithSchool,a=t.meetingFormat,i=t.type,l=t.timeRange,s=(t.days,t.meetingFrequencies,t.updateSearchTerm),u=t.updateSubject,c=t.updateIsAssociatedWithSchool,d=t.updateMeetingFormat,p=t.updateType,f=t.updateTimeRange,m=t.updateDays,h=t.updateMeetingFrequencies,g=t.submitSearch;return e.createElement("div",null,e.createElement(et,{onSubmit:g,className:"search-form"},e.createElement(lt,null,e.createElement(ut,null,"Search Term"),e.createElement(ht,{value:n,onChange:s})),e.createElement(lt,null,e.createElement(ut,null,"Category"),e.createElement(xt,{options:["This","That"],value:r,onChange:u})),e.createElement(lt,null,e.createElement(ut,null,"Meeting Frequency"),e.createElement(Rp,{items:Ip(Object.values(_p.MeetingFrequencies)),setItems:h})),e.createElement(lt,null,e.createElement(ut,null,"Meeting Days"),e.createElement(Rp,{items:Ip(Object.values(_p.Days)),setItems:m})),e.createElement(lt,null,e.createElement(ut,null,"Meeting Time Range"),e.createElement("h4",null,l[0]," to ",l[1]),e.createElement(bs,{updateTimeRange:f})),e.createElement("div",{className:"side-by-side"},e.createElement(lt,null,e.createElement(ut,null,"Meeting Format"),e.createElement(xt,{options:Ip(Object.values($n())),onChange:d,value:a})),e.createElement(lt,null,e.createElement(ut,null,"Type"),e.createElement(xt,{options:["Group","Tutor","Mixed"],onChange:p,value:i}))),e.createElement(vt,null,e.createElement(ut,null,"Show Only Groups Associated with Your School"),e.createElement(yt,{value:o,onChange:c,type:"checkbox"})),e.createElement(at,{type:rt.Primary},"Search")))};function Dp(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Lp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return zp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const $p=function(){var t=Lp((0,e.useState)(""),2),n=t[0],r=t[1],o=Lp((0,e.useState)(""),2),a=o[0],i=o[1],l=Lp((0,e.useState)(!1),2),s=l[0],u=l[1],c=Lp((0,e.useState)($n().InPerson),2),d=c[0],p=c[1],f=Lp((0,e.useState)("Group"),2),m=f[0],h=f[1],g=Lp((0,e.useState)(["12:00AM","12:00PM"]),2),v=g[0],b=g[1],A=Lp((0,e.useState)([]),2),x=A[0],C=A[1],w=Lp((0,e.useState)([]),2),E=w[0],k=w[1],S=Oe(),B=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log({searchTerm:n,subject:a,school:s?"Liberty University":null,meetingFormat:d,type:m,startTime:v[0],endTime:v[1],days:x,meetingFrequencies:E}),t.preventDefault(),t.stopPropagation(),e.prev=3,e.next=6,y().post(dt().Search.GetSearchResults,{searchTerm:n,subject:a,school:s?"Liberty University":null,meetingFormat:d,meetingFrequencies:E,type:m,startTime:v[0],endTime:v[1],days:x});case 6:r=e.sent,e.next=13;break;case 9:e.prev=9,e.t0=e.catch(3),console.log(e.t0),S(Ge("Cannot search... Sorry"));case 13:return e.prev=13,ft().isDefined(r)?(console.log(r.data),At().StudyGroup.SuccessStudyGroupsRetrieved===r.data.message?(S((o=r.data.studyGroups,{type:$e,payload:{groups:o}})),console.log(r.data.studyGroups)):S(Ge("Cannot search... Sorry"))):S(Ge("Cannot search... Sorry")),e.finish(13);case 17:case"end":return e.stop()}var o}),e,null,[[3,9,13,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Dp(a,r,o,i,l,"next",e)}function l(e){Dp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();return e.createElement("div",{className:"search-view"},e.createElement(Mp,{searchTerm:n,subject:a,isAssociatedWithSchool:s,meetingFormat:d,type:m,timeRange:v,days:x,meetingFrequencies:E,updateSearchTerm:function(e){r(e.target.value)},updateSubject:function(e){i(e.target.value)},updateIsAssociatedWithSchool:function(e){u(e.target.checked)},updateMeetingFormat:function(e){p(e.target.options[e.target.selectedIndex].value)},updateType:function(e){h(e.target.options[e.target.selectedIndex].value)},updateTimeRange:function(e){b(e)},updateDays:function(e){C(e)},updateMeetingFrequencies:function(e){k(e)},submitSearch:B}))};var Fp=n(610),Up={};Up.styleTagTransform=m(),Up.setAttributes=c(),Up.insert=s().bind(null,"head"),Up.domAPI=i(),Up.insertStyleElement=p(),o()(Fp.Z,Up),Fp.Z&&Fp.Z.locals&&Fp.Z.locals;var Wp=n(9010),Vp={};Vp.styleTagTransform=m(),Vp.setAttributes=c(),Vp.insert=s().bind(null,"head"),Vp.domAPI=i(),Vp.insertStyleElement=p(),o()(Wp.Z,Vp),Wp.Z&&Wp.Z.locals&&Wp.Z.locals;const Yp=function(t){var n=t.group,r=Oe();return(0,e.useEffect)((function(){console.log(n)}),[]),e.createElement("div",{className:"listing-container",style:{border:"".concat(n.groupColor," 5px solid")},onClick:function(){return r(function(e){return{type:De,payload:e}}(n))}},e.createElement("div",{className:"title-photo-container",style:{backgroundColor:n.groupColor}},e.createElement("h1",{className:"group-title"},n.name)),e.createElement("div",{className:"group-info-container"},e.createElement("div",{className:"group-info-item",id:"owner-info"},n.isTutor?e.createElement("p",null,e.createElement("strong",null,"Tutor:")):e.createElement("p",null,e.createElement("strong",null,"Owner:")),e.createElement("h2",null,n.owner.name)),e.createElement("div",{className:"group-info-item",id:"school-info"},e.createElement("p",null,"School:"),e.createElement("h2",null,n.school?n.school:"None")),e.createElement("div",{className:"group-info-item",id:"subject-info"},e.createElement("p",null,"Subject:"),e.createElement("h2",null,n.subject)),e.createElement("div",{className:"group-info-item",id:"courseCode-info"},e.createElement("p",null,"Course Code:"),e.createElement("h2",null,n.course?n.course:"None")),e.createElement("div",{className:"group-info-item",id:"schedule-info"},n.isOnline?e.createElement("p",null,"Meets ",e.createElement("strong",null,"Online")," Every:"):e.createElement("p",null,"Meets ",e.createElement("strong",null,"In-Person")," Every:"),e.createElement("h2",null,n.schedule))))},Hp=function(){var t=Re((function(e){return e.studyGroupsReducer.search}));return e.createElement("div",{className:"search-results"},t.map((function(t){return e.createElement(Yp,{group:t,key:t._id})})))},qp=function(){return e.createElement(e.Fragment,null,e.createElement(Sn,{currentPage:"search"}),e.createElement(Ft,null,e.createElement("div",{className:"search-page"},e.createElement("div",{className:"page-title"},e.createElement("h1",null,"Search")),e.createElement("div",{className:"search-area"},e.createElement($p,null),e.createElement(Hp,null)))))};function Gp(){return Gp=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Gp.apply(this,arguments)}function Zp(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Qp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Kp=function(t){var n,r,o=Re((function(e){return e.authReducer.isLoggedIn})),a=(n=(0,e.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Qp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qp(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=(a[0],a[1]),l=Oe(),s=Re((function(e){return e.popupReducer.isShowing})),u=Re((function(e){return e.notificationReducer.isShowing}));(0,e.useEffect)((function(){return function(){i(!0),c()}}),[]);var c=function(){var e,t=(e=regeneratorRuntime.mark((function e(){var t,n,r,a,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!o){e.next=17;break}return y().defaults.headers.common.Authorization=localStorage.getItem("token"),t=void 0,e.prev=3,e.next=6,y().get(dt().Account.UpdateAuthenticationToken);case 6:t=e.sent,e.next=12;break;case 9:e.prev=9,e.t0=e.catch(3),console.log(e.t0);case 12:return e.prev=12,At().Account.SuccessUpdateAuthenticationToken===t.data.message?(n=t.data,r=n.authenticationToken,a=n.authenticationTokenExpirationDate,s=n.user,l(We({authenticationToken:r,authenticationTokenExpirationDate:a,user:s}))):l(Ve()),i(!1),e.finish(12);case 17:case"end":return e.stop()}}),e,null,[[3,9,12,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Zp(a,r,o,i,l,"next",e)}function l(e){Zp(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return e.createElement(se,null,e.createElement(Tt,{isShowing:s}),e.createElement(jt,{isShowing:u}),e.createElement("div",{className:"container"},e.createElement(le,null,e.createElement(ie,{exact:!0,path:"/"},o?e.createElement(ne,{to:"/study"}):e.createElement(vn,null)),e.createElement(ie,{path:"/verify/:verificationToken",render:function(t){var n=Ut.AccountSetup;return o?e.createElement(e.Fragment,null,e.createElement(ne,{to:"/study"})):e.createElement(vn,Gp({},t,{homeView:n}))}}),e.createElement(ie,{exact:!0,path:"/study"},e.createElement(Rn,null)),e.createElement(ie,{exact:!0,path:"/search"},e.createElement(qp,null)),e.createElement(ie,{path:"/message",render:function(e){}}))))};function Xp(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Jp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ef(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Jp(Object(n),!0).forEach((function(t){Xp(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Jp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function tf(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var nf="function"==typeof Symbol&&Symbol.observable||"@@observable",rf=function(){return Math.random().toString(36).substring(7).split("").join(".")},of={INIT:"@@redux/INIT"+rf(),REPLACE:"@@redux/REPLACE"+rf(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+rf()}};function af(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function lf(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(tf(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(tf(1));return n(lf)(e,t)}if("function"!=typeof e)throw new Error(tf(2));var o=e,a=t,i=[],l=i,s=!1;function u(){l===i&&(l=i.slice())}function c(){if(s)throw new Error(tf(3));return a}function d(e){if("function"!=typeof e)throw new Error(tf(4));if(s)throw new Error(tf(5));var t=!0;return u(),l.push(e),function(){if(t){if(s)throw new Error(tf(6));t=!1,u();var n=l.indexOf(e);l.splice(n,1),i=null}}}function p(e){if(!af(e))throw new Error(tf(7));if(void 0===e.type)throw new Error(tf(8));if(s)throw new Error(tf(9));try{s=!0,a=o(a,e)}finally{s=!1}for(var t=i=l,n=0;n<t.length;n++)(0,t[n])();return e}function f(e){if("function"!=typeof e)throw new Error(tf(10));o=e,p({type:of.REPLACE})}function m(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(tf(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[nf]=function(){return this},e}return p({type:of.INIT}),(r={dispatch:p,subscribe:d,getState:c,replaceReducer:f})[nf]=m,r}function sf(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function uf(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var cf=uf();cf.withExtraArgument=uf;const df=cf;function pf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ff(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pf(Object(n),!0).forEach((function(t){mf(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function mf(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var hf=JSON.parse(localStorage.getItem("user")),gf=Date.now(),vf=new Date(localStorage.getItem("authenticationTokenExpirationDate")),yf=hf?{isLoggedIn:gf<vf,user:hf}:{isLoggedIn:!1};const bf={Join:"Join Study Group",Create:"Create Study Group"};function Af(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Af(Object(n),!0).forEach((function(t){Cf(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Af(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Cf(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function wf(e){return function(e){if(Array.isArray(e))return Ef(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Ef(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ef(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ef(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function kf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Sf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kf(Object(n),!0).forEach((function(t){Bf(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Bf(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Of(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Of(Object(n),!0).forEach((function(t){Nf(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Of(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Nf(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Tf=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:of.INIT}))throw new Error(tf(12));if(void 0===n(void 0,{type:of.PROBE_UNKNOWN_ACTION()}))throw new Error(tf(13))}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},l=0;l<i.length;l++){var s=i[l],u=n[s],c=e[s],d=u(c,t);if(void 0===d)throw t&&t.type,new Error(tf(14));o[s]=d,r=r||d!==c}return(r=r||i.length!==Object.keys(e).length)?o:e}}({authReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:yf,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case _e:return localStorage.setItem("token",t.payload.authenticationToken),localStorage.setItem("authenticationTokenExpirationDate",t.payload.authenticationTokenExpirationDate),localStorage.setItem("user",JSON.stringify(t.payload.user)),ff(ff({},e),{},{user:t.payload.user,isLoggedIn:!0});case Ie:return localStorage.clear(),ff(ff({},e),{},{user:{},isLoggedIn:!1});case je:return ff(ff({},e),{},{unverifiedUser:t.payload.unverifiedUser});default:return e}},popupReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{view:"",isShowing:!1,payload:{}},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Me:return xf(xf({},e),{},{view:bf.Create,isShowing:!0,payload:{}});case De:return xf(xf({},e),{},{view:bf.Join,isShowing:!0,payload:t.payload});case Le:return xf(xf({},e),{},{isShowing:!1});default:return e}},studyGroupsReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{studyGroups:[],search:[]},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case ze:return t.payload.reset?Sf(Sf({},e),{},{studyGroups:[t.payload.group]}):Sf(Sf({},e),{},{studyGroups:[].concat(wf(e.studyGroups),[t.payload.group])});case $e:return Sf(Sf({},e),{},{search:wf(t.payload.groups)});default:return e}},notificationReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{isShowing:!1},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Fe:return Pf(Pf({},e),{},{type:It,isShowing:!0,message:t.payload.message});case Ue:return Pf(Pf({},e),{},{isShowing:!1});default:return e}}});const Rf=Tf;var _f={},If=ft().isDefined(window.__REDUX_DEVTOOLS_EXTENSION__)&&ft().isDefined(window.__REDUX_DEVTOOLS_EXTENSION__())?lf(Rf,_f,sf(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(tf(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return r=sf.apply(void 0,a)(n.dispatch),ef(ef({},n),{},{dispatch:r})}}}(df),window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__())):lf(Rf,_f);t.render(e.createElement(we,{store:If},e.createElement(e.StrictMode,null,e.createElement(Kp,null))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUks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QUNkLE1BQU0sSUFBSWpqSCxNQUE4Q2tnSCxHQUF1QixNQUc3RWdELEVBQWdCLENBQ2xCdGpELFNBQVVqQixFQUFNaUIsU0FDaEI3NkIsU0FBVSxXQUNSLE9BQU9rK0UsRUFBVXRrSCxXQUFNLEVBQVFoQixhQUcvQmMsRUFBUXVrSCxFQUFZejVHLEtBQUksU0FBVTQ1RyxHQUNwQyxPQUFPQSxFQUFXRCxNQUdwQixPQURBRCxFQUFZLEdBQVF0a0gsV0FBTSxFQUFRRixFQUF0QixDQUE2QmtnRSxFQUFNNTVCLFVBQ3hDLEdBQWMsR0FBYyxHQUFJNDVCLEdBQVEsR0FBSSxDQUNqRDU1QixTQUFVaytFLE1ReG9CQUcsQ0FBZ0J4QixJQUFRbDdHLE9BQU9vOEcsOEJBQWdDcDhHLE9BQU9vOEcsaUNBRWxGbkMsR0FBWXNCLEdBQWFZLElBRS9CUSxFQUFBQSxPQUNJLGdCQUFDLEdBQUQsQ0FBVTFrRCxNQUFPQSxJQUNiLGdCQUFDLGFBQUQsS0FDSSxnQkFBQyxHQUFELFFBR1IxNUQsU0FBU296RyxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vU2VydmVyL01vZGVscy9NZWV0aW5nRm9ybWF0cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9TZXJ2ZXIvTW9kZWxzL1RpbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL1NlcnZlci9WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9BcHAuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL0hvbWUvSG9tZS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvUGFnZS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU2VhcmNoL1NlYXJjaC5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHkvU3R1ZHkuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0hvbWUvQXV0aFZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Qb3B1cC9Qb3B1cC5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFJlc3VsdHMuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1NlYXJjaC9TZWFyY2hWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9zdHVkeUdyb3VwVmlldy9TdHVkeUdyb3VwVmlldy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9BY2NvdW50U2V0dXBGb3JtL0FjY291bnRTZXR1cEZvcm0uc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQ3JlYXRlQWNjb3VudEZvcm0vQ3JlYXRlQWNjb3VudEZvcm0uc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQ3JlYXRlU3R1ZHlHcm91cEZvcm0vQ3JlYXRlU3R1ZHlHcm91cEZvcm0uc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvTG9naW5Gb3JtL0xvZ2luRm9ybS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0uc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoTGlzdGluZy9TZWFyY2hMaXN0aW5nLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9NZW51LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9Ub3BCYXIuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvY29yZS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWZpbGUtYmFzZTY0L2J1aWxkL2J1aWxkLm1pbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9BcHAuc2Nzcz80MTg1Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvZXNtL3ZhbHVlLWVxdWFsLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTdG9yZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL2NvbnN0YW50cy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9zdGF0ZS9hY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvUG9wdXAvUG9wdXAuc2Nzcz9lZTU1Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVTdHVkeUdyb3VwRm9ybS9DcmVhdGVTdHVkeUdyb3VwRm9ybS5zY3NzPzVkMGEiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL0Zvcm0vRm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvY29yZS5zY3NzP2IzZGIiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL0J1dHRvbi9CdXR0b25UeXBlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9MYWJlbC9MYWJlbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL1RvZ2dsZUZpZWxkL1RvZ2dsZUZpZWxkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9Ub2dnbGUvVG9nZ2xlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9Ecm9wZG93bi9Ecm9wZG93bi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvQ29sb3JQaWNrZXIvQ29sb3JQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0NyZWF0ZVN0dWR5R3JvdXBGb3JtL0NyZWF0ZVN0dWR5R3JvdXBGb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHkvQ3JlYXRlU3R1ZHlHcm91cFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9Kb2luU3R1ZHlHcm91cFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Qb3B1cC9Qb3B1cFR5cGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvUG9wdXAvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ob3RpZmljYXRpb25zL05vdGlmaWNhdGlvbi5zY3NzP2JjNGMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ob3RpZmljYXRpb25zL25vdGlmaWNhdGlvblR5cGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9Ib21lL0hvbWUuc2Nzcz83ZmI4Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvUGFnZS5zY3NzP2VkOWEiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9QYWdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvVmlld3MuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0xvZ2luRm9ybS9Mb2dpbkZvcm0uc2Nzcz84MjJkIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Mb2dpbkZvcm0vTG9naW5Gb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvSG9tZS9BdXRoVmlldy5zY3NzPzc0MzkiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ib21lL0F1dGhWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvSG9tZS9Mb2dpblZpZXcvTG9naW5WaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVBY2NvdW50Rm9ybS9DcmVhdGVBY2NvdW50Rm9ybS5zY3NzP2E5NjQiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0NyZWF0ZUFjY291bnRGb3JtL0NyZWF0ZUFjY291bnRGb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvSG9tZS9DcmVhdGVBY2NvdW50Vmlldy9DcmVhdGVBY2NvdW50Vmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0hvbWUvVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb25WaWV3L1ZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQWNjb3VudFNldHVwRm9ybS9BY2NvdW50U2V0dXBGb3JtLnNjc3M/NDE1ZSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQWNjb3VudFNldHVwRm9ybS9BY2NvdW50U2V0dXBGb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvSG9tZS9BY2NvdW50U2V0dXBWaWV3L0FjY291bnRTZXR1cFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9Ib21lL0hvbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9TdHVkeS9TdHVkeS5zY3NzPzk2NTUiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9Ub3BCYXIuc2Nzcz83YjJjIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvTWVudS5zY3NzP2NjYjUiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9NZW51LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHkvc3R1ZHlHcm91cFZpZXcvU3R1ZHlHcm91cFZpZXcuc2Nzcz9mNDQxIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHkvc3R1ZHlHcm91cFZpZXcvU3R1ZHlHcm91cFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9TdHVkeS9TdHVkeS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL1NlYXJjaC9TZWFyY2guc2Nzcz9jYWEyIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFZpZXcuc2Nzcz9iOTBlIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0uc2Nzcz9lY2YxIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zaGVldC9kaXN0L2Vtb3Rpb24tc2hlZXQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9Ub2tlbml6ZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvRW51bS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1ByZWZpeGVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1BhcnNlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY2FjaGUvZGlzdC9lbW90aW9uLWNhY2hlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9oYXNoLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9lbW90aW9uLXNlcmlhbGl6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLWVsZW1lbnQtNjk5ZTY5MDguYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3V0aWxzL2Rpc3QvZW1vdGlvbi11dGlscy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvZGlzdC9lbW90aW9uLXN0eWxlZC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWVwbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZXJnZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZm9ybWF0TXVpRXJyb3JNZXNzYWdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zcGFjaW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JvcmRlcnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9kaXNwbGF5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vZmxleGJveC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2dyaWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wb3NpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc2hhZG93cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9nZXRUaGVtZVZhbHVlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9leHRlbmRTeFByb3AuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL3NoYXBlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lV2l0aG91dERlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvcHJpdmF0ZS10aGVtaW5nL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlQm94LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MvQ2xhc3NOYW1lR2VuZXJhdG9yLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9wdXJwbGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUcmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUaGVtZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JveC9Cb3guanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9nZW5lcmF0ZVV0aWxpdHlDbGFzcy9nZW5lcmF0ZVV0aWxpdHlDbGFzcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1NsaWRlclVuc3R5bGVkL3NsaWRlclVuc3R5bGVkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1NsaWRlclVuc3R5bGVkL1NsaWRlclZhbHVlTGFiZWxVbnN0eWxlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL2lzSG9zdENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL2FwcGVuZE93bmVyU3RhdGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcy9jb21wb3NlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlSXNGb2N1c1Zpc2libGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3NldFJlZi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRm9ya1JlZi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRW5oYW5jZWRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Zpc3VhbGx5SGlkZGVuLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvU2xpZGVyVW5zdHlsZWQvdXNlU2xpZGVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvU2xpZGVyVW5zdHlsZWQvU2xpZGVyVW5zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vcmVzb2x2ZVByb3BzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vcHJvcHNUb0NsYXNzS2V5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlU3R5bGVkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3Nob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NsaWRlci9TbGlkZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL1JhbmdlL1RpbWVSYW5nZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9PdXRsaW5lZElucHV0L05vdGNoZWRPdXRsaW5lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXQvb3V0bGluZWRJbnB1dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1RleHRhcmVhQXV0b3NpemUvVGV4dGFyZWFBdXRvc2l6ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3R5bGVkLWVuZ2luZS9HbG9iYWxTdHlsZXMvR2xvYmFsU3R5bGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL3V0aWxzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0QmFzZS9pbnB1dEJhc2VDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0QmFzZS9JbnB1dEJhc2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvT3V0bGluZWRJbnB1dC9PdXRsaW5lZElucHV0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3QvTGlzdENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VJc0ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL3RvdWNoUmlwcGxlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL1RvdWNoUmlwcGxlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvUmlwcGxlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvYnV0dG9uQmFzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0RpdmlkZXIvZGl2aWRlckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1JY29uL2xpc3RJdGVtSWNvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1UZXh0L2xpc3RJdGVtVGV4dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudUl0ZW0vbWVudUl0ZW1DbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01lbnVJdGVtL01lbnVJdGVtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2lzTXVpRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vaXNNdWlFbGVtZW50LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3QvbGlzdENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdC9MaXN0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZXRTY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2dldFNjcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudUxpc3QvTWVudUxpc3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFwZXIvcGFwZXJDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BhcGVyL1BhcGVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3RyYW5zaXRpb25zL3V0aWxzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dyb3cvR3Jvdy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvUG9ydGFsL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL01vZGFsVW5zdHlsZWQvTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvVW5zdGFibGVfVHJhcEZvY3VzL1Vuc3RhYmxlX1RyYXBGb2N1cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL01vZGFsVW5zdHlsZWQvbW9kYWxVbnN0eWxlZENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9Nb2RhbFVuc3R5bGVkL01vZGFsVW5zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9CYWNrZHJvcFVuc3R5bGVkL2JhY2tkcm9wVW5zdHlsZWRDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvQmFja2Ryb3BVbnN0eWxlZC9CYWNrZHJvcFVuc3R5bGVkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZhZGUvRmFkZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CYWNrZHJvcC9CYWNrZHJvcC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Nb2RhbC9Nb2RhbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Qb3BvdmVyL3BvcG92ZXJDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BvcG92ZXIvUG9wb3Zlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9NZW51L21lbnVDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01lbnUvTWVudS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9OYXRpdmVTZWxlY3QvbmF0aXZlU2VsZWN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TZWxlY3Qvc2VsZWN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TZWxlY3QvU2VsZWN0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3ZnSWNvbi9zdmdJY29uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dC9pbnB1dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRmlsbGVkSW5wdXQvZmlsbGVkSW5wdXRDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZpbGxlZElucHV0L0ZpbGxlZElucHV0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NlbGVjdC9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaGlwL2NoaXBDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NoaXAvQ2hpcC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvRHJvcGRvd24vTXVsdGlwbGVEcm9wZG93bi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoRm9ybS9TZWFyY2hGb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TZWFyY2gvU2VhcmNoUmVzdWx0cy5zY3NzPzQwMjkiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1NlYXJjaExpc3RpbmcvU2VhcmNoTGlzdGluZy5zY3NzPzliNmUiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1NlYXJjaExpc3RpbmcvU2VhcmNoTGlzdGluZy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1NlYXJjaC9TZWFyY2hSZXN1bHRWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU2VhcmNoL1NlYXJjaC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL0FwcC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL3JlZHVjZXJzL2F1dGhSZWR1Y2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvUG9wdXAvUG9wdXBUeXBlcy5KcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL3JlZHVjZXJzL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvc3RhdGUvcmVkdWNlcnMvcG9wdXBSZWR1Y2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvc3RhdGUvcmVkdWNlcnMvc3R1ZHlHcm91cHNSZWR1Y2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvc3RhdGUvcmVkdWNlcnMvbm90aWZpY2F0aW9uUmVkdWNlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9NjAxMDMsYz02MDEwNixkPTYwMTA3LGU9NjAxMDgsZj02MDExNCxnPTYwMTA5LGg9NjAxMTAsaz02MDExMixsPTYwMTEzLG09NjAxMjAsbj02MDExNSxwPTYwMTE2LHE9NjAxMjEscj02MDEyMix1PTYwMTE3LHY9NjAxMjksdz02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB4PVN5bWJvbC5mb3I7Yj14KFwicmVhY3QuZWxlbWVudFwiKTtjPXgoXCJyZWFjdC5wb3J0YWxcIik7ZD14KFwicmVhY3QuZnJhZ21lbnRcIik7ZT14KFwicmVhY3Quc3RyaWN0X21vZGVcIik7Zj14KFwicmVhY3QucHJvZmlsZXJcIik7Zz14KFwicmVhY3QucHJvdmlkZXJcIik7aD14KFwicmVhY3QuY29udGV4dFwiKTtrPXgoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtsPXgoXCJyZWFjdC5zdXNwZW5zZVwiKTttPXgoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO249eChcInJlYWN0Lm1lbW9cIik7cD14KFwicmVhY3QubGF6eVwiKTtxPXgoXCJyZWFjdC5ibG9ja1wiKTtyPXgoXCJyZWFjdC5zZXJ2ZXIuYmxvY2tcIik7dT14KFwicmVhY3QuZnVuZGFtZW50YWxcIik7dj14KFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTt3PXgoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxuZnVuY3Rpb24geShhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdD1hLiQkdHlwZW9mO3N3aXRjaCh0KXtjYXNlIGI6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgZDpjYXNlIGY6Y2FzZSBlOmNhc2UgbDpjYXNlIG06cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgaDpjYXNlIGs6Y2FzZSBwOmNhc2UgbjpjYXNlIGc6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdH19Y2FzZSBjOnJldHVybiB0fX19dmFyIHo9ZyxBPWIsQj1rLEM9ZCxEPXAsRT1uLEY9YyxHPWYsSD1lLEk9bDtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPXo7ZXhwb3J0cy5FbGVtZW50PUE7ZXhwb3J0cy5Gb3J3YXJkUmVmPUI7ZXhwb3J0cy5GcmFnbWVudD1DO2V4cG9ydHMuTGF6eT1EO2V4cG9ydHMuTWVtbz1FO2V4cG9ydHMuUG9ydGFsPUY7ZXhwb3J0cy5Qcm9maWxlcj1HO2V4cG9ydHMuU3RyaWN0TW9kZT1IO1xuZXhwb3J0cy5TdXNwZW5zZT1JO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ofTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Z307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWJ9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09a307ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZH07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1wfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PW59O1xuZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWN9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWZ9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZX07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bH07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWR8fGE9PT1mfHxhPT09dnx8YT09PWV8fGE9PT1sfHxhPT09bXx8YT09PXd8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cHx8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT1nfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT11fHxhLiQkdHlwZW9mPT09cXx8YVswXT09PXIpPyEwOiExfTtcbmV4cG9ydHMudHlwZU9mPXk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgdmFyIG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyAnRVRJTUVET1VUJyA6ICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBmdW5jdGlvbihjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IChjYW5jZWwgJiYgY2FuY2VsLnR5cGUpID8gbmV3IENhbmNlbCgnY2FuY2VsZWQnKSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4gJiYgY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcbmF4aW9zLlZFUlNJT04gPSByZXF1aXJlKCcuL2Vudi9kYXRhJykudmVyc2lvbjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGwgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICB9XG4gICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuID0gZnVuY3Rpb24ob25mdWxmaWxsZWQpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gIH1cbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcbnZhciB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3ZhbGlkYXRvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVyZ2VNYXAgPSB7XG4gICAgJ3VybCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ21ldGhvZCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2RhdGEnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdiYXNlVVJMJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVxdWVzdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlc3BvbnNlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncGFyYW1zU2VyaWFsaXplcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0TWVzc2FnZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3dpdGhDcmVkZW50aWFscyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2FkYXB0ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZVR5cGUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmQ29va2llTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25VcGxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uRG93bmxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2RlY29tcHJlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Qm9keUxlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zcG9ydCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBzQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdjYW5jZWxUb2tlbic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3NvY2tldFBhdGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZUVuY29kaW5nJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndmFsaWRhdGVTdGF0dXMnOiBtZXJnZURpcmVjdEtleXNcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKGNvbmZpZzEpLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgdmFyIG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICB2YXIgY29uZmlnVmFsdWUgPSBtZXJnZShwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB7XG4gICAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gICAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2VcbiAgfSxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4yMy4wXCJcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gKHR5cGVvZiBwYXlsb2FkID09PSAnb2JqZWN0JykgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSByZXF1aXJlKCcuLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IEVycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0KTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydE9wdGlvbnM6IGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCIvKipcclxuICogT3V0bGluZXMgdGhlIHR5cGUgb2YgZ3JvdXAgdGhhdCBhIHN0dWR5IGdyb3VwIGNhbiBiZSxcclxuICogaWdub3Jpbmcgd2hldGhlciBvciBub3QgdGhlIGdyb3VwIGlzIGEgdHV0b3IgZ3JvdXAuXHJcbiAqIFRoaXMgaXMgdXNlZCB0byBkZXRlcm1pbmUgdGhlIG1lZXRpbmcgcHJlZmVyZW5jZSBvZlxyXG4gKiBhIHN0dWR5IGdyb3VwLiBUaGlzIGlzIHVzZWQgd2hlbiBzZWFyY2hpbmcgZm9yIHN0dWR5IGdyb3Vwcy5cclxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICogQGRhdGUgICAwMS8yNS8yMDIyXHJcbiAqL1xyXG5jb25zdCBNZWV0aW5nRm9ybWF0cyA9IHtcclxuICAgIEluUGVyc29uOiBcIkluIHBlcnNvblwiLFxyXG4gICAgTWl4ZWQ6IFwiSW4gcGVyc29uIG9yIG9ubGluZVwiLFxyXG4gICAgT25saW5lOiBcIk9ubGluZVwiXHJcbn07XHJcbm1vZHVsZS5leHBvcnRzID0gTWVldGluZ0Zvcm1hdHM7XHJcbiIsIi8vIFRoZSBmb2xsb3dpbmcgZW51bWVyYXRpb25zIGFyZSB1c2VkIHRvIHNpbXBsaWZ5IHRoZSBwcm9jZXNzIG9mIHdvcmtpbmcgd2l0aCBtZWV0aW5ncyBhbmQgdGltZS5cclxuY29uc3QgRGF5cyA9IHtcclxuICAgIE1vbmRheTogXCJNb25kYXlcIixcclxuICAgIFR1ZXNkYXk6IFwiVHVlc2RheVwiLFxyXG4gICAgV2VkbmVzZGF5OiBcIldlZG5lc2RheVwiLFxyXG4gICAgVGh1cnNkYXk6IFwiVGh1cnNkYXlcIixcclxuICAgIEZyaWRheTogXCJGcmlkYXlcIixcclxuICAgIFNhdHVyZGF5OiBcIlNhdHVyZGF5XCIsXHJcbiAgICBTdW5kYXk6IFwiU3VuZGF5XCJcclxufTtcclxuY29uc3QgTWVldGluZ0ZyZXF1ZW5jaWVzID0ge1xyXG4gICAgRGFpbHk6IFwiRGFpbHlcIixcclxuICAgIE1vbnRobHk6IFwiTW9udGhseVwiLFxyXG4gICAgT25lVGltZTogXCJPbmUtdGltZVwiLFxyXG4gICAgV2Vla2x5OiBcIldlZWtseVwiLFxyXG4gICAgWWVhcmx5OiBcIlllYXJseVwiXHJcbn07XHJcbmNvbnN0IFBhcnRPZkRheSA9IHtcclxuICAgIEFtOiBcIkFNXCIsXHJcbiAgICBQbTogXCJQTVwiXHJcbn07XHJcbmxldCBUaW1lcyA9IFtdO1xyXG5bLi4uQXJyYXkoMTIpLmtleXMoKV0ubWFwKChob3VyKSA9PiB7XHJcbiAgICBjb25zdCBNaW51dGVzID0gW1wiMDBcIiwgXCIxNVwiLCBcIjMwXCIsIFwiNDVcIl07XHJcbiAgICBNaW51dGVzLm1hcCgobWludXRlKSA9PiB7XHJcbiAgICAgICAgVGltZXMucHVzaChgJHtob3VyfToke21pbnV0ZX1gKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBBIG1vZGVsIGZvciByZXByZXNlbnRpbmcgdGltZS5cclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGhvdXIgVGhlIGhvdXIgY29tcG9uZW50IG9mIHRpbWUgKDEyLWhvdXIgZm9ybWF0KS5cclxuICogQHByb3BlcnR5IHtTdHJpbmd9IG1pbnV0ZSBUaGUgbWludXRlIGNvbXBvbmVudCBvZiB0aW1lLlxyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcGFydE9mRGF5IFRoZSBwYXJ0IG9mIHRoZSBkYXkgKEFNIG9yIFBNKS5cclxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICogQGRhdGUgICAwMS8yOC8yMDIyXHJcbiAqL1xyXG5jbGFzcyBUaW1lIHtcclxuICAgIGNvbnN0cnVjdG9yKGhvdXIsIG1pbnV0ZSwgcGFydE9mRGF5KSB7XHJcbiAgICAgICAgdGhpcy5ob3VyID0gaG91cjtcclxuICAgICAgICB0aGlzLm1pbnV0ZSA9IG1pbnV0ZTtcclxuICAgICAgICB0aGlzLnBhcnRPZkRheSA9IHBhcnRPZkRheTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiBvbmUgdGltZSBpcyBhZnRlciBhbm90aGVyLlxyXG4gICAgICogQHBhcmFtIHtUaW1lfSBsYXRlclRpbWUgVGhlIHRpbWUgdG8gY29tcGFyZSBhZ2FpbnN0LlxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgc2Vjb25kIHRpbWUgY29tZXMgYWZ0ZXIgdGhlIGZpcnN0LCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gICAgICogQGRhdGUgICAwMS8yOC8yMDIyXHJcbiAgICAgKi9cclxuICAgIGlzQWZ0ZXIobGF0ZXJUaW1lKSB7XHJcbiAgICAgICAgbGV0IGlzQWZ0ZXIgPSBmYWxzZTtcclxuICAgICAgICAvLyBJZiB0aGUgdGltZXMgYXJlIGJvdGggQU0gb3IgYm90aCBQTS5cclxuICAgICAgICBpZiAodGhpcy5wYXJ0T2ZEYXkgPT09IGxhdGVyVGltZS5wYXJ0T2ZEYXkpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGxhdGVyIGhvdXIgY29tZXMgYWZ0ZXIgdGhpcyBob3VyLlxyXG4gICAgICAgICAgICBpZiAodGhpcy5ob3VyIDwgbGF0ZXJUaW1lLmhvdXIpIHtcclxuICAgICAgICAgICAgICAgIGlzQWZ0ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGxhdGVyIGhvdXIgY29tZXMgYmVmb3JlIHRoaXMgaG91ci5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhvdXIgPiBsYXRlclRpbWUuaG91cikge1xyXG4gICAgICAgICAgICAgICAgaXNBZnRlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHRpbWVzIGhhdmUgdGhlIHNhbWUgaG91ci5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlzQWZ0ZXIgPSB0aGlzLm1pbnV0ZSA8IGxhdGVyVGltZS5taW51dGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gSWYgdGhlIGxhdGVyIHRpbWUgaXMgUE0gd2hpbGUgdGhpcyB0aW1lIGlzIEFNLlxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJ0T2ZEYXkgPCBsYXRlclRpbWUucGFydE9mRGF5KSB7XHJcbiAgICAgICAgICAgIGlzQWZ0ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyBJZiB0aGUgbGF0ZXIgdGltZSBpcyBBTSB3aGlsZSB0aGlzIHRpbWUgaXMgUE0uXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaXNBZnRlciA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNBZnRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB3aGV0aGVyIGEgZ2l2ZW4gbWVldGluZyB0aW1lIGlzIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmRpbmdcclxuICAgICAqIG9mIGEgdXNlcidzIGF2YWlsYWJpbGl0eSB0aW1lcy5cclxuICAgICAqIEBwYXJhbSB7VGltZX0gbWVldGluZ1RpbWUgVGhlIHRpbWUgb2YgdGhlIG1lZXRpbmcuXHJcbiAgICAgKiBAcGFyYW0ge1RpbWV9IHN0YXJ0VGltZSBUaGUgdGltZSBhdmFpbGFiaWxpdHkgc3RhcnRzLlxyXG4gICAgICogQHBhcmFtIHtUaW1lfSBlbmRUaW1lIFRoZSB0aW1lIGF2YWlsYWJpbGl0eSBlbmRzLlxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWVldGluZyB0aW1lIGlzIGJldHdlZW4gdGhlIHR3byB0aW1lcywgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICAgICAqIEBkYXRlICAgMDEvMjgvMjAyMlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNCZXR3ZWVuKG1lZXRpbmdUaW1lLCBzdGFydFRpbWUsIGVuZFRpbWUpIHtcclxuICAgICAgICBjb25zdCBzdGFydFRpbWVJc1ZhbGlkID0gbWVldGluZ1RpbWUuaXNBZnRlcihzdGFydFRpbWUpO1xyXG4gICAgICAgIGNvbnN0IGVuZFRpbWVJc1ZhbGlkID0gZW5kVGltZS5pc0FmdGVyKG1lZXRpbmdUaW1lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0YXJ0VGltZUlzVmFsaWQgJiYgZW5kVGltZUlzVmFsaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgdGhlIHRpbWUgZnJvbSBhIHRpbWUgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRpbWVTdHJpbmcgVGhlIHRpbWUgc3RyaW5nIHRvIHBhcnNlLlxyXG4gICAgICogQHJldHVybiB7VGltZX0gVGhlIHRpbWUgb2JqZWN0LlxyXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICAgICAqIEBkYXRlICAgMDEvMjgvMjAyMlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcGFyc2VUaW1lU3RyaW5nKHRpbWVTdHJpbmcpIHtcclxuICAgICAgICAvLyBUaGUgdGltZSBzdHJpbmcgd2lsbCBiZSBpbiBhIHByZWRpY3RhYmxlIGZvcm1hdC5cclxuICAgICAgICBjb25zdCBDT0xPTiA9IFwiOlwiO1xyXG4gICAgICAgIGNvbnN0IGNvbG9uSW5kZXggPSB0aW1lU3RyaW5nLmluZGV4T2YoQ09MT04pO1xyXG4gICAgICAgIGNvbnN0IGJlZ2lubmluZ09mVGltZVN0cmluZyA9IDA7XHJcbiAgICAgICAgY29uc3QgaG91ciA9IHRpbWVTdHJpbmcuc2xpY2UoYmVnaW5uaW5nT2ZUaW1lU3RyaW5nLCBjb2xvbkluZGV4KTtcclxuICAgICAgICBjb25zdCBwYXJ0T2ZEYXlJbmRleCA9IHRpbWVTdHJpbmcubGVuZ3RoIC0gMjtcclxuICAgICAgICBjb25zdCBtaW51dGUgPSB0aW1lU3RyaW5nLnNsaWNlKGNvbG9uSW5kZXggKyAxLCBwYXJ0T2ZEYXlJbmRleCk7XHJcbiAgICAgICAgY29uc3QgcGFydE9mRGF5ID0gdGltZVN0cmluZy5zbGljZShwYXJ0T2ZEYXlJbmRleCwgdGltZVN0cmluZy5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IHRpbWUgPSBuZXcgVGltZShob3VyLCBtaW51dGUsIHBhcnRPZkRheSk7XHJcbiAgICAgICAgcmV0dXJuIHRpbWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0geyBEYXlzLCBNZWV0aW5nRnJlcXVlbmNpZXMsIFBhcnRPZkRheSwgVGltZXMsIFRpbWUgfTtcclxuIiwiLyoqXHJcbiAqIERlZmluZXMgdGhlIHJlc3BvbnNlIG1lc3NhZ2VzIHRoZSBzZXJ2ZXIgY2FuIHNlbmQuXHJcbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXHJcbiAqIEBkYXRlICAgMTAvMDUvMjAyMVxyXG4gKi9cclxuY29uc3QgUmVzcG9uc2VNZXNzYWdlcyA9IHtcclxuICAgIEFjY291bnQ6IHtcclxuICAgICAgICBFcnJvckNyZWF0ZUFjY291bnQ6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBjcmVhdGUgYW4gYWNjb3VudC5cIixcclxuICAgICAgICBOb3RPdmVyMTg6IFwiWW91IG5lZWQgdG8gYmUgMTggb3Igb2xkZXIgdG8gY3JlYXRlIGFuIGFjY291bnQuXCIsXHJcbiAgICAgICAgSW5jb3JyZWN0UGFzc3dvcmQ6IFwiVGhlIHBhc3N3b3JkIHByb3ZpZGVkIGlzIGluY29ycmVjdC5cIixcclxuICAgICAgICBTdWNjZXNzQWNjb3VudENyZWF0ZWQ6IFwiVGhlIGFjY291bnQgd2FzIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5LlwiLFxyXG4gICAgICAgIFN1Y2Nlc3NBY2NvdW50U2V0dXA6IFwiVGhlIGFjY291bnQgd2FzIHNldHVwIHN1Y2Nlc3NmdWxseS5cIixcclxuICAgICAgICBTdWNjZXNzTG9naW46IFwiVGhlIGxvZ2luIHdhcyBzdWNjZXNzZnVsLlwiLFxyXG4gICAgICAgIFN1Y2Nlc3NVcGRhdGVBdXRoZW50aWNhdGlvblRva2VuOiBcIlRoZSBhdXRoZW50aWNhdGlvbiB0b2tlbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgdXBkYXRlZC5cIixcclxuICAgICAgICBVbnZlcmlmaWVkVXNlcldhc0ZvdW5kOiBcIlRoZSB1bnZlcmlmaWVkIHVzZXIgd2FzIGZvdW5kLlwiLFxyXG4gICAgICAgIFVzZXJBbHJlYWR5RXhpc3RzOiBcIkEgdXNlciB3aXRoIHRoYXQgZW1haWwgYWRkcmVzcyBhbHJlYWR5IGV4aXN0cy5cIixcclxuICAgICAgICBVc2VyTm90Rm91bmQ6IFwiVGhlIHVzZXIgd2FzIG5vdCBmb3VuZC5cIlxyXG4gICAgfSxcclxuICAgIFN0dWR5R3JvdXA6IHtcclxuICAgICAgICBFcnJvckNyZWF0ZVN0dWR5R3JvdXA6IFwiQW4gZXJyb3Igb2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGNyZWF0ZSBhIHN0dWR5IGdyb3VwLlwiLFxyXG4gICAgICAgIFN1Y2Nlc3NTdHVkeUdyb3VwQ3JlYXRlZDogXCJUaGUgc3R1ZHkgZ3JvdXAgd2FzIGNyZWF0ZWQgc3VjZXNzZnVsbHkuXCIsXHJcbiAgICAgICAgU3VjY2Vzc1N0dWR5R3JvdXBzUmV0cmlldmVkOiBcIlRoZSBzdHVkeSBncm91cHMgd2VyZSByZXRyaWV2ZWQgc3VjZXNzZnVsbHkuXCIsXHJcbiAgICAgICAgRXJyb3JHZXR0aW5nU2VhcmNoUmVzdWx0czogXCJBbiBlcnJvciBvY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gZ2V0IHNlYXJjaCByZXN1bHRzLlwiXHJcbiAgICB9XHJcbn07XHJcbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2VNZXNzYWdlcztcclxuIiwiLyoqXHJcbiAqIFRoaXMgZGVmaW5lcyB0aGUgcm91dGVzIHRoZSBzZXJ2ZXIgd2lsbCBzZXJ2ZS5cclxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICogQGRhdGUgICAwNy8zMS8yMDIxXHJcbiAqL1xyXG5jb25zdCBSb3V0ZXMgPSB7XHJcbiAgICBBY2NvdW50OiB7XHJcbiAgICAgICAgQ3JlYXRlQWNjb3VudDogXCIvYXBpL2FjY291bnQvY3JlYXRlXCIsXHJcbiAgICAgICAgR2V0VW52ZXJpZmllZFVzZXI6IFwiL2FwaS9hY2NvdW50L2dldC11bnZlcmlmaWVkLXVzZXJcIixcclxuICAgICAgICBMb2dpbjogXCIvYXBpL2FjY291bnQvbG9naW5cIixcclxuICAgICAgICBTZXR1cEFjY291bnQ6IFwiL2FwaS9hY2NvdW50L3NldHVwXCIsXHJcbiAgICAgICAgVXBkYXRlQXV0aGVudGljYXRpb25Ub2tlbjogXCIvYXBpL2FjY291bnQvdXBkYXRlLWF1dGhlbnRpY2F0aW9uLXRva2VuXCJcclxuICAgIH0sXHJcbiAgICBTdGF0aWNSZXNvdXJjZXM6IHtcclxuICAgICAgICBJbmRleDogXCIvKlwiXHJcbiAgICB9LFxyXG4gICAgU2VhcmNoOiB7XHJcbiAgICAgICAgR2V0U2VhcmNoUmVzdWx0czogXCIvYXBpL3NlYXJjaC9nZXRcIlxyXG4gICAgfSxcclxuICAgIFN0dWR5R3JvdXA6IHtcclxuICAgICAgICBDcmVhdGVTdHVkeUdyb3VwOiBcIi9hcGkvc3R1ZHktZ3JvdXAvY3JlYXRlXCIsXHJcbiAgICAgICAgR2V0VXNlclN0dWR5R3JvdXBzOiBcIi9hcGkvc3R1ZHktZ3JvdXAvZ2V0XCJcclxuICAgIH1cclxufTtcclxubW9kdWxlLmV4cG9ydHMgPSBSb3V0ZXM7XHJcbiIsIi8qKlxyXG4gKiBUaGlzIGlzIHVzZWQgdG8gdmFsaWRhdGUgYW5kIHZlcmlmeSBkYXRhIHRocm91Z2hvdXQgdGhlIGFwcGxpY2F0aW9uLlxyXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gKiBAZGF0ZSAgIDA3LzI5LzIwMjFcclxuICovXHJcbmNsYXNzIFZhbGlkYXRvciB7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiBhIHZhcmlhYmxlIGlzIGRlZmluZWQuXHJcbiAgICAgKiBAcGFyYW0gdmFyaWFibGUgVGhlIHZhcmlhYmxlIHRvIGNoZWNrIGZvciBiZWluZyBkZWZpbmVkLlxyXG4gICAgICogQHJldHVybiB7Ym9vbH0gVHJ1ZSBpZiB0aGUgdmFyaWFibGUgaXMgZGVmaW5lZCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICAgICAqIEBkYXRlICAgMDcvMjkvMjAyMVxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNEZWZpbmVkKHZhcmlhYmxlKSB7XHJcbiAgICAgICAgY29uc3QgdW5kZWZpbmVkVHlwZSA9IFwidW5kZWZpbmVkXCI7XHJcbiAgICAgICAgY29uc3QgaXNOb3RVbmRlZmluZWQgPSB1bmRlZmluZWRUeXBlICE9PSB0eXBlb2YgdmFyaWFibGU7XHJcbiAgICAgICAgY29uc3QgaXNOb3ROdWxsID0gbnVsbCAhPSB2YXJpYWJsZTtcclxuICAgICAgICByZXR1cm4gaXNOb3RVbmRlZmluZWQgJiYgaXNOb3ROdWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIGEgdmFyaWFibGUgaXMgYW4gZXJyb3IuXHJcbiAgICAgKiBAcGFyYW0gdmFyaWFibGUgVGhlIHZhcmlhYmxlIHRvIGNoZWNrIGZvciBiZWluZyBhbiBlcnJvci5cclxuICAgICAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWYgdGhlIHZhcmlhYmxlIGlzIGFuIGVycm9yLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gICAgICogQGRhdGUgICAwOC8wMi8yMDIxXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0Vycm9yKHZhcmlhYmxlKSB7XHJcbiAgICAgICAgY29uc3QgdmFyaWFibGVJc0Vycm9yID0gdmFyaWFibGUgaW5zdGFuY2VvZiBFcnJvcjtcclxuICAgICAgICByZXR1cm4gdmFyaWFibGVJc0Vycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIGEgdmFyaWFibGUgaXMgdW5kZWZpbmVkLlxyXG4gICAgICogQHBhcmFtIHZhcmlhYmxlIFRoZSB2YXJpYWJsZSB0byBjaGVjayBmb3IgYmVpbmcgdW5kZWZpbmVkLlxyXG4gICAgICogQHJldHVybiB7Ym9vbH0gVHJ1ZSBpZiB0aGUgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gICAgICogQGRhdGUgICAwNy8yOS8yMDIxXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc1VuZGVmaW5lZCh2YXJpYWJsZSkge1xyXG4gICAgICAgIGNvbnN0IHVuZGVmaW5lZFR5cGUgPSBcInVuZGVmaW5lZFwiO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWRUeXBlID09PSB0eXBlb2YgdmFyaWFibGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVmFsaWRhdG9yO1xyXG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU1lcnJpd2VhdGhlcjppdGFsLHdnaHRAMCwzMDA7MCw0MDA7MCw3MDA7MCw5MDA7MSwzMDA7MSw0MDA7MSw3MDA7MSw5MDAmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKntmb250LWZhbWlseTpcXFwiTWVycml3ZWF0aGVyXFxcIiwgc2VyaWY7b3ZlcmZsb3cteDpoaWRkZW47bWFyZ2luOjA7cGFkZGluZzowO2JveC1zaXppbmc6Ym9yZGVyLWJveH1odG1se2JhY2tncm91bmQtY29sb3I6I2Y5ZjVmMTtiYWNrZ3JvdW5kLWltYWdlOnVybChcXFwiaHR0cHM6Ly93d3cuZmxpcG5hdGlvbmFsLm9yZy93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wMy9DQUUtV2Vic2l0ZS1GdWxsLUJhY2tncm91bmQtVGV4dHVyZTE5MDJ4MTIwMC05LmpwZ1xcXCIpO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7aGVpZ2h0OjEwMCV9aHRtbCBib2R5e2hlaWdodDoxMDAlfWh0bWwgYm9keSAjcm9vdHtoZWlnaHQ6MTAwJX1odG1sIGJvZHkgI3Jvb3QgLmNvbnRhaW5lcntoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9BcHAuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBR0EsRUFDSSxpQ0FBa0MsQ0FDbEMsaUJBQWtCLENBQ2xCLFFBQVMsQ0FDVCxTQUFVLENBQ1YscUJBQXNCLENBQ3pCLEtBRUcsd0JDWDJCLENEYTNCLGtJQUFtSSxDQUduSSwwQkFBMkIsQ0FDM0IsMkJBQTRCLENBQzVCLHFCQUFzQixDQUV0QixXQUFZLENBVmhCLFVBYVEsV0FBWSxDQWJwQixnQkFlWSxXQUFZLENBZnhCLDJCQWlCZ0IsV0FBWSxDQUNaLGVBQWdCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG5AaW1wb3J0IHVybChcXFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1NZXJyaXdlYXRoZXI6aXRhbCx3Z2h0QDAsMzAwOzAsNDAwOzAsNzAwOzAsOTAwOzEsMzAwOzEsNDAwOzEsNzAwOzEsOTAwJmRpc3BsYXk9c3dhcFxcXCIpO1xcclxcblxcclxcbioge1xcclxcbiAgICBmb250LWZhbWlseTogXFxcIk1lcnJpd2VhdGhlclxcXCIsIHNlcmlmO1xcclxcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG59XFxyXFxuaHRtbCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRtYWluLWJhY2tncm91bmQtY29sb3I7XFxyXFxuICAgIC8qIFRoZSBpbWFnZSB1c2VkICovXFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiaHR0cHM6Ly93d3cuZmxpcG5hdGlvbmFsLm9yZy93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wMy9DQUUtV2Vic2l0ZS1GdWxsLUJhY2tncm91bmQtVGV4dHVyZTE5MDJ4MTIwMC05LmpwZ1xcXCIpO1xcclxcblxcclxcbiAgICAvKiBDZW50ZXIgYW5kIHNjYWxlIHRoZSBpbWFnZSBuaWNlbHkgKi9cXHJcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcclxcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcclxcblxcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuXFxyXFxuICAgIGJvZHkge1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgI3Jvb3Qge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgICAgICAgICAuY29udGFpbmVyIHtcXHJcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIixcIiRtYWluLWJhY2tncm91bmQtY29sb3I6ICNmOWY1ZjE7XFxyXFxuJHByaW1hcnktYnV0dG9uLWNvbG9yOiAjZDRhYThjNzU7XFxyXFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzhjZDQ4Yzc1O1xcclxcbiRkZXN0cnVjdGl2ZS1idXR0b24tY29sb3I6ICNkNDhjOGM3NTtcXHJcXG4kYm9yZGVyLWNvbG9yOiAjZDRhYThjO1xcclxcbiRoaWdobGlnaHQtY29sb3I6ICNmZmRhNWE7XFxyXFxuXFxyXFxuJG1vYmlsZS13aWR0aDogODAwcHg7XFxyXFxuXFxyXFxuQG1peGluIG1vYmlsZSB7XFxyXFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiN7JG1vYmlsZS13aWR0aH0pIHtcXHJcXG4gICAgICAgIEBjb250ZW50O1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5Ib21lUGFnZXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS5Ib21lUGFnZSAuc3VidGl0bGV7cG9zaXRpb246Zml4ZWQ7Zm9udC1zaXplOjgwcHg7bWFyZ2luOjEwMHB4O292ZXJmbG93LXg6dmlzaWJsZTtmb250LXdlaWdodDozMDA7Y29sb3I6cmdiYSg1OCw1OCw1OCwwLjg3Mik7Zm9udC13ZWlnaHQ6OTAwO2ZvbnQtc2l6ZTo5MHB4fS5Ib21lUGFnZTo6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjt3aWR0aDo5NCU7aGVpZ2h0OjgwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZkYTVhO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6LTI7dG9wOjdlbTtyaWdodDowfUBtZWRpYSAobWF4LXdpZHRoOiA4MDBweCl7LkhvbWVQYWdle2Rpc3BsYXk6YmxvY2s7cGFkZGluZzowO21hcmdpbjowfS5Ib21lUGFnZTo6YWZ0ZXJ7ZGlzcGxheTpub25lfS5Ib21lUGFnZSAuc3VidGl0bGV7ZGlzcGxheTpub25lfX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1BhZ2VzL0hvbWUvSG9tZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2dsb2JhbHMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxVQUNJLFVBQVcsQ0FDWCxXQUFZLENBRmhCLG9CQVNRLGNBQWUsQ0FDZixjQUFlLENBQ2YsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixlQUFnQixDQUNoQiwwQkFBOEIsQ0FDOUIsZUFBZ0IsQ0FDaEIsY0FBZSxDQWhCdkIsaUJBb0JRLFVBQVcsQ0FDWCxTQUFVLENBQ1YsV0FBWSxDQUNaLHdCQ25CaUIsQ0RvQmpCLGlCQUFrQixDQUNsQixVQUFXLENBQ1gsT0FBUSxDQUNSLE9BQVEsQ0FDWCwwQkE1QkwsVUFnQ1ksYUFBYyxDQUNkLFNBQVUsQ0FDVixRQUFTLENBbENyQixpQkFxQ1ksWUFBYSxDQXJDekIsb0JBd0NZLFlBQWEsQ0FDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG4uSG9tZVBhZ2Uge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcblxcclxcbiAgICAvLyBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAvLyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIC8vIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuXFxyXFxuICAgIC5zdWJ0aXRsZSB7XFxyXFxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgICAgICBmb250LXNpemU6IDgwcHg7XFxyXFxuICAgICAgICBtYXJnaW46IDEwMHB4O1xcclxcbiAgICAgICAgb3ZlcmZsb3cteDogdmlzaWJsZTtcXHJcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XFxyXFxuICAgICAgICBjb2xvcjogcmdiYSg1OCwgNTgsIDU4LCAwLjg3Mik7XFxyXFxuICAgICAgICBmb250LXdlaWdodDogOTAwO1xcclxcbiAgICAgICAgZm9udC1zaXplOiA5MHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICY6OmFmdGVyIHtcXHJcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICAgICAgd2lkdGg6IDk0JTtcXHJcXG4gICAgICAgIGhlaWdodDogODBweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICB6LWluZGV4OiAtMjtcXHJcXG4gICAgICAgIHRvcDogN2VtO1xcclxcbiAgICAgICAgcmlnaHQ6IDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtb2JpbGUtd2lkdGgpIHtcXHJcXG4gICAgICAgICYge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgICAgICAgICAgbWFyZ2luOiAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgJjo6YWZ0ZXIge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAuc3VidGl0bGUge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCIsXCIkbWFpbi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmNWYxO1xcclxcbiRwcmltYXJ5LWJ1dHRvbi1jb2xvcjogI2Q0YWE4Yzc1O1xcclxcbiRjcmVhdGlvbi1idXR0b24tY29sb3I6ICM4Y2Q0OGM3NTtcXHJcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjZDQ4YzhjNzU7XFxyXFxuJGJvcmRlci1jb2xvcjogI2Q0YWE4YztcXHJcXG4kaGlnaGxpZ2h0LWNvbG9yOiAjZmZkYTVhO1xcclxcblxcclxcbiRtb2JpbGUtd2lkdGg6IDgwMHB4O1xcclxcblxcclxcbkBtaXhpbiBtb2JpbGUge1xcclxcbiAgICBAbWVkaWEgKG1heC13aWR0aDojeyRtb2JpbGUtd2lkdGh9KSB7XFxyXFxuICAgICAgICBAY29udGVudDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucGFnZXthbmltYXRpb246cGFnZS1sb2FkLXVwIDAuM3MgZWFzZS1vdXQ7cGFkZGluZy10b3A6MHB4O2hlaWdodDoxMDAlfS5wYWdlIC5wYWdlLXRpdGxle2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7aGVpZ2h0OjdlbTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTAzLDc4LDQ4LDAuMTUxKTtiYWNrZHJvcC1maWx0ZXI6Ymx1cigxMHB4KTtjb2xvcjpyZ2JhKDAsMCwwLDAuODU4KTt0ZXh0LXNoYWRvdzpyZ2JhKDAsMCwwLDAuMTIzKSAwIDNweCAxcHg7Ym94LXNoYWRvdzpyZ2JhKDEyMCwxMjAsMTIwLDAuMjQ5KSAzcHggNXB4IDVweCAxcHg7ei1pbmRleDowO2JveC1zaGFkb3c6aW5zZXQgMHB4IDBweCAxMHB4IHJnYmEoMCwwLDAsMC4xMjMpfS5wYWdlIC5wYWdlLXRpdGxlIGgxe2JhY2tncm91bmQtY29sb3I6I2ZmZGE1YTt3aWR0aDoxNTBweDt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tbGVmdDozMHB4fUBrZXlmcmFtZXMgcGFnZS1sb2FkLXVwezAle29wYWNpdHk6MDtwYWRkaW5nLXRvcDo1cHh9MTAwJXtvcGFjaXR5OjE7cGFkZGluZy10b3A6MHB4fX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1BhZ2VzL1BhZ2Uuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsTUFDSSxvQ0FBcUMsQ0FDckMsZUFBZ0IsQ0FFaEIsV0FBWSxDQUpoQixrQkFRUSxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLFVBQVcsQ0FDWCxzQ0FBMEMsQ0FDMUMsMEJBQTJCLENBQzNCLHVCQUEyQixDQUMzQix1Q0FBMkMsQ0FDM0Msa0RBQXNELENBQ3RELFNBQVUsQ0FDViwrQ0FBbUQsQ0FqQjNELHFCQW9CWSx3QkNoQmEsQ0RpQmIsV0FBWSxDQUNaLGlCQUFrQixDQUVsQixnQkFBaUIsQ0FDcEIsd0JBSUwsR0FDSSxTQUFVLENBQ1YsZUFBZ0IsQ0FFcEIsS0FDSSxTQUFVLENBQ1YsZUFBZ0IsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi9nbG9iYWxzLnNjc3NcXFwiO1xcclxcbi5wYWdlIHtcXHJcXG4gICAgYW5pbWF0aW9uOiBwYWdlLWxvYWQtdXAgMC4zcyBlYXNlLW91dDtcXHJcXG4gICAgcGFkZGluZy10b3A6IDBweDtcXHJcXG5cXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcblxcclxcbiAgICAucGFnZS10aXRsZSB7XFxyXFxuICAgICAgICAvLyBwYWRkaW5nOiA0MHB4O1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICBoZWlnaHQ6IDdlbTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTAzLCA3OCwgNDgsIDAuMTUxKTtcXHJcXG4gICAgICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTtcXHJcXG4gICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODU4KTtcXHJcXG4gICAgICAgIHRleHQtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMTIzKSAwIDNweCAxcHg7XFxyXFxuICAgICAgICBib3gtc2hhZG93OiByZ2JhKDEyMCwgMTIwLCAxMjAsIDAuMjQ5KSAzcHggNXB4IDVweCAxcHg7XFxyXFxuICAgICAgICB6LWluZGV4OiAwO1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMHB4IDBweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xMjMpO1xcclxcblxcclxcbiAgICAgICAgaDEge1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDE1MHB4O1xcclxcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgICAgICAvLyBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAzMHB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcbkBrZXlmcmFtZXMgcGFnZS1sb2FkLXVwIHtcXHJcXG4gICAgMCUge1xcclxcbiAgICAgICAgb3BhY2l0eTogMDtcXHJcXG4gICAgICAgIHBhZGRpbmctdG9wOiA1cHg7XFxyXFxuICAgIH1cXHJcXG4gICAgMTAwJSB7XFxyXFxuICAgICAgICBvcGFjaXR5OiAxO1xcclxcbiAgICAgICAgcGFkZGluZy10b3A6IDBweDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIixcIiRtYWluLWJhY2tncm91bmQtY29sb3I6ICNmOWY1ZjE7XFxyXFxuJHByaW1hcnktYnV0dG9uLWNvbG9yOiAjZDRhYThjNzU7XFxyXFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzhjZDQ4Yzc1O1xcclxcbiRkZXN0cnVjdGl2ZS1idXR0b24tY29sb3I6ICNkNDhjOGM3NTtcXHJcXG4kYm9yZGVyLWNvbG9yOiAjZDRhYThjO1xcclxcbiRoaWdobGlnaHQtY29sb3I6ICNmZmRhNWE7XFxyXFxuXFxyXFxuJG1vYmlsZS13aWR0aDogODAwcHg7XFxyXFxuXFxyXFxuQG1peGluIG1vYmlsZSB7XFxyXFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiN7JG1vYmlsZS13aWR0aH0pIHtcXHJcXG4gICAgICAgIEBjb250ZW50O1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zZWFyY2gtcGFnZXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2hlaWdodDoxMDAlfS5zZWFyY2gtcGFnZSAuc2VhcmNoLWFyZWF7ZmxleDoxO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1BhZ2VzL1NlYXJjaC9TZWFyY2guc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxhQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsV0FBWSxDQUhoQiwwQkFNUSxNQUFPLENBQ1AsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixzQkFBdUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG4uc2VhcmNoLXBhZ2Uge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuXFxyXFxuICAgIC5zZWFyY2gtYXJlYSB7XFxyXFxuICAgICAgICBmbGV4OiAxO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc3R1ZHl7cG9zaXRpb246cmVsYXRpdmV9LmFkZC1idXR0b257cG9zaXRpb246Zml4ZWQ7dG9wOjE1ZW07cmlnaHQ6NWVtO2hlaWdodDo0MHB4O3dpZHRoOjQwcHg7Ym9yZGVyLXJhZGl1czoyMHB4O2NvbG9yOndoaXRlO2JvcmRlcjpub25lO2JhY2tncm91bmQtY29sb3I6I2RlYjU2Yjtib3gtc2hhZG93OjBweCAycHggMTBweCByZ2JhKDEwOSwxMDksMTA5LDAuMjQ5KTtjdXJzb3I6cG9pbnRlcn0uYWRkLWJ1dHRvbjo6YWZ0ZXJ7Y29udGVudDpcXFwiK1xcXCI7Zm9udC1zaXplOjQ0cHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOi04LjVweDtsZWZ0OjE0JX0uc3R1ZHktZ3JvdXBzLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6ZmxleC1zdGFydDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDtwYWRkaW5nOjMwcHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9QYWdlcy9TdHVkeS9TdHVkeS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLE9BQ0ksaUJBQWtCLENBQ3JCLFlBSUcsY0FBZSxDQUNmLFFBQVMsQ0FDVCxTQUFVLENBR1YsV0FBWSxDQUNaLFVBQVcsQ0FDWCxrQkFBbUIsQ0FHbkIsV0FBWSxDQUdaLFdBQVksQ0FDWix3QkFBb0MsQ0FDcEMsK0NBQW1ELENBQ25ELGNBQWUsQ0FsQm5CLG1CQXNCUSxXQUFZLENBQ1osY0FBZSxDQUNmLGlCQUFrQixDQUNsQixVQUFXLENBQ1gsUUFBUyxDQUNaLHdCQUlELFlBQWEsQ0FDYixzQkFBdUIsQ0FDdkIsMEJBQTJCLENBRTNCLFlBQWFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnN0dWR5IHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbn1cXHJcXG5cXHJcXG4uYWRkLWJ1dHRvbiB7XFxyXFxuICAgIC8vUG9zaXRpb25cXHJcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICB0b3A6IDE1ZW07XFxyXFxuICAgIHJpZ2h0OiA1ZW07XFxyXFxuXFxyXFxuICAgIC8vU2l6ZVxcclxcbiAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgIHdpZHRoOiA0MHB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xcclxcblxcclxcbiAgICAvL3RleHQgZGVzaWduXFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG5cXHJcXG4gICAgLy9ib3ggRGVzaWduXFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyMiwgMTgxLCAxMDcpO1xcclxcbiAgICBib3gtc2hhZG93OiAwcHggMnB4IDEwcHggcmdiYSgxMDksIDEwOSwgMTA5LCAwLjI0OSk7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHJcXG4gICAgLy9QbHVzIHNpZ25cXHJcXG4gICAgJjo6YWZ0ZXIge1xcclxcbiAgICAgICAgY29udGVudDogXFxcIitcXFwiO1xcclxcbiAgICAgICAgZm9udC1zaXplOiA0NHB4O1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgdG9wOiAtOC41cHg7XFxyXFxuICAgICAgICBsZWZ0OiAxNCU7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLnN0dWR5LWdyb3Vwcy1jb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcclxcblxcclxcbiAgICBwYWRkaW5nOiAzMHB4O1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYXV0aC12aWV3e3BhZGRpbmc6M2VtIDFlbSAxZW0gMWVtO2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjY0Nik7YmFja2Ryb3AtZmlsdGVyOmJsdXIoMjBweCk7Ym94LXNoYWRvdzowcHggM3B4IDRweCByZ2JhKDEyOCwxMjgsMTI4LDAuMzc3KTt3aWR0aDozMGVtO3RleHQtYWxpZ246Y2VudGVyO21hcmdpbjo1MHB4IDkwcHggMCAwO2FuaW1hdGlvbjphdXRoLXZpZXctbG9hZCAwLjNzIGVhc2Utb3V0O3Bvc2l0aW9uOmZpeGVkO3JpZ2h0OjA7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kfS5hdXRoLXZpZXcgaDF7dGV4dC1hbGlnbjpjZW50ZXJ9LmF1dGgtdmlldyBwe3BhZGRpbmctdG9wOjEwcHg7Y29sb3I6IzRmNGY0Zn0uYXV0aC12aWV3IC5lcnJvci1tZXNzYWdle2NvbG9yOnJnYmEoMTM2LDE3LDE3LDAuNjMpO2ZvbnQtc2l6ZToxNXB4O2ZvbnQtc3R5bGU6aXRhbGljfS5hdXRoLXZpZXcgLm90aGVyLW9wdGlvbnN7cGFkZGluZy10b3A6MjBweDt3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmF1dGgtdmlldyAub3RoZXItb3B0aW9ucyBwe2ZvbnQtc2l6ZToxMHB4O2NvbG9yOmRhcmtncmF5O21hcmdpbi1ib3R0b206LTEwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KXsuYXV0aC12aWV3e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7bWFyZ2luOjB9fUBrZXlmcmFtZXMgYXV0aC12aWV3LWxvYWR7MCV7b3BhY2l0eTowO21hcmdpbi10b3A6NDBweH0xMDAle29wYWNpdHk6MTttYXJnaW4tdG9wOjUwcHh9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvSG9tZS9BdXRoVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLFdBQ0ksdUJBQXdCLENBQ3hCLHdDQUE0QyxDQUM1QywwQkFBMkIsQ0FDM0IsOENBQWtELENBQ2xELFVBQVcsQ0FTWCxpQkFBa0IsQ0FDbEIsb0JBQXFCLENBQ3JCLHNDQUF1QyxDQUN2QyxjQUFlLENBQ2YsT0FBUSxDQUVSLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsNEJBQTZCLENBdEJqQyxjQU9RLGlCQUFrQixDQVAxQixhQVVRLGdCQUFpQixDQUNqQixhQUFzQixDQVg5QiwwQkF5QlEsMEJBQThCLENBQzlCLGNBQWUsQ0FDZixpQkFBa0IsQ0EzQjFCLDBCQStCUSxnQkFBaUIsQ0FDakIsVUFBVyxDQUNYLGlCQUFrQixDQUNsQixZQUFhLENBQ2IscUJBQXNCLENBQ3RCLHNCQUF1QixDQUN2QixrQkFBbUIsQ0FyQzNCLDRCQXVDWSxjQUFlLENBQ2YsY0FBZSxDQUNmLG1CQUFvQixDQUN2QiwwQkExQ1QsV0ErQ1ksVUFBVyxDQUNYLFdBQVksQ0FDWixRQUFTLENBQ1osQ0FJVCwwQkFDSSxHQUNJLFNBQVUsQ0FDVixlQUFnQixDQUVwQixLQUNJLFNBQVUsQ0FDVixlQUFnQixDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxyXFxuXFxyXFxuLmF1dGgtdmlldyB7XFxyXFxuICAgIHBhZGRpbmc6IDNlbSAxZW0gMWVtIDFlbTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjY0Nik7XFxyXFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyMHB4KTtcXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDNweCA0cHggcmdiYSgxMjgsIDEyOCwgMTI4LCAwLjM3Nyk7XFxyXFxuICAgIHdpZHRoOiAzMGVtO1xcclxcbiAgICBoMSB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIH1cXHJcXG4gICAgcCB7XFxyXFxuICAgICAgICBwYWRkaW5nLXRvcDogMTBweDtcXHJcXG4gICAgICAgIGNvbG9yOiByZ2IoNzksIDc5LCA3OSk7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBtYXJnaW46IDUwcHggOTBweCAwIDA7XFxyXFxuICAgIGFuaW1hdGlvbjogYXV0aC12aWV3LWxvYWQgMC4zcyBlYXNlLW91dDtcXHJcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICByaWdodDogMDtcXHJcXG5cXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxyXFxuXFxyXFxuICAgIC5lcnJvci1tZXNzYWdlIHtcXHJcXG4gICAgICAgIGNvbG9yOiByZ2JhKDEzNiwgMTcsIDE3LCAwLjYzKTtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTVweDtcXHJcXG4gICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAub3RoZXItb3B0aW9ucyB7XFxyXFxuICAgICAgICBwYWRkaW5nLXRvcDogMjBweDtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDEwcHg7XFxyXFxuICAgICAgICAgICAgY29sb3I6IGRhcmtncmF5O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC0xMHB4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbW9iaWxlLXdpZHRoKSB7XFxyXFxuICAgICAgICAmIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgICAgICAgICAgbWFyZ2luOiAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbkBrZXlmcmFtZXMgYXV0aC12aWV3LWxvYWQge1xcclxcbiAgICAwJSB7XFxyXFxuICAgICAgICBvcGFjaXR5OiAwO1xcclxcbiAgICAgICAgbWFyZ2luLXRvcDogNDBweDtcXHJcXG4gICAgfVxcclxcbiAgICAxMDAlIHtcXHJcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiA1MHB4O1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5ub3RpZmljYXRpb257b3BhY2l0eTowO3Bvc2l0aW9uOmZpeGVkO2JvdHRvbTotMTAwcHg7cmlnaHQ6MjBweDtiYWNrZHJvcC1maWx0ZXI6Ymx1cigxMHB4KTtwYWRkaW5nOjIwcHggODBweCAyMHB4IDgwcHg7dHJhbnNpdGlvbjphbGwgMC40cyBlYXNlLWluLW91dDtib3gtc2hhZG93OnJnYmEoMCwwLDAsMC4wNjQpIDVweCA1cHggNXB4O3RleHQtc2hhZG93OnJnYmEoMCwwLDAsMC4wNjQpIDVweCA1cHggNXB4O3otaW5kZXg6MjAyMDAyMDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6c3RhcnQ7anVzdGlmeS1jb250ZW50OnN0YXJ0fS5ub3RpZmljYXRpb24uZXJyb3J7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEzOSwwLDAsMC40MTMpO2NvbG9yOndoaXRlfS5ub3RpZmljYXRpb24uYWN0aXZle29wYWNpdHk6MTtib3R0b206MzBweH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1ZpZXdzL05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsY0FDSSxTQUFVLENBQ1YsY0FBZSxDQUNmLGFBQWMsQ0FDZCxVQUFXLENBQ1gsMEJBQTJCLENBQzNCLDJCQUE0QixDQUM1QiwrQkFBZ0MsQ0FDaEMsd0NBQTRDLENBQzVDLHlDQUE2QyxDQUU3QyxlQUFnQixDQUVoQixZQUFhLENBQ2IsaUJBQWtCLENBQ2xCLHFCQUFzQixDQWYxQixvQkFpQlEsb0NBQXdDLENBQ3hDLFdBQVksQ0FsQnBCLHFCQXFCUSxTQUFVLENBQ1YsV0FBWVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubm90aWZpY2F0aW9uIHtcXHJcXG4gICAgb3BhY2l0eTogMDtcXHJcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICBib3R0b206IC0xMDBweDtcXHJcXG4gICAgcmlnaHQ6IDIwcHg7XFxyXFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTtcXHJcXG4gICAgcGFkZGluZzogMjBweCA4MHB4IDIwcHggODBweDtcXHJcXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuNHMgZWFzZS1pbi1vdXQ7XFxyXFxuICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4wNjQpIDVweCA1cHggNXB4O1xcclxcbiAgICB0ZXh0LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjA2NCkgNXB4IDVweCA1cHg7XFxyXFxuXFxyXFxuICAgIHotaW5kZXg6IDIwMjAwMjA7XFxyXFxuXFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXHJcXG4gICAgJi5lcnJvciB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEzOSwgMCwgMCwgMC40MTMpO1xcclxcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICB9XFxyXFxuICAgICYuYWN0aXZlIHtcXHJcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxyXFxuICAgICAgICBib3R0b206IDMwcHg7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnBvcHVwLXdyYXBwZXJ7cG9zaXRpb246cmVsYXRpdmV9LnBvcHVwe3Bvc2l0aW9uOmZpeGVkO292ZXJmbG93LXk6c2Nyb2xsO3dpZHRoOjYwdnc7aGVpZ2h0OmF1dG87dG9wOjE1JTtsZWZ0OjIwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIDApO3otaW5kZXg6OTk7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTtib3gtc2hhZG93OnJnYmEoMCwwLDAsMC4xMjMpIDVweCA1cHggMjBweDt0cmFuc2Zvcm06c2NhbGUoMC44KTtvcGFjaXR5OjA7dHJhbnNpdGlvbjphbGwgMC41cztwb2ludGVyLWV2ZW50czpub25lO292ZXJmbG93LXk6YXV0b31AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey5wb3B1cHtib3JkZXItcmFkaXVzOjBweDt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwdnc7aGVpZ2h0OjEwMHZofX0ucG9wdXAtdG9we3BhZGRpbmc6MjBweCAzMHB4IDAgMzBweDtoZWlnaHQ6NzBweDtvdmVyZmxvdy15OmhpZGRlbjtkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTtmbGV4LWRpcmVjdGlvbjpyb3c7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7Ym9yZGVyLWJvdHRvbTojZDRhYThjIDVweCBzb2xpZDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsMCk7YmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTtwYWRkaW5nLWJvdHRvbToxNXB4fS5wb3B1cC10b3AgaDF7Y29sb3I6YmxhY2s7ZmxleDo5MCU7Zm9udC1zaXplOjI1cHg7Zm9udC13ZWlnaHQ6ODAwfS5wb3B1cC10b3AgYnV0dG9ue2JvcmRlcjpub25lO2JhY2tncm91bmQtY29sb3I6cmdiYSgxMTYsMTEsMTEsMC4yMDEpO2JvcmRlci1yYWRpdXM6NTAlO3dpZHRoOjQwcHg7aGVpZ2h0OjQwcHg7Zm9udC1mYW1pbHk6XFxcIkdpbGwgU2Fuc1xcXCIsIFxcXCJHaWxsIFNhbnMgTVRcXFwiLCBDYWxpYnJpLCBcXFwiVHJlYnVjaGV0IE1TXFxcIiwgc2Fucy1zZXJpZjtmb250LXNpemU6MTVweDtmb250LXdlaWdodDo3MDA7Y29sb3I6I2ZmZjtjdXJzb3I6cG9pbnRlcn0ucG9wdXAtYm9keXtwYWRkaW5nOjIwcHg7bWF4LWhlaWdodDo3MHZofS5hY3RpdmV7dHJhbnNmb3JtOnNjYWxlKDEpO3BvaW50ZXItZXZlbnRzOmFsbDtvcGFjaXR5OjF9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9Qb3B1cC9Qb3B1cC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLGVBQ0ksaUJBQWtCLENBQ3JCLE9BR0csY0FBZSxDQUNmLGlCQUFrQixDQUNsQixVQUFXLENBQ1gsV0FBWSxDQUNaLE9BQVEsQ0FDUixRQUFTLENBQ1QsNEJBQTZCLENBQzdCLFVBQVcsQ0FDWCxzQkFBdUIsQ0FFdkIseUNBQTZDLENBQzdDLG9CQUFxQixDQUNyQixTQUFVLENBQ1YsbUJBQW9CLENBQ3BCLG1CQUFvQixDQUNwQixlQUFnQixDQVFuQiwwQkF4QkQsT0FrQlEsaUJBQWtCLENBQ2xCLEtBQU0sQ0FDTixNQUFPLENBQ1AsV0FBWSxDQUNaLFlBQWEsQ0FFcEIsQ0FFRCxXQUNJLHdCQUF5QixDQUN6QixXQUFZLENBQ1osaUJBQWtCLENBRWxCLFlBQWEsQ0FDYixVQUFXLENBRVgsa0JBQW1CLENBQ25CLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FDdkIsK0JBQXNDLENBQ3RDLG9DQUF3QyxDQUN4Qyx5QkFBMEIsQ0FDMUIsbUJBQW9CLENBZHhCLGNBaUJRLFdBQVksQ0FDWixRQUFTLENBQ1QsY0FBZSxDQUNmLGVBQWdCLENBcEJ4QixrQkF1QlEsV0FBWSxDQUNaLHNDQUEwQyxDQUMxQyxpQkFBa0IsQ0FDbEIsVUFBVyxDQUNYLFdBQVksQ0FDWiw0RUFBNkUsQ0FDN0UsY0FBZSxDQUNmLGVBQWdCLENBQ2hCLFVBQXlCLENBRXpCLGNBQWUsQ0FDbEIsWUFJRCxZQUFhLENBQ2IsZUFBZ0IsQ0FDbkIsUUFHRyxrQkFBbUIsQ0FDbkIsa0JBQW1CLENBQ25CLFNBQVVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG5cXHJcXG4ucG9wdXAtd3JhcHBlciB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG59XFxyXFxuXFxyXFxuLnBvcHVwIHtcXHJcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XFxyXFxuICAgIHdpZHRoOiA2MHZ3O1xcclxcbiAgICBoZWlnaHQ6IGF1dG87XFxyXFxuICAgIHRvcDogMTUlO1xcclxcbiAgICBsZWZ0OiAyMCU7XFxyXFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDApO1xcclxcbiAgICB6LWluZGV4OiA5OTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuXFxyXFxuICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4xMjMpIDVweCA1cHggMjBweDtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjgpO1xcclxcbiAgICBvcGFjaXR5OiAwO1xcclxcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC41cztcXHJcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuICAgIG92ZXJmbG93LXk6IGF1dG87XFxyXFxuICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiAwcHg7XFxyXFxuICAgICAgICB0b3A6IDA7XFxyXFxuICAgICAgICBsZWZ0OiAwO1xcclxcbiAgICAgICAgd2lkdGg6IDEwMHZ3O1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4ucG9wdXAtdG9wIHtcXHJcXG4gICAgcGFkZGluZzogMjBweCAzMHB4IDAgMzBweDtcXHJcXG4gICAgaGVpZ2h0OiA3MHB4O1xcclxcbiAgICBvdmVyZmxvdy15OiBoaWRkZW47XFxyXFxuXFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogJGJvcmRlci1jb2xvciA1cHggc29saWQ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMCk7XFxyXFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigzcHgpO1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcXHJcXG5cXHJcXG4gICAgaDEge1xcclxcbiAgICAgICAgY29sb3I6IGJsYWNrO1xcclxcbiAgICAgICAgZmxleDogOTAlO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAyNXB4O1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IDgwMDtcXHJcXG4gICAgfVxcclxcbiAgICBidXR0b24ge1xcclxcbiAgICAgICAgYm9yZGVyOiBub25lO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTYsIDExLCAxMSwgMC4yMDEpO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICAgICAgd2lkdGg6IDQwcHg7XFxyXFxuICAgICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgICAgICBmb250LWZhbWlseTogXFxcIkdpbGwgU2Fuc1xcXCIsIFxcXCJHaWxsIFNhbnMgTVRcXFwiLCBDYWxpYnJpLCBcXFwiVHJlYnVjaGV0IE1TXFxcIiwgc2Fucy1zZXJpZjtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTVweDtcXHJcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XFxyXFxuICAgICAgICBjb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcclxcbiAgICAgICAgLy8gYm94LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjEzMikgMHB4IDFweCAxMHB4O1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5wb3B1cC1ib2R5IHtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgbWF4LWhlaWdodDogNzB2aDtcXHJcXG59XFxyXFxuXFxyXFxuLmFjdGl2ZSB7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zZWFyY2gtcmVzdWx0c3tmbGV4OjcwJTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsMC4xOTkpO2hlaWdodDoxMDAlO2JhY2tkcm9wLWZpbHRlcjpibHVyKDNweCk7cGFkZGluZzoxMHB4IDIwcHggODBweCAxMHB4O3otaW5kZXg6MDtvdmVyZmxvdy15OnNjcm9sbH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1ZpZXdzL1NlYXJjaC9TZWFyY2hSZXN1bHRzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsZ0JBQ0ksUUFBUyxDQUNULHdDQUE0QyxDQUM1QyxXQUFZLENBQ1oseUJBQTBCLENBRTFCLDJCQUE0QixDQUM1QixTQUFVLENBQ1YsaUJBQWtCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zZWFyY2gtcmVzdWx0cyB7XFxyXFxuICAgIGZsZXg6IDcwJTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE5OSk7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDNweCk7XFxyXFxuXFxyXFxuICAgIHBhZGRpbmc6IDEwcHggMjBweCA4MHB4IDEwcHg7XFxyXFxuICAgIHotaW5kZXg6IDA7XFxyXFxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNlYXJjaC12aWV3e2ZsZXg6MzAlO2hlaWdodDoxMDAlO3BhZGRpbmctYm90dG9tOjUwcHg7Ym94LXNoYWRvdzoxMHB4IDBweCAyMHB4IHJnYmEoMCwwLDAsMC4wNzEpO2JvcmRlci1yaWdodDojZDRhYThjIDVweCBzb2xpZDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7ei1pbmRleDo0O292ZXJmbG93OmF1dG99XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TZWFyY2gvU2VhcmNoVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLGFBQ0ksUUFBUyxDQUNULFdBQVksQ0FDWixtQkFBb0IsQ0FDcEIsMENBQThDLENBQzlDLDhCQUFxQyxDQUNyQyxxQkFBb0MsQ0FDcEMsU0FBVSxDQUNWLGFBQWNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG5cXHJcXG4uc2VhcmNoLXZpZXcge1xcclxcbiAgICBmbGV4OiAzMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDUwcHg7XFxyXFxuICAgIGJveC1zaGFkb3c6IDEwcHggMHB4IDIwcHggcmdiYSgwLCAwLCAwLCAwLjA3MSk7XFxyXFxuICAgIGJvcmRlci1yaWdodDogJGJvcmRlci1jb2xvciA1cHggc29saWQ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXHJcXG4gICAgei1pbmRleDogNDtcXHJcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxyXFxuICAgIC8vIHBhZGRpbmc6IDIwcHg7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zdHVkeS1ncm91cC12aWV3e3dpZHRoOjIwMHB4O2hlaWdodDoxOTBweDtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO2JveC1zaGFkb3c6MHB4IDEwcHggMTBweCAjMDAwMDAwMGE7bWFyZ2luOjMwcHh9LnN0dWR5LWdyb3VwLXZpZXcgaDF7Zm9udC1zaXplOjMwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9zdHVkeUdyb3VwVmlldy9TdHVkeUdyb3VwVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGtCQUNJLFdBQVksQ0FDWixZQUFhLENBQ2Isc0JBQXVCLENBS3ZCLGtDQUFtQyxDQUNuQyxXQUFZLENBVGhCLHFCQUtRLGNBQWUsQ0FDZixpQkFBa0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnN0dWR5LWdyb3VwLXZpZXcge1xcclxcbiAgICB3aWR0aDogMjAwcHg7XFxyXFxuICAgIGhlaWdodDogMTkwcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcbiAgICBoMSB7XFxyXFxuICAgICAgICBmb250LXNpemU6IDMwcHg7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIH1cXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDEwcHggMTBweCAjMDAwMDAwMGE7XFxyXFxuICAgIG1hcmdpbjogMzBweDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmlubGluZXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2JhY2tncm91bmQtY29sb3I6d2hpdGVzbW9rZTtwYWRkaW5nOjEwcHh9LmlubGluZSAjbGVmdHtmbGV4OjUwJX0uaW5saW5lICNyaWdodHtmbGV4OjUwJX0ucGhvdG97YmFja2dyb3VuZC1jb2xvcjp3aGl0ZXNtb2tlfS5waG90byBpbWd7d2lkdGg6OTBweDt0ZXh0LWFsaWduOmxlZnR9aW5wdXRbdHlwZT1cXFwiZmlsZVxcXCJde2JvcmRlcjpub25lO3BhZGRpbmc6MjVweDthcHBlYXJhbmNlOm5vbmV9aW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXXstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTttYXJnaW46MDtib3gtc2hhZG93OjFweCAxcHggMXB4ICNlYmViZWI7Zm9udDppbmhlcml0O2NvbG9yOmN1cnJlbnRDb2xvcjt3aWR0aDoxLjJlbTtoZWlnaHQ6MS4yZW07Ym9yZGVyLXJhZGl1czowLjE1ZW07dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTAuMDc1ZW0pO2Rpc3BsYXk6Z3JpZDtwbGFjZS1jb250ZW50OmNlbnRlcn1pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOjpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjt3aWR0aDowLjY1ZW07aGVpZ2h0OjAuNjVlbTtjbGlwLXBhdGg6cG9seWdvbigxNCUgNDQlLCAwIDY1JSwgNTAlIDEwMCUsIDEwMCUgMTYlLCA4MCUgMCUsIDQzJSA2MiUpO3RyYW5zZm9ybTpzY2FsZSgwKTt0cmFuc2Zvcm0tb3JpZ2luOmJvdHRvbSBsZWZ0O3RyYW5zaXRpb246MTIwbXMgdHJhbnNmb3JtIGVhc2UtaW4tb3V0O2JveC1zaGFkb3c6aW5zZXQgMWVtIDFlbSAjMDI4YTIyO2JhY2tncm91bmQtY29sb3I6Q2FudmFzVGV4dH1pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQ6OmJlZm9yZXt0cmFuc2Zvcm06c2NhbGUoMSl9LmltZ1ByZXZpZXd7d2lkdGg6MTAwJTtwYWRkaW5nOjIwcHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0FjY291bnRTZXR1cEZvcm0vQWNjb3VudFNldHVwRm9ybS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFFBQ0ksWUFBYSxDQUNiLGtCQUFtQixDQUNuQiwyQkFBNEIsQ0FDNUIsWUFBYSxDQUpqQixjQU1RLFFBQVMsQ0FOakIsZUFTUSxRQUFTLENBQ1osT0FJRCwyQkFBNEIsQ0FEaEMsV0FHUSxVQUFXLENBQ1gsZUFBZ0IsQ0FDbkIsbUJBSUQsV0FBWSxDQUNaLFlBQWEsQ0FDYixlQUFnQixDQUNuQix1QkFJRyx1QkFBd0IsQ0FFeEIsZUFBZ0IsQ0FFaEIsc0JBQXVCLENBRXZCLFFBQVMsQ0FDVCw4QkFBMEMsQ0FFMUMsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixXQUFZLENBQ1osWUFBYSxDQUNiLG9CQUFxQixDQUNyQiw4QkFBK0IsQ0FFL0IsWUFBYSxDQUNiLG9CQUFxQixDQUN4QiwrQkFHRyxVQUFXLENBQ1gsWUFBYSxDQUNiLGFBQWMsQ0FDZCxzRUFBdUUsQ0FDdkUsa0JBQW1CLENBQ25CLDRCQUE2QixDQUM3QixzQ0FBdUMsQ0FDdkMsZ0NBQXlDLENBRXpDLDJCQUE0QixDQUMvQix1Q0FHRyxrQkFBbUIsQ0FDdEIsWUFHRyxVQUFXLENBQ1gsWUFBYVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaW5saW5lIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG4gICAgI2xlZnQge1xcclxcbiAgICAgICAgZmxleDogNTAlO1xcclxcbiAgICB9XFxyXFxuICAgICNyaWdodCB7XFxyXFxuICAgICAgICBmbGV4OiA1MCU7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLnBob3RvIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTtcXHJcXG4gICAgaW1nIHtcXHJcXG4gICAgICAgIHdpZHRoOiA5MHB4O1xcclxcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5pbnB1dFt0eXBlPVxcXCJmaWxlXFxcIl0ge1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIHBhZGRpbmc6IDI1cHg7XFxyXFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcclxcbiAgICAvKiBBZGQgaWYgbm90IHVzaW5nIGF1dG9wcmVmaXhlciAqL1xcclxcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxyXFxuICAgIC8qIFJlbW92ZSBtb3N0IGFsbCBuYXRpdmUgaW5wdXQgc3R5bGVzICovXFxyXFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxyXFxuICAgIC8qIEZvciBpT1MgPCAxNSAqL1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgLyogTm90IHJlbW92ZWQgdmlhIGFwcGVhcmFuY2UgKi9cXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBib3gtc2hhZG93OiAxcHggMXB4IDFweCByZ2IoMjM1LCAyMzUsIDIzNSk7XFxyXFxuXFxyXFxuICAgIGZvbnQ6IGluaGVyaXQ7XFxyXFxuICAgIGNvbG9yOiBjdXJyZW50Q29sb3I7XFxyXFxuICAgIHdpZHRoOiAxLjJlbTtcXHJcXG4gICAgaGVpZ2h0OiAxLjJlbTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMC4xNWVtO1xcclxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTAuMDc1ZW0pO1xcclxcblxcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBwbGFjZS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06OmJlZm9yZSB7XFxyXFxuICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICB3aWR0aDogMC42NWVtO1xcclxcbiAgICBoZWlnaHQ6IDAuNjVlbTtcXHJcXG4gICAgY2xpcC1wYXRoOiBwb2x5Z29uKDE0JSA0NCUsIDAgNjUlLCA1MCUgMTAwJSwgMTAwJSAxNiUsIDgwJSAwJSwgNDMlIDYyJSk7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxyXFxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSBsZWZ0O1xcclxcbiAgICB0cmFuc2l0aW9uOiAxMjBtcyB0cmFuc2Zvcm0gZWFzZS1pbi1vdXQ7XFxyXFxuICAgIGJveC1zaGFkb3c6IGluc2V0IDFlbSAxZW0gcmdiKDIsIDEzOCwgMzQpO1xcclxcbiAgICAvKiBXaW5kb3dzIEhpZ2ggQ29udHJhc3QgTW9kZSAqL1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBDYW52YXNUZXh0O1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWQ6OmJlZm9yZSB7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxyXFxufVxcclxcblxcclxcbi5pbWdQcmV2aWV3IHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5jcmVhdGUtc3R1ZHktZ3JvdXAtZm9ybXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnNpZGUtYnktc2lkZXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcn0uc2lkZS1ieS1zaWRlPip7d2lkdGg6MjAwcHg7ZmxleDoxfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVTdHVkeUdyb3VwRm9ybS9DcmVhdGVTdHVkeUdyb3VwRm9ybS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLHlCQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsc0JBQXVCLENBQzFCLGNBRUcsWUFBYSxDQUNiLGtCQUFtQixDQUNuQiw2QkFBOEIsQ0FDOUIsa0JBQW1CLENBSnZCLGdCQU9RLFdBQVksQ0FDWixNQUFPXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jcmVhdGUtc3R1ZHktZ3JvdXAtZm9ybSB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbn1cXHJcXG4uc2lkZS1ieS1zaWRlIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcblxcclxcbiAgICA+ICoge1xcclxcbiAgICAgICAgd2lkdGg6IDIwMHB4O1xcclxcbiAgICAgICAgZmxleDogMTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc2VhcmNoLWZvcm17ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxhQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsc0JBQXVCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zZWFyY2gtZm9ybSB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubGlzdGluZy1jb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjojZmZmZmZmMjM7Ym94LXNoYWRvdzpyZ2JhKDEyMCwxMjAsMTIwLDAuMjQ5KSAzcHggNXB4IDVweCAxcHg7ZGlzcGxheTpmbGV4O2hlaWdodDo4MHB4O21hcmdpbjo1cHggMTBweCAxMHB4IDEwcHg7Ym9yZGVyLXJhZGl1czoxMHB4O2N1cnNvcjpwb2ludGVyfS5saXN0aW5nLWNvbnRhaW5lciAudGl0bGUtcGhvdG8tY29udGFpbmVye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Ym9yZGVyLWxlZnQ6I2ZmZmZmZjdjIDVweCBzb2xpZDtjb2xvcjp3aGl0ZTtib3gtc2hhZG93OnJnYmEoNDgsNDgsNDgsMC4xNTMpIDEwcHggMTBweCAyMHB4O292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjIwcHg7Zm9udC1zaXplOjEwcHh9Lmxpc3RpbmctY29udGFpbmVyIC5ncm91cC1pbmZvLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzcGFjZS1ldmVubHl9Lmxpc3RpbmctY29udGFpbmVyIC5ncm91cC1pbmZvLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1pdGVte3BhZGRpbmc6NXB4IDE1cHggNXB4IDE1cHg7Ym9yZGVyLWxlZnQ6cmdiYSgxMjUsMTI1LDEyNSwwLjM0NSkgMnB4IHNvbGlkfS5saXN0aW5nLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1jb250YWluZXIgLmdyb3VwLWluZm8taXRlbSBwe2NvbG9yOmdyYXk7Zm9udC1zaXplOjhweH0ubGlzdGluZy1jb250YWluZXIgLmdyb3VwLWluZm8tY29udGFpbmVyIC5ncm91cC1pbmZvLWl0ZW0gaDJ7Zm9udC1zaXplOjE0cHg7d2hpdGUtc3BhY2U6bm93cmFwfS5saXN0aW5nLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1jb250YWluZXIgLmdyb3VwLWluZm8taXRlbSNvd25lci1pbmZve2JvcmRlci1sZWZ0Om5vbmV9Lmxpc3RpbmctY29udGFpbmVyIC5ncm91cC1pbmZvLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1pdGVtI293bmVyLWluZm8gaDJ7d2hpdGUtc3BhY2U6dW5zZXQ7d29yZC13cmFwOmJyZWFrLXdvcmQ7bWF4LXdpZHRoOjEwMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9TZWFyY2hMaXN0aW5nL1NlYXJjaExpc3Rpbmcuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSxtQkFDSSwwQkFBMkIsQ0FDM0Isa0RBQXNELENBQ3RELFlBQWEsQ0FDYixXQUFZLENBQ1oseUJBQTBCLENBQzFCLGtCQUFtQixDQUNuQixjQUFlLENBUG5CLDBDQVVRLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsK0JBQWdDLENBQ2hDLFdBQVksQ0FDWiw4Q0FBa0QsQ0FDbEQsZUFBZ0IsQ0FDaEIsWUFBYSxDQUNiLGNBQWUsQ0FqQnZCLHlDQW9CUSxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLDRCQUE2QixDQXRCckMsMERBMENZLHlCQUEwQixDQUMxQiw2Q0FBaUQsQ0EzQzdELDREQTBCZ0IsVUFBVyxDQUNYLGFBQWMsQ0EzQjlCLDZEQThCZ0IsY0FBZSxDQUNmLGtCQUFtQixDQS9CbkMscUVBd0NnQixnQkFBaUIsQ0F4Q2pDLHdFQW1Db0IsaUJBQWtCLENBRWxCLG9CQUFxQixDQUNyQixlQUFnQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcclxcblxcclxcbi5saXN0aW5nLWNvbnRhaW5lciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmYyMztcXHJcXG4gICAgYm94LXNoYWRvdzogcmdiYSgxMjAsIDEyMCwgMTIwLCAwLjI0OSkgM3B4IDVweCA1cHggMXB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBoZWlnaHQ6IDgwcHg7XFxyXFxuICAgIG1hcmdpbjogNXB4IDEwcHggMTBweCAxMHB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgIC50aXRsZS1waG90by1jb250YWluZXIge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICBib3JkZXItbGVmdDogI2ZmZmZmZjdjIDVweCBzb2xpZDtcXHJcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgICAgIGJveC1zaGFkb3c6IHJnYmEoNDgsIDQ4LCA0OCwgMC4xNTMpIDEwcHggMTBweCAyMHB4O1xcclxcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgICAgICBmb250LXNpemU6IDEwcHg7XFxyXFxuICAgIH1cXHJcXG4gICAgLmdyb3VwLWluZm8tY29udGFpbmVyIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxyXFxuXFxyXFxuICAgICAgICAuZ3JvdXAtaW5mby1pdGVtIHtcXHJcXG4gICAgICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6IGdyYXk7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogOHB4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICBoMiB7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgJiNvd25lci1pbmZvIHtcXHJcXG4gICAgICAgICAgICAgICAgaDIge1xcclxcbiAgICAgICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IHVuc2V0O1xcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkO1xcclxcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDBweDtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogNXB4IDE1cHggNXB4IDE1cHg7XFxyXFxuICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IHJnYmEoMTI1LCAxMjUsIDEyNSwgMC4zNDUpIDJweCBzb2xpZDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubWVudXtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtwYWRkaW5nOjIwcHg7d2lkdGg6MzQwcHg7Ym9yZGVyLWJvdHRvbTojZDRhYThjIDVweCBzb2xpZDt0cmFuc2l0aW9uOmFsbCAwLjVzIGVhc2UtaW4tb3V0O3BvaW50ZXItZXZlbnRzOm5vbmU7cG9zaXRpb246YWJzb2x1dGU7dG9wOi0zLjVlbTtyaWdodDowcHg7ei1pbmRleDoxMDtib3gtc2hhZG93Omluc2V0IDBweCAxMHB4IDIwcHggcmdiYSgwLDAsMCwwLjE1MSl9Lm1lbnUuaXNTaG93aW5ne3RvcDozZW07cG9pbnRlci1ldmVudHM6YWxsO292ZXJmbG93OnZpc2libGV9LmJhY2tncm91bmR7d2lkdGg6MTAwdnc7aGVpZ2h0OjEwMHZoO3Bvc2l0aW9uOmZpeGVkO3RvcDowO3otaW5kZXg6MjA7YmFja2dyb3VuZC1jb2xvcjojZmZmZmZmNzA7YmFja2Ryb3AtZmlsdGVyOmJsdXIoNXB4KTtwb2ludGVyLWV2ZW50czpub25lO3RyYW5zaXRpb246YWxsIDAuNXM7b3BhY2l0eTowfS5iYWNrZ3JvdW5kLmFjdGl2ZXtwb2ludGVyLWV2ZW50czphbGw7b3BhY2l0eToxfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvTWVudS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLE1BQ0ksc0JBQXVCLENBQ3ZCLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBQ3ZCLFlBQWEsQ0FDYixXQUFZLENBQ1osK0JBQXNDLENBQ3RDLCtCQUFnQyxDQUNoQyxtQkFBb0IsQ0FDcEIsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxTQUFVLENBQ1YsVUFBVyxDQUNYLGdEQUFvRCxDQWR4RCxnQkFnQlEsT0FBUSxDQUNSLGtCQUFtQixDQUNuQixnQkFBaUIsQ0FDcEIsWUFJRCxXQUFZLENBQ1osWUFBYSxDQUNiLGNBQWUsQ0FDZixLQUFNLENBQ04sVUFBVyxDQUNYLDBCQUEyQixDQUMzQix5QkFBMEIsQ0FDMUIsbUJBQW9CLENBQ3BCLG1CQUFvQixDQUNwQixTQUFVLENBVmQsbUJBYVEsa0JBQW1CLENBQ25CLFNBQVVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXHJcXG5cXHJcXG4ubWVudSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgd2lkdGg6IDM0MHB4O1xcclxcbiAgICBib3JkZXItYm90dG9tOiAkYm9yZGVyLWNvbG9yIDVweCBzb2xpZDtcXHJcXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZS1pbi1vdXQ7XFxyXFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogLTMuNWVtO1xcclxcbiAgICByaWdodDogMHB4O1xcclxcbiAgICB6LWluZGV4OiAxMDtcXHJcXG4gICAgYm94LXNoYWRvdzogaW5zZXQgMHB4IDEwcHggMjBweCByZ2JhKDAsIDAsIDAsIDAuMTUxKTtcXHJcXG4gICAgJi5pc1Nob3dpbmcge1xcclxcbiAgICAgICAgdG9wOiAzZW07XFxyXFxuICAgICAgICBwb2ludGVyLWV2ZW50czogYWxsO1xcclxcbiAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLmJhY2tncm91bmQge1xcclxcbiAgICB3aWR0aDogMTAwdnc7XFxyXFxuICAgIGhlaWdodDogMTAwdmg7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgdG9wOiAwO1xcclxcbiAgICB6LWluZGV4OiAyMDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjcwO1xcclxcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTtcXHJcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjVzO1xcclxcbiAgICBvcGFjaXR5OiAwO1xcclxcblxcclxcbiAgICAmLmFjdGl2ZSB7XFxyXFxuICAgICAgICBwb2ludGVyLWV2ZW50czogYWxsO1xcclxcbiAgICAgICAgb3BhY2l0eTogMTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYm9yZGVye2JvcmRlci1ib3R0b206I2Q0YWE4YyA1cHggc29saWQ7d2lkdGg6MTAwJTtib3gtc2hhZG93OjBweCAwcHggMTBweCByZ2JhKDAsMCwwLDAuMTQ2KX0udG9wLWJhcntwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzp2aXNpYmxlO3otaW5kZXg6MTIyO2JhY2tncm91bmQtY29sb3I6d2hpdGU7dHJhbnNpdGlvbjphbGwgMC40c30udG9wLWJhciAud3JhcHBlcntwYWRkaW5nOjEwcHggMzBweDtoZWlnaHQ6My43ZW07ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtvdmVyZmxvdy15OmhpZGRlbn0udG9wLWJhciAud3JhcHBlciAubGVmdHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2FsaWduLWl0ZW1zOmNlbnRlcn0udG9wLWJhciAud3JhcHBlciAubGVmdCBoMXtmb250LXNpemU6MjBweDtwYWRkaW5nLXJpZ2h0OjIwcHg7Y29sb3I6YmxhY2t9LnRvcC1iYXIgLndyYXBwZXIgLmxlZnQgLm5hdi1pdGVte21hcmdpbjoyMHB4O3BhZGRpbmc6NXB4IDEwcHggNXB4IDEwcHg7aGVpZ2h0OjEwMCU7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6YmxhY2s7Zm9udC1zaXplOjE1cHg7dHJhbnNpdGlvbjphbGwgMC40c30udG9wLWJhciAud3JhcHBlciAubGVmdCAubmF2LWl0ZW06YWN0aXZle2JhY2tncm91bmQtY29sb3I6I2ZmZTU4ZH0udG9wLWJhciAud3JhcHBlciAubGVmdCAubmF2LWl0ZW0uYWN0aXZle2JhY2tncm91bmQtY29sb3I6I2ZmZGE1YTtwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzp2aXNpYmxlO3RyYW5zaXRpb246YWxsIDAuNHN9LnRvcC1iYXIgLndyYXBwZXIgLmxlZnQgLm5hdi1pdGVtLmFjdGl2ZTo6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7Ym90dG9tOi0xNXB4O3dpZHRoOjEwMCU7aGVpZ2h0OjRweDtiYWNrZ3JvdW5kLWNvbG9yOiNkNGFhOGM7YW5pbWF0aW9uOnJpc2UgMC4ycyBlYXNlLWluLW91dH0udG9wLWJhciAud3JhcHBlciAucmlnaHR7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdzthbGlnbi1pdGVtczpjZW50ZXI7Y3Vyc29yOnBvaW50ZXJ9LnRvcC1iYXIgLndyYXBwZXIgLnJpZ2h0IC5zY2hvb2x7Zm9udC1zaXplOjE0cHg7Ym9yZGVyLXJpZ2h0OmJsYWNrIDFweCBzb2xpZDtwYWRkaW5nLXJpZ2h0OjEwcHh9LnRvcC1iYXIgLndyYXBwZXIgLnJpZ2h0IC5uYW1le2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0OjgwMDtwYWRkaW5nLWxlZnQ6MTBweDtwYWRkaW5nLXJpZ2h0OjEwcHh9LnRvcC1iYXIgLndyYXBwZXIgLnJpZ2h0IC5wcm9maWxlLXBpY3R1cmV7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtib3JkZXItcmFkaXVzOjI3cHg7b2JqZWN0LWZpdDpjb3Zlcjtib3JkZXI6I2Q0YWE4YyA0cHggc29saWR9QGtleWZyYW1lcyByaXNlezAle2JvdHRvbTotMTdweH0xMDAle2JvdHRvbTotMTVweH19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9Ub3BCYXIuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsUUFDSSwrQkFBc0MsQ0FDdEMsVUFBVyxDQUNYLHlDQUE2QyxDQUNoRCxTQUVHLGlCQUFrQixDQUNsQixnQkFBaUIsQ0FDakIsV0FBWSxDQUNaLHNCQUF1QixDQUN2QixtQkFBb0IsQ0FMeEIsa0JBUVEsaUJBQWtCLENBQ2xCLFlBQWEsQ0FFYixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLDZCQUE4QixDQUM5QixpQkFBa0IsQ0FkMUIsd0JBaUJZLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsa0JBQW1CLENBbkIvQiwyQkFxQmdCLGNBQWUsQ0FDZixrQkFBbUIsQ0FDbkIsV0FBWSxDQXZCNUIsa0NBMEJnQixXQUFZLENBQ1oseUJBQTBCLENBQzFCLFdBQVksQ0FDWixvQkFBcUIsQ0FDckIsV0FBWSxDQUNaLGNBQWUsQ0FDZixtQkFBb0IsQ0FoQ3BDLHlDQW1Db0Isd0JBQWlFLENBbkNyRix5Q0FzQ29CLHdCQ3hDSyxDRHlDTCxpQkFBa0IsQ0FDbEIsZ0JBQWlCLENBQ2pCLG1CQUFvQixDQXpDeEMsZ0RBNEN3QixVQUFXLENBQ1gsaUJBQWtCLENBQ2xCLE1BQU8sQ0FDUCxZQUFhLENBQ2IsVUFBVyxDQUNYLFVBQVcsQ0FDWCx3QkNyREYsQ0RzREUsK0JBQWdDLENBbkR4RCx5QkF5RFksWUFBYSxDQUNiLGtCQUFtQixDQUNuQixrQkFBbUIsQ0FDbkIsY0FBZSxDQTVEM0IsaUNBOERnQixjQUFlLENBQ2YsNEJBQTZCLENBQzdCLGtCQUFtQixDQWhFbkMsK0JBbUVnQixjQUFlLENBQ2YsZUFBZ0IsQ0FDaEIsaUJBQWtCLENBQ2xCLGtCQUFtQixDQXRFbkMsMENBeUVnQixVQUFXLENBQ1gsV0FBWSxDQUNaLGtCQUFtQixDQUNuQixnQkFBaUIsQ0FDakIsd0JBQStCLENBQ2xDLGdCQU1ULEdBQ0ksWUFBYSxDQUVqQixLQUNJLFlBQWEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcclxcblxcclxcbi5ib3JkZXIge1xcclxcbiAgICBib3JkZXItYm90dG9tOiAkYm9yZGVyLWNvbG9yIDVweCBzb2xpZDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGJveC1zaGFkb3c6IDBweCAwcHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMTQ2KTtcXHJcXG59XFxyXFxuLnRvcC1iYXIge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcclxcbiAgICB6LWluZGV4OiAxMjI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC40cztcXHJcXG5cXHJcXG4gICAgLndyYXBwZXIge1xcclxcbiAgICAgICAgcGFkZGluZzogMTBweCAzMHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiAzLjdlbTtcXHJcXG5cXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xcclxcblxcclxcbiAgICAgICAgLmxlZnQge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgICAgIGgxIHtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcclxcbiAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIC5uYXYtaXRlbSB7XFxyXFxuICAgICAgICAgICAgICAgIG1hcmdpbjogMjBweDtcXHJcXG4gICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHggNXB4IDEwcHg7XFxyXFxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICAgICAgICAgICAgICBjb2xvcjogYmxhY2s7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDtcXHJcXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNHM7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICY6YWN0aXZlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0ZW4oJGNvbG9yOiAkaGlnaGxpZ2h0LWNvbG9yLCAkYW1vdW50OiAxMCUpO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgICYuYWN0aXZlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxyXFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjRzO1xcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgJjo6YWZ0ZXIge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogLTE1cHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0cHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJvcmRlci1jb2xvcjtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246IHJpc2UgMC4ycyBlYXNlLWluLW91dDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC5yaWdodCB7XFxyXFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgICAgIC5zY2hvb2wge1xcclxcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogYmxhY2sgMXB4IHNvbGlkO1xcclxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAubmFtZSB7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDgwMDtcXHJcXG4gICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcclxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAucHJvZmlsZS1waWN0dXJlIHtcXHJcXG4gICAgICAgICAgICAgICAgd2lkdGg6IDQwcHg7XFxyXFxuICAgICAgICAgICAgICAgIGhlaWdodDogNDBweDtcXHJcXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMjdweDtcXHJcXG4gICAgICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XFxyXFxuICAgICAgICAgICAgICAgIGJvcmRlcjogJGJvcmRlci1jb2xvciA0cHggc29saWQ7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbkBrZXlmcmFtZXMgcmlzZSB7XFxyXFxuICAgIDAlIHtcXHJcXG4gICAgICAgIGJvdHRvbTogLTE3cHg7XFxyXFxuICAgIH1cXHJcXG4gICAgMTAwJSB7XFxyXFxuICAgICAgICBib3R0b206IC0xNXB4O1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXHJcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM3NTtcXHJcXG4kY3JlYXRpb24tYnV0dG9uLWNvbG9yOiAjOGNkNDhjNzU7XFxyXFxuJGRlc3RydWN0aXZlLWJ1dHRvbi1jb2xvcjogI2Q0OGM4Yzc1O1xcclxcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxyXFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXHJcXG5cXHJcXG4kbW9iaWxlLXdpZHRoOiA4MDBweDtcXHJcXG5cXHJcXG5AbWl4aW4gbW9iaWxlIHtcXHJcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcclxcbiAgICAgICAgQGNvbnRlbnQ7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLkxhYmVse2NvbG9yOiNhY2FjYWM7Zm9udC1zaXplOjExcHg7cGFkZGluZy1ib3R0b206MTBweDtmb250LXdlaWdodDo2MDA7dGV4dC1hbGlnbjpjZW50ZXI7d2lkdGg6MTAwJX0uSW5wdXRGaWVsZHtwYWRkaW5nOjEwcHg7bWFyZ2luOjEwcHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtib3JkZXI6bm9uZTtvdmVyZmxvdy14OnZpc2libGV9LklucHV0RmllbGQgLkxhYmVse3RleHQtYWxpZ246bGVmdH0uSW5wdXRGaWVsZCAuSW5wdXR7Ym94LXNoYWRvdzowcHggMTBweCAxMHB4IHJnYmEoMTI4LDEyOCwxMjgsMC4xMyk7cGFkZGluZzoxMHB4O2JvcmRlcjpub25lO2JvcmRlci1ib3R0b206cmdiYSgyMTEsMjExLDIxMSwwLjU5MSkgOHB4IHNvbGlkO3RyYW5zaXRpb24tcHJvcGVydHk6Ym9yZGVyLWJvdHRvbTt0cmFuc2l0aW9uLWR1cmF0aW9uOjAuMnN9LklucHV0RmllbGQgLklucHV0OmZvY3Vze2JvcmRlcjpub25lO2JvcmRlci1ib3R0b206cmdiYSgxMzksNzksMTEsMC42MTYpIDhweCBzb2xpZDtvdXRsaW5lLXdpZHRoOjB9LklucHV0RmllbGQgLmRyb3Bkb3due3BhZGRpbmc6NXB4IDVweCA1cHggNXB4O2ZvbnQtc2l6ZToxNnB4O2JveC1zaGFkb3c6MHB4IDEwcHggMTBweCByZ2JhKDEyOCwxMjgsMTI4LDAuMTMpO2JvcmRlcjpub25lO2JvcmRlci1ib3R0b206cmdiYSgyMTEsMjExLDIxMSwwLjU5MSkgOHB4IHNvbGlkO3RyYW5zaXRpb24tcHJvcGVydHk6Ym9yZGVyLWJvdHRvbTtoZWlnaHQ6NDBweDt0cmFuc2l0aW9uLWR1cmF0aW9uOjAuMnM7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7YmFja2dyb3VuZDp1cmwoaHR0cDovL2Fzc2V0cy5zdGlja3BuZy5jb20vaW1hZ2VzLzU4ZjhiZDE3MGVkMmJkYWY3YzEyODMwOC5wbmcpIDk2JS8xNSUgbm8tcmVwZWF0ICNmZmY7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTtiYWNrZ3JvdW5kLXNpemU6MjBweH0uSW5wdXRGaWVsZCAuZHJvcGRvd246Zm9jdXN7Ym9yZGVyOm5vbmU7Ym9yZGVyLWJvdHRvbTpyZ2JhKDEzOSw3OSwxMSwwLjYxNikgOHB4IHNvbGlkO291dGxpbmUtd2lkdGg6MH0uSW5wdXRGaWVsZCAuY29sb3ItcGlja2Vye2JvcmRlcjpub25lO2hlaWdodDo1MHB4O21pbi13aWR0aDoyMDBweDtwb3NpdGlvbjpyZWxhdGl2ZX0uSW5wdXRGaWVsZCAuY29sb3ItcGlja2VyOjphZnRlcntjb250ZW50OlxcXCIoQ2xpY2sgdG8gQ2hhbmdlKVxcXCI7cG9zaXRpb246YWJzb2x1dGU7Y29sb3I6d2hpdGU7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0bzt0b3A6MzMlO2xlZnQ6MDtyaWdodDowO3RleHQtYWxpZ246Y2VudGVyfS5CdXR0b257Ym94LXNoYWRvdzowcHggMnB4IDEwcHggcmdiYSgxMDksMTA5LDEwOSwwLjA5Nik7Ym9yZGVyOm5vbmU7Zm9udC13ZWlnaHQ6OTAwO3RleHQtYWxpZ246Y2VudGVyO21pbi13aWR0aDo2MCU7aGVpZ2h0OjIuNWVtO21hcmdpbjoyMHB4O2N1cnNvcjpwb2ludGVyfS5CdXR0b24uQnV0dG9uUHJpbWFyeXtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjEyLDE3MCwxNDAsMC40NTg4MjQpfS5CdXR0b24uQnV0dG9uRGVzdHJ1Y3RpdmV7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDIxMiwxNDAsMTQwLDAuNDU4ODI0KX0uQnV0dG9uLkJ1dHRvbkNyZWF0aW9ue2JhY2tncm91bmQtY29sb3I6cmdiYSgxNDAsMjEyLDE0MCwwLjQ1ODgyNCl9LlRvZ2dsZUZpZWxke2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTtib3gtc2hhZG93OjBweCAxMHB4IDEwcHggcmdiYSgxMjgsMTI4LDEyOCwwLjEzKTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZzoxMHB4O21hcmdpbjoyMHB4fS5Ub2dnbGVGaWVsZCAuTGFiZWx7dGV4dC1hbGlnbjpsZWZ0O3dpZHRoOjkwcHg7Zm9udC1zaXplOjEycHg7bWFyZ2luLXRvcDoxMHB4fS5Ub2dnbGVGaWVsZCAuVG9nZ2xle3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjYwcHg7aGVpZ2h0OjM0cHh9LlRvZ2dsZUZpZWxkIC5Ub2dnbGUgaW5wdXR7b3BhY2l0eTowO3dpZHRoOjA7aGVpZ2h0OjB9LlRvZ2dsZUZpZWxkIC5zbGlkZXJ7cG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyLXJhZGl1czozNHB4O2N1cnNvcjpwb2ludGVyO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO2JhY2tncm91bmQtY29sb3I6I2U4ZThlODstd2Via2l0LXRyYW5zaXRpb246MC40czt0cmFuc2l0aW9uOjAuNHN9LlRvZ2dsZUZpZWxkIC5zbGlkZXI6YmVmb3Jle3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlci1yYWRpdXM6NTAlO2NvbnRlbnQ6XFxcIlxcXCI7aGVpZ2h0OjI2cHg7d2lkdGg6MjZweDtsZWZ0OjRweDtib3R0b206NHB4O2JhY2tncm91bmQtY29sb3I6cmdiYSgxNDMsMjgsMjgsMC40ODIpOy13ZWJraXQtdHJhbnNpdGlvbjowLjRzO3RyYW5zaXRpb246MC40c30uVG9nZ2xlRmllbGQgaW5wdXQ6Y2hlY2tlZCsuc2xpZGVyOmJlZm9yZXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDI2cHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyNnB4KTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwxMjgsMCwwLjQ1Mik7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjZweCl9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb3JlL2NvcmUuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBR0EsT0FDSSxhQUF5QixDQUN6QixjQUFlLENBQ2YsbUJBQW9CLENBQ3BCLGVBQWdCLENBQ2hCLGlCQUFrQixDQUNsQixVQUFXLENBQ2QsWUFHRyxZQUFhLENBQ2IsV0FBWSxDQUNaLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsV0FBWSxDQUNaLGtCQUFtQixDQU52QixtQkFTUSxlQUFnQixDQVR4QixtQkFZUSwrQ0FBbUQsQ0FDbkQsWUFBYSxDQUNiLFdBQVksQ0FDWiwrQ0FBbUQsQ0FDbkQsaUNBQWtDLENBQ2xDLHdCQUF5QixDQWpCakMseUJBb0JRLFdBQVksQ0FDWiw2Q0FBaUQsQ0FDakQsZUFBZ0IsQ0F0QnhCLHNCQTJCUSx1QkFBd0IsQ0FDeEIsY0FBZSxDQUNmLCtDQUFtRCxDQUNuRCxXQUFZLENBQ1osK0NBQW1ELENBQ25ELGlDQUFrQyxDQUNsQyxXQUFZLENBRVosd0JBQXlCLENBQ3pCLHVCQUF3QixDQUN4QixvQkFBcUIsQ0FFckIscUdBQ3NCLENBQ3RCLHNCQUF1QixDQUN2QixvQkFBcUIsQ0ExQzdCLDRCQThDUSxXQUFZLENBQ1osNkNBQWlELENBQ2pELGVBQWdCLENBaER4QiwwQkFvRFEsV0FBWSxDQUNaLFdBQVksQ0FDWixlQUFnQixDQUNoQixpQkFBa0IsQ0F2RDFCLGlDQXlEWSwyQkFBNEIsQ0FDNUIsaUJBQWtCLENBQ2xCLFdBQVksQ0FDWixnQkFBaUIsQ0FDakIsaUJBQWtCLENBQ2xCLE9BQVEsQ0FDUixNQUFPLENBQ1AsT0FBUSxDQUNSLGlCQUFrQixDQUNyQixRQUtMLCtDQUFtRCxDQUNuRCxXQUFZLENBRVosZUFBZ0IsQ0FDaEIsaUJBQWtCLENBRWxCLGFBQWMsQ0FDZCxZQUFhLENBRWIsV0FBWSxDQUNaLGNBQWUsQ0FYbkIsc0JBY1EsMkNDL0Z3QixDRGlGaEMsMEJBaUJRLDJDQ2hHNEIsQ0QrRXBDLHVCQW9CUSwyQ0NwR3lCLENEcUc1QixhQUtELFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBQ3ZCLCtDQUFtRCxDQUNuRCw2QkFBOEIsQ0FDOUIsa0JBQW1CLENBQ25CLFlBQWEsQ0FDYixXQUFZLENBUmhCLG9CQVVRLGVBQWdCLENBQ2hCLFVBQVcsQ0FDWCxjQUFlLENBQ2YsZUFBZ0IsQ0FieEIscUJBaUJRLGlCQUFrQixDQUNsQixvQkFBcUIsQ0FDckIsVUFBVyxDQUNYLFdBQVksQ0FwQnBCLDJCQXdCUSxTQUFVLENBQ1YsT0FBUSxDQUNSLFFBQVMsQ0ExQmpCLHFCQThCUSxpQkFBa0IsQ0FDbEIsa0JBQW1CLENBQ25CLGNBQWUsQ0FDZixLQUFNLENBQ04sTUFBTyxDQUNQLE9BQVEsQ0FDUixRQUFTLENBQ1Qsd0JBQW9DLENBQ3BDLHVCQUF3QixDQUN4QixlQUFnQixDQXZDeEIsNEJBMkNRLGlCQUFrQixDQUNsQixpQkFBa0IsQ0FDbEIsVUFBVyxDQUNYLFdBQVksQ0FDWixVQUFXLENBQ1gsUUFBUyxDQUNULFVBQVcsQ0FDWCxzQ0FBMEMsQ0FDMUMsdUJBQXdCLENBQ3hCLGVBQWdCLENBcER4QiwwQ0F1RFEsa0NBQW1DLENBQ25DLDhCQUErQixDQUMvQixvQ0FBd0MsQ0FDeEMsMEJBQTJCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8vSW5wdXQgRmllbGRcXHJcXG5AaW1wb3J0IFxcXCIuLi9nbG9iYWxzLnNjc3NcXFwiO1xcclxcblxcclxcbi5MYWJlbCB7XFxyXFxuICAgIGNvbG9yOiByZ2IoMTcyLCAxNzIsIDE3Mik7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTFweDtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbi5JbnB1dEZpZWxkIHtcXHJcXG4gICAgcGFkZGluZzogMTBweDtcXHJcXG4gICAgbWFyZ2luOiAxMHB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIG92ZXJmbG93LXg6IHZpc2libGU7XFxyXFxuXFxyXFxuICAgIC5MYWJlbCB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgICB9XFxyXFxuICAgIC5JbnB1dCB7XFxyXFxuICAgICAgICBib3gtc2hhZG93OiAwcHggMTBweCAxMHB4IHJnYmEoMTI4LCAxMjgsIDEyOCwgMC4xMyk7XFxyXFxuICAgICAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICAgICAgYm9yZGVyOiBub25lO1xcclxcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogcmdiYSgyMTEsIDIxMSwgMjExLCAwLjU5MSkgOHB4IHNvbGlkO1xcclxcbiAgICAgICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogYm9yZGVyLWJvdHRvbTtcXHJcXG4gICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7XFxyXFxuICAgIH1cXHJcXG4gICAgLklucHV0OmZvY3VzIHtcXHJcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgICAgIGJvcmRlci1ib3R0b206IHJnYmEoMTM5LCA3OSwgMTEsIDAuNjE2KSA4cHggc29saWQ7XFxyXFxuICAgICAgICBvdXRsaW5lLXdpZHRoOiAwO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC8vRHJvcGRvd25cXHJcXG4gICAgLmRyb3Bkb3duIHtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDVweCA1cHggNXB4IDVweDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gICAgICAgIGJveC1zaGFkb3c6IDBweCAxMHB4IDEwcHggcmdiYSgxMjgsIDEyOCwgMTI4LCAwLjEzKTtcXHJcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgICAgIGJvcmRlci1ib3R0b206IHJnYmEoMjExLCAyMTEsIDIxMSwgMC41OTEpIDhweCBzb2xpZDtcXHJcXG4gICAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGJvcmRlci1ib3R0b207XFxyXFxuICAgICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuXFxyXFxuICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjJzO1xcclxcbiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcclxcbiAgICAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xcclxcbiAgICAgICAgLy8gYXBwZWFyYW5jZTogbm9uZTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6IHVybChodHRwOi8vYXNzZXRzLnN0aWNrcG5nLmNvbS9pbWFnZXMvNThmOGJkMTcwZWQyYmRhZjdjMTI4MzA4LnBuZykgOTYlIC8gMTUlIG5vLXJlcGVhdFxcclxcbiAgICAgICAgICAgIHJnYigyNTUsIDI1NSwgMjU1KTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiAyMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5kcm9wZG93bjpmb2N1cyB7XFxyXFxuICAgICAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgICAgICBib3JkZXItYm90dG9tOiByZ2JhKDEzOSwgNzksIDExLCAwLjYxNikgOHB4IHNvbGlkO1xcclxcbiAgICAgICAgb3V0bGluZS13aWR0aDogMDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuY29sb3ItcGlja2VyIHtcXHJcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgICAgIGhlaWdodDogNTBweDtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogMjAwcHg7XFxyXFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgICAgICAmOjphZnRlciB7XFxyXFxuICAgICAgICAgICAgY29udGVudDogXFxcIihDbGljayB0byBDaGFuZ2UpXFxcIjtcXHJcXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcXHJcXG4gICAgICAgICAgICB0b3A6IDMzJTtcXHJcXG4gICAgICAgICAgICBsZWZ0OiAwO1xcclxcbiAgICAgICAgICAgIHJpZ2h0OiAwO1xcclxcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4uQnV0dG9uIHtcXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDJweCAxMHB4IHJnYmEoMTA5LCAxMDksIDEwOSwgMC4wOTYpO1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuXFxyXFxuICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHJcXG4gICAgbWluLXdpZHRoOiA2MCU7XFxyXFxuICAgIGhlaWdodDogMi41ZW07XFxyXFxuXFxyXFxuICAgIG1hcmdpbjogMjBweDtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcblxcclxcbiAgICAmLkJ1dHRvblByaW1hcnkge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHByaW1hcnktYnV0dG9uLWNvbG9yO1xcclxcbiAgICB9XFxyXFxuICAgICYuQnV0dG9uRGVzdHJ1Y3RpdmUge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGRlc3RydWN0aXZlLWJ1dHRvbi1jb2xvcjtcXHJcXG4gICAgfVxcclxcbiAgICAmLkJ1dHRvbkNyZWF0aW9uIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjcmVhdGlvbi1idXR0b24tY29sb3I7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLy9Ub2dnbGUgU3dpdGNoXFxyXFxuLlRvZ2dsZUZpZWxkIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuICAgIGJveC1zaGFkb3c6IDBweCAxMHB4IDEwcHggcmdiYSgxMjgsIDEyOCwgMTI4LCAwLjEzKTtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgICBtYXJnaW46IDIwcHg7XFxyXFxuICAgIC5MYWJlbCB7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgICAgICAgd2lkdGg6IDkwcHg7XFxyXFxuICAgICAgICBmb250LXNpemU6IDEycHg7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5Ub2dnbGUge1xcclxcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICAgICAgd2lkdGg6IDYwcHg7XFxyXFxuICAgICAgICBoZWlnaHQ6IDM0cHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLlRvZ2dsZSBpbnB1dCB7XFxyXFxuICAgICAgICBvcGFjaXR5OiAwO1xcclxcbiAgICAgICAgd2lkdGg6IDA7XFxyXFxuICAgICAgICBoZWlnaHQ6IDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNsaWRlciB7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiAzNHB4O1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgdG9wOiAwO1xcclxcbiAgICAgICAgbGVmdDogMDtcXHJcXG4gICAgICAgIHJpZ2h0OiAwO1xcclxcbiAgICAgICAgYm90dG9tOiAwO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIzMiwgMjMyLCAyMzIpO1xcclxcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAwLjRzO1xcclxcbiAgICAgICAgdHJhbnNpdGlvbjogMC40cztcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuc2xpZGVyOmJlZm9yZSB7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICAgICAgICBjb250ZW50OiBcXFwiXFxcIjtcXHJcXG4gICAgICAgIGhlaWdodDogMjZweDtcXHJcXG4gICAgICAgIHdpZHRoOiAyNnB4O1xcclxcbiAgICAgICAgbGVmdDogNHB4O1xcclxcbiAgICAgICAgYm90dG9tOiA0cHg7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE0MywgMjgsIDI4LCAwLjQ4Mik7XFxyXFxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IDAuNHM7XFxyXFxuICAgICAgICB0cmFuc2l0aW9uOiAwLjRzO1xcclxcbiAgICB9XFxyXFxuICAgIGlucHV0OmNoZWNrZWQgKyAuc2xpZGVyOmJlZm9yZSB7XFxyXFxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgyNnB4KTtcXHJcXG4gICAgICAgIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMjZweCk7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDEyOCwgMCwgMC40NTIpO1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDI2cHgpO1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXHJcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM3NTtcXHJcXG4kY3JlYXRpb24tYnV0dG9uLWNvbG9yOiAjOGNkNDhjNzU7XFxyXFxuJGRlc3RydWN0aXZlLWJ1dHRvbi1jb2xvcjogI2Q0OGM4Yzc1O1xcclxcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxyXFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXHJcXG5cXHJcXG4kbW9iaWxlLXdpZHRoOiA4MDBweDtcXHJcXG5cXHJcXG5AbWl4aW4gbW9iaWxlIHtcXHJcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcclxcbiAgICAgICAgQGNvbnRlbnQ7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIiFmdW5jdGlvbihlLHQpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPXQoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sdCk7ZWxzZXt2YXIgbj10KCk7Zm9yKHZhciByIGluIG4pKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHM6ZSlbcl09bltyXX19KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChyKXtpZihuW3JdKXJldHVybiBuW3JdLmV4cG9ydHM7dmFyIG89bltyXT17ZXhwb3J0czp7fSxpZDpyLGxvYWRlZDohMX07cmV0dXJuIGVbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsdCksby5sb2FkZWQ9ITAsby5leHBvcnRzfXZhciBuPXt9O3JldHVybiB0Lm09ZSx0LmM9bix0LnA9XCJcIix0KDApfShbZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIG8oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGkoZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH1mdW5jdGlvbiBhKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24odCxuLHIpe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLHImJmUodCxyKSx0fX0oKSxjPW4oMzYpLHM9cihjKSxsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7byh0aGlzLHQpO3ZhciBuPWkodGhpcywodC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbCh0aGlzLGUpKTtyZXR1cm4gbi5zdGF0ZT17ZmlsZXM6W119LG59cmV0dXJuIGEodCxlKSx1KHQsW3trZXk6XCJoYW5kbGVDaGFuZ2VcIix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcyxuPWUudGFyZ2V0LmZpbGVzLHI9W10sbz1mdW5jdGlvbigpe3ZhciBlPW5baV0sbz1uZXcgRmlsZVJlYWRlcjtvLnJlYWRBc0RhdGFVUkwoZSksby5vbmxvYWQ9ZnVuY3Rpb24oKXt2YXIgaT17bmFtZTplLm5hbWUsdHlwZTplLnR5cGUsc2l6ZTpNYXRoLnJvdW5kKGUuc2l6ZS8xZTMpK1wiIGtCXCIsYmFzZTY0Om8ucmVzdWx0LGZpbGU6ZX07ci5wdXNoKGkpLHIubGVuZ3RoPT1uLmxlbmd0aCYmKHQucHJvcHMubXVsdGlwbGU/dC5wcm9wcy5vbkRvbmUocik6dC5wcm9wcy5vbkRvbmUoclswXSkpfX0saT0wO2k8bi5sZW5ndGg7aSsrKW8oKX19LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIse3R5cGU6XCJmaWxlXCIsb25DaGFuZ2U6dGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKSxtdWx0aXBsZTp0aGlzLnByb3BzLm11bHRpcGxlfSl9fV0pLHR9KHMuZGVmYXVsdC5Db21wb25lbnQpO3QuZGVmYXVsdD1sLGwuZGVmYXVsdFByb3BzPXttdWx0aXBsZTohMX19LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbigpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gcigpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBvKGUpe2lmKGw9PT1zZXRUaW1lb3V0KXJldHVybiBzZXRUaW1lb3V0KGUsMCk7aWYoKGw9PT1ufHwhbCkmJnNldFRpbWVvdXQpcmV0dXJuIGw9c2V0VGltZW91dCxzZXRUaW1lb3V0KGUsMCk7dHJ5e3JldHVybiBsKGUsMCl9Y2F0Y2godCl7dHJ5e3JldHVybiBsLmNhbGwobnVsbCxlLDApfWNhdGNoKHQpe3JldHVybiBsLmNhbGwodGhpcyxlLDApfX19ZnVuY3Rpb24gaShlKXtpZihwPT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQoZSk7aWYoKHA9PT1yfHwhcCkmJmNsZWFyVGltZW91dClyZXR1cm4gcD1jbGVhclRpbWVvdXQsY2xlYXJUaW1lb3V0KGUpO3RyeXtyZXR1cm4gcChlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIHAuY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBwLmNhbGwodGhpcyxlKX19fWZ1bmN0aW9uIGEoKXt2JiZkJiYodj0hMSxkLmxlbmd0aD95PWQuY29uY2F0KHkpOm09LTEseS5sZW5ndGgmJnUoKSl9ZnVuY3Rpb24gdSgpe2lmKCF2KXt2YXIgZT1vKGEpO3Y9ITA7Zm9yKHZhciB0PXkubGVuZ3RoO3Q7KXtmb3IoZD15LHk9W107KyttPHQ7KWQmJmRbbV0ucnVuKCk7bT0tMSx0PXkubGVuZ3RofWQ9bnVsbCx2PSExLGkoZSl9fWZ1bmN0aW9uIGMoZSx0KXt0aGlzLmZ1bj1lLHRoaXMuYXJyYXk9dH1mdW5jdGlvbiBzKCl7fXZhciBsLHAsZj1lLmV4cG9ydHM9e307IWZ1bmN0aW9uKCl7dHJ5e2w9XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om59Y2F0Y2goZSl7bD1ufXRyeXtwPVwiZnVuY3Rpb25cIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6cn1jYXRjaChlKXtwPXJ9fSgpO3ZhciBkLHk9W10sdj0hMSxtPS0xO2YubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgbj0xO248YXJndW1lbnRzLmxlbmd0aDtuKyspdFtuLTFdPWFyZ3VtZW50c1tuXTt5LnB1c2gobmV3IGMoZSx0KSksMSE9PXkubGVuZ3RofHx2fHxvKHUpfSxjLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxmLnRpdGxlPVwiYnJvd3NlclwiLGYuYnJvd3Nlcj0hMCxmLmVudj17fSxmLmFyZ3Y9W10sZi52ZXJzaW9uPVwiXCIsZi52ZXJzaW9ucz17fSxmLm9uPXMsZi5hZGRMaXN0ZW5lcj1zLGYub25jZT1zLGYub2ZmPXMsZi5yZW1vdmVMaXN0ZW5lcj1zLGYucmVtb3ZlQWxsTGlzdGVuZXJzPXMsZi5lbWl0PXMsZi5wcmVwZW5kTGlzdGVuZXI9cyxmLnByZXBlbmRPbmNlTGlzdGVuZXI9cyxmLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm5bXX0sZi5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfSxmLmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifSxmLmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX0sZi51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCxuLG8saSxhLHUsYyl7aWYocih0KSwhZSl7dmFyIHM7aWYodm9pZCAwPT09dClzPW5ldyBFcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W24sbyxpLGEsdSxjXSxwPTA7cz1uZXcgRXJyb3IodC5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbcCsrXX0pKSxzLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9dGhyb3cgcy5mcmFtZXNUb1BvcD0xLHN9fXZhciByPWZ1bmN0aW9uKGUpe307XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmKHI9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudFwiKX0pLGUuZXhwb3J0cz1ufSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciByPW4oOSksbz1yO2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3ZhciBpPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49QXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3ZhciBvPTAsaT1cIldhcm5pbmc6IFwiK2UucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBuW28rK119KTtcInVuZGVmaW5lZFwiIT10eXBlb2YgY29uc29sZSYmY29uc29sZS5lcnJvcihpKTt0cnl7dGhyb3cgbmV3IEVycm9yKGkpfWNhdGNoKGUpe319O289ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBFcnJvcihcImB3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nIG1lc3NhZ2UgYXJndW1lbnRcIik7aWYoMCE9PXQuaW5kZXhPZihcIkZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6IFwiKSYmIWUpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLHI9QXJyYXkobj4yP24tMjowKSxvPTI7bzxuO28rKylyW28tMl09YXJndW1lbnRzW29dO2kuYXBwbHkodm9pZCAwLFt0XS5jb25jYXQocikpfX19ZS5leHBvcnRzPW99KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZkLmNhbGwoZSxcInJlZlwiKSl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLFwicmVmXCIpLmdldDtpZihuJiZuLmlzUmVhY3RXYXJuaW5nKXJldHVybiExfXJldHVybiB2b2lkIDAhPT1lLnJlZn1mdW5jdGlvbiBvKGUpe2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJmQuY2FsbChlLFwia2V5XCIpKXt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsXCJrZXlcIikuZ2V0O2lmKG4mJm4uaXNSZWFjdFdhcm5pbmcpcmV0dXJuITF9cmV0dXJuIHZvaWQgMCE9PWUua2V5fWZ1bmN0aW9uIGkoZSxuKXt2YXIgcj1mdW5jdGlvbigpe3V8fCh1PSEwLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/cCghMSxcIiVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgdmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCBwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKVwiLG4pOnZvaWQgMCl9O3IuaXNSZWFjdFdhcm5pbmc9ITAsT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJrZXlcIix7Z2V0OnIsY29uZmlndXJhYmxlOiEwfSl9ZnVuY3Rpb24gYShlLG4pe3ZhciByPWZ1bmN0aW9uKCl7Y3x8KGM9ITAsXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9wKCExLFwiJXM6IGByZWZgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSB2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50IHByb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpXCIsbik6dm9pZCAwKX07ci5pc1JlYWN0V2FybmluZz0hMCxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInJlZlwiLHtnZXQ6cixjb25maWd1cmFibGU6ITB9KX12YXIgdSxjLHM9big2KSxsPW4oNykscD1uKDMpLGY9big4KSxkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkseT1uKDE1KSx2PXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH0sbT1mdW5jdGlvbihlLG4scixvLGksYSx1KXt2YXIgYz17JCR0eXBlb2Y6eSx0eXBlOmUsa2V5Om4scmVmOnIscHJvcHM6dSxfb3duZXI6YX07cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmKGMuX3N0b3JlPXt9LGY/KE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjLl9zdG9yZSxcInZhbGlkYXRlZFwiLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCx2YWx1ZTohMX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjLFwiX3NlbGZcIix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITEsdmFsdWU6b30pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjLFwiX3NvdXJjZVwiLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMSx2YWx1ZTppfSkpOihjLl9zdG9yZS52YWxpZGF0ZWQ9ITEsYy5fc2VsZj1vLGMuX3NvdXJjZT1pKSxPYmplY3QuZnJlZXplJiYoT2JqZWN0LmZyZWV6ZShjLnByb3BzKSxPYmplY3QuZnJlZXplKGMpKSksY307bS5jcmVhdGVFbGVtZW50PWZ1bmN0aW9uKGUsbix1KXt2YXIgYyxzPXt9LHA9bnVsbCxmPW51bGwsaD1udWxsLGc9bnVsbDtpZihudWxsIT1uKXtyKG4pJiYoZj1uLnJlZiksbyhuKSYmKHA9XCJcIituLmtleSksaD12b2lkIDA9PT1uLl9fc2VsZj9udWxsOm4uX19zZWxmLGc9dm9pZCAwPT09bi5fX3NvdXJjZT9udWxsOm4uX19zb3VyY2U7Zm9yKGMgaW4gbilkLmNhbGwobixjKSYmIXYuaGFzT3duUHJvcGVydHkoYykmJihzW2NdPW5bY10pfXZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YilzLmNoaWxkcmVuPXU7ZWxzZSBpZihiPjEpe2Zvcih2YXIgRT1BcnJheShiKSxOPTA7TjxiO04rKylFW05dPWFyZ3VtZW50c1tOKzJdO1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJk9iamVjdC5mcmVlemUmJk9iamVjdC5mcmVlemUoRSkscy5jaGlsZHJlbj1FfWlmKGUmJmUuZGVmYXVsdFByb3BzKXt2YXIgXz1lLmRlZmF1bHRQcm9wcztmb3IoYyBpbiBfKXZvaWQgMD09PXNbY10mJihzW2NdPV9bY10pfWlmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJihwfHxmKSYmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzLiQkdHlwZW9mfHxzLiQkdHlwZW9mIT09eSkpe3ZhciBPPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIlVua25vd25cIjplO3AmJmkocyxPKSxmJiZhKHMsTyl9cmV0dXJuIG0oZSxwLGYsaCxnLGwuY3VycmVudCxzKX0sbS5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGUpe3ZhciB0PW0uY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsZSk7cmV0dXJuIHQudHlwZT1lLHR9LG0uY2xvbmVBbmRSZXBsYWNlS2V5PWZ1bmN0aW9uKGUsdCl7dmFyIG49bShlLnR5cGUsdCxlLnJlZixlLl9zZWxmLGUuX3NvdXJjZSxlLl9vd25lcixlLnByb3BzKTtyZXR1cm4gbn0sbS5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLGE9cyh7fSxlLnByb3BzKSx1PWUua2V5LGM9ZS5yZWYscD1lLl9zZWxmLGY9ZS5fc291cmNlLHk9ZS5fb3duZXI7aWYobnVsbCE9dCl7cih0KSYmKGM9dC5yZWYseT1sLmN1cnJlbnQpLG8odCkmJih1PVwiXCIrdC5rZXkpO3ZhciBoO2UudHlwZSYmZS50eXBlLmRlZmF1bHRQcm9wcyYmKGg9ZS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGkgaW4gdClkLmNhbGwodCxpKSYmIXYuaGFzT3duUHJvcGVydHkoaSkmJih2b2lkIDA9PT10W2ldJiZ2b2lkIDAhPT1oP2FbaV09aFtpXTphW2ldPXRbaV0pfXZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylhLmNoaWxkcmVuPW47ZWxzZSBpZihnPjEpe2Zvcih2YXIgYj1BcnJheShnKSxFPTA7RTxnO0UrKyliW0VdPWFyZ3VtZW50c1tFKzJdO2EuY2hpbGRyZW49Yn1yZXR1cm4gbShlLnR5cGUsdSxjLHAsZix5LGEpfSxtLmlzVmFsaWRFbGVtZW50PWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmZS4kJHR5cGVvZj09PXl9LGUuZXhwb3J0cz1tfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgtMSxuPVwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2UrXCI7IHZpc2l0IGh0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2Uscj0wO3I8dDtyKyspbis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbcisxXSk7bis9XCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiO3ZhciBvPW5ldyBFcnJvcihuKTt0aHJvdyBvLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCIsby5mcmFtZXNUb1BvcD0xLG99ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCl7Lypcblx0b2JqZWN0LWFzc2lnblxuXHQoYykgU2luZHJlIFNvcmh1c1xuXHRAbGljZW5zZSBNSVRcblx0Ki9cblwidXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkXCIpO3JldHVybiBPYmplY3QoZSl9ZnVuY3Rpb24gcigpe3RyeXtpZighT2JqZWN0LmFzc2lnbilyZXR1cm4hMTt2YXIgZT1uZXcgU3RyaW5nKFwiYWJjXCIpO2lmKGVbNV09XCJkZVwiLFwiNVwiPT09T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZSlbMF0pcmV0dXJuITE7Zm9yKHZhciB0PXt9LG49MDtuPDEwO24rKyl0W1wiX1wiK1N0cmluZy5mcm9tQ2hhckNvZGUobildPW47dmFyIHI9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfSk7aWYoXCIwMTIzNDU2Nzg5XCIhPT1yLmpvaW4oXCJcIikpcmV0dXJuITE7dmFyIG89e307cmV0dXJuXCJhYmNkZWZnaGlqa2xtbm9wcXJzdFwiLnNwbGl0KFwiXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7b1tlXT1lfSksXCJhYmNkZWZnaGlqa2xtbm9wcXJzdFwiPT09T2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSxvKSkuam9pbihcIlwiKX1jYXRjaChlKXtyZXR1cm4hMX19dmFyIG89T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxpPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksYT1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO2UuZXhwb3J0cz1yKCk/T2JqZWN0LmFzc2lnbjpmdW5jdGlvbihlLHQpe2Zvcih2YXIgcix1LGM9bihlKSxzPTE7czxhcmd1bWVudHMubGVuZ3RoO3MrKyl7cj1PYmplY3QoYXJndW1lbnRzW3NdKTtmb3IodmFyIGwgaW4gcilpLmNhbGwocixsKSYmKGNbbF09cltsXSk7aWYobyl7dT1vKHIpO2Zvcih2YXIgcD0wO3A8dS5sZW5ndGg7cCsrKWEuY2FsbChyLHVbcF0pJiYoY1t1W3BdXT1yW3VbcF1dKX19cmV0dXJuIGN9fSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPXtjdXJyZW50Om51bGx9O2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciBuPSExO2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpdHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcInhcIix7Z2V0OmZ1bmN0aW9uKCl7fX0pLG49ITB9Y2F0Y2goZSl7fWUuZXhwb3J0cz1ufSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGV9fXZhciByPWZ1bmN0aW9uKCl7fTtyLnRoYXRSZXR1cm5zPW4sci50aGF0UmV0dXJuc0ZhbHNlPW4oITEpLHIudGhhdFJldHVybnNUcnVlPW4oITApLHIudGhhdFJldHVybnNOdWxsPW4obnVsbCksci50aGF0UmV0dXJuc1RoaXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sci50aGF0UmV0dXJuc0FyZ3VtZW50PWZ1bmN0aW9uKGUpe3JldHVybiBlfSxlLmV4cG9ydHM9cn0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3ZhciB0PUZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyxuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscj1SZWdFeHAoXCJeXCIrdC5jYWxsKG4pLnJlcGxhY2UoL1tcXFxcXiQuKis/KClbXFxde318XS9nLFwiXFxcXCQmXCIpLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csXCIkMS4qP1wiKStcIiRcIik7dHJ5e3ZhciBvPXQuY2FsbChlKTtyZXR1cm4gci50ZXN0KG8pfWNhdGNoKGUpe3JldHVybiExfX1mdW5jdGlvbiBvKGUpe3ZhciB0PXMoZSk7aWYodCl7dmFyIG49dC5jaGlsZElEcztsKGUpLG4uZm9yRWFjaChvKX19ZnVuY3Rpb24gaShlLHQsbil7cmV0dXJuXCJcXG4gICAgaW4gXCIrKGV8fFwiVW5rbm93blwiKSsodD9cIiAoYXQgXCIrdC5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK3QubGluZU51bWJlcitcIilcIjpuP1wiIChjcmVhdGVkIGJ5IFwiK24rXCIpXCI6XCJcIil9ZnVuY3Rpb24gYShlKXtyZXR1cm4gbnVsbD09ZT9cIiNlbXB0eVwiOlwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZT9cIiN0ZXh0XCI6XCJzdHJpbmdcIj09dHlwZW9mIGUudHlwZT9lLnR5cGU6ZS50eXBlLmRpc3BsYXlOYW1lfHxlLnR5cGUubmFtZXx8XCJVbmtub3duXCJ9ZnVuY3Rpb24gdShlKXt2YXIgbixyPVAuZ2V0RGlzcGxheU5hbWUoZSksbz1QLmdldEVsZW1lbnQoZSksYT1QLmdldE93bmVySUQoZSk7cmV0dXJuIGEmJihuPVAuZ2V0RGlzcGxheU5hbWUoYSkpLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/ZyhvLFwiUmVhY3RDb21wb25lbnRUcmVlSG9vazogTWlzc2luZyBSZWFjdCBlbGVtZW50IGZvciBkZWJ1Z0lEICVzIHdoZW4gYnVpbGRpbmcgc3RhY2tcIixlKTp2b2lkIDAsaShyLG8mJm8uX3NvdXJjZSxuKX12YXIgYyxzLGwscCxmLGQseSx2PW4oNSksbT1uKDcpLGg9bigyKSxnPW4oMyksYj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheS5mcm9tJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBNYXAmJnIoTWFwKSYmbnVsbCE9TWFwLnByb3RvdHlwZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgTWFwLnByb3RvdHlwZS5rZXlzJiZyKE1hcC5wcm90b3R5cGUua2V5cykmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFNldCYmcihTZXQpJiZudWxsIT1TZXQucHJvdG90eXBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTZXQucHJvdG90eXBlLmtleXMmJnIoU2V0LnByb3RvdHlwZS5rZXlzKTtpZihiKXt2YXIgRT1uZXcgTWFwLE49bmV3IFNldDtjPWZ1bmN0aW9uKGUsdCl7RS5zZXQoZSx0KX0scz1mdW5jdGlvbihlKXtyZXR1cm4gRS5nZXQoZSl9LGw9ZnVuY3Rpb24oZSl7RS5kZWxldGUoZSl9LHA9ZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkuZnJvbShFLmtleXMoKSl9LGY9ZnVuY3Rpb24oZSl7Ti5hZGQoZSl9LGQ9ZnVuY3Rpb24oZSl7Ti5kZWxldGUoZSl9LHk9ZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkuZnJvbShOLmtleXMoKSl9fWVsc2V7dmFyIF89e30sTz17fSxEPWZ1bmN0aW9uKGUpe3JldHVyblwiLlwiK2V9LHc9ZnVuY3Rpb24oZSl7cmV0dXJuIHBhcnNlSW50KGUuc3Vic3RyKDEpLDEwKX07Yz1mdW5jdGlvbihlLHQpe3ZhciBuPUQoZSk7X1tuXT10fSxzPWZ1bmN0aW9uKGUpe3ZhciB0PUQoZSk7cmV0dXJuIF9bdF19LGw9ZnVuY3Rpb24oZSl7dmFyIHQ9RChlKTtkZWxldGUgX1t0XX0scD1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyhfKS5tYXAodyl9LGY9ZnVuY3Rpb24oZSl7dmFyIHQ9RChlKTtPW3RdPSEwfSxkPWZ1bmN0aW9uKGUpe3ZhciB0PUQoZSk7ZGVsZXRlIE9bdF19LHk9ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmtleXMoTykubWFwKHcpfX12YXIgeD1bXSxQPXtvblNldENoaWxkcmVuOmZ1bmN0aW9uKGUsbil7dmFyIHI9cyhlKTtyP3ZvaWQgMDpcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2goITEsXCJJdGVtIG11c3QgaGF2ZSBiZWVuIHNldFwiKTp2KFwiMTQ0XCIpLHIuY2hpbGRJRHM9bjtmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGk9bltvXSxhPXMoaSk7YT92b2lkIDA6XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9oKCExLFwiRXhwZWN0ZWQgaG9vayBldmVudHMgdG8gZmlyZSBmb3IgdGhlIGNoaWxkIGJlZm9yZSBpdHMgcGFyZW50IGluY2x1ZGVzIGl0IGluIG9uU2V0Q2hpbGRyZW4oKS5cIik6dihcIjE0MFwiKSxudWxsPT1hLmNoaWxkSURzJiZcIm9iamVjdFwiPT10eXBlb2YgYS5lbGVtZW50JiZudWxsIT1hLmVsZW1lbnQ/XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9oKCExLFwiRXhwZWN0ZWQgb25TZXRDaGlsZHJlbigpIHRvIGZpcmUgZm9yIGEgY29udGFpbmVyIGNoaWxkIGJlZm9yZSBpdHMgcGFyZW50IGluY2x1ZGVzIGl0IGluIG9uU2V0Q2hpbGRyZW4oKS5cIik6dihcIjE0MVwiKTp2b2lkIDAsYS5pc01vdW50ZWQ/dm9pZCAwOlwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/aCghMSxcIkV4cGVjdGVkIG9uTW91bnRDb21wb25lbnQoKSB0byBmaXJlIGZvciB0aGUgY2hpbGQgYmVmb3JlIGl0cyBwYXJlbnQgaW5jbHVkZXMgaXQgaW4gb25TZXRDaGlsZHJlbigpLlwiKTp2KFwiNzFcIiksbnVsbD09YS5wYXJlbnRJRCYmKGEucGFyZW50SUQ9ZSksYS5wYXJlbnRJRCE9PWU/XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9oKCExLFwiRXhwZWN0ZWQgb25CZWZvcmVNb3VudENvbXBvbmVudCgpIHBhcmVudCBhbmQgb25TZXRDaGlsZHJlbigpIHRvIGJlIGNvbnNpc3RlbnQgKCVzIGhhcyBwYXJlbnRzICVzIGFuZCAlcykuXCIsaSxhLnBhcmVudElELGUpOnYoXCIxNDJcIixpLGEucGFyZW50SUQsZSk6dm9pZCAwfX0sb25CZWZvcmVNb3VudENvbXBvbmVudDpmdW5jdGlvbihlLHQsbil7dmFyIHI9e2VsZW1lbnQ6dCxwYXJlbnRJRDpuLHRleHQ6bnVsbCxjaGlsZElEczpbXSxpc01vdW50ZWQ6ITEsdXBkYXRlQ291bnQ6MH07YyhlLHIpfSxvbkJlZm9yZVVwZGF0ZUNvbXBvbmVudDpmdW5jdGlvbihlLHQpe3ZhciBuPXMoZSk7biYmbi5pc01vdW50ZWQmJihuLmVsZW1lbnQ9dCl9LG9uTW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oZSl7dmFyIG49cyhlKTtuP3ZvaWQgMDpcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2goITEsXCJJdGVtIG11c3QgaGF2ZSBiZWVuIHNldFwiKTp2KFwiMTQ0XCIpLG4uaXNNb3VudGVkPSEwO3ZhciByPTA9PT1uLnBhcmVudElEO3ImJmYoZSl9LG9uVXBkYXRlQ29tcG9uZW50OmZ1bmN0aW9uKGUpe3ZhciB0PXMoZSk7dCYmdC5pc01vdW50ZWQmJnQudXBkYXRlQ291bnQrK30sb25Vbm1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGUpe3ZhciB0PXMoZSk7aWYodCl7dC5pc01vdW50ZWQ9ITE7dmFyIG49MD09PXQucGFyZW50SUQ7biYmZChlKX14LnB1c2goZSl9LHB1cmdlVW5tb3VudGVkQ29tcG9uZW50czpmdW5jdGlvbigpe2lmKCFQLl9wcmV2ZW50UHVyZ2luZyl7Zm9yKHZhciBlPTA7ZTx4Lmxlbmd0aDtlKyspe3ZhciB0PXhbZV07byh0KX14Lmxlbmd0aD0wfX0saXNNb3VudGVkOmZ1bmN0aW9uKGUpe3ZhciB0PXMoZSk7cmV0dXJuISF0JiZ0LmlzTW91bnRlZH0sZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW06ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtpZihlKXt2YXIgbj1hKGUpLHI9ZS5fb3duZXI7dCs9aShuLGUuX3NvdXJjZSxyJiZyLmdldE5hbWUoKSl9dmFyIG89bS5jdXJyZW50LHU9byYmby5fZGVidWdJRDtyZXR1cm4gdCs9UC5nZXRTdGFja0FkZGVuZHVtQnlJRCh1KX0sZ2V0U3RhY2tBZGRlbmR1bUJ5SUQ6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiXCI7ZTspdCs9dShlKSxlPVAuZ2V0UGFyZW50SUQoZSk7cmV0dXJuIHR9LGdldENoaWxkSURzOmZ1bmN0aW9uKGUpe3ZhciB0PXMoZSk7cmV0dXJuIHQ/dC5jaGlsZElEczpbXX0sZ2V0RGlzcGxheU5hbWU6ZnVuY3Rpb24oZSl7dmFyIHQ9UC5nZXRFbGVtZW50KGUpO3JldHVybiB0P2EodCk6bnVsbH0sZ2V0RWxlbWVudDpmdW5jdGlvbihlKXt2YXIgdD1zKGUpO3JldHVybiB0P3QuZWxlbWVudDpudWxsfSxnZXRPd25lcklEOmZ1bmN0aW9uKGUpe3ZhciB0PVAuZ2V0RWxlbWVudChlKTtyZXR1cm4gdCYmdC5fb3duZXI/dC5fb3duZXIuX2RlYnVnSUQ6bnVsbH0sZ2V0UGFyZW50SUQ6ZnVuY3Rpb24oZSl7dmFyIHQ9cyhlKTtyZXR1cm4gdD90LnBhcmVudElEOm51bGx9LGdldFNvdXJjZTpmdW5jdGlvbihlKXt2YXIgdD1zKGUpLG49dD90LmVsZW1lbnQ6bnVsbCxyPW51bGwhPW4/bi5fc291cmNlOm51bGw7cmV0dXJuIHJ9LGdldFRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ9UC5nZXRFbGVtZW50KGUpO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6XCJudW1iZXJcIj09dHlwZW9mIHQ/XCJcIit0Om51bGx9LGdldFVwZGF0ZUNvdW50OmZ1bmN0aW9uKGUpe3ZhciB0PXMoZSk7cmV0dXJuIHQ/dC51cGRhdGVDb3VudDowfSxnZXRSb290SURzOnksZ2V0UmVnaXN0ZXJlZElEczpwLHB1c2hOb25TdGFuZGFyZFdhcm5pbmdTdGFjazpmdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGNvbnNvbGUucmVhY3RTdGFjayl7dmFyIG49W10scj1tLmN1cnJlbnQsbz1yJiZyLl9kZWJ1Z0lEO3RyeXtmb3IoZSYmbi5wdXNoKHtuYW1lOm8/UC5nZXREaXNwbGF5TmFtZShvKTpudWxsLGZpbGVOYW1lOnQ/dC5maWxlTmFtZTpudWxsLGxpbmVOdW1iZXI6dD90LmxpbmVOdW1iZXI6bnVsbH0pO287KXt2YXIgaT1QLmdldEVsZW1lbnQobyksYT1QLmdldFBhcmVudElEKG8pLHU9UC5nZXRPd25lcklEKG8pLGM9dT9QLmdldERpc3BsYXlOYW1lKHUpOm51bGwscz1pJiZpLl9zb3VyY2U7bi5wdXNoKHtuYW1lOmMsZmlsZU5hbWU6cz9zLmZpbGVOYW1lOm51bGwsbGluZU51bWJlcjpzP3MubGluZU51bWJlcjpudWxsfSksbz1hfX1jYXRjaChlKXt9Y29uc29sZS5yZWFjdFN0YWNrKG4pfX0scG9wTm9uU3RhbmRhcmRXYXJuaW5nU3RhY2s6ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBjb25zb2xlLnJlYWN0U3RhY2tFbmQmJmNvbnNvbGUucmVhY3RTdGFja0VuZCgpfX07ZS5leHBvcnRzPVB9KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZnVuY3Rpb24oKXt9O2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3ZhciByPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49QXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3ZhciBvPTAsaT1cIldhcm5pbmc6IFwiK2UucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBuW28rK119KTtcInVuZGVmaW5lZFwiIT10eXBlb2YgY29uc29sZSYmY29uc29sZS53YXJuKGkpO3RyeXt0aHJvdyBuZXcgRXJyb3IoaSl9Y2F0Y2goZSl7fX07bj1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IEVycm9yKFwiYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgbWVzc2FnZSBhcmd1bWVudFwiKTtpZighZSl7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgsbz1BcnJheShuPjI/bi0yOjApLGk9MjtpPG47aSsrKW9baS0yXT1hcmd1bWVudHNbaV07ci5hcHBseSh2b2lkIDAsW3RdLmNvbmNhdChvKSl9fX1lLmV4cG9ydHM9bn0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj17fTtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZPYmplY3QuZnJlZXplKG4pLGUuZXhwb3J0cz1ufSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPVwiU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRURcIjtlLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUsdCxuKXt0aGlzLnByb3BzPWUsdGhpcy5jb250ZXh0PXQsdGhpcy5yZWZzPWwsdGhpcy51cGRhdGVyPW58fGN9ZnVuY3Rpb24gbyhlLHQsbil7dGhpcy5wcm9wcz1lLHRoaXMuY29udGV4dD10LHRoaXMucmVmcz1sLHRoaXMudXBkYXRlcj1ufHxjfWZ1bmN0aW9uIGkoKXt9dmFyIGE9big1KSx1PW4oNiksYz1uKDE3KSxzPW4oOCksbD1uKDEyKSxwPW4oMiksZj1uKDExKTtpZihyLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9LHIucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGUsbil7XCJvYmplY3RcIiE9dHlwZW9mIGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPWU/XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9wKCExLFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpOmEoXCI4NVwiKTp2b2lkIDAsdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGUpLG4mJnRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcyxuLFwic2V0U3RhdGVcIil9LHIucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGUpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyksZSYmdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLGUsXCJmb3JjZVVwZGF0ZVwiKX0sXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7dmFyIGQ9e2lzTW91bnRlZDpbXCJpc01vdW50ZWRcIixcIkluc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCBzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluIGNvbXBvbmVudFdpbGxVbm1vdW50IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLlwiXSxyZXBsYWNlU3RhdGU6W1wicmVwbGFjZVN0YXRlXCIsXCJSZWZhY3RvciB5b3VyIGNvZGUgdG8gdXNlIHNldFN0YXRlIGluc3RlYWQgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzMyMzYpLlwiXX0seT1mdW5jdGlvbihlLHQpe3MmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLnByb3RvdHlwZSxlLHtnZXQ6ZnVuY3Rpb24oKXtmKCExLFwiJXMoLi4uKSBpcyBkZXByZWNhdGVkIGluIHBsYWluIEphdmFTY3JpcHQgUmVhY3QgY2xhc3Nlcy4gJXNcIix0WzBdLHRbMV0pfX0pfTtmb3IodmFyIHYgaW4gZClkLmhhc093blByb3BlcnR5KHYpJiZ5KHYsZFt2XSl9aS5wcm90b3R5cGU9ci5wcm90b3R5cGUsby5wcm90b3R5cGU9bmV3IGksby5wcm90b3R5cGUuY29uc3RydWN0b3I9byx1KG8ucHJvdG90eXBlLHIucHJvdG90eXBlKSxvLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMCxlLmV4cG9ydHM9e0NvbXBvbmVudDpyLFB1cmVDb21wb25lbnQ6b319KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yJiZTeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKXx8NjAxMDM7ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcigpe2lmKHMuY3VycmVudCl7dmFyIGU9cy5jdXJyZW50LmdldE5hbWUoKTtpZihlKXJldHVyblwiIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGBcIitlK1wiYC5cIn1yZXR1cm5cIlwifWZ1bmN0aW9uIG8oZSl7aWYobnVsbCE9PWUmJnZvaWQgMCE9PWUmJnZvaWQgMCE9PWUuX19zb3VyY2Upe3ZhciB0PWUuX19zb3VyY2Usbj10LmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikscj10LmxpbmVOdW1iZXI7cmV0dXJuXCIgQ2hlY2sgeW91ciBjb2RlIGF0IFwiK24rXCI6XCIrcitcIi5cIn1yZXR1cm5cIlwifWZ1bmN0aW9uIGkoZSl7dmFyIHQ9cigpO2lmKCF0KXt2YXIgbj1cInN0cmluZ1wiPT10eXBlb2YgZT9lOmUuZGlzcGxheU5hbWV8fGUubmFtZTtuJiYodD1cIiBDaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDxcIituK1wiPi5cIil9cmV0dXJuIHR9ZnVuY3Rpb24gYShlLG4pe2lmKGUuX3N0b3JlJiYhZS5fc3RvcmUudmFsaWRhdGVkJiZudWxsPT1lLmtleSl7ZS5fc3RvcmUudmFsaWRhdGVkPSEwO3ZhciByPWgudW5pcXVlS2V5fHwoaC51bmlxdWVLZXk9e30pLG89aShuKTtpZighcltvXSl7cltvXT0hMDt2YXIgYT1cIlwiO2UmJmUuX293bmVyJiZlLl9vd25lciE9PXMuY3VycmVudCYmKGE9XCIgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gXCIrZS5fb3duZXIuZ2V0TmFtZSgpK1wiLlwiKSxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP3YoITEsJ0VhY2ggY2hpbGQgaW4gYW4gYXJyYXkgb3IgaXRlcmF0b3Igc2hvdWxkIGhhdmUgYSB1bmlxdWUgXCJrZXlcIiBwcm9wLiVzJXMgU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciBtb3JlIGluZm9ybWF0aW9uLiVzJyxvLGEsbC5nZXRDdXJyZW50U3RhY2tBZGRlbmR1bShlKSk6dm9pZCAwfX19ZnVuY3Rpb24gdShlLHQpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07cC5pc1ZhbGlkRWxlbWVudChyKSYmYShyLHQpfWVsc2UgaWYocC5pc1ZhbGlkRWxlbWVudChlKSllLl9zdG9yZSYmKGUuX3N0b3JlLnZhbGlkYXRlZD0hMCk7ZWxzZSBpZihlKXt2YXIgbz15KGUpO2lmKG8mJm8hPT1lLmVudHJpZXMpZm9yKHZhciBpLHU9by5jYWxsKGUpOyEoaT11Lm5leHQoKSkuZG9uZTspcC5pc1ZhbGlkRWxlbWVudChpLnZhbHVlKSYmYShpLnZhbHVlLHQpfX1mdW5jdGlvbiBjKGUpe3ZhciBuPWUudHlwZTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXt2YXIgcj1uLmRpc3BsYXlOYW1lfHxuLm5hbWU7bi5wcm9wVHlwZXMmJmYobi5wcm9wVHlwZXMsZS5wcm9wcyxcInByb3BcIixyLGUsbnVsbCksXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5nZXREZWZhdWx0UHJvcHMmJihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP3Yobi5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsXCJnZXREZWZhdWx0UHJvcHMgaXMgb25seSB1c2VkIG9uIGNsYXNzaWMgUmVhY3QuY3JlYXRlQ2xhc3MgZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLlwiKTp2b2lkIDApfX12YXIgcz1uKDcpLGw9bigxMCkscD1uKDQpLGY9bigzMiksZD1uKDgpLHk9bigxOCksdj1uKDMpLG09bigxMSksaD17fSxnPXtjcmVhdGVFbGVtZW50OmZ1bmN0aW9uKGUsbixpKXt2YXIgYT1cInN0cmluZ1wiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZTtpZighYSYmXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpe3ZhciBzPVwiXCI7KHZvaWQgMD09PWV8fFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmMD09PU9iamVjdC5rZXlzKGUpLmxlbmd0aCkmJihzKz1cIiBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSBpdCdzIGRlZmluZWQgaW4uXCIpO3ZhciBmPW8obik7cys9Zj9mOnIoKSxzKz1sLmdldEN1cnJlbnRTdGFja0FkZGVuZHVtKCk7dmFyIGQ9bnVsbCE9PW4mJnZvaWQgMCE9PW4mJnZvaWQgMCE9PW4uX19zb3VyY2U/bi5fX3NvdXJjZTpudWxsO2wucHVzaE5vblN0YW5kYXJkV2FybmluZ1N0YWNrKCEwLGQpLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/dighMSxcIlJlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgaXMgaW52YWxpZCAtLSBleHBlY3RlZCBhIHN0cmluZyAoZm9yIGJ1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXNcIixudWxsPT1lP2U6dHlwZW9mIGUscyk6dm9pZCAwLGwucG9wTm9uU3RhbmRhcmRXYXJuaW5nU3RhY2soKX12YXIgeT1wLmNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKG51bGw9PXkpcmV0dXJuIHk7aWYoYSlmb3IodmFyIG09MjttPGFyZ3VtZW50cy5sZW5ndGg7bSsrKXUoYXJndW1lbnRzW21dLGUpO3JldHVybiBjKHkpLHl9LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oZSl7dmFyIG49Zy5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCxlKTtyZXR1cm4gbi50eXBlPWUsXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmZCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJ0eXBlXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG0oITEsXCJGYWN0b3J5LnR5cGUgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHRoZSBjbGFzcyBkaXJlY3RseSBiZWZvcmUgcGFzc2luZyBpdCB0byBjcmVhdGVGYWN0b3J5LlwiKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInR5cGVcIix7dmFsdWU6ZX0pLGV9fSksbn0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9cC5jbG9uZUVsZW1lbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpLG89MjtvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXUoYXJndW1lbnRzW29dLHIudHlwZSk7cmV0dXJuIGMocikscn19O2UuZXhwb3J0cz1nfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSxuKXtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXt2YXIgcj1lLmNvbnN0cnVjdG9yO1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/byghMSxcIiVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiBUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCAlcygpIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuIFRoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LlwiLG4sbixyJiYoci5kaXNwbGF5TmFtZXx8ci5uYW1lKXx8XCJSZWFjdENsYXNzXCIpOnZvaWQgMH19dmFyIG89bigzKSxpPXtpc01vdW50ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuITF9LGVucXVldWVDYWxsYmFjazpmdW5jdGlvbihlLHQpe30sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGUpe3IoZSxcImZvcmNlVXBkYXRlXCIpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGUsdCl7cihlLFwicmVwbGFjZVN0YXRlXCIpfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oZSx0KXtyKGUsXCJzZXRTdGF0ZVwiKX19O2UuZXhwb3J0cz1pfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7dmFyIHQ9ZSYmKHImJmVbcl18fGVbb10pO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIHR9dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Isbz1cIkBAaXRlcmF0b3JcIjtlLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlfWZ1bmN0aW9uIG8oZSxuLG8pe2Z1bmN0aW9uIHAoZSxuLHIpe2Zvcih2YXIgbyBpbiBuKW4uaGFzT3duUHJvcGVydHkobykmJlwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJmMoXCJmdW5jdGlvblwiPT10eXBlb2YgbltvXSxcIiVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gUmVhY3QuUHJvcFR5cGVzLlwiLGUuZGlzcGxheU5hbWV8fFwiUmVhY3RDbGFzc1wiLHNbcl0sbyl9ZnVuY3Rpb24gZihlLHQpe3ZhciBuPV8uaGFzT3duUHJvcGVydHkodCk/X1t0XTpudWxsO3guaGFzT3duUHJvcGVydHkodCkmJnUoXCJPVkVSUklERV9CQVNFXCI9PT1uLFwiUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIG92ZXJyaWRlIGAlc2AgZnJvbSB5b3VyIGNsYXNzIHNwZWNpZmljYXRpb24uIEVuc3VyZSB0aGF0IHlvdXIgbWV0aG9kIG5hbWVzIGRvIG5vdCBvdmVybGFwIHdpdGggUmVhY3QgbWV0aG9kcy5cIix0KSxlJiZ1KFwiREVGSU5FX01BTllcIj09PW58fFwiREVGSU5FX01BTllfTUVSR0VEXCI9PT1uLFwiUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgdG8gYSBtaXhpbi5cIix0KX1mdW5jdGlvbiBkKGUscil7aWYocil7dShcImZ1bmN0aW9uXCIhPXR5cGVvZiByLFwiUmVhY3RDbGFzczogWW91J3JlIGF0dGVtcHRpbmcgdG8gdXNlIGEgY29tcG9uZW50IGNsYXNzIG9yIGZ1bmN0aW9uIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuXCIpLHUoIW4ociksXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byB1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC5cIik7dmFyIG89ZS5wcm90b3R5cGUsaT1vLl9fcmVhY3RBdXRvQmluZFBhaXJzO3IuaGFzT3duUHJvcGVydHkobCkmJk8ubWl4aW5zKGUsci5taXhpbnMpO2Zvcih2YXIgYSBpbiByKWlmKHIuaGFzT3duUHJvcGVydHkoYSkmJmEhPT1sKXt2YXIgcz1yW2FdLHA9by5oYXNPd25Qcm9wZXJ0eShhKTtpZihmKHAsYSksTy5oYXNPd25Qcm9wZXJ0eShhKSlPW2FdKGUscyk7ZWxzZXt2YXIgZD1fLmhhc093blByb3BlcnR5KGEpLHk9XCJmdW5jdGlvblwiPT10eXBlb2Ygcyx2PXkmJiFkJiYhcCYmci5hdXRvYmluZCE9PSExO2lmKHYpaS5wdXNoKGEscyksb1thXT1zO2Vsc2UgaWYocCl7dmFyIGc9X1thXTt1KGQmJihcIkRFRklORV9NQU5ZX01FUkdFRFwiPT09Z3x8XCJERUZJTkVfTUFOWVwiPT09ZyksXCJSZWFjdENsYXNzOiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgd2hlbiBtaXhpbmcgaW4gY29tcG9uZW50IHNwZWNzLlwiLGcsYSksXCJERUZJTkVfTUFOWV9NRVJHRURcIj09PWc/b1thXT1tKG9bYV0scyk6XCJERUZJTkVfTUFOWVwiPT09ZyYmKG9bYV09aChvW2FdLHMpKX1lbHNlIG9bYV09cyxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBzJiZyLmRpc3BsYXlOYW1lJiYob1thXS5kaXNwbGF5TmFtZT1yLmRpc3BsYXlOYW1lK1wiX1wiK2EpfX19ZWxzZSBpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXt2YXIgYj10eXBlb2YgcixFPVwib2JqZWN0XCI9PT1iJiZudWxsIT09cjtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZjKEUsXCIlczogWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5jbHVkZSBhIG1peGluIHRoYXQgaXMgZWl0aGVyIG51bGwgb3Igbm90IGFuIG9iamVjdC4gQ2hlY2sgdGhlIG1peGlucyBpbmNsdWRlZCBieSB0aGUgY29tcG9uZW50LCBhcyB3ZWxsIGFzIGFueSBtaXhpbnMgdGhleSBpbmNsdWRlIHRoZW1zZWx2ZXMuIEV4cGVjdGVkIG9iamVjdCBidXQgZ290ICVzLlwiLGUuZGlzcGxheU5hbWV8fFwiUmVhY3RDbGFzc1wiLG51bGw9PT1yP251bGw6Yil9fWZ1bmN0aW9uIHkoZSx0KXtpZih0KWZvcih2YXIgbiBpbiB0KXt2YXIgcj10W25dO2lmKHQuaGFzT3duUHJvcGVydHkobikpe3ZhciBvPW4gaW4gTzt1KCFvLCdSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lIGEgcmVzZXJ2ZWQgcHJvcGVydHksIGAlc2AsIHRoYXQgc2hvdWxkblxcJ3QgYmUgb24gdGhlIFwic3RhdGljc1wiIGtleS4gRGVmaW5lIGl0IGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IGluc3RlYWQ7IGl0IHdpbGwgc3RpbGwgYmUgYWNjZXNzaWJsZSBvbiB0aGUgY29uc3RydWN0b3IuJyxuKTt2YXIgaT1uIGluIGU7dSghaSxcIlJlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlIHRvIGEgbWl4aW4uXCIsbiksZVtuXT1yfX19ZnVuY3Rpb24gdihlLHQpe3UoZSYmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwib2JqZWN0XCI9PXR5cGVvZiB0LFwibWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiBDYW5ub3QgbWVyZ2Ugbm9uLW9iamVjdHMuXCIpO2Zvcih2YXIgbiBpbiB0KXQuaGFzT3duUHJvcGVydHkobikmJih1KHZvaWQgMD09PWVbbl0sXCJtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6IFRyaWVkIHRvIG1lcmdlIHR3byBvYmplY3RzIHdpdGggdGhlIHNhbWUga2V5OiBgJXNgLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgdG8gYSBtaXhpbjsgaW4gcGFydGljdWxhciwgdGhpcyBtYXkgYmUgY2F1c2VkIGJ5IHR3byBnZXRJbml0aWFsU3RhdGUoKSBvciBnZXREZWZhdWx0UHJvcHMoKSBtZXRob2RzIHJldHVybmluZyBvYmplY3RzIHdpdGggY2xhc2hpbmcga2V5cy5cIixuKSxlW25dPXRbbl0pO3JldHVybiBlfWZ1bmN0aW9uIG0oZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxyPXQuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKG51bGw9PW4pcmV0dXJuIHI7aWYobnVsbD09cilyZXR1cm4gbjt2YXIgbz17fTtyZXR1cm4gdihvLG4pLHYobyxyKSxvfX1mdW5jdGlvbiBoKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIGcoZSxuKXt2YXIgcj1uLmJpbmQoZSk7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7ci5fX3JlYWN0Qm91bmRDb250ZXh0PWUsci5fX3JlYWN0Qm91bmRNZXRob2Q9bixyLl9fcmVhY3RCb3VuZEFyZ3VtZW50cz1udWxsO3ZhciBvPWUuY29uc3RydWN0b3IuZGlzcGxheU5hbWUsaT1yLmJpbmQ7ci5iaW5kPWZ1bmN0aW9uKGEpe2Zvcih2YXIgdT1hcmd1bWVudHMubGVuZ3RoLHM9QXJyYXkodT4xP3UtMTowKSxsPTE7bDx1O2wrKylzW2wtMV09YXJndW1lbnRzW2xdO2lmKGEhPT1lJiZudWxsIT09YSlcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZjKCExLFwiYmluZCgpOiBSZWFjdCBjb21wb25lbnQgbWV0aG9kcyBtYXkgb25seSBiZSBib3VuZCB0byB0aGUgY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXNcIixvKTtlbHNlIGlmKCFzLmxlbmd0aClyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZjKCExLFwiYmluZCgpOiBZb3UgYXJlIGJpbmRpbmcgYSBjb21wb25lbnQgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuIFJlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlIHdheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzXCIsbykscjt2YXIgcD1pLmFwcGx5KHIsYXJndW1lbnRzKTtyZXR1cm4gcC5fX3JlYWN0Qm91bmRDb250ZXh0PWUscC5fX3JlYWN0Qm91bmRNZXRob2Q9bixwLl9fcmVhY3RCb3VuZEFyZ3VtZW50cz1zLHB9fXJldHVybiByfWZ1bmN0aW9uIGIoZSl7Zm9yKHZhciB0PWUuX19yZWFjdEF1dG9CaW5kUGFpcnMsbj0wO248dC5sZW5ndGg7bis9Mil7dmFyIHI9dFtuXSxvPXRbbisxXTtlW3JdPWcoZSxvKX19ZnVuY3Rpb24gRShlKXt2YXIgbj1yKGZ1bmN0aW9uKGUscixpKXtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZjKHRoaXMgaW5zdGFuY2VvZiBuLFwiU29tZXRoaW5nIGlzIGNhbGxpbmcgYSBSZWFjdCBjb21wb25lbnQgZGlyZWN0bHkuIFVzZSBhIGZhY3Rvcnkgb3IgSlNYIGluc3RlYWQuIFNlZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC1sZWdhY3lmYWN0b3J5XCIpLHRoaXMuX19yZWFjdEF1dG9CaW5kUGFpcnMubGVuZ3RoJiZiKHRoaXMpLHRoaXMucHJvcHM9ZSx0aGlzLmNvbnRleHQ9cix0aGlzLnJlZnM9YSx0aGlzLnVwZGF0ZXI9aXx8byx0aGlzLnN0YXRlPW51bGw7dmFyIHM9dGhpcy5nZXRJbml0aWFsU3RhdGU/dGhpcy5nZXRJbml0aWFsU3RhdGUoKTpudWxsO1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJnZvaWQgMD09PXMmJnRoaXMuZ2V0SW5pdGlhbFN0YXRlLl9pc01vY2tGdW5jdGlvbiYmKHM9bnVsbCksdShcIm9iamVjdFwiPT10eXBlb2YgcyYmIUFycmF5LmlzQXJyYXkocyksXCIlcy5nZXRJbml0aWFsU3RhdGUoKTogbXVzdCByZXR1cm4gYW4gb2JqZWN0IG9yIG51bGxcIixuLmRpc3BsYXlOYW1lfHxcIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50XCIpLHRoaXMuc3RhdGU9c30pO24ucHJvdG90eXBlPW5ldyBQLG4ucHJvdG90eXBlLmNvbnN0cnVjdG9yPW4sbi5wcm90b3R5cGUuX19yZWFjdEF1dG9CaW5kUGFpcnM9W10sTi5mb3JFYWNoKGQuYmluZChudWxsLG4pKSxkKG4sRCksZChuLGUpLGQobix3KSxuLmdldERlZmF1bHRQcm9wcyYmKG4uZGVmYXVsdFByb3BzPW4uZ2V0RGVmYXVsdFByb3BzKCkpLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJihuLmdldERlZmF1bHRQcm9wcyYmKG4uZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkPXt9KSxuLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUmJihuLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQ9e30pKSx1KG4ucHJvdG90eXBlLnJlbmRlcixcImNyZWF0ZUNsYXNzKC4uLik6IENsYXNzIHNwZWNpZmljYXRpb24gbXVzdCBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXCIpLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJihjKCFuLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUsXCIlcyBoYXMgYSBtZXRob2QgY2FsbGVkIGNvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/IFRoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyBleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS5cIixlLmRpc3BsYXlOYW1lfHxcIkEgY29tcG9uZW50XCIpLGMoIW4ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMsXCIlcyBoYXMgYSBtZXRob2QgY2FsbGVkIGNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT9cIixlLmRpc3BsYXlOYW1lfHxcIkEgY29tcG9uZW50XCIpKTtmb3IodmFyIGkgaW4gXyluLnByb3RvdHlwZVtpXXx8KG4ucHJvdG90eXBlW2ldPW51bGwpO3JldHVybiBufXZhciBOPVtdLF89e21peGluczpcIkRFRklORV9NQU5ZXCIsc3RhdGljczpcIkRFRklORV9NQU5ZXCIscHJvcFR5cGVzOlwiREVGSU5FX01BTllcIixjb250ZXh0VHlwZXM6XCJERUZJTkVfTUFOWVwiLGNoaWxkQ29udGV4dFR5cGVzOlwiREVGSU5FX01BTllcIixnZXREZWZhdWx0UHJvcHM6XCJERUZJTkVfTUFOWV9NRVJHRURcIixnZXRJbml0aWFsU3RhdGU6XCJERUZJTkVfTUFOWV9NRVJHRURcIixnZXRDaGlsZENvbnRleHQ6XCJERUZJTkVfTUFOWV9NRVJHRURcIixyZW5kZXI6XCJERUZJTkVfT05DRVwiLGNvbXBvbmVudFdpbGxNb3VudDpcIkRFRklORV9NQU5ZXCIsY29tcG9uZW50RGlkTW91bnQ6XCJERUZJTkVfTUFOWVwiLGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6XCJERUZJTkVfTUFOWVwiLHNob3VsZENvbXBvbmVudFVwZGF0ZTpcIkRFRklORV9PTkNFXCIsY29tcG9uZW50V2lsbFVwZGF0ZTpcIkRFRklORV9NQU5ZXCIsY29tcG9uZW50RGlkVXBkYXRlOlwiREVGSU5FX01BTllcIixjb21wb25lbnRXaWxsVW5tb3VudDpcIkRFRklORV9NQU5ZXCIsdXBkYXRlQ29tcG9uZW50OlwiT1ZFUlJJREVfQkFTRVwifSxPPXtkaXNwbGF5TmFtZTpmdW5jdGlvbihlLHQpe2UuZGlzcGxheU5hbWU9dH0sbWl4aW5zOmZ1bmN0aW9uKGUsdCl7aWYodClmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKylkKGUsdFtuXSl9LGNoaWxkQ29udGV4dFR5cGVzOmZ1bmN0aW9uKGUsbil7XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmcChlLG4sXCJjaGlsZENvbnRleHRcIiksZS5jaGlsZENvbnRleHRUeXBlcz1pKHt9LGUuY2hpbGRDb250ZXh0VHlwZXMsbil9LGNvbnRleHRUeXBlczpmdW5jdGlvbihlLG4pe1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJnAoZSxuLFwiY29udGV4dFwiKSxlLmNvbnRleHRUeXBlcz1pKHt9LGUuY29udGV4dFR5cGVzLG4pfSxnZXREZWZhdWx0UHJvcHM6ZnVuY3Rpb24oZSx0KXtlLmdldERlZmF1bHRQcm9wcz9lLmdldERlZmF1bHRQcm9wcz1tKGUuZ2V0RGVmYXVsdFByb3BzLHQpOmUuZ2V0RGVmYXVsdFByb3BzPXR9LHByb3BUeXBlczpmdW5jdGlvbihlLG4pe1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJnAoZSxuLFwicHJvcFwiKSxlLnByb3BUeXBlcz1pKHt9LGUucHJvcFR5cGVzLG4pfSxzdGF0aWNzOmZ1bmN0aW9uKGUsdCl7eShlLHQpfSxhdXRvYmluZDpmdW5jdGlvbigpe319LEQ9e2NvbXBvbmVudERpZE1vdW50OmZ1bmN0aW9uKCl7dGhpcy5fX2lzTW91bnRlZD0hMH19LHc9e2NvbXBvbmVudFdpbGxVbm1vdW50OmZ1bmN0aW9uKCl7dGhpcy5fX2lzTW91bnRlZD0hMX19LHg9e3JlcGxhY2VTdGF0ZTpmdW5jdGlvbihlLHQpe3RoaXMudXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKHRoaXMsZSx0KX0saXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmKGModGhpcy5fX2RpZFdhcm5Jc01vdW50ZWQsXCIlczogaXNNb3VudGVkIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCBzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluIGNvbXBvbmVudFdpbGxVbm1vdW50IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLlwiLHRoaXMuY29uc3RydWN0b3ImJnRoaXMuY29uc3RydWN0b3IuZGlzcGxheU5hbWV8fHRoaXMubmFtZXx8XCJDb21wb25lbnRcIiksdGhpcy5fX2RpZFdhcm5Jc01vdW50ZWQ9ITApLCEhdGhpcy5fX2lzTW91bnRlZH19LFA9ZnVuY3Rpb24oKXt9O3JldHVybiBpKFAucHJvdG90eXBlLGUucHJvdG90eXBlLHgpLEV9dmFyIGk9big2KSxhPW4oMTIpLHU9bigyKTtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXZhciBjPW4oMyk7dmFyIHMsbD1cIm1peGluc1wiO3M9XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj97cHJvcDpcInByb3BcIixjb250ZXh0OlwiY29udGV4dFwiLGNoaWxkQ29udGV4dDpcImNoaWxkIGNvbnRleHRcIn06e30sZS5leHBvcnRzPW99KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlLG4scixjLHMpe2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpZm9yKHZhciBsIGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eShsKSl7dmFyIHA7dHJ5e28oXCJmdW5jdGlvblwiPT10eXBlb2YgZVtsXSxcIiVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gUmVhY3QuUHJvcFR5cGVzLlwiLGN8fFwiUmVhY3QgY2xhc3NcIixyLGwpLHA9ZVtsXShuLGwsYyxyLG51bGwsYSl9Y2F0Y2goZSl7cD1lfWlmKGkoIXB8fHAgaW5zdGFuY2VvZiBFcnJvcixcIiVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyIGZ1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiBZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciBjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kIHNoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS5cIixjfHxcIlJlYWN0IGNsYXNzXCIscixsLHR5cGVvZiBwKSxwIGluc3RhbmNlb2YgRXJyb3ImJiEocC5tZXNzYWdlIGluIHUpKXt1W3AubWVzc2FnZV09ITA7dmFyIGY9cz9zKCk6XCJcIjtpKCExLFwiRmFpbGVkICVzIHR5cGU6ICVzJXNcIixyLHAubWVzc2FnZSxudWxsIT1mP2Y6XCJcIil9fX1pZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXZhciBvPW4oMiksaT1uKDMpLGE9bigxMyksdT17fTtlLmV4cG9ydHM9cn0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMjIpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD0hMTtyZXR1cm4gcihlLHQpfX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDkpLG89bigyKSxpPW4oMyksYT1uKDEzKSx1PW4oMjApO2UuZXhwb3J0cz1mdW5jdGlvbihlLG4pe2Z1bmN0aW9uIGMoZSl7dmFyIHQ9ZSYmKGsmJmVba118fGVbSV0pO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIHR9ZnVuY3Rpb24gcyhlLHQpe3JldHVybiBlPT09dD8wIT09ZXx8MS9lPT09MS90OmUhPT1lJiZ0IT09dH1mdW5jdGlvbiBsKGUpe3RoaXMubWVzc2FnZT1lLHRoaXMuc3RhY2s9XCJcIn1mdW5jdGlvbiBwKGUpe2Z1bmN0aW9uIHIocixzLHAsZixkLHksdil7aWYoZj1mfHxqLHk9eXx8cCx2IT09YSlpZihuKW8oITEsXCJDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiBVc2UgYFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpYCB0byBjYWxsIHRoZW0uIFJlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXNcIik7ZWxzZSBpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgY29uc29sZSl7dmFyIG09ZitcIjpcIitwOyF1W21dJiZjPDMmJihpKCExLFwiWW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGEgUmVhY3QuUHJvcFR5cGVzIHZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIHRoZSBgJXNgIHByb3Agb24gYCVzYC4gVGhpcyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiBZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzIGxpYnJhcnkuIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmctZG9udC1jYWxsLXByb3B0eXBlcyBmb3IgZGV0YWlscy5cIix5LGYpLHVbbV09ITAsYysrKX1yZXR1cm4gbnVsbD09c1twXT9yP25ldyBsKG51bGw9PT1zW3BdP1wiVGhlIFwiK2QrXCIgYFwiK3krXCJgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBcIisoXCJpbiBgXCIrZitcImAsIGJ1dCBpdHMgdmFsdWUgaXMgYG51bGxgLlwiKTpcIlRoZSBcIitkK1wiIGBcIit5K1wiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gXCIrKFwiYFwiK2YrXCJgLCBidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLlwiKSk6bnVsbDplKHMscCxmLGQseSl9aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil2YXIgdT17fSxjPTA7dmFyIHM9ci5iaW5kKG51bGwsITEpO3JldHVybiBzLmlzUmVxdWlyZWQ9ci5iaW5kKG51bGwsITApLHN9ZnVuY3Rpb24gZihlKXtmdW5jdGlvbiB0KHQsbixyLG8saSxhKXt2YXIgdT10W25dLGM9RCh1KTtpZihjIT09ZSl7dmFyIHM9dyh1KTtyZXR1cm4gbmV3IGwoXCJJbnZhbGlkIFwiK28rXCIgYFwiK2krXCJgIG9mIHR5cGUgXCIrKFwiYFwiK3MrXCJgIHN1cHBsaWVkIHRvIGBcIityK1wiYCwgZXhwZWN0ZWQgXCIpKyhcImBcIitlK1wiYC5cIikpfXJldHVybiBudWxsfXJldHVybiBwKHQpfWZ1bmN0aW9uIGQoKXtyZXR1cm4gcChyLnRoYXRSZXR1cm5zTnVsbCl9ZnVuY3Rpb24geShlKXtmdW5jdGlvbiB0KHQsbixyLG8saSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSlyZXR1cm4gbmV3IGwoXCJQcm9wZXJ0eSBgXCIraStcImAgb2YgY29tcG9uZW50IGBcIityK1wiYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgYXJyYXlPZi5cIik7dmFyIHU9dFtuXTtpZighQXJyYXkuaXNBcnJheSh1KSl7dmFyIGM9RCh1KTtyZXR1cm4gbmV3IGwoXCJJbnZhbGlkIFwiK28rXCIgYFwiK2krXCJgIG9mIHR5cGUgXCIrKFwiYFwiK2MrXCJgIHN1cHBsaWVkIHRvIGBcIityK1wiYCwgZXhwZWN0ZWQgYW4gYXJyYXkuXCIpKX1mb3IodmFyIHM9MDtzPHUubGVuZ3RoO3MrKyl7dmFyIHA9ZSh1LHMscixvLGkrXCJbXCIrcytcIl1cIixhKTtpZihwIGluc3RhbmNlb2YgRXJyb3IpcmV0dXJuIHB9cmV0dXJuIG51bGx9cmV0dXJuIHAodCl9ZnVuY3Rpb24gdigpe2Z1bmN0aW9uIHQodCxuLHIsbyxpKXt2YXIgYT10W25dO2lmKCFlKGEpKXt2YXIgdT1EKGEpO3JldHVybiBuZXcgbChcIkludmFsaWQgXCIrbytcIiBgXCIraStcImAgb2YgdHlwZSBcIisoXCJgXCIrdStcImAgc3VwcGxpZWQgdG8gYFwiK3IrXCJgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuXCIpKX1yZXR1cm4gbnVsbH1yZXR1cm4gcCh0KX1mdW5jdGlvbiBtKGUpe2Z1bmN0aW9uIHQodCxuLHIsbyxpKXtpZighKHRbbl1pbnN0YW5jZW9mIGUpKXt2YXIgYT1lLm5hbWV8fGosdT1QKHRbbl0pO3JldHVybiBuZXcgbChcIkludmFsaWQgXCIrbytcIiBgXCIraStcImAgb2YgdHlwZSBcIisoXCJgXCIrdStcImAgc3VwcGxpZWQgdG8gYFwiK3IrXCJgLCBleHBlY3RlZCBcIikrKFwiaW5zdGFuY2Ugb2YgYFwiK2ErXCJgLlwiKSl9cmV0dXJuIG51bGx9cmV0dXJuIHAodCl9ZnVuY3Rpb24gaChlKXtmdW5jdGlvbiBuKHQsbixyLG8saSl7Zm9yKHZhciBhPXRbbl0sdT0wO3U8ZS5sZW5ndGg7dSsrKWlmKHMoYSxlW3VdKSlyZXR1cm4gbnVsbDt2YXIgYz1KU09OLnN0cmluZ2lmeShlKTtyZXR1cm4gbmV3IGwoXCJJbnZhbGlkIFwiK28rXCIgYFwiK2krXCJgIG9mIHZhbHVlIGBcIithK1wiYCBcIisoXCJzdXBwbGllZCB0byBgXCIrcitcImAsIGV4cGVjdGVkIG9uZSBvZiBcIitjK1wiLlwiKSl9cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/cChuKTooXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9pKCExLFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuXCIpOnZvaWQgMCxyLnRoYXRSZXR1cm5zTnVsbCl9ZnVuY3Rpb24gZyhlKXtmdW5jdGlvbiB0KHQsbixyLG8saSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSlyZXR1cm4gbmV3IGwoXCJQcm9wZXJ0eSBgXCIraStcImAgb2YgY29tcG9uZW50IGBcIityK1wiYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuXCIpO3ZhciB1PXRbbl0sYz1EKHUpO2lmKFwib2JqZWN0XCIhPT1jKXJldHVybiBuZXcgbChcIkludmFsaWQgXCIrbytcIiBgXCIraStcImAgb2YgdHlwZSBcIisoXCJgXCIrYytcImAgc3VwcGxpZWQgdG8gYFwiK3IrXCJgLCBleHBlY3RlZCBhbiBvYmplY3QuXCIpKTtmb3IodmFyIHMgaW4gdSlpZih1Lmhhc093blByb3BlcnR5KHMpKXt2YXIgcD1lKHUscyxyLG8saStcIi5cIitzLGEpO2lmKHAgaW5zdGFuY2VvZiBFcnJvcilyZXR1cm4gcH1yZXR1cm4gbnVsbH1yZXR1cm4gcCh0KX1mdW5jdGlvbiBiKGUpe2Z1bmN0aW9uIG4odCxuLHIsbyxpKXtmb3IodmFyIHU9MDt1PGUubGVuZ3RoO3UrKyl7dmFyIGM9ZVt1XTtpZihudWxsPT1jKHQsbixyLG8saSxhKSlyZXR1cm4gbnVsbH1yZXR1cm4gbmV3IGwoXCJJbnZhbGlkIFwiK28rXCIgYFwiK2krXCJgIHN1cHBsaWVkIHRvIFwiKyhcImBcIityK1wiYC5cIikpfWlmKCFBcnJheS5pc0FycmF5KGUpKXJldHVyblwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/aSghMSxcIkludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLCBleHBlY3RlZCBhbiBpbnN0YW5jZSBvZiBhcnJheS5cIik6dm9pZCAwLHIudGhhdFJldHVybnNOdWxsO2Zvcih2YXIgbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgdT1lW29dO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHUpcmV0dXJuIGkoITEsXCJJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWQgdG8gb25lT2ZUeXBlLiBFeHBlY3RlZCBhbiBhcnJheSBvZiBjaGVjayBmdW5jdGlvbnMsIGJ1dCByZWNlaXZlZCAlcyBhdCBpbmRleCAlcy5cIix4KHUpLG8pLHIudGhhdFJldHVybnNOdWxsfXJldHVybiBwKG4pfWZ1bmN0aW9uIEUoKXtmdW5jdGlvbiBlKGUsdCxuLHIsbyl7cmV0dXJuIF8oZVt0XSk/bnVsbDpuZXcgbChcIkludmFsaWQgXCIrcitcIiBgXCIrbytcImAgc3VwcGxpZWQgdG8gXCIrKFwiYFwiK24rXCJgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS5cIikpfXJldHVybiBwKGUpfWZ1bmN0aW9uIE4oZSl7ZnVuY3Rpb24gdCh0LG4scixvLGkpe3ZhciB1PXRbbl0sYz1EKHUpO2lmKFwib2JqZWN0XCIhPT1jKXJldHVybiBuZXcgbChcIkludmFsaWQgXCIrbytcIiBgXCIraStcImAgb2YgdHlwZSBgXCIrYytcImAgXCIrKFwic3VwcGxpZWQgdG8gYFwiK3IrXCJgLCBleHBlY3RlZCBgb2JqZWN0YC5cIikpO2Zvcih2YXIgcyBpbiBlKXt2YXIgcD1lW3NdO2lmKHApe3ZhciBmPXAodSxzLHIsbyxpK1wiLlwiK3MsYSk7aWYoZilyZXR1cm4gZn19cmV0dXJuIG51bGx9cmV0dXJuIHAodCl9ZnVuY3Rpb24gXyh0KXtzd2l0Y2godHlwZW9mIHQpe2Nhc2VcIm51bWJlclwiOmNhc2VcInN0cmluZ1wiOmNhc2VcInVuZGVmaW5lZFwiOnJldHVybiEwO2Nhc2VcImJvb2xlYW5cIjpyZXR1cm4hdDtjYXNlXCJvYmplY3RcIjppZihBcnJheS5pc0FycmF5KHQpKXJldHVybiB0LmV2ZXJ5KF8pO2lmKG51bGw9PT10fHxlKHQpKXJldHVybiEwO3ZhciBuPWModCk7aWYoIW4pcmV0dXJuITE7dmFyIHIsbz1uLmNhbGwodCk7aWYobiE9PXQuZW50cmllcyl7Zm9yKDshKHI9by5uZXh0KCkpLmRvbmU7KWlmKCFfKHIudmFsdWUpKXJldHVybiExfWVsc2UgZm9yKDshKHI9by5uZXh0KCkpLmRvbmU7KXt2YXIgaT1yLnZhbHVlO2lmKGkmJiFfKGlbMV0pKXJldHVybiExfXJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIE8oZSx0KXtyZXR1cm5cInN5bWJvbFwiPT09ZXx8KFwiU3ltYm9sXCI9PT10W1wiQEB0b1N0cmluZ1RhZ1wiXXx8XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0IGluc3RhbmNlb2YgU3ltYm9sKX1mdW5jdGlvbiBEKGUpe3ZhciB0PXR5cGVvZiBlO3JldHVybiBBcnJheS5pc0FycmF5KGUpP1wiYXJyYXlcIjplIGluc3RhbmNlb2YgUmVnRXhwP1wib2JqZWN0XCI6Tyh0LGUpP1wic3ltYm9sXCI6dH1mdW5jdGlvbiB3KGUpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm5cIlwiK2U7dmFyIHQ9RChlKTtpZihcIm9iamVjdFwiPT09dCl7aWYoZSBpbnN0YW5jZW9mIERhdGUpcmV0dXJuXCJkYXRlXCI7aWYoZSBpbnN0YW5jZW9mIFJlZ0V4cClyZXR1cm5cInJlZ2V4cFwifXJldHVybiB0fWZ1bmN0aW9uIHgoZSl7dmFyIHQ9dyhlKTtzd2l0Y2godCl7Y2FzZVwiYXJyYXlcIjpjYXNlXCJvYmplY3RcIjpyZXR1cm5cImFuIFwiK3Q7Y2FzZVwiYm9vbGVhblwiOmNhc2VcImRhdGVcIjpjYXNlXCJyZWdleHBcIjpyZXR1cm5cImEgXCIrdDtkZWZhdWx0OnJldHVybiB0fX1mdW5jdGlvbiBQKGUpe3JldHVybiBlLmNvbnN0cnVjdG9yJiZlLmNvbnN0cnVjdG9yLm5hbWU/ZS5jb25zdHJ1Y3Rvci5uYW1lOmp9dmFyIGs9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3IsST1cIkBAaXRlcmF0b3JcIixqPVwiPDxhbm9ueW1vdXM+PlwiLFI9e2FycmF5OmYoXCJhcnJheVwiKSxib29sOmYoXCJib29sZWFuXCIpLGZ1bmM6ZihcImZ1bmN0aW9uXCIpLG51bWJlcjpmKFwibnVtYmVyXCIpLG9iamVjdDpmKFwib2JqZWN0XCIpLHN0cmluZzpmKFwic3RyaW5nXCIpLHN5bWJvbDpmKFwic3ltYm9sXCIpLGFueTpkKCksYXJyYXlPZjp5LGVsZW1lbnQ6digpLGluc3RhbmNlT2Y6bSxub2RlOkUoKSxvYmplY3RPZjpnLG9uZU9mOmgsb25lT2ZUeXBlOmIsc2hhcGU6Tn07cmV0dXJuIGwucHJvdG90eXBlPUVycm9yLnByb3RvdHlwZSxSLmNoZWNrUHJvcFR5cGVzPXUsUi5Qcm9wVHlwZXM9UixSfX0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3ZhciB0PS9bPTpdL2csbj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn0scj0oXCJcIitlKS5yZXBsYWNlKHQsZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV19KTtyZXR1cm5cIiRcIityfWZ1bmN0aW9uIHIoZSl7dmFyIHQ9Lyg9MHw9MikvZyxuPXtcIj0wXCI6XCI9XCIsXCI9MlwiOlwiOlwifSxyPVwiLlwiPT09ZVswXSYmXCIkXCI9PT1lWzFdP2Uuc3Vic3RyaW5nKDIpOmUuc3Vic3RyaW5nKDEpO3JldHVybihcIlwiK3IpLnJlcGxhY2UodCxmdW5jdGlvbihlKXtyZXR1cm4gbltlXX0pfXZhciBvPXtlc2NhcGU6bix1bmVzY2FwZTpyfTtlLmV4cG9ydHM9b30sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDUpLG89bigyKSxpPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYodC5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgbj10Lmluc3RhbmNlUG9vbC5wb3AoKTtyZXR1cm4gdC5jYWxsKG4sZSksbn1yZXR1cm4gbmV3IHQoZSl9LGE9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2lmKG4uaW5zdGFuY2VQb29sLmxlbmd0aCl7dmFyIHI9bi5pbnN0YW5jZVBvb2wucG9wKCk7cmV0dXJuIG4uY2FsbChyLGUsdCkscn1yZXR1cm4gbmV3IG4oZSx0KX0sdT1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcztpZihyLmluc3RhbmNlUG9vbC5sZW5ndGgpe3ZhciBvPXIuaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiByLmNhbGwobyxlLHQsbiksb31yZXR1cm4gbmV3IHIoZSx0LG4pfSxjPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPXRoaXM7aWYoby5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgaT1vLmluc3RhbmNlUG9vbC5wb3AoKTtyZXR1cm4gby5jYWxsKGksZSx0LG4sciksaX1yZXR1cm4gbmV3IG8oZSx0LG4scil9LHM9ZnVuY3Rpb24oZSl7dmFyIG49dGhpcztlIGluc3RhbmNlb2Ygbj92b2lkIDA6XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9vKCExLFwiVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS5cIik6cihcIjI1XCIpLGUuZGVzdHJ1Y3RvcigpLG4uaW5zdGFuY2VQb29sLmxlbmd0aDxuLnBvb2xTaXplJiZuLmluc3RhbmNlUG9vbC5wdXNoKGUpfSxsPTEwLHA9aSxmPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZTtyZXR1cm4gbi5pbnN0YW5jZVBvb2w9W10sbi5nZXRQb29sZWQ9dHx8cCxuLnBvb2xTaXplfHwobi5wb29sU2l6ZT1sKSxuLnJlbGVhc2U9cyxufSxkPXthZGRQb29saW5nVG86ZixvbmVBcmd1bWVudFBvb2xlcjppLHR3b0FyZ3VtZW50UG9vbGVyOmEsdGhyZWVBcmd1bWVudFBvb2xlcjp1LGZvdXJBcmd1bWVudFBvb2xlcjpjfTtlLmV4cG9ydHM9ZH0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDYpLG89bigxNCksaT1uKDI2KSxhPW4oMjcpLHU9big0KSxjPW4oMjkpLHM9bigzMSksbD1uKDMzKSxwPW4oMzQpLGY9dS5jcmVhdGVFbGVtZW50LGQ9dS5jcmVhdGVGYWN0b3J5LHk9dS5jbG9uZUVsZW1lbnQ7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7dmFyIHY9bigxMSksbT1uKDgpLGg9bigxNiksZz0hMTtmPWguY3JlYXRlRWxlbWVudCxkPWguY3JlYXRlRmFjdG9yeSx5PWguY2xvbmVFbGVtZW50fXZhciBiPXIsRT1mdW5jdGlvbihlKXtyZXR1cm4gZX07aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7dmFyIE49ITEsXz0hMTtiPWZ1bmN0aW9uKCl7cmV0dXJuIHYoTixcIlJlYWN0Ll9fc3ByZWFkIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZC4gVXNlIE9iamVjdC5hc3NpZ24gZGlyZWN0bHkgb3IgYW5vdGhlciBoZWxwZXIgZnVuY3Rpb24gd2l0aCBzaW1pbGFyIHNlbWFudGljcy4gWW91IG1heSBiZSBzZWVpbmcgdGhpcyB3YXJuaW5nIGR1ZSB0byB5b3VyIGNvbXBpbGVyLiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcHJlYWQtZGVwcmVjYXRpb24gZm9yIG1vcmUgZGV0YWlscy5cIiksTj0hMCxyLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sRT1mdW5jdGlvbihlKXtyZXR1cm4gdihfLFwiUmVhY3QuY3JlYXRlTWl4aW4gaXMgZGVwcmVjYXRlZCBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLiBJbiBSZWFjdCB2MTYuMCwgaXQgd2lsbCBiZSByZW1vdmVkLiBZb3UgY2FuIHVzZSB0aGlzIG1peGluIGRpcmVjdGx5IGluc3RlYWQuIFNlZSBodHRwczovL2ZiLm1lL2NyZWF0ZW1peGluLXdhcy1uZXZlci1pbXBsZW1lbnRlZCBmb3IgbW9yZSBpbmZvLlwiKSxfPSEwLGV9fXZhciBPPXtDaGlsZHJlbjp7bWFwOmkubWFwLGZvckVhY2g6aS5mb3JFYWNoLGNvdW50OmkuY291bnQsdG9BcnJheTppLnRvQXJyYXksb25seTpwfSxDb21wb25lbnQ6by5Db21wb25lbnQsUHVyZUNvbXBvbmVudDpvLlB1cmVDb21wb25lbnQsY3JlYXRlRWxlbWVudDpmLGNsb25lRWxlbWVudDp5LGlzVmFsaWRFbGVtZW50OnUuaXNWYWxpZEVsZW1lbnQsUHJvcFR5cGVzOmMsY3JlYXRlQ2xhc3M6bCxjcmVhdGVGYWN0b3J5OmQsY3JlYXRlTWl4aW46RSxET006YSx2ZXJzaW9uOnMsX19zcHJlYWQ6Yn07aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7dmFyIEQ9ITE7bSYmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLFwiUHJvcFR5cGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB2KGcsXCJBY2Nlc3NpbmcgUHJvcFR5cGVzIHZpYSB0aGUgbWFpbiBSZWFjdCBwYWNrYWdlIGlzIGRlcHJlY2F0ZWQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gIFJlYWN0IHYxNi4wLiBVc2UgdGhlIGxhdGVzdCBhdmFpbGFibGUgdjE1LiogcHJvcC10eXBlcyBwYWNrYWdlIGZyb20gbnBtIGluc3RlYWQuIEZvciBpbmZvIG9uIHVzYWdlLCBjb21wYXRpYmlsaXR5LCBtaWdyYXRpb24gYW5kIG1vcmUsIHNlZSBodHRwczovL2ZiLm1lL3Byb3AtdHlwZXMtZG9jc1wiKSxnPSEwLGN9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sXCJjcmVhdGVDbGFzc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdihELFwiQWNjZXNzaW5nIGNyZWF0ZUNsYXNzIHZpYSB0aGUgbWFpbiBSZWFjdCBwYWNrYWdlIGlzIGRlcHJlY2F0ZWQsIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUmVhY3QgdjE2LjAuIFVzZSBhIHBsYWluIEphdmFTY3JpcHQgY2xhc3MgaW5zdGVhZC4gSWYgeW91J3JlIG5vdCB5ZXQgcmVhZHkgdG8gbWlncmF0ZSwgY3JlYXRlLXJlYWN0LWNsYXNzIHYxNS4qIGlzIGF2YWlsYWJsZSBvbiBucG0gYXMgYSB0ZW1wb3JhcnksIGRyb3AtaW4gcmVwbGFjZW1lbnQuIEZvciBtb3JlIGluZm8gc2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtY3JlYXRlLWNsYXNzXCIpLEQ9ITAsbH19KSksTy5ET009e307dmFyIHc9ITE7T2JqZWN0LmtleXMoYSkuZm9yRWFjaChmdW5jdGlvbihlKXtPLkRPTVtlXT1mdW5jdGlvbigpe3JldHVybiB3fHwodighMSxcIkFjY2Vzc2luZyBmYWN0b3JpZXMgbGlrZSBSZWFjdC5ET00uJXMgaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYxNi4wKy4gVXNlIHRoZSByZWFjdC1kb20tZmFjdG9yaWVzIHBhY2thZ2UgaW5zdGVhZC4gIFZlcnNpb24gMS4wIHByb3ZpZGVzIGEgZHJvcC1pbiByZXBsYWNlbWVudC4gRm9yIG1vcmUgaW5mbywgc2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtZG9tLWZhY3Rvcmllc1wiLGUpLHc9ITApLGFbZV0uYXBwbHkoYSxhcmd1bWVudHMpfX0pfWUuZXhwb3J0cz1PfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4oXCJcIitlKS5yZXBsYWNlKEUsXCIkJi9cIil9ZnVuY3Rpb24gbyhlLHQpe3RoaXMuZnVuYz1lLHRoaXMuY29udGV4dD10LHRoaXMuY291bnQ9MH1mdW5jdGlvbiBpKGUsdCxuKXt2YXIgcj1lLmZ1bmMsbz1lLmNvbnRleHQ7ci5jYWxsKG8sdCxlLmNvdW50KyspfWZ1bmN0aW9uIGEoZSx0LG4pe2lmKG51bGw9PWUpcmV0dXJuIGU7dmFyIHI9by5nZXRQb29sZWQodCxuKTtoKGUsaSxyKSxvLnJlbGVhc2Uocil9ZnVuY3Rpb24gdShlLHQsbixyKXt0aGlzLnJlc3VsdD1lLHRoaXMua2V5UHJlZml4PXQsdGhpcy5mdW5jPW4sdGhpcy5jb250ZXh0PXIsdGhpcy5jb3VudD0wfWZ1bmN0aW9uIGMoZSx0LG4pe3ZhciBvPWUucmVzdWx0LGk9ZS5rZXlQcmVmaXgsYT1lLmZ1bmMsdT1lLmNvbnRleHQsYz1hLmNhbGwodSx0LGUuY291bnQrKyk7QXJyYXkuaXNBcnJheShjKT9zKGMsbyxuLG0udGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YyYmKHYuaXNWYWxpZEVsZW1lbnQoYykmJihjPXYuY2xvbmVBbmRSZXBsYWNlS2V5KGMsaSsoIWMua2V5fHx0JiZ0LmtleT09PWMua2V5P1wiXCI6cihjLmtleSkrXCIvXCIpK24pKSxvLnB1c2goYykpfWZ1bmN0aW9uIHMoZSx0LG4sbyxpKXt2YXIgYT1cIlwiO251bGwhPW4mJihhPXIobikrXCIvXCIpO3ZhciBzPXUuZ2V0UG9vbGVkKHQsYSxvLGkpO2goZSxjLHMpLHUucmVsZWFzZShzKX1mdW5jdGlvbiBsKGUsdCxuKXtpZihudWxsPT1lKXJldHVybiBlO3ZhciByPVtdO3JldHVybiBzKGUscixudWxsLHQsbikscn1mdW5jdGlvbiBwKGUsdCxuKXtyZXR1cm4gbnVsbH1mdW5jdGlvbiBmKGUsdCl7cmV0dXJuIGgoZSxwLG51bGwpfWZ1bmN0aW9uIGQoZSl7dmFyIHQ9W107cmV0dXJuIHMoZSx0LG51bGwsbS50aGF0UmV0dXJuc0FyZ3VtZW50KSx0fXZhciB5PW4oMjQpLHY9big0KSxtPW4oOSksaD1uKDM1KSxnPXkudHdvQXJndW1lbnRQb29sZXIsYj15LmZvdXJBcmd1bWVudFBvb2xlcixFPS9cXC8rL2c7by5wcm90b3R5cGUuZGVzdHJ1Y3Rvcj1mdW5jdGlvbigpe3RoaXMuZnVuYz1udWxsLHRoaXMuY29udGV4dD1udWxsLHRoaXMuY291bnQ9MH0seS5hZGRQb29saW5nVG8obyxnKSx1LnByb3RvdHlwZS5kZXN0cnVjdG9yPWZ1bmN0aW9uKCl7dGhpcy5yZXN1bHQ9bnVsbCx0aGlzLmtleVByZWZpeD1udWxsLHRoaXMuZnVuYz1udWxsLHRoaXMuY29udGV4dD1udWxsLHRoaXMuY291bnQ9MH0seS5hZGRQb29saW5nVG8odSxiKTt2YXIgTj17Zm9yRWFjaDphLG1hcDpsLG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWw6cyxjb3VudDpmLHRvQXJyYXk6ZH07ZS5leHBvcnRzPU59LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9big0KSxvPXIuY3JlYXRlRmFjdG9yeTtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXtcbnZhciBpPW4oMTYpO289aS5jcmVhdGVGYWN0b3J5fXZhciBhPXthOm8oXCJhXCIpLGFiYnI6byhcImFiYnJcIiksYWRkcmVzczpvKFwiYWRkcmVzc1wiKSxhcmVhOm8oXCJhcmVhXCIpLGFydGljbGU6byhcImFydGljbGVcIiksYXNpZGU6byhcImFzaWRlXCIpLGF1ZGlvOm8oXCJhdWRpb1wiKSxiOm8oXCJiXCIpLGJhc2U6byhcImJhc2VcIiksYmRpOm8oXCJiZGlcIiksYmRvOm8oXCJiZG9cIiksYmlnOm8oXCJiaWdcIiksYmxvY2txdW90ZTpvKFwiYmxvY2txdW90ZVwiKSxib2R5Om8oXCJib2R5XCIpLGJyOm8oXCJiclwiKSxidXR0b246byhcImJ1dHRvblwiKSxjYW52YXM6byhcImNhbnZhc1wiKSxjYXB0aW9uOm8oXCJjYXB0aW9uXCIpLGNpdGU6byhcImNpdGVcIiksY29kZTpvKFwiY29kZVwiKSxjb2w6byhcImNvbFwiKSxjb2xncm91cDpvKFwiY29sZ3JvdXBcIiksZGF0YTpvKFwiZGF0YVwiKSxkYXRhbGlzdDpvKFwiZGF0YWxpc3RcIiksZGQ6byhcImRkXCIpLGRlbDpvKFwiZGVsXCIpLGRldGFpbHM6byhcImRldGFpbHNcIiksZGZuOm8oXCJkZm5cIiksZGlhbG9nOm8oXCJkaWFsb2dcIiksZGl2Om8oXCJkaXZcIiksZGw6byhcImRsXCIpLGR0Om8oXCJkdFwiKSxlbTpvKFwiZW1cIiksZW1iZWQ6byhcImVtYmVkXCIpLGZpZWxkc2V0Om8oXCJmaWVsZHNldFwiKSxmaWdjYXB0aW9uOm8oXCJmaWdjYXB0aW9uXCIpLGZpZ3VyZTpvKFwiZmlndXJlXCIpLGZvb3RlcjpvKFwiZm9vdGVyXCIpLGZvcm06byhcImZvcm1cIiksaDE6byhcImgxXCIpLGgyOm8oXCJoMlwiKSxoMzpvKFwiaDNcIiksaDQ6byhcImg0XCIpLGg1Om8oXCJoNVwiKSxoNjpvKFwiaDZcIiksaGVhZDpvKFwiaGVhZFwiKSxoZWFkZXI6byhcImhlYWRlclwiKSxoZ3JvdXA6byhcImhncm91cFwiKSxocjpvKFwiaHJcIiksaHRtbDpvKFwiaHRtbFwiKSxpOm8oXCJpXCIpLGlmcmFtZTpvKFwiaWZyYW1lXCIpLGltZzpvKFwiaW1nXCIpLGlucHV0Om8oXCJpbnB1dFwiKSxpbnM6byhcImluc1wiKSxrYmQ6byhcImtiZFwiKSxrZXlnZW46byhcImtleWdlblwiKSxsYWJlbDpvKFwibGFiZWxcIiksbGVnZW5kOm8oXCJsZWdlbmRcIiksbGk6byhcImxpXCIpLGxpbms6byhcImxpbmtcIiksbWFpbjpvKFwibWFpblwiKSxtYXA6byhcIm1hcFwiKSxtYXJrOm8oXCJtYXJrXCIpLG1lbnU6byhcIm1lbnVcIiksbWVudWl0ZW06byhcIm1lbnVpdGVtXCIpLG1ldGE6byhcIm1ldGFcIiksbWV0ZXI6byhcIm1ldGVyXCIpLG5hdjpvKFwibmF2XCIpLG5vc2NyaXB0Om8oXCJub3NjcmlwdFwiKSxvYmplY3Q6byhcIm9iamVjdFwiKSxvbDpvKFwib2xcIiksb3B0Z3JvdXA6byhcIm9wdGdyb3VwXCIpLG9wdGlvbjpvKFwib3B0aW9uXCIpLG91dHB1dDpvKFwib3V0cHV0XCIpLHA6byhcInBcIikscGFyYW06byhcInBhcmFtXCIpLHBpY3R1cmU6byhcInBpY3R1cmVcIikscHJlOm8oXCJwcmVcIikscHJvZ3Jlc3M6byhcInByb2dyZXNzXCIpLHE6byhcInFcIikscnA6byhcInJwXCIpLHJ0Om8oXCJydFwiKSxydWJ5Om8oXCJydWJ5XCIpLHM6byhcInNcIiksc2FtcDpvKFwic2FtcFwiKSxzY3JpcHQ6byhcInNjcmlwdFwiKSxzZWN0aW9uOm8oXCJzZWN0aW9uXCIpLHNlbGVjdDpvKFwic2VsZWN0XCIpLHNtYWxsOm8oXCJzbWFsbFwiKSxzb3VyY2U6byhcInNvdXJjZVwiKSxzcGFuOm8oXCJzcGFuXCIpLHN0cm9uZzpvKFwic3Ryb25nXCIpLHN0eWxlOm8oXCJzdHlsZVwiKSxzdWI6byhcInN1YlwiKSxzdW1tYXJ5Om8oXCJzdW1tYXJ5XCIpLHN1cDpvKFwic3VwXCIpLHRhYmxlOm8oXCJ0YWJsZVwiKSx0Ym9keTpvKFwidGJvZHlcIiksdGQ6byhcInRkXCIpLHRleHRhcmVhOm8oXCJ0ZXh0YXJlYVwiKSx0Zm9vdDpvKFwidGZvb3RcIiksdGg6byhcInRoXCIpLHRoZWFkOm8oXCJ0aGVhZFwiKSx0aW1lOm8oXCJ0aW1lXCIpLHRpdGxlOm8oXCJ0aXRsZVwiKSx0cjpvKFwidHJcIiksdHJhY2s6byhcInRyYWNrXCIpLHU6byhcInVcIiksdWw6byhcInVsXCIpLHZhcjpvKFwidmFyXCIpLHZpZGVvOm8oXCJ2aWRlb1wiKSx3YnI6byhcIndiclwiKSxjaXJjbGU6byhcImNpcmNsZVwiKSxjbGlwUGF0aDpvKFwiY2xpcFBhdGhcIiksZGVmczpvKFwiZGVmc1wiKSxlbGxpcHNlOm8oXCJlbGxpcHNlXCIpLGc6byhcImdcIiksaW1hZ2U6byhcImltYWdlXCIpLGxpbmU6byhcImxpbmVcIiksbGluZWFyR3JhZGllbnQ6byhcImxpbmVhckdyYWRpZW50XCIpLG1hc2s6byhcIm1hc2tcIikscGF0aDpvKFwicGF0aFwiKSxwYXR0ZXJuOm8oXCJwYXR0ZXJuXCIpLHBvbHlnb246byhcInBvbHlnb25cIikscG9seWxpbmU6byhcInBvbHlsaW5lXCIpLHJhZGlhbEdyYWRpZW50Om8oXCJyYWRpYWxHcmFkaWVudFwiKSxyZWN0Om8oXCJyZWN0XCIpLHN0b3A6byhcInN0b3BcIiksc3ZnOm8oXCJzdmdcIiksdGV4dDpvKFwidGV4dFwiKSx0c3BhbjpvKFwidHNwYW5cIil9O2UuZXhwb3J0cz1hfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciBuPXt9O1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJihuPXtwcm9wOlwicHJvcFwiLGNvbnRleHQ6XCJjb250ZXh0XCIsY2hpbGRDb250ZXh0OlwiY2hpbGQgY29udGV4dFwifSksZS5leHBvcnRzPW59KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDQpLG89ci5pc1ZhbGlkRWxlbWVudCxpPW4oMjEpO2UuZXhwb3J0cz1pKG8pfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPVwiU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRURcIjtlLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9XCIxNS42LjFcIn0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUscixwLGYsZCx5KXtmb3IodmFyIHYgaW4gZSlpZihlLmhhc093blByb3BlcnR5KHYpKXt2YXIgbTt0cnl7XCJmdW5jdGlvblwiIT10eXBlb2YgZVt2XT9cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2MoITEsXCIlczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy5cIixmfHxcIlJlYWN0IGNsYXNzXCIsYVtwXSx2KTppKFwiODRcIixmfHxcIlJlYWN0IGNsYXNzXCIsYVtwXSx2KTp2b2lkIDAsbT1lW3ZdKHIsdixmLHAsbnVsbCx1KX1jYXRjaChlKXttPWV9aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9zKCFtfHxtIGluc3RhbmNlb2YgRXJyb3IsXCIlczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciBmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCBzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuXCIsZnx8XCJSZWFjdCBjbGFzc1wiLGFbcF0sdix0eXBlb2YgbSk6dm9pZCAwLG0gaW5zdGFuY2VvZiBFcnJvciYmIShtLm1lc3NhZ2UgaW4gbCkpe2xbbS5tZXNzYWdlXT0hMDt2YXIgaD1cIlwiO1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJihvfHwobz1uKDEwKSksbnVsbCE9PXk/aD1vLmdldFN0YWNrQWRkZW5kdW1CeUlEKHkpOm51bGwhPT1kJiYoaD1vLmdldEN1cnJlbnRTdGFja0FkZGVuZHVtKGQpKSksXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9zKCExLFwiRmFpbGVkICVzIHR5cGU6ICVzJXNcIixwLG0ubWVzc2FnZSxoKTp2b2lkIDB9fX12YXIgbyxpPW4oNSksYT1uKDI4KSx1PW4oMzApLGM9bigyKSxzPW4oMyk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQmJnQuZW52JiZcInRlc3RcIj09PXQuZW52Lk5PREVfRU5WJiYobz1uKDEwKSk7dmFyIGw9e307ZS5leHBvcnRzPXJ9KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDE0KSxvPXIuQ29tcG9uZW50LGk9big0KSxhPWkuaXNWYWxpZEVsZW1lbnQsdT1uKDE3KSxjPW4oMTkpO2UuZXhwb3J0cz1jKG8sYSx1KX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBpLmlzVmFsaWRFbGVtZW50KGUpP3ZvaWQgMDpcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2EoITEsXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik6byhcIjE0M1wiKSxlfXZhciBvPW4oNSksaT1uKDQpLGE9bigyKTtlLmV4cG9ydHM9cn0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUsdCl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT1lLmtleT9wLmVzY2FwZShlLmtleSk6dC50b1N0cmluZygzNil9ZnVuY3Rpb24gbyhlLG4saSxtKXt2YXIgaD10eXBlb2YgZTtpZihcInVuZGVmaW5lZFwiIT09aCYmXCJib29sZWFuXCIhPT1ofHwoZT1udWxsKSxudWxsPT09ZXx8XCJzdHJpbmdcIj09PWh8fFwibnVtYmVyXCI9PT1ofHxcIm9iamVjdFwiPT09aCYmZS4kJHR5cGVvZj09PWMpcmV0dXJuIGkobSxlLFwiXCI9PT1uP2QrcihlLDApOm4pLDE7dmFyIGcsYixFPTAsTj1cIlwiPT09bj9kOm4reTtpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgXz0wO188ZS5sZW5ndGg7XysrKWc9ZVtfXSxiPU4rcihnLF8pLEUrPW8oZyxiLGksbSk7ZWxzZXt2YXIgTz1zKGUpO2lmKE8pe3ZhciBELHc9Ty5jYWxsKGUpO2lmKE8hPT1lLmVudHJpZXMpZm9yKHZhciB4PTA7IShEPXcubmV4dCgpKS5kb25lOylnPUQudmFsdWUsYj1OK3IoZyx4KyspLEUrPW8oZyxiLGksbSk7ZWxzZXtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXt2YXIgUD1cIlwiO2lmKHUuY3VycmVudCl7dmFyIGs9dS5jdXJyZW50LmdldE5hbWUoKTtrJiYoUD1cIiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgXCIraytcImAuXCIpfVwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/Zih2LFwiVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyBub3QgeWV0IGZ1bGx5IHN1cHBvcnRlZC4gSXQgaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUgdGhhdCBtaWdodCBiZSByZW1vdmVkLiBDb252ZXJ0IGl0IHRvIGEgc2VxdWVuY2UgLyBpdGVyYWJsZSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJXNcIixQKTp2b2lkIDAsdj0hMH1mb3IoOyEoRD13Lm5leHQoKSkuZG9uZTspe3ZhciBJPUQudmFsdWU7SSYmKGc9SVsxXSxiPU4rcC5lc2NhcGUoSVswXSkreStyKGcsMCksRSs9byhnLGIsaSxtKSl9fX1lbHNlIGlmKFwib2JqZWN0XCI9PT1oKXt2YXIgaj1cIlwiO2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJihqPVwiIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZCBvciB3cmFwIHRoZSBvYmplY3QgdXNpbmcgY3JlYXRlRnJhZ21lbnQob2JqZWN0KSBmcm9tIHRoZSBSZWFjdCBhZGQtb25zLlwiLGUuX2lzUmVhY3RFbGVtZW50JiYoaj1cIiBJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyBhbiBlbGVtZW50IGNyZWF0ZWQgYnkgYSBkaWZmZXJlbnQgdmVyc2lvbiBvZiBSZWFjdC4gTWFrZSBzdXJlIHRvIHVzZSBvbmx5IG9uZSBjb3B5IG9mIFJlYWN0LlwiKSx1LmN1cnJlbnQpKXt2YXIgUj11LmN1cnJlbnQuZ2V0TmFtZSgpO1ImJihqKz1cIiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgXCIrUitcImAuXCIpfXZhciBTPVN0cmluZyhlKTtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2woITEsXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICVzKS4lc1wiLFwiW29iamVjdCBPYmplY3RdXCI9PT1TP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoZSkuam9pbihcIiwgXCIpK1wifVwiOlMsaik6YShcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PVM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhlKS5qb2luKFwiLCBcIikrXCJ9XCI6UyxqKX19cmV0dXJuIEV9ZnVuY3Rpb24gaShlLHQsbil7cmV0dXJuIG51bGw9PWU/MDpvKGUsXCJcIix0LG4pfXZhciBhPW4oNSksdT1uKDcpLGM9bigxNSkscz1uKDE4KSxsPW4oMikscD1uKDIzKSxmPW4oMyksZD1cIi5cIix5PVwiOlwiLHY9ITE7ZS5leHBvcnRzPWl9KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9bigyNSl9XSl9KTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBiPTYwMTAzLGM9NjAxMDYsZD02MDEwNyxlPTYwMTA4LGY9NjAxMTQsZz02MDEwOSxoPTYwMTEwLGs9NjAxMTIsbD02MDExMyxtPTYwMTIwLG49NjAxMTUscD02MDExNixxPTYwMTIxLHI9NjAxMjIsdT02MDExNyx2PTYwMTI5LHc9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgeD1TeW1ib2wuZm9yO2I9eChcInJlYWN0LmVsZW1lbnRcIik7Yz14KFwicmVhY3QucG9ydGFsXCIpO2Q9eChcInJlYWN0LmZyYWdtZW50XCIpO2U9eChcInJlYWN0LnN0cmljdF9tb2RlXCIpO2Y9eChcInJlYWN0LnByb2ZpbGVyXCIpO2c9eChcInJlYWN0LnByb3ZpZGVyXCIpO2g9eChcInJlYWN0LmNvbnRleHRcIik7az14KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7bD14KFwicmVhY3Quc3VzcGVuc2VcIik7bT14KFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtuPXgoXCJyZWFjdC5tZW1vXCIpO3A9eChcInJlYWN0LmxhenlcIik7cT14KFwicmVhY3QuYmxvY2tcIik7cj14KFwicmVhY3Quc2VydmVyLmJsb2NrXCIpO3U9eChcInJlYWN0LmZ1bmRhbWVudGFsXCIpO3Y9eChcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7dz14KFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbmZ1bmN0aW9uIHkoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHQ9YS4kJHR5cGVvZjtzd2l0Y2godCl7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIGw6Y2FzZSBtOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGg6Y2FzZSBrOmNhc2UgcDpjYXNlIG46Y2FzZSBnOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHR9fWNhc2UgYzpyZXR1cm4gdH19fXZhciB6PWcsQT1iLEI9ayxDPWQsRD1wLEU9bixGPWMsRz1mLEg9ZSxJPWw7ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aDtleHBvcnRzLkNvbnRleHRQcm92aWRlcj16O2V4cG9ydHMuRWxlbWVudD1BO2V4cG9ydHMuRm9yd2FyZFJlZj1CO2V4cG9ydHMuRnJhZ21lbnQ9QztleHBvcnRzLkxhenk9RDtleHBvcnRzLk1lbW89RTtleHBvcnRzLlBvcnRhbD1GO2V4cG9ydHMuUHJvZmlsZXI9RztleHBvcnRzLlN0cmljdE1vZGU9SDtcbmV4cG9ydHMuU3VzcGVuc2U9STtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09aH07ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWd9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ifTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWt9O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWR9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09cH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ufTtcbmV4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1jfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1mfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWV9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWx9O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1kfHxhPT09Znx8YT09PXZ8fGE9PT1lfHxhPT09bHx8YT09PW18fGE9PT13fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXB8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09dXx8YS4kJHR5cGVvZj09PXF8fGFbMF09PT1yKT8hMDohMX07XG5leHBvcnRzLnR5cGVPZj15O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztyZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKTt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksZz02MDEwMztleHBvcnRzLkZyYWdtZW50PTYwMTA3O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBoPVN5bWJvbC5mb3I7Zz1oKFwicmVhY3QuZWxlbWVudFwiKTtleHBvcnRzLkZyYWdtZW50PWgoXCJyZWFjdC5mcmFnbWVudFwiKX12YXIgbT1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLG49T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxrKXt2YXIgYixkPXt9LGU9bnVsbCxsPW51bGw7dm9pZCAwIT09ayYmKGU9XCJcIitrKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihsPWEucmVmKTtmb3IoYiBpbiBhKW4uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjpnLHR5cGU6YyxrZXk6ZSxyZWY6bCxwcm9wczpkLF9vd25lcjptLmN1cnJlbnR9fWV4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbik7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BcHAuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG4gIHJldHVybiBjb21tb25qc0dsb2JhbFtrZXldID0gKGNvbW1vbmpzR2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufVxuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBnZXRVbmlxdWVJZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxudmFyIGNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHtcbiAgICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPSBjcmVhdGVQYXRoKGNvbnRleHQubG9jYXRpb24pID09PSBjcmVhdGVQYXRoKG5vcm1hbGl6ZVRvTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgfHwgaXNEdXBsaWNhdGVOYXZpZ2F0aW9uID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSB0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gY2xhc3NOYW1lUHJvcChpc0FjdGl2ZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChpc0FjdGl2ZSkgOiBzdHlsZVByb3A7XG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCIsIFwiZmFsc2VcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgUmVhY3RSZWR1eENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RSZWR1eENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgdmFyIHVuc3Vic2NyaWJlO1xuICB2YXIgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcblxuICBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gbGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih1bnN1YnNjcmliZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUgPSBwYXJlbnRTdWIgPyBwYXJlbnRTdWIuYWRkTmVzdGVkU3ViKGhhbmRsZUNoYW5nZVdyYXBwZXIpIDogc3RvcmUuc3Vic2NyaWJlKGhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgbGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgdW5zdWJzY3JpYmUgPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWI6IGFkZE5lc3RlZFN1YixcbiAgICBub3RpZnlOZXN0ZWRTdWJzOiBub3RpZnlOZXN0ZWRTdWJzLFxuICAgIGhhbmRsZUNoYW5nZVdyYXBwZXI6IGhhbmRsZUNoYW5nZVdyYXBwZXIsXG4gICAgaXNTdWJzY3JpYmVkOiBpc1N1YnNjcmliZWQsXG4gICAgdHJ5U3Vic2NyaWJlOiB0cnlTdWJzY3JpYmUsXG4gICAgdHJ5VW5zdWJzY3JpYmU6IHRyeVVuc3Vic2NyaWJlLFxuICAgIGdldExpc3RlbmVyczogZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKCkge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9XG4gIH07XG4gIHJldHVybiBzdWJzY3JpcHRpb247XG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcblxuZnVuY3Rpb24gUHJvdmlkZXIoX3JlZikge1xuICB2YXIgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgLiBUaGlzIGlzIGEgbG93LWxldmVsXG4gKiBob29rIHRoYXQgeW91IHNob3VsZCB1c3VhbGx5IG5vdCBuZWVkIHRvIGNhbGwgZGlyZWN0bHkuXG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmU7XG5cbiAgICByZXR1cm4gc3RvcmU7XG4gIH07XG59XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSByZWR1eCBzdG9yZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU3RvcmUgPSAvKiNfX1BVUkVfXyovY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVN0b3JlID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0U3RvcmUgOiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaDtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcbiAqICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gKiAgIGNvbnN0IGluY3JlYXNlQ291bnRlciA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ2luY3JlYXNlLWNvdW50ZXInIH0pLCBbXSlcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgIClcbiAqIH1cbiAqL1xuXG5leHBvcnQgdmFyIHVzZURpc3BhdGNoID0gLyojX19QVVJFX18qL2NyZWF0ZURpc3BhdGNoSG9vaygpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlTWVtbywgdXNlQ29udGV4dCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgc3RvcmVTdGF0ZSAhPT0gbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZVN0YXRlKTsgLy8gZW5zdXJlIGxhdGVzdCBzZWxlY3RlZCBzdGF0ZSBpcyByZXVzZWQgc28gdGhhdCBhIGN1c3RvbSBlcXVhbGl0eSBmdW5jdGlvbiBjYW4gcmVzdWx0IGluIGlkZW50aWNhbCByZWZlcmVuY2VzXG5cbiAgICAgIGlmIChsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPT09IHVuZGVmaW5lZCB8fCAhZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgIHNlbGVjdGVkU3RhdGUgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IHN0b3JlU3RhdGU7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7IC8vIEF2b2lkIGNhbGxpbmcgc2VsZWN0b3IgbXVsdGlwbGUgdGltZXMgaWYgdGhlIHN0b3JlJ3Mgc3RhdGUgaGFzIG5vdCBjaGFuZ2VkXG5cbiAgICAgICAgaWYgKG5ld1N0b3JlU3RhdGUgPT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQobmV3U3RvcmVTdGF0ZSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4oX25ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBfbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgICAgbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50ID0gbmV3U3RvcmVTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcigpO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZXF1YWxpdHlGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYW4gZXF1YWxpdHkgZnVuY3Rpb24gdG8gdXNlU2VsZWN0b3JcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlLFxuICAgICAgICBjb250ZXh0U3ViID0gX3VzZVJlZHV4Q29udGV4dC5zdWJzY3JpcHRpb247XG5cbiAgICB2YXIgc2VsZWN0ZWRTdGF0ZSA9IHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gICAgdXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxuICpcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZXhwb3J0ICogZnJvbSAnLi9leHBvcnRzJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7IC8vIEVuYWJsZSBiYXRjaGVkIHVwZGF0ZXMgaW4gb3VyIHN1YnNjcmlwdGlvbnMgZm9yIHVzZVxuLy8gd2l0aCBzdGFuZGFyZCBSZWFjdCByZW5kZXJlcnMgKFJlYWN0RE9NLCBSZWFjdCBOYXRpdmUpXG5cbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IGJhdGNoIH07IiwiLy9BVVRIXHJcbmV4cG9ydCBjb25zdCBhdXRoQ29uc3RhbnRzID0ge1xyXG4gICAgU0lHTl9JTjogXCJTSUdOX0lOXCIsXHJcbiAgICBTSUdOX09VVDogXCJTSUdOX09VVFwiLFxyXG4gICAgQ1JFQVRFX0FDQ09VTlQ6IFwiQ1JFQVRFX0FDQ09VTlRcIlxyXG59O1xyXG5cclxuLy8gUE9QVVBcclxuZXhwb3J0IGNvbnN0IHBvcHVwQ29uc3RhbnRzID0ge1xyXG4gICAgU0hPV19DUkVBVEVfU1RVRFlfR1JPVVBfUE9QVVA6IFwiU0hPV19DUkVBVEVfU1RVRFlfR1JPVVBfUE9QVVBcIixcclxuICAgIFNIT1dfSk9JTl9TVFVEWV9HUk9VUF9QT1BVUDogXCJTSE9XX0pPSU5fU1RVRFlfR1JPVVBfUE9QVVBcIixcclxuICAgIENMT1NFX1BPUFVQOiBcIkNMT1NFX1BPUFVQXCJcclxufTtcclxuXHJcbi8vQVVUSFxyXG5leHBvcnQgY29uc3Qgc3R1ZHlHcm91cHNDb25zdGFudHMgPSB7XHJcbiAgICBBRERfU1RVRFlfR1JPVVA6IFwiQUREX1NUVURZX0dST1VQXCIsXHJcbiAgICBQT1BVTEFURV9TRUFSQ0g6IFwiUE9QVUxBVEVfU0VBUkNIXCJcclxufTtcclxuXHJcbi8vTk9USUZJQ0FUSU9OU1xyXG5leHBvcnQgY29uc3Qgbm90aWZpY2F0aW9uQ29uc3RhbnRzID0ge1xyXG4gICAgU0hPV19FUlJPUl9OT1RJRklDQVRJT046IFwiU0hPV19FUlJPUl9OT1RJRklDQVRJT05cIixcclxuICAgIEhJREVfTk9USUZJQ0FUSU9OOiBcIkhJREVfTk9USUZJQ0FUSU9OXCJcclxufTtcclxuIiwiaW1wb3J0IHsgc3R1ZHlHcm91cHNDb25zdGFudHMsIGF1dGhDb25zdGFudHMsIHBvcHVwQ29uc3RhbnRzLCBub3RpZmljYXRpb25Db25zdGFudHMgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xyXG5cclxuLy9BVVRIIFJFRFVDRVJTXHJcbmV4cG9ydCBjb25zdCBzaWduSW4gPSAodXNlcikgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBhdXRoQ29uc3RhbnRzLlNJR05fSU4sXHJcbiAgICAgICAgcGF5bG9hZDogdXNlclxyXG4gICAgfTtcclxufTtcclxuZXhwb3J0IGNvbnN0IHNpZ25PdXQgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IGF1dGhDb25zdGFudHMuU0lHTl9PVVRcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlQWNjb3VudCA9ICh1bnZlcmlmaWVkVXNlcikgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBhdXRoQ29uc3RhbnRzLkNSRUFURV9BQ0NPVU5ULFxyXG4gICAgICAgIHBheWxvYWQ6IHtcclxuICAgICAgICAgICAgdW52ZXJpZmllZFVzZXJcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59O1xyXG5cclxuLy9QT1BVUCBSRURVQ0VSXHJcbmV4cG9ydCBjb25zdCBzaG93Q3JlYXRlU3R1ZHlHcm91cFBvcHVwID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5TSE9XX0NSRUFURV9TVFVEWV9HUk9VUF9QT1BVUFxyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzaG93Sm9pblN0dWR5R3JvdXBQb3B1cCA9IChncm91cCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5TSE9XX0pPSU5fU1RVRFlfR1JPVVBfUE9QVVAsXHJcbiAgICAgICAgcGF5bG9hZDogZ3JvdXBcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY2xvc2VQb3B1cCA9ICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogcG9wdXBDb25zdGFudHMuQ0xPU0VfUE9QVVBcclxuICAgIH07XHJcbn07XHJcblxyXG4vL1NUVURZIEdST1VQIFJFRFVDRVJTXHJcbmV4cG9ydCBjb25zdCBhZGRTdHVkeUdyb3VwID0gKGdyb3VwLCByZXNldCA9IGZhbHNlKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IHN0dWR5R3JvdXBzQ29uc3RhbnRzLkFERF9TVFVEWV9HUk9VUCxcclxuICAgICAgICBwYXlsb2FkOiB7IGdyb3VwLCByZXNldCB9XHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHBvcHVsYXRlU3R1ZHlHcm91cFNlYXJjaCA9IChncm91cHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogc3R1ZHlHcm91cHNDb25zdGFudHMuUE9QVUxBVEVfU0VBUkNILFxyXG4gICAgICAgIHBheWxvYWQ6IHsgZ3JvdXBzIH1cclxuICAgIH07XHJcbn07XHJcblxyXG4vL05PVElGSUNBVElPTiBSRURVQ0VSU1xyXG5leHBvcnQgY29uc3Qgc2hvd0Vycm9yTm90aWZpY2F0aW9uID0gKG1lc3NhZ2UpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogbm90aWZpY2F0aW9uQ29uc3RhbnRzLlNIT1dfRVJST1JfTk9USUZJQ0FUSU9OLFxyXG4gICAgICAgIHBheWxvYWQ6IHsgbWVzc2FnZSB9XHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGhpZGVOb3RpZmljYXRpb24gPSAoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvbkNvbnN0YW50cy5ISURFX05PVElGSUNBVElPTlxyXG4gICAgfTtcclxufTtcclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qb3B1cC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUG9wdXAuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ3JlYXRlU3R1ZHlHcm91cEZvcm0uc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NyZWF0ZVN0dWR5R3JvdXBGb3JtLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG4vKipcclxuICogUmVuZGVycyBhIGZvcm0uXHJcbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXHJcbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxyXG4gKi9cclxuY29uc3QgRm9ybSA9IChwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Zm9ybSBjbGFzc05hbWU9XCJGb3JtXCIgey4uLnByb3BzfT5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgIDwvZm9ybT5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb3JtO1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvcmUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvcmUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8qKlxyXG4gKiBEZWZpbmVzIHRoZSB0eXBlcyBvZiBidXR0b25zIHRoYXQgY2FuIGJlIHVzZWQuXHJcbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXHJcbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxyXG4gKi9cclxuY29uc3QgQnV0dG9uVHlwZXMgPSB7XHJcbiAgICBQcmltYXJ5OiBcIlByaW1hcnlcIixcclxuICAgIENyZWF0aW9uOiBcIkNyZWF0aW9uXCIsXHJcbiAgICBEZXN0cnVjaXZlOiBcIkRlc3RydWN0aXZlXCJcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvblR5cGVzO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4uL2NvcmUuc2Nzc1wiO1xyXG5cclxuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuL0J1dHRvblR5cGVzLmpzXCI7XHJcblxyXG4vKipcclxuICogVXNlZCB0byByZW5kZXIgYnV0dG9ucy4gRGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIGJ1dHRvbiByZXF1ZXN0ZWQsXHJcbiAqIHRoZSBidXR0b24gZGlzcGxheWVkIHdpbGwgdmFyeS5cclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnR5cGUgVGhlIHR5cGUgb2YgYnV0dG9uIHRvIHJlbmRlci5cclxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAqL1xyXG5jb25zdCBCdXR0b24gPSAocHJvcHMpID0+IHtcclxuICAgIGxldCBidXR0b25DbGFzc05hbWU7XHJcbiAgICBzd2l0Y2ggKHByb3BzLnR5cGUpIHtcclxuICAgICAgICBjYXNlIEJ1dHRvblR5cGVzLlByaW1hcnk6XHJcbiAgICAgICAgICAgIGJ1dHRvbkNsYXNzTmFtZSA9IFwiQnV0dG9uUHJpbWFyeVwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEJ1dHRvblR5cGVzLkNyZWF0aW9uOlxyXG4gICAgICAgICAgICBidXR0b25DbGFzc05hbWUgPSBcIkJ1dHRvbkNyZWF0aW9uXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQnV0dG9uVHlwZXMuRGVzdHJ1Y3RpdmU6XHJcbiAgICAgICAgICAgIGJ1dHRvbkNsYXNzTmFtZSA9IFwiQnV0dG9uRGVzdHJ1Y3RpdmVcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnV0dG9uQ2xhc3NOYW1lID0gXCJCdXR0b25QcmltYXJ5XCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e2J1dHRvbkNsYXNzTmFtZSArIFwiIEJ1dHRvblwifSB7Li4ucHJvcHN9PlxyXG4gICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4uL2NvcmUuc2Nzc1wiO1xyXG4vKipcclxuICogUmVuZGVycyBhbiBpbnB1dCBmaWVsZC5cclxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAqL1xyXG5jb25zdCBJbnB1dEZpZWxkID0gKHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxmaWVsZHNldCBjbGFzc05hbWU9XCJJbnB1dEZpZWxkXCIgey4uLnByb3BzfT5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgIDwvZmllbGRzZXQ+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW5wdXRGaWVsZDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgYSBsYWJlbC5cclxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAqL1xyXG5jb25zdCBMYWJlbCA9IChwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiTGFiZWxcIiB7Li4ucHJvcHN9PlxyXG4gICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgPC9sYWJlbD5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMYWJlbDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1ZhbGlkYXRvci5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgYSB0ZXh0IGlucHV0LlxyXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gKiBAZGF0ZSAgIDEwLzIxLzIwMjFcclxuICovXHJcbmNvbnN0IFRleHRJbnB1dCA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgdHlwZUlzRGVmaW5lZCA9IFZhbGlkYXRvci5pc0RlZmluZWQocHJvcHMudHlwZSk7XHJcbiAgICBjb25zdCB0eXBlID0gdHlwZUlzRGVmaW5lZCA/IHByb3BzLnR5cGUgOiBcInRleHRcIjtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIHtwcm9wcy5pc1RleHRBcmVhID8gKFxyXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzTmFtZT1cIklucHV0XCIgdmFsdWU9e3Byb3BzLnZhbHVlfSBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9IHR5cGU9e3R5cGV9IHsuLi5wcm9wc30gLz5cclxuICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJJbnB1dFwiIHZhbHVlPXtwcm9wcy52YWx1ZX0gb25DaGFuZ2U9e3Byb3BzLm9uQ2hhbmdlfSB0eXBlPXt0eXBlfSB7Li4ucHJvcHN9IC8+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGV4dElucHV0O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4uL2NvcmUuc2Nzc1wiO1xyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgYW4gdG9nZ2xlIGZpZWxkLlxyXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAqL1xyXG5jb25zdCBUb2dnbGVGaWVsZCA9IChwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIlRvZ2dsZUZpZWxkXCIgey4uLnByb3BzfT5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvZ2dsZUZpZWxkO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG4vKipcclxuICogUmVuZGVycyBhIHRvZ2dsZSBzd2l0Y2guXHJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDExLzIwLzIwMjFcclxuICovXHJcbmNvbnN0IFRvZ2dsZSA9IChwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiVG9nZ2xlXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT17cHJvcHMudmFsdWV9IG9uQ2hhbmdlPXtwcm9wcy5vbkNoYW5nZX0gLz5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2xpZGVyXCI+PC9zcGFuPlxyXG4gICAgICAgIDwvbGFiZWw+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9nZ2xlO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4uL2NvcmUuc2Nzc1wiO1xyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gcmVuZGVyIGRyb3Bkb3duIG1lbnVzLlxyXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcy5vcHRpb25zIFRoZSBpdGVtcyB0byByZW5kZXIgaW4gdGhlIGRyb3Bkb3duIG1lbnUuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3BzLm9uQ2hhbmdlIFRoZSBmdW5jdGlvbiB0byBiZSBydW4gd2hlbiBhbiBpdGVtIGlzIHNlbGVjdGVkXHJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDEyLzA1LzIwMjFcclxuICovXHJcbmNvbnN0IERyb3Bkb3duID0gKHByb3BzKSA9PiB7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHByb3BzLm9wdGlvbnMpO1xyXG4gICAgfSwgW10pO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImRyb3Bkb3duXCIgb25DaGFuZ2U9e3Byb3BzLm9uQ2hhbmdlfT5cclxuICAgICAgICAgICAge3Byb3BzLm9wdGlvbnMubWFwKChvcHRpb24pID0+IChcclxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9e29wdGlvbn0+e29wdGlvbn08L29wdGlvbj5cclxuICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRHJvcGRvd247XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi4vY29yZS5zY3NzXCI7XHJcblxyXG5jb25zdCBDb2xvclBpY2tlciA9IChwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIDxpbnB1dCBjbGFzc05hbWU9XCJjb2xvci1waWNrZXJcIiBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9IHR5cGU9XCJjb2xvclwiIC8+O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sb3JQaWNrZXI7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL0NyZWF0ZVN0dWR5R3JvdXBGb3JtLnNjc3NcIjtcclxuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtLmpzXCI7XHJcblxyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b24uanNcIjtcclxuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xyXG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGQuanNcIjtcclxuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi9jb3JlL0xhYmVsL0xhYmVsLmpzXCI7XHJcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzXCI7XHJcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXQuanNcIjtcclxuXHJcbmltcG9ydCBUb2dnbGVGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9Ub2dnbGVGaWVsZC9Ub2dnbGVGaWVsZC5qc1wiO1xyXG5pbXBvcnQgVG9nZ2xlIGZyb20gXCIuLi8uLi9jb3JlL1RvZ2dsZS9Ub2dnbGUuanNcIjtcclxuXHJcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgRHJvcGRvd24gZnJvbSBcIi4uLy4uL2NvcmUvRHJvcGRvd24vRHJvcGRvd25cIjtcclxuaW1wb3J0IENvbG9yUGlja2VyIGZyb20gXCIuLi8uLi9jb3JlL0NvbG9yUGlja2VyL0NvbG9yUGlja2VyXCI7XHJcblxyXG4vKipcclxuICogUmVuZGVycyBhIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcy50aXRsZVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMuZGVzY3JpcHRpb25cclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnByaXZhY3lcclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnN1YmplY3RcclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLmNsYXNzQ29kZVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHByb3BzLmlzQXNzb2NpYXRlZFdpdGhTY2hvb2xcclxuICogQHBhcmFtIHtib29sZWFufSBwcm9wcy5pc1R1dG9yR3JvdXBcclxuICogQHBhcmFtIHtib29sZWFufSBwcm9wcy5pc09ubGluZUdyb3VwXHJcbiAqXHJcbiAqL1xyXG5jb25zdCBDcmVhdGVTdHVkeUdyb3VwRm9ybSA9IChwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8Rm9ybSBvblN1Ym1pdD17cHJvcHMuc3VibWl0Q3JlYXRlU3R1ZHlHcm91cH0gY2xhc3NOYW1lPVwiY3JlYXRlLXN0dWR5LWdyb3VwLWZvcm1cIj5cclxuICAgICAgICAgICAgICAgIHsvKiBBZGQgdGhlIGFwcHJvcHJpYXRlIGlucHV0cywgdG9nZ2xlcyBhbmQgZHJvcGRvd24gZmllbGRzLCBlYWNoIGFjY29tcGFuaWVkIGJ5IGEgTGFiZWwsIGZvciBlYWNoIG9mIHRoZSBmaWVsZHMgKGRlY2xhcmVkIGluIENyZWF0ZVN0dWR5R3JvdXBWaWV3IEZpbGUpIHRoYXQgYXJlIHJlcXVpcmVkIHRvIGNyZWF0ZSBhIHN0dWR5IGdyb3VwICovfVxyXG4gICAgICAgICAgICAgICAgey8qIERvbid0IGZvcmdldCBhIGZpbmFsIHN1Ym1pdCBidXR0b24gYXQgdGhlIGVuZCBvZiB0aGUgZm9ybSAqL31cclxuXHJcbiAgICAgICAgICAgICAgICB7LyogdXNlciB0ZXh0IGlucHV0ICovfVxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPlN0dWR5IEdyb3VwIE5hbWU8L0xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5uYW1lfSBvbkNoYW5nZT17cHJvcHMudXBkYXRlTmFtZUZpZWxkfSB0eXBlPVwidGV4dFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+Q29sb3I8L0xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sb3JQaWNrZXIgdmFsdWU9e3Byb3BzLmdyb3VwQ29sb3J9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVHcm91cENvbG9yfSB0eXBlPVwiY29sb3JcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5EZXNjcmlwdGlvbjwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgey8qIG5vdCBzdXJlIGFib3V0IHdoYXQgdGhlIHByb3BzLiB0aGluZyBzaG91bGQgc2F5ICovfVxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Byb3BzLmRlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMudXBkYXRlRGVzY3JpcHRpb25GaWVsZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RleHRBcmVhPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgey8qIGRyb3Bkb3ducyAqL31cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+U3ViamVjdDwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biBvcHRpb25zPXtbXCJUaGlzXCIsIFwiVGhhdFwiXX0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZVN1YmplY3RGaWVsZH0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+UHJpdmFjeTwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biBvcHRpb25zPXtbXCJQdWJsaWNcIiwgXCJQdWJsaWNcIiwgXCJQdWJsaWNcIl19IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVQcml2YWN5fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Db3Vyc2UgQ29kZTwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3Byb3BzLmNvdXJzZUNvZGV9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVDb3Vyc2VDb2RlRmllbGR9IHR5cGU9XCJ0ZXh0XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICB7LyogY2xhc3MgY29kZSAqL31cclxuXHJcbiAgICAgICAgICAgICAgICB7LyogdG9nZ2xlcyAqL31cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2lkZS1ieS1zaWRlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZUZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+SXMgdGhpcyBncm91cCBhc3NvY2lhdGVkIHdpdGggeW91ciBzY2hvb2w/PC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZSBvbkNoYW5nZT17cHJvcHMudXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbH0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1RvZ2dsZUZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUb2dnbGVGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPklzIHRoaXMgYW4gb25saW5lIGdyb3VwPzwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb2dnbGUgb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUlzT25saW5lR3JvdXB9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Ub2dnbGVGaWVsZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZUZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+SXMgdGhpcyBhIHR1dG9yIGdyb3VwPzwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb2dnbGUgb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUlzVHV0b3JHcm91cH0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1RvZ2dsZUZpZWxkPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0+U3VibWl0PC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvRm9ybT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVTdHVkeUdyb3VwRm9ybTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBDcmVhdGVTdHVkeUdyb3VwRm9ybSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9DcmVhdGVTdHVkeUdyb3VwRm9ybS9DcmVhdGVTdHVkeUdyb3VwRm9ybVwiO1xyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgeyBhZGRTdHVkeUdyb3VwIH0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnMvaW5kZXhcIjtcclxuaW1wb3J0IHsgY2xvc2VQb3B1cCB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XHJcblxyXG4vLyBhcmUgdGhlc2UgbmVlZGVkP1xyXG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzLmpzXCI7XHJcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3JcIjtcclxuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgc3BlY2lmaWMgdmlldyB0aGF0IGlzIHVzZWQgaW4gYSBwb3B1cCB0byBhbGxvdyBhIHVzZXIgdG8gY3JlYXRlIGEgc3R1ZHkgZ3JvdXBcclxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqIEBkYXRlICAgMTEvMjAvMjAyMVxyXG4gKi9cclxuY29uc3QgQ3JlYXRlU3R1ZHlHcm91cFZpZXcgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcbiAgICBjb25zdCB1c2VyID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlci51c2VyKTtcclxuXHJcbiAgICBjb25zdCBCTEFOSyA9IFwiXCI7XHJcbiAgICBjb25zdCBbbmFtZSwgc2V0TmFtZV0gPSB1c2VTdGF0ZShCTEFOSyk7IC8vVGV4dElucHV0IHRhZ1xyXG4gICAgY29uc3QgW2Rlc2NyaXB0aW9uLCBzZXREZXNjcmlwdGlvbl0gPSB1c2VTdGF0ZShCTEFOSyk7IC8vVGV4dElucHV0IHRhZ1xyXG4gICAgY29uc3QgW3N1YmplY3QsIHNldFN1YmplY3RdID0gdXNlU3RhdGUoXCJUaGF0XCIpOyAvL3NlbGVjdCB0YWcsIGZpbGxlZCB3aXRoIG9wdGlvbiB0YWdzXHJcbiAgICBjb25zdCBbcHJpdmFjeSwgc2V0UHJpdmFjeV0gPSB1c2VTdGF0ZShcIlB1YmxpY1wiKTsgLy9zZWxlY3QgdGFnLCBmaWxsZWQgd2l0aCBvcHRpb24gdGFnc1xyXG4gICAgY29uc3QgW2NvdXJzZUNvZGUsIHNldENvdXJzZUNvZGVdID0gdXNlU3RhdGUoQkxBTkspOyAvL1RleHRJbnB1dCB0YWdcclxuICAgIGNvbnN0IFtpc0Fzc29jaWF0ZWRXaXRoU2Nob29sLCBzZXRJc0Fzc29jaWF0ZWRXaXRoU2Nob29sXSA9IHVzZVN0YXRlKGZhbHNlKTsgLy9JbnB1dCB0YWcgd2l0aCB0eXBlIFwiY2hlY2tib3hcIlxyXG4gICAgY29uc3QgW2lzVHV0b3JHcm91cCwgc2V0SXNUdXRvckdyb3VwXSA9IHVzZVN0YXRlKGZhbHNlKTsgLy9Ub2dnbGUgdGFnXHJcbiAgICBjb25zdCBbaXNPbmxpbmVHcm91cCwgc2V0SXNPbmxpbmVHcm91cF0gPSB1c2VTdGF0ZShmYWxzZSk7IC8vVG9nZ2xlIHRhZ1xyXG4gICAgY29uc3QgW2dyb3VwQ29sb3IsIHNldEdyb3VwQ29sb3JdID0gdXNlU3RhdGUoXCIjMDAwMDAwXCIpOyAvL1RleHRJbnB1dCB0YWcgZm9yIG5vd1xyXG4gICAgY29uc3QgW2dyb3VwUGhvdG8sIHNldEdyb3VwUGhvdG9dID0gdXNlU3RhdGUoQkxBTkspOyAvL1RleHRJbnB1dCB0YWcgZm9yIG5vd1xyXG5cclxuICAgIGNvbnN0IFtzdHVkeUdyb3VwQ3JlYXRpb25FcnJvck1zZywgc2V0U3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2ddID0gdXNlU3RhdGUoQkxBTkspOyAvL1RvZ2dsZSB0YWdcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ha2VzIGFuIGFwaSBjYWxsIHRvIHRoZSBDcmVhdGUgc3R1ZHkgZ3JvdXAgcm91dGUsIHBhc3NpbmcgaW4gdGhlIGluZm9ybWF0aW9uIGVudGVyZWQgaW4gdGhlIGZvcm0gYW5kIHJlbmRlcmluZyB0aGUgY2xpZW50IGFjY29yZGluZyB0byB0aGUgcmVzcG9uc2UgcmVjZWl2ZWRcclxuICAgICAqIEBhdXRob3IgU3RhY2V5IFBvcGVuZm9vc2UgYW5kIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTIvMDgvMjFcclxuICAgICAqL1xyXG4gICAgY29uc3Qgc3VibWl0Q3JlYXRlU3R1ZHlHcm91cCA9IGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vUHJldmVudCBkZWZhdWx0IGZvcm0gYmVoYXZpb3JcclxuXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgLy9Vc2UgYXhpb3MgdG8gYXNzaWduIGEgdmFyaWFibGUgY2FsbGVkIFwicmVzcG9uc2VcIiB0byB0aGUgcmVzcG9uc2UgcmVjZWl2ZWQgd2hlbiBhd2FpdGluZyBhbiBBUEkgY2FsbCB0byBcIlJvdXRlcy5TdHVkeS5DcmVhdGVTdHVkeUdyb3VwLFwiIHBhc3NpbmcgaW4gYW4gb2JqZWN0IHdpdGggYWxsIG9mIHRoZSB2YWx1ZXMgZW50ZXJlZCBpbnRvIHRoZSBmb3JtLlxyXG4gICAgICAgIGxldCByZXNwb25zZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRva2VuXCIpO1xyXG5cclxuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KFJvdXRlcy5TdHVkeUdyb3VwLkNyZWF0ZVN0dWR5R3JvdXAsIHtcclxuICAgICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgICBncm91cENvbG9yLFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0LFxyXG4gICAgICAgICAgICAgICAgcHJpdmFjeVNldHRpbmc6IHByaXZhY3ksXHJcbiAgICAgICAgICAgICAgICBjb3Vyc2U6IGNvdXJzZUNvZGUsXHJcbiAgICAgICAgICAgICAgICBzY2hvb2w6IHVzZXIuc2Nob29sIHx8IFwiTGliZXJ0eSBVbml2ZXJzaXR5XCIsXHJcbiAgICAgICAgICAgICAgICBpc1R1dG9yR3JvdXAsXHJcbiAgICAgICAgICAgICAgICBpc09ubGluZUdyb3VwXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvL1dyYXAgdGhlIGF4aW9zIGNhbGwgaW4gYSB0cnktY2F0Y2ggYmxvY2ssIHVzaW5nIHRoZSBjYXRjaCBibG9jayB0byBjYWxsIFwic2V0RXJyb3JNZXNzYWdlKCk7XCIgcGFzc2luZyBpbiBcImUubWVzc2FnZVwiXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgc2V0U3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2coZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgLy9JbiB0aGUgZmluYWxseSBibG9jaywgdXNlIGlmIHN0YXRlbWVudHMgdG8gdmFsaWRhdGUgdGhlIGZvbGxvd2luZzpcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICAvL2NoZWNrIGlmIHRoZSByZXNwb25zZSBpcyB2YWxpZCwgdXNpbmcgVmFsaWRhdG9yLmlzRGVmaW5lZChyZXNwb25zZSksXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSXNEZWZpbmVkID0gVmFsaWRhdG9yLmlzRGVmaW5lZChyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICAvL2lmIHNvLCBjaGVjayBpZiB0aGUgcmVzcG9uc2UgaXMgc3VjY2Vzc2Z1bFxyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2VJc0RlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0dWR5R3JvdXBDcmVhdGlvbldhc1ZhbGlkID1cclxuICAgICAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU3VjY2Vzc1N0dWR5R3JvdXBDcmVhdGVkID09PSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0dWR5R3JvdXBDcmVhdGlvbldhc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9JZiBhbGwgdGhlIGNvbmRpdGlvbnMgYXJlIHNhdGlzZmllZCwgdGhlbiB1c2UgdGhlIGRpc3BhdGNoIGZ1bmN0aW9uLCBwYXNzaW5nIGluIHRoZSBcInJlc3BvbnNlLmRhdGFcIiBvYmplY3QuICBUaGlzIHdpbGwgZGlzcGF0Y2ggYW4gYWN0aW9uIHRvIHJlZHV4LCB3aGljaCBzYXZlcyB0aGUgc3R1ZHkgZ3JvdXAgdG8gdGhlIGdsb2JhbCBzdGF0ZSBvZiB0aGUgYXBwLlxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGFkZFN0dWR5R3JvdXAocmVzcG9uc2UuZGF0YS5uZXdTdHVkeUdyb3VwKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0U3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2cocmVzcG9uc2UuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNldFN0dWR5R3JvdXBDcmVhdGlvbkVycm9yTXNnKFwiVGhlcmUncyBiZWVuIGEgcHJvYmxlbSB3aXRoIHRoZSBzZXJ2ZXJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIG5hbWUgZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTIvMDgvMjAyMVxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVOYW1lRmllbGQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXROYW1lKGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgc2V0U3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2coQkxBTkspO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBncm91cCBjb2xvciBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAxMi8wOC8yMDIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZUdyb3VwQ29sb3IgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXRHcm91cENvbG9yKGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgc2V0U3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2coQkxBTkspO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBkZXNjcmlwdGlvbiBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAxMi8wOC8yMDIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZURlc2NyaXB0aW9uRmllbGQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXREZXNjcmlwdGlvbihldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgICAgIHNldFN0dWR5R3JvdXBDcmVhdGlvbkVycm9yTXNnKEJMQU5LKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgc3ViamVjdCBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAxMi8wOC8yMDIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZVN1YmplY3RGaWVsZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldFN1YmplY3QoZXZlbnQudGFyZ2V0Lm9wdGlvbnNbZXZlbnQudGFyZ2V0LnNlbGVjdGVkSW5kZXhdLnZhbHVlKTtcclxuICAgICAgICBzZXRTdHVkeUdyb3VwQ3JlYXRpb25FcnJvck1zZyhCTEFOSyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIHByaXZhY3kgZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTIvMDgvMjAyMVxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVQcml2YWN5ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0UHJpdmFjeShldmVudC50YXJnZXQub3B0aW9uc1tldmVudC50YXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWUpO1xyXG4gICAgICAgIHNldFN0dWR5R3JvdXBDcmVhdGlvbkVycm9yTXNnKEJMQU5LKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgY291cnNlIGNvZGUgZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTIvMDgvMjAyMVxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVDb3Vyc2VDb2RlRmllbGQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXRDb3Vyc2VDb2RlKGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgc2V0U3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2coQkxBTkspO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBpcyBvbmxpbmUgZ3JvdXAgc3dpdGNoIHZhbHVlIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIwMjFcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlSXNPbmxpbmVHcm91cCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldElzT25saW5lR3JvdXAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xyXG4gICAgICAgIHNldFN0dWR5R3JvdXBDcmVhdGlvbkVycm9yTXNnKEJMQU5LKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgaXMgYXNzb2NpYXRlZCB3aXRoIHNjaG9vbCBzd2l0Y2ggdmFsdWUgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTIvMDgvMjAyMVxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVJc0Fzc29jaWF0ZWRXaXRoU2Nob29sID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0SXNBc3NvY2lhdGVkV2l0aFNjaG9vbChldmVudC50YXJnZXQuY2hlY2tlZCk7XHJcbiAgICAgICAgc2V0U3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2coQkxBTkspO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBpcyB0dXRvciBncm91cCBzd2l0Y2ggdmFsdWUgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTIvMDgvMjAyMVxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVJc1R1dG9yR3JvdXAgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBzZXRJc1R1dG9yR3JvdXAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xyXG4gICAgICAgIHNldFN0dWR5R3JvdXBDcmVhdGlvbkVycm9yTXNnKEJMQU5LKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNyZWF0ZS1zdHVkeWdyb3VwLXZpZXdcIj5cclxuICAgICAgICAgICAgPENyZWF0ZVN0dWR5R3JvdXBGb3JtXHJcbiAgICAgICAgICAgICAgICBzdWJtaXRDcmVhdGVTdHVkeUdyb3VwPXtzdWJtaXRDcmVhdGVTdHVkeUdyb3VwfVxyXG4gICAgICAgICAgICAgICAgbmFtZT17bmFtZX1cclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn1cclxuICAgICAgICAgICAgICAgIHN1YmplY3Q9e3N1YmplY3R9XHJcbiAgICAgICAgICAgICAgICBwcml2YWN5PXtwcml2YWN5fVxyXG4gICAgICAgICAgICAgICAgY291cnNlQ29kZT17Y291cnNlQ29kZX1cclxuICAgICAgICAgICAgICAgIGlzQXNzb2NpYXRlZFdpdGhTY2hvb2w9e2lzQXNzb2NpYXRlZFdpdGhTY2hvb2x9XHJcbiAgICAgICAgICAgICAgICBpc1R1dG9yR3JvdXA9e2lzVHV0b3JHcm91cH1cclxuICAgICAgICAgICAgICAgIGlzT25saW5lR3JvdXA9e2lzT25saW5lR3JvdXB9XHJcbiAgICAgICAgICAgICAgICBncm91cENvbG9yPXtncm91cENvbG9yfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlTmFtZUZpZWxkPXt1cGRhdGVOYW1lRmllbGR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVEZXNjcmlwdGlvbkZpZWxkPXt1cGRhdGVEZXNjcmlwdGlvbkZpZWxkfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlU3ViamVjdEZpZWxkPXt1cGRhdGVTdWJqZWN0RmllbGR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVQcml2YWN5PXt1cGRhdGVQcml2YWN5fVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlQ291cnNlQ29kZUZpZWxkPXt1cGRhdGVDb3Vyc2VDb2RlRmllbGR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVJc0Fzc29jaWF0ZWRXaXRoU2Nob29sPXt1cGRhdGVJc0Fzc29jaWF0ZWRXaXRoU2Nob29sfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlSXNUdXRvckdyb3VwPXt1cGRhdGVJc1R1dG9yR3JvdXB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVJc09ubGluZUdyb3VwPXt1cGRhdGVJc09ubGluZUdyb3VwfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlR3JvdXBDb2xvcj17dXBkYXRlR3JvdXBDb2xvcn1cclxuICAgICAgICAgICAgICAgIHN1Ym1pdENyZWF0ZVN0dWR5R3JvdXA9e3N1Ym1pdENyZWF0ZVN0dWR5R3JvdXB9XHJcbiAgICAgICAgICAgICAgICBzdHVkeUdyb3VwQ3JlYXRpb25FcnJvck1zZz17c3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2d9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImVycm9yLW1lc3NhZ2VcIj57c3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2d9PC9wPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENyZWF0ZVN0dWR5R3JvdXBWaWV3O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xyXG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XHJcblxyXG5jb25zdCBKb2luU3R1ZHlHcm91cFZpZXcgPSAoeyBncm91cCB9KSA9PiB7XHJcbiAgICBjb25zdCB7IG5hbWUsIHNjaG9vbCwgb3duZXIsIHN1YmplY3QsIGNvdXJzZUNvZGUsIGlzVHV0b3IsIGlzT25saW5lLCBncm91cENvbG9yLCBkZXNjcmlwdGlvbiwgX2lkIH0gPSBncm91cDtcclxuXHJcbiAgICBjb25zdCBzdWJtaXRKb2luID0gKCkgPT4ge1xyXG4gICAgICAgIC8vVE9ETywgV3JpdGUgcm91dGUgZnVuY2l0b25cclxuICAgIH07XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxoMT57bmFtZX08L2gxPlxyXG4gICAgICAgICAgICA8cD57ZGVzY3JpcHRpb259PC9wPlxyXG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufSBvbkNsaWNrPXtzdWJtaXRKb2lufT5cclxuICAgICAgICAgICAgICAgIEpvaW5cclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSm9pblN0dWR5R3JvdXBWaWV3O1xyXG4iLCIvKipcclxuICogVGhlIHZhcmlvdXMgcG9zc2libGUgcG9wdXAgdGhhdCBlYWNoIHBhZ2UgY2FuIHByZXNlbnQuXHJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDEwLzIwLzIwMjFcclxuICovXHJcbmNvbnN0IFBvcHVwcyA9IHtcclxuICAgIFN0dWR5R3JvdXA6IHtcclxuICAgICAgICBKb2luOiBcIkpvaW4gU3R1ZHkgR3JvdXBcIixcclxuICAgICAgICBDcmVhdGU6IFwiQ3JlYXRlIFN0dWR5IEdyb3VwXCJcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBvcHVwcztcclxuIiwiaW1wb3J0IFwiLi9Qb3B1cC5zY3NzXCI7XHJcblxyXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgY2xvc2VQb3B1cCwgc2hvd0pvaW5TdHVkeUdyb3VwUG9wdXAgfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgQ3JlYXRlU3R1ZHlHcm91cFZpZXcgZnJvbSBcIi4uL1N0dWR5L0NyZWF0ZVN0dWR5R3JvdXBWaWV3XCI7XHJcbmltcG9ydCBKb2luU3R1ZHlHcm91cFZpZXcgZnJvbSBcIi4uL1N0dWR5L0pvaW5TdHVkeUdyb3VwVmlld1wiO1xyXG5pbXBvcnQgcG9wdXBUeXBlcyBmcm9tIFwiLi9Qb3B1cFR5cGVzXCI7XHJcblxyXG4vKipcclxuICogVGhpcyBpcyB0aGUgcHJlc2VudGF0aW9uYWwgY29tcG9uZW50IHRoYXQgcHJlc2VudHMgZGlmZmVyZW50IHBvcHVwIHZpZXdzIGFjY29yZGluZyB0byB0aGVcclxuICogdmlldyBwcm9wZXJ0eSBpbiB0aGUgcG9wdXBSZWR1Y2VyLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2hvd2luZyB0cnVlIGlmIHRoZSBwb3B1cCBpcyBjdXJyZW50bHkgc2hvd2luZyBvbiB0aGUgc2NyZWVuIGFuZCBmYWxzZSBvdGhlcndpc2VcclxuICogQHBhcmFtIHtKU1h9IGNoaWxkcmVuIGNvbnRlbnQgb2YgdGhlIHBvcHVwXHJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDExLzI1LzIwMjFcclxuICovXHJcbmNvbnN0IFBvcHVwID0gKHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCB7IHZpZXcsIHBheWxvYWQgfSA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUucG9wdXBSZWR1Y2VyKTtcclxuXHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcbiAgICBsZXQgcG9wdXBWaWV3ID0gPD48Lz47XHJcblxyXG4gICAgc3dpdGNoICh2aWV3KSB7XHJcbiAgICAgICAgY2FzZSBwb3B1cFR5cGVzLlN0dWR5R3JvdXAuQ3JlYXRlOlxyXG4gICAgICAgICAgICBwb3B1cFZpZXcgPSA8Q3JlYXRlU3R1ZHlHcm91cFZpZXcgLz47XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgcG9wdXBUeXBlcy5TdHVkeUdyb3VwLkpvaW46XHJcbiAgICAgICAgICAgIHBvcHVwVmlldyA9IDxKb2luU3R1ZHlHcm91cFZpZXcgZ3JvdXA9e3BheWxvYWR9IC8+O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwb3B1cFR5cGVzLlN0dWR5R3JvdXAuSm9pbiwgdmlldywgcG9wdXBUeXBlcy5TdHVkeUdyb3VwLkpvaW4gPT09IHZpZXcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3B1cC13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJiYWNrZ3JvdW5kIFwiICsgKHByb3BzLmlzU2hvd2luZyA/IFwiYWN0aXZlXCIgOiBcIlwiKX1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKGNsb3NlUG9wdXAoKSl9XHJcbiAgICAgICAgICAgID48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wicG9wdXAgXCIgKyAocHJvcHMuaXNTaG93aW5nID8gXCJhY3RpdmVcIiA6IFwiXCIpfT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wdXAtdG9wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgxPnt2aWV3fTwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChjbG9zZVBvcHVwKCkpfT5YPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wdXAtYm9keVwiPnshcHJvcHMuY2hpbGRyZW4gPyBwb3B1cFZpZXcgOiBwcm9wcy5jaGlsZHJlbn08L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9wdXA7XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTm90aWZpY2F0aW9uLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ob3RpZmljYXRpb24uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IHtcclxuICAgIEVSUk9SOiBcIkVSUk9SXCJcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL05vdGlmaWNhdGlvbi5zY3NzXCI7XHJcbmltcG9ydCBub3RpZmljYXRpb25UeXBlcyBmcm9tIFwiLi9ub3RpZmljYXRpb25UeXBlc1wiO1xyXG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgaGlkZU5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XHJcblxyXG5jb25zdCBOb3RpZmljYXRpb24gPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHR5cGUgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLm5vdGlmaWNhdGlvblJlZHVjZXIudHlwZSk7XHJcbiAgICBjb25zdCBtZXNzYWdlID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLm1lc3NhZ2UpO1xyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG5cclxuICAgIHZhciBjbGFzc05hbWUgPSBcIlwiO1xyXG4gICAgdmFyIHRpbWVvdXQ7XHJcblxyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSBub3RpZmljYXRpb25UeXBlcy5FUlJPUjpcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICAgICAgICBjbGFzc05hbWUgPSBcImVycm9yXCI7XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGhpZGVOb3RpZmljYXRpb24oKSk7XHJcbiAgICAgICAgICAgIH0sIDUwMDApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wibm90aWZpY2F0aW9uIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKyAocHJvcHMuaXNTaG93aW5nID8gXCJhY3RpdmVcIiA6IFwiXCIpfT5cclxuICAgICAgICAgICAgPGgxPnttZXNzYWdlIHx8IFwiTm8gTWVzc2FnZVwifTwvaDE+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9uO1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hvbWUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hvbWUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUGFnZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vUGFnZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL1BhZ2Uuc2Nzc1wiO1xyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgYSBwYWdlLlxyXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlciBhbmQgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDEwLzIwLzIwMjFcclxuICovXHJcbmNvbnN0IFBhZ2UgPSAocHJvcHMpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlXCIgey4uLnByb3BzfT5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBhZ2U7XHJcbiIsIi8qKlxyXG4gKiBUaGUgdmFyaW91cyBwb3NzaWJsZSB2aWV3cyB0aGF0IGVhY2ggcGFnZSBjYW4gcHJlc2VudC5cclxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXIgYW5kIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgICAxMC8yMC8yMDIxXHJcbiAqL1xyXG5jb25zdCBWaWV3cyA9IHtcclxuICAgIEhvbWU6IHtcclxuICAgICAgICBMb2dpbjogXCJMb2dpblwiLFxyXG4gICAgICAgIEZvcmdvdFBhc3N3b3JkOiBcIkZvcmdvdCBwYXNzd29yZFwiLFxyXG4gICAgICAgIENyZWF0ZUFjY291bnQ6IFwiQ3JlYXRlIGFjY291bnRcIixcclxuICAgICAgICBWZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvbjogXCJWZXJpZmljYXRpb24gZW1haWwgY29uZmlybWF0aW9uXCIsXHJcbiAgICAgICAgQWNjb3VudFNldHVwOiBcIkFjY291bnQgc2V0dXBcIlxyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVmlld3M7XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTG9naW5Gb3JtLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2dpbkZvcm0uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vTG9naW5Gb3JtLnNjc3NcIjtcclxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uLmpzXCI7XHJcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcclxuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtLmpzXCI7XHJcbmltcG9ydCBJbnB1dEZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL0lucHV0RmllbGQvSW5wdXRGaWVsZC5qc1wiO1xyXG5pbXBvcnQgTGFiZWwgZnJvbSBcIi4uLy4uL2NvcmUvTGFiZWwvTGFiZWwuanNcIjtcclxuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXMuanNcIjtcclxuaW1wb3J0IFRleHRJbnB1dCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dHMvVGV4dElucHV0L1RleHRJbnB1dC5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgYSBsb2dpbiBmb3JtLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMuZW1haWwgVGhlIGVtYWlsIGFkZHJlc3MgaW4gdGhlIGZvcm0uXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcy5wYXNzd29yZCBUaGUgcGFzc3dvcmQgaW4gdGhlIGZvcm0uXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnN1Ym1pdExvZ2luIFVzZWQgdG8gc3VibWl0IHRoZSBsb2dpbiBmb3JtLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVFbWFpbEZpZWxkIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgZW1haWwgYWRkcmVzcy5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMudXBkYXRlUGFzc3dvcmRGaWVsZCBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIHBhc3N3b3JkLlxyXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gKiBAZGF0ZSAgIDEwLzIxLzIwMjFcclxuICovXHJcbmNvbnN0IExvZ2luRm9ybSA9IChwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luLWZvcm1cIj5cclxuICAgICAgICAgICAgPEZvcm0gb25TdWJtaXQ9e3Byb3BzLnN1Ym1pdExvZ2lufT5cclxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5FbWFpbDwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17cHJvcHMuZW1haWx9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVFbWFpbEZpZWxkfSB0eXBlPVwiZW1haWxcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPlBhc3N3b3JkPC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5wYXNzd29yZH0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZVBhc3N3b3JkRmllbGR9IHR5cGU9XCJwYXNzd29yZFwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICB7Lyoge3Byb3BzLmxvZ2luRGlkRmFpbH0gKi99XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9PlNpZ24gaW48L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9Gb3JtPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvZ2luRm9ybTtcclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9BdXRoVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXV0aFZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi9BdXRoVmlldy5zY3NzXCI7XHJcblxyXG5jb25zdCBBdXRoVmlldyA9IChwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImF1dGgtdmlld1wiPlxyXG4gICAgICAgICAgICA8aDE+U3R1ZHkgU3BhY2VzPC9oMT5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJlcnJvci1tZXNzYWdlXCI+e3Byb3BzLmVyck1zZ308L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXV0aFZpZXc7XHJcbiIsImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IHNpZ25Jbiwgc2lnbk91dCwgc2hvd0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcclxuXHJcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXMuanNcIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uLmpzXCI7XHJcbmltcG9ydCBMb2dpbkZvcm0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvTG9naW5Gb3JtL0xvZ2luRm9ybS5qc1wiO1xyXG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzLmpzXCI7XHJcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzXCI7XHJcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFZpZXdzIGZyb20gXCIuLi8uLi9WaWV3cy5qc1wiO1xyXG5pbXBvcnQgTGFiZWwgZnJvbSBcIi4uLy4uLy4uL2NvcmUvTGFiZWwvTGFiZWxcIjtcclxuaW1wb3J0IEF1dGhWaWV3IGZyb20gXCIuLi9BdXRoVmlld1wiO1xyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gZGlzcGxheSB0aGUgbG9naW4gZm9ybSBhbmQgbG9nIHRoZSB1c2VyIGluLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjbGllbnRTaWRlTG9naW4gVXNlZCB0byBsb2cgdGhlIHVzZXIgaW4gZnJvbSB0aGUgY2xpZW50LXNpZGUgcGVyc3BlY3RpdmUuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNsaWVudFNpZGVMb2dvdXQgVXNlZCB0byBsb2cgdGhlIHVzZXIgb3V0IGZyb20gdGhlIGNsaWVudC1zaWRlIHBlcnNwZWN0aXZlLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZXRIb21lVmlldyBVc2VkIHRvIHNldCB0aGUgdmlldyBvZiB0aGUgaG9tZSBwYWdlLCBpZiB0aGUgdXNlciBwcmVzc2VzIHRoZSBjcmVhdGUgYWNjb3VudCBidXR0b25cclxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXIgYW5kIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAqL1xyXG5jb25zdCBMb2dpblZpZXcgPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IEJMQU5LID0gXCJcIjtcclxuICAgIGNvbnN0IFtlbWFpbCwgc2V0RW1haWxdID0gdXNlU3RhdGUoQkxBTkspO1xyXG4gICAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZShCTEFOSyk7XHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJtaXRzIHRoZSBsb2dpbiByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgZm9yIHZlcmlmaWNhdGlvbi5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBmb3JtIHN1Ym1pc3Npb24gZXZlbnQgdGhhdCB0cmlnZ2VycyB0aGUgbG9naW4uXHJcbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gICAgICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHN1Ym1pdExvZ2luID0gYXN5bmMgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy8gUFJFVkVOVCBUSEUgREVGQVVMVCBGT1JNIFNVQk1JU1NJT04gQkVIQVZJT1IuXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgLy8gU1VCTUlUIFRIRSBMT0dJTiBSRVFVRVNULlxyXG4gICAgICAgIGxldCByZXNwb25zZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoUm91dGVzLkFjY291bnQuTG9naW4sIHtcclxuICAgICAgICAgICAgICAgIGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICBkaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24oXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGNvbm5lY3RpbmcgdG8gdGhlIHNlcnZlcjpcIiArIGVycm9yKSk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgLy8gSUYgVEhFIExPR0lOIFJFUVVFU1QgSEFTIFJFQ0VJVkVEIEEgUkVTUE9OU0UsIENIRUNLIElGIFRIRSBVU0VSIEhBUyBCRUVOIExPR0dFRCBJTi5cclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VJc0RlZmluZWQgPSBWYWxpZGF0b3IuaXNEZWZpbmVkKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlSXNEZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJRiBUSEUgVVNFUiBIQVMgTE9HR0VEIElOLCBDT05GSUdVUkUgVEhFIENMSUVOVCBUTyBSRUZMRUNUIFRISVMuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBsb2dpbldhc1ZhbGlkID0gUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlN1Y2Nlc3NMb2dpbiA9PT0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvZ2luV2FzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGF1dGhlbnRpY2F0aW9uVG9rZW4sIGF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZSwgdXNlciwgc3R1ZHlHcm91cHMgfSA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goc2lnbkluKHsgYXV0aGVudGljYXRpb25Ub2tlbiwgYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlLCB1c2VyIH0pKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKHJlc3BvbnNlLmRhdGEubWVzc2FnZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNpZ25PdXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBlbWFpbCBmaWVsZCBpbiB0aGUgbG9naW4gZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gICAgICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZUVtYWlsRmllbGQgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldEVtYWlsKGUudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgcGFzc3dvcmQgZmllbGQgaW4gdGhlIGxvZ2luIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICAgICAqIEBkYXRlICAgMTAvMjEvMjAyMVxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVQYXNzd29yZEZpZWxkID0gKGUpID0+IHtcclxuICAgICAgICBzZXRQYXNzd29yZChlLnRhcmdldC52YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgaG9tZSB2aWV3IHRvIHRoZSBzaWduIHVwIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcclxuICAgICAqL1xyXG4gICAgY29uc3Qgc2lnblVwQ2xpY2tlZCA9IChlKSA9PiB7XHJcbiAgICAgICAgcHJvcHMuc2V0SG9tZVZpZXcoVmlld3MuSG9tZS5DcmVhdGVBY2NvdW50KTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8QXV0aFZpZXc+XHJcbiAgICAgICAgICAgIDxMb2dpbkZvcm1cclxuICAgICAgICAgICAgICAgIGVtYWlsPXtlbWFpbH1cclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkPXtwYXNzd29yZH1cclxuICAgICAgICAgICAgICAgIHN1Ym1pdExvZ2luPXtzdWJtaXRMb2dpbn1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVtYWlsRmllbGQ9e3VwZGF0ZUVtYWlsRmllbGR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVQYXNzd29yZEZpZWxkPXt1cGRhdGVQYXNzd29yZEZpZWxkfVxyXG4gICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvdGhlci1vcHRpb25zXCI+XHJcbiAgICAgICAgICAgICAgICA8cD5Eb24ndCBoYXZlIGFuIGFjY291bnQ/PC9wPlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0gb25DbGljaz17c2lnblVwQ2xpY2tlZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgU2lnbiBVcFxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvQXV0aFZpZXc+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTG9naW5WaWV3O1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NyZWF0ZUFjY291bnRGb3JtLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DcmVhdGVBY2NvdW50Rm9ybS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9DcmVhdGVBY2NvdW50Rm9ybS5zY3NzXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xyXG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XHJcblxyXG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vY29yZS9Gb3JtL0Zvcm0uanNcIjtcclxuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkLmpzXCI7XHJcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbC5qc1wiO1xyXG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlcy5qc1wiO1xyXG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0LmpzXCI7XHJcblxyXG4vKipcclxuICogUmVuZGVycyBhIGNyZWF0ZSBhY2NvdW50IGZvcm0uXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcy5lbWFpbCBUaGUgZW1haWwgYWRkcmVzcyBpbiB0aGUgZm9ybS5cclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnBhc3N3b3JkIFRoZSBwYXNzd29yZCBpbiB0aGUgZm9ybS5cclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLmNvbmZpcm1QYXNzd29yZCBUaGUgdmFsdWUgb2YgdGhlIGNvbmZpcm0gcGFzc3dvcmQgZmllbGQgaW4gdGhlIGZvcm0uXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnN1Ym1pdEFjY291bnRDcmVhdGlvbiBVc2VkIHRvIHN1Ym1pdCB0aGUgQWNjb3VudENyZWF0aW9uIGZvcm0uXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnVwZGF0ZUVtYWlsRmllbGQgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSBlbWFpbCBhZGRyZXNzLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVQYXNzd29yZEZpZWxkIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgcGFzc3dvcmQuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnVwZGF0ZUNvbmZpcm1QYXNzd29yZEZpZWxkIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgY29uZmlybSBwYXNzd29yZC5cclxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqIEBkYXRlICAgMTEvMTAvMjAyMVxyXG4gKi9cclxuY29uc3QgQ3JlYXRlQWNjb3VudEZvcm0gPSAocHJvcHMpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjcmVhdGUtYWNjb3VudC1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtwcm9wcy5zdWJtaXRBY2NvdW50Q3JlYXRpb259PlxyXG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPkVtYWlsPC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5lbWFpbH0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUVtYWlsRmllbGR9IHR5cGU9XCJlbWFpbFwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+UGFzc3dvcmQ8L0xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3Byb3BzLnBhc3N3b3JkfSBvbkNoYW5nZT17cHJvcHMudXBkYXRlUGFzc3dvcmRGaWVsZH0gdHlwZT1cInBhc3N3b3JkXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Db25maXJtIFBhc3N3b3JkPC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy5jb25maXJtUGFzc3dvcmR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVDb25maXJtUGFzc3dvcmRGaWVsZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxyXG5cclxuICAgICAgICAgICAgICAgIHtwcm9wcy5sb2dpbkRpZEZhaWx9XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5OZXh0PC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvRm9ybT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVBY2NvdW50Rm9ybTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgY3JlYXRlQWNjb3VudCwgc2hvd0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcclxuaW1wb3J0IENyZWF0ZUFjY291bnRGb3JtIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL0NyZWF0ZUFjY291bnRGb3JtL0NyZWF0ZUFjY291bnRGb3JtXCI7XHJcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzXCI7XHJcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXMuanNcIjtcclxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlcy5qc1wiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b24uanNcIjtcclxuaW1wb3J0IFZpZXdzIGZyb20gXCIuLi8uLi9WaWV3cy5qc1wiO1xyXG5cclxuaW1wb3J0IEF1dGhWaWV3IGZyb20gXCIuLi9BdXRoVmlld1wiO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdmlldyBwcmVzZW50cyB0aGUgY3JlYXRlIGFjY291bnQgZm9ybSBvbiB0aGUgaG9tZSBwYWdlXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHNldEhvbWVWaWV3IFVzZWQgdG8gc2V0IHRoZSB2aWV3IG9mIHRoaXMgcGFnZSwgaWYgdGhlIHVzZXIgcHJlc3NlcyB0aGUgbG9nIGluIGJ1dHRvblxyXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAqL1xyXG5jb25zdCBDcmVhdGVBY2NvdW50VmlldyA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgQkxBTksgPSBcIlwiO1xyXG4gICAgY29uc3QgW2VtYWlsLCBzZXRFbWFpbF0gPSB1c2VTdGF0ZShCTEFOSyk7XHJcbiAgICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKEJMQU5LKTtcclxuICAgIGNvbnN0IFtjb25maXJtUGFzc3dvcmQsIHNldENvbmZpcm1QYXNzd29yZF0gPSB1c2VTdGF0ZShCTEFOSyk7XHJcblxyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3VibWl0cyB0aGUgY3JlYXRlIGFjY291bnQgcmVxdWVzdCB0byB0aGUgc2VydmVyIGZvciB2ZXJpZmljYXRpb24uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZm9ybSBzdWJtaXNzaW9uIGV2ZW50IHRoYXQgdHJpZ2dlcnMgdGhlIGxvZ2luLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcclxuICAgICAqL1xyXG4gICAgY29uc3Qgc3VibWl0QWNjb3VudENyZWF0aW9uID0gYXN5bmMgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy8gUFJFVkVOVCBUSEUgREVGQVVMVCBGT1JNIFNVQk1JU1NJT04gQkVIQVZJT1IuXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgLy8gRklSU1QsIENPTVBBUkUgVEhFIFBBU1NXT1JEIEFORCBDT05GSVJNIFBBU1NXT1JEIEZJRUxEU1xyXG4gICAgICAgIGlmIChwYXNzd29yZCAhPT0gY29uZmlybVBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIlBhc3N3b3JkcyBkb24ndCBtYXRjaFwiKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNVQk1JVCBUSEUgQ1JFQVRFIEFDQ09VTlQgUkVRVUVTVC4gKFRlc3QgaW4gUG9zdG1hbilcclxuICAgICAgICBsZXQgcmVzcG9uc2U7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KFJvdXRlcy5BY2NvdW50LkNyZWF0ZUFjY291bnQsIHtcclxuICAgICAgICAgICAgICAgIGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQsXHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZF9jb25maXJtYXRpb246IGNvbmZpcm1QYXNzd29yZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIlRoZXJlIHdhcyBhIHByb2JsZW0gY29ubmVjdGluZyB0byB0aGUgc2VydmVyOlwiICsgZXJyb3IpKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICAvLyBJRiBUSEUgTE9HSU4gUkVRVUVTVCBIQVMgUkVDRUlWRUQgQSBSRVNQT05TRSwgQ0hFQ0sgSUYgVEhFIFVTRVIgSEFTIEJFRU4gTE9HR0VEIElOLlxyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUlzRGVmaW5lZCA9IFZhbGlkYXRvci5pc0RlZmluZWQocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlSXNEZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJRiBUSEUgQUNDT1VOVCBDUkVBVElPTiBXQVMgU1VDQ0VTU0ZVTCwgQ09ORklHVVJFIFRIRSBDTElFTlQgVE8gUkVGTEVDVCBUSElTLlxyXG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudENyZWF0aW9uV2FzVmFsaWQgPVxyXG4gICAgICAgICAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzQWNjb3VudENyZWF0ZWQgPT09IHJlc3BvbnNlLmRhdGEubWVzc2FnZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYWNjb3VudENyZWF0aW9uV2FzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIHRoZSB1bnZlcmlmaWVkIHVzZXIgaW4gc3RhdGUgKHVzaW5nIGRpc3BhdGNoKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgaG9tZSB2aWV3IHRvIHRoZSBjaGVjayBlbWFpbCBzY3JlZW5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW52ZXJpZmllZFVzZXIgPSByZXNwb25zZS5kYXRhLnVudmVyaWZpZWRVc2VyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChjcmVhdGVBY2NvdW50KHVudmVyaWZpZWRVc2VyKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnNldEhvbWVWaWV3KFZpZXdzLkhvbWUuVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24oXCJUaGVyZSB3YXMgYW4gZXJyb3JcIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBlbWFpbCBmaWVsZCBpbiB0aGUgY3JlYXRlIGFjY291bnQgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcclxuICAgICAqIEBkYXRlICAgMTAvMjEvMjAyMVxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVFbWFpbEZpZWxkID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0RW1haWwoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgcGFzc3dvcmQgZmllbGQgaW4gdGhlIGNyZWF0ZSBhY2NvdW50IGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXHJcbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlUGFzc3dvcmRGaWVsZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldFBhc3N3b3JkKGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNvbmZpcm0gcGFzc3dvcmQgZmllbGQgaW4gdGhlIGNyZWF0ZSBhY2NvdW50IGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZUNvbmZpcm1QYXNzd29yZEZpZWxkID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0Q29uZmlybVBhc3N3b3JkKGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgaG9tZSB2aWV3IHRvIHRoZSBzaWduIGluIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHNpZ25JbkNsaWNrZWQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBwcm9wcy5zZXRIb21lVmlldyhWaWV3cy5Ib21lLkxvZ2luKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8QXV0aFZpZXc+XHJcbiAgICAgICAgICAgIDxwPkNyZWF0ZSBZb3VyIEFjY291bnQ8L3A+XHJcbiAgICAgICAgICAgIDxDcmVhdGVBY2NvdW50Rm9ybVxyXG4gICAgICAgICAgICAgICAgZW1haWw9e2VtYWlsfVxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ9e3Bhc3N3b3JkfVxyXG4gICAgICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkPXtjb25maXJtUGFzc3dvcmR9XHJcbiAgICAgICAgICAgICAgICBzdWJtaXRBY2NvdW50Q3JlYXRpb249e3N1Ym1pdEFjY291bnRDcmVhdGlvbn1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUVtYWlsRmllbGQ9e3VwZGF0ZUVtYWlsRmllbGR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVQYXNzd29yZEZpZWxkPXt1cGRhdGVQYXNzd29yZEZpZWxkfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlQ29uZmlybVBhc3N3b3JkRmllbGQ9e3VwZGF0ZUNvbmZpcm1QYXNzd29yZEZpZWxkfVxyXG4gICAgICAgICAgICAvPlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvdGhlci1vcHRpb25zXCI+XHJcbiAgICAgICAgICAgICAgICA8cD5BbHJlYWR5IGhhdmUgYW4gYWNjb3VudD88L3A+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9IG9uQ2xpY2s9e3NpZ25JbkNsaWNrZWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIFNpZ24gSW5cclxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0F1dGhWaWV3PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENyZWF0ZUFjY291bnRWaWV3O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCBWaWV3cyBmcm9tIFwiLi4vLi4vVmlld3NcIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XHJcbmltcG9ydCBBdXRoVmlldyBmcm9tIFwiLi4vQXV0aFZpZXdcIjtcclxuXHJcbi8qKlxyXG4gKiBPbmNlIGEgdXNlciBjcmVhdGVzIGFuIGFjY291bnQsIHRoaXMgdmlldyB3aWxsIGJlIGRpc3BsYXllZCBvbiB0aGUgaG9tZSBwYWdlIHRvIGluZGljYXRlIHRoYXQgdGhlIHVzZXIgbmVlZHMgdG8gdmVyaWZ5IHRoZSBhY2NvdW50IHRvIGNvbnRpbnVlIHNldHRpbmcgaXQgdXBcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2V0SG9tZVZpZXcgVXNlZCB0byBzZXQgdGhlIHZpZXcgb2YgdGhlIGhvbWUgcGFnZSwgaWYgdGhlIHVzZXIgcHJlc3NlcyB0aGUgbG9nIGluIGJ1dHRvblxyXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgICAxMS8wMi8yMDIxXHJcbiAqL1xyXG5jb25zdCBWZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvblZpZXcgPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHVudmVyaWZpZWRVc2VyID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlci51bnZlcmlmaWVkVXNlcik7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxBdXRoVmlldz5cclxuICAgICAgICAgICAgPGgxPllvdSdyZSBhbG1vc3QgdGhlcmUhPC9oMT5cclxuICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICBDaGVjayB5b3VyIGVtYWlsOiA8c3Ryb25nPnt1bnZlcmlmaWVkVXNlci5lbWFpbH08L3N0cm9uZz4gZm9yIGEgbGluayB0byBjb250aW51ZSB0aGUgc2lnbnVwIHByb2Nlc3NcclxuICAgICAgICAgICAgPC9wPlxyXG5cclxuICAgICAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnNldEhvbWVWaWV3KFZpZXdzLkhvbWUuTG9naW4pO1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgUmV0dXJuXHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgIDwvQXV0aFZpZXc+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb25WaWV3O1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FjY291bnRTZXR1cEZvcm0uc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FjY291bnRTZXR1cEZvcm0uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi9BY2NvdW50U2V0dXBGb3JtLnNjc3NcIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uLmpzXCI7XHJcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcclxuaW1wb3J0IEZpbGVCYXNlNjQgZnJvbSBcInJlYWN0LWZpbGUtYmFzZTY0XCI7XHJcbmltcG9ydCBGb3JtIGZyb20gXCIuLi8uLi9jb3JlL0Zvcm0vRm9ybS5qc1wiO1xyXG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGQuanNcIjtcclxuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi9jb3JlL0xhYmVsL0xhYmVsLmpzXCI7XHJcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzXCI7XHJcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXQuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBSZW5kZXJzIGFuIGFjY291bnQgc2V0dXAgZm9ybS5cclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLm5hbWUgVGhlIHZhbHVlIG9mIHRoZSBmdWxsIG5hbWUgZmllbGQgaW4gdGhlIGZvcm1cclxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLmFyZWFDb2RlIFRoZSB2YWx1ZSBvZiB0aGUgYXJlYSBjb2RlIGZpZWxkIGluIHRoZSBmb3JtXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJvcHMuaXMxOE9yT3ZlciBUaGUgdmFsdWUgb2YgdGhlIGlzIDE4IG9yIG92ZXIgc3dpdGNoIGluIHRoZSBmb3JtLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMucHJvZmlsZVBpY3R1cmUgdGhlIGJpbmFyeSB2YWx1ZSBvZiB0aGUgdXBsb2FkZWQgcHJvZmlsZSBwaWN0dXJlXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnN1Ym1pdEFjY291bnRTZXR1cCBVc2VkIHRvIHN1Ym1pdCB0aGUgQWNjb3VudCBTZXR1cCBmb3JtLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVOYW1lRmllbGQgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSBuYW1lIHZhbHVlLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVBcmVhQ29kZUZpZWxkIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgYXJlYSBjb2RlIHZhbHVlLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVJczE4T3JPdmVyIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgdmFsdWUgb2YgdGhlIGlzIDE4IG9yIG92ZXIgc3dpdGNoLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVQcm9maWxlUGljdHVyZSBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIHByb2ZpbGUgcGljdHVyZS5cclxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqIEBkYXRlICAgMTEvMTAvMjAyMVxyXG4gKi9cclxuY29uc3QgQWNjb3VudFNldHVwRm9ybSA9IChwcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8Rm9ybSBvblN1Ym1pdD17cHJvcHMuc3VibWl0QWNjb3VudFNldHVwfT5cclxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5GdWxsIE5hbWU8L0xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3Byb3BzLm5hbWV9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVOYW1lRmllbGR9IHR5cGU9XCJ0ZXh0XCIgLz5cclxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cclxuXHJcbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+QXJlYSBDb2RlPC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5hcmVhQ29kZX0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUFyZWFDb2RlRmllbGR9IHR5cGU9XCJ0ZXh0XCIgLz5cclxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5saW5lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbCBjbGFzc05hbWU9XCJsZWZ0IExhYmVsXCI+QXJlIHlvdSAxOCBvciBvbGRlcjwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJpZ2h0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy5pczE4T3JPdmVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUlzMThPck92ZXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPlByb2ZpbGUgUGljdHVyZTwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwaG90b1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJmaWxlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiZmlsZUlucHV0IHJpZ2h0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdD1cIi5wbmcsIC5qcGcsIC5qcGVnXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJwcm9maWxlUGljdHVyZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMudXBkYXRlUHJvZmlsZVBpY3R1cmV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImltZ1ByZXZpZXdcIiBpZD1cImxlZnRcIiBzcmM9e3Byb3BzLnByb2ZpbGVQaWN0dXJlfSBhbHQ9XCJcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxyXG5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259PkNyZWF0ZSBBY2NvdW50PC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvRm9ybT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBY2NvdW50U2V0dXBGb3JtO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgQWNjb3VudFNldHVwRm9ybSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9BY2NvdW50U2V0dXBGb3JtL0FjY291bnRTZXR1cEZvcm1cIjtcclxuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi8uLi9jb3JlL0xhYmVsL0xhYmVsXCI7XHJcbmltcG9ydCB7IHVzZVBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XHJcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBzaWduSW4sIHNob3dFcnJvck5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xyXG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XHJcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3JcIjtcclxuaW1wb3J0IFZpZXdzIGZyb20gXCIuLi8uLi9WaWV3c1wiO1xyXG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGRcIjtcclxuaW1wb3J0IEF1dGhWaWV3IGZyb20gXCIuLi9BdXRoVmlld1wiO1xyXG5cclxuLyoqXHJcbiAqIE9uY2UgdGhlIHVzZXIgaGFzIHZlcmlmaWVkIHRoZWlyIGFjY291bnQgYW5kIGNsaWNrZWQgdGhlIGxpbmssIHRoaXMgdmlldyBpcyB1c2VkIHRvIHByZXNlbnQgdGhlIGFjb3VudCBzZXR1cCBmb3JtIHNvIHRoZXkgY2FuIG9mZmljYWxseSBjcmVhdGUgdGhlaXIgYWNjb3VudCBvbiB0aGUgaG9tZSBwYWdlXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHNldEhvbWVWaWV3IFVzZWQgdG8gc2V0IHRoZSB2aWV3IG9mIHRoaXMgcGFnZSwgaWYgdGhlIHVzZXIgcHJlc3NlcyB0aGUgbG9nIGluIGJ1dHRvblxyXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgICAxMC8yMS8yMDIxXHJcbiAqL1xyXG5jb25zdCBBY2NvdW50U2V0dXBWaWV3ID0gKHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCBCTEFOSyA9IFwiXCI7XHJcbiAgICBjb25zdCBbdXNlcklzVmVyaWZpZWQsIHNldFVzZXJJc1ZlcmlmaWVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtuYW1lLCBzZXROYW1lXSA9IHVzZVN0YXRlKEJMQU5LKTtcclxuICAgIGNvbnN0IFthcmVhQ29kZSwgc2V0QXJlYUNvZGVdID0gdXNlU3RhdGUoQkxBTkspO1xyXG4gICAgY29uc3QgW2lzMThPck92ZXIsIHNldElzMThPck92ZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgW3Byb2ZpbGVQaWN0dXJlLCBzZXRQcm9maWxlUGljdHVyZV0gPSB1c2VTdGF0ZShCTEFOSyk7XHJcbiAgICBjb25zdCBbYWNjb3VudFNldHVwRXJyb3JNc2csIHNldEFjY291bnRTZXR1cEVycm9yTXNnXSA9IHVzZVN0YXRlKEJMQU5LKTtcclxuICAgIGNvbnN0IFt1c2VyLCBzZXRVc2VyXSA9IHVzZVN0YXRlKHt9KTtcclxuICAgIGNvbnN0IHZlcmlmaWNhdGlvblRva2VuID0gcHJvcHMudmVyaWZpY2F0aW9uVG9rZW47XHJcblxyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG5cclxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgdmVyaWZ5VXNlcih2ZXJpZmljYXRpb25Ub2tlbik7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHZlcmlmeSB0aGUgdXNlciBhc3NvY2lhdGVkIHdpdGggdGhlIHRva2VuIHRoYXQgd2FzIHJlY2VpdmVkIGZyb20gdGhlIGxpbmtcclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIFRoZSB2ZXJpZmljYXRpb24gdG9rZW5cclxuICAgICAqIEBkYXRlICAgMTEvMTMvMjFcclxuICAgICAqL1xyXG4gICAgY29uc3QgdmVyaWZ5VXNlciA9IGFzeW5jICh2ZXJpZmljYXRpb25Ub2tlbikgPT4ge1xyXG4gICAgICAgIC8vIFNVQk1JVCBUSEUgVkVSSUZZIFVTRVIgUkVRVUVTVC5cclxuICAgICAgICBsZXQgcmVzcG9uc2U7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KFJvdXRlcy5BY2NvdW50LkdldFVudmVyaWZpZWRVc2VyLCB7XHJcbiAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25Ub2tlbjogdmVyaWZpY2F0aW9uVG9rZW5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSXNEZWZpbmVkID0gVmFsaWRhdG9yLmlzRGVmaW5lZChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZUlzRGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSUYgVEhFIFVTRVIgVkVSSUZJQ0FUSU9OIFdBUyBTVUNDRVNTRlVMLCBDT05GSUdVUkUgVEhFIENMSUVOVCBUTyBSRUZMRUNUIFRISVMuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJpZmljYXRpb25XYXNWYWxpZCA9IFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5VbnZlcmlmaWVkVXNlcldhc0ZvdW5kID09PSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZlcmlmaWNhdGlvbldhc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VXNlcihyZXNwb25zZS5kYXRhLnVudmVyaWZpZWRVc2VyKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRVc2VySXNWZXJpZmllZCh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyB0aGUgcmVxdWVzdCB0byB0aGUgc2VydmVyIGZvciB0aGUgbmV3IChjb21wbGV0ZSkgdXNlciB0byBiZSBjcmVhdGVkIHdpdGggdGhlIHByb3ZpZGVkIGluZm9ybWF0aW9uXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTEvMTMvMjFcclxuICAgICAqL1xyXG4gICAgY29uc3Qgc3VibWl0QWNjb3VudFNldHVwID0gYXN5bmMgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy8gU1VCTUlUIFRIRSBDUkVBVEUgQUNDT1VOVCBSRVFVRVNULlxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGlmICghaXMxOE9yT3Zlcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5PVCAxOFwiKTtcclxuICAgICAgICAgICAgZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiWW91IG5lZWQgdG8gYmUgMTggb3Igb2xkZXIgdG8gc2lnbiB1cFwiKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXNwb25zZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJwcm9maWxlUGljdHVyZVwiLCBwcm9maWxlUGljdHVyZSk7XHJcbiAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChcInZlcmlmaWNhdGlvblRva2VuXCIsIHZlcmlmaWNhdGlvblRva2VuKTtcclxuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwidXNlclwiLCB1c2VyKTtcclxuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwibmFtZVwiLCBuYW1lKTtcclxuICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiYXJlYUNvZGVcIiwgYXJlYUNvZGUpO1xyXG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJpczE4T3JPdmVyXCIsIGlzMThPck92ZXIpO1xyXG5cclxuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KFJvdXRlcy5BY2NvdW50LlNldHVwQWNjb3VudCwgZm9ybURhdGEsIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcIm11bHRpcGFydC9mb3JtLWRhdGFcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIlRoZXJlIHdhcyBhIHByb2JsZW0gY29ubmVjdGluZyB0byB0aGUgc2VydmVyOlwiICsgZXJyb3IpKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICAvLyBJRiBUSEUgTE9HSU4gUkVRVUVTVCBIQVMgUkVDRUlWRUQgQSBSRVNQT05TRSwgQ0hFQ0sgSUYgVEhFIFVTRVIgSEFTIEJFRU4gTE9HR0VEIElOLlxyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUlzRGVmaW5lZCA9IFZhbGlkYXRvci5pc0RlZmluZWQocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlSXNEZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJRiBUSEUgQUNDT1VOVCBDUkVBVElPTiBXQVMgU1VDQ0VTU0ZVTCwgQ09ORklHVVJFIFRIRSBDTElFTlQgVE8gUkVGTEVDVCBUSElTLlxyXG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudFNldHVwV2FzVmFsaWQgPSBSZXNwb25zZU1lc3NhZ2VzLkFjY291bnQuU3VjY2Vzc0FjY291bnRTZXR1cCA9PT0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50U2V0dXBXYXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNpZ25JbihyZXNwb25zZS5kYXRhKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihyZXNwb25zZS5kYXRhLm1lc3NhZ2UpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIlRoZXJlIHdhcyBhIHByb2JsZW0gY3JlYXRpbmcgeW91ciBhY2NvdW50XCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBob21lIHZpZXcgdG8gdGhlIHNpZ24gaW4gZm9ybS5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAxMS8xMy8yMVxyXG4gICAgICovXHJcbiAgICBjb25zdCBzaWduSW5DbGlja2VkID0gKCkgPT4ge1xyXG4gICAgICAgIHByb3BzLnNldEhvbWVWaWV3KFZpZXdzLkhvbWUuTG9naW4pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBmdWxsIG5hbWUgZmllbGQgaW4gdGhlIHNldHVwIGFjY291bnQgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDExLzEzLzIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZU5hbWVGaWVsZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldE5hbWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgZnVsbCBuYW1lIGZpZWxkIGluIHRoZSBzZXR1cCBhY2NvdW50IGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgICAxMS8xMy8yMVxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVBcmVhQ29kZUZpZWxkID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0QXJlYUNvZGUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgZGF0ZSBvZiBiaXJ0aCBmaWVsZCBpbiB0aGUgc2V0dXAgYWNjb3VudCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTEvMTMvMjFcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlSXMxOE9yT3ZlciA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHNldElzMThPck92ZXIoZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBmdWxsIG5hbWUgZmllbGQgaW4gdGhlIHNldHVwIGFjY291bnQgZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgIDExLzEzLzIxXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZVByb2ZpbGVQaWN0dXJlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0UHJvZmlsZVBpY3R1cmUoZXZlbnQudGFyZ2V0LmZpbGVzWzBdKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8QXV0aFZpZXc+XHJcbiAgICAgICAgICAgIDxoMz5TZXR1cCBZb3VyIEFjY291bnQ8L2gzPlxyXG4gICAgICAgICAgICA8cD57dXNlci5lbWFpbH08L3A+XHJcbiAgICAgICAgICAgIHt1c2VySXNWZXJpZmllZCA/IChcclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPEFjY291bnRTZXR1cEZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcj17dXNlcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17bmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJlYUNvZGU9e2FyZWFDb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpczE4T3JPdmVyPXtpczE4T3JPdmVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlUGljdHVyZT17cHJvZmlsZVBpY3R1cmV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5hbWVGaWVsZD17dXBkYXRlTmFtZUZpZWxkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBcmVhQ29kZUZpZWxkPXt1cGRhdGVBcmVhQ29kZUZpZWxkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVJczE4T3JPdmVyPXt1cGRhdGVJczE4T3JPdmVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVQcm9maWxlUGljdHVyZT17dXBkYXRlUHJvZmlsZVBpY3R1cmV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEFjY291bnRTZXR1cD17c3VibWl0QWNjb3VudFNldHVwfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXJyb3ItbWVzc2FnZVwiPnthY2NvdW50U2V0dXBFcnJvck1zZ308L3A+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgIDxoMT5Zb3Ugc2hvdWxkbid0IGJlIGhlcmUhPC9oMT5cclxuICAgICAgICAgICAgKX1cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3RoZXItb3B0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgPHA+QWxyZWFkeSBoYXZlIGFuIGFjY291bnQ/PC9wPlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0gb25DbGljaz17c2lnbkluQ2xpY2tlZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgU2lnbiBJblxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvQXV0aFZpZXc+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBBY2NvdW50U2V0dXBWaWV3O1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW1wb3J0IFwiLi9Ib21lLnNjc3NcIjtcclxuXHJcbmltcG9ydCBQYWdlIGZyb20gXCIuLi9QYWdlLmpzXCI7XHJcbmltcG9ydCBWaWV3cyBmcm9tIFwiLi4vLi4vVmlld3MvVmlld3MuanNcIjtcclxuXHJcbi8vIElNUE9SVCBWSUVXUyBGT1IgVEhJUyBQQUdFLlxyXG5pbXBvcnQgTG9naW5WaWV3IGZyb20gXCIuLi8uLi9WaWV3cy9Ib21lL0xvZ2luVmlldy9Mb2dpblZpZXdcIjtcclxuaW1wb3J0IENyZWF0ZUFjY291bnRWaWV3IGZyb20gXCIuLi8uLi9WaWV3cy9Ib21lL0NyZWF0ZUFjY291bnRWaWV3L0NyZWF0ZUFjY291bnRWaWV3XCI7XHJcbmltcG9ydCBWZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvblZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL0hvbWUvVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb25WaWV3L1ZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uVmlld1wiO1xyXG5pbXBvcnQgQWNjb3VudFNldHVwVmlldyBmcm9tIFwiLi4vLi4vVmlld3MvSG9tZS9BY2NvdW50U2V0dXBWaWV3L0FjY291bnRTZXR1cFZpZXdcIjtcclxuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1ZhbGlkYXRvci5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBob21lIHBhZ2Ugb2YgdGhlIGFwcGxpY2F0aW9uLiBUaGlzIGlzIHNob3duIHdoZW4gdGhlIHVzZXIgaGFzIG5vdCBsb2dnZWQgaW4uXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNsaWVudFNpZGVMb2dpbiBUaGUgZnVuY3Rpb24gdXNlZCB0byBsb2cgaW4gYSB1c2VyIGZyb20gdGhlIGNsaWVudC1zaWRlIHBlcnNwZWN0aXZlLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjbGllbnRTaWRlTG9nb3V0IFRoZSBmdW5jdGlvbiB1c2VkIHRvIGxvZyBvdXQgYSB1c2VyIGZyb20gdGhlIGNsaWVudC1zaWRlIHBlcnNwZWN0aXZlLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaG9tZVZpZXcgVGhlIHZpZXcgdGhhdCBpcyBzdXBwb3NlZCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGhvbWUgcGFnZSwgZGVmaW5lZCBpbiBWaWV3cy5qc1xyXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlciBhbmQgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDEwLzIwLzIwMjFcclxuICovXHJcbmNvbnN0IEhvbWUgPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IFt2aWV3LCBzZXRIb21lVmlld10gPSB1c2VTdGF0ZShwcm9wcy5ob21lVmlldyA/IHByb3BzLmhvbWVWaWV3IDogVmlld3MuSG9tZS5Mb2dpbik7XHJcbiAgICBsZXQgaG9tZVZpZXcgPSA8PjwvPjtcclxuICAgIC8vIGxldCB2ZXJpZmljYXRpb25Ub2tlbiA9IHVuZGVmaW5lZDtcclxuICAgIC8vIGNvbnN0IHZlcmlmaWNhdGlvblRva2VuRXhpc3RzID0gVmFsaWRhdG9yLmlzRGVmaW5lZChwcm9wcy5tYXRjaCk7XHJcbiAgICAvLyBpZiAodmVyaWZpY2F0aW9uVG9rZW5FeGlzdHMpIHtcclxuICAgIC8vICAgdmVyaWZpY2F0aW9uVG9rZW4gPSBwcm9wcy5tYXRjaC5wYXJhbXMudmVyaWZpY2F0aW9uVG9rZW47XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy9cclxuICAgIHN3aXRjaCAodmlldykge1xyXG4gICAgICAgIGNhc2UgVmlld3MuSG9tZS5Mb2dpbjpcclxuICAgICAgICAgICAgaG9tZVZpZXcgPSA8TG9naW5WaWV3IHNldEhvbWVWaWV3PXtzZXRIb21lVmlld30gLz47XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFZpZXdzLkhvbWUuQ3JlYXRlQWNjb3VudDpcclxuICAgICAgICAgICAgaG9tZVZpZXcgPSA8Q3JlYXRlQWNjb3VudFZpZXcgc2V0SG9tZVZpZXc9e3NldEhvbWVWaWV3fSAvPjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgVmlld3MuSG9tZS5WZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvbjpcclxuICAgICAgICAgICAgaG9tZVZpZXcgPSA8VmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb25WaWV3IHNldEhvbWVWaWV3PXtzZXRIb21lVmlld30gLz47XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFZpZXdzLkhvbWUuQWNjb3VudFNldHVwOlxyXG4gICAgICAgICAgICBob21lVmlldyA9IChcclxuICAgICAgICAgICAgICAgIDxBY2NvdW50U2V0dXBWaWV3IHNldEhvbWVWaWV3PXtzZXRIb21lVmlld30gdmVyaWZpY2F0aW9uVG9rZW49e3Byb3BzLm1hdGNoLnBhcmFtcy52ZXJpZmljYXRpb25Ub2tlbn0gLz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UGFnZT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJIb21lUGFnZVwiPlxyXG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInN1YnRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgU3R1ZHkgPGJyIC8+IHdpdGggPGJyIC8+IGV4Y2VsbGVuY2UuXHJcbiAgICAgICAgICAgICAgICA8L2gxPlxyXG4gICAgICAgICAgICAgICAgPFBhZ2U+eyFwcm9wcy5jaGlsZHJlbiA/IGhvbWVWaWV3IDogcHJvcHMuY2hpbGRyZW59PC9QYWdlPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1BhZ2U+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSG9tZTtcclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHVkeS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R1ZHkuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVG9wQmFyLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ub3BCYXIuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVudS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVudS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL01lbnUuc2Nzc1wiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcclxuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IHNpZ25PdXQgfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xyXG5cclxuY29uc3QgTWVudSA9ICh7IGlzU2hvd2luZyB9KSA9PiB7XHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtpc1Nob3dpbmcgPyBcImlzU2hvd2luZyBtZW51XCIgOiBcIm1lbnVcIn0+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNpZ25PdXQoKSl9PkxvZyBvdXQ8L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIHsvKiA8ZGl2IGNsYXNzTmFtZT17aXNTaG93aW5nID8gXCJpc1Nob3dpbmcgYmFja2dyb3VuZFwiIDogXCJiYWNrZ3JvdW5kXCJ9PjwvZGl2PiAqL31cclxuICAgICAgICA8Lz5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZW51O1xyXG4iLCJpbXBvcnQgXCIuL1RvcEJhci5zY3NzXCI7XHJcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xyXG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XHJcblxyXG5pbXBvcnQgTWVudSBmcm9tIFwiLi9NZW51XCI7XHJcbmNvbnN0IFRvcEJhciA9ICh7IGN1cnJlbnRQYWdlIH0pID0+IHtcclxuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuICAgIGNvbnN0IHsgdXNlciwgaXNMb2dnZWRJbiB9ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlcik7XHJcbiAgICAvLyBjb25zdCB7IG5hbWUsIHByb2ZpbGVQaWN0dXJlIH0gPSB1c2VyO1xyXG4gICAgY29uc3QgW21lbnVJc1Nob3dpbmcsIHNldE1lbnVJc1Nob3dpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3AtYmFyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndyYXBwZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlZnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvXCIgc3R5bGU9e3sgdGV4dERlY29yYXRpb246IFwibm9uZVwiIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlN0dWR5IFNwYWNlczwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvc3R1ZHlcIiBjbGFzc05hbWU9e2N1cnJlbnRQYWdlID09PSBcInN0dWR5XCIgPyBcImFjdGl2ZSBuYXYtaXRlbVwiIDogXCJuYXYtaXRlbVwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlN0dWR5PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL3NlYXJjaFwiIGNsYXNzTmFtZT17Y3VycmVudFBhZ2UgPT09IFwic2VhcmNoXCIgPyBcImFjdGl2ZSBuYXYtaXRlbVwiIDogXCJuYXYtaXRlbVwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlYXJjaDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9tZXNzYWdlXCIgY2xhc3NOYW1lPXtjdXJyZW50UGFnZSA9PT0gXCJtZXNzYWdlXCIgPyBcImFjdGl2ZSBuYXYtaXRlbVwiIDogXCJuYXYtaXRlbVwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1lc3NhZ2U8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICB7aXNMb2dnZWRJbiA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmlnaHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldE1lbnVJc1Nob3dpbmcoIW1lbnVJc1Nob3dpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lbnVJc1Nob3dpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic2Nob29sXCI+TGliZXJ0eSBVbml2ZXJzaXR5PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibmFtZVwiPnt1c2VyLm5hbWV9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInByb2ZpbGUtcGljdHVyZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtcIiBkYXRhOmltYWdlL3BuZztjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIiArIHVzZXIucHJvZmlsZVBpY3R1cmV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0+TG9nIGluPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvcmRlclwiPlxyXG4gICAgICAgICAgICAgICAgPE1lbnUgaXNTaG93aW5nPXttZW51SXNTaG93aW5nfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Lz5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb3BCYXI7XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R1ZHlHcm91cFZpZXcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0dWR5R3JvdXBWaWV3LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4vU3R1ZHlHcm91cFZpZXcuc2Nzc1wiO1xyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gZGlzcGxheSBhIGpvaW5lZCBzdHVkeSBncm91cCBvbiB0aGUgc3R1ZHkgcGFnZVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gdGl0bGUgdGl0bGUgb2YgdGhlIHN0dWR5IGdyb3VwXHJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDExLzAyLzIwMjFcclxuICovXHJcbmNvbnN0IFN0dWR5R3JvdXBWaWV3ID0gKHsgdGl0bGUgfSkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0dWR5LWdyb3VwLXZpZXdcIj5cclxuICAgICAgICAgICAgPGgxPnt0aXRsZX08L2gxPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN0dWR5R3JvdXBWaWV3O1xyXG4iLCJpbXBvcnQgXCIuL1N0dWR5LnNjc3NcIjtcclxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgc2lnbk91dCwgc2hvd0NyZWF0ZVN0dWR5R3JvdXBQb3B1cCwgYWRkU3R1ZHlHcm91cCB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XHJcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3JcIjtcclxuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcclxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xyXG5cclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uLmpzXCI7XHJcbmltcG9ydCB7IFJlZGlyZWN0IH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5cclxuaW1wb3J0IFRvcEJhciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyXCI7XHJcbmltcG9ydCBTdHVkeUdyb3VwVmlldyBmcm9tIFwiLi4vLi4vVmlld3MvU3R1ZHkvc3R1ZHlHcm91cFZpZXcvU3R1ZHlHcm91cFZpZXdcIjtcclxuaW1wb3J0IFBhZ2UgZnJvbSBcIi4uL1BhZ2VcIjtcclxuXHJcbi8qKlxyXG4gKiBSZW5kZXJzIHRoZSBzdHVkeSBwYWdlLCBkaXNwbGF5aW5nIGFsbCB0aGUgc3R1ZHkgZ3JvdXBzIHRoZSB1c2VyIGlzIGEgbWVtYmVyIG9mLlxyXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgICAxMS8yMC8yMDIxXHJcbiAqL1xyXG5jb25zdCBTdHVkeSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGlzTG9nZ2VkSW4gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLmlzTG9nZ2VkSW4pO1xyXG4gICAgY29uc3QgdXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlcik7XHJcbiAgICBjb25zdCBzdHVkeUdyb3VwcyA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuc3R1ZHlHcm91cHNSZWR1Y2VyLnN0dWR5R3JvdXBzKTtcclxuXHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBhc3luYyBmdW5jdGlvbiBnZXRHcm91cHMoKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGdldFN0dWR5R3JvdXBzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdldEdyb3VwcygpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmVzIGFsbCBzdHVkeSBncm91cHMgdGhlIHVzZXIgaXMgYSBtZW1iZXIgb2YgZnJvbSB0aGUgc2VydmVyXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAgMTEvMjAvMjAyMVxyXG4gICAgICovXHJcbiAgICBjb25zdCBnZXRTdHVkeUdyb3VwcyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBsZXQgcmVzcG9uc2U7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b2tlblwiKTtcclxuXHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KFJvdXRlcy5TdHVkeUdyb3VwLkdldFVzZXJTdHVkeUdyb3Vwcyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUlzRGVmaW5lZCA9IFZhbGlkYXRvci5pc0RlZmluZWQocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlSXNEZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHVkeUdyb3VwQ3JlYXRpb25XYXNWYWxpZCA9XHJcbiAgICAgICAgICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLlN1Y2Nlc3NTdHVkeUdyb3Vwc1JldHJpZXZlZCA9PT0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdHVkeUdyb3VwQ3JlYXRpb25XYXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0dWR5R3JvdXBzID0gcmVzcG9uc2UuZGF0YS5zdHVkeUdyb3VwcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R1ZHlHcm91cHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R1ZHlHcm91cHMubWFwKChzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChhZGRTdHVkeUdyb3VwKHMsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoYXQgZGlkbid0IHdvcmtcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoYXQgZGlkbid0IHdvcmtcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPFRvcEJhciBjdXJyZW50UGFnZT1cInN0dWR5XCIgLz5cclxuXHJcbiAgICAgICAgICAgIDxQYWdlPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHVkeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZS10aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+U3R1ZHk8L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIHtpc0xvZ2dlZEluID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzaWduT3V0KCkpfT5Mb2cgb3V0PC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWRkLWJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2hvd0NyZWF0ZVN0dWR5R3JvdXBQb3B1cCgpKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3R1ZHktZ3JvdXBzLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtWYWxpZGF0b3IuaXNEZWZpbmVkKHN0dWR5R3JvdXBzKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHVkeUdyb3Vwcy5tYXAoKHN0dWR5R3JvdXApID0+IDxTdHVkeUdyb3VwVmlldyB0aXRsZT17c3R1ZHlHcm91cC5uYW1lfSAvPil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPllvdSBhcmUgY3VycmVudGx5IGEgZ3Vlc3QhPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvXCI+TG9nIEluPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvUGFnZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTdHVkeTtcclxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2guc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hWaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hWaWV3LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaEZvcm0uc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaEZvcm0uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3BWYWxpZDtcbiIsIi8qXG5cbkJhc2VkIG9mZiBnbGFtb3IncyBTdHlsZVNoZWV0LCB0aGFua3MgU3VuaWwg4p2k77iPXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnXG5cbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoeyBrZXk6ICcnLCBjb250YWluZXI6IGRvY3VtZW50LmhlYWQgfSlcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxudmFyIFN0eWxlU2hlZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5faW5zZXJ0VGFnID0gZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKF90aGlzLnRhZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChfdGhpcy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmluc2VydGlvblBvaW50Lm5leHRTaWJsaW5nO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzLnByZXBlbmQpIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5jb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5iZWZvcmU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJlZm9yZSA9IF90aGlzLnRhZ3NbX3RoaXMudGFncy5sZW5ndGggLSAxXS5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0YWcsIGJlZm9yZSk7XG5cbiAgICAgIF90aGlzLnRhZ3MucHVzaCh0YWcpO1xuICAgIH07XG5cbiAgICB0aGlzLmlzU3BlZWR5ID0gb3B0aW9ucy5zcGVlZHkgPT09IHVuZGVmaW5lZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgOiBvcHRpb25zLnNwZWVkeTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG4gICAgdGhpcy5ub25jZSA9IG9wdGlvbnMubm9uY2U7IC8vIGtleSBpcyB0aGUgdmFsdWUgb2YgdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUsIGl0J3MgdXNlZCB0byBpZGVudGlmeSBkaWZmZXJlbnQgc2hlZXRzXG5cbiAgICB0aGlzLmtleSA9IG9wdGlvbnMua2V5O1xuICAgIHRoaXMuY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XG4gICAgdGhpcy5wcmVwZW5kID0gb3B0aW9ucy5wcmVwZW5kO1xuICAgIHRoaXMuaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaHlkcmF0ZSA9IGZ1bmN0aW9uIGh5ZHJhdGUobm9kZXMpIHtcbiAgICBub2Rlcy5mb3JFYWNoKHRoaXMuX2luc2VydFRhZyk7XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgLy8gdGhlIG1heCBsZW5ndGggaXMgaG93IG1hbnkgcnVsZXMgd2UgaGF2ZSBwZXIgc3R5bGUgdGFnLCBpdCdzIDY1MDAwIGluIHNwZWVkeSBtb2RlXG4gICAgLy8gaXQncyAxIGluIGRldiBiZWNhdXNlIHdlIGluc2VydCBzb3VyY2UgbWFwcyB0aGF0IG1hcCBhIHNpbmdsZSBydWxlIHRvIGEgbG9jYXRpb25cbiAgICAvLyBhbmQgeW91IGNhbiBvbmx5IGhhdmUgb25lIHNvdXJjZSBtYXAgcGVyIHN0eWxlIHRhZ1xuICAgIGlmICh0aGlzLmN0ciAlICh0aGlzLmlzU3BlZWR5ID8gNjUwMDAgOiAxKSA9PT0gMCkge1xuICAgICAgdGhpcy5faW5zZXJ0VGFnKGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzSW1wb3J0UnVsZSA9IHJ1bGUuY2hhckNvZGVBdCgwKSA9PT0gNjQgJiYgcnVsZS5jaGFyQ29kZUF0KDEpID09PSAxMDU7XG5cbiAgICAgIGlmIChpc0ltcG9ydFJ1bGUgJiYgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUpIHtcbiAgICAgICAgLy8gdGhpcyB3b3VsZCBvbmx5IGNhdXNlIHByb2JsZW0gaW4gc3BlZWR5IG1vZGVcbiAgICAgICAgLy8gYnV0IHdlIGRvbid0IHdhbnQgZW5hYmxpbmcgc3BlZWR5IHRvIGFmZmVjdCB0aGUgb2JzZXJ2YWJsZSBiZWhhdmlvclxuICAgICAgICAvLyBzbyB3ZSByZXBvcnQgdGhpcyBlcnJvciBhdCBhbGwgdGltZXNcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSdyZSBhdHRlbXB0aW5nIHRvIGluc2VydCB0aGUgZm9sbG93aW5nIHJ1bGU6XFxuXCIgKyBydWxlICsgJ1xcblxcbmBAaW1wb3J0YCBydWxlcyBtdXN0IGJlIGJlZm9yZSBhbGwgb3RoZXIgdHlwZXMgb2YgcnVsZXMgaW4gYSBzdHlsZXNoZWV0IGJ1dCBvdGhlciBydWxlcyBoYXZlIGFscmVhZHkgYmVlbiBpbnNlcnRlZC4gUGxlYXNlIGVuc3VyZSB0aGF0IGBAaW1wb3J0YCBydWxlcyBhcmUgYmVmb3JlIGFsbCBvdGhlciBydWxlcy4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlID0gdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgfHwgIWlzSW1wb3J0UnVsZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NwZWVkeSkge1xuICAgICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcodGFnKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgICAvLyB0aGUgYmlnIGRyYXdiYWNrIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEvOigtbW96LXBsYWNlaG9sZGVyfC1tb3otZm9jdXMtaW5uZXJ8LW1vei1mb2N1c3Jpbmd8LW1zLWlucHV0LXBsYWNlaG9sZGVyfC1tb3otcmVhZC13cml0ZXwtbW96LXJlYWQtb25seXwtbXMtY2xlYXIpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmltICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUudHJpbSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcGF0dGVyblxuICogQHJldHVybiB7c3RyaW5nP31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoICh2YWx1ZSwgcGF0dGVybikge1xuXHRyZXR1cm4gKHZhbHVlID0gcGF0dGVybi5leGVjKHZhbHVlKSkgPyB2YWx1ZVswXSA6IHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKX0gcGF0dGVyblxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlICh2YWx1ZSwgcGF0dGVybiwgcmVwbGFjZW1lbnQpIHtcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZW1lbnQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRleG9mICh2YWx1ZSwgc2VhcmNoKSB7XG5cdHJldHVybiB2YWx1ZS5pbmRleE9mKHNlYXJjaClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhcmF0ICh2YWx1ZSwgaW5kZXgpIHtcblx0cmV0dXJuIHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpIHwgMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdHIgKHZhbHVlLCBiZWdpbiwgZW5kKSB7XG5cdHJldHVybiB2YWx1ZS5zbGljZShiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RybGVuICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnlbXX0gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpemVvZiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJyYXlcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZCAodmFsdWUsIGFycmF5KSB7XG5cdHJldHVybiBhcnJheS5wdXNoKHZhbHVlKSwgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcnJheVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmUgKGFycmF5LCBjYWxsYmFjaykge1xuXHRyZXR1cm4gYXJyYXkubWFwKGNhbGxiYWNrKS5qb2luKCcnKVxufVxuIiwiaW1wb3J0IHtmcm9tLCB0cmltLCBjaGFyYXQsIHN0cmxlbiwgc3Vic3RyLCBhcHBlbmQsIGFzc2lnbn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG5leHBvcnQgdmFyIGxpbmUgPSAxXG5leHBvcnQgdmFyIGNvbHVtbiA9IDFcbmV4cG9ydCB2YXIgbGVuZ3RoID0gMFxuZXhwb3J0IHZhciBwb3NpdGlvbiA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVyID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXJzID0gJydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ1tdIHwgc3RyaW5nfSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3RbXSB8IHN0cmluZ30gY2hpbGRyZW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vZGUgKHZhbHVlLCByb290LCBwYXJlbnQsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKSB7XG5cdHJldHVybiB7dmFsdWU6IHZhbHVlLCByb290OiByb290LCBwYXJlbnQ6IHBhcmVudCwgdHlwZTogdHlwZSwgcHJvcHM6IHByb3BzLCBjaGlsZHJlbjogY2hpbGRyZW4sIGxpbmU6IGxpbmUsIGNvbHVtbjogY29sdW1uLCBsZW5ndGg6IGxlbmd0aCwgcmV0dXJuOiAnJ31cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5IChyb290LCBwcm9wcykge1xuXHRyZXR1cm4gYXNzaWduKG5vZGUoJycsIG51bGwsIG51bGwsICcnLCBudWxsLCBudWxsLCAwKSwgcm9vdCwge2xlbmd0aDogLXJvb3QubGVuZ3RofSwgcHJvcHMpXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhciAoKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPiAwID8gY2hhcmF0KGNoYXJhY3RlcnMsIC0tcG9zaXRpb24pIDogMFxuXG5cdGlmIChjb2x1bW4tLSwgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lLS1cblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV4dCAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uIDwgbGVuZ3RoID8gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKyspIDogMFxuXG5cdGlmIChjb2x1bW4rKywgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lKytcblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVlayAoKSB7XG5cdHJldHVybiBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24pXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FyZXQgKCkge1xuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG5cdHJldHVybiBzdWJzdHIoY2hhcmFjdGVycywgYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW4gKHR5cGUpIHtcblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Ly8gXFwwIFxcdCBcXG4gXFxyIFxccyB3aGl0ZXNwYWNlIHRva2VuXG5cdFx0Y2FzZSAwOiBjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRyZXR1cm4gNVxuXHRcdC8vICEgKyAsIC8gPiBAIH4gaXNvbGF0ZSB0b2tlblxuXHRcdGNhc2UgMzM6IGNhc2UgNDM6IGNhc2UgNDQ6IGNhc2UgNDc6IGNhc2UgNjI6IGNhc2UgNjQ6IGNhc2UgMTI2OlxuXHRcdC8vIDsgeyB9IGJyZWFrcG9pbnQgdG9rZW5cblx0XHRjYXNlIDU5OiBjYXNlIDEyMzogY2FzZSAxMjU6XG5cdFx0XHRyZXR1cm4gNFxuXHRcdC8vIDogYWNjb21wYW5pZWQgdG9rZW5cblx0XHRjYXNlIDU4OlxuXHRcdFx0cmV0dXJuIDNcblx0XHQvLyBcIiAnICggWyBvcGVuaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDQwOiBjYXNlIDkxOlxuXHRcdFx0cmV0dXJuIDJcblx0XHQvLyApIF0gY2xvc2luZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSA0MTogY2FzZSA5Mzpcblx0XHRcdHJldHVybiAxXG5cdH1cblxuXHRyZXR1cm4gMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7YW55W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGxpbmUgPSBjb2x1bW4gPSAxLCBsZW5ndGggPSBzdHJsZW4oY2hhcmFjdGVycyA9IHZhbHVlKSwgcG9zaXRpb24gPSAwLCBbXVxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGNoYXJhY3RlcnMgPSAnJywgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdCAodHlwZSkge1xuXHRyZXR1cm4gdHJpbShzbGljZShwb3NpdGlvbiAtIDEsIGRlbGltaXRlcih0eXBlID09PSA5MSA/IHR5cGUgKyAyIDogdHlwZSA9PT0gNDAgPyB0eXBlICsgMSA6IHR5cGUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHRva2VuaXplcihhbGxvYyh2YWx1ZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGl0ZXNwYWNlICh0eXBlKSB7XG5cdHdoaWxlIChjaGFyYWN0ZXIgPSBwZWVrKCkpXG5cdFx0aWYgKGNoYXJhY3RlciA8IDMzKVxuXHRcdFx0bmV4dCgpXG5cdFx0ZWxzZVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gdG9rZW4odHlwZSkgPiAyIHx8IHRva2VuKGNoYXJhY3RlcikgPiAzID8gJycgOiAnICdcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZXIgKGNoaWxkcmVuKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG5cdFx0XHRjYXNlIDA6IGFwcGVuZChpZGVudGlmaWVyKHBvc2l0aW9uIC0gMSksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAyOiBhcHBlbmQoZGVsaW1pdChjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGRlZmF1bHQ6IGFwcGVuZChmcm9tKGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdH1cblxuXHRyZXR1cm4gY2hpbGRyZW5cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBpbmcgKGluZGV4LCBjb3VudCkge1xuXHR3aGlsZSAoLS1jb3VudCAmJiBuZXh0KCkpXG5cdFx0Ly8gbm90IDAtOSBBLUYgYS1mXG5cdFx0aWYgKGNoYXJhY3RlciA8IDQ4IHx8IGNoYXJhY3RlciA+IDEwMiB8fCAoY2hhcmFjdGVyID4gNTcgJiYgY2hhcmFjdGVyIDwgNjUpIHx8IChjaGFyYWN0ZXIgPiA3MCAmJiBjaGFyYWN0ZXIgPCA5NykpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiBzbGljZShpbmRleCwgY2FyZXQoKSArIChjb3VudCA8IDYgJiYgcGVlaygpID09IDMyICYmIG5leHQoKSA9PSAzMikpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXRlciAodHlwZSkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHQvLyBdICkgXCIgJ1xuXHRcdFx0Y2FzZSB0eXBlOlxuXHRcdFx0XHRyZXR1cm4gcG9zaXRpb25cblx0XHRcdC8vIFwiICdcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6XG5cdFx0XHRcdGlmICh0eXBlICE9PSAzNCAmJiB0eXBlICE9PSAzOSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gKFxuXHRcdFx0Y2FzZSA0MDpcblx0XHRcdFx0aWYgKHR5cGUgPT09IDQxKVxuXHRcdFx0XHRcdGRlbGltaXRlcih0eXBlKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdG5leHQoKVxuXHRcdFx0XHRicmVha1xuXHRcdH1cblxuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50ZXIgKHR5cGUsIGluZGV4KSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0Ly8gLy9cblx0XHRpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDcgKyAxMClcblx0XHRcdGJyZWFrXG5cdFx0Ly8gLypcblx0XHRlbHNlIGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0MiArIDQyICYmIHBlZWsoKSA9PT0gNDcpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiAnLyonICsgc2xpY2UoaW5kZXgsIHBvc2l0aW9uIC0gMSkgKyAnKicgKyBmcm9tKHR5cGUgPT09IDQ3ID8gdHlwZSA6IG5leHQoKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aWZpZXIgKGluZGV4KSB7XG5cdHdoaWxlICghdG9rZW4ocGVlaygpKSlcblx0XHRuZXh0KClcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIHBvc2l0aW9uKVxufVxuIiwiZXhwb3J0IHZhciBNUyA9ICctbXMtJ1xuZXhwb3J0IHZhciBNT1ogPSAnLW1vei0nXG5leHBvcnQgdmFyIFdFQktJVCA9ICctd2Via2l0LSdcblxuZXhwb3J0IHZhciBDT01NRU5UID0gJ2NvbW0nXG5leHBvcnQgdmFyIFJVTEVTRVQgPSAncnVsZSdcbmV4cG9ydCB2YXIgREVDTEFSQVRJT04gPSAnZGVjbCdcblxuZXhwb3J0IHZhciBQQUdFID0gJ0BwYWdlJ1xuZXhwb3J0IHZhciBNRURJQSA9ICdAbWVkaWEnXG5leHBvcnQgdmFyIElNUE9SVCA9ICdAaW1wb3J0J1xuZXhwb3J0IHZhciBDSEFSU0VUID0gJ0BjaGFyc2V0J1xuZXhwb3J0IHZhciBWSUVXUE9SVCA9ICdAdmlld3BvcnQnXG5leHBvcnQgdmFyIFNVUFBPUlRTID0gJ0BzdXBwb3J0cydcbmV4cG9ydCB2YXIgRE9DVU1FTlQgPSAnQGRvY3VtZW50J1xuZXhwb3J0IHZhciBOQU1FU1BBQ0UgPSAnQG5hbWVzcGFjZSdcbmV4cG9ydCB2YXIgS0VZRlJBTUVTID0gJ0BrZXlmcmFtZXMnXG5leHBvcnQgdmFyIEZPTlRfRkFDRSA9ICdAZm9udC1mYWNlJ1xuZXhwb3J0IHZhciBDT1VOVEVSX1NUWUxFID0gJ0Bjb3VudGVyLXN0eWxlJ1xuZXhwb3J0IHZhciBGT05UX0ZFQVRVUkVfVkFMVUVTID0gJ0Bmb250LWZlYXR1cmUtdmFsdWVzJ1xuIiwiaW1wb3J0IHtJTVBPUlQsIENPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OLCBLRVlGUkFNRVN9IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7c3RybGVuLCBzaXplb2Z9IGZyb20gJy4vVXRpbGl0eS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZSAoY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHZhciBvdXRwdXQgPSAnJ1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNoaWxkcmVuKVxuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0b3V0cHV0ICs9IGNhbGxiYWNrKGNoaWxkcmVuW2ldLCBpLCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0cmV0dXJuIG91dHB1dFxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5IChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0Y2FzZSBJTVBPUlQ6IGNhc2UgREVDTEFSQVRJT046IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQucmV0dXJuIHx8IGVsZW1lbnQudmFsdWVcblx0XHRjYXNlIENPTU1FTlQ6IHJldHVybiAnJ1xuXHRcdGNhc2UgS0VZRlJBTUVTOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSArICd9J1xuXHRcdGNhc2UgUlVMRVNFVDogZWxlbWVudC52YWx1ZSA9IGVsZW1lbnQucHJvcHMuam9pbignLCcpXG5cdH1cblxuXHRyZXR1cm4gc3RybGVuKGNoaWxkcmVuID0gc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSkgPyBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBjaGlsZHJlbiArICd9JyA6ICcnXG59XG4iLCJpbXBvcnQge01TLCBNT1osIFdFQktJVH0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHtoYXNoLCBjaGFyYXQsIHN0cmxlbiwgaW5kZXhvZiwgcmVwbGFjZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ICh2YWx1ZSwgbGVuZ3RoKSB7XG5cdHN3aXRjaCAoaGFzaCh2YWx1ZSwgbGVuZ3RoKSkge1xuXHRcdC8vIGNvbG9yLWFkanVzdFxuXHRcdGNhc2UgNTEwMzpcblx0XHRcdHJldHVybiBXRUJLSVQgKyAncHJpbnQtJyArIHZhbHVlICsgdmFsdWVcblx0XHQvLyBhbmltYXRpb24sIGFuaW1hdGlvbi0oZGVsYXl8ZGlyZWN0aW9ufGR1cmF0aW9ufGZpbGwtbW9kZXxpdGVyYXRpb24tY291bnR8bmFtZXxwbGF5LXN0YXRlfHRpbWluZy1mdW5jdGlvbilcblx0XHRjYXNlIDU3Mzc6IGNhc2UgNDIwMTogY2FzZSAzMTc3OiBjYXNlIDM0MzM6IGNhc2UgMTY0MTogY2FzZSA0NDU3OiBjYXNlIDI5MjE6XG5cdFx0Ly8gdGV4dC1kZWNvcmF0aW9uLCBmaWx0ZXIsIGNsaXAtcGF0aCwgYmFja2ZhY2UtdmlzaWJpbGl0eSwgY29sdW1uLCBib3gtZGVjb3JhdGlvbi1icmVha1xuXHRcdGNhc2UgNTU3MjogY2FzZSA2MzU2OiBjYXNlIDU4NDQ6IGNhc2UgMzE5MTogY2FzZSA2NjQ1OiBjYXNlIDMwMDU6XG5cdFx0Ly8gbWFzaywgbWFzay1pbWFnZSwgbWFzay0obW9kZXxjbGlwfHNpemUpLCBtYXNrLShyZXBlYXR8b3JpZ2luKSwgbWFzay1wb3NpdGlvbiwgbWFzay1jb21wb3NpdGUsXG5cdFx0Y2FzZSA2MzkxOiBjYXNlIDU4Nzk6IGNhc2UgNTYyMzogY2FzZSA2MTM1OiBjYXNlIDQ1OTk6IGNhc2UgNDg1NTpcblx0XHQvLyBiYWNrZ3JvdW5kLWNsaXAsIGNvbHVtbnMsIGNvbHVtbi0oY291bnR8ZmlsbHxnYXB8cnVsZXxydWxlLWNvbG9yfHJ1bGUtc3R5bGV8cnVsZS13aWR0aHxzcGFufHdpZHRoKVxuXHRcdGNhc2UgNDIxNTogY2FzZSA2Mzg5OiBjYXNlIDUxMDk6IGNhc2UgNTM2NTogY2FzZSA1NjIxOiBjYXNlIDM4Mjk6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIGFwcGVhcmFuY2UsIHVzZXItc2VsZWN0LCB0cmFuc2Zvcm0sIGh5cGhlbnMsIHRleHQtc2l6ZS1hZGp1c3Rcblx0XHRjYXNlIDUzNDk6IGNhc2UgNDI0NjogY2FzZSA0ODEwOiBjYXNlIDY5Njg6IGNhc2UgMjc1Njpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1PWiArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gZmxleCwgZmxleC1kaXJlY3Rpb25cblx0XHRjYXNlIDY4Mjg6IGNhc2UgNDI2ODpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIG9yZGVyXG5cdFx0Y2FzZSA2MTY1OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC0nICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIGFsaWduLWl0ZW1zXG5cdFx0Y2FzZSA1MTg3OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgcmVwbGFjZSh2YWx1ZSwgLyhcXHcrKS4rKDpbXl0rKS8sIFdFQktJVCArICdib3gtJDEkMicgKyBNUyArICdmbGV4LSQxJDInKSArIHZhbHVlXG5cdFx0Ly8gYWxpZ24tc2VsZlxuXHRcdGNhc2UgNTQ0Mzpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtaXRlbS0nICsgcmVwbGFjZSh2YWx1ZSwgL2ZsZXgtfC1zZWxmLywgJycpICsgdmFsdWVcblx0XHQvLyBhbGlnbi1jb250ZW50XG5cdFx0Y2FzZSA0Njc1OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1saW5lLXBhY2snICsgcmVwbGFjZSh2YWx1ZSwgL2FsaWduLWNvbnRlbnR8ZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZVxuXHRcdC8vIGZsZXgtc2hyaW5rXG5cdFx0Y2FzZSA1NTQ4OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnc2hyaW5rJywgJ25lZ2F0aXZlJykgKyB2YWx1ZVxuXHRcdC8vIGZsZXgtYmFzaXNcblx0XHRjYXNlIDUyOTI6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgdmFsdWVcblx0XHQvLyBmbGV4LWdyb3dcblx0XHRjYXNlIDYwNjA6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgJ2JveC0nICsgcmVwbGFjZSh2YWx1ZSwgJy1ncm93JywgJycpICsgV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdncm93JywgJ3Bvc2l0aXZlJykgKyB2YWx1ZVxuXHRcdC8vIHRyYW5zaXRpb25cblx0XHRjYXNlIDQ1NTQ6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgcmVwbGFjZSh2YWx1ZSwgLyhbXi1dKSh0cmFuc2Zvcm0pL2csICckMScgKyBXRUJLSVQgKyAnJDInKSArIHZhbHVlXG5cdFx0Ly8gY3Vyc29yXG5cdFx0Y2FzZSA2MTg3OlxuXHRcdFx0cmV0dXJuIHJlcGxhY2UocmVwbGFjZShyZXBsYWNlKHZhbHVlLCAvKHpvb20tfGdyYWIpLywgV0VCS0lUICsgJyQxJyksIC8oaW1hZ2Utc2V0KS8sIFdFQktJVCArICckMScpLCB2YWx1ZSwgJycpICsgdmFsdWVcblx0XHQvLyBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kLWltYWdlXG5cdFx0Y2FzZSA1NDk1OiBjYXNlIDM5NTk6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyhpbWFnZS1zZXRcXChbXl0qKS8sIFdFQktJVCArICckMScgKyAnJGAkMScpXG5cdFx0Ly8ganVzdGlmeS1jb250ZW50XG5cdFx0Y2FzZSA0OTY4OlxuXHRcdFx0cmV0dXJuIHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyguKzopKGZsZXgtKT8oLiopLywgV0VCS0lUICsgJ2JveC1wYWNrOiQzJyArIE1TICsgJ2ZsZXgtcGFjazokMycpLCAvcy4rLWJbXjtdKy8sICdqdXN0aWZ5JykgKyBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gKG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUtKHN0YXJ0fGVuZClcblx0XHRjYXNlIDQwOTU6IGNhc2UgMzU4MzogY2FzZSA0MDY4OiBjYXNlIDI1MzI6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZVxuXHRcdC8vIChtaW58bWF4KT8od2lkdGh8aGVpZ2h0fGlubGluZS1zaXplfGJsb2NrLXNpemUpXG5cdFx0Y2FzZSA4MTE2OiBjYXNlIDcwNTk6IGNhc2UgNTc1MzogY2FzZSA1NTM1OlxuXHRcdGNhc2UgNTQ0NTogY2FzZSA1NzAxOiBjYXNlIDQ5MzM6IGNhc2UgNDY3Nzpcblx0XHRjYXNlIDU1MzM6IGNhc2UgNTc4OTogY2FzZSA1MDIxOiBjYXNlIDQ3NjU6XG5cdFx0XHQvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG5cdFx0XHRpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KVxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcblx0XHRcdFx0XHQvLyAobSlheC1jb250ZW50LCAobSlpbi1jb250ZW50XG5cdFx0XHRcdFx0Y2FzZSAxMDk6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyA0KSAhPT0gNDUpXG5cdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXHRcdFx0XHRcdGNhc2UgMTAyOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLis6KSguKyktKFteXSspLywgJyQxJyArIFdFQktJVCArICckMi0kMycgKyAnJDEnICsgTU9aICsgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMykgPT0gMTA4ID8gJyQzJyA6ICckMi0kMycpKSArIHZhbHVlXG5cdFx0XHRcdFx0Ly8gKHMpdHJldGNoXG5cdFx0XHRcdFx0Y2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRyZXR1cm4gfmluZGV4b2YodmFsdWUsICdzdHJldGNoJykgPyBwcmVmaXgocmVwbGFjZSh2YWx1ZSwgJ3N0cmV0Y2gnLCAnZmlsbC1hdmFpbGFibGUnKSwgbGVuZ3RoKSArIHZhbHVlIDogdmFsdWVcblx0XHRcdFx0fVxuXHRcdFx0YnJlYWtcblx0XHQvLyBwb3NpdGlvbjogc3RpY2t5XG5cdFx0Y2FzZSA0OTQ5OlxuXHRcdFx0Ly8gKHMpdGlja3k/XG5cdFx0XHRpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSAhPT0gMTE1KVxuXHRcdFx0XHRicmVha1xuXHRcdC8vIGRpc3BsYXk6IChmbGV4fGlubGluZS1mbGV4KVxuXHRcdGNhc2UgNjQ0NDpcblx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBzdHJsZW4odmFsdWUpIC0gMyAtICh+aW5kZXhvZih2YWx1ZSwgJyFpbXBvcnRhbnQnKSAmJiAxMCkpKSB7XG5cdFx0XHRcdC8vIHN0aWMoayl5XG5cdFx0XHRcdGNhc2UgMTA3OlxuXHRcdFx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIFdFQktJVCkgKyB2YWx1ZVxuXHRcdFx0XHQvLyAoaW5saW5lLSk/ZmwoZSl4XG5cdFx0XHRcdGNhc2UgMTAxOlxuXHRcdFx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoW147IV0rKSg7fCEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZVxuXHRcdFx0fVxuXHRcdFx0YnJlYWtcblx0XHQvLyB3cml0aW5nLW1vZGVcblx0XHRjYXNlIDU5MzY6XG5cdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG5cdFx0XHRcdC8vIHZlcnRpY2FsLWwocilcblx0XHRcdFx0Y2FzZSAxMTQ6XG5cdFx0XHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWVcblx0XHRcdFx0Ly8gdmVydGljYWwtcihsKVxuXHRcdFx0XHRjYXNlIDEwODpcblx0XHRcdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZVxuXHRcdFx0XHQvLyBob3Jpem9udGFsKC0pdGJcblx0XHRcdFx0Y2FzZSA0NTpcblx0XHRcdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWVcblx0fVxuXG5cdHJldHVybiB2YWx1ZVxufVxuIiwiaW1wb3J0IHtDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHthYnMsIHRyaW0sIGZyb20sIHNpemVvZiwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgcmVwbGFjZSwgaW5kZXhvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtub2RlLCBjaGFyLCBwcmV2LCBuZXh0LCBwZWVrLCBjYXJldCwgYWxsb2MsIGRlYWxsb2MsIGRlbGltaXQsIHdoaXRlc3BhY2UsIGVzY2FwaW5nLCBpZGVudGlmaWVyLCBjb21tZW50ZXJ9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7b2JqZWN0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyhwYXJzZSgnJywgbnVsbCwgbnVsbCwgbnVsbCwgWycnXSwgdmFsdWUgPSBhbGxvYyh2YWx1ZSksIDAsIFswXSwgdmFsdWUpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNldHNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBzZXVkb1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBkZWNsYXJhdGlvbnNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBydWxlLCBydWxlcywgcnVsZXNldHMsIHBzZXVkbywgcG9pbnRzLCBkZWNsYXJhdGlvbnMpIHtcblx0dmFyIGluZGV4ID0gMFxuXHR2YXIgb2Zmc2V0ID0gMFxuXHR2YXIgbGVuZ3RoID0gcHNldWRvXG5cdHZhciBhdHJ1bGUgPSAwXG5cdHZhciBwcm9wZXJ0eSA9IDBcblx0dmFyIHByZXZpb3VzID0gMFxuXHR2YXIgdmFyaWFibGUgPSAxXG5cdHZhciBzY2FubmluZyA9IDFcblx0dmFyIGFtcGVyc2FuZCA9IDFcblx0dmFyIGNoYXJhY3RlciA9IDBcblx0dmFyIHR5cGUgPSAnJ1xuXHR2YXIgcHJvcHMgPSBydWxlc1xuXHR2YXIgY2hpbGRyZW4gPSBydWxlc2V0c1xuXHR2YXIgcmVmZXJlbmNlID0gcnVsZVxuXHR2YXIgY2hhcmFjdGVycyA9IHR5cGVcblxuXHR3aGlsZSAoc2Nhbm5pbmcpXG5cdFx0c3dpdGNoIChwcmV2aW91cyA9IGNoYXJhY3RlciwgY2hhcmFjdGVyID0gbmV4dCgpKSB7XG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAocHJldmlvdXMgIT0gMTA4ICYmIGNoYXJhY3RlcnMuY2hhckNvZGVBdChsZW5ndGggLSAxKSA9PSA1OCkge1xuXHRcdFx0XHRcdGlmIChpbmRleG9mKGNoYXJhY3RlcnMgKz0gcmVwbGFjZShkZWxpbWl0KGNoYXJhY3RlciksICcmJywgJyZcXGYnKSwgJyZcXGYnKSAhPSAtMSlcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IC0xXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0Ly8gXCIgJyBbXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDkxOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFx0IFxcbiBcXHIgXFxzXG5cdFx0XHRjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gd2hpdGVzcGFjZShwcmV2aW91cylcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGVzY2FwaW5nKGNhcmV0KCkgLSAxLCA3KVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0Ly8gL1xuXHRcdFx0Y2FzZSA0Nzpcblx0XHRcdFx0c3dpdGNoIChwZWVrKCkpIHtcblx0XHRcdFx0XHRjYXNlIDQyOiBjYXNlIDQ3OlxuXHRcdFx0XHRcdFx0YXBwZW5kKGNvbW1lbnQoY29tbWVudGVyKG5leHQoKSwgY2FyZXQoKSksIHJvb3QsIHBhcmVudCksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gJy8nXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIHtcblx0XHRcdGNhc2UgMTIzICogdmFyaWFibGU6XG5cdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IHN0cmxlbihjaGFyYWN0ZXJzKSAqIGFtcGVyc2FuZFxuXHRcdFx0Ly8gfSA7IFxcMFxuXHRcdFx0Y2FzZSAxMjUgKiB2YXJpYWJsZTogY2FzZSA1OTogY2FzZSAwOlxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0XHRcdC8vIFxcMCB9XG5cdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDEyNTogc2Nhbm5pbmcgPSAwXG5cdFx0XHRcdFx0Ly8gO1xuXHRcdFx0XHRcdGNhc2UgNTkgKyBvZmZzZXQ6XG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgPiAwICYmIChzdHJsZW4oY2hhcmFjdGVycykgLSBsZW5ndGgpKVxuXHRcdFx0XHRcdFx0XHRhcHBlbmQocHJvcGVydHkgPiAzMiA/IGRlY2xhcmF0aW9uKGNoYXJhY3RlcnMgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMSkgOiBkZWNsYXJhdGlvbihyZXBsYWNlKGNoYXJhY3RlcnMsICcgJywgJycpICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDIpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEAgO1xuXHRcdFx0XHRcdGNhc2UgNTk6IGNoYXJhY3RlcnMgKz0gJzsnXG5cdFx0XHRcdFx0Ly8geyBydWxlL2F0LXJ1bGVcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0YXBwZW5kKHJlZmVyZW5jZSA9IHJ1bGVzZXQoY2hhcmFjdGVycywgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcyA9IFtdLCBjaGlsZHJlbiA9IFtdLCBsZW5ndGgpLCBydWxlc2V0cylcblxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PT0gMTIzKVxuXHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJvb3QsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBwcm9wcywgcnVsZXNldHMsIGxlbmd0aCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoYXRydWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBkIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA5OiBjYXNlIDExNTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBydWxlICYmIGFwcGVuZChydWxlc2V0KHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgMCwgMCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcnVsZXMsIHByb3BzID0gW10sIGxlbmd0aCksIGNoaWxkcmVuKSwgcnVsZXMsIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgcnVsZSA/IHByb3BzIDogY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZShjaGFyYWN0ZXJzLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBbJyddLCBjaGlsZHJlbiwgMCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbmRleCA9IG9mZnNldCA9IHByb3BlcnR5ID0gMCwgdmFyaWFibGUgPSBhbXBlcnNhbmQgPSAxLCB0eXBlID0gY2hhcmFjdGVycyA9ICcnLCBsZW5ndGggPSBwc2V1ZG9cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIDpcblx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdGxlbmd0aCA9IDEgKyBzdHJsZW4oY2hhcmFjdGVycyksIHByb3BlcnR5ID0gcHJldmlvdXNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmICh2YXJpYWJsZSA8IDEpXG5cdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PSAxMjMpXG5cdFx0XHRcdFx0XHQtLXZhcmlhYmxlXG5cdFx0XHRcdFx0ZWxzZSBpZiAoY2hhcmFjdGVyID09IDEyNSAmJiB2YXJpYWJsZSsrID09IDAgJiYgcHJldigpID09IDEyNSlcblx0XHRcdFx0XHRcdGNvbnRpbnVlXG5cblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXJzICs9IGZyb20oY2hhcmFjdGVyKSwgY2hhcmFjdGVyICogdmFyaWFibGUpIHtcblx0XHRcdFx0XHQvLyAmXG5cdFx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IG9mZnNldCA+IDAgPyAxIDogKGNoYXJhY3RlcnMgKz0gJ1xcZicsIC0xKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAsXG5cdFx0XHRcdFx0Y2FzZSA0NDpcblx0XHRcdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IChzdHJsZW4oY2hhcmFjdGVycykgLSAxKSAqIGFtcGVyc2FuZCwgYW1wZXJzYW5kID0gMVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAXG5cdFx0XHRcdFx0Y2FzZSA2NDpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChwZWVrKCkgPT09IDQ1KVxuXHRcdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQobmV4dCgpKVxuXG5cdFx0XHRcdFx0XHRhdHJ1bGUgPSBwZWVrKCksIG9mZnNldCA9IGxlbmd0aCA9IHN0cmxlbih0eXBlID0gY2hhcmFjdGVycyArPSBpZGVudGlmaWVyKGNhcmV0KCkpKSwgY2hhcmFjdGVyKytcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdGNhc2UgNDU6XG5cdFx0XHRcdFx0XHRpZiAocHJldmlvdXMgPT09IDQ1ICYmIHN0cmxlbihjaGFyYWN0ZXJzKSA9PSAyKVxuXHRcdFx0XHRcdFx0XHR2YXJpYWJsZSA9IDBcblx0XHRcdFx0fVxuXHRcdH1cblxuXHRyZXR1cm4gcnVsZXNldHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2V0ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHR2YXIgcG9zdCA9IG9mZnNldCAtIDFcblx0dmFyIHJ1bGUgPSBvZmZzZXQgPT09IDAgPyBydWxlcyA6IFsnJ11cblx0dmFyIHNpemUgPSBzaXplb2YocnVsZSlcblxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDAsIGsgPSAwOyBpIDwgaW5kZXg7ICsraSlcblx0XHRmb3IgKHZhciB4ID0gMCwgeSA9IHN1YnN0cih2YWx1ZSwgcG9zdCArIDEsIHBvc3QgPSBhYnMoaiA9IHBvaW50c1tpXSkpLCB6ID0gdmFsdWU7IHggPCBzaXplOyArK3gpXG5cdFx0XHRpZiAoeiA9IHRyaW0oaiA+IDAgPyBydWxlW3hdICsgJyAnICsgeSA6IHJlcGxhY2UoeSwgLyZcXGYvZywgcnVsZVt4XSkpKVxuXHRcdFx0XHRwcm9wc1trKytdID0gelxuXG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIG9mZnNldCA9PT0gMCA/IFJVTEVTRVQgOiB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCAodmFsdWUsIHJvb3QsIHBhcmVudCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBDT01NRU5ULCBmcm9tKGNoYXIoKSksIHN1YnN0cih2YWx1ZSwgMiwgLTIpLCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAodmFsdWUsIHJvb3QsIHBhcmVudCwgbGVuZ3RoKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIERFQ0xBUkFUSU9OLCBzdWJzdHIodmFsdWUsIDAsIGxlbmd0aCksIHN1YnN0cih2YWx1ZSwgbGVuZ3RoICsgMSwgLTEpLCBsZW5ndGgpXG59XG4iLCJpbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuaW1wb3J0IHsgZGVhbGxvYywgYWxsb2MsIG5leHQsIHRva2VuLCBmcm9tLCBwZWVrLCBkZWxpbWl0LCBzbGljZSwgcG9zaXRpb24sIHN0cmluZ2lmeSwgQ09NTUVOVCwgcnVsZXNoZWV0LCBtaWRkbGV3YXJlLCBwcmVmaXhlciwgc2VyaWFsaXplLCBjb21waWxlIH0gZnJvbSAnc3R5bGlzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBsYXN0ID0gZnVuY3Rpb24gbGFzdChhcnIpIHtcbiAgcmV0dXJuIGFyci5sZW5ndGggPyBhcnJbYXJyLmxlbmd0aCAtIDFdIDogbnVsbDtcbn07IC8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS90aHlzdWx0YW4vc3R5bGlzLmpzL2Jsb2IvZTY4NDNjMzczZWJjYmJmYWRlMjVlYmNjMjNmNTQwZWQ4NTA4ZGEwYS9zcmMvVG9rZW5pemVyLmpzI0wyMzktTDI0NFxuXG5cbnZhciBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcgPSBmdW5jdGlvbiBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcoYmVnaW4sIHBvaW50cywgaW5kZXgpIHtcbiAgdmFyIHByZXZpb3VzID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IDA7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBwcmV2aW91cyA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSBwZWVrKCk7IC8vICZcXGZcblxuICAgIGlmIChwcmV2aW91cyA9PT0gMzggJiYgY2hhcmFjdGVyID09PSAxMikge1xuICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIG5leHQoKTtcbiAgfVxuXG4gIHJldHVybiBzbGljZShiZWdpbiwgcG9zaXRpb24pO1xufTtcblxudmFyIHRvUnVsZXMgPSBmdW5jdGlvbiB0b1J1bGVzKHBhcnNlZCwgcG9pbnRzKSB7XG4gIC8vIHByZXRlbmQgd2UndmUgc3RhcnRlZCB3aXRoIGEgY29tbWFcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjaGFyYWN0ZXIgPSA0NDtcblxuICBkbyB7XG4gICAgc3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8vICZcXGZcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gMzggJiYgcGVlaygpID09PSAxMikge1xuICAgICAgICAgIC8vIHRoaXMgaXMgbm90IDEwMCUgY29ycmVjdCwgd2UgZG9uJ3QgYWNjb3VudCBmb3IgbGl0ZXJhbCBzZXF1ZW5jZXMgaGVyZSAtIGxpa2UgZm9yIGV4YW1wbGUgcXVvdGVkIHN0cmluZ3NcbiAgICAgICAgICAvLyBzdHlsaXMgaW5zZXJ0cyBcXGYgYWZ0ZXIgJiB0byBrbm93IHdoZW4gJiB3aGVyZSBpdCBzaG91bGQgcmVwbGFjZSB0aGlzIHNlcXVlbmNlIHdpdGggdGhlIGNvbnRleHQgc2VsZWN0b3JcbiAgICAgICAgICAvLyBhbmQgd2hlbiBpdCBzaG91bGQganVzdCBjb25jYXRlbmF0ZSB0aGUgb3V0ZXIgYW5kIGlubmVyIHNlbGVjdG9yc1xuICAgICAgICAgIC8vIGl0J3MgdmVyeSB1bmxpa2VseSBmb3IgdGhpcyBzZXF1ZW5jZSB0byBhY3R1YWxseSBhcHBlYXIgaW4gYSBkaWZmZXJlbnQgY29udGV4dCwgc28gd2UganVzdCBsZXZlcmFnZSB0aGlzIGZhY3QgaGVyZVxuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcocG9zaXRpb24gLSAxLCBwb2ludHMsIGluZGV4KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBkZWxpbWl0KGNoYXJhY3Rlcik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIC8vIGNvbW1hXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDQ0KSB7XG4gICAgICAgICAgLy8gY29sb25cbiAgICAgICAgICBwYXJzZWRbKytpbmRleF0gPSBwZWVrKCkgPT09IDU4ID8gJyZcXGYnIDogJyc7XG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IHBhcnNlZFtpbmRleF0ubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIC8vIGZhbGx0aHJvdWdoXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZnJvbShjaGFyYWN0ZXIpO1xuICAgIH1cbiAgfSB3aGlsZSAoY2hhcmFjdGVyID0gbmV4dCgpKTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxudmFyIGdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXModmFsdWUsIHBvaW50cykge1xuICByZXR1cm4gZGVhbGxvYyh0b1J1bGVzKGFsbG9jKHZhbHVlKSwgcG9pbnRzKSk7XG59OyAvLyBXZWFrU2V0IHdvdWxkIGJlIG1vcmUgYXBwcm9wcmlhdGUsIGJ1dCBvbmx5IFdlYWtNYXAgaXMgc3VwcG9ydGVkIGluIElFMTFcblxuXG52YXIgZml4ZWRFbGVtZW50cyA9IC8qICNfX1BVUkVfXyAqL25ldyBXZWFrTWFwKCk7XG52YXIgY29tcGF0ID0gZnVuY3Rpb24gY29tcGF0KGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8ICFlbGVtZW50LnBhcmVudCB8fCAvLyBwb3NpdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBjb250YWlucyBwc2V1ZG9cbiAgLy8gbmVnYXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgaGFzIGJlZW4gYWxyZWFkeSBwcmVmaXhlZFxuICBlbGVtZW50Lmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlLFxuICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gIHZhciBpc0ltcGxpY2l0UnVsZSA9IGVsZW1lbnQuY29sdW1uID09PSBwYXJlbnQuY29sdW1uICYmIGVsZW1lbnQubGluZSA9PT0gcGFyZW50LmxpbmU7XG5cbiAgd2hpbGUgKHBhcmVudC50eXBlICE9PSAncnVsZScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIGlmICghcGFyZW50KSByZXR1cm47XG4gIH0gLy8gc2hvcnQtY2lyY3VpdCBmb3IgdGhlIHNpbXBsZXN0IGNhc2VcblxuXG4gIGlmIChlbGVtZW50LnByb3BzLmxlbmd0aCA9PT0gMSAmJiB2YWx1ZS5jaGFyQ29kZUF0KDApICE9PSA1OFxuICAvKiBjb2xvbiAqL1xuICAmJiAhZml4ZWRFbGVtZW50cy5nZXQocGFyZW50KSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBpZiB0aGlzIGlzIGFuIGltcGxpY2l0bHkgaW5zZXJ0ZWQgcnVsZSAodGhlIG9uZSBlYWdlcmx5IGluc2VydGVkIGF0IHRoZSBlYWNoIG5ldyBuZXN0ZWQgbGV2ZWwpXG4gIC8vIHRoZW4gdGhlIHByb3BzIGhhcyBhbHJlYWR5IGJlZW4gbWFuaXB1bGF0ZWQgYmVmb3JlaGFuZCBhcyB0aGV5IHRoYXQgYXJyYXkgaXMgc2hhcmVkIGJldHdlZW4gaXQgYW5kIGl0cyBcInJ1bGUgcGFyZW50XCJcblxuXG4gIGlmIChpc0ltcGxpY2l0UnVsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpeGVkRWxlbWVudHMuc2V0KGVsZW1lbnQsIHRydWUpO1xuICB2YXIgcG9pbnRzID0gW107XG4gIHZhciBydWxlcyA9IGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpO1xuICB2YXIgcGFyZW50UnVsZXMgPSBwYXJlbnQucHJvcHM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcmVudFJ1bGVzLmxlbmd0aDsgaisrLCBrKyspIHtcbiAgICAgIGVsZW1lbnQucHJvcHNba10gPSBwb2ludHNbaV0gPyBydWxlc1tpXS5yZXBsYWNlKC8mXFxmL2csIHBhcmVudFJ1bGVzW2pdKSA6IHBhcmVudFJ1bGVzW2pdICsgXCIgXCIgKyBydWxlc1tpXTtcbiAgICB9XG4gIH1cbn07XG52YXIgcmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgPT09ICdkZWNsJykge1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWU7XG5cbiAgICBpZiAoIC8vIGNoYXJjb2RlIGZvciBsXG4gICAgdmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMTA4ICYmIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgdmFsdWUuY2hhckNvZGVBdCgyKSA9PT0gOTgpIHtcbiAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICAgICAgZWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgfVxufTtcbnZhciBpZ25vcmVGbGFnID0gJ2Vtb3Rpb24tZGlzYWJsZS1zZXJ2ZXItcmVuZGVyaW5nLXVuc2FmZS1zZWxlY3Rvci13YXJuaW5nLXBsZWFzZS1kby1ub3QtdXNlLXRoaXMtdGhlLXdhcm5pbmctZXhpc3RzLWZvci1hLXJlYXNvbic7XG5cbnZhciBpc0lnbm9yaW5nQ29tbWVudCA9IGZ1bmN0aW9uIGlzSWdub3JpbmdDb21tZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICEhZWxlbWVudCAmJiBlbGVtZW50LnR5cGUgPT09ICdjb21tJyAmJiBlbGVtZW50LmNoaWxkcmVuLmluZGV4T2YoaWdub3JlRmxhZykgPiAtMTtcbn07XG5cbnZhciBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSA9IGZ1bmN0aW9uIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKGNhY2hlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnKSByZXR1cm47XG4gICAgdmFyIHVuc2FmZVBzZXVkb0NsYXNzZXMgPSBlbGVtZW50LnZhbHVlLm1hdGNoKC8oOmZpcnN0fDpudGh8Om50aC1sYXN0KS1jaGlsZC9nKTtcblxuICAgIGlmICh1bnNhZmVQc2V1ZG9DbGFzc2VzICYmIGNhY2hlLmNvbXBhdCAhPT0gdHJ1ZSkge1xuICAgICAgdmFyIHByZXZFbGVtZW50ID0gaW5kZXggPiAwID8gY2hpbGRyZW5baW5kZXggLSAxXSA6IG51bGw7XG5cbiAgICAgIGlmIChwcmV2RWxlbWVudCAmJiBpc0lnbm9yaW5nQ29tbWVudChsYXN0KHByZXZFbGVtZW50LmNoaWxkcmVuKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1bnNhZmVQc2V1ZG9DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKHVuc2FmZVBzZXVkb0NsYXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgcHNldWRvIGNsYXNzIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzICsgXCJcXFwiIGlzIHBvdGVudGlhbGx5IHVuc2FmZSB3aGVuIGRvaW5nIHNlcnZlci1zaWRlIHJlbmRlcmluZy4gVHJ5IGNoYW5naW5nIGl0IHRvIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzLnNwbGl0KCctY2hpbGQnKVswXSArIFwiLW9mLXR5cGVcXFwiLlwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBpc0ltcG9ydFJ1bGUgPSBmdW5jdGlvbiBpc0ltcG9ydFJ1bGUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMSkgPT09IDEwNSAmJiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgwKSA9PT0gNjQ7XG59O1xuXG52YXIgaXNQcmVwZW5kZWRXaXRoUmVndWxhclJ1bGVzID0gZnVuY3Rpb24gaXNQcmVwZW5kZWRXaXRoUmVndWxhclJ1bGVzKGluZGV4LCBjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmICghaXNJbXBvcnRSdWxlKGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTsgLy8gdXNlIHRoaXMgdG8gcmVtb3ZlIGluY29ycmVjdCBlbGVtZW50cyBmcm9tIGZ1cnRoZXIgcHJvY2Vzc2luZ1xuLy8gc28gdGhleSBkb24ndCBnZXQgaGFuZGVkIHRvIHRoZSBgc2hlZXRgIChvciBhbnl0aGluZyBlbHNlKVxuLy8gYXMgdGhhdCBjb3VsZCBwb3RlbnRpYWxseSBsZWFkIHRvIGFkZGl0aW9uYWwgbG9ncyB3aGljaCBpbiB0dXJuIGNvdWxkIGJlIG92ZXJoZWxtaW5nIHRvIHRoZSB1c2VyXG5cblxudmFyIG51bGxpZnlFbGVtZW50ID0gZnVuY3Rpb24gbnVsbGlmeUVsZW1lbnQoZWxlbWVudCkge1xuICBlbGVtZW50LnR5cGUgPSAnJztcbiAgZWxlbWVudC52YWx1ZSA9ICcnO1xuICBlbGVtZW50W1wicmV0dXJuXCJdID0gJyc7XG4gIGVsZW1lbnQuY2hpbGRyZW4gPSAnJztcbiAgZWxlbWVudC5wcm9wcyA9ICcnO1xufTtcblxudmFyIGluY29ycmVjdEltcG9ydEFsYXJtID0gZnVuY3Rpb24gaW5jb3JyZWN0SW1wb3J0QWxhcm0oZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGlmICghaXNJbXBvcnRSdWxlKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQucGFyZW50KSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBuZXN0ZWQgaW5zaWRlIG90aGVyIHJ1bGVzLiBQbGVhc2UgbW92ZSBpdCB0byB0aGUgdG9wIGxldmVsIGFuZCBwdXQgaXQgYmVmb3JlIHJlZ3VsYXIgcnVsZXMuIEtlZXAgaW4gbWluZCB0aGF0IHRoZXkgY2FuIG9ubHkgYmUgdXNlZCB3aXRoaW4gZ2xvYmFsIHN0eWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH0gZWxzZSBpZiAoaXNQcmVwZW5kZWRXaXRoUmVndWxhclJ1bGVzKGluZGV4LCBjaGlsZHJlbikpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIGFmdGVyIG90aGVyIHJ1bGVzLiBQbGVhc2UgcHV0IHlvdXIgYEBpbXBvcnRgIHJ1bGVzIGJlZm9yZSB5b3VyIG90aGVyIHJ1bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfVxufTtcblxudmFyIGRlZmF1bHRTdHlsaXNQbHVnaW5zID0gW3ByZWZpeGVyXTtcblxudmFyIGNyZWF0ZUNhY2hlID0gZnVuY3Rpb24gY3JlYXRlQ2FjaGUob3B0aW9ucykge1xuICB2YXIga2V5ID0gb3B0aW9ucy5rZXk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWtleSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBoYXZlIHRvIGNvbmZpZ3VyZSBga2V5YCBmb3IgeW91ciBjYWNoZS4gUGxlYXNlIG1ha2Ugc3VyZSBpdCdzIHVuaXF1ZSAoYW5kIG5vdCBlcXVhbCB0byAnY3NzJykgYXMgaXQncyB1c2VkIGZvciBsaW5raW5nIHN0eWxlcyB0byB5b3VyIGNhY2hlLlxcblwiICsgXCJJZiBtdWx0aXBsZSBjYWNoZXMgc2hhcmUgdGhlIHNhbWUga2V5IHRoZXkgbWlnaHQgXFxcImZpZ2h0XFxcIiBmb3IgZWFjaCBvdGhlcidzIHN0eWxlIGVsZW1lbnRzLlwiKTtcbiAgfVxuXG4gIGlmICgga2V5ID09PSAnY3NzJykge1xuICAgIHZhciBzc3JTdHlsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXTpub3QoW2RhdGEtc10pXCIpOyAvLyBnZXQgU1NSZWQgc3R5bGVzIG91dCBvZiB0aGUgd2F5IG9mIFJlYWN0J3MgaHlkcmF0aW9uXG4gICAgLy8gZG9jdW1lbnQuaGVhZCBpcyBhIHNhZmUgcGxhY2UgdG8gbW92ZSB0aGVtIHRvKHRob3VnaCBub3RlIGRvY3VtZW50LmhlYWQgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBsYXN0IHBsYWNlIHRoZXkgd2lsbCBiZSlcbiAgICAvLyBub3RlIHRoaXMgdmVyeSB2ZXJ5IGludGVudGlvbmFsbHkgdGFyZ2V0cyBhbGwgc3R5bGUgZWxlbWVudHMgcmVnYXJkbGVzcyBvZiB0aGUga2V5IHRvIGVuc3VyZVxuICAgIC8vIHRoYXQgY3JlYXRpbmcgYSBjYWNoZSB3b3JrcyBpbnNpZGUgb2YgcmVuZGVyIG9mIGEgUmVhY3QgY29tcG9uZW50XG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNzclN0eWxlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIHdlIHdhbnQgdG8gb25seSBtb3ZlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBzcGFjZSBpbiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgLy8gYmVjYXVzZSB0aGF0IGluZGljYXRlcyB0aGF0IGl0IGlzIGFuIEVtb3Rpb24gMTEgc2VydmVyLXNpZGUgcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICAgIC8vIHdoaWxlIHdlIHdpbGwgYWxyZWFkeSBpZ25vcmUgRW1vdGlvbiAxMSBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgYmVjYXVzZSBvZiB0aGUgOm5vdChbZGF0YS1zXSkgcGFydCBpbiB0aGUgc2VsZWN0b3JcbiAgICAgIC8vIEVtb3Rpb24gMTAgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGRpZCBub3QgaGF2ZSBkYXRhLXMgKGJ1dCBpbXBvcnRhbnRseSBkaWQgbm90IGhhdmUgYSBzcGFjZSBpbiB0aGVpciBkYXRhLWVtb3Rpb24gYXR0cmlidXRlcylcbiAgICAgIC8vIHNvIGNoZWNraW5nIGZvciB0aGUgc3BhY2UgZW5zdXJlcyB0aGF0IGxvYWRpbmcgRW1vdGlvbiAxMSBhZnRlciBFbW90aW9uIDEwIGhhcyBpbnNlcnRlZCBzb21lIHN0eWxlc1xuICAgICAgLy8gd2lsbCBub3QgcmVzdWx0IGluIHRoZSBFbW90aW9uIDEwIHN0eWxlcyBiZWluZyBkZXN0cm95ZWRcbiAgICAgIHZhciBkYXRhRW1vdGlvbkF0dHJpYnV0ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nKTtcblxuICAgICAgaWYgKGRhdGFFbW90aW9uQXR0cmlidXRlLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgc3R5bGlzUGx1Z2lucyA9IG9wdGlvbnMuc3R5bGlzUGx1Z2lucyB8fCBkZWZhdWx0U3R5bGlzUGx1Z2lucztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307IC8vICRGbG93Rml4TWVcblxuICB2YXIgY29udGFpbmVyO1xuICB2YXIgbm9kZXNUb0h5ZHJhdGUgPSBbXTtcblxuICB7XG4gICAgY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXIgfHwgZG9jdW1lbnQuaGVhZDtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKCAvLyB0aGlzIG1lYW5zIHdlIHdpbGwgaWdub3JlIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYSBzcGFjZSBpbiB0aGVtIHdoaWNoXG4gICAgLy8gbWVhbnMgdGhhdCB0aGUgc3R5bGUgZWxlbWVudHMgd2UncmUgbG9va2luZyBhdCBhcmUgb25seSBFbW90aW9uIDExIHNlcnZlci1yZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25ePVxcXCJcIiArIGtleSArIFwiIFxcXCJdXCIpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIGF0dHJpYiA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1lbW90aW9uXCIpLnNwbGl0KCcgJyk7IC8vICRGbG93Rml4TWVcblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhdHRyaWIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5zZXJ0ZWRbYXR0cmliW2ldXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGVzVG9IeWRyYXRlLnB1c2gobm9kZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgX2luc2VydDtcblxuICB2YXIgb21uaXByZXNlbnRQbHVnaW5zID0gW2NvbXBhdCwgcmVtb3ZlTGFiZWxdO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgb21uaXByZXNlbnRQbHVnaW5zLnB1c2goY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oe1xuICAgICAgZ2V0IGNvbXBhdCgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLmNvbXBhdDtcbiAgICAgIH1cblxuICAgIH0pLCBpbmNvcnJlY3RJbXBvcnRBbGFybSk7XG4gIH1cblxuICB7XG4gICAgdmFyIGN1cnJlbnRTaGVldDtcbiAgICB2YXIgZmluYWxpemluZ1BsdWdpbnMgPSBbc3RyaW5naWZ5LCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudC5yb290KSB7XG4gICAgICAgIGlmIChlbGVtZW50W1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50W1wicmV0dXJuXCJdKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnZhbHVlICYmIGVsZW1lbnQudHlwZSAhPT0gQ09NTUVOVCkge1xuICAgICAgICAgIC8vIGluc2VydCBlbXB0eSBydWxlIGluIG5vbi1wcm9kdWN0aW9uIGVudmlyb25tZW50c1xuICAgICAgICAgIC8vIHNvIEBlbW90aW9uL2plc3QgY2FuIGdyYWIgYGtleWAgZnJvbSB0aGUgKEpTKURPTSBmb3IgY2FjaGVzIHdpdGhvdXQgYW55IHJ1bGVzIGluc2VydGVkIHlldFxuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudC52YWx1ZSArIFwie31cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IDogcnVsZXNoZWV0KGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KHJ1bGUpO1xuICAgIH0pXTtcbiAgICB2YXIgc2VyaWFsaXplciA9IG1pZGRsZXdhcmUob21uaXByZXNlbnRQbHVnaW5zLmNvbmNhdChzdHlsaXNQbHVnaW5zLCBmaW5hbGl6aW5nUGx1Z2lucykpO1xuXG4gICAgdmFyIHN0eWxpcyA9IGZ1bmN0aW9uIHN0eWxpcyhzdHlsZXMpIHtcbiAgICAgIHJldHVybiBzZXJpYWxpemUoY29tcGlsZShzdHlsZXMpLCBzZXJpYWxpemVyKTtcbiAgICB9O1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICBjdXJyZW50U2hlZXQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJyZW50U2hlZXQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBzZXJpYWxpemVkLm1hcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzdHlsaXMoc2VsZWN0b3IgPyBzZWxlY3RvciArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIiA6IHNlcmlhbGl6ZWQuc3R5bGVzKTtcblxuICAgICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICAgIGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgY2FjaGUgPSB7XG4gICAga2V5OiBrZXksXG4gICAgc2hlZXQ6IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICAgIHNwZWVkeTogb3B0aW9ucy5zcGVlZHksXG4gICAgICBwcmVwZW5kOiBvcHRpb25zLnByZXBlbmQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogb3B0aW9ucy5pbnNlcnRpb25Qb2ludFxuICAgIH0pLFxuICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgIGluc2VydGVkOiBpbnNlcnRlZCxcbiAgICByZWdpc3RlcmVkOiB7fSxcbiAgICBpbnNlcnQ6IF9pbnNlcnRcbiAgfTtcbiAgY2FjaGUuc2hlZXQuaHlkcmF0ZShub2Rlc1RvSHlkcmF0ZSk7XG4gIHJldHVybiBjYWNoZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNhY2hlO1xuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVQsIFJVTEVTRVQsIEtFWUZSQU1FUywgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7bWF0Y2gsIGNoYXJhdCwgc3Vic3RyLCBzdHJsZW4sIHNpemVvZiwgcmVwbGFjZSwgY29tYmluZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtjb3B5LCB0b2tlbml6ZX0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9TZXJpYWxpemVyLmpzJ1xuaW1wb3J0IHtwcmVmaXh9IGZyb20gJy4vUHJlZml4ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbltdfSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUgKGNvbGxlY3Rpb24pIHtcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjb2xsZWN0aW9uKVxuXG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRcdHZhciBvdXRwdXQgPSAnJ1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdG91dHB1dCArPSBjb2xsZWN0aW9uW2ldKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2hlZXQgKGNhbGxiYWNrKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5yb290KVxuXHRcdFx0aWYgKGVsZW1lbnQgPSBlbGVtZW50LnJldHVybilcblx0XHRcdFx0Y2FsbGJhY2soZWxlbWVudClcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ZXIgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0aWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpXG5cdFx0aWYgKCFlbGVtZW50LnJldHVybilcblx0XHRcdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgS0VZRlJBTUVTOlxuXHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge3ZhbHVlOiByZXBsYWNlKGVsZW1lbnQudmFsdWUsICdAJywgJ0AnICsgV0VCS0lUKX0pXSwgY2FsbGJhY2spXG5cdFx0XHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdFx0XHRpZiAoZWxlbWVudC5sZW5ndGgpXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyA6cmVhZC0ob25seXx3cml0ZSlcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6cmVhZC1vbmx5JzogY2FzZSAnOnJlYWQtd3JpdGUnOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldfSldLCBjYWxsYmFjaylcblx0XHRcdFx0XHRcdFx0XHQvLyA6cGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6OnBsYWNlaG9sZGVyJzpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldfSlcblx0XHRcdFx0XHRcdFx0XHRcdF0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuICcnXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYW1lc3BhY2UgKGVsZW1lbnQpIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRlbGVtZW50LnByb3BzID0gZWxlbWVudC5wcm9wcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBjb21iaW5lKHRva2VuaXplKHZhbHVlKSwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgY2hpbGRyZW4pIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgMCkpIHtcblx0XHRcdFx0XHRcdC8vIFxcZlxuXHRcdFx0XHRcdFx0Y2FzZSAxMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHN1YnN0cih2YWx1ZSwgMSwgc3RybGVuKHZhbHVlKSlcblx0XHRcdFx0XHRcdC8vIFxcMCAoICsgPiB+XG5cdFx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgNDA6IGNhc2UgNDM6IGNhc2UgNjI6IGNhc2UgMTI2OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdC8vIDpcblx0XHRcdFx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdFx0XHRcdGlmIChjaGlsZHJlblsrK2luZGV4XSA9PT0gJ2dsb2JhbCcpXG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGRyZW5baW5kZXhdID0gJycsIGNoaWxkcmVuWysraW5kZXhdID0gJ1xcZicgKyBzdWJzdHIoY2hpbGRyZW5baW5kZXhdLCBpbmRleCA9IDEsIC0xKVxuXHRcdFx0XHRcdFx0Ly8gXFxzXG5cdFx0XHRcdFx0XHRjYXNlIDMyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAwOiBlbGVtZW50ID0gdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzaXplb2YoY2hpbGRyZW4pID4gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRjYXNlIGluZGV4ID0gc2l6ZW9mKGNoaWxkcmVuKSAtIDE6IGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMiA/IHZhbHVlICsgZWxlbWVudCArIGVsZW1lbnQgOiB2YWx1ZSArIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHR9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbXVybXVyMjtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCJpbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcbnZhciBVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUiA9IFwiWW91IGhhdmUgcGFzc2VkIGluIGZhbHN5IHZhbHVlIGFzIHN0eWxlIG9iamVjdCdzIGtleSAoY2FuIGhhcHBlbiB3aGVuIGluIGV4YW1wbGUgeW91IHBhc3MgdW5leHBvcnRlZCBjb21wb25lbnQgYXMgY29tcHV0ZWQga2V5KS5cIjtcbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBhbmltYXRpb25SZWdleCA9IC9fRU1PXyhbXl9dKz8pXyhbXl0qPylfRU1PXy9nO1xuXG52YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IGZ1bmN0aW9uIGlzQ3VzdG9tUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuIHByb3BlcnR5LmNoYXJDb2RlQXQoMSkgPT09IDQ1O1xufTtcblxudmFyIGlzUHJvY2Vzc2FibGVWYWx1ZSA9IGZ1bmN0aW9uIGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJztcbn07XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBpc0N1c3RvbVByb3BlcnR5KHN0eWxlTmFtZSkgPyBzdHlsZU5hbWUgOiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcblxudmFyIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IHAxLFxuICAgICAgICAgICAgICBzdHlsZXM6IHAyLFxuICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfVxuXG4gIGlmICh1bml0bGVzc1trZXldICE9PSAxICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8oYXR0cnxjb3VudGVycz98dXJsfCgoKHJlcGVhdGluZy0pPyhsaW5lYXJ8cmFkaWFsKSl8Y29uaWMpLWdyYWRpZW50KVxcKHwobm8tKT8ob3BlbnxjbG9zZSktcXVvdGUvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgdmFyIGh5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuICB2YXIgaHlwaGVuYXRlZENhY2hlID0ge307XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBzZWVtIHRvIGJlIHVzaW5nIGEgdmFsdWUgZm9yICdjb250ZW50JyB3aXRob3V0IHF1b3RlcywgdHJ5IHJlcGxhY2luZyBpdCB3aXRoIGBjb250ZW50OiAnXFxcIlwiICsgdmFsdWUgKyBcIlxcXCInYFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvY2Vzc2VkID0gb2xkUHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSk7XG5cbiAgICBpZiAocHJvY2Vzc2VkICE9PSAnJyAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIGtleS5pbmRleE9mKCctJykgIT09IC0xICYmIGh5cGhlbmF0ZWRDYWNoZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGh5cGhlbmF0ZWRDYWNoZVtrZXldID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVc2luZyBrZWJhYi1jYXNlIGZvciBjc3MgcHJvcGVydGllcyBpbiBvYmplY3RzIGlzIG5vdCBzdXBwb3J0ZWQuIERpZCB5b3UgbWVhbiBcIiArIGtleS5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpLnJlcGxhY2UoaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKHN0ciwgX2NoYXIpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFyLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9KSArIFwiP1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoaW50ZXJwb2xhdGlvbi5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLnRvU3RyaW5nKCkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIEBlbW90aW9uL2JhYmVsLXBsdWdpbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIGludGVycG9sYXRpb24pIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uYW5pbSA9PT0gMSkge1xuICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGludGVycG9sYXRpb24ubmFtZSxcbiAgICAgICAgICAgIHN0eWxlczogaW50ZXJwb2xhdGlvbi5zdHlsZXMsXG4gICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0aW9uLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gaW50ZXJwb2xhdGlvbi5uZXh0O1xuXG4gICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbm90IHRoZSBtb3N0IGVmZmljaWVudCB0aGluZyBldmVyIGJ1dCB0aGlzIGlzIGEgcHJldHR5IHJhcmUgY2FzZVxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHdpbGwgYmUgdmVyeSBmZXcgaXRlcmF0aW9ucyBvZiB0aGlzIGdlbmVyYWxseVxuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmV4dC5uYW1lLFxuICAgICAgICAgICAgICAgIHN0eWxlczogbmV4dC5zdHlsZXMsXG4gICAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlcyA9IGludGVycG9sYXRpb24uc3R5bGVzICsgXCI7XCI7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gaW50ZXJwb2xhdGlvbi5tYXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKG1lcmdlZFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXNDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGludGVycG9sYXRpb24obWVyZ2VkUHJvcHMpO1xuICAgICAgICAgIGN1cnNvciA9IHByZXZpb3VzQ3Vyc29yO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCByZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGdW5jdGlvbnMgdGhhdCBhcmUgaW50ZXJwb2xhdGVkIGluIGNzcyBjYWxscyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxcbicgKyAnSWYgeW91IHdhbnQgdG8gaGF2ZSBhIGNzcyBjYWxsIGJhc2VkIG9uIHByb3BzLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjc3MgY2FsbCBsaWtlIHRoaXNcXG4nICsgJ2xldCBkeW5hbWljU3R5bGUgPSAocHJvcHMpID0+IGNzc2Bjb2xvcjogJHtwcm9wcy5jb2xvcn1gXFxuJyArICdJdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IHdpdGggcHJvcHMgb3IgaW50ZXJwb2xhdGVkIGluIGEgc3R5bGVkIGNhbGwgbGlrZSB0aGlzXFxuJyArIFwibGV0IFNvbWVDb21wb25lbnQgPSBzdHlsZWQoJ2RpdicpYCR7ZHluYW1pY1N0eWxlfWBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSBpbnRlcnBvbGF0aW9uLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgdmFyIGZha2VWYXJOYW1lID0gXCJhbmltYXRpb25cIiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICAgIG1hdGNoZWQucHVzaChcImNvbnN0IFwiICsgZmFrZVZhck5hbWUgKyBcIiA9IGtleWZyYW1lc2BcIiArIHAyLnJlcGxhY2UoL15Aa2V5ZnJhbWVzIGFuaW1hdGlvbi1cXHcrLywgJycpICsgXCJgXCIpO1xuICAgICAgICAgIHJldHVybiBcIiR7XCIgKyBmYWtlVmFyTmFtZSArIFwifVwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdga2V5ZnJhbWVzYCBvdXRwdXQgZ290IGludGVycG9sYXRlZCBpbnRvIHBsYWluIHN0cmluZywgcGxlYXNlIHdyYXAgaXQgd2l0aCBgY3NzYC5cXG5cXG4nICsgJ0luc3RlYWQgb2YgZG9pbmcgdGhpczpcXG5cXG4nICsgW10uY29uY2F0KG1hdGNoZWQsIFtcImBcIiArIHJlcGxhY2VkICsgXCJgXCJdKS5qb2luKCdcXG4nKSArICdcXG5cXG5Zb3Ugc2hvdWxkIHdyYXAgaXQgd2l0aCBgY3NzYCBsaWtlIHRoaXM6XFxuXFxuJyArIChcImNzc2BcIiArIHJlcGxhY2VkICsgXCJgXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfSAvLyBmaW5hbGl6ZSBzdHJpbmcgdmFsdWVzIChyZWd1bGFyIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyBpbnRlcnBvbGF0ZWQgaW50byBjc3MgY2FsbHMpXG5cblxuICBpZiAocmVnaXN0ZXJlZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcbiAgcmV0dXJuIGNhY2hlZCAhPT0gdW5kZWZpbmVkID8gY2FjaGVkIDogaW50ZXJwb2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqKSB7XG4gIHZhciBzdHJpbmcgPSAnJztcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmpbaV0pICsgXCI7XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvYmpbX2tleV07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkICE9IG51bGwgJiYgcmVnaXN0ZXJlZFt2YWx1ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyByZWdpc3RlcmVkW3ZhbHVlXSArIFwifVwiO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWUpICsgXCI7XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfa2V5ID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBAZW1vdGlvbi9iYWJlbC1wbHVnaW4uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnc3RyaW5nJyAmJiAocmVnaXN0ZXJlZCA9PSBudWxsIHx8IHJlZ2lzdGVyZWRbdmFsdWVbMF1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHZhbHVlLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZVtfaV0pKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZVtfaV0pICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWQgPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCB2YWx1ZSk7XG5cbiAgICAgICAgICBzd2l0Y2ggKF9rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX2tleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKig7fCQpL2c7XG52YXIgc291cmNlTWFwUGF0dGVybjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc291cmNlTWFwUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy9nO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICB9XG5cbiAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgfSAvLyB3ZSBzdGFydCBhdCAxIHNpbmNlIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgZmlyc3QgYXJnXG5cblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgYXJnc1tpXSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpXTtcbiAgICB9XG4gIH1cblxuICB2YXIgc291cmNlTWFwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBzb3VyY2VNYXAgPSBtYXRjaDtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfSAvLyB1c2luZyBhIGdsb2JhbCByZWdleCB3aXRoIC5leGVjIGlzIHN0YXRlZnVsIHNvIGxhc3RJbmRleCBoYXMgdG8gYmUgcmVzZXQgZWFjaCB0aW1lXG5cblxuICBsYWJlbFBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG4gIHZhciBtYXRjaDsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YjgwOWMyY2YyOTQ5ODAwYTBmNjFmYjVcblxuICB3aGlsZSAoKG1hdGNoID0gbGFiZWxQYXR0ZXJuLmV4ZWMoc3R5bGVzKSkgIT09IG51bGwpIHtcbiAgICBpZGVudGlmaWVyTmFtZSArPSAnLScgKyAvLyAkRmxvd0ZpeE1lIHdlIGtub3cgaXQncyBub3QgbnVsbFxuICAgIG1hdGNoWzFdO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBoYXNoU3RyaW5nKHN0eWxlcykgKyBpZGVudGlmaWVyTmFtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWUgU2VyaWFsaXplZFN0eWxlcyB0eXBlIGRvZXNuJ3QgaGF2ZSB0b1N0cmluZyBwcm9wZXJ0eSAoYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGl0KVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBtYXA6IHNvdXJjZU1hcCxcbiAgICAgIG5leHQ6IGN1cnNvcixcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGhhdmUgdHJpZWQgdG8gc3RyaW5naWZ5IG9iamVjdCByZXR1cm5lZCBmcm9tIGBjc3NgIGZ1bmN0aW9uLiBJdCBpc24ndCBzdXBwb3NlZCB0byBiZSB1c2VkIGRpcmVjdGx5IChlLmcuIGFzIHZhbHVlIG9mIHRoZSBgY2xhc3NOYW1lYCBwcm9wKSwgYnV0IHJhdGhlciBoYW5kZWQgdG8gZW1vdGlvbiBzbyBpdCBjYW4gaGFuZGxlIGl0IChlLmcuIGFzIHZhbHVlIG9mIGBjc3NgIHByb3ApLlwiO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbmV4dDogY3Vyc29yXG4gIH07XG59O1xuXG5leHBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIGZvcndhcmRSZWYsIGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3ZWFrTWVtb2l6ZSBmcm9tICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIEVtb3Rpb25DYWNoZUNvbnRleHQgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVDb250ZXh0KCAvLyB3ZSdyZSBkb2luZyB0aGlzIHRvIGF2b2lkIHByZWNvbnN0cnVjdCdzIGRlYWQgY29kZSBlbGltaW5hdGlvbiBpbiB0aGlzIG9uZSBjYXNlXG4vLyBiZWNhdXNlIHRoaXMgbW9kdWxlIGlzIHByaW1hcmlseSBpbnRlbmRlZCBmb3IgdGhlIGJyb3dzZXIgYW5kIG5vZGVcbi8vIGJ1dCBpdCdzIGFsc28gcmVxdWlyZWQgaW4gcmVhY3QgbmF0aXZlIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cyBzb21ldGltZXNcbi8vIGFuZCB3ZSBjb3VsZCBoYXZlIGEgc3BlY2lhbCBidWlsZCBqdXN0IGZvciB0aGF0XG4vLyBidXQgdGhpcyBpcyBtdWNoIGVhc2llciBhbmQgdGhlIG5hdGl2ZSBwYWNrYWdlc1xuLy8gbWlnaHQgdXNlIGEgZGlmZmVyZW50IHRoZW1lIGNvbnRleHQgaW4gdGhlIGZ1dHVyZSBhbnl3YXlcbnR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyAvKiAjX19QVVJFX18gKi9jcmVhdGVDYWNoZSh7XG4gIGtleTogJ2Nzcydcbn0pIDogbnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb25DYWNoZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNhY2hlQ29udGV4dCc7XG59XG5cbnZhciBDYWNoZVByb3ZpZGVyID0gRW1vdGlvbkNhY2hlQ29udGV4dC5Qcm92aWRlcjtcbnZhciBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB1c2VFbW90aW9uQ2FjaGUoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xufTtcblxudmFyIHdpdGhFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlKGZ1bmMpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICAvLyB0aGUgY2FjaGUgd2lsbCBuZXZlciBiZSBudWxsIGluIHRoZSBicm93c2VyXG4gICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbiAgICByZXR1cm4gZnVuYyhwcm9wcywgY2FjaGUsIHJlZik7XG4gIH0pO1xufTtcblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZSA9IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZShsaW5lKSB7XG4gIC8vIFY4XG4gIHZhciBtYXRjaCA9IC9eXFxzK2F0XFxzKyhbQS1aYS16MC05JC5dKylcXHMvLmV4ZWMobGluZSk7XG5cbiAgaWYgKG1hdGNoKSB7XG4gICAgLy8gVGhlIG1hdGNoIG1heSBiZSBzb21ldGhpbmcgbGlrZSAnT2JqZWN0LmNyZWF0ZUVtb3Rpb25Qcm9wcydcbiAgICB2YXIgcGFydHMgPSBtYXRjaFsxXS5zcGxpdCgnLicpO1xuICAgIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbiAgfSAvLyBTYWZhcmkgLyBGaXJlZm94XG5cblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIG1hdGNoWzFdO1xuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIGludGVybmFsUmVhY3RGdW5jdGlvbk5hbWVzID0gLyogI19fUFVSRV9fICovbmV3IFNldChbJ3JlbmRlcldpdGhIb29rcycsICdwcm9jZXNzQ2hpbGQnLCAnZmluaXNoQ2xhc3NDb21wb25lbnQnLCAncmVuZGVyVG9TdHJpbmcnXSk7IC8vIFRoZXNlIGlkZW50aWZpZXJzIGNvbWUgZnJvbSBlcnJvciBzdGFja3MsIHNvIHRoZXkgaGF2ZSB0byBiZSB2YWxpZCBKU1xuLy8gaWRlbnRpZmllcnMsIHRodXMgd2Ugb25seSBuZWVkIHRvIHJlcGxhY2Ugd2hhdCBpcyBhIHZhbGlkIGNoYXJhY3RlciBmb3IgSlMsXG4vLyBidXQgbm90IGZvciBDU1MuXG5cbnZhciBzYW5pdGl6ZUlkZW50aWZpZXIgPSBmdW5jdGlvbiBzYW5pdGl6ZUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gaWRlbnRpZmllci5yZXBsYWNlKC9cXCQvZywgJy0nKTtcbn07XG5cbnZhciBnZXRMYWJlbEZyb21TdGFja1RyYWNlID0gZnVuY3Rpb24gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShzdGFja1RyYWNlKSB7XG4gIGlmICghc3RhY2tUcmFjZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGxpbmVzID0gc3RhY2tUcmFjZS5zcGxpdCgnXFxuJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZXNbaV0pOyAvLyBUaGUgZmlyc3QgbGluZSBvZiBWOCBzdGFjayB0cmFjZXMgaXMganVzdCBcIkVycm9yXCJcblxuICAgIGlmICghZnVuY3Rpb25OYW1lKSBjb250aW51ZTsgLy8gSWYgd2UgcmVhY2ggb25lIG9mIHRoZXNlLCB3ZSBoYXZlIGdvbmUgdG9vIGZhciBhbmQgc2hvdWxkIHF1aXRcblxuICAgIGlmIChpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcy5oYXMoZnVuY3Rpb25OYW1lKSkgYnJlYWs7IC8vIFRoZSBjb21wb25lbnQgbmFtZSBpcyB0aGUgZmlyc3QgZnVuY3Rpb24gaW4gdGhlIHN0YWNrIHRoYXQgc3RhcnRzIHdpdGggYW5cbiAgICAvLyB1cHBlcmNhc2UgbGV0dGVyXG5cbiAgICBpZiAoL15bQS1aXS8udGVzdChmdW5jdGlvbk5hbWUpKSByZXR1cm4gc2FuaXRpemVJZGVudGlmaWVyKGZ1bmN0aW9uTmFtZSk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIHR5cGVQcm9wTmFtZSA9ICdfX0VNT1RJT05fVFlQRV9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBsYWJlbFByb3BOYW1lID0gJ19fRU1PVElPTl9MQUJFTF9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBjcmVhdGVFbW90aW9uUHJvcHMgPSBmdW5jdGlvbiBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHByb3BzLmNzcyA9PT0gJ3N0cmluZycgJiYgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBjc3MgZGVjbGFyYXRpb25cbiAgcHJvcHMuY3NzLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmdzIGFyZSBub3QgYWxsb3dlZCBhcyBjc3MgcHJvcCB2YWx1ZXMsIHBsZWFzZSB3cmFwIGl0IGluIGEgY3NzIHRlbXBsYXRlIGxpdGVyYWwgZnJvbSAnQGVtb3Rpb24vcmVhY3QnIGxpa2UgdGhpczogY3NzYFwiICsgcHJvcHMuY3NzICsgXCJgXCIpO1xuICB9XG5cbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlOyAvLyBGb3IgcGVyZm9ybWFuY2UsIG9ubHkgY2FsbCBnZXRMYWJlbEZyb21TdGFja1RyYWNlIGluIGRldmVsb3BtZW50IGFuZCB3aGVuXG4gIC8vIHRoZSBsYWJlbCBoYXNuJ3QgYWxyZWFkeSBiZWVuIGNvbXB1dGVkXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISFwcm9wcy5jc3MgJiYgKHR5cGVvZiBwcm9wcy5jc3MgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwcm9wcy5jc3MubmFtZSAhPT0gJ3N0cmluZycgfHwgcHJvcHMuY3NzLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkpIHtcbiAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbEZyb21TdGFja1RyYWNlKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICBpZiAobGFiZWwpIG5ld1Byb3BzW2xhYmVsUHJvcE5hbWVdID0gbGFiZWw7XG4gIH1cblxuICByZXR1cm4gbmV3UHJvcHM7XG59O1xuXG52YXIgTm9vcCA9IGZ1bmN0aW9uIE5vb3AoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcnVsZXMgPSBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyk7XG4gIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgdmFyIGVsZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KHR5cGUsIG5ld1Byb3BzKTtcbiAgdmFyIHBvc3NpYmx5U3R5bGVFbGVtZW50ID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTm9vcCwgbnVsbCk7XG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIHBvc3NpYmx5U3R5bGVFbGVtZW50LCBlbGUpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59XG5cbmV4cG9ydCB7IENhY2hlUHJvdmlkZXIgYXMgQywgRW1vdGlvbiBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd25Qcm9wZXJ0eSBhcyBoLCB1c2VUaGVtZSBhcyB1LCB3aXRoRW1vdGlvbkNhY2hlIGFzIHcgfTtcbiIsInZhciBpc0Jyb3dzZXIgPSBcIm9iamVjdFwiICE9PSAndW5kZWZpbmVkJztcbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gKyBcIjtcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhd0NsYXNzTmFtZSArPSBjbGFzc05hbWUgKyBcIiBcIjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmF3Q2xhc3NOYW1lO1xufVxudmFyIGluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmICggLy8gd2Ugb25seSBuZWVkIHRvIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSByZWdpc3RlcmVkIGNhY2hlIGlmIHRoZVxuICAvLyBjbGFzcyBuYW1lIGNvdWxkIGJlIHVzZWQgZnVydGhlciBkb3duXG4gIC8vIHRoZSB0cmVlIGJ1dCBpZiBpdCdzIGEgc3RyaW5nIHRhZywgd2Uga25vdyBpdCB3b24ndFxuICAvLyBzbyB3ZSBkb24ndCBoYXZlIHRvIGFkZCBpdCB0byByZWdpc3RlcmVkIGNhY2hlLlxuICAvLyB0aGlzIGltcHJvdmVzIG1lbW9yeSB1c2FnZSBzaW5jZSB3ZSBjYW4gYXZvaWQgc3RvcmluZyB0aGUgd2hvbGUgc3R5bGUgc3RyaW5nXG4gIChpc1N0cmluZ1RhZyA9PT0gZmFsc2UgfHwgLy8gd2UgbmVlZCB0byBhbHdheXMgc3RvcmUgaXQgaWYgd2UncmUgaW4gY29tcGF0IG1vZGUgYW5kXG4gIC8vIGluIG5vZGUgc2luY2UgZW1vdGlvbi1zZXJ2ZXIgcmVsaWVzIG9uIHdoZXRoZXIgYSBzdHlsZSBpcyBpblxuICAvLyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBrbm93IHdoZXRoZXIgYSBzdHlsZSBpcyBnbG9iYWwgb3Igbm90XG4gIC8vIGFsc28sIG5vdGUgdGhhdCB0aGlzIGNoZWNrIHdpbGwgYmUgZGVhZCBjb2RlIGVsaW1pbmF0ZWQgaW4gdGhlIGJyb3dzZXJcbiAgaXNCcm93c2VyID09PSBmYWxzZSApICYmIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gIH1cblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBzZXJpYWxpemVkO1xuXG4gICAgZG8ge1xuICAgICAgdmFyIG1heWJlU3R5bGVzID0gY2FjaGUuaW5zZXJ0KHNlcmlhbGl6ZWQgPT09IGN1cnJlbnQgPyBcIi5cIiArIGNsYXNzTmFtZSA6ICcnLCBjdXJyZW50LCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG5cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgfSB3aGlsZSAoY3VycmVudCAhPT0gdW5kZWZpbmVkKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc1Byb3BWYWxpZCBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCB7IHdpdGhFbW90aW9uQ2FjaGUsIFRoZW1lQ29udGV4dCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5cbnZhciB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgPSBpc1Byb3BWYWxpZDtcblxudmFyIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCA9IGZ1bmN0aW9uIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudChrZXkpIHtcbiAgcmV0dXJuIGtleSAhPT0gJ3RoZW1lJztcbn07XG5cbnZhciBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBmdW5jdGlvbiBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJiAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2ID8gdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnIDogdGVzdE9taXRQcm9wc09uQ29tcG9uZW50O1xufTtcbnZhciBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzID0gZnVuY3Rpb24gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCkge1xuICB2YXIgc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID0gb3B0aW9ucy5zaG91bGRGb3J3YXJkUHJvcDtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID8gZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICByZXR1cm4gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcChwcm9wTmFtZSkgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wKHByb3BOYW1lKTtcbiAgICB9IDogb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzaG91bGRGb3J3YXJkUHJvcCAhPT0gJ2Z1bmN0aW9uJyAmJiBpc1JlYWwpIHtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3A7XG4gIH1cblxuICByZXR1cm4gc2hvdWxkRm9yd2FyZFByb3A7XG59O1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xuXG52YXIgTm9vcCA9IGZ1bmN0aW9uIE5vb3AoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlZCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGFyZSB0cnlpbmcgdG8gY3JlYXRlIGEgc3R5bGVkIGVsZW1lbnQgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LlxcbllvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc1JlYWwgPSB0YWcuX19lbW90aW9uX3JlYWwgPT09IHRhZztcbiAgdmFyIGJhc2VUYWcgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9iYXNlIHx8IHRhZztcbiAgdmFyIGlkZW50aWZpZXJOYW1lO1xuICB2YXIgdGFyZ2V0Q2xhc3NOYW1lO1xuXG4gIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZGVudGlmaWVyTmFtZSA9IG9wdGlvbnMubGFiZWw7XG4gICAgdGFyZ2V0Q2xhc3NOYW1lID0gb3B0aW9ucy50YXJnZXQ7XG4gIH1cblxuICB2YXIgc2hvdWxkRm9yd2FyZFByb3AgPSBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKTtcbiAgdmFyIGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wIHx8IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChiYXNlVGFnKTtcbiAgdmFyIHNob3VsZFVzZUFzID0gIWRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCgnYXMnKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3R5bGVzID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQgPyB0YWcuX19lbW90aW9uX3N0eWxlcy5zbGljZSgwKSA6IFtdO1xuXG4gICAgaWYgKGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoKFwibGFiZWw6XCIgKyBpZGVudGlmaWVyTmFtZSArIFwiO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnc1swXSA9PSBudWxsIHx8IGFyZ3NbMF0ucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoLmFwcGx5KHN0eWxlcywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1bMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzLnB1c2goYXJnc1swXVswXSk7XG4gICAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgICB2YXIgaSA9IDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXMucHVzaChhcmdzW2ldLCBhcmdzWzBdW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWU6IHdlIG5lZWQgdG8gY2FzdCBTdGF0ZWxlc3NGdW5jdGlvbmFsQ29tcG9uZW50IHRvIG91ciBQcml2YXRlU3R5bGVkQ29tcG9uZW50IGNsYXNzXG5cblxuICAgIHZhciBTdHlsZWQgPSB3aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICAgICAgdmFyIGZpbmFsVGFnID0gc2hvdWxkVXNlQXMgJiYgcHJvcHMuYXMgfHwgYmFzZVRhZztcbiAgICAgIHZhciBjbGFzc05hbWUgPSAnJztcbiAgICAgIHZhciBjbGFzc0ludGVycG9sYXRpb25zID0gW107XG4gICAgICB2YXIgbWVyZ2VkUHJvcHMgPSBwcm9wcztcblxuICAgICAgaWYgKHByb3BzLnRoZW1lID09IG51bGwpIHtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICBtZXJnZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lcmdlZFByb3BzLnRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCBjbGFzc0ludGVycG9sYXRpb25zLCBwcm9wcy5jbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoc3R5bGVzLmNvbmNhdChjbGFzc0ludGVycG9sYXRpb25zKSwgY2FjaGUucmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpO1xuICAgICAgdmFyIHJ1bGVzID0gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCB0eXBlb2YgZmluYWxUYWcgPT09ICdzdHJpbmcnKTtcbiAgICAgIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZSArPSBcIiBcIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRVc2VBcyAmJiBzaG91bGRGb3J3YXJkUHJvcCA9PT0gdW5kZWZpbmVkID8gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKGZpbmFsVGFnKSA6IGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcDtcbiAgICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBfa2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRVc2VBcyAmJiBfa2V5ID09PSAnYXMnKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoIC8vICRGbG93Rml4TWVcbiAgICAgICAgZmluYWxTaG91bGRGb3J3YXJkUHJvcChfa2V5KSkge1xuICAgICAgICAgIG5ld1Byb3BzW19rZXldID0gcHJvcHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgbmV3UHJvcHMucmVmID0gcmVmO1xuICAgICAgdmFyIGVsZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KGZpbmFsVGFnLCBuZXdQcm9wcyk7XG4gICAgICB2YXIgcG9zc2libHlTdHlsZUVsZW1lbnQgPSAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChOb29wLCBudWxsKTtcblxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIHBvc3NpYmx5U3R5bGVFbGVtZW50LCBlbGUpO1xuICAgIH0pO1xuICAgIFN0eWxlZC5kaXNwbGF5TmFtZSA9IGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQgPyBpZGVudGlmaWVyTmFtZSA6IFwiU3R5bGVkKFwiICsgKHR5cGVvZiBiYXNlVGFnID09PSAnc3RyaW5nJyA/IGJhc2VUYWcgOiBiYXNlVGFnLmRpc3BsYXlOYW1lIHx8IGJhc2VUYWcubmFtZSB8fCAnQ29tcG9uZW50JykgKyBcIilcIjtcbiAgICBTdHlsZWQuZGVmYXVsdFByb3BzID0gdGFnLmRlZmF1bHRQcm9wcztcbiAgICBTdHlsZWQuX19lbW90aW9uX3JlYWwgPSBTdHlsZWQ7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9iYXNlID0gYmFzZVRhZztcbiAgICBTdHlsZWQuX19lbW90aW9uX3N0eWxlcyA9IHN0eWxlcztcbiAgICBTdHlsZWQuX19lbW90aW9uX2ZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0eWxlZCwgJ3RvU3RyaW5nJywge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lID09PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHJldHVybiAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJztcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lOiBjb2VyY2UgdW5kZWZpbmVkIHRvIHN0cmluZ1xuXG5cbiAgICAgICAgcmV0dXJuIFwiLlwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgU3R5bGVkLndpdGhDb21wb25lbnQgPSBmdW5jdGlvbiAobmV4dFRhZywgbmV4dE9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVTdHlsZWQobmV4dFRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIG5leHRPcHRpb25zLCB7XG4gICAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKFN0eWxlZCwgbmV4dE9wdGlvbnMsIHRydWUpXG4gICAgICB9KSkuYXBwbHkodm9pZCAwLCBzdHlsZXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3R5bGVkO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3R5bGVkO1xuIiwiaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdyZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuLi9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0ICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuXG52YXIgdGFncyA9IFsnYScsICdhYmJyJywgJ2FkZHJlc3MnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2F1ZGlvJywgJ2InLCAnYmFzZScsICdiZGknLCAnYmRvJywgJ2JpZycsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhbnZhcycsICdjYXB0aW9uJywgJ2NpdGUnLCAnY29kZScsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGF0YScsICdkYXRhbGlzdCcsICdkZCcsICdkZWwnLCAnZGV0YWlscycsICdkZm4nLCAnZGlhbG9nJywgJ2RpdicsICdkbCcsICdkdCcsICdlbScsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaW5zJywgJ2tiZCcsICdrZXlnZW4nLCAnbGFiZWwnLCAnbGVnZW5kJywgJ2xpJywgJ2xpbmsnLCAnbWFpbicsICdtYXAnLCAnbWFyaycsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICdtZXRlcicsICduYXYnLCAnbm9zY3JpcHQnLCAnb2JqZWN0JywgJ29sJywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdvdXRwdXQnLCAncCcsICdwYXJhbScsICdwaWN0dXJlJywgJ3ByZScsICdwcm9ncmVzcycsICdxJywgJ3JwJywgJ3J0JywgJ3J1YnknLCAncycsICdzYW1wJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzbWFsbCcsICdzb3VyY2UnLCAnc3BhbicsICdzdHJvbmcnLCAnc3R5bGUnLCAnc3ViJywgJ3N1bW1hcnknLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpbWUnLCAndGl0bGUnLCAndHInLCAndHJhY2snLCAndScsICd1bCcsICd2YXInLCAndmlkZW8nLCAnd2JyJywgLy8gU1ZHXG4nY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2RlZnMnLCAnZWxsaXBzZScsICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICdzdmcnLCAndGV4dCcsICd0c3BhbiddO1xuXG52YXIgbmV3U3R5bGVkID0gY3JlYXRlU3R5bGVkLmJpbmQoKTtcbnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnTmFtZSkge1xuICAvLyAkRmxvd0ZpeE1lOiB3ZSBjYW4gaWdub3JlIHRoaXMgYmVjYXVzZSBpdHMgZXhwb3NlZCB0eXBlIGlzIGRlZmluZWQgYnkgdGhlIENyZWF0ZVN0eWxlZCB0eXBlXG4gIG5ld1N0eWxlZFt0YWdOYW1lXSA9IG5ld1N0eWxlZCh0YWdOYW1lKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBuZXdTdHlsZWQ7XG4iLCIvKiogQGxpY2Vuc2UgTVVJIHY1LjMuMFxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5pbXBvcnQgZW1TdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IGVtU3R5bGVkKHRhZywgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKC4uLnN0eWxlcykgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyBgXCIke3RhZ31cImAgOiAnY29tcG9uZW50JztcblxuICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogU2VlbXMgbGlrZSB5b3UgY2FsbGVkIFxcYHN0eWxlZCgke2NvbXBvbmVudH0pKClcXGAgd2l0aG91dCBhIFxcYHN0eWxlXFxgIGFyZ3VtZW50LmAsICdZb3UgbXVzdCBwcm92aWRlIGEgYHN0eWxlc2AgYXJndW1lbnQ6IGBzdHlsZWQoXCJkaXZcIikoc3R5bGVZb3VGb3Jnb3RUb1Bhc3MpYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcy5zb21lKHN0eWxlID0+IHN0eWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogdGhlIHN0eWxlZCgke2NvbXBvbmVudH0pKC4uLmFyZ3MpIEFQSSByZXF1aXJlcyBhbGwgaXRzIGFyZ3MgdG8gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlc0ZhY3RvcnkoLi4uc3R5bGVzKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlc0ZhY3Rvcnk7XG59XG5leHBvcnQgeyBUaGVtZUNvbnRleHQsIGtleWZyYW1lcywgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdHlsZWRFbmdpbmVQcm92aWRlciB9IGZyb20gJy4vU3R5bGVkRW5naW5lUHJvdmlkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHbG9iYWxTdHlsZXMgfSBmcm9tICcuL0dsb2JhbFN0eWxlcyc7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChpdGVtKSB7XG4gIHJldHVybiBpdGVtICE9PSBudWxsICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMgPSB7XG4gIGNsb25lOiB0cnVlXG59KSB7XG4gIGNvbnN0IG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcblxuICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIGlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgLy8gQXZvaWQgcHJvdG90eXBlIHBvbGx1dGlvblxuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYga2V5IGluIHRhcmdldCAmJiBpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSkge1xuICAgICAgICAvLyBTaW5jZSBgb3V0cHV0YCBpcyBhIGNsb25lIG9mIGB0YXJnZXRgIGFuZCB3ZSBoYXZlIG5hcnJvd2VkIGB0YXJnZXRgIGluIHRoaXMgYmxvY2sgd2UgY2FuIGNhc3QgdG8gdGhlIHNhbWUgdHlwZS5cbiAgICAgICAgb3V0cHV0W2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiBtZXJnZShhY2MsIGl0ZW0pIHtcbiAgaWYgKCFpdGVtKSB7XG4gICAgcmV0dXJuIGFjYztcbiAgfVxuXG4gIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBpdGVtLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcCwgaXQncyB3YXkgZmFzdGVyLlxuXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZTsiLCIvKipcbiAqIFdBUk5JTkc6IERvbid0IGltcG9ydCB0aGlzIGRpcmVjdGx5LlxuICogVXNlIGBNdWlFcnJvcmAgZnJvbSBgQG11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgbGV0IHVybCA9ICdodHRwczovL211aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIHJlc3QgcGFyYW1zIG92ZXItdHJhbnNwaWxlIGZvciB0aGlzIGNhc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdXJsICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuXG4gIHJldHVybiAnTWluaWZpZWQgTVVJIGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyB1cmwgKyAnIGZvciB0aGUgZnVsbCBtZXNzYWdlLic7XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXRlbXBsYXRlICovXG59IiwiaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIi4vZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG4vLyBJdCBzaG91bGQgdG8gYmUgbm90ZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzbid0IGVxdWl2YWxlbnQgdG8gYHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplYC5cbi8vXG4vLyBBIHN0cmljdCBjYXBpdGFsaXphdGlvbiBzaG91bGQgdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkIGluIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYGNhcGl0YWxpemUoc3RyaW5nKVxcYCBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDcpKTtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7IC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuXG5leHBvcnQgY29uc3QgdmFsdWVzID0ge1xuICB4czogMCxcbiAgLy8gcGhvbmVcbiAgc206IDYwMCxcbiAgLy8gdGFibGV0XG4gIG1kOiA5MDAsXG4gIC8vIHNtYWxsIGxhcHRvcFxuICBsZzogMTIwMCxcbiAgLy8gZGVza3RvcFxuICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cblxufTtcbmNvbnN0IGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGtleSA9PiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZXNba2V5XX1weClgXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIC8vIGtleSBpcyBicmVha3BvaW50XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cy52YWx1ZXMgfHwgdmFsdWVzKS5pbmRleE9mKGJyZWFrcG9pbnQpICE9PSAtMSkge1xuICAgICAgICBjb25zdCBtZWRpYUtleSA9IHRoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCk7XG4gICAgICAgIGFjY1ttZWRpYUtleV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdLCBicmVha3BvaW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNzc0tleSA9IGJyZWFrcG9pbnQ7XG4gICAgICAgIGFjY1tjc3NLZXldID0gcHJvcFZhbHVlW2Nzc0tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgY29uc3Qgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgY29uc3QgbmV3U3R5bGVGdW5jdGlvbiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICAgIGNvbnN0IGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIGNvbnN0IGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcblxuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIC4uLnN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHNdO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0ID0ge30pIHtcbiAgdmFyIF9icmVha3BvaW50c0lucHV0JGtleTtcblxuICBjb25zdCBicmVha3BvaW50c0luT3JkZXIgPSBicmVha3BvaW50c0lucHV0ID09IG51bGwgPyB2b2lkIDAgOiAoX2JyZWFrcG9pbnRzSW5wdXQka2V5ID0gYnJlYWtwb2ludHNJbnB1dC5rZXlzKSA9PSBudWxsID8gdm9pZCAwIDogX2JyZWFrcG9pbnRzSW5wdXQka2V5LnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50U3R5bGVLZXkgPSBicmVha3BvaW50c0lucHV0LnVwKGtleSk7XG4gICAgYWNjW2JyZWFrcG9pbnRTdHlsZUtleV0gPSB7fTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBicmVha3BvaW50c0luT3JkZXIgfHwge307XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludEtleXMsIHN0eWxlKSB7XG4gIHJldHVybiBicmVha3BvaW50S2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludE91dHB1dCA9IGFjY1trZXldO1xuICAgIGNvbnN0IGlzQnJlYWtwb2ludFVudXNlZCA9ICFicmVha3BvaW50T3V0cHV0IHx8IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRPdXRwdXQpLmxlbmd0aCA9PT0gMDtcblxuICAgIGlmIChpc0JyZWFrcG9pbnRVbnVzZWQpIHtcbiAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBzdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VCcmVha3BvaW50c0luT3JkZXIoYnJlYWtwb2ludHNJbnB1dCwgLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IG1lcmdlZE91dHB1dCA9IFtlbXB0eUJyZWFrcG9pbnRzLCAuLi5zdHlsZXNdLnJlZHVjZSgocHJldiwgbmV4dCkgPT4gZGVlcG1lcmdlKHByZXYsIG5leHQpLCB7fSk7XG4gIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKSwgbWVyZ2VkT3V0cHV0KTtcbn0gLy8gY29tcHV0ZSBiYXNlIGZvciByZXNwb25zaXZlIHZhbHVlczsgZS5nLixcbi8vIFsxLDIsM10gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG4vLyB7eHM6IDEsIHNtOiAyLCBtZDogM30gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpIHtcbiAgLy8gZml4ZWQgdmFsdWVcbiAgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGJhc2UgPSB7fTtcbiAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cyk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaCgoYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgICAgaWYgKGkgPCBicmVha3BvaW50VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICAgIGlmIChicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gIHZhbHVlczogYnJlYWtwb2ludFZhbHVlcyxcbiAgYnJlYWtwb2ludHM6IHRoZW1lQnJlYWtwb2ludHMsXG4gIGJhc2U6IGN1c3RvbUJhc2Vcbn0pIHtcbiAgY29uc3QgYmFzZSA9IGN1c3RvbUJhc2UgfHwgY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGJhc2UpO1xuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBicmVha3BvaW50VmFsdWVzO1xuICB9XG5cbiAgbGV0IHByZXZpb3VzO1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2ldICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2ldIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXSB8fCBicmVha3BvaW50VmFsdWVzO1xuICAgICAgcHJldmlvdXMgPSBicmVha3BvaW50O1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGgob2JqLCBwYXRoKSB7XG4gIGlmICghcGF0aCB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXRoLnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0ZW0pID0+IGFjYyAmJiBhY2NbaXRlbV0gPyBhY2NbaXRlbV0gOiBudWxsLCBvYmopO1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwsIHVzZXJWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsKSB7XG4gIGxldCB2YWx1ZTtcblxuICBpZiAodHlwZW9mIHRoZW1lTWFwcGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nKHByb3BWYWx1ZUZpbmFsKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRoZW1lTWFwcGluZykpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZ1twcm9wVmFsdWVGaW5hbF0gfHwgdXNlclZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gZ2V0UGF0aCh0aGVtZU1hcHBpbmcsIHByb3BWYWx1ZUZpbmFsKSB8fCB1c2VyVmFsdWU7XG4gIH1cblxuICBpZiAodHJhbnNmb3JtKSB7XG4gICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzdHlsZShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBwcm9wLFxuICAgIGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5wcm9wLFxuICAgIHRoZW1lS2V5LFxuICAgIHRyYW5zZm9ybVxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG5cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuXG4gICAgICBpZiAocHJvcFZhbHVlRmluYWwgPT09IHZhbHVlICYmIHR5cGVvZiBwcm9wVmFsdWVGaW5hbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSGF2ZW4ndCBmb3VuZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBgJHtwcm9wfSR7cHJvcFZhbHVlRmluYWwgPT09ICdkZWZhdWx0JyA/ICcnIDogY2FwaXRhbGl6ZShwcm9wVmFsdWVGaW5hbCl9YCwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzUHJvcGVydHkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9O1xuXG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gICAgW3Byb3BdOiByZXNwb25zaXZlUHJvcFR5cGVcbiAgfSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IFtwcm9wXTtcbiAgcmV0dXJuIGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZTsiLCJpbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbmZ1bmN0aW9uIGNvbXBvc2UoLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGhhbmRsZXJzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4ge1xuICAgIHN0eWxlLmZpbHRlclByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBhY2NbcHJvcF0gPSBzdHlsZTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoKGFjYywgcHJvcCkgPT4ge1xuICAgICAgaWYgKGhhbmRsZXJzW3Byb3BdKSB7XG4gICAgICAgIHJldHVybiBtZXJnZShhY2MsIGhhbmRsZXJzW3Byb3BdKHByb3BzKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xuXG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBPYmplY3QuYXNzaWduKGFjYywgc3R5bGUucHJvcFR5cGVzKSwge30pIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gYWNjLmNvbmNhdChzdHlsZS5maWx0ZXJQcm9wcyksIFtdKTtcbiAgcmV0dXJuIGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCB7IGdldFBhdGggfSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZSc7XG5jb25zdCBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xuY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTtcbmNvbnN0IGFsaWFzZXMgPSB7XG4gIG1hcmdpblg6ICdteCcsXG4gIG1hcmdpblk6ICdteScsXG4gIHBhZGRpbmdYOiAncHgnLFxuICBwYWRkaW5nWTogJ3B5J1xufTsgLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcblxuY29uc3QgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUocHJvcCA9PiB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IFthLCBiXSA9IHByb3Auc3BsaXQoJycpO1xuICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGRpciA9PiBwcm9wZXJ0eSArIGRpcikgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG5jb25zdCBtYXJnaW5LZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ21hcmdpbklubGluZScsICdtYXJnaW5JbmxpbmVTdGFydCcsICdtYXJnaW5JbmxpbmVFbmQnLCAnbWFyZ2luQmxvY2snLCAnbWFyZ2luQmxvY2tTdGFydCcsICdtYXJnaW5CbG9ja0VuZCddO1xuY29uc3QgcGFkZGluZ0tleXMgPSBbJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJywgJ3BhZGRpbmdJbmxpbmUnLCAncGFkZGluZ0lubGluZVN0YXJ0JywgJ3BhZGRpbmdJbmxpbmVFbmQnLCAncGFkZGluZ0Jsb2NrJywgJ3BhZGRpbmdCbG9ja1N0YXJ0JywgJ3BhZGRpbmdCbG9ja0VuZCddO1xuY29uc3Qgc3BhY2luZ0tleXMgPSBbLi4ubWFyZ2luS2V5cywgLi4ucGFkZGluZ0tleXNdO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgdGhlbWVLZXksIGRlZmF1bHRWYWx1ZSwgcHJvcE5hbWUpIHtcbiAgY29uc3QgdGhlbWVTcGFjaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IGRlZmF1bHRWYWx1ZTtcblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEV4cGVjdGVkICR7cHJvcE5hbWV9IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLCBnb3QgJHthYnN9LmApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmcgKiBhYnM7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lU3BhY2luZykpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYWJzKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcnJheSB0eXBlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG5vbiBpbnRlZ2VyIHZhbHVlcy5gICsgYFlvdSBzaG91bGQgZWl0aGVyIHVzZSBhbiBpbnRlZ2VyIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgaW5kZXgsIG9yIGRlZmluZSB0aGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXMgYSBudW1iZXIuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2UgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICgke2Fic30pIG92ZXJmbG93cy5gLCBgVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyl9LmAsIGAke2Fic30gPiAke3RoZW1lU3BhY2luZy5sZW5ndGggLSAxfSwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aGVtZVNwYWNpbmc7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCB2YWx1ZSAoJHt0aGVtZVNwYWNpbmd9KSBpcyBpbnZhbGlkLmAsICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG5cbiAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgcmV0dXJuIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgJ3NwYWNpbmcnLCA4LCAnc3BhY2luZycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGFicyA9IE1hdGguYWJzKHByb3BWYWx1ZSk7XG4gIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtZXIoYWJzKTtcblxuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cblxuICByZXR1cm4gYC0ke3RyYW5zZm9ybWVkfWA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKSB7XG4gIHJldHVybiBwcm9wVmFsdWUgPT4gY3NzUHJvcGVydGllcy5yZWR1Y2UoKGFjYywgY3NzUHJvcGVydHkpID0+IHtcbiAgICBhY2NbY3NzUHJvcGVydHldID0gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSB7XG4gIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gIGlmIChrZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzdHlsZShwcm9wcywga2V5cykge1xuICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyhwcm9wcy50aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKHByb3AgPT4gcmVzb2x2ZUNzc1Byb3BlcnR5KHByb3BzLCBrZXlzLCBwcm9wLCB0cmFuc2Zvcm1lcikpLnJlZHVjZShtZXJnZSwge30pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFyZ2luKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgbWFyZ2luS2V5cyk7XG59XG5tYXJnaW4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IG1hcmdpbktleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xubWFyZ2luLmZpbHRlclByb3BzID0gbWFyZ2luS2V5cztcbmV4cG9ydCBmdW5jdGlvbiBwYWRkaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgcGFkZGluZ0tleXMpO1xufVxucGFkZGluZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcGFkZGluZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xucGFkZGluZy5maWx0ZXJQcm9wcyA9IHBhZGRpbmdLZXlzO1xuXG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgc3BhY2luZ0tleXMpO1xufVxuXG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgY29uc3QgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGFyZyA9PiB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuXG5mdW5jdGlvbiBnZXRCb3JkZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gYCR7dmFsdWV9cHggc29saWRgO1xufVxuXG5leHBvcnQgY29uc3QgYm9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclRvcCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckJvdHRvbSA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckJvdHRvbScsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyTGVmdCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJUb3BDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0Q29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSaWdodENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJCb3R0b21Db2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckxlZnRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJhZGl1cyA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmJvcmRlclJhZGl1cyAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmJvcmRlclJhZGl1cyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc2hhcGUuYm9yZGVyUmFkaXVzJywgNCwgJ2JvcmRlclJhZGl1cycpO1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBib3JkZXJSYWRpdXM6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmJvcmRlclJhZGl1cywgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbmJvcmRlclJhZGl1cy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBib3JkZXJSYWRpdXM6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuYm9yZGVyUmFkaXVzLmZpbHRlclByb3BzID0gWydib3JkZXJSYWRpdXMnXTtcbmNvbnN0IGJvcmRlcnMgPSBjb21wb3NlKGJvcmRlciwgYm9yZGVyVG9wLCBib3JkZXJSaWdodCwgYm9yZGVyQm90dG9tLCBib3JkZXJMZWZ0LCBib3JkZXJDb2xvciwgYm9yZGVyVG9wQ29sb3IsIGJvcmRlclJpZ2h0Q29sb3IsIGJvcmRlckJvdHRvbUNvbG9yLCBib3JkZXJMZWZ0Q29sb3IsIGJvcmRlclJhZGl1cyk7XG5leHBvcnQgZGVmYXVsdCBib3JkZXJzOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZGlzcGxheVByaW50ID0gc3R5bGUoe1xuICBwcm9wOiAnZGlzcGxheVByaW50JyxcbiAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICB0cmFuc2Zvcm06IHZhbHVlID0+ICh7XG4gICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgIGRpc3BsYXk6IHZhbHVlXG4gICAgfVxuICB9KVxufSk7XG5leHBvcnQgY29uc3QgZGlzcGxheVJhdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2Rpc3BsYXknXG59KTtcbmV4cG9ydCBjb25zdCBvdmVyZmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ292ZXJmbG93J1xufSk7XG5leHBvcnQgY29uc3QgdGV4dE92ZXJmbG93ID0gc3R5bGUoe1xuICBwcm9wOiAndGV4dE92ZXJmbG93J1xufSk7XG5leHBvcnQgY29uc3QgdmlzaWJpbGl0eSA9IHN0eWxlKHtcbiAgcHJvcDogJ3Zpc2liaWxpdHknXG59KTtcbmV4cG9ydCBjb25zdCB3aGl0ZVNwYWNlID0gc3R5bGUoe1xuICBwcm9wOiAnd2hpdGVTcGFjZSdcbn0pO1xuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShkaXNwbGF5UHJpbnQsIGRpc3BsYXlSYXcsIG92ZXJmbG93LCB0ZXh0T3ZlcmZsb3csIHZpc2liaWxpdHksIHdoaXRlU3BhY2UpOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZmxleEJhc2lzID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleEJhc2lzJ1xufSk7XG5leHBvcnQgY29uc3QgZmxleERpcmVjdGlvbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhEaXJlY3Rpb24nXG59KTtcbmV4cG9ydCBjb25zdCBmbGV4V3JhcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhXcmFwJ1xufSk7XG5leHBvcnQgY29uc3QganVzdGlmeUNvbnRlbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5Q29udGVudCdcbn0pO1xuZXhwb3J0IGNvbnN0IGFsaWduSXRlbXMgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnbkl0ZW1zJ1xufSk7XG5leHBvcnQgY29uc3QgYWxpZ25Db250ZW50ID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25Db250ZW50J1xufSk7XG5leHBvcnQgY29uc3Qgb3JkZXIgPSBzdHlsZSh7XG4gIHByb3A6ICdvcmRlcidcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXggPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4J1xufSk7XG5leHBvcnQgY29uc3QgZmxleEdyb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4R3Jvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXhTaHJpbmsgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4U2hyaW5rJ1xufSk7XG5leHBvcnQgY29uc3QgYWxpZ25TZWxmID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25TZWxmJ1xufSk7XG5leHBvcnQgY29uc3QganVzdGlmeUl0ZW1zID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeUl0ZW1zJ1xufSk7XG5leHBvcnQgY29uc3QganVzdGlmeVNlbGYgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5U2VsZidcbn0pO1xuY29uc3QgZmxleGJveCA9IGNvbXBvc2UoZmxleEJhc2lzLCBmbGV4RGlyZWN0aW9uLCBmbGV4V3JhcCwganVzdGlmeUNvbnRlbnQsIGFsaWduSXRlbXMsIGFsaWduQ29udGVudCwgb3JkZXIsIGZsZXgsIGZsZXhHcm93LCBmbGV4U2hyaW5rLCBhbGlnblNlbGYsIGp1c3RpZnlJdGVtcywganVzdGlmeVNlbGYpO1xuZXhwb3J0IGRlZmF1bHQgZmxleGJveDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5leHBvcnQgY29uc3QgZ2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuZ2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZ2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2dhcCcpO1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBnYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbmdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBnYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuZ2FwLmZpbHRlclByb3BzID0gWydnYXAnXTtcbmV4cG9ydCBjb25zdCBjb2x1bW5HYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5jb2x1bW5HYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5jb2x1bW5HYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnY29sdW1uR2FwJyk7XG5cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGNvbHVtbkdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuY29sdW1uR2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuY29sdW1uR2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGNvbHVtbkdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5jb2x1bW5HYXAuZmlsdGVyUHJvcHMgPSBbJ2NvbHVtbkdhcCddO1xuZXhwb3J0IGNvbnN0IHJvd0dhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLnJvd0dhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLnJvd0dhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdyb3dHYXAnKTtcblxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgcm93R2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5yb3dHYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5yb3dHYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgcm93R2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbnJvd0dhcC5maWx0ZXJQcm9wcyA9IFsncm93R2FwJ107XG5leHBvcnQgY29uc3QgZ3JpZENvbHVtbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRDb2x1bW4nXG59KTtcbmV4cG9ydCBjb25zdCBncmlkUm93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFJvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvRmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvRmxvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVDb2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZVJvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVBcmVhcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUFyZWFzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEFyZWEgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXJlYSdcbn0pO1xuY29uc3QgZ3JpZCA9IGNvbXBvc2UoZ2FwLCBjb2x1bW5HYXAsIHJvd0dhcCwgZ3JpZENvbHVtbiwgZ3JpZFJvdywgZ3JpZEF1dG9GbG93LCBncmlkQXV0b0NvbHVtbnMsIGdyaWRBdXRvUm93cywgZ3JpZFRlbXBsYXRlQ29sdW1ucywgZ3JpZFRlbXBsYXRlUm93cywgZ3JpZFRlbXBsYXRlQXJlYXMsIGdyaWRBcmVhKTtcbmV4cG9ydCBkZWZhdWx0IGdyaWQ7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCBjb25zdCBwb3NpdGlvbiA9IHN0eWxlKHtcbiAgcHJvcDogJ3Bvc2l0aW9uJ1xufSk7XG5leHBvcnQgY29uc3QgekluZGV4ID0gc3R5bGUoe1xuICBwcm9wOiAnekluZGV4JyxcbiAgdGhlbWVLZXk6ICd6SW5kZXgnXG59KTtcbmV4cG9ydCBjb25zdCB0b3AgPSBzdHlsZSh7XG4gIHByb3A6ICd0b3AnXG59KTtcbmV4cG9ydCBjb25zdCByaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ3JpZ2h0J1xufSk7XG5leHBvcnQgY29uc3QgYm90dG9tID0gc3R5bGUoe1xuICBwcm9wOiAnYm90dG9tJ1xufSk7XG5leHBvcnQgY29uc3QgbGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xlZnQnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UocG9zaXRpb24sIHpJbmRleCwgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGNvbnN0IGNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnY29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBiZ2NvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmdjb2xvcicsXG4gIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYmFja2dyb3VuZENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5jb25zdCBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvciwgYmFja2dyb3VuZENvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IHBhbGV0dGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuY29uc3QgYm94U2hhZG93ID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2hhZG93JyxcbiAgdGhlbWVLZXk6ICdzaGFkb3dzJ1xufSk7XG5leHBvcnQgZGVmYXVsdCBib3hTaGFkb3c7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCB2YWx1ZXMgYXMgYnJlYWtwb2ludHNWYWx1ZXMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcblxuZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8PSAxICYmIHZhbHVlICE9PSAwID8gYCR7dmFsdWUgKiAxMDB9JWAgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IGNvbnN0IHdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnd2lkdGgnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heFdpZHRoID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMubWF4V2lkdGggIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5tYXhXaWR0aCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiB7XG4gICAgICB2YXIgX3Byb3BzJHRoZW1lLCBfcHJvcHMkdGhlbWUkYnJlYWtwb2ksIF9wcm9wcyR0aGVtZSRicmVha3BvaTI7XG5cbiAgICAgIGNvbnN0IGJyZWFrcG9pbnQgPSAoKF9wcm9wcyR0aGVtZSA9IHByb3BzLnRoZW1lKSA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSRicmVha3BvaSA9IF9wcm9wcyR0aGVtZS5icmVha3BvaW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IChfcHJvcHMkdGhlbWUkYnJlYWtwb2kyID0gX3Byb3BzJHRoZW1lJGJyZWFrcG9pLnZhbHVlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZSRicmVha3BvaTJbcHJvcFZhbHVlXSkgfHwgYnJlYWtwb2ludHNWYWx1ZXNbcHJvcFZhbHVlXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50IHx8IHRyYW5zZm9ybShwcm9wVmFsdWUpXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLm1heFdpZHRoLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xubWF4V2lkdGguZmlsdGVyUHJvcHMgPSBbJ21heFdpZHRoJ107XG5leHBvcnQgY29uc3QgbWluV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgaGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1pbkhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3Qgc2l6ZVdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnd2lkdGgnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJveFNpemluZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNpemluZydcbn0pO1xuY29uc3Qgc2l6aW5nID0gY29tcG9zZSh3aWR0aCwgbWF4V2lkdGgsIG1pbldpZHRoLCBoZWlnaHQsIG1heEhlaWdodCwgbWluSGVpZ2h0LCBib3hTaXppbmcpO1xuZXhwb3J0IGRlZmF1bHQgc2l6aW5nOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZm9udEZhbWlseSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRGYW1pbHknLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBmb250U2l6ZSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRTaXplJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgZm9udFN0eWxlID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udFN0eWxlJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgZm9udFdlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRXZWlnaHQnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBsZXR0ZXJTcGFjaW5nID0gc3R5bGUoe1xuICBwcm9wOiAnbGV0dGVyU3BhY2luZydcbn0pO1xuZXhwb3J0IGNvbnN0IHRleHRUcmFuc2Zvcm0gPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0VHJhbnNmb3JtJ1xufSk7XG5leHBvcnQgY29uc3QgbGluZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xpbmVIZWlnaHQnXG59KTtcbmV4cG9ydCBjb25zdCB0ZXh0QWxpZ24gPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0QWxpZ24nXG59KTtcbmV4cG9ydCBjb25zdCB0eXBvZ3JhcGh5VmFyaWFudCA9IHN0eWxlKHtcbiAgcHJvcDogJ3R5cG9ncmFwaHknLFxuICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuY29uc3QgdHlwb2dyYXBoeSA9IGNvbXBvc2UodHlwb2dyYXBoeVZhcmlhbnQsIGZvbnRGYW1pbHksIGZvbnRTaXplLCBmb250U3R5bGUsIGZvbnRXZWlnaHQsIGxldHRlclNwYWNpbmcsIGxpbmVIZWlnaHQsIHRleHRBbGlnbiwgdGV4dFRyYW5zZm9ybSk7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5OyIsImltcG9ydCBib3JkZXJzIGZyb20gJy4vYm9yZGVycyc7XG5pbXBvcnQgZGlzcGxheSBmcm9tICcuL2Rpc3BsYXknO1xuaW1wb3J0IGZsZXhib3ggZnJvbSAnLi9mbGV4Ym94JztcbmltcG9ydCBncmlkIGZyb20gJy4vZ3JpZCc7XG5pbXBvcnQgcG9zaXRpb25zIGZyb20gJy4vcG9zaXRpb25zJztcbmltcG9ydCBwYWxldHRlIGZyb20gJy4vcGFsZXR0ZSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IHNpemluZyBmcm9tICcuL3NpemluZyc7XG5pbXBvcnQgc3BhY2luZyBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHR5cG9ncmFwaHkgZnJvbSAnLi90eXBvZ3JhcGh5JztcbmNvbnN0IGZpbHRlclByb3BzTWFwcGluZyA9IHtcbiAgYm9yZGVyczogYm9yZGVycy5maWx0ZXJQcm9wcyxcbiAgZGlzcGxheTogZGlzcGxheS5maWx0ZXJQcm9wcyxcbiAgZmxleGJveDogZmxleGJveC5maWx0ZXJQcm9wcyxcbiAgZ3JpZDogZ3JpZC5maWx0ZXJQcm9wcyxcbiAgcG9zaXRpb25zOiBwb3NpdGlvbnMuZmlsdGVyUHJvcHMsXG4gIHBhbGV0dGU6IHBhbGV0dGUuZmlsdGVyUHJvcHMsXG4gIHNoYWRvd3M6IHNoYWRvd3MuZmlsdGVyUHJvcHMsXG4gIHNpemluZzogc2l6aW5nLmZpbHRlclByb3BzLFxuICBzcGFjaW5nOiBzcGFjaW5nLmZpbHRlclByb3BzLFxuICB0eXBvZ3JhcGh5OiB0eXBvZ3JhcGh5LmZpbHRlclByb3BzXG59O1xuY29uc3Qgc3R5bGVGdW5jdGlvbk1hcHBpbmcgPSB7XG4gIGJvcmRlcnMsXG4gIGRpc3BsYXksXG4gIGZsZXhib3gsXG4gIGdyaWQsXG4gIHBvc2l0aW9ucyxcbiAgcGFsZXR0ZSxcbiAgc2hhZG93cyxcbiAgc2l6aW5nLFxuICBzcGFjaW5nLFxuICB0eXBvZ3JhcGh5XG59O1xuZXhwb3J0IGNvbnN0IHByb3BUb1N0eWxlRnVuY3Rpb24gPSBPYmplY3Qua2V5cyhmaWx0ZXJQcm9wc01hcHBpbmcpLnJlZHVjZSgoYWNjLCBzdHlsZUZuTmFtZSkgPT4ge1xuICBmaWx0ZXJQcm9wc01hcHBpbmdbc3R5bGVGbk5hbWVdLmZvckVhY2gocHJvcE5hbWUgPT4ge1xuICAgIGFjY1twcm9wTmFtZV0gPSBzdHlsZUZ1bmN0aW9uTWFwcGluZ1tzdHlsZUZuTmFtZV07XG4gIH0pO1xuICByZXR1cm4gYWNjO1xufSwge30pO1xuXG5mdW5jdGlvbiBnZXRUaGVtZVZhbHVlKHByb3AsIHZhbHVlLCB0aGVtZSkge1xuICBjb25zdCBpbnB1dFByb3BzID0ge1xuICAgIFtwcm9wXTogdmFsdWUsXG4gICAgdGhlbWVcbiAgfTtcbiAgY29uc3Qgc3R5bGVGdW5jdGlvbiA9IHByb3BUb1N0eWxlRnVuY3Rpb25bcHJvcF07XG4gIHJldHVybiBzdHlsZUZ1bmN0aW9uID8gc3R5bGVGdW5jdGlvbihpbnB1dFByb3BzKSA6IHtcbiAgICBbcHJvcF06IHZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRoZW1lVmFsdWU7IiwiaW1wb3J0IG1lcmdlIGZyb20gJy4uL21lcmdlJztcbmltcG9ydCBnZXRUaGVtZVZhbHVlLCB7IHByb3BUb1N0eWxlRnVuY3Rpb24gfSBmcm9tICcuLi9nZXRUaGVtZVZhbHVlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QsIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vYnJlYWtwb2ludHMnO1xuXG5mdW5jdGlvbiBvYmplY3RzSGF2ZVNhbWVLZXlzKC4uLm9iamVjdHMpIHtcbiAgY29uc3QgYWxsS2V5cyA9IG9iamVjdHMucmVkdWNlKChrZXlzLCBvYmplY3QpID0+IGtleXMuY29uY2F0KE9iamVjdC5rZXlzKG9iamVjdCkpLCBbXSk7XG4gIGNvbnN0IHVuaW9uID0gbmV3IFNldChhbGxLZXlzKTtcbiAgcmV0dXJuIG9iamVjdHMuZXZlcnkob2JqZWN0ID0+IHVuaW9uLnNpemUgPT09IE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gY2FsbElmRm4obWF5YmVGbiwgYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgbWF5YmVGbiA9PT0gJ2Z1bmN0aW9uJyA/IG1heWJlRm4oYXJnKSA6IG1heWJlRm47XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb25TeChwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3gsXG4gICAgdGhlbWUgPSB7fVxuICB9ID0gcHJvcHMgfHwge307XG5cbiAgaWYgKCFzeCkge1xuICAgIHJldHVybiBudWxsOyAvLyBlbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMgd2lsbCBuZWdsZWN0IG51bGxcbiAgfVxuICAvKlxuICAgKiBSZWNlaXZlIGBzeElucHV0YCBhcyBvYmplY3Qgb3IgY2FsbGJhY2tcbiAgICogYW5kIHRoZW4gcmVjdXJzaXZlbHkgY2hlY2sga2V5cyAmIHZhbHVlcyB0byBjcmVhdGUgbWVkaWEgcXVlcnkgb2JqZWN0IHN0eWxlcy5cbiAgICogKHRoZSByZXN1bHQgd2lsbCBiZSB1c2VkIGluIGBzdHlsZWRgKVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHRyYXZlcnNlKHN4SW5wdXQpIHtcbiAgICBsZXQgc3hPYmplY3QgPSBzeElucHV0O1xuXG4gICAgaWYgKHR5cGVvZiBzeElucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzeE9iamVjdCA9IHN4SW5wdXQodGhlbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN4SW5wdXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAvLyB2YWx1ZVxuICAgICAgcmV0dXJuIHN4SW5wdXQ7XG4gICAgfVxuXG4gICAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCh0aGVtZS5icmVha3BvaW50cyk7XG4gICAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyk7XG4gICAgbGV0IGNzcyA9IGVtcHR5QnJlYWtwb2ludHM7XG4gICAgT2JqZWN0LmtleXMoc3hPYmplY3QpLmZvckVhY2goc3R5bGVLZXkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBjYWxsSWZGbihzeE9iamVjdFtzdHlsZUtleV0sIHRoZW1lKTtcblxuICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAocHJvcFRvU3R5bGVGdW5jdGlvbltzdHlsZUtleV0pIHtcbiAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGJyZWFrcG9pbnRzVmFsdWVzID0gaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgfSwgdmFsdWUsIHggPT4gKHtcbiAgICAgICAgICAgICAgW3N0eWxlS2V5XTogeFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBpZiAob2JqZWN0c0hhdmVTYW1lS2V5cyhicmVha3BvaW50c1ZhbHVlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgIGNzc1tzdHlsZUtleV0gPSBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgICAgICAgICAgIHN4OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgYnJlYWtwb2ludHNWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzS2V5cywgY3NzKTtcbiAgfVxuXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHN4KSA/IHN4Lm1hcCh0cmF2ZXJzZSkgOiB0cmF2ZXJzZShzeCk7XG59XG5cbnN0eWxlRnVuY3Rpb25TeC5maWx0ZXJQcm9wcyA9IFsnc3gnXTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlRnVuY3Rpb25TeDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wic3hcIl07XG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBwcm9wVG9TdHlsZUZ1bmN0aW9uIH0gZnJvbSAnLi4vZ2V0VGhlbWVWYWx1ZSc7XG5cbmNvbnN0IHNwbGl0UHJvcHMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBzeXN0ZW1Qcm9wczoge30sXG4gICAgb3RoZXJQcm9wczoge31cbiAgfTtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHByb3BUb1N0eWxlRnVuY3Rpb25bcHJvcF0pIHtcbiAgICAgIHJlc3VsdC5zeXN0ZW1Qcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQub3RoZXJQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRTeFByb3AocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHN4OiBpblN4XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCB7XG4gICAgc3lzdGVtUHJvcHMsXG4gICAgb3RoZXJQcm9wc1xuICB9ID0gc3BsaXRQcm9wcyhvdGhlcik7XG4gIGxldCBmaW5hbFN4O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGluU3gpKSB7XG4gICAgZmluYWxTeCA9IFtzeXN0ZW1Qcm9wcywgLi4uaW5TeF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGluU3ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBmaW5hbFN4ID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGluU3goLi4uYXJncyk7XG5cbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzeXN0ZW1Qcm9wcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzeXN0ZW1Qcm9wcywgcmVzdWx0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZpbmFsU3ggPSBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIGluU3gpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdGhlclByb3BzLCB7XG4gICAgc3g6IGZpbmFsU3hcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IGNvbnN0IGJyZWFrcG9pbnRLZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddOyAvLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgY29uc3Qge1xuICAgIC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuICAgIC8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtKS5cbiAgICB2YWx1ZXMgPSB7XG4gICAgICB4czogMCxcbiAgICAgIC8vIHBob25lXG4gICAgICBzbTogNjAwLFxuICAgICAgLy8gdGFibGV0XG4gICAgICBtZDogOTAwLFxuICAgICAgLy8gc21hbGwgbGFwdG9wXG4gICAgICBsZzogMTIwMCxcbiAgICAgIC8vIGRlc2t0b3BcbiAgICAgIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlblxuXG4gICAgfSxcbiAgICB1bml0ID0gJ3B4JyxcbiAgICBzdGVwID0gNVxuICB9ID0gYnJlYWtwb2ludHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoYnJlYWtwb2ludHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlcyk7XG5cbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlfSR7dW5pdH0pYDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1heC13aWR0aDoke3ZhbHVlIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpO1xuICAgIHJldHVybiBgQG1lZGlhIChtaW4td2lkdGg6JHt0eXBlb2YgdmFsdWVzW3N0YXJ0XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNbc3RhcnRdIDogc3RhcnR9JHt1bml0fSkgYW5kIGAgKyBgKG1heC13aWR0aDokeyhlbmRJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHZhbHVlc1trZXlzW2VuZEluZGV4XV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA6IGVuZCkgLSBzdGVwIC8gMTAwfSR7dW5pdH0pYDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihrZXkpICsgMSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBub3Qoa2V5KSB7XG4gICAgLy8gaGFuZGxlIGZpcnN0IGFuZCBsYXN0IGtleSBzZXBhcmF0ZWx5LCBmb3IgYmV0dGVyIHJlYWRhYmlsaXR5XG4gICAgY29uc3Qga2V5SW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KTtcblxuICAgIGlmIChrZXlJbmRleCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVwKGtleXNbMV0pO1xuICAgIH1cblxuICAgIGlmIChrZXlJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gZG93bihrZXlzW2tleUluZGV4XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXlzW2tleXMuaW5kZXhPZihrZXkpICsgMV0pLnJlcGxhY2UoJ0BtZWRpYScsICdAbWVkaWEgbm90IGFsbCBhbmQnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5cyxcbiAgICB2YWx1ZXMsXG4gICAgdXAsXG4gICAgZG93bixcbiAgICBiZXR3ZWVuLFxuICAgIG9ubHksXG4gICAgbm90LFxuICAgIHVuaXRcbiAgfSwgb3RoZXIpO1xufSIsImNvbnN0IHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuXG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50c0lucHV0ID0ge30sXG4gICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgIHNoYXBlOiBzaGFwZUlucHV0ID0ge31cbiAgfSA9IG9wdGlvbnMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgY29tcG9uZW50czoge30sXG4gICAgLy8gSW5qZWN0IGNvbXBvbmVudCBkZWZpbml0aW9ucy5cbiAgICBwYWxldHRlOiBfZXh0ZW5kcyh7XG4gICAgICBtb2RlOiAnbGlnaHQnXG4gICAgfSwgcGFsZXR0ZUlucHV0KSxcbiAgICBzcGFjaW5nLFxuICAgIHNoYXBlOiBfZXh0ZW5kcyh7fSwgc2hhcGUsIHNoYXBlSW5wdXQpXG4gIH0sIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnLi4vc3BhY2luZyc7XG5cbi8qIHRzbGludDplbmFibGU6dW5pZmllZC1zaWduYXR1cmVzICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCA9IDgpIHtcbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9IC8vIE1hdGVyaWFsIERlc2lnbiBsYXlvdXRzIGFyZSB2aXN1YWxseSBiYWxhbmNlZC4gTW9zdCBtZWFzdXJlbWVudHMgYWxpZ24gdG8gYW4gOGRwIGdyaWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWwjdXNhZ2VcblxuXG4gIGNvbnN0IHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuXG4gIGNvbnN0IHNwYWNpbmcgPSAoLi4uYXJnc0lucHV0KSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKGFyZ3NJbnB1dC5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290ICR7YXJnc0lucHV0Lmxlbmd0aH1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhcmdzID0gYXJnc0lucHV0Lmxlbmd0aCA9PT0gMCA/IFsxXSA6IGFyZ3NJbnB1dDtcbiAgICByZXR1cm4gYXJncy5tYXAoYXJndW1lbnQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IGAke291dHB1dH1weGAgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9O1xuXG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgVGhlbWVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSAnLi91c2VUaGVtZVdpdGhvdXREZWZhdWx0JztcbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuXG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lV2l0aG91dERlZmF1bHQoZGVmYXVsdFRoZW1lKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiaW1wb3J0IHsgdXNlVGhlbWUgYXMgbXVpVXNlVGhlbWUgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gbnVsbCkge1xuICBjb25zdCBjb250ZXh0VGhlbWUgPSBtdWlVc2VUaGVtZSgpO1xuICByZXR1cm4gIWNvbnRleHRUaGVtZSB8fCBpc09iamVjdEVtcHR5KGNvbnRleHRUaGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBjb250ZXh0VGhlbWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3gsIHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4vdXNlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJveChvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGRlZmF1bHRUaGVtZSxcbiAgICBkZWZhdWx0Q2xhc3NOYW1lID0gJ011aUJveC1yb290JyxcbiAgICBnZW5lcmF0ZUNsYXNzTmFtZVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgQm94Um9vdCA9IHN0eWxlZCgnZGl2Jykoc3R5bGVGdW5jdGlvblN4KTtcbiAgY29uc3QgQm94ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm94KGluUHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcblxuICAgIGNvbnN0IF9leHRlbmRTeFByb3AgPSBleHRlbmRTeFByb3AoaW5Qcm9wcyksXG4gICAgICAgICAge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdidcbiAgICB9ID0gX2V4dGVuZFN4UHJvcCxcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9leHRlbmRTeFByb3AsIF9leGNsdWRlZCk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQm94Um9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzTmFtZSwgZ2VuZXJhdGVDbGFzc05hbWUgPyBnZW5lcmF0ZUNsYXNzTmFtZShkZWZhdWx0Q2xhc3NOYW1lKSA6IGRlZmF1bHRDbGFzc05hbWUpLFxuICAgICAgdGhlbWU6IHRoZW1lXG4gICAgfSwgb3RoZXIpKTtcbiAgfSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJveC5wcm9wVHlwZXNcbiAgLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuICA9IHtcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAgIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMuZnVuY10pXG4gIH0gOiB2b2lkIDA7XG4gIHJldHVybiBCb3g7XG59IiwiY29uc3QgZGVmYXVsdEdlbmVyYXRvciA9IGNvbXBvbmVudE5hbWUgPT4gY29tcG9uZW50TmFtZTtcblxuY29uc3QgY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yID0gKCkgPT4ge1xuICBsZXQgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyZShnZW5lcmF0b3IpIHtcbiAgICAgIGdlbmVyYXRlID0gZ2VuZXJhdG9yO1xuICAgIH0sXG5cbiAgICBnZW5lcmF0ZShjb21wb25lbnROYW1lKSB7XG4gICAgICByZXR1cm4gZ2VuZXJhdGUoY29tcG9uZW50TmFtZSk7XG4gICAgfSxcblxuICAgIHJlc2V0KCkge1xuICAgICAgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICAgIH1cblxuICB9O1xufTtcblxuY29uc3QgQ2xhc3NOYW1lR2VuZXJhdG9yID0gY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yKCk7XG5leHBvcnQgZGVmYXVsdCBDbGFzc05hbWVHZW5lcmF0b3I7IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4gPSAwLCBtYXggPSAxKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAke3ZhbHVlfSBpcyBvdXQgb2YgcmFuZ2UgWyR7bWlufSwgJHttYXh9XS5gKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnN1YnN0cigxKTtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGAuezEsJHtjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxfX1gLCAnZycpO1xuICBsZXQgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuXG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAobiA9PiBuICsgbik7XG4gIH1cblxuICByZXR1cm4gY29sb3JzID8gYHJnYiR7Y29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnfSgke2NvbG9ycy5tYXAoKG4sIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpfSlgIDogJyc7XG59XG5cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICBjb25zdCBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IGAwJHtoZXh9YCA6IGhleDtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cblxuICBjb25zdCBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIGNvbnN0IHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcblxuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvciddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFVuc3VwcG9ydGVkIFxcYCR7Y29sb3J9XFxgIGNvbG9yLlxuVGhlIGZvbGxvd2luZyBmb3JtYXRzIGFyZSBzdXBwb3J0ZWQ6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKCkuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoOSwgY29sb3IpKTtcbiAgfVxuXG4gIGxldCB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSk7XG4gIGxldCBjb2xvclNwYWNlO1xuXG4gIGlmICh0eXBlID09PSAnY29sb3InKSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcgJyk7XG4gICAgY29sb3JTcGFjZSA9IHZhbHVlcy5zaGlmdCgpO1xuXG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDQgJiYgdmFsdWVzWzNdLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICB2YWx1ZXNbM10gPSB2YWx1ZXNbM10uc3Vic3RyKDEpO1xuICAgIH1cblxuICAgIGlmIChbJ3NyZ2InLCAnZGlzcGxheS1wMycsICdhOTgtcmdiJywgJ3Byb3Bob3RvLXJnYicsICdyZWMtMjAyMCddLmluZGV4T2YoY29sb3JTcGFjZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogdW5zdXBwb3J0ZWQgXFxgJHtjb2xvclNwYWNlfVxcYCBjb2xvciBzcGFjZS5cblRoZSBmb2xsb3dpbmcgY29sb3Igc3BhY2VzIGFyZSBzdXBwb3J0ZWQ6IHNyZ2IsIGRpc3BsYXktcDMsIGE5OC1yZ2IsIHByb3Bob3RvLXJnYiwgcmVjLTIwMjAuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTAsIGNvbG9yU3BhY2UpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcsJyk7XG4gIH1cblxuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKHZhbHVlID0+IHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIHZhbHVlcyxcbiAgICBjb2xvclNwYWNlXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSdcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgY29sb3JTcGFjZVxuICB9ID0gY29sb3I7XG4gIGxldCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcCgobiwgaSkgPT4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuKTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IGAke3ZhbHVlc1sxXX0lYDtcbiAgICB2YWx1ZXNbMl0gPSBgJHt2YWx1ZXNbMl19JWA7XG4gIH1cblxuICBpZiAodHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIHZhbHVlcyA9IGAke2NvbG9yU3BhY2V9ICR7dmFsdWVzLmpvaW4oJyAnKX1gO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IGAke3ZhbHVlcy5qb2luKCcsICcpfWA7XG4gIH1cblxuICByZXR1cm4gYCR7dHlwZX0oJHt2YWx1ZXN9KWA7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci5pbmRleE9mKCcjJykgPT09IDApIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBgIyR7dmFsdWVzLm1hcCgobiwgaSkgPT4gaW50VG9IZXgoaSA9PT0gMyA/IE1hdGgucm91bmQoMjU1ICogbikgOiBuKSkuam9pbignJyl9YDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIGhzbCBmb3JtYXQgdG8gcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhTTCBjb2xvciB2YWx1ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvciB2YWx1ZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBjb25zdCBoID0gdmFsdWVzWzBdO1xuICBjb25zdCBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICBjb25zdCBsID0gdmFsdWVzWzJdIC8gMTAwO1xuICBjb25zdCBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcblxuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG5cbiAgbGV0IHR5cGUgPSAncmdiJztcbiAgY29uc3QgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBsZXQgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcCh2YWwgPT4ge1xuICAgIGlmIChjb2xvci50eXBlICE9PSAnY29sb3InKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiAoKHZhbCArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjQ7XG4gIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIGNvbnN0IGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIGNvbnN0IGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWxwaGEoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuXG4gIGlmIChjb2xvci50eXBlID09PSAnY29sb3InKSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gYC8ke3ZhbHVlfWA7XG4gIH0gZWxzZSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSB8fCBjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgxIC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQgPSAwLjE1KSB7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59IiwiY29uc3QgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY29tbW9uOyIsImNvbnN0IGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZjVmNWY1JyxcbiAgQTIwMDogJyNlZWVlZWUnLFxuICBBNDAwOiAnI2JkYmRiZCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwiY29uc3QgcHVycGxlID0ge1xuICA1MDogJyNmM2U1ZjUnLFxuICAxMDA6ICcjZTFiZWU3JyxcbiAgMjAwOiAnI2NlOTNkOCcsXG4gIDMwMDogJyNiYTY4YzgnLFxuICA0MDA6ICcjYWI0N2JjJyxcbiAgNTAwOiAnIzljMjdiMCcsXG4gIDYwMDogJyM4ZTI0YWEnLFxuICA3MDA6ICcjN2IxZmEyJyxcbiAgODAwOiAnIzZhMWI5YScsXG4gIDkwMDogJyM0YTE0OGMnLFxuICBBMTAwOiAnI2VhODBmYycsXG4gIEEyMDA6ICcjZTA0MGZiJyxcbiAgQTQwMDogJyNkNTAwZjknLFxuICBBNzAwOiAnI2FhMDBmZidcbn07XG5leHBvcnQgZGVmYXVsdCBwdXJwbGU7IiwiY29uc3QgcmVkID0ge1xuICA1MDogJyNmZmViZWUnLFxuICAxMDA6ICcjZmZjZGQyJyxcbiAgMjAwOiAnI2VmOWE5YScsXG4gIDMwMDogJyNlNTczNzMnLFxuICA0MDA6ICcjZWY1MzUwJyxcbiAgNTAwOiAnI2Y0NDMzNicsXG4gIDYwMDogJyNlNTM5MzUnLFxuICA3MDA6ICcjZDMyZjJmJyxcbiAgODAwOiAnI2M2MjgyOCcsXG4gIDkwMDogJyNiNzFjMWMnLFxuICBBMTAwOiAnI2ZmOGE4MCcsXG4gIEEyMDA6ICcjZmY1MjUyJyxcbiAgQTQwMDogJyNmZjE3NDQnLFxuICBBNzAwOiAnI2Q1MDAwMCdcbn07XG5leHBvcnQgZGVmYXVsdCByZWQ7IiwiY29uc3Qgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBvcmFuZ2U7IiwiY29uc3QgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZTsiLCJjb25zdCBsaWdodEJsdWUgPSB7XG4gIDUwOiAnI2UxZjVmZScsXG4gIDEwMDogJyNiM2U1ZmMnLFxuICAyMDA6ICcjODFkNGZhJyxcbiAgMzAwOiAnIzRmYzNmNycsXG4gIDQwMDogJyMyOWI2ZjYnLFxuICA1MDA6ICcjMDNhOWY0JyxcbiAgNjAwOiAnIzAzOWJlNScsXG4gIDcwMDogJyMwMjg4ZDEnLFxuICA4MDA6ICcjMDI3N2JkJyxcbiAgOTAwOiAnIzAxNTc5YicsXG4gIEExMDA6ICcjODBkOGZmJyxcbiAgQTIwMDogJyM0MGM0ZmYnLFxuICBBNDAwOiAnIzAwYjBmZicsXG4gIEE3MDA6ICcjMDA5MWVhJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGxpZ2h0Qmx1ZTsiLCJjb25zdCBncmVlbiA9IHtcbiAgNTA6ICcjZThmNWU5JyxcbiAgMTAwOiAnI2M4ZTZjOScsXG4gIDIwMDogJyNhNWQ2YTcnLFxuICAzMDA6ICcjODFjNzg0JyxcbiAgNDAwOiAnIzY2YmI2YScsXG4gIDUwMDogJyM0Y2FmNTAnLFxuICA2MDA6ICcjNDNhMDQ3JyxcbiAgNzAwOiAnIzM4OGUzYycsXG4gIDgwMDogJyMyZTdkMzInLFxuICA5MDA6ICcjMWI1ZTIwJyxcbiAgQTEwMDogJyNiOWY2Y2EnLFxuICBBMjAwOiAnIzY5ZjBhZScsXG4gIEE0MDA6ICcjMDBlNjc2JyxcbiAgQTcwMDogJyMwMGM4NTMnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JlZW47IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm1vZGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBkYXJrZW4sIGdldENvbnRyYXN0UmF0aW8sIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY29tbW9uIGZyb20gJy4uL2NvbG9ycy9jb21tb24nO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IHB1cnBsZSBmcm9tICcuLi9jb2xvcnMvcHVycGxlJztcbmltcG9ydCByZWQgZnJvbSAnLi4vY29sb3JzL3JlZCc7XG5pbXBvcnQgb3JhbmdlIGZyb20gJy4uL2NvbG9ycy9vcmFuZ2UnO1xuaW1wb3J0IGJsdWUgZnJvbSAnLi4vY29sb3JzL2JsdWUnO1xuaW1wb3J0IGxpZ2h0Qmx1ZSBmcm9tICcuLi9jb2xvcnMvbGlnaHRCbHVlJztcbmltcG9ydCBncmVlbiBmcm9tICcuLi9jb2xvcnMvZ3JlZW4nO1xuZXhwb3J0IGNvbnN0IGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjYpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgIGRlZmF1bHQ6IGNvbW1vbi53aGl0ZVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDQsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjEyXG4gIH1cbn07XG5leHBvcnQgY29uc3QgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogJyMxMjEyMTInLFxuICAgIGRlZmF1bHQ6ICcjMTIxMjEyJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wOCxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNiknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICBjb25zdCB0b25hbE9mZnNldExpZ2h0ID0gdG9uYWxPZmZzZXQubGlnaHQgfHwgdG9uYWxPZmZzZXQ7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0RGFyayA9IHRvbmFsT2Zmc2V0LmRhcmsgfHwgdG9uYWxPZmZzZXQgKiAxLjU7XG5cbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0UHJpbWFyeShtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGJsdWVbMjAwXSxcbiAgICAgIGxpZ2h0OiBibHVlWzUwXSxcbiAgICAgIGRhcms6IGJsdWVbNDAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46IGJsdWVbNzAwXSxcbiAgICBsaWdodDogYmx1ZVs0MDBdLFxuICAgIGRhcms6IGJsdWVbODAwXVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcHVycGxlWzIwMF0sXG4gICAgICBsaWdodDogcHVycGxlWzUwXSxcbiAgICAgIGRhcms6IHB1cnBsZVs0MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogcHVycGxlWzUwMF0sXG4gICAgbGlnaHQ6IHB1cnBsZVszMDBdLFxuICAgIGRhcms6IHB1cnBsZVs3MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRFcnJvcihtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IHJlZFs1MDBdLFxuICAgICAgbGlnaHQ6IHJlZFszMDBdLFxuICAgICAgZGFyazogcmVkWzcwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiByZWRbNzAwXSxcbiAgICBsaWdodDogcmVkWzQwMF0sXG4gICAgZGFyazogcmVkWzgwMF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEluZm8obW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBsaWdodEJsdWVbNDAwXSxcbiAgICAgIGxpZ2h0OiBsaWdodEJsdWVbMzAwXSxcbiAgICAgIGRhcms6IGxpZ2h0Qmx1ZVs3MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogbGlnaHRCbHVlWzcwMF0sXG4gICAgbGlnaHQ6IGxpZ2h0Qmx1ZVs1MDBdLFxuICAgIGRhcms6IGxpZ2h0Qmx1ZVs5MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRTdWNjZXNzKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogZ3JlZW5bNDAwXSxcbiAgICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgICAgZGFyazogZ3JlZW5bNzAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46IGdyZWVuWzgwMF0sXG4gICAgbGlnaHQ6IGdyZWVuWzUwMF0sXG4gICAgZGFyazogZ3JlZW5bOTAwXVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0V2FybmluZyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IG9yYW5nZVs0MDBdLFxuICAgICAgbGlnaHQ6IG9yYW5nZVszMDBdLFxuICAgICAgZGFyazogb3JhbmdlWzcwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiAnI2VkNmMwMicsXG4gICAgLy8gY2xvc2VzdCB0byBvcmFuZ2VbODAwXSB0aGF0IHBhc3MgMzoxLlxuICAgIGxpZ2h0OiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbOTAwXVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgY29uc3Qge1xuICAgIG1vZGUgPSAnbGlnaHQnLFxuICAgIGNvbnRyYXN0VGhyZXNob2xkID0gMyxcbiAgICB0b25hbE9mZnNldCA9IDAuMlxuICB9ID0gcGFsZXR0ZSxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwYWxldHRlLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnkgfHwgZ2V0RGVmYXVsdFByaW1hcnkobW9kZSk7XG4gIGNvbnN0IHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5IHx8IGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSk7XG4gIGNvbnN0IGVycm9yID0gcGFsZXR0ZS5lcnJvciB8fCBnZXREZWZhdWx0RXJyb3IobW9kZSk7XG4gIGNvbnN0IGluZm8gPSBwYWxldHRlLmluZm8gfHwgZ2V0RGVmYXVsdEluZm8obW9kZSk7XG4gIGNvbnN0IHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MgfHwgZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSk7XG4gIGNvbnN0IHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcgfHwgZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSk7IC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhc1xuICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcblxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIGNvbnN0IGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG5cbiAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGNvbnRyYXN0IHJhdGlvIG9mICR7Y29udHJhc3R9OjEgZm9yICR7Y29udHJhc3RUZXh0fSBvbiAke2JhY2tncm91bmR9YCwgJ2ZhbGxzIGJlbG93IHRoZSBXQ0FHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuXG4gIGNvbnN0IGF1Z21lbnRDb2xvciA9ICh7XG4gICAgY29sb3IsXG4gICAgbmFtZSxcbiAgICBtYWluU2hhZGUgPSA1MDAsXG4gICAgbGlnaHRTaGFkZSA9IDMwMCxcbiAgICBkYXJrU2hhZGUgPSA3MDBcbiAgfSkgPT4ge1xuICAgIGNvbG9yID0gX2V4dGVuZHMoe30sIGNvbG9yKTtcblxuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbG9yLmhhc093blByb3BlcnR5KCdtYWluJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgXFxgbWFpblxcYCBwcm9wZXJ0eSBvciBhIFxcYCR7bWFpblNoYWRlfVxcYCBwcm9wZXJ0eS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMSwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBtYWluU2hhZGUpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yLm1haW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIGNvbG9yJHtuYW1lID8gYCAoJHtuYW1lfSlgIDogJyd9IHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cblxcYGNvbG9yLm1haW5cXGAgc2hvdWxkIGJlIGEgc3RyaW5nLCBidXQgXFxgJHtKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKX1cXGAgd2FzIHByb3ZpZGVkIGluc3RlYWQuXG5cbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xuXG5pbXBvcnQgeyBncmVlbiB9IGZyb20gXCJAbXVpL21hdGVyaWFsL2NvbG9yc1wiO1xuXG5jb25zdCB0aGVtZTEgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogZ3JlZW4sXG59IH0pO1xuXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogeyBtYWluOiBncmVlbls1MDBdIH0sXG59IH0pO2AgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEyLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pKSk7XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9O1xuXG4gIGNvbnN0IG1vZGVzID0ge1xuICAgIGRhcmssXG4gICAgbGlnaHRcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghbW9kZXNbbW9kZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHBhbGV0dGUgbW9kZSBcXGAke21vZGV9XFxgIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uLFxuICAgIC8vIFRoZSBwYWxldHRlIG1vZGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIG1vZGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogcHJpbWFyeSxcbiAgICAgIG5hbWU6ICdwcmltYXJ5J1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzZWNvbmRhcnksXG4gICAgICBuYW1lOiAnc2Vjb25kYXJ5JyxcbiAgICAgIG1haW5TaGFkZTogJ0E0MDAnLFxuICAgICAgbGlnaHRTaGFkZTogJ0EyMDAnLFxuICAgICAgZGFya1NoYWRlOiAnQTcwMCdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGVycm9yLFxuICAgICAgbmFtZTogJ2Vycm9yJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMgb3IgaW1wb3J0YW50IG1lc3NhZ2VzLlxuICAgIHdhcm5pbmc6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogd2FybmluZyxcbiAgICAgIG5hbWU6ICd3YXJuaW5nJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGluZm8sXG4gICAgICBuYW1lOiAnaW5mbydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHN1Y2Nlc3MsXG4gICAgICBuYW1lOiAnc3VjY2VzcydcbiAgICB9KSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleSxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0XG4gIH0sIG1vZGVzW21vZGVdKSwgb3RoZXIpO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiZm9udFdlaWdodEJvbGRcIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiLCBcInB4VG9SZW1cIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG5jb25zdCBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG5jb25zdCBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuLyoqXG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdGhlLXR5cGUtc3lzdGVtLmh0bWx9XG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdW5kZXJzdGFuZGluZy10eXBvZ3JhcGh5Lmh0bWx9XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIGNvbnN0IF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgICB7XG4gICAgZm9udEZhbWlseSA9IGRlZmF1bHRGb250RmFtaWx5LFxuICAgIC8vIFRoZSBkZWZhdWx0IGZvbnQgc2l6ZSBvZiB0aGUgTWF0ZXJpYWwgU3BlY2lmaWNhdGlvbi5cbiAgICBmb250U2l6ZSA9IDE0LFxuICAgIC8vIHB4XG4gICAgZm9udFdlaWdodExpZ2h0ID0gMzAwLFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyID0gNDAwLFxuICAgIGZvbnRXZWlnaHRNZWRpdW0gPSA1MDAsXG4gICAgZm9udFdlaWdodEJvbGQgPSA3MDAsXG4gICAgLy8gVGVsbCBNVUkgd2hhdCdzIHRoZSBmb250LXNpemUgb24gdGhlIGh0bWwgZWxlbWVudC5cbiAgICAvLyAxNnB4IGlzIHRoZSBkZWZhdWx0IGZvbnQtc2l6ZSB1c2VkIGJ5IGJyb3dzZXJzLlxuICAgIGh0bWxGb250U2l6ZSA9IDE2LFxuICAgIC8vIEFwcGx5IHRoZSBDU1MgcHJvcGVydGllcyB0byBhbGwgdGhlIHZhcmlhbnRzLlxuICAgIGFsbFZhcmlhbnRzLFxuICAgIHB4VG9SZW06IHB4VG9SZW0yXG4gIH0gPSBfcmVmLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgZm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICBjb25zdCBweFRvUmVtID0gcHhUb1JlbTIgfHwgKHNpemUgPT4gYCR7c2l6ZSAvIGh0bWxGb250U2l6ZSAqIGNvZWZ9cmVtYCk7XG5cbiAgY29uc3QgYnVpbGRWYXJpYW50ID0gKGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykgPT4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFdlaWdodCxcbiAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICBsaW5lSGVpZ2h0XG4gIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgIGxldHRlclNwYWNpbmc6IGAke3JvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKX1lbWBcbiAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcblxuICBjb25zdCB2YXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEuMTY3LCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEuMiwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMTY3LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4yMzUsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzNCwgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjUsIDAuMTUpLFxuICAgIGJvZHkyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE0LCAxLjQzLCAwLjE1KSxcbiAgICBidXR0b246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS43NSwgMC40LCBjYXNlQWxsQ2FwcyksXG4gICAgY2FwdGlvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMS42NiwgMC40KSxcbiAgICBvdmVybGluZTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMi42NiwgMSwgY2FzZUFsbENhcHMpXG4gIH07XG4gIHJldHVybiBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtLFxuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGRcbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJjb25zdCBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG5jb25zdCBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xuY29uc3Qgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuXG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coLi4ucHgpIHtcbiAgcmV0dXJuIFtgJHtweFswXX1weCAke3B4WzFdfXB4ICR7cHhbMl19cHggJHtweFszXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5VW1icmFPcGFjaXR5fSlgLCBgJHtweFs0XX1weCAke3B4WzVdfXB4ICR7cHhbNl19cHggJHtweFs3XX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5UGVudW1icmFPcGFjaXR5fSlgLCBgJHtweFs4XX1weCAke3B4WzldfXB4ICR7cHhbMTBdfXB4ICR7cHhbMTFdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eX0pYF0uam9pbignLCcpO1xufSAvLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcblxuXG5jb25zdCBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDIsIDEsIC0xLCAwLCAxLCAxLCAwLCAwLCAxLCAzLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDEsIC0yLCAwLCAyLCAyLCAwLCAwLCAxLCA1LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDMsIC0yLCAwLCAzLCA0LCAwLCAwLCAxLCA4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG5leHBvcnQgZGVmYXVsdCBzaGFkb3dzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdO1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG5leHBvcnQgY29uc3QgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTsgLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5cbmV4cG9ydCBjb25zdCBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcblxuZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBgJHtNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyl9bXNgO1xufVxuXG5mdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gIGlmICghaGVpZ2h0KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBjb25zdCBjb25zdGFudCA9IGhlaWdodCAvIDM2OyAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcblxuICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogY29uc3RhbnQgKiogMC4yNSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25zKGlucHV0VHJhbnNpdGlvbnMpIHtcbiAgY29uc3QgbWVyZ2VkRWFzaW5nID0gX2V4dGVuZHMoe30sIGVhc2luZywgaW5wdXRUcmFuc2l0aW9ucy5lYXNpbmcpO1xuXG4gIGNvbnN0IG1lcmdlZER1cmF0aW9uID0gX2V4dGVuZHMoe30sIGR1cmF0aW9uLCBpbnB1dFRyYW5zaXRpb25zLmR1cmF0aW9uKTtcblxuICBjb25zdCBjcmVhdGUgPSAocHJvcHMgPSBbJ2FsbCddLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb25PcHRpb24gPSBtZXJnZWREdXJhdGlvbi5zdGFuZGFyZCxcbiAgICAgIGVhc2luZzogZWFzaW5nT3B0aW9uID0gbWVyZ2VkRWFzaW5nLmVhc2VJbk91dCxcbiAgICAgIGRlbGF5ID0gMFxuICAgIH0gPSBvcHRpb25zLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBpc1N0cmluZyA9IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7IC8vIElFMTEgc3VwcG9ydCwgcmVwbGFjZSB3aXRoIE51bWJlci5pc05hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG5cbiAgICAgIGNvbnN0IGlzTnVtYmVyID0gdmFsdWUgPT4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcblxuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pICYmICFpc1N0cmluZyhkdXJhdGlvbk9wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBBcmd1bWVudCBcImR1cmF0aW9uXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgJHtkdXJhdGlvbk9wdGlvbn0uYCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbJHtPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpfV0uYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGFuaW1hdGVkUHJvcCA9PiBgJHthbmltYXRlZFByb3B9ICR7dHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pfSAke2Vhc2luZ09wdGlvbn0gJHt0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSl9YCkuam9pbignLCcpO1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ2V0QXV0b0hlaWdodER1cmF0aW9uLFxuICAgIGNyZWF0ZVxuICB9LCBpbnB1dFRyYW5zaXRpb25zLCB7XG4gICAgZWFzaW5nOiBtZXJnZWRFYXNpbmcsXG4gICAgZHVyYXRpb246IG1lcmdlZER1cmF0aW9uXG4gIH0pO1xufSIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxuY29uc3QgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBzcGVlZERpYWw6IDEwNTAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG5leHBvcnQgZGVmYXVsdCB6SW5kZXg7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwic3BhY2luZ1wiLCBcInBhbGV0dGVcIiwgXCJ0cmFuc2l0aW9uc1wiLCBcInR5cG9ncmFwaHlcIiwgXCJzaGFwZVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgYXMgc3lzdGVtQ3JlYXRlVGhlbWUgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9ucyBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuXG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgIG1peGluczogbWl4aW5zSW5wdXQgPSB7fSxcbiAgICBwYWxldHRlOiBwYWxldHRlSW5wdXQgPSB7fSxcbiAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnNJbnB1dCA9IHt9LFxuICAgIHR5cG9ncmFwaHk6IHR5cG9ncmFwaHlJbnB1dCA9IHt9XG4gIH0gPSBvcHRpb25zLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgY29uc3Qgc3lzdGVtVGhlbWUgPSBzeXN0ZW1DcmVhdGVUaGVtZShvcHRpb25zKTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHN5c3RlbVRoZW1lLCB7XG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoc3lzdGVtVGhlbWUuYnJlYWtwb2ludHMsIHN5c3RlbVRoZW1lLnNwYWNpbmcsIG1peGluc0lucHV0KSxcbiAgICBwYWxldHRlLFxuICAgIC8vIERvbid0IHVzZSBbLi4uc2hhZG93c10gdW50aWwgeW91J3ZlIHZlcmlmaWVkIGl0cyB0cmFuc3BpbGVkIGNvZGUgaXMgbm90IGludm9raW5nIHRoZSBpdGVyYXRvciBwcm90b2NvbC5cbiAgICBzaGFkb3dzOiBzaGFkb3dzLnNsaWNlKCksXG4gICAgdHlwb2dyYXBoeTogY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHRyYW5zaXRpb25zOiBjcmVhdGVUcmFuc2l0aW9ucyh0cmFuc2l0aW9uc0lucHV0KSxcbiAgICB6SW5kZXg6IF9leHRlbmRzKHt9LCB6SW5kZXgpXG4gIH0pO1xuICBtdWlUaGVtZSA9IGRlZXBtZXJnZShtdWlUaGVtZSwgb3RoZXIpO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnN0IHN0YXRlQ2xhc3NlcyA9IFsnYWN0aXZlJywgJ2NoZWNrZWQnLCAnY29tcGxldGVkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2V4cGFuZGVkJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ3NlbGVjdGVkJ107XG5cbiAgICBjb25zdCB0cmF2ZXJzZSA9IChub2RlLCBjb21wb25lbnQpID0+IHtcbiAgICAgIGxldCBrZXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2tleV07XG5cbiAgICAgICAgaWYgKHN0YXRlQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlQ2xhc3MgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnJywga2V5KTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGAke2NvbXBvbmVudH1cXGAgY29tcG9uZW50IGluY3JlYXNlcyBgICsgYHRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIFxcYCR7a2V5fVxcYCBpbnRlcm5hbCBzdGF0ZS5gLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsIGBJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICcmLiR7c3RhdGVDbGFzc30nIHN5bnRheDpgLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICAgICAgICBbYCYuJHtzdGF0ZUNsYXNzfWBdOiBjaGlsZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBudWxsLCAyKSwgJycsICdodHRwczovL211aS5jb20vci9zdGF0ZS1jbGFzc2VzLWd1aWRlJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH0gLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG5cblxuICAgICAgICAgIG5vZGVba2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIE9iamVjdC5rZXlzKG11aVRoZW1lLmNvbXBvbmVudHMpLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gbXVpVGhlbWUuY29tcG9uZW50c1tjb21wb25lbnRdLnN0eWxlT3ZlcnJpZGVzO1xuXG4gICAgICBpZiAoc3R5bGVPdmVycmlkZXMgJiYgY29tcG9uZW50LmluZGV4T2YoJ011aScpID09PSAwKSB7XG4gICAgICAgIHRyYXZlcnNlKHN0eWxlT3ZlcnJpZGVzLCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuXG5sZXQgd2FybmVkT25jZSA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgIHdhcm5lZE9uY2UgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogdGhlIGNyZWF0ZU11aVRoZW1lIGZ1bmN0aW9uIHdhcyByZW5hbWVkIHRvIGNyZWF0ZVRoZW1lLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvc3R5bGVzJ2BcIl0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjcmVhdGVUaGVtZSguLi5hcmdzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICB0b29sYmFyOiB7XG4gICAgICBtaW5IZWlnaHQ6IDU2LFxuICAgICAgW2Ake2JyZWFrcG9pbnRzLnVwKCd4cycpfSBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpYF06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA0OFxuICAgICAgfSxcbiAgICAgIFticmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA2NFxuICAgICAgfVxuICAgIH1cbiAgfSwgbWl4aW5zKTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVCb3ggfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICcuLi9zdHlsZXMnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqL1xuXG5jb25zdCBCb3ggPSBjcmVhdGVCb3goe1xuICBkZWZhdWx0VGhlbWUsXG4gIGRlZmF1bHRDbGFzc05hbWU6ICdNdWlCb3gtcm9vdCcsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGVcbn0pO1xuZXhwb3J0IGRlZmF1bHQgQm94OyIsImltcG9ydCBDbGFzc05hbWVHZW5lcmF0b3IgZnJvbSAnLi9DbGFzc05hbWVHZW5lcmF0b3InO1xuY29uc3QgZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZyA9IHtcbiAgYWN0aXZlOiAnTXVpLWFjdGl2ZScsXG4gIGNoZWNrZWQ6ICdNdWktY2hlY2tlZCcsXG4gIGNvbXBsZXRlZDogJ011aS1jb21wbGV0ZWQnLFxuICBkaXNhYmxlZDogJ011aS1kaXNhYmxlZCcsXG4gIGVycm9yOiAnTXVpLWVycm9yJyxcbiAgZXhwYW5kZWQ6ICdNdWktZXhwYW5kZWQnLFxuICBmb2N1c2VkOiAnTXVpLWZvY3VzZWQnLFxuICBmb2N1c1Zpc2libGU6ICdNdWktZm9jdXNWaXNpYmxlJyxcbiAgcmVxdWlyZWQ6ICdNdWktcmVxdWlyZWQnLFxuICBzZWxlY3RlZDogJ011aS1zZWxlY3RlZCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90KSB7XG4gIGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3MgPSBnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nW3Nsb3RdO1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzcyB8fCBgJHtDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGUoY29tcG9uZW50TmFtZSl9LSR7c2xvdH1gO1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKGNvbXBvbmVudE5hbWUsIHNsb3RzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBzbG90cy5mb3JFYWNoKHNsb3QgPT4ge1xuICAgIHJlc3VsdFtzbG90XSA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTbGlkZXInLCBzbG90KTtcbn1cbmNvbnN0IHNsaWRlclVuc3R5bGVkQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNsaWRlcicsIFsncm9vdCcsICdhY3RpdmUnLCAnZm9jdXNWaXNpYmxlJywgJ2Rpc2FibGVkJywgJ2RyYWdnaW5nJywgJ21hcmtlZCcsICd2ZXJ0aWNhbCcsICd0cmFja0ludmVydGVkJywgJ3RyYWNrRmFsc2UnLCAncmFpbCcsICd0cmFjaycsICdtYXJrJywgJ21hcmtBY3RpdmUnLCAnbWFya0xhYmVsJywgJ21hcmtMYWJlbEFjdGl2ZScsICd0aHVtYicsICd2YWx1ZUxhYmVsJywgJ3ZhbHVlTGFiZWxPcGVuJywgJ3ZhbHVlTGFiZWxDaXJjbGUnLCAndmFsdWVMYWJlbExhYmVsJ10pO1xuZXhwb3J0IGRlZmF1bHQgc2xpZGVyVW5zdHlsZWRDbGFzc2VzOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzbGlkZXJVbnN0eWxlZENsYXNzZXMgZnJvbSAnLi9zbGlkZXJVbnN0eWxlZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVmFsdWVMYWJlbENsYXNzZXMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcGVuXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgdXRpbGl0eUNsYXNzZXMgPSB7XG4gICAgb2Zmc2V0OiBjbHN4KG9wZW4gJiYgc2xpZGVyVW5zdHlsZWRDbGFzc2VzLnZhbHVlTGFiZWxPcGVuKSxcbiAgICBjaXJjbGU6IHNsaWRlclVuc3R5bGVkQ2xhc3Nlcy52YWx1ZUxhYmVsQ2lyY2xlLFxuICAgIGxhYmVsOiBzbGlkZXJVbnN0eWxlZENsYXNzZXMudmFsdWVMYWJlbExhYmVsXG4gIH07XG4gIHJldHVybiB1dGlsaXR5Q2xhc3Nlcztcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICB2YWx1ZSxcbiAgICB0aGVtZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VWYWx1ZUxhYmVsQ2xhc3Nlcyhwcm9wcyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSlcbiAgfSwgLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbi5wcm9wcy5jaGlsZHJlbiwgLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLm9mZnNldCwgY2xhc3NOYW1lKSxcbiAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY2lyY2xlLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWwsXG4gICAgICAgICAgY2hpbGRyZW46IHZhbHVlXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXVxuICB9KSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlclZhbHVlTGFiZWxVbnN0eWxlZC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRoZW1lOiBQcm9wVHlwZXMuYW55LFxuICB2YWx1ZTogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQ7IiwiLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIERPTSBlbGVtZW50IG5hbWUgKGkuZS4gbm90IGEgUmVhY3QgY29tcG9uZW50KS5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0Q29tcG9uZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNIb3N0Q29tcG9uZW50OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICcuL2lzSG9zdENvbXBvbmVudCc7XG4vKipcbiAqIEFwcGVuZHMgdGhlIG93bmVyU3RhdGUgb2JqZWN0IHRvIHRoZSBwcm9wcywgbWVyZ2luZyB3aXRoIHRoZSBleGlzdGluZyBvbmUgaWYgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSBlbGVtZW50VHlwZSBUeXBlIG9mIHRoZSBlbGVtZW50IHRoYXQgb3ducyB0aGUgYGV4aXN0aW5nUHJvcHNgLiBJZiB0aGUgZWxlbWVudCBpcyBhIERPTSBub2RlLCBgb3duZXJTdGF0ZWAgYXJlIG5vdCBhcHBsaWVkLlxuICogQHBhcmFtIGV4aXN0aW5nUHJvcHMgUHJvcHMgb2YgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gb3duZXJTdGF0ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIGV4aXN0aW5nUHJvcHMgPSB7fSwgb3duZXJTdGF0ZSkge1xuICBpZiAoaXNIb3N0Q29tcG9uZW50KGVsZW1lbnRUeXBlKSkge1xuICAgIHJldHVybiBleGlzdGluZ1Byb3BzO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBleGlzdGluZ1Byb3BzLCB7XG4gICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIGV4aXN0aW5nUHJvcHMub3duZXJTdGF0ZSwgb3duZXJTdGF0ZSlcbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFV0aWxpdHlDbGFzcywgY2xhc3Nlcykge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoc2xvdHMpLmZvckVhY2goIC8vIGBPYmpldC5rZXlzKHNsb3RzKWAgY2FuJ3QgYmUgd2lkZXIgdGhhbiBgVGAgYmVjYXVzZSB3ZSBpbmZlciBgVGAgZnJvbSBgc2xvdHNgLlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzEyMjUzI2lzc3VlY29tbWVudC0yNjMxMzIyMDhcbiAgc2xvdCA9PiB7XG4gICAgb3V0cHV0W3Nsb3RdID0gc2xvdHNbc2xvdF0ucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICBpZiAoY2xhc3NlcyAmJiBjbGFzc2VzW2tleV0pIHtcbiAgICAgICAgICBhY2MucHVzaChjbGFzc2VzW2tleV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYWNjLnB1c2goZ2V0VXRpbGl0eUNsYXNzKGtleSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKS5qb2luKCcgJyk7XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MsIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ29udHJvbGxlZCh7XG4gIGNvbnRyb2xsZWQsXG4gIGRlZmF1bHQ6IGRlZmF1bHRQcm9wLFxuICBuYW1lLFxuICBzdGF0ZSA9ICd2YWx1ZSdcbn0pIHtcbiAgLy8gaXNDb250cm9sbGVkIGlzIGlnbm9yZWQgaW4gdGhlIGhvb2sgZGVwZW5kZW5jeSBsaXN0cyBhcyBpdCBzaG91bGQgbmV2ZXIgY2hhbmdlLlxuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKTtcbiAgY29uc3QgW3ZhbHVlU3RhdGUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKGRlZmF1bHRQcm9wKTtcbiAgY29uc3QgdmFsdWUgPSBpc0NvbnRyb2xsZWQgPyBjb250cm9sbGVkIDogdmFsdWVTdGF0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkICE9PSAoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgJHtpc0NvbnRyb2xsZWQgPyAnJyA6ICd1bid9Y29udHJvbGxlZCAke3N0YXRlfSBzdGF0ZSBvZiAke25hbWV9IHRvIGJlICR7aXNDb250cm9sbGVkID8gJ3VuJyA6ICcnfWNvbnRyb2xsZWQuYCwgJ0VsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsIGBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICR7bmFtZX0gYCArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCBcIlRoZSBuYXR1cmUgb2YgdGhlIHN0YXRlIGlzIGRldGVybWluZWQgZHVyaW5nIHRoZSBmaXJzdCByZW5kZXIuIEl0J3MgY29uc2lkZXJlZCBjb250cm9sbGVkIGlmIHRoZSB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuXCIsICdNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtzdGF0ZSwgbmFtZSwgY29udHJvbGxlZF0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZVxuICAgIH0gPSBSZWFjdC51c2VSZWYoZGVmYXVsdFByb3ApO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWlzQ29udHJvbGxlZCAmJiBkZWZhdWx0VmFsdWUgIT09IGRlZmF1bHRQcm9wKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSBkZWZhdWx0ICR7c3RhdGV9IHN0YXRlIG9mIGFuIHVuY29udHJvbGxlZCAke25hbWV9IGFmdGVyIGJlaW5nIGluaXRpYWxpemVkLiBgICsgYFRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBvcHQgdG8gdXNlIGEgY29udHJvbGxlZCAke25hbWV9LmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbSlNPTi5zdHJpbmdpZnkoZGVmYXVsdFByb3ApXSk7XG4gIH1cblxuICBjb25zdCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3VmFsdWUgPT4ge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzZXRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBbXSk7XG4gIHJldHVybiBbdmFsdWUsIHNldFZhbHVlSWZVbmNvbnRyb2xsZWRdO1xufSIsIi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi92NC4xLjUvc3JjL2ZvY3VzLXZpc2libGUuanNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xubGV0IGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dDtcbmNvbnN0IGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG4vKipcbiAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIHRhZ05hbWVcbiAgfSA9IG5vZGU7XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdJTlBVVCcgJiYgaW5wdXRUeXBlc1doaXRlbGlzdFt0eXBlXSAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gIGlmIChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlUG9pbnRlckRvd24oKSB7XG4gIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlYXJkb3duKGRvYykge1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShldmVudCkge1xuICBjb25zdCB7XG4gICAgdGFyZ2V0XG4gIH0gPSBldmVudDtcblxuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsvLyBCcm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvci5cbiAgICAvLyBXZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzLlxuICAgIC8vIFJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gICAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIH0gLy8gTm8gbmVlZCBmb3IgdmFsaWRGb2N1c1RhcmdldCBjaGVjay4gVGhlIHVzZXIgZG9lcyB0aGF0IGJ5IGF0dGFjaGluZyBpdCB0b1xuICAvLyBmb2N1c2FibGUgZXZlbnRzIG9ubHkuXG5cblxuICByZXR1cm4gaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSh0YXJnZXQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJc0ZvY3VzVmlzaWJsZSgpIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgcHJlcGFyZShub2RlLm93bmVyRG9jdW1lbnQpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBpc0ZvY3VzVmlzaWJsZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZFxuICAgKi9cblxuICBmdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgICAvLyBjaGVja2luZyBhZ2FpbnN0IHBvdGVudGlhbCBzdGF0ZSB2YXJpYWJsZSBkb2VzIG5vdCBzdWZmaWNlIGlmIHdlIGZvY3VzIGFuZCBibHVyIHN5bmNocm9ub3VzbHkuXG4gICAgLy8gUmVhY3Qgd291bGRuJ3QgaGF2ZSB0aW1lIHRvIHRyaWdnZXIgYSByZS1yZW5kZXIgc28gYGZvY3VzVmlzaWJsZWAgd291bGQgYmUgc3RhbGUuXG4gICAgLy8gSWRlYWxseSB3ZSB3b3VsZCBhZGp1c3QgYGlzRm9jdXNWaXNpYmxlKGV2ZW50KWAgdG8gbG9vayBhdCBgcmVsYXRlZFRhcmdldGAgZm9yIGJsdXIgZXZlbnRzLlxuICAgIC8vIFRoaXMgZG9lc24ndCB3b3JrIGluIElFMTEgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzc1MVxuICAgIC8vIFRPRE86IGNoZWNrIGFnYWluIGlmIFJlYWN0IHJlbGVhc2VzIHRoZWlyIGludGVybmFsIGNoYW5nZXMgdG8gZm9jdXMgZXZlbnQgaGFuZGxpbmcgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzE5MTg2KS5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCkge1xuICAgICAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAgICAgLy8gcmFwaWRseSBieSBhIHZpc2liaWxpdHkgY2hhbmdlLlxuICAgICAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgICAgIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSB0cnVlO1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgICAgfSwgMTAwKTtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG5cblxuICBmdW5jdGlvbiBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpIHtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQpKSB7XG4gICAgICBpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmXG4gIH07XG59IiwiLyoqXG4gKiBUT0RPIHY1OiBjb25zaWRlciBtYWtpbmcgaXQgcHJpdmF0ZVxuICpcbiAqIHBhc3NlcyB7dmFsdWV9IHRvIHtyZWZ9XG4gKlxuICogV0FSTklORzogQmUgc3VyZSB0byBvbmx5IGNhbGwgdGhpcyBpbnNpZGUgYSBjYWxsYmFjayB0aGF0IGlzIHBhc3NlZCBhcyBhIHJlZi5cbiAqIE90aGVyd2lzZSwgbWFrZSBzdXJlIHRvIGNsZWFudXAgdGhlIHByZXZpb3VzIHtyZWZ9IGlmIGl0IGNoYW5nZXMuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNTM5XG4gKlxuICogVXNlZnVsIGlmIHlvdSB3YW50IHRvIGV4cG9zZSB0aGUgcmVmIG9mIGFuIGlubmVyIGNvbXBvbmVudCB0byB0aGUgcHVibGljIEFQSVxuICogd2hpbGUgc3RpbGwgdXNpbmcgaXQgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gKiBAcGFyYW0gcmVmIEEgcmVmIGNhbGxiYWNrIG9yIHJlZiBvYmplY3QuIElmIGFueXRoaW5nIGZhbHN5LCB0aGlzIGlzIGEgbm8tb3AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuL3NldFJlZic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JrUmVmKHJlZkEsIHJlZkIpIHtcbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgdGhlIHJlZiBwcm9wcyBjaGFuZ2UgYW5kIGFyZSBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yLlxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyZWZBID09IG51bGwgJiYgcmVmQiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmVmFsdWUgPT4ge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgdXNlRW5oYW5jZWRFZmZlY3Q7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4vdXNlRW5oYW5jZWRFZmZlY3QnO1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MDk5I2lzc3VlY29tbWVudC00NDAwMTM4OTJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihmbik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IGZuO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKCguLi5hcmdzKSA9PiAvLyBAdHMtZXhwZWN0LWVycm9yIGhpZGUgYHRoaXNgXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tY29tbWEtb3BlcmF0b3JcbiAgKDAsIHJlZi5jdXJyZW50KSguLi5hcmdzKSwgW10pO1xufSIsImNvbnN0IHZpc3VhbGx5SGlkZGVuID0ge1xuICBib3JkZXI6IDAsXG4gIGNsaXA6ICdyZWN0KDAgMCAwIDApJyxcbiAgaGVpZ2h0OiAnMXB4JyxcbiAgbWFyZ2luOiAtMSxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gIHdpZHRoOiAnMXB4J1xufTtcbmV4cG9ydCBkZWZhdWx0IHZpc3VhbGx5SGlkZGVuOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdW5zdGFibGVfdXNlSXNGb2N1c1Zpc2libGUgYXMgdXNlSXNGb2N1c1Zpc2libGUsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQsIHVuc3RhYmxlX3VzZUV2ZW50Q2FsbGJhY2sgYXMgdXNlRXZlbnRDYWxsYmFjaywgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV91c2VDb250cm9sbGVkIGFzIHVzZUNvbnRyb2xsZWQsIHZpc3VhbGx5SGlkZGVuIH0gZnJvbSAnQG11aS91dGlscyc7XG5jb25zdCBJTlRFTlRJT05BTF9EUkFHX0NPVU5UX1RIUkVTSE9MRCA9IDI7XG5cbmZ1bmN0aW9uIGFzYyhhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cblxuZnVuY3Rpb24gY2xhbXAodmFsdWUsIG1pbiwgbWF4KSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbn1cblxuZnVuY3Rpb24gZmluZENsb3Nlc3QodmFsdWVzLCBjdXJyZW50VmFsdWUpIHtcbiAgdmFyIF92YWx1ZXMkcmVkdWNlO1xuXG4gIGNvbnN0IHtcbiAgICBpbmRleDogY2xvc2VzdEluZGV4XG4gIH0gPSAoX3ZhbHVlcyRyZWR1Y2UgPSB2YWx1ZXMucmVkdWNlKChhY2MsIHZhbHVlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5hYnMoY3VycmVudFZhbHVlIC0gdmFsdWUpO1xuXG4gICAgaWYgKGFjYyA9PT0gbnVsbCB8fCBkaXN0YW5jZSA8IGFjYy5kaXN0YW5jZSB8fCBkaXN0YW5jZSA9PT0gYWNjLmRpc3RhbmNlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXN0YW5jZSxcbiAgICAgICAgaW5kZXhcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgbnVsbCkpICE9IG51bGwgPyBfdmFsdWVzJHJlZHVjZSA6IHt9O1xuICByZXR1cm4gY2xvc2VzdEluZGV4O1xufVxuXG5mdW5jdGlvbiB0cmFja0ZpbmdlcihldmVudCwgdG91Y2hJZCkge1xuICAvLyBUaGUgZXZlbnQgaXMgVG91Y2hFdmVudFxuICBpZiAodG91Y2hJZC5jdXJyZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQuY2hhbmdlZFRvdWNoZXMpIHtcbiAgICBjb25zdCB0b3VjaEV2ZW50ID0gZXZlbnQ7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHRvdWNoID0gdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXTtcblxuICAgICAgaWYgKHRvdWNoLmlkZW50aWZpZXIgPT09IHRvdWNoSWQuY3VycmVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IHRvdWNoLmNsaWVudFgsXG4gICAgICAgICAgeTogdG91Y2guY2xpZW50WVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBUaGUgZXZlbnQgaXMgTW91c2VFdmVudFxuXG5cbiAgcmV0dXJuIHtcbiAgICB4OiBldmVudC5jbGllbnRYLFxuICAgIHk6IGV2ZW50LmNsaWVudFlcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlVG9QZXJjZW50KHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gKHZhbHVlIC0gbWluKSAqIDEwMCAvIChtYXggLSBtaW4pO1xufVxuXG5mdW5jdGlvbiBwZXJjZW50VG9WYWx1ZShwZXJjZW50LCBtaW4sIG1heCkge1xuICByZXR1cm4gKG1heCAtIG1pbikgKiBwZXJjZW50ICsgbWluO1xufVxuXG5mdW5jdGlvbiBnZXREZWNpbWFsUHJlY2lzaW9uKG51bSkge1xuICAvLyBUaGlzIGhhbmRsZXMgdGhlIGNhc2Ugd2hlbiBudW0gaXMgdmVyeSBzbWFsbCAoMC4wMDAwMDAwMSksIGpzIHdpbGwgdHVybiB0aGlzIGludG8gMWUtOC5cbiAgLy8gV2hlbiBudW0gaXMgYmlnZ2VyIHRoYW4gMSBvciBsZXNzIHRoYW4gLTEgaXQgd29uJ3QgZ2V0IGNvbnZlcnRlZCB0byB0aGlzIG5vdGF0aW9uIHNvIGl0J3MgZmluZS5cbiAgaWYgKE1hdGguYWJzKG51bSkgPCAxKSB7XG4gICAgY29uc3QgcGFydHMgPSBudW0udG9FeHBvbmVudGlhbCgpLnNwbGl0KCdlLScpO1xuICAgIGNvbnN0IG1hdGlzc2FEZWNpbWFsUGFydCA9IHBhcnRzWzBdLnNwbGl0KCcuJylbMV07XG4gICAgcmV0dXJuIChtYXRpc3NhRGVjaW1hbFBhcnQgPyBtYXRpc3NhRGVjaW1hbFBhcnQubGVuZ3RoIDogMCkgKyBwYXJzZUludChwYXJ0c1sxXSwgMTApO1xuICB9XG5cbiAgY29uc3QgZGVjaW1hbFBhcnQgPSBudW0udG9TdHJpbmcoKS5zcGxpdCgnLicpWzFdO1xuICByZXR1cm4gZGVjaW1hbFBhcnQgPyBkZWNpbWFsUGFydC5sZW5ndGggOiAwO1xufVxuXG5mdW5jdGlvbiByb3VuZFZhbHVlVG9TdGVwKHZhbHVlLCBzdGVwLCBtaW4pIHtcbiAgY29uc3QgbmVhcmVzdCA9IE1hdGgucm91bmQoKHZhbHVlIC0gbWluKSAvIHN0ZXApICogc3RlcCArIG1pbjtcbiAgcmV0dXJuIE51bWJlcihuZWFyZXN0LnRvRml4ZWQoZ2V0RGVjaW1hbFByZWNpc2lvbihzdGVwKSkpO1xufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZUluZGV4KHtcbiAgdmFsdWVzLFxuICBuZXdWYWx1ZSxcbiAgaW5kZXhcbn0pIHtcbiAgY29uc3Qgb3V0cHV0ID0gdmFsdWVzLnNsaWNlKCk7XG4gIG91dHB1dFtpbmRleF0gPSBuZXdWYWx1ZTtcbiAgcmV0dXJuIG91dHB1dC5zb3J0KGFzYyk7XG59XG5cbmZ1bmN0aW9uIGZvY3VzVGh1bWIoe1xuICBzbGlkZXJSZWYsXG4gIGFjdGl2ZUluZGV4LFxuICBzZXRBY3RpdmVcbn0pIHtcbiAgdmFyIF9zbGlkZXJSZWYkY3VycmVudCwgX2RvYyRhY3RpdmVFbGVtZW50O1xuXG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQoc2xpZGVyUmVmLmN1cnJlbnQpO1xuXG4gIGlmICghKChfc2xpZGVyUmVmJGN1cnJlbnQgPSBzbGlkZXJSZWYuY3VycmVudCkgIT0gbnVsbCAmJiBfc2xpZGVyUmVmJGN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB8fCBOdW1iZXIoZG9jID09IG51bGwgPyB2b2lkIDAgOiAoX2RvYyRhY3RpdmVFbGVtZW50ID0gZG9jLmFjdGl2ZUVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZG9jJGFjdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpICE9PSBhY3RpdmVJbmRleCkge1xuICAgIHZhciBfc2xpZGVyUmVmJGN1cnJlbnQyO1xuXG4gICAgKF9zbGlkZXJSZWYkY3VycmVudDIgPSBzbGlkZXJSZWYuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zbGlkZXJSZWYkY3VycmVudDIucXVlcnlTZWxlY3RvcihgW3R5cGU9XCJyYW5nZVwiXVtkYXRhLWluZGV4PVwiJHthY3RpdmVJbmRleH1cIl1gKS5mb2N1cygpO1xuICB9XG5cbiAgaWYgKHNldEFjdGl2ZSkge1xuICAgIHNldEFjdGl2ZShhY3RpdmVJbmRleCk7XG4gIH1cbn1cblxuY29uc3QgYXhpc1Byb3BzID0ge1xuICBob3Jpem9udGFsOiB7XG4gICAgb2Zmc2V0OiBwZXJjZW50ID0+ICh7XG4gICAgICBsZWZ0OiBgJHtwZXJjZW50fSVgXG4gICAgfSksXG4gICAgbGVhcDogcGVyY2VudCA9PiAoe1xuICAgICAgd2lkdGg6IGAke3BlcmNlbnR9JWBcbiAgICB9KVxuICB9LFxuICAnaG9yaXpvbnRhbC1yZXZlcnNlJzoge1xuICAgIG9mZnNldDogcGVyY2VudCA9PiAoe1xuICAgICAgcmlnaHQ6IGAke3BlcmNlbnR9JWBcbiAgICB9KSxcbiAgICBsZWFwOiBwZXJjZW50ID0+ICh7XG4gICAgICB3aWR0aDogYCR7cGVyY2VudH0lYFxuICAgIH0pXG4gIH0sXG4gIHZlcnRpY2FsOiB7XG4gICAgb2Zmc2V0OiBwZXJjZW50ID0+ICh7XG4gICAgICBib3R0b206IGAke3BlcmNlbnR9JWBcbiAgICB9KSxcbiAgICBsZWFwOiBwZXJjZW50ID0+ICh7XG4gICAgICBoZWlnaHQ6IGAke3BlcmNlbnR9JWBcbiAgICB9KVxuICB9XG59O1xuZXhwb3J0IGNvbnN0IElkZW50aXR5ID0geCA9PiB4OyAvLyBUT0RPOiByZW1vdmUgc3VwcG9ydCBmb3IgU2FmYXJpIDwgMTMuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dG91Y2gtYWN0aW9uXG4vL1xuLy8gU2FmYXJpLCBvbiBpT1MsIHN1cHBvcnRzIHRvdWNoIGFjdGlvbiBzaW5jZSB2MTMuXG4vLyBPdmVyIDgwJSBvZiB0aGUgaU9TIHBob25lcyBhcmUgY29tcGF0aWJsZVxuLy8gaW4gQXVndXN0IDIwMjAuXG4vLyBVdGlsaXppbmcgdGhlIENTUy5zdXBwb3J0cyBtZXRob2QgdG8gY2hlY2sgaWYgdG91Y2gtYWN0aW9uIGlzIHN1cHBvcnRlZC5cbi8vIFNpbmNlIENTUy5zdXBwb3J0cyBpcyBzdXBwb3J0ZWQgb24gYWxsIGJ1dCBFZGdlQDEyIGFuZCBJRSBhbmQgdG91Y2gtYWN0aW9uXG4vLyBpcyBzdXBwb3J0ZWQgb24gYm90aCBFZGdlQDEyIGFuZCBJRSBpZiBDU1Muc3VwcG9ydHMgaXMgbm90IGF2YWlsYWJsZSB0aGF0IG1lYW5zIHRoYXRcbi8vIHRvdWNoLWFjdGlvbiB3aWxsIGJlIHN1cHBvcnRlZFxuXG5sZXQgY2FjaGVkU3VwcG9ydHNUb3VjaEFjdGlvbk5vbmU7XG5cbmZ1bmN0aW9uIGRvZXNTdXBwb3J0VG91Y2hBY3Rpb25Ob25lKCkge1xuICBpZiAoY2FjaGVkU3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgQ1NTICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQ1NTLnN1cHBvcnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWNoZWRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSA9IENTUy5zdXBwb3J0cygndG91Y2gtYWN0aW9uJywgJ25vbmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGVkU3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYWNoZWRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlU2xpZGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICByZWYsXG4gICAgJ2FyaWEtbGFiZWxsZWRieSc6IGFyaWFMYWJlbGxlZGJ5LFxuICAgIGRlZmF1bHRWYWx1ZSxcbiAgICBkaXNhYmxlU3dhcCA9IGZhbHNlLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgbWFya3M6IG1hcmtzUHJvcCA9IGZhbHNlLFxuICAgIG1heCA9IDEwMCxcbiAgICBtaW4gPSAwLFxuICAgIG5hbWUsXG4gICAgb25DaGFuZ2UsXG4gICAgb25DaGFuZ2VDb21taXR0ZWQsXG4gICAgb3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCcsXG4gICAgc2NhbGUgPSBJZGVudGl0eSxcbiAgICBzdGVwID0gMSxcbiAgICB0YWJJbmRleCxcbiAgICB2YWx1ZTogdmFsdWVQcm9wLFxuICAgIGlzUnRsID0gZmFsc2VcbiAgfSA9IHByb3BzO1xuICBjb25zdCB0b3VjaElkID0gUmVhY3QudXNlUmVmKCk7IC8vIFdlIGNhbid0IHVzZSB0aGUgOmFjdGl2ZSBicm93c2VyIHBzZXVkby1jbGFzc2VzLlxuICAvLyAtIFRoZSBhY3RpdmUgc3RhdGUgaXNuJ3QgdHJpZ2dlcmVkIHdoZW4gY2xpY2tpbmcgb24gdGhlIHJhaWwuXG4gIC8vIC0gVGhlIGFjdGl2ZSBzdGF0ZSBpc24ndCB0cmFuc2ZlcnJlZCB3aGVuIGludmVyc2luZyBhIHJhbmdlIHNsaWRlci5cblxuICBjb25zdCBbYWN0aXZlLCBzZXRBY3RpdmVdID0gUmVhY3QudXNlU3RhdGUoLTEpO1xuICBjb25zdCBbb3Blbiwgc2V0T3Blbl0gPSBSZWFjdC51c2VTdGF0ZSgtMSk7XG4gIGNvbnN0IFtkcmFnZ2luZywgc2V0RHJhZ2dpbmddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBtb3ZlQ291bnQgPSBSZWFjdC51c2VSZWYoMCk7XG4gIGNvbnN0IFt2YWx1ZURlcml2ZWQsIHNldFZhbHVlU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogdmFsdWVQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSAhPSBudWxsID8gZGVmYXVsdFZhbHVlIDogbWluLFxuICAgIG5hbWU6ICdTbGlkZXInXG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IG9uQ2hhbmdlICYmICgoZXZlbnQsIHZhbHVlLCB0aHVtYkluZGV4KSA9PiB7XG4gICAgLy8gUmVkZWZpbmUgdGFyZ2V0IHRvIGFsbG93IG5hbWUgYW5kIHZhbHVlIHRvIGJlIHJlYWQuXG4gICAgLy8gVGhpcyBhbGxvd3Mgc2VhbWxlc3MgaW50ZWdyYXRpb24gd2l0aCB0aGUgbW9zdCBwb3B1bGFyIGZvcm0gbGlicmFyaWVzLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWktb3JnL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzQ4NSNpc3N1ZWNvbW1lbnQtNjc2MDQ4NDkyXG4gICAgLy8gQ2xvbmUgdGhlIGV2ZW50IHRvIG5vdCBvdmVycmlkZSBgdGFyZ2V0YCBvZiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gICAgY29uc3QgbmF0aXZlRXZlbnQgPSBldmVudC5uYXRpdmVFdmVudCB8fCBldmVudDsgLy8gQHRzLWlnbm9yZSBUaGUgbmF0aXZlRXZlbnQgaXMgZnVuY3Rpb24sIG5vdCBvYmplY3RcblxuICAgIGNvbnN0IGNsb25lZEV2ZW50ID0gbmV3IG5hdGl2ZUV2ZW50LmNvbnN0cnVjdG9yKG5hdGl2ZUV2ZW50LnR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xvbmVkRXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBuYW1lXG4gICAgICB9XG4gICAgfSk7XG4gICAgb25DaGFuZ2UoY2xvbmVkRXZlbnQsIHZhbHVlLCB0aHVtYkluZGV4KTtcbiAgfSk7XG5cbiAgY29uc3QgcmFuZ2UgPSBBcnJheS5pc0FycmF5KHZhbHVlRGVyaXZlZCk7XG4gIGxldCB2YWx1ZXMgPSByYW5nZSA/IHZhbHVlRGVyaXZlZC5zbGljZSgpLnNvcnQoYXNjKSA6IFt2YWx1ZURlcml2ZWRdO1xuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKHZhbHVlID0+IGNsYW1wKHZhbHVlLCBtaW4sIG1heCkpO1xuICBjb25zdCBtYXJrcyA9IG1hcmtzUHJvcCA9PT0gdHJ1ZSAmJiBzdGVwICE9PSBudWxsID8gWy4uLkFycmF5KE1hdGguZmxvb3IoKG1heCAtIG1pbikgLyBzdGVwKSArIDEpXS5tYXAoKF8sIGluZGV4KSA9PiAoe1xuICAgIHZhbHVlOiBtaW4gKyBzdGVwICogaW5kZXhcbiAgfSkpIDogbWFya3NQcm9wIHx8IFtdO1xuICBjb25zdCBtYXJrc1ZhbHVlcyA9IG1hcmtzLm1hcChtYXJrID0+IG1hcmsudmFsdWUpO1xuICBjb25zdCB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1Zpc2libGUsXG4gICAgcmVmOiBmb2N1c1Zpc2libGVSZWZcbiAgfSA9IHVzZUlzRm9jdXNWaXNpYmxlKCk7XG4gIGNvbnN0IFtmb2N1c1Zpc2libGUsIHNldEZvY3VzVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZSgtMSk7XG4gIGNvbnN0IHNsaWRlclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBoYW5kbGVGb2N1c1JlZiA9IHVzZUZvcmtSZWYoZm9jdXNWaXNpYmxlUmVmLCBzbGlkZXJSZWYpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaGFuZGxlRm9jdXNSZWYpO1xuXG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Rm9jdXMgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25Gb2N1O1xuXG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSk7XG4gICAgaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KTtcblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoaW5kZXgpO1xuICAgIH1cblxuICAgIHNldE9wZW4oaW5kZXgpO1xuICAgIG90aGVySGFuZGxlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IChfb3RoZXJIYW5kbGVycyRvbkZvY3UgPSBvdGhlckhhbmRsZXJzLm9uRm9jdXMpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbkZvY3UuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlSGFuZGxlSGlkZW5JbnB1dEJsdXIgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25CbHVyO1xuXG4gICAgaGFuZGxlQmx1clZpc2libGUoZXZlbnQpO1xuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoLTEpO1xuICAgIH1cblxuICAgIHNldE9wZW4oLTEpO1xuICAgIG90aGVySGFuZGxlcnMgPT0gbnVsbCA/IHZvaWQgMCA6IChfb3RoZXJIYW5kbGVycyRvbkJsdXIgPSBvdGhlckhhbmRsZXJzLm9uQmx1cikgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uQmx1ci5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgfTtcblxuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVkICYmIHNsaWRlclJlZi5jdXJyZW50LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICB2YXIgX2RvY3VtZW50JGFjdGl2ZUVsZW1lO1xuXG4gICAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIEZpcmVmb3ggYW5kIFNhZmFyaSB3aWxsIGtlZXAgZm9jdXNcbiAgICAgIC8vIG9uIGEgZGlzYWJsZWQgZWxlbWVudDpcbiAgICAgIC8vIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9tdWktcHItMjIyNDctZm9ya2VkLWgxNTFoP2ZpbGU9L3NyYy9BcHAuanNcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIChfZG9jdW1lbnQkYWN0aXZlRWxlbWUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2RvY3VtZW50JGFjdGl2ZUVsZW1lLmJsdXIoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlZF0pO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBhY3RpdmUgIT09IC0xKSB7XG4gICAgc2V0QWN0aXZlKC0xKTtcbiAgfVxuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c1Zpc2libGUgIT09IC0xKSB7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKC0xKTtcbiAgfVxuXG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Q2hhbmdlID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uQ2hhbjtcblxuICAgIChfb3RoZXJIYW5kbGVycyRvbkNoYW4gPSBvdGhlckhhbmRsZXJzLm9uQ2hhbmdlKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVySGFuZGxlcnMkb25DaGFuLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2luZGV4XTtcbiAgICBjb25zdCBtYXJrc0luZGV4ID0gbWFya3NWYWx1ZXMuaW5kZXhPZih2YWx1ZSk7IC8vIEB0cy1pZ25vcmVcblxuICAgIGxldCBuZXdWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZUFzTnVtYmVyO1xuXG4gICAgaWYgKG1hcmtzICYmIHN0ZXAgPT0gbnVsbCkge1xuICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZSA8IHZhbHVlID8gbWFya3NWYWx1ZXNbbWFya3NJbmRleCAtIDFdIDogbWFya3NWYWx1ZXNbbWFya3NJbmRleCArIDFdO1xuICAgIH1cblxuICAgIG5ld1ZhbHVlID0gY2xhbXAobmV3VmFsdWUsIG1pbiwgbWF4KTtcblxuICAgIGlmIChtYXJrcyAmJiBzdGVwID09IG51bGwpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRNYXJrSW5kZXggPSBtYXJrc1ZhbHVlcy5pbmRleE9mKHZhbHVlc1tpbmRleF0pO1xuICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZSA8IHZhbHVlc1tpbmRleF0gPyBtYXJrc1ZhbHVlc1tjdXJyZW50TWFya0luZGV4IC0gMV0gOiBtYXJrc1ZhbHVlc1tjdXJyZW50TWFya0luZGV4ICsgMV07XG4gICAgfVxuXG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICAvLyBCb3VuZCB0aGUgbmV3IHZhbHVlIHRvIHRoZSB0aHVtYidzIG5laWdoYm91cnMuXG4gICAgICBpZiAoZGlzYWJsZVN3YXApIHtcbiAgICAgICAgbmV3VmFsdWUgPSBjbGFtcChuZXdWYWx1ZSwgdmFsdWVzW2luZGV4IC0gMV0gfHwgLUluZmluaXR5LCB2YWx1ZXNbaW5kZXggKyAxXSB8fCBJbmZpbml0eSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIG5ld1ZhbHVlID0gc2V0VmFsdWVJbmRleCh7XG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgIGluZGV4XG4gICAgICB9KTtcbiAgICAgIGxldCBhY3RpdmVJbmRleCA9IGluZGV4OyAvLyBQb3RlbnRpYWxseSBzd2FwIHRoZSBpbmRleCBpZiBuZWVkZWQuXG5cbiAgICAgIGlmICghZGlzYWJsZVN3YXApIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBuZXdWYWx1ZS5pbmRleE9mKHByZXZpb3VzVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmb2N1c1RodW1iKHtcbiAgICAgICAgc2xpZGVyUmVmLFxuICAgICAgICBhY3RpdmVJbmRleFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0VmFsdWVTdGF0ZShuZXdWYWx1ZSk7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKGluZGV4KTtcblxuICAgIGlmIChoYW5kbGVDaGFuZ2UpIHtcbiAgICAgIGhhbmRsZUNoYW5nZShldmVudCwgbmV3VmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAob25DaGFuZ2VDb21taXR0ZWQpIHtcbiAgICAgIG9uQ2hhbmdlQ29tbWl0dGVkKGV2ZW50LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHByZXZpb3VzSW5kZXggPSBSZWFjdC51c2VSZWYoKTtcbiAgbGV0IGF4aXMgPSBvcmllbnRhdGlvbjtcblxuICBpZiAoaXNSdGwgJiYgb3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgIGF4aXMgKz0gJy1yZXZlcnNlJztcbiAgfVxuXG4gIGNvbnN0IGdldEZpbmdlck5ld1ZhbHVlID0gKHtcbiAgICBmaW5nZXIsXG4gICAgbW92ZSA9IGZhbHNlLFxuICAgIHZhbHVlczogdmFsdWVzMlxuICB9KSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY3VycmVudDogc2xpZGVyXG4gICAgfSA9IHNsaWRlclJlZjtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGxlZnRcbiAgICB9ID0gc2xpZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCBwZXJjZW50O1xuXG4gICAgaWYgKGF4aXMuaW5kZXhPZigndmVydGljYWwnKSA9PT0gMCkge1xuICAgICAgcGVyY2VudCA9IChib3R0b20gLSBmaW5nZXIueSkgLyBoZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlcmNlbnQgPSAoZmluZ2VyLnggLSBsZWZ0KSAvIHdpZHRoO1xuICAgIH1cblxuICAgIGlmIChheGlzLmluZGV4T2YoJy1yZXZlcnNlJykgIT09IC0xKSB7XG4gICAgICBwZXJjZW50ID0gMSAtIHBlcmNlbnQ7XG4gICAgfVxuXG4gICAgbGV0IG5ld1ZhbHVlO1xuICAgIG5ld1ZhbHVlID0gcGVyY2VudFRvVmFsdWUocGVyY2VudCwgbWluLCBtYXgpO1xuXG4gICAgaWYgKHN0ZXApIHtcbiAgICAgIG5ld1ZhbHVlID0gcm91bmRWYWx1ZVRvU3RlcChuZXdWYWx1ZSwgc3RlcCwgbWluKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2xvc2VzdEluZGV4ID0gZmluZENsb3Nlc3QobWFya3NWYWx1ZXMsIG5ld1ZhbHVlKTtcbiAgICAgIG5ld1ZhbHVlID0gbWFya3NWYWx1ZXNbY2xvc2VzdEluZGV4XTtcbiAgICB9XG5cbiAgICBuZXdWYWx1ZSA9IGNsYW1wKG5ld1ZhbHVlLCBtaW4sIG1heCk7XG4gICAgbGV0IGFjdGl2ZUluZGV4ID0gMDtcblxuICAgIGlmIChyYW5nZSkge1xuICAgICAgaWYgKCFtb3ZlKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gZmluZENsb3Nlc3QodmFsdWVzMiwgbmV3VmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBwcmV2aW91c0luZGV4LmN1cnJlbnQ7XG4gICAgICB9IC8vIEJvdW5kIHRoZSBuZXcgdmFsdWUgdG8gdGhlIHRodW1iJ3MgbmVpZ2hib3Vycy5cblxuXG4gICAgICBpZiAoZGlzYWJsZVN3YXApIHtcbiAgICAgICAgbmV3VmFsdWUgPSBjbGFtcChuZXdWYWx1ZSwgdmFsdWVzMlthY3RpdmVJbmRleCAtIDFdIHx8IC1JbmZpbml0eSwgdmFsdWVzMlthY3RpdmVJbmRleCArIDFdIHx8IEluZmluaXR5KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgbmV3VmFsdWUgPSBzZXRWYWx1ZUluZGV4KHtcbiAgICAgICAgdmFsdWVzOiB2YWx1ZXMyLFxuICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgaW5kZXg6IGFjdGl2ZUluZGV4XG4gICAgICB9KTsgLy8gUG90ZW50aWFsbHkgc3dhcCB0aGUgaW5kZXggaWYgbmVlZGVkLlxuXG4gICAgICBpZiAoIShkaXNhYmxlU3dhcCAmJiBtb3ZlKSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IG5ld1ZhbHVlLmluZGV4T2YocHJldmlvdXNWYWx1ZSk7XG4gICAgICAgIHByZXZpb3VzSW5kZXguY3VycmVudCA9IGFjdGl2ZUluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBuZXdWYWx1ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVUb3VjaE1vdmUgPSB1c2VFdmVudENhbGxiYWNrKG5hdGl2ZUV2ZW50ID0+IHtcbiAgICBjb25zdCBmaW5nZXIgPSB0cmFja0ZpbmdlcihuYXRpdmVFdmVudCwgdG91Y2hJZCk7XG5cbiAgICBpZiAoIWZpbmdlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1vdmVDb3VudC5jdXJyZW50ICs9IDE7IC8vIENhbmNlbCBtb3ZlIGluIGNhc2Ugc29tZSBvdGhlciBlbGVtZW50IGNvbnN1bWVkIGEgbW91c2V1cCBldmVudCBhbmQgaXQgd2FzIG5vdCBmaXJlZC5cbiAgICAvLyBAdHMtaWdub3JlIGJ1dHRvbnMgZG9lc24ndCBub3QgZXhpc3RzIG9uIHRvdWNoIGV2ZW50XG5cbiAgICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ21vdXNlbW92ZScgJiYgbmF0aXZlRXZlbnQuYnV0dG9ucyA9PT0gMCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgaGFuZGxlVG91Y2hFbmQobmF0aXZlRXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgYWN0aXZlSW5kZXhcbiAgICB9ID0gZ2V0RmluZ2VyTmV3VmFsdWUoe1xuICAgICAgZmluZ2VyLFxuICAgICAgbW92ZTogdHJ1ZSxcbiAgICAgIHZhbHVlc1xuICAgIH0pO1xuICAgIGZvY3VzVGh1bWIoe1xuICAgICAgc2xpZGVyUmVmLFxuICAgICAgYWN0aXZlSW5kZXgsXG4gICAgICBzZXRBY3RpdmVcbiAgICB9KTtcbiAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcblxuICAgIGlmICghZHJhZ2dpbmcgJiYgbW92ZUNvdW50LmN1cnJlbnQgPiBJTlRFTlRJT05BTF9EUkFHX0NPVU5UX1RIUkVTSE9MRCkge1xuICAgICAgc2V0RHJhZ2dpbmcodHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGhhbmRsZUNoYW5nZSkge1xuICAgICAgaGFuZGxlQ2hhbmdlKG5hdGl2ZUV2ZW50LCBuZXdWYWx1ZSwgYWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoRW5kID0gdXNlRXZlbnRDYWxsYmFjayhuYXRpdmVFdmVudCA9PiB7XG4gICAgY29uc3QgZmluZ2VyID0gdHJhY2tGaW5nZXIobmF0aXZlRXZlbnQsIHRvdWNoSWQpO1xuICAgIHNldERyYWdnaW5nKGZhbHNlKTtcblxuICAgIGlmICghZmluZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgbmV3VmFsdWVcbiAgICB9ID0gZ2V0RmluZ2VyTmV3VmFsdWUoe1xuICAgICAgZmluZ2VyLFxuICAgICAgdmFsdWVzXG4gICAgfSk7XG4gICAgc2V0QWN0aXZlKC0xKTtcblxuICAgIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAndG91Y2hlbmQnKSB7XG4gICAgICBzZXRPcGVuKC0xKTtcbiAgICB9XG5cbiAgICBpZiAob25DaGFuZ2VDb21taXR0ZWQpIHtcbiAgICAgIG9uQ2hhbmdlQ29tbWl0dGVkKG5hdGl2ZUV2ZW50LCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgdG91Y2hJZC5jdXJyZW50ID0gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG5cbiAgICBzdG9wTGlzdGVuaW5nKCk7XG4gIH0pO1xuICBjb25zdCBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlRXZlbnRDYWxsYmFjayhuYXRpdmVFdmVudCA9PiB7XG4gICAgLy8gSWYgdG91Y2gtYWN0aW9uOiBub25lOyBpcyBub3Qgc3VwcG9ydGVkIHdlIG5lZWQgdG8gcHJldmVudCB0aGUgc2Nyb2xsIG1hbnVhbGx5LlxuICAgIGlmICghZG9lc1N1cHBvcnRUb3VjaEFjdGlvbk5vbmUoKSkge1xuICAgICAgbmF0aXZlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBjb25zdCB0b3VjaCA9IG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuXG4gICAgaWYgKHRvdWNoICE9IG51bGwpIHtcbiAgICAgIC8vIEEgbnVtYmVyIHRoYXQgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgY3VycmVudCBmaW5nZXIgaW4gdGhlIHRvdWNoIHNlc3Npb24uXG4gICAgICB0b3VjaElkLmN1cnJlbnQgPSB0b3VjaC5pZGVudGlmaWVyO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbmdlciA9IHRyYWNrRmluZ2VyKG5hdGl2ZUV2ZW50LCB0b3VjaElkKTtcblxuICAgIGlmIChmaW5nZXIgIT09IGZhbHNlKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICBhY3RpdmVJbmRleFxuICAgICAgfSA9IGdldEZpbmdlck5ld1ZhbHVlKHtcbiAgICAgICAgZmluZ2VyLFxuICAgICAgICB2YWx1ZXNcbiAgICAgIH0pO1xuICAgICAgZm9jdXNUaHVtYih7XG4gICAgICAgIHNsaWRlclJlZixcbiAgICAgICAgYWN0aXZlSW5kZXgsXG4gICAgICAgIHNldEFjdGl2ZVxuICAgICAgfSk7XG4gICAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcblxuICAgICAgaWYgKGhhbmRsZUNoYW5nZSkge1xuICAgICAgICBoYW5kbGVDaGFuZ2UobmF0aXZlRXZlbnQsIG5ld1ZhbHVlLCBhY3RpdmVJbmRleCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbW92ZUNvdW50LmN1cnJlbnQgPSAwO1xuICAgIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQoc2xpZGVyUmVmLmN1cnJlbnQpO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZVRvdWNoRW5kKTtcbiAgfSk7XG4gIGNvbnN0IHN0b3BMaXN0ZW5pbmcgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChzbGlkZXJSZWYuY3VycmVudCk7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVUb3VjaEVuZCk7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlVG91Y2hFbmQpO1xuICB9LCBbaGFuZGxlVG91Y2hFbmQsIGhhbmRsZVRvdWNoTW92ZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnQ6IHNsaWRlclxuICAgIH0gPSBzbGlkZXJSZWY7XG4gICAgc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0LCB7XG4gICAgICBwYXNzaXZlOiBkb2VzU3VwcG9ydFRvdWNoQWN0aW9uTm9uZSgpXG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHNsaWRlci5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlVG91Y2hTdGFydCwge1xuICAgICAgICBwYXNzaXZlOiBkb2VzU3VwcG9ydFRvdWNoQWN0aW9uTm9uZSgpXG4gICAgICB9KTtcbiAgICAgIHN0b3BMaXN0ZW5pbmcoKTtcbiAgICB9O1xuICB9LCBbc3RvcExpc3RlbmluZywgaGFuZGxlVG91Y2hTdGFydF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgc3RvcExpc3RlbmluZygpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVkLCBzdG9wTGlzdGVuaW5nXSk7XG5cbiAgY29uc3QgY3JlYXRlSGFuZGxlTW91c2VEb3duID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uTW91cztcblxuICAgIChfb3RoZXJIYW5kbGVycyRvbk1vdXMgPSBvdGhlckhhbmRsZXJzLm9uTW91c2VEb3duKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVySGFuZGxlcnMkb25Nb3VzLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuXG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIE9ubHkgaGFuZGxlIGxlZnQgY2xpY2tzXG5cblxuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEF2b2lkIHRleHQgc2VsZWN0aW9uXG5cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgZmluZ2VyID0gdHJhY2tGaW5nZXIoZXZlbnQsIHRvdWNoSWQpO1xuXG4gICAgaWYgKGZpbmdlciAhPT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgIGFjdGl2ZUluZGV4XG4gICAgICB9ID0gZ2V0RmluZ2VyTmV3VmFsdWUoe1xuICAgICAgICBmaW5nZXIsXG4gICAgICAgIHZhbHVlc1xuICAgICAgfSk7XG4gICAgICBmb2N1c1RodW1iKHtcbiAgICAgICAgc2xpZGVyUmVmLFxuICAgICAgICBhY3RpdmVJbmRleCxcbiAgICAgICAgc2V0QWN0aXZlXG4gICAgICB9KTtcbiAgICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAoaGFuZGxlQ2hhbmdlKSB7XG4gICAgICAgIGhhbmRsZUNoYW5nZShldmVudCwgbmV3VmFsdWUsIGFjdGl2ZUluZGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtb3ZlQ291bnQuY3VycmVudCA9IDA7XG4gICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChzbGlkZXJSZWYuY3VycmVudCk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVUb3VjaEVuZCk7XG4gIH07XG5cbiAgY29uc3QgdHJhY2tPZmZzZXQgPSB2YWx1ZVRvUGVyY2VudChyYW5nZSA/IHZhbHVlc1swXSA6IG1pbiwgbWluLCBtYXgpO1xuICBjb25zdCB0cmFja0xlYXAgPSB2YWx1ZVRvUGVyY2VudCh2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdLCBtaW4sIG1heCkgLSB0cmFja09mZnNldDtcblxuICBjb25zdCBnZXRSb290UHJvcHMgPSBvdGhlckhhbmRsZXJzID0+IHtcbiAgICBjb25zdCBvd25FdmVudEhhbmRsZXJzID0ge1xuICAgICAgb25Nb3VzZURvd246IGNyZWF0ZUhhbmRsZU1vdXNlRG93bihvdGhlckhhbmRsZXJzIHx8IHt9KVxuICAgIH07XG5cbiAgICBjb25zdCBtZXJnZWRFdmVudEhhbmRsZXJzID0gX2V4dGVuZHMoe30sIG90aGVySGFuZGxlcnMsIG93bkV2ZW50SGFuZGxlcnMpO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgfSwgbWVyZ2VkRXZlbnRIYW5kbGVycyk7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlSGFuZGxlTW91c2VPdmVyID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uTW91czI7XG5cbiAgICAoX290aGVySGFuZGxlcnMkb25Nb3VzMiA9IG90aGVySGFuZGxlcnMub25Nb3VzZU92ZXIpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbk1vdXMyLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JykpO1xuICAgIHNldE9wZW4oaW5kZXgpO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZUhhbmRsZU1vdXNlTGVhdmUgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25Nb3VzMztcblxuICAgIChfb3RoZXJIYW5kbGVycyRvbk1vdXMzID0gb3RoZXJIYW5kbGVycy5vbk1vdXNlTGVhdmUpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbk1vdXMzLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICAgIHNldE9wZW4oLTEpO1xuICB9O1xuXG4gIGNvbnN0IGdldFRodW1iUHJvcHMgPSBvdGhlckhhbmRsZXJzID0+IHtcbiAgICBjb25zdCBvd25FdmVudEhhbmRsZXJzID0ge1xuICAgICAgb25Nb3VzZU92ZXI6IGNyZWF0ZUhhbmRsZU1vdXNlT3ZlcihvdGhlckhhbmRsZXJzIHx8IHt9KSxcbiAgICAgIG9uTW91c2VMZWF2ZTogY3JlYXRlSGFuZGxlTW91c2VMZWF2ZShvdGhlckhhbmRsZXJzIHx8IHt9KVxuICAgIH07XG5cbiAgICBjb25zdCBtZXJnZWRFdmVudEhhbmRsZXJzID0gX2V4dGVuZHMoe30sIG90aGVySGFuZGxlcnMsIG93bkV2ZW50SGFuZGxlcnMpO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBtZXJnZWRFdmVudEhhbmRsZXJzKTtcbiAgfTtcblxuICBjb25zdCBnZXRIaWRkZW5JbnB1dFByb3BzID0gb3RoZXJIYW5kbGVycyA9PiB7XG4gICAgY29uc3Qgb3duRXZlbnRIYW5kbGVycyA9IHtcbiAgICAgIG9uQ2hhbmdlOiBjcmVhdGVIYW5kbGVIaWRkZW5JbnB1dENoYW5nZShvdGhlckhhbmRsZXJzIHx8IHt9KSxcbiAgICAgIG9uRm9jdXM6IGNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Rm9jdXMob3RoZXJIYW5kbGVycyB8fCB7fSksXG4gICAgICBvbkJsdXI6IGNyZWF0ZUhhbmRsZUhpZGVuSW5wdXRCbHVyKG90aGVySGFuZGxlcnMgfHwge30pXG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlZEV2ZW50SGFuZGxlcnMgPSBfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywgb3duRXZlbnRIYW5kbGVycyk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgdGFiSW5kZXgsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGVkYnksXG4gICAgICAnYXJpYS1vcmllbnRhdGlvbic6IG9yaWVudGF0aW9uLFxuICAgICAgJ2FyaWEtdmFsdWVtYXgnOiBzY2FsZShtYXgpLFxuICAgICAgJ2FyaWEtdmFsdWVtaW4nOiBzY2FsZShtaW4pLFxuICAgICAgbmFtZSxcbiAgICAgIHR5cGU6ICdyYW5nZScsXG4gICAgICBtaW46IHByb3BzLm1pbixcbiAgICAgIG1heDogcHJvcHMubWF4LFxuICAgICAgc3RlcDogcHJvcHMuc3RlcCxcbiAgICAgIGRpc2FibGVkXG4gICAgfSwgbWVyZ2VkRXZlbnRIYW5kbGVycywge1xuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCB2aXN1YWxseUhpZGRlbiwge1xuICAgICAgICBkaXJlY3Rpb246IGlzUnRsID8gJ3J0bCcgOiAnbHRyJyxcbiAgICAgICAgLy8gU28gdGhhdCBWb2ljZU92ZXIncyBmb2N1cyBpbmRpY2F0b3IgbWF0Y2hlcyB0aGUgdGh1bWIncyBkaW1lbnNpb25zXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9KVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYXhpcyxcbiAgICBheGlzUHJvcHMsXG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIGdldEhpZGRlbklucHV0UHJvcHMsXG4gICAgZ2V0VGh1bWJQcm9wcyxcbiAgICBkcmFnZ2luZyxcbiAgICBtYXJrcyxcbiAgICB2YWx1ZXMsXG4gICAgYWN0aXZlLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBvcGVuLFxuICAgIHJhbmdlLFxuICAgIHRyYWNrT2Zmc2V0LFxuICAgIHRyYWNrTGVhcFxuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhcmlhLWxhYmVsXCIsIFwiYXJpYS12YWx1ZXRleHRcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjbGFzc2VzXCIsIFwiZGlzYWJsZVN3YXBcIiwgXCJkaXNhYmxlZFwiLCBcImdldEFyaWFMYWJlbFwiLCBcImdldEFyaWFWYWx1ZVRleHRcIiwgXCJtYXJrc1wiLCBcIm1heFwiLCBcIm1pblwiLCBcIm5hbWVcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2hhbmdlQ29tbWl0dGVkXCIsIFwib25Nb3VzZURvd25cIiwgXCJvcmllbnRhdGlvblwiLCBcInNjYWxlXCIsIFwic3RlcFwiLCBcInRhYkluZGV4XCIsIFwidHJhY2tcIiwgXCJ2YWx1ZVwiLCBcInZhbHVlTGFiZWxEaXNwbGF5XCIsIFwidmFsdWVMYWJlbEZvcm1hdFwiLCBcImlzUnRsXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgYXBwZW5kT3duZXJTdGF0ZSBmcm9tICcuLi91dGlscy9hcHBlbmRPd25lclN0YXRlJztcbmltcG9ydCBpc0hvc3RDb21wb25lbnQgZnJvbSAnLi4vdXRpbHMvaXNIb3N0Q29tcG9uZW50JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICcuLi9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBnZXRTbGlkZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3NsaWRlclVuc3R5bGVkQ2xhc3Nlcyc7XG5pbXBvcnQgU2xpZGVyVmFsdWVMYWJlbFVuc3R5bGVkIGZyb20gJy4vU2xpZGVyVmFsdWVMYWJlbFVuc3R5bGVkJztcbmltcG9ydCB1c2VTbGlkZXIsIHsgdmFsdWVUb1BlcmNlbnQgfSBmcm9tICcuL3VzZVNsaWRlcic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCBJZGVudGl0eSA9IHggPT4geDtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGRyYWdnaW5nLFxuICAgIG1hcmtlZCxcbiAgICBvcmllbnRhdGlvbixcbiAgICB0cmFjayxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBkcmFnZ2luZyAmJiAnZHJhZ2dpbmcnLCBtYXJrZWQgJiYgJ21hcmtlZCcsIG9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmICd2ZXJ0aWNhbCcsIHRyYWNrID09PSAnaW52ZXJ0ZWQnICYmICd0cmFja0ludmVydGVkJywgdHJhY2sgPT09IGZhbHNlICYmICd0cmFja0ZhbHNlJ10sXG4gICAgcmFpbDogWydyYWlsJ10sXG4gICAgdHJhY2s6IFsndHJhY2snXSxcbiAgICBtYXJrOiBbJ21hcmsnXSxcbiAgICBtYXJrQWN0aXZlOiBbJ21hcmtBY3RpdmUnXSxcbiAgICBtYXJrTGFiZWw6IFsnbWFya0xhYmVsJ10sXG4gICAgbWFya0xhYmVsQWN0aXZlOiBbJ21hcmtMYWJlbEFjdGl2ZSddLFxuICAgIHZhbHVlTGFiZWw6IFsndmFsdWVMYWJlbCddLFxuICAgIHRodW1iOiBbJ3RodW1iJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJ10sXG4gICAgYWN0aXZlOiBbJ2FjdGl2ZSddLFxuICAgIGRpc2FibGVkOiBbJ2Rpc2FibGVkJ10sXG4gICAgZm9jdXNWaXNpYmxlOiBbJ2ZvY3VzVmlzaWJsZSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U2xpZGVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IEZvcndhcmQgPSAoe1xuICBjaGlsZHJlblxufSkgPT4gY2hpbGRyZW47XG5cbmNvbnN0IFNsaWRlclVuc3R5bGVkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2xpZGVyVW5zdHlsZWQocHJvcHMsIHJlZikge1xuICB2YXIgX3JlZiwgX2NvbXBvbmVudHMkUmFpbCwgX2NvbXBvbmVudHMkVHJhY2ssIF9jb21wb25lbnRzJFRodW1iLCBfY29tcG9uZW50cyRWYWx1ZUxhYmUsIF9jb21wb25lbnRzJE1hcmssIF9jb21wb25lbnRzJE1hcmtMYWJlbDtcblxuICBjb25zdCB7XG4gICAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gICAgJ2FyaWEtdmFsdWV0ZXh0JzogYXJpYVZhbHVldGV4dCxcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50LFxuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wLFxuICAgIGRpc2FibGVTd2FwID0gZmFsc2UsXG4gICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICBnZXRBcmlhTGFiZWwsXG4gICAgZ2V0QXJpYVZhbHVlVGV4dCxcbiAgICBtYXJrczogbWFya3NQcm9wID0gZmFsc2UsXG4gICAgbWF4ID0gMTAwLFxuICAgIG1pbiA9IDAsXG4gICAgb25Nb3VzZURvd24sXG4gICAgb3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCcsXG4gICAgc2NhbGUgPSBJZGVudGl0eSxcbiAgICBzdGVwID0gMSxcbiAgICB0cmFjayA9ICdub3JtYWwnLFxuICAgIHZhbHVlTGFiZWxEaXNwbGF5ID0gJ29mZicsXG4gICAgdmFsdWVMYWJlbEZvcm1hdCA9IElkZW50aXR5LFxuICAgIGlzUnRsID0gZmFsc2UsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTsgLy8gYWxsIHByb3BzIHdpdGggZGVmYXVsdHNcbiAgLy8gY29uc2lkZXIgZXh0cmFjdGluZyB0byBob29rIGFuIHJldXNpbmcgdGhlIGxpbnQgcnVsZSBmb3IgdGhlIHZhcmludHNcblxuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBtYXJrOiBtYXJrc1Byb3AsXG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgZGlzYWJsZWQsXG4gICAgaXNSdGwsXG4gICAgbWF4LFxuICAgIG1pbixcbiAgICBvcmllbnRhdGlvbixcbiAgICBzY2FsZSxcbiAgICBzdGVwLFxuICAgIHRyYWNrLFxuICAgIHZhbHVlTGFiZWxEaXNwbGF5LFxuICAgIHZhbHVlTGFiZWxGb3JtYXRcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGF4aXNQcm9wcyxcbiAgICBnZXRSb290UHJvcHMsXG4gICAgZ2V0SGlkZGVuSW5wdXRQcm9wcyxcbiAgICBnZXRUaHVtYlByb3BzLFxuICAgIG9wZW4sXG4gICAgYWN0aXZlLFxuICAgIGF4aXMsXG4gICAgcmFuZ2UsXG4gICAgZm9jdXNWaXNpYmxlLFxuICAgIGRyYWdnaW5nLFxuICAgIG1hcmtzLFxuICAgIHZhbHVlcyxcbiAgICB0cmFja09mZnNldCxcbiAgICB0cmFja0xlYXBcbiAgfSA9IHVzZVNsaWRlcihfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwge1xuICAgIHJlZlxuICB9KSk7XG4gIG93bmVyU3RhdGUubWFya2VkID0gbWFya3MubGVuZ3RoID4gMCAmJiBtYXJrcy5zb21lKG1hcmsgPT4gbWFyay5sYWJlbCk7XG4gIG93bmVyU3RhdGUuZHJhZ2dpbmcgPSBkcmFnZ2luZztcbiAgY29uc3QgUm9vdCA9IChfcmVmID0gY29tcG9uZW50ICE9IG51bGwgPyBjb21wb25lbnQgOiBjb21wb25lbnRzLlJvb3QpICE9IG51bGwgPyBfcmVmIDogJ3NwYW4nO1xuICBjb25zdCByb290UHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKFJvb3QsIF9leHRlbmRzKHt9LCBvdGhlciwgY29tcG9uZW50c1Byb3BzLnJvb3QpLCBvd25lclN0YXRlKTtcbiAgY29uc3QgUmFpbCA9IChfY29tcG9uZW50cyRSYWlsID0gY29tcG9uZW50cy5SYWlsKSAhPSBudWxsID8gX2NvbXBvbmVudHMkUmFpbCA6ICdzcGFuJztcbiAgY29uc3QgcmFpbFByb3BzID0gYXBwZW5kT3duZXJTdGF0ZShSYWlsLCBjb21wb25lbnRzUHJvcHMucmFpbCwgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IFRyYWNrID0gKF9jb21wb25lbnRzJFRyYWNrID0gY29tcG9uZW50cy5UcmFjaykgIT0gbnVsbCA/IF9jb21wb25lbnRzJFRyYWNrIDogJ3NwYW4nO1xuICBjb25zdCB0cmFja1Byb3BzID0gYXBwZW5kT3duZXJTdGF0ZShUcmFjaywgY29tcG9uZW50c1Byb3BzLnRyYWNrLCBvd25lclN0YXRlKTtcblxuICBjb25zdCB0cmFja1N0eWxlID0gX2V4dGVuZHMoe30sIGF4aXNQcm9wc1theGlzXS5vZmZzZXQodHJhY2tPZmZzZXQpLCBheGlzUHJvcHNbYXhpc10ubGVhcCh0cmFja0xlYXApKTtcblxuICBjb25zdCBUaHVtYiA9IChfY29tcG9uZW50cyRUaHVtYiA9IGNvbXBvbmVudHMuVGh1bWIpICE9IG51bGwgPyBfY29tcG9uZW50cyRUaHVtYiA6ICdzcGFuJztcbiAgY29uc3QgdGh1bWJQcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoVGh1bWIsIGNvbXBvbmVudHNQcm9wcy50aHVtYiwgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IFZhbHVlTGFiZWwgPSAoX2NvbXBvbmVudHMkVmFsdWVMYWJlID0gY29tcG9uZW50cy5WYWx1ZUxhYmVsKSAhPSBudWxsID8gX2NvbXBvbmVudHMkVmFsdWVMYWJlIDogU2xpZGVyVmFsdWVMYWJlbFVuc3R5bGVkO1xuICBjb25zdCB2YWx1ZUxhYmVsUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKFZhbHVlTGFiZWwsIGNvbXBvbmVudHNQcm9wcy52YWx1ZUxhYmVsLCBvd25lclN0YXRlKTtcbiAgY29uc3QgTWFyayA9IChfY29tcG9uZW50cyRNYXJrID0gY29tcG9uZW50cy5NYXJrKSAhPSBudWxsID8gX2NvbXBvbmVudHMkTWFyayA6ICdzcGFuJztcbiAgY29uc3QgbWFya1Byb3BzID0gYXBwZW5kT3duZXJTdGF0ZShNYXJrLCBjb21wb25lbnRzUHJvcHMubWFyaywgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IE1hcmtMYWJlbCA9IChfY29tcG9uZW50cyRNYXJrTGFiZWwgPSBjb21wb25lbnRzLk1hcmtMYWJlbCkgIT0gbnVsbCA/IF9jb21wb25lbnRzJE1hcmtMYWJlbCA6ICdzcGFuJztcbiAgY29uc3QgbWFya0xhYmVsUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKE1hcmtMYWJlbCwgY29tcG9uZW50c1Byb3BzLm1hcmtMYWJlbCwgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IElucHV0ID0gY29tcG9uZW50cy5JbnB1dCB8fCAnaW5wdXQnO1xuICBjb25zdCBpbnB1dFByb3BzID0gYXBwZW5kT3duZXJTdGF0ZShJbnB1dCwgY29tcG9uZW50c1Byb3BzLmlucHV0LCBvd25lclN0YXRlKTtcbiAgY29uc3QgaGlkZGVuSW5wdXRQcm9wcyA9IGdldEhpZGRlbklucHV0UHJvcHMoKTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJvb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsIGdldFJvb3RQcm9wcyh7XG4gICAgb25Nb3VzZURvd25cbiAgfSksIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCByb290UHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpLFxuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goUmFpbCwgX2V4dGVuZHMoe30sIHJhaWxQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucmFpbCwgcmFpbFByb3BzLmNsYXNzTmFtZSlcbiAgICB9KSksIC8qI19fUFVSRV9fKi9fanN4KFRyYWNrLCBfZXh0ZW5kcyh7fSwgdHJhY2tQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMudHJhY2ssIHRyYWNrUHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgdHJhY2tTdHlsZSwgdHJhY2tQcm9wcy5zdHlsZSlcbiAgICB9KSksIG1hcmtzLm1hcCgobWFyaywgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHBlcmNlbnQgPSB2YWx1ZVRvUGVyY2VudChtYXJrLnZhbHVlLCBtaW4sIG1heCk7XG4gICAgICBjb25zdCBzdHlsZSA9IGF4aXNQcm9wc1theGlzXS5vZmZzZXQocGVyY2VudCk7XG4gICAgICBsZXQgbWFya0FjdGl2ZTtcblxuICAgICAgaWYgKHRyYWNrID09PSBmYWxzZSkge1xuICAgICAgICBtYXJrQWN0aXZlID0gdmFsdWVzLmluZGV4T2YobWFyay52YWx1ZSkgIT09IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFya0FjdGl2ZSA9IHRyYWNrID09PSAnbm9ybWFsJyAmJiAocmFuZ2UgPyBtYXJrLnZhbHVlID49IHZhbHVlc1swXSAmJiBtYXJrLnZhbHVlIDw9IHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0gOiBtYXJrLnZhbHVlIDw9IHZhbHVlc1swXSkgfHwgdHJhY2sgPT09ICdpbnZlcnRlZCcgJiYgKHJhbmdlID8gbWFyay52YWx1ZSA8PSB2YWx1ZXNbMF0gfHwgbWFyay52YWx1ZSA+PSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdIDogbWFyay52YWx1ZSA+PSB2YWx1ZXNbMF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goTWFyaywgX2V4dGVuZHMoe1xuICAgICAgICAgIFwiZGF0YS1pbmRleFwiOiBpbmRleFxuICAgICAgICB9LCBtYXJrUHJvcHMsICFpc0hvc3RDb21wb25lbnQoTWFyaykgJiYge1xuICAgICAgICAgIG1hcmtBY3RpdmVcbiAgICAgICAgfSwge1xuICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGUsIG1hcmtQcm9wcy5zdHlsZSksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMubWFyaywgbWFya1Byb3BzLmNsYXNzTmFtZSwgbWFya0FjdGl2ZSAmJiBjbGFzc2VzLm1hcmtBY3RpdmUpXG4gICAgICAgIH0pKSwgbWFyay5sYWJlbCAhPSBudWxsID8gLyojX19QVVJFX18qL19qc3goTWFya0xhYmVsLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgICAgIFwiZGF0YS1pbmRleFwiOiBpbmRleFxuICAgICAgICB9LCBtYXJrTGFiZWxQcm9wcywgIWlzSG9zdENvbXBvbmVudChNYXJrTGFiZWwpICYmIHtcbiAgICAgICAgICBtYXJrTGFiZWxBY3RpdmU6IG1hcmtBY3RpdmVcbiAgICAgICAgfSwge1xuICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGUsIG1hcmtMYWJlbFByb3BzLnN0eWxlKSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5tYXJrTGFiZWwsIG1hcmtMYWJlbFByb3BzLmNsYXNzTmFtZSwgbWFya0FjdGl2ZSAmJiBjbGFzc2VzLm1hcmtMYWJlbEFjdGl2ZSksXG4gICAgICAgICAgY2hpbGRyZW46IG1hcmsubGFiZWxcbiAgICAgICAgfSkpIDogbnVsbF1cbiAgICAgIH0sIG1hcmsudmFsdWUpO1xuICAgIH0pLCB2YWx1ZXMubWFwKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHBlcmNlbnQgPSB2YWx1ZVRvUGVyY2VudCh2YWx1ZSwgbWluLCBtYXgpO1xuICAgICAgY29uc3Qgc3R5bGUgPSBheGlzUHJvcHNbYXhpc10ub2Zmc2V0KHBlcmNlbnQpO1xuICAgICAgY29uc3QgVmFsdWVMYWJlbENvbXBvbmVudCA9IHZhbHVlTGFiZWxEaXNwbGF5ID09PSAnb2ZmJyA/IEZvcndhcmQgOiBWYWx1ZUxhYmVsO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChWYWx1ZUxhYmVsQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgIWlzSG9zdENvbXBvbmVudChWYWx1ZUxhYmVsQ29tcG9uZW50KSAmJiB7XG4gICAgICAgICAgdmFsdWVMYWJlbEZvcm1hdCxcbiAgICAgICAgICB2YWx1ZUxhYmVsRGlzcGxheSxcbiAgICAgICAgICB2YWx1ZTogdHlwZW9mIHZhbHVlTGFiZWxGb3JtYXQgPT09ICdmdW5jdGlvbicgPyB2YWx1ZUxhYmVsRm9ybWF0KHNjYWxlKHZhbHVlKSwgaW5kZXgpIDogdmFsdWVMYWJlbEZvcm1hdCxcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICBvcGVuOiBvcGVuID09PSBpbmRleCB8fCBhY3RpdmUgPT09IGluZGV4IHx8IHZhbHVlTGFiZWxEaXNwbGF5ID09PSAnb24nLFxuICAgICAgICAgIGRpc2FibGVkXG4gICAgICAgIH0sIHZhbHVlTGFiZWxQcm9wcywge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnZhbHVlTGFiZWwsIHZhbHVlTGFiZWxQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUaHVtYiwgX2V4dGVuZHMoe1xuICAgICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGluZGV4XG4gICAgICAgICAgfSwgdGh1bWJQcm9wcywgZ2V0VGh1bWJQcm9wcygpLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy50aHVtYiwgdGh1bWJQcm9wcy5jbGFzc05hbWUsIGFjdGl2ZSA9PT0gaW5kZXggJiYgY2xhc3Nlcy5hY3RpdmUsIGZvY3VzVmlzaWJsZSA9PT0gaW5kZXggJiYgY2xhc3Nlcy5mb2N1c1Zpc2libGUpXG4gICAgICAgICAgfSwgIWlzSG9zdENvbXBvbmVudChUaHVtYikgJiYge1xuICAgICAgICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHRodW1iUHJvcHMub3duZXJTdGF0ZSlcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlLCB7XG4gICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6IGRpc2FibGVTd2FwICYmIGFjdGl2ZSAhPT0gaW5kZXggPyAnbm9uZScgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0sIHRodW1iUHJvcHMuc3R5bGUpLFxuICAgICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KElucHV0LCBfZXh0ZW5kcyh7fSwgaGlkZGVuSW5wdXRQcm9wcywge1xuICAgICAgICAgICAgICBcImRhdGEtaW5kZXhcIjogaW5kZXgsXG4gICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBnZXRBcmlhTGFiZWwgPyBnZXRBcmlhTGFiZWwoaW5kZXgpIDogYXJpYUxhYmVsLFxuICAgICAgICAgICAgICBcImFyaWEtdmFsdWVub3dcIjogc2NhbGUodmFsdWUpLFxuICAgICAgICAgICAgICBcImFyaWEtdmFsdWV0ZXh0XCI6IGdldEFyaWFWYWx1ZVRleHQgPyBnZXRBcmlhVmFsdWVUZXh0KHNjYWxlKHZhbHVlKSwgaW5kZXgpIDogYXJpYVZhbHVldGV4dCxcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlc1tpbmRleF1cbiAgICAgICAgICAgIH0sICFpc0hvc3RDb21wb25lbnQoSW5wdXQpICYmIHtcbiAgICAgICAgICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIGlucHV0UHJvcHMub3duZXJTdGF0ZSlcbiAgICAgICAgICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBoaWRkZW5JbnB1dFByb3BzLnN0eWxlLCBpbnB1dFByb3BzLnN0eWxlKVxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfSkpXG4gICAgICAgIH0pKVxuICAgICAgfSwgaW5kZXgpO1xuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlclVuc3R5bGVkLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgb2YgdGhlIHNsaWRlci5cbiAgICovXG4gICdhcmlhLWxhYmVsJzogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLnN0cmluZywgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHJhbmdlID0gQXJyYXkuaXNBcnJheShwcm9wcy52YWx1ZSB8fCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuXG4gICAgaWYgKHJhbmdlICYmIHByb3BzWydhcmlhLWxhYmVsJ10gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTVVJOiBZb3UgbmVlZCB0byB1c2UgdGhlIGBnZXRBcmlhTGFiZWxgIHByb3AgaW5zdGVhZCBvZiBgYXJpYS1sYWJlbGAgd2hlbiB1c2luZyBhIHJhbmdlIHNsaWRlci4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgZWxlbWVudCBjb250YWluaW5nIGEgbGFiZWwgZm9yIHRoZSBzbGlkZXIuXG4gICAqL1xuICAnYXJpYS1sYWJlbGxlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICovXG4gICdhcmlhLXZhbHVldGV4dCc6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5zdHJpbmcsIHByb3BzID0+IHtcbiAgICBjb25zdCByYW5nZSA9IEFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUgfHwgcHJvcHMuZGVmYXVsdFZhbHVlKTtcblxuICAgIGlmIChyYW5nZSAmJiBwcm9wc1snYXJpYS12YWx1ZXRleHQnXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgYGdldEFyaWFWYWx1ZVRleHRgIHByb3AgaW5zdGVhZCBvZiBgYXJpYS12YWx1ZXRleHRgIHdoZW4gdXNpbmcgYSByYW5nZSBzbGlkZXIuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFNsaWRlci5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBNYXJrOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgTWFya0xhYmVsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUmFpbDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBUaHVtYjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFRyYWNrOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgVmFsdWVMYWJlbDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgU2xpZGVyLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1hcms6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWFya0xhYmVsOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJhaWw6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0aHVtYjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0cmFjazogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB2YWx1ZUxhYmVsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gICAgICB9KSxcbiAgICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gICAgICB2YWx1ZUxhYmVsRGlzcGxheTogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdvZmYnLCAnb24nXSlcbiAgICB9KVxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYWN0aXZlIHRodW1iIGRvZXNuJ3Qgc3dhcCB3aGVuIG1vdmluZyBwb2ludGVyIG92ZXIgYSB0aHVtYiB3aGlsZSBkcmFnZ2luZyBhbm90aGVyIHRodW1iLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVN3YXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBY2NlcHRzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgdGh1bWIgbGFiZWxzIG9mIHRoZSBzbGlkZXIuXG4gICAqIFRoaXMgaXMgaW1wb3J0YW50IGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIHRodW1iIGxhYmVsJ3MgaW5kZXggdG8gZm9ybWF0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0QXJpYUxhYmVsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdGh1bWIgbGFiZWwncyB2YWx1ZSB0byBmb3JtYXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgdGh1bWIgbGFiZWwncyBpbmRleCB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRBcmlhVmFsdWVUZXh0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHRoZW1lIGNvbnRleHQgaGFzIHJ0bCBkaXJlY3Rpb24uIEl0IGlzIHNldCBhdXRvbWF0aWNhbGx5LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNSdGw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNYXJrcyBpbmRpY2F0ZSBwcmVkZXRlcm1pbmVkIHZhbHVlcyB0byB3aGljaCB0aGUgdXNlciBjYW4gbW92ZSB0aGUgc2xpZGVyLlxuICAgKiBJZiBgdHJ1ZWAgdGhlIG1hcmtzIGFyZSBzcGFjZWQgYWNjb3JkaW5nIHRoZSB2YWx1ZSBvZiB0aGUgYHN0ZXBgIHByb3AuXG4gICAqIElmIGFuIGFycmF5LCBpdCBzaG91bGQgY29udGFpbiBvYmplY3RzIHdpdGggYHZhbHVlYCBhbmQgYW4gb3B0aW9uYWwgYGxhYmVsYCBrZXlzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbWFya3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfSkpLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIFNob3VsZCBub3QgYmUgZXF1YWwgdG8gbWluLlxuICAgKiBAZGVmYXVsdCAxMDBcbiAgICovXG4gIG1heDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIG1pbmltdW0gYWxsb3dlZCB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBTaG91bGQgbm90IGJlIGVxdWFsIHRvIG1heC5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgbWluOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgc2xpZGVyJ3MgdmFsdWUgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqICoqV2FybmluZyoqOiBUaGlzIGlzIGEgZ2VuZXJpYyBldmVudCBub3QgYSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVtYmVyW119IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhY3RpdmVUaHVtYiBJbmRleCBvZiB0aGUgY3VycmVudGx5IG1vdmVkIHRodW1iLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGBtb3VzZXVwYCBpcyB0cmlnZ2VyZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnQgfCBFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suICoqV2FybmluZyoqOiBUaGlzIGlzIGEgZ2VuZXJpYyBldmVudCBub3QgYSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVtYmVyW119IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAqL1xuICBvbkNoYW5nZUNvbW1pdHRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBvcmllbnRhdGlvbi5cbiAgICogQGRlZmF1bHQgJ2hvcml6b250YWwnXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcblxuICAvKipcbiAgICogQSB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbiwgdG8gY2hhbmdlIHRoZSBzY2FsZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBAZGVmYXVsdCAoeCkgPT4geFxuICAgKi9cbiAgc2NhbGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgZ3JhbnVsYXJpdHkgd2l0aCB3aGljaCB0aGUgc2xpZGVyIGNhbiBzdGVwIHRocm91Z2ggdmFsdWVzLiAoQSBcImRpc2NyZXRlXCIgc2xpZGVyLilcbiAgICogVGhlIGBtaW5gIHByb3Agc2VydmVzIGFzIHRoZSBvcmlnaW4gZm9yIHRoZSB2YWxpZCB2YWx1ZXMuXG4gICAqIFdlIHJlY29tbWVuZCAobWF4IC0gbWluKSB0byBiZSBldmVubHkgZGl2aXNpYmxlIGJ5IHRoZSBzdGVwLlxuICAgKlxuICAgKiBXaGVuIHN0ZXAgaXMgYG51bGxgLCB0aGUgdGh1bWIgY2FuIG9ubHkgYmUgc2xpZCBvbnRvIG1hcmtzIHByb3ZpZGVkIHdpdGggdGhlIGBtYXJrc2AgcHJvcC5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgc3RlcDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGFiIGluZGV4IGF0dHJpYnV0ZSBvZiB0aGUgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgdHJhY2sgcHJlc2VudGF0aW9uOlxuICAgKlxuICAgKiAtIGBub3JtYWxgIHRoZSB0cmFjayB3aWxsIHJlbmRlciBhIGJhciByZXByZXNlbnRpbmcgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICogLSBgaW52ZXJ0ZWRgIHRoZSB0cmFjayB3aWxsIHJlbmRlciBhIGJhciByZXByZXNlbnRpbmcgdGhlIHJlbWFpbmluZyBzbGlkZXIgdmFsdWUuXG4gICAqIC0gYGZhbHNlYCB0aGUgdHJhY2sgd2lsbCByZW5kZXIgd2l0aG91dCBhIGJhci5cbiAgICogQGRlZmF1bHQgJ25vcm1hbCdcbiAgICovXG4gIHRyYWNrOiBQcm9wVHlwZXMub25lT2YoWydpbnZlcnRlZCcsICdub3JtYWwnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogRm9yIHJhbmdlZCBzbGlkZXJzLCBwcm92aWRlIGFuIGFycmF5IHdpdGggdHdvIHZhbHVlcy5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyKSwgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGVuIHRoZSB2YWx1ZSBsYWJlbCBpcyBkaXNwbGF5ZWQ6XG4gICAqXG4gICAqIC0gYGF1dG9gIHRoZSB2YWx1ZSBsYWJlbCB3aWxsIGRpc3BsYXkgd2hlbiB0aGUgdGh1bWIgaXMgaG92ZXJlZCBvciBmb2N1c2VkLlxuICAgKiAtIGBvbmAgd2lsbCBkaXNwbGF5IHBlcnNpc3RlbnRseS5cbiAgICogLSBgb2ZmYCB3aWxsIG5ldmVyIGRpc3BsYXkuXG4gICAqIEBkZWZhdWx0ICdvZmYnXG4gICAqL1xuICB2YWx1ZUxhYmVsRGlzcGxheTogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdvZmYnLCAnb24nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBmb3JtYXQgZnVuY3Rpb24gdGhlIHZhbHVlIGxhYmVsJ3MgdmFsdWUuXG4gICAqXG4gICAqIFdoZW4gYSBmdW5jdGlvbiBpcyBwcm92aWRlZCwgaXQgc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBzaWduYXR1cmU6XG4gICAqXG4gICAqIC0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIGxhYmVsJ3MgdmFsdWUgdG8gZm9ybWF0XG4gICAqIC0ge251bWJlcn0gaW5kZXggVGhlIHZhbHVlIGxhYmVsJ3MgaW5kZXggdG8gZm9ybWF0XG4gICAqIEBkZWZhdWx0ICh4KSA9PiB4XG4gICAqL1xuICB2YWx1ZUxhYmVsRm9ybWF0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2xpZGVyVW5zdHlsZWQ7IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCJpbXBvcnQgeyB1c2VUaGVtZVByb3BzIGFzIHN5c3RlbVVzZVRoZW1lUHJvcHMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZVxufSkge1xuICByZXR1cm4gc3lzdGVtVXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHMsXG4gICAgbmFtZSxcbiAgICBkZWZhdWx0VGhlbWVcbiAgfSk7XG59IiwiaW1wb3J0IGdldFRoZW1lUHJvcHMgZnJvbSAnLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZVByb3BzKHtcbiAgcHJvcHMsXG4gIG5hbWUsXG4gIGRlZmF1bHRUaGVtZVxufSkge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9KTtcbiAgcmV0dXJuIG1lcmdlZFByb3BzO1xufSIsImltcG9ydCB7IGludGVybmFsX3Jlc29sdmVQcm9wcyBhcyByZXNvbHZlUHJvcHMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0gPSBwYXJhbXM7XG5cbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUuY29tcG9uZW50cyB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXSB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cblxuICByZXR1cm4gcmVzb2x2ZVByb3BzKHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzLCBwcm9wcyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5cbi8qKlxuICogQWRkIGtleXMsIHZhbHVlcyBvZiBgZGVmYXVsdFByb3BzYCB0aGF0IGRvZXMgbm90IGV4aXN0IGluIGBwcm9wc2BcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZWZhdWx0UHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybnMge29iamVjdH0gcmVzb2x2ZWQgcHJvcHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVByb3BzKGRlZmF1bHRQcm9wcywgcHJvcHMpIHtcbiAgY29uc3Qgb3V0cHV0ID0gX2V4dGVuZHMoe30sIHByb3BzKTtcblxuICBPYmplY3Qua2V5cyhkZWZhdWx0UHJvcHMpLmZvckVhY2gocHJvcE5hbWUgPT4ge1xuICAgIGlmIChvdXRwdXRbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YXJpYW50XCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5cbmZ1bmN0aW9uIGlzRW1wdHkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09PSAwO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgc3RyaW5nIGNsYXNzS2V5IGJhc2VkIG9uIHRoZSBwcm9wZXJ0aWVzIHByb3ZpZGVkLiBJdCBzdGFydHMgd2l0aCB0aGVcbiAqIHZhcmlhbnQgaWYgZGVmaW5lZCwgYW5kIHRoZW4gaXQgYXBwZW5kcyBhbGwgb3RoZXIgcHJvcGVydGllcyBpbiBhbHBoYWJldGljYWwgb3JkZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSB0aGUgcHJvcGVydGllcyBmb3Igd2hpY2ggdGhlIGNsYXNzS2V5IHNob3VsZCBiZSBjcmVhdGVkLlxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcHNUb0NsYXNzS2V5KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICB2YXJpYW50XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBsZXQgY2xhc3NLZXkgPSB2YXJpYW50IHx8ICcnO1xuICBPYmplY3Qua2V5cyhvdGhlcikuc29ydCgpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY29sb3InKSB7XG4gICAgICBjbGFzc0tleSArPSBpc0VtcHR5KGNsYXNzS2V5KSA/IHByb3BzW2tleV0gOiBjYXBpdGFsaXplKHByb3BzW2tleV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGFzc0tleSArPSBgJHtpc0VtcHR5KGNsYXNzS2V5KSA/IGtleSA6IGNhcGl0YWxpemUoa2V5KX0ke2NhcGl0YWxpemUocHJvcHNba2V5XS50b1N0cmluZygpKX1gO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGFzc0tleTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibmFtZVwiLCBcInNsb3RcIiwgXCJza2lwVmFyaWFudHNSZXNvbHZlclwiLCBcInNraXBTeFwiLCBcIm92ZXJyaWRlc1Jlc29sdmVyXCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcInRoZW1lXCJdLFxuICAgICAgX2V4Y2x1ZGVkMyA9IFtcInRoZW1lXCJdO1xuaW1wb3J0IHN0eWxlZEVuZ2luZVN0eWxlZCBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3ggZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHByb3BzVG9DbGFzc0tleSBmcm9tICcuL3Byb3BzVG9DbGFzc0tleSc7XG5cbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuY29uc3QgZ2V0U3R5bGVPdmVycmlkZXMgPSAobmFtZSwgdGhlbWUpID0+IHtcbiAgaWYgKHRoZW1lLmNvbXBvbmVudHMgJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXSAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uc3R5bGVPdmVycmlkZXM7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IGdldFZhcmlhbnRTdHlsZXMgPSAobmFtZSwgdGhlbWUpID0+IHtcbiAgbGV0IHZhcmlhbnRzID0gW107XG5cbiAgaWYgKHRoZW1lICYmIHRoZW1lLmNvbXBvbmVudHMgJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXSAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnZhcmlhbnRzKSB7XG4gICAgdmFyaWFudHMgPSB0aGVtZS5jb21wb25lbnRzW25hbWVdLnZhcmlhbnRzO1xuICB9XG5cbiAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSB7fTtcbiAgdmFyaWFudHMuZm9yRWFjaChkZWZpbml0aW9uID0+IHtcbiAgICBjb25zdCBrZXkgPSBwcm9wc1RvQ2xhc3NLZXkoZGVmaW5pdGlvbi5wcm9wcyk7XG4gICAgdmFyaWFudHNTdHlsZXNba2V5XSA9IGRlZmluaXRpb24uc3R5bGU7XG4gIH0pO1xuICByZXR1cm4gdmFyaWFudHNTdHlsZXM7XG59O1xuXG5jb25zdCB2YXJpYW50c1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMsIHRoZW1lLCBuYW1lKSA9PiB7XG4gIHZhciBfdGhlbWUkY29tcG9uZW50cywgX3RoZW1lJGNvbXBvbmVudHMkbmFtO1xuXG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlID0ge31cbiAgfSA9IHByb3BzO1xuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IFtdO1xuICBjb25zdCB0aGVtZVZhcmlhbnRzID0gdGhlbWUgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkY29tcG9uZW50cyA9IHRoZW1lLmNvbXBvbmVudHMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJGNvbXBvbmVudHMkbmFtID0gX3RoZW1lJGNvbXBvbmVudHNbbmFtZV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkY29tcG9uZW50cyRuYW0udmFyaWFudHM7XG5cbiAgaWYgKHRoZW1lVmFyaWFudHMpIHtcbiAgICB0aGVtZVZhcmlhbnRzLmZvckVhY2godGhlbWVWYXJpYW50ID0+IHtcbiAgICAgIGxldCBpc01hdGNoID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5rZXlzKHRoZW1lVmFyaWFudC5wcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAob3duZXJTdGF0ZVtrZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSAmJiBwcm9wc1trZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSkge1xuICAgICAgICAgIGlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIHZhcmlhbnRzU3R5bGVzLnB1c2goc3R5bGVzW3Byb3BzVG9DbGFzc0tleSh0aGVtZVZhcmlhbnQucHJvcHMpXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFyaWFudHNTdHlsZXM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkRm9yd2FyZFByb3AocHJvcCkge1xuICByZXR1cm4gcHJvcCAhPT0gJ293bmVyU3RhdGUnICYmIHByb3AgIT09ICd0aGVtZScgJiYgcHJvcCAhPT0gJ3N4JyAmJiBwcm9wICE9PSAnYXMnO1xufVxuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5cbmNvbnN0IGxvd2VyY2FzZUZpcnN0TGV0dGVyID0gc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZChpbnB1dCA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUsXG4gICAgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AsXG4gICAgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3BcbiAgfSA9IGlucHV0O1xuICByZXR1cm4gKHRhZywgaW5wdXRPcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgICAgc2xvdDogY29tcG9uZW50U2xvdCxcbiAgICAgIHNraXBWYXJpYW50c1Jlc29sdmVyOiBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyLFxuICAgICAgc2tpcFN4OiBpbnB1dFNraXBTeCxcbiAgICAgIG92ZXJyaWRlc1Jlc29sdmVyXG4gICAgfSA9IGlucHV0T3B0aW9ucyxcbiAgICAgICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoaW5wdXRPcHRpb25zLCBfZXhjbHVkZWQpOyAvLyBpZiBza2lwVmFyaWFudHNSZXNvbHZlciBvcHRpb24gaXMgZGVmaW5lZCwgdGFrZSB0aGUgdmFsdWUsIG90aGVyd2lzZSwgdHJ1ZSBmb3Igcm9vdCBhbmQgZmFsc2UgZm9yIG90aGVyIHNsb3RzLlxuXG5cbiAgICBjb25zdCBza2lwVmFyaWFudHNSZXNvbHZlciA9IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgIT09IHVuZGVmaW5lZCA/IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgOiBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyB8fCBmYWxzZTtcbiAgICBjb25zdCBza2lwU3ggPSBpbnB1dFNraXBTeCB8fCBmYWxzZTtcbiAgICBsZXQgbGFiZWw7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgbGFiZWwgPSBgJHtjb21wb25lbnROYW1lfS0ke2xvd2VyY2FzZUZpcnN0TGV0dGVyKGNvbXBvbmVudFNsb3QgfHwgJ1Jvb3QnKX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHNob3VsZEZvcndhcmRQcm9wO1xuXG4gICAgaWYgKGNvbXBvbmVudFNsb3QgPT09ICdSb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIF9leHRlbmRzKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuXG4gICAgY29uc3QgbXVpU3R5bGVkUmVzb2x2ZXIgPSAoc3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zKSA9PiB7XG4gICAgICBjb25zdCBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUgPSBleHByZXNzaW9ucyA/IGV4cHJlc3Npb25zLm1hcChzdHlsZXNBcmcgPT4ge1xuICAgICAgICAvLyBPbiB0aGUgc2VydmVyIGVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAgIC8vIHdoaWNoIGFyZSBiYXNpY2FsbHkgY29tcG9uZW50cyB1c2VkIGFzIGEgc2VsZWN0b3JzLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzdHlsZXNBcmcgPT09ICdmdW5jdGlvbicgJiYgc3R5bGVzQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZXNBcmcgPyBfcmVmID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9ID0gX3JlZixcbiAgICAgICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQyKTtcblxuICAgICAgICAgIHJldHVybiBzdHlsZXNBcmcoX2V4dGVuZHMoe1xuICAgICAgICAgICAgdGhlbWU6IGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSwgb3RoZXIpKTtcbiAgICAgICAgfSA6IHN0eWxlc0FyZztcbiAgICAgIH0pIDogW107XG4gICAgICBsZXQgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IHN0eWxlQXJnO1xuXG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiBvdmVycmlkZXNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gZ2V0U3R5bGVPdmVycmlkZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpO1xuXG4gICAgICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzID0ge307XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhzdHlsZU92ZXJyaWRlcykuZm9yRWFjaCgoW3Nsb3RLZXksIHNsb3RTdHlsZV0pID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlc1tzbG90S2V5XSA9IHR5cGVvZiBzbG90U3R5bGUgPT09ICdmdW5jdGlvbicgPyBzbG90U3R5bGUocHJvcHMpIDogc2xvdFN0eWxlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHJlc29sdmVkU3R5bGVPdmVycmlkZXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgIXNraXBWYXJpYW50c1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgICAgICAgcmV0dXJuIHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIGdldFZhcmlhbnRTdHlsZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpLCB0aGVtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNraXBTeCkge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgICB0aGVtZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG51bU9mQ3VzdG9tRm5zQXBwbGllZCA9IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5sZW5ndGggLSBleHByZXNzaW9ucy5sZW5ndGg7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlQXJnKSAmJiBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPiAwKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IG5ldyBBcnJheShudW1PZkN1c3RvbUZuc0FwcGxpZWQpLmZpbGwoJycpOyAvLyBJZiB0aGUgdHlwZSBpcyBhcnJheSwgdGhhbiB3ZSBuZWVkIHRvIGFkZCBwbGFjZWhvbGRlcnMgaW4gdGhlIHRlbXBsYXRlIGZvciB0aGUgb3ZlcnJpZGVzLCB2YXJpYW50cyBhbmQgdGhlIHN4IHN0eWxlcy5cblxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gWy4uLnN0eWxlQXJnLCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnLnJhdyA9IFsuLi5zdHlsZUFyZy5yYXcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHlsZUFyZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBmdW5jdGlvbiwgd2UgbmVlZCB0byBkZWZpbmUgdGhlIGRlZmF1bHQgdGhlbWUuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSA9IF9yZWYyLFxuICAgICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBfZXhjbHVkZWQzKTtcblxuICAgICAgICAgIHJldHVybiBzdHlsZUFyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBDb21wb25lbnQgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIodHJhbnNmb3JtZWRTdHlsZUFyZywgLi4uZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuXG4gICAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgJHtjb21wb25lbnROYW1lfSR7Y29tcG9uZW50U2xvdCB8fCAnJ31gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZSA9IGBTdHlsZWQoJHtnZXREaXNwbGF5TmFtZSh0YWcpfSlgO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcblxuICAgIGlmIChkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZykge1xuICAgICAgbXVpU3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZyA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnO1xuICAgIH1cblxuICAgIHJldHVybiBtdWlTdHlsZWRSZXNvbHZlcjtcbiAgfTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVTdHlsZWQsIHNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgY29uc3Qgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gcHJvcCA9PiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3Nlcyc7XG5leHBvcnQgY29uc3Qgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG5jb25zdCBzdHlsZWQgPSBjcmVhdGVTdHlsZWQoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSk7XG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVGhlbWUgYXMgdXNlVGhlbWVTeXN0ZW0gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lU3lzdGVtKGRlZmF1bHRUaGVtZSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGVtZTtcbn0iLCJpbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICdAbXVpL2Jhc2UnO1xuXG5jb25zdCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMgPSBTbG90ID0+IHtcbiAgcmV0dXJuICFTbG90IHx8ICFpc0hvc3RDb21wb25lbnQoU2xvdCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHM7IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBjYXBpdGFsaXplOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiY29sb3JcIiwgXCJzaXplXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IFNsaWRlclVuc3R5bGVkLCB7IFNsaWRlclZhbHVlTGFiZWxVbnN0eWxlZCwgc2xpZGVyVW5zdHlsZWRDbGFzc2VzLCBnZXRTbGlkZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UvU2xpZGVyVW5zdHlsZWQnO1xuaW1wb3J0IHsgYWxwaGEsIGxpZ2h0ZW4sIGRhcmtlbiB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQsIHsgc2xvdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMgZnJvbSAnLi4vdXRpbHMvc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBzbGlkZXJDbGFzc2VzID0gX2V4dGVuZHMoe30sIHNsaWRlclVuc3R5bGVkQ2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU2xpZGVyJywgWydjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAndGh1bWJDb2xvclByaW1hcnknLCAndGh1bWJDb2xvclNlY29uZGFyeScsICdzaXplU21hbGwnLCAndGh1bWJTaXplU21hbGwnXSkpO1xuY29uc3QgU2xpZGVyUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVNsaWRlcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCBtYXJrcyA9IG93bmVyU3RhdGUubWFya3NQcm9wID09PSB0cnVlICYmIG93bmVyU3RhdGUuc3RlcCAhPT0gbnVsbCA/IFsuLi5BcnJheShNYXRoLmZsb29yKChvd25lclN0YXRlLm1heCAtIG93bmVyU3RhdGUubWluKSAvIG93bmVyU3RhdGUuc3RlcCkgKyAxKV0ubWFwKChfLCBpbmRleCkgPT4gKHtcbiAgICAgIHZhbHVlOiBvd25lclN0YXRlLm1pbiArIG93bmVyU3RhdGUuc3RlcCAqIGluZGV4XG4gICAgfSkpIDogb3duZXJTdGF0ZS5tYXJrc1Byb3AgfHwgW107XG4gICAgY29uc3QgbWFya2VkID0gbWFya3MubGVuZ3RoID4gMCAmJiBtYXJrcy5zb21lKG1hcmsgPT4gbWFyay5sYWJlbCk7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5zaXplICE9PSAnbWVkaXVtJyAmJiBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXSwgbWFya2VkICYmIHN0eWxlcy5tYXJrZWQsIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgc3R5bGVzLnZlcnRpY2FsLCBvd25lclN0YXRlLnRyYWNrID09PSAnaW52ZXJ0ZWQnICYmIHN0eWxlcy50cmFja0ludmVydGVkLCBvd25lclN0YXRlLnRyYWNrID09PSBmYWxzZSAmJiBzdHlsZXMudHJhY2tGYWxzZV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGJvcmRlclJhZGl1czogMTIsXG4gIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgdG91Y2hBY3Rpb246ICdub25lJyxcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCdcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiBfZXh0ZW5kcyh7XG4gIGhlaWdodDogNCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgcGFkZGluZzogJzEzcHggMCcsXG4gIC8vIFRoZSBwcmltYXJ5IGlucHV0IG1lY2hhbmlzbSBvZiB0aGUgZGV2aWNlIGluY2x1ZGVzIGEgcG9pbnRpbmcgZGV2aWNlIG9mIGxpbWl0ZWQgYWNjdXJhY3kuXG4gICdAbWVkaWEgKHBvaW50ZXI6IGNvYXJzZSknOiB7XG4gICAgLy8gUmVhY2ggNDJweCB0b3VjaCB0YXJnZXQsIGFib3V0IH44bW0gb24gc2NyZWVuLlxuICAgIHBhZGRpbmc6ICcyMHB4IDAnXG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIGhlaWdodDogMlxufSwgb3duZXJTdGF0ZS5tYXJrZWQgJiYge1xuICBtYXJnaW5Cb3R0b206IDIwXG59KSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiBfZXh0ZW5kcyh7XG4gIGhlaWdodDogJzEwMCUnLFxuICB3aWR0aDogNCxcbiAgcGFkZGluZzogJzAgMTNweCcsXG4gIC8vIFRoZSBwcmltYXJ5IGlucHV0IG1lY2hhbmlzbSBvZiB0aGUgZGV2aWNlIGluY2x1ZGVzIGEgcG9pbnRpbmcgZGV2aWNlIG9mIGxpbWl0ZWQgYWNjdXJhY3kuXG4gICdAbWVkaWEgKHBvaW50ZXI6IGNvYXJzZSknOiB7XG4gICAgLy8gUmVhY2ggNDJweCB0b3VjaCB0YXJnZXQsIGFib3V0IH44bW0gb24gc2NyZWVuLlxuICAgIHBhZGRpbmc6ICcwIDIwcHgnXG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHdpZHRoOiAyXG59LCBvd25lclN0YXRlLm1hcmtlZCAmJiB7XG4gIG1hcmdpblJpZ2h0OiA0NFxufSksIHtcbiAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICB9LFxuICBbYCYuJHtzbGlkZXJDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXVxuICB9LFxuICBbYCYuJHtzbGlkZXJDbGFzc2VzLmRyYWdnaW5nfWBdOiB7XG4gICAgW2AmIC4ke3NsaWRlckNsYXNzZXMudGh1bWJ9LCAmIC4ke3NsaWRlckNsYXNzZXMudHJhY2t9YF06IHtcbiAgICAgIHRyYW5zaXRpb246ICdub25lJ1xuICAgIH1cbiAgfVxufSkpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyUm9vdC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgU2xpZGVyUm9vdCB9O1xuY29uc3QgU2xpZGVyUmFpbCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVNsaWRlcicsXG4gIHNsb3Q6ICdSYWlsJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucmFpbFxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gIG9wYWNpdHk6IDAuMzhcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJ2luaGVyaXQnLFxuICB0b3A6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGhlaWdodDogJzEwMCUnLFxuICB3aWR0aDogJ2luaGVyaXQnLFxuICBsZWZ0OiAnNTAlJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKSdcbn0sIG93bmVyU3RhdGUudHJhY2sgPT09ICdpbnZlcnRlZCcgJiYge1xuICBvcGFjaXR5OiAxXG59KSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXJSYWlsLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBTbGlkZXJSYWlsIH07XG5jb25zdCBTbGlkZXJUcmFjayA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVNsaWRlcicsXG4gIHNsb3Q6ICdUcmFjaycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnRyYWNrXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBjb2xvciA9IC8vIFNhbWUgbG9naWMgYXMgdGhlIExpbmVhclByb2dyZXNzIHRyYWNrIGNvbG9yXG4gIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IGxpZ2h0ZW4odGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjYyKSA6IGRhcmtlbih0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIDAuNSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICBib3JkZXI6ICcxcHggc29saWQgY3VycmVudENvbG9yJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2xlZnQnLCAnd2lkdGgnLCAnYm90dG9tJywgJ2hlaWdodCddLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICB9KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIGJvcmRlcjogJ25vbmUnXG4gIH0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gICAgaGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgdG9wOiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICB9LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgICB3aWR0aDogJ2luaGVyaXQnLFxuICAgIGxlZnQ6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknXG4gIH0sIG93bmVyU3RhdGUudHJhY2sgPT09IGZhbHNlICYmIHtcbiAgICBkaXNwbGF5OiAnbm9uZSdcbiAgfSwgb3duZXJTdGF0ZS50cmFjayA9PT0gJ2ludmVydGVkJyAmJiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcixcbiAgICBib3JkZXJDb2xvcjogY29sb3JcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlclRyYWNrLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBTbGlkZXJUcmFjayB9O1xuY29uc3QgU2xpZGVyVGh1bWIgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnVGh1bWInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnRodW1iLCBzdHlsZXNbYHRodW1iQ29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIG93bmVyU3RhdGUuc2l6ZSAhPT0gJ21lZGl1bScgJiYgc3R5bGVzW2B0aHVtYlNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogMjAsXG4gIGhlaWdodDogMjAsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICBvdXRsaW5lOiAwLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JveC1zaGFkb3cnLCAnbGVmdCcsICdib3R0b20nXSwge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9KVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgd2lkdGg6IDEyLFxuICBoZWlnaHQ6IDEyXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB0b3A6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgbGVmdDogJzUwJScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCA1MCUpJ1xufSwge1xuICAnJjpiZWZvcmUnOiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzJdXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgYm94U2hhZG93OiAnbm9uZSdcbiAgfSksXG4gICcmOjphZnRlcic6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBjb250ZW50OiAnXCJcIicsXG4gICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAvLyA0MnB4IGlzIHRoZSBoaXQgdGFyZ2V0XG4gICAgd2lkdGg6IDQyLFxuICAgIGhlaWdodDogNDIsXG4gICAgdG9wOiAnNTAlJyxcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknXG4gIH0sXG4gIFtgJjpob3ZlciwgJi4ke3NsaWRlckNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgYm94U2hhZG93OiBgMHB4IDBweCAwcHggOHB4ICR7YWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjE2KX1gLFxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgfVxuICB9LFxuICBbYCYuJHtzbGlkZXJDbGFzc2VzLmFjdGl2ZX1gXToge1xuICAgIGJveFNoYWRvdzogYDBweCAwcHggMHB4IDE0cHggJHthbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIDAuMTYpfWBcbiAgfSxcbiAgW2AmLiR7c2xpZGVyQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICcmOmhvdmVyJzoge1xuICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICB9XG4gIH1cbn0pKTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlclRodW1iLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBTbGlkZXJUaHVtYiB9O1xuY29uc3QgU2xpZGVyVmFsdWVMYWJlbCA9IHN0eWxlZChTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQsIHtcbiAgbmFtZTogJ011aVNsaWRlcicsXG4gIHNsb3Q6ICdWYWx1ZUxhYmVsJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMudmFsdWVMYWJlbFxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgW2AmLiR7c2xpZGVyQ2xhc3Nlcy52YWx1ZUxhYmVsT3Blbn1gXToge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTEwMCUpIHNjYWxlKDEpJ1xuICB9LFxuICB6SW5kZXg6IDEsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnXG59LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gIGZvbnRXZWlnaHQ6IDUwMCxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsndHJhbnNmb3JtJ10sIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfSksXG4gIHRvcDogLTEwLFxuICB0cmFuc2Zvcm1PcmlnaW46ICdib3R0b20gY2VudGVyJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMTAwJSkgc2NhbGUoMCknLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbNjAwXSxcbiAgYm9yZGVyUmFkaXVzOiAyLFxuICBjb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgcGFkZGluZzogJzAuMjVyZW0gMC43NXJlbSdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICBwYWRkaW5nOiAnMC4yNXJlbSAwLjVyZW0nXG59LCB7XG4gICcmOmJlZm9yZSc6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBjb250ZW50OiAnXCJcIicsXG4gICAgd2lkdGg6IDgsXG4gICAgaGVpZ2h0OiA4LFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgNTAlKSByb3RhdGUoNDVkZWcpJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdpbmhlcml0J1xuICB9XG59KSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXJWYWx1ZUxhYmVsLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBTbGlkZXJWYWx1ZUxhYmVsIH07XG5jb25zdCBTbGlkZXJNYXJrID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpU2xpZGVyJyxcbiAgc2xvdDogJ01hcmsnLFxuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBzbG90U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ21hcmtBY3RpdmUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5tYXJrXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZSxcbiAgbWFya0FjdGl2ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6IDIsXG4gIGhlaWdodDogMixcbiAgYm9yZGVyUmFkaXVzOiAxLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB0b3A6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTFweCwgLTUwJSknXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgbGVmdDogJzUwJScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAxcHgpJ1xufSwgbWFya0FjdGl2ZSAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxuICBvcGFjaXR5OiAwLjhcbn0pKTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlck1hcmsucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcbmV4cG9ydCB7IFNsaWRlck1hcmsgfTtcbmNvbnN0IFNsaWRlck1hcmtMYWJlbCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVNsaWRlcicsXG4gIHNsb3Q6ICdNYXJrTGFiZWwnLFxuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBzbG90U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ21hcmtMYWJlbEFjdGl2ZScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLm1hcmtMYWJlbFxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGUsXG4gIG1hcmtMYWJlbEFjdGl2ZVxufSkgPT4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsIHtcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgdG9wOiAzMCxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKScsXG4gICdAbWVkaWEgKHBvaW50ZXI6IGNvYXJzZSknOiB7XG4gICAgdG9wOiA0MFxuICB9XG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHtcbiAgbGVmdDogMzYsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoNTAlKScsXG4gICdAbWVkaWEgKHBvaW50ZXI6IGNvYXJzZSknOiB7XG4gICAgbGVmdDogNDRcbiAgfVxufSwgbWFya0xhYmVsQWN0aXZlICYmIHtcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5XG59KSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXJNYXJrTGFiZWwucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcbmV4cG9ydCB7IFNsaWRlck1hcmtMYWJlbCB9O1xuXG5jb25zdCBleHRlbmRVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgc2l6ZSxcbiAgICBjbGFzc2VzID0ge31cbiAgfSA9IG93bmVyU3RhdGU7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3Nlcywge1xuICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCBnZXRTbGlkZXJVdGlsaXR5Q2xhc3MoYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gKSwgY2xhc3Nlc1tgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLCBzaXplICYmIFtnZXRTbGlkZXJVdGlsaXR5Q2xhc3MoYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCksIGNsYXNzZXNbYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF1dKSxcbiAgICB0aHVtYjogY2xzeChjbGFzc2VzLnRodW1iLCBnZXRTbGlkZXJVdGlsaXR5Q2xhc3MoYHRodW1iQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWApLCBjbGFzc2VzW2B0aHVtYkNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSwgc2l6ZSAmJiBbZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKGB0aHVtYlNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCksIGNsYXNzZXNbYHRodW1iU2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXV0pXG4gIH0pO1xufTtcblxuY29uc3QgU2xpZGVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2xpZGVyKGlucHV0UHJvcHMsIHJlZikge1xuICB2YXIgX2NvbXBvbmVudHNQcm9wcyRyb290LCBfY29tcG9uZW50c1Byb3BzJHRodW0sIF9jb21wb25lbnRzUHJvcHMkdHJhYywgX2NvbXBvbmVudHNQcm9wcyR2YWx1O1xuXG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGlucHV0UHJvcHMsXG4gICAgbmFtZTogJ011aVNsaWRlcidcbiAgfSk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgaXNSdGwgPSB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnO1xuXG4gIGNvbnN0IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgIGNvbXBvbmVudCA9ICdzcGFuJyxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgc2l6ZSA9ICdtZWRpdW0nXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgc2l6ZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gZXh0ZW5kVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTbGlkZXJVbnN0eWxlZCwgX2V4dGVuZHMoe30sIG90aGVyLCB7XG4gICAgaXNSdGw6IGlzUnRsLFxuICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgIFJvb3Q6IFNsaWRlclJvb3QsXG4gICAgICBSYWlsOiBTbGlkZXJSYWlsLFxuICAgICAgVHJhY2s6IFNsaWRlclRyYWNrLFxuICAgICAgVGh1bWI6IFNsaWRlclRodW1iLFxuICAgICAgVmFsdWVMYWJlbDogU2xpZGVyVmFsdWVMYWJlbCxcbiAgICAgIE1hcms6IFNsaWRlck1hcmssXG4gICAgICBNYXJrTGFiZWw6IFNsaWRlck1hcmtMYWJlbFxuICAgIH0sIGNvbXBvbmVudHMpLFxuICAgIGNvbXBvbmVudHNQcm9wczogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcywge1xuICAgICAgcm9vdDogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcy5yb290LCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMoY29tcG9uZW50cy5Sb290KSAmJiB7XG4gICAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCAoX2NvbXBvbmVudHNQcm9wcyRyb290ID0gY29tcG9uZW50c1Byb3BzLnJvb3QpID09IG51bGwgPyB2b2lkIDAgOiBfY29tcG9uZW50c1Byb3BzJHJvb3Qub3duZXJTdGF0ZSwge1xuICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgIHNpemVcbiAgICAgICAgfSlcbiAgICAgIH0pLFxuICAgICAgdGh1bWI6IF9leHRlbmRzKHt9LCBjb21wb25lbnRzUHJvcHMudGh1bWIsIHNob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcyhjb21wb25lbnRzLlRodW1iKSAmJiB7XG4gICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCAoX2NvbXBvbmVudHNQcm9wcyR0aHVtID0gY29tcG9uZW50c1Byb3BzLnRodW1iKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHNQcm9wcyR0aHVtLm93bmVyU3RhdGUsIHtcbiAgICAgICAgICBjb2xvcixcbiAgICAgICAgICBzaXplXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICAgIHRyYWNrOiBfZXh0ZW5kcyh7fSwgY29tcG9uZW50c1Byb3BzLnRyYWNrLCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMoY29tcG9uZW50cy5UcmFjaykgJiYge1xuICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkdHJhYyA9IGNvbXBvbmVudHNQcm9wcy50cmFjaykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb21wb25lbnRzUHJvcHMkdHJhYy5vd25lclN0YXRlLCB7XG4gICAgICAgICAgY29sb3IsXG4gICAgICAgICAgc2l6ZVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICB2YWx1ZUxhYmVsOiBfZXh0ZW5kcyh7fSwgY29tcG9uZW50c1Byb3BzLnZhbHVlTGFiZWwsIHNob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcyhjb21wb25lbnRzLlZhbHVlTGFiZWwpICYmIHtcbiAgICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIChfY29tcG9uZW50c1Byb3BzJHZhbHUgPSBjb21wb25lbnRzUHJvcHMudmFsdWVMYWJlbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb21wb25lbnRzUHJvcHMkdmFsdS5vd25lclN0YXRlLCB7XG4gICAgICAgICAgY29sb3IsXG4gICAgICAgICAgc2l6ZVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KSxcbiAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgIHJlZjogcmVmXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgb2YgdGhlIHNsaWRlci5cbiAgICovXG4gICdhcmlhLWxhYmVsJzogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLnN0cmluZywgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHJhbmdlID0gQXJyYXkuaXNBcnJheShwcm9wcy52YWx1ZSB8fCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuXG4gICAgaWYgKHJhbmdlICYmIHByb3BzWydhcmlhLWxhYmVsJ10gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTVVJOiBZb3UgbmVlZCB0byB1c2UgdGhlIGBnZXRBcmlhTGFiZWxgIHByb3AgaW5zdGVhZCBvZiBgYXJpYS1sYWJlbGAgd2hlbiB1c2luZyBhIHJhbmdlIHNsaWRlci4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgZWxlbWVudCBjb250YWluaW5nIGEgbGFiZWwgZm9yIHRoZSBzbGlkZXIuXG4gICAqL1xuICAnYXJpYS1sYWJlbGxlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICovXG4gICdhcmlhLXZhbHVldGV4dCc6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5zdHJpbmcsIHByb3BzID0+IHtcbiAgICBjb25zdCByYW5nZSA9IEFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUgfHwgcHJvcHMuZGVmYXVsdFZhbHVlKTtcblxuICAgIGlmIChyYW5nZSAmJiBwcm9wc1snYXJpYS12YWx1ZXRleHQnXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgYGdldEFyaWFWYWx1ZVRleHRgIHByb3AgaW5zdGVhZCBvZiBgYXJpYS12YWx1ZXRleHRgIHdoZW4gdXNpbmcgYSByYW5nZSBzbGlkZXIuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgU2xpZGVyLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIE1hcms6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBNYXJrTGFiZWw6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSYWlsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFRodW1iOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgVHJhY2s6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBWYWx1ZUxhYmVsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBTbGlkZXIuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWFyazogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtYXJrTGFiZWw6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcmFpbDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRodW1iOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRyYWNrOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHZhbHVlTGFiZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgICAgIH0pLFxuICAgICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICAgIHZhbHVlTGFiZWxEaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ29mZicsICdvbiddKVxuICAgIH0pXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBhY3RpdmUgdGh1bWIgZG9lc24ndCBzd2FwIHdoZW4gbW92aW5nIHBvaW50ZXIgb3ZlciBhIHRodW1iIHdoaWxlIGRyYWdnaW5nIGFub3RoZXIgdGh1bWIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU3dhcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFjY2VwdHMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlIHRoYXQgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IG5hbWUgZm9yIHRoZSB0aHVtYiBsYWJlbHMgb2YgdGhlIHNsaWRlci5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgdGh1bWIgbGFiZWwncyBpbmRleCB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRBcmlhTGFiZWw6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBY2NlcHRzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBUaGlzIGlzIGltcG9ydGFudCBmb3Igc2NyZWVuIHJlYWRlciB1c2Vycy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB0aHVtYiBsYWJlbCdzIHZhbHVlIHRvIGZvcm1hdC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSB0aHVtYiBsYWJlbCdzIGluZGV4IHRvIGZvcm1hdC5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldEFyaWFWYWx1ZVRleHQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdGhlbWUgY29udGV4dCBoYXMgcnRsIGRpcmVjdGlvbi4gSXQgaXMgc2V0IGF1dG9tYXRpY2FsbHkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpc1J0bDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE1hcmtzIGluZGljYXRlIHByZWRldGVybWluZWQgdmFsdWVzIHRvIHdoaWNoIHRoZSB1c2VyIGNhbiBtb3ZlIHRoZSBzbGlkZXIuXG4gICAqIElmIGB0cnVlYCB0aGUgbWFya3MgYXJlIHNwYWNlZCBhY2NvcmRpbmcgdGhlIHZhbHVlIG9mIHRoZSBgc3RlcGAgcHJvcC5cbiAgICogSWYgYW4gYXJyYXksIGl0IHNob3VsZCBjb250YWluIG9iamVjdHMgd2l0aCBgdmFsdWVgIGFuZCBhbiBvcHRpb25hbCBgbGFiZWxgIGtleXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtYXJrczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSksIFByb3BUeXBlcy5ib29sXSksXG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGFsbG93ZWQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogU2hvdWxkIG5vdCBiZSBlcXVhbCB0byBtaW4uXG4gICAqIEBkZWZhdWx0IDEwMFxuICAgKi9cbiAgbWF4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBhbGxvd2VkIHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIFNob3VsZCBub3QgYmUgZXF1YWwgdG8gbWF4LlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBtaW46IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBzbGlkZXIncyB2YWx1ZSBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoYW55KS5cbiAgICogKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50IG5vdCBhIGNoYW5nZSBldmVudC5cbiAgICogQHBhcmFtIHtudW1iZXIgfCBudW1iZXJbXX0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGFjdGl2ZVRodW1iIEluZGV4IG9mIHRoZSBjdXJyZW50bHkgbW92ZWQgdGh1bWIuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgYG1vdXNldXBgIGlzIHRyaWdnZXJlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudCB8IEV2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay4gKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50IG5vdCBhIGNoYW5nZSBldmVudC5cbiAgICogQHBhcmFtIHtudW1iZXIgfCBudW1iZXJbXX0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cbiAgICovXG4gIG9uQ2hhbmdlQ29tbWl0dGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBvcmllbnRhdGlvbi5cbiAgICogQGRlZmF1bHQgJ2hvcml6b250YWwnXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcblxuICAvKipcbiAgICogQSB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbiwgdG8gY2hhbmdlIHRoZSBzY2FsZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBAZGVmYXVsdCAoeCkgPT4geFxuICAgKi9cbiAgc2NhbGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgZ3JhbnVsYXJpdHkgd2l0aCB3aGljaCB0aGUgc2xpZGVyIGNhbiBzdGVwIHRocm91Z2ggdmFsdWVzLiAoQSBcImRpc2NyZXRlXCIgc2xpZGVyLilcbiAgICogVGhlIGBtaW5gIHByb3Agc2VydmVzIGFzIHRoZSBvcmlnaW4gZm9yIHRoZSB2YWxpZCB2YWx1ZXMuXG4gICAqIFdlIHJlY29tbWVuZCAobWF4IC0gbWluKSB0byBiZSBldmVubHkgZGl2aXNpYmxlIGJ5IHRoZSBzdGVwLlxuICAgKlxuICAgKiBXaGVuIHN0ZXAgaXMgYG51bGxgLCB0aGUgdGh1bWIgY2FuIG9ubHkgYmUgc2xpZCBvbnRvIG1hcmtzIHByb3ZpZGVkIHdpdGggdGhlIGBtYXJrc2AgcHJvcC5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgc3RlcDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUYWIgaW5kZXggYXR0cmlidXRlIG9mIHRoZSBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB0cmFjayBwcmVzZW50YXRpb246XG4gICAqXG4gICAqIC0gYG5vcm1hbGAgdGhlIHRyYWNrIHdpbGwgcmVuZGVyIGEgYmFyIHJlcHJlc2VudGluZyB0aGUgc2xpZGVyIHZhbHVlLlxuICAgKiAtIGBpbnZlcnRlZGAgdGhlIHRyYWNrIHdpbGwgcmVuZGVyIGEgYmFyIHJlcHJlc2VudGluZyB0aGUgcmVtYWluaW5nIHNsaWRlciB2YWx1ZS5cbiAgICogLSBgZmFsc2VgIHRoZSB0cmFjayB3aWxsIHJlbmRlciB3aXRob3V0IGEgYmFyLlxuICAgKiBAZGVmYXVsdCAnbm9ybWFsJ1xuICAgKi9cbiAgdHJhY2s6IFByb3BUeXBlcy5vbmVPZihbJ2ludmVydGVkJywgJ25vcm1hbCcsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBGb3IgcmFuZ2VkIHNsaWRlcnMsIHByb3ZpZGUgYW4gYXJyYXkgd2l0aCB0d28gdmFsdWVzLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZW4gdGhlIHZhbHVlIGxhYmVsIGlzIGRpc3BsYXllZDpcbiAgICpcbiAgICogLSBgYXV0b2AgdGhlIHZhbHVlIGxhYmVsIHdpbGwgZGlzcGxheSB3aGVuIHRoZSB0aHVtYiBpcyBob3ZlcmVkIG9yIGZvY3VzZWQuXG4gICAqIC0gYG9uYCB3aWxsIGRpc3BsYXkgcGVyc2lzdGVudGx5LlxuICAgKiAtIGBvZmZgIHdpbGwgbmV2ZXIgZGlzcGxheS5cbiAgICogQGRlZmF1bHQgJ29mZidcbiAgICovXG4gIHZhbHVlTGFiZWxEaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ29mZicsICdvbiddKSxcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBmdW5jdGlvbiB0aGUgdmFsdWUgbGFiZWwncyB2YWx1ZS5cbiAgICpcbiAgICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCBpdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZTpcbiAgICpcbiAgICogLSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgbGFiZWwncyB2YWx1ZSB0byBmb3JtYXRcbiAgICogLSB7bnVtYmVyfSBpbmRleCBUaGUgdmFsdWUgbGFiZWwncyBpbmRleCB0byBmb3JtYXRcbiAgICogQGRlZmF1bHQgKHgpID0+IHhcbiAgICovXG4gIHZhbHVlTGFiZWxGb3JtYXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZXI7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IEJveCBmcm9tIFwiQG11aS9tYXRlcmlhbC9Cb3hcIjtcclxuaW1wb3J0IFNsaWRlciBmcm9tIFwiQG11aS9tYXRlcmlhbC9TbGlkZXJcIjtcclxuXHJcbmNvbnN0IFRpbWVSYW5nZSA9ICh7IHVwZGF0ZVRpbWVSYW5nZSB9KSA9PiB7XHJcbiAgICBjb25zdCBbdmFsdWVzLCBzZXRWYWx1ZXNdID0gUmVhY3QudXNlU3RhdGUoWzAsIDE0NDBdKTtcclxuXHJcbiAgICBmdW5jdGlvbiB2YWx1ZXRleHQodmFsdWUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCBuZXdOdW0pID0+IHtcclxuICAgICAgICAvL0NvbnZlcnQgbWludXRlcyB0byAyNCBociB0aW1lXHJcbiAgICAgICAgdmFyIGhvdXJzID0gbmV3TnVtWzBdIC8gNjA7XHJcbiAgICAgICAgdmFyIHJob3VycyA9IE1hdGguZmxvb3IoaG91cnMpO1xyXG4gICAgICAgIHZhciBtaW51dGVzID0gKGhvdXJzIC0gcmhvdXJzKSAqIDYwO1xyXG4gICAgICAgIHZhciBybWludXRlcyA9IE1hdGgucm91bmQobWludXRlcyk7XHJcblxyXG4gICAgICAgIHZhciBob3VyczIgPSBuZXdOdW1bMV0gLyA2MDtcclxuICAgICAgICB2YXIgcmhvdXJzMiA9IE1hdGguZmxvb3IoaG91cnMyKTtcclxuICAgICAgICB2YXIgbWludXRlczIgPSAoaG91cnMyIC0gcmhvdXJzMikgKiA2MDtcclxuICAgICAgICB2YXIgcm1pbnV0ZXMyID0gTWF0aC5yb3VuZChtaW51dGVzMik7XHJcblxyXG4gICAgICAgIC8vQWRkIGEgemVybyBpZiBuZWVkZWRcclxuICAgICAgICBpZiAocm1pbnV0ZXMgPCAxMCkgcm1pbnV0ZXMgPSBybWludXRlcyArIFwiMFwiO1xyXG4gICAgICAgIGlmIChybWludXRlczIgPCAxMCkgcm1pbnV0ZXMyID0gcm1pbnV0ZXMyICsgXCIwXCI7XHJcblxyXG4gICAgICAgIC8vQ29udmVydCB0byAxMiBob3VyXHJcbiAgICAgICAgdmFyIEFtT3JQbTEgPSByaG91cnMgPj0gMTIgPyBcInBtXCIgOiBcImFtXCI7XHJcbiAgICAgICAgdmFyIEFtT3JQbTIgPSByaG91cnMyID49IDEyID8gXCJwbVwiIDogXCJhbVwiO1xyXG5cclxuICAgICAgICByaG91cnMgPSByaG91cnMgJSAxMiB8fCAxMjtcclxuICAgICAgICByaG91cnMyID0gcmhvdXJzMiAlIDEyIHx8IDEyO1xyXG5cclxuICAgICAgICAvL0Zvcm1hdCB0aW1lIGludG8gYSBzdHJpbmdcclxuICAgICAgICB2YXIgdGltZTEgPSByaG91cnMgKyBcIjpcIiArIHJtaW51dGVzICsgXCIgXCIgKyBBbU9yUG0xO1xyXG5cclxuICAgICAgICB2YXIgdGltZTIgPSByaG91cnMyICsgXCI6XCIgKyBybWludXRlczIgKyBcIiBcIiArIEFtT3JQbTI7XHJcblxyXG4gICAgICAgIC8vVXBkYXRlIHRoZSB0aW1lIHJhbmdlIHdpdGggdGhlIHN0cmluZ1xyXG4gICAgICAgIHVwZGF0ZVRpbWVSYW5nZShbdGltZTEsIHRpbWUyXSk7XHJcbiAgICAgICAgc2V0VmFsdWVzKG5ld051bSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Qm94IHN4PXt7IHdpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjkwcHhcIiwgb3ZlcmZsb3c6IFwiaGlkZGVuXCIgfX0+XHJcbiAgICAgICAgICAgIDxTbGlkZXJcclxuICAgICAgICAgICAgICAgIHN4PXt7IGhlaWdodDogXCI0MHB4XCIsIGNvbG9yOiBcInJnYmEoMTM5LCA3OSwgMTEsIDAuNjE2KVwiIH19XHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWVzfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgIHN0ZXA9ezE1fVxyXG4gICAgICAgICAgICAgICAgbWluPXswfVxyXG4gICAgICAgICAgICAgICAgbWF4PXsxNDQwfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDwvQm94PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRpbWVSYW5nZTtcclxuIiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImxhYmVsXCIsIFwibm90Y2hlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IE5vdGNoZWRPdXRsaW5lUm9vdCA9IHN0eWxlZCgnZmllbGRzZXQnKSh7XG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgYm90dG9tOiAwLFxuICByaWdodDogMCxcbiAgdG9wOiAtNSxcbiAgbGVmdDogMCxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAnMCA4cHgnLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgYm9yZGVyV2lkdGg6IDEsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgbWluV2lkdGg6ICcwJSdcbn0pO1xuY29uc3QgTm90Y2hlZE91dGxpbmVMZWdlbmQgPSBzdHlsZWQoJ2xlZ2VuZCcsIHtcbiAgc2tpcFN4OiB0cnVlXG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBmbG9hdDogJ3Vuc2V0J1xufSwgb3duZXJTdGF0ZS5sYWJlbCA9PT0gdW5kZWZpbmVkICYmIHtcbiAgcGFkZGluZzogMCxcbiAgbGluZUhlaWdodDogJzExcHgnLFxuICAvLyBzeW5jIHdpdGggYGhlaWdodGAgaW4gYGxlZ2VuZGAgc3R5bGVzXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnd2lkdGgnLCB7XG4gICAgZHVyYXRpb246IDE1MCxcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gIH0pXG59LCBvd25lclN0YXRlLmxhYmVsICE9PSB1bmRlZmluZWQgJiYgX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICAvLyBGaXggY29uZmxpY3Qgd2l0aCBub3JtYWxpemUuY3NzIGFuZCBzYW5pdGl6ZS5jc3NcbiAgd2lkdGg6ICdhdXRvJyxcbiAgLy8gRml4IGNvbmZsaWN0IHdpdGggYm9vdHN0cmFwXG4gIHBhZGRpbmc6IDAsXG4gIGhlaWdodDogMTEsXG4gIC8vIHN5bmMgd2l0aCBgbGluZUhlaWdodGAgaW4gYGxlZ2VuZGAgc3R5bGVzXG4gIGZvbnRTaXplOiAnMC43NWVtJyxcbiAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gIG1heFdpZHRoOiAwLjAxLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ21heC13aWR0aCcsIHtcbiAgICBkdXJhdGlvbjogNTAsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICB9KSxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICcmID4gc3Bhbic6IHtcbiAgICBwYWRkaW5nTGVmdDogNSxcbiAgICBwYWRkaW5nUmlnaHQ6IDUsXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaydcbiAgfVxufSwgb3duZXJTdGF0ZS5ub3RjaGVkICYmIHtcbiAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdtYXgtd2lkdGgnLCB7XG4gICAgZHVyYXRpb246IDEwMCxcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0LFxuICAgIGRlbGF5OiA1MFxuICB9KVxufSkpKTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOb3RjaGVkT3V0bGluZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGxhYmVsLFxuICAgIG5vdGNoZWRcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBub3RjaGVkLFxuICAgIGxhYmVsXG4gIH0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChOb3RjaGVkT3V0bGluZVJvb3QsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChOb3RjaGVkT3V0bGluZUxlZ2VuZCwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBsYWJlbCA/IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNoaWxkcmVuOiBsYWJlbFxuICAgICAgfSkgOlxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gbm90cmFuc2xhdGUgbmVlZGVkIHdoaWxlIEdvb2dsZSBUcmFuc2xhdGUgd2lsbCBub3QgZml4IHplcm8td2lkdGggc3BhY2UgaXNzdWVcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgICAgIF9qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIm5vdHJhbnNsYXRlXCIsXG4gICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9KSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOb3RjaGVkT3V0bGluZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGxhYmVsLlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmNvbnN0IEZvcm1Db250cm9sQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEZvcm1Db250cm9sQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdGb3JtQ29udHJvbENvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbENvbnRleHQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuL0Zvcm1Db250cm9sQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JtQ29udHJvbCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRyb2xDb250ZXh0KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtQ29udHJvbFN0YXRlKHtcbiAgcHJvcHMsXG4gIHN0YXRlcyxcbiAgbXVpRm9ybUNvbnRyb2xcbn0pIHtcbiAgcmV0dXJuIHN0YXRlcy5yZWR1Y2UoKGFjYywgc3RhdGUpID0+IHtcbiAgICBhY2Nbc3RhdGVdID0gcHJvcHNbc3RhdGVdO1xuXG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzW3N0YXRlXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYWNjW3N0YXRlXSA9IG11aUZvcm1Db250cm9sW3N0YXRlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE91dGxpbmVkSW5wdXRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU91dGxpbmVkSW5wdXQnLCBzbG90KTtcbn1cbmNvbnN0IG91dGxpbmVkSW5wdXRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpT3V0bGluZWRJbnB1dCcsIFsncm9vdCcsICdjb2xvclNlY29uZGFyeScsICdmb2N1c2VkJywgJ2Rpc2FibGVkJywgJ2Fkb3JuZWRTdGFydCcsICdhZG9ybmVkRW5kJywgJ2Vycm9yJywgJ3NpemVTbWFsbCcsICdtdWx0aWxpbmUnLCAnbm90Y2hlZE91dGxpbmUnLCAnaW5wdXQnLCAnaW5wdXRTaXplU21hbGwnLCAnaW5wdXRNdWx0aWxpbmUnLCAnaW5wdXRBZG9ybmVkU3RhcnQnLCAnaW5wdXRBZG9ybmVkRW5kJ10pO1xuZXhwb3J0IGRlZmF1bHQgb3V0bGluZWRJbnB1dENsYXNzZXM7IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuLy8gQSBmZXcgYnl0ZXMgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyB+MyBrQiBhbmQgZGVib3VuY2UgfjMwMCBCLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCA9IDE2Nikge1xuICBsZXQgdGltZW91dDtcblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoLi4uYXJncykge1xuICAgIGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuXG4gIGRlYm91bmNlZC5jbGVhciA9ICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DaGFuZ2VcIiwgXCJtYXhSb3dzXCIsIFwibWluUm93c1wiLCBcInN0eWxlXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdW5zdGFibGVfZGVib3VuY2UgYXMgZGVib3VuY2UsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QsIHVuc3RhYmxlX293bmVyV2luZG93IGFzIG93bmVyV2luZG93IH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5mdW5jdGlvbiBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsIHByb3BlcnR5KSB7XG4gIHJldHVybiBwYXJzZUludChjb21wdXRlZFN0eWxlW3Byb3BlcnR5XSwgMTApIHx8IDA7XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2hhZG93OiB7XG4gICAgLy8gVmlzaWJpbGl0eSBuZWVkZWQgdG8gaGlkZSB0aGUgZXh0cmEgdGV4dCBhcmVhIG9uIGlQYWRzXG4gICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgLy8gUmVtb3ZlIGZyb20gdGhlIGNvbnRlbnQgZmxvd1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIC8vIElnbm9yZSB0aGUgc2Nyb2xsYmFyIHdpZHRoXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGhlaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICAvLyBDcmVhdGUgYSBuZXcgbGF5ZXIsIGluY3JlYXNlIHRoZSBpc29sYXRpb24gb2YgdGhlIGNvbXB1dGVkIHZhbHVlc1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknXG4gIH1cbn07XG5jb25zdCBUZXh0YXJlYUF1dG9zaXplID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGV4dGFyZWFBdXRvc2l6ZShwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICBvbkNoYW5nZSxcbiAgICBtYXhSb3dzLFxuICAgIG1pblJvd3MgPSAxLFxuICAgIHN0eWxlLFxuICAgIHZhbHVlXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCk7XG4gIGNvbnN0IGlucHV0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaW5wdXRSZWYpO1xuICBjb25zdCBzaGFkb3dSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJlbmRlcnMgPSBSZWFjdC51c2VSZWYoMCk7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe30pO1xuICBjb25zdCBzeW5jSGVpZ2h0ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gaW5wdXRSZWYuY3VycmVudDtcbiAgICBjb25zdCBjb250YWluZXJXaW5kb3cgPSBvd25lcldpbmRvdyhpbnB1dCk7XG4gICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGNvbnRhaW5lcldpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlucHV0KTsgLy8gSWYgaW5wdXQncyB3aWR0aCBpcyBzaHJ1bmsgYW5kIGl0J3Mgbm90IHZpc2libGUsIGRvbid0IHN5bmMgaGVpZ2h0LlxuXG4gICAgaWYgKGNvbXB1dGVkU3R5bGUud2lkdGggPT09ICcwcHgnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW5wdXRTaGFsbG93ID0gc2hhZG93UmVmLmN1cnJlbnQ7XG4gICAgaW5wdXRTaGFsbG93LnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aDtcbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSBpbnB1dC52YWx1ZSB8fCBwcm9wcy5wbGFjZWhvbGRlciB8fCAneCc7XG5cbiAgICBpZiAoaW5wdXRTaGFsbG93LnZhbHVlLnNsaWNlKC0xKSA9PT0gJ1xcbicpIHtcbiAgICAgIC8vIENlcnRhaW4gZm9udHMgd2hpY2ggb3ZlcmZsb3cgdGhlIGxpbmUgaGVpZ2h0IHdpbGwgY2F1c2UgdGhlIHRleHRhcmVhXG4gICAgICAvLyB0byByZXBvcnQgYSBkaWZmZXJlbnQgc2Nyb2xsSGVpZ2h0IGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBsYXN0IGxpbmVcbiAgICAgIC8vIGlzIGVtcHR5LiBNYWtlIGl0IG5vbi1lbXB0eSB0byBhdm9pZCB0aGlzIGlzc3VlLlxuICAgICAgaW5wdXRTaGFsbG93LnZhbHVlICs9ICcgJztcbiAgICB9XG5cbiAgICBjb25zdCBib3hTaXppbmcgPSBjb21wdXRlZFN0eWxlWydib3gtc2l6aW5nJ107XG4gICAgY29uc3QgcGFkZGluZyA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ3BhZGRpbmctYm90dG9tJykgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdwYWRkaW5nLXRvcCcpO1xuICAgIGNvbnN0IGJvcmRlciA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ2JvcmRlci1ib3R0b20td2lkdGgnKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ2JvcmRlci10b3Atd2lkdGgnKTsgLy8gVGhlIGhlaWdodCBvZiB0aGUgaW5uZXIgY29udGVudFxuXG4gICAgY29uc3QgaW5uZXJIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0OyAvLyBNZWFzdXJlIGhlaWdodCBvZiBhIHRleHRhcmVhIHdpdGggYSBzaW5nbGUgcm93XG5cbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSAneCc7XG4gICAgY29uc3Qgc2luZ2xlUm93SGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodDsgLy8gVGhlIGhlaWdodCBvZiB0aGUgb3V0ZXIgY29udGVudFxuXG4gICAgbGV0IG91dGVySGVpZ2h0ID0gaW5uZXJIZWlnaHQ7XG5cbiAgICBpZiAobWluUm93cykge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChOdW1iZXIobWluUm93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAobWF4Um93cykge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1pbihOdW1iZXIobWF4Um93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG5cbiAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KG91dGVySGVpZ2h0LCBzaW5nbGVSb3dIZWlnaHQpOyAvLyBUYWtlIHRoZSBib3ggc2l6aW5nIGludG8gYWNjb3VudCBmb3IgYXBwbHlpbmcgdGhpcyB2YWx1ZSBhcyBhIHN0eWxlLlxuXG4gICAgY29uc3Qgb3V0ZXJIZWlnaHRTdHlsZSA9IG91dGVySGVpZ2h0ICsgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnID8gcGFkZGluZyArIGJvcmRlciA6IDApO1xuICAgIGNvbnN0IG92ZXJmbG93ID0gTWF0aC5hYnMob3V0ZXJIZWlnaHQgLSBpbm5lckhlaWdodCkgPD0gMTtcbiAgICBzZXRTdGF0ZShwcmV2U3RhdGUgPT4ge1xuICAgICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIHVwZGF0ZSB0aGUgaGVpZ2h0LlxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBpbmZpbml0ZSByZW5kZXJpbmcgbG9vcC5cbiAgICAgIGlmIChyZW5kZXJzLmN1cnJlbnQgPCAyMCAmJiAob3V0ZXJIZWlnaHRTdHlsZSA+IDAgJiYgTWF0aC5hYnMoKHByZXZTdGF0ZS5vdXRlckhlaWdodFN0eWxlIHx8IDApIC0gb3V0ZXJIZWlnaHRTdHlsZSkgPiAxIHx8IHByZXZTdGF0ZS5vdmVyZmxvdyAhPT0gb3ZlcmZsb3cpKSB7XG4gICAgICAgIHJlbmRlcnMuY3VycmVudCArPSAxO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG92ZXJmbG93LFxuICAgICAgICAgIG91dGVySGVpZ2h0U3R5bGVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHJlbmRlcnMuY3VycmVudCA9PT0gMjApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUb28gbWFueSByZS1yZW5kZXJzLiBUaGUgbGF5b3V0IGlzIHVuc3RhYmxlLicsICdUZXh0YXJlYUF1dG9zaXplIGxpbWl0cyB0aGUgbnVtYmVyIG9mIHJlbmRlcnMgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgIH0pO1xuICB9LCBbbWF4Um93cywgbWluUm93cywgcHJvcHMucGxhY2Vob2xkZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICAgICAgc3luY0hlaWdodCgpO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0UmVmLmN1cnJlbnQpO1xuICAgIGNvbnRhaW5lcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIGxldCByZXNpemVPYnNlcnZlcjtcblxuICAgIGlmICh0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihoYW5kbGVSZXNpemUpO1xuICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShpbnB1dFJlZi5jdXJyZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICBjb250YWluZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcblxuICAgICAgaWYgKHJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICAgIHJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbc3luY0hlaWdodF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgc3luY0hlaWdodCgpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICB9LCBbdmFsdWVdKTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgcmVuZGVycy5jdXJyZW50ID0gMDtcblxuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KFwidGV4dGFyZWFcIiwgX2V4dGVuZHMoe1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgIHJlZjogaGFuZGxlUmVmIC8vIEFwcGx5IHRoZSByb3dzIHByb3AgdG8gZ2V0IGEgXCJjb3JyZWN0XCIgZmlyc3QgU1NSIHBhaW50XG4gICAgICAsXG4gICAgICByb3dzOiBtaW5Sb3dzLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgaGVpZ2h0OiBzdGF0ZS5vdXRlckhlaWdodFN0eWxlLFxuICAgICAgICAvLyBOZWVkIGEgbGFyZ2UgZW5vdWdoIGRpZmZlcmVuY2UgdG8gYWxsb3cgc2Nyb2xsaW5nLlxuICAgICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgICBvdmVyZmxvdzogc3RhdGUub3ZlcmZsb3cgPyAnaGlkZGVuJyA6IG51bGxcbiAgICAgIH0sIHN0eWxlKVxuICAgIH0sIG90aGVyKSksIC8qI19fUFVSRV9fKi9fanN4KFwidGV4dGFyZWFcIiwge1xuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgY2xhc3NOYW1lOiBwcm9wcy5jbGFzc05hbWUsXG4gICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgIHJlZjogc2hhZG93UmVmLFxuICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZXMuc2hhZG93LCBzdHlsZSwge1xuICAgICAgICBwYWRkaW5nOiAwXG4gICAgICB9KVxuICAgIH0pXVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGV4dGFyZWFBdXRvc2l6ZS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICogQGRlZmF1bHQgMVxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUZXh0YXJlYUF1dG9zaXplOyIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRm9ya1JlZjsiLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRW5oYW5jZWRFZmZlY3Q7IiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgdXNlQ29udGV4dCwgdXNlUmVmLCB1c2VMYXlvdXRFZmZlY3QsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgeyBoIGFzIGhhc093blByb3BlcnR5LCBFIGFzIEVtb3Rpb24sIGMgYXMgY3JlYXRlRW1vdGlvblByb3BzLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIFQgYXMgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtNjk5ZTY5MDguYnJvd3Nlci5lc20uanMnO1xuZXhwb3J0IHsgQyBhcyBDYWNoZVByb3ZpZGVyLCBUIGFzIFRoZW1lQ29udGV4dCwgYSBhcyBUaGVtZVByb3ZpZGVyLCBfIGFzIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSwgdSBhcyB1c2VUaGVtZSwgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBiIGFzIHdpdGhUaGVtZSB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LTY5OWU2OTA4LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0ICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgaW5zZXJ0U3R5bGVzLCBnZXRSZWdpc3RlcmVkU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5cbnZhciBwa2cgPSB7XG5cdG5hbWU6IFwiQGVtb3Rpb24vcmVhY3RcIixcblx0dmVyc2lvbjogXCIxMS43LjFcIixcblx0bWFpbjogXCJkaXN0L2Vtb3Rpb24tcmVhY3QuY2pzLmpzXCIsXG5cdG1vZHVsZTogXCJkaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCIsXG5cdGJyb3dzZXI6IHtcblx0XHRcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuY2pzLmpzXCIsXG5cdFx0XCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qc1wiXG5cdH0sXG5cdHR5cGVzOiBcInR5cGVzL2luZGV4LmQudHNcIixcblx0ZmlsZXM6IFtcblx0XHRcInNyY1wiLFxuXHRcdFwiZGlzdFwiLFxuXHRcdFwianN4LXJ1bnRpbWVcIixcblx0XHRcImpzeC1kZXYtcnVudGltZVwiLFxuXHRcdFwiX2lzb2xhdGVkLWhucnNcIixcblx0XHRcInR5cGVzLyouZC50c1wiLFxuXHRcdFwibWFjcm8uanNcIixcblx0XHRcIm1hY3JvLmQudHNcIixcblx0XHRcIm1hY3JvLmpzLmZsb3dcIlxuXHRdLFxuXHRzaWRlRWZmZWN0czogZmFsc2UsXG5cdGF1dGhvcjogXCJtaXRjaGVsbGhhbWlsdG9uIDxtaXRjaGVsbEBtaXRjaGVsbGhhbWlsdG9uLm1lPlwiLFxuXHRsaWNlbnNlOiBcIk1JVFwiLFxuXHRzY3JpcHRzOiB7XG5cdFx0XCJ0ZXN0OnR5cGVzY3JpcHRcIjogXCJkdHNsaW50IHR5cGVzXCJcblx0fSxcblx0ZGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvcnVudGltZVwiOiBcIl43LjEzLjEwXCIsXG5cdFx0XCJAZW1vdGlvbi9jYWNoZVwiOiBcIl4xMS43LjFcIixcblx0XHRcIkBlbW90aW9uL3NlcmlhbGl6ZVwiOiBcIl4xLjAuMlwiLFxuXHRcdFwiQGVtb3Rpb24vc2hlZXRcIjogXCJeMS4xLjBcIixcblx0XHRcIkBlbW90aW9uL3V0aWxzXCI6IFwiXjEuMC4wXCIsXG5cdFx0XCJAZW1vdGlvbi93ZWFrLW1lbW9pemVcIjogXCJeMC4yLjVcIixcblx0XHRcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI6IFwiXjMuMy4xXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjogXCJeNy4wLjBcIixcblx0XHRyZWFjdDogXCI+PTE2LjguMFwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXNNZXRhOiB7XG5cdFx0XCJAYmFiZWwvY29yZVwiOiB7XG5cdFx0XHRvcHRpb25hbDogdHJ1ZVxuXHRcdH0sXG5cdFx0XCJAdHlwZXMvcmVhY3RcIjoge1xuXHRcdFx0b3B0aW9uYWw6IHRydWVcblx0XHR9XG5cdH0sXG5cdGRldkRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjogXCJeNy4xMy4xMFwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzXCI6IFwiMTEuNy4xXCIsXG5cdFx0XCJAZW1vdGlvbi9jc3MtcHJldHRpZmllclwiOiBcIjEuMC4xXCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJ2ZXJcIjogXCIxMS40LjBcIixcblx0XHRcIkBlbW90aW9uL3N0eWxlZFwiOiBcIjExLjYuMFwiLFxuXHRcdFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE2LjkuMTFcIixcblx0XHRkdHNsaW50OiBcIl4wLjMuMFwiLFxuXHRcdFwiaHRtbC10YWctbmFtZXNcIjogXCJeMS4xLjJcIixcblx0XHRyZWFjdDogXCIxNi4xNC4wXCIsXG5cdFx0XCJzdmctdGFnLW5hbWVzXCI6IFwiXjEuMS4xXCJcblx0fSxcblx0cmVwb3NpdG9yeTogXCJodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL3RyZWUvbWFpbi9wYWNrYWdlcy9yZWFjdFwiLFxuXHRwdWJsaXNoQ29uZmlnOiB7XG5cdFx0YWNjZXNzOiBcInB1YmxpY1wiXG5cdH0sXG5cdFwidW1kOm1haW5cIjogXCJkaXN0L2Vtb3Rpb24tcmVhY3QudW1kLm1pbi5qc1wiLFxuXHRwcmVjb25zdHJ1Y3Q6IHtcblx0XHRlbnRyeXBvaW50czogW1xuXHRcdFx0XCIuL2luZGV4LmpzXCIsXG5cdFx0XHRcIi4vanN4LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9qc3gtZGV2LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9faXNvbGF0ZWQtaG5ycy5qc1wiXG5cdFx0XSxcblx0XHR1bWROYW1lOiBcImVtb3Rpb25SZWFjdFwiXG5cdH1cbn07XG5cbnZhciBqc3ggPSBmdW5jdGlvbiBqc3godHlwZSwgcHJvcHMpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgaWYgKHByb3BzID09IG51bGwgfHwgIWhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3NMZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVtpXSA9IGFyZ3NbaV07XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgY3JlYXRlRWxlbWVudEFyZ0FycmF5KTtcbn07XG5cbnZhciB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSBmYWxzZTsgLy8gbWFpbnRhaW4gcGxhY2Ugb3ZlciByZXJlbmRlcnMuXG4vLyBpbml0aWFsIHJlbmRlciBmcm9tIGJyb3dzZXIsIGluc2VydEJlZm9yZSBjb250ZXh0LnNoZWV0LnRhZ3NbMF0gb3IgaWYgYSBzdHlsZSBoYXNuJ3QgYmVlbiBpbnNlcnRlZCB0aGVyZSB5ZXQsIGFwcGVuZENoaWxkXG4vLyBpbml0aWFsIGNsaWVudC1zaWRlIHJlbmRlciBmcm9tIFNTUiwgdXNlIHBsYWNlIG9mIGh5ZHJhdGluZyB0YWdcblxudmFyIEdsb2JhbCA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsICYmICggLy8gY2hlY2sgZm9yIGNsYXNzTmFtZSBhcyB3ZWxsIHNpbmNlIHRoZSB1c2VyIGlzXG4gIC8vIHByb2JhYmx5IHVzaW5nIHRoZSBjdXN0b20gY3JlYXRlRWxlbWVudCB3aGljaFxuICAvLyBtZWFucyBpdCB3aWxsIGJlIHR1cm5lZCBpbnRvIGEgY2xhc3NOYW1lIHByb3BcbiAgLy8gJEZsb3dGaXhNZSBJIGRvbid0IHJlYWxseSB3YW50IHRvIGFkZCBpdCB0byB0aGUgdHlwZSBzaW5jZSBpdCBzaG91bGRuJ3QgYmUgdXNlZFxuICBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHMuY3NzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyB0aGUgY3NzIHByb3Agb24gR2xvYmFsLCBkaWQgeW91IG1lYW4gdG8gdXNlIHRoZSBzdHlsZXMgcHJvcCBpbnN0ZWFkP1wiKTtcbiAgICB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10sIHVuZGVmaW5lZCwgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcbiAgLy8gYnV0IGl0IGlzIGJhc2VkIG9uIGEgY29uc3RhbnQgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSBhdCBydW50aW1lXG4gIC8vIGl0J3MgZWZmZWN0aXZlbHkgbGlrZSBoYXZpbmcgdHdvIGltcGxlbWVudGF0aW9ucyBhbmQgc3dpdGNoaW5nIHRoZW0gb3V0XG4gIC8vIHNvIGl0J3Mgbm90IGFjdHVhbGx5IGJyZWFraW5nIGFueXRoaW5nXG5cblxuICB2YXIgc2hlZXRSZWYgPSB1c2VSZWYoKTtcbiAgdXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5ID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsXCI7XG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBub25jZTogY2FjaGUuc2hlZXQubm9uY2UsXG4gICAgICBjb250YWluZXI6IGNhY2hlLnNoZWV0LmNvbnRhaW5lcixcbiAgICAgIHNwZWVkeTogY2FjaGUuc2hlZXQuaXNTcGVlZHlcbiAgICB9KTtcbiAgICB2YXIgcmVoeWRyYXRpbmcgPSBmYWxzZTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbZGF0YS1lbW90aW9uPVxcXCJcIiArIGtleSArIFwiIFwiICsgc2VyaWFsaXplZC5uYW1lICsgXCJcXFwiXVwiKTtcblxuICAgIGlmIChjYWNoZS5zaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgc2hlZXQuYmVmb3JlID0gY2FjaGUuc2hlZXQudGFnc1swXTtcbiAgICB9XG5cbiAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgcmVoeWRyYXRpbmcgPSB0cnVlOyAvLyBjbGVhciB0aGUgaGFzaCBzbyB0aGlzIG5vZGUgd29uJ3QgYmUgcmVjb2duaXphYmxlIGFzIHJlaHlkcmF0YWJsZSBieSBvdGhlciA8R2xvYmFsLz5zXG5cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBrZXkpO1xuICAgICAgc2hlZXQuaHlkcmF0ZShbbm9kZV0pO1xuICAgIH1cblxuICAgIHNoZWV0UmVmLmN1cnJlbnQgPSBbc2hlZXQsIHJlaHlkcmF0aW5nXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9O1xuICB9LCBbY2FjaGVdKTtcbiAgdXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hlZXRSZWZDdXJyZW50ID0gc2hlZXRSZWYuY3VycmVudDtcbiAgICB2YXIgc2hlZXQgPSBzaGVldFJlZkN1cnJlbnRbMF0sXG4gICAgICAgIHJlaHlkcmF0aW5nID0gc2hlZXRSZWZDdXJyZW50WzFdO1xuXG4gICAgaWYgKHJlaHlkcmF0aW5nKSB7XG4gICAgICBzaGVldFJlZkN1cnJlbnRbMV0gPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2VyaWFsaXplZC5uZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGluc2VydCBrZXlmcmFtZXNcbiAgICAgIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZC5uZXh0LCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoc2hlZXQudGFncy5sZW5ndGgpIHtcbiAgICAgIC8vIGlmIHRoaXMgZG9lc24ndCBleGlzdCB0aGVuIGl0IHdpbGwgYmUgbnVsbCBzbyB0aGUgc3R5bGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICB2YXIgZWxlbWVudCA9IHNoZWV0LnRhZ3Nbc2hlZXQudGFncy5sZW5ndGggLSAxXS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICBzaGVldC5iZWZvcmUgPSBlbGVtZW50O1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9XG5cbiAgICBjYWNoZS5pbnNlcnQoXCJcIiwgc2VyaWFsaXplZCwgc2hlZXQsIGZhbHNlKTtcbiAgfSwgW2NhY2hlLCBzZXJpYWxpemVkLm5hbWVdKTtcbiAgcmV0dXJuIG51bGw7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgR2xvYmFsLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25HbG9iYWwnO1xufVxuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplU3R5bGVzKGFyZ3MpO1xufVxuXG52YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24ga2V5ZnJhbWVzKCkge1xuICB2YXIgaW5zZXJ0YWJsZSA9IGNzcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIHZhciBuYW1lID0gXCJhbmltYXRpb24tXCIgKyBpbnNlcnRhYmxlLm5hbWU7IC8vICRGbG93Rml4TWVcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBcIkBrZXlmcmFtZXMgXCIgKyBuYW1lICsgXCJ7XCIgKyBpbnNlcnRhYmxlLnN0eWxlcyArIFwifVwiLFxuICAgIGFuaW06IDEsXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiX0VNT19cIiArIHRoaXMubmFtZSArIFwiX1wiICsgdGhpcy5zdHlsZXMgKyBcIl9FTU9fXCI7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGNsYXNzbmFtZXMgPSBmdW5jdGlvbiBjbGFzc25hbWVzKGFyZ3MpIHtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV07XG4gICAgaWYgKGFyZyA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YXIgdG9BZGQgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmcuc3R5bGVzICE9PSB1bmRlZmluZWQgJiYgYXJnLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdZb3UgaGF2ZSBwYXNzZWQgc3R5bGVzIGNyZWF0ZWQgd2l0aCBgY3NzYCBmcm9tIGBAZW1vdGlvbi9yZWFjdGAgcGFja2FnZSB0byB0aGUgYGN4YC5cXG4nICsgJ2BjeGAgaXMgbWVhbnQgdG8gY29tcG9zZSBjbGFzcyBuYW1lcyAoc3RyaW5ncykgc28geW91IHNob3VsZCBjb252ZXJ0IHRob3NlIHN0eWxlcyB0byBhIGNsYXNzIG5hbWUgYnkgcGFzc2luZyB0aGVtIHRvIHRoZSBgY3NzYCByZWNlaXZlZCBmcm9tIDxDbGFzc05hbWVzLz4gY29tcG9uZW50LicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b0FkZCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGFyZykge1xuICAgICAgICAgICAgICBpZiAoYXJnW2tdICYmIGspIHtcbiAgICAgICAgICAgICAgICB0b0FkZCAmJiAodG9BZGQgKz0gJyAnKTtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRvQWRkID0gYXJnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQWRkKSB7XG4gICAgICBjbHMgJiYgKGNscyArPSAnICcpO1xuICAgICAgY2xzICs9IHRvQWRkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xuXG5mdW5jdGlvbiBtZXJnZShyZWdpc3RlcmVkLCBjc3MsIGNsYXNzTmFtZSkge1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtdO1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWUpO1xuXG4gIGlmIChyZWdpc3RlcmVkU3R5bGVzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgcmV0dXJuIHJhd0NsYXNzTmFtZSArIGNzcyhyZWdpc3RlcmVkU3R5bGVzKTtcbn1cblxudmFyIE5vb3AgPSBmdW5jdGlvbiBOb29wKCkge1xuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBDbGFzc05hbWVzID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIHZhciBoYXNSZW5kZXJlZCA9IGZhbHNlO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3NzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcblxuICAgIHtcbiAgICAgIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgfTtcblxuICB2YXIgY3ggPSBmdW5jdGlvbiBjeCgpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoY2FjaGUucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgfTtcblxuICB2YXIgY29udGVudCA9IHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgdGhlbWU6IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KVxuICB9O1xuICB2YXIgZWxlID0gcHJvcHMuY2hpbGRyZW4oY29udGVudCk7XG4gIGhhc1JlbmRlcmVkID0gdHJ1ZTtcbiAgdmFyIHBvc3NpYmx5U3R5bGVFbGVtZW50ID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTm9vcCwgbnVsbCk7XG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIHBvc3NpYmx5U3R5bGVFbGVtZW50LCBlbGUpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIENsYXNzTmFtZXMuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNsYXNzTmFtZXMnO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7IC8vICMxNzI3IGZvciBzb21lIHJlYXNvbiBKZXN0IGV2YWx1YXRlcyBtb2R1bGVzIHR3aWNlIGlmIHNvbWUgY29uc3VtaW5nIG1vZHVsZSBnZXRzIG1vY2tlZCB3aXRoIGplc3QubW9ja1xuXG4gIHZhciBpc0plc3QgPSB0eXBlb2YgamVzdCAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgaWYgKGlzQnJvd3NlciAmJiAhaXNKZXN0KSB7XG4gICAgLy8gZ2xvYmFsVGhpcyBoYXMgd2lkZSBicm93c2VyIHN1cHBvcnQgLSBodHRwczovL2Nhbml1c2UuY29tLz9zZWFyY2g9Z2xvYmFsVGhpcywgTm9kZS5qcyAxMiBhbmQgbGF0ZXJcbiAgICB2YXIgZ2xvYmFsQ29udGV4dCA9IC8vICRGbG93SWdub3JlXG4gICAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgOiBpc0Jyb3dzZXIgPyB3aW5kb3cgOiBnbG9iYWw7XG4gICAgdmFyIGdsb2JhbEtleSA9IFwiX19FTU9USU9OX1JFQUNUX1wiICsgcGtnLnZlcnNpb24uc3BsaXQoJy4nKVswXSArIFwiX19cIjtcblxuICAgIGlmIChnbG9iYWxDb250ZXh0W2dsb2JhbEtleV0pIHtcbiAgICAgIGNvbnNvbGUud2FybignWW91IGFyZSBsb2FkaW5nIEBlbW90aW9uL3JlYWN0IHdoZW4gaXQgaXMgYWxyZWFkeSBsb2FkZWQuIFJ1bm5pbmcgJyArICdtdWx0aXBsZSBpbnN0YW5jZXMgbWF5IGNhdXNlIHByb2JsZW1zLiBUaGlzIGNhbiBoYXBwZW4gaWYgbXVsdGlwbGUgJyArICd2ZXJzaW9ucyBhcmUgdXNlZCwgb3IgaWYgbXVsdGlwbGUgYnVpbGRzIG9mIHRoZSBzYW1lIHZlcnNpb24gYXJlICcgKyAndXNlZC4nKTtcbiAgICB9XG5cbiAgICBnbG9iYWxDb250ZXh0W2dsb2JhbEtleV0gPSB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCB7IENsYXNzTmFtZXMsIEdsb2JhbCwganN4IGFzIGNyZWF0ZUVsZW1lbnQsIGNzcywganN4LCBrZXlmcmFtZXMgfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsIHx8IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHbG9iYWxTdHlsZXMocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHN0eWxlcyxcbiAgICBkZWZhdWx0VGhlbWUgPSB7fVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGdsb2JhbFN0eWxlcyA9IHR5cGVvZiBzdHlsZXMgPT09ICdmdW5jdGlvbicgPyB0aGVtZUlucHV0ID0+IHN0eWxlcyhpc0VtcHR5KHRoZW1lSW5wdXQpID8gZGVmYXVsdFRoZW1lIDogdGhlbWVJbnB1dCkgOiBzdHlsZXM7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChHbG9iYWwsIHtcbiAgICBzdHlsZXM6IGdsb2JhbFN0eWxlc1xuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdsb2JhbFN0eWxlcy5wcm9wVHlwZXMgPSB7XG4gIGRlZmF1bHRUaGVtZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc3R5bGVzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pXG59IDogdm9pZCAwOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyBhcyBTeXN0ZW1HbG9iYWxTdHlsZXMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4uL3N0eWxlcy9kZWZhdWx0VGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuZnVuY3Rpb24gR2xvYmFsU3R5bGVzKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTeXN0ZW1HbG9iYWxTdHlsZXMsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG4gIH0pKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgc3R5bGVzIHlvdSB3YW50IHRvIGFwcGx5IGdsb2JhbGx5LlxuICAgKi9cbiAgc3R5bGVzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBfX2Vtb3Rpb25fc3R5bGVzOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWRcbiAgfSksIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBHbG9iYWxTdHlsZXM7IiwiLy8gU3VwcG9ydHMgZGV0ZXJtaW5hdGlvbiBvZiBpc0NvbnRyb2xsZWQoKS5cbi8vIENvbnRyb2xsZWQgaW5wdXQgYWNjZXB0cyBpdHMgY3VycmVudCB2YWx1ZSBhcyBhIHByb3AuXG4vL1xuLy8gQHNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzXG4vLyBAcGFyYW0gdmFsdWVcbi8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHN0cmluZyAoaW5jbHVkaW5nICcnKSBvciBudW1iZXIgKGluY2x1ZGluZyB6ZXJvKVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICEoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKTtcbn0gLy8gRGV0ZXJtaW5lIGlmIGZpZWxkIGlzIGVtcHR5IG9yIGZpbGxlZC5cbi8vIFJlc3BvbnNlIGRldGVybWluZXMgaWYgbGFiZWwgaXMgcHJlc2VudGVkIGFib3ZlIGZpZWxkIG9yIGFzIHBsYWNlaG9sZGVyLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEBwYXJhbSBTU1Jcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vdCBwcmVzZW50IG9yIGVtcHR5IHN0cmluZy5cbi8vICAgICAgICAgICAgICAgICAgICBUcnVlIHdoZW4gYW55IG51bWJlciBvciBzdHJpbmcgd2l0aCBsZW5ndGguXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGxlZChvYmosIFNTUiA9IGZhbHNlKSB7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufSAvLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUlucHV0QmFzZScsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRCYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUlucHV0QmFzZScsIFsncm9vdCcsICdmb3JtQ29udHJvbCcsICdmb2N1c2VkJywgJ2Rpc2FibGVkJywgJ2Fkb3JuZWRTdGFydCcsICdhZG9ybmVkRW5kJywgJ2Vycm9yJywgJ3NpemVTbWFsbCcsICdtdWx0aWxpbmUnLCAnY29sb3JTZWNvbmRhcnknLCAnZnVsbFdpZHRoJywgJ2hpZGRlbkxhYmVsJywgJ2lucHV0JywgJ2lucHV0U2l6ZVNtYWxsJywgJ2lucHV0TXVsdGlsaW5lJywgJ2lucHV0VHlwZVNlYXJjaCcsICdpbnB1dEFkb3JuZWRTdGFydCcsICdpbnB1dEFkb3JuZWRFbmQnLCAnaW5wdXRIaWRkZW5MYWJlbCddKTtcbmV4cG9ydCBkZWZhdWx0IGlucHV0QmFzZUNsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFyaWEtZGVzY3JpYmVkYnlcIiwgXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXNcIiwgXCJlbmRBZG9ybm1lbnRcIiwgXCJlcnJvclwiLCBcImZ1bGxXaWR0aFwiLCBcImlkXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJpbnB1dFByb3BzXCIsIFwiaW5wdXRSZWZcIiwgXCJtYXJnaW5cIiwgXCJtYXhSb3dzXCIsIFwibWluUm93c1wiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJTdWZmaXhcIiwgXCJyb3dzXCIsIFwic2l6ZVwiLCBcInN0YXJ0QWRvcm5tZW50XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSwgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzLCBpc0hvc3RDb21wb25lbnQsIFRleHRhcmVhQXV0b3NpemUgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IEdsb2JhbFN0eWxlcyBmcm9tICcuLi9HbG9iYWxTdHlsZXMnO1xuaW1wb3J0IHsgaXNGaWxsZWQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBpbnB1dEJhc2VDbGFzc2VzLCB7IGdldElucHV0QmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vaW5wdXRCYXNlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IHJvb3RPdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5mb3JtQ29udHJvbCAmJiBzdHlsZXMuZm9ybUNvbnRyb2wsIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYgc3R5bGVzLmFkb3JuZWRTdGFydCwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYgc3R5bGVzLmFkb3JuZWRFbmQsIG93bmVyU3RhdGUuZXJyb3IgJiYgc3R5bGVzLmVycm9yLCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgc3R5bGVzLnNpemVTbWFsbCwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgc3R5bGVzLm11bHRpbGluZSwgb3duZXJTdGF0ZS5jb2xvciAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoLCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHN0eWxlcy5oaWRkZW5MYWJlbF07XG59O1xuZXhwb3J0IGNvbnN0IGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLmlucHV0LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgc3R5bGVzLmlucHV0U2l6ZVNtYWxsLCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBzdHlsZXMuaW5wdXRNdWx0aWxpbmUsIG93bmVyU3RhdGUudHlwZSA9PT0gJ3NlYXJjaCcgJiYgc3R5bGVzLmlucHV0VHlwZVNlYXJjaCwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiBzdHlsZXMuaW5wdXRBZG9ybmVkU3RhcnQsIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHN0eWxlcy5pbnB1dEFkb3JuZWRFbmQsIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgc3R5bGVzLmlucHV0SGlkZGVuTGFiZWxdO1xufTtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZW5kQWRvcm5tZW50LFxuICAgIGZvY3VzZWQsXG4gICAgZm9ybUNvbnRyb2wsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsLFxuICAgIG11bHRpbGluZSxcbiAgICBzaXplLFxuICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgIHR5cGVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZXJyb3IgJiYgJ2Vycm9yJywgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnLCBmb2N1c2VkICYmICdmb2N1c2VkJywgZm9ybUNvbnRyb2wgJiYgJ2Zvcm1Db250cm9sJywgc2l6ZSA9PT0gJ3NtYWxsJyAmJiAnc2l6ZVNtYWxsJywgbXVsdGlsaW5lICYmICdtdWx0aWxpbmUnLCBzdGFydEFkb3JubWVudCAmJiAnYWRvcm5lZFN0YXJ0JywgZW5kQWRvcm5tZW50ICYmICdhZG9ybmVkRW5kJywgaGlkZGVuTGFiZWwgJiYgJ2hpZGRlbkxhYmVsJ10sXG4gICAgaW5wdXQ6IFsnaW5wdXQnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCB0eXBlID09PSAnc2VhcmNoJyAmJiAnaW5wdXRUeXBlU2VhcmNoJywgbXVsdGlsaW5lICYmICdpbnB1dE11bHRpbGluZScsIHNpemUgPT09ICdzbWFsbCcgJiYgJ2lucHV0U2l6ZVNtYWxsJywgaGlkZGVuTGFiZWwgJiYgJ2lucHV0SGlkZGVuTGFiZWwnLCBzdGFydEFkb3JubWVudCAmJiAnaW5wdXRBZG9ybmVkU3RhcnQnLCBlbmRBZG9ybm1lbnQgJiYgJ2lucHV0QWRvcm5lZEVuZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBJbnB1dEJhc2VSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEJhc2UnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiByb290T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5MSwge1xuICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gIGxpbmVIZWlnaHQ6ICcxLjQzNzVlbScsXG4gIC8vIDIzcHhcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIGZ1bGxXaWR0aC5cbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGN1cnNvcjogJ3RleHQnLFxuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgW2AmLiR7aW5wdXRCYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWQsXG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfVxufSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgX2V4dGVuZHMoe1xuICBwYWRkaW5nOiAnNHB4IDAgNXB4J1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ1RvcDogMVxufSksIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgd2lkdGg6ICcxMDAlJ1xufSkpO1xuZXhwb3J0IGNvbnN0IElucHV0QmFzZUNvbXBvbmVudCA9IHN0eWxlZCgnaW5wdXQnLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEJhc2UnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IHBsYWNlaG9sZGVyID0ge1xuICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICBvcGFjaXR5OiBsaWdodCA/IDAuNDIgOiAwLjUsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICB9KVxuICB9O1xuICBjb25zdCBwbGFjZWhvbGRlckhpZGRlbiA9IHtcbiAgICBvcGFjaXR5OiAnMCAhaW1wb3J0YW50J1xuICB9O1xuICBjb25zdCBwbGFjZWhvbGRlclZpc2libGUgPSB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZm9udDogJ2luaGVyaXQnLFxuICAgIGxldHRlclNwYWNpbmc6ICdpbmhlcml0JyxcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgcGFkZGluZzogJzRweCAwIDVweCcsXG4gICAgYm9yZGVyOiAwLFxuICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgaGVpZ2h0OiAnMS40Mzc1ZW0nLFxuICAgIC8vIFJlc2V0IDIzcHh0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlc2V0IGZvciBTYWZhcmlcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIC8vIE1ha2UgdGhlIGZsZXggaXRlbSBzaHJpbmsgd2l0aCBGaXJlZm94XG4gICAgbWluV2lkdGg6IDAsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICAvLyBGaXggSUUxMSB3aWR0aCBpc3N1ZVxuICAgIGFuaW1hdGlvbk5hbWU6ICdtdWktYXV0by1maWxsLWNhbmNlbCcsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246ICcxMG1zJyxcbiAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgLy8gRmlyZWZveCAxOStcbiAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAvLyBJRTExXG4gICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgIC8vIEVkZ2VcbiAgICAnJjpmb2N1cyc6IHtcbiAgICAgIG91dGxpbmU6IDBcbiAgICB9LFxuICAgIC8vIFJlc2V0IEZpcmVmb3ggaW52YWxpZCByZXF1aXJlZCBpbnB1dCBzdHlsZVxuICAgICcmOmludmFsaWQnOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgIH0sXG4gICAgJyY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24nOiB7XG4gICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJ1xuICAgIH0sXG4gICAgLy8gU2hvdyBhbmQgaGlkZSB0aGUgcGxhY2Vob2xkZXIgbG9naWNcbiAgICBbYGxhYmVsW2RhdGEtc2hyaW5rPWZhbHNlXSArIC4ke2lucHV0QmFzZUNsYXNzZXMuZm9ybUNvbnRyb2x9ICZgXToge1xuICAgICAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgJyY6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBJRTExXG4gICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBFZGdlXG4gICAgICAnJjpmb2N1czo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOmZvY3VzOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgIC8vIElFMTFcbiAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuXG4gICAgfSxcbiAgICBbYCYuJHtpbnB1dEJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgLy8gUmVzZXQgaU9TIG9wYWNpdHlcbiAgICAgIFdlYmtpdFRleHRGaWxsQ29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZCAvLyBGaXggb3BhY2l0eSBTYWZhcmkgYnVnXG5cbiAgICB9LFxuICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogJzUwMDBzJyxcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICdtdWktYXV0by1maWxsJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nVG9wOiAxXG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICByZXNpemU6ICdub25lJyxcbiAgICBwYWRkaW5nOiAwLFxuICAgIHBhZGRpbmdUb3A6IDBcbiAgfSwgb3duZXJTdGF0ZS50eXBlID09PSAnc2VhcmNoJyAmJiB7XG4gICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICBNb3pBcHBlYXJhbmNlOiAndGV4dGZpZWxkJ1xuICB9KTtcbn0pO1xuXG5jb25zdCBpbnB1dEdsb2JhbFN0eWxlcyA9IC8qI19fUFVSRV9fKi9fanN4KEdsb2JhbFN0eWxlcywge1xuICBzdHlsZXM6IHtcbiAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsJzoge1xuICAgICAgZnJvbToge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsLWNhbmNlbCc6IHtcbiAgICAgIGZyb206IHtcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG4vKipcbiAqIGBJbnB1dEJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhbiBpbnB1dC5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBzdGF0ZSBsb2dpYy5cbiAqL1xuXG5cbmNvbnN0IElucHV0QmFzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0QmFzZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgYXV0b0NvbXBsZXRlLFxuICAgIGF1dG9Gb2N1cyxcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIGRlZmF1bHRWYWx1ZSxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzLFxuICAgIGVuZEFkb3JubWVudCxcbiAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICBpZCxcbiAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgaW5wdXRQcm9wczogaW5wdXRQcm9wc1Byb3AgPSB7fSxcbiAgICBpbnB1dFJlZjogaW5wdXRSZWZQcm9wLFxuICAgIG1heFJvd3MsXG4gICAgbWluUm93cyxcbiAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICBuYW1lLFxuICAgIG9uQmx1cixcbiAgICBvbkNoYW5nZSxcbiAgICBvbkNsaWNrLFxuICAgIG9uRm9jdXMsXG4gICAgb25LZXlEb3duLFxuICAgIG9uS2V5VXAsXG4gICAgcGxhY2Vob2xkZXIsXG4gICAgcmVhZE9ubHksXG4gICAgcmVuZGVyU3VmZml4LFxuICAgIHJvd3MsXG4gICAgc3RhcnRBZG9ybm1lbnQsXG4gICAgdHlwZSA9ICd0ZXh0JyxcbiAgICB2YWx1ZTogdmFsdWVQcm9wXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCB2YWx1ZSA9IGlucHV0UHJvcHNQcm9wLnZhbHVlICE9IG51bGwgPyBpbnB1dFByb3BzUHJvcC52YWx1ZSA6IHZhbHVlUHJvcDtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBoYW5kbGVJbnB1dFJlZldhcm5pbmcgPSBSZWFjdC51c2VDYWxsYmFjayhpbnN0YW5jZSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5ub2RlTmFtZSAhPT0gJ0lOUFVUJyAmJiAhaW5zdGFuY2UuZm9jdXMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogWW91IGhhdmUgcHJvdmlkZWQgYSBgaW5wdXRDb21wb25lbnRgIHRvIHRoZSBpbnB1dCBjb21wb25lbnQnLCAndGhhdCBkb2VzIG5vdCBjb3JyZWN0bHkgaGFuZGxlIHRoZSBgcmVmYCBwcm9wLicsICdNYWtlIHN1cmUgdGhlIGByZWZgIHByb3AgaXMgY2FsbGVkIHdpdGggYSBIVE1MSW5wdXRFbGVtZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtdKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3AgPSB1c2VGb3JrUmVmKGlucHV0UHJvcHNQcm9wLnJlZiwgaGFuZGxlSW5wdXRSZWZXYXJuaW5nKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRSZWZQcm9wID0gdXNlRm9ya1JlZihpbnB1dFJlZlByb3AsIGhhbmRsZUlucHV0UHJvcHNSZWZQcm9wKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRSZWYgPSB1c2VGb3JrUmVmKGlucHV0UmVmLCBoYW5kbGVJbnB1dFJlZlByb3ApO1xuICBjb25zdCBbZm9jdXNlZCwgc2V0Rm9jdXNlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIG11aUZvcm1Db250cm9sLnJlZ2lzdGVyRWZmZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSwgW211aUZvcm1Db250cm9sXSk7XG4gIH1cblxuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnY29sb3InLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnaGlkZGVuTGFiZWwnLCAnc2l6ZScsICdyZXF1aXJlZCcsICdmaWxsZWQnXVxuICB9KTtcbiAgZmNzLmZvY3VzZWQgPSBtdWlGb3JtQ29udHJvbCA/IG11aUZvcm1Db250cm9sLmZvY3VzZWQgOiBmb2N1c2VkOyAvLyBUaGUgYmx1ciB3b24ndCBmaXJlIHdoZW4gdGhlIGRpc2FibGVkIHN0YXRlIGlzIHNldCBvbiBhIGZvY3VzZWQgaW5wdXQuXG4gIC8vIFdlIG5lZWQgdG8gYm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlIG1hbnVhbGx5LlxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFtdWlGb3JtQ29udHJvbCAmJiBkaXNhYmxlZCAmJiBmb2N1c2VkKSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcblxuICAgICAgaWYgKG9uQmx1cikge1xuICAgICAgICBvbkJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgZGlzYWJsZWQsIGZvY3VzZWQsIG9uQmx1cl0pO1xuICBjb25zdCBvbkZpbGxlZCA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRmlsbGVkO1xuICBjb25zdCBvbkVtcHR5ID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eTtcbiAgY29uc3QgY2hlY2tEaXJ0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKG9iaiA9PiB7XG4gICAgaWYgKGlzRmlsbGVkKG9iaikpIHtcbiAgICAgIGlmIChvbkZpbGxlZCkge1xuICAgICAgICBvbkZpbGxlZCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25FbXB0eSkge1xuICAgICAgb25FbXB0eSgpO1xuICAgIH1cbiAgfSwgW29uRmlsbGVkLCBvbkVtcHR5XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNDb250cm9sbGVkKSB7XG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3ZhbHVlLCBjaGVja0RpcnR5LCBpc0NvbnRyb2xsZWRdKTtcblxuICBjb25zdCBoYW5kbGVGb2N1cyA9IGV2ZW50ID0+IHtcbiAgICAvLyBGaXggYSBidWcgd2l0aCBJRTExIHdoZXJlIHRoZSBmb2N1cy9ibHVyIGV2ZW50cyBhcmUgdHJpZ2dlcmVkXG4gICAgLy8gd2hpbGUgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICBpZiAoZmNzLmRpc2FibGVkKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uRm9jdXMpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkJsdXIpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQmx1cihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uQmx1cikge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25CbHVyKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChldmVudCwgLi4uYXJncykgPT4ge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZXZlbnQudGFyZ2V0IHx8IGlucHV0UmVmLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IEV4cGVjdGVkIHZhbGlkIGlucHV0IHRhcmdldC4gRGlkIHlvdSB1c2UgYSBjdXN0b20gXFxgaW5wdXRDb21wb25lbnRcXGAgYW5kIGZvcmdldCB0byBmb3J3YXJkIHJlZnM/IFNlZSBodHRwczovL211aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEpKTtcbiAgICAgIH1cblxuICAgICAgY2hlY2tEaXJ0eSh7XG4gICAgICAgIHZhbHVlOiBlbGVtZW50LnZhbHVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQ2hhbmdlKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9IC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcblxuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgLi4uYXJncyk7XG4gICAgfVxuICB9OyAvLyBDaGVjayB0aGUgaW5wdXQgc3RhdGUgb24gbW91bnQsIGluIGNhc2UgaXQgd2FzIGZpbGxlZCBieSB0aGUgdXNlclxuICAvLyBvciBhdXRvIGZpbGxlZCBieSB0aGUgYnJvd3NlciBiZWZvcmUgdGhlIGh5ZHJhdGlvbiAoZm9yIFNTUikuXG5cblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNoZWNrRGlydHkoaW5wdXRSZWYuY3VycmVudCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgbGV0IElucHV0Q29tcG9uZW50ID0gaW5wdXRDb21wb25lbnQ7XG4gIGxldCBpbnB1dFByb3BzID0gaW5wdXRQcm9wc1Byb3A7XG5cbiAgaWYgKG11bHRpbGluZSAmJiBJbnB1dENvbXBvbmVudCA9PT0gJ2lucHV0Jykge1xuICAgIGlmIChyb3dzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAobWluUm93cyB8fCBtYXhSb3dzKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdNVUk6IFlvdSBjYW4gbm90IHVzZSB0aGUgYG1pblJvd3NgIG9yIGBtYXhSb3dzYCBwcm9wcyB3aGVuIHRoZSBpbnB1dCBgcm93c2AgcHJvcCBpcyBzZXQuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBtaW5Sb3dzOiByb3dzLFxuICAgICAgICBtYXhSb3dzOiByb3dzXG4gICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBtYXhSb3dzLFxuICAgICAgICBtaW5Sb3dzXG4gICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICB9XG5cbiAgICBJbnB1dENvbXBvbmVudCA9IFRleHRhcmVhQXV0b3NpemU7XG4gIH1cblxuICBjb25zdCBoYW5kbGVBdXRvRmlsbCA9IGV2ZW50ID0+IHtcbiAgICAvLyBQcm92aWRlIGEgZmFrZSB2YWx1ZSBhcyBDaHJvbWUgbWlnaHQgbm90IGxldCB5b3UgYWNjZXNzIGl0IGZvciBzZWN1cml0eSByZWFzb25zLlxuICAgIGNoZWNrRGlydHkoZXZlbnQuYW5pbWF0aW9uTmFtZSA9PT0gJ211aS1hdXRvLWZpbGwtY2FuY2VsJyA/IGlucHV0UmVmLmN1cnJlbnQgOiB7XG4gICAgICB2YWx1ZTogJ3gnXG4gICAgfSk7XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLnNldEFkb3JuZWRTdGFydChCb29sZWFuKHN0YXJ0QWRvcm5tZW50KSk7XG4gICAgfVxuICB9LCBbbXVpRm9ybUNvbnRyb2wsIHN0YXJ0QWRvcm5tZW50XSk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yOiBmY3MuY29sb3IgfHwgJ3ByaW1hcnknLFxuICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgZW5kQWRvcm5tZW50LFxuICAgIGVycm9yOiBmY3MuZXJyb3IsXG4gICAgZm9jdXNlZDogZmNzLmZvY3VzZWQsXG4gICAgZm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbDogZmNzLmhpZGRlbkxhYmVsLFxuICAgIG11bHRpbGluZSxcbiAgICBzaXplOiBmY3Muc2l6ZSxcbiAgICBzdGFydEFkb3JubWVudCxcbiAgICB0eXBlXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgUm9vdCA9IGNvbXBvbmVudHMuUm9vdCB8fCBJbnB1dEJhc2VSb290O1xuICBjb25zdCByb290UHJvcHMgPSBjb21wb25lbnRzUHJvcHMucm9vdCB8fCB7fTtcbiAgY29uc3QgSW5wdXQgPSBjb21wb25lbnRzLklucHV0IHx8IElucHV0QmFzZUNvbXBvbmVudDtcbiAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHt9LCBpbnB1dFByb3BzLCBjb21wb25lbnRzUHJvcHMuaW5wdXQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFshZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyAmJiBpbnB1dEdsb2JhbFN0eWxlcywgLyojX19QVVJFX18qL19qc3hzKFJvb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsICFpc0hvc3RDb21wb25lbnQoUm9vdCkgJiYge1xuICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHJvb3RQcm9wcy5vd25lclN0YXRlKVxuICAgIH0sIHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2tcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgcm9vdFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKSxcbiAgICAgIGNoaWxkcmVuOiBbc3RhcnRBZG9ybm1lbnQsIC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KElucHV0LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgICBcImFyaWEtaW52YWxpZFwiOiBmY3MuZXJyb3IsXG4gICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBvbkFuaW1hdGlvblN0YXJ0OiBoYW5kbGVBdXRvRmlsbCxcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICAgICAgICBvbktleVVwOiBvbktleVVwLFxuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSwgaW5wdXRQcm9wcywgIWlzSG9zdENvbXBvbmVudChJbnB1dCkgJiYge1xuICAgICAgICAgIGFzOiBJbnB1dENvbXBvbmVudCxcbiAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgaW5wdXRQcm9wcy5vd25lclN0YXRlKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgcmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pbnB1dCwgaW5wdXRQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzXG4gICAgICAgIH0pKVxuICAgICAgfSksIGVuZEFkb3JubWVudCwgcmVuZGVyU3VmZml4ID8gcmVuZGVyU3VmZml4KF9leHRlbmRzKHt9LCBmY3MsIHtcbiAgICAgICAgc3RhcnRBZG9ybm1lbnRcbiAgICAgIH0pKSA6IG51bGxdXG4gICAgfSkpXVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXRCYXNlLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ3ByaW1hcnknYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgSW5wdXRCYXNlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcblxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIElucHV0LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgR2xvYmFsU3R5bGVzIGZvciB0aGUgYXV0by1maWxsIGtleWZyYW1lcyB3aWxsIG5vdCBiZSBpbmplY3RlZC9yZW1vdmVkIG9uIG1vdW50L3VubW91bnQuIE1ha2Ugc3VyZSB0byBpbmplY3QgdGhlbSBhdCB0aGUgdG9wIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqIFRoaXMgb3B0aW9uIGlzIGludGVuZGVkIHRvIGhlbHAgd2l0aCBib29zdGluZyB0aGUgaW5pdGlhbCByZW5kZXJpbmcgcGVyZm9ybWFuY2UgaWYgeW91IGFyZSBsb2FkaW5nIGEgYmlnIGFtb3VudCBvZiBJbnB1dCBjb21wb25lbnRzIGF0IG9uY2UuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5wdXQnXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ25vbmUnYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSBgdGV4dGFyZWFgIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYGlucHV0YCBpcyBibHVycmVkLlxuICAgKlxuICAgKiBOb3RpY2UgdGhhdCB0aGUgZmlyc3QgYXJndW1lbnQgKGV2ZW50KSBtaWdodCBiZSB1bmRlZmluZWQuXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgYGlucHV0YCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlbmRlclN1ZmZpeDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXRCYXNlOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjb21wb25lbnRzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJsYWJlbFwiLCBcIm11bHRpbGluZVwiLCBcIm5vdGNoZWRcIiwgXCJ0eXBlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBOb3RjaGVkT3V0bGluZSBmcm9tICcuL05vdGNoZWRPdXRsaW5lJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgb3V0bGluZWRJbnB1dENsYXNzZXMsIHsgZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vb3V0bGluZWRJbnB1dENsYXNzZXMnO1xuaW1wb3J0IElucHV0QmFzZSwgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIG5vdGNoZWRPdXRsaW5lOiBbJ25vdGNoZWRPdXRsaW5lJ10sXG4gICAgaW5wdXQ6IFsnaW5wdXQnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IE91dGxpbmVkSW5wdXRSb290ID0gc3R5bGVkKElucHV0QmFzZVJvb3QsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aU91dGxpbmVkSW5wdXQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiBpbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IGJvcmRlckNvbG9yID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgIFtgJjpob3ZlciAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSxcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIFtgJjpob3ZlciAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgICBib3JkZXJDb2xvclxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7b3V0bGluZWRJbnB1dENsYXNzZXMuZm9jdXNlZH0gLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gICAgICBib3JkZXJXaWR0aDogMlxuICAgIH0sXG4gICAgW2AmLiR7b3V0bGluZWRJbnB1dENsYXNzZXMuZXJyb3J9IC4ke291dGxpbmVkSW5wdXRDbGFzc2VzLm5vdGNoZWRPdXRsaW5lfWBdOiB7XG4gICAgICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcbiAgICBbYCYuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5kaXNhYmxlZH0gLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ0xlZnQ6IDE0XG4gIH0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nUmlnaHQ6IDE0XG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgICBwYWRkaW5nOiAnMTYuNXB4IDE0cHgnXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZzogJzguNXB4IDE0cHgnXG4gIH0pKTtcbn0pO1xuY29uc3QgTm90Y2hlZE91dGxpbmVSb290ID0gc3R5bGVkKE5vdGNoZWRPdXRsaW5lLCB7XG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0JyxcbiAgc2xvdDogJ05vdGNoZWRPdXRsaW5lJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubm90Y2hlZE91dGxpbmVcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknXG59KSk7XG5jb25zdCBPdXRsaW5lZElucHV0SW5wdXQgPSBzdHlsZWQoSW5wdXRCYXNlSW5wdXQsIHtcbiAgbmFtZTogJ011aU91dGxpbmVkSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcGFkZGluZzogJzE2LjVweCAxNHB4JyxcbiAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICBjYXJldENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmc6ICc4LjVweCAxNHB4J1xufSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYge1xuICBwYWRkaW5nOiAwXG59LCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDBcbn0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ1JpZ2h0OiAwXG59KSk7XG5jb25zdCBPdXRsaW5lZElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gT3V0bGluZWRJbnB1dChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9SZWFjdCRGcmFnbWVudDtcblxuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICBsYWJlbCxcbiAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICBub3RjaGVkLFxuICAgIHR5cGUgPSAndGV4dCdcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhwcm9wcyk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3JlcXVpcmVkJ11cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChJbnB1dEJhc2UsIF9leHRlbmRzKHtcbiAgICBjb21wb25lbnRzOiBfZXh0ZW5kcyh7XG4gICAgICBSb290OiBPdXRsaW5lZElucHV0Um9vdCxcbiAgICAgIElucHV0OiBPdXRsaW5lZElucHV0SW5wdXRcbiAgICB9LCBjb21wb25lbnRzKSxcbiAgICByZW5kZXJTdWZmaXg6IHN0YXRlID0+IC8qI19fUFVSRV9fKi9fanN4KE5vdGNoZWRPdXRsaW5lUm9vdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLm5vdGNoZWRPdXRsaW5lLFxuICAgICAgbGFiZWw6IGxhYmVsICYmIGZjcy5yZXF1aXJlZCA/IF9SZWFjdCRGcmFnbWVudCB8fCAoX1JlYWN0JEZyYWdtZW50ID0gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICAgIGNoaWxkcmVuOiBbbGFiZWwsIFwiXFx4QTBcIiwgJyonXVxuICAgICAgfSkpIDogbGFiZWwsXG4gICAgICBub3RjaGVkOiB0eXBlb2Ygbm90Y2hlZCAhPT0gJ3VuZGVmaW5lZCcgPyBub3RjaGVkIDogQm9vbGVhbihzdGF0ZS5zdGFydEFkb3JubWVudCB8fCBzdGF0ZS5maWxsZWQgfHwgc3RhdGUuZm9jdXNlZClcbiAgICB9KSxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlciwge1xuICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBjbGFzc2VzLCB7XG4gICAgICBub3RjaGVkT3V0bGluZTogbnVsbFxuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gT3V0bGluZWRJbnB1dC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ3ByaW1hcnknYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgSW5wdXRCYXNlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5wdXQnXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgb2YgdGhlIGBpbnB1dGAuIEl0IGlzIG9ubHkgdXNlZCBmb3IgbGF5b3V0LiBUaGUgYWN0dWFsIGxhYmVsbGluZ1xuICAgKiBpcyBoYW5kbGVkIGJ5IGBJbnB1dExhYmVsYC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIGB0ZXh0YXJlYWAgZWxlbWVudCBpcyByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudCB8IEhUTUxJbnB1dEVsZW1lbnQ+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBgaW5wdXRgIGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIHJlcXVpcmVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55XG59IDogdm9pZCAwO1xuT3V0bGluZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IE91dGxpbmVkSW5wdXQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmNvbnN0IExpc3RDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBMaXN0Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdMaXN0Q29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDb250ZXh0OyIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUV2ZW50Q2FsbGJhY2sgYXMgdXNlRXZlbnRDYWxsYmFjayB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRXZlbnRDYWxsYmFjazsiLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VJc0ZvY3VzVmlzaWJsZSBhcyB1c2VJc0ZvY3VzVmlzaWJsZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlSXNGb2N1c1Zpc2libGU7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIHJ1biB0aGUgbWFwIGZ1bmN0aW9uIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHRoZSBrZXkgaXMgdGhlIGNvbXB1dGVkIG9uZVxuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gbWFwcGVyKGNoaWxkKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0gKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgaGFzTmV4dCA9IChrZXkgaW4gbmV4dENoaWxkTWFwcGluZyk7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuLyoqXG4gKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAqXG4gKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAqXG4gKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAqIGl0ZW1zLlxuICovXG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBub2RlIGlzIGB1bmRlZmluZWRgIHdoZW4gdXNlciBwcm92aWRlZCBgbm9kZVJlZmAgcHJvcFxuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG91Y2hSaXBwbGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvdWNoUmlwcGxlJywgc2xvdCk7XG59XG5jb25zdCB0b3VjaFJpcHBsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb3VjaFJpcHBsZScsIFsncm9vdCcsICdyaXBwbGUnLCAncmlwcGxlVmlzaWJsZScsICdyaXBwbGVQdWxzYXRlJywgJ2NoaWxkJywgJ2NoaWxkTGVhdmluZycsICdjaGlsZFB1bHNhdGUnXSk7XG5leHBvcnQgZGVmYXVsdCB0b3VjaFJpcHBsZUNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNlbnRlclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl07XG5cbmxldCBfID0gdCA9PiB0LFxuICAgIF90LFxuICAgIF90MixcbiAgICBfdDMsXG4gICAgX3Q0O1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbmltcG9ydCB0b3VjaFJpcHBsZUNsYXNzZXMgZnJvbSAnLi90b3VjaFJpcHBsZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IGNvbnN0IERFTEFZX1JJUFBMRSA9IDgwO1xuY29uc3QgZW50ZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgICBvcGFjaXR5OiAwLjE7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIG9wYWNpdHk6IDAuMztcbiAgfVxuYCkpO1xuY29uc3QgZXhpdEtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5gKSk7XG5jb25zdCBwdWxzYXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QzIHx8IChfdDMgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuXG4gIDUwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmApKTtcbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgc2tpcFN4OiB0cnVlXG59KSh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgekluZGV4OiAwLFxuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG59KTsgLy8gVGhpcyBgc3R5bGVkKClgIGZ1bmN0aW9uIGludm9rZXMga2V5ZnJhbWVzLiBgc3R5bGVkLWNvbXBvbmVudHNgIG9ubHkgc3VwcG9ydHMga2V5ZnJhbWVzXG4vLyBpbiBzdHJpbmcgdGVtcGxhdGVzLiBEbyBub3QgY29udmVydCB0aGVzZSBzdHlsZXMgaW4gSlMgb2JqZWN0IGFzIGl0IHdpbGwgYnJlYWsuXG5cbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJpcHBsZSA9IHN0eWxlZChSaXBwbGUsIHtcbiAgbmFtZTogJ011aVRvdWNoUmlwcGxlJyxcbiAgc2xvdDogJ1JpcHBsZSdcbn0pKF90NCB8fCAoX3Q0ID0gX2BcbiAgb3BhY2l0eTogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuXG4gICYuJHswfSB7XG4gICAgb3BhY2l0eTogMC4zO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAkezB9bXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgfVxuXG4gICYuJHswfSB7XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAkezB9bXM7XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xuICB9XG5cbiAgJiAuJHswfSB7XG4gICAgb3BhY2l0eTogMDtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICB9XG5cbiAgJiAuJHswfSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIC8qIEBub2ZsaXAgKi9cbiAgICBsZWZ0OiAwcHg7XG4gICAgdG9wOiAwO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMjUwMG1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAyMDBtcztcbiAgfVxuYCksIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCBlbnRlcktleWZyYW1lLCBEVVJBVElPTiwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlciwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRMZWF2aW5nLCBleGl0S2V5ZnJhbWUsIERVUkFUSU9OLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkUHVsc2F0ZSwgcHVsc2F0ZUtleWZyYW1lLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCk7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogVE9ETyB2NTogTWFrZSBwcml2YXRlXG4gKi9cblxuY29uc3QgVG91Y2hSaXBwbGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUb3VjaFJpcHBsZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjZW50ZXI6IGNlbnRlclByb3AgPSBmYWxzZSxcbiAgICBjbGFzc2VzID0ge30sXG4gICAgY2xhc3NOYW1lXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBbcmlwcGxlcywgc2V0UmlwcGxlc10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG4gIGNvbnN0IG5leHRLZXkgPSBSZWFjdC51c2VSZWYoMCk7XG4gIGNvbnN0IHJpcHBsZUNhbGxiYWNrID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyaXBwbGVDYWxsYmFjay5jdXJyZW50KSB7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50KCk7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIFtyaXBwbGVzXSk7IC8vIFVzZWQgdG8gZmlsdGVyIG91dCBtb3VzZSBlbXVsYXRlZCBldmVudHMgb24gbW9iaWxlLlxuXG4gIGNvbnN0IGlnbm9yaW5nTW91c2VEb3duID0gUmVhY3QudXNlUmVmKGZhbHNlKTsgLy8gV2UgdXNlIGEgdGltZXIgaW4gb3JkZXIgdG8gb25seSBzaG93IHRoZSByaXBwbGVzIGZvciB0b3VjaCBcImNsaWNrXCIgbGlrZSBldmVudHMuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gZGlzcGxheSB0aGUgcmlwcGxlIGZvciB0b3VjaCBzY3JvbGwgZXZlbnRzLlxuXG4gIGNvbnN0IHN0YXJ0VGltZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgaXMgdGhlIGhvb2sgY2FsbGVkIG9uY2UgdGhlIHByZXZpb3VzIHRpbWVvdXQgaXMgcmVhZHkuXG5cbiAgY29uc3Qgc3RhcnRUaW1lckNvbW1pdCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgY29udGFpbmVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIGNvbnN0IHN0YXJ0Q29tbWl0ID0gUmVhY3QudXNlQ2FsbGJhY2socGFyYW1zID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlLFxuICAgICAgcmlwcGxlWCxcbiAgICAgIHJpcHBsZVksXG4gICAgICByaXBwbGVTaXplLFxuICAgICAgY2JcbiAgICB9ID0gcGFyYW1zO1xuICAgIHNldFJpcHBsZXMob2xkUmlwcGxlcyA9PiBbLi4ub2xkUmlwcGxlcywgLyojX19QVVJFX18qL19qc3goVG91Y2hSaXBwbGVSaXBwbGUsIHtcbiAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgcmlwcGxlOiBjbHN4KGNsYXNzZXMucmlwcGxlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlKSxcbiAgICAgICAgcmlwcGxlVmlzaWJsZTogY2xzeChjbGFzc2VzLnJpcHBsZVZpc2libGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVWaXNpYmxlKSxcbiAgICAgICAgcmlwcGxlUHVsc2F0ZTogY2xzeChjbGFzc2VzLnJpcHBsZVB1bHNhdGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVQdWxzYXRlKSxcbiAgICAgICAgY2hpbGQ6IGNsc3goY2xhc3Nlcy5jaGlsZCwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkKSxcbiAgICAgICAgY2hpbGRMZWF2aW5nOiBjbHN4KGNsYXNzZXMuY2hpbGRMZWF2aW5nLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRMZWF2aW5nKSxcbiAgICAgICAgY2hpbGRQdWxzYXRlOiBjbHN4KGNsYXNzZXMuY2hpbGRQdWxzYXRlLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRQdWxzYXRlKVxuICAgICAgfSxcbiAgICAgIHRpbWVvdXQ6IERVUkFUSU9OLFxuICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZVxuICAgIH0sIG5leHRLZXkuY3VycmVudCldKTtcbiAgICBuZXh0S2V5LmN1cnJlbnQgKz0gMTtcbiAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gY2I7XG4gIH0sIFtjbGFzc2VzXSk7XG4gIGNvbnN0IHN0YXJ0ID0gUmVhY3QudXNlQ2FsbGJhY2soKGV2ZW50ID0ge30sIG9wdGlvbnMgPSB7fSwgY2IpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlID0gZmFsc2UsXG4gICAgICBjZW50ZXIgPSBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgIGZha2VFbGVtZW50ID0gZmFsc2UgLy8gRm9yIHRlc3QgcHVycG9zZXNcblxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQpIHtcbiAgICAgIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50ID0gZmFrZUVsZW1lbnQgPyBudWxsIDogY29udGFpbmVyLmN1cnJlbnQ7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQgPyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwXG4gICAgfTsgLy8gR2V0IHRoZSBzaXplIG9mIHRoZSByaXBwbGVcblxuICAgIGxldCByaXBwbGVYO1xuICAgIGxldCByaXBwbGVZO1xuICAgIGxldCByaXBwbGVTaXplO1xuXG4gICAgaWYgKGNlbnRlciB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdIDogZXZlbnQ7XG4gICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChjbGllbnRYIC0gcmVjdC5sZWZ0KTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKGNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgfVxuXG4gICAgaWYgKGNlbnRlcikge1xuICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydCgoMiAqIHJlY3Qud2lkdGggKiogMiArIHJlY3QuaGVpZ2h0ICoqIDIpIC8gMyk7IC8vIEZvciBzb21lIHJlYXNvbiB0aGUgYW5pbWF0aW9uIGlzIGJyb2tlbiBvbiBNb2JpbGUgQ2hyb21lIGlmIHRoZSBzaXplIGlzIGV2ZW4uXG5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIGNvbnN0IHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KHNpemVYICoqIDIgKyBzaXplWSAqKiAyKTtcbiAgICB9IC8vIFRvdWNoZSBkZXZpY2VzXG5cblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAvLyBjaGVjayB0aGF0IHRoaXMgaXNuJ3QgYW5vdGhlciB0b3VjaHN0YXJ0IGR1ZSB0byBtdWx0aXRvdWNoXG4gICAgICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCBvbmx5IGNsZWFyIGEgc2luZ2xlIHRpbWVyIHdoZW4gdW5tb3VudGluZyB3aGlsZSB0d29cbiAgICAgIC8vIGFyZSBydW5uaW5nXG4gICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9ICgpID0+IHtcbiAgICAgICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYLFxuICAgICAgICByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplLFxuICAgICAgICBjYlxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY2VudGVyUHJvcCwgc3RhcnRDb21taXRdKTtcbiAgY29uc3QgcHVsc2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzdGFydCh7fSwge1xuICAgICAgcHVsc2F0ZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbc3RhcnRdKTtcbiAgY29uc3Qgc3RvcCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCwgY2IpID0+IHtcbiAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTsgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cblxuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN0b3AoZXZlbnQsIGNiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgc2V0UmlwcGxlcyhvbGRSaXBwbGVzID0+IHtcbiAgICAgIGlmIChvbGRSaXBwbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG9sZFJpcHBsZXMuc2xpY2UoMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHtcbiAgICBwdWxzYXRlLFxuICAgIHN0YXJ0LFxuICAgIHN0b3BcbiAgfSksIFtwdWxzYXRlLCBzdGFydCwgc3RvcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVG91Y2hSaXBwbGVSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgdG91Y2hSaXBwbGVDbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiBjb250YWluZXJcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgICBleGl0OiB0cnVlLFxuICAgICAgY2hpbGRyZW46IHJpcHBsZXNcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvdWNoUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBzdGFydHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY29tcG9uZW50XG4gICAqIHJhdGhlciB0aGFuIGF0IHRoZSBwb2ludCBvZiBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG91Y2hSaXBwbGU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzZXMsXG4gICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgIHJpcHBsZVgsXG4gICAgcmlwcGxlWSxcbiAgICByaXBwbGVTaXplLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FeGl0ZWQsXG4gICAgdGltZW91dFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtsZWF2aW5nLCBzZXRMZWF2aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWUsIGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgY29uc3QgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgY29uc3QgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuXG4gIGlmICghaW5Qcm9wICYmICFsZWF2aW5nKSB7XG4gICAgc2V0TGVhdmluZyh0cnVlKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpblByb3AgJiYgb25FeGl0ZWQgIT0gbnVsbCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dChvbkV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW29uRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICB9KVxuICB9KTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCdXR0b25CYXNlJywgc2xvdCk7XG59XG5jb25zdCBidXR0b25CYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbkJhc2UnLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uQmFzZUNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJMaW5rQ29tcG9uZW50XCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uQ29udGV4dE1lbnVcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiwgcmVmVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgVG91Y2hSaXBwbGUgZnJvbSAnLi9Ub3VjaFJpcHBsZSc7XG5pbXBvcnQgYnV0dG9uQmFzZUNsYXNzZXMsIHsgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYnV0dG9uQmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZm9jdXNWaXNpYmxlICYmICdmb2N1c1Zpc2libGUnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG5cbiAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1Zpc2libGVDbGFzc05hbWUpIHtcbiAgICBjb21wb3NlZENsYXNzZXMucm9vdCArPSBgICR7Zm9jdXNWaXNpYmxlQ2xhc3NOYW1lfWA7XG4gIH1cblxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvbkJhc2VSb290ID0gc3R5bGVkKCdidXR0b24nLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwLFxuICBib3JkZXI6IDAsXG4gIG1hcmdpbjogMCxcbiAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gIGJvcmRlclJhZGl1czogMCxcbiAgcGFkZGluZzogMCxcbiAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICAvLyBSZXNldFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICBjb2xvcjogJ2luaGVyaXQnLFxuICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gIH0sXG4gIFtgJi4ke2J1dHRvbkJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIC8vIERpc2FibGUgbGluayBpbnRlcmFjdGlvbnNcbiAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICB9LFxuICAnQG1lZGlhIHByaW50Jzoge1xuICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gIH1cbn0pO1xuLyoqXG4gKiBgQnV0dG9uQmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGEgYnV0dG9uLlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIGZvY3VzL3JpcHBsZSBsb2dpYy5cbiAqL1xuXG5jb25zdCBCdXR0b25CYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQnV0dG9uQmFzZSdcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGFjdGlvbixcbiAgICBjZW50ZXJSaXBwbGUgPSBmYWxzZSxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50ID0gJ2J1dHRvbicsXG4gICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICBkaXNhYmxlUmlwcGxlID0gZmFsc2UsXG4gICAgZGlzYWJsZVRvdWNoUmlwcGxlID0gZmFsc2UsXG4gICAgZm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICBMaW5rQ29tcG9uZW50ID0gJ2EnLFxuICAgIG9uQmx1cixcbiAgICBvbkNsaWNrLFxuICAgIG9uQ29udGV4dE1lbnUsXG4gICAgb25EcmFnTGVhdmUsXG4gICAgb25Gb2N1cyxcbiAgICBvbkZvY3VzVmlzaWJsZSxcbiAgICBvbktleURvd24sXG4gICAgb25LZXlVcCxcbiAgICBvbk1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwLFxuICAgIG9uVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0LFxuICAgIHRhYkluZGV4ID0gMCxcbiAgICBUb3VjaFJpcHBsZVByb3BzLFxuICAgIHR5cGVcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmOiBmb2N1c1Zpc2libGVSZWZcbiAgfSA9IHVzZUlzRm9jdXNWaXNpYmxlKCk7XG4gIGNvbnN0IFtmb2N1c1Zpc2libGUsIHNldEZvY3VzVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSkge1xuICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gIH1cblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgKCkgPT4gKHtcbiAgICBmb2N1c1Zpc2libGU6ICgpID0+IHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9KSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNSaXBwbGUgJiYgIWRpc2FibGVSaXBwbGUpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlUmlwcGxlLCBmb2N1c1JpcHBsZSwgZm9jdXNWaXNpYmxlXSk7XG5cbiAgZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGVBY3Rpb24sIGV2ZW50Q2FsbGJhY2ssIHNraXBSaXBwbGVBY3Rpb24gPSBkaXNhYmxlVG91Y2hSaXBwbGUpIHtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaWdub3JlID0gc2tpcFJpcHBsZUFjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgaGFuZGxlTW91c2VEb3duID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvbk1vdXNlRG93bik7XG4gIGNvbnN0IGhhbmRsZUNvbnRleHRNZW51ID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uQ29udGV4dE1lbnUpO1xuICBjb25zdCBoYW5kbGVEcmFnTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25EcmFnTGVhdmUpO1xuICBjb25zdCBoYW5kbGVNb3VzZVVwID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uTW91c2VVcCk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZXZlbnQgPT4ge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoRW5kKTtcbiAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hNb3ZlKTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBldmVudCA9PiB7XG4gICAgaGFuZGxlQmx1clZpc2libGUoZXZlbnQpO1xuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcbiAgICBpZiAoIWJ1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICBidXR0b25SZWYuY3VycmVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgfVxuXG4gICAgaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KTtcblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG5cbiAgICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgaXNOb25OYXRpdmVCdXR0b24gPSAoKSA9PiB7XG4gICAgY29uc3QgYnV0dG9uID0gYnV0dG9uUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZik7XG4gIH07XG4gIC8qKlxuICAgKiBJRTExIHNoaW0gZm9yIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L3JlcGVhdFxuICAgKi9cblxuXG4gIGNvbnN0IGtleWRvd25SZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBoYW5kbGVLZXlEb3duID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgIWtleWRvd25SZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0YXJ0KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICdFbnRlcicgJiYgIWRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVLZXlVcCA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIGNhbGxpbmcgcHJldmVudERlZmF1bHQgaW4ga2V5VXAgb24gYSA8YnV0dG9uPiB3aWxsIG5vdCBkaXNwYXRjaCBhIGNsaWNrIGV2ZW50IGlmIFNwYWNlIGlzIHByZXNzZWRcbiAgICAvLyBodHRwczovL2NvZGVzYW5kYm94LmlvL3MvYnV0dG9uLWtleXVwLXByZXZlbnRkZWZhdWx0LWRuN2YwXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5VXApIHtcbiAgICAgIG9uS2V5VXAoZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChvbkNsaWNrICYmIGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBsZXQgQ29tcG9uZW50UHJvcCA9IGNvbXBvbmVudDtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicgJiYgKG90aGVyLmhyZWYgfHwgb3RoZXIudG8pKSB7XG4gICAgQ29tcG9uZW50UHJvcCA9IExpbmtDb21wb25lbnQ7XG4gIH1cblxuICBjb25zdCBidXR0b25Qcm9wcyA9IHt9O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlID09PSB1bmRlZmluZWQgPyAnYnV0dG9uJyA6IHR5cGU7XG4gICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW90aGVyLmhyZWYgJiYgIW90aGVyLnRvKSB7XG4gICAgICBidXR0b25Qcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBidXR0b25Qcm9wc1snYXJpYS1kaXNhYmxlZCddID0gZGlzYWJsZWQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgaGFuZGxlT3duUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIGJ1dHRvblJlZik7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBoYW5kbGVPd25SZWYpO1xuICBjb25zdCBbbW91bnRlZFN0YXRlLCBzZXRNb3VudGVkU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgYGNvbXBvbmVudGAgcHJvcCBwcm92aWRlZCB0byBCdXR0b25CYXNlIGlzIGludmFsaWQuJywgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIGNoaWxkcmVuIHByb3AgaXMgcmVuZGVyZWQgaW4gdGhpcyBjdXN0b20gY29tcG9uZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZW5hYmxlVG91Y2hSaXBwbGVdKTtcbiAgfVxuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjZW50ZXJSaXBwbGUsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVSaXBwbGUsXG4gICAgZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgIGZvY3VzUmlwcGxlLFxuICAgIHRhYkluZGV4LFxuICAgIGZvY3VzVmlzaWJsZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoQnV0dG9uQmFzZVJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogQ29tcG9uZW50UHJvcCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgb25Db250ZXh0TWVudTogaGFuZGxlQ29udGV4dE1lbnUsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd24sXG4gICAgb25Nb3VzZUxlYXZlOiBoYW5kbGVNb3VzZUxlYXZlLFxuICAgIG9uTW91c2VVcDogaGFuZGxlTW91c2VVcCxcbiAgICBvbkRyYWdMZWF2ZTogaGFuZGxlRHJhZ0xlYXZlLFxuICAgIG9uVG91Y2hFbmQ6IGhhbmRsZVRvdWNoRW5kLFxuICAgIG9uVG91Y2hNb3ZlOiBoYW5kbGVUb3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0OiBoYW5kbGVUb3VjaFN0YXJ0LFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IC0xIDogdGFiSW5kZXgsXG4gICAgdHlwZTogdHlwZVxuICB9LCBidXR0b25Qcm9wcywgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCBlbmFibGVUb3VjaFJpcHBsZSA/XG4gICAgLyojX19QVVJFX18qL1xuXG4gICAgLyogVG91Y2hSaXBwbGUgaXMgb25seSBuZWVkZWQgY2xpZW50LXNpZGUsIHgyIGJvb3N0IG9uIHRoZSBzZXJ2ZXIuICovXG4gICAgX2pzeChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiByaXBwbGVSZWYsXG4gICAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICAgIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGxdXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uQmFzZS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYGZvY3VzVmlzaWJsZSgpYCBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgYXJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG91Y2ggcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgaGF2ZSBhIGtleWJvYXJkIGZvY3VzIHJpcHBsZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGlkZW50aWZ5IHdoaWNoIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWlucyB0aGUgZm9jdXMgdGhyb3VnaCBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvSEVBRC9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgYSBsaW5rIHdoZW4gdGhlIGBocmVmYCBwcm9wIGlzIHByb3ZpZGVkLlxuICAgKiBAZGVmYXVsdCAnYSdcbiAgICovXG4gIExpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ29udGV4dE1lbnU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkRyYWdMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaE1vdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICBUb3VjaFJpcHBsZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b25CYXNlOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXREaXZpZGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlEaXZpZGVyJywgc2xvdCk7XG59XG5jb25zdCBkaXZpZGVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aURpdmlkZXInLCBbJ3Jvb3QnLCAnYWJzb2x1dGUnLCAnZnVsbFdpZHRoJywgJ2luc2V0JywgJ21pZGRsZScsICdmbGV4SXRlbScsICdsaWdodCcsICd2ZXJ0aWNhbCcsICd3aXRoQ2hpbGRyZW4nLCAnd2l0aENoaWxkcmVuVmVydGljYWwnLCAndGV4dEFsaWduUmlnaHQnLCAndGV4dEFsaWduTGVmdCcsICd3cmFwcGVyJywgJ3dyYXBwZXJWZXJ0aWNhbCddKTtcbmV4cG9ydCBkZWZhdWx0IGRpdmlkZXJDbGFzc2VzOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbUljb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtSWNvbicsIHNsb3QpO1xufVxuY29uc3QgbGlzdEl0ZW1JY29uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtSWNvbicsIFsncm9vdCcsICdhbGlnbkl0ZW1zRmxleFN0YXJ0J10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1JY29uQ2xhc3NlczsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdEl0ZW1UZXh0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaXN0SXRlbVRleHQnLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtVGV4dENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbVRleHQnLCBbJ3Jvb3QnLCAnbXVsdGlsaW5lJywgJ2RlbnNlJywgJ2luc2V0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1UZXh0Q2xhc3NlczsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVudUl0ZW1VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU1lbnVJdGVtJywgc2xvdCk7XG59XG5jb25zdCBtZW51SXRlbUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlNZW51SXRlbScsIFsncm9vdCcsICdmb2N1c1Zpc2libGUnLCAnZGVuc2UnLCAnZGlzYWJsZWQnLCAnZGl2aWRlcicsICdndXR0ZXJzJywgJ3NlbGVjdGVkJ10pO1xuZXhwb3J0IGRlZmF1bHQgbWVudUl0ZW1DbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhdXRvRm9jdXNcIiwgXCJjb21wb25lbnRcIiwgXCJkZW5zZVwiLCBcImRpdmlkZXJcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcInJvbGVcIiwgXCJ0YWJJbmRleFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsgZGl2aWRlckNsYXNzZXMgfSBmcm9tICcuLi9EaXZpZGVyJztcbmltcG9ydCB7IGxpc3RJdGVtSWNvbkNsYXNzZXMgfSBmcm9tICcuLi9MaXN0SXRlbUljb24nO1xuaW1wb3J0IHsgbGlzdEl0ZW1UZXh0Q2xhc3NlcyB9IGZyb20gJy4uL0xpc3RJdGVtVGV4dCc7XG5pbXBvcnQgbWVudUl0ZW1DbGFzc2VzLCB7IGdldE1lbnVJdGVtVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tZW51SXRlbUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBvdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2UsIG93bmVyU3RhdGUuZGl2aWRlciAmJiBzdHlsZXMuZGl2aWRlciwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYgc3R5bGVzLmd1dHRlcnNdO1xufTtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGRlbnNlLFxuICAgIGRpdmlkZXIsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgc2VsZWN0ZWQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGVuc2UgJiYgJ2RlbnNlJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJywgZGl2aWRlciAmJiAnZGl2aWRlcicsIHNlbGVjdGVkICYmICdzZWxlY3RlZCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRNZW51SXRlbVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IE1lbnVJdGVtUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlNZW51SXRlbScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5MSwge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgbWluSGVpZ2h0OiA0OCxcbiAgcGFkZGluZ1RvcDogNixcbiAgcGFkZGluZ0JvdHRvbTogNixcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAxNixcbiAgcGFkZGluZ1JpZ2h0OiAxNlxufSwgb3duZXJTdGF0ZS5kaXZpZGVyICYmIHtcbiAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5kaXZpZGVyfWAsXG4gIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG59LCB7XG4gICcmOmhvdmVyJzoge1xuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3ZlcixcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLnNlbGVjdGVkfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICBbYCYuJHttZW51SXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LFxuICBbYCYuJHttZW51SXRlbUNsYXNzZXMuc2VsZWN0ZWR9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KVxuICAgIH1cbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNcbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH0sXG4gIFtgJiArIC4ke2RpdmlkZXJDbGFzc2VzLnJvb3R9YF06IHtcbiAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDEpXG4gIH0sXG4gIFtgJiArIC4ke2RpdmlkZXJDbGFzc2VzLmluc2V0fWBdOiB7XG4gICAgbWFyZ2luTGVmdDogNTJcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMucm9vdH1gXToge1xuICAgIG1hcmdpblRvcDogMCxcbiAgICBtYXJnaW5Cb3R0b206IDBcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMuaW5zZXR9YF06IHtcbiAgICBwYWRkaW5nTGVmdDogMzZcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtSWNvbkNsYXNzZXMucm9vdH1gXToge1xuICAgIG1pbldpZHRoOiAzNlxuICB9XG59LCAhb3duZXJTdGF0ZS5kZW5zZSAmJiB7XG4gIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICBtaW5IZWlnaHQ6ICdhdXRvJ1xuICB9XG59LCBvd25lclN0YXRlLmRlbnNlICYmIF9leHRlbmRzKHtcbiAgbWluSGVpZ2h0OiAzMixcbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9jb21wb25lbnRzL21lbnVzI3NwZWNzID4gRGVuc2VcbiAgcGFkZGluZ1RvcDogNCxcbiAgcGFkZGluZ0JvdHRvbTogNFxufSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBbYCYgLiR7bGlzdEl0ZW1JY29uQ2xhc3Nlcy5yb290fSBzdmdgXToge1xuICAgIGZvbnRTaXplOiAnMS4yNXJlbSdcbiAgfVxufSkpKTtcbmNvbnN0IE1lbnVJdGVtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUl0ZW0oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aU1lbnVJdGVtJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgY29tcG9uZW50ID0gJ2xpJyxcbiAgICBkZW5zZSA9IGZhbHNlLFxuICAgIGRpdmlkZXIgPSBmYWxzZSxcbiAgICBkaXNhYmxlR3V0dGVycyA9IGZhbHNlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICByb2xlID0gJ21lbnVpdGVtJyxcbiAgICB0YWJJbmRleDogdGFiSW5kZXhQcm9wXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIGNvbnN0IGNoaWxkQ29udGV4dCA9IHtcbiAgICBkZW5zZTogZGVuc2UgfHwgY29udGV4dC5kZW5zZSB8fCBmYWxzZSxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9O1xuICBjb25zdCBtZW51SXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGlmIChtZW51SXRlbVJlZi5jdXJyZW50KSB7XG4gICAgICAgIG1lbnVJdGVtUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBNZW51SXRlbSB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkZW5zZTogY2hpbGRDb250ZXh0LmRlbnNlLFxuICAgIGRpdmlkZXIsXG4gICAgZGlzYWJsZUd1dHRlcnNcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihtZW51SXRlbVJlZiwgcmVmKTtcbiAgbGV0IHRhYkluZGV4O1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcCAhPT0gdW5kZWZpbmVkID8gdGFiSW5kZXhQcm9wIDogLTE7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChNZW51SXRlbVJvb3QsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgcm9sZTogcm9sZSxcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWUpXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51SXRlbS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogRm9jdXMgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBpZiB0aGUgdmFsdWUgY2hhbmdlcyBmcm9tIGZhbHNlIHRvIHRydWUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb21wYWN0IHZlcnRpY2FsIHBhZGRpbmcgZGVzaWduZWQgZm9yIGtleWJvYXJkIGFuZCBtb3VzZSBpbnB1dCBpcyB1c2VkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBNZW51IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSAxcHggbGlnaHQgYm9yZGVyIGlzIGFkZGVkIHRvIHRoZSBib3R0b20gb2YgdGhlIG1lbnUgaXRlbS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpdmlkZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudUl0ZW07IiwiaW1wb3J0IHsgdW5zdGFibGVfaXNNdWlFbGVtZW50IGFzIGlzTXVpRWxlbWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgaXNNdWlFbGVtZW50OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoZWxlbWVudC50eXBlLm11aU5hbWUpICE9PSAtMTtcbn0iLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybUNvbnRyb2xVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRm9ybUNvbnRyb2wnLCBzbG90KTtcbn1cbmNvbnN0IGZvcm1Db250cm9sQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUZvcm1Db250cm9sJywgWydyb290JywgJ21hcmdpbk5vbmUnLCAnbWFyZ2luTm9ybWFsJywgJ21hcmdpbkRlbnNlJywgJ2Z1bGxXaWR0aCcsICdkaXNhYmxlZCddKTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1Db250cm9sQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmb2N1c2VkXCIsIFwiZnVsbFdpZHRoXCIsIFwiaGlkZGVuTGFiZWxcIiwgXCJtYXJnaW5cIiwgXCJyZXF1aXJlZFwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGlzRmlsbGVkLCBpc0Fkb3JuZWRTdGFydCB9IGZyb20gJy4uL0lucHV0QmFzZS91dGlscyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0Rm9ybUNvbnRyb2xVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vZm9ybUNvbnRyb2xDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIG1hcmdpbixcbiAgICBmdWxsV2lkdGhcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIG1hcmdpbiAhPT0gJ25vbmUnICYmIGBtYXJnaW4ke2NhcGl0YWxpemUobWFyZ2luKX1gLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Rm9ybUNvbnRyb2xVdGlsaXR5Q2xhc3NlcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBGb3JtQ29udHJvbFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUZvcm1Db250cm9sJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHtcbiAgICBvd25lclN0YXRlXG4gIH0sIHN0eWxlcykgPT4ge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnJvb3QsIHN0eWxlc1tgbWFyZ2luJHtjYXBpdGFsaXplKG93bmVyU3RhdGUubWFyZ2luKX1gXSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYgc3R5bGVzLmZ1bGxXaWR0aCk7XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAvLyBSZXNldCBmaWVsZHNldCBkZWZhdWx0IHN0eWxlLlxuICBtaW5XaWR0aDogMCxcbiAgcGFkZGluZzogMCxcbiAgbWFyZ2luOiAwLFxuICBib3JkZXI6IDAsXG4gIHZlcnRpY2FsQWxpZ246ICd0b3AnXG59LCBvd25lclN0YXRlLm1hcmdpbiA9PT0gJ25vcm1hbCcgJiYge1xuICBtYXJnaW5Ub3A6IDE2LFxuICBtYXJnaW5Cb3R0b206IDhcbn0sIG93bmVyU3RhdGUubWFyZ2luID09PSAnZGVuc2UnICYmIHtcbiAgbWFyZ2luVG9wOiA4LFxuICBtYXJnaW5Cb3R0b206IDRcbn0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgd2lkdGg6ICcxMDAlJ1xufSkpO1xuLyoqXG4gKiBQcm92aWRlcyBjb250ZXh0IHN1Y2ggYXMgZmlsbGVkL2ZvY3VzZWQvZXJyb3IvcmVxdWlyZWQgZm9yIGZvcm0gaW5wdXRzLlxuICogUmVseWluZyBvbiB0aGUgY29udGV4dCBwcm92aWRlcyBoaWdoIGZsZXhpYmlsaXR5IGFuZCBlbnN1cmVzIHRoYXQgdGhlIHN0YXRlIGFsd2F5cyBzdGF5c1xuICogY29uc2lzdGVudCBhY3Jvc3MgdGhlIGNoaWxkcmVuIG9mIHRoZSBgRm9ybUNvbnRyb2xgLlxuICogVGhpcyBjb250ZXh0IGlzIHVzZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqICAtIEZvcm1MYWJlbFxuICogIC0gRm9ybUhlbHBlclRleHRcbiAqICAtIElucHV0XG4gKiAgLSBJbnB1dExhYmVsXG4gKlxuICogWW91IGNhbiBmaW5kIG9uZSBjb21wb3NpdGlvbiBleGFtcGxlIGJlbG93IGFuZCBtb3JlIGdvaW5nIHRvIFt0aGUgZGVtb3NdKC9jb21wb25lbnRzL3RleHQtZmllbGRzLyNjb21wb25lbnRzKS5cbiAqXG4gKiBgYGBqc3hcbiAqIDxGb3JtQ29udHJvbD5cbiAqICAgPElucHV0TGFiZWwgaHRtbEZvcj1cIm15LWlucHV0XCI+RW1haWwgYWRkcmVzczwvSW5wdXRMYWJlbD5cbiAqICAgPElucHV0IGlkPVwibXktaW5wdXRcIiBhcmlhLWRlc2NyaWJlZGJ5PVwibXktaGVscGVyLXRleHRcIiAvPlxuICogICA8Rm9ybUhlbHBlclRleHQgaWQ9XCJteS1oZWxwZXItdGV4dFwiPldlJ2xsIG5ldmVyIHNoYXJlIHlvdXIgZW1haWwuPC9Gb3JtSGVscGVyVGV4dD5cbiAqIDwvRm9ybUNvbnRyb2w+XG4gKiBgYGBcbiAqXG4gKiDimqDvuI8gT25seSBvbmUgYElucHV0QmFzZWAgY2FuIGJlIHVzZWQgd2l0aGluIGEgRm9ybUNvbnRyb2wgYmVjYXVzZSBpdCBjcmVhdGUgdmlzdWFsIGluY29uc2lzdGVuY2llcy5cbiAqIEZvciBpbnN0YW5jZSwgb25seSBvbmUgaW5wdXQgY2FuIGJlIGZvY3VzZWQgYXQgdGhlIHNhbWUgdGltZSwgdGhlIHN0YXRlIHNob3VsZG4ndCBiZSBzaGFyZWQuXG4gKi9cblxuY29uc3QgRm9ybUNvbnRyb2wgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRm9ybUNvbnRyb2wnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICBlcnJvciA9IGZhbHNlLFxuICAgIGZvY3VzZWQ6IHZpc3VhbGx5Rm9jdXNlZCxcbiAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICBoaWRkZW5MYWJlbCA9IGZhbHNlLFxuICAgIG1hcmdpbiA9ICdub25lJyxcbiAgICByZXF1aXJlZCA9IGZhbHNlLFxuICAgIHNpemUgPSAnbWVkaXVtJyxcbiAgICB2YXJpYW50ID0gJ291dGxpbmVkJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWwsXG4gICAgbWFyZ2luLFxuICAgIHJlcXVpcmVkLFxuICAgIHNpemUsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFthZG9ybmVkU3RhcnQsIHNldEFkb3JuZWRTdGFydF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGxldCBpbml0aWFsQWRvcm5lZFN0YXJ0ID0gZmFsc2U7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5wdXQgPSBpc011aUVsZW1lbnQoY2hpbGQsIFsnU2VsZWN0J10pID8gY2hpbGQucHJvcHMuaW5wdXQgOiBjaGlsZDtcblxuICAgICAgICBpZiAoaW5wdXQgJiYgaXNBZG9ybmVkU3RhcnQoaW5wdXQucHJvcHMpKSB7XG4gICAgICAgICAgaW5pdGlhbEFkb3JuZWRTdGFydCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpbml0aWFsQWRvcm5lZFN0YXJ0O1xuICB9KTtcbiAgY29uc3QgW2ZpbGxlZCwgc2V0RmlsbGVkXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIGl0ZXJhdGUgdGhyb3VnaCB0aGUgY2hpbGRyZW4gYW5kIGZpbmQgdGhlIElucHV0IGluIG9yZGVyXG4gICAgLy8gdG8gZnVsbHkgc3VwcG9ydCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gICAgbGV0IGluaXRpYWxGaWxsZWQgPSBmYWxzZTtcblxuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgICAgICBpZiAoIWlzTXVpRWxlbWVudChjaGlsZCwgWydJbnB1dCcsICdTZWxlY3QnXSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGaWxsZWQoY2hpbGQucHJvcHMsIHRydWUpKSB7XG4gICAgICAgICAgaW5pdGlhbEZpbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpbml0aWFsRmlsbGVkO1xuICB9KTtcbiAgY29uc3QgW2ZvY3VzZWRTdGF0ZSwgc2V0Rm9jdXNlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzZWRTdGF0ZSkge1xuICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICB9XG5cbiAgY29uc3QgZm9jdXNlZCA9IHZpc3VhbGx5Rm9jdXNlZCAhPT0gdW5kZWZpbmVkICYmICFkaXNhYmxlZCA/IHZpc3VhbGx5Rm9jdXNlZCA6IGZvY3VzZWRTdGF0ZTtcbiAgbGV0IHJlZ2lzdGVyRWZmZWN0O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgY29uc3QgcmVnaXN0ZXJlZElucHV0ID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAgIHJlZ2lzdGVyRWZmZWN0ID0gKCkgPT4ge1xuICAgICAgaWYgKHJlZ2lzdGVyZWRJbnB1dC5jdXJyZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRoZXJlIGFyZSBtdWx0aXBsZSBgSW5wdXRCYXNlYCBjb21wb25lbnRzIGluc2lkZSBhIEZvcm1Db250cm9sLicsICdUaGlzIGNyZWF0ZXMgdmlzdWFsIGluY29uc2lzdGVuY2llcywgb25seSB1c2Ugb25lIGBJbnB1dEJhc2VgLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cblxuICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IG9uRmlsbGVkID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldEZpbGxlZCh0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBvbkVtcHR5ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldEZpbGxlZChmYWxzZSk7XG4gIH0sIFtdKTtcbiAgY29uc3QgY2hpbGRDb250ZXh0ID0ge1xuICAgIGFkb3JuZWRTdGFydCxcbiAgICBzZXRBZG9ybmVkU3RhcnQsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZmlsbGVkLFxuICAgIGZvY3VzZWQsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsLFxuICAgIHNpemUsXG4gICAgb25CbHVyOiAoKSA9PiB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9LFxuICAgIG9uRW1wdHksXG4gICAgb25GaWxsZWQsXG4gICAgb25Gb2N1czogKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICB9LFxuICAgIHJlZ2lzdGVyRWZmZWN0LFxuICAgIHJlcXVpcmVkLFxuICAgIHZhcmlhbnRcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjaGlsZENvbnRleHQsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtQ29udHJvbC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCwgaW5wdXQgYW5kIGhlbHBlciB0ZXh0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzcGxheWVkIGluIGZvY3VzZWQgc3RhdGUuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgaGlkZGVuLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gaW5jcmVhc2UgZGVuc2l0eSBmb3IgYSBgRmlsbGVkSW5wdXRgLlxuICAgKiBCZSBzdXJlIHRvIGFkZCBgYXJpYS1sYWJlbGAgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGRlbkxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCBvciBgbm9ybWFsYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZyBvZiB0aGlzIGFuZCBjb250YWluZWQgY29tcG9uZW50cy5cbiAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnLCAnbm9ybWFsJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGluZGljYXRlIHRoYXQgdGhlIGBpbnB1dGAgaXMgcmVxdWlyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250cm9sOyIsImltcG9ydCB7IHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJEb2N1bWVudDsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdCcsIHNsb3QpO1xufVxuY29uc3QgbGlzdENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0JywgWydyb290JywgJ3BhZGRpbmcnLCAnZGVuc2UnLCAnc3ViaGVhZGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdENsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlUGFkZGluZ1wiLCBcInN1YmhlYWRlclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi9MaXN0Q29udGV4dCc7XG5pbXBvcnQgeyBnZXRMaXN0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlUGFkZGluZyxcbiAgICBkZW5zZSxcbiAgICBzdWJoZWFkZXJcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlUGFkZGluZyAmJiAncGFkZGluZycsIGRlbnNlICYmICdkZW5zZScsIHN1YmhlYWRlciAmJiAnc3ViaGVhZGVyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaXN0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IExpc3RSb290ID0gc3R5bGVkKCd1bCcsIHtcbiAgbmFtZTogJ011aUxpc3QnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYgc3R5bGVzLnBhZGRpbmcsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlLCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiBzdHlsZXMuc3ViaGVhZGVyXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYge1xuICBwYWRkaW5nVG9wOiA4LFxuICBwYWRkaW5nQm90dG9tOiA4XG59LCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiB7XG4gIHBhZGRpbmdUb3A6IDBcbn0pKTtcbmNvbnN0IExpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaXN0J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCA9ICd1bCcsXG4gICAgZGVuc2UgPSBmYWxzZSxcbiAgICBkaXNhYmxlUGFkZGluZyA9IGZhbHNlLFxuICAgIHN1YmhlYWRlclxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBkZW5zZVxuICB9KSwgW2RlbnNlXSk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBkZW5zZSxcbiAgICBkaXNhYmxlUGFkZGluZ1xuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBbc3ViaGVhZGVyLCBjaGlsZHJlbl1cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3QucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgaXMgdXNlZCBmb3JcbiAgICogdGhlIGxpc3QgYW5kIGxpc3QgaXRlbXMuXG4gICAqIFRoZSBwcm9wIGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlIGBkZW5zZWAgY29udGV4dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHN1YmhlYWRlciwgbm9ybWFsbHkgYExpc3RTdWJoZWFkZXJgLlxuICAgKi9cbiAgc3ViaGVhZGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdDsiLCIvLyBBIGNoYW5nZSBvZiB0aGUgYnJvd3NlciB6b29tIGNoYW5nZSB0aGUgc2Nyb2xsYmFyIHNpemUuXG4vLyBDcmVkaXQgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvNDg4ZmQ4YWZjNTM1Y2EzYTZhZDRkYzU4MWY1ZTg5MjE3YjZhMzZhYy9qcy9zcmMvdXRpbC9zY3JvbGxiYXIuanMjTDE0LUwxOFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyU2l6ZShkb2MpIHtcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9pbm5lcldpZHRoI3VzYWdlX25vdGVzXG4gIGNvbnN0IGRvY3VtZW50V2lkdGggPSBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICByZXR1cm4gTWF0aC5hYnMod2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudFdpZHRoKTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9nZXRTY3JvbGxiYXJTaXplIGFzIGdldFNjcm9sbGJhclNpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGdldFNjcm9sbGJhclNpemU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvbnNcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvRm9jdXNJdGVtXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlXCIsIFwiZGlzYWJsZUxpc3RXcmFwXCIsIFwib25LZXlEb3duXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJy4uL3V0aWxzL2dldFNjcm9sbGJhclNpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuZnVuY3Rpb24gbmV4dEl0ZW0obGlzdCwgaXRlbSwgZGlzYWJsZUxpc3RXcmFwKSB7XG4gIGlmIChsaXN0ID09PSBpdGVtKSB7XG4gICAgcmV0dXJuIGxpc3QuZmlyc3RDaGlsZDtcbiAgfVxuXG4gIGlmIChpdGVtICYmIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0LmZpcnN0Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHByZXZpb3VzSXRlbShsaXN0LCBpdGVtLCBkaXNhYmxlTGlzdFdyYXApIHtcbiAgaWYgKGxpc3QgPT09IGl0ZW0pIHtcbiAgICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbGlzdC5maXJzdENoaWxkIDogbGlzdC5sYXN0Q2hpbGQ7XG4gIH1cblxuICBpZiAoaXRlbSAmJiBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0Lmxhc3RDaGlsZDtcbn1cblxuZnVuY3Rpb24gdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkge1xuICBpZiAodGV4dENyaXRlcmlhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGxldCB0ZXh0ID0gbmV4dEZvY3VzLmlubmVyVGV4dDtcblxuICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8ganNkb20gZG9lc24ndCBzdXBwb3J0IGlubmVyVGV4dFxuICAgIHRleHQgPSBuZXh0Rm9jdXMudGV4dENvbnRlbnQ7XG4gIH1cblxuICB0ZXh0ID0gdGV4dC50cmltKCkudG9Mb3dlckNhc2UoKTtcblxuICBpZiAodGV4dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodGV4dENyaXRlcmlhLnJlcGVhdGluZykge1xuICAgIHJldHVybiB0ZXh0WzBdID09PSB0ZXh0Q3JpdGVyaWEua2V5c1swXTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0LmluZGV4T2YodGV4dENyaXRlcmlhLmtleXMuam9pbignJykpID09PSAwO1xufVxuXG5mdW5jdGlvbiBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHRyYXZlcnNhbEZ1bmN0aW9uLCB0ZXh0Q3JpdGVyaWEpIHtcbiAgbGV0IHdyYXBwZWRPbmNlID0gZmFsc2U7XG4gIGxldCBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBjdXJyZW50Rm9jdXMsIGN1cnJlbnRGb2N1cyA/IGRpc2FibGVMaXN0V3JhcCA6IGZhbHNlKTtcblxuICB3aGlsZSAobmV4dEZvY3VzKSB7XG4gICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wLlxuICAgIGlmIChuZXh0Rm9jdXMgPT09IGxpc3QuZmlyc3RDaGlsZCkge1xuICAgICAgaWYgKHdyYXBwZWRPbmNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlZE9uY2UgPSB0cnVlO1xuICAgIH0gLy8gU2FtZSBsb2dpYyBhcyB1c2VBdXRvY29tcGxldGUuanNcblxuXG4gICAgY29uc3QgbmV4dEZvY3VzRGlzYWJsZWQgPSBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID8gZmFsc2UgOiBuZXh0Rm9jdXMuZGlzYWJsZWQgfHwgbmV4dEZvY3VzLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZSc7XG5cbiAgICBpZiAoIW5leHRGb2N1cy5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykgfHwgIXRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpIHx8IG5leHRGb2N1c0Rpc2FibGVkKSB7XG4gICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnQuXG4gICAgICBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBuZXh0Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRGb2N1cy5mb2N1cygpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBBIHBlcm1hbmVudGx5IGRpc3BsYXllZCBtZW51IGZvbGxvd2luZyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLyNtZW51YnV0dG9uLlxuICogSXQncyBleHBvc2VkIHRvIGhlbHAgY3VzdG9taXphdGlvbiBvZiB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgY29tcG9uZW50IGlmIHlvdVxuICogdXNlIGl0IHNlcGFyYXRlbHkgeW91IG5lZWQgdG8gbW92ZSBmb2N1cyBpbnRvIHRoZSBjb21wb25lbnQgbWFudWFsbHkuIE9uY2VcbiAqIHRoZSBmb2N1cyBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgaXQgaXMgZnVsbHkga2V5Ym9hcmQgYWNjZXNzaWJsZS5cbiAqL1xuXG5cbmNvbnN0IE1lbnVMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUxpc3QocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgLy8gcHJpdmF0ZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgYWN0aW9ucyxcbiAgICBhdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBhdXRvRm9jdXNJdGVtID0gZmFsc2UsXG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPSBmYWxzZSxcbiAgICBkaXNhYmxlTGlzdFdyYXAgPSBmYWxzZSxcbiAgICBvbktleURvd24sXG4gICAgdmFyaWFudCA9ICdzZWxlY3RlZE1lbnUnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBsaXN0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCB0ZXh0Q3JpdGVyaWFSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIGtleXM6IFtdLFxuICAgIHJlcGVhdGluZzogdHJ1ZSxcbiAgICBwcmV2aW91c0tleU1hdGNoZWQ6IHRydWUsXG4gICAgbGFzdFRpbWU6IG51bGxcbiAgfSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBsaXN0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb25zLCAoKSA9PiAoe1xuICAgIGFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyOiAoY29udGFpbmVyRWxlbWVudCwgdGhlbWUpID0+IHtcbiAgICAgIC8vIExldCdzIGlnbm9yZSB0aGF0IHBpZWNlIG9mIGxvZ2ljIGlmIHVzZXJzIGFyZSBhbHJlYWR5IG92ZXJyaWRpbmcgdGhlIHdpZHRoXG4gICAgICAvLyBvZiB0aGUgbWVudS5cbiAgICAgIGNvbnN0IG5vRXhwbGljaXRXaWR0aCA9ICFsaXN0UmVmLmN1cnJlbnQuc3R5bGUud2lkdGg7XG5cbiAgICAgIGlmIChjb250YWluZXJFbGVtZW50LmNsaWVudEhlaWdodCA8IGxpc3RSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgJiYgbm9FeHBsaWNpdFdpZHRoKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbGJhclNpemUgPSBgJHtnZXRTY3JvbGxiYXJTaXplKG93bmVyRG9jdW1lbnQoY29udGFpbmVyRWxlbWVudCkpfXB4YDtcbiAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlW3RoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCddID0gc2Nyb2xsYmFyU2l6ZTtcbiAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlLndpZHRoID0gYGNhbGMoMTAwJSArICR7c2Nyb2xsYmFyU2l6ZX0pYDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3RSZWYuY3VycmVudDtcbiAgICB9XG4gIH0pLCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBsaXN0ID0gbGlzdFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RWxlbWVudH0gLSB3aWxsIGFsd2F5cyBiZSBkZWZpbmVkIHNpbmNlIHdlIGFyZSBpbiBhIGtleWRvd24gaGFuZGxlclxuICAgICAqIGF0dGFjaGVkIHRvIGFuIGVsZW1lbnQuIEEga2V5ZG93biBldmVudCBpcyBlaXRoZXIgZGlzcGF0Y2hlZCB0byB0aGUgYWN0aXZlRWxlbWVudFxuICAgICAqIG9yIGRvY3VtZW50LmJvZHkgb3IgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LiBPbmx5IHRoZSBmaXJzdCBjYXNlIHdpbGxcbiAgICAgKiB0cmlnZ2VyIHRoaXMgc3BlY2lmaWMgaGFuZGxlci5cbiAgICAgKi9cblxuICAgIGNvbnN0IGN1cnJlbnRGb2N1cyA9IG93bmVyRG9jdW1lbnQobGlzdCkuYWN0aXZlRWxlbWVudDtcblxuICAgIGlmIChrZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdIb21lJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0VuZCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBwcmV2aW91c0l0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgY3JpdGVyaWEgPSB0ZXh0Q3JpdGVyaWFSZWYuY3VycmVudDtcbiAgICAgIGNvbnN0IGxvd2VyS2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCBjdXJyVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgICBpZiAoY3JpdGVyaWEua2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFJlc2V0XG4gICAgICAgIGlmIChjdXJyVGltZSAtIGNyaXRlcmlhLmxhc3RUaW1lID4gNTAwKSB7XG4gICAgICAgICAgY3JpdGVyaWEua2V5cyA9IFtdO1xuICAgICAgICAgIGNyaXRlcmlhLnJlcGVhdGluZyA9IHRydWU7XG4gICAgICAgICAgY3JpdGVyaWEucHJldmlvdXNLZXlNYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjcml0ZXJpYS5yZXBlYXRpbmcgJiYgbG93ZXJLZXkgIT09IGNyaXRlcmlhLmtleXNbMF0pIHtcbiAgICAgICAgICBjcml0ZXJpYS5yZXBlYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjcml0ZXJpYS5sYXN0VGltZSA9IGN1cnJUaW1lO1xuICAgICAgY3JpdGVyaWEua2V5cy5wdXNoKGxvd2VyS2V5KTtcbiAgICAgIGNvbnN0IGtlZXBGb2N1c09uQ3VycmVudCA9IGN1cnJlbnRGb2N1cyAmJiAhY3JpdGVyaWEucmVwZWF0aW5nICYmIHRleHRDcml0ZXJpYU1hdGNoZXMoY3VycmVudEZvY3VzLCBjcml0ZXJpYSk7XG5cbiAgICAgIGlmIChjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgJiYgKGtlZXBGb2N1c09uQ3VycmVudCB8fCBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBmYWxzZSwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0sIGNyaXRlcmlhKSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobGlzdFJlZiwgcmVmKTtcbiAgLyoqXG4gICAqIHRoZSBpbmRleCBvZiB0aGUgaXRlbSBzaG91bGQgcmVjZWl2ZSBmb2N1c1xuICAgKiBpbiBhIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgIGl0J3MgdGhlIGZpcnN0IGBzZWxlY3RlZGAgaXRlbVxuICAgKiBvdGhlcndpc2UgaXQncyB0aGUgdmVyeSBmaXJzdCBpdGVtLlxuICAgKi9cblxuICBsZXQgYWN0aXZlSXRlbUluZGV4ID0gLTE7IC8vIHNpbmNlIHdlIGluamVjdCBmb2N1cyByZWxhdGVkIHByb3BzIGludG8gY2hpbGRyZW4gd2UgaGF2ZSB0byBkbyBhIGxvb2thaGVhZFxuICAvLyB0byBjaGVjayBpZiB0aGVyZSBpcyBhIGBzZWxlY3RlZGAgaXRlbS4gV2UncmUgbG9va2luZyBmb3IgdGhlIGxhc3QgYHNlbGVjdGVkYFxuICAvLyBpdGVtIGFuZCB1c2UgdGhlIGZpcnN0IHZhbGlkIGl0ZW0gYXMgYSBmYWxsYmFja1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIE1lbnUgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUl0ZW1JbmRleCkge1xuICAgICAgY29uc3QgbmV3Q2hpbGRQcm9wcyA9IHt9O1xuXG4gICAgICBpZiAoYXV0b0ZvY3VzSXRlbSkge1xuICAgICAgICBuZXdDaGlsZFByb3BzLmF1dG9Gb2N1cyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkICYmIHZhcmlhbnQgPT09ICdzZWxlY3RlZE1lbnUnKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMudGFiSW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3QsIF9leHRlbmRzKHtcbiAgICByb2xlOiBcIm1lbnVcIixcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgdGFiSW5kZXg6IGF1dG9Gb2N1cyA/IDAgOiAtMVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBpdGVtc1xuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1lbnVMaXN0LnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGNvbnRhaW5lciBhbmQgbW92ZSBpbnRvIHRhYiBvcmRlci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBmb2N1cyB0aGUgZmlyc3QgbWVudWl0ZW0gaWYgYHZhcmlhbnQ9XCJtZW51XCJgIG9yIHNlbGVjdGVkIGl0ZW1cbiAgICogaWYgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXNJdGVtOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudUxpc3QgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBhbGxvdyBmb2N1cyBvbiBkaXNhYmxlZCBpdGVtcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkSXRlbXNGb2N1c2FibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGl0ZW1zIHdpbGwgbm90IHdyYXAgZm9jdXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlTGlzdFdyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1c1xuICAgKiBhbmQgdGhlIHZlcnRpY2FsIGFsaWdubWVudCByZWxhdGl2ZSB0byB0aGUgYW5jaG9yIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0ICdzZWxlY3RlZE1lbnUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydtZW51JywgJ3NlbGVjdGVkTWVudSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1lbnVMaXN0OyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXBlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpUGFwZXInLCBzbG90KTtcbn1cbmNvbnN0IHBhcGVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVBhcGVyJywgWydyb290JywgJ3JvdW5kZWQnLCAnb3V0bGluZWQnLCAnZWxldmF0aW9uJywgJ2VsZXZhdGlvbjAnLCAnZWxldmF0aW9uMScsICdlbGV2YXRpb24yJywgJ2VsZXZhdGlvbjMnLCAnZWxldmF0aW9uNCcsICdlbGV2YXRpb241JywgJ2VsZXZhdGlvbjYnLCAnZWxldmF0aW9uNycsICdlbGV2YXRpb244JywgJ2VsZXZhdGlvbjknLCAnZWxldmF0aW9uMTAnLCAnZWxldmF0aW9uMTEnLCAnZWxldmF0aW9uMTInLCAnZWxldmF0aW9uMTMnLCAnZWxldmF0aW9uMTQnLCAnZWxldmF0aW9uMTUnLCAnZWxldmF0aW9uMTYnLCAnZWxldmF0aW9uMTcnLCAnZWxldmF0aW9uMTgnLCAnZWxldmF0aW9uMTknLCAnZWxldmF0aW9uMjAnLCAnZWxldmF0aW9uMjEnLCAnZWxldmF0aW9uMjInLCAnZWxldmF0aW9uMjMnLCAnZWxldmF0aW9uMjQnXSk7XG5leHBvcnQgZGVmYXVsdCBwYXBlckNsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImVsZXZhdGlvblwiLCBcInNxdWFyZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgaW50ZWdlclByb3BUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IGdldFBhcGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wYXBlckNsYXNzZXMnOyAvLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLWlvcy9ibG9iL2JjYTM2MTA3NDA1NTk0ZDViN2IxNjI2NWE1YjBlZDY5OGY4NWE1ZWUvY29tcG9uZW50cy9FbGV2YXRpb24vc3JjL1VJQ29sb3IlMkJNYXRlcmlhbEVsZXZhdGlvbi5tI0w2MVxuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCBnZXRPdmVybGF5QWxwaGEgPSBlbGV2YXRpb24gPT4ge1xuICBsZXQgYWxwaGFWYWx1ZTtcblxuICBpZiAoZWxldmF0aW9uIDwgMSkge1xuICAgIGFscGhhVmFsdWUgPSA1LjExOTE2ICogZWxldmF0aW9uICoqIDI7XG4gIH0gZWxzZSB7XG4gICAgYWxwaGFWYWx1ZSA9IDQuNSAqIE1hdGgubG9nKGVsZXZhdGlvbiArIDEpICsgMjtcbiAgfVxuXG4gIHJldHVybiAoYWxwaGFWYWx1ZSAvIDEwMCkudG9GaXhlZCgyKTtcbn07XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBzcXVhcmUsXG4gICAgZWxldmF0aW9uLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgIXNxdWFyZSAmJiAncm91bmRlZCcsIHZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIGBlbGV2YXRpb24ke2VsZXZhdGlvbn1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBhcGVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IFBhcGVyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpUGFwZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sICFvd25lclN0YXRlLnNxdWFyZSAmJiBzdHlsZXMucm91bmRlZCwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBzdHlsZXNbYGVsZXZhdGlvbiR7b3duZXJTdGF0ZS5lbGV2YXRpb259YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxufSwgIW93bmVyU3RhdGUuc3F1YXJlICYmIHtcbiAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIGJvcmRlcjogYDFweCBzb2xpZCAke3RoZW1lLnBhbGV0dGUuZGl2aWRlcn1gXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIF9leHRlbmRzKHtcbiAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzW293bmVyU3RhdGUuZWxldmF0aW9uXVxufSwgdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnZGFyaycgJiYge1xuICBiYWNrZ3JvdW5kSW1hZ2U6IGBsaW5lYXItZ3JhZGllbnQoJHthbHBoYSgnI2ZmZicsIGdldE92ZXJsYXlBbHBoYShvd25lclN0YXRlLmVsZXZhdGlvbikpfSwgJHthbHBoYSgnI2ZmZicsIGdldE92ZXJsYXlBbHBoYShvd25lclN0YXRlLmVsZXZhdGlvbikpfSlgXG59KSkpO1xuY29uc3QgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpUGFwZXInXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgZWxldmF0aW9uID0gMSxcbiAgICBzcXVhcmUgPSBmYWxzZSxcbiAgICB2YXJpYW50ID0gJ2VsZXZhdGlvbidcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZWxldmF0aW9uLFxuICAgIHNxdWFyZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcblxuICAgIGlmICh0aGVtZS5zaGFkb3dzW2VsZXZhdGlvbl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGVsZXZhdGlvbiBwcm92aWRlZCA8UGFwZXIgZWxldmF0aW9uPXske2VsZXZhdGlvbn19PiBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSB0aGVtZS5gLCBgUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IFxcYHRoZW1lLnNoYWRvd3NbJHtlbGV2YXRpb259XVxcYCBpcyBkZWZpbmVkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUGFwZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUGFwZXIucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNoYWRvdyBkZXB0aCwgY29ycmVzcG9uZHMgdG8gYGRwYCBpbiB0aGUgc3BlYy5cbiAgICogSXQgYWNjZXB0cyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIGVsZXZhdGlvbjogY2hhaW5Qcm9wVHlwZXMoaW50ZWdlclByb3BUeXBlLCBwcm9wcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uLFxuICAgICAgdmFyaWFudFxuICAgIH0gPSBwcm9wcztcblxuICAgIGlmIChlbGV2YXRpb24gPiAwICYmIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYE1VSTogQ29tYmluaW5nIFxcYGVsZXZhdGlvbj17JHtlbGV2YXRpb259fVxcYCB3aXRoIFxcYHZhcmlhbnQ9XCIke3ZhcmlhbnR9XCJcXGAgaGFzIG5vIGVmZmVjdC4gRWl0aGVyIHVzZSBcXGBlbGV2YXRpb249ezB9XFxgIG9yIHVzZSBhIGRpZmZlcmVudCBcXGB2YXJpYW50XFxgLmApO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdlbGV2YXRpb24nXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlbGV2YXRpb24nLCAnb3V0bGluZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFBhcGVyOyIsImltcG9ydCB7IHVuc3RhYmxlX2RlYm91bmNlIGFzIGRlYm91bmNlIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBkZWJvdW5jZTsiLCJpbXBvcnQgeyB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJXaW5kb3c7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IGZ1bmN0aW9uIChwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwcm9wVmFsdWVba2V5XTtcbiAgICAgIHJldHVybiBQcm9wVHlwZXMuaW5zdGFuY2VPZih2YWx1ZSAmJiAnb3duZXJEb2N1bWVudCcgaW4gdmFsdWUgPyB2YWx1ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LkVsZW1lbnQgOiBFbGVtZW50KShwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KTtcbiAgICB9XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImV4cG9ydCBjb25zdCByZWZsb3cgPSBub2RlID0+IG5vZGUuc2Nyb2xsVG9wO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wcyhwcm9wcywgb3B0aW9ucykge1xuICB2YXIgX3N0eWxlJHRyYW5zaXRpb25EdXJhLCBfc3R5bGUkdHJhbnNpdGlvblRpbWk7XG5cbiAgY29uc3Qge1xuICAgIHRpbWVvdXQsXG4gICAgZWFzaW5nLFxuICAgIHN0eWxlID0ge31cbiAgfSA9IHByb3BzO1xuICByZXR1cm4ge1xuICAgIGR1cmF0aW9uOiAoX3N0eWxlJHRyYW5zaXRpb25EdXJhID0gc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uKSAhPSBudWxsID8gX3N0eWxlJHRyYW5zaXRpb25EdXJhIDogdHlwZW9mIHRpbWVvdXQgPT09ICdudW1iZXInID8gdGltZW91dCA6IHRpbWVvdXRbb3B0aW9ucy5tb2RlXSB8fCAwLFxuICAgIGVhc2luZzogKF9zdHlsZSR0cmFuc2l0aW9uVGltaSA9IHN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbikgIT0gbnVsbCA/IF9zdHlsZSR0cmFuc2l0aW9uVGltaSA6IHR5cGVvZiBlYXNpbmcgPT09ICdvYmplY3QnID8gZWFzaW5nW29wdGlvbnMubW9kZV0gOiBlYXNpbmcsXG4gICAgZGVsYXk6IHN0eWxlLnRyYW5zaXRpb25EZWxheVxuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhZGRFbmRMaXN0ZW5lclwiLCBcImFwcGVhclwiLCBcImNoaWxkcmVuXCIsIFwiZWFzaW5nXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5mdW5jdGlvbiBnZXRTY2FsZSh2YWx1ZSkge1xuICByZXR1cm4gYHNjYWxlKCR7dmFsdWV9LCAke3ZhbHVlICoqIDJ9KWA7XG59XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMSlcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiAnbm9uZSdcbiAgfVxufTtcbi8qKlxuICogVGhlIEdyb3cgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbVG9vbHRpcF0oL2NvbXBvbmVudHMvdG9vbHRpcHMvKSBhbmRcbiAqIFtQb3BvdmVyXSgvY29tcG9uZW50cy9wb3BvdmVyLykgY29tcG9uZW50cy5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxuY29uc3QgR3JvdyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEdyb3cocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgYWRkRW5kTGlzdGVuZXIsXG4gICAgYXBwZWFyID0gdHJ1ZSxcbiAgICBjaGlsZHJlbixcbiAgICBlYXNpbmcsXG4gICAgaW46IGluUHJvcCxcbiAgICBvbkVudGVyLFxuICAgIG9uRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nLFxuICAgIG9uRXhpdCxcbiAgICBvbkV4aXRlZCxcbiAgICBvbkV4aXRpbmcsXG4gICAgc3R5bGUsXG4gICAgdGltZW91dCA9ICdhdXRvJyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBUcmFuc2l0aW9uXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCB0aW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBhdXRvVGltZW91dCA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGZvcmVpZ25SZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgcmVmKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihub2RlUmVmLCBmb3JlaWduUmVmKTtcblxuICBjb25zdCBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gY2FsbGJhY2sgPT4gbWF5YmVJc0FwcGVhcmluZyA9PiB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZVJlZi5jdXJyZW50OyAvLyBvbkVudGVyWHh4IGFuZCBvbkV4aXRYeHggY2FsbGJhY2tzIGhhdmUgYSBkaWZmZXJlbnQgYXJndW1lbnRzLmxlbmd0aCB2YWx1ZS5cblxuICAgICAgaWYgKG1heWJlSXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUsIG1heWJlSXNBcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmluZyk7XG4gIGNvbnN0IGhhbmRsZUVudGVyID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjaygobm9kZSwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICByZWZsb3cobm9kZSk7IC8vIFNvIHRoZSBhbmltYXRpb24gYWx3YXlzIHN0YXJ0IGZyb20gdGhlIHN0YXJ0LlxuXG4gICAgY29uc3Qge1xuICAgICAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIGRlbGF5LFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBsZXQgZHVyYXRpb247XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICBhdXRvVGltZW91dC5jdXJyZW50ID0gZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIH1cblxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbixcbiAgICAgIGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uICogMC42NjYsXG4gICAgICBkZWxheSxcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSldLmpvaW4oJywnKTtcblxuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICBjb25zdCBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICBjb25zdCBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgZGVsYXksXG4gICAgICBlYXNpbmc6IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuICAgIH0gPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbGV0IGR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb24sXG4gICAgICBkZWxheVxuICAgIH0pLCB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXk6IGRlbGF5IHx8IGR1cmF0aW9uICogMC4zMzMsXG4gICAgICBlYXNpbmc6IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuICAgIH0pXS5qb2luKCcsJyk7XG4gICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gZ2V0U2NhbGUoMC43NSk7XG5cbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG5cbiAgY29uc3QgaGFuZGxlQWRkRW5kTGlzdGVuZXIgPSBuZXh0ID0+IHtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5jdXJyZW50ID0gc2V0VGltZW91dChuZXh0LCBhdXRvVGltZW91dC5jdXJyZW50IHx8IDApO1xuICAgIH1cblxuICAgIGlmIChhZGRFbmRMaXN0ZW5lcikge1xuICAgICAgLy8gT2xkIGNhbGwgc2lnbmF0dXJlIGJlZm9yZSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cGAgaW1wbGVtZW50ZWQgYG5vZGVSZWZgXG4gICAgICBhZGRFbmRMaXN0ZW5lcihub2RlUmVmLmN1cnJlbnQsIG5leHQpO1xuICAgIH1cbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogYXBwZWFyLFxuICAgIGluOiBpblByb3AsXG4gICAgbm9kZVJlZjogbm9kZVJlZixcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBoYW5kbGVBZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAoc3RhdGUsIGNoaWxkUHJvcHMpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDAuNzUpLFxuICAgICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3Jvdy5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nIERPTVxuICAgKiBub2RlIGFuZCBhIGRvbmUgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIE5vdGU6IFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSB0cmFuc2l0aW9uIHRpbWluZyBmdW5jdGlvbi5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIGVhc2luZyBvciBhIG9iamVjdCBjb250YWluaW5nIGVudGVyIGFuZCBleGl0IHZhbHVlcy5cbiAgICovXG4gIGVhc2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbnRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGl0OiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5Hcm93Lm11aVN1cHBvcnRBdXRvID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IEdyb3c7IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb24uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiguLi5mdW5jcykge1xuICByZXR1cm4gZnVuY3MucmVkdWNlKChhY2MsIGZ1bmMpID0+IHtcbiAgICBpZiAoZnVuYyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9LCAoKSA9PiB7fSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AsIEhUTUxFbGVtZW50VHlwZSwgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfc2V0UmVmIGFzIHNldFJlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIHJldHVybiB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG59XG4vKipcbiAqIFBvcnRhbHMgcHJvdmlkZSBhIGZpcnN0LWNsYXNzIHdheSB0byByZW5kZXIgY2hpbGRyZW4gaW50byBhIERPTSBub2RlXG4gKiB0aGF0IGV4aXN0cyBvdXRzaWRlIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICovXG5cblxuY29uc3QgUG9ydGFsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9ydGFsKHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2VcbiAgfSA9IHByb3BzO1xuICBjb25zdCBbbW91bnROb2RlLCBzZXRNb3VudE5vZGVdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5yZWYgOiBudWxsLCByZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRNb3VudE5vZGUoZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICB9LCBbY29udGFpbmVyLCBkaXNhYmxlUG9ydGFsXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobW91bnROb2RlICYmICFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRSZWYocmVmLCBtb3VudE5vZGUpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtyZWYsIG1vdW50Tm9kZSwgZGlzYWJsZVBvcnRhbF0pO1xuXG4gIGlmIChkaXNhYmxlUG9ydGFsKSB7XG4gICAgaWYgKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgcmV0dXJuIG1vdW50Tm9kZSA/IC8qI19fUFVSRV9fKi9SZWFjdERPTS5jcmVhdGVQb3J0YWwoY2hpbGRyZW4sIG1vdW50Tm9kZSkgOiBtb3VudE5vZGU7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcnRhbC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIHRvIHJlbmRlciBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50IG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogVGhlIGBjaGlsZHJlbmAgd2lsbCBiZSB1bmRlciB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgUG9ydGFsWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKFBvcnRhbC5wcm9wVHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7IiwiaW1wb3J0IHsgdW5zdGFibGVfb3duZXJXaW5kb3cgYXMgb3duZXJXaW5kb3csIHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCwgdW5zdGFibGVfZ2V0U2Nyb2xsYmFyU2l6ZSBhcyBnZXRTY3JvbGxiYXJTaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5cbi8vIElzIGEgdmVydGljYWwgc2Nyb2xsYmFyIGRpc3BsYXllZD9cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSB7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKTtcblxuICBpZiAoZG9jLmJvZHkgPT09IGNvbnRhaW5lcikge1xuICAgIHJldHVybiBvd25lcldpbmRvdyhjb250YWluZXIpLmlubmVyV2lkdGggPiBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5lci5zY3JvbGxIZWlnaHQgPiBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJpYUhpZGRlbihlbGVtZW50LCBzaG93KSB7XG4gIGlmIChzaG93KSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYWRkaW5nUmlnaHQoZWxlbWVudCkge1xuICByZXR1cm4gcGFyc2VJbnQob3duZXJXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wYWRkaW5nUmlnaHQsIDEwKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb3VudEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBlbGVtZW50c1RvRXhjbHVkZSA9IFtdLCBzaG93KSB7XG4gIGNvbnN0IGJsYWNrbGlzdCA9IFttb3VudEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCAuLi5lbGVtZW50c1RvRXhjbHVkZV07XG4gIGNvbnN0IGJsYWNrbGlzdFRhZ05hbWVzID0gWydURU1QTEFURScsICdTQ1JJUFQnLCAnU1RZTEUnXTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZWxlbWVudCA9PiB7XG4gICAgaWYgKGJsYWNrbGlzdC5pbmRleE9mKGVsZW1lbnQpID09PSAtMSAmJiBibGFja2xpc3RUYWdOYW1lcy5pbmRleE9mKGVsZW1lbnQudGFnTmFtZSkgPT09IC0xKSB7XG4gICAgICBhcmlhSGlkZGVuKGVsZW1lbnQsIHNob3cpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleE9mKGl0ZW1zLCBjYWxsYmFjaykge1xuICBsZXQgaWR4ID0gLTE7XG4gIGl0ZW1zLnNvbWUoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgaWYgKGNhbGxiYWNrKGl0ZW0pKSB7XG4gICAgICBpZHggPSBpbmRleDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG4gIHJldHVybiBpZHg7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUNvbnRhaW5lcihjb250YWluZXJJbmZvLCBwcm9wcykge1xuICBjb25zdCByZXN0b3JlU3R5bGUgPSBbXTtcbiAgY29uc3QgY29udGFpbmVyID0gY29udGFpbmVySW5mby5jb250YWluZXI7XG5cbiAgaWYgKCFwcm9wcy5kaXNhYmxlU2Nyb2xsTG9jaykge1xuICAgIGlmIChpc092ZXJmbG93aW5nKGNvbnRhaW5lcikpIHtcbiAgICAgIC8vIENvbXB1dGUgdGhlIHNpemUgYmVmb3JlIGFwcGx5aW5nIG92ZXJmbG93IGhpZGRlbiB0byBhdm9pZCBhbnkgc2Nyb2xsIGp1bXBzLlxuICAgICAgY29uc3Qgc2Nyb2xsYmFyU2l6ZSA9IGdldFNjcm9sbGJhclNpemUob3duZXJEb2N1bWVudChjb250YWluZXIpKTtcbiAgICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgICAgdmFsdWU6IGNvbnRhaW5lci5zdHlsZS5wYWRkaW5nUmlnaHQsXG4gICAgICAgIHByb3BlcnR5OiAncGFkZGluZy1yaWdodCcsXG4gICAgICAgIGVsOiBjb250YWluZXJcbiAgICAgIH0pOyAvLyBVc2UgY29tcHV0ZWQgc3R5bGUsIGhlcmUgdG8gZ2V0IHRoZSByZWFsIHBhZGRpbmcgdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGguXG5cbiAgICAgIGNvbnRhaW5lci5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHtnZXRQYWRkaW5nUmlnaHQoY29udGFpbmVyKSArIHNjcm9sbGJhclNpemV9cHhgOyAvLyAubXVpLWZpeGVkIGlzIGEgZ2xvYmFsIGhlbHBlci5cblxuICAgICAgY29uc3QgZml4ZWRFbGVtZW50cyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yQWxsKCcubXVpLWZpeGVkJyk7XG4gICAgICBbXS5mb3JFYWNoLmNhbGwoZml4ZWRFbGVtZW50cywgZWxlbWVudCA9PiB7XG4gICAgICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgICAgICB2YWx1ZTogZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQsXG4gICAgICAgICAgcHJvcGVydHk6ICdwYWRkaW5nLXJpZ2h0JyxcbiAgICAgICAgICBlbDogZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHtnZXRQYWRkaW5nUmlnaHQoZWxlbWVudCkgKyBzY3JvbGxiYXJTaXplfXB4YDtcbiAgICAgIH0pO1xuICAgIH0gLy8gSW1wcm92ZSBHYXRzYnkgc3VwcG9ydFxuICAgIC8vIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2ZvcmNlLXZlcnRpY2FsLXNjcm9sbGJhci9cblxuXG4gICAgY29uc3QgcGFyZW50ID0gY29udGFpbmVyLnBhcmVudEVsZW1lbnQ7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coY29udGFpbmVyKTtcbiAgICBjb25zdCBzY3JvbGxDb250YWluZXIgPSAocGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQubm9kZU5hbWUpID09PSAnSFRNTCcgJiYgY29udGFpbmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KS5vdmVyZmxvd1kgPT09ICdzY3JvbGwnID8gcGFyZW50IDogY29udGFpbmVyOyAvLyBCbG9jayB0aGUgc2Nyb2xsIGV2ZW4gaWYgbm8gc2Nyb2xsYmFyIGlzIHZpc2libGUgdG8gYWNjb3VudCBmb3IgbW9iaWxlIGtleWJvYXJkXG4gICAgLy8gc2NyZWVuc2l6ZSBzaHJpbmsuXG5cbiAgICByZXN0b3JlU3R5bGUucHVzaCh7XG4gICAgICB2YWx1ZTogc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgICAgcHJvcGVydHk6ICdvdmVyZmxvdycsXG4gICAgICBlbDogc2Nyb2xsQ29udGFpbmVyXG4gICAgfSwge1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvd1gsXG4gICAgICBwcm9wZXJ0eTogJ292ZXJmbG93LXgnLFxuICAgICAgZWw6IHNjcm9sbENvbnRhaW5lclxuICAgIH0sIHtcbiAgICAgIHZhbHVlOiBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3dZLFxuICAgICAgcHJvcGVydHk6ICdvdmVyZmxvdy15JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9KTtcbiAgICBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgfVxuXG4gIGNvbnN0IHJlc3RvcmUgPSAoKSA9PiB7XG4gICAgcmVzdG9yZVN0eWxlLmZvckVhY2goKHtcbiAgICAgIHZhbHVlLFxuICAgICAgZWwsXG4gICAgICBwcm9wZXJ0eVxuICAgIH0pID0+IHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiByZXN0b3JlO1xufVxuXG5mdW5jdGlvbiBnZXRIaWRkZW5TaWJsaW5ncyhjb250YWluZXIpIHtcbiAgY29uc3QgaGlkZGVuU2libGluZ3MgPSBbXTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZWxlbWVudCA9PiB7XG4gICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpID09PSAndHJ1ZScpIHtcbiAgICAgIGhpZGRlblNpYmxpbmdzLnB1c2goZWxlbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGhpZGRlblNpYmxpbmdzO1xufVxuXG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKlxuICogUHJvcGVyIHN0YXRlIG1hbmFnZW1lbnQgZm9yIGNvbnRhaW5lcnMgYW5kIHRoZSBtb2RhbHMgaW4gdGhvc2UgY29udGFpbmVycy5cbiAqIFNpbXBsaWZpZWQsIGJ1dCBpbnNwaXJlZCBieSByZWFjdC1vdmVybGF5J3MgTW9kYWxNYW5hZ2VyIGNsYXNzLlxuICogVXNlZCBieSB0aGUgTW9kYWwgdG8gZW5zdXJlIHByb3BlciBzdHlsaW5nIG9mIGNvbnRhaW5lcnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29udGFpbmVycyA9IHZvaWQgMDtcbiAgICB0aGlzLm1vZGFscyA9IHZvaWQgMDtcbiAgICB0aGlzLm1vZGFscyA9IFtdO1xuICAgIHRoaXMuY29udGFpbmVycyA9IFtdO1xuICB9XG5cbiAgYWRkKG1vZGFsLCBjb250YWluZXIpIHtcbiAgICBsZXQgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgaWYgKG1vZGFsSW5kZXggIT09IC0xKSB7XG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG5cbiAgICBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMubGVuZ3RoO1xuICAgIHRoaXMubW9kYWxzLnB1c2gobW9kYWwpOyAvLyBJZiB0aGUgbW9kYWwgd2UgYXJlIGFkZGluZyBpcyBhbHJlYWR5IGluIHRoZSBET00uXG5cbiAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgIGFyaWFIaWRkZW4obW9kYWwubW9kYWxSZWYsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBjb25zdCBoaWRkZW5TaWJsaW5ncyA9IGdldEhpZGRlblNpYmxpbmdzKGNvbnRhaW5lcik7XG4gICAgYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW9kYWwubW91bnQsIG1vZGFsLm1vZGFsUmVmLCBoaWRkZW5TaWJsaW5ncywgdHJ1ZSk7XG4gICAgY29uc3QgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGl0ZW0gPT4gaXRlbS5jb250YWluZXIgPT09IGNvbnRhaW5lcik7XG5cbiAgICBpZiAoY29udGFpbmVySW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdLm1vZGFscy5wdXNoKG1vZGFsKTtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cblxuICAgIHRoaXMuY29udGFpbmVycy5wdXNoKHtcbiAgICAgIG1vZGFsczogW21vZGFsXSxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHJlc3RvcmU6IG51bGwsXG4gICAgICBoaWRkZW5TaWJsaW5nc1xuICAgIH0pO1xuICAgIHJldHVybiBtb2RhbEluZGV4O1xuICB9XG5cbiAgbW91bnQobW9kYWwsIHByb3BzKSB7XG4gICAgY29uc3QgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGl0ZW0gPT4gaXRlbS5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xKTtcbiAgICBjb25zdCBjb250YWluZXJJbmZvID0gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XTtcblxuICAgIGlmICghY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUgPSBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZShtb2RhbCkge1xuICAgIGNvbnN0IG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcblxuICAgIGlmIChtb2RhbEluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGl0ZW0gPT4gaXRlbS5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xKTtcbiAgICBjb25zdCBjb250YWluZXJJbmZvID0gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XTtcbiAgICBjb250YWluZXJJbmZvLm1vZGFscy5zcGxpY2UoY29udGFpbmVySW5mby5tb2RhbHMuaW5kZXhPZihtb2RhbCksIDEpO1xuICAgIHRoaXMubW9kYWxzLnNwbGljZShtb2RhbEluZGV4LCAxKTsgLy8gSWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsIGNsZWFuIHVwIHRoZSBjb250YWluZXIuXG5cbiAgICBpZiAoY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBUaGUgbW9kYWwgbWlnaHQgYmUgY2xvc2VkIGJlZm9yZSBpdCBoYWQgdGhlIGNoYW5jZSB0byBiZSBtb3VudGVkIGluIHRoZSBET00uXG4gICAgICBpZiAoY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICAgIGNvbnRhaW5lckluZm8ucmVzdG9yZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgLy8gSW4gY2FzZSB0aGUgbW9kYWwgd2Fzbid0IGluIHRoZSBET00geWV0LlxuICAgICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lckluZm8uY29udGFpbmVyLCBtb2RhbC5tb3VudCwgbW9kYWwubW9kYWxSZWYsIGNvbnRhaW5lckluZm8uaGlkZGVuU2libGluZ3MsIGZhbHNlKTtcbiAgICAgIHRoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySW5kZXgsIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgc2NyZWVuIHJlYWRlci5cbiAgICAgIGNvbnN0IG5leHRUb3AgPSBjb250YWluZXJJbmZvLm1vZGFsc1tjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggLSAxXTsgLy8gYXMgc29vbiBhcyBhIG1vZGFsIGlzIGFkZGluZyBpdHMgbW9kYWxSZWYgaXMgdW5kZWZpbmVkLiBpdCBjYW4ndCBzZXRcbiAgICAgIC8vIGFyaWEtaGlkZGVuIGJlY2F1c2UgdGhlIGRvbSBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgZWl0aGVyXG4gICAgICAvLyB3aGVuIG1vZGFsIHdhcyB1bm1vdW50ZWQgYmVmb3JlIG1vZGFsUmVmIGdldHMgbnVsbFxuXG4gICAgICBpZiAobmV4dFRvcC5tb2RhbFJlZikge1xuICAgICAgICBhcmlhSGlkZGVuKG5leHRUb3AubW9kYWxSZWYsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgfVxuXG4gIGlzVG9wTW9kYWwobW9kYWwpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RhbHMubGVuZ3RoID4gMCAmJiB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXSA9PT0gbW9kYWw7XG4gIH1cblxufSIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiwgY29uc2lzdGVudC1yZXR1cm4sIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLXRhYmluZGV4ICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCBlbGVtZW50QWNjZXB0aW5nUmVmLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnOyAvLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZm9jdXMtdHJhcC90YWJiYWJsZVxuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgY2FuZGlkYXRlc1NlbGVjdG9yID0gWydpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnLCAnYVtocmVmXScsICdidXR0b24nLCAnW3RhYmluZGV4XScsICdhdWRpb1tjb250cm9sc10nLCAndmlkZW9bY29udHJvbHNdJywgJ1tjb250ZW50ZWRpdGFibGVdOm5vdChbY29udGVudGVkaXRhYmxlPVwiZmFsc2VcIl0pJ10uam9pbignLCcpO1xuXG5mdW5jdGlvbiBnZXRUYWJJbmRleChub2RlKSB7XG4gIGNvbnN0IHRhYmluZGV4QXR0ciA9IHBhcnNlSW50KG5vZGUuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpLCAxMCk7XG5cbiAgaWYgKCFOdW1iZXIuaXNOYU4odGFiaW5kZXhBdHRyKSkge1xuICAgIHJldHVybiB0YWJpbmRleEF0dHI7XG4gIH0gLy8gQnJvd3NlcnMgZG8gbm90IHJldHVybiBgdGFiSW5kZXhgIGNvcnJlY3RseSBmb3IgY29udGVudEVkaXRhYmxlIG5vZGVzO1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02NjExMDgmcT1jb250ZW50ZWRpdGFibGUlMjB0YWJpbmRleCZjYW49MlxuICAvLyBzbyBpZiB0aGV5IGRvbid0IGhhdmUgYSB0YWJpbmRleCBhdHRyaWJ1dGUgc3BlY2lmaWNhbGx5IHNldCwgYXNzdW1lIGl0J3MgMC5cbiAgLy8gaW4gQ2hyb21lLCA8ZGV0YWlscy8+LCA8YXVkaW8gY29udHJvbHMvPiBhbmQgPHZpZGVvIGNvbnRyb2xzLz4gZWxlbWVudHMgZ2V0IGEgZGVmYXVsdFxuICAvLyAgYHRhYkluZGV4YCBvZiAtMSB3aGVuIHRoZSAndGFiaW5kZXgnIGF0dHJpYnV0ZSBpc24ndCBzcGVjaWZpZWQgaW4gdGhlIERPTSxcbiAgLy8gIHlldCB0aGV5IGFyZSBzdGlsbCBwYXJ0IG9mIHRoZSByZWd1bGFyIHRhYiBvcmRlcjsgaW4gRkYsIHRoZXkgZ2V0IGEgZGVmYXVsdFxuICAvLyAgYHRhYkluZGV4YCBvZiAwOyBzaW5jZSBDaHJvbWUgc3RpbGwgcHV0cyB0aG9zZSBlbGVtZW50cyBpbiB0aGUgcmVndWxhciB0YWJcbiAgLy8gIG9yZGVyLCBjb25zaWRlciB0aGVpciB0YWIgaW5kZXggdG8gYmUgMC5cblxuXG4gIGlmIChub2RlLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnIHx8IChub2RlLm5vZGVOYW1lID09PSAnQVVESU8nIHx8IG5vZGUubm9kZU5hbWUgPT09ICdWSURFTycgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ0RFVEFJTFMnKSAmJiBub2RlLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIG5vZGUudGFiSW5kZXg7XG59XG5cbmZ1bmN0aW9uIGlzTm9uVGFiYmFibGVSYWRpbyhub2RlKSB7XG4gIGlmIChub2RlLnRhZ05hbWUgIT09ICdJTlBVVCcgfHwgbm9kZS50eXBlICE9PSAncmFkaW8nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFub2RlLm5hbWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBnZXRSYWRpbyA9IHNlbGVjdG9yID0+IG5vZGUub3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFt0eXBlPVwicmFkaW9cIl0ke3NlbGVjdG9yfWApO1xuXG4gIGxldCByb3ZpbmcgPSBnZXRSYWRpbyhgW25hbWU9XCIke25vZGUubmFtZX1cIl06Y2hlY2tlZGApO1xuXG4gIGlmICghcm92aW5nKSB7XG4gICAgcm92aW5nID0gZ2V0UmFkaW8oYFtuYW1lPVwiJHtub2RlLm5hbWV9XCJdYCk7XG4gIH1cblxuICByZXR1cm4gcm92aW5nICE9PSBub2RlO1xufVxuXG5mdW5jdGlvbiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG5vZGUpIHtcbiAgaWYgKG5vZGUuZGlzYWJsZWQgfHwgbm9kZS50YWdOYW1lID09PSAnSU5QVVQnICYmIG5vZGUudHlwZSA9PT0gJ2hpZGRlbicgfHwgaXNOb25UYWJiYWJsZVJhZGlvKG5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXRUYWJiYWJsZShyb290KSB7XG4gIGNvbnN0IHJlZ3VsYXJUYWJOb2RlcyA9IFtdO1xuICBjb25zdCBvcmRlcmVkVGFiTm9kZXMgPSBbXTtcbiAgQXJyYXkuZnJvbShyb290LnF1ZXJ5U2VsZWN0b3JBbGwoY2FuZGlkYXRlc1NlbGVjdG9yKSkuZm9yRWFjaCgobm9kZSwgaSkgPT4ge1xuICAgIGNvbnN0IG5vZGVUYWJJbmRleCA9IGdldFRhYkluZGV4KG5vZGUpO1xuXG4gICAgaWYgKG5vZGVUYWJJbmRleCA9PT0gLTEgfHwgIWlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUobm9kZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobm9kZVRhYkluZGV4ID09PSAwKSB7XG4gICAgICByZWd1bGFyVGFiTm9kZXMucHVzaChub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3JkZXJlZFRhYk5vZGVzLnB1c2goe1xuICAgICAgICBkb2N1bWVudE9yZGVyOiBpLFxuICAgICAgICB0YWJJbmRleDogbm9kZVRhYkluZGV4LFxuICAgICAgICBub2RlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3JkZXJlZFRhYk5vZGVzLnNvcnQoKGEsIGIpID0+IGEudGFiSW5kZXggPT09IGIudGFiSW5kZXggPyBhLmRvY3VtZW50T3JkZXIgLSBiLmRvY3VtZW50T3JkZXIgOiBhLnRhYkluZGV4IC0gYi50YWJJbmRleCkubWFwKGEgPT4gYS5ub2RlKS5jb25jYXQocmVndWxhclRhYk5vZGVzKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdElzRW5hYmxlZCgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIFV0aWxpdHkgY29tcG9uZW50IHRoYXQgbG9ja3MgZm9jdXMgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBVbnN0YWJsZV9UcmFwRm9jdXMocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGRpc2FibGVBdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IGZhbHNlLFxuICAgIGdldFRhYmJhYmxlID0gZGVmYXVsdEdldFRhYmJhYmxlLFxuICAgIGlzRW5hYmxlZCA9IGRlZmF1bHRJc0VuYWJsZWQsXG4gICAgb3BlblxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGlnbm9yZU5leHRFbmZvcmNlRm9jdXMgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3Qgc2VudGluZWxTdGFydCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3Qgc2VudGluZWxFbmQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG5vZGVUb1Jlc3RvcmUgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJlYWN0Rm9jdXNFdmVudFRhcmdldCA9IFJlYWN0LnVzZVJlZihudWxsKTsgLy8gVGhpcyB2YXJpYWJsZSBpcyB1c2VmdWwgd2hlbiBkaXNhYmxlQXV0b0ZvY3VzIGlzIHRydWUuXG4gIC8vIEl0IHdhaXRzIGZvciB0aGUgYWN0aXZlIGVsZW1lbnQgdG8gbW92ZSBpbnRvIHRoZSBjb21wb25lbnQgdG8gYWN0aXZhdGUuXG5cbiAgY29uc3QgYWN0aXZhdGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3Qgcm9vdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJvb3RSZWYpO1xuICBjb25zdCBsYXN0S2V5ZG93biA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBXZSBtaWdodCByZW5kZXIgYW4gZW1wdHkgY2hpbGQuXG4gICAgaWYgKCFvcGVuIHx8ICFyb290UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9ICFkaXNhYmxlQXV0b0ZvY3VzO1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgb3Blbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cbiAgICBpZiAoIW9wZW4gfHwgIXJvb3RSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQocm9vdFJlZi5jdXJyZW50KTtcblxuICAgIGlmICghcm9vdFJlZi5jdXJyZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgaWYgKCFyb290UmVmLmN1cnJlbnQuaGFzQXR0cmlidXRlKCd0YWJJbmRleCcpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlIG1vZGFsIGNvbnRlbnQgbm9kZSBkb2VzIG5vdCBhY2NlcHQgZm9jdXMuJywgJ0ZvciB0aGUgYmVuZWZpdCBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCAnICsgJ3RoZSB0YWJJbmRleCBvZiB0aGUgbm9kZSBpcyBiZWluZyBzZXQgdG8gXCItMVwiLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgLTEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZhdGVkLmN1cnJlbnQpIHtcbiAgICAgICAgcm9vdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIHJlc3RvcmVMYXN0Rm9jdXMoKVxuICAgICAgaWYgKCFkaXNhYmxlUmVzdG9yZUZvY3VzKSB7XG4gICAgICAgIC8vIEluIElFMTEgaXQgaXMgcG9zc2libGUgZm9yIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgdG8gYmUgbnVsbCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gbm9kZVRvUmVzdG9yZS5jdXJyZW50IGJlaW5nIG51bGwuXG4gICAgICAgIC8vIE5vdCBhbGwgZWxlbWVudHMgaW4gSUUxMSBoYXZlIGEgZm9jdXMgbWV0aG9kLlxuICAgICAgICAvLyBPbmNlIElFMTEgc3VwcG9ydCBpcyBkcm9wcGVkIHRoZSBmb2N1cygpIGNhbGwgY2FuIGJlIHVuY29uZGl0aW9uYWwuXG4gICAgICAgIGlmIChub2RlVG9SZXN0b3JlLmN1cnJlbnQgJiYgbm9kZVRvUmVzdG9yZS5jdXJyZW50LmZvY3VzKSB7XG4gICAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfTsgLy8gTWlzc2luZyBgZGlzYWJsZVJlc3RvcmVGb2N1c2Agd2hpY2ggaXMgZmluZS5cbiAgICAvLyBXZSBkb24ndCBzdXBwb3J0IGNoYW5naW5nIHRoYXQgcHJvcCBvbiBhbiBvcGVuIFRyYXBGb2N1c1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW29wZW5dKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBXZSBtaWdodCByZW5kZXIgYW4gZW1wdHkgY2hpbGQuXG4gICAgaWYgKCFvcGVuIHx8ICFyb290UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7XG5cbiAgICBjb25zdCBjb250YWluID0gbmF0aXZlRXZlbnQgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjdXJyZW50OiByb290RWxlbWVudFxuICAgICAgfSA9IHJvb3RSZWY7IC8vIENsZWFudXAgZnVuY3Rpb25zIGFyZSBleGVjdXRlZCBsYXppbHkgaW4gUmVhY3QgMTcuXG4gICAgICAvLyBDb250YWluIGNhbiBiZSBjYWxsZWQgYmV0d2VlbiB0aGUgY29tcG9uZW50IGJlaW5nIHVubW91bnRlZCBhbmQgaXRzIGNsZWFudXAgZnVuY3Rpb24gYmVpbmcgcnVuLlxuXG4gICAgICBpZiAocm9vdEVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRvYy5oYXNGb2N1cygpIHx8IGRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIWlzRW5hYmxlZCgpIHx8IGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCkge1xuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJvb3RFbGVtZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICAvLyBpZiB0aGUgZm9jdXMgZXZlbnQgaXMgbm90IGNvbWluZyBmcm9tIGluc2lkZSB0aGUgY2hpbGRyZW4ncyByZWFjdCB0cmVlLCByZXNldCB0aGUgcmVmc1xuICAgICAgICBpZiAobmF0aXZlRXZlbnQgJiYgcmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQgIT09IG5hdGl2ZUV2ZW50LnRhcmdldCB8fCBkb2MuYWN0aXZlRWxlbWVudCAhPT0gcmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQpIHtcbiAgICAgICAgICByZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAocmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFjdGl2YXRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRhYmJhYmxlID0gW107XG5cbiAgICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ID09PSBzZW50aW5lbFN0YXJ0LmN1cnJlbnQgfHwgZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHNlbnRpbmVsRW5kLmN1cnJlbnQpIHtcbiAgICAgICAgICB0YWJiYWJsZSA9IGdldFRhYmJhYmxlKHJvb3RSZWYuY3VycmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFiYmFibGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBfbGFzdEtleWRvd24kY3VycmVudCwgX2xhc3RLZXlkb3duJGN1cnJlbnQyO1xuXG4gICAgICAgICAgY29uc3QgaXNTaGlmdFRhYiA9IEJvb2xlYW4oKChfbGFzdEtleWRvd24kY3VycmVudCA9IGxhc3RLZXlkb3duLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbGFzdEtleWRvd24kY3VycmVudC5zaGlmdEtleSkgJiYgKChfbGFzdEtleWRvd24kY3VycmVudDIgPSBsYXN0S2V5ZG93bi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2xhc3RLZXlkb3duJGN1cnJlbnQyLmtleSkgPT09ICdUYWInKTtcbiAgICAgICAgICBjb25zdCBmb2N1c05leHQgPSB0YWJiYWJsZVswXTtcbiAgICAgICAgICBjb25zdCBmb2N1c1ByZXZpb3VzID0gdGFiYmFibGVbdGFiYmFibGUubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAoaXNTaGlmdFRhYikge1xuICAgICAgICAgICAgZm9jdXNQcmV2aW91cy5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb2N1c05leHQuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm9vdEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBsb29wRm9jdXMgPSBuYXRpdmVFdmVudCA9PiB7XG4gICAgICBsYXN0S2V5ZG93bi5jdXJyZW50ID0gbmF0aXZlRXZlbnQ7XG5cbiAgICAgIGlmIChkaXNhYmxlRW5mb3JjZUZvY3VzIHx8ICFpc0VuYWJsZWQoKSB8fCBuYXRpdmVFdmVudC5rZXkgIT09ICdUYWInKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gTWFrZSBzdXJlIHRoZSBuZXh0IHRhYiBzdGFydHMgZnJvbSB0aGUgcmlnaHQgcGxhY2UuXG4gICAgICAvLyBkb2MuYWN0aXZlRWxlbWVudCByZWZlcmVzIHRvIHRoZSBvcmlnaW4uXG5cblxuICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ID09PSByb290UmVmLmN1cnJlbnQgJiYgbmF0aXZlRXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBpZ25vcmUgdGhlIG5leHQgY29udGFpbiBhc1xuICAgICAgICAvLyBpdCB3aWxsIHRyeSB0byBtb3ZlIHRoZSBmb2N1cyBiYWNrIHRvIHRoZSByb290UmVmIGVsZW1lbnQuXG4gICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHNlbnRpbmVsRW5kLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjb250YWluKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7IC8vIFdpdGggRWRnZSwgU2FmYXJpIGFuZCBGaXJlZm94LCBubyBmb2N1cyByZWxhdGVkIGV2ZW50cyBhcmUgZmlyZWQgd2hlbiB0aGUgZm9jdXNlZCBhcmVhIHN0b3BzIGJlaW5nIGEgZm9jdXNlZCBhcmVhLlxuICAgIC8vIGUuZy4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTU5NTYxLlxuICAgIC8vIEluc3RlYWQsIHdlIGNhbiBsb29rIGlmIHRoZSBhY3RpdmUgZWxlbWVudCB3YXMgcmVzdG9yZWQgb24gdGhlIEJPRFkgZWxlbWVudC5cbiAgICAvL1xuICAgIC8vIFRoZSB3aGF0d2cgc3BlYyBkZWZpbmVzIGhvdyB0aGUgYnJvd3NlciBzaG91bGQgYmVoYXZlIGJ1dCBkb2VzIG5vdCBleHBsaWNpdGx5IG1lbnRpb24gYW55IGV2ZW50czpcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbnRlcmFjdGlvbi5odG1sI2ZvY3VzLWZpeHVwLXJ1bGUuXG5cbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudC50YWdOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgY29udGFpbigpO1xuICAgICAgfVxuICAgIH0sIDUwKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGNvbnRhaW4pO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpO1xuICAgIH07XG4gIH0sIFtkaXNhYmxlQXV0b0ZvY3VzLCBkaXNhYmxlRW5mb3JjZUZvY3VzLCBkaXNhYmxlUmVzdG9yZUZvY3VzLCBpc0VuYWJsZWQsIG9wZW4sIGdldFRhYmJhYmxlXSk7XG5cbiAgY29uc3Qgb25Gb2N1cyA9IGV2ZW50ID0+IHtcbiAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIH1cblxuICAgIGFjdGl2YXRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICByZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCA9IGV2ZW50LnRhcmdldDtcbiAgICBjb25zdCBjaGlsZHJlblByb3BzSGFuZGxlciA9IGNoaWxkcmVuLnByb3BzLm9uRm9jdXM7XG5cbiAgICBpZiAoY2hpbGRyZW5Qcm9wc0hhbmRsZXIpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHNIYW5kbGVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRm9jdXNTZW50aW5lbCA9IGV2ZW50ID0+IHtcbiAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIH1cblxuICAgIGFjdGl2YXRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChcImRpdlwiLCB7XG4gICAgICB0YWJJbmRleDogMCxcbiAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzU2VudGluZWwsXG4gICAgICByZWY6IHNlbnRpbmVsU3RhcnQsXG4gICAgICBcImRhdGEtdGVzdFwiOiBcInNlbnRpbmVsU3RhcnRcIlxuICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgIG9uRm9jdXNcbiAgICB9KSwgLyojX19QVVJFX18qL19qc3goXCJkaXZcIiwge1xuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1NlbnRpbmVsLFxuICAgICAgcmVmOiBzZW50aW5lbEVuZCxcbiAgICAgIFwiZGF0YS10ZXN0XCI6IFwic2VudGluZWxFbmRcIlxuICAgIH0pXVxuICB9KTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVW5zdGFibGVfVHJhcEZvY3VzLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZixcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhcCBmb2N1cyB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuXG4gICAqIFRoaXMgYWxzbyB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgdHJhcCBmb2N1cyBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgdHJhcCBmb2N1cyBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFwIGZvY3VzIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSB0cmFwIGZvY3VzIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSB0cmFwIGZvY3VzIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRyYXAgZm9jdXMgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIHRyYXAgZm9jdXMgaXMgaGlkZGVuLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2Ygb3JkZXJlZCB0YWJiYWJsZSBub2RlcyAoaS5lLiBpbiB0YWIgb3JkZXIpIHdpdGhpbiB0aGUgcm9vdC5cbiAgICogRm9yIGluc3RhbmNlLCB5b3UgY2FuIHByb3ZpZGUgdGhlIFwidGFiYmFibGVcIiBucG0gZGVwZW5kZW5jeS5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdFxuICAgKi9cbiAgZ2V0VGFiYmFibGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgZXh0ZW5kcyB0aGUgYG9wZW5gIHByb3AuXG4gICAqIEl0IGFsbG93cyB0byB0b2dnbGUgdGhlIG9wZW4gc3RhdGUgd2l0aG91dCBoYXZpbmcgdG8gd2FpdCBmb3IgYSByZXJlbmRlciB3aGVuIGNoYW5naW5nIHRoZSBgb3BlbmAgcHJvcC5cbiAgICogVGhpcyBwcm9wIHNob3VsZCBiZSBtZW1vaXplZC5cbiAgICogSXQgY2FuIGJlIHVzZWQgdG8gc3VwcG9ydCBtdWx0aXBsZSB0cmFwIGZvY3VzIG1vdW50ZWQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICogQGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdElzRW5hYmxlZCgpIHtcbiAgICogICByZXR1cm4gdHJ1ZTtcbiAgICogfVxuICAgKi9cbiAgaXNFbmFibGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBmb2N1cyBpcyBsb2NrZWQuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgVW5zdGFibGVfVHJhcEZvY3VzWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKFVuc3RhYmxlX1RyYXBGb2N1cy5wcm9wVHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBVbnN0YWJsZV9UcmFwRm9jdXM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1vZGFsVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlNb2RhbCcsIHNsb3QpO1xufVxuY29uc3QgbW9kYWxVbnN0eWxlZENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlNb2RhbCcsIFsncm9vdCcsICdoaWRkZW4nXSk7XG5leHBvcnQgZGVmYXVsdCBtb2RhbFVuc3R5bGVkQ2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiQmFja2Ryb3BDb21wb25lbnRcIiwgXCJCYWNrZHJvcFByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xvc2VBZnRlclRyYW5zaXRpb25cIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiY29udGFpbmVyXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c1wiLCBcImRpc2FibGVFbmZvcmNlRm9jdXNcIiwgXCJkaXNhYmxlRXNjYXBlS2V5RG93blwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJkaXNhYmxlUmVzdG9yZUZvY3VzXCIsIFwiZGlzYWJsZVNjcm9sbExvY2tcIiwgXCJoaWRlQmFja2Ryb3BcIiwgXCJrZWVwTW91bnRlZFwiLCBcIm1hbmFnZXJcIiwgXCJvbkJhY2tkcm9wQ2xpY2tcIiwgXCJvbkNsb3NlXCIsIFwib25LZXlEb3duXCIsIFwib3BlblwiLCBcInRoZW1lXCIsIFwib25UcmFuc2l0aW9uRW50ZXJcIiwgXCJvblRyYW5zaXRpb25FeGl0ZWRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmLCBIVE1MRWxlbWVudFR5cGUsIHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV9jcmVhdGVDaGFpbmVkRnVuY3Rpb24gYXMgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLCB1bnN0YWJsZV91c2VFdmVudENhbGxiYWNrIGFzIHVzZUV2ZW50Q2FsbGJhY2sgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICcuLi9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgaXNIb3N0Q29tcG9uZW50IGZyb20gJy4uL3V0aWxzL2lzSG9zdENvbXBvbmVudCc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL1BvcnRhbCc7XG5pbXBvcnQgTW9kYWxNYW5hZ2VyLCB7IGFyaWFIaWRkZW4gfSBmcm9tICcuL01vZGFsTWFuYWdlcic7XG5pbXBvcnQgVHJhcEZvY3VzIGZyb20gJy4uL1Vuc3RhYmxlX1RyYXBGb2N1cyc7XG5pbXBvcnQgeyBnZXRNb2RhbFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vbW9kYWxVbnN0eWxlZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIG9wZW4sXG4gICAgZXhpdGVkLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFvcGVuICYmIGV4aXRlZCAmJiAnaGlkZGVuJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRNb2RhbFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIHJldHVybiB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG59XG5cbmZ1bmN0aW9uIGdldEhhc1RyYW5zaXRpb24ocHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzLmNoaWxkcmVuID8gcHJvcHMuY2hpbGRyZW4ucHJvcHMuaGFzT3duUHJvcGVydHkoJ2luJykgOiBmYWxzZTtcbn0gLy8gQSBtb2RhbCBtYW5hZ2VyIHVzZWQgdG8gdHJhY2sgYW5kIG1hbmFnZSB0aGUgc3RhdGUgb2Ygb3BlbiBNb2RhbHMuXG4vLyBNb2RhbHMgZG9uJ3Qgb3BlbiBvbiB0aGUgc2VydmVyIHNvIHRoaXMgd29uJ3QgY29uZmxpY3Qgd2l0aCBjb25jdXJyZW50IHJlcXVlc3RzLlxuXG5cbmNvbnN0IGRlZmF1bHRNYW5hZ2VyID0gbmV3IE1vZGFsTWFuYWdlcigpO1xuLyoqXG4gKiBNb2RhbCBpcyBhIGxvd2VyLWxldmVsIGNvbnN0cnVjdCB0aGF0IGlzIGxldmVyYWdlZCBieSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogLSBbRGlhbG9nXSgvYXBpL2RpYWxvZy8pXG4gKiAtIFtEcmF3ZXJdKC9hcGkvZHJhd2VyLylcbiAqIC0gW01lbnVdKC9hcGkvbWVudS8pXG4gKiAtIFtQb3BvdmVyXSgvYXBpL3BvcG92ZXIvKVxuICpcbiAqIElmIHlvdSBhcmUgY3JlYXRpbmcgYSBtb2RhbCBkaWFsb2csIHlvdSBwcm9iYWJseSB3YW50IHRvIHVzZSB0aGUgW0RpYWxvZ10oL2FwaS9kaWFsb2cvKSBjb21wb25lbnRcbiAqIHJhdGhlciB0aGFuIGRpcmVjdGx5IHVzaW5nIE1vZGFsLlxuICpcbiAqIFRoaXMgY29tcG9uZW50IHNoYXJlcyBtYW55IGNvbmNlcHRzIHdpdGggW3JlYWN0LW92ZXJsYXlzXShodHRwczovL3JlYWN0LWJvb3RzdHJhcC5naXRodWIuaW8vcmVhY3Qtb3ZlcmxheXMvI21vZGFscykuXG4gKi9cblxuY29uc3QgTW9kYWxVbnN0eWxlZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1vZGFsVW5zdHlsZWQocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgQmFja2Ryb3BDb21wb25lbnQsXG4gICAgQmFja2Ryb3BQcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcCxcbiAgICBjbGFzc05hbWUsXG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb24gPSBmYWxzZSxcbiAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgY29udGFpbmVyLFxuICAgIGRpc2FibGVBdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVzY2FwZUtleURvd24gPSBmYWxzZSxcbiAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2UsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrID0gZmFsc2UsXG4gICAgaGlkZUJhY2tkcm9wID0gZmFsc2UsXG4gICAga2VlcE1vdW50ZWQgPSBmYWxzZSxcbiAgICAvLyBwcml2YXRlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBtYW5hZ2VyID0gZGVmYXVsdE1hbmFnZXIsXG4gICAgb25CYWNrZHJvcENsaWNrLFxuICAgIG9uQ2xvc2UsXG4gICAgb25LZXlEb3duLFxuICAgIG9wZW4sXG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzICovXG4gICAgdGhlbWUsXG4gICAgb25UcmFuc2l0aW9uRW50ZXIsXG4gICAgb25UcmFuc2l0aW9uRXhpdGVkXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBbZXhpdGVkLCBzZXRFeGl0ZWRdID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IG1vZGFsID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgY29uc3QgbW91bnROb2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBtb2RhbFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihtb2RhbFJlZiwgcmVmKTtcbiAgY29uc3QgaGFzVHJhbnNpdGlvbiA9IGdldEhhc1RyYW5zaXRpb24ocHJvcHMpO1xuXG4gIGNvbnN0IGdldERvYyA9ICgpID0+IG93bmVyRG9jdW1lbnQobW91bnROb2RlUmVmLmN1cnJlbnQpO1xuXG4gIGNvbnN0IGdldE1vZGFsID0gKCkgPT4ge1xuICAgIG1vZGFsLmN1cnJlbnQubW9kYWxSZWYgPSBtb2RhbFJlZi5jdXJyZW50O1xuICAgIG1vZGFsLmN1cnJlbnQubW91bnROb2RlID0gbW91bnROb2RlUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIG1vZGFsLmN1cnJlbnQ7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlTW91bnRlZCA9ICgpID0+IHtcbiAgICBtYW5hZ2VyLm1vdW50KGdldE1vZGFsKCksIHtcbiAgICAgIGRpc2FibGVTY3JvbGxMb2NrXG4gICAgfSk7IC8vIEZpeCBhIGJ1ZyBvbiBDaHJvbWUgd2hlcmUgdGhlIHNjcm9sbCBpc24ndCBpbml0aWFsbHkgMC5cblxuICAgIG1vZGFsUmVmLmN1cnJlbnQuc2Nyb2xsVG9wID0gMDtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVPcGVuID0gdXNlRXZlbnRDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWRDb250YWluZXIgPSBnZXRDb250YWluZXIoY29udGFpbmVyKSB8fCBnZXREb2MoKS5ib2R5O1xuICAgIG1hbmFnZXIuYWRkKGdldE1vZGFsKCksIHJlc29sdmVkQ29udGFpbmVyKTsgLy8gVGhlIGVsZW1lbnQgd2FzIGFscmVhZHkgbW91bnRlZC5cblxuICAgIGlmIChtb2RhbFJlZi5jdXJyZW50KSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXNUb3BNb2RhbCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IG1hbmFnZXIuaXNUb3BNb2RhbChnZXRNb2RhbCgpKSwgW21hbmFnZXJdKTtcbiAgY29uc3QgaGFuZGxlUG9ydGFsUmVmID0gdXNlRXZlbnRDYWxsYmFjayhub2RlID0+IHtcbiAgICBtb3VudE5vZGVSZWYuY3VycmVudCA9IG5vZGU7XG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob3BlbiAmJiBpc1RvcE1vZGFsKCkpIHtcbiAgICAgIGhhbmRsZU1vdW50ZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJpYUhpZGRlbihtb2RhbFJlZi5jdXJyZW50LCB0cnVlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVDbG9zZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBtYW5hZ2VyLnJlbW92ZShnZXRNb2RhbCgpKTtcbiAgfSwgW21hbmFnZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9O1xuICB9LCBbaGFuZGxlQ2xvc2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAob3Blbikge1xuICAgICAgaGFuZGxlT3BlbigpO1xuICAgIH0gZWxzZSBpZiAoIWhhc1RyYW5zaXRpb24gfHwgIWNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfSwgW29wZW4sIGhhbmRsZUNsb3NlLCBoYXNUcmFuc2l0aW9uLCBjbG9zZUFmdGVyVHJhbnNpdGlvbiwgaGFuZGxlT3Blbl0pO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcCxcbiAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgIGRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgZGlzYWJsZVBvcnRhbCxcbiAgICBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrLFxuICAgIGV4aXRlZCxcbiAgICBoaWRlQmFja2Ryb3AsXG4gICAga2VlcE1vdW50ZWRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuXG4gIGlmICgha2VlcE1vdW50ZWQgJiYgIW9wZW4gJiYgKCFoYXNUcmFuc2l0aW9uIHx8IGV4aXRlZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUVudGVyID0gKCkgPT4ge1xuICAgIHNldEV4aXRlZChmYWxzZSk7XG5cbiAgICBpZiAob25UcmFuc2l0aW9uRW50ZXIpIHtcbiAgICAgIG9uVHJhbnNpdGlvbkVudGVyKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9ICgpID0+IHtcbiAgICBzZXRFeGl0ZWQodHJ1ZSk7XG5cbiAgICBpZiAob25UcmFuc2l0aW9uRXhpdGVkKSB7XG4gICAgICBvblRyYW5zaXRpb25FeGl0ZWQoKTtcbiAgICB9XG5cbiAgICBpZiAoY2xvc2VBZnRlclRyYW5zaXRpb24pIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUJhY2tkcm9wQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkJhY2tkcm9wQ2xpY2spIHtcbiAgICAgIG9uQmFja2Ryb3BDbGljayhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQsICdiYWNrZHJvcENsaWNrJyk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9IC8vIFRoZSBoYW5kbGVyIGRvZXNuJ3QgdGFrZSBldmVudC5kZWZhdWx0UHJldmVudGVkIGludG8gYWNjb3VudDpcbiAgICAvL1xuICAgIC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KCkgaXMgbWVhbnQgdG8gc3RvcCBkZWZhdWx0IGJlaGF2aW9ycyBsaWtlXG4gICAgLy8gY2xpY2tpbmcgYSBjaGVja2JveCB0byBjaGVjayBpdCwgaGl0dGluZyBhIGJ1dHRvbiB0byBzdWJtaXQgYSBmb3JtLFxuICAgIC8vIGFuZCBoaXR0aW5nIGxlZnQgYXJyb3cgdG8gbW92ZSB0aGUgY3Vyc29yIGluIGEgdGV4dCBpbnB1dCBldGMuXG4gICAgLy8gT25seSBzcGVjaWFsIEhUTUwgZWxlbWVudHMgaGF2ZSB0aGVzZSBkZWZhdWx0IGJlaGF2aW9ycy5cblxuXG4gICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VzY2FwZScgfHwgIWlzVG9wTW9kYWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGlzYWJsZUVzY2FwZUtleURvd24pIHtcbiAgICAgIC8vIFN3YWxsb3cgdGhlIGV2ZW50LCBpbiBjYXNlIHNvbWVvbmUgaXMgbGlzdGVuaW5nIGZvciB0aGUgZXNjYXBlIGtleSBvbiB0aGUgYm9keS5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKGV2ZW50LCAnZXNjYXBlS2V5RG93bicpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBjaGlsZFByb3BzID0ge307XG5cbiAgaWYgKGNoaWxkcmVuLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZFByb3BzLnRhYkluZGV4ID0gJy0xJztcbiAgfSAvLyBJdCdzIGEgVHJhbnNpdGlvbiBsaWtlIGNvbXBvbmVudFxuXG5cbiAgaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgICBjaGlsZFByb3BzLm9uRW50ZXIgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlRW50ZXIsIGNoaWxkcmVuLnByb3BzLm9uRW50ZXIpO1xuICAgIGNoaWxkUHJvcHMub25FeGl0ZWQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlRXhpdGVkLCBjaGlsZHJlbi5wcm9wcy5vbkV4aXRlZCk7XG4gIH1cblxuICBjb25zdCBSb290ID0gY29tcG9uZW50cy5Sb290IHx8IGNvbXBvbmVudDtcbiAgY29uc3Qgcm9vdFByb3BzID0gY29tcG9uZW50c1Byb3BzLnJvb3QgfHwge307XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChQb3J0YWwsIHtcbiAgICByZWY6IGhhbmRsZVBvcnRhbFJlZixcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBkaXNhYmxlUG9ydGFsOiBkaXNhYmxlUG9ydGFsLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgcm9sZTogXCJwcmVzZW50YXRpb25cIlxuICAgIH0sIHJvb3RQcm9wcywgIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHJvb3RQcm9wcy5vd25lclN0YXRlKSxcbiAgICAgIHRoZW1lXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgcm9vdFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKSxcbiAgICAgIGNoaWxkcmVuOiBbIWhpZGVCYWNrZHJvcCAmJiBCYWNrZHJvcENvbXBvbmVudCA/IC8qI19fUFVSRV9fKi9fanN4KEJhY2tkcm9wQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgIG9uQ2xpY2s6IGhhbmRsZUJhY2tkcm9wQ2xpY2tcbiAgICAgIH0sIEJhY2tkcm9wUHJvcHMpKSA6IG51bGwsIC8qI19fUFVSRV9fKi9fanN4KFRyYXBGb2N1cywge1xuICAgICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgICBkaXNhYmxlQXV0b0ZvY3VzOiBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgICBpc0VuYWJsZWQ6IGlzVG9wTW9kYWwsXG4gICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZFByb3BzKVxuICAgICAgfSldXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNb2RhbFVuc3R5bGVkLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIGJhY2tkcm9wIGNvbXBvbmVudC4gVGhpcyBwcm9wIGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgQmFja2Ryb3BVbnN0eWxlZGBdKC9hcGkvYmFja2Ryb3AtdW5zdHlsZWQvKSBlbGVtZW50LlxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBXaGVuIHNldCB0byB0cnVlIHRoZSBNb2RhbCB3YWl0cyB1bnRpbCBhIG5lc3RlZCBUcmFuc2l0aW9uIGlzIGNvbXBsZXRlZCBiZWZvcmUgY2xvc2luZy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIE1vZGFsLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNb2RhbC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuXG4gICAqIFRoaXMgYWxzbyB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgbW9kYWwgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgZGlzYWJsZUF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBtb2RhbCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIHRoZSBgb25DbG9zZWAgY2FsbGJhY2suXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBgY2hpbGRyZW5gIHdpbGwgYmUgdW5kZXIgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIG1vZGFsIGlzIGhpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBzY3JvbGwgbG9jayBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTY3JvbGxMb2NrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgbm90IHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZUJhY2tkcm9wOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIE1vZGFsLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLlxuICAgKi9cbiAgb25CYWNrZHJvcENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWxVbnN0eWxlZDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJhY2tkcm9wJywgc2xvdCk7XG59XG5jb25zdCBiYWNrZHJvcFVuc3R5bGVkQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJhY2tkcm9wJywgWydyb290JywgJ2ludmlzaWJsZSddKTtcbmV4cG9ydCBkZWZhdWx0IGJhY2tkcm9wVW5zdHlsZWRDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiaW52aXNpYmxlXCIsIFwiY29tcG9uZW50XCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcInRoZW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJy4uL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBpc0hvc3RDb21wb25lbnQgZnJvbSAnLi4vdXRpbHMvaXNIb3N0Q29tcG9uZW50JztcbmltcG9ydCB7IGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9iYWNrZHJvcFVuc3R5bGVkQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBpbnZpc2libGVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGludmlzaWJsZSAmJiAnaW52aXNpYmxlJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRCYWNrZHJvcFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBCYWNrZHJvcFVuc3R5bGVkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQmFja2Ryb3BVbnN0eWxlZChwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcCxcbiAgICBjbGFzc05hbWUsXG4gICAgaW52aXNpYmxlID0gZmFsc2UsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuICAgIHRoZW1lXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgaW52aXNpYmxlXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgUm9vdCA9IGNvbXBvbmVudHMuUm9vdCB8fCBjb21wb25lbnQ7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUm9vdCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZVxuICB9LCByb290UHJvcHMsICFpc0hvc3RDb21wb25lbnQoUm9vdCkgJiYge1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHJvb3RQcm9wcy5vd25lclN0YXRlKSxcbiAgICB0aGVtZVxuICB9LCB7XG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCByb290UHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQmFja2Ryb3BVbnN0eWxlZC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgQmFja2Ryb3AuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcblxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIEJhY2tkcm9wLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIGludmlzaWJsZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgYSBwb3BvdmVyIG9yIGEgY3VzdG9tIHNlbGVjdCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbnZpc2libGU6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQmFja2Ryb3BVbnN0eWxlZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWRkRW5kTGlzdGVuZXJcIiwgXCJhcHBlYXJcIiwgXCJjaGlsZHJlblwiLCBcImVhc2luZ1wiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvY3JlYXRlVHJhbnNpdGlvbnMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn07XG5jb25zdCBkZWZhdWx0VGltZW91dCA9IHtcbiAgZW50ZXI6IGR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICBleGl0OiBkdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG59O1xuLyoqXG4gKiBUaGUgRmFkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtNb2RhbF0oL2NvbXBvbmVudHMvbW9kYWwvKSBjb21wb25lbnQuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cbmNvbnN0IEZhZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGYWRlKHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIGFkZEVuZExpc3RlbmVyLFxuICAgIGFwcGVhciA9IHRydWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZWFzaW5nLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FbnRlcixcbiAgICBvbkVudGVyZWQsXG4gICAgb25FbnRlcmluZyxcbiAgICBvbkV4aXQsXG4gICAgb25FeGl0ZWQsXG4gICAgb25FeGl0aW5nLFxuICAgIHN0eWxlLFxuICAgIHRpbWVvdXQgPSBkZWZhdWx0VGltZW91dCxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBUcmFuc2l0aW9uXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPSB0cnVlO1xuICBjb25zdCBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBmb3JlaWduUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobm9kZVJlZiwgZm9yZWlnblJlZik7XG5cbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGNhbGxiYWNrID0+IG1heWJlSXNBcHBlYXJpbmcgPT4ge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVSZWYuY3VycmVudDsgLy8gb25FbnRlclh4eCBhbmQgb25FeGl0WHh4IGNhbGxiYWNrcyBoYXZlIGEgZGlmZmVyZW50IGFyZ3VtZW50cy5sZW5ndGggdmFsdWUuXG5cbiAgICAgIGlmIChtYXliZUlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhub2RlLCBtYXliZUlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIGNvbnN0IGhhbmRsZUV4aXRpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGluZyk7XG4gIGNvbnN0IGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG5cbiAgY29uc3QgaGFuZGxlQWRkRW5kTGlzdGVuZXIgPSBuZXh0ID0+IHtcbiAgICBpZiAoYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIC8vIE9sZCBjYWxsIHNpZ25hdHVyZSBiZWZvcmUgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBgIGltcGxlbWVudGVkIGBub2RlUmVmYFxuICAgICAgYWRkRW5kTGlzdGVuZXIobm9kZVJlZi5jdXJyZW50LCBuZXh0KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IGFwcGVhcixcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgYWRkRW5kTGlzdGVuZXI6IGhhbmRsZUFkZEVuZExpc3RlbmVyLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogKHN0YXRlLCBjaGlsZFByb3BzKSA9PiB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLFxuICAgICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgfSwgY2hpbGRQcm9wcykpO1xuICAgIH1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGYWRlLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmcgRE9NXG4gICAqIG5vZGUgYW5kIGEgZG9uZSBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gTm90ZTogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUGVyZm9ybSB0aGUgZW50ZXIgdHJhbnNpdGlvbiB3aGVuIGl0IGZpcnN0IG1vdW50cyBpZiBgaW5gIGlzIGFsc28gYHRydWVgLlxuICAgKiBTZXQgdGhpcyB0byBgZmFsc2VgIHRvIGRpc2FibGUgdGhpcyBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgZWFzaW5nIG9yIGEgb2JqZWN0IGNvbnRhaW5pbmcgZW50ZXIgYW5kIGV4aXQgdmFsdWVzLlxuICAgKi9cbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiBkdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJjbGFzc05hbWVcIiwgXCJpbnZpc2libGVcIiwgXCJvcGVuXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IEJhY2tkcm9wVW5zdHlsZWQsIHsgYmFja2Ryb3BVbnN0eWxlZENsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvQmFja2Ryb3BVbnN0eWxlZCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi4vRmFkZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IGJhY2tkcm9wQ2xhc3NlcyA9IGJhY2tkcm9wVW5zdHlsZWRDbGFzc2VzO1xuXG5jb25zdCBleHRlbmRVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgcmV0dXJuIGNsYXNzZXM7XG59O1xuXG5jb25zdCBCYWNrZHJvcFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUJhY2tkcm9wJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHN0eWxlcy5pbnZpc2libGVdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCdcbn0sIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG59KSk7XG5jb25zdCBCYWNrZHJvcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJhY2tkcm9wKGluUHJvcHMsIHJlZikge1xuICB2YXIgX2NvbXBvbmVudHNQcm9wcyRyb290O1xuXG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUJhY2tkcm9wJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIGNsYXNzTmFtZSxcbiAgICBpbnZpc2libGUgPSBmYWxzZSxcbiAgICBvcGVuLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBGYWRlXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgaW52aXNpYmxlXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSBleHRlbmRVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBpbjogb3BlbixcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQmFja2Ryb3BVbnN0eWxlZCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBpbnZpc2libGU6IGludmlzaWJsZSxcbiAgICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgICAgUm9vdDogQmFja2Ryb3BSb290XG4gICAgICB9LCBjb21wb25lbnRzKSxcbiAgICAgIGNvbXBvbmVudHNQcm9wczoge1xuICAgICAgICByb290OiBfZXh0ZW5kcyh7fSwgY29tcG9uZW50c1Byb3BzLnJvb3QsICghY29tcG9uZW50cy5Sb290IHx8ICFpc0hvc3RDb21wb25lbnQoY29tcG9uZW50cy5Sb290KSkgJiYge1xuICAgICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCAoX2NvbXBvbmVudHNQcm9wcyRyb290ID0gY29tcG9uZW50c1Byb3BzLnJvb3QpID09IG51bGwgPyB2b2lkIDAgOiBfY29tcG9uZW50c1Byb3BzJHJvb3Qub3duZXJTdGF0ZSlcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJhY2tkcm9wLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIEJhY2tkcm9wLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWNrZHJvcC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBpbnZpc2libGUuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIGEgcG9wb3ZlciBvciBhIGN1c3RvbSBzZWxlY3QgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQmFja2Ryb3A7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIkJhY2tkcm9wQ29tcG9uZW50XCIsIFwiY2xvc2VBZnRlclRyYW5zaXRpb25cIiwgXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzXCIsIFwiZGlzYWJsZUVuZm9yY2VGb2N1c1wiLCBcImRpc2FibGVFc2NhcGVLZXlEb3duXCIsIFwiZGlzYWJsZVBvcnRhbFwiLCBcImRpc2FibGVSZXN0b3JlRm9jdXNcIiwgXCJkaXNhYmxlU2Nyb2xsTG9ja1wiLCBcImhpZGVCYWNrZHJvcFwiLCBcImtlZXBNb3VudGVkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGlzSG9zdENvbXBvbmVudCB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBNb2RhbFVuc3R5bGVkLCB7IG1vZGFsVW5zdHlsZWRDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL01vZGFsVW5zdHlsZWQnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuLi9CYWNrZHJvcCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IG1vZGFsQ2xhc3NlcyA9IG1vZGFsVW5zdHlsZWRDbGFzc2VzO1xuXG5jb25zdCBleHRlbmRVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICByZXR1cm4gb3duZXJTdGF0ZS5jbGFzc2VzO1xufTtcblxuY29uc3QgTW9kYWxSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlNb2RhbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCAhb3duZXJTdGF0ZS5vcGVuICYmIG93bmVyU3RhdGUuZXhpdGVkICYmIHN0eWxlcy5oaWRkZW5dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgekluZGV4OiB0aGVtZS56SW5kZXgubW9kYWwsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHRvcDogMCxcbiAgbGVmdDogMFxufSwgIW93bmVyU3RhdGUub3BlbiAmJiBvd25lclN0YXRlLmV4aXRlZCAmJiB7XG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nXG59KSk7XG5jb25zdCBNb2RhbEJhY2tkcm9wID0gc3R5bGVkKEJhY2tkcm9wLCB7XG4gIG5hbWU6ICdNdWlNb2RhbCcsXG4gIHNsb3Q6ICdCYWNrZHJvcCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIHJldHVybiBzdHlsZXMuYmFja2Ryb3A7XG4gIH1cbn0pKHtcbiAgekluZGV4OiAtMVxufSk7XG4vKipcbiAqIE1vZGFsIGlzIGEgbG93ZXItbGV2ZWwgY29uc3RydWN0IHRoYXQgaXMgbGV2ZXJhZ2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtEaWFsb2ddKC9hcGkvZGlhbG9nLylcbiAqIC0gW0RyYXdlcl0oL2FwaS9kcmF3ZXIvKVxuICogLSBbTWVudV0oL2FwaS9tZW51LylcbiAqIC0gW1BvcG92ZXJdKC9hcGkvcG9wb3Zlci8pXG4gKlxuICogSWYgeW91IGFyZSBjcmVhdGluZyBhIG1vZGFsIGRpYWxvZywgeW91IHByb2JhYmx5IHdhbnQgdG8gdXNlIHRoZSBbRGlhbG9nXSgvYXBpL2RpYWxvZy8pIGNvbXBvbmVudFxuICogcmF0aGVyIHRoYW4gZGlyZWN0bHkgdXNpbmcgTW9kYWwuXG4gKlxuICogVGhpcyBjb21wb25lbnQgc2hhcmVzIG1hbnkgY29uY2VwdHMgd2l0aCBbcmVhY3Qtb3ZlcmxheXNdKGh0dHBzOi8vcmVhY3QtYm9vdHN0cmFwLmdpdGh1Yi5pby9yZWFjdC1vdmVybGF5cy8jbW9kYWxzKS5cbiAqL1xuXG5jb25zdCBNb2RhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1vZGFsKGluUHJvcHMsIHJlZikge1xuICB2YXIgX2NvbXBvbmVudHNQcm9wcyRyb290O1xuXG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgbmFtZTogJ011aU1vZGFsJyxcbiAgICBwcm9wczogaW5Qcm9wc1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgQmFja2Ryb3BDb21wb25lbnQgPSBNb2RhbEJhY2tkcm9wLFxuICAgIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uID0gZmFsc2UsXG4gICAgY2hpbGRyZW4sXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIGRpc2FibGVBdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVzY2FwZUtleURvd24gPSBmYWxzZSxcbiAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2UsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrID0gZmFsc2UsXG4gICAgaGlkZUJhY2tkcm9wID0gZmFsc2UsXG4gICAga2VlcE1vdW50ZWQgPSBmYWxzZVxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgW2V4aXRlZCwgc2V0RXhpdGVkXSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBjb21tb25Qcm9wcyA9IHtcbiAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgIGRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgZGlzYWJsZVBvcnRhbCxcbiAgICBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrLFxuICAgIGhpZGVCYWNrZHJvcCxcbiAgICBrZWVwTW91bnRlZFxuICB9O1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIGNvbW1vblByb3BzLCB7XG4gICAgZXhpdGVkXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSBleHRlbmRVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE1vZGFsVW5zdHlsZWQsIF9leHRlbmRzKHtcbiAgICBjb21wb25lbnRzOiBfZXh0ZW5kcyh7XG4gICAgICBSb290OiBNb2RhbFJvb3RcbiAgICB9LCBjb21wb25lbnRzKSxcbiAgICBjb21wb25lbnRzUHJvcHM6IHtcbiAgICAgIHJvb3Q6IF9leHRlbmRzKHt9LCBjb21wb25lbnRzUHJvcHMucm9vdCwgKCFjb21wb25lbnRzLlJvb3QgfHwgIWlzSG9zdENvbXBvbmVudChjb21wb25lbnRzLlJvb3QpKSAmJiB7XG4gICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCAoX2NvbXBvbmVudHNQcm9wcyRyb290ID0gY29tcG9uZW50c1Byb3BzLnJvb3QpID09IG51bGwgPyB2b2lkIDAgOiBfY29tcG9uZW50c1Byb3BzJHJvb3Qub3duZXJTdGF0ZSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBCYWNrZHJvcENvbXBvbmVudDogQmFja2Ryb3BDb21wb25lbnQsXG4gICAgb25UcmFuc2l0aW9uRW50ZXI6ICgpID0+IHNldEV4aXRlZChmYWxzZSksXG4gICAgb25UcmFuc2l0aW9uRXhpdGVkOiAoKSA9PiBzZXRFeGl0ZWQodHJ1ZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0sIGNvbW1vblByb3BzLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTW9kYWwucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgYmFja2Ryb3AgY29tcG9uZW50LiBUaGlzIHByb3AgZW5hYmxlcyBjdXN0b20gYmFja2Ryb3AgcmVuZGVyaW5nLlxuICAgKiBAZGVmYXVsdCBzdHlsZWQoQmFja2Ryb3AsIHtcbiAgICogICBuYW1lOiAnTXVpTW9kYWwnLFxuICAgKiAgIHNsb3Q6ICdCYWNrZHJvcCcsXG4gICAqICAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAqICAgICByZXR1cm4gc3R5bGVzLmJhY2tkcm9wO1xuICAgKiAgIH0sXG4gICAqIH0pKHtcbiAgICogICB6SW5kZXg6IC0xLFxuICAgKiB9KVxuICAgKi9cbiAgQmFja2Ryb3BDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BCYWNrZHJvcGBdKC9hcGkvYmFja2Ryb3AvKSBlbGVtZW50LlxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIE1vZGFsLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNb2RhbC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuXG4gICAqIFRoaXMgYWxzbyB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgbW9kYWwgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgZGlzYWJsZUF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBtb2RhbCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIHRoZSBgb25DbG9zZWAgY2FsbGJhY2suXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBgY2hpbGRyZW5gIHdpbGwgYmUgdW5kZXIgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIG1vZGFsIGlzIGhpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBzY3JvbGwgbG9jayBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTY3JvbGxMb2NrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgbm90IHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZUJhY2tkcm9wOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIE1vZGFsLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLlxuICAgKi9cbiAgb25CYWNrZHJvcENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBNb2RhbDsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UG9wb3ZlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpUG9wb3ZlcicsIHNsb3QpO1xufVxuY29uc3QgcG9wb3ZlckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlQb3BvdmVyJywgWydyb290JywgJ3BhcGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgcG9wb3ZlckNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uRW50ZXJpbmdcIl0sXG4gICAgICBfZXhjbHVkZWQyID0gW1wiYWN0aW9uXCIsIFwiYW5jaG9yRWxcIiwgXCJhbmNob3JPcmlnaW5cIiwgXCJhbmNob3JQb3NpdGlvblwiLCBcImFuY2hvclJlZmVyZW5jZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGFpbmVyXCIsIFwiZWxldmF0aW9uXCIsIFwibWFyZ2luVGhyZXNob2xkXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJ0cmFuc2Zvcm1PcmlnaW5cIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGludGVnZXJQcm9wVHlwZSwgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsIHJlZlR5cGUsIEhUTUxFbGVtZW50VHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBvd25lcldpbmRvdyBmcm9tICcuLi91dGlscy9vd25lcldpbmRvdyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBHcm93IGZyb20gJy4uL0dyb3cnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgeyBnZXRQb3BvdmVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wb3BvdmVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldFRvcChyZWN0LCB2ZXJ0aWNhbCkge1xuICBsZXQgb2Zmc2V0ID0gMDtcblxuICBpZiAodHlwZW9mIHZlcnRpY2FsID09PSAnbnVtYmVyJykge1xuICAgIG9mZnNldCA9IHZlcnRpY2FsO1xuICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3QuaGVpZ2h0IC8gMjtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2JvdHRvbScpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0T2Zmc2V0TGVmdChyZWN0LCBob3Jpem9udGFsKSB7XG4gIGxldCBvZmZzZXQgPSAwO1xuXG4gIGlmICh0eXBlb2YgaG9yaXpvbnRhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSBob3Jpem9udGFsO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC53aWR0aCAvIDI7XG4gIH0gZWxzZSBpZiAoaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0Jykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGg7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSh0cmFuc2Zvcm1PcmlnaW4pIHtcbiAgcmV0dXJuIFt0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsXS5tYXAobiA9PiB0eXBlb2YgbiA9PT0gJ251bWJlcicgPyBgJHtufXB4YCA6IG4pLmpvaW4oJyAnKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKSB7XG4gIHJldHVybiB0eXBlb2YgYW5jaG9yRWwgPT09ICdmdW5jdGlvbicgPyBhbmNob3JFbCgpIDogYW5jaG9yRWw7XG59XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBwYXBlcjogWydwYXBlciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0UG9wb3ZlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBQb3BvdmVyUm9vdCA9IHN0eWxlZChNb2RhbCwge1xuICBuYW1lOiAnTXVpUG9wb3ZlcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe30pO1xuY29uc3QgUG9wb3ZlclBhcGVyID0gc3R5bGVkKFBhcGVyLCB7XG4gIG5hbWU6ICdNdWlQb3BvdmVyJyxcbiAgc2xvdDogJ1BhcGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucGFwZXJcbn0pKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIG92ZXJmbG93WTogJ2F1dG8nLFxuICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAvLyBTbyB3ZSBzZWUgdGhlIHBvcG92ZXIgd2hlbiBpdCdzIGVtcHR5LlxuICAvLyBJdCdzIG1vc3QgbGlrZWx5IG9uIGlzc3VlIG9uIHVzZXJsYW5kLlxuICBtaW5XaWR0aDogMTYsXG4gIG1pbkhlaWdodDogMTYsXG4gIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gMzJweCknLFxuICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gIG91dGxpbmU6IDBcbn0pO1xuY29uc3QgUG9wb3ZlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcG92ZXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVBvcG92ZXInXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBhY3Rpb24sXG4gICAgYW5jaG9yRWwsXG4gICAgYW5jaG9yT3JpZ2luID0ge1xuICAgICAgdmVydGljYWw6ICd0b3AnLFxuICAgICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gICAgfSxcbiAgICBhbmNob3JQb3NpdGlvbixcbiAgICBhbmNob3JSZWZlcmVuY2UgPSAnYW5jaG9yRWwnLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb250YWluZXI6IGNvbnRhaW5lclByb3AsXG4gICAgZWxldmF0aW9uID0gOCxcbiAgICBtYXJnaW5UaHJlc2hvbGQgPSAxNixcbiAgICBvcGVuLFxuICAgIFBhcGVyUHJvcHMgPSB7fSxcbiAgICB0cmFuc2Zvcm1PcmlnaW4gPSB7XG4gICAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgICB9LFxuICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBHcm93LFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uUHJvcCA9ICdhdXRvJyxcbiAgICBUcmFuc2l0aW9uUHJvcHM6IHtcbiAgICAgIG9uRW50ZXJpbmdcbiAgICB9ID0ge31cbiAgfSA9IHByb3BzLFxuICAgICAgICBUcmFuc2l0aW9uUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcy5UcmFuc2l0aW9uUHJvcHMsIF9leGNsdWRlZCksXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZDIpO1xuXG4gIGNvbnN0IHBhcGVyUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZVBhcGVyUmVmID0gdXNlRm9ya1JlZihwYXBlclJlZiwgUGFwZXJQcm9wcy5yZWYpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbmNob3JPcmlnaW4sXG4gICAgYW5jaG9yUmVmZXJlbmNlLFxuICAgIGVsZXZhdGlvbixcbiAgICBtYXJnaW5UaHJlc2hvbGQsXG4gICAgUGFwZXJQcm9wcyxcbiAgICB0cmFuc2Zvcm1PcmlnaW4sXG4gICAgVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblByb3AsXG4gICAgVHJhbnNpdGlvblByb3BzXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTsgLy8gUmV0dXJucyB0aGUgdG9wL2xlZnQgb2Zmc2V0IG9mIHRoZSBwb3NpdGlvblxuICAvLyB0byBhdHRhY2ggdG8gb24gdGhlIGFuY2hvciBlbGVtZW50IChvciBib2R5IGlmIG5vbmUgaXMgcHJvdmlkZWQpXG5cbiAgY29uc3QgZ2V0QW5jaG9yT2Zmc2V0ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JQb3NpdGlvbicpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghYW5jaG9yUG9zaXRpb24pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHByb3ZpZGUgYSBgYW5jaG9yUG9zaXRpb25gIHByb3Agd2hlbiB1c2luZyAnICsgJzxQb3BvdmVyIGFuY2hvclJlZmVyZW5jZT1cImFuY2hvclBvc2l0aW9uXCIgLz4uJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFuY2hvclBvc2l0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc29sdmVkQW5jaG9yRWwgPSByZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpOyAvLyBJZiBhbiBhbmNob3IgZWxlbWVudCB3YXNuJ3QgcHJvdmlkZWQsIGp1c3QgdXNlIHRoZSBwYXJlbnQgYm9keSBlbGVtZW50IG9mIHRoaXMgUG9wb3ZlclxuXG4gICAgY29uc3QgYW5jaG9yRWxlbWVudCA9IHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSA/IHJlc29sdmVkQW5jaG9yRWwgOiBvd25lckRvY3VtZW50KHBhcGVyUmVmLmN1cnJlbnQpLmJvZHk7XG4gICAgY29uc3QgYW5jaG9yUmVjdCA9IGFuY2hvckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgYm94ID0gYW5jaG9yRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGFuY2hvclJlY3QudG9wICsgZ2V0T2Zmc2V0VG9wKGFuY2hvclJlY3QsIGFuY2hvck9yaWdpbi52ZXJ0aWNhbCksXG4gICAgICBsZWZ0OiBhbmNob3JSZWN0LmxlZnQgKyBnZXRPZmZzZXRMZWZ0KGFuY2hvclJlY3QsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKVxuICAgIH07XG4gIH0sIFthbmNob3JFbCwgYW5jaG9yT3JpZ2luLmhvcml6b250YWwsIGFuY2hvck9yaWdpbi52ZXJ0aWNhbCwgYW5jaG9yUG9zaXRpb24sIGFuY2hvclJlZmVyZW5jZV0pOyAvLyBSZXR1cm5zIHRoZSBiYXNlIHRyYW5zZm9ybSBvcmlnaW4gdXNpbmcgdGhlIGVsZW1lbnRcblxuICBjb25zdCBnZXRUcmFuc2Zvcm1PcmlnaW4gPSBSZWFjdC51c2VDYWxsYmFjayhlbGVtUmVjdCA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcnRpY2FsOiBnZXRPZmZzZXRUb3AoZWxlbVJlY3QsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCksXG4gICAgICBob3Jpem9udGFsOiBnZXRPZmZzZXRMZWZ0KGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbF0pO1xuICBjb25zdCBnZXRQb3NpdGlvbmluZ1N0eWxlID0gUmVhY3QudXNlQ2FsbGJhY2soZWxlbWVudCA9PiB7XG4gICAgY29uc3QgZWxlbVJlY3QgPSB7XG4gICAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCxcbiAgICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgICB9OyAvLyBHZXQgdGhlIHRyYW5zZm9ybSBvcmlnaW4gcG9pbnQgb24gdGhlIGVsZW1lbnQgaXRzZWxmXG5cbiAgICBjb25zdCBlbGVtVHJhbnNmb3JtT3JpZ2luID0gZ2V0VHJhbnNmb3JtT3JpZ2luKGVsZW1SZWN0KTtcblxuICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdub25lJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBudWxsLFxuICAgICAgICBsZWZ0OiBudWxsLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKGVsZW1UcmFuc2Zvcm1PcmlnaW4pXG4gICAgICB9O1xuICAgIH0gLy8gR2V0IHRoZSBvZmZzZXQgb2YgdGhlIGFuY2hvcmluZyBlbGVtZW50XG5cblxuICAgIGNvbnN0IGFuY2hvck9mZnNldCA9IGdldEFuY2hvck9mZnNldCgpOyAvLyBDYWxjdWxhdGUgZWxlbWVudCBwb3NpdGlvbmluZ1xuXG4gICAgbGV0IHRvcCA9IGFuY2hvck9mZnNldC50b3AgLSBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsO1xuICAgIGxldCBsZWZ0ID0gYW5jaG9yT2Zmc2V0LmxlZnQgLSBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWw7XG4gICAgY29uc3QgYm90dG9tID0gdG9wICsgZWxlbVJlY3QuaGVpZ2h0O1xuICAgIGNvbnN0IHJpZ2h0ID0gbGVmdCArIGVsZW1SZWN0LndpZHRoOyAvLyBVc2UgdGhlIHBhcmVudCB3aW5kb3cgb2YgdGhlIGFuY2hvckVsIGlmIHByb3ZpZGVkXG5cbiAgICBjb25zdCBjb250YWluZXJXaW5kb3cgPSBvd25lcldpbmRvdyhyZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpKTsgLy8gV2luZG93IHRocmVzaG9sZHMgdGFraW5nIHJlcXVpcmVkIG1hcmdpbiBpbnRvIGFjY291bnRcblxuICAgIGNvbnN0IGhlaWdodFRocmVzaG9sZCA9IGNvbnRhaW5lcldpbmRvdy5pbm5lckhlaWdodCAtIG1hcmdpblRocmVzaG9sZDtcbiAgICBjb25zdCB3aWR0aFRocmVzaG9sZCA9IGNvbnRhaW5lcldpbmRvdy5pbm5lcldpZHRoIC0gbWFyZ2luVGhyZXNob2xkOyAvLyBDaGVjayBpZiB0aGUgdmVydGljYWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuXG4gICAgaWYgKHRvcCA8IG1hcmdpblRocmVzaG9sZCkge1xuICAgICAgY29uc3QgZGlmZiA9IHRvcCAtIG1hcmdpblRocmVzaG9sZDtcbiAgICAgIHRvcCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCArPSBkaWZmO1xuICAgIH0gZWxzZSBpZiAoYm90dG9tID4gaGVpZ2h0VGhyZXNob2xkKSB7XG4gICAgICBjb25zdCBkaWZmID0gYm90dG9tIC0gaGVpZ2h0VGhyZXNob2xkO1xuICAgICAgdG9wIC09IGRpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsICs9IGRpZmY7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChlbGVtUmVjdC5oZWlnaHQgPiBoZWlnaHRUaHJlc2hvbGQgJiYgZWxlbVJlY3QuaGVpZ2h0ICYmIGhlaWdodFRocmVzaG9sZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgcG9wb3ZlciBjb21wb25lbnQgaXMgdG9vIHRhbGwuJywgYFNvbWUgcGFydCBvZiBpdCBjYW4gbm90IGJlIHNlZW4gb24gdGhlIHNjcmVlbiAoJHtlbGVtUmVjdC5oZWlnaHQgLSBoZWlnaHRUaHJlc2hvbGR9cHgpLmAsICdQbGVhc2UgY29uc2lkZXIgYWRkaW5nIGEgYG1heC1oZWlnaHRgIHRvIGltcHJvdmUgdGhlIHVzZXItZXhwZXJpZW5jZS4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSAvLyBDaGVjayBpZiB0aGUgaG9yaXpvbnRhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG5cblxuICAgIGlmIChsZWZ0IDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICBjb25zdCBkaWZmID0gbGVmdCAtIG1hcmdpblRocmVzaG9sZDtcbiAgICAgIGxlZnQgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCArPSBkaWZmO1xuICAgIH0gZWxzZSBpZiAocmlnaHQgPiB3aWR0aFRocmVzaG9sZCkge1xuICAgICAgY29uc3QgZGlmZiA9IHJpZ2h0IC0gd2lkdGhUaHJlc2hvbGQ7XG4gICAgICBsZWZ0IC09IGRpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwgKz0gZGlmZjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBgJHtNYXRoLnJvdW5kKHRvcCl9cHhgLFxuICAgICAgbGVmdDogYCR7TWF0aC5yb3VuZChsZWZ0KX1weGAsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKGVsZW1UcmFuc2Zvcm1PcmlnaW4pXG4gICAgfTtcbiAgfSwgW2FuY2hvckVsLCBhbmNob3JSZWZlcmVuY2UsIGdldEFuY2hvck9mZnNldCwgZ2V0VHJhbnNmb3JtT3JpZ2luLCBtYXJnaW5UaHJlc2hvbGRdKTtcbiAgY29uc3Qgc2V0UG9zaXRpb25pbmdTdHlsZXMgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IHBhcGVyUmVmLmN1cnJlbnQ7XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwb3NpdGlvbmluZyA9IGdldFBvc2l0aW9uaW5nU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAocG9zaXRpb25pbmcudG9wICE9PSBudWxsKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHBvc2l0aW9uaW5nLnRvcDtcbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb25pbmcubGVmdCAhPT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gcG9zaXRpb25pbmcubGVmdDtcbiAgICB9XG5cbiAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHBvc2l0aW9uaW5nLnRyYW5zZm9ybU9yaWdpbjtcbiAgfSwgW2dldFBvc2l0aW9uaW5nU3R5bGVdKTtcblxuICBjb25zdCBoYW5kbGVFbnRlcmluZyA9IChlbGVtZW50LCBpc0FwcGVhcmluZykgPT4ge1xuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG5cbiAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gICAgfVxuICB9KTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb24sICgpID0+IG9wZW4gPyB7XG4gICAgdXBkYXRlUG9zaXRpb246ICgpID0+IHtcbiAgICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gICAgfVxuICB9IDogbnVsbCwgW29wZW4sIHNldFBvc2l0aW9uaW5nU3R5bGVzXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKCgpID0+IHtcbiAgICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gICAgfSk7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coYW5jaG9yRWwpO1xuICAgIGNvbnRhaW5lcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIGNvbnRhaW5lcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFthbmNob3JFbCwgb3Blbiwgc2V0UG9zaXRpb25pbmdTdHlsZXNdKTtcbiAgbGV0IHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvblByb3A7XG5cbiAgaWYgKHRyYW5zaXRpb25EdXJhdGlvblByb3AgPT09ICdhdXRvJyAmJiAhVHJhbnNpdGlvbkNvbXBvbmVudC5tdWlTdXBwb3J0QXV0bykge1xuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHVuZGVmaW5lZDtcbiAgfSAvLyBJZiB0aGUgY29udGFpbmVyIHByb3AgaXMgcHJvdmlkZWQsIHVzZSB0aGF0XG4gIC8vIElmIHRoZSBhbmNob3JFbCBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgaXRzIHBhcmVudCBib2R5IGVsZW1lbnQgYXMgdGhlIGNvbnRhaW5lclxuICAvLyBJZiBuZWl0aGVyIGFyZSBwcm92aWRlZCBsZXQgdGhlIE1vZGFsIHRha2UgY2FyZSBvZiBjaG9vc2luZyB0aGUgY29udGFpbmVyXG5cblxuICBjb25zdCBjb250YWluZXIgPSBjb250YWluZXJQcm9wIHx8IChhbmNob3JFbCA/IG93bmVyRG9jdW1lbnQocmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKSkuYm9keSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChQb3BvdmVyUm9vdCwgX2V4dGVuZHMoe1xuICAgIEJhY2tkcm9wUHJvcHM6IHtcbiAgICAgIGludmlzaWJsZTogdHJ1ZVxuICAgIH0sXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgaW46IG9wZW4sXG4gICAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICAgIHRpbWVvdXQ6IHRyYW5zaXRpb25EdXJhdGlvblxuICAgIH0sIFRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFBvcG92ZXJQYXBlciwgX2V4dGVuZHMoe1xuICAgICAgICBlbGV2YXRpb246IGVsZXZhdGlvblxuICAgICAgfSwgUGFwZXJQcm9wcywge1xuICAgICAgICByZWY6IGhhbmRsZVBhcGVyUmVmLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5wYXBlciwgUGFwZXJQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pKVxuICAgIH0pKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcG92ZXIucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIHVwZGF0ZVBvc2l0aW9uKCkgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBhbmNob3JFbDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLCBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzLm9wZW4gJiYgKCFwcm9wcy5hbmNob3JSZWZlcmVuY2UgfHwgcHJvcHMuYW5jaG9yUmVmZXJlbmNlID09PSAnYW5jaG9yRWwnKSkge1xuICAgICAgY29uc3QgcmVzb2x2ZWRBbmNob3JFbCA9IHJlc29sdmVBbmNob3JFbChwcm9wcy5hbmNob3JFbCk7XG5cbiAgICAgIGlmIChyZXNvbHZlZEFuY2hvckVsICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01VSTogVGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgcGFydCBvZiB0aGUgZG9jdW1lbnQgbGF5b3V0LicsIFwiTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHByZXNlbnQgaW4gdGhlIGRvY3VtZW50IG9yIHRoYXQgaXQncyBub3QgZGlzcGxheSBub25lLlwiXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsIGBJdCBzaG91bGQgYmUgYW4gRWxlbWVudCBpbnN0YW5jZSBidXQgaXQncyBcXGAke3Jlc29sdmVkQW5jaG9yRWx9XFxgIGluc3RlYWQuYF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9pbnQgb24gdGhlIGFuY2hvciB3aGVyZSB0aGUgcG9wb3ZlcidzXG4gICAqIGBhbmNob3JFbGAgd2lsbCBhdHRhY2ggdG8uIFRoaXMgaXMgbm90IHVzZWQgd2hlbiB0aGVcbiAgICogYW5jaG9yUmVmZXJlbmNlIGlzICdhbmNob3JQb3NpdGlvbicuXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV07XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBjZW50ZXIsIHJpZ2h0XS5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICogICBob3Jpem9udGFsOiAnbGVmdCcsXG4gICAqIH1cbiAgICovXG4gIGFuY2hvck9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdjZW50ZXInLCAndG9wJ10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9zaXRpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBUaGUgY29vcmRpbmF0ZXMgYXJlIHJlbGF0aXZlIHRvIHRoZSBhcHBsaWNhdGlvbidzIGNsaWVudCBhcmVhLlxuICAgKi9cbiAgYW5jaG9yUG9zaXRpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbGVmdDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHRvcDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGRldGVybWluZXMgd2hpY2ggYW5jaG9yIHByb3AgdG8gcmVmZXIgdG8gd2hlbiBzZXR0aW5nXG4gICAqIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogQGRlZmF1bHQgJ2FuY2hvckVsJ1xuICAgKi9cbiAgYW5jaG9yUmVmZXJlbmNlOiBQcm9wVHlwZXMub25lT2YoWydhbmNob3JFbCcsICdhbmNob3JQb3NpdGlvbicsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBwYXNzZWQgdG8gdGhlIE1vZGFsIGNvbXBvbmVudC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgYW5jaG9yRWwncyB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBUaGUgZWxldmF0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBAZGVmYXVsdCA4XG4gICAqL1xuICBlbGV2YXRpb246IGludGVnZXJQcm9wVHlwZSxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGhvdyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgd2luZG93IHRoZSBwb3BvdmVyIGNhbiBhcHBlYXIuXG4gICAqIEBkZWZhdWx0IDE2XG4gICAqL1xuICBtYXJnaW5UaHJlc2hvbGQ6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgUGFwZXJQcm9wczogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLnNoYXBlKHtcbiAgICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBwb3BvdmVyIHdoaWNoXG4gICAqIHdpbGwgYXR0YWNoIHRvIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbSwgeChweCldO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodCwgeChweCldLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgdmVydGljYWw6ICd0b3AnLFxuICAgKiAgIGhvcml6b250YWw6ICdsZWZ0JyxcbiAgICogfVxuICAgKi9cbiAgdHJhbnNmb3JtT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdsZWZ0JywgJ3JpZ2h0J10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2NlbnRlcicsICd0b3AnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9jb21wb25lbnRzL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IEdyb3dcbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSB0cmFuc2l0aW9uIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBlbGVtZW50IGlzIGJhc2VkIG9uIHRoaXMgW2BUcmFuc2l0aW9uYF0oaHR0cDovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24vKSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBQb3BvdmVyOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW51VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlNZW51Jywgc2xvdCk7XG59XG5jb25zdCBtZW51Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU1lbnUnLCBbJ3Jvb3QnLCAncGFwZXInLCAnbGlzdCddKTtcbmV4cG9ydCBkZWZhdWx0IG1lbnVDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkVudGVyaW5nXCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcImF1dG9Gb2N1c1wiLCBcImNoaWxkcmVuXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c0l0ZW1cIiwgXCJNZW51TGlzdFByb3BzXCIsIFwib25DbG9zZVwiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwiUG9wb3ZlckNsYXNzZXNcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IEhUTUxFbGVtZW50VHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IE1lbnVMaXN0IGZyb20gJy4uL01lbnVMaXN0JztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi9Qb3BvdmVyJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGdldE1lbnVVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL21lbnVDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBSVExfT1JJR0lOID0ge1xuICB2ZXJ0aWNhbDogJ3RvcCcsXG4gIGhvcml6b250YWw6ICdyaWdodCdcbn07XG5jb25zdCBMVFJfT1JJR0lOID0ge1xuICB2ZXJ0aWNhbDogJ3RvcCcsXG4gIGhvcml6b250YWw6ICdsZWZ0J1xufTtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIHBhcGVyOiBbJ3BhcGVyJ10sXG4gICAgbGlzdDogWydsaXN0J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRNZW51VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IE1lbnVSb290ID0gc3R5bGVkKFBvcG92ZXIsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aU1lbnUnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbmNvbnN0IE1lbnVQYXBlciA9IHN0eWxlZChQYXBlciwge1xuICBuYW1lOiAnTXVpTWVudScsXG4gIHNsb3Q6ICdQYXBlcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnBhcGVyXG59KSh7XG4gIC8vIHNwZWNaOiBUaGUgbWF4aW11bSBoZWlnaHQgb2YgYSBzaW1wbGUgbWVudSBzaG91bGQgYmUgb25lIG9yIG1vcmUgcm93cyBsZXNzIHRoYW4gdGhlIHZpZXdcbiAgLy8gaGVpZ2h0LiBUaGlzIGVuc3VyZXMgYSB0YXBhYmxlIGFyZWEgb3V0c2lkZSBvZiB0aGUgc2ltcGxlIG1lbnUgd2l0aCB3aGljaCB0byBkaXNtaXNzXG4gIC8vIHRoZSBtZW51LlxuICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSA5NnB4KScsXG4gIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nIGZvciBpT1MgPCAxMy4wXG4gIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnXG59KTtcbmNvbnN0IE1lbnVNZW51TGlzdCA9IHN0eWxlZChNZW51TGlzdCwge1xuICBuYW1lOiAnTXVpTWVudScsXG4gIHNsb3Q6ICdMaXN0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubGlzdFxufSkoe1xuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwXG59KTtcbmNvbnN0IE1lbnUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNZW51KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlNZW51J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYXV0b0ZvY3VzID0gdHJ1ZSxcbiAgICBjaGlsZHJlbixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzSXRlbSA9IGZhbHNlLFxuICAgIE1lbnVMaXN0UHJvcHMgPSB7fSxcbiAgICBvbkNsb3NlLFxuICAgIG9wZW4sXG4gICAgUGFwZXJQcm9wcyA9IHt9LFxuICAgIFBvcG92ZXJDbGFzc2VzLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9ICdhdXRvJyxcbiAgICBUcmFuc2l0aW9uUHJvcHM6IHtcbiAgICAgIG9uRW50ZXJpbmdcbiAgICB9ID0ge30sXG4gICAgdmFyaWFudCA9ICdzZWxlY3RlZE1lbnUnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgVHJhbnNpdGlvblByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMuVHJhbnNpdGlvblByb3BzLCBfZXhjbHVkZWQpLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcblxuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGlzUnRsID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJztcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYXV0b0ZvY3VzLFxuICAgIGRpc2FibGVBdXRvRm9jdXNJdGVtLFxuICAgIE1lbnVMaXN0UHJvcHMsXG4gICAgb25FbnRlcmluZyxcbiAgICBQYXBlclByb3BzLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICBUcmFuc2l0aW9uUHJvcHMsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGF1dG9Gb2N1c0l0ZW0gPSBhdXRvRm9jdXMgJiYgIWRpc2FibGVBdXRvRm9jdXNJdGVtICYmIG9wZW47XG4gIGNvbnN0IG1lbnVMaXN0QWN0aW9uc1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICBjb25zdCBoYW5kbGVFbnRlcmluZyA9IChlbGVtZW50LCBpc0FwcGVhcmluZykgPT4ge1xuICAgIGlmIChtZW51TGlzdEFjdGlvbnNSZWYuY3VycmVudCkge1xuICAgICAgbWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQuYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIoZWxlbWVudCwgdGhlbWUpO1xuICAgIH1cblxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlTGlzdEtleURvd24gPSBldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ1RhYicpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICd0YWJLZXlEb3duJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogdGhlIGluZGV4IG9mIHRoZSBpdGVtIHNob3VsZCByZWNlaXZlIGZvY3VzXG4gICAqIGluIGEgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAgaXQncyB0aGUgZmlyc3QgYHNlbGVjdGVkYCBpdGVtXG4gICAqIG90aGVyd2lzZSBpdCdzIHRoZSB2ZXJ5IGZpcnN0IGl0ZW0uXG4gICAqL1xuXG5cbiAgbGV0IGFjdGl2ZUl0ZW1JbmRleCA9IC0xOyAvLyBzaW5jZSB3ZSBpbmplY3QgZm9jdXMgcmVsYXRlZCBwcm9wcyBpbnRvIGNoaWxkcmVuIHdlIGhhdmUgdG8gZG8gYSBsb29rYWhlYWRcbiAgLy8gdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBgc2VsZWN0ZWRgIGl0ZW0uIFdlJ3JlIGxvb2tpbmcgZm9yIHRoZSBsYXN0IGBzZWxlY3RlZGBcbiAgLy8gaXRlbSBhbmQgdXNlIHRoZSBmaXJzdCB2YWxpZCBpdGVtIGFzIGEgZmFsbGJhY2tcblxuICBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIE1lbnUgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE1lbnVSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NlczogUG9wb3ZlckNsYXNzZXMsXG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICBhbmNob3JPcmlnaW46IHtcbiAgICAgIHZlcnRpY2FsOiAnYm90dG9tJyxcbiAgICAgIGhvcml6b250YWw6IGlzUnRsID8gJ3JpZ2h0JyA6ICdsZWZ0J1xuICAgIH0sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiBpc1J0bCA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIFBhcGVyUHJvcHM6IF9leHRlbmRzKHtcbiAgICAgIGNvbXBvbmVudDogTWVudVBhcGVyXG4gICAgfSwgUGFwZXJQcm9wcywge1xuICAgICAgY2xhc3NlczogX2V4dGVuZHMoe30sIFBhcGVyUHJvcHMuY2xhc3Nlcywge1xuICAgICAgICByb290OiBjbGFzc2VzLnBhcGVyXG4gICAgICB9KVxuICAgIH0pLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5yb290LFxuICAgIG9wZW46IG9wZW4sXG4gICAgcmVmOiByZWYsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgVHJhbnNpdGlvblByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZ1xuICAgIH0sIFRyYW5zaXRpb25Qcm9wcyksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChNZW51TWVudUxpc3QsIF9leHRlbmRzKHtcbiAgICAgIG9uS2V5RG93bjogaGFuZGxlTGlzdEtleURvd24sXG4gICAgICBhY3Rpb25zOiBtZW51TGlzdEFjdGlvbnNSZWYsXG4gICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyAmJiAoYWN0aXZlSXRlbUluZGV4ID09PSAtMSB8fCBkaXNhYmxlQXV0b0ZvY3VzSXRlbSksXG4gICAgICBhdXRvRm9jdXNJdGVtOiBhdXRvRm9jdXNJdGVtLFxuICAgICAgdmFyaWFudDogdmFyaWFudFxuICAgIH0sIE1lbnVMaXN0UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxpc3QsIE1lbnVMaXN0UHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1lbnUucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBJdCdzIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVudS5cbiAgICovXG4gIGFuY2hvckVsOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCAoRGVmYXVsdCkgd2lsbCBmb2N1cyB0aGUgYFtyb2xlPVwibWVudVwiXWAgaWYgbm8gZm9jdXNhYmxlIGNoaWxkIGlzIGZvdW5kLiBEaXNhYmxlZFxuICAgKiBjaGlsZHJlbiBhcmUgbm90IGZvY3VzYWJsZS4gSWYgeW91IHNldCB0aGlzIHByb3AgdG8gYGZhbHNlYCBmb2N1cyB3aWxsIGJlIHBsYWNlZFxuICAgKiBvbiB0aGUgcGFyZW50IG1vZGFsIGNvbnRhaW5lci4gVGhpcyBoYXMgc2V2ZXJlIGFjY2Vzc2liaWxpdHkgaW1wbGljYXRpb25zXG4gICAqIGFuZCBzaG91bGQgb25seSBiZSBjb25zaWRlcmVkIGlmIHlvdSBtYW5hZ2UgZm9jdXMgb3RoZXJ3aXNlLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNZW51IGNvbnRlbnRzLCBub3JtYWxseSBgTWVudUl0ZW1gcy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogV2hlbiBvcGVuaW5nIHRoZSBtZW51IHdpbGwgbm90IGZvY3VzIHRoZSBhY3RpdmUgaXRlbSBidXQgdGhlIGBbcm9sZT1cIm1lbnVcIl1gXG4gICAqIHVubGVzcyBgYXV0b0ZvY3VzYCBpcyBhbHNvIHNldCB0byBgZmFsc2VgLiBOb3QgdXNpbmcgdGhlIGRlZmF1bHQgbWVhbnMgbm90XG4gICAqIGZvbGxvd2luZyBXQUktQVJJQSBhdXRob3JpbmcgcHJhY3RpY2VzLiBQbGVhc2UgYmUgY29uc2lkZXJhdGUgYWJvdXQgcG9zc2libGVcbiAgICogYWNjZXNzaWJpbGl0eSBpbXBsaWNhdGlvbnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzSXRlbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudUxpc3RgXSgvYXBpL21lbnUtbGlzdC8pIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBNZW51TGlzdFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOiBgXCJlc2NhcGVLZXlEb3duXCJgLCBgXCJiYWNrZHJvcENsaWNrXCJgLCBgXCJ0YWJLZXlEb3duXCJgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIGBjbGFzc2VzYCBwcm9wIGFwcGxpZWQgdG8gdGhlIFtgUG9wb3ZlcmBdKC9hcGkvcG9wb3Zlci8pIGVsZW1lbnQuXG4gICAqL1xuICBQb3BvdmVyQ2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoZSB0cmFuc2l0aW9uIGluIGBtc2AsIG9yICdhdXRvJ1xuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSB0cmFuc2l0aW9uIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBlbGVtZW50IGlzIGJhc2VkIG9uIHRoaXMgW2BUcmFuc2l0aW9uYF0oaHR0cDovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24vKSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS4gVXNlIGBtZW51YCB0byBwcmV2ZW50IHNlbGVjdGVkIGl0ZW1zIGZyb20gaW1wYWN0aW5nIHRoZSBpbml0aWFsIGZvY3VzLlxuICAgKiBAZGVmYXVsdCAnc2VsZWN0ZWRNZW51J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnbWVudScsICdzZWxlY3RlZE1lbnUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBNZW51OyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXROYXRpdmVTZWxlY3RVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTmF0aXZlU2VsZWN0Jywgc2xvdCk7XG59XG5jb25zdCBuYXRpdmVTZWxlY3RDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTmF0aXZlU2VsZWN0JywgWydyb290JywgJ3NlbGVjdCcsICdtdWx0aXBsZScsICdmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnLCAnZGlzYWJsZWQnLCAnaWNvbicsICdpY29uT3BlbicsICdpY29uRmlsbGVkJywgJ2ljb25PdXRsaW5lZCcsICdpY29uU3RhbmRhcmQnLCAnbmF0aXZlSW5wdXQnXSk7XG5leHBvcnQgZGVmYXVsdCBuYXRpdmVTZWxlY3RDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBuYXRpdmVTZWxlY3RDbGFzc2VzLCB7IGdldE5hdGl2ZVNlbGVjdFV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi9uYXRpdmVTZWxlY3RDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGRpc2FibGVkLFxuICAgIG11bHRpcGxlLFxuICAgIG9wZW5cbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHNlbGVjdDogWydzZWxlY3QnLCB2YXJpYW50LCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBtdWx0aXBsZSAmJiAnbXVsdGlwbGUnXSxcbiAgICBpY29uOiBbJ2ljb24nLCBgaWNvbiR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBvcGVuICYmICdpY29uT3BlbicsIGRpc2FibGVkICYmICdkaXNhYmxlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IG5hdGl2ZVNlbGVjdFNlbGVjdFN0eWxlcyA9ICh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICAvLyBSZXNldFxuICAvLyBXaGVuIGludGVyYWN0aW5nIHF1aWNrbHksIHRoZSB0ZXh0IGNhbiBlbmQgdXAgc2VsZWN0ZWQuXG4gIC8vIE5hdGl2ZSBzZWxlY3QgY2FuJ3QgYmUgc2VsZWN0ZWQgZWl0aGVyLlxuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgLy8gUmVzZXRcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gICcmOmZvY3VzJzoge1xuICAgIC8vIFNob3cgdGhhdCBpdCdzIG5vdCBhbiB0ZXh0IGlucHV0XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA1KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KScsXG4gICAgYm9yZGVyUmFkaXVzOiAwIC8vIFJlc2V0IENocm9tZSBzdHlsZVxuXG4gIH0sXG4gIC8vIFJlbW92ZSBJRTExIGFycm93XG4gICcmOjotbXMtZXhwYW5kJzoge1xuICAgIGRpc3BsYXk6ICdub25lJ1xuICB9LFxuICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfSxcbiAgJyZbbXVsdGlwbGVdJzoge1xuICAgIGhlaWdodDogJ2F1dG8nXG4gIH0sXG4gICcmOm5vdChbbXVsdGlwbGVdKSBvcHRpb24sICY6bm90KFttdWx0aXBsZV0pIG9wdGdyb3VwJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyXG4gIH0sXG4gIC8vIEJ1bXAgc3BlY2lmaWNpdHkgdG8gYWxsb3cgZXh0ZW5kaW5nIGN1c3RvbSBpbnB1dHNcbiAgJyYmJic6IHtcbiAgICBwYWRkaW5nUmlnaHQ6IDI0LFxuICAgIG1pbldpZHRoOiAxNiAvLyBTbyBpdCBkb2Vzbid0IGNvbGxhcHNlLlxuXG4gIH1cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2ZpbGxlZCcgJiYge1xuICAnJiYmJzoge1xuICAgIHBhZGRpbmdSaWdodDogMzJcbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICcmOmZvY3VzJzoge1xuICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzIC8vIFJlc2V0IHRoZSByZXNldCBmb3IgQ2hyb21lIHN0eWxlXG5cbiAgfSxcbiAgJyYmJic6IHtcbiAgICBwYWRkaW5nUmlnaHQ6IDMyXG4gIH1cbn0pO1xuY29uc3QgTmF0aXZlU2VsZWN0U2VsZWN0ID0gc3R5bGVkKCdzZWxlY3QnLCB7XG4gIG5hbWU6ICdNdWlOYXRpdmVTZWxlY3QnLFxuICBzbG90OiAnU2VsZWN0JyxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHJvb3RTaG91bGRGb3J3YXJkUHJvcCxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5zZWxlY3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCB7XG4gICAgICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLm11bHRpcGxlfWBdOiBzdHlsZXMubXVsdGlwbGVcbiAgICB9XTtcbiAgfVxufSkobmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzKTtcbmV4cG9ydCBjb25zdCBuYXRpdmVTZWxlY3RJY29uU3R5bGVzID0gKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgLy8gV2UgdXNlIGEgcG9zaXRpb24gYWJzb2x1dGUgb3ZlciBhIGZsZXhib3ggaW4gb3JkZXIgdG8gZm9yd2FyZCB0aGUgcG9pbnRlciBldmVudHNcbiAgLy8gdG8gdGhlIGlucHV0IGFuZCB0byBzdXBwb3J0IHdyYXBwaW5nIHRhZ3MuLlxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogJ2NhbGMoNTAlIC0gLjVlbSknLFxuICAvLyBDZW50ZXIgdmVydGljYWxseSwgaGVpZ2h0IGlzIDFlbVxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIC8vIERvbid0IGJsb2NrIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSBzZWxlY3QgdW5kZXIgdGhlIGljb24uXG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gIFtgJi4ke25hdGl2ZVNlbGVjdENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgfVxufSwgb3duZXJTdGF0ZS5vcGVuICYmIHtcbiAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdmaWxsZWQnICYmIHtcbiAgcmlnaHQ6IDdcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIHJpZ2h0OiA3XG59KTtcbmNvbnN0IE5hdGl2ZVNlbGVjdEljb24gPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aU5hdGl2ZVNlbGVjdCcsXG4gIHNsb3Q6ICdJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5pY29uLCBvd25lclN0YXRlLnZhcmlhbnQgJiYgc3R5bGVzW2BpY29uJHtjYXBpdGFsaXplKG93bmVyU3RhdGUudmFyaWFudCl9YF0sIG93bmVyU3RhdGUub3BlbiAmJiBzdHlsZXMuaWNvbk9wZW5dO1xuICB9XG59KShuYXRpdmVTZWxlY3RJY29uU3R5bGVzKTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5jb25zdCBOYXRpdmVTZWxlY3RJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdGl2ZVNlbGVjdElucHV0KHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBkaXNhYmxlZCxcbiAgICBJY29uQ29tcG9uZW50LFxuICAgIGlucHV0UmVmLFxuICAgIHZhcmlhbnQgPSAnc3RhbmRhcmQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGlzYWJsZWQsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KE5hdGl2ZVNlbGVjdFNlbGVjdCwgX2V4dGVuZHMoe1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNlbGVjdCwgY2xhc3NOYW1lKSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIHJlZjogaW5wdXRSZWYgfHwgcmVmXG4gICAgfSwgb3RoZXIpKSwgcHJvcHMubXVsdGlwbGUgPyBudWxsIDogLyojX19QVVJFX18qL19qc3goTmF0aXZlU2VsZWN0SWNvbiwge1xuICAgICAgYXM6IEljb25Db21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmljb25cbiAgICB9KV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5hdGl2ZVNlbGVjdElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPG9wdGlvbj5gIGVsZW1lbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE5hdGl2ZVNlbGVjdElucHV0OyIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUNvbnRyb2xsZWQgYXMgdXNlQ29udHJvbGxlZCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlQ29udHJvbGxlZDsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVNlbGVjdCcsIHNsb3QpO1xufVxuY29uc3Qgc2VsZWN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNlbGVjdCcsIFsnc2VsZWN0JywgJ211bHRpcGxlJywgJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCcsICdkaXNhYmxlZCcsICdmb2N1c2VkJywgJ2ljb24nLCAnaWNvbk9wZW4nLCAnaWNvbkZpbGxlZCcsICdpY29uT3V0bGluZWQnLCAnaWNvblN0YW5kYXJkJywgJ25hdGl2ZUlucHV0J10pO1xuZXhwb3J0IGRlZmF1bHQgc2VsZWN0Q2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImFyaWEtbGFiZWxcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRPcGVuXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJsYWJlbElkXCIsIFwiTWVudVByb3BzXCIsIFwibXVsdGlwbGVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsb3NlXCIsIFwib25Gb2N1c1wiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclZhbHVlXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCIsIFwidGFiSW5kZXhcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgTWVudSBmcm9tICcuLi9NZW51L01lbnUnO1xuaW1wb3J0IHsgbmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzLCBuYXRpdmVTZWxlY3RJY29uU3R5bGVzIH0gZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi4vSW5wdXRCYXNlL3V0aWxzJztcbmltcG9ydCBzdHlsZWQsIHsgc2xvdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuaW1wb3J0IHNlbGVjdENsYXNzZXMsIHsgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL3NlbGVjdENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFNlbGVjdFNlbGVjdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ1NlbGVjdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFsvLyBXaW4gc3BlY2lmaWNpdHkgb3ZlciB0aGUgaW5wdXQgYmFzZVxuICAgIHtcbiAgICAgIFtgJi4ke3NlbGVjdENsYXNzZXMuc2VsZWN0fWBdOiBzdHlsZXMuc2VsZWN0XG4gICAgfSwge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5zZWxlY3R9YF06IHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXG4gICAgfSwge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5tdWx0aXBsZX1gXTogc3R5bGVzLm11bHRpcGxlXG4gICAgfV07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdFNlbGVjdFN0eWxlcywge1xuICAvLyBXaW4gc3BlY2lmaWNpdHkgb3ZlciB0aGUgaW5wdXQgYmFzZVxuICBbYCYuJHtzZWxlY3RDbGFzc2VzLnNlbGVjdH1gXToge1xuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIC8vIFJlc2V0cyBmb3IgbXVsdGlwbGUgc2VsZWN0IHdpdGggY2hpcHNcbiAgICBtaW5IZWlnaHQ6ICcxLjQzNzVlbScsXG4gICAgLy8gUmVxdWlyZWQgZm9yIHNlbGVjdFxcdGV4dC1maWVsZCBoZWlnaHQgY29uc2lzdGVuY3lcbiAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH1cbn0pO1xuY29uc3QgU2VsZWN0SWNvbiA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ0ljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmljb24sIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5pY29uT3Blbl07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdEljb25TdHlsZXMpO1xuY29uc3QgU2VsZWN0TmF0aXZlSW5wdXQgPSBzdHlsZWQoJ2lucHV0Jywge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBzbG90U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ05hdGl2ZUlucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubmF0aXZlSW5wdXRcbn0pKHtcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgb3BhY2l0eTogMCxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94J1xufSk7XG5cbmZ1bmN0aW9uIGFyZUVxdWFsVmFsdWVzKGEsIGIpIHtcbiAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH0gLy8gVGhlIHZhbHVlIGNvdWxkIGJlIGEgbnVtYmVyLCB0aGUgRE9NIHdpbGwgc3RyaW5naWZ5IGl0IGFueXdheS5cblxuXG4gIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eShkaXNwbGF5KSB7XG4gIHJldHVybiBkaXNwbGF5ID09IG51bGwgfHwgdHlwZW9mIGRpc3BsYXkgPT09ICdzdHJpbmcnICYmICFkaXNwbGF5LnRyaW0oKTtcbn1cblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBkaXNhYmxlZCxcbiAgICBtdWx0aXBsZSxcbiAgICBvcGVuXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBzZWxlY3Q6IFsnc2VsZWN0JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgbXVsdGlwbGUgJiYgJ211bHRpcGxlJ10sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUodmFyaWFudCl9YCwgb3BlbiAmJiAnaWNvbk9wZW4nLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBuYXRpdmVJbnB1dDogWyduYXRpdmVJbnB1dCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5cbmNvbnN0IFNlbGVjdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gICAgYXV0b0ZvY3VzLFxuICAgIGF1dG9XaWR0aCxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgZGVmYXVsdE9wZW4sXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc3BsYXlFbXB0eSxcbiAgICBJY29uQ29tcG9uZW50LFxuICAgIGlucHV0UmVmOiBpbnB1dFJlZlByb3AsXG4gICAgbGFiZWxJZCxcbiAgICBNZW51UHJvcHMgPSB7fSxcbiAgICBtdWx0aXBsZSxcbiAgICBuYW1lLFxuICAgIG9uQmx1cixcbiAgICBvbkNoYW5nZSxcbiAgICBvbkNsb3NlLFxuICAgIG9uRm9jdXMsXG4gICAgb25PcGVuLFxuICAgIG9wZW46IG9wZW5Qcm9wLFxuICAgIHJlYWRPbmx5LFxuICAgIHJlbmRlclZhbHVlLFxuICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IHt9LFxuICAgIHRhYkluZGV4OiB0YWJJbmRleFByb3AsXG4gICAgdmFsdWU6IHZhbHVlUHJvcCxcbiAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZVN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IHZhbHVlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgbmFtZTogJ1NlbGVjdCdcbiAgfSk7XG4gIGNvbnN0IFtvcGVuU3RhdGUsIHNldE9wZW5TdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiBvcGVuUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0T3BlbixcbiAgICBuYW1lOiAnU2VsZWN0J1xuICB9KTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGRpc3BsYXlSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IFtkaXNwbGF5Tm9kZSwgc2V0RGlzcGxheU5vZGVdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc09wZW5Db250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYob3BlblByb3AgIT0gbnVsbCk7XG4gIGNvbnN0IFttZW51TWluV2lkdGhTdGF0ZSwgc2V0TWVudU1pbldpZHRoU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmUHJvcCk7XG4gIGNvbnN0IGhhbmRsZURpc3BsYXlSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBkaXNwbGF5UmVmLmN1cnJlbnQgPSBub2RlO1xuXG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIHNldERpc3BsYXlOb2RlKG5vZGUpO1xuICAgIH1cbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGhhbmRsZVJlZiwgKCkgPT4gKHtcbiAgICBmb2N1czogKCkgPT4ge1xuICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfSxcbiAgICBub2RlOiBpbnB1dFJlZi5jdXJyZW50LFxuICAgIHZhbHVlXG4gIH0pLCBbdmFsdWVdKTsgLy8gUmVzaXplIG1lbnUgb24gYGRlZmF1bHRPcGVuYCBhdXRvbWF0aWMgdG9nZ2xlLlxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRlZmF1bHRPcGVuICYmIG9wZW5TdGF0ZSAmJiBkaXNwbGF5Tm9kZSAmJiAhaXNPcGVuQ29udHJvbGxlZCkge1xuICAgICAgc2V0TWVudU1pbldpZHRoU3RhdGUoYXV0b1dpZHRoID8gbnVsbCA6IGRpc3BsYXlOb2RlLmNsaWVudFdpZHRoKTtcbiAgICAgIGRpc3BsYXlSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuXG4gIH0sIFtkaXNwbGF5Tm9kZSwgYXV0b1dpZHRoXSk7IC8vIGBpc09wZW5Db250cm9sbGVkYCBpcyBpZ25vcmVkIGJlY2F1c2UgdGhlIGNvbXBvbmVudCBzaG91bGQgbmV2ZXIgc3dpdGNoIGJldHdlZW4gY29udHJvbGxlZCBhbmQgdW5jb250cm9sbGVkIG1vZGVzLlxuICAvLyBgZGVmYXVsdE9wZW5gIGFuZCBgb3BlblN0YXRlYCBhcmUgaWdub3JlZCB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjYWxsYmFja3MuXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBsYWJlbCA9IG93bmVyRG9jdW1lbnQoZGlzcGxheVJlZi5jdXJyZW50KS5nZXRFbGVtZW50QnlJZChsYWJlbElkKTtcblxuICAgIGlmIChsYWJlbCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKGdldFNlbGVjdGlvbigpLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsYWJlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbbGFiZWxJZF0pO1xuXG4gIGNvbnN0IHVwZGF0ZSA9IChvcGVuLCBldmVudCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgIG9uT3BlbihldmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBkaXNwbGF5Tm9kZS5jbGllbnRXaWR0aCk7XG4gICAgICBzZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEhpamFjayB0aGUgZGVmYXVsdCBmb2N1cyBiZWhhdmlvci5cblxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB1cGRhdGUodHJ1ZSwgZXZlbnQpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gZXZlbnQgPT4ge1xuICAgIHVwZGF0ZShmYWxzZSwgZXZlbnQpO1xuICB9O1xuXG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTsgLy8gU3VwcG9ydCBhdXRvZmlsbC5cblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiBjaGlsZC5wcm9wcy52YWx1ZSkuaW5kZXhPZihldmVudC50YXJnZXQudmFsdWUpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5BcnJheVtpbmRleF07XG4gICAgc2V0VmFsdWVTdGF0ZShjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBjaGlsZCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUl0ZW1DbGljayA9IGNoaWxkID0+IGV2ZW50ID0+IHtcbiAgICBsZXQgbmV3VmFsdWU7IC8vIFdlIHVzZSB0aGUgdGFiaW5kZXggYXR0cmlidXRlIHRvIHNpZ25hbCB0aGUgYXZhaWxhYmxlIG9wdGlvbnMuXG5cbiAgICBpZiAoIWV2ZW50LmN1cnJlbnRUYXJnZXQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICBuZXdWYWx1ZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuc2xpY2UoKSA6IFtdO1xuICAgICAgY29uc3QgaXRlbUluZGV4ID0gdmFsdWUuaW5kZXhPZihjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIG5ld1ZhbHVlLnB1c2goY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1ZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgLy8gUmVkZWZpbmUgdGFyZ2V0IHRvIGFsbG93IG5hbWUgYW5kIHZhbHVlIHRvIGJlIHJlYWQuXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHNlYW1sZXNzIGludGVncmF0aW9uIHdpdGggdGhlIG1vc3QgcG9wdWxhciBmb3JtIGxpYnJhcmllcy5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNDg1I2lzc3VlY29tbWVudC02NzYwNDg0OTJcbiAgICAgICAgLy8gQ2xvbmUgdGhlIGV2ZW50IHRvIG5vdCBvdmVycmlkZSBgdGFyZ2V0YCBvZiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gICAgICAgIGNvbnN0IG5hdGl2ZUV2ZW50ID0gZXZlbnQubmF0aXZlRXZlbnQgfHwgZXZlbnQ7XG4gICAgICAgIGNvbnN0IGNsb25lZEV2ZW50ID0gbmV3IG5hdGl2ZUV2ZW50LmNvbnN0cnVjdG9yKG5hdGl2ZUV2ZW50LnR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsb25lZEV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3VmFsdWUsXG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb25DaGFuZ2UoY2xvbmVkRXZlbnQsIGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIW11bHRpcGxlKSB7XG4gICAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICBpZiAoIXJlYWRPbmx5KSB7XG4gICAgICBjb25zdCB2YWxpZEtleXMgPSBbJyAnLCAnQXJyb3dVcCcsICdBcnJvd0Rvd24nLCAvLyBUaGUgbmF0aXZlIHNlbGVjdCBkb2Vzbid0IHJlc3BvbmQgdG8gZW50ZXIgb24gTWFjT1MsIGJ1dCBpdCdzIHJlY29tbWVuZGVkIGJ5XG4gICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzL2V4YW1wbGVzL2xpc3Rib3gvbGlzdGJveC1jb2xsYXBzaWJsZS5odG1sXG4gICAgICAnRW50ZXInXTtcblxuICAgICAgaWYgKHZhbGlkS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9wZW4gPSBkaXNwbGF5Tm9kZSAhPT0gbnVsbCAmJiBvcGVuU3RhdGU7XG5cbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICAvLyBpZiBvcGVuIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblxuICAgIGlmICghb3BlbiAmJiBvbkJsdXIpIHtcbiAgICAgIC8vIFByZWFjdCBzdXBwb3J0LCB0YXJnZXQgaXMgcmVhZCBvbmx5IHByb3BlcnR5IG9uIGEgbmF0aXZlIGV2ZW50LlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBuYW1lXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgZGVsZXRlIG90aGVyWydhcmlhLWludmFsaWQnXTtcbiAgbGV0IGRpc3BsYXk7XG4gIGxldCBkaXNwbGF5U2luZ2xlO1xuICBjb25zdCBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgbGV0IGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIGxldCBmb3VuZE1hdGNoID0gZmFsc2U7IC8vIE5vIG5lZWQgdG8gZGlzcGxheSBhbnkgdmFsdWUgaWYgdGhlIGZpZWxkIGlzIGVtcHR5LlxuXG4gIGlmIChpc0ZpbGxlZCh7XG4gICAgdmFsdWVcbiAgfSkgfHwgZGlzcGxheUVtcHR5KSB7XG4gICAgaWYgKHJlbmRlclZhbHVlKSB7XG4gICAgICBkaXNwbGF5ID0gcmVuZGVyVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wdXRlRGlzcGxheSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgaXRlbXMgPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIFNlbGVjdCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzZWxlY3RlZDtcblxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIFxcYHZhbHVlXFxgIHByb3AgbXVzdCBiZSBhbiBhcnJheSB3aGVuIHVzaW5nIHRoZSBcXGBTZWxlY3RcXGAgY29tcG9uZW50IHdpdGggXFxgbXVsdGlwbGVcXGAuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMikpO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3RlZCA9IHZhbHVlLnNvbWUodiA9PiBhcmVFcXVhbFZhbHVlcyh2LCBjaGlsZC5wcm9wcy52YWx1ZSkpO1xuXG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheU11bHRpcGxlLnB1c2goY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZCA9IGFyZUVxdWFsVmFsdWVzKHZhbHVlLCBjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBjb21wdXRlRGlzcGxheSkge1xuICAgICAgICBkaXNwbGF5U2luZ2xlID0gY2hpbGQucHJvcHMuY2hpbGRyZW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBzZWxlY3RlZCA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgb25LZXlVcDogZXZlbnQgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugb3VyIE1lbnVJdGVtcyBkaXNwYXRjaGVzIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAvLyBpdCdzIG5vdCBiZWhhdmlvciBvZiB0aGUgbmF0aXZlIDxvcHRpb24+IGFuZCBjYXVzZXNcbiAgICAgICAgICAvLyB0aGUgc2VsZWN0IHRvIGNsb3NlIGltbWVkaWF0ZWx5IHNpbmNlIHdlIG9wZW4gb24gc3BhY2Uga2V5ZG93blxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQucHJvcHMub25LZXlVcCkge1xuICAgICAgICAgIGNoaWxkLnByb3BzLm9uS2V5VXAoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICBzZWxlY3RlZCxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAvLyBUaGUgdmFsdWUgaXMgbW9zdCBsaWtlbHkgbm90IGEgdmFsaWQgSFRNTCBhdHRyaWJ1dGUuXG4gICAgICAnZGF0YS12YWx1ZSc6IGNoaWxkLnByb3BzLnZhbHVlIC8vIEluc3RlYWQsIHdlIHByb3ZpZGUgaXQgYXMgYSBkYXRhIGF0dHJpYnV0ZS5cblxuICAgIH0pO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWZvdW5kTWF0Y2ggJiYgIW11bHRpcGxlICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIGNvbnNvbGUud2FybihbYE1VSTogWW91IGhhdmUgcHJvdmlkZWQgYW4gb3V0LW9mLXJhbmdlIHZhbHVlIFxcYCR7dmFsdWV9XFxgIGZvciB0aGUgc2VsZWN0ICR7bmFtZSA/IGAobmFtZT1cIiR7bmFtZX1cIikgYCA6ICcnfWNvbXBvbmVudC5gLCBcIkNvbnNpZGVyIHByb3ZpZGluZyBhIHZhbHVlIHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIG9yICcnLlwiLCBgVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlICR7dmFsdWVzLmZpbHRlcih4ID0+IHggIT0gbnVsbCkubWFwKHggPT4gYFxcYCR7eH1cXGBgKS5qb2luKCcsICcpIHx8ICdcIlwiJ30uYF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtmb3VuZE1hdGNoLCBjaGlsZHJlbkFycmF5LCBtdWx0aXBsZSwgbmFtZSwgdmFsdWVdKTtcbiAgfVxuXG4gIGlmIChjb21wdXRlRGlzcGxheSkge1xuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKGRpc3BsYXlNdWx0aXBsZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGlzcGxheSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwbGF5ID0gZGlzcGxheU11bHRpcGxlLnJlZHVjZSgob3V0cHV0LCBjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBvdXRwdXQucHVzaChjaGlsZCk7XG5cbiAgICAgICAgICBpZiAoaW5kZXggPCBkaXNwbGF5TXVsdGlwbGUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goJywgJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwbGF5ID0gZGlzcGxheVNpbmdsZTtcbiAgICB9XG4gIH0gLy8gQXZvaWQgcGVyZm9ybWluZyBhIGxheW91dCBjb21wdXRhdGlvbiBpbiB0aGUgcmVuZGVyIG1ldGhvZC5cblxuXG4gIGxldCBtZW51TWluV2lkdGggPSBtZW51TWluV2lkdGhTdGF0ZTtcblxuICBpZiAoIWF1dG9XaWR0aCAmJiBpc09wZW5Db250cm9sbGVkICYmIGRpc3BsYXlOb2RlKSB7XG4gICAgbWVudU1pbldpZHRoID0gZGlzcGxheU5vZGUuY2xpZW50V2lkdGg7XG4gIH1cblxuICBsZXQgdGFiSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiB0YWJJbmRleFByb3AgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGFiSW5kZXggPSB0YWJJbmRleFByb3A7XG4gIH0gZWxzZSB7XG4gICAgdGFiSW5kZXggPSBkaXNhYmxlZCA/IG51bGwgOiAwO1xuICB9XG5cbiAgY29uc3QgYnV0dG9uSWQgPSBTZWxlY3REaXNwbGF5UHJvcHMuaWQgfHwgKG5hbWUgPyBgbXVpLWNvbXBvbmVudC1zZWxlY3QtJHtuYW1lfWAgOiB1bmRlZmluZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB2YXJpYW50LFxuICAgIHZhbHVlLFxuICAgIG9wZW5cbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlRGlzcGxheVJlZixcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogW2xhYmVsSWQsIGJ1dHRvbklkXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpIHx8IHVuZGVmaW5lZCxcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgb25Gb2N1czogb25Gb2N1c1xuICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNlbGVjdCwgY2xhc3NOYW1lLCBTZWxlY3REaXNwbGF5UHJvcHMuY2xhc3NOYW1lKSAvLyBUaGUgaWQgaXMgcmVxdWlyZWQgZm9yIHByb3BlciBhMTF5XG4gICAgICAsXG4gICAgICBpZDogYnV0dG9uSWQsXG4gICAgICBjaGlsZHJlbjogaXNFbXB0eShkaXNwbGF5KSA/XG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBub3RyYW5zbGF0ZSBuZWVkZWQgd2hpbGUgR29vZ2xlIFRyYW5zbGF0ZSB3aWxsIG5vdCBmaXggemVyby13aWR0aCBzcGFjZSBpc3N1ZVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWRhbmdlclxuICAgICAgX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwibm90cmFuc2xhdGVcIixcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgICAgICB9XG4gICAgICB9KSA6IGRpc3BsYXlcbiAgICB9KSksIC8qI19fUFVSRV9fKi9fanN4KFNlbGVjdE5hdGl2ZUlucHV0LCBfZXh0ZW5kcyh7XG4gICAgICB2YWx1ZTogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsJykgOiB2YWx1ZSxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5uYXRpdmVJbnB1dCxcbiAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0sIG90aGVyKSksIC8qI19fUFVSRV9fKi9fanN4KFNlbGVjdEljb24sIHtcbiAgICAgIGFzOiBJY29uQ29tcG9uZW50LFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmljb24sXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSksIC8qI19fUFVSRV9fKi9fanN4KE1lbnUsIF9leHRlbmRzKHtcbiAgICAgIGlkOiBgbWVudS0ke25hbWUgfHwgJyd9YCxcbiAgICAgIGFuY2hvckVsOiBkaXNwbGF5Tm9kZSxcbiAgICAgIG9wZW46IG9wZW4sXG4gICAgICBvbkNsb3NlOiBoYW5kbGVDbG9zZSxcbiAgICAgIGFuY2hvck9yaWdpbjoge1xuICAgICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICAgIGhvcml6b250YWw6ICdjZW50ZXInXG4gICAgICB9LFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiB7XG4gICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgaG9yaXpvbnRhbDogJ2NlbnRlcidcbiAgICAgIH1cbiAgICB9LCBNZW51UHJvcHMsIHtcbiAgICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxhYmVsSWQsXG4gICAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgICAgZGlzYWJsZUxpc3RXcmFwOiB0cnVlXG4gICAgICB9LCBNZW51UHJvcHMuTWVudUxpc3RQcm9wcyksXG4gICAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7fSwgTWVudVByb3BzLlBhcGVyUHJvcHMsIHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBtaW5XaWR0aDogbWVudU1pbldpZHRoXG4gICAgICAgIH0sIE1lbnVQcm9wcy5QYXBlclByb3BzICE9IG51bGwgPyBNZW51UHJvcHMuUGFwZXJQcm9wcy5zdHlsZSA6IG51bGwpXG4gICAgICB9KSxcbiAgICAgIGNoaWxkcmVuOiBpdGVtc1xuICAgIH0pKV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNlbGVjdElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gICdhcmlhLWRlc2NyaWJlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtbGFiZWwnOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPE1lbnVJdGVtPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHRvZ2dsZWQgb24gbW91bnQuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZC5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEltcGVyYXRpdmUgaGFuZGxlIGltcGxlbWVudGluZyBgeyB2YWx1ZTogVCwgbm9kZTogSFRNTEVsZW1lbnQsIGZvY3VzKCk6IHZvaWQgfWBcbiAgICogRXF1aXZhbGVudCB0byBgcmVmYFxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0SW5wdXQ7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN2Z0ljb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN2Z0ljb24nLCBzbG90KTtcbn1cbmNvbnN0IHN2Z0ljb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU3ZnSWNvbicsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JBY3Rpb24nLCAnY29sb3JFcnJvcicsICdjb2xvckRpc2FibGVkJywgJ2ZvbnRTaXplSW5oZXJpdCcsICdmb250U2l6ZVNtYWxsJywgJ2ZvbnRTaXplTWVkaXVtJywgJ2ZvbnRTaXplTGFyZ2UnXSk7XG5leHBvcnQgZGVmYXVsdCBzdmdJY29uQ2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCIsIFwiaHRtbENvbG9yXCIsIFwiaW5oZXJpdFZpZXdCb3hcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRTdmdJY29uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zdmdJY29uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgZm9udFNpemUsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgY29sb3IgIT09ICdpbmhlcml0JyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGBmb250U2l6ZSR7Y2FwaXRhbGl6ZShmb250U2l6ZSl9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTdmdJY29uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IFN2Z0ljb25Sb290ID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlTdmdJY29uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBzdHlsZXNbYGZvbnRTaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuZm9udFNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR0cmFuc2l0aW9ucywgX3RoZW1lJHRyYW5zaXRpb25zJGNyLCBfdGhlbWUkdHJhbnNpdGlvbnMyLCBfdGhlbWUkdHJhbnNpdGlvbnMyJGQsIF90aGVtZSR0eXBvZ3JhcGh5LCBfdGhlbWUkdHlwb2dyYXBoeSRweFQsIF90aGVtZSR0eXBvZ3JhcGh5MiwgX3RoZW1lJHR5cG9ncmFwaHkyJHB4LCBfdGhlbWUkdHlwb2dyYXBoeTMsIF90aGVtZSR0eXBvZ3JhcGh5MyRweCwgX3RoZW1lJHBhbGV0dGUkb3duZXJTLCBfdGhlbWUkcGFsZXR0ZSwgX3RoZW1lJHBhbGV0dGUkb3duZXJTMiwgX3RoZW1lJHBhbGV0dGUyLCBfdGhlbWUkcGFsZXR0ZTIkYWN0aW8sIF90aGVtZSRwYWxldHRlMywgX3RoZW1lJHBhbGV0dGUzJGFjdGlvO1xuXG4gIHJldHVybiB7XG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHdpZHRoOiAnMWVtJyxcbiAgICBoZWlnaHQ6ICcxZW0nLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgIGZsZXhTaHJpbms6IDAsXG4gICAgdHJhbnNpdGlvbjogKF90aGVtZSR0cmFuc2l0aW9ucyA9IHRoZW1lLnRyYW5zaXRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR0cmFuc2l0aW9ucyRjciA9IF90aGVtZSR0cmFuc2l0aW9ucy5jcmVhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHJhbnNpdGlvbnMkY3IuY2FsbChfdGhlbWUkdHJhbnNpdGlvbnMsICdmaWxsJywge1xuICAgICAgZHVyYXRpb246IChfdGhlbWUkdHJhbnNpdGlvbnMyID0gdGhlbWUudHJhbnNpdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHRyYW5zaXRpb25zMiRkID0gX3RoZW1lJHRyYW5zaXRpb25zMi5kdXJhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0cmFuc2l0aW9uczIkZC5zaG9ydGVyXG4gICAgfSksXG4gICAgZm9udFNpemU6IHtcbiAgICAgIGluaGVyaXQ6ICdpbmhlcml0JyxcbiAgICAgIHNtYWxsOiAoKF90aGVtZSR0eXBvZ3JhcGh5ID0gdGhlbWUudHlwb2dyYXBoeSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdHlwb2dyYXBoeSRweFQgPSBfdGhlbWUkdHlwb2dyYXBoeS5weFRvUmVtKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHR5cG9ncmFwaHkkcHhULmNhbGwoX3RoZW1lJHR5cG9ncmFwaHksIDIwKSkgfHwgJzEuMjVyZW0nLFxuICAgICAgbWVkaXVtOiAoKF90aGVtZSR0eXBvZ3JhcGh5MiA9IHRoZW1lLnR5cG9ncmFwaHkpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHR5cG9ncmFwaHkyJHB4ID0gX3RoZW1lJHR5cG9ncmFwaHkyLnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeTIkcHguY2FsbChfdGhlbWUkdHlwb2dyYXBoeTIsIDI0KSkgfHwgJzEuNXJlbScsXG4gICAgICBsYXJnZTogKChfdGhlbWUkdHlwb2dyYXBoeTMgPSB0aGVtZS50eXBvZ3JhcGh5KSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR0eXBvZ3JhcGh5MyRweCA9IF90aGVtZSR0eXBvZ3JhcGh5My5weFRvUmVtKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHR5cG9ncmFwaHkzJHB4LmNhbGwoX3RoZW1lJHR5cG9ncmFwaHkzLCAzNSkpIHx8ICcyLjE4NzUnXG4gICAgfVtvd25lclN0YXRlLmZvbnRTaXplXSxcbiAgICAvLyBUT0RPIHY1IGRlcHJlY2F0ZSwgdjYgcmVtb3ZlIGZvciBzeFxuICAgIGNvbG9yOiAoX3RoZW1lJHBhbGV0dGUkb3duZXJTID0gKF90aGVtZSRwYWxldHRlID0gdGhlbWUucGFsZXR0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkcGFsZXR0ZSRvd25lclMyID0gX3RoZW1lJHBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkcGFsZXR0ZSRvd25lclMyLm1haW4pICE9IG51bGwgPyBfdGhlbWUkcGFsZXR0ZSRvd25lclMgOiB7XG4gICAgICBhY3Rpb246IChfdGhlbWUkcGFsZXR0ZTIgPSB0aGVtZS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRwYWxldHRlMiRhY3RpbyA9IF90aGVtZSRwYWxldHRlMi5hY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkcGFsZXR0ZTIkYWN0aW8uYWN0aXZlLFxuICAgICAgZGlzYWJsZWQ6IChfdGhlbWUkcGFsZXR0ZTMgPSB0aGVtZS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRwYWxldHRlMyRhY3RpbyA9IF90aGVtZSRwYWxldHRlMy5hY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkcGFsZXR0ZTMkYWN0aW8uZGlzYWJsZWQsXG4gICAgICBpbmhlcml0OiB1bmRlZmluZWRcbiAgICB9W293bmVyU3RhdGUuY29sb3JdXG4gIH07XG59KTtcbmNvbnN0IFN2Z0ljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTdmdJY29uJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yID0gJ2luaGVyaXQnLFxuICAgIGNvbXBvbmVudCA9ICdzdmcnLFxuICAgIGZvbnRTaXplID0gJ21lZGl1bScsXG4gICAgaHRtbENvbG9yLFxuICAgIGluaGVyaXRWaWV3Qm94ID0gZmFsc2UsXG4gICAgdGl0bGVBY2Nlc3MsXG4gICAgdmlld0JveCA9ICcwIDAgMjQgMjQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGZvbnRTaXplLFxuICAgIGluaGVyaXRWaWV3Qm94LFxuICAgIHZpZXdCb3hcbiAgfSk7XG5cbiAgY29uc3QgbW9yZSA9IHt9O1xuXG4gIGlmICghaW5oZXJpdFZpZXdCb3gpIHtcbiAgICBtb3JlLnZpZXdCb3ggPSB2aWV3Qm94O1xuICB9XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFN2Z0ljb25Sb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG1vcmUsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgdGl0bGVBY2Nlc3MgPyAvKiNfX1BVUkVfXyovX2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aXRsZUFjY2Vzc1xuICAgIH0pIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdmdJY29uLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBOb2RlIHBhc3NlZCBpbnRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFlvdSBjYW4gdXNlIHRoZSBgaHRtbENvbG9yYCBwcm9wIHRvIGFwcGx5IGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdhY3Rpb24nLCAnZGlzYWJsZWQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2xhcmdlJywgJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcm9vdCBub2RlIHdpbGwgaW5oZXJpdCB0aGUgY3VzdG9tIGBjb21wb25lbnRgJ3Mgdmlld0JveCBhbmQgdGhlIGB2aWV3Qm94YFxuICAgKiBwcm9wIHdpbGwgYmUgaWdub3JlZC5cbiAgICogVXNlZnVsIHdoZW4geW91IHdhbnQgdG8gcmVmZXJlbmNlIGEgY3VzdG9tIGBjb21wb25lbnRgIGFuZCBoYXZlIGBTdmdJY29uYCBwYXNzIHRoYXRcbiAgICogYGNvbXBvbmVudGAncyB2aWV3Qm94IHRvIHRoZSByb290IG5vZGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbmhlcml0Vmlld0JveDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZS1yZW5kZXJpbmcgYXR0cmlidXRlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZCBvbiB0aGVcbiAgICogW01ETiBXZWIgRG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zaGFwZS1yZW5kZXJpbmcpLlxuICAgKiBJZiB5b3UgYXJlIGhhdmluZyBpc3N1ZXMgd2l0aCBibHVycnkgaWNvbnMgeW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB0aGlzIHByb3AuXG4gICAqL1xuICBzaGFwZVJlbmRlcmluZzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqIEBkZWZhdWx0ICcwIDAgMjQgMjQnXG4gICAqL1xuICB2aWV3Qm94OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgU3ZnSWNvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdmdJY29uIGZyb20gJy4uL1N2Z0ljb24nO1xuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG11aSBwYWNrYWdlcy5cbiAqL1xuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICBjb25zdCBDb21wb25lbnQgPSAocHJvcHMsIHJlZikgPT4gLyojX19QVVJFX18qL19qc3goU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgIFwiZGF0YS10ZXN0aWRcIjogYCR7ZGlzcGxheU5hbWV9SWNvbmAsXG4gICAgcmVmOiByZWZcbiAgfSwgcHJvcHMsIHtcbiAgICBjaGlsZHJlbjogcGF0aFxuICB9KSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBOZWVkIHRvIHNldCBgZGlzcGxheU5hbWVgIG9uIHRoZSBpbm5lciBjb21wb25lbnQgZm9yIFJlYWN0Lm1lbW8uXG4gICAgLy8gUmVhY3QgcHJpb3IgdG8gMTYuMTQgaWdub3JlcyBgZGlzcGxheU5hbWVgIG9uIHRoZSB3cmFwcGVyLlxuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGAke2Rpc3BsYXlOYW1lfUljb25gO1xuICB9XG5cbiAgQ29tcG9uZW50Lm11aU5hbWUgPSBTdmdJY29uLm11aU5hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyggLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ29tcG9uZW50KSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTcgMTBsNSA1IDUtNXpcIlxufSksICdBcnJvd0Ryb3BEb3duJyk7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJbnB1dCcsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXQnLCBbJ3Jvb3QnLCAnZm9ybUNvbnRyb2wnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdjb2xvclNlY29uZGFyeScsICd1bmRlcmxpbmUnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdmdWxsV2lkdGgnLCAnaW5wdXQnLCAnaW5wdXRTaXplU21hbGwnLCAnaW5wdXRNdWx0aWxpbmUnLCAnaW5wdXRUeXBlU2VhcmNoJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyByZWZUeXBlLCBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgaW5wdXRDbGFzc2VzLCB7IGdldElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbnB1dENsYXNzZXMnO1xuaW1wb3J0IHsgcm9vdE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlciwgaW5wdXRPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyLCBJbnB1dEJhc2VSb290LCBJbnB1dEJhc2VDb21wb25lbnQgYXMgSW5wdXRCYXNlSW5wdXQgfSBmcm9tICcuLi9JbnB1dEJhc2UvSW5wdXRCYXNlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IElucHV0Um9vdCA9IHN0eWxlZChJbnB1dEJhc2VSb290LCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gWy4uLmlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlcihwcm9wcywgc3R5bGVzKSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiBzdHlsZXMudW5kZXJsaW5lXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgfSwgb3duZXJTdGF0ZS5mb3JtQ29udHJvbCAmJiB7XG4gICAgJ2xhYmVsICsgJic6IHtcbiAgICAgIG1hcmdpblRvcDogMTZcbiAgICB9XG4gIH0sICFvd25lclN0YXRlLmRpc2FibGVVbmRlcmxpbmUgJiYge1xuICAgICcmOmFmdGVyJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWlufWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICB9LFxuICAgIFtgJi4ke2lucHV0Q2xhc3Nlcy5mb2N1c2VkfTphZnRlcmBdOiB7XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknXG4gICAgfSxcbiAgICBbYCYuJHtpbnB1dENsYXNzZXMuZXJyb3J9OmFmdGVyYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknIC8vIGVycm9yIGlzIGFsd2F5cyB1bmRlcmxpbmVkIGluIHJlZFxuXG4gICAgfSxcbiAgICAnJjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHtib3R0b21MaW5lQ29sb3J9YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgfSxcbiAgICBbYCY6aG92ZXI6bm90KC4ke2lucHV0Q2xhc3Nlcy5kaXNhYmxlZH0pOmJlZm9yZWBdOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHt0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeX1gLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7Ym90dG9tTGluZUNvbG9yfWBcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke2lucHV0Q2xhc3Nlcy5kaXNhYmxlZH06YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgIH1cbiAgfSk7XG59KTtcbmNvbnN0IElucHV0SW5wdXQgPSBzdHlsZWQoSW5wdXRCYXNlSW5wdXQsIHtcbiAgbmFtZTogJ011aUlucHV0JyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKHt9KTtcbmNvbnN0IElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUlucHV0J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgZGlzYWJsZVVuZGVybGluZSxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHNQcm9wLFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICB0eXBlID0gJ3RleHQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfTtcbiAgY29uc3QgaW5wdXRDb21wb25lbnRzUHJvcHMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH1cbiAgfTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzID0gY29tcG9uZW50c1Byb3BzUHJvcCA/IGRlZXBtZXJnZShjb21wb25lbnRzUHJvcHNQcm9wLCBpbnB1dENvbXBvbmVudHNQcm9wcykgOiBpbnB1dENvbXBvbmVudHNQcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgIFJvb3Q6IElucHV0Um9vdCxcbiAgICAgIElucHV0OiBJbnB1dElucHV0XG4gICAgfSwgY29tcG9uZW50cyksXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIElucHV0QmFzZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2lucHV0J1xuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIGB0ZXh0YXJlYWAgZWxlbWVudCBpcyByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgYGlucHV0YCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGxlZElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlGaWxsZWRJbnB1dCcsIHNsb3QpO1xufVxuY29uc3QgZmlsbGVkSW5wdXRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRmlsbGVkSW5wdXQnLCBbJ3Jvb3QnLCAnY29sb3JTZWNvbmRhcnknLCAndW5kZXJsaW5lJywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnYWRvcm5lZFN0YXJ0JywgJ2Fkb3JuZWRFbmQnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdoaWRkZW5MYWJlbCcsICdpbnB1dCcsICdpbnB1dFNpemVTbWFsbCcsICdpbnB1dEhpZGRlbkxhYmVsJywgJ2lucHV0TXVsdGlsaW5lJywgJ2lucHV0QWRvcm5lZFN0YXJ0JywgJ2lucHV0QWRvcm5lZEVuZCddKTtcbmV4cG9ydCBkZWZhdWx0IGZpbGxlZElucHV0Q2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZGlzYWJsZVVuZGVybGluZVwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoaWRkZW5MYWJlbFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlZlR5cGUsIGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgZmlsbGVkSW5wdXRDbGFzc2VzLCB7IGdldEZpbGxlZElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9maWxsZWRJbnB1dENsYXNzZXMnO1xuaW1wb3J0IHsgcm9vdE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlciwgaW5wdXRPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyLCBJbnB1dEJhc2VSb290LCBJbnB1dEJhc2VDb21wb25lbnQgYXMgSW5wdXRCYXNlSW5wdXQgfSBmcm9tICcuLi9JbnB1dEJhc2UvSW5wdXRCYXNlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IEZpbGxlZElucHV0Um9vdCA9IHN0eWxlZChJbnB1dEJhc2VSb290LCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gWy4uLmlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlcihwcm9wcywgc3R5bGVzKSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiBzdHlsZXMudW5kZXJsaW5lXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wNiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJhY2tncm91bmRDb2xvcixcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICB9KSxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjA5KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEzKScsXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5mb2N1c2VkfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJ1xuICAgIH1cbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiB7XG4gICAgJyY6YWZ0ZXInOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHt0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW59YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmZvY3VzZWR9OmFmdGVyYF06IHtcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5lcnJvcn06YWZ0ZXJgXToge1xuICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKScgLy8gZXJyb3IgaXMgYWx3YXlzIHVuZGVybGluZWQgaW4gcmVkXG5cbiAgICB9LFxuICAgICcmOmJlZm9yZSc6IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAke2JvdHRvbUxpbmVDb2xvcn1gLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICBjb250ZW50OiAnXCJcXFxcMDBhMFwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JvcmRlci1ib3R0b20tY29sb3InLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICB9LFxuICAgIFtgJjpob3Zlcjpub3QoLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSk6YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAke3RoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5fWBcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5kaXNhYmxlZH06YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ0xlZnQ6IDEyXG4gIH0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nUmlnaHQ6IDEyXG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgICBwYWRkaW5nOiAnMjVweCAxMnB4IDhweCdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nVG9wOiAyMSxcbiAgICBwYWRkaW5nQm90dG9tOiA0XG4gIH0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYge1xuICAgIHBhZGRpbmdUb3A6IDE2LFxuICAgIHBhZGRpbmdCb3R0b206IDE3XG4gIH0pKTtcbn0pO1xuY29uc3QgRmlsbGVkSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcGFkZGluZ1RvcDogMjUsXG4gIHBhZGRpbmdSaWdodDogMTIsXG4gIHBhZGRpbmdCb3R0b206IDgsXG4gIHBhZGRpbmdMZWZ0OiAxMixcbiAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICBjYXJldENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICdpbmhlcml0JyxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJ2luaGVyaXQnXG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDIxLFxuICBwYWRkaW5nQm90dG9tOiA0XG59LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHtcbiAgcGFkZGluZ1RvcDogMTYsXG4gIHBhZGRpbmdCb3R0b206IDE3XG59LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiB7XG4gIHBhZGRpbmdUb3A6IDAsXG4gIHBhZGRpbmdCb3R0b206IDAsXG4gIHBhZGRpbmdMZWZ0OiAwLFxuICBwYWRkaW5nUmlnaHQ6IDBcbn0sIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nTGVmdDogMFxufSwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nUmlnaHQ6IDBcbn0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ1RvcDogOCxcbiAgcGFkZGluZ0JvdHRvbTogOVxufSkpO1xuY29uc3QgRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHNQcm9wLFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIC8vIGRlY2xhcmUgaGVyZSB0byBwcmV2ZW50IHNwcmVhZGluZyB0byBET01cbiAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgbXVsdGlsaW5lID0gZmFsc2UsXG4gICAgdHlwZSA9ICd0ZXh0J1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmUsXG4gICAgdHlwZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcyA9IHtcbiAgICByb290OiB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSxcbiAgICBpbnB1dDoge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH1cbiAgfTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzID0gY29tcG9uZW50c1Byb3BzUHJvcCA/IGRlZXBtZXJnZShjb21wb25lbnRzUHJvcHNQcm9wLCBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcykgOiBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgIFJvb3Q6IEZpbGxlZElucHV0Um9vdCxcbiAgICAgIElucHV0OiBGaWxsZWRJbnB1dElucHV0XG4gICAgfSwgY29tcG9uZW50cyksXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmlsbGVkSW5wdXQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIElucHV0QmFzZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIG5vdCBoYXZlIGFuIHVuZGVybGluZS5cbiAgICovXG4gIGRpc2FibGVVbmRlcmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBoaWRkZW4uXG4gICAqIFRoaXMgaXMgdXNlZCB0byBpbmNyZWFzZSBkZW5zaXR5IGZvciBhIGBGaWxsZWRJbnB1dGAuXG4gICAqIEJlIHN1cmUgdG8gYWRkIGBhcmlhLWxhYmVsYCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZGVuTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ25vbmUnYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSBgdGV4dGFyZWFgIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IEZpbGxlZElucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5cbnZhciBfSW5wdXQsIF9GaWxsZWRJbnB1dDtcblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaWRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJsYWJlbFwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hdGl2ZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnLi9TZWxlY3RJbnB1dCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmltcG9ydCBOYXRpdmVTZWxlY3RJbnB1dCBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IEZpbGxlZElucHV0IGZyb20gJy4uL0ZpbGxlZElucHV0JztcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gJy4uL091dGxpbmVkSW5wdXQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgcmV0dXJuIGNsYXNzZXM7XG59O1xuXG5jb25zdCBTZWxlY3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3QoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgbmFtZTogJ011aVNlbGVjdCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGF1dG9XaWR0aCA9IGZhbHNlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wID0ge30sXG4gICAgY2xhc3NOYW1lLFxuICAgIGRlZmF1bHRPcGVuID0gZmFsc2UsXG4gICAgZGlzcGxheUVtcHR5ID0gZmFsc2UsXG4gICAgSWNvbkNvbXBvbmVudCA9IEFycm93RHJvcERvd25JY29uLFxuICAgIGlkLFxuICAgIGlucHV0LFxuICAgIGlucHV0UHJvcHMsXG4gICAgbGFiZWwsXG4gICAgbGFiZWxJZCxcbiAgICBNZW51UHJvcHMsXG4gICAgbXVsdGlwbGUgPSBmYWxzZSxcbiAgICBuYXRpdmUgPSBmYWxzZSxcbiAgICBvbkNsb3NlLFxuICAgIG9uT3BlbixcbiAgICBvcGVuLFxuICAgIHJlbmRlclZhbHVlLFxuICAgIFNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICB2YXJpYW50OiB2YXJpYW50UHJvcHMgPSAnb3V0bGluZWQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBpbnB1dENvbXBvbmVudCA9IG5hdGl2ZSA/IE5hdGl2ZVNlbGVjdElucHV0IDogU2VsZWN0SW5wdXQ7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnXVxuICB9KTtcbiAgY29uc3QgdmFyaWFudCA9IGZjcy52YXJpYW50IHx8IHZhcmlhbnRQcm9wcztcbiAgY29uc3QgSW5wdXRDb21wb25lbnQgPSBpbnB1dCB8fCB7XG4gICAgc3RhbmRhcmQ6IF9JbnB1dCB8fCAoX0lucHV0ID0gLyojX19QVVJFX18qL19qc3goSW5wdXQsIHt9KSksXG4gICAgb3V0bGluZWQ6IC8qI19fUFVSRV9fKi9fanN4KE91dGxpbmVkSW5wdXQsIHtcbiAgICAgIGxhYmVsOiBsYWJlbFxuICAgIH0pLFxuICAgIGZpbGxlZDogX0ZpbGxlZElucHV0IHx8IChfRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovX2pzeChGaWxsZWRJbnB1dCwge30pKVxuICB9W3ZhcmlhbnRdO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50UmVmID0gdXNlRm9ya1JlZihyZWYsIElucHV0Q29tcG9uZW50LnJlZik7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYFNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudCxcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIEljb25Db21wb25lbnQsXG4gICAgICB2YXJpYW50LFxuICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgLy8gV2UgcmVuZGVyIGEgc2VsZWN0LiBXZSBjYW4gaWdub3JlIHRoZSB0eXBlIHByb3ZpZGVkIGJ5IHRoZSBgSW5wdXRgLlxuICAgICAgbXVsdGlwbGVcbiAgICB9LCBuYXRpdmUgPyB7XG4gICAgICBpZFxuICAgIH0gOiB7XG4gICAgICBhdXRvV2lkdGgsXG4gICAgICBkZWZhdWx0T3BlbixcbiAgICAgIGRpc3BsYXlFbXB0eSxcbiAgICAgIGxhYmVsSWQsXG4gICAgICBNZW51UHJvcHMsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3BlbixcbiAgICAgIHJlbmRlclZhbHVlLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAgIGlkXG4gICAgICB9LCBTZWxlY3REaXNwbGF5UHJvcHMpXG4gICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgY2xhc3NlczogaW5wdXRQcm9wcyA/IGRlZXBtZXJnZShjbGFzc2VzLCBpbnB1dFByb3BzLmNsYXNzZXMpIDogY2xhc3Nlc1xuICAgIH0sIGlucHV0ID8gaW5wdXQucHJvcHMuaW5wdXRQcm9wcyA6IHt9KVxuICB9LCBtdWx0aXBsZSAmJiBuYXRpdmUgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJyA/IHtcbiAgICBub3RjaGVkOiB0cnVlXG4gIH0gOiB7fSwge1xuICAgIHJlZjogaW5wdXRDb21wb25lbnRSZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KElucHV0Q29tcG9uZW50LnByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3QucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHdpZHRoIG9mIHRoZSBwb3BvdmVyIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSBpdGVtcyBpbnNpZGUgdGhlXG4gICAqIG1lbnUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGF0IGxlYXN0IHRoZSB3aWR0aCBvZiB0aGUgc2VsZWN0IGlucHV0LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b1dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGBNZW51SXRlbWAgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZSBhbmQgYG9wdGlvbmAgd2hlbiBgbmF0aXZlYCBpcyB0cnVlLlxuICAgKlxuICAgKiDimqDvuI9UaGUgYE1lbnVJdGVtYCBlbGVtZW50cyAqKm11c3QqKiBiZSBkaXJlY3QgZGVzY2VuZGFudHMgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IG9wZW4uIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZCAoaS5lLiB0aGUgYG9wZW5gIHByb3AgaXMgbm90IGRlZmluZWQpLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWZhdWx0T3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdmFsdWUgaXMgZGlzcGxheWVkIGV2ZW4gaWYgbm8gaXRlbXMgYXJlIHNlbGVjdGVkLlxuICAgKlxuICAgKiBJbiBvcmRlciB0byBkaXNwbGF5IGEgbWVhbmluZ2Z1bCB2YWx1ZSwgYSBmdW5jdGlvbiBjYW4gYmUgcGFzc2VkIHRvIHRoZSBgcmVuZGVyVmFsdWVgIHByb3Agd2hpY2hcbiAgICogcmV0dXJucyB0aGUgdmFsdWUgdG8gYmUgZGlzcGxheWVkIHdoZW4gbm8gaXRlbXMgYXJlIHNlbGVjdGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2hlbiB1c2luZyB0aGlzIHByb3AsIG1ha2Ugc3VyZSB0aGUgbGFiZWwgZG9lc24ndCBvdmVybGFwIHdpdGggdGhlIGVtcHR5IGRpc3BsYXllZCB2YWx1ZS5cbiAgICogVGhlIGxhYmVsIHNob3VsZCBlaXRoZXIgYmUgaGlkZGVuIG9yIGZvcmNlZCB0byBhIHNocnVuayBzdGF0ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKiBAZGVmYXVsdCBBcnJvd0Ryb3BEb3duSWNvblxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgYGlkYCBvZiB0aGUgd3JhcHBlciBlbGVtZW50IG9yIHRoZSBgc2VsZWN0YCBlbGVtZW50IHdoZW4gYG5hdGl2ZWAuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQW4gYElucHV0YCBlbGVtZW50OyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgbWF0ZXJpYWwtdWkgc3BlY2lmaWMgYElucHV0YC5cbiAgICovXG4gIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFdoZW4gYG5hdGl2ZWAgaXMgYHRydWVgLCB0aGUgYXR0cmlidXRlcyBhcmUgYXBwbGllZCBvbiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFNlZSBbT3V0bGluZWRJbnB1dCNsYWJlbF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8jcHJvcHMpXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHVzZXMgYSBuYXRpdmUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG5hdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U2VsZWN0Q2hhbmdlRXZlbnQ8VD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChhbnkpLlxuICAgKiAqKldhcm5pbmcqKjogVGhpcyBpcyBhIGdlbmVyaWMgZXZlbnQgbm90IGEgY2hhbmdlIGV2ZW50IHVubGVzcyB0aGUgY2hhbmdlIGV2ZW50IGlzIGNhdXNlZCBieSBicm93c2VyIGF1dG9maWxsLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZCB3aGVuIGBuYXRpdmVgIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNsaWNrYWJsZSBkaXYgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdERpc3BsYXlQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgYGlucHV0YCB2YWx1ZS4gUHJvdmlkaW5nIGFuIGVtcHR5IHN0cmluZyB3aWxsIHNlbGVjdCBubyBvcHRpb25zLlxuICAgKiBTZXQgdG8gYW4gZW1wdHkgc3RyaW5nIGAnJ2AgaWYgeW91IGRvbid0IHdhbnQgYW55IG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucyB0byBiZSBzZWxlY3RlZC5cbiAgICpcbiAgICogSWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdCBpdCBtdXN0IGhhdmUgcmVmZXJlbmNlIGVxdWFsaXR5IHdpdGggdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICogSWYgdGhlIHZhbHVlIGlzIG5vdCBhbiBvYmplY3QsIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gbXVzdCBtYXRjaCB3aXRoIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcblNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDNi40NyAyIDIgNi40NyAyIDEyczQuNDcgMTAgMTAgMTAgMTAtNC40NyAxMC0xMFMxNy41MyAyIDEyIDJ6bTUgMTMuNTlMMTUuNTkgMTcgMTIgMTMuNDEgOC40MSAxNyA3IDE1LjU5IDEwLjU5IDEyIDcgOC40MSA4LjQxIDcgMTIgMTAuNTkgMTUuNTkgNyAxNyA4LjQxIDEzLjQxIDEyIDE3IDE1LjU5elwiXG59KSwgJ0NhbmNlbCcpOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlwVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDaGlwJywgc2xvdCk7XG59XG5jb25zdCBjaGlwQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNoaXAnLCBbJ3Jvb3QnLCAnc2l6ZVNtYWxsJywgJ3NpemVNZWRpdW0nLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2Rpc2FibGVkJywgJ2NsaWNrYWJsZScsICdjbGlja2FibGVDb2xvclByaW1hcnknLCAnY2xpY2thYmxlQ29sb3JTZWNvbmRhcnknLCAnZGVsZXRhYmxlJywgJ2RlbGV0YWJsZUNvbG9yUHJpbWFyeScsICdkZWxldGFibGVDb2xvclNlY29uZGFyeScsICdvdXRsaW5lZCcsICdmaWxsZWQnLCAnb3V0bGluZWRQcmltYXJ5JywgJ291dGxpbmVkU2Vjb25kYXJ5JywgJ2F2YXRhcicsICdhdmF0YXJTbWFsbCcsICdhdmF0YXJNZWRpdW0nLCAnYXZhdGFyQ29sb3JQcmltYXJ5JywgJ2F2YXRhckNvbG9yU2Vjb25kYXJ5JywgJ2ljb24nLCAnaWNvblNtYWxsJywgJ2ljb25NZWRpdW0nLCAnaWNvbkNvbG9yUHJpbWFyeScsICdpY29uQ29sb3JTZWNvbmRhcnknLCAnbGFiZWwnLCAnbGFiZWxTbWFsbCcsICdsYWJlbE1lZGl1bScsICdkZWxldGVJY29uJywgJ2RlbGV0ZUljb25TbWFsbCcsICdkZWxldGVJY29uTWVkaXVtJywgJ2RlbGV0ZUljb25Db2xvclByaW1hcnknLCAnZGVsZXRlSWNvbkNvbG9yU2Vjb25kYXJ5JywgJ2RlbGV0ZUljb25PdXRsaW5lZENvbG9yUHJpbWFyeScsICdkZWxldGVJY29uT3V0bGluZWRDb2xvclNlY29uZGFyeScsICdmb2N1c1Zpc2libGUnXSk7XG5leHBvcnQgZGVmYXVsdCBjaGlwQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXZhdGFyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xpY2thYmxlXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkZWxldGVJY29uXCIsIFwiZGlzYWJsZWRcIiwgXCJpY29uXCIsIFwibGFiZWxcIiwgXCJvbkNsaWNrXCIsIFwib25EZWxldGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBDYW5jZWxJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DYW5jZWwnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdW5zdXBwb3J0ZWRQcm9wIGZyb20gJy4uL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBjaGlwQ2xhc3NlcywgeyBnZXRDaGlwVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jaGlwQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlZCxcbiAgICBzaXplLFxuICAgIGNvbG9yLFxuICAgIG9uRGVsZXRlLFxuICAgIGNsaWNrYWJsZSxcbiAgICB2YXJpYW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGNsaWNrYWJsZSAmJiAnY2xpY2thYmxlJywgY2xpY2thYmxlICYmIGBjbGlja2FibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgb25EZWxldGUgJiYgJ2RlbGV0YWJsZScsIG9uRGVsZXRlICYmIGBkZWxldGFibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYCR7dmFyaWFudH0ke2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIGxhYmVsOiBbJ2xhYmVsJywgYGxhYmVsJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIGF2YXRhcjogWydhdmF0YXInLCBgYXZhdGFyJHtjYXBpdGFsaXplKHNpemUpfWAsIGBhdmF0YXJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUoc2l6ZSl9YCwgYGljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgZGVsZXRlSWNvbjogWydkZWxldGVJY29uJywgYGRlbGV0ZUljb24ke2NhcGl0YWxpemUoc2l6ZSl9YCwgYGRlbGV0ZUljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYGRlbGV0ZUljb25PdXRsaW5lZENvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENoaXBVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgQ2hpcFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNoaXAnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgY29sb3IsXG4gICAgICBjbGlja2FibGUsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIHNpemUsXG4gICAgICB2YXJpYW50XG4gICAgfSA9IG93bmVyU3RhdGU7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiBzdHlsZXMuYXZhdGFyXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXTogc3R5bGVzW2BhdmF0YXIke2NhcGl0YWxpemUoc2l6ZSl9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiBzdHlsZXNbYGF2YXRhckNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBzdHlsZXMuaWNvblxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUoc2l6ZSl9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvbn1gXTogc3R5bGVzW2BpY29uQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHN0eWxlcy5kZWxldGVJY29uXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHN0eWxlc1tgZGVsZXRlSWNvbiR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5kZWxldGVJY29ufWBdOiBzdHlsZXNbYGRlbGV0ZUljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXTogc3R5bGVzW2BkZWxldGVJY29uT3V0bGluZWRDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgICB9LCBzdHlsZXMucm9vdCwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLCBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSwgY2xpY2thYmxlICYmIHN0eWxlcy5jbGlja2FibGUsIGNsaWNrYWJsZSAmJiBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIHN0eWxlc1tgY2xpY2thYmxlQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfSlgXSwgb25EZWxldGUgJiYgc3R5bGVzLmRlbGV0YWJsZSwgb25EZWxldGUgJiYgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGRlbGV0YWJsZUNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSwgc3R5bGVzW3ZhcmlhbnRdLCB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHN0eWxlc1tgb3V0bGluZWQke2NhcGl0YWxpemUoY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgZGVsZXRlSWNvbkNvbG9yID0gYWxwaGEodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIDAuMjYpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKSxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6IDMyLFxuICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLFxuICAgIGJvcmRlclJhZGl1czogMzIgLyAyLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdyddKSxcbiAgICAvLyBsYWJlbCB3aWxsIGluaGVyaXQgdGhpcyBmcm9tIHJvb3QsIHRoZW4gYGNsaWNrYWJsZWAgY2xhc3Mgb3ZlcnJpZGVzIHRoaXMgZm9yIGJvdGhcbiAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6IDAsXG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICBib3JkZXI6IDAsXG4gICAgLy8gUmVtb3ZlIGBidXR0b25gIGJvcmRlclxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIGBidXR0b25gIHBhZGRpbmdcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBbYCYuJHtjaGlwQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5LFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgfSxcbiAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiB7XG4gICAgICBtYXJnaW5MZWZ0OiA1LFxuICAgICAgbWFyZ2luUmlnaHQ6IC02LFxuICAgICAgd2lkdGg6IDI0LFxuICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMilcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5hdmF0YXJDb2xvclByaW1hcnl9YF06IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuZGFya1xuICAgIH0sXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhckNvbG9yU2Vjb25kYXJ5fWBdOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5kYXJrXG4gICAgfSxcbiAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyU21hbGx9YF06IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICBtYXJnaW5SaWdodDogLTQsXG4gICAgICB3aWR0aDogMTgsXG4gICAgICBoZWlnaHQ6IDE4LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMClcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBfZXh0ZW5kcyh7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgICBtYXJnaW5SaWdodDogLTZcbiAgICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgICAgZm9udFNpemU6IDE4LFxuICAgICAgbWFyZ2luTGVmdDogNCxcbiAgICAgIG1hcmdpblJpZ2h0OiAtNFxuICAgIH0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSksXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IF9leHRlbmRzKHtcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6IGRlbGV0ZUljb25Db2xvcixcbiAgICAgIGZvbnRTaXplOiAyMixcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgbWFyZ2luOiAnMCA1cHggMCAtNnB4JyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogYWxwaGEoZGVsZXRlSWNvbkNvbG9yLCAwLjQpXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgIG1hcmdpblJpZ2h0OiA0LFxuICAgICAgbWFyZ2luTGVmdDogLTRcbiAgICB9LCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYge1xuICAgICAgY29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uY29udHJhc3RUZXh0LCAwLjcpLFxuICAgICAgJyY6aG92ZXIsICY6YWN0aXZlJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHRcbiAgICAgIH1cbiAgICB9KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIGhlaWdodDogMjRcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHRcbiAgfSwgb3duZXJTdGF0ZS5vbkRlbGV0ZSAmJiB7XG4gICAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LCBvd25lclN0YXRlLm9uRGVsZXRlICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gICAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFya1xuICAgIH1cbiAgfSk7XG59LCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY2xpY2thYmxlICYmIHtcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gICcmOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWQsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSlcbiAgfSxcbiAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZCwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5ICsgdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5KVxuICB9LFxuICAnJjphY3RpdmUnOiB7XG4gICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzFdXG4gIH1cbn0sIG93bmVyU3RhdGUuY2xpY2thYmxlICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIFtgJjpob3ZlciwgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5kYXJrXG4gIH1cbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXX1gLFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5jbGlja2FibGV9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyXG4gIH0sXG4gIFtgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDRcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhclNtYWxsfWBdOiB7XG4gICAgbWFyZ2luTGVmdDogMlxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvbn1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDRcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmljb25TbWFsbH1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDJcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHtcbiAgICBtYXJnaW5SaWdodDogNVxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvblNtYWxsfWBdOiB7XG4gICAgbWFyZ2luUmlnaHQ6IDNcbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gIGJvcmRlcjogYDFweCBzb2xpZCAke2FscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC43KX1gLFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5jbGlja2FibGV9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KVxuICB9LFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5KVxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXToge1xuICAgIGNvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIDAuNyksXG4gICAgJyY6aG92ZXIsICY6YWN0aXZlJzoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICAgIH1cbiAgfVxufSkpO1xuY29uc3QgQ2hpcExhYmVsID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQ2hpcCcsXG4gIHNsb3Q6ICdMYWJlbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZVxuICAgIH0gPSBvd25lclN0YXRlO1xuICAgIHJldHVybiBbc3R5bGVzLmxhYmVsLCBzdHlsZXNbYGxhYmVsJHtjYXBpdGFsaXplKHNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgcGFkZGluZ0xlZnQ6IDEyLFxuICBwYWRkaW5nUmlnaHQ6IDEyLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDgsXG4gIHBhZGRpbmdSaWdodDogOFxufSkpO1xuXG5mdW5jdGlvbiBpc0RlbGV0ZUtleWJvYXJkRXZlbnQoa2V5Ym9hcmRFdmVudCkge1xuICByZXR1cm4ga2V5Ym9hcmRFdmVudC5rZXkgPT09ICdCYWNrc3BhY2UnIHx8IGtleWJvYXJkRXZlbnQua2V5ID09PSAnRGVsZXRlJztcbn1cbi8qKlxuICogQ2hpcHMgcmVwcmVzZW50IGNvbXBsZXggZW50aXRpZXMgaW4gc21hbGwgYmxvY2tzLCBzdWNoIGFzIGEgY29udGFjdC5cbiAqL1xuXG5cbmNvbnN0IENoaXAgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaGlwKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDaGlwJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYXZhdGFyOiBhdmF0YXJQcm9wLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjbGlja2FibGU6IGNsaWNrYWJsZVByb3AsXG4gICAgY29sb3IgPSAnZGVmYXVsdCcsXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRQcm9wLFxuICAgIGRlbGV0ZUljb246IGRlbGV0ZUljb25Qcm9wLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgaWNvbjogaWNvblByb3AsXG4gICAgbGFiZWwsXG4gICAgb25DbGljayxcbiAgICBvbkRlbGV0ZSxcbiAgICBvbktleURvd24sXG4gICAgb25LZXlVcCxcbiAgICBzaXplID0gJ21lZGl1bScsXG4gICAgdmFyaWFudCA9ICdmaWxsZWQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjaGlwUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaXBSZWYsIHJlZik7XG5cbiAgY29uc3QgaGFuZGxlRGVsZXRlSWNvbkNsaWNrID0gZXZlbnQgPT4ge1xuICAgIC8vIFN0b3AgdGhlIGV2ZW50IGZyb20gYnViYmxpbmcgdXAgdG8gdGhlIGBDaGlwYFxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKG9uRGVsZXRlKSB7XG4gICAgICBvbkRlbGV0ZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgLy8gSWdub3JlIGV2ZW50cyBmcm9tIGNoaWxkcmVuIG9mIGBDaGlwYC5cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0ICYmIGlzRGVsZXRlS2V5Ym9hcmRFdmVudChldmVudCkpIHtcbiAgICAgIC8vIFdpbGwgYmUgaGFuZGxlZCBpbiBrZXlVcCwgb3RoZXJ3aXNlIHNvbWUgYnJvd3NlcnNcbiAgICAgIC8vIG1pZ2h0IGluaXQgbmF2aWdhdGlvblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVLZXlVcCA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlbnRzIGZyb20gY2hpbGRyZW4gb2YgYENoaXBgLlxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlmIChvbkRlbGV0ZSAmJiBpc0RlbGV0ZUtleWJvYXJkRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIG9uRGVsZXRlKGV2ZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJyAmJiBjaGlwUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2hpcFJlZi5jdXJyZW50LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25LZXlVcCkge1xuICAgICAgb25LZXlVcChldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNsaWNrYWJsZSA9IGNsaWNrYWJsZVByb3AgIT09IGZhbHNlICYmIG9uQ2xpY2sgPyB0cnVlIDogY2xpY2thYmxlUHJvcDtcbiAgY29uc3Qgc21hbGwgPSBzaXplID09PSAnc21hbGwnO1xuICBjb25zdCBjb21wb25lbnQgPSBjbGlja2FibGUgfHwgb25EZWxldGUgPyBCdXR0b25CYXNlIDogQ29tcG9uZW50UHJvcCB8fCAnZGl2JztcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIHNpemUsXG4gICAgY29sb3IsXG4gICAgb25EZWxldGU6ICEhb25EZWxldGUsXG4gICAgY2xpY2thYmxlLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBtb3JlUHJvcHMgPSBjb21wb25lbnQgPT09IEJ1dHRvbkJhc2UgPyBfZXh0ZW5kcyh7XG4gICAgY29tcG9uZW50OiBDb21wb25lbnRQcm9wIHx8ICdkaXYnLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xhc3Nlcy5mb2N1c1Zpc2libGVcbiAgfSwgb25EZWxldGUgJiYge1xuICAgIGRpc2FibGVSaXBwbGU6IHRydWVcbiAgfSkgOiB7fTtcbiAgbGV0IGRlbGV0ZUljb24gPSBudWxsO1xuXG4gIGlmIChvbkRlbGV0ZSkge1xuICAgIGNvbnN0IGN1c3RvbUNsYXNzZXMgPSBjbHN4KGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgKHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgPyBjbGFzc2VzW2BkZWxldGVJY29uT3V0bGluZWRDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0gOiBjbGFzc2VzW2BkZWxldGVJY29uQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdKSwgc21hbGwgJiYgY2xhc3Nlcy5kZWxldGVJY29uU21hbGwpO1xuICAgIGRlbGV0ZUljb24gPSBkZWxldGVJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZGVsZXRlSWNvblByb3ApID8gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChkZWxldGVJY29uUHJvcCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGRlbGV0ZUljb25Qcm9wLnByb3BzLmNsYXNzTmFtZSwgY2xhc3Nlcy5kZWxldGVJY29uLCBjdXN0b21DbGFzc2VzKSxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZURlbGV0ZUljb25DbGlja1xuICAgIH0pIDogLyojX19QVVJFX18qL19qc3goQ2FuY2VsSWNvbiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZGVsZXRlSWNvbiwgY3VzdG9tQ2xhc3NlcyksXG4gICAgICBvbkNsaWNrOiBoYW5kbGVEZWxldGVJY29uQ2xpY2tcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBhdmF0YXIgPSBudWxsO1xuXG4gIGlmIChhdmF0YXJQcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChhdmF0YXJQcm9wKSkge1xuICAgIGF2YXRhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoYXZhdGFyUHJvcCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYXZhdGFyLCBhdmF0YXJQcm9wLnByb3BzLmNsYXNzTmFtZSlcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBpY29uID0gbnVsbDtcblxuICBpZiAoaWNvblByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGljb25Qcm9wKSkge1xuICAgIGljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGljb25Qcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pY29uLCBpY29uUHJvcC5wcm9wcy5jbGFzc05hbWUpXG4gICAgfSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChhdmF0YXIgJiYgaWNvbikge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBUaGUgQ2hpcCBjb21wb25lbnQgY2FuIG5vdCBoYW5kbGUgdGhlIGF2YXRhciAnICsgJ2FuZCB0aGUgaWNvbiBwcm9wIGF0IHRoZSBzYW1lIHRpbWUuIFBpY2sgb25lLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoQ2hpcFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZGlzYWJsZWQ6IGNsaWNrYWJsZSAmJiBkaXNhYmxlZCA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBtb3JlUHJvcHMsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFthdmF0YXIgfHwgaWNvbiwgLyojX19QVVJFX18qL19qc3goQ2hpcExhYmVsLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5sYWJlbCksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgfSksIGRlbGV0ZUljb25dXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2hpcC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIEF2YXRhciBlbGVtZW50IHRvIGRpc3BsYXkuXG4gICAqL1xuICBhdmF0YXI6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaXNuJ3Qgc3VwcG9ydGVkLlxuICAgKiBVc2UgdGhlIGBjb21wb25lbnRgIHByb3AgaWYgeW91IG5lZWQgdG8gY2hhbmdlIHRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogdW5zdXBwb3J0ZWRQcm9wLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaXAgd2lsbCBhcHBlYXIgY2xpY2thYmxlLCBhbmQgd2lsbCByYWlzZSB3aGVuIHByZXNzZWQsXG4gICAqIGV2ZW4gaWYgdGhlIG9uQ2xpY2sgcHJvcCBpcyBub3QgZGVmaW5lZC5cbiAgICogSWYgYGZhbHNlYCwgdGhlIGNoaXAgd2lsbCBub3QgYXBwZWFyIGNsaWNrYWJsZSwgZXZlbiBpZiBvbkNsaWNrIHByb3AgaXMgZGVmaW5lZC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsXG4gICAqIGFsb25nIHdpdGggdGhlIGNvbXBvbmVudCBwcm9wIHRvIGluZGljYXRlIGFuIGFuY2hvciBDaGlwIGlzIGNsaWNrYWJsZS5cbiAgICogTm90ZTogdGhpcyBjb250cm9scyB0aGUgVUkgYW5kIGRvZXMgbm90IGFmZmVjdCB0aGUgb25DbGljayBldmVudC5cbiAgICovXG4gIGNsaWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgZGVsZXRlIGljb24gZWxlbWVudC4gU2hvd24gb25seSBpZiBgb25EZWxldGVgIGlzIHNldC5cbiAgICovXG4gIGRlbGV0ZUljb246IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEljb24gZWxlbWVudC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZGVsZXRlIGljb24gaXMgY2xpY2tlZC5cbiAgICogSWYgc2V0LCB0aGUgZGVsZXRlIGljb24gd2lsbCBiZSBzaG93bi5cbiAgICovXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdmaWxsZWQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENoaXA7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvc3R5bGVzXCI7XHJcbmltcG9ydCBCb3ggZnJvbSBcIkBtdWkvbWF0ZXJpYWwvQm94XCI7XHJcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gXCJAbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXRcIjtcclxuaW1wb3J0IElucHV0TGFiZWwgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvSW5wdXRMYWJlbFwiO1xyXG5pbXBvcnQgTWVudUl0ZW0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvTWVudUl0ZW1cIjtcclxuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gXCJAbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sXCI7XHJcbmltcG9ydCBTZWxlY3QgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvU2VsZWN0XCI7XHJcbmltcG9ydCBDaGlwIGZyb20gXCJAbXVpL21hdGVyaWFsL0NoaXBcIjtcclxuXHJcbmNvbnN0IElURU1fSEVJR0hUID0gNDg7XHJcbmNvbnN0IElURU1fUEFERElOR19UT1AgPSA4O1xyXG5jb25zdCBNZW51UHJvcHMgPSB7XHJcbiAgICBQYXBlclByb3BzOiB7XHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgbWF4SGVpZ2h0OiBJVEVNX0hFSUdIVCAqIDQuNSArIElURU1fUEFERElOR19UT1AsXHJcbiAgICAgICAgICAgIHdpZHRoOiAyNTBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRTdHlsZXMobmFtZSwgcGVyc29uTmFtZSwgdGhlbWUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZm9udFdlaWdodDpcclxuICAgICAgICAgICAgcGVyc29uTmFtZS5pbmRleE9mKG5hbWUpID09PSAtMSA/IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodFJlZ3VsYXIgOiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW1cclxuICAgIH07XHJcbn1cclxuXHJcbmNvbnN0IE11bHRpcGxlRHJvcGRvd24gPSAoeyBpdGVtcywgc2V0SXRlbXMgfSkgPT4ge1xyXG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xyXG4gICAgY29uc3QgW2Nob3Nlbkl0ZW0sIHNldENob3Nlbkl0ZW1dID0gdXNlU3RhdGUoW10pO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgdGFyZ2V0OiB7IHZhbHVlIH1cclxuICAgICAgICB9ID0gZXZlbnQ7XHJcbiAgICAgICAgc2V0Q2hvc2VuSXRlbShcclxuICAgICAgICAgICAgLy8gT24gYXV0b2ZpbGwgd2UgZ2V0IGEgc3RyaW5naWZpZWQgdmFsdWUuXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KFwiLFwiKSA6IHZhbHVlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBzZXRJdGVtcyhcclxuICAgICAgICAgICAgLy8gT24gYXV0b2ZpbGwgd2UgZ2V0IGEgc3RyaW5naWZpZWQgdmFsdWUuXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KFwiLFwiKSA6IHZhbHVlXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgc3g9e3sgd2lkdGg6IFwiMTAwJVwiIH19PlxyXG4gICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsSWQ9XCJkZW1vLW11bHRpcGxlLWNoaXAtbGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgIGlkPVwiZGVtby1tdWx0aXBsZS1jaGlwXCJcclxuICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjaG9zZW5JdGVtfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ9ezxPdXRsaW5lZElucHV0IGlkPVwic2VsZWN0LW11bHRpcGxlLWNoaXBcIiAvPn1cclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJWYWx1ZT17KHNlbGVjdGVkKSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGZsZXhXcmFwOiBcIndyYXBcIiwgZ2FwOiAwLjUgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2VsZWN0ZWQubWFwKCh2YWx1ZSkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGlwIGtleT17dmFsdWV9IGxhYmVsPXt2YWx1ZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIE1lbnVQcm9wcz17TWVudVByb3BzfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHtpdGVtcy5tYXAoKGl0ZW0pID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPE1lbnVJdGVtIGtleT17aXRlbX0gdmFsdWU9e2l0ZW19IHN0eWxlPXtnZXRTdHlsZXMoaXRlbSwgY2hvc2VuSXRlbSwgdGhlbWUpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpdGVtfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L01lbnVJdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTXVsdGlwbGVEcm9wZG93bjtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi9TZWFyY2hGb3JtLnNjc3NcIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uLmpzXCI7XHJcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcclxuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtLmpzXCI7XHJcbmltcG9ydCBJbnB1dEZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL0lucHV0RmllbGQvSW5wdXRGaWVsZC5qc1wiO1xyXG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0XCI7XHJcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbC5qc1wiO1xyXG5pbXBvcnQgVG9nZ2xlRmllbGQgZnJvbSBcIi4uLy4uL2NvcmUvVG9nZ2xlRmllbGQvVG9nZ2xlRmllbGQuanNcIjtcclxuaW1wb3J0IFRvZ2dsZSBmcm9tIFwiLi4vLi4vY29yZS9Ub2dnbGUvVG9nZ2xlLmpzXCI7XHJcbmltcG9ydCBEcm9wZG93biBmcm9tIFwiLi4vLi4vY29yZS9Ecm9wZG93bi9Ecm9wZG93bi5qc1wiO1xyXG5pbXBvcnQgTWVldGluZ0Zvcm1hdHMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvTWVldGluZ0Zvcm1hdHNcIjtcclxuaW1wb3J0IFRpbWVSYW5nZSBmcm9tIFwiLi4vLi4vY29yZS9SYW5nZS9UaW1lUmFuZ2VcIjtcclxuaW1wb3J0IE11bHRpcGxlRHJvcGRvd24gZnJvbSBcIi4uLy4uL2NvcmUvRHJvcGRvd24vTXVsdGlwbGVEcm9wZG93blwiO1xyXG5pbXBvcnQgeyBEYXlzLCBNZWV0aW5nRnJlcXVlbmNpZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9UaW1lXCI7XHJcblxyXG4vKipcclxuICogUmVuZGVycyBhIHNlYXJjaCBmb3JtIGZvciBzZWFyY2hpbmcgc3R1ZHkgZ3JvdXBzXHJcbiAqIEBhdXRob3IgU3RhY2V5IFBvcGVuZm9vc2UgYW5kIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgMS8yNy8yMDIyXHJcbiAqL1xyXG5jb25zdCBTZWFyY2hGb3JtID0gKHtcclxuICAgIHNlYXJjaFRlcm0sXHJcbiAgICBzdWJqZWN0LFxyXG4gICAgaXNBc3NvY2lhdGVkV2l0aFNjaG9vbCxcclxuICAgIG1lZXRpbmdGb3JtYXQsXHJcbiAgICB0eXBlLFxyXG4gICAgdGltZVJhbmdlLFxyXG4gICAgZGF5cyxcclxuICAgIG1lZXRpbmdGcmVxdWVuY2llcyxcclxuICAgIHVwZGF0ZVNlYXJjaFRlcm0sXHJcbiAgICB1cGRhdGVTdWJqZWN0LFxyXG4gICAgdXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbCxcclxuICAgIHVwZGF0ZU1lZXRpbmdGb3JtYXQsXHJcbiAgICB1cGRhdGVUeXBlLFxyXG4gICAgdXBkYXRlVGltZVJhbmdlLFxyXG4gICAgdXBkYXRlRGF5cyxcclxuICAgIHVwZGF0ZU1lZXRpbmdGcmVxdWVuY2llcyxcclxuICAgIHN1Ym1pdFNlYXJjaFxyXG59KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtzdWJtaXRTZWFyY2h9IGNsYXNzTmFtZT1cInNlYXJjaC1mb3JtXCI+XHJcbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+U2VhcmNoIFRlcm08L0xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3NlYXJjaFRlcm19IG9uQ2hhbmdlPXt1cGRhdGVTZWFyY2hUZXJtfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPkNhdGVnb3J5PC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd24gb3B0aW9ucz17W1wiVGhpc1wiLCBcIlRoYXRcIl19IHZhbHVlPXtzdWJqZWN0fSBvbkNoYW5nZT17dXBkYXRlU3ViamVjdH0gLz5cclxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5NZWV0aW5nIEZyZXF1ZW5jeTwvTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPE11bHRpcGxlRHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM9e1suLi5PYmplY3QudmFsdWVzKE1lZXRpbmdGcmVxdWVuY2llcyldfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtcz17dXBkYXRlTWVldGluZ0ZyZXF1ZW5jaWVzfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TWVldGluZyBEYXlzPC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8TXVsdGlwbGVEcm9wZG93biBpdGVtcz17Wy4uLk9iamVjdC52YWx1ZXMoRGF5cyldfSBzZXRJdGVtcz17dXBkYXRlRGF5c30gLz5cclxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5NZWV0aW5nIFRpbWUgUmFuZ2U8L0xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoND5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3RpbWVSYW5nZVswXX0gdG8ge3RpbWVSYW5nZVsxXX1cclxuICAgICAgICAgICAgICAgICAgICA8L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxUaW1lUmFuZ2UgdXBkYXRlVGltZVJhbmdlPXt1cGRhdGVUaW1lUmFuZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TWVldGluZyBGb3JtYXQ8L0xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e1suLi5PYmplY3QudmFsdWVzKE1lZXRpbmdGb3JtYXRzKV19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlTWVldGluZ0Zvcm1hdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXttZWV0aW5nRm9ybWF0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPlR5cGU8L0xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd24gb3B0aW9ucz17W1wiR3JvdXBcIiwgXCJUdXRvclwiLCBcIk1peGVkXCJdfSBvbkNoYW5nZT17dXBkYXRlVHlwZX0gdmFsdWU9e3R5cGV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8VG9nZ2xlRmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPlNob3cgT25seSBHcm91cHMgQXNzb2NpYXRlZCB3aXRoIFlvdXIgU2Nob29sPC9MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8VG9nZ2xlIHZhbHVlPXtpc0Fzc29jaWF0ZWRXaXRoU2Nob29sfSBvbkNoYW5nZT17dXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbH0gdHlwZT1cImNoZWNrYm94XCIgLz5cclxuICAgICAgICAgICAgICAgIDwvVG9nZ2xlRmllbGQ+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9PlNlYXJjaDwvQnV0dG9uPlxyXG4gICAgICAgICAgICA8L0Zvcm0+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoRm9ybTtcclxuIiwiaW1wb3J0IFwiLi9TZWFyY2hWaWV3LnNjc3NcIjtcclxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgU2VhcmNoRm9ybSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm1cIjtcclxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xyXG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlc1wiO1xyXG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IHBvcHVsYXRlU3R1ZHlHcm91cFNlYXJjaCwgc2hvd0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcclxuaW1wb3J0IE1lZXRpbmdGb3JtYXRzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL01lZXRpbmdGb3JtYXRzXCI7XHJcblxyXG4vKipcclxuICogQSB2aWV3IGZvciBpbnB1dHRpbmcgc2VhcmNoIHRlcm1zIGFuZCBmaWx0ZXJzIGZvciBzZWFyY2hpbmcgc3R1ZHkgZ3JvdXBzXHJcbiAqIFRoZSByZXN1bHRzIG9mIHRoaXMgc2VhcmNoIHdpbGwgYmUgZGlzcGxheWVkIG9uIHRoZSBTZWFyY2hSZXN1bHRzLmpzIFZpZXdcclxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqL1xyXG5jb25zdCBTZWFyY2hWaWV3ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW3NlYXJjaFRlcm0sIHNldFNlYXJjaFRlcm1dID0gdXNlU3RhdGUoXCJcIik7XHJcbiAgICBjb25zdCBbc3ViamVjdCwgc2V0U3ViamVjdF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IFtpc0Fzc29jaWF0ZWRXaXRoU2Nob29sLCBzZXRJc0Fzc29jaWF0ZWRXaXRoU2Nob29sXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFttZWV0aW5nRm9ybWF0LCBzZXRNZWV0aW5nRm9ybWF0XSA9IHVzZVN0YXRlKE1lZXRpbmdGb3JtYXRzLkluUGVyc29uKTtcclxuICAgIGNvbnN0IFt0eXBlLCBzZXRUeXBlXSA9IHVzZVN0YXRlKFwiR3JvdXBcIik7XHJcbiAgICBjb25zdCBbdGltZVJhbmdlLCBzZXRUaW1lUmFuZ2VdID0gdXNlU3RhdGUoW1wiMTI6MDBBTVwiLCBcIjEyOjAwUE1cIl0pO1xyXG4gICAgY29uc3QgW2RheXMsIHNldERheXNdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW21lZXRpbmdGcmVxdWVuY2llcywgc2V0TWVldGluZ0ZyZXF1ZW5jaWVzXSA9IHVzZVN0YXRlKFtdKTtcclxuXHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZXMgc3R1ZHkgZ3JvdXBzIGZyb20gc2VhcmNoIHF1ZXJ5IGJ5IHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgMDEvMjkvMjJcclxuICAgICAqL1xyXG4gICAgY29uc3Qgc3VibWl0U2VhcmNoID0gYXN5bmMgKGUpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyh7XHJcbiAgICAgICAgICAgIHNlYXJjaFRlcm0sXHJcbiAgICAgICAgICAgIHN1YmplY3QsXHJcbiAgICAgICAgICAgIHNjaG9vbDogaXNBc3NvY2lhdGVkV2l0aFNjaG9vbCA/IFwiTGliZXJ0eSBVbml2ZXJzaXR5XCIgOiBudWxsLFxyXG4gICAgICAgICAgICBtZWV0aW5nRm9ybWF0LFxyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBzdGFydFRpbWU6IHRpbWVSYW5nZVswXSxcclxuICAgICAgICAgICAgZW5kVGltZTogdGltZVJhbmdlWzFdLFxyXG4gICAgICAgICAgICBkYXlzLFxyXG4gICAgICAgICAgICBtZWV0aW5nRnJlcXVlbmNpZXNcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBTVUJNSVQgVEhFIFNFQVJDSCBSRVFVRVNULlxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGxldCByZXNwb25zZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvL1NlbmQgU2VhcmNoIFJlcXVlc3QgLSAgVE9ETzogY2hhbmdlIHRoZSB2YWx1ZSB0aGF0IGlzIHNlbnQgaWYgaXNBc3NvY2lhdGVkV2l0aFNjaG9vbCBpcyB0cnVlIHRvIHRoZSBzY2hvb2wgb2YgdGhlIGxvZ2dlZCBpbiB1c2VyXHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChSb3V0ZXMuU2VhcmNoLkdldFNlYXJjaFJlc3VsdHMsIHtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFRlcm0sXHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0LFxyXG4gICAgICAgICAgICAgICAgc2Nob29sOiBpc0Fzc29jaWF0ZWRXaXRoU2Nob29sID8gXCJMaWJlcnR5IFVuaXZlcnNpdHlcIiA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBtZWV0aW5nRm9ybWF0LFxyXG4gICAgICAgICAgICAgICAgbWVldGluZ0ZyZXF1ZW5jaWVzLFxyXG4gICAgICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogdGltZVJhbmdlWzBdLFxyXG4gICAgICAgICAgICAgICAgZW5kVGltZTogdGltZVJhbmdlWzFdLFxyXG4gICAgICAgICAgICAgICAgZGF5c1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIkNhbm5vdCBzZWFyY2guLi4gU29ycnlcIikpO1xyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSXNEZWZpbmVkID0gVmFsaWRhdG9yLmlzRGVmaW5lZChyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2VJc0RlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R1ZHlHcm91cHNSZXRyaXZhbFdhc1ZhbGlkID1cclxuICAgICAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU3VjY2Vzc1N0dWR5R3JvdXBzUmV0cmlldmVkID09PSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0dWR5R3JvdXBzUmV0cml2YWxXYXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHBvcHVsYXRlU3R1ZHlHcm91cFNlYXJjaChyZXNwb25zZS5kYXRhLnN0dWR5R3JvdXBzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YS5zdHVkeUdyb3Vwcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIkNhbm5vdCBzZWFyY2guLi4gU29ycnlcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiQ2Fubm90IHNlYXJjaC4uLiBTb3JyeVwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIHNlYXJjaCB0ZXJtIGZpZWxkIGluIHRoZSBzZWFyY2ggZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAwMS8yNi8yMlxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVTZWFyY2hUZXJtID0gKGUpID0+IHtcclxuICAgICAgICBzZXRTZWFyY2hUZXJtKGUudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgc3ViamVjdCBkcm9wZG93biBmaWVsZCBpbiB0aGUgc2VhcmNoIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxyXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAgICAgKiBAZGF0ZSAgMDEvMjYvMjJcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlU3ViamVjdCA9IChlKSA9PiB7XHJcbiAgICAgICAgc2V0U3ViamVjdChlLnRhcmdldC52YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIFwic2hvdyBvbmx5IGdyb3VwcyBhc3NvY2lhdGVkIHdpdGggc2Nob29sXCIgY2hlY2tib3ggaW4gdGhlIHNlYXJjaCBmb3JtLlxyXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgIDAxLzI2LzIyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZUlzQXNzb2NpYXRlZFdpdGhTY2hvb2wgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldElzQXNzb2NpYXRlZFdpdGhTY2hvb2woZS50YXJnZXQuY2hlY2tlZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNob3NlbiBtZWV0aW5nIGZvcm1hdCBmcm9tIHRoZSBkcm9wZG93biBtZW51IGluIHRoZSBzZWFyY2ggZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAwMS8yNi8yMlxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVNZWV0aW5nRm9ybWF0ID0gKGUpID0+IHtcclxuICAgICAgICBzZXRNZWV0aW5nRm9ybWF0KGUudGFyZ2V0Lm9wdGlvbnNbZS50YXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBjaG9zZW4gdHlwZSBmcm9tIHRoZSBkcm9wZG93biBtZW51IGluIHRoZSBzZWFyY2ggZm9ybS5cclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAwMS8yNi8yMlxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVUeXBlID0gKGUpID0+IHtcclxuICAgICAgICBzZXRUeXBlKGUudGFyZ2V0Lm9wdGlvbnNbZS50YXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBjaG9zZW4gdGltZSByYW5nZSBpbiB0aGUgc2VhcmNoIGZvcm0uXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZSBUaGUgW3N0YXJ0VGltZSwgZW5kVGltZV1cclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gICAgICogQGRhdGUgIDAxLzI5LzIyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHVwZGF0ZVRpbWVSYW5nZSA9ICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIHNldFRpbWVSYW5nZSh2YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNob3NlbiB0aW1lIHJhbmdlIGluIHRoZSBzZWFyY2ggZm9ybS5cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlIEFuIGFycmF5IG9mIGNob3NlbiBkYXlzXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAwMS8yOS8yMlxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVEYXlzID0gKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgc2V0RGF5cyh2YWx1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNob3NlbiB0aW1lIHJhbmdlIGluIHRoZSBzZWFyY2ggZm9ybS5cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlIEFuIGFycmF5IG9mIGNob3NlbiBtZWV0aW5nIGZyZXF1ZW5jaWVzXHJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICAgICAqIEBkYXRlICAwMS8yOS8yMlxyXG4gICAgICovXHJcbiAgICBjb25zdCB1cGRhdGVNZWV0aW5nRnJlcXVlbmNpZXMgPSAodmFsdWUpID0+IHtcclxuICAgICAgICBzZXRNZWV0aW5nRnJlcXVlbmNpZXModmFsdWUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2gtdmlld1wiPlxyXG4gICAgICAgICAgICA8U2VhcmNoRm9ybVxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cclxuICAgICAgICAgICAgICAgIHN1YmplY3Q9e3N1YmplY3R9XHJcbiAgICAgICAgICAgICAgICBpc0Fzc29jaWF0ZWRXaXRoU2Nob29sPXtpc0Fzc29jaWF0ZWRXaXRoU2Nob29sfVxyXG4gICAgICAgICAgICAgICAgbWVldGluZ0Zvcm1hdD17bWVldGluZ0Zvcm1hdH1cclxuICAgICAgICAgICAgICAgIHR5cGU9e3R5cGV9XHJcbiAgICAgICAgICAgICAgICB0aW1lUmFuZ2U9e3RpbWVSYW5nZX1cclxuICAgICAgICAgICAgICAgIGRheXM9e2RheXN9XHJcbiAgICAgICAgICAgICAgICBtZWV0aW5nRnJlcXVlbmNpZXM9e21lZXRpbmdGcmVxdWVuY2llc31cclxuICAgICAgICAgICAgICAgIHVwZGF0ZVNlYXJjaFRlcm09e3VwZGF0ZVNlYXJjaFRlcm19XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTdWJqZWN0PXt1cGRhdGVTdWJqZWN0fVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbD17dXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZU1lZXRpbmdGb3JtYXQ9e3VwZGF0ZU1lZXRpbmdGb3JtYXR9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVUeXBlPXt1cGRhdGVUeXBlfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlVGltZVJhbmdlPXt1cGRhdGVUaW1lUmFuZ2V9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVEYXlzPXt1cGRhdGVEYXlzfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlTWVldGluZ0ZyZXF1ZW5jaWVzPXt1cGRhdGVNZWV0aW5nRnJlcXVlbmNpZXN9XHJcbiAgICAgICAgICAgICAgICBzdWJtaXRTZWFyY2g9e3N1Ym1pdFNlYXJjaH1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hWaWV3O1xyXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaFJlc3VsdHMuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaFJlc3VsdHMuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoTGlzdGluZy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoTGlzdGluZy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL1NlYXJjaExpc3Rpbmcuc2Nzc1wiO1xyXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBzaG93Sm9pblN0dWR5R3JvdXBQb3B1cCB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XHJcbi8qKlxyXG4gKiBBIHZpZXcgZm9yIGRpc3BsYXlpbmcgYSBzaW5nbGUgc3R1ZHkgZ3JvdXAgbGlzdGluZyByZXN1bHRpbmcgZnJvbSBhIHNlYXJjaCBxdWVyeVxyXG4gKiBAYXV0aG9yID8/P1xyXG4gKi9cclxuY29uc3QgU2VhcmNoTGlzdGluZyA9ICh7IGdyb3VwIH0pID0+IHtcclxuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZ3JvdXApO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJsaXN0aW5nLWNvbnRhaW5lclwiXHJcbiAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBib3JkZXI6IGAke2dyb3VwLmdyb3VwQ29sb3J9IDVweCBzb2xpZGBcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2hvd0pvaW5TdHVkeUdyb3VwUG9wdXAoZ3JvdXApKX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRpdGxlLXBob3RvLWNvbnRhaW5lclwiXHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZ3JvdXAuZ3JvdXBDb2xvclxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImdyb3VwLXRpdGxlXCI+e2dyb3VwLm5hbWV9PC9oMT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtaW5mby1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtaW5mby1pdGVtXCIgaWQ9XCJvd25lci1pbmZvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge2dyb3VwLmlzVHV0b3IgPyAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5UdXRvcjo8L3N0cm9uZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5Pd25lcjo8L3N0cm9uZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPntncm91cC5vd25lci5uYW1lfTwvaDI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtaW5mby1pdGVtXCIgaWQ9XCJzY2hvb2wtaW5mb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwPlNjaG9vbDo8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPntncm91cC5zY2hvb2wgPyBncm91cC5zY2hvb2wgOiBcIk5vbmVcIn08L2gyPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLWluZm8taXRlbVwiIGlkPVwic3ViamVjdC1pbmZvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+U3ViamVjdDo8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPntncm91cC5zdWJqZWN0fTwvaDI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtaW5mby1pdGVtXCIgaWQ9XCJjb3Vyc2VDb2RlLWluZm9cIj5cclxuICAgICAgICAgICAgICAgICAgICA8cD5Db3Vyc2UgQ29kZTo8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPntncm91cC5jb3Vyc2UgPyBncm91cC5jb3Vyc2UgOiBcIk5vbmVcIn08L2gyPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLWluZm8taXRlbVwiIGlkPVwic2NoZWR1bGUtaW5mb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIHtncm91cC5pc09ubGluZSA/IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZWV0cyA8c3Ryb25nPk9ubGluZTwvc3Ryb25nPiBFdmVyeTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVldHMgPHN0cm9uZz5Jbi1QZXJzb248L3N0cm9uZz4gRXZlcnk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDxoMj57Z3JvdXAuc2NoZWR1bGV9PC9oMj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hMaXN0aW5nO1xyXG4iLCJpbXBvcnQgXCIuL1NlYXJjaFJlc3VsdHMuc2Nzc1wiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBTZWFyY2hMaXN0aW5nIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1NlYXJjaExpc3RpbmcvU2VhcmNoTGlzdGluZ1wiO1xyXG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5cclxuLyoqXHJcbiAqIEEgdmlldyBmb3IgZGlzcGxheWluZyByZXN1bHRpbmcgc3R1ZHkgZ3JvdXBzIGZyb20gYSBzZWFyY2ggcXVlcnlcclxuICogQGF1dGhvciA/Pz9cclxuICovXHJcbmNvbnN0IFNlYXJjaFJlc3VsdFZpZXcgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBzZWFyY2ggPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnN0dWR5R3JvdXBzUmVkdWNlci5zZWFyY2gpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaC1yZXN1bHRzXCI+XHJcbiAgICAgICAgICAgIHsvKiBSZW5kZXIgZ3JvdXBzIGZyb20gc2VhcmNoIHVzaW5nIHNlYXJjaCBsaXN0aW5nIGZvdW5kIHdpdGhpbiBzdGF0ZSAqL31cclxuICAgICAgICAgICAge3NlYXJjaC5tYXAoKGdyb3VwKSA9PiAoXHJcbiAgICAgICAgICAgICAgICA8U2VhcmNoTGlzdGluZyBncm91cD17Z3JvdXB9IGtleT17Z3JvdXAuX2lkfSAvPlxyXG4gICAgICAgICAgICApKX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hSZXN1bHRWaWV3O1xyXG4iLCJpbXBvcnQgXCIuL1NlYXJjaC5zY3NzXCI7XHJcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBUb3BCYXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvVG9wQmFyL1RvcEJhclwiO1xyXG5pbXBvcnQgU2VhcmNoVmlldyBmcm9tIFwiLi4vLi4vVmlld3MvU2VhcmNoL1NlYXJjaFZpZXdcIjtcclxuaW1wb3J0IFNlYXJjaFJlc3VsdHNWaWV3IGZyb20gXCIuLi8uLi9WaWV3cy9TZWFyY2gvU2VhcmNoUmVzdWx0Vmlld1wiO1xyXG5pbXBvcnQgUGFnZSBmcm9tIFwiLi4vUGFnZVwiO1xyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgdGhlIFNlYXJjaCBwYWdlXHJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDEvMjQvMjAyMlxyXG4gKi9cclxuY29uc3QgU2VhcmNoID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8VG9wQmFyIGN1cnJlbnRQYWdlPVwic2VhcmNoXCIgLz5cclxuICAgICAgICAgICAgPFBhZ2U+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaC1wYWdlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlLXRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5TZWFyY2g8L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VhcmNoLWFyZWFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFZpZXcgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFJlc3VsdHNWaWV3IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9QYWdlPlxyXG4gICAgICAgIDwvPlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlYXJjaDtcclxuIiwiaW1wb3J0IFwiLi9BcHAuc2Nzc1wiO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qc1wiO1xyXG5pbXBvcnQgeyBSb3V0ZSwgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFN3aXRjaCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7IFJlZGlyZWN0IH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xyXG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgc2lnbkluLCBzaWduT3V0IH0gZnJvbSBcIi4vc3RhdGUvYWN0aW9uc1wiO1xyXG5pbXBvcnQgUG9wdXAgZnJvbSBcIi4vVmlld3MvUG9wdXAvUG9wdXBcIjtcclxuaW1wb3J0IE5vdGlmaWNhdGlvbiBmcm9tIFwiLi9WaWV3cy9Ob3RpZmljYXRpb25zL05vdGlmaWNhdGlvblwiO1xyXG5cclxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlcy5qc1wiO1xyXG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlcy5qc1wiO1xyXG5cclxuLy8gUEFHRVMuXHJcbmltcG9ydCBIb21lIGZyb20gXCIuL1BhZ2VzL0hvbWUvSG9tZS5qc1wiO1xyXG5pbXBvcnQgU3R1ZHkgZnJvbSBcIi4vUGFnZXMvU3R1ZHkvU3R1ZHkuanNcIjtcclxuaW1wb3J0IFZpZXdzIGZyb20gXCIuL1ZpZXdzL1ZpZXdzXCI7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSBcIi4vUGFnZXMvU2VhcmNoL1NlYXJjaFwiO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgaXMgdGhlIHJvb3QgcHJlc2VudGF0aW9uYWwgY29tcG9uZW50IHRoYXQgcHJvY2Vzc2VzIHVzZXIgYXV0aGVudGljYXRpb25cclxuICogYW5kIG1hbmFnZXMgdGhlIGRpc3BsYXkgb2YgdGhlIGFwcGxpY2F0aW9uXCJzIHBhZ2VzLlxyXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlciBhbmQgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDEwLzIwLzIwMjFcclxuICovXHJcbmNvbnN0IEFwcCA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgaXNMb2dnZWRJbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIuaXNMb2dnZWRJbik7XHJcbiAgICBjb25zdCBbaGFzTm90TW91bnRlZCwgc2V0SGFzTm90TW91bnRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcbiAgICBjb25zdCBwb3B1cElzU2hvd2luZyA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUucG9wdXBSZWR1Y2VyLmlzU2hvd2luZyk7XHJcbiAgICBjb25zdCBub3RpZmljYXRpb25Jc1Nob3dpbmcgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLm5vdGlmaWNhdGlvblJlZHVjZXIuaXNTaG93aW5nKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiB0aGUgcGFnZSBoYXMgZmluaXNoZWQgbG9hZGVkIGFuZCByZWZyZXNoZXMgdGhlIGF1dGhlbnRpY2F0aW9uIHRva2VuXHJcbiAgICAgKiBpZiB0aGUgdXNlciBpcyBhbHJlYWR5IGxvZ2dlZCBpbi4gVXNpbmcgYW4gZW1wdHkgZGVwZW5kZW5jeSBhcnJheSBlbnN1cmVzXHJcbiAgICAgKiB0aGF0IHRoaXMgb25seSBydW5zIG9uIHVubW91bnQuXHJcbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxyXG4gICAgICogQGRhdGUgICAxMC8yMC8yMDIxXHJcbiAgICAgKi9cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgc2V0SGFzTm90TW91bnRlZCh0cnVlKTtcclxuICAgICAgICAgICAgdXBkYXRlQXV0aGVudGljYXRpb25Ub2tlbigpO1xyXG4gICAgICAgIH07XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSB1c2VyXCJzIGF1dGhlbnRpY2F0aW9uIHRva2VuIGZvciBwZXJzaXN0ZW50IGxvZ2lucy5cclxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXHJcbiAgICAgKiBAZGF0ZSAgIDEwLzIyLzIwMjFcclxuICAgICAqL1xyXG4gICAgY29uc3QgdXBkYXRlQXV0aGVudGljYXRpb25Ub2tlbiA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBpZiAoaXNMb2dnZWRJbikge1xyXG4gICAgICAgICAgICBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRva2VuXCIpO1xyXG4gICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChSb3V0ZXMuQWNjb3VudC5VcGRhdGVBdXRoZW50aWNhdGlvblRva2VuKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhlbnRpY2F0aW9uVG9rZW5XYXNVcGRhdGVkID1cclxuICAgICAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLkFjY291bnQuU3VjY2Vzc1VwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4gPT09IHJlc3BvbnNlLmRhdGEubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGlmIChhdXRoZW50aWNhdGlvblRva2VuV2FzVXBkYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgYXV0aGVudGljYXRpb25Ub2tlbiwgYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlLCB1c2VyIH0gPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNpZ25Jbih7IGF1dGhlbnRpY2F0aW9uVG9rZW4sIGF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZSwgdXNlciB9KSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNpZ25PdXQoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZXRIYXNOb3RNb3VudGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdmVyaWZ5VXNlciA9ICh2ZXJpZmljYXRpb25Ub2tlbikgPT4ge307XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Um91dGVyPlxyXG4gICAgICAgICAgICA8UG9wdXAgaXNTaG93aW5nPXtwb3B1cElzU2hvd2luZ30gLz5cclxuICAgICAgICAgICAgPE5vdGlmaWNhdGlvbiBpc1Nob3dpbmc9e25vdGlmaWNhdGlvbklzU2hvd2luZ30gLz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxTd2l0Y2g+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtpc0xvZ2dlZEluID8gPFJlZGlyZWN0IHRvPVwiL3N0dWR5XCIgLz4gOiA8SG9tZSAvPn1cclxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aD1cIi92ZXJpZnkvOnZlcmlmaWNhdGlvblRva2VuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXsocHJvcHMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRTZXR1cFZpZXcgPSBWaWV3cy5Ib21lLkFjY291bnRTZXR1cDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0xvZ2dlZEluID8gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWRpcmVjdCB0bz1cIi9zdHVkeVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxIb21lIHsuLi5wcm9wc30gaG9tZVZpZXc9e2FjY291bnRTZXR1cFZpZXd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvc3R1ZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0dWR5IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9zZWFyY2hcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaCAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm91dGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvbWVzc2FnZVwiIHJlbmRlcj17KHByb3BzKSA9PiB7fX0gLz5cclxuICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L1JvdXRlcj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcHA7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyJztcblxuLyoqXG4gKiBBZGFwdGVkIGZyb20gUmVhY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9wYWNrYWdlcy9zaGFyZWQvZm9ybWF0UHJvZEVycm9yTWVzc2FnZS5qc1xuICpcbiAqIERvIG5vdCByZXF1aXJlIHRoaXMgbW9kdWxlIGRpcmVjdGx5ISBVc2Ugbm9ybWFsIHRocm93IGVycm9yIGNhbGxzLiBUaGVzZSBtZXNzYWdlcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggZXJyb3IgY29kZXNcbiAqIGR1cmluZyBidWlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gXCJNaW5pZmllZCBSZWR1eCBlcnJvciAjXCIgKyBjb2RlICsgXCI7IHZpc2l0IGh0dHBzOi8vcmVkdXguanMub3JnL0Vycm9ycz9jb2RlPVwiICsgY29kZSArIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIFwiICsgJ3VzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuICc7XG59XG5cbi8vIElubGluZWQgdmVyc2lvbiBvZiB0aGUgYHN5bWJvbC1vYnNlcnZhYmxlYCBwb2x5ZmlsbFxudmFyICQkb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnO1xufSkoKTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8vIElubGluZWQgLyBzaG9ydGVuZWQgdmVyc2lvbiBvZiBga2luZE9mYCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2tpbmQtb2ZcbmZ1bmN0aW9uIG1pbmlLaW5kT2YodmFsKSB7XG4gIGlmICh2YWwgPT09IHZvaWQgMCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHJldHVybiAnYXJyYXknO1xuICBpZiAoaXNEYXRlKHZhbCkpIHJldHVybiAnZGF0ZSc7XG4gIGlmIChpc0Vycm9yKHZhbCkpIHJldHVybiAnZXJyb3InO1xuICB2YXIgY29uc3RydWN0b3JOYW1lID0gY3Rvck5hbWUodmFsKTtcblxuICBzd2l0Y2ggKGNvbnN0cnVjdG9yTmFtZSkge1xuICAgIGNhc2UgJ1N5bWJvbCc6XG4gICAgY2FzZSAnUHJvbWlzZSc6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgY2FzZSAnTWFwJzpcbiAgICBjYXNlICdTZXQnOlxuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yTmFtZTtcbiAgfSAvLyBvdGhlclxuXG5cbiAgcmV0dXJuIHR5cGUuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICcnKTtcbn1cblxuZnVuY3Rpb24gY3Rvck5hbWUodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nID8gdmFsLmNvbnN0cnVjdG9yLm5hbWUgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yKHZhbCkge1xuICByZXR1cm4gdmFsIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIHZhbC5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiB2YWwuY29uc3RydWN0b3IgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5zdGFja1RyYWNlTGltaXQgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHR5cGVvZiB2YWwudG9EYXRlU3RyaW5nID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuZ2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLnNldERhdGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGtpbmRPZih2YWwpIHtcbiAgdmFyIHR5cGVPZlZhbCA9IHR5cGVvZiB2YWw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0eXBlT2ZWYWwgPSBtaW5pS2luZE9mKHZhbCk7XG4gIH1cblxuICByZXR1cm4gdHlwZU9mVmFsO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsga2luZE9mKGlucHV0U3RhdGUpICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTIpIDogXCJUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTMpIDogXCJUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgJ1wiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiJyBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNCkgOiBcIldoZW4gY2FsbGVkIHdpdGggYW4gYWN0aW9uIG9mIHR5cGUgXCIgKyAoYWN0aW9uVHlwZSA/IFwiXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgOiAnKHVua25vd24gdHlwZSknKSArIFwiLCB0aGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIF9rZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYpIDogXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGJ1dCBpbnN0ZWFkIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YoYWN0aW9uQ3JlYXRvcnMpICsgXCInLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1KSA6ICdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdG9yZSksIHt9LCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsIi8qKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIHBvdGVudGlhbCBcImV4dHJhIGFyZ3VtZW50XCIgdmFsdWUgdG8gYmUgaW5qZWN0ZWQgbGF0ZXIsXHJcbiAqIGFuZCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSB0aHVuayBtaWRkbGV3YXJlIHRoYXQgdXNlcyB0aGF0IHZhbHVlXHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgLy8gU3RhbmRhcmQgUmVkdXggbWlkZGxld2FyZSBkZWZpbml0aW9uIHBhdHRlcm46XG4gIC8vIFNlZTogaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjd3JpdGluZy1jdXN0b20tbWlkZGxld2FyZVxuICB2YXIgbWlkZGxld2FyZSA9IGZ1bmN0aW9uIG1pZGRsZXdhcmUoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIC8vIFRoZSB0aHVuayBtaWRkbGV3YXJlIGxvb2tzIGZvciBhbnkgZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgdG8gYHN0b3JlLmRpc3BhdGNoYC5cbiAgICAgICAgLy8gSWYgdGhpcyBcImFjdGlvblwiIGlzIHJlYWxseSBhIGZ1bmN0aW9uLCBjYWxsIGl0IGFuZCByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBJbmplY3QgdGhlIHN0b3JlJ3MgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBtZXRob2RzLCBhcyB3ZWxsIGFzIGFueSBcImV4dHJhIGFyZ1wiXG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcGFzcyB0aGUgYWN0aW9uIGRvd24gdGhlIG1pZGRsZXdhcmUgY2hhaW4gYXMgdXN1YWxcblxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIG1pZGRsZXdhcmU7XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpOyAvLyBBdHRhY2ggdGhlIGZhY3RvcnkgZnVuY3Rpb24gc28gdXNlcnMgY2FuIGNyZWF0ZSBhIGN1c3RvbWl6ZWQgdmVyc2lvblxuLy8gd2l0aCB3aGF0ZXZlciBcImV4dHJhIGFyZ1wiIHRoZXkgd2FudCB0byBpbmplY3QgaW50byB0aGVpciB0aHVua3NcblxudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgeyBhdXRoQ29uc3RhbnRzIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9jb25zdGFudHNcIjtcclxuXHJcbi8vIExvYWQgdGhlIHVzZXIgaW50byB0aGUgc3RhdGUgaWYgaXQgaXMgYWxyZWFkeSBsb2dnZWQgaW5cclxubGV0IHVzZXIgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlclwiKSk7XHJcbmNvbnN0IGN1cnJlbnREYXRlID0gRGF0ZS5ub3coKTtcclxuY29uc3Qgand0RXhwaXJhdGlvbkRhdGUgPSBuZXcgRGF0ZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZVwiKSk7XHJcbmNvbnN0IHVzZXJJc0xvZ2dlZEluID0gY3VycmVudERhdGUgPCBqd3RFeHBpcmF0aW9uRGF0ZTtcclxuY29uc3QgaW5pdGlhbFN0YXRlID0gdXNlciA/IHsgaXNMb2dnZWRJbjogdXNlcklzTG9nZ2VkSW4sIHVzZXIgfSA6IHsgaXNMb2dnZWRJbjogZmFsc2UgfTtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIHRoZSByZWR1Y2VyIGZvciBhbGwgYWN0aW9ucyByZWxhdGluZyB0byBhdXRoZW50aWNhdGlvblxyXG5cclxuICogQHBhcmFtICB7b2JqZWN0fSBzdGF0ZSBUaGUgaW5pdGFsIHN0YXRlIG9mIHRoZSByZWR1Y2VyXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gYWN0aW9uIFRoZSBhY3Rpb24gZnJvbSBwb3B1cENvbnN0YW50cyB0aGF0IHRyYW5zZm9ybXMgdGhlIHN0YXRlIGludG8gdGhlIG5leHQgc3RhdGVcclxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqIEBkYXRlICAgMTEvMDkvMjAyMVxyXG4gKi9cclxuY29uc3QgYXV0aFJlZHVjZXIgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgICAgIC8vU2lnbiB0aGUgdXNlciBpbiBhbmQgc2F2ZSB0aGUgdXNlciB0byBsb2NhbCBzdG9yYWdlXHJcbiAgICAgICAgY2FzZSBhdXRoQ29uc3RhbnRzLlNJR05fSU46XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidG9rZW5cIiwgYWN0aW9uLnBheWxvYWQuYXV0aGVudGljYXRpb25Ub2tlbik7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlXCIsIGFjdGlvbi5wYXlsb2FkLmF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZSk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidXNlclwiLCBKU09OLnN0cmluZ2lmeShhY3Rpb24ucGF5bG9hZC51c2VyKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VyOiBhY3Rpb24ucGF5bG9hZC51c2VyLCBpc0xvZ2dlZEluOiB0cnVlIH07XHJcblxyXG4gICAgICAgIGNhc2UgYXV0aENvbnN0YW50cy5TSUdOX09VVDpcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VyOiB7fSwgaXNMb2dnZWRJbjogZmFsc2UgfTtcclxuXHJcbiAgICAgICAgY2FzZSBhdXRoQ29uc3RhbnRzLkNSRUFURV9BQ0NPVU5UOlxyXG4gICAgICAgICAgICAvLyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVudmVyaWZpZWRVc2VyXCIsIEpTT04uc3RyaW5naWZ5KGFjdGlvbi5wYXlsb2FkLnVudmVyaWZpZWRVc2VyKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1bnZlcmlmaWVkVXNlcjogYWN0aW9uLnBheWxvYWQudW52ZXJpZmllZFVzZXIgfTtcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXV0aFJlZHVjZXI7XHJcbiIsIi8qKlxyXG4gKiBUaGUgdmFyaW91cyBwb3NzaWJsZSBwb3B1cCB0aGF0IGVhY2ggcGFnZSBjYW4gcHJlc2VudC5cclxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqIEBkYXRlICAgMTAvMjAvMjAyMVxyXG4gKi9cclxuY29uc3QgUG9wdXBzID0ge1xyXG4gICAgU3R1ZHlHcm91cDoge1xyXG4gICAgICAgIEpvaW46IFwiSm9pbiBTdHVkeSBHcm91cFwiLFxyXG4gICAgICAgIENyZWF0ZTogXCJDcmVhdGUgU3R1ZHkgR3JvdXBcIlxyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9wdXBzO1xyXG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IGF1dGhSZWR1Y2VyIGZyb20gXCIuL2F1dGhSZWR1Y2VyXCI7XHJcbmltcG9ydCBwb3B1cFJlZHVjZXIgZnJvbSBcIi4vcG9wdXBSZWR1Y2VyXCI7XHJcbmltcG9ydCBzdHVkeUdyb3Vwc1JlZHVjZXIgZnJvbSBcIi4vc3R1ZHlHcm91cHNSZWR1Y2VyXCI7XHJcbmltcG9ydCBub3RpZmljYXRpb25SZWR1Y2VyIGZyb20gXCIuL25vdGlmaWNhdGlvblJlZHVjZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGNvbWJpbmVzIGFsbCB0aGUgcmVkdWNlcnMgc28gdGhleSBhbGwgY2FuIGJlIHJlZmVyZW5jZWQgZnJvbSB0aGlzIGZpbGVcclxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqIEBkYXRlICAgMTEvMDkvMjAyMVxyXG4gKi9cclxuY29uc3QgYWxsUmVkdWNlcnMgPSBjb21iaW5lUmVkdWNlcnMoe1xyXG4gICAgYXV0aFJlZHVjZXIsXHJcbiAgICBwb3B1cFJlZHVjZXIsXHJcbiAgICBzdHVkeUdyb3Vwc1JlZHVjZXIsXHJcbiAgICBub3RpZmljYXRpb25SZWR1Y2VyXHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWxsUmVkdWNlcnM7XHJcbiIsImltcG9ydCB7IHBvcHVwQ29uc3RhbnRzIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9jb25zdGFudHNcIjtcclxuaW1wb3J0IHBvcHVwVHlwZXMgZnJvbSBcIi4uLy4uL1ZpZXdzL1BvcHVwL1BvcHVwVHlwZXMuSnNcIjtcclxuLyoqXHJcbiAqIFRoaXMgaXMgdGhlIHJlZHVjZXIgZm9yIGFsbCBhY3Rpb25zIHJlbGF0aW5nIHRvIHBvcHVzXHJcbiAqIEBwYXJhbSAge29iamVjdH0gc3RhdGUgVGhlIGluaXRhbCBzdGF0ZSBvZiB0aGUgcmVkdWNlclxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGFjdGlvbiBUaGUgYWN0aW9uIGZyb20gcG9wdXBDb25zdGFudHMgdGhhdCB0cmFuc2Zvcm1zIHRoZSBzdGF0ZSBpbnRvIHRoZSBuZXh0IHN0YXRlXHJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xyXG4gKiBAZGF0ZSAgIDExLzE4LzIwMjFcclxuICovXHJcbmNvbnN0IHBvcHVwUmVkdWNlciA9IChzdGF0ZSA9IHsgdmlldzogXCJcIiwgaXNTaG93aW5nOiBmYWxzZSwgcGF5bG9hZDoge30gfSwgYWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5TSE9XX0NSRUFURV9TVFVEWV9HUk9VUF9QT1BVUDpcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHZpZXc6IHBvcHVwVHlwZXMuU3R1ZHlHcm91cC5DcmVhdGUsIGlzU2hvd2luZzogdHJ1ZSwgcGF5bG9hZDoge30gfTtcclxuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfSk9JTl9TVFVEWV9HUk9VUF9QT1BVUDpcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHZpZXc6IHBvcHVwVHlwZXMuU3R1ZHlHcm91cC5Kb2luLCBpc1Nob3dpbmc6IHRydWUsIHBheWxvYWQ6IGFjdGlvbi5wYXlsb2FkIH07XHJcblxyXG4gICAgICAgIGNhc2UgcG9wdXBDb25zdGFudHMuQ0xPU0VfUE9QVVA6XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1Nob3dpbmc6IGZhbHNlIH07XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcG9wdXBSZWR1Y2VyO1xyXG4iLCJpbXBvcnQgeyBzdHVkeUdyb3Vwc0NvbnN0YW50cyB9IGZyb20gXCIuLi9jb25zdGFudHMvY29uc3RhbnRzXCI7XHJcblxyXG4vKipcclxuICogVGhpcyBpcyB0aGUgcmVkdWNlciBmb3IgYWxsIGFjdGlvbnMgcmVsYXRpbmcgdG8gc3R1ZHkgZ3JvdXBzXHJcbiAqIEEgcmVkdWNlciBpcyBob3cgYWN0aW9ucyB0cmFuc2Zvcm0gdGhlIHN0YXRlIGludG8gdGhlIG5leHQgc3RhdGVcclxuICogQHBhcmFtICB7b2JqZWN0fSBzdGF0ZSBUaGUgaW5pdGFsIHN0YXRlIG9mIHRoZSByZWR1Y2VyXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gYWN0aW9uIFRoZSBhY3Rpb24gZnJvbSBwb3B1cENvbnN0YW50cyB0aGF0IHRyYW5zZm9ybXMgdGhlIHN0YXRlIGludG8gdGhlIG5leHQgc3RhdGVcclxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXHJcbiAqIEBkYXRlICAgMTIvMjAvMjAyMVxyXG4gKi9cclxuY29uc3Qgc3R1ZHlHcm91cHNSZWR1Y2VyID0gKFxyXG4gICAgc3RhdGUgPSB7XHJcbiAgICAgICAgc3R1ZHlHcm91cHM6IFtdLFxyXG4gICAgICAgIHNlYXJjaDogW11cclxuICAgIH0sXHJcbiAgICBhY3Rpb25cclxuKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBzdHVkeUdyb3Vwc0NvbnN0YW50cy5BRERfU1RVRFlfR1JPVVA6XHJcbiAgICAgICAgICAgIGlmICghYWN0aW9uLnBheWxvYWQucmVzZXQpIHJldHVybiB7IC4uLnN0YXRlLCBzdHVkeUdyb3VwczogWy4uLnN0YXRlLnN0dWR5R3JvdXBzLCBhY3Rpb24ucGF5bG9hZC5ncm91cF0gfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBzdHVkeUdyb3VwczogW2FjdGlvbi5wYXlsb2FkLmdyb3VwXSB9O1xyXG5cclxuICAgICAgICBjYXNlIHN0dWR5R3JvdXBzQ29uc3RhbnRzLlBPUFVMQVRFX1NFQVJDSDpcclxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNlYXJjaDogWy4uLmFjdGlvbi5wYXlsb2FkLmdyb3Vwc10gfTtcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3R1ZHlHcm91cHNSZWR1Y2VyO1xyXG4iLCJpbXBvcnQgeyBub3RpZmljYXRpb25Db25zdGFudHMgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xyXG5cclxuaW1wb3J0IG5vdGlmaWNhdGlvblR5cGVzIGZyb20gXCIuLi8uLi9WaWV3cy9Ob3RpZmljYXRpb25zL25vdGlmaWNhdGlvblR5cGVzXCI7XHJcbi8qKlxyXG4gKiBUaGlzIGlzIHRoZSByZWR1Y2VyIGZvciBhbGwgYWN0aW9ucyByZWxhdGluZyB0byBub3RpZmljYXRpb25zIChlcnJvcnMsIGluZm8sIHN1Y2Nlc3MpXHJcbiAqIEBwYXJhbSAge29iamVjdH0gc3RhdGUgVGhlIGluaXRhbCBzdGF0ZSBvZiB0aGUgcmVkdWNlclxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGFjdGlvbiBUaGUgYWN0aW9uIGZyb20gbm90aWZpY2F0aW9uQ29uc3RhbnRzIHRoYXQgdHJhbnNmb3JtcyB0aGUgc3RhdGUgaW50byB0aGUgbmV4dCBzdGF0ZVxyXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cclxuICogQGRhdGUgICAxLzI3LzIwMjJcclxuICovXHJcbmNvbnN0IG5vdGlmaWNhdGlvblJlZHVjZXIgPSAoc3RhdGUgPSB7IGlzU2hvd2luZzogZmFsc2UgfSwgYWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBub3RpZmljYXRpb25Db25zdGFudHMuU0hPV19FUlJPUl9OT1RJRklDQVRJT046XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB0eXBlOiBub3RpZmljYXRpb25UeXBlcy5FUlJPUiwgaXNTaG93aW5nOiB0cnVlLCBtZXNzYWdlOiBhY3Rpb24ucGF5bG9hZC5tZXNzYWdlIH07XHJcblxyXG4gICAgICAgIGNhc2Ugbm90aWZpY2F0aW9uQ29uc3RhbnRzLkhJREVfTk9USUZJQ0FUSU9OOlxyXG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaXNTaG93aW5nOiBmYWxzZSB9O1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBub3RpZmljYXRpb25SZWR1Y2VyO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwLmpzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UgfSBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IHRodW5rIGZyb20gXCJyZWR1eC10aHVua1wiO1xyXG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgYWxsUmVkdWNlcnMgZnJvbSBcIi4vc3RhdGUvcmVkdWNlcnNcIjtcclxuXHJcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uL1NlcnZlci9WYWxpZGF0b3IuanNcIjtcclxuXHJcbmNvbnN0IHBlcnNpc3RpZW50U3RhdGUgPSB7fTtcclxuY29uc3QgcmVkdXhEZXZUb29sc0FyZUluc3RhbGxlZCA9XHJcbiAgICBWYWxpZGF0b3IuaXNEZWZpbmVkKHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fKSAmJlxyXG4gICAgVmFsaWRhdG9yLmlzRGVmaW5lZCh3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXygpKTtcclxuZXhwb3J0IGNvbnN0IHN0b3JlID0gcmVkdXhEZXZUb29sc0FyZUluc3RhbGxlZFxyXG4gICAgPyBjcmVhdGVTdG9yZShcclxuICAgICAgICAgIGFsbFJlZHVjZXJzLFxyXG4gICAgICAgICAgcGVyc2lzdGllbnRTdGF0ZSxcclxuICAgICAgICAgIGNvbXBvc2UoYXBwbHlNaWRkbGV3YXJlKHRodW5rKSwgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18oKSlcclxuICAgICAgKVxyXG4gICAgOiBjcmVhdGVTdG9yZShhbGxSZWR1Y2VycywgcGVyc2lzdGllbnRTdGF0ZSk7XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoXHJcbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgICAgICA8UmVhY3QuU3RyaWN0TW9kZT5cclxuICAgICAgICAgICAgPEFwcCAvPlxyXG4gICAgICAgIDwvUmVhY3QuU3RyaWN0TW9kZT5cclxuICAgIDwvUHJvdmlkZXI+LFxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpXHJcbik7XHJcbiJdLCJuYW1lcyI6WyJTeW1ib2wiLCJmb3IiLCJ4IiwibW9kdWxlIiwiZXhwb3J0cyIsInV0aWxzIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiZGVmYXVsdHMiLCJDYW5jZWwiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uQ2FuY2VsZWQiLCJyZXF1ZXN0RGF0YSIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJkb25lIiwiY2FuY2VsVG9rZW4iLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0Zvcm1EYXRhIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwidXJsIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwidmFsdWUiLCJlcnIiLCJvcGVuIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJzZXRUaW1lb3V0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwidHJhbnNpdGlvbmFsIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwidW5kZWZpbmVkIiwieHNyZkhlYWRlck5hbWUiLCJmb3JFYWNoIiwidmFsIiwia2V5IiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaXNVbmRlZmluZWQiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbCIsInR5cGUiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJzZW5kIiwiYmluZCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJheGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsInByb3RvdHlwZSIsImV4dGVuZCIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsIlZFUlNJT04iLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsIm1lc3NhZ2UiLCJ0aGlzIiwidG9TdHJpbmciLCJfX0NBTkNFTF9fIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2UiLCJ0b2tlbiIsInRoZW4iLCJfbGlzdGVuZXJzIiwiaSIsImwiLCJsZW5ndGgiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwicmVhc29uIiwidGhyb3dJZlJlcXVlc3RlZCIsImxpc3RlbmVyIiwicHVzaCIsImluZGV4Iiwic3BsaWNlIiwic291cmNlIiwiYyIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsInZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJpbnRlcmNlcHRvcnMiLCJhcmd1bWVudHMiLCJhc3NlcnRPcHRpb25zIiwic2lsZW50SlNPTlBhcnNpbmciLCJib29sZWFuIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicnVuV2hlbiIsInN5bmNocm9ub3VzIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwiY2hhaW4iLCJBcnJheSIsImFwcGx5IiwiY29uY2F0Iiwic2hpZnQiLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJlcnJvciIsImdldFVyaSIsInJlcGxhY2UiLCJoYW5kbGVycyIsInVzZSIsIm9wdGlvbnMiLCJlamVjdCIsImlkIiwiZm4iLCJoIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsIkVycm9yIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJjYWxsIiwidHJhbnNmb3JtUmVxdWVzdCIsIm1lcmdlIiwiY29tbW9uIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlc3BvbnNlIiwidG9KU09OIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwidGFyZ2V0IiwiaXNQbGFpbk9iamVjdCIsImlzQXJyYXkiLCJzbGljZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJwcm9wIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsIk9iamVjdCIsImtleXMiLCJjb25maWdWYWx1ZSIsInZhbGlkYXRlU3RhdHVzIiwiZm5zIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwicHJvY2VzcyIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImlzU3RyZWFtIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJidWZmZXIiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzT2JqZWN0IiwicmF3VmFsdWUiLCJwYXJzZXIiLCJlbmNvZGVyIiwiaXNTdHJpbmciLCJKU09OIiwicGFyc2UiLCJ0cmltIiwiZSIsInN0cmluZ2lmeSIsInN0cmluZ2lmeVNhZmVseSIsInN0cmljdEpTT05QYXJzaW5nIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ0aGlzQXJnIiwiYXJncyIsImVuY29kZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImpvaW4iLCJoYXNobWFya0luZGV4IiwicmVsYXRpdmVVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJkb2N1bWVudCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwidGVzdCIsInBheWxvYWQiLCJvcmlnaW5VUkwiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJjcmVhdGVFbGVtZW50IiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJub3JtYWxpemVkTmFtZSIsImlnbm9yZUR1cGxpY2F0ZU9mIiwic3BsaXQiLCJsaW5lIiwic3Vic3RyIiwiY2FsbGJhY2siLCJhcnIiLCJ0aGluZyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZlcnNpb24iLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIm9wdHMiLCJjb25zb2xlIiwid2FybiIsInNjaGVtYSIsImFsbG93VW5rbm93biIsInJlc3VsdCIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsIm9iaiIsImhhc093blByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJGb3JtRGF0YSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInByb2R1Y3QiLCJhc3NpZ25WYWx1ZSIsImEiLCJiIiwic3RyIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsIkluUGVyc29uIiwiTWl4ZWQiLCJPbmxpbmUiLCJUaW1lcyIsIm1hcCIsImhvdXIiLCJtaW51dGUiLCJUaW1lIiwicGFydE9mRGF5IiwibWVldGluZ1RpbWUiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwic3RhcnRUaW1lSXNWYWxpZCIsImlzQWZ0ZXIiLCJlbmRUaW1lSXNWYWxpZCIsInRpbWVTdHJpbmciLCJjb2xvbkluZGV4IiwicGFydE9mRGF5SW5kZXgiLCJsYXRlclRpbWUiLCJEYXlzIiwiTW9uZGF5IiwiVHVlc2RheSIsIldlZG5lc2RheSIsIlRodXJzZGF5IiwiRnJpZGF5IiwiU2F0dXJkYXkiLCJTdW5kYXkiLCJNZWV0aW5nRnJlcXVlbmNpZXMiLCJEYWlseSIsIk1vbnRobHkiLCJPbmVUaW1lIiwiV2Vla2x5IiwiWWVhcmx5IiwiUGFydE9mRGF5IiwiQW0iLCJQbSIsIkFjY291bnQiLCJFcnJvckNyZWF0ZUFjY291bnQiLCJOb3RPdmVyMTgiLCJJbmNvcnJlY3RQYXNzd29yZCIsIlN1Y2Nlc3NBY2NvdW50Q3JlYXRlZCIsIlN1Y2Nlc3NBY2NvdW50U2V0dXAiLCJTdWNjZXNzTG9naW4iLCJTdWNjZXNzVXBkYXRlQXV0aGVudGljYXRpb25Ub2tlbiIsIlVudmVyaWZpZWRVc2VyV2FzRm91bmQiLCJVc2VyQWxyZWFkeUV4aXN0cyIsIlVzZXJOb3RGb3VuZCIsIlN0dWR5R3JvdXAiLCJFcnJvckNyZWF0ZVN0dWR5R3JvdXAiLCJTdWNjZXNzU3R1ZHlHcm91cENyZWF0ZWQiLCJTdWNjZXNzU3R1ZHlHcm91cHNSZXRyaWV2ZWQiLCJFcnJvckdldHRpbmdTZWFyY2hSZXN1bHRzIiwiQ3JlYXRlQWNjb3VudCIsIkdldFVudmVyaWZpZWRVc2VyIiwiTG9naW4iLCJTZXR1cEFjY291bnQiLCJVcGRhdGVBdXRoZW50aWNhdGlvblRva2VuIiwiU3RhdGljUmVzb3VyY2VzIiwiSW5kZXgiLCJTZWFyY2giLCJHZXRTZWFyY2hSZXN1bHRzIiwiQ3JlYXRlU3R1ZHlHcm91cCIsIkdldFVzZXJTdHVkeUdyb3VwcyIsIlZhbGlkYXRvciIsInZhcmlhYmxlIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIml0ZW0iLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJuIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwicyIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJmdW5jIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImFhIiwibSIsInIiLCJ5IiwiYmEiLCJTZXQiLCJjYSIsImRhIiwiZWEiLCJhZGQiLCJmYSIsImhhIiwiaWEiLCJqYSIsImthIiwiQiIsImQiLCJmIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsIm9hIiwicGEiLCJxYSIsIm1hIiwiaXNOYU4iLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkUiLCJNYSIsIkthIiwiaXRlcmF0b3IiLCJMYSIsIk5hIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlFhIiwidGFnIiwiX3JlbmRlciIsIlJhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCIkYSIsImFiIiwiYmIiLCJjYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJkYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzdHlsZSIsInNldFByb3BlcnR5Iiwic3Vic3RyaW5nIiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwiaXMiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiTWF0aCIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInJhbmdlIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJNZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsIk9lIiwiY29udGVudEVkaXRhYmxlIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIlliIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIk5iIiwidyIsInoiLCJ1IiwicSIsInQiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsIkoiLCJLIiwiUSIsIkwiLCJqZSIsImNoYXIiLCJrZSIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInBmIiwiY2xlYXJUaW1lb3V0IiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkgiLCJJIiwiQ2YiLCJNIiwiTiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiTyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsIl9jdXJyZW50VmFsdWUiLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsIm9ic2VydmVkQml0cyIsIm5leHQiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwiQWciLCJCZyIsIkNnIiwiQSIsInAiLCJDIiwiRGciLCJFZyIsIkZnIiwiQ29tcG9uZW50IiwicmVmcyIsIkdnIiwiS2ciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJIZyIsIklnIiwiSmciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIk1nIiwic3RhdGUiLCJ1cGRhdGVyIiwiTmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJPZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiUGciLCJRZyIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJSZyIsIlNnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlRnIiwiVWciLCJtb2RlIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImZoIiwiZ2giLCJoaCIsIlAiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwid2giLCJ4aCIsIlIiLCJTIiwiVCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJJaCIsIkpoIiwiS2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJMaCIsIk1oIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwibXV0YWJsZVJlYWRMYW5lcyIsIk5oIiwiVSIsInVzZVN0YXRlIiwiZ2V0U25hcHNob3QiLCJ1c2VFZmZlY3QiLCJzZXRTbmFwc2hvdCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiZGVzdHJveSIsImRlcHMiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiZGlzcGxheSIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJjZWlsIiwib2oiLCJwaiIsIlgiLCJZIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwiSW5maW5pdHkiLCJ3aiIsImNrIiwiWiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiU2MiLCJLaiIsIkxqIiwiTWoiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiVGMiLCJOaiIsIk9qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJVaiIsInRpbWVvdXRIYW5kbGUiLCJXaiIsIlhqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJvayIsInFrIiwiaHlkcmF0aW9uT3B0aW9ucyIsIm11dGFibGVTb3VyY2VzIiwiX2ludGVybmFsUm9vdCIsInJrIiwidGsiLCJoYXNBdHRyaWJ1dGUiLCJzayIsInVrIiwiaGsiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJ1bm1vdW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJWaiIsInZrIiwiRXZlbnRzIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwieGsiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInlrIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJvIiwibG9hZGVkIiwid3JpdGFibGUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlJlZmVyZW5jZUVycm9yIiwiX19wcm90b19fIiwiZmlsZXMiLCJzZXRQcm90b3R5cGVPZiIsIkZpbGVSZWFkZXIiLCJyZWFkQXNEYXRhVVJMIiwib25sb2FkIiwicm91bmQiLCJmaWxlIiwib25Eb25lIiwib25DaGFuZ2UiLCJoYW5kbGVDaGFuZ2UiLCJydW4iLCJmdW4iLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiTk9ERV9FTlYiLCJmcmFtZXNUb1BvcCIsImlzUmVhY3RXYXJuaW5nIiwiX19zZWxmIiwiX19zb3VyY2UiLCJfc3RvcmUiLCJ2YWxpZGF0ZWQiLCJfc2VsZiIsImZyZWV6ZSIsIl8iLCJjcmVhdGVGYWN0b3J5IiwiY2xvbmVBbmRSZXBsYWNlS2V5IiwiY2xvbmVFbGVtZW50IiwiaXNWYWxpZEVsZW1lbnQiLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwiRnVuY3Rpb24iLCJjaGlsZElEcyIsImdldERpc3BsYXlOYW1lIiwiZ2V0RWxlbWVudCIsImdldE93bmVySUQiLCJwYXJzZUludCIsIm9uU2V0Q2hpbGRyZW4iLCJwYXJlbnRJRCIsIm9uQmVmb3JlTW91bnRDb21wb25lbnQiLCJ1cGRhdGVDb3VudCIsIm9uQmVmb3JlVXBkYXRlQ29tcG9uZW50Iiwib25Nb3VudENvbXBvbmVudCIsIm9uVXBkYXRlQ29tcG9uZW50Iiwib25Vbm1vdW50Q29tcG9uZW50IiwicHVyZ2VVbm1vdW50ZWRDb21wb25lbnRzIiwiX3ByZXZlbnRQdXJnaW5nIiwiZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0iLCJnZXROYW1lIiwiX2RlYnVnSUQiLCJnZXRTdGFja0FkZGVuZHVtQnlJRCIsImdldFBhcmVudElEIiwiZ2V0Q2hpbGRJRHMiLCJnZXRTb3VyY2UiLCJnZXRUZXh0IiwiZ2V0VXBkYXRlQ291bnQiLCJnZXRSb290SURzIiwiZ2V0UmVnaXN0ZXJlZElEcyIsInB1c2hOb25TdGFuZGFyZFdhcm5pbmdTdGFjayIsInJlYWN0U3RhY2siLCJwb3BOb25TdGFuZGFyZFdhcm5pbmdTdGFjayIsInJlYWN0U3RhY2tFbmQiLCJzZXRTdGF0ZSIsImVucXVldWVDYWxsYmFjayIsImZvcmNlVXBkYXRlIiwicmVwbGFjZVN0YXRlIiwiUHVyZUNvbXBvbmVudCIsInVuaXF1ZUtleSIsImVudHJpZXMiLCJpc1JlYWN0Q2xhc3NBcHByb3ZlZCIsImNoaWxkQ29udGV4dCIsIl9fcmVhY3RBdXRvQmluZFBhaXJzIiwiYXV0b2JpbmQiLCJfX3JlYWN0Qm91bmRDb250ZXh0IiwiX19yZWFjdEJvdW5kTWV0aG9kIiwiX19yZWFjdEJvdW5kQXJndW1lbnRzIiwic3RhdGljcyIsImdldEluaXRpYWxTdGF0ZSIsInVwZGF0ZUNvbXBvbmVudCIsIl9faXNNb3VudGVkIiwiX19kaWRXYXJuSXNNb3VudGVkIiwiX2lzTW9ja0Z1bmN0aW9uIiwiY29tcG9uZW50U2hvdWxkVXBkYXRlIiwiY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyIsImoiLCJldmVyeSIsImVzY2FwZSIsImluc3RhbmNlUG9vbCIsInBvcCIsImRlc3RydWN0b3IiLCJwb29sU2l6ZSIsImFkZFBvb2xpbmdUbyIsImdldFBvb2xlZCIsInJlbGVhc2UiLCJvbmVBcmd1bWVudFBvb2xlciIsInR3b0FyZ3VtZW50UG9vbGVyIiwidGhyZWVBcmd1bWVudFBvb2xlciIsImZvdXJBcmd1bWVudFBvb2xlciIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJjcmVhdGVDbGFzcyIsImNyZWF0ZU1peGluIiwiRE9NIiwiX19zcHJlYWQiLCJrZXlQcmVmaXgiLCJtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsIiwiYWJiciIsImFkZHJlc3MiLCJhcnRpY2xlIiwiYXNpZGUiLCJhdWRpbyIsImJkaSIsImJkbyIsImJpZyIsImJsb2NrcXVvdGUiLCJjYW52YXMiLCJjYXB0aW9uIiwiY2l0ZSIsImNvbGdyb3VwIiwiZGF0YWxpc3QiLCJkZWwiLCJkZXRhaWxzIiwiZGZuIiwiZGlhbG9nIiwiZGl2IiwiZGwiLCJkdCIsImVtIiwiZmllbGRzZXQiLCJmaWdjYXB0aW9uIiwiZmlndXJlIiwiZm9vdGVyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaGVhZCIsImhlYWRlciIsImhncm91cCIsImh0bWwiLCJpZnJhbWUiLCJpbnMiLCJrYmQiLCJsYWJlbCIsImxlZ2VuZCIsIm1haW4iLCJtYXJrIiwibWVudSIsIm1ldGVyIiwibmF2Iiwibm9zY3JpcHQiLCJvbCIsIm9wdGdyb3VwIiwib3B0aW9uIiwib3V0cHV0IiwicGljdHVyZSIsInByZSIsInByb2dyZXNzIiwicnAiLCJydCIsInJ1YnkiLCJzYW1wIiwic2NyaXB0Iiwic2VjdGlvbiIsInNlbGVjdCIsInNtYWxsIiwic3BhbiIsInN0cm9uZyIsInN1YiIsInN1bW1hcnkiLCJzdXAiLCJ0YWJsZSIsInRib2R5IiwidGV4dGFyZWEiLCJ0Zm9vdCIsInRoZWFkIiwidHIiLCJ1bCIsInZhciIsInZpZGVvIiwiY2lyY2xlIiwiY2xpcFBhdGgiLCJkZWZzIiwiZWxsaXBzZSIsImltYWdlIiwibGluZWFyR3JhZGllbnQiLCJtYXNrIiwicGF0dGVybiIsInBvbHlnb24iLCJwb2x5bGluZSIsInJhZGlhbEdyYWRpZW50IiwicmVjdCIsInN0b3AiLCJzdmciLCJ0c3BhbiIsIl9pc1JlYWN0RWxlbWVudCIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsImdyb3VwcyIsInByZWZpeCIsImRlbGltaXRlciIsIm9wdGlvbmFsIiwicGFydGlhbCIsImFzdGVyaXNrIiwiYXR0YWNoS2V5cyIsInJlZ2V4cFRvUmVnZXhwIiwiYXJyYXlUb1JlZ2V4cCIsInRva2Vuc1RvUmVnRXhwIiwic3RyaW5nVG9SZWdleHAiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbiIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImV4ZWMiLCJlc2NhcGVkIiwiZ3JvdXAiLCJtb2RpZmllciIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwibWF0Y2hlcyIsInByZXR0eSIsInNlZ21lbnQiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwianN4IiwianN4cyIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImxhenkiLCJtZW1vIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJhcmciLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJhd3JhcCIsImFzeW5jIiwiaXRlciIsInJldmVyc2UiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmbG9vciIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsImluc2VydCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnREb2N1bWVudCIsImdldFRhcmdldCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsImRlZmluaXRpb24iLCJfc2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJ2YWx1ZUVxdWFsIiwiYVZhbHVlIiwiYlZhbHVlIiwiY29uZGl0aW9uIiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJmaWx0ZXIiLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiX2tleSIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9yZWYiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY29tbW9uanNHbG9iYWwiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJoYW5kbGVyIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiX3RoaXMiLCJlbWl0dGVyIiwiX3Byb3RvIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsIm9uVXBkYXRlIiwiX3Byb3RvMiIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImNyZWF0ZU5hbWVkQ29udGV4dCIsImhpc3RvcnlDb250ZXh0IiwiUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJpc0V4YWN0IiwiTGlmZWN5Y2xlIiwib25Nb3VudCIsInByZXZQcm9wcyIsIm9uVW5tb3VudCIsImNhY2hlIiwiY2FjaGVDb3VudCIsImdlbmVyYXRlUGF0aCIsImNvbXBpbGVQYXRoIiwiUmVkaXJlY3QiLCJjb21wdXRlZE1hdGNoIiwiX3JlZiRwdXNoIiwicHJldkxvY2F0aW9uIiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJyZWR1Y2UiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwiUm91dGUiLCJjb250ZXh0JDEiLCJfdGhpcyRwcm9wcyIsImlzRW1wdHlDaGlsZHJlbiIsIlN3aXRjaCIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIiLCJfcmVmMiRjb21wb25lbnQiLCJpc0R1cGxpY2F0ZU5hdmlnYXRpb24iLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsImJhdGNoIiwiZ2V0QmF0Y2giLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5Iiwic3RvcmUiLCJwYXJlbnRTdWIiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwic3Vic2NyaXB0aW9uIiwib25TdGF0ZUNoYW5nZSIsInRyeVN1YnNjcmliZSIsImFkZE5lc3RlZFN1YiIsImZpcnN0IiwiY2xlYXIiLCJpc1N1YnNjcmliZWQiLCJjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24iLCJub3RpZnlOZXN0ZWRTdWJzIiwiQm9vbGVhbiIsInRyeVVuc3Vic2NyaWJlIiwiZ2V0TGlzdGVuZXJzIiwiY29udGV4dFZhbHVlIiwicHJldmlvdXNTdGF0ZSIsImdldFN0YXRlIiwiY3JlYXRlU3RvcmVIb29rIiwidXNlUmVkdXhDb250ZXh0IiwiY3JlYXRlRGlzcGF0Y2hIb29rIiwidXNlU3RvcmUiLCJ1c2VEaXNwYXRjaCIsInJlZkVxdWFsaXR5IiwiY3JlYXRlU2VsZWN0b3JIb29rIiwic2VsZWN0b3IiLCJlcXVhbGl0eUZuIiwiX3VzZVJlZHV4Q29udGV4dCIsInNlbGVjdGVkU3RhdGUiLCJjb250ZXh0U3ViIiwiZm9yY2VSZW5kZXIiLCJsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yIiwibGF0ZXN0U2VsZWN0b3IiLCJsYXRlc3RTdG9yZVN0YXRlIiwibGF0ZXN0U2VsZWN0ZWRTdGF0ZSIsInN0b3JlU3RhdGUiLCJuZXdTZWxlY3RlZFN0YXRlIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3U3RvcmVTdGF0ZSIsIl9uZXdTZWxlY3RlZFN0YXRlIiwidXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24iLCJuZXdCYXRjaCIsInVzZVNlbGVjdG9yIiwiYXV0aENvbnN0YW50cyIsInBvcHVwQ29uc3RhbnRzIiwic3R1ZHlHcm91cHNDb25zdGFudHMiLCJub3RpZmljYXRpb25Db25zdGFudHMiLCJzaWduSW4iLCJ1c2VyIiwic2lnbk91dCIsImNyZWF0ZUFjY291bnQiLCJ1bnZlcmlmaWVkVXNlciIsImNsb3NlUG9wdXAiLCJhZGRTdHVkeUdyb3VwIiwic2hvd0Vycm9yTm90aWZpY2F0aW9uIiwiUHJpbWFyeSIsIkNyZWF0aW9uIiwiRGVzdHJ1Y2l2ZSIsImJ1dHRvbkNsYXNzTmFtZSIsIkJ1dHRvblR5cGVzIiwiaXNUZXh0QXJlYSIsIm9uU3VibWl0Iiwic3VibWl0Q3JlYXRlU3R1ZHlHcm91cCIsInVwZGF0ZU5hbWVGaWVsZCIsImdyb3VwQ29sb3IiLCJ1cGRhdGVHcm91cENvbG9yIiwidXBkYXRlRGVzY3JpcHRpb25GaWVsZCIsInVwZGF0ZVN1YmplY3RGaWVsZCIsInVwZGF0ZVByaXZhY3kiLCJjb3Vyc2VDb2RlIiwidXBkYXRlQ291cnNlQ29kZUZpZWxkIiwidXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbCIsInVwZGF0ZUlzT25saW5lR3JvdXAiLCJ1cGRhdGVJc1R1dG9yR3JvdXAiLCJhdXRoUmVkdWNlciIsIkJMQU5LIiwic2V0TmFtZSIsInNldERlc2NyaXB0aW9uIiwic3ViamVjdCIsInNldFN1YmplY3QiLCJwcml2YWN5Iiwic2V0UHJpdmFjeSIsInNldENvdXJzZUNvZGUiLCJpc0Fzc29jaWF0ZWRXaXRoU2Nob29sIiwic2V0SXNBc3NvY2lhdGVkV2l0aFNjaG9vbCIsImlzVHV0b3JHcm91cCIsInNldElzVHV0b3JHcm91cCIsImlzT25saW5lR3JvdXAiLCJzZXRJc09ubGluZUdyb3VwIiwic2V0R3JvdXBDb2xvciIsInN0dWR5R3JvdXBDcmVhdGlvbkVycm9yTXNnIiwic2V0U3R1ZHlHcm91cENyZWF0aW9uRXJyb3JNc2ciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiUm91dGVzIiwicHJpdmFjeVNldHRpbmciLCJjb3Vyc2UiLCJzY2hvb2wiLCJSZXNwb25zZU1lc3NhZ2VzIiwibmV3U3R1ZHlHcm91cCIsInNlbGVjdGVkSW5kZXgiLCJvd25lciIsImlzVHV0b3IiLCJpc09ubGluZSIsIl9pZCIsIkpvaW4iLCJDcmVhdGUiLCJwb3B1cFJlZHVjZXIiLCJwb3B1cFZpZXciLCJwb3B1cFR5cGVzIiwiaXNTaG93aW5nIiwibm90aWZpY2F0aW9uUmVkdWNlciIsIm5vdGlmaWNhdGlvblR5cGVzIiwiRm9yZ290UGFzc3dvcmQiLCJWZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvbiIsIkFjY291bnRTZXR1cCIsInN1Ym1pdExvZ2luIiwidXBkYXRlRW1haWxGaWVsZCIsInVwZGF0ZVBhc3N3b3JkRmllbGQiLCJlcnJNc2ciLCJzZXRFbWFpbCIsInNldFBhc3N3b3JkIiwiYXV0aGVudGljYXRpb25Ub2tlbiIsImF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZSIsInN0dWR5R3JvdXBzIiwic2V0SG9tZVZpZXciLCJWaWV3cyIsInN1Ym1pdEFjY291bnRDcmVhdGlvbiIsImNvbmZpcm1QYXNzd29yZCIsInVwZGF0ZUNvbmZpcm1QYXNzd29yZEZpZWxkIiwibG9naW5EaWRGYWlsIiwic2V0Q29uZmlybVBhc3N3b3JkIiwicGFzc3dvcmRfY29uZmlybWF0aW9uIiwic3VibWl0QWNjb3VudFNldHVwIiwiYXJlYUNvZGUiLCJ1cGRhdGVBcmVhQ29kZUZpZWxkIiwiaXMxOE9yT3ZlciIsInVwZGF0ZUlzMThPck92ZXIiLCJhY2NlcHQiLCJ1cGRhdGVQcm9maWxlUGljdHVyZSIsInNyYyIsInByb2ZpbGVQaWN0dXJlIiwiYWx0IiwidXNlcklzVmVyaWZpZWQiLCJzZXRVc2VySXNWZXJpZmllZCIsInNldEFyZWFDb2RlIiwic2V0SXMxOE9yT3ZlciIsInNldFByb2ZpbGVQaWN0dXJlIiwiYWNjb3VudFNldHVwRXJyb3JNc2ciLCJzZXRVc2VyIiwidmVyaWZpY2F0aW9uVG9rZW4iLCJ2ZXJpZnlVc2VyIiwiZm9ybURhdGEiLCJhcHBlbmQiLCJhY2NvdW50U2V0dXBXYXNWYWxpZCIsImhvbWVWaWV3IiwiY3VycmVudFBhZ2UiLCJpc0xvZ2dlZEluIiwibWVudUlzU2hvd2luZyIsInNldE1lbnVJc1Nob3dpbmciLCJ0ZXh0RGVjb3JhdGlvbiIsInN0dWR5R3JvdXBzUmVkdWNlciIsImdldFN0dWR5R3JvdXBzIiwiZ2V0R3JvdXBzIiwic3R1ZHlHcm91cCIsInRvVmFsIiwibWl4IiwidG1wIiwicmVhY3RQcm9wc1JlZ2V4IiwiU3R5bGVTaGVldCIsIl9pbnNlcnRUYWciLCJiZWZvcmUiLCJ0YWdzIiwiaW5zZXJ0aW9uUG9pbnQiLCJwcmVwZW5kIiwiY29udGFpbmVyIiwiaXNTcGVlZHkiLCJzcGVlZHkiLCJjdHIiLCJub2RlcyIsInJ1bGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzaGVldCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJmbHVzaCIsImFicyIsInJlcGxhY2VtZW50IiwiaW5kZXhvZiIsImJlZ2luIiwiY29sdW1uIiwicG9zaXRpb24iLCJjaGFyYWN0ZXIiLCJjaGFyYWN0ZXJzIiwicm9vdCIsInBhcmVudCIsImNvcHkiLCJwZWVrIiwiY2FyZXQiLCJhbGxvYyIsImRlYWxsb2MiLCJkZWxpbWl0Iiwid2hpdGVzcGFjZSIsImVzY2FwaW5nIiwiY29tbWVudGVyIiwiTVMiLCJNT1oiLCJXRUJLSVQiLCJDT01NRU5UIiwiREVDTEFSQVRJT04iLCJLRVlGUkFNRVMiLCJzZXJpYWxpemUiLCJydWxlcyIsInJ1bGVzZXRzIiwicHNldWRvIiwicG9pbnRzIiwiZGVjbGFyYXRpb25zIiwiYXRydWxlIiwicHJvcGVydHkiLCJwcmV2aW91cyIsInNjYW5uaW5nIiwiYW1wZXJzYW5kIiwicmVmZXJlbmNlIiwiY29tbWVudCIsImRlY2xhcmF0aW9uIiwicnVsZXNldCIsInBvc3QiLCJpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmciLCJmaXhlZEVsZW1lbnRzIiwiY29tcGF0IiwiaXNJbXBsaWNpdFJ1bGUiLCJ0b1J1bGVzIiwiZ2V0UnVsZXMiLCJwYXJlbnRSdWxlcyIsInJlbW92ZUxhYmVsIiwiZGVmYXVsdFN0eWxpc1BsdWdpbnMiLCJzc3JTdHlsZXMiLCJnZXRBdHRyaWJ1dGUiLCJfaW5zZXJ0Iiwic3R5bGlzUGx1Z2lucyIsImluc2VydGVkIiwibm9kZXNUb0h5ZHJhdGUiLCJhdHRyaWIiLCJjdXJyZW50U2hlZXQiLCJjb2xsZWN0aW9uIiwiZmluYWxpemluZ1BsdWdpbnMiLCJzZXJpYWxpemVyIiwic2VyaWFsaXplZCIsInNob3VsZENhY2hlIiwic3R5bGVzIiwicmVnaXN0ZXJlZCIsImxlbiIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiV2Via2l0TGluZUNsYW1wIiwiaHlwaGVuYXRlUmVnZXgiLCJhbmltYXRpb25SZWdleCIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJwMSIsInAyIiwiY3Vyc29yIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsIl9fZW1vdGlvbl9zdHlsZXMiLCJhbmltIiwiaW50ZXJwb2xhdGVkIiwiY3JlYXRlU3RyaW5nRnJvbU9iamVjdCIsInByZXZpb3VzQ3Vyc29yIiwiY2FjaGVkIiwibGFiZWxQYXR0ZXJuIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJsYXN0SW5kZXgiLCJpZGVudGlmaWVyTmFtZSIsIkVtb3Rpb25DYWNoZUNvbnRleHQiLCJIVE1MRWxlbWVudCIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiaXNTdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25TdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25Db21wb25lbnQiLCJnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzIiwiaXNSZWFsIiwic2hvdWxkRm9yd2FyZFByb3AiLCJvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AiLCJfX2Vtb3Rpb25fZm9yd2FyZFByb3AiLCJuZXdTdHlsZWQiLCJjcmVhdGVTdHlsZWQiLCJ0YXJnZXRDbGFzc05hbWUiLCJfX2Vtb3Rpb25fcmVhbCIsImJhc2VUYWciLCJfX2Vtb3Rpb25fYmFzZSIsImRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsInNob3VsZFVzZUFzIiwiU3R5bGVkIiwiZmluYWxUYWciLCJhcyIsImNsYXNzSW50ZXJwb2xhdGlvbnMiLCJ0aGVtZSIsImZpbmFsU2hvdWxkRm9yd2FyZFByb3AiLCJuZXdQcm9wcyIsImVsZSIsInBvc3NpYmx5U3R5bGVFbGVtZW50Iiwid2l0aENvbXBvbmVudCIsIm5leHRUYWciLCJuZXh0T3B0aW9ucyIsInN0eWxlZCIsImNsb25lIiwiYWNjIiwiZm9ybWF0TXVpRXJyb3JNZXNzYWdlIiwiY2FwaXRhbGl6ZSIsInhzIiwic20iLCJ4bCIsImRlZmF1bHRCcmVha3BvaW50cyIsImhhbmRsZUJyZWFrcG9pbnRzIiwicHJvcFZhbHVlIiwic3R5bGVGcm9tUHJvcFZhbHVlIiwidGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludCIsImNzc0tleSIsImdldFBhdGgiLCJ0aGVtZU1hcHBpbmciLCJ0cmFuc2Zvcm0iLCJwcm9wVmFsdWVGaW5hbCIsInVzZXJWYWx1ZSIsImNzc1Byb3BlcnR5IiwidGhlbWVLZXkiLCJmaWx0ZXJQcm9wcyIsInByb3BlcnRpZXMiLCJkaXJlY3Rpb25zIiwiYWxpYXNlcyIsIm1hcmdpblgiLCJtYXJnaW5ZIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsImdldENzc1Byb3BlcnRpZXMiLCJkaXJlY3Rpb24iLCJkaXIiLCJtYXJnaW5LZXlzIiwicGFkZGluZ0tleXMiLCJzcGFjaW5nS2V5cyIsImNyZWF0ZVVuYXJ5VW5pdCIsInRoZW1lU3BhY2luZyIsImNyZWF0ZVVuYXJ5U3BhY2luZyIsInRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZWQiLCJjc3NQcm9wZXJ0aWVzIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwicmVzb2x2ZUNzc1Byb3BlcnR5IiwibWFyZ2luIiwicGFkZGluZyIsInNwYWNpbmciLCJnZXRCb3JkZXIiLCJib3JkZXIiLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmFkaXVzIiwiZ2FwIiwiY29sdW1uR2FwIiwicm93R2FwIiwibWF4V2lkdGgiLCJfcHJvcHMkdGhlbWUiLCJfcHJvcHMkdGhlbWUkYnJlYWtwb2kiLCJfcHJvcHMkdGhlbWUkYnJlYWtwb2kyIiwibWluV2lkdGgiLCJtYXhIZWlnaHQiLCJtaW5IZWlnaHQiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250U3R5bGUiLCJsZXR0ZXJTcGFjaW5nIiwidGV4dFRyYW5zZm9ybSIsInRleHRBbGlnbiIsImZpbHRlclByb3BzTWFwcGluZyIsImJvcmRlcnMiLCJmbGV4Ym94IiwiZ3JpZCIsInBvc2l0aW9ucyIsInBhbGV0dGUiLCJzaGFkb3dzIiwic2l6aW5nIiwidHlwb2dyYXBoeSIsInN0eWxlRnVuY3Rpb25NYXBwaW5nIiwicHJvcFRvU3R5bGVGdW5jdGlvbiIsInN0eWxlRm5OYW1lIiwiaW5wdXRQcm9wcyIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZUZ1bmN0aW9uU3giLCJzeCIsInRyYXZlcnNlIiwic3hJbnB1dCIsInN4T2JqZWN0IiwiZW1wdHlCcmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfYnJlYWtwb2ludHNJbnB1dCRrZXkiLCJjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QiLCJicmVha3BvaW50c0tleXMiLCJzdHlsZUtleSIsIm1heWJlRm4iLCJicmVha3BvaW50c1ZhbHVlcyIsIm9iamVjdHMiLCJ1bmlvbiIsIm9iamVjdHNIYXZlU2FtZUtleXMiLCJicmVha3BvaW50T3V0cHV0IiwicGFsZXR0ZUlucHV0Iiwic3BhY2luZ0lucHV0Iiwic2hhcGVJbnB1dCIsIm90aGVyIiwidW5pdCIsInN0ZXAiLCJkb3duIiwiYmV0d2VlbiIsImVuZEluZGV4Iiwibm90Iiwia2V5SW5kZXgiLCJjcmVhdGVCcmVha3BvaW50cyIsIm11aSIsImFyZ3NJbnB1dCIsImFyZ3VtZW50IiwiY3JlYXRlU3BhY2luZyIsIm11aVRoZW1lIiwiY29tcG9uZW50cyIsInN5c3RlbURlZmF1bHRUaGVtZSIsImRlZmF1bHRUaGVtZSIsImNvbnRleHRUaGVtZSIsInVzZVRoZW1lV2l0aG91dERlZmF1bHQiLCJkZWZhdWx0R2VuZXJhdG9yIiwiZ2VuZXJhdGUiLCJjb25maWd1cmUiLCJjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IiLCJtYXgiLCJkZWNvbXBvc2VDb2xvciIsImNvbG9ycyIsImhleFRvUmdiIiwibWFya2VyIiwiY29sb3JTcGFjZSIsInBhcnNlRmxvYXQiLCJyZWNvbXBvc2VDb2xvciIsImdldEx1bWluYW5jZSIsInJnYiIsImhzbFRvUmdiIiwiTnVtYmVyIiwidG9GaXhlZCIsImFscGhhIiwiZGFya2VuIiwiY29lZmZpY2llbnQiLCJsaWdodGVuIiwiYmxhY2siLCJ3aGl0ZSIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJsaWdodCIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJkaXZpZGVyIiwiYmFja2dyb3VuZCIsInBhcGVyIiwiYWN0aXZlIiwiaG92ZXIiLCJob3Zlck9wYWNpdHkiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1c09wYWNpdHkiLCJhY3RpdmF0ZWRPcGFjaXR5IiwiZGFyayIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwiY2FzZUFsbENhcHMiLCJkZWZhdWx0Rm9udEZhbWlseSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0UmVndWxhciIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0Qm9sZCIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbSIsInB4VG9SZW0yIiwiY29lZiIsImJ1aWxkVmFyaWFudCIsImNhc2luZyIsInZhcmlhbnRzIiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTEiLCJib2R5MiIsIm92ZXJsaW5lIiwiY3JlYXRlU2hhZG93IiwicHgiLCJlYXNpbmciLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiZWFzZUluIiwic2hhcnAiLCJkdXJhdGlvbiIsInNob3J0ZXN0Iiwic2hvcnRlciIsInNob3J0Iiwic3RhbmRhcmQiLCJjb21wbGV4IiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwiZm9ybWF0TXMiLCJtaWxsaXNlY29uZHMiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJjb25zdGFudCIsImNyZWF0ZVRyYW5zaXRpb25zIiwiaW5wdXRUcmFuc2l0aW9ucyIsIm1lcmdlZEVhc2luZyIsIm1lcmdlZER1cmF0aW9uIiwiZHVyYXRpb25PcHRpb24iLCJlYXNpbmdPcHRpb24iLCJhbmltYXRlZFByb3AiLCJtb2JpbGVTdGVwcGVyIiwic3BlZWREaWFsIiwiYXBwQmFyIiwiZHJhd2VyIiwibW9kYWwiLCJzbmFja2JhciIsInRvb2x0aXAiLCJtaXhpbnNJbnB1dCIsInRyYW5zaXRpb25zIiwidHJhbnNpdGlvbnNJbnB1dCIsInR5cG9ncmFwaHlJbnB1dCIsImNvbnRyYXN0VGhyZXNob2xkIiwiZ2V0RGVmYXVsdFByaW1hcnkiLCJnZXREZWZhdWx0U2Vjb25kYXJ5IiwiZ2V0RGVmYXVsdEVycm9yIiwiZ2V0RGVmYXVsdEluZm8iLCJzdWNjZXNzIiwiZ2V0RGVmYXVsdFN1Y2Nlc3MiLCJ3YXJuaW5nIiwiZ2V0RGVmYXVsdFdhcm5pbmciLCJnZXRDb250cmFzdFRleHQiLCJjb250cmFzdFRleHQiLCJmb3JlZ3JvdW5kIiwibHVtQSIsImx1bUIiLCJnZXRDb250cmFzdFJhdGlvIiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIm1vZGVzIiwiZ3JleSIsImNyZWF0ZVBhbGV0dGUiLCJzeXN0ZW1UaGVtZSIsInRvb2xiYXIiLCJCb3giLCJkZWZhdWx0Q2xhc3NOYW1lIiwiZ2VuZXJhdGVDbGFzc05hbWUiLCJCb3hSb290IiwiaW5Qcm9wcyIsIl9leHRlbmRTeFByb3AiLCJpblN4Iiwic3lzdGVtUHJvcHMiLCJvdGhlclByb3BzIiwic3BsaXRQcm9wcyIsImZpbmFsU3giLCJleHRlbmRTeFByb3AiLCJjcmVhdGVCb3giLCJnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nIiwiY29tcGxldGVkIiwiZXhwYW5kZWQiLCJmb2N1c2VkIiwiZm9jdXNWaXNpYmxlIiwicmVxdWlyZWQiLCJzbG90IiwiZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyIsInNsb3RzIiwiZ2V0U2xpZGVyVXRpbGl0eUNsYXNzIiwiY2xhc3NlcyIsInVzZVZhbHVlTGFiZWxDbGFzc2VzIiwiYXBwZW5kT3duZXJTdGF0ZSIsImV4aXN0aW5nUHJvcHMiLCJvd25lclN0YXRlIiwiY29tcG9zZUNsYXNzZXMiLCJnZXRVdGlsaXR5Q2xhc3MiLCJ1c2VDb250cm9sbGVkIiwiZGVmYXVsdFByb3AiLCJpc0NvbnRyb2xsZWQiLCJ2YWx1ZVN0YXRlIiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsImhhbmRsZUtleURvd24iLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5U3RhdGUiLCJ1c2VJc0ZvY3VzVmlzaWJsZSIsImRvYyIsImlzRm9jdXNWaXNpYmxlUmVmIiwib25Gb2N1cyIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSIsImlzRm9jdXNWaXNpYmxlIiwib25CbHVyIiwic2V0UmVmIiwidXNlRm9ya1JlZiIsInJlZkEiLCJyZWZCIiwicmVmVmFsdWUiLCJ1c2VFdmVudENhbGxiYWNrIiwiY2xpcCIsIm92ZXJmbG93Iiwid2hpdGVTcGFjZSIsImFzYyIsImZpbmRDbG9zZXN0IiwiY3VycmVudFZhbHVlIiwiX3ZhbHVlcyRyZWR1Y2UiLCJjbG9zZXN0SW5kZXgiLCJkaXN0YW5jZSIsInRyYWNrRmluZ2VyIiwidG91Y2hJZCIsInRvdWNoRXZlbnQiLCJ0b3VjaCIsInZhbHVlVG9QZXJjZW50Iiwic2V0VmFsdWVJbmRleCIsInNvcnQiLCJmb2N1c1RodW1iIiwic2xpZGVyUmVmIiwiYWN0aXZlSW5kZXgiLCJzZXRBY3RpdmUiLCJfc2xpZGVyUmVmJGN1cnJlbnQiLCJfZG9jJGFjdGl2ZUVsZW1lbnQiLCJfc2xpZGVyUmVmJGN1cnJlbnQyIiwiYXhpc1Byb3BzIiwiaG9yaXpvbnRhbCIsInBlcmNlbnQiLCJsZWFwIiwicmlnaHQiLCJ2ZXJ0aWNhbCIsImJvdHRvbSIsIklkZW50aXR5IiwiY2FjaGVkU3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUiLCJkb2VzU3VwcG9ydFRvdWNoQWN0aW9uTm9uZSIsIkNTUyIsInVzZVNsaWRlciIsImFyaWFMYWJlbGxlZGJ5IiwiZGlzYWJsZVN3YXAiLCJtYXJrcyIsIm1hcmtzUHJvcCIsIm9uQ2hhbmdlQ29tbWl0dGVkIiwib3JpZW50YXRpb24iLCJzY2FsZSIsInRhYkluZGV4IiwidmFsdWVQcm9wIiwiaXNSdGwiLCJzZXRPcGVuIiwiZHJhZ2dpbmciLCJzZXREcmFnZ2luZyIsIm1vdmVDb3VudCIsInZhbHVlRGVyaXZlZCIsInNldFZhbHVlU3RhdGUiLCJ0aHVtYkluZGV4IiwiY2xvbmVkRXZlbnQiLCJtYXJrc1ZhbHVlcyIsImhhbmRsZUJsdXJWaXNpYmxlIiwiaGFuZGxlRm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwic2V0Rm9jdXNWaXNpYmxlIiwiaGFuZGxlRm9jdXNSZWYiLCJoYW5kbGVSZWYiLCJjcmVhdGVIYW5kbGVIaWRkZW5JbnB1dEZvY3VzIiwib3RoZXJIYW5kbGVycyIsIl9vdGhlckhhbmRsZXJzJG9uRm9jdSIsImNyZWF0ZUhhbmRsZUhpZGVuSW5wdXRCbHVyIiwiX290aGVySGFuZGxlcnMkb25CbHVyIiwiX2RvY3VtZW50JGFjdGl2ZUVsZW1lIiwiYmx1ciIsImNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Q2hhbmdlIiwiX290aGVySGFuZGxlcnMkb25DaGFuIiwibWFya3NJbmRleCIsInZhbHVlQXNOdW1iZXIiLCJjdXJyZW50TWFya0luZGV4IiwicHJldmlvdXNWYWx1ZSIsInByZXZpb3VzSW5kZXgiLCJheGlzIiwiZ2V0RmluZ2VyTmV3VmFsdWUiLCJmaW5nZXIiLCJtb3ZlIiwidmFsdWVzMiIsInNsaWRlciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBlcmNlbnRUb1ZhbHVlIiwibmVhcmVzdCIsIm51bSIsInRvRXhwb25lbnRpYWwiLCJtYXRpc3NhRGVjaW1hbFBhcnQiLCJkZWNpbWFsUGFydCIsImdldERlY2ltYWxQcmVjaXNpb24iLCJyb3VuZFZhbHVlVG9TdGVwIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlVG91Y2hFbmQiLCJzdG9wTGlzdGVuaW5nIiwiaGFuZGxlVG91Y2hTdGFydCIsImNyZWF0ZUhhbmRsZU1vdXNlRG93biIsIl9vdGhlckhhbmRsZXJzJG9uTW91cyIsIm9uTW91c2VEb3duIiwidHJhY2tPZmZzZXQiLCJ0cmFja0xlYXAiLCJjcmVhdGVIYW5kbGVNb3VzZU92ZXIiLCJfb3RoZXJIYW5kbGVycyRvbk1vdXMyIiwib25Nb3VzZU92ZXIiLCJjcmVhdGVIYW5kbGVNb3VzZUxlYXZlIiwiX290aGVySGFuZGxlcnMkb25Nb3VzMyIsIm9uTW91c2VMZWF2ZSIsImdldFJvb3RQcm9wcyIsIm1lcmdlZEV2ZW50SGFuZGxlcnMiLCJnZXRIaWRkZW5JbnB1dFByb3BzIiwiZ2V0VGh1bWJQcm9wcyIsIkZvcndhcmQiLCJTbGlkZXJVbnN0eWxlZCIsIl9jb21wb25lbnRzJFJhaWwiLCJfY29tcG9uZW50cyRUcmFjayIsIl9jb21wb25lbnRzJFRodW1iIiwiX2NvbXBvbmVudHMkVmFsdWVMYWJlIiwiX2NvbXBvbmVudHMkTWFyayIsIl9jb21wb25lbnRzJE1hcmtMYWJlbCIsImFyaWFMYWJlbCIsImFyaWFWYWx1ZXRleHQiLCJjbGFzc2VzUHJvcCIsImdldEFyaWFMYWJlbCIsImdldEFyaWFWYWx1ZVRleHQiLCJ2YWx1ZUxhYmVsRGlzcGxheSIsInZhbHVlTGFiZWxGb3JtYXQiLCJjb21wb25lbnRzUHJvcHMiLCJtYXJrZWQiLCJzb21lIiwiUm9vdCIsInJvb3RQcm9wcyIsIlJhaWwiLCJyYWlsUHJvcHMiLCJyYWlsIiwiVHJhY2siLCJ0cmFja1Byb3BzIiwidHJhY2tTdHlsZSIsIlRodW1iIiwidGh1bWJQcm9wcyIsInRodW1iIiwiVmFsdWVMYWJlbCIsInZhbHVlTGFiZWxQcm9wcyIsInZhbHVlTGFiZWwiLCJNYXJrIiwibWFya1Byb3BzIiwiTWFya0xhYmVsIiwibWFya0xhYmVsUHJvcHMiLCJtYXJrTGFiZWwiLCJJbnB1dCIsImhpZGRlbklucHV0UHJvcHMiLCJtYXJrQWN0aXZlIiwibWFya0xhYmVsQWN0aXZlIiwidXNlVXRpbGl0eUNsYXNzZXMiLCJWYWx1ZUxhYmVsQ29tcG9uZW50IiwicG9pbnRlckV2ZW50cyIsInJlc29sdmVQcm9wcyIsImdldFRoZW1lUHJvcHMiLCJpc0VtcHR5IiwicHJvcHNUb0NsYXNzS2V5IiwidmFyaWFudCIsImNsYXNzS2V5IiwiX2V4Y2x1ZGVkMyIsInJvb3RTaG91bGRGb3J3YXJkUHJvcCIsInNsb3RTaG91bGRGb3J3YXJkUHJvcCIsImlucHV0T3B0aW9ucyIsImNvbXBvbmVudFNsb3QiLCJza2lwVmFyaWFudHNSZXNvbHZlciIsImlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJza2lwU3giLCJpbnB1dFNraXBTeCIsIm92ZXJyaWRlc1Jlc29sdmVyIiwic2hvdWxkRm9yd2FyZFByb3BPcHRpb24iLCJkZWZhdWx0U3R5bGVkUmVzb2x2ZXIiLCJtdWlTdHlsZWRSZXNvbHZlciIsInN0eWxlQXJnIiwiZXhwcmVzc2lvbnMiLCJleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUiLCJzdHlsZXNBcmciLCJ0aGVtZUlucHV0IiwidHJhbnNmb3JtZWRTdHlsZUFyZyIsInN0eWxlT3ZlcnJpZGVzIiwiZ2V0U3R5bGVPdmVycmlkZXMiLCJyZXNvbHZlZFN0eWxlT3ZlcnJpZGVzIiwic2xvdEtleSIsInNsb3RTdHlsZSIsIl90aGVtZSRjb21wb25lbnRzIiwiX3RoZW1lJGNvbXBvbmVudHMkbmFtIiwidmFyaWFudHNTdHlsZXMiLCJ0aGVtZVZhcmlhbnRzIiwidGhlbWVWYXJpYW50IiwiaXNNYXRjaCIsInZhcmlhbnRzUmVzb2x2ZXIiLCJnZXRWYXJpYW50U3R5bGVzIiwibnVtT2ZDdXN0b21GbnNBcHBsaWVkIiwicGxhY2Vob2xkZXJzIiwiZmlsbCIsIndpdGhDb25maWciLCJTbG90Iiwic2xpZGVyQ2xhc3NlcyIsIlNsaWRlclJvb3QiLCJ0cmFja0ludmVydGVkIiwidHJhY2tGYWxzZSIsImJveFNpemluZyIsInRvdWNoQWN0aW9uIiwiV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3IiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5SaWdodCIsImNvbG9yQWRqdXN0IiwiU2xpZGVyUmFpbCIsImJhY2tncm91bmRDb2xvciIsIlNsaWRlclRyYWNrIiwiU2xpZGVyVGh1bWIiLCJvdXRsaW5lIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwiYm94U2hhZG93IiwiU2xpZGVyVmFsdWVMYWJlbCIsInZhbHVlTGFiZWxPcGVuIiwidHJhbnNmb3JtT3JpZ2luIiwiU2xpZGVyTWFyayIsIlNsaWRlck1hcmtMYWJlbCIsIl9jb21wb25lbnRzUHJvcHMkcm9vdCIsIl9jb21wb25lbnRzUHJvcHMkdGh1bSIsIl9jb21wb25lbnRzUHJvcHMkdHJhYyIsIl9jb21wb25lbnRzUHJvcHMkdmFsdSIsImV4dGVuZFV0aWxpdHlDbGFzc2VzIiwidXBkYXRlVGltZVJhbmdlIiwiUmVhY3QiLCJzZXRWYWx1ZXMiLCJuZXdOdW0iLCJob3VycyIsInJob3VycyIsIm1pbnV0ZXMiLCJybWludXRlcyIsImhvdXJzMiIsInJob3VyczIiLCJtaW51dGVzMiIsInJtaW51dGVzMiIsIkFtT3JQbTEiLCJBbU9yUG0yIiwiTm90Y2hlZE91dGxpbmVSb290IiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsIk5vdGNoZWRPdXRsaW5lTGVnZW5kIiwiZmxvYXQiLCJ2aXNpYmlsaXR5IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJub3RjaGVkIiwidXNlRm9ybUNvbnRyb2wiLCJmb3JtQ29udHJvbFN0YXRlIiwic3RhdGVzIiwibXVpRm9ybUNvbnRyb2wiLCJnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzIiwib3duZXJXaW5kb3ciLCJkZWJvdW5jZSIsIndhaXQiLCJkZWJvdW5jZWQiLCJnZXRTdHlsZVZhbHVlIiwiY29tcHV0ZWRTdHlsZSIsIlRleHRhcmVhQXV0b3NpemUiLCJtYXhSb3dzIiwibWluUm93cyIsImlucHV0UmVmIiwic2hhZG93UmVmIiwicmVuZGVycyIsInN5bmNIZWlnaHQiLCJnZXRDb21wdXRlZFN0eWxlIiwiaW5wdXRTaGFsbG93IiwicGxhY2Vob2xkZXIiLCJpbm5lckhlaWdodCIsInNjcm9sbEhlaWdodCIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0Iiwib3V0ZXJIZWlnaHRTdHlsZSIsInByZXZTdGF0ZSIsImhhbmRsZVJlc2l6ZSIsImNvbnRhaW5lcldpbmRvdyIsInJlc2l6ZU9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsInJvd3MiLCJHbG9iYWwiLCJzaGVldFJlZiIsInJlaHlkcmF0aW5nIiwic2hlZXRSZWZDdXJyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwia2V5ZnJhbWVzIiwiaW5zZXJ0YWJsZSIsIkdsb2JhbFN0eWxlcyIsImdsb2JhbFN0eWxlcyIsImhhc1ZhbHVlIiwiaXNGaWxsZWQiLCJTU1IiLCJnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3MiLCJyb290T3ZlcnJpZGVzUmVzb2x2ZXIiLCJmb3JtQ29udHJvbCIsInN0YXJ0QWRvcm5tZW50IiwiYWRvcm5lZFN0YXJ0IiwiZW5kQWRvcm5tZW50IiwiYWRvcm5lZEVuZCIsInNpemVTbWFsbCIsIm11bHRpbGluZSIsImZ1bGxXaWR0aCIsImhpZGRlbkxhYmVsIiwiaW5wdXRPdmVycmlkZXNSZXNvbHZlciIsImlucHV0U2l6ZVNtYWxsIiwiaW5wdXRNdWx0aWxpbmUiLCJpbnB1dFR5cGVTZWFyY2giLCJpbnB1dEFkb3JuZWRTdGFydCIsImlucHV0QWRvcm5lZEVuZCIsImlucHV0SGlkZGVuTGFiZWwiLCJJbnB1dEJhc2VSb290IiwicGFkZGluZ1RvcCIsIklucHV0QmFzZUNvbXBvbmVudCIsInBsYWNlaG9sZGVySGlkZGVuIiwicGxhY2Vob2xkZXJWaXNpYmxlIiwiZm9udCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiV2Via2l0QXBwZWFyYW5jZSIsIldlYmtpdFRleHRGaWxsQ29sb3IiLCJyZXNpemUiLCJNb3pBcHBlYXJhbmNlIiwiaW5wdXRHbG9iYWxTdHlsZXMiLCJJbnB1dEJhc2UiLCJhcmlhRGVzY3JpYmVkYnkiLCJhdXRvQ29tcGxldGUiLCJkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzIiwiaW5wdXRDb21wb25lbnQiLCJpbnB1dFByb3BzUHJvcCIsImlucHV0UmVmUHJvcCIsIm9uS2V5RG93biIsIm9uS2V5VXAiLCJyZW5kZXJTdWZmaXgiLCJoYW5kbGVJbnB1dFJlZldhcm5pbmciLCJoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCIsImhhbmRsZUlucHV0UmVmUHJvcCIsImhhbmRsZUlucHV0UmVmIiwic2V0Rm9jdXNlZCIsImZjcyIsIm9uRmlsbGVkIiwib25FbXB0eSIsImNoZWNrRGlydHkiLCJJbnB1dENvbXBvbmVudCIsInNldEFkb3JuZWRTdGFydCIsIm9uQW5pbWF0aW9uU3RhcnQiLCJPdXRsaW5lZElucHV0Um9vdCIsIm5vdGNoZWRPdXRsaW5lIiwiT3V0bGluZWRJbnB1dElucHV0IiwiV2Via2l0Qm94U2hhZG93IiwiY2FyZXRDb2xvciIsIk91dGxpbmVkSW5wdXQiLCJfUmVhY3QkRnJhZ21lbnQiLCJmaWxsZWQiLCJtdWlOYW1lIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiaW4iLCJleGl0IiwiZW50ZXIiLCJUcmFuc2l0aW9uR3JvdXAiLCJoYW5kbGVFeGl0ZWQiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwiX3QiLCJfdDIiLCJfdDMiLCJfdDQiLCJlbnRlcktleWZyYW1lIiwiZXhpdEtleWZyYW1lIiwicHVsc2F0ZUtleWZyYW1lIiwiVG91Y2hSaXBwbGVSb290IiwiVG91Y2hSaXBwbGVSaXBwbGUiLCJwdWxzYXRlIiwicmlwcGxlWCIsInJpcHBsZVkiLCJyaXBwbGVTaXplIiwiaW5Qcm9wIiwibGVhdmluZyIsInNldExlYXZpbmciLCJyaXBwbGVDbGFzc05hbWUiLCJyaXBwbGUiLCJyaXBwbGVWaXNpYmxlIiwicmlwcGxlUHVsc2F0ZSIsInJpcHBsZVN0eWxlcyIsImNoaWxkQ2xhc3NOYW1lIiwiY2hpbGRMZWF2aW5nIiwiY2hpbGRQdWxzYXRlIiwidGltZW91dElkIiwiVG91Y2hSaXBwbGUiLCJjZW50ZXIiLCJjZW50ZXJQcm9wIiwicmlwcGxlcyIsInNldFJpcHBsZXMiLCJyaXBwbGVDYWxsYmFjayIsImlnbm9yaW5nTW91c2VEb3duIiwic3RhcnRUaW1lciIsInN0YXJ0VGltZXJDb21taXQiLCJzdGFydENvbW1pdCIsIm9sZFJpcHBsZXMiLCJmYWtlRWxlbWVudCIsInNxcnQiLCJzaXplWCIsImNsaWVudFdpZHRoIiwic2l6ZVkiLCJjbGllbnRIZWlnaHQiLCJnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzIiwiQnV0dG9uQmFzZVJvb3QiLCJ1c2VyU2VsZWN0IiwidmVydGljYWxBbGlnbiIsIkJ1dHRvbkJhc2UiLCJjZW50ZXJSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJMaW5rQ29tcG9uZW50Iiwib25Db250ZXh0TWVudSIsIm9uRHJhZ0xlYXZlIiwib25Gb2N1c1Zpc2libGUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJUb3VjaFJpcHBsZVByb3BzIiwiYnV0dG9uUmVmIiwicmlwcGxlUmVmIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlQ29udGV4dE1lbnUiLCJoYW5kbGVEcmFnTGVhdmUiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImlzTm9uTmF0aXZlQnV0dG9uIiwia2V5ZG93blJlZiIsImhhbmRsZUtleVVwIiwiQ29tcG9uZW50UHJvcCIsImJ1dHRvblByb3BzIiwicm9sZSIsImhhbmRsZU93blJlZiIsIm1vdW50ZWRTdGF0ZSIsInNldE1vdW50ZWRTdGF0ZSIsImVuYWJsZVRvdWNoUmlwcGxlIiwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lIiwiY29tcG9zZWRDbGFzc2VzIiwiZ2V0TWVudUl0ZW1VdGlsaXR5Q2xhc3MiLCJNZW51SXRlbVJvb3QiLCJkZW5zZSIsImRpc2FibGVHdXR0ZXJzIiwiZ3V0dGVycyIsInBhZGRpbmdCb3R0b20iLCJiYWNrZ3JvdW5kQ2xpcCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJNZW51SXRlbSIsInRhYkluZGV4UHJvcCIsIm1lbnVJdGVtUmVmIiwibXVpTmFtZXMiLCJnZXRGb3JtQ29udHJvbFV0aWxpdHlDbGFzc2VzIiwiRm9ybUNvbnRyb2xSb290IiwiZmxleERpcmVjdGlvbiIsIkZvcm1Db250cm9sIiwidmlzdWFsbHlGb2N1c2VkIiwiaW5pdGlhbEFkb3JuZWRTdGFydCIsInNldEZpbGxlZCIsImluaXRpYWxGaWxsZWQiLCJmb2N1c2VkU3RhdGUiLCJyZWdpc3RlckVmZmVjdCIsImdldExpc3RVdGlsaXR5Q2xhc3MiLCJMaXN0Um9vdCIsImRpc2FibGVQYWRkaW5nIiwic3ViaGVhZGVyIiwibGlzdFN0eWxlIiwiTGlzdCIsImdldFNjcm9sbGJhclNpemUiLCJkb2N1bWVudFdpZHRoIiwiaW5uZXJXaWR0aCIsIm5leHRJdGVtIiwiZGlzYWJsZUxpc3RXcmFwIiwicHJldmlvdXNJdGVtIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInRleHRDcml0ZXJpYU1hdGNoZXMiLCJuZXh0Rm9jdXMiLCJ0ZXh0Q3JpdGVyaWEiLCJpbm5lclRleHQiLCJyZXBlYXRpbmciLCJtb3ZlRm9jdXMiLCJjdXJyZW50Rm9jdXMiLCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlIiwidHJhdmVyc2FsRnVuY3Rpb24iLCJ3cmFwcGVkT25jZSIsIm5leHRGb2N1c0Rpc2FibGVkIiwiTWVudUxpc3QiLCJhY3Rpb25zIiwiYXV0b0ZvY3VzSXRlbSIsImxpc3RSZWYiLCJ0ZXh0Q3JpdGVyaWFSZWYiLCJwcmV2aW91c0tleU1hdGNoZWQiLCJsYXN0VGltZSIsImFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyIiwiY29udGFpbmVyRWxlbWVudCIsIm5vRXhwbGljaXRXaWR0aCIsInNjcm9sbGJhclNpemUiLCJhY3RpdmVJdGVtSW5kZXgiLCJpdGVtcyIsIm5ld0NoaWxkUHJvcHMiLCJjcml0ZXJpYSIsImxvd2VyS2V5IiwiY3VyclRpbWUiLCJrZWVwRm9jdXNPbkN1cnJlbnQiLCJnZXRQYXBlclV0aWxpdHlDbGFzcyIsImdldE92ZXJsYXlBbHBoYSIsImVsZXZhdGlvbiIsImFscGhhVmFsdWUiLCJQYXBlclJvb3QiLCJzcXVhcmUiLCJyb3VuZGVkIiwiYmFja2dyb3VuZEltYWdlIiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsIlRyYW5zaXRpb24iLCJpbml0aWFsU3RhdHVzIiwiYXBwZWFyU3RhdHVzIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsIm5leHRDYWxsYmFjayIsInVwZGF0ZVN0YXR1cyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJub2RlUmVmIiwibWF5YmVOb2RlIiwibWF5YmVBcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsIm9uRW50ZXIiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwib25FbnRlcmVkIiwiX3RoaXMzIiwib25FeGl0Iiwib25FeGl0aW5nIiwic2V0TmV4dENhbGxiYWNrIiwiX3RoaXM0IiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwiX3JlZjMiLCJtYXliZU5leHRDYWxsYmFjayIsImNoaWxkUHJvcHMiLCJyZWZsb3ciLCJnZXRUcmFuc2l0aW9uUHJvcHMiLCJfc3R5bGUkdHJhbnNpdGlvbkR1cmEiLCJfc3R5bGUkdHJhbnNpdGlvblRpbWkiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJnZXRTY2FsZSIsImVudGVyaW5nIiwiZW50ZXJlZCIsIkdyb3ciLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwidGltZXIiLCJhdXRvVGltZW91dCIsImZvcmVpZ25SZWYiLCJub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrIiwibWF5YmVJc0FwcGVhcmluZyIsImhhbmRsZUVudGVyaW5nIiwiaGFuZGxlRW50ZXIiLCJpc0FwcGVhcmluZyIsImhhbmRsZUVudGVyZWQiLCJoYW5kbGVFeGl0aW5nIiwiaGFuZGxlRXhpdCIsIm11aVN1cHBvcnRBdXRvIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiZnVuY3MiLCJkaXNhYmxlUG9ydGFsIiwibW91bnROb2RlIiwic2V0TW91bnROb2RlIiwiZ2V0Q29udGFpbmVyIiwiYXJpYUhpZGRlbiIsInNob3ciLCJnZXRQYWRkaW5nUmlnaHQiLCJhcmlhSGlkZGVuU2libGluZ3MiLCJtb3VudEVsZW1lbnQiLCJjdXJyZW50RWxlbWVudCIsImVsZW1lbnRzVG9FeGNsdWRlIiwiYmxhY2tsaXN0VGFnTmFtZXMiLCJmaW5kSW5kZXhPZiIsImlkeCIsImNhbmRpZGF0ZXNTZWxlY3RvciIsImRlZmF1bHRHZXRUYWJiYWJsZSIsInJlZ3VsYXJUYWJOb2RlcyIsIm9yZGVyZWRUYWJOb2RlcyIsIm5vZGVUYWJJbmRleCIsInRhYmluZGV4QXR0ciIsImdldFRhYkluZGV4IiwiZ2V0UmFkaW8iLCJyb3ZpbmciLCJpc05vblRhYmJhYmxlUmFkaW8iLCJpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlIiwiZG9jdW1lbnRPcmRlciIsImRlZmF1bHRJc0VuYWJsZWQiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsImRpc2FibGVSZXN0b3JlRm9jdXMiLCJnZXRUYWJiYWJsZSIsImlzRW5hYmxlZCIsImlnbm9yZU5leHRFbmZvcmNlRm9jdXMiLCJzZW50aW5lbFN0YXJ0Iiwic2VudGluZWxFbmQiLCJub2RlVG9SZXN0b3JlIiwicmVhY3RGb2N1c0V2ZW50VGFyZ2V0IiwiYWN0aXZhdGVkIiwicm9vdFJlZiIsImxhc3RLZXlkb3duIiwiY29udGFpbiIsInJvb3RFbGVtZW50IiwiaGFzRm9jdXMiLCJ0YWJiYWJsZSIsIl9sYXN0S2V5ZG93biRjdXJyZW50IiwiX2xhc3RLZXlkb3duJGN1cnJlbnQyIiwiaXNTaGlmdFRhYiIsImZvY3VzTmV4dCIsImZvY3VzUHJldmlvdXMiLCJsb29wRm9jdXMiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImhhbmRsZUZvY3VzU2VudGluZWwiLCJjaGlsZHJlblByb3BzSGFuZGxlciIsImdldE1vZGFsVXRpbGl0eUNsYXNzIiwiZGVmYXVsdE1hbmFnZXIiLCJjb250YWluZXJzIiwibW9kYWxzIiwibW9kYWxJbmRleCIsIm1vZGFsUmVmIiwiaGlkZGVuU2libGluZ3MiLCJnZXRIaWRkZW5TaWJsaW5ncyIsIm1vdW50IiwiY29udGFpbmVySW5kZXgiLCJyZXN0b3JlIiwicmVzdG9yZVN0eWxlIiwiZGlzYWJsZVNjcm9sbExvY2siLCJpc092ZXJmbG93aW5nIiwiZWwiLCJwYXJlbnRFbGVtZW50Iiwic2Nyb2xsQ29udGFpbmVyIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwicmVtb3ZlUHJvcGVydHkiLCJoYW5kbGVDb250YWluZXIiLCJuZXh0VG9wIiwiaXNUb3BNb2RhbCIsIk1vZGFsVW5zdHlsZWQiLCJCYWNrZHJvcENvbXBvbmVudCIsIkJhY2tkcm9wUHJvcHMiLCJjbG9zZUFmdGVyVHJhbnNpdGlvbiIsImRpc2FibGVFc2NhcGVLZXlEb3duIiwiaGlkZUJhY2tkcm9wIiwia2VlcE1vdW50ZWQiLCJtYW5hZ2VyIiwib25CYWNrZHJvcENsaWNrIiwib25DbG9zZSIsIm9uVHJhbnNpdGlvbkVudGVyIiwib25UcmFuc2l0aW9uRXhpdGVkIiwiZXhpdGVkIiwic2V0RXhpdGVkIiwibW91bnROb2RlUmVmIiwiaGFzVHJhbnNpdGlvbiIsImdldEhhc1RyYW5zaXRpb24iLCJnZXRNb2RhbCIsImhhbmRsZU1vdW50ZWQiLCJoYW5kbGVPcGVuIiwicmVzb2x2ZWRDb250YWluZXIiLCJoYW5kbGVQb3J0YWxSZWYiLCJoYW5kbGVDbG9zZSIsImdldEJhY2tkcm9wVXRpbGl0eUNsYXNzIiwiaW52aXNpYmxlIiwiZGVmYXVsdFRpbWVvdXQiLCJGYWRlIiwidHJhbnNpdGlvblByb3BzIiwid2Via2l0VHJhbnNpdGlvbiIsIkJhY2tkcm9wUm9vdCIsIk1vZGFsUm9vdCIsImhpZGRlbiIsIk1vZGFsQmFja2Ryb3AiLCJiYWNrZHJvcCIsImNvbW1vblByb3BzIiwiZ2V0UG9wb3ZlclV0aWxpdHlDbGFzcyIsImdldE9mZnNldFRvcCIsImdldE9mZnNldExlZnQiLCJnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSIsInJlc29sdmVBbmNob3JFbCIsImFuY2hvckVsIiwiUG9wb3ZlclJvb3QiLCJQb3BvdmVyUGFwZXIiLCJhbmNob3JPcmlnaW4iLCJhbmNob3JQb3NpdGlvbiIsImFuY2hvclJlZmVyZW5jZSIsImNvbnRhaW5lclByb3AiLCJtYXJnaW5UaHJlc2hvbGQiLCJQYXBlclByb3BzIiwidHJhbnNpdGlvbkR1cmF0aW9uUHJvcCIsIlRyYW5zaXRpb25Qcm9wcyIsInBhcGVyUmVmIiwiaGFuZGxlUGFwZXJSZWYiLCJnZXRBbmNob3JPZmZzZXQiLCJyZXNvbHZlZEFuY2hvckVsIiwiYW5jaG9yUmVjdCIsImdldFRyYW5zZm9ybU9yaWdpbiIsImVsZW1SZWN0IiwiZ2V0UG9zaXRpb25pbmdTdHlsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZWxlbVRyYW5zZm9ybU9yaWdpbiIsImhlaWdodFRocmVzaG9sZCIsIndpZHRoVGhyZXNob2xkIiwiZGlmZiIsInNldFBvc2l0aW9uaW5nU3R5bGVzIiwicG9zaXRpb25pbmciLCJ1cGRhdGVQb3NpdGlvbiIsImdldE1lbnVVdGlsaXR5Q2xhc3MiLCJSVExfT1JJR0lOIiwiTFRSX09SSUdJTiIsIk1lbnVSb290IiwiTWVudVBhcGVyIiwiV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmciLCJNZW51TWVudUxpc3QiLCJkaXNhYmxlQXV0b0ZvY3VzSXRlbSIsIk1lbnVMaXN0UHJvcHMiLCJQb3BvdmVyQ2xhc3NlcyIsIm1lbnVMaXN0QWN0aW9uc1JlZiIsImdldE5hdGl2ZVNlbGVjdFV0aWxpdHlDbGFzc2VzIiwibmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzIiwiTmF0aXZlU2VsZWN0U2VsZWN0IiwibmF0aXZlU2VsZWN0SWNvblN0eWxlcyIsIk5hdGl2ZVNlbGVjdEljb24iLCJpY29uT3BlbiIsIkljb25Db21wb25lbnQiLCJnZXRTZWxlY3RVdGlsaXR5Q2xhc3NlcyIsIlNlbGVjdFNlbGVjdCIsInRleHRPdmVyZmxvdyIsIlNlbGVjdEljb24iLCJTZWxlY3ROYXRpdmVJbnB1dCIsIm5hdGl2ZUlucHV0IiwiYXJlRXF1YWxWYWx1ZXMiLCJTZWxlY3RJbnB1dCIsImF1dG9XaWR0aCIsImRlZmF1bHRPcGVuIiwiZGlzcGxheUVtcHR5IiwibGFiZWxJZCIsIk1lbnVQcm9wcyIsIm9uT3BlbiIsIm9wZW5Qcm9wIiwicmVuZGVyVmFsdWUiLCJTZWxlY3REaXNwbGF5UHJvcHMiLCJvcGVuU3RhdGUiLCJzZXRPcGVuU3RhdGUiLCJkaXNwbGF5UmVmIiwiZGlzcGxheU5vZGUiLCJzZXREaXNwbGF5Tm9kZSIsImlzT3BlbkNvbnRyb2xsZWQiLCJtZW51TWluV2lkdGhTdGF0ZSIsInNldE1lbnVNaW5XaWR0aFN0YXRlIiwiaGFuZGxlRGlzcGxheVJlZiIsImdldEVsZW1lbnRCeUlkIiwiaXNDb2xsYXBzZWQiLCJjaGlsZHJlbkFycmF5IiwiaGFuZGxlSXRlbUNsaWNrIiwiaXRlbUluZGV4IiwiZGlzcGxheVNpbmdsZSIsImRpc3BsYXlNdWx0aXBsZSIsImNvbXB1dGVEaXNwbGF5IiwiZm91bmRNYXRjaCIsIm1lbnVNaW5XaWR0aCIsImJ1dHRvbklkIiwiZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyIsIlN2Z0ljb25Sb290IiwiX3RoZW1lJHRyYW5zaXRpb25zIiwiX3RoZW1lJHRyYW5zaXRpb25zJGNyIiwiX3RoZW1lJHRyYW5zaXRpb25zMiIsIl90aGVtZSR0cmFuc2l0aW9uczIkZCIsIl90aGVtZSR0eXBvZ3JhcGh5IiwiX3RoZW1lJHR5cG9ncmFwaHkkcHhUIiwiX3RoZW1lJHR5cG9ncmFwaHkyIiwiX3RoZW1lJHR5cG9ncmFwaHkyJHB4IiwiX3RoZW1lJHR5cG9ncmFwaHkzIiwiX3RoZW1lJHR5cG9ncmFwaHkzJHB4IiwiX3RoZW1lJHBhbGV0dGUkb3duZXJTIiwiX3RoZW1lJHBhbGV0dGUiLCJfdGhlbWUkcGFsZXR0ZSRvd25lclMyIiwiX3RoZW1lJHBhbGV0dGUyIiwiX3RoZW1lJHBhbGV0dGUyJGFjdGlvIiwiX3RoZW1lJHBhbGV0dGUzIiwiX3RoZW1lJHBhbGV0dGUzJGFjdGlvIiwiaW5oZXJpdCIsIm1lZGl1bSIsImxhcmdlIiwiU3ZnSWNvbiIsImh0bWxDb2xvciIsImluaGVyaXRWaWV3Qm94IiwidGl0bGVBY2Nlc3MiLCJ2aWV3Qm94IiwibW9yZSIsImZvY3VzYWJsZSIsImNyZWF0ZVN2Z0ljb24iLCJnZXRJbnB1dFV0aWxpdHlDbGFzcyIsIklucHV0Um9vdCIsImRpc2FibGVVbmRlcmxpbmUiLCJ1bmRlcmxpbmUiLCJib3R0b21MaW5lQ29sb3IiLCJib3JkZXJCb3R0b21TdHlsZSIsIklucHV0SW5wdXQiLCJjb21wb25lbnRzUHJvcHNQcm9wIiwiaW5wdXRDb21wb25lbnRzUHJvcHMiLCJnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcyIsIkZpbGxlZElucHV0Um9vdCIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsIkZpbGxlZElucHV0SW5wdXQiLCJGaWxsZWRJbnB1dCIsImZpbGxlZElucHV0Q29tcG9uZW50c1Byb3BzIiwiX0lucHV0IiwiX0ZpbGxlZElucHV0IiwiU2VsZWN0IiwiQXJyb3dEcm9wRG93biIsIm5hdGl2ZSIsInZhcmlhbnRQcm9wcyIsIm91dGxpbmVkIiwiaW5wdXRDb21wb25lbnRSZWYiLCJnZXRDaGlwVXRpbGl0eUNsYXNzIiwiQ2hpcFJvb3QiLCJjbGlja2FibGUiLCJvbkRlbGV0ZSIsImF2YXRhciIsImRlbGV0ZUljb24iLCJkZWxldGFibGUiLCJkZWxldGVJY29uQ29sb3IiLCJDaGlwTGFiZWwiLCJpc0RlbGV0ZUtleWJvYXJkRXZlbnQiLCJrZXlib2FyZEV2ZW50IiwiYXZhdGFyUHJvcCIsImNsaWNrYWJsZVByb3AiLCJkZWxldGVJY29uUHJvcCIsImljb25Qcm9wIiwiY2hpcFJlZiIsImhhbmRsZURlbGV0ZUljb25DbGljayIsIm1vcmVQcm9wcyIsImN1c3RvbUNsYXNzZXMiLCJkZWxldGVJY29uU21hbGwiLCJJVEVNX0hFSUdIVCIsImdldFN0eWxlcyIsInBlcnNvbk5hbWUiLCJzZXRJdGVtcyIsInVzZVRoZW1lIiwiY2hvc2VuSXRlbSIsInNldENob3Nlbkl0ZW0iLCJmbGV4V3JhcCIsInNlYXJjaFRlcm0iLCJtZWV0aW5nRm9ybWF0IiwidGltZVJhbmdlIiwidXBkYXRlU2VhcmNoVGVybSIsImRheXMiLCJtZWV0aW5nRnJlcXVlbmNpZXMiLCJ1cGRhdGVTdWJqZWN0IiwidXBkYXRlTWVldGluZ0Zvcm1hdCIsInVwZGF0ZVR5cGUiLCJ1cGRhdGVEYXlzIiwidXBkYXRlTWVldGluZ0ZyZXF1ZW5jaWVzIiwic3VibWl0U2VhcmNoIiwiTWVldGluZ0Zvcm1hdHMiLCJzZXRTZWFyY2hUZXJtIiwic2V0TWVldGluZ0Zvcm1hdCIsInNldFR5cGUiLCJzZXRUaW1lUmFuZ2UiLCJzZXREYXlzIiwic2V0TWVldGluZ0ZyZXF1ZW5jaWVzIiwic2hvd0pvaW5TdHVkeUdyb3VwUG9wdXAiLCJzY2hlZHVsZSIsInNldEhhc05vdE1vdW50ZWQiLCJwb3B1cElzU2hvd2luZyIsIm5vdGlmaWNhdGlvbklzU2hvd2luZyIsInVwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4iLCJhY2NvdW50U2V0dXBWaWV3Iiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5Iiwic3ltIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50IiwidGh1bmsiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImN1cnJlbnREYXRlIiwiand0RXhwaXJhdGlvbkRhdGUiLCJpbml0aWFsU3RhdGUiLCJhbGxSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImNvbWJpbmVSZWR1Y2VycyIsInNldEl0ZW0iLCJwZXJzaXN0aWVudFN0YXRlIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsImNvbXBvc2UiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiYXBwbHlNaWRkbGV3YXJlIiwiUmVhY3RET00iXSwic291cmNlUm9vdCI6IiJ9