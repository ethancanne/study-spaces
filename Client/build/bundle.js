/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={5318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},1859:(e,t,n)=>{"use strict";n.d(t,{Z:()=>re});var r=n(1526),o=Math.abs,i=String.fromCharCode,a=Object.assign;function s(e){return e.trim()}function l(e,t,n){return e.replace(t,n)}function u(e,t){return e.indexOf(t)}function c(e,t){return 0|e.charCodeAt(t)}function d(e,t,n){return e.slice(t,n)}function p(e){return e.length}function f(e){return e.length}function h(e,t){return t.push(e),e}var m=1,g=1,y=0,v=0,b=0,A="";function C(e,t,n,r,o,i,a){return{value:e,root:t,parent:n,type:r,props:o,children:i,line:m,column:g,length:a,return:""}}function w(e,t){return a(C("",null,null,"",null,null,0),e,{length:-e.length},t)}function x(){return b=v>0?c(A,--v):0,g--,10===b&&(g=1,m--),b}function E(){return b=v<y?c(A,v++):0,g++,10===b&&(g=1,m++),b}function k(){return c(A,v)}function S(){return v}function B(e,t){return d(A,e,t)}function O(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function T(e){return m=g=1,y=p(A=e),v=0,[]}function D(e){return A="",e}function N(e){return s(B(v-1,R(91===e?e+2:40===e?e+1:e)))}function P(e){for(;(b=k())&&b<33;)E();return O(e)>2||O(b)>3?"":" "}function I(e,t){for(;--t&&E()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return B(e,S()+(t<6&&32==k()&&32==E()))}function R(e){for(;E();)switch(b){case e:return v;case 34:case 39:34!==e&&39!==e&&R(b);break;case 40:41===e&&R(e);break;case 92:E()}return v}function _(e,t){for(;E()&&e+b!==57&&(e+b!==84||47!==k()););return"/*"+B(t,v-1)+"*"+i(47===e?e:E())}function M(e){for(;!O(k());)E();return B(e,v)}var Z="-ms-",j="-moz-",z="-webkit-",L="comm",F="rule",U="decl",Y="@keyframes";function $(e,t){for(var n="",r=f(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function W(e,t,n,r){switch(e.type){case"@import":case U:return e.return=e.return||e.value;case L:return"";case Y:return e.return=e.value+"{"+$(e.children,r)+"}";case F:e.value=e.props.join(",")}return p(n=$(e.children,r))?e.return=e.value+"{"+n+"}":""}function V(e,t){switch(function(e,t){return(((t<<2^c(e,0))<<2^c(e,1))<<2^c(e,2))<<2^c(e,3)}(e,t)){case 5103:return z+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return z+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return z+e+j+e+Z+e+e;case 6828:case 4268:return z+e+Z+e+e;case 6165:return z+e+Z+"flex-"+e+e;case 5187:return z+e+l(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return z+e+Z+"flex-item-"+l(e,/flex-|-self/,"")+e;case 4675:return z+e+Z+"flex-line-pack"+l(e,/align-content|flex-|-self/,"")+e;case 5548:return z+e+Z+l(e,"shrink","negative")+e;case 5292:return z+e+Z+l(e,"basis","preferred-size")+e;case 6060:return z+"box-"+l(e,"-grow","")+z+e+Z+l(e,"grow","positive")+e;case 4554:return z+l(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return l(l(l(e,/(zoom-|grab)/,z+"$1"),/(image-set)/,z+"$1"),e,"")+e;case 5495:case 3959:return l(e,/(image-set\([^]*)/,z+"$1$`$1");case 4968:return l(l(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+z+e+e;case 4095:case 3583:case 4068:case 2532:return l(e,/(.+)-inline(.+)/,z+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(p(e)-1-t>6)switch(c(e,t+1)){case 109:if(45!==c(e,t+4))break;case 102:return l(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+j+(108==c(e,t+3)?"$3":"$2-$3"))+e;case 115:return~u(e,"stretch")?V(l(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==c(e,t+1))break;case 6444:switch(c(e,p(e)-3-(~u(e,"!important")&&10))){case 107:return l(e,":",":"+z)+e;case 101:return l(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+z+(45===c(e,14)?"inline-":"")+"box$3$1"+z+"$2$3$1"+Z+"$2box$3")+e}break;case 5936:switch(c(e,t+11)){case 114:return z+e+Z+l(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return z+e+Z+l(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return z+e+Z+l(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return z+e+Z+e+e}return e}function q(e){return D(G("",null,null,null,[""],e=T(e),0,[0],e))}function G(e,t,n,r,o,a,s,c,d){for(var f=0,m=0,g=s,y=0,v=0,b=0,A=1,C=1,w=1,B=0,O="",T=o,D=a,R=r,Z=O;C;)switch(b=B,B=E()){case 40:if(108!=b&&58==Z.charCodeAt(g-1)){-1!=u(Z+=l(N(B),"&","&\f"),"&\f")&&(w=-1);break}case 34:case 39:case 91:Z+=N(B);break;case 9:case 10:case 13:case 32:Z+=P(b);break;case 92:Z+=I(S()-1,7);continue;case 47:switch(k()){case 42:case 47:h(Q(_(E(),S()),t,n),d);break;default:Z+="/"}break;case 123*A:c[f++]=p(Z)*w;case 125*A:case 59:case 0:switch(B){case 0:case 125:C=0;case 59+m:v>0&&p(Z)-g&&h(v>32?K(Z+";",r,n,g-1):K(l(Z," ","")+";",r,n,g-2),d);break;case 59:Z+=";";default:if(h(R=H(Z,t,n,f,m,o,c,O,T=[],D=[],g),a),123===B)if(0===m)G(Z,t,R,R,T,a,g,c,D);else switch(y){case 100:case 109:case 115:G(e,R,R,r&&h(H(e,R,R,0,0,o,c,O,o,T=[],g),D),o,D,g,c,r?T:D);break;default:G(Z,R,R,R,[""],D,0,c,D)}}f=m=v=0,A=w=1,O=Z="",g=s;break;case 58:g=1+p(Z),v=b;default:if(A<1)if(123==B)--A;else if(125==B&&0==A++&&125==x())continue;switch(Z+=i(B),B*A){case 38:w=m>0?1:(Z+="\f",-1);break;case 44:c[f++]=(p(Z)-1)*w,w=1;break;case 64:45===k()&&(Z+=N(E())),y=k(),m=g=p(O=Z+=M(S())),B++;break;case 45:45===b&&2==p(Z)&&(A=0)}}return a}function H(e,t,n,r,i,a,u,c,p,h,m){for(var g=i-1,y=0===i?a:[""],v=f(y),b=0,A=0,w=0;b<r;++b)for(var x=0,E=d(e,g+1,g=o(A=u[b])),k=e;x<v;++x)(k=s(A>0?y[x]+" "+E:l(E,/&\f/g,y[x])))&&(p[w++]=k);return C(e,t,n,0===i?F:c,p,h,m)}function Q(e,t,n){return C(e,t,n,L,i(b),d(e,2,-2),0)}function K(e,t,n,r){return C(e,t,n,U,d(e,0,r),d(e,r+1,-1),r)}var X=function(e,t,n){for(var r=0,o=0;r=o,o=k(),38===r&&12===o&&(t[n]=1),!O(o);)E();return B(e,v)},J=new WeakMap,ee=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||J.get(n))&&!r){J.set(e,!0);for(var o=[],a=function(e,t){return D(function(e,t){var n=-1,r=44;do{switch(O(r)){case 0:38===r&&12===k()&&(t[n]=1),e[n]+=X(v-1,t,n);break;case 2:e[n]+=N(r);break;case 4:if(44===r){e[++n]=58===k()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=i(r)}}while(r=E());return e}(T(e),t))}(t,o),s=n.props,l=0,u=0;l<a.length;l++)for(var c=0;c<s.length;c++,u++)e.props[u]=o[l]?a[l].replace(/&\f/g,s[c]):s[c]+" "+a[l]}}},te=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case U:e.return=V(e.value,e.length);break;case Y:return $([w(e,{value:l(e.value,"@","@"+z)})],r);case F:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return $([w(e,{props:[l(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return $([w(e,{props:[l(t,/:(plac\w+)/,":-webkit-input-$1")]}),w(e,{props:[l(t,/:(plac\w+)/,":-moz-$1")]}),w(e,{props:[l(t,/:(plac\w+)/,Z+"input-$1")]})],r)}return""}))}}];const re=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,i,a=e.stylisPlugins||ne,s={},l=[];o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)s[t[n]]=!0;l.push(e)}));var u,c,d,p,h=[W,(p=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&p(e)})],m=(c=[ee,te].concat(a,h),d=f(c),function(e,t,n,r){for(var o="",i=0;i<d;i++)o+=c[i](e,t,n,r)||"";return o});i=function(e,t,n,r){u=n,$(q(e?e+"{"+t.styles+"}":t.styles),m),r&&(g.inserted[t.name]=!0)};var g={key:t,sheet:new r.m({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:s,registered:{},insert:i};return g.sheet.hydrate(l),g}},7866:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}},5638:(e,t,n)=>{"use strict";n.d(t,{T:()=>s,w:()=>a});var r=n(7294),o=n(1859),i=(n(4199),(0,r.createContext)("undefined"!=typeof HTMLElement?(0,o.Z)({key:"css"}):null));i.Provider;var a=function(e){return(0,r.forwardRef)((function(t,n){var o=(0,r.useContext)(i);return e(t,o,n)}))},s=(0,r.createContext)({})},4199:(e,t,n)=>{"use strict";n.d(t,{O:()=>m});const r=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},o={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var i=n(7866),a=/[A-Z]|^ms/g,s=/_EMO_([^_]+?)_([^]*?)_EMO_/g,l=function(e){return 45===e.charCodeAt(1)},u=function(e){return null!=e&&"boolean"!=typeof e},c=(0,i.Z)((function(e){return l(e)?e:e.replace(a,"-$&").toLowerCase()})),d=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(s,(function(e,t,n){return f={name:t,styles:n,next:f},t}))}return 1===o[e]||l(e)||"number"!=typeof t||0===t?t:t+"px"};function p(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return f={name:n.name,styles:n.styles,next:f},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)f={name:r.name,styles:r.styles,next:f},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=p(e,t,n[o])+";";else for(var i in n){var a=n[i];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=i+"{"+t[a]+"}":u(a)&&(r+=c(i)+":"+d(i,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=p(e,t,a);switch(i){case"animation":case"animationName":r+=c(i)+":"+s+";";break;default:r+=i+"{"+s+"}"}}else for(var l=0;l<a.length;l++)u(a[l])&&(r+=c(i)+":"+d(i,a[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=f,i=n(e);return f=o,p(e,t,i)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var f,h=/label:\s*([^\s;\n{]+)\s*(;|$)/g,m=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var o=!0,i="";f=void 0;var a=e[0];null==a||void 0===a.raw?(o=!1,i+=p(n,t,a)):i+=a[0];for(var s=1;s<e.length;s++)i+=p(n,t,e[s]),o&&(i+=a[s]);h.lastIndex=0;for(var l,u="";null!==(l=h.exec(i));)u+="-"+l[1];return{name:r(i)+u,styles:i,next:f}}},1526:(e,t,n)=>{"use strict";n.d(t,{m:()=>r});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}()},444:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}n.d(t,{f:()=>r,M:()=>o});var o=function(e,t,n){var r=e.key+"-"+t.name;if(!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles),void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}}},7192:(e,t,n)=>{"use strict";function r(e,t,n){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>(r&&(n&&n[r]&&e.push(n[r]),e.push(t(r))),e)),[]).join(" ")})),r}n.d(t,{Z:()=>r})},9981:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const r=e=>e,o=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})()},8979:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(9981);const o={active:"Mui-active",checked:"Mui-checked",completed:"Mui-completed",disabled:"Mui-disabled",error:"Mui-error",expanded:"Mui-expanded",focused:"Mui-focused",focusVisible:"Mui-focusVisible",required:"Mui-required",selected:"Mui-selected"};function i(e,t){return o[t]||`${r.Z.generate(e)}-${t}`}},6087:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(8979);function o(e,t){const n={};return t.forEach((t=>{n[t]=(0,r.Z)(e,t)})),n}},9584:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M18 11v2h4v-2h-4zm-2 6.61c.96.71 2.21 1.65 3.2 2.39.4-.53.8-1.07 1.2-1.6-.99-.74-2.24-1.68-3.2-2.4-.4.54-.8 1.08-1.2 1.61zM20.4 5.6c-.4-.53-.8-1.07-1.2-1.6-.99.74-2.24 1.68-3.2 2.4.4.53.8 1.07 1.2 1.6.96-.72 2.21-1.65 3.2-2.4zM4 9c-1.1 0-2 .9-2 2v2c0 1.1.9 2 2 2h1v4h2v-4h1l5 3V6L8 9H4zm11.5 3c0-1.33-.58-2.53-1.5-3.35v6.69c.92-.81 1.5-2.01 1.5-3.34z"}),"Campaign");t.Z=a},4603:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"}),"Comment");t.Z=a},9572:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"}),"Error");t.Z=a},3570:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M17 10H7v2h10v-2zm2-7h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zm-5-5H7v2h7v-2z"}),"EventNote");t.Z=a},3094:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(4938)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M11.07 12.85c.77-1.39 2.25-2.21 3.11-3.44.91-1.29.4-3.7-2.18-3.7-1.69 0-2.52 1.28-2.87 2.34L6.54 6.96C7.25 4.83 9.18 3 11.99 3c2.35 0 3.96 1.07 4.78 2.41.7 1.15 1.11 3.3.03 4.9-1.2 1.77-2.35 2.31-2.97 3.45-.25.46-.35.76-.35 2.24h-2.89c-.01-.78-.13-2.05.48-3.15zM14 20c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2z"}),"QuestionMark");t.Z=a},4938:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(5637)},3023:(e,t)=>{"use strict";if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},6607:(e,t,n)=>{"use strict";n(3023)},4345:(e,t,n)=>{"use strict";n.d(t,{Z:()=>ne});var r=n(7462),o=n(3366),i=n(9766),a=n(4869),s=n(1387),l=n(1796);const u={black:"#000",white:"#fff"},c={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},d="#f3e5f5",p="#ce93d8",f="#ba68c8",h="#ab47bc",m="#9c27b0",g="#7b1fa2",y="#e57373",v="#ef5350",b="#f44336",A="#d32f2f",C="#c62828",w="#ffb74d",x="#ffa726",E="#ff9800",k="#f57c00",S="#e65100",B="#e3f2fd",O="#90caf9",T="#42a5f5",D="#1976d2",N="#1565c0",P="#4fc3f7",I="#29b6f6",R="#03a9f4",_="#0288d1",M="#01579b",Z="#81c784",j="#66bb6a",z="#4caf50",L="#388e3c",F="#2e7d32",U="#1b5e20",Y=["mode","contrastThreshold","tonalOffset"],$={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:u.white,default:u.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},W={text:{primary:u.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:u.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function V(e,t,n,r){const o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,l.$n)(e.main,o):"dark"===t&&(e.dark=(0,l._j)(e.main,i)))}const q=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],G={textTransform:"uppercase"},H='"Roboto", "Helvetica", "Arial", sans-serif';function Q(e,t){const n="function"==typeof t?t(e):t,{fontFamily:a=H,fontSize:s=14,fontWeightLight:l=300,fontWeightRegular:u=400,fontWeightMedium:c=500,fontWeightBold:d=700,htmlFontSize:p=16,allVariants:f,pxToRem:h}=n,m=(0,o.Z)(n,q),g=s/14,y=h||(e=>e/p*g+"rem"),v=(e,t,n,o,i)=>{return(0,r.Z)({fontFamily:a,fontWeight:e,fontSize:y(t),lineHeight:n},a===H?{letterSpacing:(s=o/t,Math.round(1e5*s)/1e5+"em")}:{},i,f);var s},b={h1:v(l,96,1.167,-1.5),h2:v(l,60,1.2,-.5),h3:v(u,48,1.167,0),h4:v(u,34,1.235,.25),h5:v(u,24,1.334,0),h6:v(c,20,1.6,.15),subtitle1:v(u,16,1.75,.15),subtitle2:v(c,14,1.57,.1),body1:v(u,16,1.5,.15),body2:v(u,14,1.43,.15),button:v(c,14,1.75,.4,G),caption:v(u,12,1.66,.4),overline:v(u,12,2.66,1,G)};return(0,i.Z)((0,r.Z)({htmlFontSize:p,pxToRem:y,fontFamily:a,fontSize:s,fontWeightLight:l,fontWeightRegular:u,fontWeightMedium:c,fontWeightBold:d},b),m,{clone:!1})}function K(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const X=["none",K(0,2,1,-1,0,1,1,0,0,1,3,0),K(0,3,1,-2,0,2,2,0,0,1,5,0),K(0,3,3,-2,0,3,4,0,0,1,8,0),K(0,2,4,-1,0,4,5,0,0,1,10,0),K(0,3,5,-1,0,5,8,0,0,1,14,0),K(0,3,5,-1,0,6,10,0,0,1,18,0),K(0,4,5,-2,0,7,10,1,0,2,16,1),K(0,5,5,-3,0,8,10,1,0,3,14,2),K(0,5,6,-3,0,9,12,1,0,3,16,2),K(0,6,6,-3,0,10,14,1,0,4,18,3),K(0,6,7,-4,0,11,15,1,0,4,20,3),K(0,7,8,-4,0,12,17,2,0,5,22,4),K(0,7,8,-4,0,13,19,2,0,5,24,4),K(0,7,9,-4,0,14,21,2,0,5,26,4),K(0,8,9,-5,0,15,22,2,0,6,28,5),K(0,8,10,-5,0,16,24,2,0,6,30,5),K(0,8,11,-5,0,17,26,2,0,6,32,5),K(0,9,11,-5,0,18,28,2,0,7,34,6),K(0,9,12,-6,0,19,29,2,0,7,36,6),K(0,10,13,-6,0,20,31,3,0,8,38,7),K(0,10,13,-6,0,21,33,3,0,8,40,7),K(0,10,14,-6,0,22,35,3,0,8,42,7),K(0,11,14,-7,0,23,36,3,0,9,44,8),K(0,11,15,-7,0,24,38,3,0,9,46,8)];var J=n(6067);const ee={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},te=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const ne=function(e={},...t){const{mixins:n={},palette:q={},transitions:G={},typography:H={}}=e,K=(0,o.Z)(e,te),ne=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:a=.2}=e,q=(0,o.Z)(e,Y),G=e.primary||function(e="light"){return"dark"===e?{main:O,light:B,dark:T}:{main:D,light:T,dark:N}}(t),H=e.secondary||function(e="light"){return"dark"===e?{main:p,light:d,dark:h}:{main:m,light:f,dark:g}}(t),Q=e.error||function(e="light"){return"dark"===e?{main:b,light:y,dark:A}:{main:A,light:v,dark:C}}(t),K=e.info||function(e="light"){return"dark"===e?{main:I,light:P,dark:_}:{main:_,light:R,dark:M}}(t),X=e.success||function(e="light"){return"dark"===e?{main:j,light:Z,dark:L}:{main:F,light:z,dark:U}}(t),J=e.warning||function(e="light"){return"dark"===e?{main:x,light:w,dark:k}:{main:"#ed6c02",light:E,dark:S}}(t);function ee(e){return(0,l.mi)(e,W.text.primary)>=n?W.text.primary:$.text.primary}const te=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:i=700})=>{if(!(e=(0,r.Z)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,s.Z)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,s.Z)(12,t?` (${t})`:"",JSON.stringify(e.main)));return V(e,"light",o,a),V(e,"dark",i,a),e.contrastText||(e.contrastText=ee(e.main)),e},ne={dark:W,light:$};return(0,i.Z)((0,r.Z)({common:u,mode:t,primary:te({color:G,name:"primary"}),secondary:te({color:H,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:te({color:Q,name:"error"}),warning:te({color:J,name:"warning"}),info:te({color:K,name:"info"}),success:te({color:X,name:"success"}),grey:c,contrastThreshold:n,getContrastText:ee,augmentColor:te,tonalOffset:a},ne[t]),q)}(q),re=(0,a.Z)(e);let oe=(0,i.Z)(re,{mixins:(ie=re.breakpoints,re.spacing,ae=n,(0,r.Z)({toolbar:{minHeight:56,[`${ie.up("xs")} and (orientation: landscape)`]:{minHeight:48},[ie.up("sm")]:{minHeight:64}}},ae)),palette:ne,shadows:X.slice(),typography:Q(ne,H),transitions:(0,J.ZP)(G),zIndex:(0,r.Z)({},ee)});var ie,ae;return oe=(0,i.Z)(oe,K),oe=t.reduce(((e,t)=>(0,i.Z)(e,t)),oe),oe}},6067:(e,t,n)=>{"use strict";n.d(t,{x9:()=>s,ZP:()=>c});var r=n(3366),o=n(7462);const i=["duration","easing","delay"],a={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},s={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function l(e){return`${Math.round(e)}ms`}function u(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function c(e){const t=(0,o.Z)({},a,e.easing),n=(0,o.Z)({},s,e.duration);return(0,o.Z)({getAutoHeightDuration:u,create:(e=["all"],o={})=>{const{duration:a=n.standard,easing:s=t.easeInOut,delay:u=0}=o;return(0,r.Z)(o,i),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:l(a)} ${s} ${"string"==typeof u?u:l(u)}`)).join(",")}},e,{easing:t,duration:n})}},247:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(4345).Z)()},9602:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>w,FO:()=>b,Dz:()=>A});var r=n(7462),o=n(3366),i=n(9868),a=n(4869),s=n(6523),l=n(8320);const u=["variant"];function c(e){return 0===e.length}function d(e){const{variant:t}=e,n=(0,o.Z)(e,u);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?c(r)?e[t]:(0,l.Z)(e[t]):`${c(r)?t:(0,l.Z)(t)}${(0,l.Z)(e[t].toString())}`})),r}const p=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],f=["theme"],h=["theme"];function m(e){return 0===Object.keys(e).length}function g(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const y=(0,a.Z)();var v=n(247);const b=e=>g(e)&&"classes"!==e,A=g,C=function(e={}){const{defaultTheme:t=y,rootShouldForwardProp:n=g,slotShouldForwardProp:a=g}=e;return(e,l={})=>{const{name:u,slot:c,skipVariantsResolver:y,skipSx:v,overridesResolver:b}=l,A=(0,o.Z)(l,p),C=void 0!==y?y:c&&"Root"!==c||!1,w=v||!1;let x=g;"Root"===c?x=n:c&&(x=a);const E=(0,i.ZP)(e,(0,r.Z)({shouldForwardProp:x,label:void 0},A)),k=(e,...n)=>{const i=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:i}=n,a=(0,o.Z)(n,f);return e((0,r.Z)({theme:m(i)?t:i},a))}:e)):[];let a=e;u&&b&&i.push((e=>{const n=m(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(u,n);if(r){const t={};return Object.entries(r).forEach((([n,r])=>{t[n]="function"==typeof r?r(e):r})),b(e,t)}return null})),u&&!C&&i.push((e=>{const n=m(e.theme)?t:e.theme;return((e,t,n,r)=>{var o,i;const{ownerState:a={}}=e,s=[],l=null==n||null==(o=n.components)||null==(i=o[r])?void 0:i.variants;return l&&l.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{a[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&s.push(t[d(n.props)])})),s})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=d(e.props);r[t]=e.style})),r})(u,n),n,u)})),w||i.push((e=>{const n=m(e.theme)?t:e.theme;return(0,s.Z)((0,r.Z)({},e,{theme:n}))}));const l=i.length-n.length;if(Array.isArray(e)&&l>0){const t=new Array(l).fill("");a=[...e,...t],a.raw=[...e.raw,...t]}else"function"==typeof e&&(a=n=>{let{theme:i}=n,a=(0,o.Z)(n,h);return e((0,r.Z)({theme:m(i)?t:i},a))});return E(a,...i)};return E.withConfig&&(k.withConfig=E.withConfig),k}}({defaultTheme:v.Z,rootShouldForwardProp:b}),w=C},4368:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7462);var o=n(7878),i=n(247);function a({props:e,name:t}){return function({props:e,name:t,defaultTheme:n}){return function(e){const{theme:t,name:n,props:o}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?function(e,t){const n=(0,r.Z)({},t);return Object.keys(e).forEach((t=>{void 0===n[t]&&(n[t]=e[t])})),n}(t.components[n].defaultProps,o):o}({theme:(0,o.Z)(n),name:t,props:e})}({props:e,name:t,defaultTheme:i.Z})}},8216:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(8320).Z},5949:(e,t,n)=>{"use strict";n.d(t,{Z:()=>v});var r=n(7462),o=n(7294),i=n(3366),a=(n(5697),n(6010)),s=n(7192),l=n(8216),u=n(4368),c=n(9602),d=n(8979);function p(e){return(0,d.Z)("MuiSvgIcon",e)}(0,n(6087).Z)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var f=n(5893);const h=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],m=(0,c.ZP)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${(0,l.Z)(n.color)}`],t[`fontSize${(0,l.Z)(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,r,o,i,a,s,l,u,c,d,p,f,h,m,g,y,v;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(o=e.transitions)||null==(i=o.duration)?void 0:i.shorter}),fontSize:{inherit:"inherit",small:(null==(a=e.typography)||null==(s=a.pxToRem)?void 0:s.call(a,20))||"1.25rem",medium:(null==(l=e.typography)||null==(u=l.pxToRem)?void 0:u.call(l,24))||"1.5rem",large:(null==(c=e.typography)||null==(d=c.pxToRem)?void 0:d.call(c,35))||"2.1875"}[t.fontSize],color:null!=(p=null==(f=e.palette)||null==(h=f[t.color])?void 0:h.main)?p:{action:null==(m=e.palette)||null==(g=m.action)?void 0:g.active,disabled:null==(y=e.palette)||null==(v=y.action)?void 0:v.disabled,inherit:void 0}[t.color]}})),g=o.forwardRef((function(e,t){const n=(0,u.Z)({props:e,name:"MuiSvgIcon"}),{children:o,className:c,color:d="inherit",component:g="svg",fontSize:y="medium",htmlColor:v,inheritViewBox:b=!1,titleAccess:A,viewBox:C="0 0 24 24"}=n,w=(0,i.Z)(n,h),x=(0,r.Z)({},n,{color:d,component:g,fontSize:y,inheritViewBox:b,viewBox:C}),E={};b||(E.viewBox=C);const k=(e=>{const{color:t,fontSize:n,classes:r}=e,o={root:["root","inherit"!==t&&`color${(0,l.Z)(t)}`,`fontSize${(0,l.Z)(n)}`]};return(0,s.Z)(o,p,r)})(x);return(0,f.jsxs)(m,(0,r.Z)({as:g,className:(0,a.Z)(k.root,c),ownerState:x,focusable:"false",color:v,"aria-hidden":!A||void 0,role:A?"img":void 0,ref:t},E,w,{children:[o,A?(0,f.jsx)("title",{children:A}):null]}))}));g.muiName="SvgIcon";const y=g;function v(e,t){const n=(n,o)=>(0,f.jsx)(y,(0,r.Z)({"data-testid":`${t}Icon`,ref:o},n,{children:e}));return n.muiName=y.muiName,o.memo(o.forwardRef(n))}},7144:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7596).Z},5637:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>r.Z,createChainedFunction:()=>o,createSvgIcon:()=>i.Z,debounce:()=>a.Z,deprecatedPropType:()=>s,isMuiElement:()=>l.Z,ownerDocument:()=>u.Z,ownerWindow:()=>c.Z,requirePropFactory:()=>d,setRef:()=>p,unstable_ClassNameGenerator:()=>w.Z,unstable_useEnhancedEffect:()=>f.Z,unstable_useId:()=>g,unsupportedProp:()=>y,useControlled:()=>v.Z,useEventCallback:()=>b.Z,useForkRef:()=>A.Z,useIsFocusVisible:()=>C.Z});var r=n(8216);const o=n(9064).Z;var i=n(5949),a=n(7144);const s=function(e,t){return()=>null};var l=n(8502),u=n(8038),c=n(5340);n(7462);const d=function(e,t){return()=>null},p=n(7960).Z;var f=n(8974),h=n(7294);let m=0;const g=function(e){const[t,n]=h.useState(e),r=e||t;return h.useEffect((()=>{null==t&&(m+=1,n(`mui-${m}`))}),[t]),r},y=function(e,t,n,r,o){return null};var v=n(9299),b=n(2068),A=n(1705),C=n(9674),w=n(9981)},8502:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);const o=function(e,t){return r.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}},8038:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7094).Z},5340:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(8290).Z},9299:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(8925).Z},8974:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(6600).Z},2068:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(3633).Z},1705:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(67).Z},9674:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(9962).Z},9868:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>v});var r=n(7294),o=n(7462),i=n(7866),a=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const s=(0,i.Z)((function(e){return a.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var l=n(5638),u=n(444),c=n(4199),d=s,p=function(e){return"theme"!==e},f=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?d:p},h=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},m=function(){return null};var g=function e(t,n){var i,a,s=t.__emotion_real===t,d=s&&t.__emotion_base||t;void 0!==n&&(i=n.label,a=n.target);var p=h(t,n,s),g=p||f(d),y=!g("as");return function(){var v=arguments,b=s&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==i&&b.push("label:"+i+";"),null==v[0]||void 0===v[0].raw)b.push.apply(b,v);else{b.push(v[0][0]);for(var A=v.length,C=1;C<A;C++)b.push(v[C],v[0][C])}var w=(0,l.w)((function(e,t,n){var o=y&&e.as||d,i="",s=[],h=e;if(null==e.theme){for(var v in h={},e)h[v]=e[v];h.theme=(0,r.useContext)(l.T)}"string"==typeof e.className?i=(0,u.f)(t.registered,s,e.className):null!=e.className&&(i=e.className+" ");var A=(0,c.O)(b.concat(s),t.registered,h);(0,u.M)(t,A,"string"==typeof o),i+=t.key+"-"+A.name,void 0!==a&&(i+=" "+a);var C=y&&void 0===p?f(o):g,w={};for(var x in e)y&&"as"===x||C(x)&&(w[x]=e[x]);w.className=i,w.ref=n;var E=(0,r.createElement)(o,w),k=(0,r.createElement)(m,null);return(0,r.createElement)(r.Fragment,null,k,E)}));return w.displayName=void 0!==i?i:"Styled("+("string"==typeof d?d:d.displayName||d.name||"Component")+")",w.defaultProps=t.defaultProps,w.__emotion_real=w,w.__emotion_base=d,w.__emotion_styles=b,w.__emotion_forwardProp=p,Object.defineProperty(w,"toString",{value:function(){return"."+a}}),w.withComponent=function(t,r){return e(t,(0,o.Z)({},n,r,{shouldForwardProp:h(w,r,!0)})).apply(void 0,b)},w}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){g[e]=g(e)}));const y=g;function v(e,t){return y(e,t)}},5408:(e,t,n)=>{"use strict";n.d(t,{VO:()=>r,k9:()=>i,W8:()=>a,L7:()=>s}),n(5697);const r={xs:0,sm:600,md:900,lg:1200,xl:1536},o={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${r[e]}px)`};function i(e,t,n){const i=e.theme||{};if(Array.isArray(t)){const e=i.breakpoints||o;return t.reduce(((r,o,i)=>(r[e.up(e.keys[i])]=n(t[i]),r)),{})}if("object"==typeof t){const e=i.breakpoints||o;return Object.keys(t).reduce(((o,i)=>{if(-1!==Object.keys(e.values||r).indexOf(i))o[e.up(i)]=n(t[i],i);else{const e=i;o[e]=t[e]}return o}),{})}return n(t)}function a(e={}){var t;return(null==e||null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function s(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}},1796:(e,t,n)=>{"use strict";n.d(t,{mi:()=>l,Fq:()=>u,_j:()=>c,$n:()=>d});var r=n(1387);function o(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function i(e){if(e.type)return e;if("#"===e.charAt(0))return i(function(e){e=e.substr(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,r.Z)(9,e));let o,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),o=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].substr(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o))throw new Error((0,r.Z)(10,o))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:o}}function a(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function s(e){let t="hsl"===(e=i(e)).type?i(function(e){e=i(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,s=r*Math.min(o,1-o),l=(e,t=(e+n/30)%12)=>o-s*Math.max(Math.min(t-3,9-t,1),-1);let u="rgb";const c=[Math.round(255*l(0)),Math.round(255*l(8)),Math.round(255*l(4))];return"hsla"===e.type&&(u+="a",c.push(t[3])),a({type:u,values:c})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function l(e,t){const n=s(e),r=s(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e,t){return e=i(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,a(e)}function c(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return a(e)}function d(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return a(e)}},4869:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(7462),o=n(3366),i=n(9766);const a=["values","unit","step"],s={borderRadius:4};var l=n(2605);const u=["breakpoints","palette","spacing","shape"],c=function(e={},...t){const{breakpoints:n={},palette:c={},spacing:d,shape:p={}}=e,f=(0,o.Z)(e,u),h=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:i=5}=e,s=(0,o.Z)(e,a),l=Object.keys(t);function u(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function c(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-i/100}${n})`}function d(e,r){const o=l.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[l[o]]?t[l[o]]:r)-i/100}${n})`}return(0,r.Z)({keys:l,values:t,up:u,down:c,between:d,only:function(e){return l.indexOf(e)+1<l.length?d(e,l[l.indexOf(e)+1]):u(e)},not:function(e){const t=l.indexOf(e);return 0===t?u(l[1]):t===l.length-1?c(l[t]):d(e,l[l.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},s)}(n),m=function(e=8){if(e.mui)return e;const t=(0,l.hB)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(d);let g=(0,i.Z)({breakpoints:h,direction:"ltr",components:{},palette:(0,r.Z)({mode:"light"},c),spacing:m,shape:(0,r.Z)({},s,p)},f);return g=t.reduce(((e,t)=>(0,i.Z)(e,t)),g),g}},4178:(e,t,n)=>{"use strict";n.d(t,{Z:()=>Q,G:()=>H});var r=n(4844),o=n(7730);const i=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?(0,o.Z)(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};var a=n(2605),s=n(5408);function l(e){return"number"!=typeof e?e:`${e}px solid`}const u=(0,r.Z)({prop:"border",themeKey:"borders",transform:l}),c=(0,r.Z)({prop:"borderTop",themeKey:"borders",transform:l}),d=(0,r.Z)({prop:"borderRight",themeKey:"borders",transform:l}),p=(0,r.Z)({prop:"borderBottom",themeKey:"borders",transform:l}),f=(0,r.Z)({prop:"borderLeft",themeKey:"borders",transform:l}),h=(0,r.Z)({prop:"borderColor",themeKey:"palette"}),m=(0,r.Z)({prop:"borderTopColor",themeKey:"palette"}),g=(0,r.Z)({prop:"borderRightColor",themeKey:"palette"}),y=(0,r.Z)({prop:"borderBottomColor",themeKey:"palette"}),v=(0,r.Z)({prop:"borderLeftColor",themeKey:"palette"}),b=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,a.eI)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,a.NA)(t,e)});return(0,s.k9)(e,e.borderRadius,n)}return null};b.propTypes={},b.filterProps=["borderRadius"];const A=i(u,c,d,p,f,h,m,g,y,v,b),C=i((0,r.Z)({prop:"displayPrint",cssProperty:!1,transform:e=>({"@media print":{display:e}})}),(0,r.Z)({prop:"display"}),(0,r.Z)({prop:"overflow"}),(0,r.Z)({prop:"textOverflow"}),(0,r.Z)({prop:"visibility"}),(0,r.Z)({prop:"whiteSpace"})),w=i((0,r.Z)({prop:"flexBasis"}),(0,r.Z)({prop:"flexDirection"}),(0,r.Z)({prop:"flexWrap"}),(0,r.Z)({prop:"justifyContent"}),(0,r.Z)({prop:"alignItems"}),(0,r.Z)({prop:"alignContent"}),(0,r.Z)({prop:"order"}),(0,r.Z)({prop:"flex"}),(0,r.Z)({prop:"flexGrow"}),(0,r.Z)({prop:"flexShrink"}),(0,r.Z)({prop:"alignSelf"}),(0,r.Z)({prop:"justifyItems"}),(0,r.Z)({prop:"justifySelf"})),x=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,a.eI)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,a.NA)(t,e)});return(0,s.k9)(e,e.gap,n)}return null};x.propTypes={},x.filterProps=["gap"];const E=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,a.eI)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,a.NA)(t,e)});return(0,s.k9)(e,e.columnGap,n)}return null};E.propTypes={},E.filterProps=["columnGap"];const k=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,a.eI)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,a.NA)(t,e)});return(0,s.k9)(e,e.rowGap,n)}return null};k.propTypes={},k.filterProps=["rowGap"];const S=i(x,E,k,(0,r.Z)({prop:"gridColumn"}),(0,r.Z)({prop:"gridRow"}),(0,r.Z)({prop:"gridAutoFlow"}),(0,r.Z)({prop:"gridAutoColumns"}),(0,r.Z)({prop:"gridAutoRows"}),(0,r.Z)({prop:"gridTemplateColumns"}),(0,r.Z)({prop:"gridTemplateRows"}),(0,r.Z)({prop:"gridTemplateAreas"}),(0,r.Z)({prop:"gridArea"})),B=i((0,r.Z)({prop:"position"}),(0,r.Z)({prop:"zIndex",themeKey:"zIndex"}),(0,r.Z)({prop:"top"}),(0,r.Z)({prop:"right"}),(0,r.Z)({prop:"bottom"}),(0,r.Z)({prop:"left"})),O=i((0,r.Z)({prop:"color",themeKey:"palette"}),(0,r.Z)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette"}),(0,r.Z)({prop:"backgroundColor",themeKey:"palette"})),T=(0,r.Z)({prop:"boxShadow",themeKey:"shadows"});function D(e){return e<=1&&0!==e?100*e+"%":e}const N=(0,r.Z)({prop:"width",transform:D}),P=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,o;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(o=r.values)?void 0:o[t])||s.VO[t]||D(t)}};return(0,s.k9)(e,e.maxWidth,t)}return null};P.filterProps=["maxWidth"];const I=(0,r.Z)({prop:"minWidth",transform:D}),R=(0,r.Z)({prop:"height",transform:D}),_=(0,r.Z)({prop:"maxHeight",transform:D}),M=(0,r.Z)({prop:"minHeight",transform:D}),Z=((0,r.Z)({prop:"size",cssProperty:"width",transform:D}),(0,r.Z)({prop:"size",cssProperty:"height",transform:D}),i(N,P,I,R,_,M,(0,r.Z)({prop:"boxSizing"}))),j=(0,r.Z)({prop:"fontFamily",themeKey:"typography"}),z=(0,r.Z)({prop:"fontSize",themeKey:"typography"}),L=(0,r.Z)({prop:"fontStyle",themeKey:"typography"}),F=(0,r.Z)({prop:"fontWeight",themeKey:"typography"}),U=(0,r.Z)({prop:"letterSpacing"}),Y=(0,r.Z)({prop:"textTransform"}),$=(0,r.Z)({prop:"lineHeight"}),W=(0,r.Z)({prop:"textAlign"}),V=i((0,r.Z)({prop:"typography",cssProperty:!1,themeKey:"typography"}),j,z,L,F,U,$,W,Y),q={borders:A.filterProps,display:C.filterProps,flexbox:w.filterProps,grid:S.filterProps,positions:B.filterProps,palette:O.filterProps,shadows:T.filterProps,sizing:Z.filterProps,spacing:a.ZP.filterProps,typography:V.filterProps},G={borders:A,display:C,flexbox:w,grid:S,positions:B,palette:O,shadows:T,sizing:Z,spacing:a.ZP,typography:V},H=Object.keys(q).reduce(((e,t)=>(q[t].forEach((n=>{e[n]=G[t]})),e)),{}),Q=function(e,t,n){const r={[e]:t,theme:n},o=H[e];return o?o(r):{[e]:t}}},7730:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9766);const o=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},2605:(e,t,n)=>{"use strict";n.d(t,{hB:()=>h,eI:()=>f,ZP:()=>A,NA:()=>m});var r=n(5408),o=n(4844),i=n(7730);const a={m:"margin",p:"padding"},s={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},l={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},u=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!l[e])return[e];e=l[e]}const[t,n]=e.split(""),r=a[t],o=s[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),c=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],d=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],p=[...c,...d];function f(e,t,n,r){const i=(0,o.D)(e,t)||n;return"number"==typeof i?e=>"string"==typeof e?e:i*e:Array.isArray(i)?e=>"string"==typeof e?e:i[e]:"function"==typeof i?i:()=>{}}function h(e){return f(e,"spacing",8)}function m(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function g(e,t){const n=h(e.theme);return Object.keys(e).map((o=>function(e,t,n,o){if(-1===t.indexOf(n))return null;const i=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=m(t,n),e)),{})}(u(n),o),a=e[n];return(0,r.k9)(e,a,i)}(e,t,o,n))).reduce(i.Z,{})}function y(e){return g(e,c)}function v(e){return g(e,d)}function b(e){return g(e,p)}y.propTypes={},y.filterProps=c,v.propTypes={},v.filterProps=d,b.propTypes={},b.filterProps=p;const A=b},4844:(e,t,n)=>{"use strict";n.d(t,{D:()=>i,Z:()=>s});var r=n(8320),o=n(5408);function i(e,t){return t&&"string"==typeof t?t.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e):null}function a(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:i(e,n)||r,t&&(o=t(o)),o}const s=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:s,transform:l}=e,u=e=>{if(null==e[t])return null;const u=e[t],c=i(e.theme,s)||{};return(0,o.k9)(e,u,(e=>{let o=a(c,l,e);return e===o&&"string"==typeof e&&(o=a(c,l,`${t}${"default"===e?"":(0,r.Z)(e)}`,e)),!1===n?o:{[n]:o}}))};return u.propTypes={},u.filterProps=[t],u}},6523:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7730),o=n(4178),i=n(5408);function a(e){const{sx:t,theme:n={}}=e||{};if(!t)return null;function s(e){let t=e;if("function"==typeof e)t=e(n);else if("object"!=typeof e)return e;const s=(0,i.W8)(n.breakpoints),l=Object.keys(s);let u=s;return Object.keys(t).forEach((e=>{const s="function"==typeof(l=t[e])?l(n):l;var l;if(null!=s)if("object"==typeof s)if(o.G[e])u=(0,r.Z)(u,(0,o.Z)(e,s,n));else{const t=(0,i.k9)({theme:n},s,(t=>({[e]:t})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(t,s)?u=(0,r.Z)(u,t):u[e]=a({sx:s,theme:n})}else u=(0,r.Z)(u,(0,o.Z)(e,s,n))})),(0,i.L7)(l,u)}return Array.isArray(t)?t.map(s):s(t)}a.filterProps=["sx"];const s=a},7878:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4869),o=n(7294);const i=o.createContext(null),a=(0,r.Z)(),s=function(e=a){return function(e=null){const t=o.useContext(i);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(e)}},8320:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(1387);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},9064:(e,t,n)=>{"use strict";function r(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}n.d(t,{Z:()=>r})},7596:(e,t,n)=>{"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,{Z:()=>r})},9766:(e,t,n)=>{"use strict";n.d(t,{P:()=>o,Z:()=>i});var r=n(7462);function o(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function i(e,t,n={clone:!0}){const a=n.clone?(0,r.Z)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach((r=>{"__proto__"!==r&&(o(t[r])&&r in e&&o(e[r])?a[r]=i(e[r],t[r],n):a[r]=t[r])})),a}},1387:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},7094:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{Z:()=>r})},8290:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7094);function o(e){return(0,r.Z)(e).defaultView||window}},7960:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},8925:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o({controlled:e,default:t,name:n,state:o="value"}){const{current:i}=r.useRef(void 0!==e),[a,s]=r.useState(t);return[i?e:a,r.useCallback((e=>{i||s(e)}),[])]}},6600:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);const o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect},3633:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o=n(6600);function i(e){const t=r.useRef(e);return(0,o.Z)((()=>{t.current=e})),r.useCallback(((...e)=>(0,t.current)(...e)),[])}},67:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o=n(7960);function i(e,t){return r.useMemo((()=>null==e&&null==t?null:n=>{(0,o.Z)(e,n),(0,o.Z)(t,n)}),[e,t])}},9962:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var r=n(7294);let o,i=!0,a=!1;const s={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function l(e){e.metaKey||e.altKey||e.ctrlKey||(i=!0)}function u(){i=!1}function c(){"hidden"===this.visibilityState&&a&&(i=!0)}function d(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",l,!0),t.addEventListener("mousedown",u,!0),t.addEventListener("pointerdown",u,!0),t.addEventListener("touchstart",u,!0),t.addEventListener("visibilitychange",c,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return i||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!s[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(a=!0,window.clearTimeout(o),o=window.setTimeout((()=>{a=!1}),100),t.current=!1,!0)},ref:e}}},3063:(e,t)=>{function n(e){if(e)return function(e){for(var t in n.prototype)e[t]=n.prototype[t];return e}(e)}t.Q=n,n.prototype.on=n.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},n.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},n.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t)}return this},n.prototype.emitReserved=n.prototype.emit,n.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},n.prototype.hasListeners=function(e){return!!this.listeners(e).length}},9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),i=n(4372),a=n(5327),s=n(4097),l=n(4109),u=n(7985),c=n(5061),d=n(5655),p=n(5263);e.exports=function(e){return new Promise((function(t,n){var f,h=e.data,m=e.headers,g=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(f),e.signal&&e.signal.removeEventListener("abort",f)}r.isFormData(h)&&delete m["Content-Type"];var v=new XMLHttpRequest;if(e.auth){var b=e.auth.username||"",A=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(b+":"+A)}var C=s(e.baseURL,e.url);function w(){if(v){var r="getAllResponseHeaders"in v?l(v.getAllResponseHeaders()):null,i={data:g&&"text"!==g&&"json"!==g?v.response:v.responseText,status:v.status,statusText:v.statusText,headers:r,config:e,request:v};o((function(e){t(e),y()}),(function(e){n(e),y()}),i),v=null}}if(v.open(e.method.toUpperCase(),a(C,e.params,e.paramsSerializer),!0),v.timeout=e.timeout,"onloadend"in v?v.onloadend=w:v.onreadystatechange=function(){v&&4===v.readyState&&(0!==v.status||v.responseURL&&0===v.responseURL.indexOf("file:"))&&setTimeout(w)},v.onabort=function(){v&&(n(c("Request aborted",e,"ECONNABORTED",v)),v=null)},v.onerror=function(){n(c("Network Error",e,null,v)),v=null},v.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||d.transitional;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,r.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",v)),v=null},r.isStandardBrowserEnv()){var x=(e.withCredentials||u(C))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;x&&(m[e.xsrfHeaderName]=x)}"setRequestHeader"in v&&r.forEach(m,(function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete m[t]:v.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(v.withCredentials=!!e.withCredentials),g&&"json"!==g&&(v.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&v.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&v.upload&&v.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(f=function(e){v&&(n(!e||e&&e.type?new p("canceled"):e),v.abort(),v=null)},e.cancelToken&&e.cancelToken.subscribe(f),e.signal&&(e.signal.aborted?f():e.signal.addEventListener("abort",f))),h||(h=null),v.send(h)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),i=n(321),a=n(7185),s=function e(t){var n=new i(t),s=o(i.prototype.request,n);return r.extend(s,i.prototype,n),r.extend(s,n),s.create=function(n){return e(a(t,n))},s}(n(5655));s.Axios=i,s.Cancel=n(5263),s.CancelToken=n(4972),s.isCancel=n(6502),s.VERSION=n(7288).version,s.all=function(e){return Promise.all(e)},s.spread=n(8713),s.isAxiosError=n(6268),e.exports=s,e.exports.default=s},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var r=n(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),i=n(782),a=n(3572),s=n(7185),l=n(4875),u=l.validators;function c(e){this.defaults=e,this.interceptors={request:new i,response:new i}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;void 0!==t&&l.assertOptions(t,{silentJSONParsing:u.transitional(u.boolean),forcedJSONParsing:u.transitional(u.boolean),clarifyTimeoutError:u.transitional(u.boolean)},!1);var n=[],r=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(r=r&&t.synchronous,n.unshift(t.fulfilled,t.rejected))}));var o,i=[];if(this.interceptors.response.forEach((function(e){i.push(e.fulfilled,e.rejected)})),!r){var c=[a,void 0];for(Array.prototype.unshift.apply(c,n),c=c.concat(i),o=Promise.resolve(e);c.length;)o=o.then(c.shift(),c.shift());return o}for(var d=e;n.length;){var p=n.shift(),f=n.shift();try{d=p(d)}catch(e){f(e);break}}try{o=a(d)}catch(e){return Promise.reject(e)}for(;i.length;)o=o.then(i.shift(),i.shift());return o},c.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},5061:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),i=n(6502),a=n(5655),s=n(5263);function l(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new s("canceled")}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function a(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function s(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function l(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var u={url:a,method:a,data:a,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:l};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||i,o=t(e);r.isUndefined(o)&&t!==l||(n[e]=o)})),n}},6026:(e,t,n)=>{"use strict";var r=n(5061);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5655);e.exports=function(e,t,n){var i=this||o;return r.forEach(n,(function(n){e=n.call(i,e,t)})),e}},5655:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),i=n(481),a={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(l=n(5448)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(s(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||u.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,a=!n&&"json"===this.responseType;if(a||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw i(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(a)})),e.exports=u},7288:e=>{e.exports={version:"0.23.0"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4875:(e,t,n)=>{"use strict";var r=n(7288).version,o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var i={};o.transitional=function(e,t,n){function o(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,a){if(!1===e)throw new Error(o(r," has been removed"+(t?" in "+t:"")));return t&&!i[r]&&(i[r]=!0,console.warn(o(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,a)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var i=r[o],a=t[i];if(a){var s=e[i],l=void 0===s||a(s,i,e);if(!0!==l)throw new TypeError("option "+i+" must be "+l)}else if(!0!==n)throw Error("Unknown option "+i)}},validators:o}},4867:(e,t,n)=>{"use strict";var r=n(1849),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:l,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},1407:e=>{e.exports={Connect:"connection",Disconnect:"disconnected",Error:"connect_error",InvalidUserId:"invalid user id",Message:"message",MessageFailure:"message send error"}},5269:e=>{e.exports={InPerson:"In person",Mixed:"In person or online",Online:"Online"}},9114:e=>{e.exports={Announcement:"Announcement",Discussion:"Discussion",Question:"Question",Problem:"Problem",Meeting:"Meeting"}},5106:e=>{e.exports={Any:"Any",History:"History",Literature:"Literature",Math:"Math",Science:"Science"}},4193:e=>{function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var r,o={Am:"AM",Pm:"PM"},i=[];(r=Array(12).keys(),function(e){if(Array.isArray(e))return n(e)}(r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e){["00","15","30","45"].map((function(t){i.push("".concat(e,":").concat(t))}))}));var a=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.hour=t,this.minute=n,this.partOfDay=r}var n,r,i;return n=e,i=[{key:"parse24HourTimeString",value:function(t){var n=(t=String(t)).indexOf(":"),r=parseInt(t.slice(0,n)),i=t.length,a=parseInt(t.slice(n+1,i)),s=void 0;return r<12?(s=o.Am,0==r&&(r=12)):(s=o.Pm,r>12&&(24==r?(r=11,a=45):r-=12)),new e(r=r<10?"0".concat(r):"".concat(r),a=a<10?"0".concat(a):"".concat(a),s)}},{key:"parseTimeString",value:function(t){var n=t.indexOf(":"),r=t.slice(0,n),o=t.length-2;return new e(r,t.slice(n+1,o),t.slice(o,t.length))}}],(r=[{key:"isAfter",value:function(e){var t=!1,n=parseInt(this.hour),r=parseInt(e.hour),i=parseInt(this.minute),a=parseInt(e.minute);return this.partOfDay===e.partOfDay?(this.partOfDay===o.Am&&(n%=12,r%=12),t=n>r||!(n<r)&&i>a):t=this.partOfDay>e.partOfDay,t}},{key:"isBetween",value:function(e,t){var n=this.isAfter(e),r=t.isAfter(this);return n&&r}},{key:"toString",value:function(){return"".concat(this.hour,":").concat(this.minute).concat(this.partOfDay)}}])&&t(n.prototype,r),i&&t(n,i),e}();e.exports={Days:{Monday:"Monday",Tuesday:"Tuesday",Wednesday:"Wednesday",Thursday:"Thursday",Friday:"Friday",Saturday:"Saturday",Sunday:"Sunday"},MeetingFrequencies:{Daily:"Daily",Monthly:"Monthly",OneTime:"One-time",Weekly:"Weekly",Yearly:"Yearly"},PartOfDay:o,Times:i,Time:a}},4308:e=>{e.exports={Account:{ErrorChangingEmail:"An error occurred while attempting to change the email.",ErrorChangingPassword:"An error occurred while attempting to change the password.",ErrorCreateAccount:"An error occurred while attempting to create an account.",ErrorDeleteAccount:"An error occurred while attempting to delete an account.",ErrorInvalidPasswordInput:"The passwords provided were invalid.",ErrorSendingEmail:"There was an error sending your verification email.",ErrorSettingToken:"There was an error setting the verification token",ErrorUploadProfilePicture:"The file type selected is not supported.",EmailSent:"Verification email sent.",NotOver18:"You need to be 18 or older to create an account.",InvalidEmail:"The email address entered is not valid.",IncorrectPassword:"The password provided is incorrect.",InvalidAccountInput:"One or more fields have been left empty.",SuccessAccountCreated:"The account was created successfully.",SuccessAccountDeleted:"The account was deleted successfully",SuccessAccountSetup:"The account was setup successfully.",SuccessChangingEmail:"The email was changed successfully",SuccessChangingPassword:"The password was changed successfully",SuccessLogin:"The login was successful.",SuccessUpdateAuthenticationToken:"The authentication token has been successfully updated.",UnverifiedUserWasFound:"The unverified user was found.",UserAlreadyExists:"A user with that email address already exists.",UserNotFound:"The user was not found.",PasswordsMustMatch:"The passwords entered must match.",PasswordTooShort:"The password must be at least 6 characters.",InactiveAccount:"The account requested is not active."},Message:{ErrorAddConversation:"An error occurrred while attempting to add a conversation. ",ErrorConversationExists:"The conversation requested already exists.",ErrorGetConversation:"An error occurred while attempting to get the conversation.",ErrorGetReceiver:"An error occurred while attempting to get the receiver.",ErrorCreateConversation:"An error occurred while attempting to create the conversation.",GetConversations:{Error:"An error occurred while attempting to get all conversations for a user.",Success:"All conversations were found for a user."},SuccessGetConversation:"Conversation returned successfully.",SuccessCreateConversation:"Conversation created successfully."},StudyGroup:{AddOneTimeMeeting:{Error:"An error occured while attempting to add a one-time meeting.",InvalidInput:"One or more required fields is empty.",Success:"The one-time meeting was added successfully."},CreatePost:{Error:"An error occurred while attempting to create a post.",InvalidAttachment:"The file attached is of an unsupported format.",InvalidInput:"One or more required fields is empty.",Success:"The post was created successfully."},ErrorCreateStudyGroup:"An error occurred while attempting to create a study group.",ErrorDeleteStudyGroup:"An error occurred while attempting to delete a study group.",ErrorDeleteMeeting:"An error occurred while attempting to delete a meeting.",ErrorEditMeeting:"An error occurred while attempting to edit the meeting.",ErrorGetStudyGroup:"An error occurred while attempting to get a study group.",ErrorLeaveStudyGroup:"The study group you are trying to leave was not found.",ErrorJoinStudyGroup:"An error occurred while attempting to join a study group.",ErrorRemoveUser:"There was an error removing user from the study group.",ErrorRemoveStudyGroup:"There was an error removing study group from the user.",InvalidEditStudyGroup:"One or more required fields is empty.",StudyGroupIsNotActive:"The requested study group is not active.",MeetingNotFound:"The requested meeting was not found.",StudyGroupNotFound:"The requested study group was not found.",SuccessDeleteMeeting:"The meeting was deleted successfully.",SuccessStudyGroupCreated:"The study group was created sucessfully.",SuccessStudyGroupDeleted:"The study group was deleted successfully.",SuccessStudyGroupEdited:"The study group was edited successfully",SuccessStudyGroupJoined:"The study group was joined successfully.",SuccessStudyGroupLeft:"The study group was left successfully.",SuccessStudyGroupRetrieved:"The study group was retrieved successfully.",SuccessStudyGroupsRetrieved:"The study groups were retrieved sucessfully.",ErrorGettingSearchResults:"An error ocurred while attempting to get search results.",UserAlreadyJoined:"The study group cannot be joined again.",UserNotAssociatedWithSchoolOfStudyGroup:"The study group cannot be joined because you are not a part of this school.",UserNotInStudyGroup:"The requesting user is not a member of the study group.",UserNotOwner:"The requesting user is not the owner of the study group.",ErrorNullStudyGroupInput:"Error: Empty input was received for either the study group name or the user.",SetRecurringMeeting:{Error:"An error occurred while attempting to set the recurring meeting.",InvalidInput:"One or more required fields is empty.",Success:"The recurring meeting was set successfully."}},Report:{EmailSent:"Report email was sent.",EmptyField:"Empty field received. Please include a comment about why you are reporting this item."}}},2239:e=>{e.exports={Account:{ChangeEmail:"/api/account/change-email",ChangePassword:"/api/account/change-password",CreateAccount:"/api/account/create",Delete:"/api/account/delete",GetUnverifiedUser:"/api/account/get-unverified-user",Login:"/api/account/login",SetupAccount:"/api/account/setup",UpdateAuthenticationToken:"/api/account/update-authentication-token",VerifyEmailChange:"/api/account/verify-email-change"},Message:{GetConversation:"/api/message/get-conversation",GetConversations:"/api/message/get-conversations",CreateConversation:"/api/message/create-conversation"},Report:{SendReport:"/api/report/send-report"},StaticResources:{Index:"/*"},Search:{GetSearchResults:"/api/search/get"},StudyGroup:{AddOneTimeMeeting:"/api/study-group/add-one-time-meeting",CreatePost:"/api/study-group/create-post",CreateStudyGroup:"/api/study-group/create",DeleteMeeting:"/api/study-group/delete-meeting",DeleteStudyGroup:"/api/study-group/delete",EditStudyGroup:"/api/study-group/edit-study-group",EditMeeting:"/api/study-group/edit-meeting",GetUserStudyGroups:"/api/study-group/get-all",GetStudyGroup:"/api/study-group/get",JoinStudyGroup:"/api/study-group/join",SetRecurringMeeting:"/api/study-group/set-recurring-meeting",LeaveStudyGroup:"/api/study-group/leave"}}},4158:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=n(4308),a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n;return t=e,n=[{key:"isDefined",value:function(e){return"undefined"!==r(e)&&null!=e}},{key:"isError",value:function(e){return e instanceof Error}},{key:"isUndefined",value:function(e){return"undefined"===r(e)}},{key:"validateChangeEmail",value:function(t,n,r){var o=!0,a=i.Account.InvalidAccountInput,s=t.body.newEmail;return 0===s.length&&(o=!1),e.validateEmail(s)||(o=!1,a=i.Account.InvalidEmail),o?r():(n.json({message:a}),n.end())}},{key:"validateCreateAccountInput",value:function(t,n,r){var o=!0,a=i.Account.InvalidAccountInput,s=t.body,l=s.email,u=s.password,c=s.password_confirmation;return 0!==l.length&&0!==u.length&&0!==c.length||(o=!1),e.validateEmail(l)||(o=!1,a=i.Account.InvalidEmail),u.length<6&&(o=!1,a=i.Account.PasswordTooShort),u!==c&&(o=!1,a=i.Account.PasswordsMustMatch),o?(t.confirmPassword=c,r()):(n.json({message:a}),n.end())}},{key:"validateCreatePost",value:function(e,t,n){var r=!0,o=i.StudyGroup.CreatePost.InvalidInput,a=e.body,s=a.title,l=a.message,u=a.category;return null!=s&&0!==s.length&&null!=l&&0!==l.length&&null!=u&&0!==u.length||(r=!1),r?(e.body.type=e.body.category,n()):(t.json({message:o}),t.end())}},{key:"validateCreateStudyGroupInput",value:function(e,t,n){var r=!1;return e.body.name&&e.user&&(r=!0),r?n():(t.json({message:i.StudyGroup.ErrorNullStudyGroupInput}),t.end())}},{key:"validateEditMeeting",value:function(t,n,r){var o=!0,a=i.StudyGroup.InvalidAccountInput,s=t.body,l=s.date,u=s.time;return(e.isUndefined(l)||e.isUndefined(u))&&(o=!1),o?r():(n.json({message:a}),n.end())}},{key:"validateEditStudyGroup",value:function(e,t,n){var r=!0,o=i.StudyGroup.InvalidEditStudyGroup,a=e.body,s=(a.course,a.description),l=(a.groupColor,a.isOnlineGroup,a.isTutorGroup,a.name);return a.subject,null!=l&&0!==l.length&&""!=l&&null!=s&&0!==s.length||(r=!1),r?n():(t.json({message:o}),t.end())}},{key:"validateEmail",value:function(e){return!!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(e)}},{key:"validateOneTimeMeeting",value:function(t,n,r){var o=!0,a=i.StudyGroup.AddOneTimeMeeting.InvalidInput,s=t.body,l=s.date,u=s.time;return s.day,s.details,s.location,s.roomNumber,(e.isUndefined(l)||e.isUndefined(u)||0===l.length||0===u.length)&&(o=!1),o?r():(n.json({message:a}),n.end())}},{key:"validateSetRecurringMeeting",value:function(t,n,r){var o=!0,a=i.StudyGroup.SetRecurringMeeting.InvalidInput,s=t.body,l=(s.day,s.frequency),u=s.time,c=s.date;return(null==l||null==u||0===l.length||0===u.length||e.isUndefined(c))&&(o=!1),o?r():(n.json({message:a}),n.end())}},{key:"validateSetupAccount",value:function(e,t,n){var r=!0,o=i.Account.InvalidAccountInput,a=e.body,s=a.areaCode,l=a.name;return null!=s&&0!==s.length&&null!=l&&0!==l.length||(r=!1),r?n():(t.json({message:o}),t.end())}},{key:"validatePasswordInput",value:function(e,t,n){var r=e.body.currentPassword,o=e.body.newPassword;return""===r&&""===o?(t.json({message:i.Account.ErrorInvalidPasswordInput}),t.end()):n()}}],null&&o(t.prototype,null),n&&o(t,n),e}();e.exports=a},3010:e=>{function t(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=t,t.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},t.prototype.reset=function(){this.attempts=0},t.prototype.setMin=function(e){this.ms=e},t.prototype.setMax=function(e){this.max=e},t.prototype.setJitter=function(e){this.jitter=e}},6010:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:()=>o})},6108:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap);"]),a.push([e.id,'*{font-family:"Merriweather", serif;overflow-x:hidden;margin:0;padding:0;box-sizing:border-box}* ::-webkit-scrollbar{display:none}html{background-color:#f9f5f1;background-image:url("https://www.flipnational.org/wp-content/uploads/2018/03/CAE-Website-Full-Background-Texture1902x1200-9.jpg");background-position:center;background-repeat:no-repeat;background-size:cover;height:100%}html body{height:100%}html body #root{height:100%}html body #root .container{height:100%;display:flex;flex-direction:column;overflow:hidden}\n',"",{version:3,sources:["webpack://./Client/src/App.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAGA,EACI,iCAAkC,CAClC,iBAAkB,CAClB,QAAS,CACT,SAAU,CACV,qBAAsB,CAL1B,sBAOQ,YAAa,CAChB,KAGD,wBCd2B,CDgB3B,kIAAmI,CAGnI,0BAA2B,CAC3B,2BAA4B,CAC5B,qBAAsB,CAEtB,WAAY,CAVhB,UAaQ,WAAY,CAbpB,gBAeY,WAAY,CAfxB,2BAiBgB,WAAY,CACZ,YAAa,CACb,qBAAsB,CACtB,eAAgB",sourcesContent:['@import "./globals.scss";\n@import url("https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap");\n\n* {\n    font-family: "Merriweather", serif;\n    overflow-x: hidden;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    ::-webkit-scrollbar {\n        display: none;\n    }\n}\nhtml {\n    background-color: $main-background-color;\n    /* The image used */\n    background-image: url("https://www.flipnational.org/wp-content/uploads/2018/03/CAE-Website-Full-Background-Texture1902x1200-9.jpg");\n\n    /* Center and scale the image nicely */\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n\n    height: 100%;\n\n    body {\n        height: 100%;\n        #root {\n            height: 100%;\n            .container {\n                height: 100%;\n                display: flex;\n                flex-direction: column;\n                overflow: hidden;\n            }\n        }\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 800px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},2668:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".account-page .infos{display:flex;flex-direction:column;padding-bottom:150px;padding-top:20px}.account-page .infos .user-info{padding:10px;background-color:rgba(255,255,255,0.434);backdrop-filter:blur(3px);border-radius:4px;border-bottom:#d4aa8c 3px solid;box-shadow:rgba(6,6,6,0.132) 2px 2px 10px;margin:5px 20px 5px 20px;display:flex;align-items:center;justify-content:center}.account-page .infos .user-info h1{flex:1;font-size:15px;text-align:left}.account-page .infos .user-info p{font-size:17px}.account-page .edit-account-buttons{display:flex;position:fixed;bottom:0;left:0;width:100%;height:5em;background-color:white;box-shadow:rgba(0,0,0,0.151) -20px 0 20px}\n","",{version:3,sources:["webpack://./Client/src/Pages/Account/Account.scss"],names:[],mappings:"AACA,qBAEQ,YAAa,CACb,qBAAsB,CAyBtB,oBAAqB,CACrB,gBAAiB,CA7BzB,gCAMY,YAAa,CACb,wCAA4C,CAC5C,yBAA0B,CAC1B,iBAAkB,CAElB,+BAAsC,CACtC,yCAA6C,CAC7C,wBAAyB,CACzB,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAhBnC,mCAmBgB,MAAO,CACP,cAAe,CACf,eAAgB,CArBhC,kCAyBgB,cAAe,CAzB/B,oCAgCQ,YAAa,CACb,cAAe,CACf,QAAS,CACT,MAAO,CACP,UAAW,CACX,UAAW,CACX,sBAAuB,CACvB,yCAA6C",sourcesContent:['@import "../../globals.scss";\n.account-page {\n    .infos {\n        display: flex;\n        flex-direction: column;\n\n        .user-info {\n            padding: 10px;\n            background-color: rgba(255, 255, 255, 0.434);\n            backdrop-filter: blur(3px);\n            border-radius: 4px;\n\n            border-bottom: $border-color 3px solid;\n            box-shadow: rgba(6, 6, 6, 0.132) 2px 2px 10px;\n            margin: 5px 20px 5px 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            h1 {\n                flex: 1;\n                font-size: 15px;\n                text-align: left;\n            }\n\n            p {\n                font-size: 17px;\n            }\n        }\n        padding-bottom: 150px;\n        padding-top: 20px;\n    }\n    .edit-account-buttons {\n        display: flex;\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 5em;\n        background-color: white;\n        box-shadow: rgba(0, 0, 0, 0.151) -20px 0 20px;\n    }\n}\n'],sourceRoot:""}]);const s=a},1338:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.HomePage{width:100%;height:100%}.HomePage .subtitle{position:absolute;font-size:80px;margin:100px;overflow-x:visible;font-weight:300;color:rgba(58,58,58,0.872);font-weight:900;font-size:90px}.HomePage::after{content:"";width:94%;height:80px;background-color:#ffda5a;position:absolute;z-index:-2;top:7em;right:0}@media (max-width: 800px){.HomePage{display:block;padding:0;margin:0}.HomePage::after{display:none}.HomePage .subtitle{display:none}}\n',"",{version:3,sources:["webpack://./Client/src/Pages/Home/Home.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,UACI,UAAW,CACX,WAAY,CAFhB,oBAKQ,iBAAkB,CAClB,cAAe,CACf,YAAa,CACb,kBAAmB,CACnB,eAAgB,CAChB,0BAA8B,CAC9B,eAAgB,CAChB,cAAe,CAZvB,iBAgBQ,UAAW,CACX,SAAU,CACV,WAAY,CACZ,wBCfiB,CDgBjB,iBAAkB,CAClB,UAAW,CACX,OAAQ,CACR,OAAQ,CACX,0BAxBL,UA4BY,aAAc,CACd,SAAU,CACV,QAAS,CA9BrB,iBAiCY,YAAa,CAjCzB,oBAoCY,YAAa,CAChB",sourcesContent:['@import "../../globals.scss";\n.HomePage {\n    width: 100%;\n    height: 100%;\n\n    .subtitle {\n        position: absolute;\n        font-size: 80px;\n        margin: 100px;\n        overflow-x: visible;\n        font-weight: 300;\n        color: rgba(58, 58, 58, 0.872);\n        font-weight: 900;\n        font-size: 90px;\n    }\n\n    &::after {\n        content: "";\n        width: 94%;\n        height: 80px;\n        background-color: $highlight-color;\n        position: absolute;\n        z-index: -2;\n        top: 7em;\n        right: 0;\n    }\n\n    @media (max-width: $mobile-width) {\n        & {\n            display: block;\n            padding: 0;\n            margin: 0;\n        }\n        &::after {\n            display: none;\n        }\n        .subtitle {\n            display: none;\n        }\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 800px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},8505:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".message-page{display:flex;flex-direction:column;height:100%}.message-page .message-area{flex:1;display:flex;align-items:center;justify-content:center}.message-page .guest-message{display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;width:100%}.message-page .guest-message h1{margin:20px;padding:10px;background-color:#ffda5a}.message-page .guest-message p{padding:10px;color:#575757;font-size:20px}\n","",{version:3,sources:["webpack://./Client/src/Pages/Message/Message.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,cACI,YAAa,CACb,qBAAsB,CACtB,WAAY,CAHhB,4BAMQ,MAAO,CACP,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAT/B,6BAaQ,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CAEvB,WAAY,CACZ,UAAW,CAnBnB,gCAsBY,WAAY,CACZ,YAAa,CACb,wBCpBa,CDJzB,+BA2BY,YAAa,CACb,aAAsB,CACtB,cAAe",sourcesContent:['@import "../../globals.scss";\n.message-page {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n\n    .message-area {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .guest-message {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n\n        height: 100%;\n        width: 100%;\n\n        h1 {\n            margin: 20px;\n            padding: 10px;\n            background-color: $highlight-color;\n        }\n        p {\n            padding: 10px;\n            color: rgb(87, 87, 87);\n            font-size: 20px;\n        }\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 800px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},4739:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".page{animation:page-load-up 0.3s ease-out;padding-top:0px;height:calc(100vh - 4em);flex:1}.page .page-title{padding:40px;display:flex;align-items:center;overflow:hidden;height:6em;background-color:rgba(103,78,48,0.084);backdrop-filter:blur(10px);color:rgba(0,0,0,0.858);text-shadow:rgba(0,0,0,0.123) 0 3px 1px;z-index:0;box-shadow:inset 0px 0px 10px rgba(0,0,0,0.123)}@media (max-width: 800px){.page .page-title{padding:40px}}.page .page-title h1{background-color:#ffda5a;padding:0 20px 0 20px;text-align:left}@keyframes page-load-up{0%{opacity:0;margin-top:20px}100%{opacity:1;margin-top:00px}}\n","",{version:3,sources:["webpack://./Client/src/Pages/Page.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,MACI,oCAAqC,CACrC,eAAgB,CAEhB,wBAAyB,CACzB,MAAO,CALX,kBASQ,YAAa,CAIb,YAAa,CACb,kBAAmB,CACnB,eAAgB,CAChB,UAAW,CACX,sCAA0C,CAC1C,0BAA2B,CAC3B,uBAA2B,CAC3B,uCAA2C,CAC3C,SAAU,CACV,+CAAmD,CAStD,0BA/BL,kBAWY,YAAa,CAoBpB,CA/BL,qBAyBY,wBCrBa,CDsBb,qBAAsB,CAEtB,eAAgB,CAEnB,wBAIL,GACI,SAAU,CACV,eAAgB,CAEpB,KACI,SAAU,CACV,eAAgB,CAAA",sourcesContent:['@import "../globals.scss";\n.page {\n    animation: page-load-up 0.3s ease-out;\n    padding-top: 0px;\n\n    height: calc(100vh - 4em);\n    flex: 1;\n    // border-bottom: 0px;\n\n    .page-title {\n        padding: 40px;\n        @include mobile {\n            padding: 40px;\n        }\n        display: flex;\n        align-items: center;\n        overflow: hidden;\n        height: 6em;\n        background-color: rgba(103, 78, 48, 0.084);\n        backdrop-filter: blur(10px);\n        color: rgba(0, 0, 0, 0.858);\n        text-shadow: rgba(0, 0, 0, 0.123) 0 3px 1px;\n        z-index: 0;\n        box-shadow: inset 0px 0px 10px rgba(0, 0, 0, 0.123);\n\n        h1 {\n            background-color: $highlight-color;\n            padding: 0 20px 0 20px;\n            // width: 150px;\n            text-align: left;\n            // padding-right: 20px;\n        }\n    }\n}\n@keyframes page-load-up {\n    0% {\n        opacity: 0;\n        margin-top: 20px;\n    }\n    100% {\n        opacity: 1;\n        margin-top: 00px;\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 800px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},4455:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".search-page{display:flex;flex-direction:column;height:100%}.search-page .search-area{flex:1;display:flex;align-items:center;justify-content:center}\n","",{version:3,sources:["webpack://./Client/src/Pages/Search/Search.scss"],names:[],mappings:"AACA,aACI,YAAa,CACb,qBAAsB,CACtB,WAAY,CAHhB,0BAMQ,MAAO,CACP,YAAa,CACb,kBAAmB,CACnB,sBAAuB",sourcesContent:['@import "../../globals.scss";\n.search-page {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n\n    .search-area {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n}\n'],sourceRoot:""}]);const s=a},4221:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.study-page{position:relative;overflow-y:visible;display:flex;flex-direction:column;height:100%}.study-page .guest-message{display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;width:100%}.study-page .guest-message h1{margin:20px;padding:10px;background-color:#ffda5a}.study-page .guest-message p{padding:10px;color:#575757;font-size:20px}.study-page .add-button{position:fixed;top:10.5em;right:5em;z-index:8;overflow:hidden;height:40px;width:40px;border-radius:20px;color:white;border:none;background-color:#deb56b;box-shadow:0px 2px 20px rgba(109,109,109,0.582);cursor:pointer}.study-page .add-button::after{content:"+";font-size:44px;position:absolute;top:-8.5px;left:14%}.study-page .study-groups-container{display:flex;align-items:flex-start;justify-content:flex-start;flex-wrap:wrap;padding:10px;overflow-y:auto}@media (max-width: 800px){.study-page .study-groups-container{display:block}}\n',"",{version:3,sources:["webpack://./Client/src/Pages/Study/Study.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,YACI,iBAAkB,CAClB,kBAAmB,CACnB,YAAa,CACb,qBAAsB,CACtB,WAAY,CALhB,2BAQQ,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CAEvB,WAAY,CACZ,UAAW,CAdnB,8BAiBY,WAAY,CACZ,YAAa,CACb,wBCfa,CDJzB,6BAsBY,YAAa,CACb,aAAsB,CACtB,cAAe,CAxB3B,wBA8BQ,cAAe,CACf,UAAW,CACX,SAAU,CACV,SAAU,CACV,eAAgB,CAGhB,WAAY,CACZ,UAAW,CACX,kBAAmB,CAGnB,WAAY,CAGZ,WAAY,CACZ,wBAAoC,CACpC,+CAAmD,CACnD,cAAe,CAhDvB,+BAoDY,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,QAAS,CAxDrB,oCA6DQ,YAAa,CACb,sBAAuB,CACvB,0BAA2B,CAC3B,cAAe,CAEf,YAAa,CACb,eAAgB,CAMnB,0BAzEL,oCAuEY,aAAc,CAErB",sourcesContent:['@import "../../globals.scss";\n.study-page {\n    position: relative;\n    overflow-y: visible;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n\n    .guest-message {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n\n        height: 100%;\n        width: 100%;\n\n        h1 {\n            margin: 20px;\n            padding: 10px;\n            background-color: $highlight-color;\n        }\n        p {\n            padding: 10px;\n            color: rgb(87, 87, 87);\n            font-size: 20px;\n        }\n    }\n\n    .add-button {\n        //Position\n        position: fixed;\n        top: 10.5em;\n        right: 5em;\n        z-index: 8;\n        overflow: hidden;\n\n        //Size\n        height: 40px;\n        width: 40px;\n        border-radius: 20px;\n\n        //text design\n        color: white;\n\n        //box Design\n        border: none;\n        background-color: rgb(222, 181, 107);\n        box-shadow: 0px 2px 20px rgba(109, 109, 109, 0.582);\n        cursor: pointer;\n\n        //Plus sign\n        &::after {\n            content: "+";\n            font-size: 44px;\n            position: absolute;\n            top: -8.5px;\n            left: 14%;\n        }\n    }\n\n    .study-groups-container {\n        display: flex;\n        align-items: flex-start;\n        justify-content: flex-start;\n        flex-wrap: wrap;\n\n        padding: 10px;\n        overflow-y: auto;\n\n        // height: 74vh;\n        @include mobile {\n            display: block;\n        }\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 800px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},2977:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".study-group-page{height:100%;overflow:hidden;display:flex;flex-direction:column}.study-group-page .page-title-study-group{padding:40px;margin:20px 20px 0 20px;border:white 6px solid;display:flex;align-items:center;overflow:hidden;height:6em;background-color:rgba(103,78,48,0.084);backdrop-filter:blur(10px);color:rgba(0,0,0,0.858);text-shadow:rgba(0,0,0,0.123) 0 3px 1px;z-index:0;box-shadow:0px 0px 10px rgba(0,0,0,0.123)}.study-group-page .page-title-study-group h1{padding:0 20px 0 20px;text-align:left;color:white}.study-group-page .main-view{flex:1;display:flex;flex-direction:row;overflow:hidden}\n","",{version:3,sources:["webpack://./Client/src/Pages/StudyGroup/StudyGroup.scss"],names:[],mappings:"AAAA,kBACI,WAAY,CACZ,eAAgB,CAChB,YAAa,CACb,qBAAsB,CAJ1B,0CAOQ,YAAa,CACb,uBAAwB,CACxB,sBAAuB,CACvB,YAAa,CACb,kBAAmB,CACnB,eAAgB,CAChB,UAAW,CACX,sCAA0C,CAC1C,0BAA2B,CAC3B,uBAA2B,CAC3B,uCAA2C,CAC3C,SAAU,CACV,yCAA6C,CAnBrD,6CAsBY,qBAAsB,CAEtB,eAAgB,CAChB,WAAY,CAzBxB,6BA+BQ,MAAO,CACP,YAAa,CACb,kBAAmB,CAEnB,eAAgB",sourcesContent:[".study-group-page {\n    height: 100%;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n\n    .page-title-study-group {\n        padding: 40px;\n        margin: 20px 20px 0 20px;\n        border: white 6px solid;\n        display: flex;\n        align-items: center;\n        overflow: hidden;\n        height: 6em;\n        background-color: rgba(103, 78, 48, 0.084);\n        backdrop-filter: blur(10px);\n        color: rgba(0, 0, 0, 0.858);\n        text-shadow: rgba(0, 0, 0, 0.123) 0 3px 1px;\n        z-index: 0;\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.123);\n\n        h1 {\n            padding: 0 20px 0 20px;\n            // width: 150px;\n            text-align: left;\n            color: white;\n            // padding-right: 20px;\n        }\n    }\n\n    .main-view {\n        flex: 1;\n        display: flex;\n        flex-direction: row;\n\n        overflow: hidden;\n    }\n}\n"],sourceRoot:""}]);const s=a},2131:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".confirmation-container p{padding:20px;font-size:30px}\n","",{version:3,sources:["webpack://./Client/src/Views/ConfirmationForm/ConfirmationForm.scss"],names:[],mappings:"AAAA,0BAEQ,YAAa,CACb,cAAe",sourcesContent:[".confirmation-container {\n    p {\n        padding: 20px;\n        font-size: 30px;\n    }\n}\n"],sourceRoot:""}]);const s=a},4487:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".auth-view{padding:3em 1em 1em 1em;background-color:rgba(255,255,255,0.646);backdrop-filter:blur(20px);box-shadow:0px 3px 4px rgba(128,128,128,0.377);width:30em;overflow:auto;text-align:center;margin:50px 90px 0 0;animation:auth-view-load 0.3s ease-out;transition:all 1s;position:absolute;right:0;display:flex;flex-direction:column;justify-content:space-around}.auth-view h1{text-align:center;overflow:hidden}.auth-view p{padding-top:10px;color:#4f4f4f;overflow:hidden}.auth-view .error-message{color:rgba(136,17,17,0.63);font-size:15px;font-style:italic}.auth-view .other-options{padding-top:20px;text-align:center;display:flex;flex-direction:column}.auth-view .other-options p{font-size:10px;color:darkgray;margin-bottom:-10px}@media (max-width: 800px){.auth-view{width:100%;height:100%;margin:0}}@keyframes auth-view-load{0%{opacity:0;margin-top:40px}100%{opacity:1;margin-top:50px}}\n","",{version:3,sources:["webpack://./Client/src/Views/Home/AuthView.scss"],names:[],mappings:"AACA,WACI,uBAAwB,CACxB,wCAA4C,CAC5C,0BAA2B,CAC3B,8CAAkD,CAClD,UAAW,CACX,aAAc,CAWd,iBAAkB,CAClB,oBAAqB,CACrB,sCAAuC,CACvC,iBAAkB,CAClB,iBAAkB,CAClB,OAAQ,CAER,YAAa,CACb,qBAAsB,CACtB,4BAA6B,CA1BjC,cAQQ,iBAAkB,CAClB,eAAgB,CATxB,aAYQ,gBAAiB,CACjB,aAAsB,CACtB,eAAgB,CAdxB,0BA6BQ,0BAA8B,CAC9B,cAAe,CACf,iBAAkB,CA/B1B,0BAmCQ,gBAAiB,CACjB,iBAAkB,CAClB,YAAa,CACb,qBAAsB,CAtC9B,4BAyCY,cAAe,CACf,cAAe,CACf,mBAAoB,CACvB,0BA5CT,WAiDY,UAAW,CACX,WAAY,CACZ,QAAS,CACZ,CAIT,0BACI,GACI,SAAU,CACV,eAAgB,CAEpB,KACI,SAAU,CACV,eAAgB,CAAA",sourcesContent:['@import "../../globals.scss";\n.auth-view {\n    padding: 3em 1em 1em 1em;\n    background-color: rgba(255, 255, 255, 0.646);\n    backdrop-filter: blur(20px);\n    box-shadow: 0px 3px 4px rgba(128, 128, 128, 0.377);\n    width: 30em;\n    overflow: auto;\n    h1 {\n        text-align: center;\n        overflow: hidden;\n    }\n    p {\n        padding-top: 10px;\n        color: rgb(79, 79, 79);\n        overflow: hidden;\n    }\n\n    text-align: center;\n    margin: 50px 90px 0 0;\n    animation: auth-view-load 0.3s ease-out;\n    transition: all 1s;\n    position: absolute;\n    right: 0;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n\n    .error-message {\n        color: rgba(136, 17, 17, 0.63);\n        font-size: 15px;\n        font-style: italic;\n    }\n\n    .other-options {\n        padding-top: 20px;\n        text-align: center;\n        display: flex;\n        flex-direction: column;\n\n        p {\n            font-size: 10px;\n            color: darkgray;\n            margin-bottom: -10px;\n        }\n    }\n\n    @media (max-width: $mobile-width) {\n        & {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n        }\n    }\n}\n\n@keyframes auth-view-load {\n    0% {\n        opacity: 0;\n        margin-top: 40px;\n    }\n    100% {\n        opacity: 1;\n        margin-top: 50px;\n    }\n}\n'],sourceRoot:""}]);const s=a},8677:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=a},535:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".chats-view{flex:20%;min-width:250px;height:100%;box-shadow:10px 0px 20px rgba(0,0,0,0.043);border-right:#d4aa8c 5px solid;background-color:#fff;z-index:4;overflow:auto;padding:20px 20px 20px 20px}.chats-view .chatItem{cursor:pointer;overflow:hidden;transition:all 0.2s;height:70px;width:16.6em;display:flex;align-items:center;justify-content:space-between;padding:15px;margin:20px 10px 20px 0px}.chats-view .chatItem p{font-size:14px;text-align:right}.chats-view .chatItem img{text-align:left}.chats-view .chatItem.chatActive{border-right:#d4aa8c 10px solid;margin-right:0;background-color:rgba(249,232,232,0);font-weight:900;box-shadow:rgba(0,0,0,0) 0px 0px 20px;color:black}\n","",{version:3,sources:["webpack://./Client/src/Views/Message/ChatsView.scss"],names:[],mappings:"AACA,YACI,QAAS,CACT,eAAgB,CAChB,WAAY,CACZ,0CAA8C,CAC9C,8BAAqC,CACrC,qBAAoC,CACpC,SAAU,CACV,aAAc,CACd,2BAA4B,CAThC,sBAYQ,cAAe,CACf,eAAgB,CAEhB,mBAAoB,CAEpB,WAAY,CACZ,YAAa,CAEb,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAS9B,YAAa,CACb,yBAA0B,CAhClC,wBAyBY,cAAe,CACf,gBAAiB,CA1B7B,0BA6BY,eAAgB,CA7B5B,iCAoCY,+BAAsC,CAEtC,cAAe,CACf,oCAAwC,CACxC,eAAgB,CAChB,qCAAyC,CACzC,WAAY",sourcesContent:['@import "../../globals.scss";\n.chats-view {\n    flex: 20%;\n    min-width: 250px;\n    height: 100%;\n    box-shadow: 10px 0px 20px rgba(0, 0, 0, 0.043);\n    border-right: $border-color 5px solid;\n    background-color: rgb(255, 255, 255);\n    z-index: 4;\n    overflow: auto;\n    padding: 20px 20px 20px 20px;\n\n    .chatItem {\n        cursor: pointer;\n        overflow: hidden;\n\n        transition: all 0.2s;\n\n        height: 70px;\n        width: 16.6em;\n\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n\n        p {\n            font-size: 14px;\n            text-align: right;\n        }\n        img {\n            text-align: left;\n        }\n        padding: 15px;\n        margin: 20px 10px 20px 0px;\n        // background-color: rgba(255, 255, 255, 0.879);\n        // box-shadow: 0 0 20px rgba(0, 0, 0, 0.096);\n        &.chatActive {\n            border-right: $border-color 10px solid;\n            // width: 16em;\n            margin-right: 0;\n            background-color: rgba(249, 232, 232, 0);\n            font-weight: 900;\n            box-shadow: rgba(0, 0, 0, 0) 0px 0px 20px;\n            color: black;\n        }\n    }\n}\n'],sourceRoot:""}]);const s=a},4159:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".conversation-view{flex:80%;display:flex;flex-direction:column;background-color:rgba(198,198,198,0.199);height:100%;backdrop-filter:blur(3px);z-index:0;overflow:visible;position:relative}.conversation-view .currentConversationInfo{position:absolute;z-index:30;top:0;width:100%;display:flex;align-items:center;padding:20px;border-bottom:#f0e1d6 3px solid;backdrop-filter:blur(3px);background-color:rgba(255,255,255,0.781)}.conversation-view .currentConversationInfo h1{margin-left:20px;font-size:15px}.conversation-view .messages-view{overflow-y:visible;flex:80%;padding-top:7em;-ms-overflow-style:none;scrollbar-width:none}.conversation-view .messages-view::-webkit-scrollbar{display:none}.conversation-view .messages-view .message-box{position:relative;margin-left:20px;margin-bottom:20px;display:flex;animation:messageFloatIn 0.2s ease-in}.conversation-view .messages-view .message-box.receiving-msg img{width:30px;height:30px;border-width:3px;position:absolute;bottom:0}.conversation-view .messages-view .message-box.receiving-msg p{max-width:600px;word-wrap:break-word;background-color:#fff;box-shadow:rgba(0,0,0,0.027) 0px 0px 20px;padding:20px;margin-left:40px}.conversation-view .messages-view .message-box.sending-msg{justify-content:end}.conversation-view .messages-view .message-box.sending-msg p{background-color:#e2c5b1;padding:20px;max-width:600px;word-wrap:break-word;margin-right:40px;color:white}.conversation-view .send-message-form{flex:20%;width:100%;background-color:rgba(255,255,255,0.781);box-shadow:rgba(0,0,0,0.057) 0px 0 20px}.conversation-view .send-message-form .send-btn{flex:10%}@keyframes messageFloatIn{0%{margin-top:30px;opacity:0.1}100%{margin-top:0;opacity:1}}\n","",{version:3,sources:["webpack://./Client/src/Views/Message/ConversationView.scss"],names:[],mappings:"AACA,mBACI,QAAS,CACT,YAAa,CACb,qBAAsB,CACtB,wCAA4C,CAC5C,WAAY,CACZ,yBAA0B,CAE1B,SAAU,CACV,gBAAiB,CACjB,iBAAkB,CAVtB,4CAaQ,iBAAkB,CAClB,UAAW,CACX,KAAM,CACN,UAAW,CAEX,YAAa,CACb,kBAAmB,CACnB,YAAa,CACb,+BAAoD,CACpD,yBAA0B,CAC1B,wCAA4C,CAvBpD,+CAyBY,gBAAiB,CACjB,cAAe,CA1B3B,kCA+BQ,kBAAmB,CACnB,QAAS,CACT,eAAgB,CAIhB,uBAAwB,CACxB,oBAAqB,CAtC7B,qDAmCY,YAAa,CAnCzB,+CAyCY,iBAAkB,CAClB,gBAAiB,CACjB,kBAAmB,CACnB,YAAa,CAEb,qCAAsC,CA9ClD,iEAkDoB,UAAW,CACX,WAAY,CACZ,gBAAiB,CAEjB,iBAAkB,CAClB,QAAS,CAvD7B,+DA0DoB,eAAgB,CAChB,oBAAqB,CAErB,qBAAoC,CACpC,yCAA6C,CAC7C,YAAa,CACb,gBAAiB,CAhErC,2DAoEgB,mBAAoB,CApEpC,6DAuEoB,wBAA6C,CAE7C,YAAa,CACb,eAAgB,CAChB,oBAAqB,CAErB,iBAAkB,CAClB,WAAY,CA9EhC,sCAqFQ,QAAS,CACT,UAAW,CACX,wCAA4C,CAE5C,uCAA2C,CAzFnD,gDA6FY,QAAS,CACZ,0BAKL,GACI,eAAgB,CAChB,WAAY,CAEhB,KACI,YAAa,CACb,SAAU,CAAA",sourcesContent:['@import "../../globals.scss";\n.conversation-view {\n    flex: 80%;\n    display: flex;\n    flex-direction: column;\n    background-color: rgba(198, 198, 198, 0.199);\n    height: 100%;\n    backdrop-filter: blur(3px);\n\n    z-index: 0;\n    overflow: visible;\n    position: relative;\n\n    .currentConversationInfo {\n        position: absolute;\n        z-index: 30;\n        top: 0;\n        width: 100%;\n\n        display: flex;\n        align-items: center;\n        padding: 20px;\n        border-bottom: lighten($border-color, 20%) 3px solid;\n        backdrop-filter: blur(3px);\n        background-color: rgba(255, 255, 255, 0.781);\n        h1 {\n            margin-left: 20px;\n            font-size: 15px;\n        }\n    }\n\n    .messages-view {\n        overflow-y: visible;\n        flex: 80%;\n        padding-top: 7em;\n        &::-webkit-scrollbar {\n            display: none;\n        }\n        -ms-overflow-style: none;\n        scrollbar-width: none;\n\n        .message-box {\n            position: relative;\n            margin-left: 20px;\n            margin-bottom: 20px;\n            display: flex;\n\n            animation: messageFloatIn 0.2s ease-in;\n\n            &.receiving-msg {\n                img {\n                    width: 30px;\n                    height: 30px;\n                    border-width: 3px;\n\n                    position: absolute;\n                    bottom: 0;\n                }\n                p {\n                    max-width: 600px;\n                    word-wrap: break-word;\n\n                    background-color: rgb(255, 255, 255);\n                    box-shadow: rgba(0, 0, 0, 0.027) 0px 0px 20px;\n                    padding: 20px;\n                    margin-left: 40px;\n                }\n            }\n            &.sending-msg {\n                justify-content: end;\n\n                p {\n                    background-color: lighten($border-color, 10%);\n\n                    padding: 20px;\n                    max-width: 600px;\n                    word-wrap: break-word;\n\n                    margin-right: 40px;\n                    color: white;\n                }\n            }\n        }\n    }\n    .send-message-form {\n        // height: 100px;\n        flex: 20%;\n        width: 100%;\n        background-color: rgba(255, 255, 255, 0.781);\n\n        box-shadow: rgba(0, 0, 0, 0.057) 0px 0 20px;\n\n        // padding: 20px;\n        .send-btn {\n            flex: 10%;\n        }\n    }\n}\n\n@keyframes messageFloatIn {\n    0% {\n        margin-top: 30px;\n        opacity: 0.1;\n    }\n    100% {\n        margin-top: 0;\n        opacity: 1;\n    }\n}\n'],sourceRoot:""}]);const s=a},8690:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".notification{opacity:0;position:fixed;bottom:-100px;right:20px;margin-left:20px;backdrop-filter:blur(10px);padding:20px 80px 20px 80px;transition:all 0.4s ease-in-out;box-shadow:rgba(0,0,0,0.064) 5px 5px 5px;text-shadow:rgba(0,0,0,0.064) 5px 5px 5px;z-index:2020020;display:flex;align-items:start;justify-content:start;font-size:15px}.notification.error{background-color:rgba(139,0,0,0.413);color:white}.notification.success{background-color:rgba(51,121,69,0.646);color:white}.notification.active{opacity:1;bottom:30px}\n","",{version:3,sources:["webpack://./Client/src/Views/Notification/Notification.scss"],names:[],mappings:"AAAA,cACI,SAAU,CACV,cAAe,CACf,aAAc,CACd,UAAW,CACX,gBAAiB,CACjB,0BAA2B,CAC3B,2BAA4B,CAC5B,+BAAgC,CAChC,wCAA4C,CAC5C,yCAA6C,CAE7C,eAAgB,CAEhB,YAAa,CACb,iBAAkB,CAClB,qBAAsB,CACtB,cAAe,CAjBnB,oBAmBQ,oCAAwC,CACxC,WAAY,CApBpB,sBAuBQ,sCAA0C,CAC1C,WAAY,CAxBpB,qBA2BQ,SAAU,CACV,WAAY",sourcesContent:[".notification {\n    opacity: 0;\n    position: fixed;\n    bottom: -100px;\n    right: 20px;\n    margin-left: 20px;\n    backdrop-filter: blur(10px);\n    padding: 20px 80px 20px 80px;\n    transition: all 0.4s ease-in-out;\n    box-shadow: rgba(0, 0, 0, 0.064) 5px 5px 5px;\n    text-shadow: rgba(0, 0, 0, 0.064) 5px 5px 5px;\n\n    z-index: 2020020;\n\n    display: flex;\n    align-items: start;\n    justify-content: start;\n    font-size: 15px;\n    &.error {\n        background-color: rgba(139, 0, 0, 0.413);\n        color: white;\n    }\n    &.success {\n        background-color: rgba(51, 121, 69, 0.646);\n        color: white;\n    }\n    &.active {\n        opacity: 1;\n        bottom: 30px;\n    }\n}\n"],sourceRoot:""}]);const s=a},4336:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.popup-wrapper{position:relative}.popup{position:fixed;overflow-y:scroll;width:60vw;height:auto;top:10%;left:20%;transform:translate(-50%, 0);z-index:9999;background-color:white;box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5);border-radius:5px;transform:scale(0.9);opacity:0;transition:all 0.3s ease-in-out;pointer-events:none;overflow-y:auto}@media (max-width: 800px){.popup{border-radius:0px;top:0;left:0;width:100%;height:100%}}.popup-top{padding:20px 30px 0 30px;height:70px;overflow-y:hidden;border-bottom:#d4aa8c 5px solid;background-color:rgba(255,255,255,0);backdrop-filter:blur(3px);padding-bottom:15px}.popup-top h1{color:black;flex:90%;font-size:25px;font-weight:800}#popup-close-button{border:none;position:absolute;top:14px;right:17px;z-index:9000;background-color:rgba(116,11,11,0);width:40px;height:40px;font-family:"Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;font-size:20px;font-weight:100;color:#000;cursor:pointer}.popup-body{padding:20px;max-height:70vh}@media (max-width: 800px){.popup-body{max-height:100%}}.active{transform:scale(1);pointer-events:all;opacity:1}.background{width:100vw;height:100vh;position:fixed;top:0;z-index:9990;background-color:#ffffff70;backdrop-filter:blur(5px);pointer-events:none;transition:all 0.3s;opacity:0}.background.active{pointer-events:all;opacity:1}\n',"",{version:3,sources:["webpack://./Client/src/Views/Popup/Popup.scss"],names:[],mappings:"AAEA,eACI,iBAAkB,CACrB,OAGG,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,OAAQ,CACR,QAAS,CACT,4BAA6B,CAC7B,YAAa,CACb,sBAAuB,CAEvB,iGAA6G,CAC7G,iBAAkB,CAClB,oBAAqB,CACrB,SAAU,CACV,+BAAgC,CAChC,mBAAoB,CACpB,eAAgB,CAQnB,0BAzBD,OAmBQ,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,UAAW,CACX,WAAY,CAEnB,CAED,WACI,wBAAyB,CACzB,WAAY,CACZ,iBAAkB,CAElB,+BAAsC,CACtC,oCAAwC,CACxC,yBAA0B,CAC1B,mBAAoB,CARxB,cAWQ,WAAY,CACZ,QAAS,CACT,cAAe,CACf,eAAgB,CACnB,oBAID,WAAY,CACZ,iBAAkB,CAClB,QAAS,CACT,UAAW,CACX,YAAa,CACb,kCAAsC,CACtC,UAAW,CACX,WAAY,CACZ,4EAA6E,CAC7E,cAAe,CACf,eAAgB,CAChB,UAAmB,CACnB,cAAe,CAClB,YAGG,YAAa,CACb,eAAgB,CAInB,0BAND,YAIQ,eAAgB,CAEvB,CAED,QACI,kBAAmB,CACnB,kBAAmB,CACnB,SAAU,CACb,YAGG,WAAY,CACZ,YAAa,CACb,cAAe,CACf,KAAM,CACN,YAAa,CACb,0BAA2B,CAC3B,yBAA0B,CAC1B,mBAAoB,CACpB,mBAAoB,CACpB,SAAU,CAVd,mBAaQ,kBAAmB,CACnB,SAAU",sourcesContent:['@import "../../globals.scss";\n\n.popup-wrapper {\n    position: relative;\n}\n\n.popup {\n    position: fixed;\n    overflow-y: scroll;\n    width: 60vw;\n    height: auto;\n    top: 10%;\n    left: 20%;\n    transform: translate(-50%, 0);\n    z-index: 9999;\n    background-color: white;\n\n    box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3), 0 1px 2px rgba(0, 0, 0, 0.5);\n    border-radius: 5px;\n    transform: scale(0.9);\n    opacity: 0;\n    transition: all 0.3s ease-in-out;\n    pointer-events: none;\n    overflow-y: auto;\n    @include mobile {\n        border-radius: 0px;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n}\n\n.popup-top {\n    padding: 20px 30px 0 30px;\n    height: 70px;\n    overflow-y: hidden;\n\n    border-bottom: $border-color 5px solid;\n    background-color: rgba(255, 255, 255, 0);\n    backdrop-filter: blur(3px);\n    padding-bottom: 15px;\n\n    h1 {\n        color: black;\n        flex: 90%;\n        font-size: 25px;\n        font-weight: 800;\n    }\n}\n\n#popup-close-button {\n    border: none;\n    position: absolute;\n    top: 14px;\n    right: 17px;\n    z-index: 9000;\n    background-color: rgba(116, 11, 11, 0);\n    width: 40px;\n    height: 40px;\n    font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;\n    font-size: 20px;\n    font-weight: 100;\n    color: rgb(0, 0, 0);\n    cursor: pointer;\n}\n\n.popup-body {\n    padding: 20px;\n    max-height: 70vh;\n    @include mobile {\n        max-height: 100%;\n    }\n}\n\n.active {\n    transform: scale(1);\n    pointer-events: all;\n    opacity: 1;\n}\n\n.background {\n    width: 100vw;\n    height: 100vh;\n    position: fixed;\n    top: 0;\n    z-index: 9990;\n    background-color: #ffffff70;\n    backdrop-filter: blur(5px);\n    pointer-events: none;\n    transition: all 0.3s;\n    opacity: 0;\n\n    &.active {\n        pointer-events: all;\n        opacity: 1;\n    }\n}\n'],sourceRoot:""}]);const s=a},6555:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".report-view{padding:20px}.report-view h1{font-size:20px}\n","",{version:3,sources:["webpack://./Client/src/Views/Report/ReportView.scss"],names:[],mappings:"AAAA,aACI,YAAa,CADjB,gBAGQ,cAAe",sourcesContent:[".report-view {\n    padding: 20px;\n    h1 {\n        font-size: 20px;\n    }\n}\n"],sourceRoot:""}]);const s=a},610:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".search-results{flex:70%;background-color:rgba(255,255,255,0.199);height:100%;backdrop-filter:blur(3px);padding:10px 20px 80px 10px;z-index:0;overflow-y:scroll}\n","",{version:3,sources:["webpack://./Client/src/Views/Search/SearchResults.scss"],names:[],mappings:"AAAA,gBACI,QAAS,CACT,wCAA4C,CAC5C,WAAY,CACZ,yBAA0B,CAE1B,2BAA4B,CAC5B,SAAU,CACV,iBAAkB",sourcesContent:[".search-results {\n    flex: 70%;\n    background-color: rgba(255, 255, 255, 0.199);\n    height: 100%;\n    backdrop-filter: blur(3px);\n\n    padding: 10px 20px 80px 10px;\n    z-index: 0;\n    overflow-y: scroll;\n}\n"],sourceRoot:""}]);const s=a},6891:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".search-view{flex:30%;height:100%;box-shadow:10px 0px 20px rgba(0,0,0,0.071);border-right:#d4aa8c 5px solid;background-color:#fff;z-index:4;overflow:auto;padding:20px 20px 20px 20px}\n","",{version:3,sources:["webpack://./Client/src/Views/Search/SearchView.scss"],names:[],mappings:"AAEA,aACI,QAAS,CACT,WAAY,CACZ,0CAA8C,CAC9C,8BAAqC,CACrC,qBAAoC,CACpC,SAAU,CACV,aAAc,CACd,2BAA4B",sourcesContent:['@import "../../globals.scss";\n\n.search-view {\n    flex: 30%;\n    height: 100%;\n    box-shadow: 10px 0px 20px rgba(0, 0, 0, 0.071);\n    border-right: $border-color 5px solid;\n    background-color: rgb(255, 255, 255);\n    z-index: 4;\n    overflow: auto;\n    padding: 20px 20px 20px 20px;\n}\n'],sourceRoot:""}]);const s=a},5935:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".join-group-container{display:flex;flex-direction:column}.join-group-container .sub-info{display:flex;flex-wrap:wrap}.join-group-container .info{padding:20px}.join-group-container .info p{word-wrap:normal}.join-group-container .group-popup-title{width:100%;margin:-20px;height:5em;padding-left:30px;color:white;position:absolute;box-shadow:inset 0 10px 20px rgba(0,0,0,0.262);display:flex;align-items:center;justify-content:center}.join-group-container .group-popup-title h1{width:100%;text-align:left}.join-group-container .popup-info-fields{margin-top:5em}\n","",{version:3,sources:["webpack://./Client/src/Views/Study/joinStudyGroupView/JoinStudyGroupView.scss"],names:[],mappings:"AAAA,sBACI,YAAa,CACb,qBAAsB,CAF1B,gCAIQ,YAAa,CACb,cAAe,CALvB,4BAQQ,YAAa,CARrB,8BAUY,gBAAiB,CAV7B,yCAeQ,UAAW,CACX,YAAa,CACb,UAAW,CACX,iBAAkB,CAClB,WAAY,CACZ,iBAAkB,CAClB,8CAAkD,CAElD,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAzB/B,4CA4BY,UAAW,CACX,eAAgB,CA7B5B,yCAkCQ,cAAe",sourcesContent:[".join-group-container {\n    display: flex;\n    flex-direction: column;\n    .sub-info {\n        display: flex;\n        flex-wrap: wrap;\n    }\n    .info {\n        padding: 20px;\n        p {\n            word-wrap: normal;\n        }\n    }\n\n    .group-popup-title {\n        width: 100%;\n        margin: -20px;\n        height: 5em;\n        padding-left: 30px;\n        color: white;\n        position: absolute;\n        box-shadow: inset 0 10px 20px rgba(0, 0, 0, 0.262);\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        h1 {\n            width: 100%;\n            text-align: left;\n        }\n    }\n\n    .popup-info-fields {\n        margin-top: 5em;\n    }\n}\n"],sourceRoot:""}]);const s=a},1918:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".study-group-view{min-width:200px;min-height:200px;padding:30px 20px 80px 20px;overflow:none;box-shadow:0px 10px 10px #0000000a;margin:30px;position:relative;animation:float-in-group 0.3s ease-out;box-shadow:rgba(0,0,0,0.173) 5px 5px 20px;border-radius:5px;display:flex;align-items:center;justify-content:center}.study-group-view .group-title{color:#fff;font-size:30px;text-shadow:rgba(0,0,0,0.705) 3px 5px 5px 10px;text-align:center}.study-group-view .group-view-sub-details{position:absolute;top:5px;right:5px;display:flex}.study-group-view .group-view-sub-details p{background-color:rgba(255,255,255,0.349);backdrop-filter:blur(5px);color:#fff;border-radius:7px;font-size:10px;padding:3px;margin-left:5px;text-shadow:rgba(0,0,0,0.705) 3px 5px 5px 10px}.study-group-view .group-view-details{display:flex;flex-wrap:wrap;position:absolute;bottom:0;left:0;width:100%;padding:20px;background-color:rgba(255,255,255,0.982);box-shadow:-10px 0px 20px rgba(0,0,0,0.139);border-top:#e3e3e3 solid 3px}.study-group-view .group-view-details p{font-size:10px;color:#545454;margin:0px 10px 0 10px}@keyframes float-in-group{0%{margin-top:50px;opacity:0}100%{margin-top:30px;opacity:1}}\n","",{version:3,sources:["webpack://./Client/src/Views/Study/studyGroupView/StudyGroupView.scss"],names:[],mappings:"AAAA,kBACI,eAAgB,CAChB,gBAAiB,CACjB,2BAA4B,CAC5B,aAAc,CACd,kCAAmC,CACnC,WAAY,CACZ,iBAAkB,CAClB,sCAAuC,CAEvC,yCAA6C,CAC7C,iBAAkB,CAElB,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAf3B,+BAkBQ,UAAyB,CACzB,cAAe,CACf,8CAAkD,CAClD,iBAAkB,CArB1B,0CAwBQ,iBAAkB,CAClB,OAAQ,CACR,SAAU,CACV,YAAa,CA3BrB,4CA6BY,wCAA4C,CAC5C,yBAA0B,CAC1B,UAAyB,CACzB,iBAAkB,CAClB,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,8CAAkD,CApC9D,sCAwCQ,YAAa,CACb,cAAe,CACf,iBAAkB,CAClB,QAAS,CACT,MAAO,CACP,UAAW,CACX,YAAa,CACb,wCAA4C,CAC5C,2CAA+C,CAC/C,4BAAwC,CAjDhD,wCAoDY,cAAe,CACf,aAAsB,CACtB,sBAAuB,CAC1B,0BAKL,GACI,eAAgB,CAChB,SAAU,CAEd,KACI,eAAgB,CAChB,SAAU,CAAA",sourcesContent:[".study-group-view {\n    min-width: 200px;\n    min-height: 200px;\n    padding: 30px 20px 80px 20px;\n    overflow: none;\n    box-shadow: 0px 10px 10px #0000000a;\n    margin: 30px;\n    position: relative;\n    animation: float-in-group 0.3s ease-out;\n\n    box-shadow: rgba(0, 0, 0, 0.173) 5px 5px 20px;\n    border-radius: 5px;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    .group-title {\n        color: rgb(255, 255, 255);\n        font-size: 30px;\n        text-shadow: rgba(0, 0, 0, 0.705) 3px 5px 5px 10px;\n        text-align: center;\n    }\n    .group-view-sub-details {\n        position: absolute;\n        top: 5px;\n        right: 5px;\n        display: flex;\n        p {\n            background-color: rgba(255, 255, 255, 0.349);\n            backdrop-filter: blur(5px);\n            color: rgb(255, 255, 255);\n            border-radius: 7px;\n            font-size: 10px;\n            padding: 3px;\n            margin-left: 5px;\n            text-shadow: rgba(0, 0, 0, 0.705) 3px 5px 5px 10px;\n        }\n    }\n    .group-view-details {\n        display: flex;\n        flex-wrap: wrap;\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        padding: 20px;\n        background-color: rgba(255, 255, 255, 0.982);\n        box-shadow: -10px 0px 20px rgba(0, 0, 0, 0.139);\n        border-top: rgb(227, 227, 227) solid 3px;\n\n        p {\n            font-size: 10px;\n            color: rgb(84, 84, 84);\n            margin: 0px 10px 0 10px;\n        }\n    }\n}\n\n@keyframes float-in-group {\n    0% {\n        margin-top: 50px;\n        opacity: 0;\n    }\n    100% {\n        margin-top: 30px;\n        opacity: 1;\n    }\n}\n"],sourceRoot:""}]);const s=a},6057:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".details-container{overflow-y:scroll;flex:0.2;min-width:16em;background-color:#fff;box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5);border-radius:5px;display:flex;flex-direction:column;margin:20px;position:relative}.details-container .meetinginfo-container{padding:30px;width:100%;font-weight:bold;box-shadow:10px 0 10px rgba(0,0,0,0.173)}.details-container .meetinginfo-container h1{background-color:#ffda5a;font-size:20px;margin-bottom:10px}.details-container .meetinginfo-container .meetinginfo-description{font-weight:normal;font-size:15px}.details-container .description-container{padding:30px 20px 0 20px;font-weight:bold;width:100%}.details-container .description-container h1{font-size:15px;margin-bottom:10px}.details-container .description-container .details-description{font-weight:normal;word-wrap:break-word;width:100%;font-size:15px}.details-container .buttons{position:absolute;bottom:20px;display:flex;align-items:center;justify-content:center;width:100%}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/DetailsView/DetailsView.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AACA,mBACI,iBAAkB,CAClB,QAAS,CACT,cAAe,CACf,qBAAoC,CAEpC,iGAA6G,CAC7G,iBAAkB,CAClB,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,iBAAkB,CAXtB,0CAkBQ,YAAa,CACb,UAAW,CAEX,gBAAiB,CACjB,wCAA4C,CAtBpD,6CAwBY,wBCpBa,CDqBb,cAAe,CACf,kBAAmB,CA1B/B,mEA8BY,kBAAmB,CACnB,cAAe,CA/B3B,0CAoCQ,wBAAyB,CACzB,gBAAiB,CACjB,UAAW,CAtCnB,6CAwCY,cAAe,CACf,kBAAmB,CAzC/B,+DA6CY,kBAAmB,CACnB,oBAAqB,CACrB,UAAW,CACX,cAAe,CAhD3B,4BAoDQ,iBAAkB,CAClB,WAAY,CAEZ,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,UAAW",sourcesContent:['@import "../../../globals.scss";\n.details-container {\n    overflow-y: scroll;\n    flex: 0.2;\n    min-width: 16em;\n    background-color: rgb(255, 255, 255);\n\n    box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3), 0 1px 2px rgba(0, 0, 0, 0.5);\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    margin: 20px;\n    position: relative;\n\n    // display: flex;\n    // flex-direction: column;\n    // align-items: center;\n\n    .meetinginfo-container {\n        padding: 30px;\n        width: 100%;\n\n        font-weight: bold;\n        box-shadow: 10px 0 10px rgba(0, 0, 0, 0.173);\n        h1 {\n            background-color: $highlight-color;\n            font-size: 20px;\n            margin-bottom: 10px;\n        }\n\n        .meetinginfo-description {\n            font-weight: normal;\n            font-size: 15px;\n        }\n    }\n\n    .description-container {\n        padding: 30px 20px 0 20px;\n        font-weight: bold;\n        width: 100%;\n        h1 {\n            font-size: 15px;\n            margin-bottom: 10px;\n        }\n\n        .details-description {\n            font-weight: normal;\n            word-wrap: break-word;\n            width: 100%;\n            font-size: 15px;\n        }\n    }\n    .buttons {\n        position: absolute;\n        bottom: 20px;\n        // margin-left: 75px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 800px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},5092:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".feed-container{position:relative;overflow:visible;overflow-y:scroll;flex:0.6;backdrop-filter:blur(3px);overflow:auto;padding:20px;scrollbar-width:none}.feed-container .posts-container{padding-bottom:30px;overflow:visible}.options-container{position:fixed;z-index:9;bottom:0;right:300px;width:100%;text-align:right}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/Feed/FeedView.scss"],names:[],mappings:"AAAA,gBACI,iBAAkB,CAClB,gBAAiB,CACjB,iBAAkB,CAClB,QAAS,CACT,yBAA0B,CAE1B,aAAc,CACd,YAAa,CAEb,oBAAqB,CAVzB,iCAYQ,mBAAoB,CACpB,gBAAiB,CACpB,mBAID,cAAe,CACf,SAAU,CAEV,QAAS,CACT,WAAY,CACZ,UAAW,CACX,gBAAiB",sourcesContent:[".feed-container {\n    position: relative;\n    overflow: visible;\n    overflow-y: scroll;\n    flex: 0.6;\n    backdrop-filter: blur(3px);\n\n    overflow: auto;\n    padding: 20px;\n\n    scrollbar-width: none;\n    .posts-container {\n        padding-bottom: 30px;\n        overflow: visible;\n    }\n}\n\n.options-container {\n    position: fixed;\n    z-index: 9;\n    //TODO find a good z index\n    bottom: 0;\n    right: 300px;\n    width: 100%;\n    text-align: right;\n}\n"],sourceRoot:""}]);const s=a},1888:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".members-container{background-color:#fff;backdrop-filter:blur(3px);box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5);border-radius:5px;margin:20px;overflow-y:scroll;flex:0.2;min-width:16em}.members-container .member{padding:10px;background-color:#fff;display:flex;align-items:center;transition:all 0.2s;border-left:0px solid}.members-container .member p{padding-left:20px}.members-container .member:first-child{background-color:#fafafa}.members-container .member:nth-child(2n+3){background-color:#f4f4f4}.members-container .member:hover{border-left:10px solid;color:black;cursor:pointer;overflow:hidden}.members-container .member.owner{margin-bottom:20px}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/Members/MembersView.scss"],names:[],mappings:"AACA,mBACI,qBAAoC,CACpC,yBAA0B,CAC1B,iGAA6G,CAC7G,iBAAkB,CAClB,WAAY,CACZ,iBAAkB,CAClB,QAAS,CACT,cAAe,CARnB,2BAWQ,YAAa,CACb,qBAAoC,CACpC,YAAa,CACb,kBAAmB,CACnB,mBAAoB,CACpB,qBAAsB,CAhB9B,6BAoBY,iBAAkB,CApB9B,uCAwBY,wBAAoC,CAxBhD,2CA2BY,wBAAoC,CA3BhD,iCA+BY,sBAAuB,CAEvB,WAAY,CACZ,cAAe,CACf,eAAgB,CAnC5B,iCAuCY,kBAAmB",sourcesContent:['@import "../../../globals.scss";\n.members-container {\n    background-color: rgb(255, 255, 255);\n    backdrop-filter: blur(3px);\n    box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3), 0 1px 2px rgba(0, 0, 0, 0.5);\n    border-radius: 5px;\n    margin: 20px;\n    overflow-y: scroll;\n    flex: 0.2;\n    min-width: 16em;\n\n    .member {\n        padding: 10px;\n        background-color: rgb(255, 255, 255);\n        display: flex;\n        align-items: center;\n        transition: all 0.2s;\n        border-left: 0px solid;\n        // word-wrap: break-word;\n\n        p {\n            padding-left: 20px;\n        }\n\n        &:first-child {\n            background-color: rgb(250, 250, 250);\n        }\n        &:nth-child(2n + 3) {\n            background-color: rgb(244, 244, 244);\n        }\n\n        &:hover {\n            border-left: 10px solid;\n            // background-color: rgb(244, 244, 244);\n            color: black;\n            cursor: pointer;\n            overflow: hidden;\n        }\n\n        &.owner {\n            margin-bottom: 20px;\n            // border-width: 20px;\n        }\n    }\n}\n'],sourceRoot:""}]);const s=a},8338:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".member-details{padding:60px}.member-details .member-primary-info{display:flex;align-items:center;justify-content:center}.member-details .member-primary-info img{width:100px;height:100px;border-radius:50px;margin-right:30px}.member-details .member-primary-info h1{font-weight:900}.member-details .member-secondary-info{padding-top:50px;display:flex;justify-content:space-evenly}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/Members/ViewMemberView.scss"],names:[],mappings:"AAAA,gBACI,YAAa,CADjB,qCAGQ,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAL/B,yCAQY,WAAY,CACZ,YAAa,CACb,kBAAmB,CACnB,iBAAkB,CAX9B,wCAcY,eAAgB,CAd5B,uCAkBQ,gBAAiB,CAEjB,YAAa,CACb,4BAA6B",sourcesContent:[".member-details {\n    padding: 60px;\n    .member-primary-info {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        img {\n            width: 100px;\n            height: 100px;\n            border-radius: 50px;\n            margin-right: 30px;\n        }\n        h1 {\n            font-weight: 900;\n        }\n    }\n    .member-secondary-info {\n        padding-top: 50px;\n        // padding-bottom: 30px;\n        display: flex;\n        justify-content: space-evenly;\n    }\n}\n"],sourceRoot:""}]);const s=a},9068:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".view-meeting-top{display:flex;justify-content:start;align-items:center}.view-meeting-top h1{font-size:18px;background-color:black;padding:5px;color:white}.view-meeting-top .top-icon{font-size:30px;width:30px;margin-right:10px}hr{margin-left:20px;margin-right:20px;height:0.5px;background-color:rgba(0,0,0,0.283);border:none}.meeting-container{margin:40px 40px 40px 40px}.meeting-container.next-meeting-container{background-color:rgba(0,0,0,0.036);padding:20px}.meeting-container h1{font-size:25px;font-weight:100}.meeting-container .meeting{display:flex;justify-content:space-evenly;align-items:start}.meeting-container .meeting span{font-weight:900}.meeting-container .meeting p{padding:2px 0px 2px 0}.meeting-container .meeting .meeting-time{padding:10px 0px 10px 0;flex:0.5}.meeting-container .meeting .meeting-details{padding:10px 0px 10px 0;flex:0.5}.one-time-meetings-container{margin:40px 40px 40px 40px}.one-time-meetings-container h1{font-size:25px;font-weight:100}.one-time-meetings-container .one-time-meeting-container{display:flex;align-items:center;border-bottom:solid rgba(0,0,0,0.144) 0.5px}.one-time-meetings-container .one-time-meeting{flex:1;padding:10px 0 10px 0;margin:10px 0 10px 0}.one-time-meetings-container .one-time-meeting span{font-weight:900;padding-right:20px}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/ViewMeetingView/ViewMeetingView.scss"],names:[],mappings:"AAAA,kBACI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CAHvB,qBAKQ,cAAe,CACf,sBAAuB,CACvB,WAAY,CACZ,WAAY,CARpB,4BAWQ,cAAe,CACf,UAAW,CACX,iBAAkB,CACrB,GAID,gBAAiB,CACjB,iBAAkB,CAClB,YAAa,CACb,kCAAsC,CACtC,WAAY,CACf,mBA6BG,0BAA2B,CA5B/B,0CAEQ,kCAAsC,CACtC,YAAa,CAHrB,sBAMQ,cAAe,CACf,eAAgB,CAPxB,4BAUQ,YAAa,CACb,4BAA6B,CAC7B,iBAAkB,CAZ1B,iCAcY,eAAgB,CAd5B,8BAiBY,qBAAsB,CAjBlC,0CAoBY,uBAAwB,CACxB,QAAS,CArBrB,6CAwBY,uBAAwB,CACxB,QAAS,CACZ,6BASL,0BAA2B,CAL/B,gCAEQ,cAAe,CACf,eAAgB,CAHxB,yDAOQ,YAAa,CACb,kBAAmB,CACnB,2CAA+C,CATvD,+CAYQ,MAAO,CACP,qBAAsB,CACtB,oBAAqB,CAd7B,oDAgBY,eAAgB,CAChB,kBAAmB",sourcesContent:[".view-meeting-top {\n    display: flex;\n    justify-content: start;\n    align-items: center;\n    h1 {\n        font-size: 18px;\n        background-color: black;\n        padding: 5px;\n        color: white;\n    }\n    .top-icon {\n        font-size: 30px;\n        width: 30px;\n        margin-right: 10px;\n    }\n}\n\nhr {\n    margin-left: 20px;\n    margin-right: 20px;\n    height: 0.5px;\n    background-color: rgba(0, 0, 0, 0.283);\n    border: none;\n}\n.meeting-container {\n    &.next-meeting-container {\n        background-color: rgba(0, 0, 0, 0.036);\n        padding: 20px;\n    }\n    h1 {\n        font-size: 25px;\n        font-weight: 100;\n    }\n    .meeting {\n        display: flex;\n        justify-content: space-evenly;\n        align-items: start;\n        span {\n            font-weight: 900;\n        }\n        p {\n            padding: 2px 0px 2px 0;\n        }\n        .meeting-time {\n            padding: 10px 0px 10px 0;\n            flex: 0.5;\n        }\n        .meeting-details {\n            padding: 10px 0px 10px 0;\n            flex: 0.5;\n        }\n    }\n    margin: 40px 40px 40px 40px;\n}\n.one-time-meetings-container {\n    h1 {\n        font-size: 25px;\n        font-weight: 100;\n    }\n    margin: 40px 40px 40px 40px;\n    .one-time-meeting-container {\n        display: flex;\n        align-items: center;\n        border-bottom: solid rgba(0, 0, 0, 0.144) 0.5px;\n    }\n    .one-time-meeting {\n        flex: 1;\n        padding: 10px 0 10px 0;\n        margin: 10px 0 10px 0;\n        span {\n            font-weight: 900;\n            padding-right: 20px;\n        }\n    }\n}\n"],sourceRoot:""}]);const s=a},116:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".view-post-top{display:flex;justify-content:start;align-items:center;position:absolute;top:0px;left:0px;width:100%;height:5em;padding-left:30px;padding-top:30px;background-color:rgba(255,255,255,0.543);backdrop-filter:blur(5px);border-bottom:1px whitesmoke solid;padding-bottom:20px}.view-post-top h1{font-size:18px;background-color:black;padding:5px;color:white}.view-post-top .top-icon{font-size:30px;width:30px;margin-right:10px}.post-contents{margin:20px;margin-top:90px}.post-contents .post-title{font-size:35px;padding-bottom:20px}.post-contents .post-body{display:flex;background-color:rgba(232,231,231,0.221);padding:30px;margin-bottom:20px;border-bottom:#d4aa8c 5px solid}.post-contents .post-body .post-message{flex:70%}.post-contents .post-body .post-attachment{flex:30%}.post-contents .post-creator{cursor:pointer;align-items:center;justify-content:end;display:flex}.post-contents .post-creator p{font-size:10px;font-weight:100;padding-right:20px}.responses-container{border-top:rgba(0,0,0,0.214) 0.5px solid;padding-top:20px}.responses-container h1{margin-left:25px;font-size:13px;font-weight:400}.responses-container .response{margin:25px;background-color:rgba(0,0,0,0.014);padding:20px;display:flex;align-content:center;justify-content:space-between}.responses-container .response p{font-size:15px}\n","",{version:3,sources:["webpack://./Client/src/Views/StudyGroup/ViewPostView/ViewPostView.scss"],names:[],mappings:"AACA,eACI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACT,UAAW,CACX,UAAW,CAEX,iBAAkB,CAClB,gBAAiB,CACjB,wCAA4C,CAC5C,yBAA0B,CAC1B,kCAAmC,CAYnC,mBAAoB,CA1BxB,kBAgBQ,cAAe,CACf,sBAAuB,CACvB,WAAY,CACZ,WAAY,CAnBpB,yBAsBQ,cAAe,CACf,UAAW,CACX,iBAAkB,CACrB,eAKD,WAAY,CACZ,eAAgB,CAFpB,2BAIQ,cAAe,CACf,mBAAoB,CAL5B,0BAQQ,YAAa,CACb,wCAA4C,CAC5C,YAAa,CACb,kBAAmB,CACnB,+BAAsC,CAZ9C,wCAcY,QAAS,CAdrB,2CAiBY,QAAS,CAjBrB,6BAsBQ,cAAe,CACf,kBAAmB,CACnB,mBAAoB,CAMpB,YAAa,CA9BrB,+BA0BY,cAAe,CACf,eAAgB,CAChB,kBAAmB,CACtB,qBAML,wCAA4C,CAC5C,gBAAiB,CAHrB,wBAMQ,gBAAiB,CACjB,cAAe,CACf,eAAgB,CARxB,+BAWQ,WAAY,CACZ,kCAAsC,CACtC,YAAa,CACb,YAAa,CACb,oBAAqB,CACrB,6BAA8B,CAhBtC,iCAkBY,cAAe",sourcesContent:['@import "../../../globals.scss";\n.view-post-top {\n    display: flex;\n    justify-content: start;\n    align-items: center;\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 100%;\n    height: 5em;\n\n    padding-left: 30px;\n    padding-top: 30px;\n    background-color: rgba(255, 255, 255, 0.543);\n    backdrop-filter: blur(5px);\n    border-bottom: 1px whitesmoke solid;\n    h1 {\n        font-size: 18px;\n        background-color: black;\n        padding: 5px;\n        color: white;\n    }\n    .top-icon {\n        font-size: 30px;\n        width: 30px;\n        margin-right: 10px;\n    }\n    padding-bottom: 20px;\n}\n\n.post-contents {\n    margin: 20px;\n    margin-top: 90px;\n    .post-title {\n        font-size: 35px;\n        padding-bottom: 20px;\n    }\n    .post-body {\n        display: flex;\n        background-color: rgba(232, 231, 231, 0.221);\n        padding: 30px;\n        margin-bottom: 20px;\n        border-bottom: $border-color 5px solid;\n        .post-message {\n            flex: 70%;\n        }\n        .post-attachment {\n            flex: 30%;\n        }\n    }\n\n    .post-creator {\n        cursor: pointer;\n        align-items: center;\n        justify-content: end;\n        p {\n            font-size: 10px;\n            font-weight: 100;\n            padding-right: 20px;\n        }\n        display: flex;\n    }\n}\n.responses-container {\n    // margin: 20px;\n    border-top: rgba(0, 0, 0, 0.214) 0.5px solid;\n    padding-top: 20px;\n\n    h1 {\n        margin-left: 25px;\n        font-size: 13px;\n        font-weight: 400;\n    }\n    .response {\n        margin: 25px;\n        background-color: rgba(0, 0, 0, 0.014);\n        padding: 20px;\n        display: flex;\n        align-content: center;\n        justify-content: space-between;\n        p {\n            font-size: 15px;\n        }\n    }\n}\n'],sourceRoot:""}]);const s=a},3680:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.inline{display:flex;flex-direction:row;background-color:whitesmoke;padding:10px}.inline #left{flex:50%}.inline #right{flex:50%}.photo{background-color:whitesmoke}.photo img{width:90px;text-align:left}input[type="file"]{border:none;padding:25px;appearance:none}input[type="checkbox"]{-webkit-appearance:none;appearance:none;background-color:white;margin:0;box-shadow:1px 1px 1px #ebebeb;font:inherit;color:currentColor;width:1.2em;height:1.2em;border-radius:0.15em;transform:translateY(-0.075em);display:grid;place-content:center}input[type="checkbox"]::before{content:"";width:0.65em;height:0.65em;clip-path:polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);transform:scale(0);transform-origin:bottom left;transition:120ms transform ease-in-out;box-shadow:inset 1em 1em #028a22;background-color:CanvasText}input[type="checkbox"]:checked::before{transform:scale(1)}.imgPreview{width:100%;padding:20px}\n',"",{version:3,sources:["webpack://./Client/src/components/AccountSetupForm/AccountSetupForm.scss"],names:[],mappings:"AAAA,QACI,YAAa,CACb,kBAAmB,CACnB,2BAA4B,CAC5B,YAAa,CAJjB,cAMQ,QAAS,CANjB,eASQ,QAAS,CACZ,OAID,2BAA4B,CADhC,WAGQ,UAAW,CACX,eAAgB,CACnB,mBAID,WAAY,CACZ,YAAa,CACb,eAAgB,CACnB,uBAIG,uBAAwB,CAExB,eAAgB,CAEhB,sBAAuB,CAEvB,QAAS,CACT,8BAA0C,CAE1C,YAAa,CACb,kBAAmB,CACnB,WAAY,CACZ,YAAa,CACb,oBAAqB,CACrB,8BAA+B,CAE/B,YAAa,CACb,oBAAqB,CACxB,+BAGG,UAAW,CACX,YAAa,CACb,aAAc,CACd,sEAAuE,CACvE,kBAAmB,CACnB,4BAA6B,CAC7B,sCAAuC,CACvC,gCAAyC,CAEzC,2BAA4B,CAC/B,uCAGG,kBAAmB,CACtB,YAGG,UAAW,CACX,YAAa",sourcesContent:['.inline {\n    display: flex;\n    flex-direction: row;\n    background-color: whitesmoke;\n    padding: 10px;\n    #left {\n        flex: 50%;\n    }\n    #right {\n        flex: 50%;\n    }\n}\n\n.photo {\n    background-color: whitesmoke;\n    img {\n        width: 90px;\n        text-align: left;\n    }\n}\n\ninput[type="file"] {\n    border: none;\n    padding: 25px;\n    appearance: none;\n}\n\ninput[type="checkbox"] {\n    /* Add if not using autoprefixer */\n    -webkit-appearance: none;\n    /* Remove most all native input styles */\n    appearance: none;\n    /* For iOS < 15 */\n    background-color: white;\n    /* Not removed via appearance */\n    margin: 0;\n    box-shadow: 1px 1px 1px rgb(235, 235, 235);\n\n    font: inherit;\n    color: currentColor;\n    width: 1.2em;\n    height: 1.2em;\n    border-radius: 0.15em;\n    transform: translateY(-0.075em);\n\n    display: grid;\n    place-content: center;\n}\n\ninput[type="checkbox"]::before {\n    content: "";\n    width: 0.65em;\n    height: 0.65em;\n    clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);\n    transform: scale(0);\n    transform-origin: bottom left;\n    transition: 120ms transform ease-in-out;\n    box-shadow: inset 1em 1em rgb(2, 138, 34);\n    /* Windows High Contrast Mode */\n    background-color: CanvasText;\n}\n\ninput[type="checkbox"]:checked::before {\n    transform: scale(1);\n}\n\n.imgPreview {\n    width: 100%;\n    padding: 20px;\n}\n'],sourceRoot:""}]);const s=a},4497:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=a},7965:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".create-study-group-form{display:flex;flex-direction:column;justify-content:center}.side-by-side{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.side-by-side>*{width:200px;flex:1}\n","",{version:3,sources:["webpack://./Client/src/components/CreateStudyGroupForm/CreateStudyGroupForm.scss"],names:[],mappings:"AAAA,yBACI,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CAC1B,cAEG,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,kBAAmB,CAJvB,gBAOQ,WAAY,CACZ,MAAO",sourcesContent:[".create-study-group-form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n.side-by-side {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n    > * {\n        width: 200px;\n        flex: 1;\n    }\n}\n"],sourceRoot:""}]);const s=a},1985:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".post-container{position:relative;width:100%;padding-bottom:10px;margin-bottom:45px;overflow:visible}.post-container .post-top{display:flex;justify-content:start;align-items:center;position:absolute;top:30px;left:30px;width:100%;padding-bottom:20px}.post-container .post-top h1{font-size:18px;background-color:black;padding:5px;color:white}.post-container .post-top .top-icon{font-size:30px;width:30px;margin-right:10px}.post-container .post-creator{cursor:pointer;position:absolute;bottom:0px;right:20px}.post-container .post-inner{overflow:visible}.post-container .post-inner .post-details{padding:20px;box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5);background-color:white;position:relative;overflow:visible;cursor:pointer;width:87%;display:flex;flex-direction:row;justify-content:center;padding-top:80px}.post-container .post-inner .post-details .post-inner-content{flex:90%;display:flex;flex-direction:column}.post-container .post-inner .post-details .post-inner-content .post-title{font-size:30px;padding:10px;top:30px;left:30px}.post-container .post-inner .post-details .post-inner-content .post-body{padding:5px 10px 10px 10px;word-wrap:break-word;color:#262626}.post-container .post-metainfo{position:absolute;bottom:-36px;right:60px;display:flex;justify-content:end;text-align:right;color:#484848;padding:20px;padding-right:50px}.post-container .post-metainfo .post-date{text-align:right;font-size:11px}.post-container .post-metainfo .post-response-count{font-size:11px;width:15em;margin-right:10px;text-align:right}.post-container .post-metainfo .post-response-count span{font-weight:900}\n","",{version:3,sources:["webpack://./Client/src/components/Feed/Post.scss"],names:[],mappings:"AACA,gBACI,iBAAkB,CAClB,UAAW,CACX,mBAAoB,CACpB,kBAAmB,CAEnB,gBAAiB,CANrB,0BAQQ,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,iBAAkB,CAClB,QAAS,CACT,SAAU,CACV,UAAW,CAaX,mBAAoB,CA3B5B,6BAiBY,cAAe,CACf,sBAAuB,CACvB,WAAY,CACZ,WAAY,CApBxB,oCAuBY,cAAe,CACf,UAAW,CACX,iBAAkB,CAzB9B,8BA+BQ,cAAe,CACf,iBAAkB,CAClB,UAAW,CACX,UAAW,CAlCnB,4BAqCQ,gBAAiB,CArCzB,0CAuCY,YAAa,CACb,iGACgC,CAChC,sBAAuB,CAEvB,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CAEf,SAAU,CAEV,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,gBAAiB,CArD7B,8DAwDgB,QAAS,CAaT,YAAa,CACb,qBAAsB,CAtEtC,0EA0DoB,cAAe,CACf,YAAa,CACb,QAAS,CACT,SAAU,CA7D9B,yEAgEoB,0BAA2B,CAE3B,oBAAqB,CACrB,aAAsB,CAnE1C,+BA2EQ,iBAAkB,CAClB,YAAa,CACb,UAAW,CACX,YAAa,CACb,mBAAoB,CAEpB,gBAAiB,CAEjB,aAAsB,CACtB,YAAa,CACb,kBAAmB,CArF3B,0CAwFY,gBAAiB,CACjB,cAAe,CAzF3B,oDA6FY,cAAe,CACf,UAAW,CACX,iBAAkB,CAClB,gBAAiB,CAhG7B,yDAmGgB,eAAgB",sourcesContent:['@import "../../globals.scss";\n.post-container {\n    position: relative;\n    width: 100%;\n    padding-bottom: 10px;\n    margin-bottom: 45px;\n\n    overflow: visible;\n    .post-top {\n        display: flex;\n        justify-content: start;\n        align-items: center;\n        position: absolute;\n        top: 30px;\n        left: 30px;\n        width: 100%;\n\n        h1 {\n            font-size: 18px;\n            background-color: black;\n            padding: 5px;\n            color: white;\n        }\n        .top-icon {\n            font-size: 30px;\n            width: 30px;\n            margin-right: 10px;\n        }\n        padding-bottom: 20px;\n    }\n\n    .post-creator {\n        cursor: pointer;\n        position: absolute;\n        bottom: 0px;\n        right: 20px;\n    }\n    .post-inner {\n        overflow: visible;\n        .post-details {\n            padding: 20px;\n            box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3),\n                0 1px 2px rgba(0, 0, 0, 0.5);\n            background-color: white;\n            // border-radius: 5px;\n            position: relative;\n            overflow: visible;\n            cursor: pointer;\n\n            width: 87%;\n\n            display: flex;\n            flex-direction: row;\n            justify-content: center;\n            padding-top: 80px;\n\n            .post-inner-content {\n                flex: 90%;\n                .post-title {\n                    font-size: 30px;\n                    padding: 10px;\n                    top: 30px;\n                    left: 30px;\n                }\n                .post-body {\n                    padding: 5px 10px 10px 10px;\n                    // width: 90px;\n                    word-wrap: break-word;\n                    color: rgb(38, 38, 38);\n                }\n                display: flex;\n                flex-direction: column;\n            }\n        }\n    }\n    .post-metainfo {\n        position: absolute;\n        bottom: -36px;\n        right: 60px;\n        display: flex;\n        justify-content: end;\n\n        text-align: right;\n\n        color: rgb(72, 72, 72);\n        padding: 20px;\n        padding-right: 50px;\n\n        .post-date {\n            text-align: right;\n            font-size: 11px;\n        }\n\n        .post-response-count {\n            font-size: 11px;\n            width: 15em;\n            margin-right: 10px;\n            text-align: right;\n\n            span {\n                font-weight: 900;\n            }\n        }\n    }\n}\n'],sourceRoot:""}]);const s=a},8841:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".loading{width:100%;height:100%;display:flex;align-items:center;justify-content:center;overflow:hidden;padding:50px}\n","",{version:3,sources:["webpack://./Client/src/components/Loading/Loading.scss"],names:[],mappings:"AAAA,SACI,UAAW,CACX,WAAY,CACZ,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,eAAgB,CAChB,YAAa",sourcesContent:[".loading {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    padding: 50px;\n}\n"],sourceRoot:""}]);const s=a},2440:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=a},417:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".profile-picture{width:50px;height:50px;border-radius:27px;object-fit:cover;overflow:hidden;border:#d4aa8c 4px solid}\n","",{version:3,sources:["webpack://./Client/src/components/ProfilePicture/ProfilePicture.scss"],names:[],mappings:"AACA,iBACI,UAAW,CACX,WAAY,CACZ,kBAAmB,CACnB,gBAAiB,CACjB,eAAgB,CAChB,wBAA+B",sourcesContent:['@import "../../globals.scss";\n.profile-picture {\n    width: 50px;\n    height: 50px;\n    border-radius: 27px;\n    object-fit: cover;\n    overflow: hidden;\n    border: $border-color 4px solid;\n}\n'],sourceRoot:""}]);const s=a},8225:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".search-form{display:flex;flex-direction:column;justify-content:center}\n","",{version:3,sources:["webpack://./Client/src/components/SearchForm/SearchForm.scss"],names:[],mappings:"AAAA,aACI,YAAa,CACb,qBAAsB,CACtB,sBAAuB",sourcesContent:[".search-form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n"],sourceRoot:""}]);const s=a},9010:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".listing-container{background-color:#ffffff23;box-shadow:rgba(120,120,120,0.249) 3px 5px 5px 1px;display:flex;height:80px;margin:5px 10px 10px 10px;border-radius:10px;cursor:pointer;overflow:hidden;animation:float-in-listing 0.3s ease-out}.listing-container .title-photo-container{display:flex;align-items:center;border-left:#ffffff7c 5px solid;box-shadow:rgba(48,48,48,0.153) 10px 10px 20px;overflow:hidden;padding:20px;color:white;font-size:10px}.listing-container .group-info-container{display:flex;align-items:center;justify-content:space-evenly;overflow:hidden}.listing-container .group-info-container .group-info-item{padding:5px 15px 5px 15px;border-left:rgba(125,125,125,0.345) 2px solid}.listing-container .group-info-container .group-info-item p{color:gray;font-size:8px}.listing-container .group-info-container .group-info-item h2{font-size:14px;white-space:nowrap}.listing-container .group-info-container .group-info-item#owner-info{border-left:none}.listing-container .group-info-container .group-info-item#owner-info h2{white-space:unset;word-wrap:break-word;max-width:100px}@keyframes float-in-listing{0%{margin-top:50px;opacity:0}100%{margin-top:5px;opacity:1}}\n","",{version:3,sources:["webpack://./Client/src/components/SearchListing/SearchListing.scss"],names:[],mappings:"AAEA,mBACI,0BAA2B,CAC3B,kDAAsD,CACtD,YAAa,CACb,WAAY,CACZ,yBAA0B,CAC1B,kBAAmB,CACnB,cAAe,CACf,eAAgB,CAEhB,wCAAyC,CAV7C,0CAaQ,YAAa,CACb,kBAAmB,CACnB,+BAAgC,CAChC,8CAAkD,CAClD,eAAgB,CAChB,YAAa,CACb,WAAY,CACZ,cAAe,CApBvB,yCAuBQ,YAAa,CACb,kBAAmB,CACnB,4BAA6B,CAC7B,eAAgB,CA1BxB,0DA8CY,yBAA0B,CAC1B,6CAAiD,CA/C7D,4DA8BgB,UAAW,CACX,aAAc,CA/B9B,6DAkCgB,cAAe,CACf,kBAAmB,CAnCnC,qEA4CgB,gBAAiB,CA5CjC,wEAuCoB,iBAAkB,CAElB,oBAAqB,CACrB,eAAgB,CACnB,4BAUb,GACI,eAAgB,CAChB,SAAU,CAEd,KACI,cAAe,CACf,SAAU,CAAA",sourcesContent:['@import "../../globals.scss";\n\n.listing-container {\n    background-color: #ffffff23;\n    box-shadow: rgba(120, 120, 120, 0.249) 3px 5px 5px 1px;\n    display: flex;\n    height: 80px;\n    margin: 5px 10px 10px 10px;\n    border-radius: 10px;\n    cursor: pointer;\n    overflow: hidden;\n\n    animation: float-in-listing 0.3s ease-out;\n\n    .title-photo-container {\n        display: flex;\n        align-items: center;\n        border-left: #ffffff7c 5px solid;\n        box-shadow: rgba(48, 48, 48, 0.153) 10px 10px 20px;\n        overflow: hidden;\n        padding: 20px;\n        color: white;\n        font-size: 10px;\n    }\n    .group-info-container {\n        display: flex;\n        align-items: center;\n        justify-content: space-evenly;\n        overflow: hidden;\n\n        .group-info-item {\n            p {\n                color: gray;\n                font-size: 8px;\n            }\n            h2 {\n                font-size: 14px;\n                white-space: nowrap;\n            }\n            &#owner-info {\n                h2 {\n                    white-space: unset;\n\n                    word-wrap: break-word;\n                    max-width: 100px;\n                }\n                border-left: none;\n            }\n            padding: 5px 15px 5px 15px;\n            border-left: rgba(125, 125, 125, 0.345) 2px solid;\n        }\n    }\n}\n\n@keyframes float-in-listing {\n    0% {\n        margin-top: 50px;\n        opacity: 0;\n    }\n    100% {\n        margin-top: 5px;\n        opacity: 1;\n    }\n}\n'],sourceRoot:""}]);const s=a},7955:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.menu{background-color:white;display:flex;flex-direction:column;padding:20px;width:400px;transition:all 0.3s cubic-bezier(0.075, 0.82, 0.165, 1);border-radius:4px;pointer-events:none;position:absolute;top:-10.5em;right:2em;z-index:10;box-shadow:0 0 0 1px rgba(97,97,97,0.1),0 3px 20px 0 rgba(92,92,92,0.3),0 1px 2px rgba(0,0,0,0.5)}@media (max-width: 800px){.menu{height:85%;width:70%;display:flex;position:fixed;top:5em;right:-80%}}.menu.isShowing{top:5em;pointer-events:all;overflow:visible}@media (max-width: 800px){.menu.isShowing{border-bottom:none;border-left:#d4aa8c 5px solid;right:0;right:20px}}.menu .links{display:none;overflow:visible}@media (max-width: 800px){.menu .links{display:flex;flex:50%;flex-direction:column;align-items:center;justify-content:center}.menu .links .nav-item{text-decoration:none;width:100%;margin:10px;overflow:visible;display:flex;align-items:center;justify-content:center}.menu .links .nav-item p{padding:20px;height:100%;width:200px;color:black;font-size:20px;transition:all 0.4s;text-align:center}.menu .links .nav-item:active p{background-color:#ffe58d}.menu .links .nav-item.active p{background-color:#ffda5a;position:relative;overflow:visible;transition:all 0.4s}.menu .links .nav-item.active::after{content:"";position:absolute;left:-1.5em;width:20px;height:100%;top:0;background-color:#d4aa8c;animation:rise 0.2s ease-in-out}}.menu .user-actions{display:flex;flex-direction:column}.menu .user-actions .user-info{display:none}@media (max-width: 800px){.menu .user-actions .user-info{display:flex;padding:20px;align-items:center}.menu .user-actions .user-info .name-and-school{flex:80%}.menu .user-actions .user-info .name-and-school .school{font-size:14px;padding-right:10px}.menu .user-actions .user-info .name-and-school .name{font-size:14px;font-weight:800;padding-right:10px}.menu .user-actions .user-info .profile-pic-container{justify-content:end}.menu .user-actions .user-info .profile-pic-container img{width:60px;height:60px;border-radius:30px}}@media (max-width: 800px){.menu .user-actions{flex:50%;justify-content:end}}.background.menu-background{z-index:9}\n',"",{version:3,sources:["webpack://./Client/src/components/TopBar/Menu.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAEA,MACI,sBAAuB,CACvB,YAAa,CACb,qBAAsB,CACtB,YAAa,CACb,WAAY,CACZ,uDAAwD,CACxD,iBAAkB,CAClB,mBAAoB,CACpB,iBAAkB,CAClB,WAAY,CACZ,SAAU,CACV,UAAW,CACX,iGAA6G,CA2HhH,0BAxID,MAgBQ,UAAW,CACX,SAAU,CAEV,YAAa,CACb,cAAe,CACf,OAAQ,CACR,UAAW,CAkHlB,CAxID,gBA0BQ,OAAQ,CACR,kBAAmB,CACnB,gBAAiB,CASpB,0BArCL,gBA+BY,kBAAmB,CACnB,6BAAoC,CACpC,OAAQ,CAER,UAAW,CAElB,CArCL,aAwCQ,YAAa,CACb,gBAAiB,CAoDpB,0BA7FL,aA2CY,YAAa,CACb,QAAS,CACT,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CA/CnC,uBAkDgB,oBAAqB,CACrB,UAAW,CAEX,WAAY,CACZ,gBAAiB,CACjB,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CAzDvC,yBA2DoB,YAAa,CACb,WAAY,CACZ,WAAY,CACZ,WAAY,CACZ,cAAe,CACf,mBAAoB,CACpB,iBAAkB,CAjEtC,gCAsEwB,wBAAiE,CAtEzF,gCA2EwB,wBCxEC,CDyED,iBAAkB,CAClB,gBAAiB,CACjB,mBAAoB,CA9E5C,qCAiFwB,UAAW,CACX,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,WAAY,CACZ,KAAM,CACN,wBCrFF,CDsFE,+BAAgC,CACnC,CAzFrB,oBAgGQ,YAAa,CACb,qBAAsB,CAjG9B,+BAoGY,YAAa,CA6BhB,0BAjIT,+BAsGgB,YAAa,CACb,YAAa,CACb,kBAAmB,CAxGnC,gDA2GoB,QAAS,CA3G7B,wDA6GwB,cAAe,CAEf,kBAAmB,CA/G3C,sDAkHwB,cAAe,CACf,eAAgB,CAChB,kBAAmB,CApH3C,sDAyHoB,mBAAoB,CAzHxC,0DA2HwB,UAAW,CACX,WAAY,CACZ,kBAAmB,CACtB,CCtHjB,0BDRJ,oBAoIY,QAAS,CACT,mBAAoB,CAE3B,CAGL,4BAEQ,SAAU",sourcesContent:['@import "../../globals.scss";\n\n.menu {\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    padding: 20px;\n    width: 400px;\n    transition: all 0.3s cubic-bezier(0.075, 0.82, 0.165, 1);\n    border-radius: 4px;\n    pointer-events: none;\n    position: absolute;\n    top: -10.5em;\n    right: 2em;\n    z-index: 10;\n    box-shadow: 0 0 0 1px rgba(97, 97, 97, 0.1), 0 3px 20px 0 rgba(92, 92, 92, 0.3), 0 1px 2px rgba(0, 0, 0, 0.5);\n\n    @include mobile {\n        height: 85%;\n        width: 70%;\n\n        display: flex;\n        position: fixed;\n        top: 5em;\n        right: -80%;\n    }\n\n    &.isShowing {\n        top: 5em;\n        pointer-events: all;\n        overflow: visible;\n\n        @include mobile {\n            border-bottom: none;\n            border-left: $border-color 5px solid;\n            right: 0;\n\n            right: 20px;\n        }\n    }\n\n    .links {\n        display: none;\n        overflow: visible;\n        @include mobile {\n            display: flex;\n            flex: 50%;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n\n            .nav-item {\n                text-decoration: none;\n                width: 100%;\n                // background-color: wheat;\n                margin: 10px;\n                overflow: visible;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                p {\n                    padding: 20px;\n                    height: 100%;\n                    width: 200px;\n                    color: black;\n                    font-size: 20px;\n                    transition: all 0.4s;\n                    text-align: center;\n                }\n\n                &:active {\n                    p {\n                        background-color: lighten($color: $highlight-color, $amount: 10%);\n                    }\n                }\n                &.active {\n                    p {\n                        background-color: $highlight-color;\n                        position: relative;\n                        overflow: visible;\n                        transition: all 0.4s;\n                    }\n                    &::after {\n                        content: "";\n                        position: absolute;\n                        left: -1.5em;\n                        width: 20px;\n                        height: 100%;\n                        top: 0;\n                        background-color: $border-color;\n                        animation: rise 0.2s ease-in-out;\n                    }\n                }\n            }\n        }\n    }\n\n    .user-actions {\n        display: flex;\n        flex-direction: column;\n\n        .user-info {\n            display: none;\n            @include mobile {\n                display: flex;\n                padding: 20px;\n                align-items: center;\n\n                .name-and-school {\n                    flex: 80%;\n                    .school {\n                        font-size: 14px;\n                        // border-right: black 1px solid;\n                        padding-right: 10px;\n                    }\n                    .name {\n                        font-size: 14px;\n                        font-weight: 800;\n                        padding-right: 10px;\n                        // border-right: black 1px solid;\n                    }\n                }\n                .profile-pic-container {\n                    justify-content: end;\n                    img {\n                        width: 60px;\n                        height: 60px;\n                        border-radius: 30px;\n                    }\n                }\n            }\n        }\n\n        @include mobile {\n            flex: 50%;\n            justify-content: end;\n        }\n    }\n}\n\n.background {\n    &.menu-background {\n        z-index: 9;\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 800px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},3189:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.top-bar{border-bottom:#d4aa8c 5px solid;position:relative;overflow:visible;z-index:20;background-color:white;transition:all 0.4s}.top-bar .wrapper{padding:10px 30px;height:3.7em;display:flex;align-items:center;justify-content:space-between;overflow-y:hidden}.top-bar .wrapper .left{display:flex;flex-direction:row;align-items:center}.top-bar .wrapper .left h1{font-size:20px;padding-right:20px;color:black}.top-bar .wrapper .left .nav-item{margin:20px;padding:5px 10px 5px 10px;height:100%;text-decoration:none;color:black;font-size:15px;transition:all 0.4s}@media (max-width: 800px){.top-bar .wrapper .left .nav-item{display:none}}.top-bar .wrapper .left .nav-item:active{background-color:#ffe58d}.top-bar .wrapper .left .nav-item.active{background-color:#ffda5a;position:relative;overflow:visible;transition:all 0.4s}.top-bar .wrapper .left .nav-item.active::after{content:"";position:absolute;left:0;bottom:-15px;width:100%;height:4px;background-color:#d4aa8c;animation:rise 0.2s ease-in-out}.top-bar .wrapper .right .userInfoContainer{display:flex;flex-direction:row;align-items:center;cursor:pointer}.top-bar .wrapper .right .userInfoContainer .school{font-size:14px;border-right:black 1px solid;padding-right:10px}.top-bar .wrapper .right .userInfoContainer .name{font-size:14px;font-weight:800;padding-left:10px;padding-right:10px}@media (max-width: 800px){.top-bar .wrapper .right .userInfoContainer{display:none}}.top-bar .wrapper .right .hamburger{width:20px;height:15px;margin-right:10px;display:none;flex-direction:column;justify-content:space-between;cursor:pointer}@media (max-width: 800px){.top-bar .wrapper .right .hamburger{display:flex}}.top-bar .wrapper .right .hamburger span{height:2px;width:100%;background-color:black;transform-origin:left;transition:0.5s all ease}.top-bar .wrapper .right .hamburger.activeHamburger span:first-child{transform:rotate(40deg)}.top-bar .wrapper .right .hamburger.activeHamburger span:nth-child(2){opacity:0}.top-bar .wrapper .right .hamburger.activeHamburger span:last-child{transform:rotate(-40deg)}@keyframes rise{0%{bottom:-17px}100%{bottom:-15px}}\n',"",{version:3,sources:["webpack://./Client/src/components/TopBar/TopBar.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAEA,SACI,+BAAsC,CAEtC,iBAAkB,CAClB,gBAAiB,CACjB,UAAW,CACX,sBAAuB,CACvB,mBAAoB,CAPxB,kBAUQ,iBAAkB,CAClB,YAAa,CAEb,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAC9B,iBAAkB,CAhB1B,wBAmBY,YAAa,CACb,kBAAmB,CACnB,kBAAmB,CArB/B,2BAuBgB,cAAe,CACf,kBAAmB,CACnB,WAAY,CAzB5B,kCA4BgB,WAAY,CACZ,yBAA0B,CAC1B,WAAY,CACZ,oBAAqB,CACrB,WAAY,CACZ,cAAe,CACf,mBAAoB,CA0BvB,0BA5Db,kCAqCoB,YAAa,CAuBpB,CA5Db,yCAyCoB,wBAAiE,CAzCrF,yCA4CoB,wBCzCK,CD0CL,iBAAkB,CAClB,gBAAiB,CACjB,mBAAoB,CA/CxC,gDAkDwB,UAAW,CACX,iBAAkB,CAClB,MAAO,CACP,YAAa,CACb,UAAW,CACX,UAAW,CACX,wBCtDF,CDuDE,+BAAgC,CAzDxD,4CAgEgB,YAAa,CACb,kBAAmB,CACnB,kBAAmB,CACnB,cAAe,CAnE/B,oDAsEoB,cAAe,CACf,4BAA6B,CAC7B,kBAAmB,CAxEvC,kDA2EoB,cAAe,CACf,eAAgB,CAChB,iBAAkB,CAClB,kBAAmB,CACtB,0BA/EjB,4CAkFoB,YAAa,CAEpB,CApFb,oCAuFgB,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,YAAa,CAMb,qBAAsB,CACtB,6BAA8B,CAC9B,cAAe,CAsBlB,0BAxHb,oCA6FoB,YAAa,CA2BpB,CAxHb,yCAqGoB,UAAW,CACX,UAAW,CACX,sBAAuB,CACvB,qBAAsB,CACtB,wBAAyB,CAzG7C,qEA8G4B,uBAAwB,CA9GpD,sEAiH4B,SAAU,CAjHtC,oEAoH4B,wBAAyB,CAC5B,gBASrB,GACI,YAAa,CAEjB,KACI,YAAa,CAAA",sourcesContent:['@import "../../globals.scss";\n\n.top-bar {\n    border-bottom: $border-color 5px solid;\n\n    position: relative;\n    overflow: visible;\n    z-index: 20;\n    background-color: white;\n    transition: all 0.4s;\n\n    .wrapper {\n        padding: 10px 30px;\n        height: 3.7em;\n\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        overflow-y: hidden;\n\n        .left {\n            display: flex;\n            flex-direction: row;\n            align-items: center;\n            h1 {\n                font-size: 20px;\n                padding-right: 20px;\n                color: black;\n            }\n            .nav-item {\n                margin: 20px;\n                padding: 5px 10px 5px 10px;\n                height: 100%;\n                text-decoration: none;\n                color: black;\n                font-size: 15px;\n                transition: all 0.4s;\n\n                @include mobile {\n                    display: none;\n                }\n\n                &:active {\n                    background-color: lighten($color: $highlight-color, $amount: 10%);\n                }\n                &.active {\n                    background-color: $highlight-color;\n                    position: relative;\n                    overflow: visible;\n                    transition: all 0.4s;\n\n                    &::after {\n                        content: "";\n                        position: absolute;\n                        left: 0;\n                        bottom: -15px;\n                        width: 100%;\n                        height: 4px;\n                        background-color: $border-color;\n                        animation: rise 0.2s ease-in-out;\n                    }\n                }\n            }\n        }\n        .right {\n            .userInfoContainer {\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                cursor: pointer;\n\n                .school {\n                    font-size: 14px;\n                    border-right: black 1px solid;\n                    padding-right: 10px;\n                }\n                .name {\n                    font-size: 14px;\n                    font-weight: 800;\n                    padding-left: 10px;\n                    padding-right: 10px;\n                }\n\n                @include mobile {\n                    display: none;\n                }\n            }\n\n            .hamburger {\n                width: 20px;\n                height: 15px;\n                margin-right: 10px;\n                display: none;\n\n                @include mobile {\n                    display: flex;\n                }\n\n                flex-direction: column;\n                justify-content: space-between;\n                cursor: pointer;\n\n                span {\n                    height: 2px;\n                    width: 100%;\n                    background-color: black;\n                    transform-origin: left;\n                    transition: 0.5s all ease;\n                }\n                &.activeHamburger {\n                    span {\n                        &:first-child {\n                            transform: rotate(40deg);\n                        }\n                        &:nth-child(2) {\n                            opacity: 0;\n                        }\n                        &:last-child {\n                            transform: rotate(-40deg);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@keyframes rise {\n    0% {\n        bottom: -17px;\n    }\n    100% {\n        bottom: -15px;\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 800px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},5057:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.Form{display:flex;flex-direction:column}.Label{color:#acacac;font-size:11px;padding-bottom:10px;font-weight:600;text-align:center;width:100%}.InputField{padding:10px;margin:10px;display:flex;flex-direction:column;border:none;overflow-x:visible}.InputField .Label{text-align:left}.InputField .Input{box-shadow:0px 5px 10px rgba(128,128,128,0.171);padding:10px;border:none;border-bottom:rgba(211,211,211,0.591) 8px solid;transition-property:border-bottom;transition-duration:0.2s;border-radius:5px}.InputField .Input:focus{border:none;border-bottom:rgba(139,79,11,0.616) 8px solid;outline-width:0}.InputField .dropdown{padding:5px 5px 5px 5px;border-radius:5px;font-size:16px;box-shadow:0px 5px 10px rgba(128,128,128,0.171);border:none;border-bottom:rgba(211,211,211,0.591) 8px solid;transition-property:border-bottom;height:40px;cursor:pointer;transition-duration:0.2s;-webkit-appearance:none;-moz-appearance:none;background:url("https://icons.deanishe.net/static/icons/fontawesome/444444/angle-down-256.png") 96%/15% no-repeat #fff;background-color:white;background-size:20px}.InputField .dropdown:focus{border:none;border-bottom:rgba(139,79,11,0.616) 8px solid;outline-width:0}.InputField .color-picker{border:none;height:50px;min-width:200px;position:relative}.InputField .color-picker::after{content:"(Click to Change)";position:absolute;color:white;margin-left:auto;margin-right:auto;top:33%;left:0;right:0;text-align:center}.Button{box-shadow:0 2px 5px rgba(0,0,0,0.1),0 1px 2px rgba(0,0,0,0.05);transition:all 0.2s ease-out;border-radius:5px;border:none;font-weight:900;text-align:center;min-height:3em;max-height:3em;flex:1;padding:0 20px 0 20px;margin:20px;cursor:pointer}.Button.ButtonDestructive{background-color:#933232;color:white}.Button.ButtonPrimary{background-color:#d4aa8c;color:white}.Button.ButtonCreation{background-color:#72ba72;color:white}.Button:active{box-shadow:0 2px 5px rgba(0,0,0,0),0 1px 2px rgba(0,0,0,0.05);transform:scale(0.98)}.ToggleField{display:flex;flex-direction:row;background-color:white;box-shadow:0px 5px 10px rgba(128,128,128,0.171);justify-content:space-between;align-items:center;padding:10px;margin:20px}.ToggleField .Label{text-align:left;font-size:12px;margin-top:10px}.ToggleField .Toggle{position:relative;display:inline-block;width:80px;padding:10px;height:34px}.ToggleField .Toggle input{opacity:0;width:0;height:0}.ToggleField .slider{position:absolute;border-radius:34px;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#e8e8e8;-webkit-transition:0.4s;transition:0.4s}.ToggleField .slider:before{position:absolute;border-radius:50%;content:"";height:26px;width:26px;left:4px;bottom:4px;background-color:rgba(143,28,28,0.482);-webkit-transition:0.4s;transition:0.4s}.ToggleField input:checked+.slider:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);background-color:rgba(0,128,0,0.452);transform:translateX(26px)}\n',"",{version:3,sources:["webpack://./Client/src/core/core.scss","webpack://./Client/src/globals.scss"],names:[],mappings:"AAGA,MACI,YAAa,CACb,qBAAsB,CACzB,OAEG,aAAyB,CACzB,cAAe,CACf,mBAAoB,CACpB,eAAgB,CAChB,iBAAkB,CAClB,UAAW,CACd,YAGG,YAAa,CACb,WAAY,CACZ,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,kBAAmB,CANvB,mBASQ,eAAgB,CATxB,mBAYQ,+CAAmD,CACnD,YAAa,CACb,WAAY,CACZ,+CAAmD,CACnD,iCAAkC,CAClC,wBAAyB,CACzB,iBAAkB,CAlB1B,yBAqBQ,WAAY,CACZ,6CAAiD,CACjD,eAAgB,CAvBxB,sBA4BQ,uBAAwB,CACxB,iBAAkB,CAElB,cAAe,CACf,+CAAmD,CACnD,WAAY,CACZ,+CAAmD,CACnD,iCAAkC,CAClC,WAAY,CAEZ,cAAe,CAEf,wBAAyB,CACzB,uBAAwB,CACxB,oBAAqB,CAErB,sHACgC,CAChC,sBAAuB,CACvB,oBAAqB,CA/C7B,4BAmDQ,WAAY,CACZ,6CAAiD,CACjD,eAAgB,CArDxB,0BAyDQ,WAAY,CACZ,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CA5D1B,iCA8DY,2BAA4B,CAC5B,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CAClB,OAAQ,CACR,MAAO,CACP,OAAQ,CACR,iBAAkB,CACrB,QAKL,+DAAuE,CAEvE,4BAA6B,CAE7B,iBAAkB,CAClB,WAAY,CAEZ,eAAgB,CAChB,iBAAkB,CAElB,cAAe,CACf,cAAe,CACf,MAAO,CACP,qBAAsB,CAEtB,WAAY,CACZ,cAAe,CAjBnB,0BAoBQ,wBC5G0B,CD6G1B,WAAY,CArBpB,sBAwBQ,wBClHsB,CDmHtB,WAAY,CAzBpB,uBA4BQ,wBCrHuB,CDsHvB,WAAY,CA7BpB,eAiCQ,6DAAqE,CACrE,qBAAsB,CACzB,aAKD,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,+CAAmD,CACnD,6BAA8B,CAC9B,kBAAmB,CACnB,YAAa,CACb,WAAY,CARhB,oBAUQ,eAAgB,CAEhB,cAAe,CACf,eAAgB,CAbxB,qBAiBQ,iBAAkB,CAClB,oBAAqB,CACrB,UAAW,CACX,YAAa,CACb,WAAY,CArBpB,2BAyBQ,SAAU,CACV,OAAQ,CACR,QAAS,CA3BjB,qBA+BQ,iBAAkB,CAClB,kBAAmB,CACnB,cAAe,CACf,KAAM,CACN,MAAO,CACP,OAAQ,CACR,QAAS,CACT,wBAAoC,CACpC,uBAAwB,CACxB,eAAgB,CAxCxB,4BA4CQ,iBAAkB,CAClB,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,UAAW,CACX,QAAS,CACT,UAAW,CACX,sCAA0C,CAC1C,uBAAwB,CACxB,eAAgB,CArDxB,0CAwDQ,kCAAmC,CACnC,8BAA+B,CAC/B,oCAAwC,CACxC,0BAA2B",sourcesContent:['//Input Field\n@import "../globals.scss";\n\n.Form {\n    display: flex;\n    flex-direction: column;\n}\n.Label {\n    color: rgb(172, 172, 172);\n    font-size: 11px;\n    padding-bottom: 10px;\n    font-weight: 600;\n    text-align: center;\n    width: 100%;\n}\n\n.InputField {\n    padding: 10px;\n    margin: 10px;\n    display: flex;\n    flex-direction: column;\n    border: none;\n    overflow-x: visible;\n\n    .Label {\n        text-align: left;\n    }\n    .Input {\n        box-shadow: 0px 5px 10px rgba(128, 128, 128, 0.171);\n        padding: 10px;\n        border: none;\n        border-bottom: rgba(211, 211, 211, 0.591) 8px solid;\n        transition-property: border-bottom;\n        transition-duration: 0.2s;\n        border-radius: 5px;\n    }\n    .Input:focus {\n        border: none;\n        border-bottom: rgba(139, 79, 11, 0.616) 8px solid;\n        outline-width: 0;\n    }\n\n    //Dropdown\n    .dropdown {\n        padding: 5px 5px 5px 5px;\n        border-radius: 5px;\n\n        font-size: 16px;\n        box-shadow: 0px 5px 10px rgba(128, 128, 128, 0.171);\n        border: none;\n        border-bottom: rgba(211, 211, 211, 0.591) 8px solid;\n        transition-property: border-bottom;\n        height: 40px;\n\n        cursor: pointer;\n\n        transition-duration: 0.2s;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        // appearance: none;\n        background: url("https://icons.deanishe.net/static/icons/fontawesome/444444/angle-down-256.png") 96% / 15%\n            no-repeat rgb(255, 255, 255);\n        background-color: white;\n        background-size: 20px;\n    }\n\n    .dropdown:focus {\n        border: none;\n        border-bottom: rgba(139, 79, 11, 0.616) 8px solid;\n        outline-width: 0;\n    }\n\n    .color-picker {\n        border: none;\n        height: 50px;\n        min-width: 200px;\n        position: relative;\n        &::after {\n            content: "(Click to Change)";\n            position: absolute;\n            color: white;\n            margin-left: auto;\n            margin-right: auto;\n            top: 33%;\n            left: 0;\n            right: 0;\n            text-align: center;\n        }\n    }\n}\n\n.Button {\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.05);\n\n    transition: all 0.2s ease-out;\n\n    border-radius: 5px;\n    border: none;\n\n    font-weight: 900;\n    text-align: center;\n\n    min-height: 3em;\n    max-height: 3em;\n    flex: 1;\n    padding: 0 20px 0 20px;\n\n    margin: 20px;\n    cursor: pointer;\n\n    &.ButtonDestructive {\n        background-color: $destructive-button-color;\n        color: white;\n    }\n    &.ButtonPrimary {\n        background-color: $primary-button-color;\n        color: white;\n    }\n    &.ButtonCreation {\n        background-color: $creation-button-color;\n        color: white;\n    }\n\n    &:active {\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0), 0 1px 2px rgba(0, 0, 0, 0.05);\n        transform: scale(0.98);\n    }\n}\n\n//Toggle Switch\n.ToggleField {\n    display: flex;\n    flex-direction: row;\n    background-color: white;\n    box-shadow: 0px 5px 10px rgba(128, 128, 128, 0.171);\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    margin: 20px;\n    .Label {\n        text-align: left;\n        // width: 90px;\n        font-size: 12px;\n        margin-top: 10px;\n    }\n\n    .Toggle {\n        position: relative;\n        display: inline-block;\n        width: 80px;\n        padding: 10px;\n        height: 34px;\n    }\n\n    .Toggle input {\n        opacity: 0;\n        width: 0;\n        height: 0;\n    }\n\n    .slider {\n        position: absolute;\n        border-radius: 34px;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: rgb(232, 232, 232);\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n    }\n\n    .slider:before {\n        position: absolute;\n        border-radius: 50%;\n        content: "";\n        height: 26px;\n        width: 26px;\n        left: 4px;\n        bottom: 4px;\n        background-color: rgba(143, 28, 28, 0.482);\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n    }\n    input:checked + .slider:before {\n        -webkit-transform: translateX(26px);\n        -ms-transform: translateX(26px);\n        background-color: rgba(0, 128, 0, 0.452);\n        transform: translateX(26px);\n    }\n}\n',"$main-background-color: #f9f5f1;\n$primary-button-color: #d4aa8c;\n$creation-button-color: #72ba72;\n$destructive-button-color: #933232;\n$border-color: #d4aa8c;\n$highlight-color: #ffda5a;\n\n$mobile-width: 800px;\n\n@mixin mobile {\n    @media (max-width:#{$mobile-width}) {\n        @content;\n    }\n}\n"],sourceRoot:""}]);const s=a},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},8058:e=>{try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=f(n);o&&o!==h&&e(t,o,r)}var a=c(n);d&&(a=a.concat(d(n)));for(var s=l(t),m=l(n),g=0;g<a.length;++g){var y=a[g];if(!(i[y]||r&&r[y]||m&&m[y]||s&&s[y])){var v=p(n,y);try{u(t,y,v)}catch(e){}}}}return t}},5826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,l=o(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(l[c]=a[c]);if(t){s=t(a);for(var d=0;d<s.length;d++)r.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},1830:(e,t)=>{t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},4187:e=>{var t=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var r,o,i=e,a=e.indexOf("["),s=e.indexOf("]");-1!=a&&-1!=s&&(e=e.substring(0,a)+e.substring(a,s).replace(/:/g,";")+e.substring(s,e.length));for(var l,u,c=t.exec(e||""),d={},p=14;p--;)d[n[p]]=c[p]||"";return-1!=a&&-1!=s&&(d.source=i,d.host=d.host.substring(1,d.host.length-1).replace(/;/g,":"),d.authority=d.authority.replace("[","").replace("]","").replace(/;/g,":"),d.ipv6uri=!0),d.pathNames=(r=d.path,o=r.replace(/\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||o.splice(0,1),"/"==r.substr(r.length-1,1)&&o.splice(o.length-1,1),o),d.queryKey=(l=d.query,u={},l.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,n){t&&(u[t]=n)})),u),d}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,h={},m={};function g(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function A(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(m,e)||!f.call(h,e)&&(p.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,b);y[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,b);y[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var C=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,x=60106,E=60107,k=60108,S=60114,B=60109,O=60110,T=60112,D=60113,N=60120,P=60115,I=60116,R=60121,_=60128,M=60129,Z=60130,j=60131;if("function"==typeof Symbol&&Symbol.for){var z=Symbol.for;w=z("react.element"),x=z("react.portal"),E=z("react.fragment"),k=z("react.strict_mode"),S=z("react.profiler"),B=z("react.provider"),O=z("react.context"),T=z("react.forward_ref"),D=z("react.suspense"),N=z("react.suspense_list"),P=z("react.memo"),I=z("react.lazy"),R=z("react.block"),z("react.scope"),_=z("react.opaque.id"),M=z("react.debug_trace_mode"),Z=z("react.offscreen"),j=z("react.legacy_hidden")}var L,F="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}function Y(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var $=!1;function W(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Y(e):""}function V(e){switch(e.tag){case 5:return Y(e.type);case 16:return Y("Lazy");case 13:return Y("Suspense");case 19:return Y("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 22:return W(e.type._render,!1);case 1:return W(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case x:return"Portal";case S:return"Profiler";case k:return"StrictMode";case D:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case B:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case P:return q(e.type);case R:return q(e._render);case I:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function G(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&A(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function ue(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ge=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ve={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function Ae(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ve.hasOwnProperty(e)&&ve[e]?(""+t).trim():t+"px"}function Ce(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Ae(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ve).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ve[t]=ve[e]}))}));var we=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function xe(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Be=null,Oe=null;function Te(e){if(e=no(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=oo(t),Se(e.stateNode,e.type,t))}}function De(e){Be?Oe?Oe.push(e):Oe=[e]:Be=e}function Ne(){if(Be){var e=Be,t=Oe;if(Oe=Be=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Pe(e,t){return e(t)}function Ie(e,t,n,r,o){return e(t,n,r,o)}function Re(){}var _e=Pe,Me=!1,Ze=!1;function je(){null===Be&&null===Oe||(Re(),Ne())}function ze(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Le=!1;if(d)try{var Fe={};Object.defineProperty(Fe,"passive",{get:function(){Le=!0}}),window.addEventListener("test",Fe,Fe),window.removeEventListener("test",Fe,Fe)}catch(me){Le=!1}function Ue(e,t,n,r,o,i,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Ye=!1,$e=null,We=!1,Ve=null,qe={onError:function(e){Ye=!0,$e=e}};function Ge(e,t,n,r,o,i,a,s,l){Ye=!1,$e=null,Ue.apply(qe,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(He(e)!==e)throw Error(a(188))}function Xe(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ke(o),e;if(i===r)return Ke(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,st=null,lt=null,ut=new Map,ct=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=ft(t,n,r,o,i),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=to(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function vt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&yt(at)&&(at=null),null!==st&&yt(st)&&(st=null),null!==lt&&yt(lt)&&(lt=null),ut.forEach(vt),ct.forEach(vt)}function At(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function Ct(e){function t(t){return At(t,e)}if(0<it.length){At(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&At(at,e),null!==st&&At(st,e),null!==lt&&At(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)gt(n),null===n.blockedOn&&dt.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},Et={},kt={};function St(e){if(Et[e])return Et[e];if(!xt[e])return e;var t,n=xt[e];for(t in n)if(n.hasOwnProperty(t)&&t in kt)return Et[e]=n[t];return e}d&&(kt=document.createElement("div").style,"AnimationEvent"in window||(delete xt.animationend.animation,delete xt.animationiteration.animation,delete xt.animationstart.animation),"TransitionEvent"in window||delete xt.transitionend.transition);var Bt=St("animationend"),Ot=St("animationiteration"),Tt=St("animationstart"),Dt=St("transitionend"),Nt=new Map,Pt=new Map,It=["abort","abort",Bt,"animationEnd",Ot,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Dt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Pt.set(r,t),Nt.set(r,o),u(o,[r])}}(0,i.unstable_now)();var _t=8;function Mt(e){if(0!=(1&e))return _t=15,1;if(0!=(2&e))return _t=14,2;if(0!=(4&e))return _t=13,4;var t=24&e;return 0!==t?(_t=12,t):0!=(32&e)?(_t=11,32):0!=(t=192&e)?(_t=10,t):0!=(256&e)?(_t=9,256):0!=(t=3584&e)?(_t=8,t):0!=(4096&e)?(_t=7,4096):0!=(t=4186112&e)?(_t=6,t):0!=(t=62914560&e)?(_t=5,t):67108864&e?(_t=4,67108864):0!=(134217728&e)?(_t=3,134217728):0!=(t=805306368&e)?(_t=2,t):0!=(1073741824&e)?(_t=1,1073741824):(_t=8,e)}function Zt(e,t){var n=e.pendingLanes;if(0===n)return _t=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==i)r=i,o=_t=15;else if(0!=(i=134217727&n)){var l=i&~a;0!==l?(r=Mt(l),o=_t):0!=(s&=i)&&(r=Mt(s),o=_t)}else 0!=(i=n&~a)?(r=Mt(i),o=_t):0!==s&&(r=Mt(s),o=_t);if(0===r)return 0;if(r=n&((0>(r=31-Yt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Mt(t),o<=_t)return t;_t=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Yt(t)),r|=e[n],t&=~o;return r}function jt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function zt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Lt(24&~t))?zt(10,t):e;case 10:return 0===(e=Lt(192&~t))?zt(8,t):e;case 8:return 0===(e=Lt(3584&~t))&&0===(e=Lt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Lt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Lt(e){return e&-e}function Ft(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Yt(t)]=n}var Yt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/Wt|0)|0},$t=Math.log,Wt=Math.LN2,Vt=i.unstable_UserBlockingPriority,qt=i.unstable_runWithPriority,Gt=!0;function Ht(e,t,n,r){Me||Re();var o=Kt,i=Me;Me=!0;try{Ie(o,e,t,n,r)}finally{(Me=i)||je()}}function Qt(e,t,n,r){qt(Vt,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){var o;if(Gt)if((o=0==(4&t))&&0<it.length&&-1<pt.indexOf(e))e=ft(null,e,t,n,r),it.push(e);else{var i=Xt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<pt.indexOf(e))return e=ft(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return st=mt(st,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ut.set(i,mt(ut.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Rr(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=ke(r);if(null!==(o=to(o))){var i=He(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Qe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Rr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,un,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},pn=sn(dn),fn=o({},dn,{view:0,detail:0}),hn=sn(fn),mn=o({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Bn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),gn=sn(mn),yn=sn(o({},mn,{dataTransfer:0})),vn=sn(o({},fn,{relatedTarget:0})),bn=sn(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),An=o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Cn=sn(An),wn=sn(o({},dn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function Bn(){return Sn}var On=o({},fn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Bn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=sn(On),Dn=sn(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=sn(o({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Bn})),Pn=sn(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),In=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=sn(In),_n=[9,13,27,32],Mn=d&&"CompositionEvent"in window,Zn=null;d&&"documentMode"in document&&(Zn=document.documentMode);var jn=d&&"TextEvent"in window&&!Zn,zn=d&&(!Mn||Zn&&8<Zn&&11>=Zn),Ln=String.fromCharCode(32),Fn=!1;function Un(e,t){switch(e){case"keyup":return-1!==_n.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Yn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function qn(e,t,n,r){De(r),0<(t=Mr(t,"onChange")).length&&(n=new pn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,Hn=null;function Qn(e){Or(e,0)}function Kn(e){if(K(ro(e)))return e}function Xn(e,t){if("change"===e)return t}var Jn=!1;if(d){var er;if(d){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Gn&&(Gn.detachEvent("onpropertychange",or),Hn=Gn=null)}function or(e){if("value"===e.propertyName&&Kn(Hn)){var t=[];if(qn(t,Hn,e,ke(e)),e=Qn,Me)e(t);else{Me=!0;try{Pe(e,t)}finally{Me=!1,je()}}}}function ir(e,t,n){"focusin"===e?(rr(),Hn=n,(Gn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Hn)}function sr(e,t){if("click"===e)return Kn(t)}function lr(e,t){if("input"===e||"change"===e)return Kn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function dr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!ur(e[n[r]],t[n[r]]))return!1;return!0}function pr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=pr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=pr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function gr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yr=d&&"documentMode"in document&&11>=document.documentMode,vr=null,br=null,Ar=null,Cr=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Cr||null==vr||vr!==X(r)||(r="selectionStart"in(r=vr)&&gr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Ar&&dr(Ar,r)||(Ar=r,0<(r=Mr(br,"onSelect")).length&&(t=new pn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(It,2);for(var xr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Er=0;Er<xr.length;Er++)Pt.set(xr[Er],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function Br(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,s,l,u){if(Ge.apply(this,arguments),Ye){if(!Ye)throw Error(a(198));var c=$e;Ye=!1,$e=null,We||(We=!0,Ve=c)}}(r,t,void 0,e),e.currentTarget=null}function Or(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==i&&o.isPropagationStopped())break e;Br(o,s,u),i=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==i&&o.isPropagationStopped())break e;Br(o,s,u),i=l}}}if(We)throw e=Ve,We=!1,Ve=null,e}function Tr(e,t){var n=io(t),r=e+"__bubble";n.has(r)||(Ir(t,e,2,!1),n.add(r))}var Dr="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[Dr]||(e[Dr]=!0,s.forEach((function(t){Sr.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=io(i),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(o|=4),Ir(i,e,o,t),a.add(s))}function Ir(e,t,n,r){var o=Pt.get(t);switch(void 0===o?2:o){case 0:o=Ht;break;case 1:o=Qt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Le||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=to(s)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(Ze)return e();Ze=!0;try{_e(e,t,n)}finally{Ze=!1,je()}}((function(){var r=i,o=ke(n),a=[];e:{var s=Nt.get(e);if(void 0!==s){var l=pn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Tn;break;case"focusin":u="focus",l=vn;break;case"focusout":u="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Nn;break;case Bt:case Ot:case Tt:l=bn;break;case Dt:l=Pn;break;case"scroll":l=hn;break;case"wheel":l=Rn;break;case"copy":case"cut":case"paste":l=Cn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Dn}var c=0!=(4&t),d=!c&&"scroll"===e,p=c?null!==s?s+"Capture":null:s;c=[];for(var f,h=r;null!==h;){var m=(f=h).stateNode;if(5===f.tag&&null!==m&&(f=m,null!==p&&null!=(m=ze(h,p))&&c.push(_r(h,m,f))),d)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,o),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!to(u)&&!u[Jr])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?to(u):null)&&(u!==(d=He(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=gn,m="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Dn,m="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==l?s:ro(l),f=null==u?s:ro(u),(s=new c(m,h+"leave",l,n,o)).target=d,s.relatedTarget=f,m=null,to(o)===r&&((c=new c(p,h+"enter",u,n,o)).target=f,c.relatedTarget=d,m=c),d=m,l&&u)e:{for(p=u,h=0,f=c=l;f;f=Zr(f))h++;for(f=0,m=p;m;m=Zr(m))f++;for(;0<h-f;)c=Zr(c),h--;for(;0<f-h;)p=Zr(p),f--;for(;h--;){if(c===p||null!==p&&c===p.alternate)break e;c=Zr(c),p=Zr(p)}c=null}else c=null;null!==l&&jr(a,s,l,c,!1),null!==u&&null!==d&&jr(a,d,u,c,!0)}if("select"===(l=(s=r?ro(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=Xn;else if(Vn(s))if(Jn)g=lr;else{g=ar;var y=ir}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=sr);switch(g&&(g=g(e,r))?qn(a,g,n,o):(y&&y(e,s,r),"focusout"===e&&(y=s._wrapperState)&&y.controlled&&"number"===s.type&&oe(s,"number",s.value)),y=r?ro(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(vr=y,br=r,Ar=null);break;case"focusout":Ar=br=vr=null;break;case"mousedown":Cr=!0;break;case"contextmenu":case"mouseup":case"dragend":Cr=!1,wr(a,n,o);break;case"selectionchange":if(yr)break;case"keydown":case"keyup":wr(a,n,o)}var v;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(zn&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(v=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,$n=!0)),0<(y=Mr(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:y}),(v||null!==(v=Yn(n)))&&(b.data=v))),(v=jn?function(e,t){switch(e){case"compositionend":return Yn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Ln);case"textInput":return(e=t.data)===Ln&&Fn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!Mn&&Un(e,t)?(e=nn(),tn=en=Jt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Mr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=v)}Or(a,t)}))}function _r(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=ze(e,n))&&r.unshift(_r(e,i,o)),null!=(i=ze(e,t))&&r.push(_r(e,i,o))),e=e.return}return r}function Zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function jr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,o?null!=(l=ze(n,i))&&a.unshift(_r(n,l,s)):o||null!=(l=ze(n,i))&&a.push(_r(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function zr(){}var Lr=null,Fr=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var $r="function"==typeof setTimeout?setTimeout:void 0,Wr="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function qr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Gr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Hr=0,Qr=Math.random().toString(36).slice(2),Kr="__reactFiber$"+Qr,Xr="__reactProps$"+Qr,Jr="__reactContainer$"+Qr,eo="__reactEvents$"+Qr;function to(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Gr(e);null!==e;){if(n=e[Kr])return n;e=Gr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Kr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function oo(e){return e[Xr]||null}function io(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var ao=[],so=-1;function lo(e){return{current:e}}function uo(e){0>so||(e.current=ao[so],ao[so]=null,so--)}function co(e,t){so++,ao[so]=e.current,e.current=t}var po={},fo=lo(po),ho=lo(!1),mo=po;function go(e,t){var n=e.type.contextTypes;if(!n)return po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function yo(e){return null!=e.childContextTypes}function vo(){uo(ho),uo(fo)}function bo(e,t,n){if(fo.current!==po)throw Error(a(168));co(fo,t),co(ho,n)}function Ao(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,q(t)||"Unknown",i));return o({},n,r)}function Co(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||po,mo=fo.current,co(fo,e),co(ho,ho.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Ao(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,uo(ho),uo(fo),co(fo,e)):uo(ho),co(ho,n)}var xo=null,Eo=null,ko=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,Bo=i.unstable_cancelCallback,Oo=i.unstable_shouldYield,To=i.unstable_requestPaint,Do=i.unstable_now,No=i.unstable_getCurrentPriorityLevel,Po=i.unstable_ImmediatePriority,Io=i.unstable_UserBlockingPriority,Ro=i.unstable_NormalPriority,_o=i.unstable_LowPriority,Mo=i.unstable_IdlePriority,Zo={},jo=void 0!==To?To:function(){},zo=null,Lo=null,Fo=!1,Uo=Do(),Yo=1e4>Uo?Do:function(){return Do()-Uo};function $o(){switch(No()){case Po:return 99;case Io:return 98;case Ro:return 97;case _o:return 96;case Mo:return 95;default:throw Error(a(332))}}function Wo(e){switch(e){case 99:return Po;case 98:return Io;case 97:return Ro;case 96:return _o;case 95:return Mo;default:throw Error(a(332))}}function Vo(e,t){return e=Wo(e),ko(e,t)}function qo(e,t,n){return e=Wo(e),So(e,t,n)}function Go(){if(null!==Lo){var e=Lo;Lo=null,Bo(e)}Ho()}function Ho(){if(!Fo&&null!==zo){Fo=!0;var e=0;try{var t=zo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zo=null}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),So(Po,Go),t}finally{Fo=!1}}}var Qo=C.ReactCurrentBatchConfig;function Ko(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Xo=lo(null),Jo=null,ei=null,ti=null;function ni(){ti=ei=Jo=null}function ri(e){var t=Xo.current;uo(Xo),e.type._context._currentValue=t}function oi(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ii(e,t){Jo=e,ti=ei=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ma=!0),e.firstContext=null)}function ai(e,t){if(ti!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ti=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ei){if(null===Jo)throw Error(a(308));ei=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ei=ei.next=t;return e._currentValue}var si=!1;function li(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ui(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ci(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function di(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function pi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function fi(e,t,n,r){var i=e.updateQueue;si=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?a=c:s.next=c,s=u;var d=e.alternate;if(null!==d){var p=(d=d.updateQueue).lastBaseUpdate;p!==s&&(null===p?d.firstBaseUpdate=c:p.next=c,d.lastBaseUpdate=u)}}if(null!==a){for(p=i.baseState,s=0,d=c=u=null;;){l=a.lane;var f=a.eventTime;if((r&l)===l){null!==d&&(d=d.next={eventTime:f,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(l=t,f=n,m.tag){case 1:if("function"==typeof(h=m.payload)){p=h.call(f,p,l);break e}p=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(f,p,l):h))break e;p=o({},p,l);break e;case 2:si=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else f={eventTime:f,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(c=d=f,u=p):d=d.next=f,s|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===d&&(u=p),i.baseState=u,i.firstBaseUpdate=c,i.lastBaseUpdate=d,js|=s,e.lanes=s,e.memoizedState=p}}function hi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var mi=(new r.Component).refs;function gi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var yi={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ul(),o=cl(e),i=ci(r,o);i.payload=t,null!=n&&(i.callback=n),di(e,i),dl(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ul(),o=cl(e),i=ci(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),di(e,i),dl(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ul(),r=cl(e),o=ci(n,r);o.tag=2,null!=t&&(o.callback=t),di(e,o),dl(e,r,n)}};function vi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&dr(n,r)&&dr(o,i))}function bi(e,t,n){var r=!1,o=po,i=t.contextType;return"object"==typeof i&&null!==i?i=ai(i):(o=yo(t)?mo:fo.current,i=(r=null!=(r=t.contextTypes))?go(e,o):po),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=yi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Ai(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&yi.enqueueReplaceState(t,t.state,null)}function Ci(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,li(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ai(i):(i=yo(t)?mo:fo.current,o.context=go(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(gi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&yi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var wi=Array.isArray;function xi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ei(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ki(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Yl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=ql(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=xi(e,t,n),r.return=e,r):((r=$l(n.type,n.key,n.props,null,e.mode,r)).ref=xi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Gl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Wl(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ql(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=$l(t.type,t.key,t.props,null,e.mode,n)).ref=xi(e,null,t),n.return=e,n;case x:return(t=Gl(t,e.mode,n)).return=e,t}if(wi(t)||U(t))return(t=Wl(t,e.mode,n,null)).return=e,t;Ei(e,t)}return null}function f(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?n.type===E?d(e,t,n.props.children,r,o):u(e,t,n,r):null;case x:return n.key===o?c(e,t,n,r):null}if(wi(n)||U(n))return null!==o?null:d(e,t,n,r,null);Ei(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?n:r.key)||null,r.type===E?d(t,e,r.props.children,o,r.key):u(t,e,r,o);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(wi(r)||U(r))return d(t,e=e.get(n)||null,r,o,null);Ei(t,r)}return null}function m(o,a,s,l){for(var u=null,c=null,d=a,m=a=0,g=null;null!==d&&m<s.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var y=f(o,d,s[m],l);if(null===y){null===d&&(d=g);break}e&&d&&null===y.alternate&&t(o,d),a=i(y,a,m),null===c?u=y:c.sibling=y,c=y,d=g}if(m===s.length)return n(o,d),u;if(null===d){for(;m<s.length;m++)null!==(d=p(o,s[m],l))&&(a=i(d,a,m),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(o,d);m<s.length;m++)null!==(g=h(d,o,m,s[m],l))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(o,e)})),u}function g(o,s,l,u){var c=U(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var d=c=null,m=s,g=s=0,y=null,v=l.next();null!==m&&!v.done;g++,v=l.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=f(o,m,v.value,u);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),s=i(b,s,g),null===d?c=b:d.sibling=b,d=b,m=y}if(v.done)return n(o,m),c;if(null===m){for(;!v.done;g++,v=l.next())null!==(v=p(o,v.value,u))&&(s=i(v,s,g),null===d?c=v:d.sibling=v,d=v);return c}for(m=r(o,m);!v.done;g++,v=l.next())null!==(v=h(m,o,g,v.value,u))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),s=i(v,s,g),null===d?c=v:d.sibling=v,d=v);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,l){var u="object"==typeof i&&null!==i&&i.type===E&&null===i.key;u&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case w:e:{for(c=i.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(i.type===E){n(e,u.sibling),(r=o(u,i.props.children)).return=e,e=r;break e}}else if(u.elementType===i.type){n(e,u.sibling),(r=o(u,i.props)).ref=xi(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===E?((r=Wl(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=$l(i.type,i.key,i.props,null,e.mode,l)).ref=xi(e,r,i),l.return=e,e=l)}return s(e);case x:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Gl(i,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=ql(i,e.mode,l)).return=e,e=r),s(e);if(wi(i))return m(e,r,i,l);if(U(i))return g(e,r,i,l);if(c&&Ei(e,i),void 0===i&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,q(e.type)||"Component"))}return n(e,r)}}var Si=ki(!0),Bi=ki(!1),Oi={},Ti=lo(Oi),Di=lo(Oi),Ni=lo(Oi);function Pi(e){if(e===Oi)throw Error(a(174));return e}function Ii(e,t){switch(co(Ni,t),co(Di,e),co(Ti,Oi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:fe(null,"");break;default:t=fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Ti),co(Ti,t)}function Ri(){uo(Ti),uo(Di),uo(Ni)}function _i(e){Pi(Ni.current);var t=Pi(Ti.current),n=fe(t,e.type);t!==n&&(co(Di,e),co(Ti,n))}function Mi(e){Di.current===e&&(uo(Ti),uo(Di))}var Zi=lo(0);function ji(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var zi=null,Li=null,Fi=!1;function Ui(e,t){var n=Fl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Yi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function $i(e){if(Fi){var t=Li;if(t){var n=t;if(!Yi(e,t)){if(!(t=qr(n.nextSibling))||!Yi(e,t))return e.flags=-1025&e.flags|2,Fi=!1,void(zi=e);Ui(zi,n)}zi=e,Li=qr(t.firstChild)}else e.flags=-1025&e.flags|2,Fi=!1,zi=e}}function Wi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;zi=e}function Vi(e){if(e!==zi)return!1;if(!Fi)return Wi(e),Fi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Yr(t,e.memoizedProps))for(t=Li;t;)Ui(e,t),t=qr(t.nextSibling);if(Wi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Li=qr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Li=null}}else Li=zi?qr(e.stateNode.nextSibling):null;return!0}function qi(){Li=zi=null,Fi=!1}var Gi=[];function Hi(){for(var e=0;e<Gi.length;e++)Gi[e]._workInProgressVersionPrimary=null;Gi.length=0}var Qi=C.ReactCurrentDispatcher,Ki=C.ReactCurrentBatchConfig,Xi=0,Ji=null,ea=null,ta=null,na=!1,ra=!1;function oa(){throw Error(a(321))}function ia(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function aa(e,t,n,r,o,i){if(Xi=i,Ji=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qi.current=null===e||null===e.memoizedState?Pa:Ia,e=n(r,o),ra){i=0;do{if(ra=!1,!(25>i))throw Error(a(301));i+=1,ta=ea=null,t.updateQueue=null,Qi.current=Ra,e=n(r,o)}while(ra)}if(Qi.current=Na,t=null!==ea&&null!==ea.next,Xi=0,ta=ea=Ji=null,na=!1,t)throw Error(a(300));return e}function sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Ji.memoizedState=ta=e:ta=ta.next=e,ta}function la(){if(null===ea){var e=Ji.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Ji.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Ji.memoizedState=ta=e:ta=ta.next=e}return ta}function ua(e,t){return"function"==typeof t?t(e):t}function ca(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ea,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=s=i=null,u=o;do{var c=u.lane;if((Xi&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=d,i=r):l=l.next=d,Ji.lanes|=c,js|=c}u=u.next}while(null!==u&&u!==o);null===l?i=r:l.next=s,ur(r,t.memoizedState)||(Ma=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function da(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{i=e(i,s.action),s=s.next}while(s!==o);ur(i,t.memoizedState)||(Ma=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function pa(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Xi&e)===e)&&(t._workInProgressVersionPrimary=r,Gi.push(t))),e)return n(t._source);throw Gi.push(t),Error(a(350))}function fa(e,t,n,r){var o=Ds;if(null===o)throw Error(a(349));var i=t._getVersion,s=i(t._source),l=Qi.current,u=l.useState((function(){return pa(o,t,n)})),c=u[1],d=u[0];u=ta;var p=e.memoizedState,f=p.refs,h=f.getSnapshot,m=p.source;p=p.subscribe;var g=Ji;return e.memoizedState={refs:f,source:t,subscribe:r},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=c;var e=i(t._source);if(!ur(s,e)){e=n(t._source),ur(d,e)||(c(e),e=cl(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var l=31-Yt(a),u=1<<l;r[l]|=e,a&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=f.getSnapshot,n=f.setSnapshot;try{n(e(t._source));var r=cl(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(h,n)&&ur(m,t)&&ur(p,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:d}).dispatch=c=Da.bind(null,Ji,e),u.queue=e,u.baseQueue=null,d=pa(o,t,n),u.memoizedState=u.baseState=d),d}function ha(e,t,n){return fa(la(),e,t,n)}function ma(e){var t=sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ua,lastRenderedState:e}).dispatch=Da.bind(null,Ji,e),[t.memoizedState,e]}function ga(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ji.updateQueue)?(t={lastEffect:null},Ji.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ya(e){return e={current:e},sa().memoizedState=e}function va(){return la().memoizedState}function ba(e,t,n,r){var o=sa();Ji.flags|=e,o.memoizedState=ga(1|t,n,void 0,void 0===r?null:r)}function Aa(e,t,n,r){var o=la();r=void 0===r?null:r;var i=void 0;if(null!==ea){var a=ea.memoizedState;if(i=a.destroy,null!==r&&ia(r,a.deps))return void ga(t,n,i,r)}Ji.flags|=e,o.memoizedState=ga(1|t,n,i,r)}function Ca(e,t){return ba(516,4,e,t)}function wa(e,t){return Aa(516,4,e,t)}function xa(e,t){return Aa(4,2,e,t)}function Ea(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ka(e,t,n){return n=null!=n?n.concat([e]):null,Aa(4,2,Ea.bind(null,t,e),n)}function Sa(){}function Ba(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Oa(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ta(e,t){var n=$o();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Ki.transition;Ki.transition=1;try{e(!1),t()}finally{Ki.transition=n}}))}function Da(e,t,n){var r=ul(),o=cl(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Ji||null!==a&&a===Ji)ra=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(i.eagerReducer=a,i.eagerState=l,ur(l,s))return}catch(e){}dl(e,o,r)}}var Na={readContext:ai,useCallback:oa,useContext:oa,useEffect:oa,useImperativeHandle:oa,useLayoutEffect:oa,useMemo:oa,useReducer:oa,useRef:oa,useState:oa,useDebugValue:oa,useDeferredValue:oa,useTransition:oa,useMutableSource:oa,useOpaqueIdentifier:oa,unstable_isNewReconciler:!1},Pa={readContext:ai,useCallback:function(e,t){return sa().memoizedState=[e,void 0===t?null:t],e},useContext:ai,useEffect:Ca,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,Ea.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,2,e,t)},useMemo:function(e,t){var n=sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Da.bind(null,Ji,e),[r.memoizedState,e]},useRef:ya,useState:ma,useDebugValue:Sa,useDeferredValue:function(e){var t=ma(e),n=t[0],r=t[1];return Ca((function(){var t=Ki.transition;Ki.transition=1;try{r(e)}finally{Ki.transition=t}}),[e]),n},useTransition:function(){var e=ma(!1),t=e[0];return ya(e=Ta.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=sa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},fa(r,e,t,n)},useOpaqueIdentifier:function(){if(Fi){var e=!1,t=function(e){return{$$typeof:_,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Hr++).toString(36))),Error(a(355))})),n=ma(t)[1];return 0==(2&Ji.mode)&&(Ji.flags|=516,ga(5,(function(){n("r:"+(Hr++).toString(36))}),void 0,null)),t}return ma(t="r:"+(Hr++).toString(36)),t},unstable_isNewReconciler:!1},Ia={readContext:ai,useCallback:Ba,useContext:ai,useEffect:wa,useImperativeHandle:ka,useLayoutEffect:xa,useMemo:Oa,useReducer:ca,useRef:va,useState:function(){return ca(ua)},useDebugValue:Sa,useDeferredValue:function(e){var t=ca(ua),n=t[0],r=t[1];return wa((function(){var t=Ki.transition;Ki.transition=1;try{r(e)}finally{Ki.transition=t}}),[e]),n},useTransition:function(){var e=ca(ua)[0];return[va().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return ca(ua)[0]},unstable_isNewReconciler:!1},Ra={readContext:ai,useCallback:Ba,useContext:ai,useEffect:wa,useImperativeHandle:ka,useLayoutEffect:xa,useMemo:Oa,useReducer:da,useRef:va,useState:function(){return da(ua)},useDebugValue:Sa,useDeferredValue:function(e){var t=da(ua),n=t[0],r=t[1];return wa((function(){var t=Ki.transition;Ki.transition=1;try{r(e)}finally{Ki.transition=t}}),[e]),n},useTransition:function(){var e=da(ua)[0];return[va().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return da(ua)[0]},unstable_isNewReconciler:!1},_a=C.ReactCurrentOwner,Ma=!1;function Za(e,t,n,r){t.child=null===e?Bi(t,null,n,r):Si(t,e.child,n,r)}function ja(e,t,n,r,o){n=n.render;var i=t.ref;return ii(t,o),r=aa(e,t,n,r,i,o),null===e||Ma?(t.flags|=1,Za(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function za(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Ul(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=$l(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,La(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:dr)(o,r)&&e.ref===t.ref)?ns(e,t,i):(t.flags|=1,(e=Yl(a,r)).ref=t.ref,e.return=t,t.child=e)}function La(e,t,n,r,o,i){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(Ma=!1,0==(i&o))return t.lanes=e.lanes,ns(e,t,i);0!=(16384&e.flags)&&(Ma=!0)}return Ya(e,t,n,r,i)}function Fa(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bl(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bl(0,e),null;t.memoizedState={baseLanes:0},bl(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,bl(0,r);return Za(e,t,o,n),t.child}function Ua(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ya(e,t,n,r,o){var i=yo(n)?mo:fo.current;return i=go(t,i),ii(t,o),n=aa(e,t,n,r,i,o),null===e||Ma?(t.flags|=1,Za(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function $a(e,t,n,r,o){if(yo(n)){var i=!0;Co(t)}else i=!1;if(ii(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),bi(t,n,r),Ci(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?ai(u):go(t,u=yo(n)?mo:fo.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&Ai(t,a,r,u),si=!1;var p=t.memoizedState;a.state=p,fi(t,r,a,o),l=t.memoizedState,s!==r||p!==l||ho.current||si?("function"==typeof c&&(gi(t,n,c,r),l=t.memoizedState),(s=si||vi(t,n,s,r,p,l,u))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ui(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Ko(t.type,s),a.props=u,d=t.pendingProps,p=a.context,l="object"==typeof(l=n.contextType)&&null!==l?ai(l):go(t,l=yo(n)?mo:fo.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||p!==l)&&Ai(t,a,r,l),si=!1,p=t.memoizedState,a.state=p,fi(t,r,a,o);var h=t.memoizedState;s!==d||p!==h||ho.current||si?("function"==typeof f&&(gi(t,n,f,r),h=t.memoizedState),(u=si||vi(t,n,u,r,p,h,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),r=!1)}return Wa(e,t,n,r,i,o)}function Wa(e,t,n,r,o,i){Ua(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&wo(t,n,!1),ns(e,t,i);r=t.stateNode,_a.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,s,i)):Za(e,t,s,i),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Ii(e,t.containerInfo)}var qa,Ga,Ha,Qa={dehydrated:null,retryLane:0};function Ka(e,t,n){var r,o=t.pendingProps,i=Zi.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),co(Zi,1&i),null===e?(void 0!==o.fallback&&$i(t),e=o.children,i=o.fallback,a?(e=Xa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,e):"number"==typeof o.unstable_expectedLoadTime?(e=Xa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Yl(a,s),null!==e?r=Yl(e,r):(r=Wl(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Qa,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Yl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Xa(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Vl(t,o,0,null),n=Wl(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oi(e.return,t)}function es(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function ts(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Za(e,t,r.children,n),0!=(2&(r=Zi.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Zi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ji(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),es(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ji(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}es(t,!0,n,null,i,t.lastEffect);break;case"together":es(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ns(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),js|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Yl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Yl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rs(e,t){if(!Fi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function os(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return yo(t.type)&&vo(),null;case 3:return Ri(),uo(ho),uo(fo),Hi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Mi(t);var i=Pi(Ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Ga(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Pi(Ti.current),Vi(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Kr]=t,r[Xr]=s,n){case"dialog":Tr("cancel",r),Tr("close",r);break;case"iframe":case"object":case"embed":Tr("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)Tr(kr[e],r);break;case"source":Tr("error",r);break;case"img":case"image":case"link":Tr("error",r),Tr("load",r);break;case"details":Tr("toggle",r);break;case"input":ee(r,s),Tr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Tr("invalid",r);break;case"textarea":le(r,s),Tr("invalid",r)}for(var u in xe(n,s),e=null,s)s.hasOwnProperty(u)&&(i=s[u],"children"===u?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(u)&&null!=i&&"onScroll"===u&&Tr("scroll",r));switch(n){case"input":Q(r),re(r,s,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=zr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===i.nodeType?i:i.ownerDocument,e===de&&(e=pe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Kr]=t,e[Xr]=r,qa(e,t),t.stateNode=e,u=Ee(n,r),n){case"dialog":Tr("cancel",e),Tr("close",e),i=r;break;case"iframe":case"object":case"embed":Tr("load",e),i=r;break;case"video":case"audio":for(i=0;i<kr.length;i++)Tr(kr[i],e);i=r;break;case"source":Tr("error",e),i=r;break;case"img":case"image":case"link":Tr("error",e),Tr("load",e),i=r;break;case"details":Tr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Tr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Tr("invalid",e);break;case"textarea":le(e,r),i=se(e,r),Tr("invalid",e);break;default:i=r}xe(n,i);var c=i;for(s in c)if(c.hasOwnProperty(s)){var d=c[s];"style"===s?Ce(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&ge(e,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&ye(e,d):"number"==typeof d&&ye(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Tr("scroll",e):null!=d&&A(e,s,d,u))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=zr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Pi(Ni.current),Pi(Ti.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return uo(Zi),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Zi.current)?0===_s&&(_s=3):(0!==_s&&3!==_s||(_s=4),null===Ds||0==(134217727&js)&&0==(134217727&zs)||ml(Ds,Ps))),(r||n)&&(t.flags|=4),null);case 4:return Ri(),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return ri(t),null;case 19:if(uo(Zi),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=r.rendering))if(s)rs(r,!1);else{if(0!==_s||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=ji(e))){for(t.flags|=64,rs(r,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Zi,1&Zi.current|2),t.child}e=e.sibling}null!==r.tail&&Yo()>Ys&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=ji(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rs(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Fi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Yo()-r.renderingStartTime>Ys&&1073741824!==n&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Yo(),n.sibling=null,t=Zi.current,co(Zi,s?1&t|2:1&t),n):null;case 23:case 24:return Al(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function is(e){switch(e.tag){case 1:yo(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ri(),uo(ho),uo(fo),Hi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Mi(e),null;case 13:return uo(Zi),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return uo(Zi),null;case 4:return Ri(),null;case 10:return ri(e),null;case 23:case 24:return Al(),null;default:return null}}function as(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ss(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}qa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ga=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Pi(Ti.current);var a,s=null;switch(n){case"input":i=J(e,i),r=J(e,r),s=[];break;case"option":i=ie(e,i),r=ie(e,r),s=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),s=[];break;case"textarea":i=se(e,i),r=se(e,r),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=zr)}for(d in xe(n,r),n=null,i)if(!r.hasOwnProperty(d)&&i.hasOwnProperty(d)&&null!=i[d])if("style"===d){var u=i[d];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=i?i[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Tr("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===_?c.toString():(s=s||[]).push(d,c))}n&&(s=s||[]).push("style",n);var d=s;(t.updateQueue=d)&&(t.flags|=4)}},Ha=function(e,t,n,r){n!==r&&(t.flags|=4)};var ls="function"==typeof WeakMap?WeakMap:Map;function us(e,t,n){(n=ci(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qs||(qs=!0,Gs=r),ss(0,t)},n}function cs(e,t,n){(n=ci(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ss(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hs?Hs=new Set([this]):Hs.add(this),ss(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ds="function"==typeof WeakSet?WeakSet:Set;function ps(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Zl(e,t)}else t.current=null}function fs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo))}throw Error(a(163))}function hs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Rl(n,e),Il(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&hi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}hi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Ct(n)))))}throw Error(a(163))}function ms(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=Ae("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function gs(e,t){if(Eo&&"function"==typeof Eo.onCommitFiberUnmount)try{Eo.onCommitFiberUnmount(xo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Rl(t,n);else{r=t;try{o()}catch(e){Zl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ps(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Zl(t,e)}break;case 5:ps(t);break;case 4:ws(e,t)}}function ys(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vs(e){return 5===e.tag||3===e.tag||4===e.tag}function bs(e){e:{for(var t=e.return;null!==t;){if(vs(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?As(e,n,t):Cs(e,n,t)}function As(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=zr));else if(4!==r&&null!==(e=e.child))for(As(e,t,n),e=e.sibling;null!==e;)As(e,t,n),e=e.sibling}function Cs(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Cs(e,t,n),e=e.sibling;null!==e;)Cs(e,t,n),e=e.sibling}function ws(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var s=e,l=o,u=l;;)if(gs(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=o.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(gs(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function xs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<i.length;o+=2){var s=i[o],l=i[o+1];"style"===s?Ce(n,l):"dangerouslySetInnerHTML"===s?ge(n,l):"children"===s?ye(n,l):A(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Ct(n.containerInfo)));case 13:return null!==t.memoizedState&&(Us=Yo(),ms(t.child,!0)),void Es(t);case 19:return void Es(t);case 23:case 24:return void ms(t,null!==t.memoizedState)}throw Error(a(163))}function Es(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ds),t.forEach((function(t){var r=zl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ks(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Ss=Math.ceil,Bs=C.ReactCurrentDispatcher,Os=C.ReactCurrentOwner,Ts=0,Ds=null,Ns=null,Ps=0,Is=0,Rs=lo(0),_s=0,Ms=null,Zs=0,js=0,zs=0,Ls=0,Fs=null,Us=0,Ys=1/0;function $s(){Ys=Yo()+500}var Ws,Vs=null,qs=!1,Gs=null,Hs=null,Qs=!1,Ks=null,Xs=90,Js=[],el=[],tl=null,nl=0,rl=null,ol=-1,il=0,al=0,sl=null,ll=!1;function ul(){return 0!=(48&Ts)?Yo():-1!==ol?ol:ol=Yo()}function cl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===$o()?1:2;if(0===il&&(il=Zs),0!==Qo.transition){0!==al&&(al=null!==Fs?Fs.pendingLanes:0),e=il;var t=4186112&~al;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=$o(),e=zt(0!=(4&Ts)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),il)}function dl(e,t,n){if(50<nl)throw nl=0,rl=null,Error(a(185));if(null===(e=pl(e,t)))return null;Ut(e,t,n),e===Ds&&(zs|=t,4===_s&&ml(e,Ps));var r=$o();1===t?0!=(8&Ts)&&0==(48&Ts)?gl(e):(fl(e,n),0===Ts&&($s(),Go())):(0==(4&Ts)||98!==r&&99!==r||(null===tl?tl=new Set([e]):tl.add(e)),fl(e,n)),Fs=e}function pl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function fl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Yt(s),u=1<<l,c=i[l];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,Mt(u);var d=_t;i[l]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=Zt(e,e===Ds?Ps:0),t=_t,0===r)null!==n&&(n!==Zo&&Bo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Zo&&Bo(n)}15===t?(n=gl.bind(null,e),null===zo?(zo=[n],Lo=So(Po,Ho)):zo.push(n),n=Zo):14===t?n=qo(99,gl.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=qo(n,hl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hl(e){if(ol=-1,al=il=0,0!=(48&Ts))throw Error(a(327));var t=e.callbackNode;if(Pl()&&e.callbackNode!==t)return null;var n=Zt(e,e===Ds?Ps:0);if(0===n)return null;var r=n,o=Ts;Ts|=16;var i=xl();for(Ds===e&&Ps===r||($s(),Cl(e,r));;)try{Sl();break}catch(t){wl(e,t)}if(ni(),Bs.current=i,Ts=o,null!==Ns?r=0:(Ds=null,Ps=0,r=_s),0!=(Zs&zs))Cl(e,0);else if(0!==r){if(2===r&&(Ts|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=jt(e))&&(r=El(e,n))),1===r)throw t=Ms,Cl(e,0),ml(e,n),fl(e,Yo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Tl(e);break;case 3:if(ml(e,n),(62914560&n)===n&&10<(r=Us+500-Yo())){if(0!==Zt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){ul(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=$r(Tl.bind(null,e),r);break}Tl(e);break;case 4:if(ml(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var s=31-Yt(n);i=1<<s,(s=r[s])>o&&(o=s),n&=~i}if(n=o,10<(n=(120>(n=Yo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ss(n/1960))-n)){e.timeoutHandle=$r(Tl.bind(null,e),n);break}Tl(e);break;default:throw Error(a(329))}}return fl(e,Yo()),e.callbackNode===t?hl.bind(null,e):null}function ml(e,t){for(t&=~Ls,t&=~zs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Yt(t),r=1<<n;e[n]=-1,t&=~r}}function gl(e){if(0!=(48&Ts))throw Error(a(327));if(Pl(),e===Ds&&0!=(e.expiredLanes&Ps)){var t=Ps,n=El(e,t);0!=(Zs&zs)&&(n=El(e,t=Zt(e,t)))}else n=El(e,t=Zt(e,0));if(0!==e.tag&&2===n&&(Ts|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=jt(e))&&(n=El(e,t))),1===n)throw n=Ms,Cl(e,0),ml(e,t),fl(e,Yo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tl(e),fl(e,Yo()),null}function yl(e,t){var n=Ts;Ts|=1;try{return e(t)}finally{0===(Ts=n)&&($s(),Go())}}function vl(e,t){var n=Ts;Ts&=-2,Ts|=8;try{return e(t)}finally{0===(Ts=n)&&($s(),Go())}}function bl(e,t){co(Rs,Is),Is|=t,Zs|=t}function Al(){Is=Rs.current,uo(Rs)}function Cl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Wr(n)),null!==Ns)for(n=Ns.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Ri(),uo(ho),uo(fo),Hi();break;case 5:Mi(r);break;case 4:Ri();break;case 13:case 19:uo(Zi);break;case 10:ri(r);break;case 23:case 24:Al()}n=n.return}Ds=e,Ns=Yl(e.current,null),Ps=Is=Zs=t,_s=0,Ms=null,Ls=zs=js=0}function wl(e,t){for(;;){var n=Ns;try{if(ni(),Qi.current=Na,na){for(var r=Ji.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}na=!1}if(Xi=0,ta=ea=Ji=null,ra=!1,Os.current=null,null===n||null===n.return){_s=1,Ms=t,Ns=null;break}e:{var i=e,a=n.return,s=n,l=t;if(t=Ps,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&Zi.current),p=a;do{var f;if(f=13===p.tag){var h=p.memoizedState;if(null!==h)f=null!==h.dehydrated;else{var m=p.memoizedProps;f=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!d)}}if(f){var g=p.updateQueue;if(null===g){var y=new Set;y.add(u),p.updateQueue=y}else g.add(u);if(0==(2&p.mode)){if(p.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var v=ci(-1,1);v.tag=2,di(s,v)}s.lanes|=1;break e}l=void 0,s=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new ls,l=new Set,b.set(u,l)):void 0===(l=b.get(u))&&(l=new Set,b.set(u,l)),!l.has(s)){l.add(s);var A=jl.bind(null,i,u,s);u.then(A,A)}p.flags|=4096,p.lanes=t;break e}p=p.return}while(null!==p);l=Error((q(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==_s&&(_s=2),l=as(l,s),p=a;do{switch(p.tag){case 3:i=l,p.flags|=4096,t&=-t,p.lanes|=t,pi(p,us(0,i,t));break e;case 1:i=l;var C=p.type,w=p.stateNode;if(0==(64&p.flags)&&("function"==typeof C.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Hs||!Hs.has(w)))){p.flags|=4096,t&=-t,p.lanes|=t,pi(p,cs(p,i,t));break e}}p=p.return}while(null!==p)}Ol(n)}catch(e){t=e,Ns===n&&null!==n&&(Ns=n=n.return);continue}break}}function xl(){var e=Bs.current;return Bs.current=Na,null===e?Na:e}function El(e,t){var n=Ts;Ts|=16;var r=xl();for(Ds===e&&Ps===t||Cl(e,t);;)try{kl();break}catch(t){wl(e,t)}if(ni(),Ts=n,Bs.current=r,null!==Ns)throw Error(a(261));return Ds=null,Ps=0,_s}function kl(){for(;null!==Ns;)Bl(Ns)}function Sl(){for(;null!==Ns&&!Oo();)Bl(Ns)}function Bl(e){var t=Ws(e.alternate,e,Is);e.memoizedProps=e.pendingProps,null===t?Ol(e):Ns=t,Os.current=null}function Ol(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=os(n,t,Is)))return void(Ns=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Is)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=is(t)))return n.flags&=2047,void(Ns=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ns=t);Ns=t=e}while(null!==t);0===_s&&(_s=5)}function Tl(e){var t=$o();return Vo(99,Dl.bind(null,e,t)),null}function Dl(e,t){do{Pl()}while(null!==Ks);if(0!=(48&Ts))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<i;){var u=31-Yt(i),c=1<<u;o[u]=0,s[u]=-1,l[u]=-1,i&=~c}if(null!==tl&&0==(24&r)&&tl.has(e)&&tl.delete(e),e===Ds&&(Ns=Ds=null,Ps=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ts,Ts|=32,Os.current=null,Lr=Gt,gr(s=mr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,i=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var d=0,p=-1,f=-1,h=0,m=0,g=s,y=null;t:for(;;){for(var v;g!==l||0!==i&&3!==g.nodeType||(p=d+i),g!==u||0!==c&&3!==g.nodeType||(f=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(v=g.firstChild);)y=g,g=v;for(;;){if(g===s)break t;if(y===l&&++h===i&&(p=d),y===u&&++m===c&&(f=d),null!==(v=g.nextSibling))break;y=(g=y).parentNode}g=v}l=-1===p||-1===f?null:{start:p,end:f}}else l=null;l=l||{start:0,end:0}}else l=null;Fr={focusedElem:s,selectionRange:l},Gt=!1,sl=null,ll=!1,Vs=r;do{try{Nl()}catch(e){if(null===Vs)throw Error(a(330));Zl(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);sl=null,Vs=r;do{try{for(s=e;null!==Vs;){var b=Vs.flags;if(16&b&&ye(Vs.stateNode,""),128&b){var A=Vs.alternate;if(null!==A){var C=A.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(1038&b){case 2:bs(Vs),Vs.flags&=-3;break;case 6:bs(Vs),Vs.flags&=-3,xs(Vs.alternate,Vs);break;case 1024:Vs.flags&=-1025;break;case 1028:Vs.flags&=-1025,xs(Vs.alternate,Vs);break;case 4:xs(Vs.alternate,Vs);break;case 8:ws(s,l=Vs);var w=l.alternate;ys(l),null!==w&&ys(w)}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(a(330));Zl(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);if(C=Fr,A=mr(),b=C.focusedElem,s=C.selectionRange,A!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==s&&gr(b)&&(A=s.start,void 0===(C=s.end)&&(C=A),"selectionStart"in b?(b.selectionStart=A,b.selectionEnd=Math.min(C,b.value.length)):(C=(A=b.ownerDocument||document)&&A.defaultView||window).getSelection&&(C=C.getSelection(),l=b.textContent.length,w=Math.min(s.start,l),s=void 0===s.end?w:Math.min(s.end,l),!C.extend&&w>s&&(l=s,s=w,w=l),l=fr(b,w),i=fr(b,s),l&&i&&(1!==C.rangeCount||C.anchorNode!==l.node||C.anchorOffset!==l.offset||C.focusNode!==i.node||C.focusOffset!==i.offset)&&((A=A.createRange()).setStart(l.node,l.offset),C.removeAllRanges(),w>s?(C.addRange(A),C.extend(i.node,i.offset)):(A.setEnd(i.node,i.offset),C.addRange(A))))),A=[];for(C=b;C=C.parentNode;)1===C.nodeType&&A.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<A.length;b++)(C=A[b]).element.scrollLeft=C.left,C.element.scrollTop=C.top}Gt=!!Lr,Fr=Lr=null,e.current=n,Vs=r;do{try{for(b=e;null!==Vs;){var x=Vs.flags;if(36&x&&hs(b,Vs.alternate,Vs),128&x){A=void 0;var E=Vs.ref;if(null!==E){var k=Vs.stateNode;Vs.tag,A=k,"function"==typeof E?E(A):E.current=A}}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(a(330));Zl(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);Vs=null,jo(),Ts=o}else e.current=n;if(Qs)Qs=!1,Ks=e,Xs=t;else for(Vs=r;null!==Vs;)t=Vs.nextEffect,Vs.nextEffect=null,8&Vs.flags&&((x=Vs).sibling=null,x.stateNode=null),Vs=t;if(0===(r=e.pendingLanes)&&(Hs=null),1===r?e===rl?nl++:(nl=0,rl=e):nl=0,n=n.stateNode,Eo&&"function"==typeof Eo.onCommitFiberRoot)try{Eo.onCommitFiberRoot(xo,n,void 0,64==(64&n.current.flags))}catch(e){}if(fl(e,Yo()),qs)throw qs=!1,e=Gs,Gs=null,e;return 0!=(8&Ts)||Go(),null}function Nl(){for(;null!==Vs;){var e=Vs.alternate;ll||null===sl||(0!=(8&Vs.flags)?Je(Vs,sl)&&(ll=!0):13===Vs.tag&&ks(e,Vs)&&Je(Vs,sl)&&(ll=!0));var t=Vs.flags;0!=(256&t)&&fs(e,Vs),0==(512&t)||Qs||(Qs=!0,qo(97,(function(){return Pl(),null}))),Vs=Vs.nextEffect}}function Pl(){if(90!==Xs){var e=97<Xs?97:Xs;return Xs=90,Vo(e,_l)}return!1}function Il(e,t){Js.push(t,e),Qs||(Qs=!0,qo(97,(function(){return Pl(),null})))}function Rl(e,t){el.push(t,e),Qs||(Qs=!0,qo(97,(function(){return Pl(),null})))}function _l(){if(null===Ks)return!1;var e=Ks;if(Ks=null,0!=(48&Ts))throw Error(a(331));var t=Ts;Ts|=32;var n=el;el=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===i)throw Error(a(330));Zl(i,e)}}for(n=Js,Js=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===i)throw Error(a(330));Zl(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ts=t,Go(),!0}function Ml(e,t,n){di(e,t=us(0,t=as(n,t),1)),t=ul(),null!==(e=pl(e,1))&&(Ut(e,1,t),fl(e,t))}function Zl(e,t){if(3===e.tag)Ml(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ml(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r))){var o=cs(n,e=as(t,e),1);if(di(n,o),o=ul(),null!==(n=pl(n,1)))Ut(n,1,o),fl(n,o);else if("function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function jl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ul(),e.pingedLanes|=e.suspendedLanes&n,Ds===e&&(Ps&n)===n&&(4===_s||3===_s&&(62914560&Ps)===Ps&&500>Yo()-Us?Cl(e,0):Ls|=n),fl(e,t)}function zl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===$o()?1:2:(0===il&&(il=Zs),0===(t=Lt(62914560&~il))&&(t=4194304))),n=ul(),null!==(e=pl(e,t))&&(Ut(e,t,n),fl(e,n))}function Ll(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fl(e,t,n,r){return new Ll(e,t,n,r)}function Ul(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Yl(e,t){var n=e.alternate;return null===n?((n=Fl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function $l(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)Ul(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case E:return Wl(n.children,o,i,t);case M:s=8,o|=16;break;case k:s=8,o|=1;break;case S:return(e=Fl(12,n,t,8|o)).elementType=S,e.type=S,e.lanes=i,e;case D:return(e=Fl(13,n,t,o)).type=D,e.elementType=D,e.lanes=i,e;case N:return(e=Fl(19,n,t,o)).elementType=N,e.lanes=i,e;case Z:return Vl(n,o,i,t);case j:return(e=Fl(24,n,t,o)).elementType=j,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case B:s=10;break e;case O:s=9;break e;case T:s=11;break e;case P:s=14;break e;case I:s=16,r=null;break e;case R:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fl(s,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Wl(e,t,n,r){return(e=Fl(7,e,r,t)).lanes=n,e}function Vl(e,t,n,r){return(e=Fl(23,e,r,t)).elementType=Z,e.lanes=n,e}function ql(e,t,n){return(e=Fl(6,e,null,t)).lanes=n,e}function Gl(e,t,n){return(t=Fl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ft(0),this.expirationTimes=Ft(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ft(0),this.mutableSourceEagerHydrationData=null}function Ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Kl(e,t,n,r){var o=t.current,i=ul(),s=cl(o);e:if(n){t:{if(He(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(yo(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(yo(u)){n=Ao(n,u,l);break e}}n=l}else n=po;return null===t.context?t.context=n:t.pendingContext=n,(t=ci(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),di(o,t),dl(o,s,i),s}function Xl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Jl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function eu(e,t){Jl(e,t),(e=e.alternate)&&Jl(e,t)}function tu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Hl(e,t,null!=n&&!0===n.hydrate),t=Fl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,li(t),e[Jr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ru(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=Xl(a);s.call(e)}}Kl(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Xl(a);l.call(e)}}vl((function(){Kl(t,a,e,o)}))}return Xl(a)}function ou(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(t))throw Error(a(200));return Ql(e,t,null,n)}Ws=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)Ma=!0;else{if(0==(n&r)){switch(Ma=!1,t.tag){case 3:Va(t),qi();break;case 5:_i(t);break;case 1:yo(t.type)&&Co(t);break;case 4:Ii(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ka(e,t,n):(co(Zi,1&Zi.current),null!==(t=ns(e,t,n))?t.sibling:null);co(Zi,1&Zi.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ts(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Zi,Zi.current),r)break;return null;case 23:case 24:return t.lanes=0,Fa(e,t,n)}return ns(e,t,n)}Ma=0!=(16384&e.flags)}else Ma=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=go(t,fo.current),ii(t,n),o=aa(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,yo(r)){var i=!0;Co(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,li(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&gi(t,r,s,e),o.updater=yi,t.stateNode=o,o._reactInternals=t,Ci(t,r,e,n),t=Wa(null,t,r,!0,i,n)}else t.tag=0,Za(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Ul(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===P)return 14}return 2}(o),e=Ko(o,e),i){case 0:t=Ya(null,t,o,e,n);break e;case 1:t=$a(null,t,o,e,n);break e;case 11:t=ja(null,t,o,e,n);break e;case 14:t=za(null,t,o,Ko(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ya(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,$a(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ui(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)qi(),t=ns(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Li=qr(t.stateNode.containerInfo.firstChild),zi=t,i=Fi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Gi.push(i);for(n=Bi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Za(e,t,r,n),qi();t=t.child}return t;case 5:return _i(t),null===e&&$i(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,Yr(r,o)?s=null:null!==i&&Yr(r,i)&&(t.flags|=16),Ua(e,t),Za(e,t,s,n),t.child;case 6:return null===e&&$i(t),null;case 13:return Ka(e,t,n);case 4:return Ii(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):Za(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return Za(e,t,t.pendingProps,n),t.child;case 8:case 12:return Za(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,s=t.memoizedProps,i=o.value;var l=t.type._context;if(co(Xo,l._currentValue),l._currentValue=i,null!==s)if(l=s.value,0==(i=ur(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(s.children===o.children&&!ho.current){t=ns(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===l.tag&&((c=ci(-1,n&-n)).tag=2,di(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),oi(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Za(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ii(t,n),r=r(o=ai(o,i.unstable_observedBits)),t.flags|=1,Za(e,t,r,n),t.child;case 14:return i=Ko(o=t.type,t.pendingProps),za(e,t,o,i=Ko(o.type,i),r,n);case 15:return La(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,yo(r)?(e=!0,Co(t)):e=!1,ii(t,n),bi(t,r,o),Ci(t,r,o,n),Wa(null,t,r,!0,e,n);case 19:return ts(e,t,n);case 23:case 24:return Fa(e,t,n)}throw Error(a(156,t.tag))},tu.prototype.render=function(e){Kl(e,this._internalRoot,null,null)},tu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Kl(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(dl(e,4,ul()),eu(e,4))},tt=function(e){13===e.tag&&(dl(e,67108864,ul()),eu(e,67108864))},nt=function(e){if(13===e.tag){var t=ul(),n=cl(e);dl(e,n,t),eu(e,n)}},rt=function(e,t){return t()},Se=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(a(90));K(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Pe=yl,Ie=function(e,t,n,r,o){var i=Ts;Ts|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ts=i)&&($s(),Go())}},Re=function(){0==(49&Ts)&&(function(){if(null!==tl){var e=tl;tl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,fl(e,Yo())}))}Go()}(),Pl())},_e=function(e,t){var n=Ts;Ts|=2;try{return e(t)}finally{0===(Ts=n)&&($s(),Go())}};var iu={Events:[no,ro,oo,De,Ne,Pl,{current:!1}]},au={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},su={bundleType:au.bundleType,version:au.version,rendererPackageName:au.rendererPackageName,rendererConfig:au.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:C.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:au.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lu.isDisabled&&lu.supportsFiber)try{xo=lu.inject(su),Eo=lu}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=iu,t.createPortal=ou,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ts;if(0!=(48&n))return e(t);Ts|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ts=n,Go()}},t.hydrate=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!nu(t))throw Error(a(200));return ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nu(e))throw Error(a(40));return!!e._reactRootContainer&&(vl((function(){ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=yl,t.unstable_createPortal=function(e,t){return ou(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ru(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},2495:function(e){e.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(36)),i=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={files:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"handleChange",value:function(e){for(var t=this,n=e.target.files,r=[],o=function(){var e=n[i],o=new FileReader;o.readAsDataURL(e),o.onload=function(){var i={name:e.name,type:e.type,size:Math.round(e.size/1e3)+" kB",base64:o.result,file:e};r.push(i),r.length==n.length&&(t.props.multiple?t.props.onDone(r):t.props.onDone(r[0]))}},i=0;i<n.length;i++)o()}},{key:"render",value:function(){return o.default.createElement("input",{type:"file",onChange:this.handleChange.bind(this),multiple:this.props.multiple})}}]),t}(o.default.Component);t.default=i,i.defaultProps={multiple:!1}},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(u===setTimeout)return setTimeout(e,0);if((u===n||!u)&&setTimeout)return u=setTimeout,setTimeout(e,0);try{return u(e,0)}catch(t){try{return u.call(null,e,0)}catch(t){return u.call(this,e,0)}}}function i(){h&&p&&(h=!1,p.length?f=p.concat(f):m=-1,f.length&&a())}function a(){if(!h){var e=o(i);h=!0;for(var t=f.length;t;){for(p=f,f=[];++m<t;)p&&p[m].run();m=-1,t=f.length}p=null,h=!1,function(e){if(c===clearTimeout)return clearTimeout(e);if((c===r||!c)&&clearTimeout)return c=clearTimeout,clearTimeout(e);try{c(e)}catch(t){try{return c.call(null,e)}catch(t){return c.call(this,e)}}}(e)}}function s(e,t){this.fun=e,this.array=t}function l(){}var u,c,d=e.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:n}catch(e){u=n}try{c="function"==typeof clearTimeout?clearTimeout:r}catch(e){c=r}}();var p,f=[],h=!1,m=-1;d.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new s(e,t)),1!==f.length||h||o(a)},s.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=l,d.addListener=l,d.once=l,d.off=l,d.removeListener=l,d.removeAllListeners=l,d.emit=l,d.prependListener=l,d.prependOnceListener=l,d.listeners=function(e){return[]},d.binding=function(e){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(e){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(e,t,n){(function(t){"use strict";var n=function(e){};"production"!==t.env.NODE_ENV&&(n=function(e){if(void 0===e)throw new Error("invariant requires an error message argument")}),e.exports=function(e,t,r,o,i,a,s,l){if(n(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[r,o,i,a,s,l],d=0;(u=new Error(t.replace(/%s/g,(function(){return c[d++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var r=n(9);if("production"!==t.env.NODE_ENV){var o=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,(function(){return n[o++]}));"undefined"!=typeof console&&console.error(i);try{throw new Error(i)}catch(e){}};r=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(0!==t.indexOf("Failed Composite propType: ")&&!e){for(var n=arguments.length,r=Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];o.apply(void 0,[t].concat(r))}}}e.exports=r}).call(t,n(1))},function(e,t,n){(function(t){"use strict";function r(e){if("production"!==t.env.NODE_ENV&&f.call(e,"ref")){var n=Object.getOwnPropertyDescriptor(e,"ref").get;if(n&&n.isReactWarning)return!1}return void 0!==e.ref}function o(e){if("production"!==t.env.NODE_ENV&&f.call(e,"key")){var n=Object.getOwnPropertyDescriptor(e,"key").get;if(n&&n.isReactWarning)return!1}return void 0!==e.key}function i(e,n){var r=function(){s||(s=!0,"production"!==t.env.NODE_ENV&&d(!1,"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",n))};r.isReactWarning=!0,Object.defineProperty(e,"key",{get:r,configurable:!0})}function a(e,n){var r=function(){l||(l=!0,"production"!==t.env.NODE_ENV&&d(!1,"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)",n))};r.isReactWarning=!0,Object.defineProperty(e,"ref",{get:r,configurable:!0})}var s,l,u=n(6),c=n(7),d=n(3),p=n(8),f=Object.prototype.hasOwnProperty,h=n(15),m={key:!0,ref:!0,__self:!0,__source:!0},g=function(e,n,r,o,i,a,s){var l={$$typeof:h,type:e,key:n,ref:r,props:s,_owner:a};return"production"!==t.env.NODE_ENV&&(l._store={},p?(Object.defineProperty(l._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(l,"_self",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(l,"_source",{configurable:!1,enumerable:!1,writable:!1,value:i})):(l._store.validated=!1,l._self=o,l._source=i),Object.freeze&&(Object.freeze(l.props),Object.freeze(l))),l};g.createElement=function(e,n,s){var l,u={},d=null,p=null,y=null,v=null;if(null!=n)for(l in r(n)&&(p=n.ref),o(n)&&(d=""+n.key),y=void 0===n.__self?null:n.__self,v=void 0===n.__source?null:n.__source,n)f.call(n,l)&&!m.hasOwnProperty(l)&&(u[l]=n[l]);var b=arguments.length-2;if(1===b)u.children=s;else if(b>1){for(var A=Array(b),C=0;C<b;C++)A[C]=arguments[C+2];"production"!==t.env.NODE_ENV&&Object.freeze&&Object.freeze(A),u.children=A}if(e&&e.defaultProps){var w=e.defaultProps;for(l in w)void 0===u[l]&&(u[l]=w[l])}if("production"!==t.env.NODE_ENV&&(d||p)&&(void 0===u.$$typeof||u.$$typeof!==h)){var x="function"==typeof e?e.displayName||e.name||"Unknown":e;d&&i(u,x),p&&a(u,x)}return g(e,d,p,y,v,c.current,u)},g.createFactory=function(e){var t=g.createElement.bind(null,e);return t.type=e,t},g.cloneAndReplaceKey=function(e,t){return g(e.type,t,e.ref,e._self,e._source,e._owner,e.props)},g.cloneElement=function(e,t,n){var i,a,s=u({},e.props),l=e.key,d=e.ref,p=e._self,h=e._source,y=e._owner;if(null!=t)for(i in r(t)&&(d=t.ref,y=c.current),o(t)&&(l=""+t.key),e.type&&e.type.defaultProps&&(a=e.type.defaultProps),t)f.call(t,i)&&!m.hasOwnProperty(i)&&(void 0===t[i]&&void 0!==a?s[i]=a[i]:s[i]=t[i]);var v=arguments.length-2;if(1===v)s.children=n;else if(v>1){for(var b=Array(v),A=0;A<v;A++)b[A]=arguments[A+2];s.children=b}return g(e.type,l,d,p,h,y,s)},g.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===h},e.exports=g}).call(t,n(1))},function(e,t){"use strict";e.exports=function(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o=new Error(n);throw o.name="Invariant Violation",o.framesToPop=1,o}},function(e,t){"use strict";function n(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;var r=Object.getOwnPropertyNames(t).map((function(e){return t[e]}));if("0123456789"!==r.join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach((function(e){o[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var a,s,l=n(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))o.call(a,c)&&(l[c]=a[c]);if(r){s=r(a);for(var d=0;d<s.length;d++)i.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},function(e,t){"use strict";e.exports={current:null}},function(e,t,n){(function(t){"use strict";var n=!1;if("production"!==t.env.NODE_ENV)try{Object.defineProperty({},"x",{get:function(){}}),n=!0}catch(e){}e.exports=n}).call(t,n(1))},function(e,t){"use strict";function n(e){return function(){return e}}var r=function(){};r.thatReturns=n,r.thatReturnsFalse=n(!1),r.thatReturnsTrue=n(!0),r.thatReturnsNull=n(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){(function(t){"use strict";function r(e){var t=Function.prototype.toString,n=Object.prototype.hasOwnProperty,r=RegExp("^"+t.call(n).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");try{var o=t.call(e);return r.test(o)}catch(e){return!1}}function o(e){var t=u(e);if(t){var n=t.childIDs;c(e),n.forEach(o)}}function i(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")}function a(e){return null==e?"#empty":"string"==typeof e||"number"==typeof e?"#text":"string"==typeof e.type?e.type:e.type.displayName||e.type.name||"Unknown"}function s(e){var n,r=S.getDisplayName(e),o=S.getElement(e),a=S.getOwnerID(e);return a&&(n=S.getDisplayName(a)),"production"!==t.env.NODE_ENV&&v(o,"ReactComponentTreeHook: Missing React element for debugID %s when building stack",e),i(r,o&&o._source,n)}var l,u,c,d,p,f,h,m=n(5),g=n(7),y=n(2),v=n(3);if("function"==typeof Array.from&&"function"==typeof Map&&r(Map)&&null!=Map.prototype&&"function"==typeof Map.prototype.keys&&r(Map.prototype.keys)&&"function"==typeof Set&&r(Set)&&null!=Set.prototype&&"function"==typeof Set.prototype.keys&&r(Set.prototype.keys)){var b=new Map,A=new Set;l=function(e,t){b.set(e,t)},u=function(e){return b.get(e)},c=function(e){b.delete(e)},d=function(){return Array.from(b.keys())},p=function(e){A.add(e)},f=function(e){A.delete(e)},h=function(){return Array.from(A.keys())}}else{var C={},w={},x=function(e){return"."+e},E=function(e){return parseInt(e.substr(1),10)};l=function(e,t){var n=x(e);C[n]=t},u=function(e){var t=x(e);return C[t]},c=function(e){var t=x(e);delete C[t]},d=function(){return Object.keys(C).map(E)},p=function(e){var t=x(e);w[t]=!0},f=function(e){var t=x(e);delete w[t]},h=function(){return Object.keys(w).map(E)}}var k=[],S={onSetChildren:function(e,n){var r=u(e);r||("production"!==t.env.NODE_ENV?y(!1,"Item must have been set"):m("144")),r.childIDs=n;for(var o=0;o<n.length;o++){var i=n[o],a=u(i);a||("production"!==t.env.NODE_ENV?y(!1,"Expected hook events to fire for the child before its parent includes it in onSetChildren()."):m("140")),null==a.childIDs&&"object"==typeof a.element&&null!=a.element&&("production"!==t.env.NODE_ENV?y(!1,"Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren()."):m("141")),a.isMounted||("production"!==t.env.NODE_ENV?y(!1,"Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren()."):m("71")),null==a.parentID&&(a.parentID=e),a.parentID!==e&&("production"!==t.env.NODE_ENV?y(!1,"Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).",i,a.parentID,e):m("142",i,a.parentID,e))}},onBeforeMountComponent:function(e,t,n){l(e,{element:t,parentID:n,text:null,childIDs:[],isMounted:!1,updateCount:0})},onBeforeUpdateComponent:function(e,t){var n=u(e);n&&n.isMounted&&(n.element=t)},onMountComponent:function(e){var n=u(e);n||("production"!==t.env.NODE_ENV?y(!1,"Item must have been set"):m("144")),n.isMounted=!0,0===n.parentID&&p(e)},onUpdateComponent:function(e){var t=u(e);t&&t.isMounted&&t.updateCount++},onUnmountComponent:function(e){var t=u(e);t&&(t.isMounted=!1,0===t.parentID&&f(e)),k.push(e)},purgeUnmountedComponents:function(){if(!S._preventPurging){for(var e=0;e<k.length;e++)o(k[e]);k.length=0}},isMounted:function(e){var t=u(e);return!!t&&t.isMounted},getCurrentStackAddendum:function(e){var t="";if(e){var n=a(e),r=e._owner;t+=i(n,e._source,r&&r.getName())}var o=g.current,s=o&&o._debugID;return t+S.getStackAddendumByID(s)},getStackAddendumByID:function(e){for(var t="";e;)t+=s(e),e=S.getParentID(e);return t},getChildIDs:function(e){var t=u(e);return t?t.childIDs:[]},getDisplayName:function(e){var t=S.getElement(e);return t?a(t):null},getElement:function(e){var t=u(e);return t?t.element:null},getOwnerID:function(e){var t=S.getElement(e);return t&&t._owner?t._owner._debugID:null},getParentID:function(e){var t=u(e);return t?t.parentID:null},getSource:function(e){var t=u(e),n=t?t.element:null;return null!=n?n._source:null},getText:function(e){var t=S.getElement(e);return"string"==typeof t?t:"number"==typeof t?""+t:null},getUpdateCount:function(e){var t=u(e);return t?t.updateCount:0},getRootIDs:h,getRegisteredIDs:d,pushNonStandardWarningStack:function(e,t){if("function"==typeof console.reactStack){var n=[],r=g.current,o=r&&r._debugID;try{for(e&&n.push({name:o?S.getDisplayName(o):null,fileName:t?t.fileName:null,lineNumber:t?t.lineNumber:null});o;){var i=S.getElement(o),a=S.getParentID(o),s=S.getOwnerID(o),l=s?S.getDisplayName(s):null,u=i&&i._source;n.push({name:l,fileName:u?u.fileName:null,lineNumber:u?u.lineNumber:null}),o=a}}catch(e){}console.reactStack(n)}},popNonStandardWarningStack:function(){"function"==typeof console.reactStackEnd&&console.reactStackEnd()}};e.exports=S}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var n=function(){};if("production"!==t.env.NODE_ENV){var r=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=0,i="Warning: "+e.replace(/%s/g,(function(){return n[o++]}));"undefined"!=typeof console&&console.warn(i);try{throw new Error(i)}catch(e){}};n=function(e,t){if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(!e){for(var n=arguments.length,o=Array(n>2?n-2:0),i=2;i<n;i++)o[i-2]=arguments[i];r.apply(void 0,[t].concat(o))}}}e.exports=n}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&Object.freeze(n),e.exports=n}).call(t,n(1))},function(e,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){(function(t){"use strict";function r(e,t,n){this.props=e,this.context=t,this.refs=c,this.updater=n||l}function o(e,t,n){this.props=e,this.context=t,this.refs=c,this.updater=n||l}function i(){}var a=n(5),s=n(6),l=n(17),u=n(8),c=n(12),d=n(2),p=n(11);if(r.prototype.isReactComponent={},r.prototype.setState=function(e,n){"object"!=typeof e&&"function"!=typeof e&&null!=e&&("production"!==t.env.NODE_ENV?d(!1,"setState(...): takes an object of state variables to update or a function which returns an object of state variables."):a("85")),this.updater.enqueueSetState(this,e),n&&this.updater.enqueueCallback(this,n,"setState")},r.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")},"production"!==t.env.NODE_ENV){var f={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},h=function(e,t){u&&Object.defineProperty(r.prototype,e,{get:function(){p(!1,"%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var m in f)f.hasOwnProperty(m)&&h(m,f[m])}i.prototype=r.prototype,o.prototype=new i,o.prototype.constructor=o,s(o.prototype,r.prototype),o.prototype.isPureReactComponent=!0,e.exports={Component:r,PureComponent:o}}).call(t,n(1))},function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=n},function(e,t,n){(function(t){"use strict";function r(){if(u.current){var e=u.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e){if(null!=e&&void 0!==e.__source){var t=e.__source;return" Check your code at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+"."}return""}function i(e){var t=r();if(!t){var n="string"==typeof e?e:e.displayName||e.name;n&&(t=" Check the top-level render call using <"+n+">.")}return t}function a(e,n){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var r=y.uniqueKey||(y.uniqueKey={}),o=i(n);if(!r[o]){r[o]=!0;var a="";e&&e._owner&&e._owner!==u.current&&(a=" It was passed a child from "+e._owner.getName()+"."),"production"!==t.env.NODE_ENV&&m(!1,'Each child in an array or iterator should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.%s',o,a,c.getCurrentStackAddendum(e))}}}function s(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];d.isValidElement(r)&&a(r,t)}else if(d.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var o=h(e);if(o&&o!==e.entries)for(var i,s=o.call(e);!(i=s.next()).done;)d.isValidElement(i.value)&&a(i.value,t)}}function l(e){var n=e.type;if("function"==typeof n){var r=n.displayName||n.name;n.propTypes&&p(n.propTypes,e.props,"prop",r,e,null),"function"==typeof n.getDefaultProps&&"production"!==t.env.NODE_ENV&&m(n.getDefaultProps.isReactClassApproved,"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}var u=n(7),c=n(10),d=n(4),p=n(32),f=n(8),h=n(18),m=n(3),g=n(11),y={},v={createElement:function(e,n,i){var a="string"==typeof e||"function"==typeof e;if(!a&&"function"!=typeof e&&"string"!=typeof e){var u="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(u+=" You likely forgot to export your component from the file it's defined in.");var p=o(n);u+=p||r(),u+=c.getCurrentStackAddendum();var f=null!=n&&void 0!==n.__source?n.__source:null;c.pushNonStandardWarningStack(!0,f),"production"!==t.env.NODE_ENV&&m(!1,"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",null==e?e:typeof e,u),c.popNonStandardWarningStack()}var h=d.createElement.apply(this,arguments);if(null==h)return h;if(a)for(var g=2;g<arguments.length;g++)s(arguments[g],e);return l(h),h},createFactory:function(e){var n=v.createElement.bind(null,e);return n.type=e,"production"!==t.env.NODE_ENV&&f&&Object.defineProperty(n,"type",{enumerable:!1,get:function(){return g(!1,"Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),n},cloneElement:function(e,t,n){for(var r=d.cloneElement.apply(this,arguments),o=2;o<arguments.length;o++)s(arguments[o],r.type);return l(r),r}};e.exports=v}).call(t,n(1))},function(e,t,n){(function(t){"use strict";function r(e,n){if("production"!==t.env.NODE_ENV){var r=e.constructor;"production"!==t.env.NODE_ENV&&o(!1,"%s(...): Can only update a mounted or mounting component. This usually means you called %s() on an unmounted component. This is a no-op. Please check the code for the %s component.",n,n,r&&(r.displayName||r.name)||"ReactClass")}}var o=n(3),i={isMounted:function(e){return!1},enqueueCallback:function(e,t){},enqueueForceUpdate:function(e){r(e,"forceUpdate")},enqueueReplaceState:function(e,t){r(e,"replaceState")},enqueueSetState:function(e,t){r(e,"setState")}};e.exports=i}).call(t,n(1))},function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.iterator,r="@@iterator";e.exports=function(e){var t=e&&(n&&e[n]||e[r]);if("function"==typeof t)return t}},function(e,t,n){(function(t){"use strict";var r=n(6),o=n(12),i=n(2);if("production"!==t.env.NODE_ENV)var a=n(3);var s,l="mixins";s="production"!==t.env.NODE_ENV?{prop:"prop",context:"context",childContext:"child context"}:{},e.exports=function(e,n,u){function c(e,n,r){for(var o in n)n.hasOwnProperty(o)&&"production"!==t.env.NODE_ENV&&a("function"==typeof n[o],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",e.displayName||"ReactClass",s[r],o)}function d(e,t){var n=v.hasOwnProperty(t)?v[t]:null;w.hasOwnProperty(t)&&i("OVERRIDE_BASE"===n,"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.",t),e&&i("DEFINE_MANY"===n||"DEFINE_MANY_MERGED"===n,"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",t)}function p(e,r){if(r){i("function"!=typeof r,"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object."),i(!n(r),"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.");var o=e.prototype,s=o.__reactAutoBindPairs;for(var u in r.hasOwnProperty(l)&&b.mixins(e,r.mixins),r)if(r.hasOwnProperty(u)&&u!==l){var c=r[u],p=o.hasOwnProperty(u);if(d(p,u),b.hasOwnProperty(u))b[u](e,c);else{var f=v.hasOwnProperty(u);if("function"!=typeof c||f||p||!1===r.autobind)if(p){var g=v[u];i(f&&("DEFINE_MANY_MERGED"===g||"DEFINE_MANY"===g),"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.",g,u),"DEFINE_MANY_MERGED"===g?o[u]=h(o[u],c):"DEFINE_MANY"===g&&(o[u]=m(o[u],c))}else o[u]=c,"production"!==t.env.NODE_ENV&&"function"==typeof c&&r.displayName&&(o[u].displayName=r.displayName+"_"+u);else s.push(u,c),o[u]=c}}}else if("production"!==t.env.NODE_ENV){var y=typeof r,A="object"===y&&null!==r;"production"!==t.env.NODE_ENV&&a(A,"%s: You're attempting to include a mixin that is either null or not an object. Check the mixins included by the component, as well as any mixins they include themselves. Expected object but got %s.",e.displayName||"ReactClass",null===r?null:y)}}function f(e,t){for(var n in i(e&&t&&"object"==typeof e&&"object"==typeof t,"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects."),t)t.hasOwnProperty(n)&&(i(void 0===e[n],"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.",n),e[n]=t[n]);return e}function h(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return f(o,n),f(o,r),o}}function m(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function g(e,n){var r=n.bind(e);if("production"!==t.env.NODE_ENV){r.__reactBoundContext=e,r.__reactBoundMethod=n,r.__reactBoundArguments=null;var o=e.constructor.displayName,i=r.bind;r.bind=function(s){for(var l=arguments.length,u=Array(l>1?l-1:0),c=1;c<l;c++)u[c-1]=arguments[c];if(s!==e&&null!==s)"production"!==t.env.NODE_ENV&&a(!1,"bind(): React component methods may only be bound to the component instance. See %s",o);else if(!u.length)return"production"!==t.env.NODE_ENV&&a(!1,"bind(): You are binding a component method to the component. React does this for you automatically in a high-performance way, so you can safely remove this call. See %s",o),r;var d=i.apply(r,arguments);return d.__reactBoundContext=e,d.__reactBoundMethod=n,d.__reactBoundArguments=u,d}}return r}var y=[],v={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},b={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)p(e,t[n])},childContextTypes:function(e,n){"production"!==t.env.NODE_ENV&&c(e,n,"childContext"),e.childContextTypes=r({},e.childContextTypes,n)},contextTypes:function(e,n){"production"!==t.env.NODE_ENV&&c(e,n,"context"),e.contextTypes=r({},e.contextTypes,n)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=h(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,n){"production"!==t.env.NODE_ENV&&c(e,n,"prop"),e.propTypes=r({},e.propTypes,n)},statics:function(e,t){!function(e,t){if(t)for(var n in t){var r=t[n];t.hasOwnProperty(n)&&(i(!(n in b),'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.',n),i(!(n in e),"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.",n),e[n]=r)}}(e,t)},autobind:function(){}},A={componentDidMount:function(){this.__isMounted=!0}},C={componentWillUnmount:function(){this.__isMounted=!1}},w={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e,t)},isMounted:function(){return"production"!==t.env.NODE_ENV&&(a(this.__didWarnIsMounted,"%s: isMounted is deprecated. Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",this.constructor&&this.constructor.displayName||this.name||"Component"),this.__didWarnIsMounted=!0),!!this.__isMounted}},x=function(){};return r(x.prototype,e.prototype,w),function(e){var n=function(e,r,s){"production"!==t.env.NODE_ENV&&a(this instanceof n,"Something is calling a React component directly. Use a factory or JSX instead. See: https://fb.me/react-legacyfactory"),this.__reactAutoBindPairs.length&&function(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var r=t[n],o=t[n+1];e[r]=g(e,o)}}(this),this.props=e,this.context=r,this.refs=o,this.updater=s||u,this.state=null;var l=this.getInitialState?this.getInitialState():null;"production"!==t.env.NODE_ENV&&void 0===l&&this.getInitialState._isMockFunction&&(l=null),i("object"==typeof l&&!Array.isArray(l),"%s.getInitialState(): must return an object or null",n.displayName||"ReactCompositeComponent"),this.state=l};for(var r in n.prototype=new x,n.prototype.constructor=n,n.prototype.__reactAutoBindPairs=[],y.forEach(p.bind(null,n)),p(n,A),p(n,e),p(n,C),n.getDefaultProps&&(n.defaultProps=n.getDefaultProps()),"production"!==t.env.NODE_ENV&&(n.getDefaultProps&&(n.getDefaultProps.isReactClassApproved={}),n.prototype.getInitialState&&(n.prototype.getInitialState.isReactClassApproved={})),i(n.prototype.render,"createClass(...): Class specification must implement a `render` method."),"production"!==t.env.NODE_ENV&&(a(!n.prototype.componentShouldUpdate,"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",e.displayName||"A component"),a(!n.prototype.componentWillRecieveProps,"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",e.displayName||"A component")),v)n.prototype[r]||(n.prototype[r]=null);return n}}}).call(t,n(1))},function(e,t,n){(function(t){"use strict";if("production"!==t.env.NODE_ENV)var r=n(2),o=n(3),i=n(13),a={};e.exports=function(e,n,s,l,u){if("production"!==t.env.NODE_ENV)for(var c in e)if(e.hasOwnProperty(c)){var d;try{r("function"==typeof e[c],"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",l||"React class",s,c),d=e[c](n,c,l,s,null,i)}catch(e){d=e}if(o(!d||d instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",l||"React class",s,c,typeof d),d instanceof Error&&!(d.message in a)){a[d.message]=!0;var p=u?u():"";o(!1,"Failed %s type: %s%s",s,d.message,null!=p?p:"")}}}}).call(t,n(1))},function(e,t,n){"use strict";var r=n(22);e.exports=function(e){return r(e,!1)}},function(e,t,n){(function(t){"use strict";var r=n(9),o=n(2),i=n(3),a=n(13),s=n(20);e.exports=function(e,n){function l(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function u(e){this.message=e,this.stack=""}function c(e){function r(r,c,d,p,f,h,m){if(p=p||v,h=h||d,m!==a)if(n)o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");else if("production"!==t.env.NODE_ENV&&"undefined"!=typeof console){var g=p+":"+d;!s[g]&&l<3&&(i(!1,"You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",h,p),s[g]=!0,l++)}return null==c[d]?r?new u(null===c[d]?"The "+f+" `"+h+"` is marked as required in `"+p+"`, but its value is `null`.":"The "+f+" `"+h+"` is marked as required in `"+p+"`, but its value is `undefined`."):null:e(c,d,p,f,h)}if("production"!==t.env.NODE_ENV)var s={},l=0;var c=r.bind(null,!1);return c.isRequired=r.bind(null,!0),c}function d(e){return c((function(t,n,r,o,i,a){var s=t[n];return f(s)!==e?new u("Invalid "+o+" `"+i+"` of type `"+h(s)+"` supplied to `"+r+"`, expected `"+e+"`."):null}))}function p(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(p);if(null===t||e(t))return!0;var n=function(e){var t=e&&(g&&e[g]||e[y]);if("function"==typeof t)return t}(t);if(!n)return!1;var r,o=n.call(t);if(n!==t.entries){for(;!(r=o.next()).done;)if(!p(r.value))return!1}else for(;!(r=o.next()).done;){var i=r.value;if(i&&!p(i[1]))return!1}return!0;default:return!1}}function f(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||"Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol}(t,e)?"symbol":t}function h(e){if(null==e)return""+e;var t=f(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function m(e){var t=h(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}var g="function"==typeof Symbol&&Symbol.iterator,y="@@iterator",v="<<anonymous>>",b={array:d("array"),bool:d("boolean"),func:d("function"),number:d("number"),object:d("object"),string:d("string"),symbol:d("symbol"),any:c(r.thatReturnsNull),arrayOf:function(e){return c((function(t,n,r,o,i){if("function"!=typeof e)return new u("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var s=t[n];if(!Array.isArray(s))return new u("Invalid "+o+" `"+i+"` of type `"+f(s)+"` supplied to `"+r+"`, expected an array.");for(var l=0;l<s.length;l++){var c=e(s,l,r,o,i+"["+l+"]",a);if(c instanceof Error)return c}return null}))},element:c((function(t,n,r,o,i){var a=t[n];return e(a)?null:new u("Invalid "+o+" `"+i+"` of type `"+f(a)+"` supplied to `"+r+"`, expected a single ReactElement.")})),instanceOf:function(e){return c((function(t,n,r,o,i){if(!(t[n]instanceof e)){var a=e.name||v;return new u("Invalid "+o+" `"+i+"` of type `"+function(e){return e.constructor&&e.constructor.name?e.constructor.name:v}(t[n])+"` supplied to `"+r+"`, expected instance of `"+a+"`.")}return null}))},node:c((function(e,t,n,r,o){return p(e[t])?null:new u("Invalid "+r+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.")})),objectOf:function(e){return c((function(t,n,r,o,i){if("function"!=typeof e)return new u("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var s=t[n],l=f(s);if("object"!==l)return new u("Invalid "+o+" `"+i+"` of type `"+l+"` supplied to `"+r+"`, expected an object.");for(var c in s)if(s.hasOwnProperty(c)){var d=e(s,c,r,o,i+"."+c,a);if(d instanceof Error)return d}return null}))},oneOf:function(e){return Array.isArray(e)?c((function(t,n,r,o,i){for(var a=t[n],s=0;s<e.length;s++)if(l(a,e[s]))return null;return new u("Invalid "+o+" `"+i+"` of value `"+a+"` supplied to `"+r+"`, expected one of "+JSON.stringify(e)+".")})):("production"!==t.env.NODE_ENV&&i(!1,"Invalid argument supplied to oneOf, expected an instance of array."),r.thatReturnsNull)},oneOfType:function(e){if(!Array.isArray(e))return"production"!==t.env.NODE_ENV&&i(!1,"Invalid argument supplied to oneOfType, expected an instance of array."),r.thatReturnsNull;for(var n=0;n<e.length;n++){var o=e[n];if("function"!=typeof o)return i(!1,"Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",m(o),n),r.thatReturnsNull}return c((function(t,n,r,o,i){for(var s=0;s<e.length;s++)if(null==(0,e[s])(t,n,r,o,i,a))return null;return new u("Invalid "+o+" `"+i+"` supplied to `"+r+"`.")}))},shape:function(e){return c((function(t,n,r,o,i){var s=t[n],l=f(s);if("object"!==l)return new u("Invalid "+o+" `"+i+"` of type `"+l+"` supplied to `"+r+"`, expected `object`.");for(var c in e){var d=e[c];if(d){var p=d(s,c,r,o,i+"."+c,a);if(p)return p}}return null}))}};return u.prototype=Error.prototype,b.checkPropTypes=s,b.PropTypes=b,b}}).call(t,n(1))},function(e,t){"use strict";var n={escape:function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))},unescape:function(e){var t={"=0":"=","=2":":"};return(""+("."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1))).replace(/(=0|=2)/g,(function(e){return t[e]}))}};e.exports=n},function(e,t,n){(function(t){"use strict";var r=n(5),o=n(2),i=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},a=function(e){var n=this;e instanceof n||("production"!==t.env.NODE_ENV?o(!1,"Trying to release an instance into a pool of a different type."):r("25")),e.destructor(),n.instancePool.length<n.poolSize&&n.instancePool.push(e)},s=i,l={addPoolingTo:function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||s,n.poolSize||(n.poolSize=10),n.release=a,n},oneArgumentPooler:i,twoArgumentPooler:function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},threeArgumentPooler:function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},fourArgumentPooler:function(e,t,n,r){var o=this;if(o.instancePool.length){var i=o.instancePool.pop();return o.call(i,e,t,n,r),i}return new o(e,t,n,r)}};e.exports=l}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var r=n(6),o=n(14),i=n(26),a=n(27),s=n(4),l=n(29),u=n(31),c=n(33),d=n(34),p=s.createElement,f=s.createFactory,h=s.cloneElement;if("production"!==t.env.NODE_ENV){var m=n(11),g=n(8),y=n(16),v=!1;p=y.createElement,f=y.createFactory,h=y.cloneElement}var b=r,A=function(e){return e};if("production"!==t.env.NODE_ENV){var C=!1,w=!1;b=function(){return m(C,"React.__spread is deprecated and should not be used. Use Object.assign directly or another helper function with similar semantics. You may be seeing this warning due to your compiler. See https://fb.me/react-spread-deprecation for more details."),C=!0,r.apply(null,arguments)},A=function(e){return m(w,"React.createMixin is deprecated and should not be used. In React v16.0, it will be removed. You can use this mixin directly instead. See https://fb.me/createmixin-was-never-implemented for more info."),w=!0,e}}var x={Children:{map:i.map,forEach:i.forEach,count:i.count,toArray:i.toArray,only:d},Component:o.Component,PureComponent:o.PureComponent,createElement:p,cloneElement:h,isValidElement:s.isValidElement,PropTypes:l,createClass:c,createFactory:f,createMixin:A,DOM:a,version:u,__spread:b};if("production"!==t.env.NODE_ENV){var E=!1;g&&(Object.defineProperty(x,"PropTypes",{get:function(){return m(v,"Accessing PropTypes via the main React package is deprecated, and will be removed in  React v16.0. Use the latest available v15.* prop-types package from npm instead. For info on usage, compatibility, migration and more, see https://fb.me/prop-types-docs"),v=!0,l}}),Object.defineProperty(x,"createClass",{get:function(){return m(E,"Accessing createClass via the main React package is deprecated, and will be removed in React v16.0. Use a plain JavaScript class instead. If you're not yet ready to migrate, create-react-class v15.* is available on npm as a temporary, drop-in replacement. For more info see https://fb.me/react-create-class"),E=!0,c}})),x.DOM={};var k=!1;Object.keys(a).forEach((function(e){x.DOM[e]=function(){return k||(m(!1,"Accessing factories like React.DOM.%s has been deprecated and will be removed in v16.0+. Use the react-dom-factories package instead.  Version 1.0 provides a drop-in replacement. For more info, see https://fb.me/react-dom-factories",e),k=!0),a[e].apply(a,arguments)}}))}e.exports=x}).call(t,n(1))},function(e,t,n){"use strict";function r(e){return(""+e).replace(g,"$&/")}function o(e,t){this.func=e,this.context=t,this.count=0}function i(e,t,n){var r=e.func,o=e.context;r.call(o,t,e.count++)}function a(e,t,n,r){this.result=e,this.keyPrefix=t,this.func=n,this.context=r,this.count=0}function s(e,t,n){var o=e.result,i=e.keyPrefix,a=e.func,s=e.context,u=a.call(s,t,e.count++);Array.isArray(u)?l(u,o,n,p.thatReturnsArgument):null!=u&&(d.isValidElement(u)&&(u=d.cloneAndReplaceKey(u,i+(!u.key||t&&t.key===u.key?"":r(u.key)+"/")+n)),o.push(u))}function l(e,t,n,o,i){var l="";null!=n&&(l=r(n)+"/");var u=a.getPooled(t,l,o,i);f(e,s,u),a.release(u)}function u(e,t,n){return null}var c=n(24),d=n(4),p=n(9),f=n(35),h=c.twoArgumentPooler,m=c.fourArgumentPooler,g=/\/+/g;o.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},c.addPoolingTo(o,h),a.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},c.addPoolingTo(a,m);var y={forEach:function(e,t,n){if(null==e)return e;var r=o.getPooled(t,n);f(e,i,r),o.release(r)},map:function(e,t,n){if(null==e)return e;var r=[];return l(e,r,null,t,n),r},mapIntoWithKeyPrefixInternal:l,count:function(e,t){return f(e,u,null)},toArray:function(e){var t=[];return l(e,t,null,p.thatReturnsArgument),t}};e.exports=y},function(e,t,n){(function(t){"use strict";var r=n(4).createFactory;"production"!==t.env.NODE_ENV&&(r=n(16).createFactory);var o={a:r("a"),abbr:r("abbr"),address:r("address"),area:r("area"),article:r("article"),aside:r("aside"),audio:r("audio"),b:r("b"),base:r("base"),bdi:r("bdi"),bdo:r("bdo"),big:r("big"),blockquote:r("blockquote"),body:r("body"),br:r("br"),button:r("button"),canvas:r("canvas"),caption:r("caption"),cite:r("cite"),code:r("code"),col:r("col"),colgroup:r("colgroup"),data:r("data"),datalist:r("datalist"),dd:r("dd"),del:r("del"),details:r("details"),dfn:r("dfn"),dialog:r("dialog"),div:r("div"),dl:r("dl"),dt:r("dt"),em:r("em"),embed:r("embed"),fieldset:r("fieldset"),figcaption:r("figcaption"),figure:r("figure"),footer:r("footer"),form:r("form"),h1:r("h1"),h2:r("h2"),h3:r("h3"),h4:r("h4"),h5:r("h5"),h6:r("h6"),head:r("head"),header:r("header"),hgroup:r("hgroup"),hr:r("hr"),html:r("html"),i:r("i"),iframe:r("iframe"),img:r("img"),input:r("input"),ins:r("ins"),kbd:r("kbd"),keygen:r("keygen"),label:r("label"),legend:r("legend"),li:r("li"),link:r("link"),main:r("main"),map:r("map"),mark:r("mark"),menu:r("menu"),menuitem:r("menuitem"),meta:r("meta"),meter:r("meter"),nav:r("nav"),noscript:r("noscript"),object:r("object"),ol:r("ol"),optgroup:r("optgroup"),option:r("option"),output:r("output"),p:r("p"),param:r("param"),picture:r("picture"),pre:r("pre"),progress:r("progress"),q:r("q"),rp:r("rp"),rt:r("rt"),ruby:r("ruby"),s:r("s"),samp:r("samp"),script:r("script"),section:r("section"),select:r("select"),small:r("small"),source:r("source"),span:r("span"),strong:r("strong"),style:r("style"),sub:r("sub"),summary:r("summary"),sup:r("sup"),table:r("table"),tbody:r("tbody"),td:r("td"),textarea:r("textarea"),tfoot:r("tfoot"),th:r("th"),thead:r("thead"),time:r("time"),title:r("title"),tr:r("tr"),track:r("track"),u:r("u"),ul:r("ul"),var:r("var"),video:r("video"),wbr:r("wbr"),circle:r("circle"),clipPath:r("clipPath"),defs:r("defs"),ellipse:r("ellipse"),g:r("g"),image:r("image"),line:r("line"),linearGradient:r("linearGradient"),mask:r("mask"),path:r("path"),pattern:r("pattern"),polygon:r("polygon"),polyline:r("polyline"),radialGradient:r("radialGradient"),rect:r("rect"),stop:r("stop"),svg:r("svg"),text:r("text"),tspan:r("tspan")};e.exports=o}).call(t,n(1))},function(e,t,n){(function(t){"use strict";var n={};"production"!==t.env.NODE_ENV&&(n={prop:"prop",context:"context",childContext:"child context"}),e.exports=n}).call(t,n(1))},function(e,t,n){"use strict";var r=n(4).isValidElement,o=n(21);e.exports=o(r)},function(e,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){"use strict";e.exports="15.6.1"},function(e,t,n){(function(t){"use strict";var r,o=n(5),i=n(28),a=n(30),s=n(2),l=n(3);void 0!==t&&t.env&&"test"===t.env.NODE_ENV&&(r=n(10));var u={};e.exports=function(e,c,d,p,f,h){for(var m in e)if(e.hasOwnProperty(m)){var g;try{"function"!=typeof e[m]&&("production"!==t.env.NODE_ENV?s(!1,"%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.",p||"React class",i[d],m):o("84",p||"React class",i[d],m)),g=e[m](c,m,p,d,null,a)}catch(e){g=e}if("production"!==t.env.NODE_ENV&&l(!g||g instanceof Error,"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",p||"React class",i[d],m,typeof g),g instanceof Error&&!(g.message in u)){u[g.message]=!0;var y="";"production"!==t.env.NODE_ENV&&(r||(r=n(10)),null!==h?y=r.getStackAddendumByID(h):null!==f&&(y=r.getCurrentStackAddendum(f))),"production"!==t.env.NODE_ENV&&l(!1,"Failed %s type: %s%s",d,g.message,y)}}}}).call(t,n(1))},function(e,t,n){"use strict";var r=n(14).Component,o=n(4).isValidElement,i=n(17),a=n(19);e.exports=a(r,o,i)},function(e,t,n){(function(t){"use strict";var r=n(5),o=n(4),i=n(2);e.exports=function(e){return o.isValidElement(e)||("production"!==t.env.NODE_ENV?i(!1,"React.Children.only expected to receive a single React element child."):r("143")),e}}).call(t,n(1))},function(e,t,n){(function(t){"use strict";function r(e,t){return e&&"object"==typeof e&&null!=e.key?c.escape(e.key):t.toString(36)}function o(e,n,m,g){var y=typeof e;if("undefined"!==y&&"boolean"!==y||(e=null),null===e||"string"===y||"number"===y||"object"===y&&e.$$typeof===s)return m(g,e,""===n?p+r(e,0):n),1;var v,b=0,A=""===n?p:n+f;if(Array.isArray(e))for(var C=0;C<e.length;C++)b+=o(v=e[C],A+r(v,C),m,g);else{var w=l(e);if(w){var x,E=w.call(e);if(w!==e.entries)for(var k=0;!(x=E.next()).done;)b+=o(v=x.value,A+r(v,k++),m,g);else{if("production"!==t.env.NODE_ENV){var S="";if(a.current){var B=a.current.getName();B&&(S=" Check the render method of `"+B+"`.")}"production"!==t.env.NODE_ENV&&d(h,"Using Maps as children is not yet fully supported. It is an experimental feature that might be removed. Convert it to a sequence / iterable of keyed ReactElements instead.%s",S),h=!0}for(;!(x=E.next()).done;){var O=x.value;O&&(b+=o(v=O[1],A+c.escape(O[0])+f+r(v,0),m,g))}}}else if("object"===y){var T="";if("production"!==t.env.NODE_ENV&&(T=" If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.",e._isReactElement&&(T=" It looks like you're using an element created by a different version of React. Make sure to use only one copy of React."),a.current)){var D=a.current.getName();D&&(T+=" Check the render method of `"+D+"`.")}var N=String(e);"production"!==t.env.NODE_ENV?u(!1,"Objects are not valid as a React child (found: %s).%s","[object Object]"===N?"object with keys {"+Object.keys(e).join(", ")+"}":N,T):i("31","[object Object]"===N?"object with keys {"+Object.keys(e).join(", ")+"}":N,T)}}return b}var i=n(5),a=n(7),s=n(15),l=n(18),u=n(2),c=n(23),d=n(3),p=".",f=":",h=!1;e.exports=function(e,t,n){return null==e?0:o(e,"",t,n)}}).call(t,n(1))},function(e,t,n){"use strict";e.exports=n(25)}])},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,A=n?Symbol.for("react.scope"):60119;function C(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case i:case s:case a:case f:return e;default:switch(e=e&&e.$$typeof){case u:case p:case g:case m:case l:return e;default:return t}}case o:return t}}}function w(e){return C(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=l,t.Element=r,t.ForwardRef=p,t.Fragment=i,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=s,t.StrictMode=a,t.Suspense=f,t.isAsyncMode=function(e){return w(e)||C(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return C(e)===u},t.isContextProvider=function(e){return C(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return C(e)===p},t.isFragment=function(e){return C(e)===i},t.isLazy=function(e){return C(e)===g},t.isMemo=function(e){return C(e)===m},t.isPortal=function(e){return C(e)===o},t.isProfiler=function(e){return C(e)===s},t.isStrictMode=function(e){return C(e)===a},t.isSuspense=function(e){return C(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===s||e===a||e===f||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===u||e.$$typeof===p||e.$$typeof===v||e.$$typeof===b||e.$$typeof===A||e.$$typeof===y)},t.typeOf=C},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},8359:(e,t)=>{"use strict";if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},2973:(e,t,n)=>{"use strict";n(8359)},9658:(e,t,n)=>{var r=n(5826);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],i=0;i<t.length;i++)o.push(e(t[i],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",d(r)),n)}(t,n,o):function(e,t,n){return p(i(e,n),t,n)}(t,n,o)},e.exports.parse=i,e.exports.compile=function(e,t){return s(i(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,s="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var d=n[0],p=n[1],f=n.index;if(s+=e.slice(a,f),a=f+d.length,p)s+=p[1];else{var h=e[a],m=n[2],g=n[3],y=n[4],v=n[5],b=n[6],A=n[7];s&&(r.push(s),s="");var C=null!=m&&null!=h&&h!==m,w="+"===b||"*"===b,x="?"===b||"*"===b,E=n[2]||c,k=y||v;r.push({name:g||i++,prefix:m||"",delimiter:E,optional:x,repeat:w,partial:C,asterisk:!!A,pattern:k?u(k):A?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",d(t)));return function(t,o){for(var i="",s=t||{},l=(o||{}).pretty?a:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var d,p=s[c.name];if(null==p){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var f=0;f<p.length;f++){if(d=l(p[f]),!n[u].test(d))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(d)+"`");i+=(0===f?c.prefix:c.delimiter)+d}}else{if(d=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(p),!n[u].test(d))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+d+'"');i+=c.prefix+d}}else i+=c}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function d(e){return e&&e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)a+=l(u);else{var p=l(u.prefix),f="(?:"+u.pattern+")";t.push(u),u.repeat&&(f+="(?:"+p+f+")*"),a+=f=u.optional?u.partial?p+"("+f+")?":"(?:"+p+"("+f+"))?":p+"("+f+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,d(n)),t)}},5251:(e,t,n)=>{"use strict";n(7418);var r=n(7294),o=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),t.Fragment=i("react.fragment")}var a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s=Object.prototype.hasOwnProperty,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,i={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)s.call(t,r)&&!l.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:c,props:i,_owner:a.current}}t.jsx=u,t.jsxs=u},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),i=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var b=v.prototype=new y;b.constructor=v,r(b,g.prototype),b.isPureReactComponent=!0;var A={current:null},C=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,n){var r,i={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&!w.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:s,props:i,_owner:A.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var k=/\/+/g;function S(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function B(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+S(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(k,"$&/")+"/"),B(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(k,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+S(s=e[u],u);l+=B(s,t,n,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=B(s=s.value,t,n,c=r+S(s,u++),a);else if("object"===s)throw t=""+e,Error(f(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function O(e,t,n){if(null==e)return e;var r=[],o=0;return B(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var D={current:null};function N(){var e=D.current;if(null===e)throw Error(f(321));return e}var P={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:A,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(f(143));return e}},t.Component=g,t.PureComponent=v,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,n){if(null==e)throw Error(f(267,e));var i=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=A.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)C.call(t,c)&&!w.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];i.children=u}return{$$typeof:o,type:e.type,key:a,ref:s,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},5666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),a=new O(r||[]);return i._invoke=function(e,t,n){var r=d;return function(o,i){if(r===f)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return D()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=k(a,n);if(s){if(s===m)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var l=c(e,t,n);if("normal"===l.type){if(r=n.done?h:p,l.arg===m)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=h,n.method="throw",n.arg=l.arg)}}}(e,n,a),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",p="suspendedYield",f="executing",h="completed",m={};function g(){}function y(){}function v(){}var b={};l(b,i,(function(){return this}));var A=Object.getPrototypeOf,C=A&&A(A(T([])));C&&C!==n&&r.call(C,i)&&(b=C);var w=v.prototype=g.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,i,a,s){var l=c(e[o],e,i);if("throw"!==l.type){var u=l.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(d).then((function(e){u.value=e,a(u)}),(function(e){return n("throw",e,a,s)}))}s(l.arg)}var o;this._invoke=function(e,r){function i(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(i,i):i()}}function k(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,k(e,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,m;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function B(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function T(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:D}}function D(){return{value:t,done:!0}}return y.prototype=v,l(w,"constructor",v),l(v,"constructor",y),y.displayName=l(v,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,l(e,s,"GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},x(E.prototype),l(E.prototype,a,(function(){return this})),e.AsyncIterator=E,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new E(u(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},x(w),l(w,s,"Generator"),l(w,i,(function(){return this})),l(w,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=T,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(B),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var l=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),B(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;B(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:T(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,g=null,y=-1,v=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):v=0<e?Math.floor(1e3/e):5};var A=new MessageChannel,C=A.port2;A.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+v;try{g(!0,e)?C.postMessage(null):(m=!1,g=null)}catch(e){throw C.postMessage(null),e}}else m=!1},n=function(e){g=e,m||(m=!0,C.postMessage(null))},r=function(e,n){y=p((function(){e(t.unstable_now())}),n)},o=function(){f(y),y=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<k(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],s=i+1,l=e[s];if(void 0!==a&&0>k(a,n))void 0!==l&&0>k(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>k(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var S=[],B=[],O=1,T=null,D=3,N=!1,P=!1,I=!1;function R(e){for(var t=x(B);null!==t;){if(null===t.callback)E(B);else{if(!(t.startTime<=e))break;E(B),t.sortIndex=t.expirationTime,w(S,t)}t=x(B)}}function _(e){if(I=!1,R(e),!P)if(null!==x(S))P=!0,n(M);else{var t=x(B);null!==t&&r(_,t.startTime-e)}}function M(e,n){P=!1,I&&(I=!1,o()),N=!0;var i=D;try{for(R(n),T=x(S);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=T.callback;if("function"==typeof a){T.callback=null,D=T.priorityLevel;var s=a(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?T.callback=s:T===x(S)&&E(S),R(n)}else E(S);T=x(S)}if(null!==T)var l=!0;else{var u=x(B);null!==u&&r(_,u.startTime-n),l=!1}return l}finally{T=null,D=i,N=!1}}var Z=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){P||N||(P=!0,n(M))},t.unstable_getCurrentPriorityLevel=function(){return D},t.unstable_getFirstCallbackNode=function(){return x(S)},t.unstable_next=function(e){switch(D){case 1:case 2:case 3:var t=3;break;default:t=D}var n=D;D=t;try{return e()}finally{D=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=Z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=D;D=e;try{return t()}finally{D=n}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:O++,callback:i,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,w(B,e),null===x(S)&&e===x(B)&&(I?o():I=!0,r(_,a-s))):(e.sortIndex=l,w(S,e),P||N||(P=!0,n(M))),e},t.unstable_wrapCallback=function(e){var t=D;return function(){var n=D;D=t;try{return e.apply(this,arguments)}finally{D=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=i[u]||0,d="".concat(u," ").concat(c);i[u]=c+1;var p=n(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var h=o(f,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=r(e,o),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},2281:e=>{"use strict";var t,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},o=0,i=0;function a(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function s(){var e=a(+new Date);return e!==t?(o=0,t=e):e+"."+a(o++)}for(;i<64;i++)r[n[i]]=i;s.encode=a,s.decode=function(e){var t=0;for(i=0;i<e.length;i++)t=64*t+r[e.charAt(i)];return t},e.exports=s},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{"use strict";n.d(r,{h:()=>km});var e={};n.r(e),n.d(e,{Decoder:()=>gh,Encoder:()=>mh,PacketType:()=>hh,protocol:()=>fh});var t=n(7294),o=n(3935),i=n(3379),a=n.n(i),s=n(7795),l=n.n(s),u=n(569),c=n.n(u),d=n(3565),p=n.n(d),f=n(9216),h=n.n(f),m=n(4589),g=n.n(m),y=n(6108),v={};v.styleTagTransform=g(),v.setAttributes=p(),v.insert=c().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=h(),a()(y.Z,v),y.Z&&y.Z.locals&&y.Z.locals;var b=n(9669),A=n.n(b);function C(e,t){return C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},C(e,t)}function w(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,C(e,t)}n(5666);var x=n(5697),E=n.n(x),k=n(7462);function S(e){return"/"===e.charAt(0)}function B(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}function O(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}const T=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=O(t),o=O(n);return r!==t||o!==n?e(r,o):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};const D=function(e,t){if(!e)throw new Error("Invariant failed")};function N(e){return"/"===e.charAt(0)?e:"/"+e}function P(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function I(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function R(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function _(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e),o.state=t):(void 0===(o=(0,k.Z)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&S(e),a=t&&S(t),s=i||a;if(e&&S(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var l=o[o.length-1];n="."===l||".."===l||""===l}else n=!1;for(var u=0,c=o.length;c>=0;c--){var d=o[c];"."===d?B(o,c):".."===d?(B(o,c),u++):u&&(B(o,c),u--)}if(!s)for(;u--;u)o.unshift("..");!s||""===o[0]||o[0]&&S(o[0])||o.unshift("");var p=o.join("/");return n&&"/"!==p.substr(-1)&&(p+="/"),p}(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function M(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var Z=!("undefined"==typeof window||!window.document||!window.document.createElement);function j(e,t){t(window.confirm(e))}var z="popstate",L="hashchange";function F(){try{return window.history.state||{}}catch(e){return{}}}function U(e){void 0===e&&(e={}),Z||D(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,s=void 0!==a&&a,l=i.getUserConfirmation,u=void 0===l?j:l,c=i.keyLength,d=void 0===c?6:c,p=e.basename?I(N(e.basename)):"";function f(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return p&&(i=P(i,p)),_(i,r,n)}function h(){return Math.random().toString(36).substr(2,d)}var m=M();function g(e){(0,k.Z)(T,e),T.length=n.length,m.notifyListeners(T.location,T.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||A(f(e.state))}function v(){A(f(F()))}var b=!1;function A(e){b?(b=!1,g()):m.confirmTransitionTo(e,"POP",u,(function(t){t?g({action:"POP",location:e}):function(e){var t=T.location,n=w.indexOf(t.key);-1===n&&(n=0);var r=w.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,E(o))}(e)}))}var C=f(F()),w=[C.key];function x(e){return p+R(e)}function E(e){n.go(e)}var S=0;function B(e){1===(S+=e)&&1===e?(window.addEventListener(z,y),o&&window.addEventListener(L,v)):0===S&&(window.removeEventListener(z,y),o&&window.removeEventListener(L,v))}var O=!1,T={length:n.length,action:"POP",location:C,createHref:x,push:function(e,t){var o="PUSH",i=_(e,t,h(),T.location);m.confirmTransitionTo(i,o,u,(function(e){if(e){var t=x(i),a=i.key,l=i.state;if(r)if(n.pushState({key:a,state:l},null,t),s)window.location.href=t;else{var u=w.indexOf(T.location.key),c=w.slice(0,u+1);c.push(i.key),w=c,g({action:o,location:i})}else window.location.href=t}}))},replace:function(e,t){var o="REPLACE",i=_(e,t,h(),T.location);m.confirmTransitionTo(i,o,u,(function(e){if(e){var t=x(i),a=i.key,l=i.state;if(r)if(n.replaceState({key:a,state:l},null,t),s)window.location.replace(t);else{var u=w.indexOf(T.location.key);-1!==u&&(w[u]=i.key),g({action:o,location:i})}else window.location.replace(t)}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return O||(B(1),O=!0),function(){return O&&(O=!1,B(-1)),t()}},listen:function(e){var t=m.appendListener(e);return B(1),function(){B(-1),t()}}};return T}var Y=1073741823,$="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function W(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const V=t.createContext||function(e,n){var r,o,i,a="__create-react-context-"+(($[i="__global_unique_id__"]=($[i]||0)+1)+"__"),s=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=W(t.props.value),t}w(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?t=0:(t="function"==typeof n?n(r,o):Y,0!=(t|=0)&&this.emitter.set(e.value,t))}var i,a},r.render=function(){return this.props.children},t}(t.Component);s.childContextTypes=((r={})[a]=E().object.isRequired,r);var l=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}w(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?Y:t},r.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?Y:e},r.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},r.getValue=function(){return this.context[a]?this.context[a].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(t.Component);return l.contextTypes=((o={})[a]=E().object,o),{Provider:s,Consumer:l}};var q=n(9658),G=n.n(q),H=(n(9864),n(3366)),Q=(n(8679),function(e){var t=V();return t.displayName=e,t}),K=Q("Router-History"),X=Q("Router"),J=function(e){function n(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}w(n,e),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},r.render=function(){return t.createElement(X.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},t.createElement(K.Provider,{children:this.props.children||null,value:this.props.history}))},n}(t.Component);t.Component;var ee=function(e){function t(){return e.apply(this,arguments)||this}w(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(t.Component),te={},ne=0;function re(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(te[e])return te[e];var t=G().compile(e);return ne<1e4&&(te[e]=t,ne++),t}(e)(t,{pretty:!0})}function oe(e){var n=e.computedMatch,r=e.to,o=e.push,i=void 0!==o&&o;return t.createElement(X.Consumer,null,(function(e){e||D(!1);var o=e.history,a=e.staticContext,s=i?o.push:o.replace,l=_(n?"string"==typeof r?re(r,n.params):(0,k.Z)({},r,{pathname:re(r.pathname,n.params)}):r);return a?(s(l),null):t.createElement(ee,{onMount:function(){s(l)},onUpdate:function(e,t){var n,r,o=_(t.to);n=o,r=(0,k.Z)({},l,{key:o.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&T(n.state,r.state)||s(l)},to:r})}))}var ie={},ae=0;function se(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,s=void 0!==a&&a,l=n.sensitive,u=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ie[n]||(ie[n]={});if(r[e])return r[e];var o=[],i={regexp:G()(e,o,t),keys:o};return ae<1e4&&(r[e]=i,ae++),i}(n,{end:i,strict:s,sensitive:u}),o=r.regexp,a=r.keys,l=o.exec(e);if(!l)return null;var c=l[0],d=l.slice(1),p=e===c;return i&&!p?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:p,params:a.reduce((function(e,t,n){return e[t.name]=d[n],e}),{})}}),null)}var le=function(e){function n(){return e.apply(this,arguments)||this}return w(n,e),n.prototype.render=function(){var e=this;return t.createElement(X.Consumer,null,(function(n){n||D(!1);var r=e.props.location||n.location,o=e.props.computedMatch?e.props.computedMatch:e.props.path?se(r.pathname,e.props):n.match,i=(0,k.Z)({},n,{location:r,match:o}),a=e.props,s=a.children,l=a.component,u=a.render;return Array.isArray(s)&&function(e){return 0===t.Children.count(e)}(s)&&(s=null),t.createElement(X.Provider,{value:i},i.match?s?"function"==typeof s?s(i):s:l?t.createElement(l,i):u?u(i):null:"function"==typeof s?s(i):null)}))},n}(t.Component);t.Component;var ue=function(e){function n(){return e.apply(this,arguments)||this}return w(n,e),n.prototype.render=function(){var e=this;return t.createElement(X.Consumer,null,(function(n){n||D(!1);var r,o,i=e.props.location||n.location;return t.Children.forEach(e.props.children,(function(e){if(null==o&&t.isValidElement(e)){r=e;var a=e.props.path||e.props.from;o=a?se(i.pathname,(0,k.Z)({},e.props,{path:a})):n.match}})),o?t.cloneElement(r,{location:i,computedMatch:o}):null}))},n}(t.Component),ce=t.useContext;function de(){return ce(K)}var pe=function(e){function n(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=U(t.props),t}return w(n,e),n.prototype.render=function(){return t.createElement(J,{history:this.history,children:this.props.children})},n}(t.Component);t.Component;var fe=function(e,t){return"function"==typeof e?e(t):e},he=function(e,t){return"string"==typeof e?_(e,null,null,t):e},me=function(e){return e},ge=t.forwardRef;void 0===ge&&(ge=me);var ye=ge((function(e,n){var r=e.innerRef,o=e.navigate,i=e.onClick,a=(0,H.Z)(e,["innerRef","navigate","onClick"]),s=a.target,l=(0,k.Z)({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return l.ref=me!==ge&&n||r,t.createElement("a",l)})),ve=ge((function(e,n){var r=e.component,o=void 0===r?ye:r,i=e.replace,a=e.to,s=e.innerRef,l=(0,H.Z)(e,["component","replace","to","innerRef"]);return t.createElement(X.Consumer,null,(function(e){e||D(!1);var r=e.history,u=he(fe(a,e.location),e.location),c=u?r.createHref(u):"",d=(0,k.Z)({},l,{href:c,navigate:function(){var t=fe(a,e.location),n=R(e.location)===R(he(t));(i||n?r.replace:r.push)(t)}});return me!==ge?d.ref=n||s:d.innerRef=s,t.createElement(o,d)}))})),be=function(e){return e},Ae=t.forwardRef;void 0===Ae&&(Ae=be),Ae((function(e,n){var r=e["aria-current"],o=void 0===r?"page":r,i=e.activeClassName,a=void 0===i?"active":i,s=e.activeStyle,l=e.className,u=e.exact,c=e.isActive,d=e.location,p=e.sensitive,f=e.strict,h=e.style,m=e.to,g=e.innerRef,y=(0,H.Z)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return t.createElement(X.Consumer,null,(function(e){e||D(!1);var r=d||e.location,i=he(fe(m,r),r),v=i.pathname,b=v&&v.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),A=b?se(r.pathname,{path:b,exact:u,sensitive:p,strict:f}):null,C=!!(c?c(A,r):A),w="function"==typeof l?l(C):l,x="function"==typeof h?h(C):h;C&&(w=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(w,a),x=(0,k.Z)({},x,s));var E=(0,k.Z)({"aria-current":C&&o||null,className:w,style:x,to:i},y);return be!==Ae?E.ref=n||g:E.innerRef=g,t.createElement(ve,E)}))}));var Ce=t.createContext(null),we=function(e){e()},xe=function(){return we},Ee={notify:function(){},get:function(){return[]}};function ke(e,t){var n,r=Ee;function o(){a.onStateChange&&a.onStateChange()}function i(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){var e=xe(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}var a={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=Ee)},getListeners:function(){return r}};return a}var Se="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?t.useLayoutEffect:t.useEffect;const Be=function(e){var n=e.store,r=e.context,o=e.children,i=(0,t.useMemo)((function(){var e=ke(n);return e.onStateChange=e.notifyNestedSubs,{store:n,subscription:e}}),[n]),a=(0,t.useMemo)((function(){return n.getState()}),[n]);Se((function(){var e=i.subscription;return e.trySubscribe(),a!==n.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,a]);var s=r||Ce;return t.createElement(s.Provider,{value:i},o)};function Oe(){return(0,t.useContext)(Ce)}function Te(e){void 0===e&&(e=Ce);var n=e===Ce?Oe:function(){return(0,t.useContext)(e)};return function(){return n().store}}n(2973);var De=Te();function Ne(e){void 0===e&&(e=Ce);var t=e===Ce?De:Te(e);return function(){return t().dispatch}}var Pe=Ne(),Ie=function(e,t){return e===t};function Re(e){void 0===e&&(e=Ce);var n=e===Ce?Oe:function(){return(0,t.useContext)(e)};return function(e,r){void 0===r&&(r=Ie);var o=n(),i=function(e,n,r,o){var i,a=(0,t.useReducer)((function(e){return e+1}),0)[1],s=(0,t.useMemo)((function(){return ke(r,o)}),[r,o]),l=(0,t.useRef)(),u=(0,t.useRef)(),c=(0,t.useRef)(),d=(0,t.useRef)(),p=r.getState();try{if(e!==u.current||p!==c.current||l.current){var f=e(p);i=void 0!==d.current&&n(f,d.current)?d.current:f}else i=d.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return Se((function(){u.current=e,c.current=p,d.current=i,l.current=void 0})),Se((function(){function e(){try{var e=r.getState();if(e===c.current)return;var t=u.current(e);if(n(t,d.current))return;d.current=t,c.current=e}catch(e){l.current=e}a()}return s.onStateChange=e,s.trySubscribe(),e(),function(){return s.tryUnsubscribe()}}),[r,s]),i}(e,r,o.store,o.subscription);return(0,t.useDebugValue)(i),i}}var _e,Me=Re();_e=o.unstable_batchedUpdates,we=_e;var Ze="SIGN_IN",je="SIGN_OUT",ze="CREATE_ACCOUNT",Le="SET_USER",Fe="SHOW_CREATE_STUDY_GROUP_POPUP",Ue="SHOW_JOIN_STUDY_GROUP_POPUP",Ye="SHOW_EDIT_STUDY_GROUP_POPUP",$e="SHOW_CREATE_MEETING_STUDY_GROUP_POPUP",We="SHOW_CREATE_POST_STUDY_GROUP_POPUP",Ve="SHOW_VIEW_POST_STUDY_GROUP_POPUP",qe="SHOW_VIEW_MEETINGS_STUDY_GROUP_POPUP",Ge="SHOW_VIEW_MEMBER_POPUP",He="SHOW_INPUT_POPUP",Qe="SHOW_CONFIRMATION_POPUP",Ke="REPORT_POPUP",Xe="CLOSE_POPUP",Je="ADD_STUDY_GROUP",et="LOAD_STUDY_GROUPS",tt="POPULATE_SEARCH",nt="CLEAR_STUDY_GROUPS",rt="SHOW_ERROR_NOTIFICATION",ot="SHOW_SUCCESS_NOTIFICATION",it="HIDE_NOTIFICATION",at="START_LOADING",st="STOP_LOADING",lt=function(e){return{type:Ze,payload:e}},ut=function(){return{type:je}},ct=function(e){return{type:ze,payload:{unverifiedUser:e}}},dt=function(e){return{type:Le,payload:{user:e}}},pt=function(e){return{type:qe,payload:e}},ft=function(e){return{type:Ge,payload:e}},ht=function(e,t,n,r,o){return{type:He,payload:{title:e,label:t,defaultInput:n,callback:r,label2:o}}},mt=function(e,t,n){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"Yes",i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"No";return{type:Qe,payload:{callback:e,title:t,message:n,isConfirmation:r,firstButtonTitle:o,secondButtonTitle:i}}},gt=function(e,t){return{type:Ke,payload:{type:e,reportData:t}}},yt=function(){return{type:Xe}},vt=function(e){return{type:Je,payload:{group:e}}},bt=function(){return{type:nt}},At=function(e){return{type:rt,payload:{message:e}}},Ct=function(e){return{type:ot,payload:{message:e}}},wt=function(){return{type:at}},xt=function(){return{type:st}},Et=n(4336),kt={};kt.styleTagTransform=g(),kt.setAttributes=p(),kt.insert=c().bind(null,"head"),kt.domAPI=l(),kt.insertStyleElement=h(),a()(Et.Z,kt),Et.Z&&Et.Z.locals&&Et.Z.locals;var St=n(7965),Bt={};function Ot(){return Ot=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ot.apply(this,arguments)}Bt.styleTagTransform=g(),Bt.setAttributes=p(),Bt.insert=c().bind(null,"head"),Bt.domAPI=l(),Bt.insertStyleElement=h(),a()(St.Z,Bt),St.Z&&St.Z.locals&&St.Z.locals;const Tt=function(e){return t.createElement("form",Ot({className:"Form"},e),e.children)};var Dt=n(5057),Nt={};Nt.styleTagTransform=g(),Nt.setAttributes=p(),Nt.insert=c().bind(null,"head"),Nt.domAPI=l(),Nt.insertStyleElement=h(),a()(Dt.Z,Nt),Dt.Z&&Dt.Z.locals&&Dt.Z.locals;const Pt="Primary",It="Creation",Rt="Destructive";function _t(){return _t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_t.apply(this,arguments)}const Mt=function(e){var n;switch(e.type){case Pt:n="ButtonPrimary";break;case It:n="ButtonCreation";break;case Rt:n="ButtonDestructive";break;default:n="ButtonPrimary"}return t.createElement("button",_t({className:n+" Button"},e),e.children)};function Zt(){return Zt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Zt.apply(this,arguments)}const jt=function(e){return t.createElement("fieldset",Zt({className:"InputField",style:e.style},e),e.children)};function zt(){return zt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},zt.apply(this,arguments)}const Lt=function(e){return t.createElement("label",zt({className:"Label"},e),e.children)};var Ft=n(2239),Ut=n.n(Ft),Yt=n(4158),$t=n.n(Yt);function Wt(){return Wt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Wt.apply(this,arguments)}const Vt=function(e){var n=$t().isDefined(e.type)?e.type:"text";return t.createElement(t.Fragment,null,e.isTextArea?t.createElement("textarea",Wt({className:"Input",value:e.value,onChange:e.onChange,type:n},e)):t.createElement("input",Wt({className:"Input",value:e.value,onChange:e.onChange,type:n},e)))};function qt(){return qt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},qt.apply(this,arguments)}const Gt=function(e){return t.createElement("div",qt({className:"ToggleField"},e),e.children)},Ht=function(e){return t.createElement("label",{className:"Toggle"},console.log(e.value),t.createElement("input",{type:"checkbox",checked:e.value?"checked":"",value:e.value,onChange:e.onChange}),t.createElement("span",{className:"slider"}))};var Qt=n(4308),Kt=n.n(Qt);const Xt=function(e){return(0,t.useEffect)((function(){console.log(e.options)}),[]),t.createElement("select",{className:"dropdown",onChange:e.onChange,value:e.value},e.options.map((function(e){return t.createElement("option",{value:e},e)})))},Jt=function(e){return t.createElement("input",{className:"color-picker",onChange:e.onChange,type:"color",value:e.value})};var en=n(5106),tn=n.n(en);const nn=function(e){return t.createElement("div",null,t.createElement(Tt,{onSubmit:e.submitCreateStudyGroup,className:"create-study-group-form"},t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Study Group Name"),t.createElement(Vt,{value:e.name,onChange:e.updateNameField,type:"text"})),t.createElement(jt,null,t.createElement(Lt,null,"Color"),t.createElement(Jt,{value:e.groupColor,onChange:e.updateGroupColor,type:"color"}))),t.createElement(jt,null,t.createElement(Lt,null,"Description"),t.createElement(Vt,{value:e.description,onChange:e.updateDescriptionField,type:"text",isTextArea:!0})),t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Subject"),t.createElement(Xt,{options:Object.keys(tn()),onChange:e.updateSubjectField})),t.createElement(jt,null,t.createElement(Lt,null,"Privacy"),t.createElement(Xt,{options:["Public","Public","Public"],onChange:e.updatePrivacy})),t.createElement(jt,null,t.createElement(Lt,null,"Course Code"),t.createElement(Vt,{value:e.courseCode,onChange:e.updateCourseCodeField,type:"text"}))),t.createElement("div",{className:"side-by-side"},""!==e.userSchool&&e.userSchool&&t.createElement(Gt,null,t.createElement(Lt,null,"Is this group associated with ",e.userSchool,"?"),t.createElement(Ht,{onChange:e.updateIsAssociatedWithSchool,value:e.isAssociatedWithSchool})),t.createElement(Gt,null,t.createElement(Lt,null,"Is this an online group?"),console.log("Is Online?",e.isOnlineGroup),t.createElement(Ht,{onChange:e.updateIsOnlineGroup,value:e.isOnlineGroup})),t.createElement(Gt,null,t.createElement(Lt,null,"Is this a tutor group?"),t.createElement(Ht,{onChange:e.updateIsTutorGroup,value:e.isTutorGroup}))),t.createElement(Mt,{type:It},"Submit")))};class rn extends Error{}let on;class an{constructor(e,t){if(this.duration=t&&t.duration||0,this.generators=t&&t.generators&&t.generators.slice()||[],!Number.isInteger(this.duration)||this.duration<0)throw new rn("duration must be a non-negative integer")}static set adapter(e){if(on)throw new Error(`"${on.name}" has already been configured.`);on=e}static get adapter(){if(!on)throw new Error("No date adapter has been configured. See rSchedule docs.");return on}static isDate(e){throw sn("isDate()")}static fromDate(e,t){throw sn("fromDate()")}static fromJSON(e){throw sn("fromJSON()")}static fromDateTime(e){throw sn("fromDateTime()")}toISOString(){return this.set("timezone","UTC").toDateTime().toISOString()}toDateTime(){return cn.fromJSON(Object.assign(Object.assign({},this.toJSON()),{generators:this.generators}))}}function sn(e){return new Error(`You must implement the "${e}" method for this DateAdapter class`)}var ln;an.hasTimezoneSupport=!1,function(e){e.WEEKDAYS=["SU","MO","TU","WE","TH","FR","SA"],e.MILLISECONDS_IN_SECOND=1e3,e.MILLISECONDS_IN_MINUTE=60*e.MILLISECONDS_IN_SECOND,e.MILLISECONDS_IN_HOUR=60*e.MILLISECONDS_IN_MINUTE,e.MILLISECONDS_IN_DAY=24*e.MILLISECONDS_IN_HOUR,e.MILLISECONDS_IN_WEEK=7*e.MILLISECONDS_IN_DAY}(ln||(ln={}));class un extends Error{}class cn{constructor(e,t,n,r){if(this.date=new Date(e),this.timezone=t||null,this.duration=n||0,this.generators=r&&r.slice()||[],!Number.isInteger(this.duration)||this.duration<0)throw new un("duration must be a non-negative integer");this.assertIsValid()}static fromJSON(e){const t=new Date(Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond));return new cn(t,e.timezone,e.duration,e.generators)}static fromDateAdapter(e){return cn.fromJSON(Object.assign(Object.assign({},e.toJSON()),{generators:e.generators}))}get end(){if(this.duration)return this._end||(this._end=this.add(this.duration,"millisecond")),this._end}isEqual(e){return!!e&&(dn(this,e),this.valueOf()===e.valueOf())}isBefore(e){return dn(this,e),this.valueOf()<e.valueOf()}isBeforeOrEqual(e){return dn(this,e),this.valueOf()<=e.valueOf()}isAfter(e){return dn(this,e),this.valueOf()>e.valueOf()}isAfterOrEqual(e){return dn(this,e),this.valueOf()>=e.valueOf()}isOccurring(e){if(!this.duration)throw new Error("DateTime#isOccurring() is only applicable to DateTimes with durations");return dn(this,e),e.isAfterOrEqual(this)&&e.isBeforeOrEqual(this.add(this.duration,"millisecond"))}add(e,t){switch(t){case"generator":{const t=this.generators.slice();return t.unshift(e),new cn(this.date,this.timezone,this.duration,t)}case"year":return this.forkDateTime(Cn(this.date,e));case"month":return this.forkDateTime(wn(this.date,e));case"week":return this.forkDateTime(xn(this.date,e));case"day":return this.forkDateTime(En(this.date,e));case"hour":return this.forkDateTime(kn(this.date,e));case"minute":return this.forkDateTime(Sn(this.date,e));case"second":return this.forkDateTime(Bn(this.date,e));case"millisecond":return this.forkDateTime(On(this.date,e));default:throw new Error("Invalid unit provided to `DateTime#add`")}}subtract(e,t){switch(t){case"year":return this.forkDateTime(function(e,t){return Cn(e,-t)}(this.date,e));case"month":return this.forkDateTime(function(e,t){return wn(e,-t)}(this.date,e));case"week":return this.forkDateTime(function(e,t){return xn(e,-t)}(this.date,e));case"day":return this.forkDateTime(Tn(this.date,e));case"hour":return this.forkDateTime(function(e,t){return kn(e,-t)}(this.date,e));case"minute":return this.forkDateTime(function(e,t){return Sn(e,-t)}(this.date,e));case"second":return this.forkDateTime(function(e,t){return Bn(e,-t)}(this.date,e));case"millisecond":return this.forkDateTime(function(e,t){return On(e,-t)}(this.date,e));default:throw new Error("Invalid unit provided to `DateTime#subtract`")}}get(e){switch(e){case"year":return this.date.getUTCFullYear();case"month":return this.date.getUTCMonth()+1;case"yearday":return function(e){const t=new Date(Date.UTC(e.getUTCFullYear(),0,1)),n=e.valueOf()-t.valueOf();return 1+Math.floor(n/ln.MILLISECONDS_IN_DAY)}(this.date);case"weekday":return ln.WEEKDAYS[this.date.getUTCDay()];case"day":return this.date.getUTCDate();case"hour":return this.date.getUTCHours();case"minute":return this.date.getUTCMinutes();case"second":return this.date.getUTCSeconds();case"millisecond":return this.date.getUTCMilliseconds();default:throw new Error("Invalid unit provided to `DateTime#set`")}}set(e,t){if("duration"===e)return new cn(this.date,this.timezone,t,this.generators);if("generators"===e)return new cn(this.date,this.timezone,this.duration,t);let n=new Date(this.date);switch(e){case"year":n.setUTCFullYear(t);break;case"month":{const e=yn(t,n.getUTCFullYear());n.getUTCDate()>e?(n.setUTCDate(1),n.setUTCMonth(t),n=Tn(n,1)):n.setUTCMonth(t-1);break}case"day":n.setUTCDate(t);break;case"hour":n.setUTCHours(t);break;case"minute":n.setUTCMinutes(t);break;case"second":n.setUTCSeconds(t);break;case"millisecond":n.setUTCMilliseconds(t);break;default:throw new Error("Invalid unit provided to `DateTime#set`")}return this.forkDateTime(n)}granularity(e,t={}){let n=this.forkDateTime(this.date);switch(e){case"year":n=n.set("month",1);case"month":n=n.set("day",1);break;case"week":n=function(e,t){const n=hn(t).indexOf(e.get("weekday"));return e.subtract(n,"day")}(n,t.weekStart)}switch(e){case"year":case"month":case"week":case"day":n=n.set("hour",0);case"hour":n=n.set("minute",0);case"minute":n=n.set("second",0);case"second":n=n.set("millisecond",0);case"millisecond":return n;default:throw new Error("Invalid granularity provided to `DateTime#granularity`: "+e)}}endGranularity(e,t={}){let n=this.forkDateTime(this.date);switch(e){case"year":n=n.set("month",12);case"month":n=n.set("day",yn(n.get("month"),n.get("year")));break;case"week":n=function(e,t){const n=hn(t).indexOf(e.get("weekday"));return e.add(6-n,"day")}(n,t.weekStart)}switch(e){case"year":case"month":case"week":case"day":n=n.set("hour",23);case"hour":n=n.set("minute",59);case"minute":n=n.set("second",59);case"second":n=n.set("millisecond",999);case"millisecond":return n;default:throw new Error("Invalid granularity provided to `DateTime#granularity`: "+e)}}toISOString(){return this.date.toISOString()}toDateTime(){return this}toJSON(){const e={timezone:this.timezone,year:this.get("year"),month:this.get("month"),day:this.get("day"),hour:this.get("hour"),minute:this.get("minute"),second:this.get("second"),millisecond:this.get("millisecond")};return this.duration&&(e.duration=this.duration),e}valueOf(){return this.date.valueOf()}assertIsValid(){if(isNaN(this.valueOf()))throw new un("DateTime has invalid date.");return!0}forkDateTime(e){return new cn(e,this.timezone,this.duration,this.generators)}}function dn(e,t){if(e.timezone!==t.timezone)throw new un("Attempted to compare a datetime to another date in a different timezone: "+JSON.stringify(e)+" and "+JSON.stringify(t));return!0}function pn(e,t){if(e.isAfter(t))return 1;if(e.isBefore(t))return-1;if(e.duration&&t.duration){if(e.duration>t.duration)return 1;if(e.duration<t.duration)return-1}return 0}function fn(e){return Array.from(new Map(e.map((e=>[e.toISOString(),e]))).values())}function hn(e="SU"){const t=ln.WEEKDAYS.slice();let n=t.indexOf(e);for(;0!==n;)mn(t),n--;return t}function mn(e,t="first"){return 0===e.length||("first"===t?e.push(e.shift()):e.unshift(e.pop())),e}function gn(e,t){if(e===t)return 0;const n=ln.WEEKDAYS.indexOf(e)-ln.WEEKDAYS.indexOf(t);return n>0?7-n:Math.abs(n)}function yn(e,t){return{1:31,2:vn(t),3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}[e]}function vn(e){return function(e){return e%400==0||e%4==0&&e%100!=0}(e)?29:28}function bn(e){if(null===e||!0===e||!1===e)return NaN;const t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function An(e,t){if(arguments.length<2)throw new TypeError("2 arguments required, but only "+arguments.length+" present");const n=e.valueOf(),r=bn(t);return new Date(n+r)}function Cn(e,t){return wn(e,12*bn(t))}function wn(e,t){const n=bn(t),r=(e=new Date(e)).getUTCMonth()+n,o=new Date(0);o.setUTCFullYear(e.getUTCFullYear(),r,1),o.setUTCHours(0,0,0,0);const i=yn(o.getUTCMonth()+1,o.getUTCFullYear());return e.setUTCMonth(r,Math.min(i,e.getUTCDate())),e}function xn(e,t){return En(e,7*bn(t))}function En(e,t){return On(e,bn(t)*ln.MILLISECONDS_IN_DAY)}function kn(e,t){return An(e,bn(t)*ln.MILLISECONDS_IN_HOUR)}function Sn(e,t){return An(e,bn(t)*ln.MILLISECONDS_IN_MINUTE)}function Bn(e,t){return An(e,bn(t)*ln.MILLISECONDS_IN_SECOND)}function On(e,t){const n=bn(t),r=e.getTime();return new Date(r+n)}function Tn(e,t){return En(e,-t)}class Dn extends Error{}class Nn extends Error{}function Pn(e,t){return e>t?1:t>e?-1:0}function In(e){return JSON.parse(JSON.stringify(e))}function Rn(e,t){return e instanceof cn?e.timezone!==t?an.adapter.fromDateTime(e).set("timezone",t).toDateTime():e:e instanceof an?e.set("timezone",t).toDateTime():an.adapter.fromDate(e).set("timezone",t).toDateTime()}function _n(e,t){return e.timezone!==t?an.adapter.fromDateTime(e).set("timezone",t).toDateTime():e}class Mn extends Error{}function Zn(e){const t=In(e);return t.start=e.start,e.end&&(t.end=e.end),t}class jn extends Error{}class zn{constructor(e){this.date=e}}class Ln{constructor(e){this.date=e}}class Fn{constructor(e,t,n){this.options=t,this.args=n,this.rules=[],this.iterator=void 0===this.options.count?this.iterate():this.args.reverse?this.iterateWithReverseCount():this.iterateWithCount(),this.options=Object.assign(Object.assign({},In(t)),{start:t.start,end:t.end}),this.reverse=void 0===this.options.count&&n.reverse||!1;const{start:r,end:o}=this.normalizeDateTimeArgs(n);if(void 0!==t.count?this.start=t.start:r&&t.start?this.start=r.isAfterOrEqual(t.start)?r:t.start:this.start=r||t.start,o&&t.end?this.end=o.isBeforeOrEqual(t.end)?o:t.end:this.end=o||t.end,this.args.reverse&&void 0===t.count&&!this.end)throw new Error("When iterating in reverse, the rule must have an `end` or `count` property or you must provide an `end` argument.");this.isInfinite=!this.end&&void 0===this.options.count,this.hasDuration=!!this.options.duration,this.rules=Array.isArray(e)?e:e(this)}[Symbol.iterator](){return this.iterator}next(e){return this.iterator.next(e)}*iterateWithReverseCount(){let e;const t=Array.from(this.iterateWithCount()).reverse().slice();let n=t.shift();for(;n;)if(e&&e.skipToDate&&n.isAfter(e.skipToDate))n=t.shift();else{if(e=yield n,e&&e.skipToDate&&e.skipToDate.isAfterOrEqual(n))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");n=t.shift()}}*iterateWithCount(){if(0===this.options.count)return;const e=this.iterate(),t=this.args.start||this.start;let n,r=e.next().value,o=1;for(;r&&o<=this.options.count;)if(o++,r.isBefore(t))r=e.next().value;else if(n&&n.skipToDate&&r.isBefore(n.skipToDate))r=e.next().value;else{if(n=yield r,n&&n.skipToDate&&n.skipToDate.isBeforeOrEqual(r))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");r=e.next().value}}*iterate(){let e=this.start;this.reverse&&(e=this.end);let t=this.nextDate(e);for(;t;){const e=yield this.normalizeRunOutput(t);if(e&&e.skipToDate){if(this.reverse?e.skipToDate.isAfterOrEqual(t):e.skipToDate.isBeforeOrEqual(t))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");t=this.nextDate(e.skipToDate)}else t=this.nextDate(this.reverse?t.subtract(1,"millisecond"):t.add(1,"millisecond"))}}nextDate(e){let t=this.runRules(e.set("generators",[]));if(this.isDatePastEnd(t.date))return null;let n=0;for(;t instanceof Ln&&n<50;){if(t=this.runRules(t.date),this.isDatePastEnd(t.date))return null;n++}if(t instanceof Ln)throw new jn(`Failed to find a matching occurrence in ${n} iterations. Last iterated date: "${t.date.toISOString()}"`);if(this.reverse?e.isBefore(t.date):e.isAfter(t.date))throw new jn("An error occurred in a recurrence rule. If this happened using the rSchedule provided recurrence rules, you should open an issue in the rSchedule repo. The maintainer is going to want to know how to recreate the error.");return t.date}runRules(e){let t=new zn(e);for(const e of this.rules){if(t instanceof Ln)return t;t=e.run(t.date)}return t}isDatePastEnd(e){return this.reverse?e.isBefore(this.start):this.end&&e.isAfter(this.end)}normalizeRunOutput(e){return this.hasDuration?e.set("duration",this.options.duration):e}normalizeDateTimeArgs(e){return{start:e.start&&_n(e.start,this.options.start.timezone),end:e.end&&_n(e.end,this.options.start.timezone)}}}class Un{constructor(e={}){this.timezone=void 0!==e.timezone?e.timezone:null,this.maxDuration=e.maxDuration||0}get firstDate(){if(void 0!==this._firstDate)return this._firstDate;const e=this._run().next().value;return this._firstDate=e?this.dateAdapter.fromDateTime(e):null,this._firstDate}get lastDate(){if(void 0!==this._lastDate)return this._lastDate;if(this.isInfinite)return this._lastDate=null,null;const e=this._run({reverse:!0}).next().value;return this._lastDate=e?this.dateAdapter.fromDateTime(e):null,this._lastDate}pipe(...e){return e.reduce(((e,t)=>t({base:e,timezone:this.timezone})),this)}occurrences(e={}){return new Yn(this,this.normalizeOccurrencesArgs(e))}collections(e={}){return new Wn(this,this.normalizeCollectionsArgs(e))}occursBetween(e,t,n={}){const r=this.normalizeDateInput(e),o=this.normalizeDateInput(t);if(this.hasDuration&&!n.excludeEnds){const e=this.getMaxDuration("occursBetween",n),t=this._run({start:r.subtract(e,"millisecond"),end:o,reverse:!0});for(const e of t)if(!e.end.isBefore(r))return!0;return!1}for(const e of this._run({start:r,end:o})){if(n.excludeEnds){if(e.isEqual(r))continue;if(e.isEqual(o))break}return!0}return!1}occursOn(e){const t=this.normalizeOccursOnArgs(e);if(t.weekday){if(this.isInfinite&&!t.before)throw new Dn("When calling `occursOn()` with a `weekday` argument and an occurrence object that has infinite occurrences, you must include a `before` argument as well.");const e=t.after&&(t.excludeEnds?t.after.add(1,"day"):t.after),n=t.before&&(t.excludeEnds?t.before.subtract(1,"day"):t.before),r=this._run({start:e,end:n});let o=r.next().value;if(!o)return!1;for(;o;){if(o.get("weekday")===t.weekday)return!0;o=r.next({skipToDate:o.add(gn(o.get("weekday"),t.weekday),"day").granularity("day")}).value}return!1}if(!t.date)throw new Dn('"occursOn()" must be called with either a "date" or "weekday" argument');if(this.hasDuration){const e=this.getMaxDuration("occursOn",t),n=this._run({start:t.date.subtract(e,"millisecond"),end:t.date});for(const e of n)if(!e.end.isBefore(t.date))return!e.isAfter(t.date);return!1}for(const e of this._run({start:t.date,end:t.date}))return!!e;return!1}occursAfter(e,t={}){const n=this.normalizeDateInput(e);if(this.hasDuration&&!t.excludeStart){const e=this.getMaxDuration("occursAfter",t),r=this._run({start:n.subtract(e,"millisecond")});for(const e of r)if(!e.end.isBefore(n))return!0;return!1}for(const e of this._run({start:n}))if(!t.excludeStart||!e.isEqual(n))return!0;return!1}occursBefore(e,t={}){const n=this.normalizeDateInput(e);if(this.hasDuration&&t.excludeStart){for(const e of this._run({end:n,reverse:!0}))if(!e.end.isAfterOrEqual(n))return!0;return!1}for(const e of this._run({end:n,reverse:!0}))if(!t.excludeStart||!e.isEqual(n))return!0;return!1}get dateAdapter(){return an.adapter}normalizeOccurrencesArgs(e){return Object.assign(Object.assign({},e),{start:this.normalizeDateInput(e.start),end:this.normalizeDateInput(e.end)})}normalizeCollectionsArgs(e){if(void 0!==e.reverse)throw new Dn("`collections()` does not support the `reverse` option at this time.");return Object.assign(Object.assign({},e),{start:this.normalizeDateInput(e.start),end:this.normalizeDateInput(e.end)})}normalizeOccursOnArgs(e={}){return Object.assign(Object.assign({},e),{date:this.normalizeDateInput(e.date),after:this.normalizeDateInput(e.after),before:this.normalizeDateInput(e.before),excludeDates:e.excludeDates&&e.excludeDates.map((e=>this.normalizeDateInput(e)))})}normalizeRunArgs(e){return Object.assign(Object.assign({},e),{start:this.normalizeDateInput(e.start),end:this.normalizeDateInput(e.end)})}normalizeDateInput(e){return e?Rn(e,this.timezone):void 0}normalizeDateInputToAdapter(e){if(e)return function(e){return e instanceof cn?an.adapter.fromDateTime(e):e instanceof an?e:an.adapter.fromDate(e)}(e)}normalizeRunOutput(e){return _n(e,this.timezone)}getMaxDuration(e,t){const n=t.maxDuration||this.maxDuration;if(!Number.isInteger(n))throw new Dn(`When an occurrence generator has a duration, a 'maxDuration' argument must be supplied to ${e}().`);return n}}class Yn{constructor(e,t){this.iterable=e,this.args=t,this[Symbol.iterator]=()=>this.occurrenceIterator(),this.iterator=e._run(t),this.isInfinite=e.isInfinite}next(e){return this.occurrenceIterator(e).next()}toArray(){if(this.args.end||this.args.take||!this.isInfinite)return Array.from(this.occurrenceIterator());throw new Nn("OccurrenceIterator#toArray() can only be called if the iterator is not infinite, or you provide and `end` argument, or you provide a `take` argument.")}*occurrenceIterator(e){let t=this.normalizeRunArgs(e),n=this.iterator.next(t).value;for(;n;){const e=yield this.normalizeDateOutput(n);t=this.normalizeRunArgs(e),n=this.iterator.next(t).value}}normalizeRunArgs(e){return{skipToDate:this.normalizeDateInput(e&&e.skipToDate)}}normalizeDateInput(e){return e?Rn(e,this.iterable.timezone):void 0}normalizeDateOutput(e){if(e)return e?an.adapter.fromDateTime(e):void 0}}class $n{constructor(e=[],t,n,r){this.dates=e,this.granularity=t,this.periodStart=n,this.periodEnd=r}}class Wn{constructor(e,t){if(this.iterable=e,this.args=t,this.granularity="year",this[Symbol.iterator]=()=>this.iterator,t.granularity&&(this.granularity=t.granularity,"week"===this.granularity&&!t.weekStart))throw new Error('"week" granularity requires `weekStart` arg');if(t.weekStart&&(this.weekStart=t.weekStart),t.reverse)throw new Error("`OccurrenceGenerator#collections()` does not support iterating in reverse. Though `OccurrenceGenerator#occurrences()` does support iterating in reverse.");this.args=Object.assign(Object.assign({},t),{start:t.start||e._run().next().value,end:t.end&&this.getPeriod(t.end).end}),this.startDate=this.args.start&&this.normalizeDateOutput(this.getPeriod(this.args.start).start)||null,this.iterator=this.collectionIterator()}next(){return this.iterator.next()}toArray(){if(this.args.end||this.args.take||!this.iterable.isInfinite){const e=[];for(const t of this.collectionIterator())e.push(t);return e}throw new Nn("CollectionIterator#toArray() can only be called if the iterator is not infinite, or you provide and `end` argument, or you provide a `take` argument.")}normalizeDateOutput(e){if(e)return an.adapter.fromDateTime(e)}*collectionIterator(){if(!this.startDate)return;let e=this.occurrenceIterator(),t=e.next().value;if(!t)return;let n=this.getPeriod(this.args.start),r=[],o=0;for(;t&&(void 0===this.args.take||this.args.take>o);){for(;t&&t.isBeforeOrEqual(n.end);)r.push(t),t=e.next().value;if(yield new $n(r.map((e=>this.normalizeDateOutput(e))),this.granularity,this.normalizeDateOutput(n.start),this.normalizeDateOutput(n.end)),!t)return;r=[],n=this.args.skipEmptyPeriods?this.getPeriod(t):this.getPeriod(this.incrementPeriod(n.period)),"month"===this.granularity&&this.weekStart&&(e=this.iterable._run({start:n.start,end:this.args.end}),t=e.next().value),o++}}getPeriod(e){let t,n,r;return"month"===this.granularity&&this.weekStart?(t=e.granularity("month").granularity("week",{weekStart:this.weekStart}),n=e.endGranularity("month").endGranularity("week",{weekStart:this.weekStart}),r=e.granularity("month")):(t=e.granularity(this.granularity,{weekStart:this.weekStart}),n=e.endGranularity(this.granularity,{weekStart:this.weekStart}),r=t),{start:t,end:n,period:r}}incrementPeriod(e){return e.add(1,this.granularity)}occurrenceIterator(){let e=this.args.start||this.iterable._run().next().value;return e?(e=this.getPeriod(e).start,this.iterable._run({start:e,end:this.args.end})):this.iterable._run(this.args)}}class Vn extends Un{constructor(e,t){super(t),this.streams=e,this.config=t,this.timezone=t.timezone,this.streams=e.map((e=>e instanceof Vn?e:e.set("timezone",this.timezone))),this.isInfinite=this.calculateIsInfinite(),this.hasDuration=this.calculateHasDuration()}normalizeDateInput(e){if(e)return Rn(e,this.timezone)}normalizeRunOutput(e){return _n(e,this.timezone)}}class qn{constructor(e,t){this.runArgs=t,this.stream=e._run(this.runArgs),this.next()}next(e){const{done:t,value:n}=this.stream.next(e);return this.done="boolean"!=typeof t||t,this.value=n,{done:t,value:n}}}function Gn(e,t={},n={}){if(n.skipToDate&&0!==e.length){if(t.reverse?e.every((e=>e.value.isBeforeOrEqual(n.skipToDate))):e.every((e=>e.value.isAfterOrEqual(n.skipToDate))))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");for(const r of e)r.done||(t.reverse?r.value.isBeforeOrEqual(n.skipToDate):r.value.isAfterOrEqual(n.skipToDate))||r.next(n)}}function Hn(e,t){return e.done&&t.done?0:e.done?1:t.done?-1:e.value.isAfter(t.value)?1:-1}function Qn(e,t){return e.done&&t.done?0:e.done?-1:t.done?1:e.value.isAfter(t.value)?-1:1}function Kn(e,t={},n={}){return Gn(e,t,n),e.sort(t.reverse?Qn:Hn).filter((e=>!e.done)).shift()}function Xn(...e){return t=>new Jn(e,t)}class Jn extends Vn{set(e,t){return new Jn(this.streams.map((e=>e.set("timezone",t))),Object.assign(Object.assign({},this.config),{base:this.config.base&&this.config.base.set("timezone",t),timezone:t}))}*_run(e={}){const t=this.streams.map((t=>new qn(t,e)));if(this.config.base&&t.push(new qn(this.config.base,e)),0===t.length)return;let n=Kn(t,e);for(;n&&!n.done;){const r=yield this.normalizeRunOutput(n.value);r&&r.skipToDate||n.next(),n=Kn(t,e,r)}}calculateIsInfinite(){return this.config.base&&this.config.base.isInfinite||this.streams.some((e=>e.isInfinite))}calculateHasDuration(){const e=this.streams.every((e=>e.hasDuration));return this.config.base?this.config.base.hasDuration&&e:e}}class er extends Un{constructor(e={}){super(e),this.adapters=[],this.isInfinite=!1,this.maxDuration=0,this.datetimes=[],this.data=e.data,e.dates&&(this.adapters=e.dates.map((t=>{let n=this.normalizeDateInputToAdapter(t);return e.duration&&!n.duration&&(n=n.set("duration",e.duration)),n.set("timezone",this.timezone)})),this.datetimes=this.adapters.map((e=>e.toDateTime()))),this.hasDuration=this.datetimes.every((e=>!!e.duration)),this.hasDuration&&(this.maxDuration=this.adapters.reduce(((e,t)=>t.duration>e?t.duration:e),0))}get length(){return this.adapters.length}get firstDate(){return this.adapters[0]||null}get lastDate(){return this.adapters[this.length-1]||null}occurrences(e={}){return new Yn(this,this.normalizeOccurrencesArgs(e))}collections(e={}){return new Wn(this,this.normalizeCollectionsArgs(e))}add(e){return new er({dates:[...this.adapters,e],timezone:this.timezone,data:this.data})}remove(e){const t=this.adapters.slice(),n=this.normalizeDateInputToAdapter(e),r=t.findIndex((e=>e.valueOf()===n.valueOf()));return r>=0&&t.splice(r,1),new er({dates:t,timezone:this.timezone,data:this.data})}set(e,t,n={}){let r=this.timezone,o=this.adapters.slice();if("timezone"===e){if(t===this.timezone)return this;n.keepLocalTime&&(o=this.adapters.map((e=>{const n=e.toJSON();return n.timezone=t,this.dateAdapter.fromJSON(n)}))),r=t}else if("dates"===e)o=t;else{if("duration"!==e)throw new Dn(`Unexpected prop argument "${e}". Accepted values are "timezone" or "dates"`);o=o.map((e=>e.set("duration",t||0)))}return new er({dates:o,data:this.data,timezone:r})}filter(e){return new er({dates:this.adapters.filter(e),data:this.data,timezone:this.timezone})}*_run(e={}){let t=this.datetimes.sort(pn);e.start&&(t=t.filter((t=>t.isAfterOrEqual(e.start)))),e.end&&(t=t.filter((t=>t.isBeforeOrEqual(e.end)))),e.reverse&&(t=t.slice().reverse()),e.take&&(t=t.slice(0,e.take));const n=t.slice();let r,o=n.shift();for(;o;)if(r&&r.skipToDate&&(e.reverse?r.skipToDate.isBefore(o):r.skipToDate.isAfter(o)))o=n.shift();else{if(o=o.add(this,"generator"),r=yield this.normalizeRunOutput(o),r&&r.skipToDate&&(e.reverse?r.skipToDate.isAfterOrEqual(o):r.skipToDate.isBeforeOrEqual(o)))throw new Error("A provided `skipToDate` option must be greater than the last yielded date (or smaller, in the case of reverse iteration)");o=n.shift()}}}class tr extends Error{}let nr;class rr{constructor(e,t){if(this.duration=t&&t.duration||0,this.generators=t&&t.generators&&t.generators.slice()||[],!Number.isInteger(this.duration)||this.duration<0)throw new tr("duration must be a non-negative integer")}static set adapter(e){if(nr)throw new Error(`"${nr.name}" has already been configured.`);nr=e}static get adapter(){if(!nr)throw new Error("No date adapter has been configured. See rSchedule docs.");return nr}static isDate(e){throw or("isDate()")}static fromDate(e,t){throw or("fromDate()")}static fromJSON(e){throw or("fromJSON()")}static fromDateTime(e){throw or("fromDateTime()")}toISOString(){return this.set("timezone","UTC").toDateTime().toISOString()}toDateTime(){return sr.fromJSON(Object.assign(Object.assign({},this.toJSON()),{generators:this.generators}))}}function or(e){return new Error(`You must implement the "${e}" method for this DateAdapter class`)}var ir;rr.hasTimezoneSupport=!1,function(e){e.WEEKDAYS=["SU","MO","TU","WE","TH","FR","SA"],e.MILLISECONDS_IN_SECOND=1e3,e.MILLISECONDS_IN_MINUTE=60*e.MILLISECONDS_IN_SECOND,e.MILLISECONDS_IN_HOUR=60*e.MILLISECONDS_IN_MINUTE,e.MILLISECONDS_IN_DAY=24*e.MILLISECONDS_IN_HOUR,e.MILLISECONDS_IN_WEEK=7*e.MILLISECONDS_IN_DAY}(ir||(ir={}));class ar extends Error{}class sr{constructor(e,t,n,r){if(this.date=new Date(e),this.timezone=t||null,this.duration=n||0,this.generators=r&&r.slice()||[],!Number.isInteger(this.duration)||this.duration<0)throw new ar("duration must be a non-negative integer");this.assertIsValid()}static fromJSON(e){const t=new Date(Date.UTC(e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond));return new sr(t,e.timezone,e.duration,e.generators)}static fromDateAdapter(e){return sr.fromJSON(Object.assign(Object.assign({},e.toJSON()),{generators:e.generators}))}get end(){if(this.duration)return this._end||(this._end=this.add(this.duration,"millisecond")),this._end}isEqual(e){return!!e&&(lr(this,e),this.valueOf()===e.valueOf())}isBefore(e){return lr(this,e),this.valueOf()<e.valueOf()}isBeforeOrEqual(e){return lr(this,e),this.valueOf()<=e.valueOf()}isAfter(e){return lr(this,e),this.valueOf()>e.valueOf()}isAfterOrEqual(e){return lr(this,e),this.valueOf()>=e.valueOf()}isOccurring(e){if(!this.duration)throw new Error("DateTime#isOccurring() is only applicable to DateTimes with durations");return lr(this,e),e.isAfterOrEqual(this)&&e.isBeforeOrEqual(this.add(this.duration,"millisecond"))}add(e,t){switch(t){case"generator":{const t=this.generators.slice();return t.unshift(e),new sr(this.date,this.timezone,this.duration,t)}case"year":return this.forkDateTime(mr(this.date,e));case"month":return this.forkDateTime(gr(this.date,e));case"week":return this.forkDateTime(yr(this.date,e));case"day":return this.forkDateTime(vr(this.date,e));case"hour":return this.forkDateTime(br(this.date,e));case"minute":return this.forkDateTime(Ar(this.date,e));case"second":return this.forkDateTime(Cr(this.date,e));case"millisecond":return this.forkDateTime(wr(this.date,e));default:throw new Error("Invalid unit provided to `DateTime#add`")}}subtract(e,t){switch(t){case"year":return this.forkDateTime(function(e,t){return mr(e,-t)}(this.date,e));case"month":return this.forkDateTime(function(e,t){return gr(e,-t)}(this.date,e));case"week":return this.forkDateTime(function(e,t){return yr(e,-t)}(this.date,e));case"day":return this.forkDateTime(xr(this.date,e));case"hour":return this.forkDateTime(function(e,t){return br(e,-t)}(this.date,e));case"minute":return this.forkDateTime(function(e,t){return Ar(e,-t)}(this.date,e));case"second":return this.forkDateTime(function(e,t){return Cr(e,-t)}(this.date,e));case"millisecond":return this.forkDateTime(function(e,t){return wr(e,-t)}(this.date,e));default:throw new Error("Invalid unit provided to `DateTime#subtract`")}}get(e){switch(e){case"year":return this.date.getUTCFullYear();case"month":return this.date.getUTCMonth()+1;case"yearday":return function(e){const t=new Date(Date.UTC(e.getUTCFullYear(),0,1)),n=e.valueOf()-t.valueOf();return 1+Math.floor(n/ir.MILLISECONDS_IN_DAY)}(this.date);case"weekday":return ir.WEEKDAYS[this.date.getUTCDay()];case"day":return this.date.getUTCDate();case"hour":return this.date.getUTCHours();case"minute":return this.date.getUTCMinutes();case"second":return this.date.getUTCSeconds();case"millisecond":return this.date.getUTCMilliseconds();default:throw new Error("Invalid unit provided to `DateTime#set`")}}set(e,t){if("duration"===e)return new sr(this.date,this.timezone,t,this.generators);if("generators"===e)return new sr(this.date,this.timezone,this.duration,t);let n=new Date(this.date);switch(e){case"year":n.setUTCFullYear(t);break;case"month":{const e=dr(t,n.getUTCFullYear());n.getUTCDate()>e?(n.setUTCDate(1),n.setUTCMonth(t),n=xr(n,1)):n.setUTCMonth(t-1);break}case"day":n.setUTCDate(t);break;case"hour":n.setUTCHours(t);break;case"minute":n.setUTCMinutes(t);break;case"second":n.setUTCSeconds(t);break;case"millisecond":n.setUTCMilliseconds(t);break;default:throw new Error("Invalid unit provided to `DateTime#set`")}return this.forkDateTime(n)}granularity(e,t={}){let n=this.forkDateTime(this.date);switch(e){case"year":n=n.set("month",1);case"month":n=n.set("day",1);break;case"week":n=function(e,t){const n=ur(t).indexOf(e.get("weekday"));return e.subtract(n,"day")}(n,t.weekStart)}switch(e){case"year":case"month":case"week":case"day":n=n.set("hour",0);case"hour":n=n.set("minute",0);case"minute":n=n.set("second",0);case"second":n=n.set("millisecond",0);case"millisecond":return n;default:throw new Error("Invalid granularity provided to `DateTime#granularity`: "+e)}}endGranularity(e,t={}){let n=this.forkDateTime(this.date);switch(e){case"year":n=n.set("month",12);case"month":n=n.set("day",dr(n.get("month"),n.get("year")));break;case"week":n=function(e,t){const n=ur(t).indexOf(e.get("weekday"));return e.add(6-n,"day")}(n,t.weekStart)}switch(e){case"year":case"month":case"week":case"day":n=n.set("hour",23);case"hour":n=n.set("minute",59);case"minute":n=n.set("second",59);case"second":n=n.set("millisecond",999);case"millisecond":return n;default:throw new Error("Invalid granularity provided to `DateTime#granularity`: "+e)}}toISOString(){return this.date.toISOString()}toDateTime(){return this}toJSON(){const e={timezone:this.timezone,year:this.get("year"),month:this.get("month"),day:this.get("day"),hour:this.get("hour"),minute:this.get("minute"),second:this.get("second"),millisecond:this.get("millisecond")};return this.duration&&(e.duration=this.duration),e}valueOf(){return this.date.valueOf()}assertIsValid(){if(isNaN(this.valueOf()))throw new ar("DateTime has invalid date.");return!0}forkDateTime(e){return new sr(e,this.timezone,this.duration,this.generators)}}function lr(e,t){if(e.timezone!==t.timezone)throw new ar("Attempted to compare a datetime to another date in a different timezone: "+JSON.stringify(e)+" and "+JSON.stringify(t));return!0}function ur(e="SU"){const t=ir.WEEKDAYS.slice();let n=t.indexOf(e);for(;0!==n;)cr(t),n--;return t}function cr(e,t="first"){return 0===e.length||("first"===t?e.push(e.shift()):e.unshift(e.pop())),e}function dr(e,t){return{1:31,2:pr(t),3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}[e]}function pr(e){return function(e){return e%400==0||e%4==0&&e%100!=0}(e)?29:28}function fr(e){if(null===e||!0===e||!1===e)return NaN;const t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function hr(e,t){if(arguments.length<2)throw new TypeError("2 arguments required, but only "+arguments.length+" present");const n=e.valueOf(),r=fr(t);return new Date(n+r)}function mr(e,t){return gr(e,12*fr(t))}function gr(e,t){const n=fr(t),r=(e=new Date(e)).getUTCMonth()+n,o=new Date(0);o.setUTCFullYear(e.getUTCFullYear(),r,1),o.setUTCHours(0,0,0,0);const i=dr(o.getUTCMonth()+1,o.getUTCFullYear());return e.setUTCMonth(r,Math.min(i,e.getUTCDate())),e}function yr(e,t){return vr(e,7*fr(t))}function vr(e,t){return wr(e,fr(t)*ir.MILLISECONDS_IN_DAY)}function br(e,t){return hr(e,fr(t)*ir.MILLISECONDS_IN_HOUR)}function Ar(e,t){return hr(e,fr(t)*ir.MILLISECONDS_IN_MINUTE)}function Cr(e,t){return hr(e,fr(t)*ir.MILLISECONDS_IN_SECOND)}function wr(e,t){const n=fr(t),r=e.getTime();return new Date(r+n)}function xr(e,t){return vr(e,-t)}function Er(e,t){return e.timezone!==t?rr.adapter.fromDateTime(e).set("timezone",t).toDateTime():e}class kr extends Un{constructor(e,t,n={}){super(n),this.recurrenceRules=e,this.options=Zn(t),this.normOptions=function(e,t){const n=function(e){let t,n;if(e.start instanceof cn)t=e.start;else if(e.start instanceof an)t=e.start.toDateTime();else{if(!an.adapter.isDate(e.start))throw new Mn('"start" must be either a `DateAdapter` instance or an instance of the date a DateAdapter is wrapping (e.g. `StandardDateAdapter` wraps a `Date`)');t=an.adapter.fromDate(e.start).toDateTime()}if(e.end)if(e.end instanceof cn)n=e.end;else if(e.end instanceof an)n=e.end.toDateTime();else{if(!an.adapter.isDate(e.end))throw new Mn('"end" must be either be `undefined`, a `DateAdapter` instance, or an instance of the date a DateAdapter is wrapping (e.g. `StandardDateAdapter` wraps a `Date`)');n=an.adapter.fromDate(e.end).toDateTime()}if(void 0!==e.duration){if(!Number.isInteger(e.duration))throw new Mn('"duration" expects a whole number');if(e.duration<=0)throw new Mn('"duration" must be greater than 0')}if(void 0!==e.count){if(!Number.isInteger(e.count))throw new Mn('"count" must be a whole number');if(e.count<0)throw new Mn('"count" must be greater than 0')}if(void 0!==e.end&&void 0!==e.count)throw new Mn('"end" and "count" cannot both be present');return{start:t,end:n,count:e.count,duration:e.duration}}(t),r=In(t);return e.forEach((e=>{e.normalizeOptions(r,n)})),Object.keys(n).forEach((e=>{void 0===n[e]&&delete n[e]})),n}(this.recurrenceRules,this.options),this.timezone=void 0!==n.timezone?n.timezone:this.normOptions.start.timezone,this.data=n.data,this.hasDuration=!!t.duration,this.hasDuration&&(this.duration=t.duration),this.isInfinite=void 0===this.normOptions.end&&void 0===this.normOptions.count}occurrences(e={}){return new Yn(this,this.normalizeOccurrencesArgs(e))}collections(e={}){return new Wn(this,this.normalizeCollectionsArgs(e))}*_run(e={}){const t=this.normalizeRunArgs(e),n=new Fn((r=this.recurrenceRules,e=>r.reduce(((t,n)=>{const r=n.get(e);return r&&t.push(r),t}),[])),this.normOptions,t);var r;let o=n.next().value,i=0;for(;o&&(void 0===t.take||i<t.take);){i++,o=o.add(this,"generator");const e=yield this.normalizeRunOutput(o);o=(null==e?void 0:e.skipToDate)?n.next(Object.assign(Object.assign({},e),{skipToDate:Er(e.skipToDate,n.start.timezone)})).value:n.next(e).value}}}class Sr extends kr{constructor(e,t={}){super(Sr.recurrenceRules,e,t)}set(e,t,n={}){let r=Zn(this.options),o=this.timezone;if("timezone"===e){if(t===this.timezone&&!n.keepLocalTime)return this;if(n.keepLocalTime){const e=this.normalizeDateInput(r.start).toJSON();e.timezone=t;const n=this.dateAdapter.fromJSON(e);r.start=r.start instanceof this.dateAdapter?n:r.start instanceof cn?n.toDateTime():n.date}o=t}else"options"===e?r=t:r[e]=t;return new Sr(r,{data:this.data,maxDuration:this.maxDuration,timezone:o})}}Sr.recurrenceRules=[];class Br extends Un{constructor(e){super(e),this.data=e.data}occurrences(e={}){return new Yn(this,this.normalizeOccurrencesArgs(e))}collections(e={}){return new Wn(this,this.normalizeCollectionsArgs(e))}*_run(e={}){const t=e.take;delete e.take;const n=this.occurrenceStream._run(e);let r=n.next().value,o=0;for(;r&&(void 0===t||t>o);){r=r.add(this,"generator");const e=yield this.normalizeRunOutput(r);r=n.next(e).value,o++}}}function Or(...e){return t=>new Tr(e,t)}class Tr extends Vn{set(e,t){return new Tr(this.streams.map((e=>e.set("timezone",t))),Object.assign(Object.assign({},this.config),{base:this.config.base&&this.config.base.set("timezone",t),timezone:t}))}*_run(e={}){if(!this.config.base)return;const t=new qn(this.config.base,e),n=new qn(new Jn(this.streams,{timezone:this.config.timezone}),e);for(Dr(t,n,e);!t.done;){const r=yield this.normalizeRunOutput(t.value);r&&r.skipToDate||t.next(),Dr(t,n,e,r)}}calculateIsInfinite(){return!(!this.config.base||!this.config.base.isInfinite)}calculateHasDuration(){return!(!this.config.base||!this.config.base.hasDuration)}}function Dr(e,t,n={},r={}){for(Gn([e,t],n,r),Nr(e,t,n);!e.done&&!t.done&&e.value.isEqual(t.value);)e.next(),Nr(e,t,n)}function Nr(e,t,n={}){if(n.reverse)for(;!t.done&&!e.done&&t.value.isAfter(e.value);)t.next();else for(;!t.done&&!e.done&&t.value.isBefore(e.value);)t.next()}class Pr extends Vn{set(e,t){return new Pr([],Object.assign(Object.assign({},this.config),{base:this.config.base&&this.config.base.set("timezone",t),timezone:t}))}*_run(e={}){if(!this.config.base)return;const t=new qn(this.config.base,e);for(;!t.done;){const e=yield this.normalizeRunOutput(t.value),n=t.value;for(t.next(e);(!e||!e.skipToDate)&&!t.done&&t.value.isEqual(n);)t.next()}}calculateIsInfinite(){return!(!this.config.base||!this.config.base.isInfinite)}calculateHasDuration(){return!(!this.config.base||!this.config.base.hasDuration)}}class Ir extends Br{constructor(e={}){super(e),this.rrules=[],this.exrules=[];for(const t of["rrules","exrules"]){const n=e[t];n&&(this[t]=n.map((e=>e instanceof Sr?e.set("timezone",this.timezone):new Sr(e,{timezone:this.timezone}))))}for(const t of["rdates","exdates"]){const n=e[t];this[t]=n?n instanceof er?n.set("timezone",this.timezone):new er({dates:n,timezone:this.timezone}):new er({timezone:this.timezone})}this.hasDuration=this.rrules.every((e=>e.hasDuration))&&this.exrules.every((e=>e.hasDuration))&&this.rdates.hasDuration&&this.exdates.hasDuration,this.isInfinite=this.rrules.some((e=>e.isInfinite)),this.occurrenceStream=[Xn(...this.rrules),Or(...this.exrules),Xn(this.rdates),Or(this.exdates),e=>new Pr([],e)].reduce(((e,t)=>t({base:e,timezone:this.timezone})),void 0)}add(e,t){const n=this.rrules.slice(),r=this.exrules.slice();let o=this.rdates,i=this.exdates;switch(e){case"rrule":n.push(t);break;case"exrule":r.push(t);break;case"rdate":o=this.rdates.add(t);break;case"exdate":i=this.exdates.add(t)}return new Ir({timezone:this.timezone,data:this.data,rrules:n,exrules:r,rdates:o,exdates:i})}remove(e,t){let n=this.rrules,r=this.exrules,o=this.rdates,i=this.exdates;switch(e){case"rrule":n=n.filter((e=>e!==t));break;case"exrule":r=r.filter((e=>e!==t));break;case"rdate":o=this.rdates.remove(t);break;case"exdate":i=this.exdates.remove(t)}return new Ir({timezone:this.timezone,data:this.data,rrules:n,exrules:r,rdates:o,exdates:i})}set(e,t,n={}){let r=this.timezone,o=this.rrules,i=this.exrules,a=this.rdates,s=this.exdates;switch(e){case"timezone":if(t===this.timezone&&!n.keepLocalTime)return this;n.keepLocalTime&&(o=o.map((e=>e.set("timezone",t,n))),i=i.map((e=>e.set("timezone",t,n))),a=a.set("timezone",t,n),s=s.set("timezone",t,n)),r=t;break;case"rrules":o=t;break;case"exrules":i=t;break;case"rdates":a=t;break;case"exdates":s=t}return new Ir({timezone:r,data:this.data,rrules:o,exrules:i,rdates:a,exdates:s})}}Error,Error;class Rr{constructor(e){this.processor=e,this.start=e.start,this.end=e.end,this.options=e.options}}class _r extends Rr{constructor(e,t){super(e),this.initDate=t,this.intervalUnit=function(e){switch(e){case"YEARLY":return"year";case"MONTHLY":return"month";case"WEEKLY":return"week";case"DAILY":return"day";case"HOURLY":return"hour";case"MINUTELY":return"minute";case"SECONDLY":return"second";case"MILLISECONDLY":return"millisecond";default:throw new Error("unknown freq passed to freqToGranularity()")}}(this.options.frequency),this.firstIntervalStartDate=this.normalizedStartDate(this.options.start),this.intervalStartDate=this.firstIntervalStartDate,this.intervalEndDate=this.normalizedEndDate(this.firstIntervalStartDate),this.skipToInterval(this.initDate)}run(e){return this.validateDate(new zn(e))}validateDate(e){const{date:t}=e;return e instanceof zn&&this.dateIsWithinInterval(t)?e:(this.skipToInterval(t),new Ln(this.dateIsWithinInterval(t)?t:this.setToCurrentInterval()))}setToCurrentInterval(){return this.intervalStartDate}normalizedStartDate(e){return"WEEKLY"===this.options.frequency?e.granularity("week",{weekStart:this.options.weekStart}):e.granularity(this.intervalUnit)}normalizedEndDate(e){switch(this.options.frequency){case"YEARLY":return e.add(1,"year");case"MONTHLY":return e.add(1,"month");case"WEEKLY":return e.add(1,"week");case"DAILY":return e.add(1,"day");case"HOURLY":return e.add(1,"hour");case"MINUTELY":return e.add(1,"minute");case"SECONDLY":return e.add(1,"second");case"MILLISECONDLY":return e.add(1,"millisecond");default:throw new Error(`Unknown frequency ${this.options.frequency}`)}}skipToInterval(e){const t=this.intervalDifference(e);this.intervalStartDate=this.firstIntervalStartDate.add(t,this.intervalUnit),this.intervalEndDate=this.normalizedEndDate(this.intervalStartDate)}dateIsWithinInterval(e){return this.intervalStartDate.isBeforeOrEqual(e)&&this.intervalEndDate.isAfter(e)}intervalDifference(e){return Mr({first:this.firstIntervalStartDate,second:e,unit:this.intervalUnit,interval:this.options.interval,weekStart:this.options.weekStart,direction:"after"})}}function Mr({first:e,second:t,unit:n,interval:r,weekStart:o,direction:i}){let a=(()=>{let r,i;switch(n){case"year":return i=12*(t.get("year")-e.get("year")),i=i+t.get("month")-e.get("month"),Math.floor(i/12);case"month":return i=12*(t.get("year")-e.get("year")),i=i+t.get("month")-e.get("month"),i;case"week":e=e.granularity("week",{weekStart:o}),r=ln.MILLISECONDS_IN_WEEK;break;case"day":r=ln.MILLISECONDS_IN_DAY;break;case"hour":r=ln.MILLISECONDS_IN_HOUR;break;case"minute":r=ln.MILLISECONDS_IN_MINUTE;break;case"second":r=ln.MILLISECONDS_IN_SECOND;break;case"millisecond":r=1;break;default:throw new Error("Unexpected `unit` value")}const a=t.valueOf()-e.valueOf();return Math.floor(a/r)})();return a=("after"===i?Math.ceil:Math.floor)(a/r)*r,a}class Zr extends _r{setToCurrentInterval(){return this.intervalEndDate.subtract(1,"millisecond")}intervalDifference(e){return Mr({first:this.firstIntervalStartDate,second:e,unit:this.intervalUnit,interval:this.options.interval,weekStart:this.options.weekStart,direction:"before"})}}const jr=["MILLISECONDLY","SECONDLY","MINUTELY","HOURLY","DAILY","WEEKLY","MONTHLY","YEARLY"],zr={name:"FrequencyRule",get:e=>void 0!==e.options.byMillisecondOfSecond||"MILLISECONDLY"!==e.options.frequency?null:e.reverse?new Zr(e,e.end):new _r(e,e.start),normalizeOptions:(e,t)=>{if(!jr.includes(e.frequency))throw new Mn(`"frequency" must be one of ${JSON.stringify(jr)}`);if(void 0!==e.interval){if(!Number.isInteger(e.interval))throw new Mn('"interval" expects a whole number');if(e.interval<1)throw new Mn('"interval" cannot be less than 1')}if(void 0!==e.weekStart&&!ln.WEEKDAYS.includes(e.weekStart))throw new Mn(`"weekStart" must be one of ${JSON.stringify(ln.WEEKDAYS)}`);t.frequency=e.frequency,t.interval=e.interval||1,t.weekStart=e.weekStart||"MO"},deps:()=>[zr]};function Lr(e){return Array.isArray(e)&&e.length>0}const Fr=new WeakMap;class Ur extends Rr{constructor(e){super(e),Fr.has(this.processor)||Fr.set(this.processor,new _r(e,e.start)),this.frequency=Fr.get(this.processor)}validateDate(e){return this.frequency.validateDate(e)}}class Yr extends Rr{constructor(e){super(e),Fr.has(this.processor)||Fr.set(this.processor,new Zr(e,e.end)),this.frequency=Fr.get(this.processor)}validateDate(e){return this.frequency.validateDate(e)}}class $r extends Yr{run(e){const t=e.get(this.granularity);for(const n of this.option)if(!(t<n))return t===n?this.validateDate(new zn(e)):this.validateDate(new Ln(e.endGranularity(this.baseGranularity).set(this.granularity,n)));return this.validateDate(new Ln(e.endGranularity(this.baseGranularity).subtract(1,this.baseGranularity).set(this.granularity,this.option[0])))}}class Wr extends $r{constructor(){super(...arguments),this.baseGranularity="second",this.granularity="millisecond",this.option=this.options.byMillisecondOfSecond.slice().reverse()}}class Vr extends Ur{run(e){const t=e.get(this.granularity);for(const n of this.option)if(!(t>n))return t===n?this.validateDate(new zn(e)):this.validateDate(new Ln(e.granularity(this.baseGranularity).set(this.granularity,n)));return this.validateDate(new Ln(e.granularity(this.baseGranularity).add(1,this.baseGranularity).set(this.granularity,this.option[0])))}}class qr extends Vr{constructor(){super(...arguments),this.baseGranularity="second",this.granularity="millisecond",this.option=this.options.byMillisecondOfSecond}}const Gr={name:"ByMillisecondOfSecond",get:e=>void 0===e.options.byMillisecondOfSecond?null:e.reverse?new Wr(e):new qr(e),normalizeOptions:(e,t)=>{if(void 0!==e.byMillisecondOfSecond){if(!Lr(e.byMillisecondOfSecond))throw new Mn('"byMillisecondOfSecond" expects a non-empty array');if(e.byMillisecondOfSecond.some((e=>e<0||e>999)))throw new Mn('"byMillisecondOfSecond" values must be >= 0 && <= 999');t.byMillisecondOfSecond=e.byMillisecondOfSecond,t.byMillisecondOfSecond.sort(Pn)}else"MILLISECONDLY"!==e.frequency&&(t.byMillisecondOfSecond=[t.start.get("millisecond")])},deps:()=>[zr,Gr]};class Hr extends $r{constructor(){super(...arguments),this.baseGranularity="minute",this.granularity="second",this.option=this.options.bySecondOfMinute.slice().reverse()}}class Qr extends Vr{constructor(){super(...arguments),this.baseGranularity="minute",this.granularity="second",this.option=this.options.bySecondOfMinute}}const Kr={name:"BySecondOfMinute",get:e=>void 0===e.options.bySecondOfMinute?null:e.reverse?new Hr(e):new Qr(e),normalizeOptions:(e,t)=>{if(void 0!==e.bySecondOfMinute){if(!Lr(e.bySecondOfMinute))throw new Mn('"bySecondOfMinute" expects a non-empty array');if(e.bySecondOfMinute.some((e=>e<0||e>60)))throw new Mn('"bySecondOfMinute" values must be >= 0 && <= 60');t.bySecondOfMinute=e.bySecondOfMinute,t.bySecondOfMinute.sort(Pn)}else["SECONDLY","MILLISECONDLY"].includes(e.frequency)||(t.bySecondOfMinute=[t.start.get("second")])},deps:()=>[zr,Kr,Gr]};class Xr extends $r{constructor(){super(...arguments),this.baseGranularity="hour",this.granularity="minute",this.option=this.options.byMinuteOfHour.slice().reverse()}}class Jr extends Vr{constructor(){super(...arguments),this.baseGranularity="hour",this.granularity="minute",this.option=this.options.byMinuteOfHour}}const eo={name:"ByMinuteOfHour",get:e=>void 0===e.options.byMinuteOfHour?null:e.reverse?new Xr(e):new Jr(e),normalizeOptions:(e,t)=>{if(void 0!==e.byMinuteOfHour){if(!Lr(e.byMinuteOfHour))throw new Mn('"byMinuteOfHour" expects a non-empty array');if(e.byMinuteOfHour.some((e=>e<0||e>59)))throw new Mn('"byMinuteOfHour" values must be >= 0 && <= 59');t.byMinuteOfHour=e.byMinuteOfHour,t.byMinuteOfHour.sort(Pn)}else["MINUTELY","SECONDLY","MILLISECONDLY"].includes(e.frequency)||(t.byMinuteOfHour=[t.start.get("minute")])},deps:()=>[zr,eo,Kr,Gr]};class to extends $r{constructor(){super(...arguments),this.baseGranularity="day",this.granularity="hour",this.option=this.options.byHourOfDay.slice().reverse()}}class no extends Vr{constructor(){super(...arguments),this.baseGranularity="day",this.granularity="hour",this.option=this.options.byHourOfDay}}const ro={name:"ByHourOfDay",get:e=>void 0===e.options.byHourOfDay?null:e.reverse?new to(e):new no(e),normalizeOptions:(e,t)=>{if(void 0!==e.byHourOfDay){if(!Lr(e.byHourOfDay))throw new Mn('"byHourOfDay" expects a non-empty array');if(e.byHourOfDay.some((e=>e<0||e>23)))throw new Mn('"byHourOfDay" values must be >= 0 && <= 23');t.byHourOfDay=e.byHourOfDay,t.byHourOfDay.sort(Pn)}else["YEARLY","MONTHLY","WEEKLY","DAILY"].includes(e.frequency)&&(t.byHourOfDay=[t.start.get("hour")])},deps:()=>[zr,ro,eo,Kr,Gr]};function oo(e,t){return e.add(gn(e.get("weekday"),t),"day")}function io(e,t,n){let r=e.set("day",1);return n<0&&(r=r.add(1,"month")),r=oo(r,t),n<0?r.add(n,"week"):r.add(n-1,"week")}class ao extends Ur{run(e){const t=so(e,this.options.byDayOfMonth,this.options.byDayOfWeek),n=e.get("day");for(const r of t)if(!(n>r))return n===r?this.validateDate(new zn(e)):this.validateDate(new Ln(e.granularity("month").set("day",r)));let r,o=e,i=0;for(;!r&&i<30;)o=o.granularity("month").add(1,"month"),r=so(o,this.options.byDayOfMonth,this.options.byDayOfWeek)[0],i++;if(i>=13)throw new jn("byDayOfMonth Infinite while loop");return this.validateDate(new Ln(o.set("day",r)))}}function so(e,t,n){const r=e.endGranularity("month").get("day");let o=t.filter((e=>r>=Math.abs(e))).map((e=>e>0?e:r+e+1));if(n){const t=e.granularity("month"),r=[];n.forEach((n=>{if("string"==typeof n)return void r.push(...o.filter((e=>t.set("day",e).get("weekday")===n)));const i=io(e,...n).get("day");o.includes(i)&&r.push(i)})),o=Array.from(new Set(r))}return o.sort(((e,t)=>e>t?1:e<t?-1:0))}class lo extends Yr{run(e){const t=so(e,this.options.byDayOfMonth,this.options.byDayOfWeek).reverse(),n=e.get("day");for(const r of t)if(!(n<r))return n===r?this.validateDate(new zn(e)):this.validateDate(new Ln(e.endGranularity("month").set("day",r)));let r,o=e,i=0;for(;!r&&i<30;)o=o.endGranularity("month").subtract(1,"month"),r=so(o,this.options.byDayOfMonth,this.options.byDayOfWeek).pop(),i++;if(i>=13)throw new jn("byDayOfMonth Infinite while loop");return this.validateDate(new Ln(o.set("day",r)))}}const uo={name:"ByDayOfMonth",get:e=>void 0===e.options.byDayOfMonth?null:e.reverse?new lo(e):new ao(e),normalizeOptions:(e,t)=>{if(void 0!==e.byDayOfMonth){if("WEEKLY"===e.frequency)throw new Mn('when "frequency" is "WEEKLY", "byDayOfMonth" cannot be present');if(!Lr(e.byDayOfMonth))throw new Mn('"byDayOfMonth" expects a non-empty array');if(e.byDayOfMonth.some((e=>0===e||e<-31||e>31)))throw new Mn('"byDayOfMonth" values must be `num !== 0 && num <= 31 && num >= -31`');t.byDayOfMonth=e.byDayOfMonth.slice()}else Lr(e.byDayOfWeek)||Lr(e.byDayOfYear)||!["YEARLY","MONTHLY"].includes(e.frequency)||(t.byDayOfMonth=[t.start.get("day")])},deps:()=>[zr,uo,ro,eo,Kr,Gr]};function co(e,t,n){let r=e.set("month",1).set("day",1);return n<0&&(r=r.add(1,"year")),r=oo(r,t),n<0?r.add(n,"week"):r.add(n-1,"week")}function po(e,t){const n=gn(e.get("weekday"),t);return e.subtract(0===n?0:7-n,"day")}class fo extends Yr{run(e){return"YEARLY"===this.options.frequency?void 0===this.options.byMonthOfYear?this.expandYearly(e):this.expandMonthly(e):"MONTHLY"===this.options.frequency?this.expandMonthly(e):this.expand(e)}expandYearly(e){let t=ho(e,this.options.byDayOfWeek)[0],n=0,r=e;for(;!t&&n<28;)n++,r=r.granularity("year").subtract(1,"millisecond"),t=ho(r,this.options.byDayOfWeek)[0];if(!t)throw new jn("The byDayOfWeek rule appears to contain an impossible combination");return this.result(e,t)}expandMonthly(e){let t=mo(e,this.options.byDayOfWeek)[0],n=0,r=e;for(;!t&&n<50;)n++,r=r.granularity("month").subtract(1,"millisecond"),t=mo(r,this.options.byDayOfWeek)[0];if(!t)throw new jn("The byDayOfWeek rule appears to contain an impossible combination");return this.result(e,t)}expand(e){const t=this.options.byDayOfWeek.map((t=>po(e,t))).sort(pn).pop();return this.result(e,t)}result(e,t){return t.isEqual(e)?this.validateDate(new zn(e)):this.validateDate(new Ln(t.endGranularity("day")))}}function ho(e,t){return fn([...t.filter((e=>Array.isArray(e))).map((t=>co(e,...t))),...t.filter((e=>"string"==typeof e)).map((t=>po(e,t))).filter((t=>t.get("year")===e.get("year")))]).filter((t=>t.isBeforeOrEqual(e))).sort(pn).reverse()}function mo(e,t){return fn([...t.filter((e=>Array.isArray(e))).map((t=>io(e,...t))),...t.filter((e=>"string"==typeof e)).map((t=>po(e,t))).filter((t=>t.get("year")===e.get("year")&&t.get("month")===e.get("month")))]).filter((t=>t.isBeforeOrEqual(e))).sort(pn).reverse()}class go extends Ur{run(e){return"YEARLY"===this.options.frequency?void 0===this.options.byMonthOfYear?this.expandYearly(e):this.expandMonthly(e):"MONTHLY"===this.options.frequency?this.expandMonthly(e):this.expand(e)}expandYearly(e){let t=yo(e,this.options.byDayOfWeek)[0],n=0,r=e;for(;!t&&n<28;)n++,r=r.granularity("year").add(1,"year"),t=yo(r,this.options.byDayOfWeek)[0];if(!t)throw new jn("The byDayOfWeek rule appears to contain an impossible combination");return this.result(e,t)}expandMonthly(e){let t=vo(e,this.options.byDayOfWeek)[0],n=0,r=e;for(;!t&&n<50;)n++,r=r.granularity("month").add(1,"month"),t=vo(r,this.options.byDayOfWeek)[0];if(!t)throw new jn("The byDayOfWeek rule appears to contain an impossible combination");return this.result(e,t)}expand(e){const t=this.options.byDayOfWeek.map((t=>oo(e,t))).sort(pn)[0];return this.result(e,t)}result(e,t){return t.isEqual(e)?this.validateDate(new zn(e)):this.validateDate(new Ln(t.granularity("day")))}}function yo(e,t){return fn([...t.filter((e=>Array.isArray(e))).map((t=>co(e,...t))),...t.filter((e=>"string"==typeof e)).map((t=>oo(e,t))).filter((t=>t.get("year")===e.get("year")))]).filter((t=>t.isAfterOrEqual(e))).sort(pn)}function vo(e,t){return fn([...t.filter((e=>Array.isArray(e))).map((t=>io(e,...t))),...t.filter((e=>"string"==typeof e)).map((t=>oo(e,t))).filter((t=>t.get("year")===e.get("year")&&t.get("month")===e.get("month")))]).filter((t=>t.isAfterOrEqual(e))).sort(pn)}const bo={name:"ByDayOfWeek",get:e=>void 0===e.options.byDayOfWeek?null:e.reverse?new fo(e):new go(e),normalizeOptions:(e,t)=>{if(void 0!==e.byDayOfWeek){if(!Lr(e.byDayOfWeek))throw new Mn('"byDayOfWeek" expects a non-empty array');const n=e.byDayOfWeek.find((e=>Array.isArray(e)?!ln.WEEKDAYS.includes(e[0]):!ln.WEEKDAYS.includes(e)));if(n)throw new Mn(`"byDayOfWeek" expects weedays in the form ${JSON.stringify(ln.WEEKDAYS)} but "${n}" was provided`);if(!["YEARLY","MONTHLY"].includes(e.frequency)&&e.byDayOfWeek.some((e=>Array.isArray(e))))throw new Mn('"byDayOfWeek" can only include a numeric value (i.e. `[string, number]`) when the "frequency" is either "MONTHLY" or "YEARLY"');if("MONTHLY"===e.frequency&&e.byDayOfWeek.some((e=>Array.isArray(e)&&(e[1]<-31||0===e[1]||e[1]>31))))throw new Mn('when "frequency" is "MONTHLY", each "byDayOfWeek" can optionally only have a numeric value >= -31 and <= 31 and !== 0');if("YEARLY"===e.frequency&&e.byDayOfWeek.some((e=>Array.isArray(e)&&(e[1]<-366||0===e[1]||e[1]>366))))throw new Mn('when "frequency" is "YEARLY", each "byDayOfWeek" can optionally only have a numeric value >= -366 and <= 366 and !== 0');t.byDayOfWeek=e.byDayOfWeek}else Lr(e.byDayOfMonth)||"WEEKLY"!==e.frequency||(t.byDayOfWeek=[t.start.get("weekday")])},deps:()=>[zr,bo,ro,eo,Kr,Gr]};class Ao extends Yr{constructor(){super(...arguments),this.option=this.processor.options.byMonthOfYear.slice().reverse()}run(e){const t=e.get("month");for(const n of this.option)if(!(t<n))return t===n?this.validateDate(new zn(e)):this.validateDate(new Ln(e.endGranularity("year").set("month",n)));return this.validateDate(new Ln(e.endGranularity("year").subtract(1,"year").set("month",this.option[0])))}}class Co extends Ur{run(e){const t=e.get("month");for(const n of this.options.byMonthOfYear)if(!(t>n))return t===n?this.validateDate(new zn(e)):this.validateDate(new Ln(e.granularity("year").set("month",n)));return this.validateDate(new Ln(e.granularity("year").add(1,"year").set("month",this.options.byMonthOfYear[0])))}}const wo={name:"ByMonthOfYear",get:e=>void 0===e.options.byMonthOfYear?null:e.reverse?new Ao(e):new Co(e),normalizeOptions:(e,t)=>{if(void 0!==e.byMonthOfYear){if(!Lr(e.byMonthOfYear))throw new Mn('"byMonthOfYear" expects a non-empty array');if(e.byMonthOfYear.some((e=>e<1||e>12)))throw new Mn('"byMonthOfYear" values must be `num >= 1 && num >= 12`');t.byMonthOfYear=e.byMonthOfYear.slice(),t.byMonthOfYear.sort(Pn)}else Lr(e.byDayOfMonth)||Lr(e.byDayOfWeek)||Lr(e.byDayOfYear)||"YEARLY"!==e.frequency||(t.byMonthOfYear=[t.start.get("month")])},deps:()=>[zr,wo,uo,ro,eo,Kr,Gr]},xo=[zr,wo,uo,bo,ro,eo,Kr,Gr];class Eo extends an{constructor(e,t={}){if(super(void 0,t),!["UTC",null,void 0].includes(t.timezone))throw new rn(`StandardDateAdapter only supports "UTC" and local time zones but "${t.timezone}" was provided.`);this._date=new Date(e),this.timezone=void 0!==t.timezone?t.timezone:null,this.assertIsValid()}static isDate(e){return"[object Date]"===Object.prototype.toString.call(e)}static fromDate(e,t){return new Eo(e,t)}static fromJSON(e){const t=[e.year,e.month-1,e.day,e.hour,e.minute,e.second,e.millisecond];switch(e.timezone){case"UTC":return new Eo(new Date(Date.UTC(...t)),{timezone:"UTC",duration:e.duration});case null:return new Eo(new Date(...t),{timezone:null,duration:e.duration});default:throw new rn(`The \`StandardDateAdapter\` only supports datetimes in UTC or LOCAL (null) time. You provided a JSON object with timezone "${e.timezone}".`)}}static fromDateTime(e){const t=Eo.fromJSON(e.toJSON());return t.generators.push(...e.generators),t}get date(){return new Date(this._date)}get end(){if(this.duration)return this._end||(this._end=Eo.fromDateTime(this.toDateTime().add(this.duration,"millisecond")).date),this._end}set(e,t){if("timezone"===e)return this.timezone===t?this:new Eo(this._date,{timezone:t,duration:this.duration,generators:this.generators});if("duration"===e)return this.duration===t?this:new Eo(this._date,{timezone:this.timezone,duration:t,generators:this.generators});throw new Dn(`Unknown prop "${e}" for StandardDateAdapter#set()`)}valueOf(){return this._date.valueOf()}toJSON(){let e;return e="UTC"===this.timezone?{timezone:this.timezone,year:this._date.getUTCFullYear(),month:this._date.getUTCMonth()+1,day:this._date.getUTCDate(),hour:this._date.getUTCHours(),minute:this._date.getUTCMinutes(),second:this._date.getUTCSeconds(),millisecond:this._date.getUTCMilliseconds()}:{timezone:this.timezone,year:this._date.getFullYear(),month:this._date.getMonth()+1,day:this._date.getDate(),hour:this._date.getHours(),minute:this._date.getMinutes(),second:this._date.getSeconds(),millisecond:this._date.getMilliseconds()},this.duration&&(e.duration=this.duration),e}assertIsValid(){if(!Eo.isDate(this._date)||isNaN(this._date.valueOf()))throw new rn("StandardDateAdapter has invalid date.");if(![null,"UTC"].includes(this.timezone))throw new rn(`StandardDateAdapter only supports local (null) and UTC timezones but "${this.timezone}" was specified.`);if(this.duration&&this.duration<=0)throw new rn("If provided, duration must be greater than 0.");return!0}}function ko(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function So(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){ko(i,r,o,a,s,"next",e)}function s(e){ko(i,r,o,a,s,"throw",e)}a(void 0)}))}}Eo.hasTimezoneSupport=!1,an.adapter=Eo,Sr.recurrenceRules=xo;var Bo=function(){var e=So(regeneratorRuntime.mark((function e(t,n,r,o,i){var a,s,l,u=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=u.length>5&&void 0!==u[5]?u[5]:function(){},s=!(u.length>6&&void 0!==u[6])||u[6],e.prev=2,i&&(A().defaults.headers.common.Authorization=localStorage.getItem("token")),km.dispatch(wt()),e.next=7,A().post(t,n);case 7:l=e.sent,e.next=15;break;case 10:e.prev=10,e.t0=e.catch(2),console.log(e.t0),s&&km.dispatch(At(o||"Cannot connect to the server, please try again later.")),a(null,"There was a problem connecting to the server: "+e.t0);case 15:return e.prev=15,km.dispatch(xt()),$t().isDefined(l.data)?r===l.data.message?(s&&km.dispatch(Ct(l.data.message)),a(l.data)):(s&&km.dispatch(At("There was an error: "+l.data.message)),a(null,l.data.message)):(km.dispatch(At("There was an error, the server sent undefined results")),a(null,"There was an error, the server sent undefined results")),e.finish(15);case 20:case"end":return e.stop()}}),e,null,[[2,10,15,20]])})));return function(t,n,r,o,i){return e.apply(this,arguments)}}(),Oo=function(){var e=So(regeneratorRuntime.mark((function e(t,n,r,o){var i,a,s,l=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=l.length>4&&void 0!==l[4]?l[4]:function(){},a=!(l.length>5&&void 0!==l[5])||l[5],e.prev=2,o&&(A().defaults.headers.common.Authorization=localStorage.getItem("token")),km.dispatch(wt()),e.next=7,A().get(t);case 7:s=e.sent,e.next=15;break;case 10:e.prev=10,e.t0=e.catch(2),console.log(e.t0),a&&km.dispatch(At(r||"Cannot connect to the server, please try again later.")),i(null,"There was a problem connecting to the server: "+e.t0);case 15:return e.prev=15,km.dispatch(xt()),$t().isDefined(s.data)?n===s.data.message?(a&&km.dispatch(Ct(s.data.message)),i(s.data)):(a&&km.dispatch(At("There was an error: "+s.data.message)),i(null,s.data.message)):(km.dispatch(At("There was an error, the server sent undefined results")),i(null,"There was an error, the server sent undefined results")),e.finish(15);case 20:case"end":return e.stop()}}),e,null,[[2,10,15,20]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),To=function(){var e=So(regeneratorRuntime.mark((function e(t,n,r,o,i){var a,s,l,u=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=u.length>5&&void 0!==u[5]?u[5]:function(){},s=!(u.length>6&&void 0!==u[6])||u[6],e.prev=2,i&&(A().defaults.headers.common.Authorization=localStorage.getItem("token")),km.dispatch(wt()),e.next=7,A().delete(t,{data:n});case 7:l=e.sent,e.next=14;break;case 10:e.prev=10,e.t0=e.catch(2),a(null,"There was a problem connecting to the server: "+e.t0),s&&km.dispatch(At(o||"Cannot connect to the server, please try again later."));case 14:return e.prev=14,km.dispatch(xt()),$t().isDefined(l.data)?r===l.data.message?(a(l.data),s&&km.dispatch(Ct(l.data.message))):(a(null,l.data.message),s&&km.dispatch(At("There was an error: "+l.data.message))):(a(null,"There was an error, the server sent undefined results"),km.dispatch(At("There was an error, the server sent undefined results"))),e.finish(14);case 19:case"end":return e.stop()}}),e,null,[[2,10,14,19]])})));return function(t,n,r,o,i){return e.apply(this,arguments)}}(),Do=function(){var e=So(regeneratorRuntime.mark((function e(t,n,r,o,i){var a,s,l=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=l.length>5&&void 0!==l[5]?l[5]:function(){},e.prev=1,i&&(A().defaults.headers.common.Authorization=localStorage.getItem("token")),km.dispatch(wt()),e.next=6,A().post(t,n,{headers:{"Content-Type":"multipart/form-data"}});case 6:s=e.sent,e.next=14;break;case 9:e.prev=9,e.t0=e.catch(1),console.log(e.t0),km.dispatch(At(o||"Cannot connect to the server, please try again later.")),a(null,"There was a problem connecting to the server: "+e.t0);case 14:return e.prev=14,km.dispatch(xt()),$t().isDefined(s.data)?r===s.data.message?(km.dispatch(Ct(s.data.message)),a(s.data)):(km.dispatch(At("There was an error: "+s.data.message)),a(null,s.data.message)):(km.dispatch(At("There was an error, the server sent undefined results")),a(null,"There was an error, the server sent undefined results")),e.finish(14);case 19:case"end":return e.stop()}}),e,null,[[1,9,14,19]])})));return function(t,n,r,o,i){return e.apply(this,arguments)}}(),No=function(e){var t={};if(e.meetings&&0!==e.meetings.length&&(t=e.meetings[0],e.meetings.forEach((function(e){new Date(e.date)<=new Date(t.date)&&new Date(e.date)>=new Date&&(t=e),console.log(t)}))),e.recurringMeeting){var n,r=new Date(e.recurringMeeting.date);return console.log("START DATE",r,e.recurringMeeting),n=new Ir({rrules:[{frequency:e.recurringMeeting.frequency.toUpperCase(),start:r,end:new Date(r.getFullYear()+5,r.getMonth(),r.getDate())}]}).occurrences().toArray().filter((function(e){return e.date>=new Date})).map((function(e){var t=e.date;return new Date(t).toLocaleDateString()}))[0],e.recurringMeeting.date=n,0!==e.meetings.length&&new Date(n)>new Date(t.date)?t:e.recurringMeeting}return t};function Po(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Io(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Ro(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return _o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_o(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Mo=function(){var e,n=Pe(),r=Me((function(e){return e.authReducer.user})),o=Ro((0,t.useState)(""),2),i=o[0],a=o[1],s=Ro((0,t.useState)(""),2),l=s[0],u=s[1],c=Ro((0,t.useState)(tn().Any),2),d=c[0],p=c[1],f=Ro((0,t.useState)("Public"),2),h=f[0],m=f[1],g=Ro((0,t.useState)(""),2),y=g[0],v=g[1],b=Ro((0,t.useState)(!1),2),A=b[0],C=b[1],w=Ro((0,t.useState)(!1),2),x=w[0],E=w[1],k=Ro((0,t.useState)(!1),2),S=k[0],B=k[1],O=Ro((0,t.useState)("#000000"),2),T=O[0],D=O[1],N=Ro((0,t.useState)(""),2),P=(N[0],N[1],function(){var e,t=(e=regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.next=4,Bo(Ut().StudyGroup.CreateStudyGroup,{name:i,groupColor:T,description:l,subject:d,privacySetting:h,course:y,school:A?r.school:"",isTutorGroup:x,isOnlineGroup:S},Kt().StudyGroup.SuccessStudyGroupCreated,Kt().StudyGroup.ErrorCreateStudyGroup,!0,(function(e,t){t||(n(vt(e.newStudyGroup)),n(yt()))}));case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Io(i,r,o,a,s,"next",e)}function s(e){Io(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}());return t.createElement("div",{className:"create-studygroup-view"},t.createElement(nn,(Po(e={submitCreateStudyGroup:P,name:i,description:l,subject:d,privacy:h,courseCode:y,isAssociatedWithSchool:A,isTutorGroup:x,isOnlineGroup:S,groupColor:T,updateNameField:function(e){a(e.target.value)},updateDescriptionField:function(e){u(e.target.value)},updateSubjectField:function(e){p(e.target.options[e.target.selectedIndex].value)},updatePrivacy:function(e){m(e.target.options[e.target.selectedIndex].value)},updateCourseCodeField:function(e){v(e.target.value)},updateIsAssociatedWithSchool:function(e){C(e.target.checked)},updateIsTutorGroup:function(e){E(e.target.checked)},updateIsOnlineGroup:function(e){B(e.target.checked)},updateGroupColor:function(e){D(e.target.value)}},"submitCreateStudyGroup",P),Po(e,"userSchool",r.school),e)))};var Zo=n(5935),jo={};function zo(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Lo(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){zo(i,r,o,a,s,"next",e)}function s(e){zo(i,r,o,a,s,"throw",e)}a(void 0)}))}}jo.styleTagTransform=g(),jo.setAttributes=p(),jo.insert=c().bind(null,"head"),jo.domAPI=l(),jo.insertStyleElement=h(),a()(Zo.Z,jo),Zo.Z&&Zo.Z.locals&&Zo.Z.locals;const Fo=function(e){var n=e.group,r=n.name,o=n.school,i=n.owner,a=n.subject,s=n.course,l=n.isTutorGroup,u=n.isOnlineGroup,c=n.groupColor,d=n.description,p=n._id,f=(Me((function(e){return e.authReducer.user})),Pe()),h=de(),m=function(){var e=Lo(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),console.log("Submitting"),e.next=5,Bo(Ut().StudyGroup.JoinStudyGroup,{studyGroupId:p},Kt().StudyGroup.SuccessStudyGroupJoined,null,!0,(function(e,t){t||(f(vt(n)),f(yt()))}));case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),g=function(){var e=Lo(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.next=4,Bo(Ut().Message.CreateConversation,{receiverId:i._id},Kt().Message.SuccessCreateConversation,null,!0,(function(e,t){t||(f(yt()),h.push("/message"))}));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return t.createElement("div",{className:"join-group-container"},t.createElement("div",{className:"group-popup-title",style:{backgroundColor:"".concat(c,"70")}},t.createElement("h1",null,r)),t.createElement("div",{className:"popup-info-fields"},t.createElement("div",{className:"info"},t.createElement(Lt,null,"Description"),t.createElement("p",null,d)),t.createElement("div",{className:"sub-info"},t.createElement("div",{className:"info"},t.createElement(Lt,null,"Owner"),t.createElement("p",null,i.name)),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Course Code"),t.createElement("p",null,s)),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Subject"),t.createElement("p",null,a)),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Associated With"),t.createElement("p",null,o)),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Type"),t.createElement("p",null,l?t.createElement("p",null,"Tutor"):t.createElement("p",null,"Group"))),t.createElement("div",{className:"info"},t.createElement(Lt,null,"Meeting Format"),t.createElement("p",null,u?t.createElement("p",null,"Online"):t.createElement("p",null,"In Person"))),n.recurringMeeting&&t.createElement("div",{className:"info"},n.isOnlineGroup?t.createElement(Lt,null,"Meets ",t.createElement("strong",null,"Online"),":"):t.createElement(Lt,null,"Meets ",t.createElement("strong",null,"In-Person"),":"),t.createElement("p",null,n.recurringMeeting.frequency," on ",n.recurringMeeting.day," at"," ",n.recurringMeeting.time)))),t.createElement("div",{className:"side-by-side"},t.createElement(Mt,{type:Pt,onClick:g},"Message Study Group Owner"),t.createElement(Mt,{type:It,onClick:m},"Join")))};var Uo=n(8677),Yo={};function $o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Yo.styleTagTransform=g(),Yo.setAttributes=p(),Yo.insert=c().bind(null,"head"),Yo.domAPI=l(),Yo.insertStyleElement=h(),a()(Uo.Z,Yo),Uo.Z&&Uo.Z.locals&&Uo.Z.locals;const Vo=function(e){var n=e.label,r=e.defaultInput,o=void 0===r?"":r,i=e.callback,a=e.label2,s=void 0===a?"":a,l=(Pe(),$o((0,t.useState)(o),2)),u=l[0],c=l[1],d=$o((0,t.useState)(o),2),p=d[0],f=d[1];return t.createElement(Tt,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),i(u,p),c("")}},t.createElement(jt,null,t.createElement(Lt,null,n),t.createElement(Vt,{onChange:function(e){c(e.target.value)},value:u})),""!==s&&t.createElement(jt,null,t.createElement(Lt,null,s),t.createElement(Vt,{onChange:function(e){f(e.target.value)},value:p})),t.createElement(Mt,{type:It},"Done"))};var qo=n(2131),Go={};Go.styleTagTransform=g(),Go.setAttributes=p(),Go.insert=c().bind(null,"head"),Go.domAPI=l(),Go.insertStyleElement=h(),a()(qo.Z,Go),qo.Z&&qo.Z.locals&&qo.Z.locals;const Ho=function(e){var n=e.callback,r=e.message,o=e.isConfirmation,i=e.firstButtonTitle,a=e.secondButtonTitle,s=Pe();return t.createElement("div",{className:"confirmation-container"},t.createElement("p",null,r),t.createElement("div",{className:"side-by-side"},t.createElement(Mt,{onClick:function(){s(yt()),n(!0)},type:o?Rt:Pt},i||"Yes"),t.createElement(Mt,{onClick:function(){s(yt()),n(!1)},type:Pt},a||"No")))},Qo={Login:"Login",ForgotPassword:"Forgot password",CreateAccount:"Create account",VerificationEmailConfirmation:"Verification email confirmation",AccountSetup:"Account setup"},Ko={StudyGroup:{Join:"Join Study Group",Create:"Create Study Group",Edit:"Edit Study Group",CreateMeeting:"Create Meeting",CreatePost:"Create Post",ViewPost:"View Post",ViewMeetings:"View Meetings",ViewMember:"View Member"},Input:"Input Information",Confirmation:"Confirm",Report:"Report"};function Xo(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Jo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ei(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ei(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ei(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ti=function(e){var n=e.group,r=Pe(),o=de(),i=Jo((0,t.useState)(n.name),2),a=i[0],s=i[1],l=Jo((0,t.useState)(n.description),2),u=l[0],c=l[1],d=Jo((0,t.useState)(n.subject),2),p=d[0],f=d[1],h=Jo((0,t.useState)(n.privacy),2),m=h[0],g=h[1],y=Jo((0,t.useState)(n.courseCode),2),v=y[0],b=y[1],A=Jo((0,t.useState)(n.isTutorGroup),2),C=A[0],w=A[1],x=Jo((0,t.useState)(n.isOnlineGroup),2),E=x[0],k=x[1],S=Jo((0,t.useState)(n.groupColor),2),B=S[0],O=S[1],T=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.next=4,Bo(Ut().StudyGroup.EditStudyGroup,{studyGroupId:n._id,name:a,groupColor:B,description:u,subject:p,privacySetting:m,course:v,isTutorGroup:C,isOnlineGroup:E},Kt().StudyGroup.SuccessStudyGroupEdited,null,!0,(function(e,t){t&&console.log(t),o.go(0),r(yt())}));case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Xo(i,r,o,a,s,"next",e)}function s(e){Xo(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return t.createElement("div",{className:"edit-studygroup-view"},console.log(n),t.createElement(nn,{submitCreateStudyGroup:T,name:a,description:u,subject:p,privacy:m,courseCode:v,isTutorGroup:C,isOnlineGroup:E,groupColor:B,updateNameField:function(e){s(e.target.value)},updateDescriptionField:function(e){c(e.target.value)},updateSubjectField:function(e){f(e.target.options[e.target.selectedIndex].value)},updatePrivacy:function(e){g(e.target.options[e.target.selectedIndex].value)},updateCourseCodeField:function(e){b(e.target.value)},updateIsTutorGroup:function(e){w(e.target.checked)},updateIsOnlineGroup:function(e){k(e.target.checked)},updateGroupColor:function(e){O(e.target.value)},userSchool:null}))};var ni=n(4193);function ri(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const oi=function(e){var n,r=e.date,o=e.time,i=e.frequency,a=e.details,s=e.location,l=e.roomNumber,u=e.updateDateField,c=e.updateTimeField,d=e.updateFrequencyField,p=e.updateDetailsField,f=e.updateLocationField,h=e.updateRoomNumberField,m=e.submitCreateMeeting,g=e.isRecurringMeeting;return t.createElement("div",{className:"create-meeting-form"},t.createElement(Tt,{onSubmit:m},t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Date"),t.createElement(Vt,{value:r,onChange:u,type:"date"})),t.createElement(jt,null,t.createElement(Lt,null,"Time"),t.createElement(Vt,{value:o,onChange:c,type:"time"})),g&&t.createElement(jt,null,t.createElement(Lt,null,"Frequency"),t.createElement(Xt,{options:(n=Object.values(ni.MeetingFrequencies),function(e){if(Array.isArray(e))return ri(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return ri(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ri(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),value:i,onChange:d}))),t.createElement(jt,null,t.createElement(Lt,null,"Details"),t.createElement(Vt,{value:a,onChange:p,isTextArea:!0})),t.createElement(jt,null,t.createElement(Lt,null,"Location"),t.createElement(Vt,{value:s,onChange:f})),t.createElement(jt,null,t.createElement(Lt,null,"Room Number (if applicable)"),t.createElement(Vt,{value:l,onChange:h})),t.createElement(Mt,{type:It},"Create")))};function ii(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ai(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ai(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ai(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const si=function(e){var n=e.group,r=e.isRecurringMeeting,o=Pe(),i=de(),a=ii((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.date.replace("/","-"):""),2),s=a[0],l=a[1],u=ii((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.time:""),2),c=u[0],d=u[1],p=ii((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.frequency:ni.MeetingFrequencies.Daily),2),f=p[0],h=p[1],m=ii((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.details:""),2),g=m[0],y=m[1],v=ii((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.location:""),2),b=v[0],A=v[1],C=ii((0,t.useState)(r&&n.recurringMeeting?n.recurringMeeting.roomNumber:""),2),w=C[0],x=C[1];return t.createElement(t.Fragment,null,t.createElement(oi,{date:s,time:c,frequency:f,details:g,location:b,roomNumber:w,updateDateField:function(e){l(e.target.value)},updateTimeField:function(e){d(e.target.value)},updateFrequencyField:function(e){h(e.target.value)},updateDetailsField:function(e){y(e.target.value)},updateLocationField:function(e){A(e.target.value)},updateRoomNumberField:function(e){x(e.target.value)},submitCreateMeeting:function(e){e.preventDefault(),e.stopPropagation(),r?Bo(Ut().StudyGroup.SetRecurringMeeting,{day:new Date(s).getDay(),date:s.replace(/-/g,"/"),time:c,frequency:f,details:g,location:b,roomNumber:w,studyGroupId:n._id},Kt().StudyGroup.SetRecurringMeeting.Success,null,!0,(function(e,t){t||(o(yt()),i.go(0))})):Bo(Ut().StudyGroup.AddOneTimeMeeting,{day:new Date(s).getDay(),date:s.replace(/-/g,"/"),time:c,details:g,location:b,roomNumber:w,studyGroupId:n._id},Kt().StudyGroup.AddOneTimeMeeting.Success,null,!0,(function(e,t){t||(o(yt()),i.go(0))}))},isRecurringMeeting:r}))},li=function(e){var n=e.title,r=e.body,o=e.category,i=e.attachment,a=e.updateTitleField,s=e.updateBodyField,l=e.updateCategoryField,u=e.updateAttachment,c=e.submitCreatePost;return t.createElement("div",{className:"create-meeting-form"},t.createElement(Tt,{onSubmit:c},t.createElement(jt,null,t.createElement(Lt,null,"Title"),t.createElement(Vt,{value:n,onChange:a})),t.createElement(jt,null,t.createElement(Lt,null,"Body"),t.createElement(Vt,{value:r,onChange:s,isTextArea:!0})),t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Category"),t.createElement(Xt,{value:o,onChange:l,options:["Problem","Discussion","Question","Announcement"]})),t.createElement(jt,null,t.createElement(Lt,null,"Attachment"),t.createElement("div",{className:"photo"},t.createElement("input",{type:"file",id:"fileInput right",accept:".png, .jpg, .jpeg",name:"profilePicture",onChange:u}),t.createElement("img",{className:"imgPreview",id:"left",src:i,alt:""})))),t.createElement(Mt,{type:It},"Create")))};var ui=n(9114),ci=n.n(ui);function di(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function pi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return fi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const hi=function(e){var n=e.group,r=pi((0,t.useState)(""),2),o=r[0],i=r[1],a=pi((0,t.useState)(""),2),s=a[0],l=a[1],u=pi((0,t.useState)(ci().Problem),2),c=u[0],d=u[1],p=pi((0,t.useState)(""),2),f=p[0],h=p[1],m=de(),g=Pe(),y=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),(r=new FormData).append("title",o),r.append("message",s),r.append("category",c),r.append("attachment",f),r.append("studyGroupId",n._id),e.next=10,Do(Ut().StudyGroup.CreatePost,r,Kt().StudyGroup.CreatePost.Success,null,!0,(function(e,t){t||(g(yt()),m.go(0))}));case 10:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){di(i,r,o,a,s,"next",e)}function s(e){di(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return t.createElement(li,{title:o,body:s,category:c,attachment:f,updateTitleField:function(e){i(e.target.value)},updateBodyField:function(e){l(e.target.value)},updateCategoryField:function(e){d(e.target.value)},updateAttachment:function(e){h(e.target.files[0])},submitCreatePost:y})};var mi=n(116),gi={};gi.styleTagTransform=g(),gi.setAttributes=p(),gi.insert=c().bind(null,"head"),gi.domAPI=l(),gi.insertStyleElement=h(),a()(mi.Z,gi),mi.Z&&mi.Z.locals&&mi.Z.locals;var yi=n(417),vi={};vi.styleTagTransform=g(),vi.setAttributes=p(),vi.insert=c().bind(null,"head"),vi.domAPI=l(),vi.insertStyleElement=h(),a()(yi.Z,vi),yi.Z&&yi.Z.locals&&yi.Z.locals;const bi=function(e){var n=e.image;return t.createElement("img",{className:"profile-picture",src:"data:image/png;charset=utf-8;base64,"+n,alt:""})};var Ai=n(1985),Ci={};Ci.styleTagTransform=g(),Ci.setAttributes=p(),Ci.insert=c().bind(null,"head"),Ci.domAPI=l(),Ci.insertStyleElement=h(),a()(Ai.Z,Ci),Ai.Z&&Ai.Z.locals&&Ai.Z.locals;var wi=n(3094),xi=n(9584),Ei=n(4603),ki=n(9572),Si=n(3570),Bi=function(e){var n,r;switch(e.type){case ci().Question:n=t.createElement(wi.Z,{className:"top-icon",style:{color:e.color}}),r="Answer";break;case ci().Announcement:n=t.createElement(xi.Z,{className:"top-icon",style:{color:e.color}}),r="Comment";break;case ci().Discussion:n=t.createElement(Ei.Z,{className:"top-icon",style:{color:e.color}}),r="Reply";break;case ci().Problem:n=t.createElement(ki.Z,{className:"top-icon",style:{color:e.color}}),r="Solution";break;case ci().Meeting:n=t.createElement(Si.Z,{className:"top-icon",style:{color:e.color}})}return{icon:n,responseType:r}};const Oi=function(e){var n=Pe();return console.log(e),t.createElement("div",{className:"post-container"},t.createElement("div",{className:"post-inner"},t.createElement("div",{className:"post-details",style:{backgroundColor:e.type!==ci().Meeting?"rgba(255, 255, 255, 0.9)":e.group.color+"10",border:e.type===ci().Meeting&&"white 4px solid"},onClick:function(){e.type!==ci().Meeting?n({type:Ve,payload:e}):n(pt(e.group))}},t.createElement("div",{className:"post-inner-content"},t.createElement("div",{className:"post-top"},Bi(e).icon,t.createElement("h1",{style:{backgroundColor:e.color}},e.type)),t.createElement("h1",{className:"post-title"},e.title),t.createElement("p",{className:"post-body"},e.message)),""!==e.attachment?t.createElement("img",{className:"attachment",src:"data:image/png;charset=utf-8;base64,"+e.attachment,alt:""}):""),t.createElement("div",{className:"post-metainfo"},t.createElement("p",{className:"post-date"},e.timestamp&&new Date(e.timestamp).toLocaleDateString()))),t.createElement("div",{className:"post-creator",onClick:function(){return n(ft(e.creator))}},t.createElement(bi,{image:e.creator.profilePicture})))};function Ti(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Di=function(e){var n=e.post,r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ti(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ti(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(""),2),o=(r[0],r[1],Pe());return t.createElement("div",null,t.createElement("div",{className:"view-post-top"},Bi(n).icon,t.createElement("h1",{style:{backgroundColor:n.color}},n.type)),t.createElement("div",{className:"post-contents"},t.createElement("h1",{className:"post-title"},n.title),t.createElement("div",{className:"post-body"},t.createElement("p",{className:"post-message"},n.message),t.createElement("img",{className:"post-attachment",src:"data:image/png;charset=utf-8;base64,"+n.attachment})),t.createElement("div",{className:"post-creator",onClick:function(){return o(ft(n.creator))}},t.createElement("p",null,n.creator.name),t.createElement(bi,{image:n.creator.profilePicture}))),t.createElement(Mt,{onClick:function(){o(gt("Post",n))}},"Report"))};var Ni=n(8841),Pi={};Pi.styleTagTransform=g(),Pi.setAttributes=p(),Pi.insert=c().bind(null,"head"),Pi.domAPI=l(),Pi.insertStyleElement=h(),a()(Ni.Z,Pi),Ni.Z&&Ni.Z.locals&&Ni.Z.locals;var Ii=n(6010),Ri=n(7192),_i=(n(1859),n(5638)),Mi=n(444),Zi=n(4199),ji=n(1526),zi=(0,_i.w)((function(e,n){var r=e.styles,o=(0,Zi.O)([r],void 0,(0,t.useContext)(_i.T)),i=(0,t.useRef)();return(0,t.useLayoutEffect)((function(){var e=n.key+"-global",t=new ji.m({key:e,nonce:n.sheet.nonce,container:n.sheet.container,speedy:n.sheet.isSpeedy}),r=!1,a=document.querySelector('style[data-emotion="'+e+" "+o.name+'"]');return n.sheet.tags.length&&(t.before=n.sheet.tags[0]),null!==a&&(r=!0,a.setAttribute("data-emotion",e),t.hydrate([a])),i.current=[t,r],function(){t.flush()}}),[n]),(0,t.useLayoutEffect)((function(){var e=i.current,t=e[0];if(e[1])e[1]=!1;else{if(void 0!==o.next&&(0,Mi.M)(n,o.next,!0),t.tags.length){var r=t.tags[t.tags.length-1].nextElementSibling;t.before=r,t.flush()}n.insert("",o,t,!1)}}),[n,o.name]),null}));function Li(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,Zi.O)(t)}var Fi=function(){var e=Li.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},Ui=n(8216),Yi=n(4368),$i=n(9602),Wi=n(8979),Vi=n(6087);function qi(e){return(0,Wi.Z)("MuiCircularProgress",e)}(0,Vi.Z)("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);var Gi=n(5893);const Hi=["className","color","disableShrink","size","style","thickness","value","variant"];let Qi,Ki,Xi,Ji,ea=e=>e;const ta=Fi(Qi||(Qi=ea`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)),na=Fi(Ki||(Ki=ea`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)),ra=(0,$i.ZP)("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`color${(0,Ui.Z)(n.color)}`]]}})((({ownerState:e,theme:t})=>(0,k.Z)({display:"inline-block"},"determinate"===e.variant&&{transition:t.transitions.create("transform")},"inherit"!==e.color&&{color:t.palette[e.color].main})),(({ownerState:e})=>"indeterminate"===e.variant&&Li(Xi||(Xi=ea`
      animation: ${0} 1.4s linear infinite;
    `),ta))),oa=(0,$i.ZP)("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({display:"block"}),ia=(0,$i.ZP)("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.circle,t[`circle${(0,Ui.Z)(n.variant)}`],n.disableShrink&&t.circleDisableShrink]}})((({ownerState:e,theme:t})=>(0,k.Z)({stroke:"currentColor"},"determinate"===e.variant&&{transition:t.transitions.create("stroke-dashoffset")},"indeterminate"===e.variant&&{strokeDasharray:"80px, 200px",strokeDashoffset:0})),(({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink&&Li(Ji||(Ji=ea`
      animation: ${0} 1.4s ease-in-out infinite;
    `),na))),aa=t.forwardRef((function(e,t){const n=(0,Yi.Z)({props:e,name:"MuiCircularProgress"}),{className:r,color:o="primary",disableShrink:i=!1,size:a=40,style:s,thickness:l=3.6,value:u=0,variant:c="indeterminate"}=n,d=(0,H.Z)(n,Hi),p=(0,k.Z)({},n,{color:o,disableShrink:i,size:a,thickness:l,value:u,variant:c}),f=(e=>{const{classes:t,variant:n,color:r,disableShrink:o}=e,i={root:["root",n,`color${(0,Ui.Z)(r)}`],svg:["svg"],circle:["circle",`circle${(0,Ui.Z)(n)}`,o&&"circleDisableShrink"]};return(0,Ri.Z)(i,qi,t)})(p),h={},m={},g={};if("determinate"===c){const e=2*Math.PI*((44-l)/2);h.strokeDasharray=e.toFixed(3),g["aria-valuenow"]=Math.round(u),h.strokeDashoffset=`${((100-u)/100*e).toFixed(3)}px`,m.transform="rotate(-90deg)"}return(0,Gi.jsx)(ra,(0,k.Z)({className:(0,Ii.Z)(f.root,r),style:(0,k.Z)({width:a,height:a},m,s),ownerState:p,ref:t,role:"progressbar"},g,d,{children:(0,Gi.jsx)(oa,{className:f.svg,ownerState:p,viewBox:"22 22 44 44",children:(0,Gi.jsx)(ia,{className:f.circle,style:h,ownerState:p,cx:44,cy:44,r:(44-l)/2,fill:"none",strokeWidth:l})})}))}));var sa=n(9868),la=n(6523),ua=n(9766),ca=n(4178);const da=["sx"];var pa=n(7878);const fa=["className","component"];var ha=n(9981);const ma=function(e={}){const{defaultTheme:n,defaultClassName:r="MuiBox-root",generateClassName:o}=e,i=(0,sa.ZP)("div")(la.Z);return t.forwardRef((function(e,t){const a=(0,pa.Z)(n),s=function(e){const{sx:t}=e,n=(0,H.Z)(e,da),{systemProps:r,otherProps:o}=(e=>{const t={systemProps:{},otherProps:{}};return Object.keys(e).forEach((n=>{ca.G[n]?t.systemProps[n]=e[n]:t.otherProps[n]=e[n]})),t})(n);let i;return i=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,ua.P)(n)?(0,k.Z)({},r,n):r}:(0,k.Z)({},r,t),(0,k.Z)({},o,{sx:i})}(e),{className:l,component:u="div"}=s,c=(0,H.Z)(s,fa);return(0,Gi.jsx)(i,(0,k.Z)({as:u,ref:t,className:(0,Ii.Z)(l,o?o(r):r),theme:a},c))}))}({defaultTheme:(0,n(4345).Z)(),defaultClassName:"MuiBox-root",generateClassName:ha.Z.generate}),ga=ma,ya=function(){return t.createElement("div",{className:"loading"},t.createElement(ga,{sx:{overflow:"hidden"}},t.createElement(aa,{sx:{color:"#d4aa8c"}})))};var va=n(9068),ba={};function Aa(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Ca(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}ba.styleTagTransform=g(),ba.setAttributes=p(),ba.insert=c().bind(null,"head"),ba.domAPI=l(),ba.insertStyleElement=h(),a()(va.Z,ba),va.Z&&va.Z.locals&&va.Z.locals;const wa=function(e){var n=e.group,r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ca(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ca(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)("All Clear!"),2),o=r[0],i=r[1],a=Me((function(e){return e.authReducer.user})),s=Pe(),l=de();(0,t.useEffect)((function(){i(No(n))}),[]);return t.createElement("div",null,t.createElement("div",{className:"view-meeting-top"},t.createElement(Si.Z,{className:"top-icon",style:{color:n.groupColor}}),t.createElement("h1",{style:{backgroundColor:n.groupColor}},"Meeting Schedule for ",n.name)),t.createElement("div",{className:"meeting-container next-meeting-container"},t.createElement("h1",null,"Next Meeting:"),t.createElement("div",{className:"meeting"},t.createElement("div",{className:"meeting-time"},t.createElement("p",null,t.createElement("span",null,"Date: ")," ",o.date),t.createElement("p",null,t.createElement("span",null,"Time: "),o.time),t.createElement("p",null,t.createElement("span",null,"Location: "),o.location)),t.createElement("div",{className:"meeting-details"},t.createElement("p",null,t.createElement("span",null,"Details: "),o.details)))),t.createElement("hr",null),n.recurringMeeting&&t.createElement("div",{className:"meeting-container"},t.createElement("h1",null,"Recurring Schedule:"),t.createElement("div",{className:"meeting"},t.createElement("div",{className:"meeting-time"},t.createElement("p",null,t.createElement("span",null,"Frequency: ")," ",function(){if(n.recurringMeeting){if(n.recurringMeeting.frequency===ni.MeetingFrequencies.Daily)return t.createElement(t.Fragment,null,"Every day");if(n.recurringMeeting.frequency===ni.MeetingFrequencies.Weekly)return t.createElement(t.Fragment,null,"Every ",n.recurringMeeting.day);if(n.recurringMeeting.frequency===ni.MeetingFrequencies.Monthly)return t.createElement(t.Fragment,null,"On the ",new Date(n.recurringMeeting.date).getDate,"th of every month.");if(n.recurringMeeting.frequency===ni.MeetingFrequencies.Yearly)return t.createElement(t.Fragment,null,"On ",n.recurringMeeting.date," of every year.")}}()),t.createElement("p",null,t.createElement("span",null,"Time: "),n.recurringMeeting.time),t.createElement("p",null,t.createElement("span",null,"Location: "),n.recurringMeeting.location)),t.createElement("div",{className:"meeting-details"},t.createElement("p",null,t.createElement("span",null,"Details: "),n.recurringMeeting.details)))),t.createElement("hr",null),t.createElement("div",{className:"one-time-meetings-container"},t.createElement("h1",null,"One-time Meetings:"),n.owner&&n.owner._id===a._id&&n.meetings.map((function(e){return t.createElement("div",{className:"one-time-meeting-container"},t.createElement("div",{className:"one-time-meeting"},t.createElement("p",null,t.createElement("span",null,"Date"),e.date),t.createElement("p",null,t.createElement("span",null,"Time"),e.time)),t.createElement("div",{className:"delete-meeting-container"},t.createElement(Mt,{onClick:function(){var t;t=e._id,s(mt(function(){var e,r=(e=regeneratorRuntime.mark((function e(r){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!r){e.next=5;break}return e.next=3,To(Ut().StudyGroup.DeleteMeeting,{studyGroupId:n._id,meetingId:t},Kt().StudyGroup.SuccessDeleteMeeting,null,!0,(function(e,t){t||l.push(0)}));case 3:e.next=6;break;case 5:s(pt(n));case 6:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Aa(i,r,o,a,s,"next",e)}function s(e){Aa(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return r.apply(this,arguments)}}(),"Confirm Deletion","Are you sure you want to delete the meeting?"))}},"Delete")))}))))};var xa=n(8338),Ea={};Ea.styleTagTransform=g(),Ea.setAttributes=p(),Ea.insert=c().bind(null,"head"),Ea.domAPI=l(),Ea.insertStyleElement=h(),a()(xa.Z,Ea),xa.Z&&xa.Z.locals&&xa.Z.locals;const ka=function(e){var n=e.member,r=Pe(),o=de();return t.createElement("div",{className:"view-member-view-container"},t.createElement("div",{className:"member-details"},t.createElement("div",{className:"member-primary-info"},t.createElement(bi,{image:n.profilePicture}),t.createElement("h1",null,n.name)),t.createElement("div",{className:"member-secondary-info"},t.createElement("p",null,n.email))),t.createElement("hr",null),t.createElement("div",{className:"options side-by-side"},t.createElement(Mt,{type:It,onClick:function(){Bo(Ut().Message.CreateConversation,{receiverId:n._id},Kt().Message.SuccessCreateConversation,null,!0,(function(e,t){o.push("/message"),r(yt())}))}},"Message"),t.createElement(Mt,{type:Rt,onClick:function(){return r(gt("User",n))}},"Report")))};var Sa=n(6555),Ba={};function Oa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Ba.styleTagTransform=g(),Ba.setAttributes=p(),Ba.insert=c().bind(null,"head"),Ba.domAPI=l(),Ba.insertStyleElement=h(),a()(Sa.Z,Ba),Sa.Z&&Sa.Z.locals&&Sa.Z.locals;const Ta=function(e){var n=e.type,r=e.reportData,o=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Oa(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Oa(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(""),2),i=o[0],a=o[1],s=Pe();return t.createElement("div",{className:"report-view"},t.createElement("h1",null,"Please add a comment for the reason you are reporting this ",n),t.createElement(Tt,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),Bo(Ut().Report.SendReport,{id:r._id,comment:i,reportType:n},Kt().Report.EmailSent,null,!0,(function(e,t){t||s(yt())}))}},t.createElement(jt,null,t.createElement(Lt,null,"Comments:"),t.createElement(Vt,{onChange:function(e){return a(e.target.value)},value:i,isTextArea:!0})),t.createElement(Mt,{type:It},"Done")))},Da=function(e){var n=Me((function(e){return e.popupReducer})),r=n.view,o=n.payload,i=n.showTop,a=Me((function(e){return e.notificationReducer.loading})),s=Pe(),l=t.createElement(t.Fragment,null);switch(r){case Ko.StudyGroup.Create:l=t.createElement(Mo,null);break;case Ko.StudyGroup.Join:l=t.createElement(Fo,{group:o});break;case Ko.StudyGroup.Edit:l=t.createElement(ti,{group:o});break;case Ko.StudyGroup.CreateMeeting:l=t.createElement(si,{group:o.group,isRecurringMeeting:o.isRecurringMeeting});break;case Ko.StudyGroup.CreatePost:l=t.createElement(hi,{group:o});break;case Ko.StudyGroup.ViewPost:l=t.createElement(Di,{post:o});break;case Ko.StudyGroup.ViewMeetings:l=t.createElement(wa,{group:o});break;case Ko.StudyGroup.ViewMember:l=t.createElement(ka,{member:o});break;case Ko.Input:l=t.createElement(Vo,{label:o.label,defaultInput:o.defaultInput,callback:o.callback,label2:o.label2});break;case Ko.Confirmation:l=t.createElement(Ho,{callback:o.callback,title:o.title,message:o.message,isConfirmation:o.isConfirmation,firstButtonTitle:o.firstButtonTitle,secondButtonTitle:o.secondButtonTitle});break;case Ko.Report:l=t.createElement(Ta,{type:o.type,reportData:o.reportData})}return t.createElement("div",{className:"popup-wrapper"},t.createElement("div",{className:"background "+(e.isShowing?"active":""),onClick:function(){return s(yt())}}),t.createElement("div",{className:"popup "+(e.isShowing?"active":"")},i&&t.createElement("div",{className:"popup-top"},t.createElement("h1",null,o.title||r)),a?t.createElement(ya,null):t.createElement("div",{className:"popup-body"},t.createElement("button",{id:"popup-close-button",onClick:function(){return s(yt())}},"X"),e.children?e.children:l)))};var Na=n(8690),Pa={};Pa.styleTagTransform=g(),Pa.setAttributes=p(),Pa.insert=c().bind(null,"head"),Pa.domAPI=l(),Pa.insertStyleElement=h(),a()(Na.Z,Pa),Na.Z&&Na.Z.locals&&Na.Z.locals;const Ia="ERROR",Ra="SUCCESS",_a=function(e){var n=Me((function(e){return e.notificationReducer.type})),r=Me((function(e){return e.notificationReducer.message})),o=Pe(),i="",a=(0,t.useRef)(),s=function(){clearTimeout(a.current),a.current=setTimeout((function(){o({type:it}),clearTimeout(a.current)}),5e3)};switch(n){case Ia:s(),i="error";break;case Ra:s(),i="success"}return t.createElement("div",{className:"notification "+i+" "+(e.isShowing?"active":"")},t.createElement("h1",null,r||"No Message"))};var Ma=n(1338),Za={};Za.styleTagTransform=g(),Za.setAttributes=p(),Za.insert=c().bind(null,"head"),Za.domAPI=l(),Za.insertStyleElement=h(),a()(Ma.Z,Za),Ma.Z&&Ma.Z.locals&&Ma.Z.locals;var ja=n(3189),za={};za.styleTagTransform=g(),za.setAttributes=p(),za.insert=c().bind(null,"head"),za.domAPI=l(),za.insertStyleElement=h(),a()(ja.Z,za),ja.Z&&ja.Z.locals&&ja.Z.locals;var La=n(7955),Fa={};Fa.styleTagTransform=g(),Fa.setAttributes=p(),Fa.insert=c().bind(null,"head"),Fa.domAPI=l(),Fa.insertStyleElement=h(),a()(La.Z,Fa),La.Z&&La.Z.locals&&La.Z.locals;const Ua=function(e){var n=e.isShowing,r=e.setIsShowing,o=e.currentPage,i=e.user,a=Me((function(e){return e.authReducer.isLoggedIn})),s=Pe(),l=de(),u=function(e){e&&(km.dispatch(ut()),km.dispatch(Ct("You have been successfully signed out.")),km.dispatch(bt()),r(!1),l.push("/study"))};return t.createElement(t.Fragment,null,t.createElement("div",{className:n?"isShowing menu":"menu"},t.createElement("div",{className:"links"},t.createElement(ve,{to:"/study",className:"study"===o?"active nav-item":"nav-item"},t.createElement("p",null,"Study")),t.createElement(ve,{to:"/search",className:"search"===o?"active nav-item":"nav-item"},t.createElement("p",null,"Search")),t.createElement(ve,{to:"/message",className:"message"===o?"active nav-item":"nav-item"},t.createElement("p",null,"Message"))),a?t.createElement("div",{className:"user-actions"},t.createElement("div",{className:"user-info"},t.createElement("div",{className:"name-and-school"},t.createElement("p",{className:"name"},i.name),t.createElement("p",{className:"school"},i.school)),t.createElement("div",{className:"profile-pic-container"},t.createElement(bi,{image:i.profilePicture}))),t.createElement(Mt,{onClick:function(){return s(mt(u,"Confirm Sign Out","Are you sure you want to sign out of Study Spaces?  You will be missed."))}},"Log out"),t.createElement(Mt,{type:Pt,onClick:function(){return l.push("/account")}},"Account")):t.createElement(ve,{to:"/"},t.createElement(Mt,{type:It},"Log in"))),t.createElement("div",{className:n?"active background menu-background":"background menu-background"}))};function Ya(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const $a=function(e){var n=e.currentPage,r=e.color,o=Me((function(e){return e.authReducer})),i=o.user,a=o.isLoggedIn,s=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ya(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ya(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(!1),2),l=s[0],u=s[1];return t.createElement(t.Fragment,null,t.createElement("div",{className:"top-bar"},t.createElement("div",{className:"wrapper",style:{borderColor:r}},t.createElement("div",{className:"left"},t.createElement(ve,{to:"/",style:{textDecoration:"none"}},t.createElement("h1",null,"Study Spaces")),t.createElement(ve,{to:"/study",className:"study"===n?"active nav-item":"nav-item"},t.createElement("p",null,"Study")),t.createElement(ve,{to:"/search",className:"search"===n?"active nav-item":"nav-item"},t.createElement("p",null,"Search")),t.createElement(ve,{to:"/message",className:"message"===n?"active nav-item":"nav-item"},t.createElement("p",null,"Message"))),a?t.createElement("div",{className:"right",onClick:function(){u(!l),console.log(l)}},t.createElement("div",{className:"userInfoContainer"},t.createElement("p",{className:"school"},i.school),t.createElement("p",{className:"name"},i.name),t.createElement(bi,{image:i.profilePicture})),t.createElement("div",{className:"hamburger "+(l&&"activeHamburger"),onClick:function(){u(!l)}},t.createElement("span",{className:"line1"}),t.createElement("span",{className:"line2"}),t.createElement("span",{className:"line3"}))):t.createElement(ve,{to:"/"},t.createElement(Mt,{type:It},"Log in")))),t.createElement(Ua,{isShowing:l,setIsShowing:u,currentPage:n,user:i}))};var Wa=n(4739),Va={};function qa(){return qa=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},qa.apply(this,arguments)}Va.styleTagTransform=g(),Va.setAttributes=p(),Va.insert=c().bind(null,"head"),Va.domAPI=l(),Va.insertStyleElement=h(),a()(Wa.Z,Va),Wa.Z&&Wa.Z.locals&&Wa.Z.locals;const Ga=function(e){return t.createElement("div",null,e.topBar&&t.createElement($a,{currentPage:e.currentPage}),t.createElement("div",qa({className:"page"},e),e.children))};var Ha=n(2440),Qa={};Qa.styleTagTransform=g(),Qa.setAttributes=p(),Qa.insert=c().bind(null,"head"),Qa.domAPI=l(),Qa.insertStyleElement=h(),a()(Ha.Z,Qa),Ha.Z&&Ha.Z.locals&&Ha.Z.locals;const Ka=function(e){return t.createElement("div",{className:"login-form"},t.createElement(Tt,{onSubmit:e.submitLogin},t.createElement(jt,null,t.createElement(Lt,null,"Email"),t.createElement(Vt,{value:e.email,onChange:e.updateEmailField,type:"email"})),t.createElement(jt,null,t.createElement(Lt,null,"Password"),t.createElement(Vt,{value:e.password,onChange:e.updatePasswordField,type:"password"})),t.createElement(Mt,{type:Pt},"Sign in")))};var Xa=n(4487),Ja={};Ja.styleTagTransform=g(),Ja.setAttributes=p(),Ja.insert=c().bind(null,"head"),Ja.domAPI=l(),Ja.insertStyleElement=h(),a()(Xa.Z,Ja),Xa.Z&&Xa.Z.locals&&Xa.Z.locals;const es=function(e){var n=Me((function(e){return e.notificationReducer.loading}));return t.createElement("div",{className:"auth-view"},n?t.createElement(ya,null):t.createElement(t.Fragment,null,t.createElement("h1",null,"Study Spaces"),e.children))};function ts(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function ns(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return rs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?rs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const os=function(e){var n=ns((0,t.useState)(""),2),r=n[0],o=n[1],i=ns((0,t.useState)(""),2),a=i[0],s=i[1],l=Pe(),u=de(),c=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),t.stopPropagation(),e.next=4,Bo(Ut().Account.Login,{email:r,password:a},Kt().Account.SuccessLogin,"Error logging in: Cannot connect to the server",!1,(function(e,t){if(!t){var n=e.authenticationToken,r=e.authenticationTokenExpirationDate,o=e.user;l(lt({authenticationToken:n,authenticationTokenExpirationDate:r,user:o}))}}));case 4:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){ts(i,r,o,a,s,"next",e)}function s(e){ts(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return t.createElement(es,null,t.createElement(Ka,{email:r,password:a,submitLogin:c,updateEmailField:function(e){o(e.target.value)},updatePasswordField:function(e){s(e.target.value)}}),t.createElement("div",{className:"other-options"},t.createElement("div",{className:"side-by-side"},t.createElement("div",null,t.createElement("p",null,"Don't have an account?"),t.createElement(Mt,{type:It,onClick:function(t){e.setHomeView(Qo.CreateAccount)}},"Sign Up")),t.createElement("div",null,t.createElement("p",null,"Just looking to browse"),t.createElement(Mt,{type:Pt,onClick:function(){return u.push("/search")}},"Search")))))};var is=n(4497),as={};as.styleTagTransform=g(),as.setAttributes=p(),as.insert=c().bind(null,"head"),as.domAPI=l(),as.insertStyleElement=h(),a()(is.Z,as),is.Z&&is.Z.locals&&is.Z.locals;const ss=function(e){return t.createElement("div",{className:"create-account-form"},t.createElement(Tt,{onSubmit:e.submitAccountCreation},t.createElement(jt,null,t.createElement(Lt,null,"Email"),t.createElement(Vt,{value:e.email,onChange:e.updateEmailField,type:"email"})),t.createElement(jt,null,t.createElement(Lt,null,"Password"),t.createElement(Vt,{value:e.password,onChange:e.updatePasswordField,type:"password"})),t.createElement(jt,null,t.createElement(Lt,null,"Confirm Password"),t.createElement(Vt,{value:e.confirmPassword,onChange:e.updateConfirmPasswordField,type:"password"})),e.loginDidFail,t.createElement(Mt,{type:It},"Next")))};function ls(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function us(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ds=function(e){var n="",r=us((0,t.useState)(n),2),o=r[0],i=r[1],a=us((0,t.useState)(n),2),s=a[0],l=a[1],u=us((0,t.useState)(n),2),c=u[0],d=u[1],p=Pe(),f=function(){var t,r=(t=regeneratorRuntime.mark((function t(r){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r.preventDefault(),r.stopPropagation(),s!==n||c!==n||o!==n){t.next=5;break}return p(At("Please fill in the information")),t.abrupt("return");case 5:if(s===c){t.next=8;break}return p(At("Passwords don't match")),t.abrupt("return");case 8:return t.next=10,Bo(Ut().Account.CreateAccount,{email:o,password:s,password_confirmation:c},Kt().Account.SuccessAccountCreated,null,!1,(function(t,n){if(!n){var r=t.unverifiedUser;p(ct(r)),e.setHomeView(Qo.VerificationEmailConfirmation)}}));case 10:case"end":return t.stop()}}),t)})),function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(e){ls(i,r,o,a,s,"next",e)}function s(e){ls(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return r.apply(this,arguments)}}();return t.createElement(es,null,t.createElement("p",null,"Create Your Account"),t.createElement(ss,{email:o,password:s,confirmPassword:c,submitAccountCreation:f,updateEmailField:function(e){i(e.target.value)},updatePasswordField:function(e){l(e.target.value)},updateConfirmPasswordField:function(e){d(e.target.value)}}),t.createElement("div",{className:"other-options"},t.createElement("p",null,"Already have an account?"),t.createElement(Mt,{type:Pt,onClick:function(t){e.setHomeView(Qo.Login)}},"Sign In")))},ps=function(e){var n=Me((function(e){return e.authReducer.unverifiedUser}));return t.createElement(es,null,t.createElement("h1",null,"You're almost there!"),t.createElement("p",null,"Check your email: ",t.createElement("strong",null,n.email)," for a link to continue the signup process"),t.createElement(Mt,{onClick:function(){e.setHomeView(Qo.Login)}},"Return"))};var fs=n(3680),hs={};hs.styleTagTransform=g(),hs.setAttributes=p(),hs.insert=c().bind(null,"head"),hs.domAPI=l(),hs.insertStyleElement=h(),a()(fs.Z,hs),fs.Z&&fs.Z.locals&&fs.Z.locals,n(2495);const ms=function(e){return t.createElement("div",null,t.createElement(Tt,{onSubmit:e.submitAccountSetup},t.createElement(jt,null,t.createElement(Lt,null,"Full Name"),t.createElement(Vt,{value:e.name,onChange:e.updateNameField,type:"text"})),t.createElement(jt,null,t.createElement(Lt,null,"Area Code"),t.createElement(Vt,{value:e.areaCode,onChange:e.updateAreaCodeField,type:"text"})),t.createElement(jt,null,t.createElement("div",{className:"inline"},t.createElement(Lt,{className:"left Label"},"Are you 18 or older"),t.createElement(Vt,{className:"right",value:e.is18OrOver,onChange:e.updateIs18OrOver,type:"checkbox"}))),t.createElement(jt,null,t.createElement(Lt,null,"Profile Picture"),t.createElement("div",{className:"photo"},t.createElement("input",{type:"file",id:"fileInput right",accept:".png, .jpg, .jpeg",name:"profilePicture",onChange:e.updateProfilePicture}),t.createElement("img",{className:"imgPreview",id:"left",src:e.profilePicture,alt:""}))),t.createElement(Mt,{type:It},"Create Account")))};function gs(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function ys(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){gs(i,r,o,a,s,"next",e)}function s(e){gs(i,r,o,a,s,"throw",e)}a(void 0)}))}}function vs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return bs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const As=function(e){var n=vs((0,t.useState)(!1),2),r=n[0],o=n[1],i=vs((0,t.useState)(""),2),a=i[0],s=i[1],l=vs((0,t.useState)(""),2),u=l[0],c=l[1],d=vs((0,t.useState)(!1),2),p=d[0],f=d[1],h=vs((0,t.useState)(""),2),m=h[0],g=h[1],y=vs((0,t.useState)({}),2),v=y[0],b=y[1],A=e.verificationToken,C=Pe();(0,t.useEffect)(ys(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,w(A);case 2:case"end":return e.stop()}}),e)}))),[]);var w=function(){var e=ys(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Bo(Ut().Account.GetUnverifiedUser,{verificationToken:t},Kt().Account.UnverifiedUserWasFound,null,!0,(function(e,t){t||(b(e.unverifiedUser),o(!0))}));case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),x=function(){var e=ys(regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),t.stopPropagation(),(n=new FormData).append("profilePicture",m),n.append("verificationToken",A),n.append("user",v),n.append("name",a),n.append("areaCode",u),n.append("is18OrOver",p),p){e.next=13;break}return console.log("NOT 18"),C(At("You need to be 18 or older to sign up")),e.abrupt("return");case 13:return e.next=15,Do(Ut().Account.SetupAccount,n,Kt().Account.SuccessAccountSetup,null,!1,(function(e,t){if(!t){var n=e.authenticationToken,r=e.authenticationTokenExpirationDate,o=e.user;e.studyGroups,C(lt({authenticationToken:n,authenticationTokenExpirationDate:r,user:o})),C(Ct("Successfully signed in: "+o.name))}}));case 15:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return t.createElement(es,null,t.createElement("h3",null,"Setup Your Account"),t.createElement("p",null,v.email),r?t.createElement("div",null,t.createElement(ms,{user:v,name:a,areaCode:u,is18OrOver:p,profilePicture:m,updateNameField:function(e){s(e.target.value)},updateAreaCodeField:function(e){c(e.target.value)},updateIs18OrOver:function(e){f(e.target.checked)},updateProfilePicture:function(e){g(e.target.files[0])},submitAccountSetup:x})):t.createElement("h1",null,"You shouldn't be here!"),t.createElement("div",{className:"other-options"},t.createElement("p",null,"Already have an account?"),t.createElement(Mt,{type:It,onClick:function(){e.setHomeView(Qo.Login)}},"Sign In")))};function Cs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ws=function(e){var n=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Cs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Cs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(e.homeView?e.homeView:Qo.Login),2),r=n[0],o=n[1],i=t.createElement(t.Fragment,null);switch(r){case Qo.Login:i=t.createElement(os,{setHomeView:o});break;case Qo.CreateAccount:i=t.createElement(ds,{setHomeView:o});break;case Qo.VerificationEmailConfirmation:i=t.createElement(ps,{setHomeView:o});break;case Qo.AccountSetup:i=t.createElement(As,{setHomeView:o,verificationToken:e.match.params.verificationToken})}return t.createElement(Ga,{topBar:!1},t.createElement("div",{className:"HomePage"},t.createElement("h1",{className:"subtitle"},"Study ",t.createElement("br",null)," with ",t.createElement("br",null)," excellence."),t.createElement("div",null,e.children?e.children:i)))};var xs=n(4221),Es={};Es.styleTagTransform=g(),Es.setAttributes=p(),Es.insert=c().bind(null,"head"),Es.domAPI=l(),Es.insertStyleElement=h(),a()(xs.Z,Es),xs.Z&&xs.Z.locals&&xs.Z.locals;var ks=n(1918),Ss={};Ss.styleTagTransform=g(),Ss.setAttributes=p(),Ss.insert=c().bind(null,"head"),Ss.domAPI=l(),Ss.insertStyleElement=h(),a()(ks.Z,Ss),ks.Z&&ks.Z.locals&&ks.Z.locals;const Bs=function(e){var n=e.group,r=n.name,o=(n.school,n.owner),i=(n.subject,n.course),a=n.isTutorGroup,s=n.isOnlineGroup,l=n.groupColor,u=(n.description,n._id);return t.createElement(ve,{to:"/group/"+u,style:{textDecoration:"none"}},t.createElement("div",{className:"study-group-view",style:{border:"".concat(l," 4px solid"),backgroundColor:l+"99",textDecoration:"none"}},t.createElement("h1",{className:"group-title"},r),t.createElement("div",{className:"group-view-sub-details"},t.createElement("p",null,a?"Tutor":"Group"),t.createElement("p",null,s?"Online":"In-person")),t.createElement("div",{className:"group-view-details"},t.createElement("p",null,"Owner: ",o.name),t.createElement("p",null,"Course Code: ",i))))};function Os(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Ts(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Os(i,r,o,a,s,"next",e)}function s(e){Os(i,r,o,a,s,"throw",e)}a(void 0)}))}}const Ds=function(e){var n=Me((function(e){return e.notificationReducer.loading})),r=Me((function(e){return e.authReducer.isLoggedIn})),o=Me((function(e){return e.studyGroupsReducer.studyGroups})),i=Pe();(0,t.useEffect)((function(){function t(){return(t=Ts(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a();case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function n(){return(n=Ts(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,s(e.match.params.verificationToken);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}console.log(o),r&&0===o.length&&function(){t.apply(this,arguments)}(),e.isVerifyingEmail&&r&&function(){n.apply(this,arguments)}()}),[]);var a=function(){var e=Ts(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("Running"),e.next=3,Oo(Ut().StudyGroup.GetUserStudyGroups,Kt().StudyGroup.SuccessStudyGroupsRetrieved,"There's been an error loading your study groups.  Please try again later. ",!0,(function(e,t){t&&console.log(t);var n=e.studyGroups;n&&n.map((function(e){i({type:et,payload:{groups:n}})}))}),!1);case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),s=function(){var e=Ts(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Bo(Ut().Account.VerifyEmailChange,{verificationToken:t},Kt().Account.SuccessChangingEmail,null,!1,(function(e,t){t||i(dt(e.user))}));case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return t.createElement("div",null,t.createElement(Ga,{topBar:!0,currentPage:"study"},t.createElement("div",{className:"study-page"},t.createElement("div",{className:"page-title"},t.createElement("h1",null,"Study")),r?t.createElement("div",null,t.createElement(Mt,{className:"add-button",onClick:function(){return i({type:Fe})}}),n?t.createElement(ya,null):t.createElement("div",{className:"study-groups-container"},$t().isDefined(o)&&o.map((function(e){return t.createElement(Bs,{group:e})})))):t.createElement("div",{className:"guest-message"},t.createElement("h1",null,"You are currently browsing Study Spaces as a guest!"),t.createElement("p",null,"Please sign-up or log-in to be able to join and create study groups"),t.createElement("p",null,"Feel free to use our search tool to discover study groups in your area.")))))};var Ns=n(4455),Ps={};Ps.styleTagTransform=g(),Ps.setAttributes=p(),Ps.insert=c().bind(null,"head"),Ps.domAPI=l(),Ps.insertStyleElement=h(),a()(Ns.Z,Ps),Ns.Z&&Ns.Z.locals&&Ns.Z.locals;var Is=n(6891),Rs={};Rs.styleTagTransform=g(),Rs.setAttributes=p(),Rs.insert=c().bind(null,"head"),Rs.domAPI=l(),Rs.insertStyleElement=h(),a()(Is.Z,Rs),Is.Z&&Is.Z.locals&&Is.Z.locals;var _s=n(8225),Ms={};Ms.styleTagTransform=g(),Ms.setAttributes=p(),Ms.insert=c().bind(null,"head"),Ms.domAPI=l(),Ms.insertStyleElement=h(),a()(_s.Z,Ms),_s.Z&&_s.Z.locals&&_s.Z.locals;var Zs=n(5269),js=n.n(Zs);function zs(e){return(0,Wi.Z)("MuiSlider",e)}const Ls=(0,Vi.Z)("MuiSlider",["root","active","focusVisible","disabled","dragging","marked","vertical","trackInverted","trackFalse","rail","track","mark","markActive","markLabel","markLabelActive","thumb","valueLabel","valueLabelOpen","valueLabelCircle","valueLabelLabel"]),Fs=function(e){const{children:n,className:r,value:o,theme:i}=e,a=(e=>{const{open:t}=e;return{offset:(0,Ii.Z)(t&&Ls.valueLabelOpen),circle:Ls.valueLabelCircle,label:Ls.valueLabelLabel}})(e);return t.cloneElement(n,{className:(0,Ii.Z)(n.props.className)},(0,Gi.jsxs)(t.Fragment,{children:[n.props.children,(0,Gi.jsx)("span",{className:(0,Ii.Z)(a.offset,r),theme:i,"aria-hidden":!0,children:(0,Gi.jsx)("span",{className:a.circle,children:(0,Gi.jsx)("span",{className:a.label,children:o})})})]}))},Us=function(e){return"string"==typeof e};function Ys(e,t={},n){return Us(e)?t:(0,k.Z)({},t,{ownerState:(0,k.Z)({},t.ownerState,n)})}var $s=n(7094),Ws=n(8925),Vs=n(9962),qs=n(67),Gs=n(6600),Hs=n(3633);const Qs={border:0,clip:"rect(0 0 0 0)",height:"1px",margin:-1,overflow:"hidden",padding:0,position:"absolute",whiteSpace:"nowrap",width:"1px"};function Ks(e,t){return e-t}function Xs(e,t,n){return null==e?t:Math.min(Math.max(t,e),n)}function Js(e,t){var n;const{index:r}=null!=(n=e.reduce(((e,n,r)=>{const o=Math.abs(t-n);return null===e||o<e.distance||o===e.distance?{distance:o,index:r}:e}),null))?n:{};return r}function el(e,t){if(void 0!==t.current&&e.changedTouches){const n=e;for(let e=0;e<n.changedTouches.length;e+=1){const r=n.changedTouches[e];if(r.identifier===t.current)return{x:r.clientX,y:r.clientY}}return!1}return{x:e.clientX,y:e.clientY}}function tl(e,t,n){return 100*(e-t)/(n-t)}function nl({values:e,newValue:t,index:n}){const r=e.slice();return r[n]=t,r.sort(Ks)}function rl({sliderRef:e,activeIndex:t,setActive:n}){var r,o;const i=(0,$s.Z)(e.current);var a;null!=(r=e.current)&&r.contains(i.activeElement)&&Number(null==i||null==(o=i.activeElement)?void 0:o.getAttribute("data-index"))===t||null==(a=e.current)||a.querySelector(`[type="range"][data-index="${t}"]`).focus(),n&&n(t)}const ol={horizontal:{offset:e=>({left:`${e}%`}),leap:e=>({width:`${e}%`})},"horizontal-reverse":{offset:e=>({right:`${e}%`}),leap:e=>({width:`${e}%`})},vertical:{offset:e=>({bottom:`${e}%`}),leap:e=>({height:`${e}%`})}},il=e=>e;let al;function sl(){return void 0===al&&(al="undefined"==typeof CSS||"function"!=typeof CSS.supports||CSS.supports("touch-action","none")),al}function ll(e){const{ref:n,"aria-labelledby":r,defaultValue:o,disableSwap:i=!1,disabled:a=!1,marks:s=!1,max:l=100,min:u=0,name:c,onChange:d,onChangeCommitted:p,orientation:f="horizontal",scale:h=il,step:m=1,tabIndex:g,value:y,isRtl:v=!1}=e,b=t.useRef(),[A,C]=t.useState(-1),[w,x]=t.useState(-1),[E,S]=t.useState(!1),B=t.useRef(0),[O,T]=(0,Ws.Z)({controlled:y,default:null!=o?o:u,name:"Slider"}),D=d&&((e,t,n)=>{const r=e.nativeEvent||e,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:t,name:c}}),d(o,t,n)}),N=Array.isArray(O);let P=N?O.slice().sort(Ks):[O];P=P.map((e=>Xs(e,u,l)));const I=!0===s&&null!==m?[...Array(Math.floor((l-u)/m)+1)].map(((e,t)=>({value:u+m*t}))):s||[],R=I.map((e=>e.value)),{isFocusVisibleRef:_,onBlur:M,onFocus:Z,ref:j}=(0,Vs.Z)(),[z,L]=t.useState(-1),F=t.useRef(),U=(0,qs.Z)(j,F),Y=(0,qs.Z)(n,U),$=e=>t=>{var n;const r=Number(t.currentTarget.getAttribute("data-index"));Z(t),!0===_.current&&L(r),x(r),null==e||null==(n=e.onFocus)||n.call(e,t)},W=e=>t=>{var n;M(t),!1===_.current&&L(-1),x(-1),null==e||null==(n=e.onBlur)||n.call(e,t)};(0,Gs.Z)((()=>{var e;a&&F.current.contains(document.activeElement)&&(null==(e=document.activeElement)||e.blur())}),[a]),a&&-1!==A&&C(-1),a&&-1!==z&&L(-1);const V=e=>t=>{var n;null==(n=e.onChange)||n.call(e,t);const r=Number(t.currentTarget.getAttribute("data-index")),o=P[r],a=R.indexOf(o);let s=t.target.valueAsNumber;if(I&&null==m&&(s=s<o?R[a-1]:R[a+1]),s=Xs(s,u,l),I&&null==m){const e=R.indexOf(P[r]);s=s<P[r]?R[e-1]:R[e+1]}if(N){i&&(s=Xs(s,P[r-1]||-1/0,P[r+1]||1/0));const e=s;s=nl({values:P,newValue:s,index:r});let t=r;i||(t=s.indexOf(e)),rl({sliderRef:F,activeIndex:t})}T(s),L(r),D&&D(t,s,r),p&&p(t,s)},q=t.useRef();let G=f;v&&"horizontal"===f&&(G+="-reverse");const H=({finger:e,move:t=!1,values:n})=>{const{current:r}=F,{width:o,height:a,bottom:s,left:c}=r.getBoundingClientRect();let d,p;if(d=0===G.indexOf("vertical")?(s-e.y)/a:(e.x-c)/o,-1!==G.indexOf("-reverse")&&(d=1-d),p=function(e,t,n){return(n-t)*e+t}(d,u,l),m)p=function(e,t,n){const r=Math.round((e-n)/t)*t+n;return Number(r.toFixed(function(e){if(Math.abs(e)<1){const t=e.toExponential().split("e-"),n=t[0].split(".")[1];return(n?n.length:0)+parseInt(t[1],10)}const t=e.toString().split(".")[1];return t?t.length:0}(t)))}(p,m,u);else{const e=Js(R,p);p=R[e]}p=Xs(p,u,l);let f=0;if(N){f=t?q.current:Js(n,p),i&&(p=Xs(p,n[f-1]||-1/0,n[f+1]||1/0));const e=p;p=nl({values:n,newValue:p,index:f}),i&&t||(f=p.indexOf(e),q.current=f)}return{newValue:p,activeIndex:f}},Q=(0,Hs.Z)((e=>{const t=el(e,b);if(!t)return;if(B.current+=1,"mousemove"===e.type&&0===e.buttons)return void K(e);const{newValue:n,activeIndex:r}=H({finger:t,move:!0,values:P});rl({sliderRef:F,activeIndex:r,setActive:C}),T(n),!E&&B.current>2&&S(!0),D&&D(e,n,r)})),K=(0,Hs.Z)((e=>{const t=el(e,b);if(S(!1),!t)return;const{newValue:n}=H({finger:t,values:P});C(-1),"touchend"===e.type&&x(-1),p&&p(e,n),b.current=void 0,J()})),X=(0,Hs.Z)((e=>{sl()||e.preventDefault();const t=e.changedTouches[0];null!=t&&(b.current=t.identifier);const n=el(e,b);if(!1!==n){const{newValue:t,activeIndex:r}=H({finger:n,values:P});rl({sliderRef:F,activeIndex:r,setActive:C}),T(t),D&&D(e,t,r)}B.current=0;const r=(0,$s.Z)(F.current);r.addEventListener("touchmove",Q),r.addEventListener("touchend",K)})),J=t.useCallback((()=>{const e=(0,$s.Z)(F.current);e.removeEventListener("mousemove",Q),e.removeEventListener("mouseup",K),e.removeEventListener("touchmove",Q),e.removeEventListener("touchend",K)}),[K,Q]);t.useEffect((()=>{const{current:e}=F;return e.addEventListener("touchstart",X,{passive:sl()}),()=>{e.removeEventListener("touchstart",X,{passive:sl()}),J()}}),[J,X]),t.useEffect((()=>{a&&J()}),[a,J]);const ee=e=>t=>{var n;if(null==(n=e.onMouseDown)||n.call(e,t),t.defaultPrevented)return;if(0!==t.button)return;t.preventDefault();const r=el(t,b);if(!1!==r){const{newValue:e,activeIndex:n}=H({finger:r,values:P});rl({sliderRef:F,activeIndex:n,setActive:C}),T(e),D&&D(t,e,n)}B.current=0;const o=(0,$s.Z)(F.current);o.addEventListener("mousemove",Q),o.addEventListener("mouseup",K)},te=tl(N?P[0]:u,u,l),ne=tl(P[P.length-1],u,l)-te,re=e=>t=>{var n;null==(n=e.onMouseOver)||n.call(e,t);const r=Number(t.currentTarget.getAttribute("data-index"));x(r)},oe=e=>t=>{var n;null==(n=e.onMouseLeave)||n.call(e,t),x(-1)};return{axis:G,axisProps:ol,getRootProps:e=>{const t={onMouseDown:ee(e||{})},n=(0,k.Z)({},e,t);return(0,k.Z)({ref:Y},n)},getHiddenInputProps:t=>{const n={onChange:V(t||{}),onFocus:$(t||{}),onBlur:W(t||{})},o=(0,k.Z)({},t,n);return(0,k.Z)({tabIndex:g,"aria-labelledby":r,"aria-orientation":f,"aria-valuemax":h(l),"aria-valuemin":h(u),name:c,type:"range",min:e.min,max:e.max,step:e.step,disabled:a},o,{style:(0,k.Z)({},Qs,{direction:v?"rtl":"ltr",width:"100%",height:"100%"})})},getThumbProps:e=>{const t={onMouseOver:re(e||{}),onMouseLeave:oe(e||{})},n=(0,k.Z)({},e,t);return(0,k.Z)({},n)},dragging:E,marks:I,values:P,active:A,focusVisible:z,open:w,range:N,trackOffset:te,trackLeap:ne}}const ul=["aria-label","aria-valuetext","className","component","classes","disableSwap","disabled","getAriaLabel","getAriaValueText","marks","max","min","name","onChange","onChangeCommitted","onMouseDown","orientation","scale","step","tabIndex","track","value","valueLabelDisplay","valueLabelFormat","isRtl","components","componentsProps"],cl=e=>e,dl=({children:e})=>e,pl=t.forwardRef((function(e,n){var r,o,i,a,s,l,u;const{"aria-label":c,"aria-valuetext":d,className:p,component:f,classes:h,disableSwap:m=!1,disabled:g=!1,getAriaLabel:y,getAriaValueText:v,marks:b=!1,max:A=100,min:C=0,onMouseDown:w,orientation:x="horizontal",scale:E=cl,step:S=1,track:B="normal",valueLabelDisplay:O="off",valueLabelFormat:T=cl,isRtl:D=!1,components:N={},componentsProps:P={}}=e,I=(0,H.Z)(e,ul),R=(0,k.Z)({},e,{mark:b,classes:h,disabled:g,isRtl:D,max:A,min:C,orientation:x,scale:E,step:S,track:B,valueLabelDisplay:O,valueLabelFormat:T}),{axisProps:_,getRootProps:M,getHiddenInputProps:Z,getThumbProps:j,open:z,active:L,axis:F,range:U,focusVisible:Y,dragging:$,marks:W,values:V,trackOffset:q,trackLeap:G}=ll((0,k.Z)({},R,{ref:n}));R.marked=W.length>0&&W.some((e=>e.label)),R.dragging=$;const Q=null!=(r=null!=f?f:N.Root)?r:"span",K=Ys(Q,(0,k.Z)({},I,P.root),R),X=null!=(o=N.Rail)?o:"span",J=Ys(X,P.rail,R),ee=null!=(i=N.Track)?i:"span",te=Ys(ee,P.track,R),ne=(0,k.Z)({},_[F].offset(q),_[F].leap(G)),re=null!=(a=N.Thumb)?a:"span",oe=Ys(re,P.thumb,R),ie=null!=(s=N.ValueLabel)?s:Fs,ae=Ys(ie,P.valueLabel,R),se=null!=(l=N.Mark)?l:"span",le=Ys(se,P.mark,R),ue=null!=(u=N.MarkLabel)?u:"span",ce=Ys(ue,P.markLabel,R),de=N.Input||"input",pe=Ys(de,P.input,R),fe=Z(),he=(e=>{const{disabled:t,dragging:n,marked:r,orientation:o,track:i,classes:a}=e,s={root:["root",t&&"disabled",n&&"dragging",r&&"marked","vertical"===o&&"vertical","inverted"===i&&"trackInverted",!1===i&&"trackFalse"],rail:["rail"],track:["track"],mark:["mark"],markActive:["markActive"],markLabel:["markLabel"],markLabelActive:["markLabelActive"],valueLabel:["valueLabel"],thumb:["thumb",t&&"disabled"],active:["active"],disabled:["disabled"],focusVisible:["focusVisible"]};return(0,Ri.Z)(s,zs,a)})(R);return(0,Gi.jsxs)(Q,(0,k.Z)({},K,M({onMouseDown:w}),{className:(0,Ii.Z)(he.root,K.className,p),children:[(0,Gi.jsx)(X,(0,k.Z)({},J,{className:(0,Ii.Z)(he.rail,J.className)})),(0,Gi.jsx)(ee,(0,k.Z)({},te,{className:(0,Ii.Z)(he.track,te.className),style:(0,k.Z)({},ne,te.style)})),W.map(((e,n)=>{const r=tl(e.value,C,A),o=_[F].offset(r);let i;return i=!1===B?-1!==V.indexOf(e.value):"normal"===B&&(U?e.value>=V[0]&&e.value<=V[V.length-1]:e.value<=V[0])||"inverted"===B&&(U?e.value<=V[0]||e.value>=V[V.length-1]:e.value>=V[0]),(0,Gi.jsxs)(t.Fragment,{children:[(0,Gi.jsx)(se,(0,k.Z)({"data-index":n},le,!Us(se)&&{markActive:i},{style:(0,k.Z)({},o,le.style),className:(0,Ii.Z)(he.mark,le.className,i&&he.markActive)})),null!=e.label?(0,Gi.jsx)(ue,(0,k.Z)({"aria-hidden":!0,"data-index":n},ce,!Us(ue)&&{markLabelActive:i},{style:(0,k.Z)({},o,ce.style),className:(0,Ii.Z)(he.markLabel,ce.className,i&&he.markLabelActive),children:e.label})):null]},e.value)})),V.map(((e,n)=>{const r=tl(e,C,A),o=_[F].offset(r),i="off"===O?dl:ie;return(0,Gi.jsx)(t.Fragment,{children:(0,Gi.jsx)(i,(0,k.Z)({},!Us(i)&&{valueLabelFormat:T,valueLabelDisplay:O,value:"function"==typeof T?T(E(e),n):T,index:n,open:z===n||L===n||"on"===O,disabled:g},ae,{className:(0,Ii.Z)(he.valueLabel,ae.className),children:(0,Gi.jsx)(re,(0,k.Z)({"data-index":n},oe,j(),{className:(0,Ii.Z)(he.thumb,oe.className,L===n&&he.active,Y===n&&he.focusVisible)},!Us(re)&&{ownerState:(0,k.Z)({},R,oe.ownerState)},{style:(0,k.Z)({},o,{pointerEvents:m&&L!==n?"none":void 0},oe.style),children:(0,Gi.jsx)(de,(0,k.Z)({},fe,{"data-index":n,"aria-label":y?y(n):c,"aria-valuenow":E(e),"aria-valuetext":v?v(E(e),n):d,value:V[n]},!Us(de)&&{ownerState:(0,k.Z)({},R,pe.ownerState)},pe,{style:(0,k.Z)({},fe.style,pe.style)}))}))}))},n)}))]}))})),fl=pl;var hl=n(1796),ml=n(247);function gl(){return(0,pa.Z)(ml.Z)}const yl=e=>!e||!Us(e),vl=["component","components","componentsProps","color","size"],bl=(0,k.Z)({},Ls,(0,Vi.Z)("MuiSlider",["colorPrimary","colorSecondary","thumbColorPrimary","thumbColorSecondary","sizeSmall","thumbSizeSmall"])),Al=(0,$i.ZP)("span",{name:"MuiSlider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,r=!0===n.marksProp&&null!==n.step?[...Array(Math.floor((n.max-n.min)/n.step)+1)].map(((e,t)=>({value:n.min+n.step*t}))):n.marksProp||[],o=r.length>0&&r.some((e=>e.label));return[t.root,t[`color${(0,Ui.Z)(n.color)}`],"medium"!==n.size&&t[`size${(0,Ui.Z)(n.size)}`],o&&t.marked,"vertical"===n.orientation&&t.vertical,"inverted"===n.track&&t.trackInverted,!1===n.track&&t.trackFalse]}})((({theme:e,ownerState:t})=>(0,k.Z)({borderRadius:12,boxSizing:"content-box",display:"inline-block",position:"relative",cursor:"pointer",touchAction:"none",color:e.palette[t.color].main,WebkitTapHighlightColor:"transparent"},"horizontal"===t.orientation&&(0,k.Z)({height:4,width:"100%",padding:"13px 0","@media (pointer: coarse)":{padding:"20px 0"}},"small"===t.size&&{height:2},t.marked&&{marginBottom:20}),"vertical"===t.orientation&&(0,k.Z)({height:"100%",width:4,padding:"0 13px","@media (pointer: coarse)":{padding:"0 20px"}},"small"===t.size&&{width:2},t.marked&&{marginRight:44}),{"@media print":{colorAdjust:"exact"},[`&.${bl.disabled}`]:{pointerEvents:"none",cursor:"default",color:e.palette.grey[400]},[`&.${bl.dragging}`]:{[`& .${bl.thumb}, & .${bl.track}`]:{transition:"none"}}}))),Cl=(0,$i.ZP)("span",{name:"MuiSlider",slot:"Rail",overridesResolver:(e,t)=>t.rail})((({ownerState:e})=>(0,k.Z)({display:"block",position:"absolute",borderRadius:"inherit",backgroundColor:"currentColor",opacity:.38},"horizontal"===e.orientation&&{width:"100%",height:"inherit",top:"50%",transform:"translateY(-50%)"},"vertical"===e.orientation&&{height:"100%",width:"inherit",left:"50%",transform:"translateX(-50%)"},"inverted"===e.track&&{opacity:1}))),wl=(0,$i.ZP)("span",{name:"MuiSlider",slot:"Track",overridesResolver:(e,t)=>t.track})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?(0,hl.$n)(e.palette[t.color].main,.62):(0,hl._j)(e.palette[t.color].main,.5);return(0,k.Z)({display:"block",position:"absolute",borderRadius:"inherit",border:"1px solid currentColor",backgroundColor:"currentColor",transition:e.transitions.create(["left","width","bottom","height"],{duration:e.transitions.duration.shortest})},"small"===t.size&&{border:"none"},"horizontal"===t.orientation&&{height:"inherit",top:"50%",transform:"translateY(-50%)"},"vertical"===t.orientation&&{width:"inherit",left:"50%",transform:"translateX(-50%)"},!1===t.track&&{display:"none"},"inverted"===t.track&&{backgroundColor:n,borderColor:n})})),xl=(0,$i.ZP)("span",{name:"MuiSlider",slot:"Thumb",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.thumb,t[`thumbColor${(0,Ui.Z)(n.color)}`],"medium"!==n.size&&t[`thumbSize${(0,Ui.Z)(n.size)}`]]}})((({theme:e,ownerState:t})=>(0,k.Z)({position:"absolute",width:20,height:20,boxSizing:"border-box",borderRadius:"50%",outline:0,backgroundColor:"currentColor",display:"flex",alignItems:"center",justifyContent:"center",transition:e.transitions.create(["box-shadow","left","bottom"],{duration:e.transitions.duration.shortest})},"small"===t.size&&{width:12,height:12},"horizontal"===t.orientation&&{top:"50%",transform:"translate(-50%, -50%)"},"vertical"===t.orientation&&{left:"50%",transform:"translate(-50%, 50%)"},{"&:before":(0,k.Z)({position:"absolute",content:'""',borderRadius:"inherit",width:"100%",height:"100%",boxShadow:e.shadows[2]},"small"===t.size&&{boxShadow:"none"}),"&::after":{position:"absolute",content:'""',borderRadius:"50%",width:42,height:42,top:"50%",left:"50%",transform:"translate(-50%, -50%)"},[`&:hover, &.${bl.focusVisible}`]:{boxShadow:`0px 0px 0px 8px ${(0,hl.Fq)(e.palette[t.color].main,.16)}`,"@media (hover: none)":{boxShadow:"none"}},[`&.${bl.active}`]:{boxShadow:`0px 0px 0px 14px ${(0,hl.Fq)(e.palette[t.color].main,.16)}`},[`&.${bl.disabled}`]:{"&:hover":{boxShadow:"none"}}}))),El=(0,$i.ZP)(Fs,{name:"MuiSlider",slot:"ValueLabel",overridesResolver:(e,t)=>t.valueLabel})((({theme:e,ownerState:t})=>(0,k.Z)({[`&.${bl.valueLabelOpen}`]:{transform:"translateY(-100%) scale(1)"},zIndex:1,whiteSpace:"nowrap"},e.typography.body2,{fontWeight:500,transition:e.transitions.create(["transform"],{duration:e.transitions.duration.shortest}),top:-10,transformOrigin:"bottom center",transform:"translateY(-100%) scale(0)",position:"absolute",backgroundColor:e.palette.grey[600],borderRadius:2,color:e.palette.common.white,display:"flex",alignItems:"center",justifyContent:"center",padding:"0.25rem 0.75rem"},"small"===t.size&&{fontSize:e.typography.pxToRem(12),padding:"0.25rem 0.5rem"},{"&:before":{position:"absolute",content:'""',width:8,height:8,bottom:0,left:"50%",transform:"translate(-50%, 50%) rotate(45deg)",backgroundColor:"inherit"}}))),kl=(0,$i.ZP)("span",{name:"MuiSlider",slot:"Mark",shouldForwardProp:e=>(0,$i.Dz)(e)&&"markActive"!==e,overridesResolver:(e,t)=>t.mark})((({theme:e,ownerState:t,markActive:n})=>(0,k.Z)({position:"absolute",width:2,height:2,borderRadius:1,backgroundColor:"currentColor"},"horizontal"===t.orientation&&{top:"50%",transform:"translate(-1px, -50%)"},"vertical"===t.orientation&&{left:"50%",transform:"translate(-50%, 1px)"},n&&{backgroundColor:e.palette.background.paper,opacity:.8}))),Sl=(0,$i.ZP)("span",{name:"MuiSlider",slot:"MarkLabel",shouldForwardProp:e=>(0,$i.Dz)(e)&&"markLabelActive"!==e,overridesResolver:(e,t)=>t.markLabel})((({theme:e,ownerState:t,markLabelActive:n})=>(0,k.Z)({},e.typography.body2,{color:e.palette.text.secondary,position:"absolute",whiteSpace:"nowrap"},"horizontal"===t.orientation&&{top:30,transform:"translateX(-50%)","@media (pointer: coarse)":{top:40}},"vertical"===t.orientation&&{left:36,transform:"translateY(50%)","@media (pointer: coarse)":{left:44}},n&&{color:e.palette.text.primary}))),Bl=t.forwardRef((function(e,t){var n,r,o,i;const a=(0,Yi.Z)({props:e,name:"MuiSlider"}),s="rtl"===gl().direction,{component:l="span",components:u={},componentsProps:c={},color:d="primary",size:p="medium"}=a,f=(0,H.Z)(a,vl),h=(e=>{const{color:t,size:n,classes:r={}}=e;return(0,k.Z)({},r,{root:(0,Ii.Z)(r.root,zs(`color${(0,Ui.Z)(t)}`),r[`color${(0,Ui.Z)(t)}`],n&&[zs(`size${(0,Ui.Z)(n)}`),r[`size${(0,Ui.Z)(n)}`]]),thumb:(0,Ii.Z)(r.thumb,zs(`thumbColor${(0,Ui.Z)(t)}`),r[`thumbColor${(0,Ui.Z)(t)}`],n&&[zs(`thumbSize${(0,Ui.Z)(n)}`),r[`thumbSize${(0,Ui.Z)(n)}`]])})})((0,k.Z)({},a,{color:d,size:p}));return(0,Gi.jsx)(fl,(0,k.Z)({},f,{isRtl:s,components:(0,k.Z)({Root:Al,Rail:Cl,Track:wl,Thumb:xl,ValueLabel:El,Mark:kl,MarkLabel:Sl},u),componentsProps:(0,k.Z)({},c,{root:(0,k.Z)({},c.root,yl(u.Root)&&{as:l,ownerState:(0,k.Z)({},null==(n=c.root)?void 0:n.ownerState,{color:d,size:p})}),thumb:(0,k.Z)({},c.thumb,yl(u.Thumb)&&{ownerState:(0,k.Z)({},null==(r=c.thumb)?void 0:r.ownerState,{color:d,size:p})}),track:(0,k.Z)({},c.track,yl(u.Track)&&{ownerState:(0,k.Z)({},null==(o=c.track)?void 0:o.ownerState,{color:d,size:p})}),valueLabel:(0,k.Z)({},c.valueLabel,yl(u.ValueLabel)&&{ownerState:(0,k.Z)({},null==(i=c.valueLabel)?void 0:i.ownerState,{color:d,size:p})})}),classes:h,ref:t}))}));function Ol(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Tl=function(e){var n=e.updateTimeRange,r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ol(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ol(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(t.useState([0,1440]),2),o=r[0],i=r[1];return t.createElement(ga,{sx:{width:"100%",height:"90px",overflow:"hidden"}},t.createElement(Bl,{sx:{height:"40px",color:"rgba(139, 79, 11, 0.616)",overflow:"hidden"},value:o,onChange:function(e,t){var r=t[0]/60,o=Math.floor(r),a=60*(r-o),s=Math.round(a),l=t[1]/60,u=Math.floor(l),c=60*(l-u),d=Math.round(c);s<10&&(s+="0"),d<10&&(d+="0");var p=o>=12?"PM":"AM",f=u>=12?"PM":"AM",h=(u=u%12||12)+":"+d+f;"12:00PM"===h&&(h="11:45PM"),n([(o=o%12||12)+":"+s+p,h]),i(t)},step:15,min:0,max:1440}))},Dl=["children","classes","className","label","notched"],Nl=(0,$i.ZP)("fieldset")({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),Pl=(0,$i.ZP)("legend",{skipSx:!0})((({ownerState:e,theme:t})=>(0,k.Z)({float:"unset"},void 0===e.label&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},void 0!==e.label&&(0,k.Z)({display:"block",width:"auto",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})})))),Il=t.createContext();function Rl(){return t.useContext(Il)}function _l({props:e,states:t,muiFormControl:n}){return t.reduce(((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t)),{})}function Ml(e){return(0,Wi.Z)("MuiOutlinedInput",e)}const Zl=(0,Vi.Z)("MuiOutlinedInput",["root","colorSecondary","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","notchedOutline","input","inputSizeSmall","inputMultiline","inputAdornedStart","inputAdornedEnd"]);var jl=n(1387),zl=n(8290),Ll=n(7596);const Fl=["onChange","maxRows","minRows","style","value"];function Ul(e,t){return parseInt(e[t],10)||0}const Yl={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},$l=t.forwardRef((function(e,n){const{onChange:r,maxRows:o,minRows:i=1,style:a,value:s}=e,l=(0,H.Z)(e,Fl),{current:u}=t.useRef(null!=s),c=t.useRef(null),d=(0,qs.Z)(n,c),p=t.useRef(null),f=t.useRef(0),[h,m]=t.useState({}),g=t.useCallback((()=>{const t=c.current,n=(0,zl.Z)(t).getComputedStyle(t);if("0px"===n.width)return;const r=p.current;r.style.width=n.width,r.value=t.value||e.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");const a=n["box-sizing"],s=Ul(n,"padding-bottom")+Ul(n,"padding-top"),l=Ul(n,"border-bottom-width")+Ul(n,"border-top-width"),u=r.scrollHeight;r.value="x";const d=r.scrollHeight;let h=u;i&&(h=Math.max(Number(i)*d,h)),o&&(h=Math.min(Number(o)*d,h)),h=Math.max(h,d);const g=h+("border-box"===a?s+l:0),y=Math.abs(h-u)<=1;m((e=>f.current<20&&(g>0&&Math.abs((e.outerHeightStyle||0)-g)>1||e.overflow!==y)?(f.current+=1,{overflow:y,outerHeightStyle:g}):e))}),[o,i,e.placeholder]);return t.useEffect((()=>{const e=(0,Ll.Z)((()=>{f.current=0,g()})),t=(0,zl.Z)(c.current);let n;return t.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(n=new ResizeObserver(e),n.observe(c.current)),()=>{e.clear(),t.removeEventListener("resize",e),n&&n.disconnect()}}),[g]),(0,Gs.Z)((()=>{g()})),t.useEffect((()=>{f.current=0}),[s]),(0,Gi.jsxs)(t.Fragment,{children:[(0,Gi.jsx)("textarea",(0,k.Z)({value:s,onChange:e=>{f.current=0,u||g(),r&&r(e)},ref:d,rows:i,style:(0,k.Z)({height:h.outerHeightStyle,overflow:h.overflow?"hidden":null},a)},l)),(0,Gi.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:p,tabIndex:-1,style:(0,k.Z)({},Yl,a,{padding:0})})]})}));var Wl=n(1705),Vl=n(8974);function ql(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,Gi.jsx)(zi,{styles:r})}const Gl=function(e){return(0,Gi.jsx)(ql,(0,k.Z)({},e,{defaultTheme:ml.Z}))};function Hl(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Ql(e,t=!1){return e&&(Hl(e.value)&&""!==e.value||t&&Hl(e.defaultValue)&&""!==e.defaultValue)}function Kl(e){return(0,Wi.Z)("MuiInputBase",e)}const Xl=(0,Vi.Z)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),Jl=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","startAdornment","type","value"],eu=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${(0,Ui.Z)(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},tu=(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},nu=(0,$i.ZP)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:eu})((({theme:e,ownerState:t})=>(0,k.Z)({},e.typography.body1,{color:e.palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${Xl.disabled}`]:{color:e.palette.text.disabled,cursor:"default"}},t.multiline&&(0,k.Z)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),ru=(0,$i.ZP)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:tu})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r={color:"currentColor",opacity:n?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},o={opacity:"0 !important"},i={opacity:n?.42:.5};return(0,k.Z)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${Xl.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":i,"&:focus::-moz-placeholder":i,"&:focus:-ms-input-placeholder":i,"&:focus::-ms-input-placeholder":i},[`&.${Xl.disabled}`]:{opacity:1,WebkitTextFillColor:e.palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),ou=(0,Gi.jsx)(Gl,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),iu=t.forwardRef((function(e,n){const r=(0,Yi.Z)({props:e,name:"MuiInputBase"}),{"aria-describedby":o,autoComplete:i,autoFocus:a,className:s,components:l={},componentsProps:u={},defaultValue:c,disabled:d,disableInjectingGlobalStyles:p,endAdornment:f,fullWidth:h=!1,id:m,inputComponent:g="input",inputProps:y={},inputRef:v,maxRows:b,minRows:A,multiline:C=!1,name:w,onBlur:x,onChange:E,onClick:S,onFocus:B,onKeyDown:O,onKeyUp:T,placeholder:D,readOnly:N,renderSuffix:P,rows:I,startAdornment:R,type:_="text",value:M}=r,Z=(0,H.Z)(r,Jl),j=null!=y.value?y.value:M,{current:z}=t.useRef(null!=j),L=t.useRef(),F=t.useCallback((e=>{}),[]),U=(0,Wl.Z)(y.ref,F),Y=(0,Wl.Z)(v,U),$=(0,Wl.Z)(L,Y),[W,V]=t.useState(!1),q=Rl(),G=_l({props:r,muiFormControl:q,states:["color","disabled","error","hiddenLabel","size","required","filled"]});G.focused=q?q.focused:W,t.useEffect((()=>{!q&&d&&W&&(V(!1),x&&x())}),[q,d,W,x]);const Q=q&&q.onFilled,K=q&&q.onEmpty,X=t.useCallback((e=>{Ql(e)?Q&&Q():K&&K()}),[Q,K]);(0,Vl.Z)((()=>{z&&X({value:j})}),[j,X,z]),t.useEffect((()=>{X(L.current)}),[]);let J=g,ee=y;C&&"input"===J&&(ee=I?(0,k.Z)({type:void 0,minRows:I,maxRows:I},ee):(0,k.Z)({type:void 0,maxRows:b,minRows:A},ee),J=$l),t.useEffect((()=>{q&&q.setAdornedStart(Boolean(R))}),[q,R]);const te=(0,k.Z)({},r,{color:G.color||"primary",disabled:G.disabled,endAdornment:f,error:G.error,focused:G.focused,formControl:q,fullWidth:h,hiddenLabel:G.hiddenLabel,multiline:C,size:G.size,startAdornment:R,type:_}),ne=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:i,focused:a,formControl:s,fullWidth:l,hiddenLabel:u,multiline:c,size:d,startAdornment:p,type:f}=e,h={root:["root",`color${(0,Ui.Z)(n)}`,r&&"disabled",o&&"error",l&&"fullWidth",a&&"focused",s&&"formControl","small"===d&&"sizeSmall",c&&"multiline",p&&"adornedStart",i&&"adornedEnd",u&&"hiddenLabel"],input:["input",r&&"disabled","search"===f&&"inputTypeSearch",c&&"inputMultiline","small"===d&&"inputSizeSmall",u&&"inputHiddenLabel",p&&"inputAdornedStart",i&&"inputAdornedEnd"]};return(0,Ri.Z)(h,Kl,t)})(te),re=l.Root||nu,oe=u.root||{},ie=l.Input||ru;return ee=(0,k.Z)({},ee,u.input),(0,Gi.jsxs)(t.Fragment,{children:[!p&&ou,(0,Gi.jsxs)(re,(0,k.Z)({},oe,!Us(re)&&{ownerState:(0,k.Z)({},te,oe.ownerState)},{ref:n,onClick:e=>{L.current&&e.currentTarget===e.target&&L.current.focus(),S&&S(e)}},Z,{className:(0,Ii.Z)(ne.root,oe.className,s),children:[R,(0,Gi.jsx)(Il.Provider,{value:null,children:(0,Gi.jsx)(ie,(0,k.Z)({ownerState:te,"aria-invalid":G.error,"aria-describedby":o,autoComplete:i,autoFocus:a,defaultValue:c,disabled:G.disabled,id:m,onAnimationStart:e=>{X("mui-auto-fill-cancel"===e.animationName?L.current:{value:"x"})},name:w,placeholder:D,readOnly:N,required:G.required,rows:I,value:j,onKeyDown:O,onKeyUp:T,type:_},ee,!Us(ie)&&{as:J,ownerState:(0,k.Z)({},te,ee.ownerState)},{ref:$,className:(0,Ii.Z)(ne.input,ee.className),onBlur:e=>{x&&x(e),y.onBlur&&y.onBlur(e),q&&q.onBlur?q.onBlur(e):V(!1)},onChange:(e,...t)=>{if(!z){const t=e.target||L.current;if(null==t)throw new Error((0,jl.Z)(1));X({value:t.value})}y.onChange&&y.onChange(e,...t),E&&E(e,...t)},onFocus:e=>{G.disabled?e.stopPropagation():(B&&B(e),y.onFocus&&y.onFocus(e),q&&q.onFocus?q.onFocus(e):V(!0))}}))}),f,P?P((0,k.Z)({},G,{startAdornment:R})):null]}))]})})),au=iu,su=["components","fullWidth","inputComponent","label","multiline","notched","type"],lu=(0,$i.ZP)(nu,{shouldForwardProp:e=>(0,$i.FO)(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:eu})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return(0,k.Z)({position:"relative",borderRadius:e.shape.borderRadius,[`&:hover .${Zl.notchedOutline}`]:{borderColor:e.palette.text.primary},"@media (hover: none)":{[`&:hover .${Zl.notchedOutline}`]:{borderColor:n}},[`&.${Zl.focused} .${Zl.notchedOutline}`]:{borderColor:e.palette[t.color].main,borderWidth:2},[`&.${Zl.error} .${Zl.notchedOutline}`]:{borderColor:e.palette.error.main},[`&.${Zl.disabled} .${Zl.notchedOutline}`]:{borderColor:e.palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&(0,k.Z)({padding:"16.5px 14px"},"small"===t.size&&{padding:"8.5px 14px"}))})),uu=(0,$i.ZP)((function(e){const{className:t,label:n,notched:r}=e,o=(0,H.Z)(e,Dl),i=(0,k.Z)({},e,{notched:r,label:n});return(0,Gi.jsx)(Nl,(0,k.Z)({"aria-hidden":!0,className:t,ownerState:i},o,{children:(0,Gi.jsx)(Pl,{ownerState:i,children:n?(0,Gi.jsx)("span",{children:n}):(0,Gi.jsx)("span",{className:"notranslate",dangerouslySetInnerHTML:{__html:"&#8203;"}})})}))}),{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})((({theme:e})=>({borderColor:"light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"}))),cu=(0,$i.ZP)(ru,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:tu})((({theme:e,ownerState:t})=>(0,k.Z)({padding:"16.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},"small"===t.size&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0}))),du=t.forwardRef((function(e,n){var r;const o=(0,Yi.Z)({props:e,name:"MuiOutlinedInput"}),{components:i={},fullWidth:a=!1,inputComponent:s="input",label:l,multiline:u=!1,notched:c,type:d="text"}=o,p=(0,H.Z)(o,su),f=(e=>{const{classes:t}=e,n=(0,Ri.Z)({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},Ml,t);return(0,k.Z)({},t,n)})(o),h=_l({props:o,muiFormControl:Rl(),states:["required"]});return(0,Gi.jsx)(au,(0,k.Z)({components:(0,k.Z)({Root:lu,Input:cu},i),renderSuffix:e=>(0,Gi.jsx)(uu,{className:f.notchedOutline,label:l&&h.required?r||(r=(0,Gi.jsxs)(t.Fragment,{children:[l," ","*"]})):l,notched:void 0!==c?c:Boolean(e.startAdornment||e.filled||e.focused)}),fullWidth:a,inputComponent:s,multiline:u,ref:n,type:d},p,{classes:(0,k.Z)({},f,{notchedOutline:null})}))}));du.muiName="Input";const pu=du,fu=t.createContext({});var hu=n(2068),mu=n(9674);const gu=t.createContext(null);function yu(e,n){var r=Object.create(null);return e&&t.Children.map(e,(function(e){return e})).forEach((function(e){r[e.key]=function(e){return n&&(0,t.isValidElement)(e)?n(e):e}(e)})),r}function vu(e,t,n){return null!=n[t]?n[t]:e.props[t]}function bu(e,n,r){var o=yu(e.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var s={};for(var l in t){if(o[l])for(r=0;r<o[l].length;r++){var u=o[l][r];s[o[l][r]]=n(u)}s[l]=n(l)}for(r=0;r<i.length;r++)s[i[r]]=n(i[r]);return s}(n,o);return Object.keys(i).forEach((function(a){var s=i[a];if((0,t.isValidElement)(s)){var l=a in n,u=a in o,c=n[a],d=(0,t.isValidElement)(c)&&!c.props.in;!u||l&&!d?u||!l||d?u&&l&&(0,t.isValidElement)(c)&&(i[a]=(0,t.cloneElement)(s,{onExited:r.bind(null,s),in:c.props.in,exit:vu(s,"exit",e),enter:vu(s,"enter",e)})):i[a]=(0,t.cloneElement)(s,{in:!1}):i[a]=(0,t.cloneElement)(s,{onExited:r.bind(null,s),in:!0,exit:vu(s,"exit",e),enter:vu(s,"enter",e)})}})),i}var Au=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Cu=function(e){function n(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}w(n,e);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(e,n){var r,o,i=n.children,a=n.handleExited;return{children:n.firstRender?(r=e,o=a,yu(r.children,(function(e){return(0,t.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:vu(e,"appear",r),enter:vu(e,"enter",r),exit:vu(e,"exit",r)})}))):bu(e,i,a),firstRender:!1}},r.handleExited=function(e,t){var n=yu(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,k.Z)({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var e=this.props,n=e.component,r=e.childFactory,o=(0,H.Z)(e,["component","childFactory"]),i=this.state.contextValue,a=Au(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?t.createElement(gu.Provider,{value:i},a):t.createElement(gu.Provider,{value:i},t.createElement(n,o,a))},n}(t.Component);Cu.propTypes={},Cu.defaultProps={component:"div",childFactory:function(e){return e}};const wu=Cu,xu=(0,Vi.Z)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Eu=["center","classes","className"];let ku,Su,Bu,Ou,Tu=e=>e;const Du=Fi(ku||(ku=Tu`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),Nu=Fi(Su||(Su=Tu`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),Pu=Fi(Bu||(Bu=Tu`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),Iu=(0,$i.ZP)("span",{name:"MuiTouchRipple",slot:"Root",skipSx:!0})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),Ru=(0,$i.ZP)((function(e){const{className:n,classes:r,pulsate:o=!1,rippleX:i,rippleY:a,rippleSize:s,in:l,onExited:u,timeout:c}=e,[d,p]=t.useState(!1),f=(0,Ii.Z)(n,r.ripple,r.rippleVisible,o&&r.ripplePulsate),h={width:s,height:s,top:-s/2+a,left:-s/2+i},m=(0,Ii.Z)(r.child,d&&r.childLeaving,o&&r.childPulsate);return l||d||p(!0),t.useEffect((()=>{if(!l&&null!=u){const e=setTimeout(u,c);return()=>{clearTimeout(e)}}}),[u,l,c]),(0,Gi.jsx)("span",{className:f,style:h,children:(0,Gi.jsx)("span",{className:m})})}),{name:"MuiTouchRipple",slot:"Ripple"})(Ou||(Ou=Tu`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),xu.rippleVisible,Du,550,(({theme:e})=>e.transitions.easing.easeInOut),xu.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),xu.child,xu.childLeaving,Nu,550,(({theme:e})=>e.transitions.easing.easeInOut),xu.childPulsate,Pu,(({theme:e})=>e.transitions.easing.easeInOut)),_u=t.forwardRef((function(e,n){const r=(0,Yi.Z)({props:e,name:"MuiTouchRipple"}),{center:o=!1,classes:i={},className:a}=r,s=(0,H.Z)(r,Eu),[l,u]=t.useState([]),c=t.useRef(0),d=t.useRef(null);t.useEffect((()=>{d.current&&(d.current(),d.current=null)}),[l]);const p=t.useRef(!1),f=t.useRef(null),h=t.useRef(null),m=t.useRef(null);t.useEffect((()=>()=>{clearTimeout(f.current)}),[]);const g=t.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:a}=e;u((e=>[...e,(0,Gi.jsx)(Ru,{classes:{ripple:(0,Ii.Z)(i.ripple,xu.ripple),rippleVisible:(0,Ii.Z)(i.rippleVisible,xu.rippleVisible),ripplePulsate:(0,Ii.Z)(i.ripplePulsate,xu.ripplePulsate),child:(0,Ii.Z)(i.child,xu.child),childLeaving:(0,Ii.Z)(i.childLeaving,xu.childLeaving),childPulsate:(0,Ii.Z)(i.childPulsate,xu.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},c.current)])),c.current+=1,d.current=a}),[i]),y=t.useCallback(((e={},t={},n)=>{const{pulsate:r=!1,center:i=o||t.pulsate,fakeElement:a=!1}=t;if("mousedown"===e.type&&p.current)return void(p.current=!1);"touchstart"===e.type&&(p.current=!0);const s=a?null:m.current,l=s?s.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,d;if(i||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(l.width/2),c=Math.round(l.height/2);else{const{clientX:t,clientY:n}=e.touches?e.touches[0]:e;u=Math.round(t-l.left),c=Math.round(n-l.top)}if(i)d=Math.sqrt((2*l.width**2+l.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((s?s.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((s?s.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}e.touches?null===h.current&&(h.current=()=>{g({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})},f.current=setTimeout((()=>{h.current&&(h.current(),h.current=null)}),80)):g({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})}),[o,g]),v=t.useCallback((()=>{y({},{pulsate:!0})}),[y]),b=t.useCallback(((e,t)=>{if(clearTimeout(f.current),"touchend"===e.type&&h.current)return h.current(),h.current=null,void(f.current=setTimeout((()=>{b(e,t)})));h.current=null,u((e=>e.length>0?e.slice(1):e)),d.current=t}),[]);return t.useImperativeHandle(n,(()=>({pulsate:v,start:y,stop:b})),[v,y,b]),(0,Gi.jsx)(Iu,(0,k.Z)({className:(0,Ii.Z)(i.root,xu.root,a),ref:m},s,{children:(0,Gi.jsx)(wu,{component:null,exit:!0,children:l})}))})),Mu=_u;function Zu(e){return(0,Wi.Z)("MuiButtonBase",e)}const ju=(0,Vi.Z)("MuiButtonBase",["root","disabled","focusVisible"]),zu=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","type"],Lu=(0,$i.ZP)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${ju.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Fu=t.forwardRef((function(e,n){const r=(0,Yi.Z)({props:e,name:"MuiButtonBase"}),{action:o,centerRipple:i=!1,children:a,className:s,component:l="button",disabled:u=!1,disableRipple:c=!1,disableTouchRipple:d=!1,focusRipple:p=!1,LinkComponent:f="a",onBlur:h,onClick:m,onContextMenu:g,onDragLeave:y,onFocus:v,onFocusVisible:b,onKeyDown:A,onKeyUp:C,onMouseDown:w,onMouseLeave:x,onMouseUp:E,onTouchEnd:S,onTouchMove:B,onTouchStart:O,tabIndex:T=0,TouchRippleProps:D,type:N}=r,P=(0,H.Z)(r,zu),I=t.useRef(null),R=t.useRef(null),{isFocusVisibleRef:_,onFocus:M,onBlur:Z,ref:j}=(0,mu.Z)(),[z,L]=t.useState(!1);function F(e,t,n=d){return(0,hu.Z)((r=>(t&&t(r),!n&&R.current&&R.current[e](r),!0)))}u&&z&&L(!1),t.useImperativeHandle(o,(()=>({focusVisible:()=>{L(!0),I.current.focus()}})),[]),t.useEffect((()=>{z&&p&&!c&&R.current.pulsate()}),[c,p,z]);const U=F("start",w),Y=F("stop",g),$=F("stop",y),W=F("stop",E),V=F("stop",(e=>{z&&e.preventDefault(),x&&x(e)})),q=F("start",O),G=F("stop",S),Q=F("stop",B),K=F("stop",(e=>{Z(e),!1===_.current&&L(!1),h&&h(e)}),!1),X=(0,hu.Z)((e=>{I.current||(I.current=e.currentTarget),M(e),!0===_.current&&(L(!0),b&&b(e)),v&&v(e)})),J=()=>{const e=I.current;return l&&"button"!==l&&!("A"===e.tagName&&e.href)},ee=t.useRef(!1),te=(0,hu.Z)((e=>{p&&!ee.current&&z&&R.current&&" "===e.key&&(ee.current=!0,R.current.stop(e,(()=>{R.current.start(e)}))),e.target===e.currentTarget&&J()&&" "===e.key&&e.preventDefault(),A&&A(e),e.target===e.currentTarget&&J()&&"Enter"===e.key&&!u&&(e.preventDefault(),m&&m(e))})),ne=(0,hu.Z)((e=>{p&&" "===e.key&&R.current&&z&&!e.defaultPrevented&&(ee.current=!1,R.current.stop(e,(()=>{R.current.pulsate(e)}))),C&&C(e),m&&e.target===e.currentTarget&&J()&&" "===e.key&&!e.defaultPrevented&&m(e)}));let re=l;"button"===re&&(P.href||P.to)&&(re=f);const oe={};"button"===re?(oe.type=void 0===N?"button":N,oe.disabled=u):(P.href||P.to||(oe.role="button"),u&&(oe["aria-disabled"]=u));const ie=(0,Wl.Z)(j,I),ae=(0,Wl.Z)(n,ie),[se,le]=t.useState(!1);t.useEffect((()=>{le(!0)}),[]);const ue=se&&!c&&!u,ce=(0,k.Z)({},r,{centerRipple:i,component:l,disabled:u,disableRipple:c,disableTouchRipple:d,focusRipple:p,tabIndex:T,focusVisible:z}),de=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,i={root:["root",t&&"disabled",n&&"focusVisible"]},a=(0,Ri.Z)(i,Zu,o);return n&&r&&(a.root+=` ${r}`),a})(ce);return(0,Gi.jsxs)(Lu,(0,k.Z)({as:re,className:(0,Ii.Z)(de.root,s),ownerState:ce,onBlur:K,onClick:m,onContextMenu:Y,onFocus:X,onKeyDown:te,onKeyUp:ne,onMouseDown:U,onMouseLeave:V,onMouseUp:W,onDragLeave:$,onTouchEnd:G,onTouchMove:Q,onTouchStart:q,ref:ae,tabIndex:u?-1:T,type:N},oe,P,{children:[a,ue?(0,Gi.jsx)(Mu,(0,k.Z)({ref:R,center:i},D)):null]}))})),Uu=(0,Vi.Z)("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]),Yu=(0,Vi.Z)("MuiListItemIcon",["root","alignItemsFlexStart"]),$u=(0,Vi.Z)("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]);function Wu(e){return(0,Wi.Z)("MuiMenuItem",e)}const Vu=(0,Vi.Z)("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]),qu=["autoFocus","component","dense","divider","disableGutters","focusVisibleClassName","role","tabIndex"],Gu=(0,$i.ZP)(Fu,{shouldForwardProp:e=>(0,$i.FO)(e)||"classes"===e,name:"MuiMenuItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,n.divider&&t.divider,!n.disableGutters&&t.gutters]}})((({theme:e,ownerState:t})=>(0,k.Z)({},e.typography.body1,{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.divider&&{borderBottom:`1px solid ${e.palette.divider}`,backgroundClip:"padding-box"},{"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Vu.selected}`]:{backgroundColor:(0,hl.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Vu.focusVisible}`]:{backgroundColor:(0,hl.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Vu.selected}:hover`]:{backgroundColor:(0,hl.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:(0,hl.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${Vu.focusVisible}`]:{backgroundColor:e.palette.action.focus},[`&.${Vu.disabled}`]:{opacity:e.palette.action.disabledOpacity},[`& + .${Uu.root}`]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},[`& + .${Uu.inset}`]:{marginLeft:52},[`& .${$u.root}`]:{marginTop:0,marginBottom:0},[`& .${$u.inset}`]:{paddingLeft:36},[`& .${Yu.root}`]:{minWidth:36}},!t.dense&&{[e.breakpoints.up("sm")]:{minHeight:"auto"}},t.dense&&(0,k.Z)({minHeight:32,paddingTop:4,paddingBottom:4},e.typography.body2,{[`& .${Yu.root} svg`]:{fontSize:"1.25rem"}})))),Hu=t.forwardRef((function(e,n){const r=(0,Yi.Z)({props:e,name:"MuiMenuItem"}),{autoFocus:o=!1,component:i="li",dense:a=!1,divider:s=!1,disableGutters:l=!1,focusVisibleClassName:u,role:c="menuitem",tabIndex:d}=r,p=(0,H.Z)(r,qu),f=t.useContext(fu),h={dense:a||f.dense||!1,disableGutters:l},m=t.useRef(null);(0,Vl.Z)((()=>{o&&m.current&&m.current.focus()}),[o]);const g=(0,k.Z)({},r,{dense:h.dense,divider:s,disableGutters:l}),y=(e=>{const{disabled:t,dense:n,divider:r,disableGutters:o,selected:i,classes:a}=e,s={root:["root",n&&"dense",t&&"disabled",!o&&"gutters",r&&"divider",i&&"selected"]},l=(0,Ri.Z)(s,Wu,a);return(0,k.Z)({},a,l)})(r),v=(0,Wl.Z)(m,n);let b;return r.disabled||(b=void 0!==d?d:-1),(0,Gi.jsx)(fu.Provider,{value:h,children:(0,Gi.jsx)(Gu,(0,k.Z)({ref:v,role:c,tabIndex:b,component:i,focusVisibleClassName:(0,Ii.Z)(y.focusVisible,u)},p,{ownerState:g,classes:y}))})})),Qu=Hu;var Ku=n(8502);function Xu(e){return(0,Wi.Z)("MuiFormControl",e)}(0,Vi.Z)("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const Ju=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],ec=(0,$i.ZP)("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,k.Z)({},t.root,t[`margin${(0,Ui.Z)(e.margin)}`],e.fullWidth&&t.fullWidth)})((({ownerState:e})=>(0,k.Z)({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},"normal"===e.margin&&{marginTop:16,marginBottom:8},"dense"===e.margin&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"}))),tc=t.forwardRef((function(e,n){const r=(0,Yi.Z)({props:e,name:"MuiFormControl"}),{children:o,className:i,color:a="primary",component:s="div",disabled:l=!1,error:u=!1,focused:c,fullWidth:d=!1,hiddenLabel:p=!1,margin:f="none",required:h=!1,size:m="medium",variant:g="outlined"}=r,y=(0,H.Z)(r,Ju),v=(0,k.Z)({},r,{color:a,component:s,disabled:l,error:u,fullWidth:d,hiddenLabel:p,margin:f,required:h,size:m,variant:g}),b=(e=>{const{classes:t,margin:n,fullWidth:r}=e,o={root:["root","none"!==n&&`margin${(0,Ui.Z)(n)}`,r&&"fullWidth"]};return(0,Ri.Z)(o,Xu,t)})(v),[A,C]=t.useState((()=>{let e=!1;return o&&t.Children.forEach(o,(t=>{if(!(0,Ku.Z)(t,["Input","Select"]))return;const n=(0,Ku.Z)(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)})),e})),[w,x]=t.useState((()=>{let e=!1;return o&&t.Children.forEach(o,(t=>{(0,Ku.Z)(t,["Input","Select"])&&Ql(t.props,!0)&&(e=!0)})),e})),[E,S]=t.useState(!1);l&&E&&S(!1);const B=void 0===c||l?E:c,O=t.useCallback((()=>{x(!0)}),[]),T={adornedStart:A,setAdornedStart:C,color:a,disabled:l,error:u,filled:w,focused:B,fullWidth:d,hiddenLabel:p,size:m,onBlur:()=>{S(!1)},onEmpty:t.useCallback((()=>{x(!1)}),[]),onFilled:O,onFocus:()=>{S(!0)},registerEffect:void 0,required:h,variant:g};return(0,Gi.jsx)(Il.Provider,{value:T,children:(0,Gi.jsx)(ec,(0,k.Z)({as:s,ownerState:v,className:(0,Ii.Z)(b.root,i),ref:n},y,{children:o}))})}));n(6607);var nc=n(8038);function rc(e){return(0,Wi.Z)("MuiList",e)}(0,Vi.Z)("MuiList",["root","padding","dense","subheader"]);const oc=["children","className","component","dense","disablePadding","subheader"],ic=(0,$i.ZP)("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})((({ownerState:e})=>(0,k.Z)({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0}))),ac=t.forwardRef((function(e,n){const r=(0,Yi.Z)({props:e,name:"MuiList"}),{children:o,className:i,component:a="ul",dense:s=!1,disablePadding:l=!1,subheader:u}=r,c=(0,H.Z)(r,oc),d=t.useMemo((()=>({dense:s})),[s]),p=(0,k.Z)({},r,{component:a,dense:s,disablePadding:l}),f=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e,i={root:["root",!n&&"padding",r&&"dense",o&&"subheader"]};return(0,Ri.Z)(i,rc,t)})(p);return(0,Gi.jsx)(fu.Provider,{value:d,children:(0,Gi.jsxs)(ic,(0,k.Z)({as:a,className:(0,Ii.Z)(f.root,i),ref:n,ownerState:p},c,{children:[u,o]}))})})),sc=ac;function lc(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}const uc=lc,cc=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function dc(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function pc(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function fc(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function hc(e,t,n,r,o,i){let a=!1,s=o(e,t,!!t&&n);for(;s;){if(s===e.firstChild){if(a)return!1;a=!0}const t=!r&&(s.disabled||"true"===s.getAttribute("aria-disabled"));if(s.hasAttribute("tabindex")&&fc(s,i)&&!t)return s.focus(),!0;s=o(e,s,n)}return!1}const mc=t.forwardRef((function(e,n){const{actions:r,autoFocus:o=!1,autoFocusItem:i=!1,children:a,className:s,disabledItemsFocusable:l=!1,disableListWrap:u=!1,onKeyDown:c,variant:d="selectedMenu"}=e,p=(0,H.Z)(e,cc),f=t.useRef(null),h=t.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});(0,Vl.Z)((()=>{o&&f.current.focus()}),[o]),t.useImperativeHandle(r,(()=>({adjustStyleForScrollbar:(e,t)=>{const n=!f.current.style.width;if(e.clientHeight<f.current.clientHeight&&n){const n=`${uc((0,nc.Z)(e))}px`;f.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=n,f.current.style.width=`calc(100% + ${n})`}return f.current}})),[]);const m=(0,Wl.Z)(f,n);let g=-1;t.Children.forEach(a,((e,n)=>{t.isValidElement(e)&&(e.props.disabled||("selectedMenu"===d&&e.props.selected||-1===g)&&(g=n))}));const y=t.Children.map(a,((e,n)=>{if(n===g){const n={};return i&&(n.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===d&&(n.tabIndex=0),t.cloneElement(e,n)}return e}));return(0,Gi.jsx)(sc,(0,k.Z)({role:"menu",ref:m,className:s,onKeyDown:e=>{const t=f.current,n=e.key,r=(0,nc.Z)(t).activeElement;if("ArrowDown"===n)e.preventDefault(),hc(t,r,u,l,dc);else if("ArrowUp"===n)e.preventDefault(),hc(t,r,u,l,pc);else if("Home"===n)e.preventDefault(),hc(t,null,u,l,dc);else if("End"===n)e.preventDefault(),hc(t,null,u,l,pc);else if(1===n.length){const o=h.current,i=n.toLowerCase(),a=performance.now();o.keys.length>0&&(a-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&i!==o.keys[0]&&(o.repeating=!1)),o.lastTime=a,o.keys.push(i);const s=r&&!o.repeating&&fc(r,o);o.previousKeyMatched&&(s||hc(t,r,!1,l,dc,o))?e.preventDefault():o.previousKeyMatched=!1}c&&c(e)},tabIndex:o?0:-1},p,{children:y}))})),gc=mc;function yc(e){return(0,Wi.Z)("MuiPaper",e)}(0,Vi.Z)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const vc=["className","component","elevation","square","variant"],bc=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)},Ac=(0,$i.ZP)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>(0,k.Z)({backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${e.palette.divider}`},"elevation"===t.variant&&(0,k.Z)({boxShadow:e.shadows[t.elevation]},"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${(0,hl.Fq)("#fff",bc(t.elevation))}, ${(0,hl.Fq)("#fff",bc(t.elevation))})`})))),Cc=t.forwardRef((function(e,t){const n=(0,Yi.Z)({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:i=1,square:a=!1,variant:s="elevation"}=n,l=(0,H.Z)(n,vc),u=(0,k.Z)({},n,{component:o,elevation:i,square:a,variant:s}),c=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e,i={root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]};return(0,Ri.Z)(i,yc,o)})(u);return(0,Gi.jsx)(Ac,(0,k.Z)({as:o,ownerState:u,className:(0,Ii.Z)(c.root,r),ref:t},l))}));var wc=n(7144),xc=n(5340);var Ec="unmounted",kc="exited",Sc="entering",Bc="entered",Oc="exiting",Tc=function(e){function n(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o=kc,r.appearStatus=Sc):o=Bc:o=t.unmountOnExit||t.mountOnEnter?Ec:kc,r.state={status:o},r.nextCallback=null,r}w(n,e),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Ec?{status:kc}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Sc&&n!==Bc&&(t=Sc):n!==Sc&&n!==Bc||(t=Oc)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),t===Sc?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===kc&&this.setState({status:Ec})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,i=this.props.nodeRef?[r]:[o.findDOMNode(this),r],a=i[0],s=i[1],l=this.getTimeouts(),u=r?l.appear:l.enter;e||n?(this.props.onEnter(a,s),this.safeSetState({status:Sc},(function(){t.props.onEntering(a,s),t.onTransitionEnd(u,(function(){t.safeSetState({status:Bc},(function(){t.props.onEntered(a,s)}))}))}))):this.safeSetState({status:Bc},(function(){t.props.onEntered(a)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:o.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Oc},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:kc},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:kc},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:o.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=i[0],s=i[1];this.props.addEndListener(a,s)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var e=this.state.status;if(e===Ec)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,(0,H.Z)(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return t.createElement(gu.Provider,{value:null},"function"==typeof r?r(e,o):t.cloneElement(t.Children.only(r),o))},n}(t.Component);function Dc(){}Tc.contextType=gu,Tc.propTypes={},Tc.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Dc,onEntering:Dc,onEntered:Dc,onExit:Dc,onExiting:Dc,onExited:Dc},Tc.UNMOUNTED=Ec,Tc.EXITED=kc,Tc.ENTERING=Sc,Tc.ENTERED=Bc,Tc.EXITING=Oc;const Nc=Tc,Pc=e=>e.scrollTop;function Ic(e,t){var n,r;const{timeout:o,easing:i,style:a={}}=e;return{duration:null!=(n=a.transitionDuration)?n:"number"==typeof o?o:o[t.mode]||0,easing:null!=(r=a.transitionTimingFunction)?r:"object"==typeof i?i[t.mode]:i,delay:a.transitionDelay}}const Rc=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function _c(e){return`scale(${e}, ${e**2})`}const Mc={entering:{opacity:1,transform:_c(1)},entered:{opacity:1,transform:"none"}},Zc=t.forwardRef((function(e,n){const{addEndListener:r,appear:o=!0,children:i,easing:a,in:s,onEnter:l,onEntered:u,onEntering:c,onExit:d,onExited:p,onExiting:f,style:h,timeout:m="auto",TransitionComponent:g=Nc}=e,y=(0,H.Z)(e,Rc),v=t.useRef(),b=t.useRef(),A=gl(),C=t.useRef(null),w=(0,Wl.Z)(i.ref,n),x=(0,Wl.Z)(C,w),E=e=>t=>{if(e){const n=C.current;void 0===t?e(n):e(n,t)}},S=E(c),B=E(((e,t)=>{Pc(e);const{duration:n,delay:r,easing:o}=Ic({style:h,timeout:m,easing:a},{mode:"enter"});let i;"auto"===m?(i=A.transitions.getAutoHeightDuration(e.clientHeight),b.current=i):i=n,e.style.transition=[A.transitions.create("opacity",{duration:i,delay:r}),A.transitions.create("transform",{duration:.666*i,delay:r,easing:o})].join(","),l&&l(e,t)})),O=E(u),T=E(f),D=E((e=>{const{duration:t,delay:n,easing:r}=Ic({style:h,timeout:m,easing:a},{mode:"exit"});let o;"auto"===m?(o=A.transitions.getAutoHeightDuration(e.clientHeight),b.current=o):o=t,e.style.transition=[A.transitions.create("opacity",{duration:o,delay:n}),A.transitions.create("transform",{duration:.666*o,delay:n||.333*o,easing:r})].join(","),e.style.opacity="0",e.style.transform=_c(.75),d&&d(e)})),N=E(p);return t.useEffect((()=>()=>{clearTimeout(v.current)}),[]),(0,Gi.jsx)(g,(0,k.Z)({appear:o,in:s,nodeRef:C,onEnter:B,onEntered:O,onEntering:S,onExit:D,onExited:N,onExiting:T,addEndListener:e=>{"auto"===m&&(v.current=setTimeout(e,b.current||0)),r&&r(C.current,e)},timeout:"auto"===m?null:m},y,{children:(e,n)=>t.cloneElement(i,(0,k.Z)({style:(0,k.Z)({opacity:0,transform:_c(.75),visibility:"exited"!==e||s?void 0:"hidden"},Mc[e],h,i.props.style),ref:x},n))}))}));Zc.muiSupportAuto=!0;const jc=Zc;var zc=n(9064),Lc=n(7960);const Fc=t.forwardRef((function(e,n){const{children:r,container:i,disablePortal:a=!1}=e,[s,l]=t.useState(null),u=(0,qs.Z)(t.isValidElement(r)?r.ref:null,n);return(0,Gs.Z)((()=>{a||l(function(e){return"function"==typeof e?e():e}(i)||document.body)}),[i,a]),(0,Gs.Z)((()=>{if(s&&!a)return(0,Lc.Z)(n,s),()=>{(0,Lc.Z)(n,null)}}),[n,s,a]),a?t.isValidElement(r)?t.cloneElement(r,{ref:u}):r:s?o.createPortal(r,s):s}));function Uc(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Yc(e){return parseInt((0,zl.Z)(e).getComputedStyle(e).paddingRight,10)||0}function $c(e,t,n,r=[],o){const i=[t,n,...r],a=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(e=>{-1===i.indexOf(e)&&-1===a.indexOf(e.tagName)&&Uc(e,o)}))}function Wc(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const Vc=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function qc(e){const t=[],n=[];return Array.from(e.querySelectorAll(Vc)).forEach(((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex"),10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function Gc(){return!0}const Hc=function(e){const{children:n,disableAutoFocus:r=!1,disableEnforceFocus:o=!1,disableRestoreFocus:i=!1,getTabbable:a=qc,isEnabled:s=Gc,open:l}=e,u=t.useRef(),c=t.useRef(null),d=t.useRef(null),p=t.useRef(null),f=t.useRef(null),h=t.useRef(!1),m=t.useRef(null),g=(0,qs.Z)(n.ref,m),y=t.useRef(null);t.useEffect((()=>{l&&m.current&&(h.current=!r)}),[r,l]),t.useEffect((()=>{if(!l||!m.current)return;const e=(0,$s.Z)(m.current);return m.current.contains(e.activeElement)||(m.current.hasAttribute("tabIndex")||m.current.setAttribute("tabIndex",-1),h.current&&m.current.focus()),()=>{i||(p.current&&p.current.focus&&(u.current=!0,p.current.focus()),p.current=null)}}),[l]),t.useEffect((()=>{if(!l||!m.current)return;const e=(0,$s.Z)(m.current),t=t=>{const{current:n}=m;if(null!==n)if(e.hasFocus()&&!o&&s()&&!u.current){if(!n.contains(e.activeElement)){if(t&&f.current!==t.target||e.activeElement!==f.current)f.current=null;else if(null!==f.current)return;if(!h.current)return;let o=[];if(e.activeElement!==c.current&&e.activeElement!==d.current||(o=a(m.current)),o.length>0){var r,i;const e=Boolean((null==(r=y.current)?void 0:r.shiftKey)&&"Tab"===(null==(i=y.current)?void 0:i.key)),t=o[0],n=o[o.length-1];e?n.focus():t.focus()}else n.focus()}}else u.current=!1},n=t=>{y.current=t,!o&&s()&&"Tab"===t.key&&e.activeElement===m.current&&t.shiftKey&&(u.current=!0,d.current.focus())};e.addEventListener("focusin",t),e.addEventListener("keydown",n,!0);const r=setInterval((()=>{"BODY"===e.activeElement.tagName&&t()}),50);return()=>{clearInterval(r),e.removeEventListener("focusin",t),e.removeEventListener("keydown",n,!0)}}),[r,o,i,s,l,a]);const v=e=>{null===p.current&&(p.current=e.relatedTarget),h.current=!0};return(0,Gi.jsxs)(t.Fragment,{children:[(0,Gi.jsx)("div",{tabIndex:0,onFocus:v,ref:c,"data-test":"sentinelStart"}),t.cloneElement(n,{ref:g,onFocus:e=>{null===p.current&&(p.current=e.relatedTarget),h.current=!0,f.current=e.target;const t=n.props.onFocus;t&&t(e)}}),(0,Gi.jsx)("div",{tabIndex:0,onFocus:v,ref:d,"data-test":"sentinelEnd"})]})};function Qc(e){return(0,Wi.Z)("MuiModal",e)}(0,Vi.Z)("MuiModal",["root","hidden"]);const Kc=["BackdropComponent","BackdropProps","children","classes","className","closeAfterTransition","component","components","componentsProps","container","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onKeyDown","open","theme","onTransitionEnter","onTransitionExited"],Xc=new class{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Uc(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);$c(t,e.mount,e.modalRef,r,!0);const o=Wc(this.containers,(e=>e.container===t));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=Wc(this.containers,(t=>-1!==t.modals.indexOf(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=(0,$s.Z)(e);return t.body===e?(0,zl.Z)(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=lc((0,$s.Z)(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${Yc(r)+e}px`;const t=(0,$s.Z)(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${Yc(t)+e}px`}))}const e=r.parentElement,t=(0,zl.Z)(r),o="HTML"===(null==e?void 0:e.nodeName)&&"scroll"===t.getComputedStyle(e).overflowY?e:r;n.push({value:o.style.overflow,property:"overflow",el:o},{value:o.style.overflowX,property:"overflow-x",el:o},{value:o.style.overflowY,property:"overflow-y",el:o}),o.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e){const t=this.modals.indexOf(e);if(-1===t)return t;const n=Wc(this.containers,(t=>-1!==t.modals.indexOf(e))),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&Uc(e.modalRef,!0),$c(r.container,e.mount,e.modalRef,r.hiddenSiblings,!1),this.containers.splice(n,1);else{const e=r.modals[r.modals.length-1];e.modalRef&&Uc(e.modalRef,!1)}return t}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}},Jc=t.forwardRef((function(e,n){const{BackdropComponent:r,BackdropProps:o,children:i,classes:a,className:s,closeAfterTransition:l=!1,component:u="div",components:c={},componentsProps:d={},container:p,disableAutoFocus:f=!1,disableEnforceFocus:h=!1,disableEscapeKeyDown:m=!1,disablePortal:g=!1,disableRestoreFocus:y=!1,disableScrollLock:v=!1,hideBackdrop:b=!1,keepMounted:A=!1,manager:C=Xc,onBackdropClick:w,onClose:x,onKeyDown:E,open:S,theme:B,onTransitionEnter:O,onTransitionExited:T}=e,D=(0,H.Z)(e,Kc),[N,P]=t.useState(!0),I=t.useRef({}),R=t.useRef(null),_=t.useRef(null),M=(0,qs.Z)(_,n),Z=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(e),j=()=>(I.current.modalRef=_.current,I.current.mountNode=R.current,I.current),z=()=>{C.mount(j(),{disableScrollLock:v}),_.current.scrollTop=0},L=(0,Hs.Z)((()=>{const e=function(e){return"function"==typeof e?e():e}(p)||(0,$s.Z)(R.current).body;C.add(j(),e),_.current&&z()})),F=t.useCallback((()=>C.isTopModal(j())),[C]),U=(0,Hs.Z)((e=>{R.current=e,e&&(S&&F()?z():Uc(_.current,!0))})),Y=t.useCallback((()=>{C.remove(j())}),[C]);t.useEffect((()=>()=>{Y()}),[Y]),t.useEffect((()=>{S?L():Z&&l||Y()}),[S,Y,Z,l,L]);const $=(0,k.Z)({},e,{classes:a,closeAfterTransition:l,disableAutoFocus:f,disableEnforceFocus:h,disableEscapeKeyDown:m,disablePortal:g,disableRestoreFocus:y,disableScrollLock:v,exited:N,hideBackdrop:b,keepMounted:A}),W=(e=>{const{open:t,exited:n,classes:r}=e,o={root:["root",!t&&n&&"hidden"]};return(0,Ri.Z)(o,Qc,r)})($);if(!A&&!S&&(!Z||N))return null;const V={};void 0===i.props.tabIndex&&(V.tabIndex="-1"),Z&&(V.onEnter=(0,zc.Z)((()=>{P(!1),O&&O()}),i.props.onEnter),V.onExited=(0,zc.Z)((()=>{P(!0),T&&T(),l&&Y()}),i.props.onExited));const q=c.Root||u,G=d.root||{};return(0,Gi.jsx)(Fc,{ref:U,container:p,disablePortal:g,children:(0,Gi.jsxs)(q,(0,k.Z)({role:"presentation"},G,!Us(q)&&{as:u,ownerState:(0,k.Z)({},$,G.ownerState),theme:B},D,{ref:M,onKeyDown:e=>{E&&E(e),"Escape"===e.key&&F()&&(m||(e.stopPropagation(),x&&x(e,"escapeKeyDown")))},className:(0,Ii.Z)(W.root,G.className,s),children:[!b&&r?(0,Gi.jsx)(r,(0,k.Z)({open:S,onClick:e=>{e.target===e.currentTarget&&(w&&w(e),x&&x(e,"backdropClick"))}},o)):null,(0,Gi.jsx)(Hc,{disableEnforceFocus:h,disableAutoFocus:f,disableRestoreFocus:y,isEnabled:F,open:S,children:t.cloneElement(i,V)})]}))})}));function ed(e){return(0,Wi.Z)("MuiBackdrop",e)}(0,Vi.Z)("MuiBackdrop",["root","invisible"]);const td=["classes","className","invisible","component","components","componentsProps","theme"],nd=t.forwardRef((function(e,t){const{classes:n,className:r,invisible:o=!1,component:i="div",components:a={},componentsProps:s={},theme:l}=e,u=(0,H.Z)(e,td),c=(0,k.Z)({},e,{classes:n,invisible:o}),d=(e=>{const{classes:t,invisible:n}=e,r={root:["root",n&&"invisible"]};return(0,Ri.Z)(r,ed,t)})(c),p=a.Root||i,f=s.root||{};return(0,Gi.jsx)(p,(0,k.Z)({"aria-hidden":!0},f,!Us(p)&&{as:i,ownerState:(0,k.Z)({},c,f.ownerState),theme:l},{ref:t},u,{className:(0,Ii.Z)(d.root,f.className,r)}))}));var rd=n(6067);const od=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],id={entering:{opacity:1},entered:{opacity:1}},ad={enter:rd.x9.enteringScreen,exit:rd.x9.leavingScreen},sd=t.forwardRef((function(e,n){const{addEndListener:r,appear:o=!0,children:i,easing:a,in:s,onEnter:l,onEntered:u,onEntering:c,onExit:d,onExited:p,onExiting:f,style:h,timeout:m=ad,TransitionComponent:g=Nc}=e,y=(0,H.Z)(e,od),v=gl(),b=t.useRef(null),A=(0,Wl.Z)(i.ref,n),C=(0,Wl.Z)(b,A),w=e=>t=>{if(e){const n=b.current;void 0===t?e(n):e(n,t)}},x=w(c),E=w(((e,t)=>{Pc(e);const n=Ic({style:h,timeout:m,easing:a},{mode:"enter"});e.style.webkitTransition=v.transitions.create("opacity",n),e.style.transition=v.transitions.create("opacity",n),l&&l(e,t)})),S=w(u),B=w(f),O=w((e=>{const t=Ic({style:h,timeout:m,easing:a},{mode:"exit"});e.style.webkitTransition=v.transitions.create("opacity",t),e.style.transition=v.transitions.create("opacity",t),d&&d(e)})),T=w(p);return(0,Gi.jsx)(g,(0,k.Z)({appear:o,in:s,nodeRef:b,onEnter:E,onEntered:S,onEntering:x,onExit:O,onExited:T,onExiting:B,addEndListener:e=>{r&&r(b.current,e)},timeout:m},y,{children:(e,n)=>t.cloneElement(i,(0,k.Z)({style:(0,k.Z)({opacity:0,visibility:"exited"!==e||s?void 0:"hidden"},id[e],h,i.props.style),ref:C},n))}))})),ld=["children","components","componentsProps","className","invisible","open","transitionDuration","TransitionComponent"],ud=(0,$i.ZP)("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})((({ownerState:e})=>(0,k.Z)({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"}))),cd=t.forwardRef((function(e,t){var n;const r=(0,Yi.Z)({props:e,name:"MuiBackdrop"}),{children:o,components:i={},componentsProps:a={},className:s,invisible:l=!1,open:u,transitionDuration:c,TransitionComponent:d=sd}=r,p=(0,H.Z)(r,ld),f=(e=>{const{classes:t}=e;return t})((0,k.Z)({},r,{invisible:l}));return(0,Gi.jsx)(d,(0,k.Z)({in:u,timeout:c},p,{children:(0,Gi.jsx)(nd,{className:s,invisible:l,components:(0,k.Z)({Root:ud},i),componentsProps:{root:(0,k.Z)({},a.root,(!i.Root||!Us(i.Root))&&{ownerState:(0,k.Z)({},null==(n=a.root)?void 0:n.ownerState)})},classes:f,ref:t,children:o})}))})),dd=["BackdropComponent","closeAfterTransition","children","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted"],pd=(0,$i.ZP)("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})((({theme:e,ownerState:t})=>(0,k.Z)({position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"}))),fd=(0,$i.ZP)(cd,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),hd=t.forwardRef((function(e,n){var r;const o=(0,Yi.Z)({name:"MuiModal",props:e}),{BackdropComponent:i=fd,closeAfterTransition:a=!1,children:s,components:l={},componentsProps:u={},disableAutoFocus:c=!1,disableEnforceFocus:d=!1,disableEscapeKeyDown:p=!1,disablePortal:f=!1,disableRestoreFocus:h=!1,disableScrollLock:m=!1,hideBackdrop:g=!1,keepMounted:y=!1}=o,v=(0,H.Z)(o,dd),[b,A]=t.useState(!0),C={closeAfterTransition:a,disableAutoFocus:c,disableEnforceFocus:d,disableEscapeKeyDown:p,disablePortal:f,disableRestoreFocus:h,disableScrollLock:m,hideBackdrop:g,keepMounted:y},w=(0,k.Z)({},o,C,{exited:b}).classes;return(0,Gi.jsx)(Jc,(0,k.Z)({components:(0,k.Z)({Root:pd},l),componentsProps:{root:(0,k.Z)({},u.root,(!l.Root||!Us(l.Root))&&{ownerState:(0,k.Z)({},null==(r=u.root)?void 0:r.ownerState)})},BackdropComponent:i,onTransitionEnter:()=>A(!1),onTransitionExited:()=>A(!0),ref:n},v,{classes:w},C,{children:s}))}));function md(e){return(0,Wi.Z)("MuiPopover",e)}(0,Vi.Z)("MuiPopover",["root","paper"]);const gd=["onEntering"],yd=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"];function vd(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function bd(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function Ad(e){return[e.horizontal,e.vertical].map((e=>"number"==typeof e?`${e}px`:e)).join(" ")}function Cd(e){return"function"==typeof e?e():e}const wd=(0,$i.ZP)(hd,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),xd=(0,$i.ZP)(Cc,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),Ed=t.forwardRef((function(e,n){const r=(0,Yi.Z)({props:e,name:"MuiPopover"}),{action:o,anchorEl:i,anchorOrigin:a={vertical:"top",horizontal:"left"},anchorPosition:s,anchorReference:l="anchorEl",children:u,className:c,container:d,elevation:p=8,marginThreshold:f=16,open:h,PaperProps:m={},transformOrigin:g={vertical:"top",horizontal:"left"},TransitionComponent:y=jc,transitionDuration:v="auto",TransitionProps:{onEntering:b}={}}=r,A=(0,H.Z)(r.TransitionProps,gd),C=(0,H.Z)(r,yd),w=t.useRef(),x=(0,Wl.Z)(w,m.ref),E=(0,k.Z)({},r,{anchorOrigin:a,anchorReference:l,elevation:p,marginThreshold:f,PaperProps:m,transformOrigin:g,TransitionComponent:y,transitionDuration:v,TransitionProps:A}),S=(e=>{const{classes:t}=e;return(0,Ri.Z)({root:["root"],paper:["paper"]},md,t)})(E),B=t.useCallback((()=>{if("anchorPosition"===l)return s;const e=Cd(i),t=(e&&1===e.nodeType?e:(0,nc.Z)(w.current).body).getBoundingClientRect();return{top:t.top+vd(t,a.vertical),left:t.left+bd(t,a.horizontal)}}),[i,a.horizontal,a.vertical,s,l]),O=t.useCallback((e=>({vertical:vd(e,g.vertical),horizontal:bd(e,g.horizontal)})),[g.horizontal,g.vertical]),T=t.useCallback((e=>{const t={width:e.offsetWidth,height:e.offsetHeight},n=O(t);if("none"===l)return{top:null,left:null,transformOrigin:Ad(n)};const r=B();let o=r.top-n.vertical,a=r.left-n.horizontal;const s=o+t.height,u=a+t.width,c=(0,xc.Z)(Cd(i)),d=c.innerHeight-f,p=c.innerWidth-f;if(o<f){const e=o-f;o-=e,n.vertical+=e}else if(s>d){const e=s-d;o-=e,n.vertical+=e}if(a<f){const e=a-f;a-=e,n.horizontal+=e}else if(u>p){const e=u-p;a-=e,n.horizontal+=e}return{top:`${Math.round(o)}px`,left:`${Math.round(a)}px`,transformOrigin:Ad(n)}}),[i,l,B,O,f]),D=t.useCallback((()=>{const e=w.current;if(!e)return;const t=T(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}),[T]);t.useEffect((()=>{h&&D()})),t.useImperativeHandle(o,(()=>h?{updatePosition:()=>{D()}}:null),[h,D]),t.useEffect((()=>{if(!h)return;const e=(0,wc.Z)((()=>{D()})),t=(0,xc.Z)(i);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[i,h,D]);let N=v;"auto"!==v||y.muiSupportAuto||(N=void 0);const P=d||(i?(0,nc.Z)(Cd(i)).body:void 0);return(0,Gi.jsx)(wd,(0,k.Z)({BackdropProps:{invisible:!0},className:(0,Ii.Z)(S.root,c),container:P,open:h,ref:n,ownerState:E},C,{children:(0,Gi.jsx)(y,(0,k.Z)({appear:!0,in:h,onEntering:(e,t)=>{b&&b(e,t),D()},timeout:N},A,{children:(0,Gi.jsx)(xd,(0,k.Z)({elevation:p},m,{ref:x,className:(0,Ii.Z)(S.paper,m.className),children:u}))}))}))}));function kd(e){return(0,Wi.Z)("MuiMenu",e)}(0,Vi.Z)("MuiMenu",["root","paper","list"]);const Sd=["onEntering"],Bd=["autoFocus","children","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"],Od={vertical:"top",horizontal:"right"},Td={vertical:"top",horizontal:"left"},Dd=(0,$i.ZP)(Ed,{shouldForwardProp:e=>(0,$i.FO)(e)||"classes"===e,name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Nd=(0,$i.ZP)(Cc,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),Pd=(0,$i.ZP)(gc,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),Id=t.forwardRef((function(e,n){const r=(0,Yi.Z)({props:e,name:"MuiMenu"}),{autoFocus:o=!0,children:i,disableAutoFocusItem:a=!1,MenuListProps:s={},onClose:l,open:u,PaperProps:c={},PopoverClasses:d,transitionDuration:p="auto",TransitionProps:{onEntering:f}={},variant:h="selectedMenu"}=r,m=(0,H.Z)(r.TransitionProps,Sd),g=(0,H.Z)(r,Bd),y=gl(),v="rtl"===y.direction,b=(0,k.Z)({},r,{autoFocus:o,disableAutoFocusItem:a,MenuListProps:s,onEntering:f,PaperProps:c,transitionDuration:p,TransitionProps:m,variant:h}),A=(e=>{const{classes:t}=e;return(0,Ri.Z)({root:["root"],paper:["paper"],list:["list"]},kd,t)})(b),C=o&&!a&&u,w=t.useRef(null);let x=-1;return t.Children.map(i,((e,n)=>{t.isValidElement(e)&&(e.props.disabled||("selectedMenu"===h&&e.props.selected||-1===x)&&(x=n))})),(0,Gi.jsx)(Dd,(0,k.Z)({classes:d,onClose:l,anchorOrigin:{vertical:"bottom",horizontal:v?"right":"left"},transformOrigin:v?Od:Td,PaperProps:(0,k.Z)({component:Nd},c,{classes:(0,k.Z)({},c.classes,{root:A.paper})}),className:A.root,open:u,ref:n,transitionDuration:p,TransitionProps:(0,k.Z)({onEntering:(e,t)=>{w.current&&w.current.adjustStyleForScrollbar(e,y),f&&f(e,t)}},m),ownerState:b},g,{children:(0,Gi.jsx)(Pd,(0,k.Z)({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),l&&l(e,"tabKeyDown"))},actions:w,autoFocus:o&&(-1===x||a),autoFocusItem:C,variant:h},s,{className:(0,Ii.Z)(A.list,s.className),children:i}))}))})),Rd=Id;function _d(e){return(0,Wi.Z)("MuiNativeSelect",e)}const Md=(0,Vi.Z)("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput"]),Zd=["className","disabled","IconComponent","inputRef","variant"],jd=({ownerState:e,theme:t})=>(0,k.Z)({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":{backgroundColor:"light"===t.palette.mode?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},[`&.${Md.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:t.palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},"filled"===e.variant&&{"&&&":{paddingRight:32}},"outlined"===e.variant&&{borderRadius:t.shape.borderRadius,"&:focus":{borderRadius:t.shape.borderRadius},"&&&":{paddingRight:32}}),zd=(0,$i.ZP)("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:$i.FO,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],{[`&.${Md.multiple}`]:t.multiple}]}})(jd),Ld=({ownerState:e,theme:t})=>(0,k.Z)({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:t.palette.action.active,[`&.${Md.disabled}`]:{color:t.palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},"filled"===e.variant&&{right:7},"outlined"===e.variant&&{right:7}),Fd=(0,$i.ZP)("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,Ui.Z)(n.variant)}`],n.open&&t.iconOpen]}})(Ld),Ud=t.forwardRef((function(e,n){const{className:r,disabled:o,IconComponent:i,inputRef:a,variant:s="standard"}=e,l=(0,H.Z)(e,Zd),u=(0,k.Z)({},e,{disabled:o,variant:s}),c=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:i}=e,a={select:["select",n,r&&"disabled",o&&"multiple"],icon:["icon",`icon${(0,Ui.Z)(n)}`,i&&"iconOpen",r&&"disabled"]};return(0,Ri.Z)(a,_d,t)})(u);return(0,Gi.jsxs)(t.Fragment,{children:[(0,Gi.jsx)(zd,(0,k.Z)({ownerState:u,className:(0,Ii.Z)(c.select,r),disabled:o,ref:a||n},l)),e.multiple?null:(0,Gi.jsx)(Fd,{as:i,ownerState:u,className:c.icon})]})}));var Yd=n(9299);function $d(e){return(0,Wi.Z)("MuiSelect",e)}const Wd=(0,Vi.Z)("MuiSelect",["select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput"]),Vd=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],qd=(0,$i.ZP)("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`&.${Wd.select}`]:t.select},{[`&.${Wd.select}`]:t[n.variant]},{[`&.${Wd.multiple}`]:t.multiple}]}})(jd,{[`&.${Wd.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),Gd=(0,$i.ZP)("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,Ui.Z)(n.variant)}`],n.open&&t.iconOpen]}})(Ld),Hd=(0,$i.ZP)("input",{shouldForwardProp:e=>(0,$i.Dz)(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function Qd(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function Kd(e){return null==e||"string"==typeof e&&!e.trim()}const Xd=t.forwardRef((function(e,n){const{"aria-describedby":r,"aria-label":o,autoFocus:i,autoWidth:a,children:s,className:l,defaultOpen:u,defaultValue:c,disabled:d,displayEmpty:p,IconComponent:f,inputRef:h,labelId:m,MenuProps:g={},multiple:y,name:v,onBlur:b,onChange:A,onClose:C,onFocus:w,onOpen:x,open:E,readOnly:S,renderValue:B,SelectDisplayProps:O={},tabIndex:T,value:D,variant:N="standard"}=e,P=(0,H.Z)(e,Vd),[I,R]=(0,Yd.Z)({controlled:D,default:c,name:"Select"}),[_,M]=(0,Yd.Z)({controlled:E,default:u,name:"Select"}),Z=t.useRef(null),j=t.useRef(null),[z,L]=t.useState(null),{current:F}=t.useRef(null!=E),[U,Y]=t.useState(),$=(0,Wl.Z)(n,h),W=t.useCallback((e=>{j.current=e,e&&L(e)}),[]);t.useImperativeHandle($,(()=>({focus:()=>{j.current.focus()},node:Z.current,value:I})),[I]),t.useEffect((()=>{u&&_&&z&&!F&&(Y(a?null:z.clientWidth),j.current.focus())}),[z,a]),t.useEffect((()=>{i&&j.current.focus()}),[i]),t.useEffect((()=>{const e=(0,nc.Z)(j.current).getElementById(m);if(e){const t=()=>{getSelection().isCollapsed&&j.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}}),[m]);const V=(e,t)=>{e?x&&x(t):C&&C(t),F||(Y(a?null:z.clientWidth),M(e))},q=t.Children.toArray(s),G=e=>t=>{let n;if(t.currentTarget.hasAttribute("tabindex")){if(y){n=Array.isArray(I)?I.slice():[];const t=I.indexOf(e.props.value);-1===t?n.push(e.props.value):n.splice(t,1)}else n=e.props.value;if(e.props.onClick&&e.props.onClick(t),I!==n&&(R(n),A)){const r=t.nativeEvent||t,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:n,name:v}}),A(o,e)}y||V(!1,t)}},Q=null!==z&&_;let K,X;delete P["aria-invalid"];const J=[];let ee=!1,te=!1;(Ql({value:I})||p)&&(B?K=B(I):ee=!0);const ne=q.map((e=>{if(!t.isValidElement(e))return null;let n;if(y){if(!Array.isArray(I))throw new Error((0,jl.Z)(2));n=I.some((t=>Qd(t,e.props.value))),n&&ee&&J.push(e.props.children)}else n=Qd(I,e.props.value),n&&ee&&(X=e.props.children);return n&&(te=!0),t.cloneElement(e,{"aria-selected":n?"true":"false",onClick:G(e),onKeyUp:t=>{" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:n,value:void 0,"data-value":e.props.value})}));ee&&(K=y?0===J.length?null:J.reduce(((e,t,n)=>(e.push(t),n<J.length-1&&e.push(", "),e)),[]):X);let re,oe=U;!a&&F&&z&&(oe=z.clientWidth),re=void 0!==T?T:d?null:0;const ie=O.id||(v?`mui-component-select-${v}`:void 0),ae=(0,k.Z)({},e,{variant:N,value:I,open:Q}),se=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:i}=e,a={select:["select",n,r&&"disabled",o&&"multiple"],icon:["icon",`icon${(0,Ui.Z)(n)}`,i&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]};return(0,Ri.Z)(a,$d,t)})(ae);return(0,Gi.jsxs)(t.Fragment,{children:[(0,Gi.jsx)(qd,(0,k.Z)({ref:W,tabIndex:re,role:"button","aria-disabled":d?"true":void 0,"aria-expanded":Q?"true":"false","aria-haspopup":"listbox","aria-label":o,"aria-labelledby":[m,ie].filter(Boolean).join(" ")||void 0,"aria-describedby":r,onKeyDown:e=>{S||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),V(!0,e))},onMouseDown:d||S?null:e=>{0===e.button&&(e.preventDefault(),j.current.focus(),V(!0,e))},onBlur:e=>{!Q&&b&&(Object.defineProperty(e,"target",{writable:!0,value:{value:I,name:v}}),b(e))},onFocus:w},O,{ownerState:ae,className:(0,Ii.Z)(se.select,l,O.className),id:ie,children:Kd(K)?(0,Gi.jsx)("span",{className:"notranslate",dangerouslySetInnerHTML:{__html:"&#8203;"}}):K})),(0,Gi.jsx)(Hd,(0,k.Z)({value:Array.isArray(I)?I.join(","):I,name:v,ref:Z,"aria-hidden":!0,onChange:e=>{const t=q.map((e=>e.props.value)).indexOf(e.target.value);if(-1===t)return;const n=q[t];R(n.props.value),A&&A(e,n)},tabIndex:-1,disabled:d,className:se.nativeInput,autoFocus:i,ownerState:ae},P)),(0,Gi.jsx)(Gd,{as:f,className:se.icon,ownerState:ae}),(0,Gi.jsx)(Rd,(0,k.Z)({id:`menu-${v||""}`,anchorEl:z,open:Q,onClose:e=>{V(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},g,{MenuListProps:(0,k.Z)({"aria-labelledby":m,role:"listbox",disableListWrap:!0},g.MenuListProps),PaperProps:(0,k.Z)({},g.PaperProps,{style:(0,k.Z)({minWidth:oe},null!=g.PaperProps?g.PaperProps.style:null)}),children:ne}))]})})),Jd=Xd;var ep=n(5949);const tp=(0,ep.Z)((0,Gi.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown");function np(e){return(0,Wi.Z)("MuiInput",e)}const rp=(0,Vi.Z)("MuiInput",["root","formControl","focused","disabled","colorSecondary","underline","error","sizeSmall","multiline","fullWidth","input","inputSizeSmall","inputMultiline","inputTypeSearch"]),op=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","type"],ip=(0,$i.ZP)(nu,{shouldForwardProp:e=>(0,$i.FO)(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...eu(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return(0,k.Z)({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${e.palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${rp.focused}:after`]:{transform:"scaleX(1)"},[`&.${rp.error}:after`]:{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:`1px solid ${n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${rp.disabled}):before`]:{borderBottom:`2px solid ${e.palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${n}`}},[`&.${rp.disabled}:before`]:{borderBottomStyle:"dotted"}})})),ap=(0,$i.ZP)(ru,{name:"MuiInput",slot:"Input",overridesResolver:tu})({}),sp=t.forwardRef((function(e,t){const n=(0,Yi.Z)({props:e,name:"MuiInput"}),{disableUnderline:r,components:o={},componentsProps:i,fullWidth:a=!1,inputComponent:s="input",multiline:l=!1,type:u="text"}=n,c=(0,H.Z)(n,op),d=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},o=(0,Ri.Z)(r,np,t);return(0,k.Z)({},t,o)})(n),p={root:{ownerState:{disableUnderline:r}}},f=i?(0,ua.Z)(i,p):p;return(0,Gi.jsx)(au,(0,k.Z)({components:(0,k.Z)({Root:ip,Input:ap},o),componentsProps:f,fullWidth:a,inputComponent:s,multiline:l,ref:t,type:u},c,{classes:d}))}));sp.muiName="Input";const lp=sp;function up(e){return(0,Wi.Z)("MuiFilledInput",e)}const cp=(0,Vi.Z)("MuiFilledInput",["root","colorSecondary","underline","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","hiddenLabel","input","inputSizeSmall","inputHiddenLabel","inputMultiline","inputAdornedStart","inputAdornedEnd"]),dp=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","type"],pp=(0,$i.ZP)(nu,{shouldForwardProp:e=>(0,$i.FO)(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...eu(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=n?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",o=n?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)";return(0,k.Z)({position:"relative",backgroundColor:o,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:n?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:o}},[`&.${cp.focused}`]:{backgroundColor:o},[`&.${cp.disabled}`]:{backgroundColor:n?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${e.palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${cp.focused}:after`]:{transform:"scaleX(1)"},[`&.${cp.error}:after`]:{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:`1px solid ${r}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${cp.disabled}):before`]:{borderBottom:`1px solid ${e.palette.text.primary}`},[`&.${cp.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&(0,k.Z)({padding:"25px 12px 8px"},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17}))})),fp=(0,$i.ZP)(ru,{name:"MuiFilledInput",slot:"Input",overridesResolver:tu})((({theme:e,ownerState:t})=>(0,k.Z)({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12,"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9}))),hp=t.forwardRef((function(e,t){const n=(0,Yi.Z)({props:e,name:"MuiFilledInput"}),{components:r={},componentsProps:o,fullWidth:i=!1,inputComponent:a="input",multiline:s=!1,type:l="text"}=n,u=(0,H.Z)(n,dp),c=(0,k.Z)({},n,{fullWidth:i,inputComponent:a,multiline:s,type:l}),d=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},o=(0,Ri.Z)(r,up,t);return(0,k.Z)({},t,o)})(n),p={root:{ownerState:c},input:{ownerState:c}},f=o?(0,ua.Z)(o,p):p;return(0,Gi.jsx)(au,(0,k.Z)({components:(0,k.Z)({Root:pp,Input:fp},r),componentsProps:f,fullWidth:i,inputComponent:a,multiline:s,ref:t,type:l},u,{classes:d}))}));hp.muiName="Input";const mp=hp;var gp,yp;const vp=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],bp=t.forwardRef((function(e,n){const r=(0,Yi.Z)({name:"MuiSelect",props:e}),{autoWidth:o=!1,children:i,classes:a={},className:s,defaultOpen:l=!1,displayEmpty:u=!1,IconComponent:c=tp,id:d,input:p,inputProps:f,label:h,labelId:m,MenuProps:g,multiple:y=!1,native:v=!1,onClose:b,onOpen:A,open:C,renderValue:w,SelectDisplayProps:x,variant:E="outlined"}=r,S=(0,H.Z)(r,vp),B=v?Ud:Jd,O=_l({props:r,muiFormControl:Rl(),states:["variant"]}).variant||E,T=p||{standard:gp||(gp=(0,Gi.jsx)(lp,{})),outlined:(0,Gi.jsx)(pu,{label:h}),filled:yp||(yp=(0,Gi.jsx)(mp,{}))}[O],D=(e=>{const{classes:t}=e;return t})((0,k.Z)({},r,{classes:a})),N=(0,Wl.Z)(n,T.ref);return t.cloneElement(T,(0,k.Z)({inputComponent:B,inputProps:(0,k.Z)({children:i,IconComponent:c,variant:O,type:void 0,multiple:y},v?{id:d}:{autoWidth:o,defaultOpen:l,displayEmpty:u,labelId:m,MenuProps:g,onClose:b,onOpen:A,open:C,renderValue:w,SelectDisplayProps:(0,k.Z)({id:d},x)},f,{classes:f?(0,ua.Z)(D,f.classes):D},p?p.props.inputProps:{})},y&&v&&"outlined"===O?{notched:!0}:{},{ref:N,className:(0,Ii.Z)(T.props.className,s)},S))}));bp.muiName="Select";const Ap=bp,Cp=(0,ep.Z)((0,Gi.jsx)("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"}),"Cancel");function wp(e){return(0,Wi.Z)("MuiChip",e)}const xp=(0,Vi.Z)("MuiChip",["root","sizeSmall","sizeMedium","colorPrimary","colorSecondary","disabled","clickable","clickableColorPrimary","clickableColorSecondary","deletable","deletableColorPrimary","deletableColorSecondary","outlined","filled","outlinedPrimary","outlinedSecondary","avatar","avatarSmall","avatarMedium","avatarColorPrimary","avatarColorSecondary","icon","iconSmall","iconMedium","iconColorPrimary","iconColorSecondary","label","labelSmall","labelMedium","deleteIcon","deleteIconSmall","deleteIconMedium","deleteIconColorPrimary","deleteIconColorSecondary","deleteIconOutlinedColorPrimary","deleteIconOutlinedColorSecondary","focusVisible"]),Ep=["avatar","className","clickable","color","component","deleteIcon","disabled","icon","label","onClick","onDelete","onKeyDown","onKeyUp","size","variant"],kp=(0,$i.ZP)("div",{name:"MuiChip",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,{color:r,clickable:o,onDelete:i,size:a,variant:s}=n;return[{[`& .${xp.avatar}`]:t.avatar},{[`& .${xp.avatar}`]:t[`avatar${(0,Ui.Z)(a)}`]},{[`& .${xp.avatar}`]:t[`avatarColor${(0,Ui.Z)(r)}`]},{[`& .${xp.icon}`]:t.icon},{[`& .${xp.icon}`]:t[`icon${(0,Ui.Z)(a)}`]},{[`& .${xp.icon}`]:t[`iconColor${(0,Ui.Z)(r)}`]},{[`& .${xp.deleteIcon}`]:t.deleteIcon},{[`& .${xp.deleteIcon}`]:t[`deleteIcon${(0,Ui.Z)(a)}`]},{[`& .${xp.deleteIcon}`]:t[`deleteIconColor${(0,Ui.Z)(r)}`]},{[`& .${xp.deleteIcon}`]:t[`deleteIconOutlinedColor${(0,Ui.Z)(r)}`]},t.root,t[`size${(0,Ui.Z)(a)}`],t[`color${(0,Ui.Z)(r)}`],o&&t.clickable,o&&"default"!==r&&t[`clickableColor${(0,Ui.Z)(r)})`],i&&t.deletable,i&&"default"!==r&&t[`deletableColor${(0,Ui.Z)(r)}`],t[s],"outlined"===s&&t[`outlined${(0,Ui.Z)(r)}`]]}})((({theme:e,ownerState:t})=>{const n=(0,hl.Fq)(e.palette.text.primary,.26);return(0,k.Z)({fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:e.palette.text.primary,backgroundColor:e.palette.action.selected,borderRadius:16,whiteSpace:"nowrap",transition:e.transitions.create(["background-color","box-shadow"]),cursor:"default",outline:0,textDecoration:"none",border:0,padding:0,verticalAlign:"middle",boxSizing:"border-box",[`&.${xp.disabled}`]:{opacity:e.palette.action.disabledOpacity,pointerEvents:"none"},[`& .${xp.avatar}`]:{marginLeft:5,marginRight:-6,width:24,height:24,color:"light"===e.palette.mode?e.palette.grey[700]:e.palette.grey[300],fontSize:e.typography.pxToRem(12)},[`& .${xp.avatarColorPrimary}`]:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.dark},[`& .${xp.avatarColorSecondary}`]:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.dark},[`& .${xp.avatarSmall}`]:{marginLeft:4,marginRight:-4,width:18,height:18,fontSize:e.typography.pxToRem(10)},[`& .${xp.icon}`]:(0,k.Z)({color:"light"===e.palette.mode?e.palette.grey[700]:e.palette.grey[300],marginLeft:5,marginRight:-6},"small"===t.size&&{fontSize:18,marginLeft:4,marginRight:-4},"default"!==t.color&&{color:"inherit"}),[`& .${xp.deleteIcon}`]:(0,k.Z)({WebkitTapHighlightColor:"transparent",color:n,fontSize:22,cursor:"pointer",margin:"0 5px 0 -6px","&:hover":{color:(0,hl.Fq)(n,.4)}},"small"===t.size&&{fontSize:16,marginRight:4,marginLeft:-4},"default"!==t.color&&{color:(0,hl.Fq)(e.palette[t.color].contrastText,.7),"&:hover, &:active":{color:e.palette[t.color].contrastText}})},"small"===t.size&&{height:24},"default"!==t.color&&{backgroundColor:e.palette[t.color].main,color:e.palette[t.color].contrastText},t.onDelete&&{[`&.${xp.focusVisible}`]:{backgroundColor:(0,hl.Fq)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},t.onDelete&&"default"!==t.color&&{[`&.${xp.focusVisible}`]:{backgroundColor:e.palette[t.color].dark}})}),(({theme:e,ownerState:t})=>(0,k.Z)({},t.clickable&&{userSelect:"none",WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover":{backgroundColor:(0,hl.Fq)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity)},[`&.${xp.focusVisible}`]:{backgroundColor:(0,hl.Fq)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)},"&:active":{boxShadow:e.shadows[1]}},t.clickable&&"default"!==t.color&&{[`&:hover, &.${xp.focusVisible}`]:{backgroundColor:e.palette[t.color].dark}})),(({theme:e,ownerState:t})=>(0,k.Z)({},"outlined"===t.variant&&{backgroundColor:"transparent",border:`1px solid ${"light"===e.palette.mode?e.palette.grey[400]:e.palette.grey[700]}`,[`&.${xp.clickable}:hover`]:{backgroundColor:e.palette.action.hover},[`&.${xp.focusVisible}`]:{backgroundColor:e.palette.action.focus},[`& .${xp.avatar}`]:{marginLeft:4},[`& .${xp.avatarSmall}`]:{marginLeft:2},[`& .${xp.icon}`]:{marginLeft:4},[`& .${xp.iconSmall}`]:{marginLeft:2},[`& .${xp.deleteIcon}`]:{marginRight:5},[`& .${xp.deleteIconSmall}`]:{marginRight:3}},"outlined"===t.variant&&"default"!==t.color&&{color:e.palette[t.color].main,border:`1px solid ${(0,hl.Fq)(e.palette[t.color].main,.7)}`,[`&.${xp.clickable}:hover`]:{backgroundColor:(0,hl.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity)},[`&.${xp.focusVisible}`]:{backgroundColor:(0,hl.Fq)(e.palette[t.color].main,e.palette.action.focusOpacity)},[`& .${xp.deleteIcon}`]:{color:(0,hl.Fq)(e.palette[t.color].main,.7),"&:hover, &:active":{color:e.palette[t.color].main}}}))),Sp=(0,$i.ZP)("span",{name:"MuiChip",slot:"Label",overridesResolver:(e,t)=>{const{ownerState:n}=e,{size:r}=n;return[t.label,t[`label${(0,Ui.Z)(r)}`]]}})((({ownerState:e})=>(0,k.Z)({overflow:"hidden",textOverflow:"ellipsis",paddingLeft:12,paddingRight:12,whiteSpace:"nowrap"},"small"===e.size&&{paddingLeft:8,paddingRight:8})));function Bp(e){return"Backspace"===e.key||"Delete"===e.key}const Op=t.forwardRef((function(e,n){const r=(0,Yi.Z)({props:e,name:"MuiChip"}),{avatar:o,className:i,clickable:a,color:s="default",component:l,deleteIcon:u,disabled:c=!1,icon:d,label:p,onClick:f,onDelete:h,onKeyDown:m,onKeyUp:g,size:y="medium",variant:v="filled"}=r,b=(0,H.Z)(r,Ep),A=t.useRef(null),C=(0,Wl.Z)(A,n),w=e=>{e.stopPropagation(),h&&h(e)},x=!(!1===a||!f)||a,E="small"===y,S=x||h?Fu:l||"div",B=(0,k.Z)({},r,{component:S,disabled:c,size:y,color:s,onDelete:!!h,clickable:x,variant:v}),O=(e=>{const{classes:t,disabled:n,size:r,color:o,onDelete:i,clickable:a,variant:s}=e,l={root:["root",s,n&&"disabled",`size${(0,Ui.Z)(r)}`,`color${(0,Ui.Z)(o)}`,a&&"clickable",a&&`clickableColor${(0,Ui.Z)(o)}`,i&&"deletable",i&&`deletableColor${(0,Ui.Z)(o)}`,`${s}${(0,Ui.Z)(o)}`],label:["label",`label${(0,Ui.Z)(r)}`],avatar:["avatar",`avatar${(0,Ui.Z)(r)}`,`avatarColor${(0,Ui.Z)(o)}`],icon:["icon",`icon${(0,Ui.Z)(r)}`,`iconColor${(0,Ui.Z)(o)}`],deleteIcon:["deleteIcon",`deleteIcon${(0,Ui.Z)(r)}`,`deleteIconColor${(0,Ui.Z)(o)}`,`deleteIconOutlinedColor${(0,Ui.Z)(o)}`]};return(0,Ri.Z)(l,wp,t)})(B),T=S===Fu?(0,k.Z)({component:l||"div",focusVisibleClassName:O.focusVisible},h&&{disableRipple:!0}):{};let D=null;if(h){const e=(0,Ii.Z)("default"!==s&&("outlined"===v?O[`deleteIconOutlinedColor${(0,Ui.Z)(s)}`]:O[`deleteIconColor${(0,Ui.Z)(s)}`]),E&&O.deleteIconSmall);D=u&&t.isValidElement(u)?t.cloneElement(u,{className:(0,Ii.Z)(u.props.className,O.deleteIcon,e),onClick:w}):(0,Gi.jsx)(Cp,{className:(0,Ii.Z)(O.deleteIcon,e),onClick:w})}let N=null;o&&t.isValidElement(o)&&(N=t.cloneElement(o,{className:(0,Ii.Z)(O.avatar,o.props.className)}));let P=null;return d&&t.isValidElement(d)&&(P=t.cloneElement(d,{className:(0,Ii.Z)(O.icon,d.props.className)})),(0,Gi.jsxs)(kp,(0,k.Z)({as:S,className:(0,Ii.Z)(O.root,i),disabled:!(!x||!c)||void 0,onClick:f,onKeyDown:e=>{e.currentTarget===e.target&&Bp(e)&&e.preventDefault(),m&&m(e)},onKeyUp:e=>{e.currentTarget===e.target&&(h&&Bp(e)?h(e):"Escape"===e.key&&A.current&&A.current.blur()),g&&g(e)},ref:C,ownerState:B},T,b,{children:[N||P,(0,Gi.jsx)(Sp,{className:(0,Ii.Z)(O.label),ownerState:B,children:p}),D]}))}));function Tp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Dp={PaperProps:{style:{maxHeight:224,width:250}}};function Np(e,t,n){return{fontWeight:-1===t.indexOf(e)?n.typography.fontWeightRegular:n.typography.fontWeightMedium}}const Pp=function(e){var n=e.items,r=e.setItems,o=gl(),i=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Tp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Tp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)([]),2),a=i[0],s=i[1];return t.createElement("div",null,t.createElement(tc,{sx:{width:"100%"}},t.createElement(Ap,{labelId:"demo-multiple-chip-label",id:"demo-multiple-chip",multiple:!0,value:a,onChange:function(e){var t=e.target.value;s("string"==typeof t?t.split(","):t),r("string"==typeof t?t.split(","):t)},input:t.createElement(pu,{id:"select-multiple-chip"}),renderValue:function(e){return t.createElement(ga,{sx:{display:"flex",flexWrap:"wrap",gap:.5}},e.map((function(e){return t.createElement(Op,{key:e,label:e})})))},MenuProps:Dp},n.map((function(e){return t.createElement(Qu,{key:e,value:e,style:Np(e,a,o)},e)})))))};function Ip(e){return function(e){if(Array.isArray(e))return Rp(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Rp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rp(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Rp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const _p=function(e){var n=e.searchTerm,r=e.subject,o=e.isAssociatedWithSchool,i=e.meetingFormat,a=e.type,s=e.timeRange,l=(e.days,e.meetingFrequencies,e.updateSearchTerm),u=e.updateSubject,c=e.updateIsAssociatedWithSchool,d=e.updateMeetingFormat,p=e.updateType,f=e.updateTimeRange,h=e.updateDays,m=e.updateMeetingFrequencies,g=e.submitSearch,y=e.userSchool;return t.createElement("div",null,t.createElement(Tt,{onSubmit:g,className:"search-form"},t.createElement(jt,null,t.createElement(Lt,null,"Search Term"),t.createElement(Vt,{value:n,onChange:l})),t.createElement(jt,null,t.createElement(Lt,null,"Category"),t.createElement(Xt,{options:Object.keys(tn()),value:r,onChange:u})),t.createElement(jt,null,t.createElement(Lt,null,"Meeting Frequency"),t.createElement(Pp,{items:Ip(Object.values(ni.MeetingFrequencies)),setItems:m})),t.createElement(jt,null,t.createElement(Lt,null,"Meeting Days"),t.createElement(Pp,{items:Ip(Object.values(ni.Days)),setItems:h})),t.createElement(jt,null,t.createElement(Lt,null,"Meeting Time Range"),t.createElement("h4",null,s[0]," to ",s[1]),t.createElement(Tl,{updateTimeRange:f})),t.createElement("div",{className:"side-by-side"},t.createElement(jt,null,t.createElement(Lt,null,"Meeting Format"),t.createElement(Xt,{options:Ip(Object.values(js())),onChange:d,value:i})),t.createElement(jt,null,t.createElement(Lt,null,"Type"),t.createElement(Xt,{options:["Group","Tutor","Mixed"],onChange:p,value:a}))),""!==y&&t.createElement(Gt,null,t.createElement(Lt,null,"Show Only Groups Associated with ",y,"?"),t.createElement(Ht,{value:o,onChange:c,type:"checkbox"})),t.createElement(Mt,{type:Pt},"Search")))};function Mp(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Zp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return jp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jp(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const zp=function(){var e=Zp((0,t.useState)(""),2),n=e[0],r=e[1],o=Zp((0,t.useState)(tn().Any),2),i=o[0],a=o[1],s=Zp((0,t.useState)(!1),2),l=s[0],u=s[1],c=Zp((0,t.useState)(js().Mixed),2),d=c[0],p=c[1],f=Zp((0,t.useState)("Mixed"),2),h=f[0],m=f[1],g=Zp((0,t.useState)(["12:00AM","11:45PM"]),2),y=g[0],v=g[1],b=Zp((0,t.useState)([]),2),A=b[0],C=b[1],w=Zp((0,t.useState)([]),2),x=w[0],E=w[1],k=Pe(),S=Me((function(e){return e.authReducer.user||""})),B=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t&&(t.preventDefault(),t.stopPropagation()),e.next=3,Bo(Ut().Search.GetSearchResults,{searchTerm:n,subject:i,school:l?S.school:"",meetingFormat:d,meetingFrequencies:x,type:h,startTime:ni.Time.parseTimeString(y[0]),endTime:ni.Time.parseTimeString(y[1]),days:A},Kt().StudyGroup.SuccessStudyGroupsRetrieved,null,!0,(function(e,t){var n;t||k((n=e.studyGroups,{type:tt,payload:{groups:n}}))}),!1);case 3:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Mp(i,r,o,a,s,"next",e)}function s(e){Mp(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return(0,t.useEffect)((function(){B()}),[]),t.createElement("div",{className:"search-view"},t.createElement(_p,{searchTerm:n,subject:i,isAssociatedWithSchool:l,meetingFormat:d,type:h,timeRange:y,days:A,meetingFrequencies:x,updateSearchTerm:function(e){r(e.target.value)},updateSubject:function(e){a(e.target.value)},updateIsAssociatedWithSchool:function(e){u(e.target.checked)},updateMeetingFormat:function(e){p(e.target.options[e.target.selectedIndex].value)},updateType:function(e){m(e.target.options[e.target.selectedIndex].value)},updateTimeRange:function(e){v(e)},updateDays:function(e){C(e)},updateMeetingFrequencies:function(e){E(e)},submitSearch:B,userSchool:""!==S?S.school:""}))};var Lp=n(610),Fp={};Fp.styleTagTransform=g(),Fp.setAttributes=p(),Fp.insert=c().bind(null,"head"),Fp.domAPI=l(),Fp.insertStyleElement=h(),a()(Lp.Z,Fp),Lp.Z&&Lp.Z.locals&&Lp.Z.locals;var Up=n(9010),Yp={};Yp.styleTagTransform=g(),Yp.setAttributes=p(),Yp.insert=c().bind(null,"head"),Yp.domAPI=l(),Yp.insertStyleElement=h(),a()(Up.Z,Yp),Up.Z&&Up.Z.locals&&Up.Z.locals;const $p=function(e){var n=e.group,r=Pe();return(0,t.useEffect)((function(){console.log(n)}),[]),t.createElement("div",{className:"listing-container",style:{border:"".concat(n.groupColor," 5px solid")},onClick:function(){return r(function(e){return{type:Ue,payload:e}}(n))}},t.createElement("div",{className:"title-photo-container",style:{backgroundColor:n.groupColor}},t.createElement("h1",{className:"group-title"},n.name)),t.createElement("div",{className:"group-info-container"},t.createElement("div",{className:"group-info-item",id:"owner-info"},n.isTutorGroup?t.createElement("p",null,t.createElement("strong",null,"Tutor:")):t.createElement("p",null,t.createElement("strong",null,"Owner:")),t.createElement("h2",null,n.owner.name)),t.createElement("div",{className:"group-info-item",id:"school-info"},t.createElement("p",null,"School:"),t.createElement("h2",null,n.school?n.school:"None")),t.createElement("div",{className:"group-info-item",id:"subject-info"},t.createElement("p",null,"Subject:"),t.createElement("h2",null,n.subject)),t.createElement("div",{className:"group-info-item",id:"courseCode-info"},t.createElement("p",null,"Course Code:"),t.createElement("h2",null,n.course?n.course:"None")),n.recurringMeeting&&t.createElement("div",{className:"group-info-item",id:"schedule-info"},n.isOnlineGroup?t.createElement("p",null,"Meets ",t.createElement("strong",null,"Online"),":"):t.createElement("p",null,"Meets ",t.createElement("strong",null,"In-Person"),":"),t.createElement("h2",null,n.recurringMeeting.frequency," on ",n.recurringMeeting.day," at"," ",n.recurringMeeting.time))))},Wp=function(){var e=Me((function(e){return e.studyGroupsReducer.search})),n=Me((function(e){return e.notificationReducer.loading}));return t.createElement("div",{className:"search-results"},n?t.createElement(ya,null):e.map((function(e){return t.createElement($p,{group:e,key:e._id})})))},Vp=function(){return t.createElement(t.Fragment,null,t.createElement(Ga,{topBar:!0,currentPage:"search"},t.createElement("div",{className:"search-page"},t.createElement("div",{className:"page-title"},t.createElement("h1",null,"Search")),t.createElement("div",{className:"search-area"},t.createElement(zp,null),t.createElement(Wp,null)))))};var qp=n(2977),Gp={};Gp.styleTagTransform=g(),Gp.setAttributes=p(),Gp.insert=c().bind(null,"head"),Gp.domAPI=l(),Gp.insertStyleElement=h(),a()(qp.Z,Gp),qp.Z&&qp.Z.locals&&qp.Z.locals;var Hp=n(1888),Qp={};Qp.styleTagTransform=g(),Qp.setAttributes=p(),Qp.insert=c().bind(null,"head"),Qp.domAPI=l(),Qp.insertStyleElement=h(),a()(Hp.Z,Qp),Hp.Z&&Hp.Z.locals&&Hp.Z.locals;const Kp=function(e){var n=e.group,r=Pe();return t.createElement("div",{className:"members-container"},t.createElement(Lt,{style:{padding:"10px"}},"Owner"),t.createElement("div",{className:"member owner",onClick:function(){return r(ft(n.owner))},style:{borderColor:n.groupColor}},n.owner&&t.createElement(t.Fragment,null,t.createElement(bi,{image:n.owner.profilePicture}),t.createElement("p",null,n.owner.name)," ")),t.createElement(Lt,{style:{padding:"10px"}},"Members"),n.members&&n.members.map((function(e){return t.createElement("div",{className:"member",onClick:function(){return r(ft(e))},style:{borderColor:n.groupColor}},t.createElement(bi,{image:e.profilePicture}),t.createElement("p",null,e.name))})))};var Xp=n(6057),Jp={};function ef(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function tf(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){ef(i,r,o,a,s,"next",e)}function s(e){ef(i,r,o,a,s,"throw",e)}a(void 0)}))}}Jp.styleTagTransform=g(),Jp.setAttributes=p(),Jp.insert=c().bind(null,"head"),Jp.domAPI=l(),Jp.insertStyleElement=h(),a()(Xp.Z,Jp),Xp.Z&&Xp.Z.locals&&Xp.Z.locals;const nf=function(e){var n=e.group,r=Me((function(e){return e.authReducer.user})),o=Pe(),i=de(),a=function(){var e=tf(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t){e.next=3;break}return e.next=3,To(Ut().StudyGroup.DeleteStudyGroup,{studyGroupId:n._id},Kt().StudyGroup.SuccessStudyGroupDeleted,null,!0,(function(e,t){t||i.push("/")}));case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),s=function(){var e=tf(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t){e.next=3;break}return e.next=3,Bo(Ut().StudyGroup.LeaveStudyGroup,{studyGroupId:n._id},Kt().StudyGroup.SuccessStudyGroupLeft,null,!0,(function(e,t){t||i.push("/")}));case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return t.createElement("div",{className:"details-container"},t.createElement("div",{className:"meetinginfo-container",onClick:function(){return o(pt(n))}},t.createElement("h1",null,"Next Meeting"),t.createElement("div",{className:"meetinginfo-description"},t.createElement("p",null,"Date: ",t.createElement("strong",null,n&&No(n).date)),t.createElement("p",null,"Time: ",t.createElement("strong",null,n&&No(n).time)))),t.createElement("div",{className:"description-container"},t.createElement("h1",null,"Group Description"),t.createElement("p",{className:"details-description"},n.description)),t.createElement("div",{className:"buttons"},n.owner&&n.owner._id===r._id&&t.createElement(t.Fragment,null,t.createElement(Mt,{onClick:function(){return o(function(e){return{type:Ye,payload:e}}(n))}},"EDIT"),t.createElement(Mt,{onClick:function(){return o(mt(a,"Confirm Deletion","Are you sure you want to delete the study group: "+n.name+"?"))}},"Delete")),n.owner&&n.owner._id!==r._id&&t.createElement(t.Fragment,null,t.createElement(Mt,{onClick:function(){o(mt(s,"Confirm Leave","Are you sure you want to leave the study group: "+n.name+"?")),o(bt())}},"Leave Group")),n.owner&&n.owner._id!==r._id&&t.createElement(t.Fragment,null,t.createElement(Mt,{onClick:function(){o(gt("Study Group",n))}},"Report"))))};var rf=n(5092),of={};of.styleTagTransform=g(),of.setAttributes=p(),of.insert=c().bind(null,"head"),of.domAPI=l(),of.insertStyleElement=h(),a()(rf.Z,of),rf.Z&&rf.Z.locals&&rf.Z.locals;const af=function(e){var n=e.group,r=Pe(),o=Me((function(e){return e.authReducer.user})),i=(0,t.useRef)();(0,t.useEffect)((function(){i.current.scrollTop=i.current.scrollHeight,console.log("running")}),[n.posts]);var a=function(e){r(function(e,t){return{type:$e,payload:{group:e,isRecurringMeeting:t}}}(n,e))};return t.createElement(t.Fragment,null,t.createElement("div",{className:"feed-container",ref:i},t.createElement("div",{className:"posts-container"},n.posts?n.posts.map((function(e){return t.createElement(Oi,{attachment:e.attachment,title:e.title,message:e.message,creator:e.creator,timestamp:e.createdAt,type:e.type,color:n.groupColor,responses:e.responses,group:n})})):t.createElement("h1",null,"Nothing yet"))),t.createElement("div",{className:"options-container"},t.createElement(Mt,{onClick:function(){return r(function(e){return{type:We,payload:e}}(n))}},"Start Post"),n.owner&&o._id===n.owner._id&&t.createElement(Mt,{onClick:function(){return r(mt(a,"Choose Meeting","Which meeting would you like to create",!1,"Recurring Meeting","One-time Meeting"))}},"Schedule Meeting")))};function sf(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function lf(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){sf(i,r,o,a,s,"next",e)}function s(e){sf(i,r,o,a,s,"throw",e)}a(void 0)}))}}function uf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return cf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cf(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const df=function(e){Pe(),Me((function(e){return e.authReducer.user}));var n=Me((function(e){return e.notificationReducer.loading})),r=e.match.params.id,o=uf((0,t.useState)({}),2),i=o[0],a=o[1],s=uf((0,t.useState)("All Clear"),2);s[0],s[1],(0,t.useEffect)((function(){function e(){return(e=lf(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,l();case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}(),console.log(i)}),[]);var l=function(){var e=lf(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Oo(Ut().StudyGroup.GetStudyGroup+"?studyGroupId="+r,Kt().StudyGroup.SuccessStudyGroupRetrieved,Kt().StudyGroup.ErrorGetStudyGroup,!0,(function(e,t){t||a(e.studyGroup)}),!1);case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return t.createElement("div",null,t.createElement(Ga,{topBar:!0,currentPage:"study"},t.createElement("div",{className:"study-group-page"},t.createElement("div",{className:"page-title-study-group",style:{backgroundColor:i.groupColor+"90"}},t.createElement(ve,{to:"/"},t.createElement(Mt,{style:{marginLeft:"0px",backgroundColor:i.groupColor}},"<")),t.createElement("h1",null,i.name)),t.createElement("div",{className:"main-view"},n?t.createElement(ya,null):t.createElement(t.Fragment,null,t.createElement(Kp,{group:i}),t.createElement(af,{group:i}),t.createElement(nf,{group:i}))))))};var pf=n(2668),ff={};function hf(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function mf(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){hf(i,r,o,a,s,"next",e)}function s(e){hf(i,r,o,a,s,"throw",e)}a(void 0)}))}}ff.styleTagTransform=g(),ff.setAttributes=p(),ff.insert=c().bind(null,"head"),ff.domAPI=l(),ff.insertStyleElement=h(),a()(pf.Z,ff),pf.Z&&pf.Z.locals&&pf.Z.locals;const gf=function(){var e=Pe(),n=Me((function(e){return e.authReducer})).user,r=(Me((function(e){return e.notificationReducer.loading})),function(){var t=mf(regeneratorRuntime.mark((function t(n,r){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Bo(Ut().Account.ChangeEmail,{newEmail:n,currentPassword:r},Kt().Account.EmailSent,null,!0,(function(t,n){n||e(yt())}));case 2:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}()),o=function(){var t=mf(regeneratorRuntime.mark((function t(n,r){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Bo(Ut().Account.ChangePassword,{currentPassword:n,newPassword:r},Kt().Account.SuccessChangingPassword,null,!0,(function(t,n){n||e(yt())}));case 2:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}(),i=function(){var t=mf(regeneratorRuntime.mark((function t(n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,To(Ut().Account.Delete,{currentPassword:n},Kt().Account.SuccessAccountDeleted,null,!0,(function(t,n){n||(e(ut()),e(yt()))}));case 2:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();return t.createElement(t.Fragment,null,t.createElement(Ga,{topBar:!0,currentPage:""},t.createElement("div",{className:"page-title"},t.createElement("h1",null,"Account")),t.createElement("div",{className:"account-page"},t.createElement("div",{className:"infos"},t.createElement("div",{className:"user-info"},t.createElement("h1",null,"Full Name:"),t.createElement("p",{className:"name"},n.name)),t.createElement("div",{className:"user-info"},t.createElement("h1",null,"Email:"),t.createElement("p",{className:"email"},n.email)),t.createElement("div",{className:"user-info"},t.createElement("h1",null,"Area Code:"),t.createElement("p",{className:"areaCode"},n.areaCode)),t.createElement("div",{className:"user-info"},t.createElement("h1",null,"Profile Picture:"),t.createElement(bi,{image:n.profilePicture}))),t.createElement("div",{className:"edit-account-buttons"},t.createElement(Mt,{type:Pt,onClick:function(){return e(ht("Change Email","New Email","",r,"Current Password"))}},"Change Email"),t.createElement(Mt,{type:Pt,onClick:function(){return e(ht("Change Password","Current Password","",o,"New Password"))}},"Change Password"),t.createElement(Mt,{type:Rt,onClick:function(){return e(ht("Confirm Password to Delete Account","Confirm your password","",i))}},"Delete Account")))))};var yf=n(8505),vf={};vf.styleTagTransform=g(),vf.setAttributes=p(),vf.insert=c().bind(null,"head"),vf.domAPI=l(),vf.insertStyleElement=h(),a()(yf.Z,vf),yf.Z&&yf.Z.locals&&yf.Z.locals;var bf=n(4187),Af=n(8058);const Cf="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function wf(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||Af))return new XMLHttpRequest}catch(e){}if(!t)try{return new(Cf[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}function xf(e,...t){return t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{})}const Ef=setTimeout,kf=clearTimeout;function Sf(e,t){t.useNativeTimers?(e.setTimeoutFn=Ef.bind(Cf),e.clearTimeoutFn=kf.bind(Cf)):(e.setTimeoutFn=setTimeout.bind(Cf),e.clearTimeoutFn=clearTimeout.bind(Cf))}var Bf=n(3063);const Of=Object.create(null);Of.open="0",Of.close="1",Of.ping="2",Of.pong="3",Of.message="4",Of.upgrade="5",Of.noop="6";const Tf=Object.create(null);Object.keys(Of).forEach((e=>{Tf[Of[e]]=e}));const Df={type:"error",data:"parser error"},Nf="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),Pf="function"==typeof ArrayBuffer,If=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)},Rf=({type:e,data:t},n,r)=>{return Nf&&t instanceof Blob?n?r(t):If(t,r):Pf&&(t instanceof ArrayBuffer||(o=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(o):o&&o.buffer instanceof ArrayBuffer))?n?r(t):If(new Blob([t]),r):r(Of[e]+(t||""));var o};for(var _f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Mf="undefined"==typeof Uint8Array?[]:new Uint8Array(256),Zf=0;Zf<_f.length;Zf++)Mf[_f.charCodeAt(Zf)]=Zf;const jf="function"==typeof ArrayBuffer,zf=(e,t)=>{if(jf){const n=function(e){var t,n,r,o,i,a=.75*e.length,s=e.length,l=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var u=new ArrayBuffer(a),c=new Uint8Array(u);for(t=0;t<s;t+=4)n=Mf[e.charCodeAt(t)],r=Mf[e.charCodeAt(t+1)],o=Mf[e.charCodeAt(t+2)],i=Mf[e.charCodeAt(t+3)],c[l++]=n<<2|r>>4,c[l++]=(15&r)<<4|o>>2,c[l++]=(3&o)<<6|63&i;return u}(e);return Lf(n,t)}return{base64:!0,data:e}},Lf=(e,t)=>"blob"===t&&e instanceof ArrayBuffer?new Blob([e]):e,Ff=(e,t)=>{if("string"!=typeof e)return{type:"message",data:Lf(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:zf(e.substring(1),t)}:Tf[n]?e.length>1?{type:Tf[n],data:e.substring(1)}:{type:Tf[n]}:Df},Uf=String.fromCharCode(30);class Yf extends Bf.Q{constructor(e){super(),this.writable=!1,Sf(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t){const n=new Error(e);return n.type="TransportError",n.description=t,super.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState&&this.write(e)}onOpen(){this.readyState="open",this.writable=!0,super.emit("open")}onData(e){const t=Ff(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emit("packet",e)}onClose(){this.readyState="closed",super.emit("close")}}var $f=n(2281),Wf=n(1830);class Vf extends Yf{constructor(){super(...arguments),this.polling=!1}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(e++,this.once("pollComplete",(function(){--e||t()}))),this.writable||(e++,this.once("drain",(function(){--e||t()})))}else t()}poll(){this.polling=!0,this.doPoll(),this.emit("poll")}onData(e){((e,t)=>{const n=e.split(Uf),r=[];for(let e=0;e<n.length;e++){const o=Ff(n[e],t);if(r.push(o),"error"===o.type)break}return r})(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose(),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const e=()=>{this.write([{type:"close"}])};"open"===this.readyState?e():this.once("open",e)}write(e){this.writable=!1,((e,t)=>{const n=e.length,r=new Array(n);let o=0;e.forEach(((e,i)=>{Rf(e,!1,(e=>{r[i]=e,++o===n&&t(r.join(Uf))}))}))})(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=$f()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port);const r=Wf.encode(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}}function qf(){}const Gf=null!=new wf({xdomain:!1}).responseType;class Hf extends Bf.Q{constructor(e,t){super(),Sf(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=xf(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new wf(e);try{t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=Hf.requestsCount++,Hf.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(e){this.emit("data",e),this.onSuccess()}onError(e){this.emit("error",e),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=qf,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete Hf.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&this.onData(e)}abort(){this.cleanup()}}function Qf(){for(let e in Hf.requests)Hf.requests.hasOwnProperty(e)&&Hf.requests[e].abort()}Hf.requestsCount=0,Hf.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",Qf):"function"==typeof addEventListener&&addEventListener("onpagehide"in Cf?"pagehide":"unload",Qf,!1));const Kf="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),Xf=Cf.WebSocket||Cf.MozWebSocket,Jf="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class eh extends Yf{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=Jf?{}:xf(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=Jf?new Xf(e,t,n):t?new Xf(e,t):new Xf(e)}catch(e){return this.emit("error",e)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;Rf(n,this.supportsBinary,(e=>{try{this.ws.send(e)}catch(e){}r&&Kf((()=>{this.writable=!0,this.emit("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=$f()),this.supportsBinary||(e.b64=1);const r=Wf.encode(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}check(){return!(!Xf||"__initialize"in Xf&&this.name===eh.prototype.name)}}const th={websocket:eh,polling:class extends Vf{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=Gf&&!t}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new Hf(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",(e=>{this.onError("xhr post error",e)}))}doPoll(){const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(e=>{this.onError("xhr poll error",e)})),this.pollXhr=e}}};class nh extends Bf.Q{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=bf(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=bf(t.host).host),Sf(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=Wf.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){const t=function(e){const t={};for(let n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=4,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new th[e](n)}open(){let e;if(this.opts.rememberUpgrade&&nh.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){this.transport&&this.transport.removeAllListeners(),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(e){let t=this.createTransport(e),n=!1;nh.priorWebsocketSuccess=!1;const r=()=>{n||(t.send([{type:"ping",data:"probe"}]),t.once("packet",(e=>{if(!n)if("pong"===e.type&&"probe"===e.data){if(this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;nh.priorWebsocketSuccess="websocket"===t.name,this.transport.pause((()=>{n||"closed"!==this.readyState&&(u(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{const e=new Error("probe error");e.transport=t.name,this.emitReserved("upgradeError",e)}})))};function o(){n||(n=!0,u(),t.close(),t=null)}const i=e=>{const n=new Error("probe error: "+e);n.transport=t.name,o(),this.emitReserved("upgradeError",n)};function a(){i("transport closed")}function s(){i("socket closed")}function l(e){t&&e.name!==t.name&&o()}const u=()=>{t.removeListener("open",r),t.removeListener("error",i),t.removeListener("close",a),this.off("close",s),this.off("upgrading",l)};t.once("open",r),t.once("error",i),t.once("close",a),this.once("close",s),this.once("upgrading",l),t.open()}onOpen(){if(this.readyState="open",nh.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emitReserved("flush"))}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const o={type:e,data:t,options:n};this.emitReserved("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(e){nh.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}nh.protocol=4,nh.protocol;const rh="function"==typeof ArrayBuffer,oh=Object.prototype.toString,ih="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===oh.call(Blob),ah="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===oh.call(File);function sh(e){return rh&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||ih&&e instanceof Blob||ah&&e instanceof File}function lh(e,t){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let t=0,n=e.length;t<n;t++)if(lh(e[t]))return!0;return!1}if(sh(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return lh(e.toJSON(),!0);for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&lh(e[t]))return!0;return!1}function uh(e){const t=[],n=e.data,r=e;return r.data=ch(n,t),r.attachments=t.length,{packet:r,buffers:t}}function ch(e,t){if(!e)return e;if(sh(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=ch(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=ch(e[r],t));return n}return e}function dh(e,t){return e.data=ph(e.data,t),e.attachments=void 0,e}function ph(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=ph(e[n],t);else if("object"==typeof e)for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(e[n]=ph(e[n],t));return e}const fh=5;var hh;!function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(hh||(hh={}));class mh{encode(e){return e.type!==hh.EVENT&&e.type!==hh.ACK||!lh(e)?[this.encodeAsString(e)]:(e.type=e.type===hh.EVENT?hh.BINARY_EVENT:hh.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==hh.BINARY_EVENT&&e.type!==hh.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),t}encodeAsBinary(e){const t=uh(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}}class gh extends Bf.Q{constructor(){super()}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===hh.BINARY_EVENT||t.type===hh.BINARY_ACK?(this.reconstructor=new yh(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t);else{if(!sh(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===hh[n.type])throw new Error("unknown packet type "+n.type);if(n.type===hh.BINARY_EVENT||n.type===hh.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const o=e.substring(r,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(o)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!gh.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return n}static isPayloadValid(e,t){switch(e){case hh.CONNECT:return"object"==typeof t;case hh.DISCONNECT:return void 0===t;case hh.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case hh.EVENT:case hh.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case hh.ACK:case hh.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}class yh{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=dh(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function vh(e,t,n){return e.on(t,n),function(){e.off(t,n)}}const bh=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Ah extends Bf.Q{constructor(e,t,n){super(),this.connected=!1,this.disconnected=!0,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const e=this.io;this.subs=[vh(e,"open",this.onopen.bind(this)),vh(e,"packet",this.onpacket.bind(this)),vh(e,"error",this.onerror.bind(this)),vh(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(bh.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:hh.EVENT,data:t,options:{}};if(n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++,r=t.pop();this._registerAckCallback(e,r),n.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!r||!this.connected)||(this.connected?this.packet(n):this.sendBuffer.push(n)),this.flags={},this}_registerAckCallback(e,t){const n=this.flags.timeout;if(void 0===n)return void(this.acks[e]=t);const r=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&this.sendBuffer.splice(t,1);t.call(this,new Error("operation has timed out"))}),n);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...e])}}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){"function"==typeof this.auth?this.auth((e=>{this.packet({type:hh.CONNECT,data:e})})):this.packet({type:hh.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e){this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",e)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case hh.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case hh.EVENT:case hh.BINARY_EVENT:this.onevent(e);break;case hh.ACK:case hh.BINARY_ACK:this.onack(e);break;case hh.DISCONNECT:this.ondisconnect();break;case hh.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];null!=e.id&&t.push(this.ack(e.id)),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...r){n||(n=!0,t.packet({type:hh.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t&&(t.apply(this,e.data),delete this.acks[e.id])}onconnect(e){this.id=e,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>this.packet(e))),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:hh.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}var Ch=n(3010);class wh extends Bf.Q{constructor(t,n){var r;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(n=t,t=void 0),(n=n||{}).path=n.path||"/socket.io",this.opts=n,Sf(this,n),this.reconnection(!1!==n.reconnection),this.reconnectionAttempts(n.reconnectionAttempts||1/0),this.reconnectionDelay(n.reconnectionDelay||1e3),this.reconnectionDelayMax(n.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(r=n.randomizationFactor)&&void 0!==r?r:.5),this.backoff=new Ch({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==n.timeout?2e4:n.timeout),this._readyState="closed",this.uri=t;const o=n.parser||e;this.encoder=new o.Encoder,this.decoder=new o.Decoder,this._autoConnect=!1!==n.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(~this._readyState.indexOf("open"))return this;this.engine=new nh(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const r=vh(t,"open",(function(){n.onopen(),e&&e()})),o=vh(t,"error",(t=>{n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;0===e&&r();const n=this.setTimeoutFn((()=>{r(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(r),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(vh(e,"ping",this.onping.bind(this)),vh(e,"data",this.ondata.bind(this)),vh(e,"error",this.onerror.bind(this)),vh(e,"close",this.onclose.bind(this)),vh(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new Ah(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return;this._close()}_packet(e){const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();this._reconnecting=!0;const n=this.setTimeoutFn((()=>{e.skipReconnect||(this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):e.onreconnect()})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}const xh={};function Eh(e,t){"object"==typeof e&&(t=e,e=void 0);const n=function(e,t="",n){let r=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(e=void 0!==n?n.protocol+"//"+e:"https://"+e),r=bf(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const o=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+o+":"+r.port+t,r.href=r.protocol+"://"+o+(n&&n.port===r.port?"":":"+r.port),r}(e,(t=t||{}).path||"/socket.io"),r=n.source,o=n.id,i=n.path,a=xh[o]&&i in xh[o].nsps;let s;return t.forceNew||t["force new connection"]||!1===t.multiplex||a?s=new wh(r,t):(xh[o]||(xh[o]=new wh(r,t)),s=xh[o]),n.query&&!t.query&&(t.query=n.queryKey),s.socket(n.path,t)}Object.assign(Eh,{Manager:wh,Socket:Ah,io:Eh,connect:Eh});var kh=n(4159),Sh={};Sh.styleTagTransform=g(),Sh.setAttributes=p(),Sh.insert=c().bind(null,"head"),Sh.domAPI=l(),Sh.insertStyleElement=h(),a()(kh.Z,Sh),kh.Z&&kh.Z.locals&&kh.Z.locals;var Bh=n(1407),Oh=n.n(Bh);function Th(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Dh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||Nh(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nh(e,t){if(e){if("string"==typeof e)return Ph(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ph(e,t):void 0}}function Ph(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ih=function(e){var n=e.conversation,r=(0,t.useRef)(),o=Me((function(e){return e.authReducer.user})),i=n.participants&&(String(n.participants[0]._id)!==o._id?n.participants[0]:n.participants[1]),a=i&&i._id,s=o._id,l=Dh((0,t.useState)({}),2),u=l[0],c=l[1],d=Dh((0,t.useState)(""),2),p=d[0],f=d[1],h=Dh((0,t.useState)([]),2),m=h[0],g=h[1],y=function(){var e,t=(e=regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Bo(Ut().Message.GetConversation,{receiverId:i._id},Kt().Message.SuccessGetConversation,null,!0,(function(e,t){t||g(e.conversation.messages)}),!1);case 2:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Th(i,r,o,a,s,"next",e)}function s(e){Th(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();return(0,t.useEffect)((function(){n.participants&&y()}),[n]),(0,t.useEffect)((function(){if(i){var e=Eh("https://cs-studyspaces.herokuapp.com",{autoConnect:!1});e.auth={id:s},e.on(Oh().Message,(function(e){var t,n=e.message,r=e.senderId,o=function(e){if(Array.isArray(e))return Ph(e)}(t=m)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||Nh(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();o.push({value:n,senderId:r}),g(o)})),e.on(Oh().MessageFailure,(function(e){console.log(e)})),e.connect(),c(e),r.current.scrollTop=r.current.scrollHeight}}),[m]),t.createElement("div",{className:"conversation-view"},i&&t.createElement(t.Fragment,null,t.createElement("div",{className:"currentConversationInfo"},t.createElement(bi,{image:i.profilePicture}),t.createElement("h1",null,i&&i.name)),t.createElement("div",{className:"messages-view",ref:r},m.map((function(e){return t.createElement("div",{className:"message-box "+(e.senderId!==s?"receiving-msg":"sending-msg")},e.senderId!==s&&t.createElement(bi,{image:i.profilePicture}),t.createElement("p",null,e.value))}))),t.createElement("div",{className:"send-message-form"},t.createElement(Tt,null,t.createElement("div",{className:"side-by-side"},t.createElement(jt,{style:{flex:"70%"}},t.createElement(Lt,null,"Message"),t.createElement(Vt,{value:p,onChange:function(e){f(e.target.value)}})),t.createElement(Mt,{type:It,onClick:function(e){e.preventDefault(),console.log(p,a),u.emit(Oh().Message,{message:p,receiverId:a}),f("")}},"Send"))))))};var Rh=n(535),_h={};function Mh(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Zh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}_h.styleTagTransform=g(),_h.setAttributes=p(),_h.insert=c().bind(null,"head"),_h.domAPI=l(),_h.insertStyleElement=h(),a()(Rh.Z,_h),Rh.Z&&Rh.Z.locals&&Rh.Z.locals;const jh=function(e){var n=e.setSelectedConversation,r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Zh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)([]),2),o=r[0],i=r[1],a=Me((function(e){return e.authReducer.user})),s=function(){var e,t=(e=regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Bo(Ut().Message.GetConversations,{},Kt().Message.GetConversations.Success,null,!0,(function(e,t){t||(console.log(e),i(e.conversations))}),!1);case 2:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Mh(i,r,o,a,s,"next",e)}function s(e){Mh(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();return(0,t.useEffect)((function(){s()}),[]),t.createElement("div",{className:"chats-view"},o.map((function(e){return t.createElement("div",{className:"chatItem "+(e.active&&"chatActive"),onClick:function(){o.forEach((function(e){e.active=!1})),e.active=!0,n(e)}},t.createElement(bi,{image:String(e.participants[0]._id)!==a._id?e.participants[0].profilePicture:e.participants[1].profilePicture}),t.createElement("p",null,String(e.participants[0]._id)!==a._id?e.participants[0].name:e.participants[1].name))})))};function zh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(1407);const Lh=function(e){var n=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return zh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)({}),2),r=n[0],o=n[1],i=Me((function(e){return e.authReducer.isLoggedIn}));return t.createElement(Ga,{currentPage:"message",topBar:!0},t.createElement("div",{className:"message-page"},t.createElement("div",{className:"page-title"},t.createElement("h1",null,"Message")),i?t.createElement(t.Fragment,null,t.createElement("script",{src:"/socket.io/socket.io.js"}),t.createElement("div",{className:"message-area"},t.createElement(jh,{setSelectedConversation:o}),t.createElement(Ih,{conversation:r}))):t.createElement("div",{className:"guest-message"},t.createElement("h1",null,"You are currently browsing Study Spaces as a guest!"),t.createElement("p",null,"Please sign-up or log-in to be able to message users"),t.createElement("p",null,"Feel free to use our search tool to discover study groups in your area."))))};function Fh(){return Fh=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Fh.apply(this,arguments)}function Uh(e,t,n,r,o,i,a){try{var s=e[i](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,o)}function Yh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const $h=function(e){var n=Me((function(e){return e.authReducer.isLoggedIn})),r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Yh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Yh(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)(!1),2),o=(r[0],r[1]),i=Pe(),a=Me((function(e){return e.popupReducer.isShowing})),s=Me((function(e){return e.notificationReducer.isShowing}));(0,t.useEffect)((function(){return function(){o(!0),l()}}),[]);var l=function(){var e,t=(e=regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!n){e.next=3;break}return e.next=3,Oo(Ut().Account.UpdateAuthenticationToken,Kt().Account.SuccessUpdateAuthenticationToken,null,!0,(function(e,t){if(t)console.log("SIGNING OUT!!!!!");else{var n=e.authenticationToken,r=e.authenticationTokenExpirationDate,o=e.user;i(lt({authenticationToken:n,authenticationTokenExpirationDate:r,user:o}))}}));case 3:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Uh(i,r,o,a,s,"next",e)}function s(e){Uh(i,r,o,a,s,"throw",e)}a(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(pe,null,t.createElement(Da,{isShowing:a}),t.createElement(_a,{isShowing:s}),t.createElement("div",{className:"container"},t.createElement(ue,null,t.createElement(le,{exact:!0,path:"/"},n?t.createElement(oe,{to:"/study"}):t.createElement(ws,null)),t.createElement(le,{path:"/verify/:verificationToken",render:function(e){var r=Qo.AccountSetup;return n?t.createElement(t.Fragment,null,t.createElement(oe,{to:"/study"})):t.createElement(ws,Fh({},e,{homeView:r}))}}),t.createElement(le,{path:"/verifyEmail/:verificationToken",render:function(e){var r=Qo.Login;return n?t.createElement(t.Fragment,null,t.createElement(Ds,Fh({},e,{isVerifyingEmail:!0}))):t.createElement(ws,Fh({},e,{homeView:r}))}}),t.createElement(le,{exact:!0,path:"/study"},t.createElement(Ds,null)),t.createElement(le,{exact:!0,path:"/search"},t.createElement(Vp,null)),t.createElement(le,{exact:!0,path:"/message"},t.createElement(Lh,null)),t.createElement(le,{path:"/group/:id",render:function(e){return n?t.createElement(t.Fragment,null,t.createElement(df,e)):t.createElement(oe,{to:"/"})}}),t.createElement(le,{exact:!0,path:"/account",render:function(e){return n?t.createElement(t.Fragment,null,t.createElement(gf,null)):t.createElement(oe,{to:"/"})}}),t.createElement(le,{path:"*",render:function(e){return t.createElement(oe,{to:"/"})}}))))};function Wh(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Vh(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function qh(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vh(Object(n),!0).forEach((function(t){Wh(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vh(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Gh(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var Hh="function"==typeof Symbol&&Symbol.observable||"@@observable",Qh=function(){return Math.random().toString(36).substring(7).split("").join(".")},Kh={INIT:"@@redux/INIT"+Qh(),REPLACE:"@@redux/REPLACE"+Qh(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Qh()}};function Xh(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Jh(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(Gh(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(Gh(1));return n(Jh)(e,t)}if("function"!=typeof e)throw new Error(Gh(2));var o=e,i=t,a=[],s=a,l=!1;function u(){s===a&&(s=a.slice())}function c(){if(l)throw new Error(Gh(3));return i}function d(e){if("function"!=typeof e)throw new Error(Gh(4));if(l)throw new Error(Gh(5));var t=!0;return u(),s.push(e),function(){if(t){if(l)throw new Error(Gh(6));t=!1,u();var n=s.indexOf(e);s.splice(n,1),a=null}}}function p(e){if(!Xh(e))throw new Error(Gh(7));if(void 0===e.type)throw new Error(Gh(8));if(l)throw new Error(Gh(9));try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=s,n=0;n<t.length;n++)(0,t[n])();return e}function f(e){if("function"!=typeof e)throw new Error(Gh(10));o=e,p({type:Kh.REPLACE})}function h(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(Gh(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[Hh]=function(){return this},e}return p({type:Kh.INIT}),(r={dispatch:p,subscribe:d,getState:c,replaceReducer:f})[Hh]=h,r}function em(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function tm(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var nm=tm();nm.withExtraArgument=tm;const rm=nm;function om(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function im(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?om(Object(n),!0).forEach((function(t){am(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):om(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function am(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var sm=JSON.parse(localStorage.getItem("user")),lm=Date.now(),um=new Date(localStorage.getItem("authenticationTokenExpirationDate")),cm=sm?{isLoggedIn:lm<um,user:sm}:{isLoggedIn:!1};function dm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pm(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dm(Object(n),!0).forEach((function(t){fm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function fm(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function hm(e){return function(e){if(Array.isArray(e))return mm(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return mm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?mm(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function gm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ym(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gm(Object(n),!0).forEach((function(t){vm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function vm(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function bm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Am(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?bm(Object(n),!0).forEach((function(t){Cm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):bm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Cm(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var wm=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:Kh.INIT}))throw new Error(Gh(12));if(void 0===n(void 0,{type:Kh.PROBE_UNKNOWN_ACTION()}))throw new Error(Gh(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},s=0;s<a.length;s++){var l=a[s],u=n[l],c=e[l],d=u(c,t);if(void 0===d)throw t&&t.type,new Error(Gh(14));o[l]=d,r=r||d!==c}return(r=r||a.length!==Object.keys(e).length)?o:e}}({authReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:cm,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Ze:return localStorage.setItem("token",t.payload.authenticationToken),localStorage.setItem("authenticationTokenExpirationDate",t.payload.authenticationTokenExpirationDate),localStorage.setItem("user",JSON.stringify(t.payload.user)),im(im({},e),{},{user:t.payload.user,isLoggedIn:!0});case je:return localStorage.clear(),im(im({},e),{},{user:{},isLoggedIn:!1});case ze:return im(im({},e),{},{unverifiedUser:t.payload.unverifiedUser});case Le:return im(im({},e),{},{user:t.payload.user});default:return e}},popupReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{view:"",isShowing:!1,payload:{},showTop:!0},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Fe:return pm(pm({},e),{},{view:Ko.StudyGroup.Create,isShowing:!0,payload:{},showTop:!0});case Ue:return pm(pm({},e),{},{view:Ko.StudyGroup.Join,isShowing:!0,payload:t.payload,showTop:!1});case Ye:return pm(pm({},e),{},{view:Ko.StudyGroup.Edit,isShowing:!0,payload:t.payload,showTop:!0});case $e:return pm(pm({},e),{},{view:Ko.StudyGroup.CreateMeeting,isShowing:!0,payload:t.payload,showTop:!0});case We:return pm(pm({},e),{},{view:Ko.StudyGroup.CreatePost,isShowing:!0,payload:t.payload,showTop:!0});case Ve:return pm(pm({},e),{},{view:Ko.StudyGroup.ViewPost,isShowing:!0,showTop:!1,payload:t.payload});case qe:return pm(pm({},e),{},{view:Ko.StudyGroup.ViewMeetings,isShowing:!0,showTop:!1,payload:t.payload});case Ge:return pm(pm({},e),{},{view:Ko.StudyGroup.ViewMember,isShowing:!0,showTop:!1,payload:t.payload});case He:return pm(pm({},e),{},{view:Ko.Input,isShowing:!0,payload:t.payload,showTop:!0});case Qe:return pm(pm({},e),{},{view:Ko.Confirmation,isShowing:!0,payload:t.payload,showTop:!0});case Ke:return pm(pm({},e),{},{view:Ko.Report,isShowing:!0,payload:t.payload,showTop:!0});case Xe:return pm(pm({},e),{},{isShowing:!1,view:""});default:return e}},studyGroupsReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{studyGroups:[],search:[]},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Je:return ym(ym({},e),{},{studyGroups:[].concat(hm(e.studyGroups),[t.payload.group])});case et:return ym(ym({},e),{},{studyGroups:t.payload.groups});case tt:return ym(ym({},e),{},{search:hm(t.payload.groups)});case nt:return ym(ym({},e),{},{studyGroups:[]});default:return e}},notificationReducer:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{isShowing:!1,loading:!1},t=arguments.length>1?arguments[1]:void 0;switch(t.type){case rt:return Am(Am({},e),{},{type:Ia,isShowing:!0,message:t.payload.message});case ot:return Am(Am({},e),{},{type:Ra,isShowing:!0,message:t.payload.message});case it:return Am(Am({},e),{},{isShowing:!1});case at:return Am(Am({},e),{},{loading:!0});case st:return Am(Am({},e),{},{loading:!1});default:return e}}});const xm=wm;var Em={},km=$t().isDefined(window.__REDUX_DEVTOOLS_EXTENSION__)&&$t().isDefined(window.__REDUX_DEVTOOLS_EXTENSION__())?Jh(xm,Em,em(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(Gh(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=em.apply(void 0,i)(n.dispatch),qh(qh({},n),{},{dispatch:r})}}}(rm),window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__())):Jh(xm,Em);o.render(t.createElement(Be,{store:km},t.createElement(t.StrictMode,null,t.createElement($h,null))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsRUFBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEs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R0FBUSxHQUFJLENBQ2pEMzFCLFNBQVU4aUYsTU94b0JBRyxDQUFnQnZCLElBQVEvdkgsT0FBT2l4SCw4QkFBZ0NqeEgsT0FBT2l4SCxpQ0FFbEZwQyxHQUFZdUIsR0FBYVksSUFFL0JPLEVBQUFBLE9BQ0ksZ0JBQUMsR0FBRCxDQUFVdnRELE1BQU9BLElBQ2IsZ0JBQUMsYUFBRCxLQUNJLGdCQUFDLEdBQUQsUUFHUnZ2RixTQUFTcWlJLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9Ub2tlbml6ZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvRW51bS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1ByZWZpeGVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1BhcnNlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY2FjaGUvZGlzdC9lbW90aW9uLWNhY2hlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9lbW90aW9uLW1lbW9pemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3JlYWN0L2Rpc3QvZW1vdGlvbi1lbGVtZW50LTY5OWU2OTA4LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvaGFzaC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2VyaWFsaXplL2Rpc3QvZW1vdGlvbi1zZXJpYWxpemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NoZWV0L2Rpc3QvZW1vdGlvbi1zaGVldC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC9lbW90aW9uLXV0aWxzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMvY29tcG9zZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9nZW5lcmF0ZVV0aWxpdHlDbGFzcy9DbGFzc05hbWVHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9nZW5lcmF0ZVV0aWxpdHlDbGFzcy9nZW5lcmF0ZVV0aWxpdHlDbGFzcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9DYW1wYWlnbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9Db21tZW50LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0Vycm9yLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0V2ZW50Tm90ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9RdWVzdGlvbk1hcmsuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9wdXJwbGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRyYW5zaXRpb25zLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wcm9wc1RvQ2xhc3NLZXkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVTdHlsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3N0eWxlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vcmVzb2x2ZVByb3BzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3ZnSWNvbi9zdmdJY29uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvZGVwcmVjYXRlZFByb3BUeXBlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvcmVxdWlyZVByb3BGYWN0b3J5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9yZXF1aXJlUHJvcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvc2V0UmVmLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VJZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VJZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91bnN1cHBvcnRlZFByb3AuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Vuc3VwcG9ydGVkUHJvcC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9pc011aUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2lzTXVpRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUNvbnRyb2xsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvYmFzZS9kaXN0L2Vtb3Rpb24tc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9kaXN0L2Vtb3Rpb24tc3R5bGVkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9icmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbG9yTWFuaXB1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL3NoYXBlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JvcmRlcnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9kaXNwbGF5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vZmxleGJveC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2dyaWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wb3NpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc2hhZG93cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9nZXRUaGVtZVZhbHVlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zcGFjaW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvdXNlVGhlbWUvVGhlbWVDb250ZXh0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVdpdGhvdXREZWZhdWx0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy91c2VUaGVtZS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9zZXRSZWYuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUNvbnRyb2xsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VFdmVudENhbGxiYWNrLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VJc0ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9TZXJ2ZXIvRXZlbnRzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL1NlcnZlci9Nb2RlbHMvTWVldGluZ0Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vU2VydmVyL01vZGVscy9Qb3N0VHlwZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vU2VydmVyL01vZGVscy9TdWJqZWN0cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9TZXJ2ZXIvTW9kZWxzL1RpbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL1NlcnZlci9WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2JhY2tvMi9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL0FwcC5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvQWNjb3VudC9BY2NvdW50LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9Ib21lL0hvbWUuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL01lc3NhZ2UvTWVzc2FnZS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvUGFnZS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU2VhcmNoL1NlYXJjaC5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHkvU3R1ZHkuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL1N0dWR5R3JvdXAvU3R1ZHlHcm91cC5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvQ29uZmlybWF0aW9uRm9ybS9Db25maXJtYXRpb25Gb3JtLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ib21lL0F1dGhWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9JbnB1dC9JbnB1dFZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL01lc3NhZ2UvQ2hhdHNWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9NZXNzYWdlL0NvbnZlcnNhdGlvblZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL05vdGlmaWNhdGlvbi9Ob3RpZmljYXRpb24uc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1BvcHVwL1BvcHVwLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9SZXBvcnQvUmVwb3J0Vmlldy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFJlc3VsdHMuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1NlYXJjaC9TZWFyY2hWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9qb2luU3R1ZHlHcm91cFZpZXcvSm9pblN0dWR5R3JvdXBWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9zdHVkeUdyb3VwVmlldy9TdHVkeUdyb3VwVmlldy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9EZXRhaWxzVmlldy9EZXRhaWxzVmlldy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9GZWVkL0ZlZWRWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL01lbWJlcnMvTWVtYmVyc1ZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvTWVtYmVycy9WaWV3TWVtYmVyVmlldy5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9WaWV3TWVldGluZ1ZpZXcvVmlld01lZXRpbmdWaWV3LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL1ZpZXdQb3N0Vmlldy9WaWV3UG9zdFZpZXcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQWNjb3VudFNldHVwRm9ybS9BY2NvdW50U2V0dXBGb3JtLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0NyZWF0ZUFjY291bnRGb3JtL0NyZWF0ZUFjY291bnRGb3JtLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0NyZWF0ZVN0dWR5R3JvdXBGb3JtL0NyZWF0ZVN0dWR5R3JvdXBGb3JtLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0ZlZWQvUG9zdC5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Mb2FkaW5nL0xvYWRpbmcuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvTG9naW5Gb3JtL0xvZ2luRm9ybS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Qcm9maWxlUGljdHVyZS9Qcm9maWxlUGljdHVyZS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0uc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoTGlzdGluZy9TZWFyY2hMaXN0aW5nLnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9NZW51LnNjc3MiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9Ub3BCYXIuc2NzcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvY29yZS5zY3NzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcGFyc2Vxcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcGFyc2V1cmkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZmlsZS1iYXNlNjQvYnVpbGQvYnVpbGQubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9BcHAuc2Nzcz80MTg1Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvZXNtL3ZhbHVlLWVxdWFsLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTdG9yZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL2NvbnN0YW50cy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9zdGF0ZS9hY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvUG9wdXAvUG9wdXAuc2Nzcz9lZTU1Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVTdHVkeUdyb3VwRm9ybS9DcmVhdGVTdHVkeUdyb3VwRm9ybS5zY3NzPzVkMGEiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL0Zvcm0vRm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvY29yZS5zY3NzP2IzZGIiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL0J1dHRvbi9CdXR0b25UeXBlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9MYWJlbC9MYWJlbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL1RvZ2dsZUZpZWxkL1RvZ2dsZUZpZWxkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9Ub2dnbGUvVG9nZ2xlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9Ecm9wZG93bi9Ecm9wZG93bi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvcmUvQ29sb3JQaWNrZXIvQ29sb3JQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0NyZWF0ZVN0dWR5R3JvdXBGb3JtL0NyZWF0ZVN0dWR5R3JvdXBGb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AcnNjaGVkdWxlL2NvcmUvZXMyMDE1L21haW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0Byc2NoZWR1bGUvY29yZS9lczIwMTUvZ2VuZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQHJzY2hlZHVsZS9jb3JlL2VzMjAxNS9ydWxlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQHJzY2hlZHVsZS9zdGFuZGFyZC1kYXRlLWFkYXB0ZXIvZXMyMDE1L21haW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0Byc2NoZWR1bGUvc3RhbmRhcmQtZGF0ZS1hZGFwdGVyL2VzMjAxNS9zZXR1cC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvSGVscGVyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHkvQ3JlYXRlU3R1ZHlHcm91cFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9qb2luU3R1ZHlHcm91cFZpZXcvSm9pblN0dWR5R3JvdXBWaWV3LnNjc3M/MzFlNCIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5L2pvaW5TdHVkeUdyb3VwVmlldy9Kb2luU3R1ZHlHcm91cFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9JbnB1dC9JbnB1dFZpZXcuc2Nzcz84NDA1Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvSW5wdXQvSW5wdXRWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvQ29uZmlybWF0aW9uRm9ybS9Db25maXJtYXRpb25Gb3JtLnNjc3M/Nzg5MSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0NvbmZpcm1hdGlvbkZvcm0vQ29uZmlybWF0aW9uRm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1ZpZXdzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9FZGl0U3R1ZHlHcm91cC9FZGl0U3R1ZHlHcm91cFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0NyZWF0ZU1lZXRpbmdGb3JtL0NyZWF0ZU1lZXRpbmdGb3JtLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9DcmVhdGVNZWV0aW5nVmlldy9DcmVhdGVNZWV0aW5nVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQ3JlYXRlUG9zdEZvcm0vQ3JlYXRlUG9zdEZvcm0uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL0NyZWF0ZVBvc3RWaWV3L0NyZWF0ZVBvc3RWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9WaWV3UG9zdFZpZXcvVmlld1Bvc3RWaWV3LnNjc3M/N2VmMiIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvUHJvZmlsZVBpY3R1cmUvUHJvZmlsZVBpY3R1cmUuc2Nzcz9hZDZlIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Qcm9maWxlUGljdHVyZS9Qcm9maWxlUGljdHVyZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvRmVlZC9Qb3N0LnNjc3M/ZTBkYiIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvRmVlZC9Qb3N0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9WaWV3UG9zdFZpZXcvVmlld1Bvc3RWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvUmVwb3J0L1JlcG9ydFR5cGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Mb2FkaW5nL0xvYWRpbmcuc2Nzcz84OTYxIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2lyY3VsYXJQcm9ncmVzcy9jaXJjdWxhclByb2dyZXNzQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzL0NpcmN1bGFyUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvZXh0ZW5kU3hQcm9wLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlQm94LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JveC9Cb3guanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0xvYWRpbmcvTG9hZGluZy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvVmlld01lZXRpbmdWaWV3L1ZpZXdNZWV0aW5nVmlldy5zY3NzPzljMDQiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL1ZpZXdNZWV0aW5nVmlldy9WaWV3TWVldGluZ1ZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL01lbWJlcnMvVmlld01lbWJlclZpZXcuc2Nzcz9iM2VmIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9NZW1iZXJzL1ZpZXdNZW1iZXJWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvUmVwb3J0L1JlcG9ydFZpZXcuc2Nzcz84NDZmIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvUmVwb3J0L1JlcG9ydFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Qb3B1cC9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL05vdGlmaWNhdGlvbi9Ob3RpZmljYXRpb24uc2Nzcz8zNGFkIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvTm90aWZpY2F0aW9uL25vdGlmaWNhdGlvblR5cGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvTm90aWZpY2F0aW9uL05vdGlmaWNhdGlvbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL0hvbWUvSG9tZS5zY3NzPzdmYjgiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9Ub3BCYXIuc2Nzcz83YjJjIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvTWVudS5zY3NzP2NjYjUiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9NZW51LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvUGFnZS5zY3NzP2VkOWEiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9QYWdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Mb2dpbkZvcm0vTG9naW5Gb3JtLnNjc3M/ODIyZCIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvTG9naW5Gb3JtL0xvZ2luRm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0hvbWUvQXV0aFZpZXcuc2Nzcz83NDM5Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvSG9tZS9BdXRoVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0hvbWUvTG9naW5WaWV3L0xvZ2luVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQ3JlYXRlQWNjb3VudEZvcm0vQ3JlYXRlQWNjb3VudEZvcm0uc2Nzcz9hOTY0Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9DcmVhdGVBY2NvdW50Rm9ybS9DcmVhdGVBY2NvdW50Rm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0hvbWUvQ3JlYXRlQWNjb3VudFZpZXcvQ3JlYXRlQWNjb3VudFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9Ib21lL1ZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uVmlldy9WZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvblZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0FjY291bnRTZXR1cEZvcm0vQWNjb3VudFNldHVwRm9ybS5zY3NzPzQxNWUiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0FjY291bnRTZXR1cEZvcm0vQWNjb3VudFNldHVwRm9ybS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL0hvbWUvQWNjb3VudFNldHVwVmlldy9BY2NvdW50U2V0dXBWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvSG9tZS9Ib21lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHkvU3R1ZHkuc2Nzcz85NjU1Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHkvc3R1ZHlHcm91cFZpZXcvU3R1ZHlHcm91cFZpZXcuc2Nzcz9mNDQxIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHkvc3R1ZHlHcm91cFZpZXcvU3R1ZHlHcm91cFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9TdHVkeS9TdHVkeS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL1NlYXJjaC9TZWFyY2guc2Nzcz9jYWEyIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFZpZXcuc2Nzcz9iOTBlIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0uc2Nzcz9lY2YxIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvU2xpZGVyVW5zdHlsZWQvc2xpZGVyVW5zdHlsZWRDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvU2xpZGVyVW5zdHlsZWQvU2xpZGVyVmFsdWVMYWJlbFVuc3R5bGVkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvaXNIb3N0Q29tcG9uZW50LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvYXBwZW5kT3duZXJTdGF0ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdmlzdWFsbHlIaWRkZW4uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9TbGlkZXJVbnN0eWxlZC91c2VTbGlkZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9TbGlkZXJVbnN0eWxlZC9TbGlkZXJVbnN0eWxlZC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NsaWRlci9TbGlkZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9jb3JlL1JhbmdlL1RpbWVSYW5nZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9PdXRsaW5lZElucHV0L05vdGNoZWRPdXRsaW5lLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXQvb3V0bGluZWRJbnB1dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9UZXh0YXJlYUF1dG9zaXplL1RleHRhcmVhQXV0b3NpemUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3R5bGVkLWVuZ2luZS9HbG9iYWxTdHlsZXMvR2xvYmFsU3R5bGVzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL3V0aWxzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0QmFzZS9pbnB1dEJhc2VDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0QmFzZS9JbnB1dEJhc2UuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvT3V0bGluZWRJbnB1dC9PdXRsaW5lZElucHV0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3QvTGlzdENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS90b3VjaFJpcHBsZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL2J1dHRvbkJhc2VDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvQnV0dG9uQmFzZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EaXZpZGVyL2RpdmlkZXJDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtSWNvbi9saXN0SXRlbUljb25DbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtVGV4dC9saXN0SXRlbVRleHRDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01lbnVJdGVtL21lbnVJdGVtQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9NZW51SXRlbS9NZW51SXRlbS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdC9saXN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0L0xpc3QuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2dldFNjcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9NZW51TGlzdC9NZW51TGlzdC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYXBlci9wYXBlckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFwZXIvUGFwZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdHJhbnNpdGlvbnMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvR3Jvdy9Hcm93LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvUG9ydGFsL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL01vZGFsVW5zdHlsZWQvTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvVW5zdGFibGVfVHJhcEZvY3VzL1Vuc3RhYmxlX1RyYXBGb2N1cy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL01vZGFsVW5zdHlsZWQvbW9kYWxVbnN0eWxlZENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9Nb2RhbFVuc3R5bGVkL01vZGFsVW5zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9CYWNrZHJvcFVuc3R5bGVkL2JhY2tkcm9wVW5zdHlsZWRDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvQmFja2Ryb3BVbnN0eWxlZC9CYWNrZHJvcFVuc3R5bGVkLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZhZGUvRmFkZS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CYWNrZHJvcC9CYWNrZHJvcC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Nb2RhbC9Nb2RhbC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Qb3BvdmVyL3BvcG92ZXJDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BvcG92ZXIvUG9wb3Zlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9NZW51L21lbnVDbGFzc2VzLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01lbnUvTWVudS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9OYXRpdmVTZWxlY3QvbmF0aXZlU2VsZWN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2VsZWN0L3NlbGVjdENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2VsZWN0L1NlbGVjdElucHV0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0L2lucHV0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dC9JbnB1dC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9GaWxsZWRJbnB1dC9maWxsZWRJbnB1dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRmlsbGVkSW5wdXQvRmlsbGVkSW5wdXQuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2VsZWN0L1NlbGVjdC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvQ2FuY2VsLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NoaXAvY2hpcENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2hpcC9DaGlwLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29yZS9Ecm9wZG93bi9NdWx0aXBsZURyb3Bkb3duLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9TZWFyY2hGb3JtL1NlYXJjaEZvcm0uanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TZWFyY2gvU2VhcmNoVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1NlYXJjaC9TZWFyY2hSZXN1bHRzLnNjc3M/NDAyOSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoTGlzdGluZy9TZWFyY2hMaXN0aW5nLnNjc3M/OWI2ZSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoTGlzdGluZy9TZWFyY2hMaXN0aW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFJlc3VsdFZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9QYWdlcy9TZWFyY2gvU2VhcmNoLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHlHcm91cC9TdHVkeUdyb3VwLnNjc3M/MGY3MyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvTWVtYmVycy9NZW1iZXJzVmlldy5zY3NzP2E2OTgiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL01lbWJlcnMvTWVtYmVyc1ZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL0RldGFpbHNWaWV3L0RldGFpbHNWaWV3LnNjc3M/YWViZiIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvRGV0YWlsc1ZpZXcvRGV0YWlsc1ZpZXcuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL0ZlZWQvRmVlZFZpZXcuc2Nzcz8wNTI3Iiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9GZWVkL0ZlZWRWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHlHcm91cC9TdHVkeUdyb3VwLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvQWNjb3VudC9BY2NvdW50LnNjc3M/NmRjYSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL0FjY291bnQvQWNjb3VudC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1BhZ2VzL01lc3NhZ2UvTWVzc2FnZS5zY3NzP2IzZmEiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL2dsb2JhbFRoaXMuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy94bWxodHRwcmVxdWVzdC5icm93c2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS91dGlsLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2VzbS9jb21tb25zLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2VzbS9lbmNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQHNvY2tldC5pby9iYXNlNjQtYXJyYXlidWZmZXIvZGlzdC9iYXNlNjQtYXJyYXlidWZmZXIuZXM1LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2J1aWxkL2VzbS9kZWNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9idWlsZC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvYnVpbGQvZXNtL3RyYW5zcG9ydC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS90cmFuc3BvcnRzL3dlYnNvY2tldC1jb25zdHJ1Y3Rvci5icm93c2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS90cmFuc3BvcnRzL3dlYnNvY2tldC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vdHJhbnNwb3J0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9idWlsZC9lc20vc29ja2V0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2J1aWxkL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9idWlsZC9lc20vaXMtYmluYXJ5LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2J1aWxkL2VzbS9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvYnVpbGQvZXNtL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9vbi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vc29ja2V0LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9tYW5hZ2VyLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20vdXJsLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvVmlld3MvTWVzc2FnZS9Db252ZXJzYXRpb25WaWV3LnNjc3M/ZGRjMyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL01lc3NhZ2UvQ29udmVyc2F0aW9uVmlldy5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL01lc3NhZ2UvQ2hhdHNWaWV3LnNjc3M/ZDJlOSIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL1ZpZXdzL01lc3NhZ2UvQ2hhdHNWaWV3LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvUGFnZXMvTWVzc2FnZS9NZXNzYWdlLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvQXBwLmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMi5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovL3N0dWR5LXNwYWNlcy8uL0NsaWVudC9zcmMvc3RhdGUvcmVkdWNlcnMvYXV0aFJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9zdGF0ZS9yZWR1Y2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL3JlZHVjZXJzL3BvcHVwUmVkdWNlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL3JlZHVjZXJzL3N0dWR5R3JvdXBzUmVkdWNlci5qcyIsIndlYnBhY2s6Ly9zdHVkeS1zcGFjZXMvLi9DbGllbnQvc3JjL3N0YXRlL3JlZHVjZXJzL25vdGlmaWNhdGlvblJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vc3R1ZHktc3BhY2VzLy4vQ2xpZW50L3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFic1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgdmFyIGZyb20gPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCB2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaCAodmFsdWUsIGxlbmd0aCkge1xuXHRyZXR1cm4gKCgoKCgoKGxlbmd0aCA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMCkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAxKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDIpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS50cmltKClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7UmVnRXhwfSBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtzdHJpbmc/fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2ggKHZhbHVlLCBwYXR0ZXJuKSB7XG5cdHJldHVybiAodmFsdWUgPSBwYXR0ZXJuLmV4ZWModmFsdWUpKSA/IHZhbHVlWzBdIDogdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApfSBwYXR0ZXJuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2UgKHZhbHVlLCBwYXR0ZXJuLCByZXBsYWNlbWVudCkge1xuXHRyZXR1cm4gdmFsdWUucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluZGV4b2YgKHZhbHVlLCBzZWFyY2gpIHtcblx0cmV0dXJuIHZhbHVlLmluZGV4T2Yoc2VhcmNoKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyYXQgKHZhbHVlLCBpbmRleCkge1xuXHRyZXR1cm4gdmFsdWUuY2hhckNvZGVBdChpbmRleCkgfCAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnN0ciAodmFsdWUsIGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHZhbHVlLnNsaWNlKGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJsZW4gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueVtdfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2l6ZW9mICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kICh2YWx1ZSwgYXJyYXkpIHtcblx0cmV0dXJuIGFycmF5LnB1c2godmFsdWUpLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFycmF5XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZSAoYXJyYXksIGNhbGxiYWNrKSB7XG5cdHJldHVybiBhcnJheS5tYXAoY2FsbGJhY2spLmpvaW4oJycpXG59XG4iLCJpbXBvcnQge2Zyb20sIHRyaW0sIGNoYXJhdCwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgYXNzaWdufSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbmV4cG9ydCB2YXIgbGluZSA9IDFcbmV4cG9ydCB2YXIgY29sdW1uID0gMVxuZXhwb3J0IHZhciBsZW5ndGggPSAwXG5leHBvcnQgdmFyIHBvc2l0aW9uID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXIgPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlcnMgPSAnJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSByb290XG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW10gfCBzdHJpbmd9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdFtdIHwgc3RyaW5nfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9kZSAodmFsdWUsIHJvb3QsIHBhcmVudCwgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0cmV0dXJuIHt2YWx1ZTogdmFsdWUsIHJvb3Q6IHJvb3QsIHBhcmVudDogcGFyZW50LCB0eXBlOiB0eXBlLCBwcm9wczogcHJvcHMsIGNoaWxkcmVuOiBjaGlsZHJlbiwgbGluZTogbGluZSwgY29sdW1uOiBjb2x1bW4sIGxlbmd0aDogbGVuZ3RoLCByZXR1cm46ICcnfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkgKHJvb3QsIHByb3BzKSB7XG5cdHJldHVybiBhc3NpZ24obm9kZSgnJywgbnVsbCwgbnVsbCwgJycsIG51bGwsIG51bGwsIDApLCByb290LCB7bGVuZ3RoOiAtcm9vdC5sZW5ndGh9LCBwcm9wcylcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyICgpIHtcblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXYgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA+IDAgPyBjaGFyYXQoY2hhcmFjdGVycywgLS1wb3NpdGlvbikgOiAwXG5cblx0aWYgKGNvbHVtbi0tLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUtLVxuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXh0ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPCBsZW5ndGggPyBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24rKykgOiAwXG5cblx0aWYgKGNvbHVtbisrLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUrK1xuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZWVrICgpIHtcblx0cmV0dXJuIGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbilcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXJldCAoKSB7XG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xpY2UgKGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHN1YnN0cihjaGFyYWN0ZXJzLCBiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbiAodHlwZSkge1xuXHRzd2l0Y2ggKHR5cGUpIHtcblx0XHQvLyBcXDAgXFx0IFxcbiBcXHIgXFxzIHdoaXRlc3BhY2UgdG9rZW5cblx0XHRjYXNlIDA6IGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdHJldHVybiA1XG5cdFx0Ly8gISArICwgLyA+IEAgfiBpc29sYXRlIHRva2VuXG5cdFx0Y2FzZSAzMzogY2FzZSA0MzogY2FzZSA0NDogY2FzZSA0NzogY2FzZSA2MjogY2FzZSA2NDogY2FzZSAxMjY6XG5cdFx0Ly8gOyB7IH0gYnJlYWtwb2ludCB0b2tlblxuXHRcdGNhc2UgNTk6IGNhc2UgMTIzOiBjYXNlIDEyNTpcblx0XHRcdHJldHVybiA0XG5cdFx0Ly8gOiBhY2NvbXBhbmllZCB0b2tlblxuXHRcdGNhc2UgNTg6XG5cdFx0XHRyZXR1cm4gM1xuXHRcdC8vIFwiICcgKCBbIG9wZW5pbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgNDA6IGNhc2UgOTE6XG5cdFx0XHRyZXR1cm4gMlxuXHRcdC8vICkgXSBjbG9zaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDQxOiBjYXNlIDkzOlxuXHRcdFx0cmV0dXJuIDFcblx0fVxuXG5cdHJldHVybiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gbGluZSA9IGNvbHVtbiA9IDEsIGxlbmd0aCA9IHN0cmxlbihjaGFyYWN0ZXJzID0gdmFsdWUpLCBwb3NpdGlvbiA9IDAsIFtdXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gY2hhcmFjdGVycyA9ICcnLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ICh0eXBlKSB7XG5cdHJldHVybiB0cmltKHNsaWNlKHBvc2l0aW9uIC0gMSwgZGVsaW1pdGVyKHR5cGUgPT09IDkxID8gdHlwZSArIDIgOiB0eXBlID09PSA0MCA/IHR5cGUgKyAxIDogdHlwZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZSAodmFsdWUpIHtcblx0cmV0dXJuIGRlYWxsb2ModG9rZW5pemVyKGFsbG9jKHZhbHVlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoaXRlc3BhY2UgKHR5cGUpIHtcblx0d2hpbGUgKGNoYXJhY3RlciA9IHBlZWsoKSlcblx0XHRpZiAoY2hhcmFjdGVyIDwgMzMpXG5cdFx0XHRuZXh0KClcblx0XHRlbHNlXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiB0b2tlbih0eXBlKSA+IDIgfHwgdG9rZW4oY2hhcmFjdGVyKSA+IDMgPyAnJyA6ICcgJ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplciAoY2hpbGRyZW4pIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcblx0XHRcdGNhc2UgMDogYXBwZW5kKGlkZW50aWZpZXIocG9zaXRpb24gLSAxKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6IGFwcGVuZChkZWxpbWl0KGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0ZGVmYXVsdDogYXBwZW5kKGZyb20oY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0fVxuXG5cdHJldHVybiBjaGlsZHJlblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGluZyAoaW5kZXgsIGNvdW50KSB7XG5cdHdoaWxlICgtLWNvdW50ICYmIG5leHQoKSlcblx0XHQvLyBub3QgMC05IEEtRiBhLWZcblx0XHRpZiAoY2hhcmFjdGVyIDwgNDggfHwgY2hhcmFjdGVyID4gMTAyIHx8IChjaGFyYWN0ZXIgPiA1NyAmJiBjaGFyYWN0ZXIgPCA2NSkgfHwgKGNoYXJhY3RlciA+IDcwICYmIGNoYXJhY3RlciA8IDk3KSlcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBjYXJldCgpICsgKGNvdW50IDwgNiAmJiBwZWVrKCkgPT0gMzIgJiYgbmV4dCgpID09IDMyKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdGVyICh0eXBlKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoIChjaGFyYWN0ZXIpIHtcblx0XHRcdC8vIF0gKSBcIiAnXG5cdFx0XHRjYXNlIHR5cGU6XG5cdFx0XHRcdHJldHVybiBwb3NpdGlvblxuXHRcdFx0Ly8gXCIgJ1xuXHRcdFx0Y2FzZSAzNDogY2FzZSAzOTpcblx0XHRcdFx0aWYgKHR5cGUgIT09IDM0ICYmIHR5cGUgIT09IDM5KVxuXHRcdFx0XHRcdGRlbGltaXRlcihjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAodHlwZSA9PT0gNDEpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKHR5cGUpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXFxuXHRcdFx0Y2FzZSA5Mjpcblx0XHRcdFx0bmV4dCgpXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnRlciAodHlwZSwgaW5kZXgpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHQvLyAvL1xuXHRcdGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0NyArIDEwKVxuXHRcdFx0YnJlYWtcblx0XHQvLyAvKlxuXHRcdGVsc2UgaWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQyICsgNDIgJiYgcGVlaygpID09PSA0Nylcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuICcvKicgKyBzbGljZShpbmRleCwgcG9zaXRpb24gLSAxKSArICcqJyArIGZyb20odHlwZSA9PT0gNDcgPyB0eXBlIDogbmV4dCgpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpZmllciAoaW5kZXgpIHtcblx0d2hpbGUgKCF0b2tlbihwZWVrKCkpKVxuXHRcdG5leHQoKVxuXG5cdHJldHVybiBzbGljZShpbmRleCwgcG9zaXRpb24pXG59XG4iLCJleHBvcnQgdmFyIE1TID0gJy1tcy0nXG5leHBvcnQgdmFyIE1PWiA9ICctbW96LSdcbmV4cG9ydCB2YXIgV0VCS0lUID0gJy13ZWJraXQtJ1xuXG5leHBvcnQgdmFyIENPTU1FTlQgPSAnY29tbSdcbmV4cG9ydCB2YXIgUlVMRVNFVCA9ICdydWxlJ1xuZXhwb3J0IHZhciBERUNMQVJBVElPTiA9ICdkZWNsJ1xuXG5leHBvcnQgdmFyIFBBR0UgPSAnQHBhZ2UnXG5leHBvcnQgdmFyIE1FRElBID0gJ0BtZWRpYSdcbmV4cG9ydCB2YXIgSU1QT1JUID0gJ0BpbXBvcnQnXG5leHBvcnQgdmFyIENIQVJTRVQgPSAnQGNoYXJzZXQnXG5leHBvcnQgdmFyIFZJRVdQT1JUID0gJ0B2aWV3cG9ydCdcbmV4cG9ydCB2YXIgU1VQUE9SVFMgPSAnQHN1cHBvcnRzJ1xuZXhwb3J0IHZhciBET0NVTUVOVCA9ICdAZG9jdW1lbnQnXG5leHBvcnQgdmFyIE5BTUVTUEFDRSA9ICdAbmFtZXNwYWNlJ1xuZXhwb3J0IHZhciBLRVlGUkFNRVMgPSAnQGtleWZyYW1lcydcbmV4cG9ydCB2YXIgRk9OVF9GQUNFID0gJ0Bmb250LWZhY2UnXG5leHBvcnQgdmFyIENPVU5URVJfU1RZTEUgPSAnQGNvdW50ZXItc3R5bGUnXG5leHBvcnQgdmFyIEZPTlRfRkVBVFVSRV9WQUxVRVMgPSAnQGZvbnQtZmVhdHVyZS12YWx1ZXMnXG4iLCJpbXBvcnQge0lNUE9SVCwgQ09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT04sIEtFWUZSQU1FU30gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHtzdHJsZW4sIHNpemVvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplIChjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0dmFyIG91dHB1dCA9ICcnXG5cdHZhciBsZW5ndGggPSBzaXplb2YoY2hpbGRyZW4pXG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRvdXRwdXQgKz0gY2FsbGJhY2soY2hpbGRyZW5baV0sIGksIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRyZXR1cm4gb3V0cHV0XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBERUNMQVJBVElPTjogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC5yZXR1cm4gfHwgZWxlbWVudC52YWx1ZVxuXHRcdGNhc2UgQ09NTUVOVDogcmV0dXJuICcnXG5cdFx0Y2FzZSBLRVlGUkFNRVM6IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spICsgJ30nXG5cdFx0Y2FzZSBSVUxFU0VUOiBlbGVtZW50LnZhbHVlID0gZWxlbWVudC5wcm9wcy5qb2luKCcsJylcblx0fVxuXG5cdHJldHVybiBzdHJsZW4oY2hpbGRyZW4gPSBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spKSA/IGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIGNoaWxkcmVuICsgJ30nIDogJydcbn1cbiIsImltcG9ydCB7TVMsIE1PWiwgV0VCS0lUfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge2hhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCByZXBsYWNlfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXggKHZhbHVlLCBsZW5ndGgpIHtcblx0c3dpdGNoIChoYXNoKHZhbHVlLCBsZW5ndGgpKSB7XG5cdFx0Ly8gY29sb3ItYWRqdXN0XG5cdFx0Y2FzZSA1MTAzOlxuXHRcdFx0cmV0dXJuIFdFQktJVCArICdwcmludC0nICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIGFuaW1hdGlvbiwgYW5pbWF0aW9uLShkZWxheXxkaXJlY3Rpb258ZHVyYXRpb258ZmlsbC1tb2RlfGl0ZXJhdGlvbi1jb3VudHxuYW1lfHBsYXktc3RhdGV8dGltaW5nLWZ1bmN0aW9uKVxuXHRcdGNhc2UgNTczNzogY2FzZSA0MjAxOiBjYXNlIDMxNzc6IGNhc2UgMzQzMzogY2FzZSAxNjQxOiBjYXNlIDQ0NTc6IGNhc2UgMjkyMTpcblx0XHQvLyB0ZXh0LWRlY29yYXRpb24sIGZpbHRlciwgY2xpcC1wYXRoLCBiYWNrZmFjZS12aXNpYmlsaXR5LCBjb2x1bW4sIGJveC1kZWNvcmF0aW9uLWJyZWFrXG5cdFx0Y2FzZSA1NTcyOiBjYXNlIDYzNTY6IGNhc2UgNTg0NDogY2FzZSAzMTkxOiBjYXNlIDY2NDU6IGNhc2UgMzAwNTpcblx0XHQvLyBtYXNrLCBtYXNrLWltYWdlLCBtYXNrLShtb2RlfGNsaXB8c2l6ZSksIG1hc2stKHJlcGVhdHxvcmlnaW4pLCBtYXNrLXBvc2l0aW9uLCBtYXNrLWNvbXBvc2l0ZSxcblx0XHRjYXNlIDYzOTE6IGNhc2UgNTg3OTogY2FzZSA1NjIzOiBjYXNlIDYxMzU6IGNhc2UgNDU5OTogY2FzZSA0ODU1OlxuXHRcdC8vIGJhY2tncm91bmQtY2xpcCwgY29sdW1ucywgY29sdW1uLShjb3VudHxmaWxsfGdhcHxydWxlfHJ1bGUtY29sb3J8cnVsZS1zdHlsZXxydWxlLXdpZHRofHNwYW58d2lkdGgpXG5cdFx0Y2FzZSA0MjE1OiBjYXNlIDYzODk6IGNhc2UgNTEwOTogY2FzZSA1MzY1OiBjYXNlIDU2MjE6IGNhc2UgMzgyOTpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gYXBwZWFyYW5jZSwgdXNlci1zZWxlY3QsIHRyYW5zZm9ybSwgaHlwaGVucywgdGV4dC1zaXplLWFkanVzdFxuXHRcdGNhc2UgNTM0OTogY2FzZSA0MjQ2OiBjYXNlIDQ4MTA6IGNhc2UgNjk2ODogY2FzZSAyNzU2OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWVcblx0XHQvLyBmbGV4LCBmbGV4LWRpcmVjdGlvblxuXHRcdGNhc2UgNjgyODogY2FzZSA0MjY4OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gb3JkZXJcblx0XHRjYXNlIDYxNjU6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LScgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gYWxpZ24taXRlbXNcblx0XHRjYXNlIDUxODc6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyByZXBsYWNlKHZhbHVlLCAvKFxcdyspLisoOlteXSspLywgV0VCS0lUICsgJ2JveC0kMSQyJyArIE1TICsgJ2ZsZXgtJDEkMicpICsgdmFsdWVcblx0XHQvLyBhbGlnbi1zZWxmXG5cdFx0Y2FzZSA1NDQzOlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1pdGVtLScgKyByZXBsYWNlKHZhbHVlLCAvZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZVxuXHRcdC8vIGFsaWduLWNvbnRlbnRcblx0XHRjYXNlIDQ2NzU6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWxpbmUtcGFjaycgKyByZXBsYWNlKHZhbHVlLCAvYWxpZ24tY29udGVudHxmbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlXG5cdFx0Ly8gZmxleC1zaHJpbmtcblx0XHRjYXNlIDU1NDg6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIHZhbHVlXG5cdFx0Ly8gZmxleC1iYXNpc1xuXHRcdGNhc2UgNTI5Mjpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyB2YWx1ZVxuXHRcdC8vIGZsZXgtZ3Jvd1xuXHRcdGNhc2UgNjA2MDpcblx0XHRcdHJldHVybiBXRUJLSVQgKyAnYm94LScgKyByZXBsYWNlKHZhbHVlLCAnLWdyb3cnLCAnJykgKyBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2dyb3cnLCAncG9zaXRpdmUnKSArIHZhbHVlXG5cdFx0Ly8gdHJhbnNpdGlvblxuXHRcdGNhc2UgNDU1NDpcblx0XHRcdHJldHVybiBXRUJLSVQgKyByZXBsYWNlKHZhbHVlLCAvKFteLV0pKHRyYW5zZm9ybSkvZywgJyQxJyArIFdFQktJVCArICckMicpICsgdmFsdWVcblx0XHQvLyBjdXJzb3Jcblx0XHRjYXNlIDYxODc6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZShyZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oem9vbS18Z3JhYikvLCBXRUJLSVQgKyAnJDEnKSwgLyhpbWFnZS1zZXQpLywgV0VCS0lUICsgJyQxJyksIHZhbHVlLCAnJykgKyB2YWx1ZVxuXHRcdC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2Vcblx0XHRjYXNlIDU0OTU6IGNhc2UgMzk1OTpcblx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAvKGltYWdlLXNldFxcKFteXSopLywgV0VCS0lUICsgJyQxJyArICckYCQxJylcblx0XHQvLyBqdXN0aWZ5LWNvbnRlbnRcblx0XHRjYXNlIDQ5Njg6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZShyZXBsYWNlKHZhbHVlLCAvKC4rOikoZmxleC0pPyguKikvLCBXRUJLSVQgKyAnYm94LXBhY2s6JDMnICsgTVMgKyAnZmxleC1wYWNrOiQzJyksIC9zListYlteO10rLywgJ2p1c3RpZnknKSArIFdFQktJVCArIHZhbHVlICsgdmFsdWVcblx0XHQvLyAobWFyZ2lufHBhZGRpbmcpLWlubGluZS0oc3RhcnR8ZW5kKVxuXHRcdGNhc2UgNDA5NTogY2FzZSAzNTgzOiBjYXNlIDQwNjg6IGNhc2UgMjUzMjpcblx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rKS1pbmxpbmUoLispLywgV0VCS0lUICsgJyQxJDInKSArIHZhbHVlXG5cdFx0Ly8gKG1pbnxtYXgpPyh3aWR0aHxoZWlnaHR8aW5saW5lLXNpemV8YmxvY2stc2l6ZSlcblx0XHRjYXNlIDgxMTY6IGNhc2UgNzA1OTogY2FzZSA1NzUzOiBjYXNlIDU1MzU6XG5cdFx0Y2FzZSA1NDQ1OiBjYXNlIDU3MDE6IGNhc2UgNDkzMzogY2FzZSA0Njc3OlxuXHRcdGNhc2UgNTUzMzogY2FzZSA1Nzg5OiBjYXNlIDUwMjE6IGNhc2UgNDc2NTpcblx0XHRcdC8vIHN0cmV0Y2gsIG1heC1jb250ZW50LCBtaW4tY29udGVudCwgZmlsbC1hdmFpbGFibGVcblx0XHRcdGlmIChzdHJsZW4odmFsdWUpIC0gMSAtIGxlbmd0aCA+IDYpXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSkge1xuXHRcdFx0XHRcdC8vIChtKWF4LWNvbnRlbnQsIChtKWluLWNvbnRlbnRcblx0XHRcdFx0XHRjYXNlIDEwOTpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDQpICE9PSA0NSlcblx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAoZilpbGwtYXZhaWxhYmxlLCAoZilpdC1jb250ZW50XG5cdFx0XHRcdFx0Y2FzZSAxMDI6XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKC4rKS0oW15dKykvLCAnJDEnICsgV0VCS0lUICsgJyQyLSQzJyArICckMScgKyBNT1ogKyAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAzKSA9PSAxMDggPyAnJDMnIDogJyQyLSQzJykpICsgdmFsdWVcblx0XHRcdFx0XHQvLyAocyl0cmV0Y2hcblx0XHRcdFx0XHRjYXNlIDExNTpcblx0XHRcdFx0XHRcdHJldHVybiB+aW5kZXhvZih2YWx1ZSwgJ3N0cmV0Y2gnKSA/IHByZWZpeChyZXBsYWNlKHZhbHVlLCAnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBsZW5ndGgpICsgdmFsdWUgOiB2YWx1ZVxuXHRcdFx0XHR9XG5cdFx0XHRicmVha1xuXHRcdC8vIHBvc2l0aW9uOiBzdGlja3lcblx0XHRjYXNlIDQ5NDk6XG5cdFx0XHQvLyAocyl0aWNreT9cblx0XHRcdGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpICE9PSAxMTUpXG5cdFx0XHRcdGJyZWFrXG5cdFx0Ly8gZGlzcGxheTogKGZsZXh8aW5saW5lLWZsZXgpXG5cdFx0Y2FzZSA2NDQ0OlxuXHRcdFx0c3dpdGNoIChjaGFyYXQodmFsdWUsIHN0cmxlbih2YWx1ZSkgLSAzIC0gKH5pbmRleG9mKHZhbHVlLCAnIWltcG9ydGFudCcpICYmIDEwKSkpIHtcblx0XHRcdFx0Ly8gc3RpYyhrKXlcblx0XHRcdFx0Y2FzZSAxMDc6XG5cdFx0XHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsICc6JywgJzonICsgV0VCS0lUKSArIHZhbHVlXG5cdFx0XHRcdC8vIChpbmxpbmUtKT9mbChlKXhcblx0XHRcdFx0Y2FzZSAxMDE6XG5cdFx0XHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLis6KShbXjshXSspKDt8IS4rKT8vLCAnJDEnICsgV0VCS0lUICsgKGNoYXJhdCh2YWx1ZSwgMTQpID09PSA0NSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gkMycgKyAnJDEnICsgV0VCS0lUICsgJyQyJDMnICsgJyQxJyArIE1TICsgJyQyYm94JDMnKSArIHZhbHVlXG5cdFx0XHR9XG5cdFx0XHRicmVha1xuXHRcdC8vIHdyaXRpbmctbW9kZVxuXHRcdGNhc2UgNTkzNjpcblx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxMSkpIHtcblx0XHRcdFx0Ly8gdmVydGljYWwtbChyKVxuXHRcdFx0XHRjYXNlIDExNDpcblx0XHRcdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiJykgKyB2YWx1ZVxuXHRcdFx0XHQvLyB2ZXJ0aWNhbC1yKGwpXG5cdFx0XHRcdGNhc2UgMTA4OlxuXHRcdFx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGItcmwnKSArIHZhbHVlXG5cdFx0XHRcdC8vIGhvcml6b250YWwoLSl0YlxuXHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAnbHInKSArIHZhbHVlXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZVxuXHR9XG5cblx0cmV0dXJuIHZhbHVlXG59XG4iLCJpbXBvcnQge0NPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge2FicywgdHJpbSwgZnJvbSwgc2l6ZW9mLCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCByZXBsYWNlLCBpbmRleG9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge25vZGUsIGNoYXIsIHByZXYsIG5leHQsIHBlZWssIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmFjdGVycy5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50KSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSAnLydcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8ge1xuXHRcdFx0Y2FzZSAxMjMgKiB2YXJpYWJsZTpcblx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gc3RybGVuKGNoYXJhY3RlcnMpICogYW1wZXJzYW5kXG5cdFx0XHQvLyB9IDsgXFwwXG5cdFx0XHRjYXNlIDEyNSAqIHZhcmlhYmxlOiBjYXNlIDU5OiBjYXNlIDA6XG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHRcdFx0Ly8gXFwwIH1cblx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgMTI1OiBzY2FubmluZyA9IDBcblx0XHRcdFx0XHQvLyA7XG5cdFx0XHRcdFx0Y2FzZSA1OSArIG9mZnNldDpcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSA+IDAgJiYgKHN0cmxlbihjaGFyYWN0ZXJzKSAtIGxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChwcm9wZXJ0eSA+IDMyID8gZGVjbGFyYXRpb24oY2hhcmFjdGVycyArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAxKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChhdHJ1bGUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGQgbSBzXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDEwMDogY2FzZSAxMDk6IGNhc2UgMTE1OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZSh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJ1bGUgJiYgYXBwZW5kKHJ1bGVzZXQodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCAwLCAwLCBydWxlcywgcG9pbnRzLCB0eXBlLCBydWxlcywgcHJvcHMgPSBbXSwgbGVuZ3RoKSwgY2hpbGRyZW4pLCBydWxlcywgY2hpbGRyZW4sIGxlbmd0aCwgcG9pbnRzLCBydWxlID8gcHJvcHMgOiBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIFsnJ10sIGNoaWxkcmVuLCAwLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGluZGV4ID0gb2Zmc2V0ID0gcHJvcGVydHkgPSAwLCB2YXJpYWJsZSA9IGFtcGVyc2FuZCA9IDEsIHR5cGUgPSBjaGFyYWN0ZXJzID0gJycsIGxlbmd0aCA9IHBzZXVkb1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gOlxuXHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0bGVuZ3RoID0gMSArIHN0cmxlbihjaGFyYWN0ZXJzKSwgcHJvcGVydHkgPSBwcmV2aW91c1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYgKHZhcmlhYmxlIDwgMSlcblx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09IDEyMylcblx0XHRcdFx0XHRcdC0tdmFyaWFibGVcblx0XHRcdFx0XHRlbHNlIGlmIChjaGFyYWN0ZXIgPT0gMTI1ICYmIHZhcmlhYmxlKysgPT0gMCAmJiBwcmV2KCkgPT0gMTI1KVxuXHRcdFx0XHRcdFx0Y29udGludWVcblxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3RlcnMgKz0gZnJvbShjaGFyYWN0ZXIpLCBjaGFyYWN0ZXIgKiB2YXJpYWJsZSkge1xuXHRcdFx0XHRcdC8vICZcblx0XHRcdFx0XHRjYXNlIDM4OlxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gb2Zmc2V0ID4gMCA/IDEgOiAoY2hhcmFjdGVycyArPSAnXFxmJywgLTEpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vICxcblx0XHRcdFx0XHRjYXNlIDQ0OlxuXHRcdFx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gKHN0cmxlbihjaGFyYWN0ZXJzKSAtIDEpICogYW1wZXJzYW5kLCBhbXBlcnNhbmQgPSAxXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEBcblx0XHRcdFx0XHRjYXNlIDY0OlxuXHRcdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdFx0aWYgKHBlZWsoKSA9PT0gNDUpXG5cdFx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChuZXh0KCkpXG5cblx0XHRcdFx0XHRcdGF0cnVsZSA9IHBlZWsoKSwgb2Zmc2V0ID0gbGVuZ3RoID0gc3RybGVuKHR5cGUgPSBjaGFyYWN0ZXJzICs9IGlkZW50aWZpZXIoY2FyZXQoKSkpLCBjaGFyYWN0ZXIrK1xuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0Y2FzZSA0NTpcblx0XHRcdFx0XHRcdGlmIChwcmV2aW91cyA9PT0gNDUgJiYgc3RybGVuKGNoYXJhY3RlcnMpID09IDIpXG5cdFx0XHRcdFx0XHRcdHZhcmlhYmxlID0gMFxuXHRcdFx0XHR9XG5cdFx0fVxuXG5cdHJldHVybiBydWxlc2V0c1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwcm9wc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzZXQgKHZhbHVlLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKSB7XG5cdHZhciBwb3N0ID0gb2Zmc2V0IC0gMVxuXHR2YXIgcnVsZSA9IG9mZnNldCA9PT0gMCA/IHJ1bGVzIDogWycnXVxuXHR2YXIgc2l6ZSA9IHNpemVvZihydWxlKVxuXG5cdGZvciAodmFyIGkgPSAwLCBqID0gMCwgayA9IDA7IGkgPCBpbmRleDsgKytpKVxuXHRcdGZvciAodmFyIHggPSAwLCB5ID0gc3Vic3RyKHZhbHVlLCBwb3N0ICsgMSwgcG9zdCA9IGFicyhqID0gcG9pbnRzW2ldKSksIHogPSB2YWx1ZTsgeCA8IHNpemU7ICsreClcblx0XHRcdGlmICh6ID0gdHJpbShqID4gMCA/IHJ1bGVbeF0gKyAnICcgKyB5IDogcmVwbGFjZSh5LCAvJlxcZi9nLCBydWxlW3hdKSkpXG5cdFx0XHRcdHByb3BzW2srK10gPSB6XG5cblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgb2Zmc2V0ID09PSAwID8gUlVMRVNFVCA6IHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50ICh2YWx1ZSwgcm9vdCwgcGFyZW50KSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIENPTU1FTlQsIGZyb20oY2hhcigpKSwgc3Vic3RyKHZhbHVlLCAyLCAtMiksIDApXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY2xhcmF0aW9uICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBsZW5ndGgpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgREVDTEFSQVRJT04sIHN1YnN0cih2YWx1ZSwgMCwgbGVuZ3RoKSwgc3Vic3RyKHZhbHVlLCBsZW5ndGggKyAxLCAtMSksIGxlbmd0aClcbn1cbiIsImltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5pbXBvcnQgeyBkZWFsbG9jLCBhbGxvYywgbmV4dCwgdG9rZW4sIGZyb20sIHBlZWssIGRlbGltaXQsIHNsaWNlLCBwb3NpdGlvbiwgc3RyaW5naWZ5LCBDT01NRU5ULCBydWxlc2hlZXQsIG1pZGRsZXdhcmUsIHByZWZpeGVyLCBzZXJpYWxpemUsIGNvbXBpbGUgfSBmcm9tICdzdHlsaXMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIGxhc3QgPSBmdW5jdGlvbiBsYXN0KGFycikge1xuICByZXR1cm4gYXJyLmxlbmd0aCA/IGFyclthcnIubGVuZ3RoIC0gMV0gOiBudWxsO1xufTsgLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3RoeXN1bHRhbi9zdHlsaXMuanMvYmxvYi9lNjg0M2MzNzNlYmNiYmZhZGUyNWViY2MyM2Y1NDBlZDg1MDhkYTBhL3NyYy9Ub2tlbml6ZXIuanMjTDIzOS1MMjQ0XG5cblxudmFyIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyA9IGZ1bmN0aW9uIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhiZWdpbiwgcG9pbnRzLCBpbmRleCkge1xuICB2YXIgcHJldmlvdXMgPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gMDtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHByZXZpb3VzID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHBlZWsoKTsgLy8gJlxcZlxuXG4gICAgaWYgKHByZXZpb3VzID09PSAzOCAmJiBjaGFyYWN0ZXIgPT09IDEyKSB7XG4gICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbmV4dCgpO1xuICB9XG5cbiAgcmV0dXJuIHNsaWNlKGJlZ2luLCBwb3NpdGlvbik7XG59O1xuXG52YXIgdG9SdWxlcyA9IGZ1bmN0aW9uIHRvUnVsZXMocGFyc2VkLCBwb2ludHMpIHtcbiAgLy8gcHJldGVuZCB3ZSd2ZSBzdGFydGVkIHdpdGggYSBjb21tYVxuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGNoYXJhY3RlciA9IDQ0O1xuXG4gIGRvIHtcbiAgICBzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgLy8gJlxcZlxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSAzOCAmJiBwZWVrKCkgPT09IDEyKSB7XG4gICAgICAgICAgLy8gdGhpcyBpcyBub3QgMTAwJSBjb3JyZWN0LCB3ZSBkb24ndCBhY2NvdW50IGZvciBsaXRlcmFsIHNlcXVlbmNlcyBoZXJlIC0gbGlrZSBmb3IgZXhhbXBsZSBxdW90ZWQgc3RyaW5nc1xuICAgICAgICAgIC8vIHN0eWxpcyBpbnNlcnRzIFxcZiBhZnRlciAmIHRvIGtub3cgd2hlbiAmIHdoZXJlIGl0IHNob3VsZCByZXBsYWNlIHRoaXMgc2VxdWVuY2Ugd2l0aCB0aGUgY29udGV4dCBzZWxlY3RvclxuICAgICAgICAgIC8vIGFuZCB3aGVuIGl0IHNob3VsZCBqdXN0IGNvbmNhdGVuYXRlIHRoZSBvdXRlciBhbmQgaW5uZXIgc2VsZWN0b3JzXG4gICAgICAgICAgLy8gaXQncyB2ZXJ5IHVubGlrZWx5IGZvciB0aGlzIHNlcXVlbmNlIHRvIGFjdHVhbGx5IGFwcGVhciBpbiBhIGRpZmZlcmVudCBjb250ZXh0LCBzbyB3ZSBqdXN0IGxldmVyYWdlIHRoaXMgZmFjdCBoZXJlXG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhwb3NpdGlvbiAtIDEsIHBvaW50cywgaW5kZXgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGRlbGltaXQoY2hhcmFjdGVyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgLy8gY29tbWFcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gNDQpIHtcbiAgICAgICAgICAvLyBjb2xvblxuICAgICAgICAgIHBhcnNlZFsrK2luZGV4XSA9IHBlZWsoKSA9PT0gNTggPyAnJlxcZicgOiAnJztcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gcGFyc2VkW2luZGV4XS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgLy8gZmFsbHRocm91Z2hcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBmcm9tKGNoYXJhY3Rlcik7XG4gICAgfVxuICB9IHdoaWxlIChjaGFyYWN0ZXIgPSBuZXh0KCkpO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG52YXIgZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKSB7XG4gIHJldHVybiBkZWFsbG9jKHRvUnVsZXMoYWxsb2ModmFsdWUpLCBwb2ludHMpKTtcbn07IC8vIFdlYWtTZXQgd291bGQgYmUgbW9yZSBhcHByb3ByaWF0ZSwgYnV0IG9ubHkgV2Vha01hcCBpcyBzdXBwb3J0ZWQgaW4gSUUxMVxuXG5cbnZhciBmaXhlZEVsZW1lbnRzID0gLyogI19fUFVSRV9fICovbmV3IFdlYWtNYXAoKTtcbnZhciBjb21wYXQgPSBmdW5jdGlvbiBjb21wYXQoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScgfHwgIWVsZW1lbnQucGFyZW50IHx8IC8vIHBvc2l0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGNvbnRhaW5zIHBzZXVkb1xuICAvLyBuZWdhdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBoYXMgYmVlbiBhbHJlYWR5IHByZWZpeGVkXG4gIGVsZW1lbnQubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWUsXG4gICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgdmFyIGlzSW1wbGljaXRSdWxlID0gZWxlbWVudC5jb2x1bW4gPT09IHBhcmVudC5jb2x1bW4gJiYgZWxlbWVudC5saW5lID09PSBwYXJlbnQubGluZTtcblxuICB3aGlsZSAocGFyZW50LnR5cGUgIT09ICdydWxlJykge1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgaWYgKCFwYXJlbnQpIHJldHVybjtcbiAgfSAvLyBzaG9ydC1jaXJjdWl0IGZvciB0aGUgc2ltcGxlc3QgY2FzZVxuXG5cbiAgaWYgKGVsZW1lbnQucHJvcHMubGVuZ3RoID09PSAxICYmIHZhbHVlLmNoYXJDb2RlQXQoMCkgIT09IDU4XG4gIC8qIGNvbG9uICovXG4gICYmICFmaXhlZEVsZW1lbnRzLmdldChwYXJlbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGlmIHRoaXMgaXMgYW4gaW1wbGljaXRseSBpbnNlcnRlZCBydWxlICh0aGUgb25lIGVhZ2VybHkgaW5zZXJ0ZWQgYXQgdGhlIGVhY2ggbmV3IG5lc3RlZCBsZXZlbClcbiAgLy8gdGhlbiB0aGUgcHJvcHMgaGFzIGFscmVhZHkgYmVlbiBtYW5pcHVsYXRlZCBiZWZvcmVoYW5kIGFzIHRoZXkgdGhhdCBhcnJheSBpcyBzaGFyZWQgYmV0d2VlbiBpdCBhbmQgaXRzIFwicnVsZSBwYXJlbnRcIlxuXG5cbiAgaWYgKGlzSW1wbGljaXRSdWxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZml4ZWRFbGVtZW50cy5zZXQoZWxlbWVudCwgdHJ1ZSk7XG4gIHZhciBwb2ludHMgPSBbXTtcbiAgdmFyIHJ1bGVzID0gZ2V0UnVsZXModmFsdWUsIHBvaW50cyk7XG4gIHZhciBwYXJlbnRSdWxlcyA9IHBhcmVudC5wcm9wcztcblxuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFyZW50UnVsZXMubGVuZ3RoOyBqKyssIGsrKykge1xuICAgICAgZWxlbWVudC5wcm9wc1trXSA9IHBvaW50c1tpXSA/IHJ1bGVzW2ldLnJlcGxhY2UoLyZcXGYvZywgcGFyZW50UnVsZXNbal0pIDogcGFyZW50UnVsZXNbal0gKyBcIiBcIiArIHJ1bGVzW2ldO1xuICAgIH1cbiAgfVxufTtcbnZhciByZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZTtcblxuICAgIGlmICggLy8gY2hhcmNvZGUgZm9yIGxcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDApID09PSAxMDggJiYgLy8gY2hhcmNvZGUgZm9yIGJcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDIpID09PSA5OCkge1xuICAgICAgLy8gdGhpcyBpZ25vcmVzIGxhYmVsXG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gJyc7XG4gICAgICBlbGVtZW50LnZhbHVlID0gJyc7XG4gICAgfVxuICB9XG59O1xudmFyIGlnbm9yZUZsYWcgPSAnZW1vdGlvbi1kaXNhYmxlLXNlcnZlci1yZW5kZXJpbmctdW5zYWZlLXNlbGVjdG9yLXdhcm5pbmctcGxlYXNlLWRvLW5vdC11c2UtdGhpcy10aGUtd2FybmluZy1leGlzdHMtZm9yLWEtcmVhc29uJztcblxudmFyIGlzSWdub3JpbmdDb21tZW50ID0gZnVuY3Rpb24gaXNJZ25vcmluZ0NvbW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gISFlbGVtZW50ICYmIGVsZW1lbnQudHlwZSA9PT0gJ2NvbW0nICYmIGVsZW1lbnQuY2hpbGRyZW4uaW5kZXhPZihpZ25vcmVGbGFnKSA+IC0xO1xufTtcblxudmFyIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtID0gZnVuY3Rpb24gY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oY2FjaGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScpIHJldHVybjtcbiAgICB2YXIgdW5zYWZlUHNldWRvQ2xhc3NlcyA9IGVsZW1lbnQudmFsdWUubWF0Y2goLyg6Zmlyc3R8Om50aHw6bnRoLWxhc3QpLWNoaWxkL2cpO1xuXG4gICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzZXMgJiYgY2FjaGUuY29tcGF0ICE9PSB0cnVlKSB7XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSBpbmRleCA+IDAgPyBjaGlsZHJlbltpbmRleCAtIDFdIDogbnVsbDtcblxuICAgICAgaWYgKHByZXZFbGVtZW50ICYmIGlzSWdub3JpbmdDb21tZW50KGxhc3QocHJldkVsZW1lbnQuY2hpbGRyZW4pKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGlzSW1wb3J0UnVsZSA9IGZ1bmN0aW9uIGlzSW1wb3J0UnVsZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1ICYmIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDApID09PSA2NDtcbn07XG5cbnZhciBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMgPSBmdW5jdGlvbiBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKCFpc0ltcG9ydFJ1bGUoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59OyAvLyB1c2UgdGhpcyB0byByZW1vdmUgaW5jb3JyZWN0IGVsZW1lbnRzIGZyb20gZnVydGhlciBwcm9jZXNzaW5nXG4vLyBzbyB0aGV5IGRvbid0IGdldCBoYW5kZWQgdG8gdGhlIGBzaGVldGAgKG9yIGFueXRoaW5nIGVsc2UpXG4vLyBhcyB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGxlYWQgdG8gYWRkaXRpb25hbCBsb2dzIHdoaWNoIGluIHR1cm4gY291bGQgYmUgb3ZlcmhlbG1pbmcgdG8gdGhlIHVzZXJcblxuXG52YXIgbnVsbGlmeUVsZW1lbnQgPSBmdW5jdGlvbiBudWxsaWZ5RWxlbWVudChlbGVtZW50KSB7XG4gIGVsZW1lbnQudHlwZSA9ICcnO1xuICBlbGVtZW50LnZhbHVlID0gJyc7XG4gIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgZWxlbWVudC5jaGlsZHJlbiA9ICcnO1xuICBlbGVtZW50LnByb3BzID0gJyc7XG59O1xuXG52YXIgaW5jb3JyZWN0SW1wb3J0QWxhcm0gPSBmdW5jdGlvbiBpbmNvcnJlY3RJbXBvcnRBbGFybShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgaWYgKCFpc0ltcG9ydFJ1bGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWxlbWVudC5wYXJlbnQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIG5lc3RlZCBpbnNpZGUgb3RoZXIgcnVsZXMuIFBsZWFzZSBtb3ZlIGl0IHRvIHRoZSB0b3AgbGV2ZWwgYW5kIHB1dCBpdCBiZWZvcmUgcmVndWxhciBydWxlcy4gS2VlcCBpbiBtaW5kIHRoYXQgdGhleSBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBnbG9iYWwgc3R5bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfSBlbHNlIGlmIChpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgYWZ0ZXIgb3RoZXIgcnVsZXMuIFBsZWFzZSBwdXQgeW91ciBgQGltcG9ydGAgcnVsZXMgYmVmb3JlIHlvdXIgb3RoZXIgcnVsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFN0eWxpc1BsdWdpbnMgPSBbcHJlZml4ZXJdO1xuXG52YXIgY3JlYXRlQ2FjaGUgPSBmdW5jdGlvbiBjcmVhdGVDYWNoZShvcHRpb25zKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAha2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGhhdmUgdG8gY29uZmlndXJlIGBrZXlgIGZvciB5b3VyIGNhY2hlLiBQbGVhc2UgbWFrZSBzdXJlIGl0J3MgdW5pcXVlIChhbmQgbm90IGVxdWFsIHRvICdjc3MnKSBhcyBpdCdzIHVzZWQgZm9yIGxpbmtpbmcgc3R5bGVzIHRvIHlvdXIgY2FjaGUuXFxuXCIgKyBcIklmIG11bHRpcGxlIGNhY2hlcyBzaGFyZSB0aGUgc2FtZSBrZXkgdGhleSBtaWdodCBcXFwiZmlnaHRcXFwiIGZvciBlYWNoIG90aGVyJ3Mgc3R5bGUgZWxlbWVudHMuXCIpO1xuICB9XG5cbiAgaWYgKCBrZXkgPT09ICdjc3MnKSB7XG4gICAgdmFyIHNzclN0eWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25dOm5vdChbZGF0YS1zXSlcIik7IC8vIGdldCBTU1JlZCBzdHlsZXMgb3V0IG9mIHRoZSB3YXkgb2YgUmVhY3QncyBoeWRyYXRpb25cbiAgICAvLyBkb2N1bWVudC5oZWFkIGlzIGEgc2FmZSBwbGFjZSB0byBtb3ZlIHRoZW0gdG8odGhvdWdoIG5vdGUgZG9jdW1lbnQuaGVhZCBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIGxhc3QgcGxhY2UgdGhleSB3aWxsIGJlKVxuICAgIC8vIG5vdGUgdGhpcyB2ZXJ5IHZlcnkgaW50ZW50aW9uYWxseSB0YXJnZXRzIGFsbCBzdHlsZSBlbGVtZW50cyByZWdhcmRsZXNzIG9mIHRoZSBrZXkgdG8gZW5zdXJlXG4gICAgLy8gdGhhdCBjcmVhdGluZyBhIGNhY2hlIHdvcmtzIGluc2lkZSBvZiByZW5kZXIgb2YgYSBSZWFjdCBjb21wb25lbnRcblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc3NyU3R5bGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gd2Ugd2FudCB0byBvbmx5IG1vdmUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIHNwYWNlIGluIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlIHZhbHVlXG4gICAgICAvLyBiZWNhdXNlIHRoYXQgaW5kaWNhdGVzIHRoYXQgaXQgaXMgYW4gRW1vdGlvbiAxMSBzZXJ2ZXItc2lkZSByZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgICAgLy8gd2hpbGUgd2Ugd2lsbCBhbHJlYWR5IGlnbm9yZSBFbW90aW9uIDExIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBiZWNhdXNlIG9mIHRoZSA6bm90KFtkYXRhLXNdKSBwYXJ0IGluIHRoZSBzZWxlY3RvclxuICAgICAgLy8gRW1vdGlvbiAxMCBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgZGlkIG5vdCBoYXZlIGRhdGEtcyAoYnV0IGltcG9ydGFudGx5IGRpZCBub3QgaGF2ZSBhIHNwYWNlIGluIHRoZWlyIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGVzKVxuICAgICAgLy8gc28gY2hlY2tpbmcgZm9yIHRoZSBzcGFjZSBlbnN1cmVzIHRoYXQgbG9hZGluZyBFbW90aW9uIDExIGFmdGVyIEVtb3Rpb24gMTAgaGFzIGluc2VydGVkIHNvbWUgc3R5bGVzXG4gICAgICAvLyB3aWxsIG5vdCByZXN1bHQgaW4gdGhlIEVtb3Rpb24gMTAgc3R5bGVzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgdmFyIGRhdGFFbW90aW9uQXR0cmlidXRlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicpO1xuXG4gICAgICBpZiAoZGF0YUVtb3Rpb25BdHRyaWJ1dGUuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBzdHlsaXNQbHVnaW5zID0gb3B0aW9ucy5zdHlsaXNQbHVnaW5zIHx8IGRlZmF1bHRTdHlsaXNQbHVnaW5zO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGlmICgvW15hLXotXS8udGVzdChrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbW90aW9uIGtleSBtdXN0IG9ubHkgY29udGFpbiBsb3dlciBjYXNlIGFscGhhYmV0aWNhbCBjaGFyYWN0ZXJzIGFuZCAtIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIHBhc3NlZFwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5zZXJ0ZWQgPSB7fTsgLy8gJEZsb3dGaXhNZVxuXG4gIHZhciBjb250YWluZXI7XG4gIHZhciBub2Rlc1RvSHlkcmF0ZSA9IFtdO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoIC8vIHRoaXMgbWVhbnMgd2Ugd2lsbCBpZ25vcmUgZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhIHNwYWNlIGluIHRoZW0gd2hpY2hcbiAgICAvLyBtZWFucyB0aGF0IHRoZSBzdHlsZSBlbGVtZW50cyB3ZSdyZSBsb29raW5nIGF0IGFyZSBvbmx5IEVtb3Rpb24gMTEgc2VydmVyLXJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl49XFxcIlwiICsga2V5ICsgXCIgXFxcIl1cIiksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXR0cmliID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb25cIikuc3BsaXQoJyAnKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGF0dHJpYi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnNlcnRlZFthdHRyaWJbaV1dID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZXNUb0h5ZHJhdGUucHVzaChub2RlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfaW5zZXJ0O1xuXG4gIHZhciBvbW5pcHJlc2VudFBsdWdpbnMgPSBbY29tcGF0LCByZW1vdmVMYWJlbF07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBvbW5pcHJlc2VudFBsdWdpbnMucHVzaChjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSh7XG4gICAgICBnZXQgY29tcGF0KCkge1xuICAgICAgICByZXR1cm4gY2FjaGUuY29tcGF0O1xuICAgICAgfVxuXG4gICAgfSksIGluY29ycmVjdEltcG9ydEFsYXJtKTtcbiAgfVxuXG4gIHtcbiAgICB2YXIgY3VycmVudFNoZWV0O1xuICAgIHZhciBmaW5hbGl6aW5nUGx1Z2lucyA9IFtzdHJpbmdpZnksIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKCFlbGVtZW50LnJvb3QpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnRbXCJyZXR1cm5cIl0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudmFsdWUgJiYgZWxlbWVudC50eXBlICE9PSBDT01NRU5UKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGVtcHR5IHJ1bGUgaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXG4gICAgICAgICAgLy8gc28gQGVtb3Rpb24vamVzdCBjYW4gZ3JhYiBga2V5YCBmcm9tIHRoZSAoSlMpRE9NIGZvciBjYWNoZXMgd2l0aG91dCBhbnkgcnVsZXMgaW5zZXJ0ZWQgeWV0XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50LnZhbHVlICsgXCJ7fVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gOiBydWxlc2hlZXQoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQocnVsZSk7XG4gICAgfSldO1xuICAgIHZhciBzZXJpYWxpemVyID0gbWlkZGxld2FyZShvbW5pcHJlc2VudFBsdWdpbnMuY29uY2F0KHN0eWxpc1BsdWdpbnMsIGZpbmFsaXppbmdQbHVnaW5zKSk7XG5cbiAgICB2YXIgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHN0eWxlcykge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZShjb21waWxlKHN0eWxlcyksIHNlcmlhbGl6ZXIpO1xuICAgIH07XG5cbiAgICBfaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHNlbGVjdG9yLCBzZXJpYWxpemVkLCBzaGVldCwgc2hvdWxkQ2FjaGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldCA9IHNoZWV0O1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN1cnJlbnRTaGVldCA9IHtcbiAgICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgICAgICAgICBzaGVldC5pbnNlcnQocnVsZSArIHNlcmlhbGl6ZWQubWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN0eWxpcyhzZWxlY3RvciA/IHNlbGVjdG9yICsgXCJ7XCIgKyBzZXJpYWxpemVkLnN0eWxlcyArIFwifVwiIDogc2VyaWFsaXplZC5zdHlsZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeSxcbiAgICAgIHByZXBlbmQ6IG9wdGlvbnMucHJlcGVuZCxcbiAgICAgIGluc2VydGlvblBvaW50OiBvcHRpb25zLmluc2VydGlvblBvaW50XG4gICAgfSksXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgaW5zZXJ0ZWQ6IGluc2VydGVkLFxuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydDogX2luc2VydFxuICB9O1xuICBjYWNoZS5zaGVldC5oeWRyYXRlKG5vZGVzVG9IeWRyYXRlKTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ2FjaGU7XG4iLCJpbXBvcnQge01TLCBNT1osIFdFQktJVCwgUlVMRVNFVCwgS0VZRlJBTUVTLCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHttYXRjaCwgY2hhcmF0LCBzdWJzdHIsIHN0cmxlbiwgc2l6ZW9mLCByZXBsYWNlLCBjb21iaW5lfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge2NvcHksIHRva2VuaXplfSBmcm9tICcuL1Rva2VuaXplci5qcydcbmltcG9ydCB7c2VyaWFsaXplfSBmcm9tICcuL1NlcmlhbGl6ZXIuanMnXG5pbXBvcnQge3ByZWZpeH0gZnJvbSAnLi9QcmVmaXhlci5qcydcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uW119IGNvbGxlY3Rpb25cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlkZGxld2FyZSAoY29sbGVjdGlvbikge1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNvbGxlY3Rpb24pXG5cblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdFx0dmFyIG91dHB1dCA9ICcnXG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdFx0b3V0cHV0ICs9IGNvbGxlY3Rpb25baV0oZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRcdHJldHVybiBvdXRwdXRcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzaGVldCAoY2FsbGJhY2spIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0aWYgKCFlbGVtZW50LnJvb3QpXG5cdFx0XHRpZiAoZWxlbWVudCA9IGVsZW1lbnQucmV0dXJuKVxuXHRcdFx0XHRjYWxsYmFjayhlbGVtZW50KVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhlciAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRpZiAoZWxlbWVudC5sZW5ndGggPiAtMSlcblx0XHRpZiAoIWVsZW1lbnQucmV0dXJuKVxuXHRcdFx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBERUNMQVJBVElPTjogZWxlbWVudC5yZXR1cm4gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgpXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7dmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpfSldLCBjYWxsYmFjaylcblx0XHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRcdGlmIChlbGVtZW50Lmxlbmd0aClcblx0XHRcdFx0XHRcdHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV19KVxuXHRcdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJydcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVzcGFjZSAoZWxlbWVudCkge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdGVsZW1lbnQucHJvcHMgPSBlbGVtZW50LnByb3BzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbWJpbmUodG9rZW5pemUodmFsdWUpLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjaGlsZHJlbikge1xuXHRcdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCAwKSkge1xuXHRcdFx0XHRcdFx0Ly8gXFxmXG5cdFx0XHRcdFx0XHRjYXNlIDEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3Vic3RyKHZhbHVlLCAxLCBzdHJsZW4odmFsdWUpKVxuXHRcdFx0XHRcdFx0Ly8gXFwwICggKyA+IH5cblx0XHRcdFx0XHRcdGNhc2UgMDogY2FzZSA0MDogY2FzZSA0MzogY2FzZSA2MjogY2FzZSAxMjY6XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gOlxuXHRcdFx0XHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuWysraW5kZXhdID09PSAnZ2xvYmFsJylcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltpbmRleF0gPSAnJywgY2hpbGRyZW5bKytpbmRleF0gPSAnXFxmJyArIHN1YnN0cihjaGlsZHJlbltpbmRleF0sIGluZGV4ID0gMSwgLTEpXG5cdFx0XHRcdFx0XHQvLyBcXHNcblx0XHRcdFx0XHRcdGNhc2UgMzI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IGVsZW1lbnQgPSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNpemVvZihjaGlsZHJlbikgPiAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgaW5kZXggPSBzaXplb2YoY2hpbGRyZW4pIC0gMTogY2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAyID8gdmFsdWUgKyBlbGVtZW50ICsgZWxlbWVudCA6IHZhbHVlICsgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdH1cbn1cbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIGZvcndhcmRSZWYsIGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3ZWFrTWVtb2l6ZSBmcm9tICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIEVtb3Rpb25DYWNoZUNvbnRleHQgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVDb250ZXh0KCAvLyB3ZSdyZSBkb2luZyB0aGlzIHRvIGF2b2lkIHByZWNvbnN0cnVjdCdzIGRlYWQgY29kZSBlbGltaW5hdGlvbiBpbiB0aGlzIG9uZSBjYXNlXG4vLyBiZWNhdXNlIHRoaXMgbW9kdWxlIGlzIHByaW1hcmlseSBpbnRlbmRlZCBmb3IgdGhlIGJyb3dzZXIgYW5kIG5vZGVcbi8vIGJ1dCBpdCdzIGFsc28gcmVxdWlyZWQgaW4gcmVhY3QgbmF0aXZlIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cyBzb21ldGltZXNcbi8vIGFuZCB3ZSBjb3VsZCBoYXZlIGEgc3BlY2lhbCBidWlsZCBqdXN0IGZvciB0aGF0XG4vLyBidXQgdGhpcyBpcyBtdWNoIGVhc2llciBhbmQgdGhlIG5hdGl2ZSBwYWNrYWdlc1xuLy8gbWlnaHQgdXNlIGEgZGlmZmVyZW50IHRoZW1lIGNvbnRleHQgaW4gdGhlIGZ1dHVyZSBhbnl3YXlcbnR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyAvKiAjX19QVVJFX18gKi9jcmVhdGVDYWNoZSh7XG4gIGtleTogJ2Nzcydcbn0pIDogbnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb25DYWNoZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNhY2hlQ29udGV4dCc7XG59XG5cbnZhciBDYWNoZVByb3ZpZGVyID0gRW1vdGlvbkNhY2hlQ29udGV4dC5Qcm92aWRlcjtcbnZhciBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB1c2VFbW90aW9uQ2FjaGUoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xufTtcblxudmFyIHdpdGhFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlKGZ1bmMpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICAvLyB0aGUgY2FjaGUgd2lsbCBuZXZlciBiZSBudWxsIGluIHRoZSBicm93c2VyXG4gICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbiAgICByZXR1cm4gZnVuYyhwcm9wcywgY2FjaGUsIHJlZik7XG4gIH0pO1xufTtcblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZSA9IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZShsaW5lKSB7XG4gIC8vIFY4XG4gIHZhciBtYXRjaCA9IC9eXFxzK2F0XFxzKyhbQS1aYS16MC05JC5dKylcXHMvLmV4ZWMobGluZSk7XG5cbiAgaWYgKG1hdGNoKSB7XG4gICAgLy8gVGhlIG1hdGNoIG1heSBiZSBzb21ldGhpbmcgbGlrZSAnT2JqZWN0LmNyZWF0ZUVtb3Rpb25Qcm9wcydcbiAgICB2YXIgcGFydHMgPSBtYXRjaFsxXS5zcGxpdCgnLicpO1xuICAgIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbiAgfSAvLyBTYWZhcmkgLyBGaXJlZm94XG5cblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIG1hdGNoWzFdO1xuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIGludGVybmFsUmVhY3RGdW5jdGlvbk5hbWVzID0gLyogI19fUFVSRV9fICovbmV3IFNldChbJ3JlbmRlcldpdGhIb29rcycsICdwcm9jZXNzQ2hpbGQnLCAnZmluaXNoQ2xhc3NDb21wb25lbnQnLCAncmVuZGVyVG9TdHJpbmcnXSk7IC8vIFRoZXNlIGlkZW50aWZpZXJzIGNvbWUgZnJvbSBlcnJvciBzdGFja3MsIHNvIHRoZXkgaGF2ZSB0byBiZSB2YWxpZCBKU1xuLy8gaWRlbnRpZmllcnMsIHRodXMgd2Ugb25seSBuZWVkIHRvIHJlcGxhY2Ugd2hhdCBpcyBhIHZhbGlkIGNoYXJhY3RlciBmb3IgSlMsXG4vLyBidXQgbm90IGZvciBDU1MuXG5cbnZhciBzYW5pdGl6ZUlkZW50aWZpZXIgPSBmdW5jdGlvbiBzYW5pdGl6ZUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gaWRlbnRpZmllci5yZXBsYWNlKC9cXCQvZywgJy0nKTtcbn07XG5cbnZhciBnZXRMYWJlbEZyb21TdGFja1RyYWNlID0gZnVuY3Rpb24gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShzdGFja1RyYWNlKSB7XG4gIGlmICghc3RhY2tUcmFjZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGxpbmVzID0gc3RhY2tUcmFjZS5zcGxpdCgnXFxuJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZXNbaV0pOyAvLyBUaGUgZmlyc3QgbGluZSBvZiBWOCBzdGFjayB0cmFjZXMgaXMganVzdCBcIkVycm9yXCJcblxuICAgIGlmICghZnVuY3Rpb25OYW1lKSBjb250aW51ZTsgLy8gSWYgd2UgcmVhY2ggb25lIG9mIHRoZXNlLCB3ZSBoYXZlIGdvbmUgdG9vIGZhciBhbmQgc2hvdWxkIHF1aXRcblxuICAgIGlmIChpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcy5oYXMoZnVuY3Rpb25OYW1lKSkgYnJlYWs7IC8vIFRoZSBjb21wb25lbnQgbmFtZSBpcyB0aGUgZmlyc3QgZnVuY3Rpb24gaW4gdGhlIHN0YWNrIHRoYXQgc3RhcnRzIHdpdGggYW5cbiAgICAvLyB1cHBlcmNhc2UgbGV0dGVyXG5cbiAgICBpZiAoL15bQS1aXS8udGVzdChmdW5jdGlvbk5hbWUpKSByZXR1cm4gc2FuaXRpemVJZGVudGlmaWVyKGZ1bmN0aW9uTmFtZSk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIHR5cGVQcm9wTmFtZSA9ICdfX0VNT1RJT05fVFlQRV9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBsYWJlbFByb3BOYW1lID0gJ19fRU1PVElPTl9MQUJFTF9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBjcmVhdGVFbW90aW9uUHJvcHMgPSBmdW5jdGlvbiBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHByb3BzLmNzcyA9PT0gJ3N0cmluZycgJiYgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBjc3MgZGVjbGFyYXRpb25cbiAgcHJvcHMuY3NzLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmdzIGFyZSBub3QgYWxsb3dlZCBhcyBjc3MgcHJvcCB2YWx1ZXMsIHBsZWFzZSB3cmFwIGl0IGluIGEgY3NzIHRlbXBsYXRlIGxpdGVyYWwgZnJvbSAnQGVtb3Rpb24vcmVhY3QnIGxpa2UgdGhpczogY3NzYFwiICsgcHJvcHMuY3NzICsgXCJgXCIpO1xuICB9XG5cbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlOyAvLyBGb3IgcGVyZm9ybWFuY2UsIG9ubHkgY2FsbCBnZXRMYWJlbEZyb21TdGFja1RyYWNlIGluIGRldmVsb3BtZW50IGFuZCB3aGVuXG4gIC8vIHRoZSBsYWJlbCBoYXNuJ3QgYWxyZWFkeSBiZWVuIGNvbXB1dGVkXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISFwcm9wcy5jc3MgJiYgKHR5cGVvZiBwcm9wcy5jc3MgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwcm9wcy5jc3MubmFtZSAhPT0gJ3N0cmluZycgfHwgcHJvcHMuY3NzLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkpIHtcbiAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbEZyb21TdGFja1RyYWNlKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICBpZiAobGFiZWwpIG5ld1Byb3BzW2xhYmVsUHJvcE5hbWVdID0gbGFiZWw7XG4gIH1cblxuICByZXR1cm4gbmV3UHJvcHM7XG59O1xuXG52YXIgTm9vcCA9IGZ1bmN0aW9uIE5vb3AoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcnVsZXMgPSBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyk7XG4gIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgdmFyIGVsZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KHR5cGUsIG5ld1Byb3BzKTtcbiAgdmFyIHBvc3NpYmx5U3R5bGVFbGVtZW50ID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTm9vcCwgbnVsbCk7XG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIHBvc3NpYmx5U3R5bGVFbGVtZW50LCBlbGUpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59XG5cbmV4cG9ydCB7IENhY2hlUHJvdmlkZXIgYXMgQywgRW1vdGlvbiBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd25Qcm9wZXJ0eSBhcyBoLCB1c2VUaGVtZSBhcyB1LCB3aXRoRW1vdGlvbkNhY2hlIGFzIHcgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hYXBwbGVieS9zbWhhc2hlci9ibG9iLzYxYTA1MzBmMjgyNzdmMmU4NTBiZmMzOTYwMGNlNjFkMDJiNTE4ZGUvc3JjL011cm11ckhhc2gyLmNwcCNMMzctTDg2XG5mdW5jdGlvbiBtdXJtdXIyKHN0cikge1xuICAvLyAnbScgYW5kICdyJyBhcmUgbWl4aW5nIGNvbnN0YW50cyBnZW5lcmF0ZWQgb2ZmbGluZS5cbiAgLy8gVGhleSdyZSBub3QgcmVhbGx5ICdtYWdpYycsIHRoZXkganVzdCBoYXBwZW4gdG8gd29yayB3ZWxsLlxuICAvLyBjb25zdCBtID0gMHg1YmQxZTk5NTtcbiAgLy8gY29uc3QgciA9IDI0O1xuICAvLyBJbml0aWFsaXplIHRoZSBoYXNoXG4gIHZhciBoID0gMDsgLy8gTWl4IDQgYnl0ZXMgYXQgYSB0aW1lIGludG8gdGhlIGhhc2hcblxuICB2YXIgayxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcblxuICBmb3IgKDsgbGVuID49IDQ7ICsraSwgbGVuIC09IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gICAgayBePVxuICAgIC8qIGsgPj4+IHI6ICovXG4gICAgayA+Pj4gMjQ7XG4gICAgaCA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNikgXlxuICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIEhhbmRsZSB0aGUgbGFzdCBmZXcgYnl0ZXMgb2YgdGhlIGlucHV0IGFycmF5XG5cblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9XG4gICAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIERvIGEgZmV3IGZpbmFsIG1peGVzIG9mIHRoZSBoYXNoIHRvIGVuc3VyZSB0aGUgbGFzdCBmZXdcbiAgLy8gYnl0ZXMgYXJlIHdlbGwtaW5jb3Jwb3JhdGVkLlxuXG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9XG4gIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgcmV0dXJuICgoaCBeIGggPj4+IDE1KSA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtdXJtdXIyO1xuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyhhdHRyfGNvdW50ZXJzP3x1cmx8KCgocmVwZWF0aW5nLSk/KGxpbmVhcnxyYWRpYWwpKXxjb25pYyktZ3JhZGllbnQpXFwofChuby0pPyhvcGVufGNsb3NlKS1xdW90ZS87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG4gIHZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG4gIHZhciBoeXBoZW5hdGVkQ2FjaGUgPSB7fTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIGlmIChwcm9jZXNzZWQgIT09ICcnICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEgJiYgaHlwaGVuYXRlZENhY2hlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaHlwaGVuYXRlZENhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzaW5nIGtlYmFiLWNhc2UgZm9yIGNzcyBwcm9wZXJ0aWVzIGluIG9iamVjdHMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIFwiICsga2V5LnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoc3RyLCBfY2hhcikge1xuICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pICsgXCI/XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24udG9TdHJpbmcoKSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggQGVtb3Rpb24vYmFiZWwtcGx1Z2luLicpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAge1xuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5hbmltID09PSAxKSB7XG4gICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgbmFtZTogaW50ZXJwb2xhdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3R5bGVzOiBpbnRlcnBvbGF0aW9uLnN0eWxlcyxcbiAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRpb24ubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBpbnRlcnBvbGF0aW9uLm5leHQ7XG5cbiAgICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHRoaW5nIGV2ZXIgYnV0IHRoaXMgaXMgYSBwcmV0dHkgcmFyZSBjYXNlXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUgd2lsbCBiZSB2ZXJ5IGZldyBpdGVyYXRpb25zIG9mIHRoaXMgZ2VuZXJhbGx5XG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXh0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBuZXh0LnN0eWxlcyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3R5bGVzID0gaW50ZXJwb2xhdGlvbi5zdHlsZXMgKyBcIjtcIjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24ubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0eWxlcyArPSBpbnRlcnBvbGF0aW9uLm1hcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICBpZiAobWVyZ2VkUHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBwcmV2aW91c0N1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcyk7XG4gICAgICAgICAgY3Vyc29yID0gcHJldmlvdXNDdXJzb3I7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Z1bmN0aW9ucyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgaW4gY3NzIGNhbGxzIHdpbGwgYmUgc3RyaW5naWZpZWQuXFxuJyArICdJZiB5b3Ugd2FudCB0byBoYXZlIGEgY3NzIGNhbGwgYmFzZWQgb24gcHJvcHMsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNzcyBjYWxsIGxpa2UgdGhpc1xcbicgKyAnbGV0IGR5bmFtaWNTdHlsZSA9IChwcm9wcykgPT4gY3NzYGNvbG9yOiAke3Byb3BzLmNvbG9yfWBcXG4nICsgJ0l0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgd2l0aCBwcm9wcyBvciBpbnRlcnBvbGF0ZWQgaW4gYSBzdHlsZWQgY2FsbCBsaWtlIHRoaXNcXG4nICsgXCJsZXQgU29tZUNvbXBvbmVudCA9IHN0eWxlZCgnZGl2JylgJHtkeW5hbWljU3R5bGV9YFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gW107XG4gICAgICAgIHZhciByZXBsYWNlZCA9IGludGVycG9sYXRpb24ucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICB2YXIgZmFrZVZhck5hbWUgPSBcImFuaW1hdGlvblwiICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgICAgbWF0Y2hlZC5wdXNoKFwiY29uc3QgXCIgKyBmYWtlVmFyTmFtZSArIFwiID0ga2V5ZnJhbWVzYFwiICsgcDIucmVwbGFjZSgvXkBrZXlmcmFtZXMgYW5pbWF0aW9uLVxcdysvLCAnJykgKyBcImBcIik7XG4gICAgICAgICAgcmV0dXJuIFwiJHtcIiArIGZha2VWYXJOYW1lICsgXCJ9XCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2BrZXlmcmFtZXNgIG91dHB1dCBnb3QgaW50ZXJwb2xhdGVkIGludG8gcGxhaW4gc3RyaW5nLCBwbGVhc2Ugd3JhcCBpdCB3aXRoIGBjc3NgLlxcblxcbicgKyAnSW5zdGVhZCBvZiBkb2luZyB0aGlzOlxcblxcbicgKyBbXS5jb25jYXQobWF0Y2hlZCwgW1wiYFwiICsgcmVwbGFjZWQgKyBcImBcIl0pLmpvaW4oJ1xcbicpICsgJ1xcblxcbllvdSBzaG91bGQgd3JhcCBpdCB3aXRoIGBjc3NgIGxpa2UgdGhpczpcXG5cXG4nICsgKFwiY3NzYFwiICsgcmVwbGFjZWQgKyBcImBcIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICB9IC8vIGZpbmFsaXplIHN0cmluZyB2YWx1ZXMgKHJlZ3VsYXIgc3RyaW5ncyBhbmQgZnVuY3Rpb25zIGludGVycG9sYXRlZCBpbnRvIGNzcyBjYWxscylcblxuXG4gIGlmIChyZWdpc3RlcmVkID09IG51bGwpIHtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHZhciBjYWNoZWQgPSByZWdpc3RlcmVkW2ludGVycG9sYXRpb25dO1xuICByZXR1cm4gY2FjaGVkICE9PSB1bmRlZmluZWQgPyBjYWNoZWQgOiBpbnRlcnBvbGF0aW9uO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmopIHtcbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9ialtpXSkgKyBcIjtcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtfa2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWQgIT0gbnVsbCAmJiByZWdpc3RlcmVkW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbdmFsdWVdICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9rZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIEBlbW90aW9uL2JhYmVsLXBsdWdpbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWVbMF0gPT09ICdzdHJpbmcnICYmIChyZWdpc3RlcmVkID09IG51bGwgfHwgcmVnaXN0ZXJlZFt2YWx1ZVswXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdmFsdWUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlW19pXSkpIHtcbiAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlW19pXSkgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGludGVycG9sYXRlZCA9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHZhbHVlKTtcblxuICAgICAgICAgIHN3aXRjaCAoX2tleSkge1xuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIGludGVycG9sYXRlZCArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfa2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIGludGVycG9sYXRlZCArIFwifVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqKDt8JCkvZztcbnZhciBzb3VyY2VNYXBQYXR0ZXJuO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzb3VyY2VNYXBQYXR0ZXJuID0gL1xcL1xcKiNcXHNzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb25cXC9qc29uO1xcUytcXHMrXFwqXFwvL2c7XG59IC8vIHRoaXMgaXMgdGhlIGN1cnNvciBmb3Iga2V5ZnJhbWVzXG4vLyBrZXlmcmFtZXMgYXJlIHN0b3JlZCBvbiB0aGUgU2VyaWFsaXplZFN0eWxlcyBvYmplY3QgYXMgYSBsaW5rZWQgbGlzdFxuXG5cbnZhciBjdXJzb3I7XG52YXIgc2VyaWFsaXplU3R5bGVzID0gZnVuY3Rpb24gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIHJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiYgYXJnc1swXSAhPT0gbnVsbCAmJiBhcmdzWzBdLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFyZ3NbMF07XG4gIH1cblxuICB2YXIgc3RyaW5nTW9kZSA9IHRydWU7XG4gIHZhciBzdHlsZXMgPSAnJztcbiAgY3Vyc29yID0gdW5kZWZpbmVkO1xuICB2YXIgc3RyaW5ncyA9IGFyZ3NbMF07XG5cbiAgaWYgKHN0cmluZ3MgPT0gbnVsbCB8fCBzdHJpbmdzLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RyaW5nTW9kZSA9IGZhbHNlO1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBzdHJpbmdzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgIH1cblxuICAgIHN0eWxlcyArPSBzdHJpbmdzWzBdO1xuICB9IC8vIHdlIHN0YXJ0IGF0IDEgc2luY2Ugd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBmaXJzdCBhcmdcblxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBhcmdzW2ldKTtcblxuICAgIGlmIChzdHJpbmdNb2RlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcyArPSBzdHJpbmdzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzb3VyY2VNYXA7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBzdHlsZXMgPSBzdHlsZXMucmVwbGFjZShzb3VyY2VNYXBQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHNvdXJjZU1hcCA9IG1hdGNoO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9IC8vIHVzaW5nIGEgZ2xvYmFsIHJlZ2V4IHdpdGggLmV4ZWMgaXMgc3RhdGVmdWwgc28gbGFzdEluZGV4IGhhcyB0byBiZSByZXNldCBlYWNoIHRpbWVcblxuXG4gIGxhYmVsUGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICB2YXIgaWRlbnRpZmllck5hbWUgPSAnJztcbiAgdmFyIG1hdGNoOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViODA5YzJjZjI5NDk4MDBhMGY2MWZiNVxuXG4gIHdoaWxlICgobWF0Y2ggPSBsYWJlbFBhdHRlcm4uZXhlYyhzdHlsZXMpKSAhPT0gbnVsbCkge1xuICAgIGlkZW50aWZpZXJOYW1lICs9ICctJyArIC8vICRGbG93Rml4TWUgd2Uga25vdyBpdCdzIG5vdCBudWxsXG4gICAgbWF0Y2hbMV07XG4gIH1cblxuICB2YXIgbmFtZSA9IGhhc2hTdHJpbmcoc3R5bGVzKSArIGlkZW50aWZpZXJOYW1lO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZSBTZXJpYWxpemVkU3R5bGVzIHR5cGUgZG9lc24ndCBoYXZlIHRvU3RyaW5nIHByb3BlcnR5IChhbmQgd2UgZG9uJ3Qgd2FudCB0byBhZGQgaXQpXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgIG1hcDogc291cmNlTWFwLFxuICAgICAgbmV4dDogY3Vyc29yLFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJZb3UgaGF2ZSB0cmllZCB0byBzdHJpbmdpZnkgb2JqZWN0IHJldHVybmVkIGZyb20gYGNzc2AgZnVuY3Rpb24uIEl0IGlzbid0IHN1cHBvc2VkIHRvIGJlIHVzZWQgZGlyZWN0bHkgKGUuZy4gYXMgdmFsdWUgb2YgdGhlIGBjbGFzc05hbWVgIHByb3ApLCBidXQgcmF0aGVyIGhhbmRlZCB0byBlbW90aW9uIHNvIGl0IGNhbiBoYW5kbGUgaXQgKGUuZy4gYXMgdmFsdWUgb2YgYGNzc2AgcHJvcCkuXCI7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICBuZXh0OiBjdXJzb3JcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9O1xuIiwiLypcblxuQmFzZWQgb2ZmIGdsYW1vcidzIFN0eWxlU2hlZXQsIHRoYW5rcyBTdW5pbCDinaTvuI9cblxuaGlnaCBwZXJmb3JtYW5jZSBTdHlsZVNoZWV0IGZvciBjc3MtaW4tanMgc3lzdGVtc1xuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXNcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG5cbi8vIHVzYWdlXG5cbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCdcblxubGV0IHN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCh7IGtleTogJycsIGNvbnRhaW5lcjogZG9jdW1lbnQuaGVhZCB9KVxuXG5zdHlsZVNoZWV0Lmluc2VydCgnI2JveCB7IGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgfScpXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0XG5cbnN0eWxlU2hlZXQuZmx1c2goKVxuLSBlbXB0aWVzIHRoZSBzdHlsZXNoZWV0IG9mIGFsbCBpdHMgY29udGVudHNcblxuKi9cbi8vICRGbG93Rml4TWVcbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiB0YWcuc2hlZXQ7XG4gIH0gLy8gdGhpcyB3ZWlyZG5lc3MgYnJvdWdodCB0byB5b3UgYnkgZmlyZWZveFxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBvcHRpb25zLmtleSk7XG5cbiAgaWYgKG9wdGlvbnMubm9uY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgb3B0aW9ucy5ub25jZSk7XG4gIH1cblxuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcil7Ly50ZXN0KHJ1bGUpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZXJlIHdhcyBhIHByb2JsZW0gaW5zZXJ0aW5nIHRoZSBmb2xsb3dpbmcgcnVsZTogXFxcIlwiICsgcnVsZSArIFwiXFxcIlwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZSAmJiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgIH0pO1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZXhwb3J0IHsgU3R5bGVTaGVldCB9O1xuIiwidmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWVzKSB7XG4gIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgY2xhc3NOYW1lcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGlmIChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVnaXN0ZXJlZFN0eWxlcy5wdXNoKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSArIFwiO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByYXdDbGFzc05hbWU7XG59XG52YXIgaW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxuXG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY3VycmVudCA9IHNlcmlhbGl6ZWQ7XG5cbiAgICBkbyB7XG4gICAgICB2YXIgbWF5YmVTdHlsZXMgPSBjYWNoZS5pbnNlcnQoc2VyaWFsaXplZCA9PT0gY3VycmVudCA/IFwiLlwiICsgY2xhc3NOYW1lIDogJycsIGN1cnJlbnQsIGNhY2hlLnNoZWV0LCB0cnVlKTtcblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuICB9XG59O1xuXG5leHBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpIHtcbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKHNsb3RzKS5mb3JFYWNoKCAvLyBgT2JqZXQua2V5cyhzbG90cylgIGNhbid0IGJlIHdpZGVyIHRoYW4gYFRgIGJlY2F1c2Ugd2UgaW5mZXIgYFRgIGZyb20gYHNsb3RzYC5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC8xMjI1MyNpc3N1ZWNvbW1lbnQtMjYzMTMyMjA4XG4gIHNsb3QgPT4ge1xuICAgIG91dHB1dFtzbG90XSA9IHNsb3RzW3Nsb3RdLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKGNsYXNzZXMgJiYgY2xhc3Nlc1trZXldKSB7XG4gICAgICAgICAgYWNjLnB1c2goY2xhc3Nlc1trZXldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFjYy5wdXNoKGdldFV0aWxpdHlDbGFzcyhrZXkpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSkuam9pbignICcpO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJjb25zdCBkZWZhdWx0R2VuZXJhdG9yID0gY29tcG9uZW50TmFtZSA9PiBjb21wb25lbnROYW1lO1xuXG5jb25zdCBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IgPSAoKSA9PiB7XG4gIGxldCBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gIHJldHVybiB7XG4gICAgY29uZmlndXJlKGdlbmVyYXRvcikge1xuICAgICAgZ2VuZXJhdGUgPSBnZW5lcmF0b3I7XG4gICAgfSxcblxuICAgIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZShjb21wb25lbnROYW1lKTtcbiAgICB9LFxuXG4gICAgcmVzZXQoKSB7XG4gICAgICBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gICAgfVxuXG4gIH07XG59O1xuXG5jb25zdCBDbGFzc05hbWVHZW5lcmF0b3IgPSBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IENsYXNzTmFtZUdlbmVyYXRvcjsiLCJpbXBvcnQgQ2xhc3NOYW1lR2VuZXJhdG9yIGZyb20gJy4vQ2xhc3NOYW1lR2VuZXJhdG9yJztcbmNvbnN0IGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmcgPSB7XG4gIGFjdGl2ZTogJ011aS1hY3RpdmUnLFxuICBjaGVja2VkOiAnTXVpLWNoZWNrZWQnLFxuICBjb21wbGV0ZWQ6ICdNdWktY29tcGxldGVkJyxcbiAgZGlzYWJsZWQ6ICdNdWktZGlzYWJsZWQnLFxuICBlcnJvcjogJ011aS1lcnJvcicsXG4gIGV4cGFuZGVkOiAnTXVpLWV4cGFuZGVkJyxcbiAgZm9jdXNlZDogJ011aS1mb2N1c2VkJyxcbiAgZm9jdXNWaXNpYmxlOiAnTXVpLWZvY3VzVmlzaWJsZScsXG4gIHJlcXVpcmVkOiAnTXVpLXJlcXVpcmVkJyxcbiAgc2VsZWN0ZWQ6ICdNdWktc2VsZWN0ZWQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCkge1xuICBjb25zdCBnbG9iYWxTdGF0ZUNsYXNzID0gZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZ1tzbG90XTtcbiAgcmV0dXJuIGdsb2JhbFN0YXRlQ2xhc3MgfHwgYCR7Q2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlKGNvbXBvbmVudE5hbWUpfS0ke3Nsb3R9YDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyhjb21wb25lbnROYW1lLCBzbG90cykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICByZXN1bHRbc2xvdF0gPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE4IDExdjJoNHYtMmgtNHptLTIgNi42MWMuOTYuNzEgMi4yMSAxLjY1IDMuMiAyLjM5LjQtLjUzLjgtMS4wNyAxLjItMS42LS45OS0uNzQtMi4yNC0xLjY4LTMuMi0yLjQtLjQuNTQtLjggMS4wOC0xLjIgMS42MXpNMjAuNCA1LjZjLS40LS41My0uOC0xLjA3LTEuMi0xLjYtLjk5Ljc0LTIuMjQgMS42OC0zLjIgMi40LjQuNTMuOCAxLjA3IDEuMiAxLjYuOTYtLjcyIDIuMjEtMS42NSAzLjItMi40ek00IDljLTEuMSAwLTIgLjktMiAydjJjMCAxLjEuOSAyIDIgMmgxdjRoMnYtNGgxbDUgM1Y2TDggOUg0em0xMS41IDNjMC0xLjMzLS41OC0yLjUzLTEuNS0zLjM1djYuNjljLjkyLS44MSAxLjUtMi4wMSAxLjUtMy4zNHpcIlxufSksICdDYW1wYWlnbicpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMjEuOTkgNGMwLTEuMS0uODktMi0xLjk5LTJINGMtMS4xIDAtMiAuOS0yIDJ2MTJjMCAxLjEuOSAyIDIgMmgxNGw0IDQtLjAxLTE4ek0xOCAxNEg2di0yaDEydjJ6bTAtM0g2VjloMTJ2MnptMC0zSDZWNmgxMnYyelwiXG59KSwgJ0NvbW1lbnQnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTEgMTVoLTJ2LTJoMnYyem0wLTRoLTJWN2gydjZ6XCJcbn0pLCAnRXJyb3InKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xuXG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE3IDEwSDd2MmgxMHYtMnptMi03aC0xVjFoLTJ2Mkg4VjFINnYySDVjLTEuMTEgMC0xLjk5LjktMS45OSAyTDMgMTljMCAxLjEuODkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnptMCAxNkg1VjhoMTR2MTF6bS01LTVIN3YyaDd2LTJ6XCJcbn0pLCAnRXZlbnROb3RlJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xMS4wNyAxMi44NWMuNzctMS4zOSAyLjI1LTIuMjEgMy4xMS0zLjQ0LjkxLTEuMjkuNC0zLjctMi4xOC0zLjctMS42OSAwLTIuNTIgMS4yOC0yLjg3IDIuMzRMNi41NCA2Ljk2QzcuMjUgNC44MyA5LjE4IDMgMTEuOTkgM2MyLjM1IDAgMy45NiAxLjA3IDQuNzggMi40MS43IDEuMTUgMS4xMSAzLjMuMDMgNC45LTEuMiAxLjc3LTIuMzUgMi4zMS0yLjk3IDMuNDUtLjI1LjQ2LS4zNS43Ni0uMzUgMi4yNGgtMi44OWMtLjAxLS43OC0uMTMtMi4wNS40OC0zLjE1ek0xNCAyMGMwIDEuMS0uOSAyLTIgMnMtMi0uOS0yLTIgLjktMiAyLTIgMiAuOSAyIDJ6XCJcbn0pLCAnUXVlc3Rpb25NYXJrJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuY3JlYXRlU3ZnSWNvbjtcbiAgfVxufSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG11aS9tYXRlcmlhbC91dGlsc1wiKTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBiPTYwMTAzLGM9NjAxMDYsZD02MDEwNyxlPTYwMTA4LGY9NjAxMTQsZz02MDEwOSxoPTYwMTEwLGs9NjAxMTIsbD02MDExMyxtPTYwMTIwLG49NjAxMTUscD02MDExNixxPTYwMTIxLHI9NjAxMjIsdT02MDExNyx2PTYwMTI5LHc9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgeD1TeW1ib2wuZm9yO2I9eChcInJlYWN0LmVsZW1lbnRcIik7Yz14KFwicmVhY3QucG9ydGFsXCIpO2Q9eChcInJlYWN0LmZyYWdtZW50XCIpO2U9eChcInJlYWN0LnN0cmljdF9tb2RlXCIpO2Y9eChcInJlYWN0LnByb2ZpbGVyXCIpO2c9eChcInJlYWN0LnByb3ZpZGVyXCIpO2g9eChcInJlYWN0LmNvbnRleHRcIik7az14KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7bD14KFwicmVhY3Quc3VzcGVuc2VcIik7bT14KFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtuPXgoXCJyZWFjdC5tZW1vXCIpO3A9eChcInJlYWN0LmxhenlcIik7cT14KFwicmVhY3QuYmxvY2tcIik7cj14KFwicmVhY3Quc2VydmVyLmJsb2NrXCIpO3U9eChcInJlYWN0LmZ1bmRhbWVudGFsXCIpO3Y9eChcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7dz14KFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbmZ1bmN0aW9uIHkoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHQ9YS4kJHR5cGVvZjtzd2l0Y2godCl7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIGw6Y2FzZSBtOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGg6Y2FzZSBrOmNhc2UgcDpjYXNlIG46Y2FzZSBnOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHR9fWNhc2UgYzpyZXR1cm4gdH19fXZhciB6PWcsQT1iLEI9ayxDPWQsRD1wLEU9bixGPWMsRz1mLEg9ZSxJPWw7ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aDtleHBvcnRzLkNvbnRleHRQcm92aWRlcj16O2V4cG9ydHMuRWxlbWVudD1BO2V4cG9ydHMuRm9yd2FyZFJlZj1CO2V4cG9ydHMuRnJhZ21lbnQ9QztleHBvcnRzLkxhenk9RDtleHBvcnRzLk1lbW89RTtleHBvcnRzLlBvcnRhbD1GO2V4cG9ydHMuUHJvZmlsZXI9RztleHBvcnRzLlN0cmljdE1vZGU9SDtcbmV4cG9ydHMuU3VzcGVuc2U9STtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09aH07ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWd9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ifTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWt9O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWR9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09cH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ufTtcbmV4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1jfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1mfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWV9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWx9O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1kfHxhPT09Znx8YT09PXZ8fGE9PT1lfHxhPT09bHx8YT09PW18fGE9PT13fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXB8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09dXx8YS4kJHR5cGVvZj09PXF8fGFbMF09PT1yKT8hMDohMX07XG5leHBvcnRzLnR5cGVPZj15O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJjb25zdCBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwiY29uc3QgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNmNWY1ZjUnLFxuICBBMjAwOiAnI2VlZWVlZScsXG4gIEE0MDA6ICcjYmRiZGJkJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JleTsiLCJjb25zdCBwdXJwbGUgPSB7XG4gIDUwOiAnI2YzZTVmNScsXG4gIDEwMDogJyNlMWJlZTcnLFxuICAyMDA6ICcjY2U5M2Q4JyxcbiAgMzAwOiAnI2JhNjhjOCcsXG4gIDQwMDogJyNhYjQ3YmMnLFxuICA1MDA6ICcjOWMyN2IwJyxcbiAgNjAwOiAnIzhlMjRhYScsXG4gIDcwMDogJyM3YjFmYTInLFxuICA4MDA6ICcjNmExYjlhJyxcbiAgOTAwOiAnIzRhMTQ4YycsXG4gIEExMDA6ICcjZWE4MGZjJyxcbiAgQTIwMDogJyNlMDQwZmInLFxuICBBNDAwOiAnI2Q1MDBmOScsXG4gIEE3MDA6ICcjYWEwMGZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHB1cnBsZTsiLCJjb25zdCByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJjb25zdCBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IG9yYW5nZTsiLCJjb25zdCBibHVlID0ge1xuICA1MDogJyNlM2YyZmQnLFxuICAxMDA6ICcjYmJkZWZiJyxcbiAgMjAwOiAnIzkwY2FmOScsXG4gIDMwMDogJyM2NGI1ZjYnLFxuICA0MDA6ICcjNDJhNWY1JyxcbiAgNTAwOiAnIzIxOTZmMycsXG4gIDYwMDogJyMxZTg4ZTUnLFxuICA3MDA6ICcjMTk3NmQyJyxcbiAgODAwOiAnIzE1NjVjMCcsXG4gIDkwMDogJyMwZDQ3YTEnLFxuICBBMTAwOiAnIzgyYjFmZicsXG4gIEEyMDA6ICcjNDQ4YWZmJyxcbiAgQTQwMDogJyMyOTc5ZmYnLFxuICBBNzAwOiAnIzI5NjJmZidcbn07XG5leHBvcnQgZGVmYXVsdCBibHVlOyIsImNvbnN0IGxpZ2h0Qmx1ZSA9IHtcbiAgNTA6ICcjZTFmNWZlJyxcbiAgMTAwOiAnI2IzZTVmYycsXG4gIDIwMDogJyM4MWQ0ZmEnLFxuICAzMDA6ICcjNGZjM2Y3JyxcbiAgNDAwOiAnIzI5YjZmNicsXG4gIDUwMDogJyMwM2E5ZjQnLFxuICA2MDA6ICcjMDM5YmU1JyxcbiAgNzAwOiAnIzAyODhkMScsXG4gIDgwMDogJyMwMjc3YmQnLFxuICA5MDA6ICcjMDE1NzliJyxcbiAgQTEwMDogJyM4MGQ4ZmYnLFxuICBBMjAwOiAnIzQwYzRmZicsXG4gIEE0MDA6ICcjMDBiMGZmJyxcbiAgQTcwMDogJyMwMDkxZWEnXG59O1xuZXhwb3J0IGRlZmF1bHQgbGlnaHRCbHVlOyIsImNvbnN0IGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibW9kZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGRhcmtlbiwgZ2V0Q29udHJhc3RSYXRpbywgbGlnaHRlbiB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgcHVycGxlIGZyb20gJy4uL2NvbG9ycy9wdXJwbGUnO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBvcmFuZ2UgZnJvbSAnLi4vY29sb3JzL29yYW5nZSc7XG5pbXBvcnQgYmx1ZSBmcm9tICcuLi9jb2xvcnMvYmx1ZSc7XG5pbXBvcnQgbGlnaHRCbHVlIGZyb20gJy4uL2NvbG9ycy9saWdodEJsdWUnO1xuaW1wb3J0IGdyZWVuIGZyb20gJy4uL2NvbG9ycy9ncmVlbic7XG5leHBvcnQgY29uc3QgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNiknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogY29tbW9uLndoaXRlXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogY29tbW9uLndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiAnIzEyMTIxMicsXG4gICAgZGVmYXVsdDogJyMxMjEyMTInXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogY29tbW9uLndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjE2LFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4yNFxuICB9XG59O1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgY29uc3QgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcblxuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRQcmltYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogYmx1ZVsyMDBdLFxuICAgICAgbGlnaHQ6IGJsdWVbNTBdLFxuICAgICAgZGFyazogYmx1ZVs0MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogYmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBibHVlWzQwMF0sXG4gICAgZGFyazogYmx1ZVs4MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBwdXJwbGVbMjAwXSxcbiAgICAgIGxpZ2h0OiBwdXJwbGVbNTBdLFxuICAgICAgZGFyazogcHVycGxlWzQwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBwdXJwbGVbNTAwXSxcbiAgICBsaWdodDogcHVycGxlWzMwMF0sXG4gICAgZGFyazogcHVycGxlWzcwMF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEVycm9yKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcmVkWzUwMF0sXG4gICAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgICBkYXJrOiByZWRbNzAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46IHJlZFs3MDBdLFxuICAgIGxpZ2h0OiByZWRbNDAwXSxcbiAgICBkYXJrOiByZWRbODAwXVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0SW5mbyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGxpZ2h0Qmx1ZVs0MDBdLFxuICAgICAgbGlnaHQ6IGxpZ2h0Qmx1ZVszMDBdLFxuICAgICAgZGFyazogbGlnaHRCbHVlWzcwMF1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBsaWdodEJsdWVbNzAwXSxcbiAgICBsaWdodDogbGlnaHRCbHVlWzUwMF0sXG4gICAgZGFyazogbGlnaHRCbHVlWzkwMF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBncmVlbls0MDBdLFxuICAgICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgICBkYXJrOiBncmVlbls3MDBdXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWFpbjogZ3JlZW5bODAwXSxcbiAgICBsaWdodDogZ3JlZW5bNTAwXSxcbiAgICBkYXJrOiBncmVlbls5MDBdXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRXYXJuaW5nKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogb3JhbmdlWzQwMF0sXG4gICAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1haW46ICcjZWQ2YzAyJyxcbiAgICAvLyBjbG9zZXN0IHRvIG9yYW5nZVs4MDBdIHRoYXQgcGFzcyAzOjEuXG4gICAgbGlnaHQ6IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs5MDBdXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICBjb25zdCB7XG4gICAgbW9kZSA9ICdsaWdodCcsXG4gICAgY29udHJhc3RUaHJlc2hvbGQgPSAzLFxuICAgIHRvbmFsT2Zmc2V0ID0gMC4yXG4gIH0gPSBwYWxldHRlLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhbGV0dGUsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSB8fCBnZXREZWZhdWx0UHJpbWFyeShtb2RlKTtcbiAgY29uc3Qgc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnkgfHwgZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlKTtcbiAgY29uc3QgZXJyb3IgPSBwYWxldHRlLmVycm9yIHx8IGdldERlZmF1bHRFcnJvcihtb2RlKTtcbiAgY29uc3QgaW5mbyA9IHBhbGV0dGUuaW5mbyB8fCBnZXREZWZhdWx0SW5mbyhtb2RlKTtcbiAgY29uc3Qgc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyB8fCBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlKTtcbiAgY29uc3Qgd2FybmluZyA9IHBhbGV0dGUud2FybmluZyB8fCBnZXREZWZhdWx0V2FybmluZyhtb2RlKTsgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuXG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBjb250cmFzdCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgY29udHJhc3RUZXh0KTtcblxuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgJHtjb250cmFzdH06MSBmb3IgJHtjb250cmFzdFRleHR9IG9uICR7YmFja2dyb3VuZH1gLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgY29uc3QgYXVnbWVudENvbG9yID0gKHtcbiAgICBjb2xvcixcbiAgICBuYW1lLFxuICAgIG1haW5TaGFkZSA9IDUwMCxcbiAgICBsaWdodFNoYWRlID0gMzAwLFxuICAgIGRhcmtTaGFkZSA9IDcwMFxuICB9KSA9PiB7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmICghY29sb3IuaGFzT3duUHJvcGVydHkoJ21haW4nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5UaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBcXGBtYWluXFxgIHByb3BlcnR5IG9yIGEgXFxgJHttYWluU2hhZGV9XFxgIHByb3BlcnR5LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDExLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIG1haW5TaGFkZSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuXFxgY29sb3IubWFpblxcYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBcXGAke0pTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pfVxcYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cblxuRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/XG5cbmltcG9ydCB7IGdyZWVuIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvY29sb3JzXCI7XG5cbmNvbnN0IHRoZW1lMSA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiBncmVlbixcbn0gfSk7XG5cbmNvbnN0IHRoZW1lMiA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcbn0gfSk7YCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTIsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG5cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuXG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG5cbiAgY29uc3QgbW9kZXMgPSB7XG4gICAgZGFyayxcbiAgICBsaWdodFxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFtb2Rlc1ttb2RlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgcGFsZXR0ZSBtb2RlIFxcYCR7bW9kZX1cXGAgaXMgbm90IHN1cHBvcnRlZC5gKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBwYWxldHRlT3V0cHV0ID0gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb24sXG4gICAgLy8gVGhlIHBhbGV0dGUgbW9kZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgbW9kZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBwcmltYXJ5LFxuICAgICAgbmFtZTogJ3ByaW1hcnknXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHNlY29uZGFyeSxcbiAgICAgIG5hbWU6ICdzZWNvbmRhcnknLFxuICAgICAgbWFpblNoYWRlOiAnQTQwMCcsXG4gICAgICBsaWdodFNoYWRlOiAnQTIwMCcsXG4gICAgICBkYXJrU2hhZGU6ICdBNzAwJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogZXJyb3IsXG4gICAgICBuYW1lOiAnZXJyb3InXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiB3YXJuaW5nLFxuICAgICAgbmFtZTogJ3dhcm5pbmcnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogaW5mbyxcbiAgICAgIG5hbWU6ICdpbmZvJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbiB0aGF0IHVzZXIgdHJpZ2dlcmVkLlxuICAgIHN1Y2Nlc3M6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc3VjY2VzcyxcbiAgICAgIG5hbWU6ICdzdWNjZXNzJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXRcbiAgfSwgbW9kZXNbbW9kZV0pLCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJmb250V2VpZ2h0Qm9sZFwiLCBcImh0bWxGb250U2l6ZVwiLCBcImFsbFZhcmlhbnRzXCIsIFwicHhUb1JlbVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5cbmNvbnN0IGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbmNvbnN0IGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgY29uc3QgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAgICAgIHtcbiAgICBmb250RmFtaWx5ID0gZGVmYXVsdEZvbnRGYW1pbHksXG4gICAgLy8gVGhlIGRlZmF1bHQgZm9udCBzaXplIG9mIHRoZSBNYXRlcmlhbCBTcGVjaWZpY2F0aW9uLlxuICAgIGZvbnRTaXplID0gMTQsXG4gICAgLy8gcHhcbiAgICBmb250V2VpZ2h0TGlnaHQgPSAzMDAsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIgPSA0MDAsXG4gICAgZm9udFdlaWdodE1lZGl1bSA9IDUwMCxcbiAgICBmb250V2VpZ2h0Qm9sZCA9IDcwMCxcbiAgICAvLyBUZWxsIE1VSSB3aGF0J3MgdGhlIGZvbnQtc2l6ZSBvbiB0aGUgaHRtbCBlbGVtZW50LlxuICAgIC8vIDE2cHggaXMgdGhlIGRlZmF1bHQgZm9udC1zaXplIHVzZWQgYnkgYnJvd3NlcnMuXG4gICAgaHRtbEZvbnRTaXplID0gMTYsXG4gICAgLy8gQXBwbHkgdGhlIENTUyBwcm9wZXJ0aWVzIHRvIGFsbCB0aGUgdmFyaWFudHMuXG4gICAgYWxsVmFyaWFudHMsXG4gICAgcHhUb1JlbTogcHhUb1JlbTJcbiAgfSA9IF9yZWYsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuXG4gIGNvbnN0IHB4VG9SZW0gPSBweFRvUmVtMiB8fCAoc2l6ZSA9PiBgJHtzaXplIC8gaHRtbEZvbnRTaXplICogY29lZn1yZW1gKTtcblxuICBjb25zdCBidWlsZFZhcmlhbnQgPSAoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSA9PiBfZXh0ZW5kcyh7XG4gICAgZm9udEZhbWlseSxcbiAgICBmb250V2VpZ2h0LFxuICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgIGxpbmVIZWlnaHRcbiAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgbGV0dGVyU3BhY2luZzogYCR7cm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpfWVtYFxuICB9IDoge30sIGNhc2luZywgYWxsVmFyaWFudHMpO1xuXG4gIGNvbnN0IHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW0sXG4gICAgZm9udEZhbWlseSxcbiAgICBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZFxuICB9LCB2YXJpYW50cyksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuXG4gIH0pO1xufSIsImNvbnN0IHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbmNvbnN0IHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG5jb25zdCBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyguLi5weCkge1xuICByZXR1cm4gW2Ake3B4WzBdfXB4ICR7cHhbMV19cHggJHtweFsyXX1weCAke3B4WzNdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlVbWJyYU9wYWNpdHl9KWAsIGAke3B4WzRdfXB4ICR7cHhbNV19cHggJHtweFs2XX1weCAke3B4WzddfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHl9KWAsIGAke3B4WzhdfXB4ICR7cHhbOV19cHggJHtweFsxMF19cHggJHtweFsxMV19cHggcmdiYSgwLDAsMCwke3NoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5fSlgXS5qb2luKCcsJyk7XG59IC8vIFZhbHVlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYmU4NzQ3Zjk0NTc0NjY5Y2I1ZTdhZGQxYTdjNTRmYTQxYTg5Y2VjNy9wYWNrYWdlcy9tZGMtZWxldmF0aW9uL192YXJpYWJsZXMuc2Nzc1xuXG5cbmNvbnN0IHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwiLy8gV2UgbmVlZCB0byBjZW50cmFsaXplIHRoZSB6SW5kZXggZGVmaW5pdGlvbnMgYXMgdGhleSB3b3JrXG4vLyBsaWtlIGdsb2JhbCB2YWx1ZXMgaW4gdGhlIGJyb3dzZXIuXG5jb25zdCB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJzcGFjaW5nXCIsIFwicGFsZXR0ZVwiLCBcInRyYW5zaXRpb25zXCIsIFwidHlwb2dyYXBoeVwiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSBhcyBzeXN0ZW1DcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25zIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbnMnO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuL3pJbmRleCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRoZW1lKG9wdGlvbnMgPSB7fSwgLi4uYXJncykge1xuICBjb25zdCB7XG4gICAgbWl4aW5zOiBtaXhpbnNJbnB1dCA9IHt9LFxuICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9uc0lucHV0ID0ge30sXG4gICAgdHlwb2dyYXBoeTogdHlwb2dyYXBoeUlucHV0ID0ge31cbiAgfSA9IG9wdGlvbnMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICBjb25zdCBzeXN0ZW1UaGVtZSA9IHN5c3RlbUNyZWF0ZVRoZW1lKG9wdGlvbnMpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoc3lzdGVtVGhlbWUsIHtcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhzeXN0ZW1UaGVtZS5icmVha3BvaW50cywgc3lzdGVtVGhlbWUuc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIHBhbGV0dGUsXG4gICAgLy8gRG9uJ3QgdXNlIFsuLi5zaGFkb3dzXSB1bnRpbCB5b3UndmUgdmVyaWZpZWQgaXRzIHRyYW5zcGlsZWQgY29kZSBpcyBub3QgaW52b2tpbmcgdGhlIGl0ZXJhdG9yIHByb3RvY29sLlxuICAgIHNoYWRvd3M6IHNoYWRvd3Muc2xpY2UoKSxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgdHJhbnNpdGlvbnM6IGNyZWF0ZVRyYW5zaXRpb25zKHRyYW5zaXRpb25zSW5wdXQpLFxuICAgIHpJbmRleDogX2V4dGVuZHMoe30sIHpJbmRleClcbiAgfSk7XG4gIG11aVRoZW1lID0gZGVlcG1lcmdlKG11aVRoZW1lLCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc3Qgc3RhdGVDbGFzc2VzID0gWydhY3RpdmUnLCAnY2hlY2tlZCcsICdjb21wbGV0ZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXhwYW5kZWQnLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnc2VsZWN0ZWQnXTtcblxuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUsIGNvbXBvbmVudCkgPT4ge1xuICAgICAgbGV0IGtleTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcblxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVba2V5XTtcblxuICAgICAgICBpZiAoc3RhdGVDbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGVDbGFzcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzKCcnLCBrZXkpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYCR7Y29tcG9uZW50fVxcYCBjb21wb25lbnQgaW5jcmVhc2VzIGAgKyBgdGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgXFxgJHtrZXl9XFxgIGludGVybmFsIHN0YXRlLmAsICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgYEluc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJyYuJHtzdGF0ZUNsYXNzfScgc3ludGF4OmAsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgICAgIFtgJi4ke3N0YXRlQ2xhc3N9YF06IGNoaWxkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbXVpLmNvbS9yL3N0YXRlLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfSAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cblxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgT2JqZWN0LmtleXMobXVpVGhlbWUuY29tcG9uZW50cykuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBtdWlUaGVtZS5jb21wb25lbnRzW2NvbXBvbmVudF0uc3R5bGVPdmVycmlkZXM7XG5cbiAgICAgIGlmIChzdHlsZU92ZXJyaWRlcyAmJiBjb21wb25lbnQuaW5kZXhPZignTXVpJykgPT09IDApIHtcbiAgICAgICAgdHJhdmVyc2Uoc3R5bGVPdmVycmlkZXMsIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbXVpVGhlbWU7XG59XG5cbmxldCB3YXJuZWRPbmNlID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghd2FybmVkT25jZSkge1xuICAgICAgd2FybmVkT25jZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiB0aGUgY3JlYXRlTXVpVGhlbWUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgdG8gY3JlYXRlVGhlbWUuJywgJycsIFwiWW91IHNob3VsZCB1c2UgYGltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVRoZW1lKC4uLmFyZ3MpO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGlucykge1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIG1pbkhlaWdodDogNTYsXG4gICAgICBbYCR7YnJlYWtwb2ludHMudXAoJ3hzJyl9IGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlgXToge1xuICAgICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgICB9LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICB9XG4gICAgfVxuICB9LCBtaXhpbnMpO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdO1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG5leHBvcnQgY29uc3QgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTsgLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5cbmV4cG9ydCBjb25zdCBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcblxuZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBgJHtNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyl9bXNgO1xufVxuXG5mdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gIGlmICghaGVpZ2h0KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBjb25zdCBjb25zdGFudCA9IGhlaWdodCAvIDM2OyAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcblxuICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogY29uc3RhbnQgKiogMC4yNSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25zKGlucHV0VHJhbnNpdGlvbnMpIHtcbiAgY29uc3QgbWVyZ2VkRWFzaW5nID0gX2V4dGVuZHMoe30sIGVhc2luZywgaW5wdXRUcmFuc2l0aW9ucy5lYXNpbmcpO1xuXG4gIGNvbnN0IG1lcmdlZER1cmF0aW9uID0gX2V4dGVuZHMoe30sIGR1cmF0aW9uLCBpbnB1dFRyYW5zaXRpb25zLmR1cmF0aW9uKTtcblxuICBjb25zdCBjcmVhdGUgPSAocHJvcHMgPSBbJ2FsbCddLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb25PcHRpb24gPSBtZXJnZWREdXJhdGlvbi5zdGFuZGFyZCxcbiAgICAgIGVhc2luZzogZWFzaW5nT3B0aW9uID0gbWVyZ2VkRWFzaW5nLmVhc2VJbk91dCxcbiAgICAgIGRlbGF5ID0gMFxuICAgIH0gPSBvcHRpb25zLFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBpc1N0cmluZyA9IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7IC8vIElFMTEgc3VwcG9ydCwgcmVwbGFjZSB3aXRoIE51bWJlci5pc05hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG5cbiAgICAgIGNvbnN0IGlzTnVtYmVyID0gdmFsdWUgPT4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcblxuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pICYmICFpc1N0cmluZyhkdXJhdGlvbk9wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBBcmd1bWVudCBcImR1cmF0aW9uXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgJHtkdXJhdGlvbk9wdGlvbn0uYCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbJHtPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpfV0uYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGFuaW1hdGVkUHJvcCA9PiBgJHthbmltYXRlZFByb3B9ICR7dHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pfSAke2Vhc2luZ09wdGlvbn0gJHt0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSl9YCkuam9pbignLCcpO1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ2V0QXV0b0hlaWdodER1cmF0aW9uLFxuICAgIGNyZWF0ZVxuICB9LCBpbnB1dFRyYW5zaXRpb25zLCB7XG4gICAgZWFzaW5nOiBtZXJnZWRFYXNpbmcsXG4gICAgZHVyYXRpb246IG1lcmdlZER1cmF0aW9uXG4gIH0pO1xufSIsImltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YXJpYW50XCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5cbmZ1bmN0aW9uIGlzRW1wdHkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09PSAwO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgc3RyaW5nIGNsYXNzS2V5IGJhc2VkIG9uIHRoZSBwcm9wZXJ0aWVzIHByb3ZpZGVkLiBJdCBzdGFydHMgd2l0aCB0aGVcbiAqIHZhcmlhbnQgaWYgZGVmaW5lZCwgYW5kIHRoZW4gaXQgYXBwZW5kcyBhbGwgb3RoZXIgcHJvcGVydGllcyBpbiBhbHBoYWJldGljYWwgb3JkZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSB0aGUgcHJvcGVydGllcyBmb3Igd2hpY2ggdGhlIGNsYXNzS2V5IHNob3VsZCBiZSBjcmVhdGVkLlxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcHNUb0NsYXNzS2V5KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICB2YXJpYW50XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBsZXQgY2xhc3NLZXkgPSB2YXJpYW50IHx8ICcnO1xuICBPYmplY3Qua2V5cyhvdGhlcikuc29ydCgpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY29sb3InKSB7XG4gICAgICBjbGFzc0tleSArPSBpc0VtcHR5KGNsYXNzS2V5KSA/IHByb3BzW2tleV0gOiBjYXBpdGFsaXplKHByb3BzW2tleV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGFzc0tleSArPSBgJHtpc0VtcHR5KGNsYXNzS2V5KSA/IGtleSA6IGNhcGl0YWxpemUoa2V5KX0ke2NhcGl0YWxpemUocHJvcHNba2V5XS50b1N0cmluZygpKX1gO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGFzc0tleTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibmFtZVwiLCBcInNsb3RcIiwgXCJza2lwVmFyaWFudHNSZXNvbHZlclwiLCBcInNraXBTeFwiLCBcIm92ZXJyaWRlc1Jlc29sdmVyXCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcInRoZW1lXCJdLFxuICAgICAgX2V4Y2x1ZGVkMyA9IFtcInRoZW1lXCJdO1xuaW1wb3J0IHN0eWxlZEVuZ2luZVN0eWxlZCBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3ggZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHByb3BzVG9DbGFzc0tleSBmcm9tICcuL3Byb3BzVG9DbGFzc0tleSc7XG5cbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuY29uc3QgZ2V0U3R5bGVPdmVycmlkZXMgPSAobmFtZSwgdGhlbWUpID0+IHtcbiAgaWYgKHRoZW1lLmNvbXBvbmVudHMgJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXSAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uc3R5bGVPdmVycmlkZXM7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IGdldFZhcmlhbnRTdHlsZXMgPSAobmFtZSwgdGhlbWUpID0+IHtcbiAgbGV0IHZhcmlhbnRzID0gW107XG5cbiAgaWYgKHRoZW1lICYmIHRoZW1lLmNvbXBvbmVudHMgJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXSAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnZhcmlhbnRzKSB7XG4gICAgdmFyaWFudHMgPSB0aGVtZS5jb21wb25lbnRzW25hbWVdLnZhcmlhbnRzO1xuICB9XG5cbiAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSB7fTtcbiAgdmFyaWFudHMuZm9yRWFjaChkZWZpbml0aW9uID0+IHtcbiAgICBjb25zdCBrZXkgPSBwcm9wc1RvQ2xhc3NLZXkoZGVmaW5pdGlvbi5wcm9wcyk7XG4gICAgdmFyaWFudHNTdHlsZXNba2V5XSA9IGRlZmluaXRpb24uc3R5bGU7XG4gIH0pO1xuICByZXR1cm4gdmFyaWFudHNTdHlsZXM7XG59O1xuXG5jb25zdCB2YXJpYW50c1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMsIHRoZW1lLCBuYW1lKSA9PiB7XG4gIHZhciBfdGhlbWUkY29tcG9uZW50cywgX3RoZW1lJGNvbXBvbmVudHMkbmFtO1xuXG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlID0ge31cbiAgfSA9IHByb3BzO1xuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IFtdO1xuICBjb25zdCB0aGVtZVZhcmlhbnRzID0gdGhlbWUgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkY29tcG9uZW50cyA9IHRoZW1lLmNvbXBvbmVudHMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJGNvbXBvbmVudHMkbmFtID0gX3RoZW1lJGNvbXBvbmVudHNbbmFtZV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkY29tcG9uZW50cyRuYW0udmFyaWFudHM7XG5cbiAgaWYgKHRoZW1lVmFyaWFudHMpIHtcbiAgICB0aGVtZVZhcmlhbnRzLmZvckVhY2godGhlbWVWYXJpYW50ID0+IHtcbiAgICAgIGxldCBpc01hdGNoID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5rZXlzKHRoZW1lVmFyaWFudC5wcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAob3duZXJTdGF0ZVtrZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSAmJiBwcm9wc1trZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSkge1xuICAgICAgICAgIGlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIHZhcmlhbnRzU3R5bGVzLnB1c2goc3R5bGVzW3Byb3BzVG9DbGFzc0tleSh0aGVtZVZhcmlhbnQucHJvcHMpXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFyaWFudHNTdHlsZXM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkRm9yd2FyZFByb3AocHJvcCkge1xuICByZXR1cm4gcHJvcCAhPT0gJ293bmVyU3RhdGUnICYmIHByb3AgIT09ICd0aGVtZScgJiYgcHJvcCAhPT0gJ3N4JyAmJiBwcm9wICE9PSAnYXMnO1xufVxuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5cbmNvbnN0IGxvd2VyY2FzZUZpcnN0TGV0dGVyID0gc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZChpbnB1dCA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUsXG4gICAgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AsXG4gICAgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3BcbiAgfSA9IGlucHV0O1xuICByZXR1cm4gKHRhZywgaW5wdXRPcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgICAgc2xvdDogY29tcG9uZW50U2xvdCxcbiAgICAgIHNraXBWYXJpYW50c1Jlc29sdmVyOiBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyLFxuICAgICAgc2tpcFN4OiBpbnB1dFNraXBTeCxcbiAgICAgIG92ZXJyaWRlc1Jlc29sdmVyXG4gICAgfSA9IGlucHV0T3B0aW9ucyxcbiAgICAgICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoaW5wdXRPcHRpb25zLCBfZXhjbHVkZWQpOyAvLyBpZiBza2lwVmFyaWFudHNSZXNvbHZlciBvcHRpb24gaXMgZGVmaW5lZCwgdGFrZSB0aGUgdmFsdWUsIG90aGVyd2lzZSwgdHJ1ZSBmb3Igcm9vdCBhbmQgZmFsc2UgZm9yIG90aGVyIHNsb3RzLlxuXG5cbiAgICBjb25zdCBza2lwVmFyaWFudHNSZXNvbHZlciA9IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgIT09IHVuZGVmaW5lZCA/IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgOiBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyB8fCBmYWxzZTtcbiAgICBjb25zdCBza2lwU3ggPSBpbnB1dFNraXBTeCB8fCBmYWxzZTtcbiAgICBsZXQgbGFiZWw7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgbGFiZWwgPSBgJHtjb21wb25lbnROYW1lfS0ke2xvd2VyY2FzZUZpcnN0TGV0dGVyKGNvbXBvbmVudFNsb3QgfHwgJ1Jvb3QnKX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHNob3VsZEZvcndhcmRQcm9wO1xuXG4gICAgaWYgKGNvbXBvbmVudFNsb3QgPT09ICdSb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIF9leHRlbmRzKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuXG4gICAgY29uc3QgbXVpU3R5bGVkUmVzb2x2ZXIgPSAoc3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zKSA9PiB7XG4gICAgICBjb25zdCBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUgPSBleHByZXNzaW9ucyA/IGV4cHJlc3Npb25zLm1hcChzdHlsZXNBcmcgPT4ge1xuICAgICAgICAvLyBPbiB0aGUgc2VydmVyIGVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAgIC8vIHdoaWNoIGFyZSBiYXNpY2FsbHkgY29tcG9uZW50cyB1c2VkIGFzIGEgc2VsZWN0b3JzLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzdHlsZXNBcmcgPT09ICdmdW5jdGlvbicgJiYgc3R5bGVzQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZXNBcmcgPyBfcmVmID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9ID0gX3JlZixcbiAgICAgICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQyKTtcblxuICAgICAgICAgIHJldHVybiBzdHlsZXNBcmcoX2V4dGVuZHMoe1xuICAgICAgICAgICAgdGhlbWU6IGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSwgb3RoZXIpKTtcbiAgICAgICAgfSA6IHN0eWxlc0FyZztcbiAgICAgIH0pIDogW107XG4gICAgICBsZXQgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IHN0eWxlQXJnO1xuXG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiBvdmVycmlkZXNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gZ2V0U3R5bGVPdmVycmlkZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpO1xuXG4gICAgICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzID0ge307XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhzdHlsZU92ZXJyaWRlcykuZm9yRWFjaCgoW3Nsb3RLZXksIHNsb3RTdHlsZV0pID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlc1tzbG90S2V5XSA9IHR5cGVvZiBzbG90U3R5bGUgPT09ICdmdW5jdGlvbicgPyBzbG90U3R5bGUocHJvcHMpIDogc2xvdFN0eWxlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHJlc29sdmVkU3R5bGVPdmVycmlkZXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgIXNraXBWYXJpYW50c1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgICAgICAgcmV0dXJuIHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIGdldFZhcmlhbnRTdHlsZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpLCB0aGVtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNraXBTeCkge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgICB0aGVtZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG51bU9mQ3VzdG9tRm5zQXBwbGllZCA9IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5sZW5ndGggLSBleHByZXNzaW9ucy5sZW5ndGg7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlQXJnKSAmJiBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPiAwKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IG5ldyBBcnJheShudW1PZkN1c3RvbUZuc0FwcGxpZWQpLmZpbGwoJycpOyAvLyBJZiB0aGUgdHlwZSBpcyBhcnJheSwgdGhhbiB3ZSBuZWVkIHRvIGFkZCBwbGFjZWhvbGRlcnMgaW4gdGhlIHRlbXBsYXRlIGZvciB0aGUgb3ZlcnJpZGVzLCB2YXJpYW50cyBhbmQgdGhlIHN4IHN0eWxlcy5cblxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gWy4uLnN0eWxlQXJnLCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnLnJhdyA9IFsuLi5zdHlsZUFyZy5yYXcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHlsZUFyZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBmdW5jdGlvbiwgd2UgbmVlZCB0byBkZWZpbmUgdGhlIGRlZmF1bHQgdGhlbWUuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSA9IF9yZWYyLFxuICAgICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBfZXhjbHVkZWQzKTtcblxuICAgICAgICAgIHJldHVybiBzdHlsZUFyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBDb21wb25lbnQgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIodHJhbnNmb3JtZWRTdHlsZUFyZywgLi4uZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuXG4gICAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgJHtjb21wb25lbnROYW1lfSR7Y29tcG9uZW50U2xvdCB8fCAnJ31gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZSA9IGBTdHlsZWQoJHtnZXREaXNwbGF5TmFtZSh0YWcpfSlgO1xuICAgICAgICB9XG5cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcblxuICAgIGlmIChkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZykge1xuICAgICAgbXVpU3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZyA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnO1xuICAgIH1cblxuICAgIHJldHVybiBtdWlTdHlsZWRSZXNvbHZlcjtcbiAgfTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVTdHlsZWQsIHNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgY29uc3Qgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gcHJvcCA9PiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3Nlcyc7XG5leHBvcnQgY29uc3Qgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG5jb25zdCBzdHlsZWQgPSBjcmVhdGVTdHlsZWQoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSk7XG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiaW1wb3J0IHsgdXNlVGhlbWVQcm9wcyBhcyBzeXN0ZW1Vc2VUaGVtZVByb3BzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZVByb3BzKHtcbiAgcHJvcHMsXG4gIG5hbWVcbn0pIHtcbiAgcmV0dXJuIHN5c3RlbVVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzLFxuICAgIG5hbWUsXG4gICAgZGVmYXVsdFRoZW1lXG4gIH0pO1xufSIsImltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gJy4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lLFxuICBkZWZhdWx0VGhlbWVcbn0pIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IGdldFRoZW1lUHJvcHMoe1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSk7XG4gIHJldHVybiBtZXJnZWRQcm9wcztcbn0iLCJpbXBvcnQgeyBpbnRlcm5hbF9yZXNvbHZlUHJvcHMgYXMgcmVzb2x2ZVByb3BzIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICBjb25zdCB7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9ID0gcGFyYW1zO1xuXG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLmNvbXBvbmVudHMgfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0gfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG5cbiAgcmV0dXJuIHJlc29sdmVQcm9wcyh0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcywgcHJvcHMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuXG4vKipcbiAqIEFkZCBrZXlzLCB2YWx1ZXMgb2YgYGRlZmF1bHRQcm9wc2AgdGhhdCBkb2VzIG5vdCBleGlzdCBpbiBgcHJvcHNgXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdFByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHJlc29sdmVkIHByb3BzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG4gIGNvbnN0IG91dHB1dCA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG5cbiAgT2JqZWN0LmtleXMoZGVmYXVsdFByb3BzKS5mb3JFYWNoKHByb3BOYW1lID0+IHtcbiAgICBpZiAob3V0cHV0W3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgY2FwaXRhbGl6ZTsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3ZnSWNvbicsIHNsb3QpO1xufVxuY29uc3Qgc3ZnSWNvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTdmdJY29uJywgWydyb290JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdjb2xvckFjdGlvbicsICdjb2xvckVycm9yJywgJ2NvbG9yRGlzYWJsZWQnLCAnZm9udFNpemVJbmhlcml0JywgJ2ZvbnRTaXplU21hbGwnLCAnZm9udFNpemVNZWRpdW0nLCAnZm9udFNpemVMYXJnZSddKTtcbmV4cG9ydCBkZWZhdWx0IHN2Z0ljb25DbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZm9udFNpemVcIiwgXCJodG1sQ29sb3JcIiwgXCJpbmhlcml0Vmlld0JveFwiLCBcInRpdGxlQWNjZXNzXCIsIFwidmlld0JveFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldFN2Z0ljb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3N2Z0ljb25DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBmb250U2l6ZSxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYGZvbnRTaXplJHtjYXBpdGFsaXplKGZvbnRTaXplKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFN2Z0ljb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgU3ZnSWNvblJvb3QgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tgZm9udFNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5mb250U2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHRyYW5zaXRpb25zLCBfdGhlbWUkdHJhbnNpdGlvbnMkY3IsIF90aGVtZSR0cmFuc2l0aW9uczIsIF90aGVtZSR0cmFuc2l0aW9uczIkZCwgX3RoZW1lJHR5cG9ncmFwaHksIF90aGVtZSR0eXBvZ3JhcGh5JHB4VCwgX3RoZW1lJHR5cG9ncmFwaHkyLCBfdGhlbWUkdHlwb2dyYXBoeTIkcHgsIF90aGVtZSR0eXBvZ3JhcGh5MywgX3RoZW1lJHR5cG9ncmFwaHkzJHB4LCBfdGhlbWUkcGFsZXR0ZSRvd25lclMsIF90aGVtZSRwYWxldHRlLCBfdGhlbWUkcGFsZXR0ZSRvd25lclMyLCBfdGhlbWUkcGFsZXR0ZTIsIF90aGVtZSRwYWxldHRlMiRhY3RpbywgX3RoZW1lJHBhbGV0dGUzLCBfdGhlbWUkcGFsZXR0ZTMkYWN0aW87XG5cbiAgcmV0dXJuIHtcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgd2lkdGg6ICcxZW0nLFxuICAgIGhlaWdodDogJzFlbScsXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgZmxleFNocmluazogMCxcbiAgICB0cmFuc2l0aW9uOiAoX3RoZW1lJHRyYW5zaXRpb25zID0gdGhlbWUudHJhbnNpdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHRyYW5zaXRpb25zJGNyID0gX3RoZW1lJHRyYW5zaXRpb25zLmNyZWF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0cmFuc2l0aW9ucyRjci5jYWxsKF90aGVtZSR0cmFuc2l0aW9ucywgJ2ZpbGwnLCB7XG4gICAgICBkdXJhdGlvbjogKF90aGVtZSR0cmFuc2l0aW9uczIgPSB0aGVtZS50cmFuc2l0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdHJhbnNpdGlvbnMyJGQgPSBfdGhlbWUkdHJhbnNpdGlvbnMyLmR1cmF0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHRyYW5zaXRpb25zMiRkLnNob3J0ZXJcbiAgICB9KSxcbiAgICBmb250U2l6ZToge1xuICAgICAgaW5oZXJpdDogJ2luaGVyaXQnLFxuICAgICAgc21hbGw6ICgoX3RoZW1lJHR5cG9ncmFwaHkgPSB0aGVtZS50eXBvZ3JhcGh5KSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSR0eXBvZ3JhcGh5JHB4VCA9IF90aGVtZSR0eXBvZ3JhcGh5LnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeSRweFQuY2FsbChfdGhlbWUkdHlwb2dyYXBoeSwgMjApKSB8fCAnMS4yNXJlbScsXG4gICAgICBtZWRpdW06ICgoX3RoZW1lJHR5cG9ncmFwaHkyID0gdGhlbWUudHlwb2dyYXBoeSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkdHlwb2dyYXBoeTIkcHggPSBfdGhlbWUkdHlwb2dyYXBoeTIucHhUb1JlbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0eXBvZ3JhcGh5MiRweC5jYWxsKF90aGVtZSR0eXBvZ3JhcGh5MiwgMjQpKSB8fCAnMS41cmVtJyxcbiAgICAgIGxhcmdlOiAoKF90aGVtZSR0eXBvZ3JhcGh5MyA9IHRoZW1lLnR5cG9ncmFwaHkpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHR5cG9ncmFwaHkzJHB4ID0gX3RoZW1lJHR5cG9ncmFwaHkzLnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeTMkcHguY2FsbChfdGhlbWUkdHlwb2dyYXBoeTMsIDM1KSkgfHwgJzIuMTg3NSdcbiAgICB9W293bmVyU3RhdGUuZm9udFNpemVdLFxuICAgIC8vIFRPRE8gdjUgZGVwcmVjYXRlLCB2NiByZW1vdmUgZm9yIHN4XG4gICAgY29sb3I6IChfdGhlbWUkcGFsZXR0ZSRvd25lclMgPSAoX3RoZW1lJHBhbGV0dGUgPSB0aGVtZS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRwYWxldHRlJG93bmVyUzIgPSBfdGhlbWUkcGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRwYWxldHRlJG93bmVyUzIubWFpbikgIT0gbnVsbCA/IF90aGVtZSRwYWxldHRlJG93bmVyUyA6IHtcbiAgICAgIGFjdGlvbjogKF90aGVtZSRwYWxldHRlMiA9IHRoZW1lLnBhbGV0dGUpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHBhbGV0dGUyJGFjdGlvID0gX3RoZW1lJHBhbGV0dGUyLmFjdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRwYWxldHRlMiRhY3Rpby5hY3RpdmUsXG4gICAgICBkaXNhYmxlZDogKF90aGVtZSRwYWxldHRlMyA9IHRoZW1lLnBhbGV0dGUpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJHBhbGV0dGUzJGFjdGlvID0gX3RoZW1lJHBhbGV0dGUzLmFjdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRwYWxldHRlMyRhY3Rpby5kaXNhYmxlZCxcbiAgICAgIGluaGVyaXQ6IHVuZGVmaW5lZFxuICAgIH1bb3duZXJTdGF0ZS5jb2xvcl1cbiAgfTtcbn0pO1xuY29uc3QgU3ZnSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN2Z0ljb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVN2Z0ljb24nXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IgPSAnaW5oZXJpdCcsXG4gICAgY29tcG9uZW50ID0gJ3N2ZycsXG4gICAgZm9udFNpemUgPSAnbWVkaXVtJyxcbiAgICBodG1sQ29sb3IsXG4gICAgaW5oZXJpdFZpZXdCb3ggPSBmYWxzZSxcbiAgICB0aXRsZUFjY2VzcyxcbiAgICB2aWV3Qm94ID0gJzAgMCAyNCAyNCdcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZm9udFNpemUsXG4gICAgaW5oZXJpdFZpZXdCb3gsXG4gICAgdmlld0JveFxuICB9KTtcblxuICBjb25zdCBtb3JlID0ge307XG5cbiAgaWYgKCFpbmhlcml0Vmlld0JveCkge1xuICAgIG1vcmUudmlld0JveCA9IHZpZXdCb3g7XG4gIH1cblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3ZnSWNvblJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgICBjb2xvcjogaHRtbENvbG9yLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdGl0bGVBY2Nlc3MgPyB1bmRlZmluZWQgOiB0cnVlLFxuICAgIHJvbGU6IHRpdGxlQWNjZXNzID8gJ2ltZycgOiB1bmRlZmluZWQsXG4gICAgcmVmOiByZWZcbiAgfSwgbW9yZSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IC8qI19fUFVSRV9fKi9fanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IHRpdGxlQWNjZXNzXG4gICAgfSkgOiBudWxsXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIE5vZGUgcGFzc2VkIGludG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnaW5oZXJpdCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2FjdGlvbicsICdkaXNhYmxlZCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGZvbnRTaXplIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvIDI0cHgsIGJ1dCBjYW4gYmUgY29uZmlndXJlIHRvIGluaGVyaXQgZm9udCBzaXplLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgZm9udFNpemU6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgaHRtbENvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByb290IG5vZGUgd2lsbCBpbmhlcml0IHRoZSBjdXN0b20gYGNvbXBvbmVudGAncyB2aWV3Qm94IGFuZCB0aGUgYHZpZXdCb3hgXG4gICAqIHByb3Agd2lsbCBiZSBpZ25vcmVkLlxuICAgKiBVc2VmdWwgd2hlbiB5b3Ugd2FudCB0byByZWZlcmVuY2UgYSBjdXN0b20gYGNvbXBvbmVudGAgYW5kIGhhdmUgYFN2Z0ljb25gIHBhc3MgdGhhdFxuICAgKiBgY29tcG9uZW50YCdzIHZpZXdCb3ggdG8gdGhlIHJvb3Qgbm9kZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGluaGVyaXRWaWV3Qm94OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHNoYXBlLXJlbmRlcmluZyBhdHRyaWJ1dGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkIG9uIHRoZVxuICAgKiBbTUROIFdlYiBEb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3NoYXBlLXJlbmRlcmluZykuXG4gICAqIElmIHlvdSBhcmUgaGF2aW5nIGlzc3VlcyB3aXRoIGJsdXJyeSBpY29ucyB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHRoaXMgcHJvcC5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgaXQuXG4gICAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkctYWNjZXNzLyNFcXVpdmFsZW50XG4gICAqL1xuICB0aXRsZUFjY2VzczogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICogQGRlZmF1bHQgJzAgMCAyNCAyNCdcbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCBTdmdJY29uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnLi4vU3ZnSWNvbic7XG4vKipcbiAqIFByaXZhdGUgbW9kdWxlIHJlc2VydmVkIGZvciBAbXVpIHBhY2thZ2VzLlxuICovXG5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdmdJY29uKHBhdGgsIGRpc3BsYXlOYW1lKSB7XG4gIGNvbnN0IENvbXBvbmVudCA9IChwcm9wcywgcmVmKSA9PiAvKiNfX1BVUkVfXyovX2pzeChTdmdJY29uLCBfZXh0ZW5kcyh7XG4gICAgXCJkYXRhLXRlc3RpZFwiOiBgJHtkaXNwbGF5TmFtZX1JY29uYCxcbiAgICByZWY6IHJlZlxuICB9LCBwcm9wcywge1xuICAgIGNoaWxkcmVuOiBwYXRoXG4gIH0pKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIE5lZWQgdG8gc2V0IGBkaXNwbGF5TmFtZWAgb24gdGhlIGlubmVyIGNvbXBvbmVudCBmb3IgUmVhY3QubWVtby5cbiAgICAvLyBSZWFjdCBwcmlvciB0byAxNi4xNCBpZ25vcmVzIGBkaXNwbGF5TmFtZWAgb24gdGhlIHdyYXBwZXIuXG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gYCR7ZGlzcGxheU5hbWV9SWNvbmA7XG4gIH1cblxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDb21wb25lbnQpKTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9kZWJvdW5jZSBhcyBkZWJvdW5jZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZGVib3VuY2U7IiwiaW1wb3J0IHsgdW5zdGFibGVfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGFzIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uOyIsImltcG9ydCB7IHVuc3RhYmxlX2RlcHJlY2F0ZWRQcm9wVHlwZSBhcyBkZXByZWNhdGVkUHJvcFR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGRlcHJlY2F0ZWRQcm9wVHlwZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXByZWNhdGVkUHJvcFR5cGUodmFsaWRhdG9yLCByZWFzb24pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50TmFtZVNhZmUgPSBjb21wb25lbnROYW1lIHx8ICc8PGFub255bW91cz4+JztcbiAgICBjb25zdCBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBUaGUgJHtsb2NhdGlvbn0gXFxgJHtwcm9wRnVsbE5hbWVTYWZlfVxcYCBvZiBgICsgYFxcYCR7Y29tcG9uZW50TmFtZVNhZmV9XFxgIGlzIGRlcHJlY2F0ZWQuICR7cmVhc29ufWApO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xufSIsImltcG9ydCB7IHVuc3RhYmxlX3JlcXVpcmVQcm9wRmFjdG9yeSBhcyByZXF1aXJlUHJvcEZhY3RvcnkgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHJlcXVpcmVQcm9wRmFjdG9yeTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVQcm9wRmFjdG9yeShjb21wb25lbnROYW1lSW5FcnJvciwgQ29tcG9uZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICgpID0+IG51bGw7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2ZvcmJpZC1mb3JlaWduLXByb3AtdHlwZXNcblxuXG4gIGNvbnN0IHByZXZQcm9wVHlwZXMgPSBDb21wb25lbnQgPyBfZXh0ZW5kcyh7fSwgQ29tcG9uZW50LnByb3BUeXBlcykgOiBudWxsO1xuXG4gIGNvbnN0IHJlcXVpcmVQcm9wID0gcmVxdWlyZWRQcm9wID0+IChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuICAgIGNvbnN0IGRlZmF1bHRUeXBlQ2hlY2tlciA9IHByZXZQcm9wVHlwZXMgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZQcm9wVHlwZXNbcHJvcEZ1bGxOYW1lU2FmZV07XG5cbiAgICBpZiAoZGVmYXVsdFR5cGVDaGVja2VyKSB7XG4gICAgICBjb25zdCB0eXBlQ2hlY2tlclJlc3VsdCA9IGRlZmF1bHRUeXBlQ2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIC4uLmFyZ3MpO1xuXG4gICAgICBpZiAodHlwZUNoZWNrZXJSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVDaGVja2VyUmVzdWx0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJyAmJiAhcHJvcHNbcmVxdWlyZWRQcm9wXSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgVGhlIHByb3AgXFxgJHtwcm9wRnVsbE5hbWVTYWZlfVxcYCBvZiBgICsgYFxcYCR7Y29tcG9uZW50TmFtZUluRXJyb3J9XFxgIGNhbiBvbmx5IGJlIHVzZWQgdG9nZXRoZXIgd2l0aCB0aGUgXFxgJHtyZXF1aXJlZFByb3B9XFxgIHByb3AuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHJlcXVpcmVQcm9wO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX3NldFJlZiBhcyBzZXRSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHNldFJlZjsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgZ2xvYmFsSWQgPSAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSWQoaWRPdmVycmlkZSkge1xuICBjb25zdCBbZGVmYXVsdElkLCBzZXREZWZhdWx0SWRdID0gUmVhY3QudXNlU3RhdGUoaWRPdmVycmlkZSk7XG4gIGNvbnN0IGlkID0gaWRPdmVycmlkZSB8fCBkZWZhdWx0SWQ7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRlZmF1bHRJZCA9PSBudWxsKSB7XG4gICAgICAvLyBGYWxsYmFjayB0byB0aGlzIGRlZmF1bHQgaWQgd2hlbiBwb3NzaWJsZS5cbiAgICAgIC8vIFVzZSB0aGUgaW5jcmVtZW50aW5nIHZhbHVlIGZvciBjbGllbnQtc2lkZSByZW5kZXJpbmcgb25seS5cbiAgICAgIC8vIFdlIGNhbid0IHVzZSBpdCBzZXJ2ZXItc2lkZS5cbiAgICAgIC8vIElmIHlvdSB3YW50IHRvIHVzZSByYW5kb20gdmFsdWVzIHBsZWFzZSBjb25zaWRlciB0aGUgQmlydGhkYXkgUHJvYmxlbTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmlydGhkYXlfcHJvYmxlbVxuICAgICAgZ2xvYmFsSWQgKz0gMTtcbiAgICAgIHNldERlZmF1bHRJZChgbXVpLSR7Z2xvYmFsSWR9YCk7XG4gICAgfVxuICB9LCBbZGVmYXVsdElkXSk7XG4gIHJldHVybiBpZDtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VJZCBhcyB1c2VJZCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlSWQ7IiwiaW1wb3J0IHsgdW5zdGFibGVfdW5zdXBwb3J0ZWRQcm9wIGFzIHVuc3VwcG9ydGVkUHJvcCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdW5zdXBwb3J0ZWRQcm9wOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuc3VwcG9ydGVkUHJvcChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihgVGhlIHByb3AgXFxgJHtwcm9wRnVsbE5hbWVTYWZlfVxcYCBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgcmVtb3ZlIGl0LmApO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfaXNNdWlFbGVtZW50IGFzIGlzTXVpRWxlbWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgaXNNdWlFbGVtZW50OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoZWxlbWVudC50eXBlLm11aU5hbWUpICE9PSAtMTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IG93bmVyRG9jdW1lbnQ7IiwiaW1wb3J0IHsgdW5zdGFibGVfb3duZXJXaW5kb3cgYXMgb3duZXJXaW5kb3cgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IG93bmVyV2luZG93OyIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUNvbnRyb2xsZWQgYXMgdXNlQ29udHJvbGxlZCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlQ29udHJvbGxlZDsiLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRW5oYW5jZWRFZmZlY3Q7IiwiaW1wb3J0IHsgdW5zdGFibGVfdXNlRXZlbnRDYWxsYmFjayBhcyB1c2VFdmVudENhbGxiYWNrIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VFdmVudENhbGxiYWNrOyIsImltcG9ydCB7IHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRm9ya1JlZjsiLCJpbXBvcnQgeyB1bnN0YWJsZV91c2VJc0ZvY3VzVmlzaWJsZSBhcyB1c2VJc0ZvY3VzVmlzaWJsZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlSXNGb2N1c1Zpc2libGU7IiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3BWYWxpZDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IHVzZUNvbnRleHQsIGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUHJvcFZhbGlkIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IHsgd2l0aEVtb3Rpb25DYWNoZSwgVGhlbWVDb250ZXh0IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcblxudmFyIHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA9IGlzUHJvcFZhbGlkO1xuXG52YXIgdGVzdE9taXRQcm9wc09uQ29tcG9uZW50ID0gZnVuY3Rpb24gdGVzdE9taXRQcm9wc09uQ29tcG9uZW50KGtleSkge1xuICByZXR1cm4ga2V5ICE9PSAndGhlbWUnO1xufTtcblxudmFyIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IGZ1bmN0aW9uIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCh0YWcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnICYmIC8vIDk2IGlzIG9uZSBsZXNzIHRoYW4gdGhlIGNoYXIgY29kZVxuICAvLyBmb3IgXCJhXCIgc28gdGhpcyBpcyBjaGVja2luZyB0aGF0XG4gIC8vIGl0J3MgYSBsb3dlcmNhc2UgY2hhcmFjdGVyXG4gIHRhZy5jaGFyQ29kZUF0KDApID4gOTYgPyB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgOiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQ7XG59O1xudmFyIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMgPSBmdW5jdGlvbiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKSB7XG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcDtcblxuICBpZiAob3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPSBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wO1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPyBmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgIHJldHVybiB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wKHByb3BOYW1lKSAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AocHJvcE5hbWUpO1xuICAgIH0gOiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3A7XG4gIH1cblxuICBpZiAodHlwZW9mIHNob3VsZEZvcndhcmRQcm9wICE9PSAnZnVuY3Rpb24nICYmIGlzUmVhbCkge1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcDtcbiAgfVxuXG4gIHJldHVybiBzaG91bGRGb3J3YXJkUHJvcDtcbn07XG5cbnZhciBJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiA9IFwiWW91IGhhdmUgaWxsZWdhbCBlc2NhcGUgc2VxdWVuY2UgaW4geW91ciB0ZW1wbGF0ZSBsaXRlcmFsLCBtb3N0IGxpa2VseSBpbnNpZGUgY29udGVudCdzIHByb3BlcnR5IHZhbHVlLlxcbkJlY2F1c2UgeW91IHdyaXRlIHlvdXIgQ1NTIGluc2lkZSBhIEphdmFTY3JpcHQgc3RyaW5nIHlvdSBhY3R1YWxseSBoYXZlIHRvIGRvIGRvdWJsZSBlc2NhcGluZywgc28gZm9yIGV4YW1wbGUgXFxcImNvbnRlbnQ6ICdcXFxcMDBkNyc7XFxcIiBzaG91bGQgYmVjb21lIFxcXCJjb250ZW50OiAnXFxcXFxcXFwwMGQ3JztcXFwiLlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoaXMgaGVyZTpcXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9UZW1wbGF0ZV9saXRlcmFscyNFUzIwMThfcmV2aXNpb25fb2ZfaWxsZWdhbF9lc2NhcGVfc2VxdWVuY2VzXCI7XG5cbnZhciBOb29wID0gZnVuY3Rpb24gTm9vcCgpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVkID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYSBzdHlsZWQgZWxlbWVudCB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuXFxuWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzUmVhbCA9IHRhZy5fX2Vtb3Rpb25fcmVhbCA9PT0gdGFnO1xuICB2YXIgYmFzZVRhZyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX2Jhc2UgfHwgdGFnO1xuICB2YXIgaWRlbnRpZmllck5hbWU7XG4gIHZhciB0YXJnZXRDbGFzc05hbWU7XG5cbiAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlkZW50aWZpZXJOYW1lID0gb3B0aW9ucy5sYWJlbDtcbiAgICB0YXJnZXRDbGFzc05hbWUgPSBvcHRpb25zLnRhcmdldDtcbiAgfVxuXG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcCA9IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpO1xuICB2YXIgZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AgfHwgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKGJhc2VUYWcpO1xuICB2YXIgc2hvdWxkVXNlQXMgPSAhZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKCdhcycpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdHlsZXMgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCA/IHRhZy5fX2Vtb3Rpb25fc3R5bGVzLnNsaWNlKDApIDogW107XG5cbiAgICBpZiAoaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2goXCJsYWJlbDpcIiArIGlkZW50aWZpZXJOYW1lICsgXCI7XCIpO1xuICAgIH1cblxuICAgIGlmIChhcmdzWzBdID09IG51bGwgfHwgYXJnc1swXS5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2guYXBwbHkoc3R5bGVzLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVswXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMucHVzaChhcmdzWzBdWzBdKTtcbiAgICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgICAgIHZhciBpID0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbaV0sIGFyZ3NbMF1baV0pO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZTogd2UgbmVlZCB0byBjYXN0IFN0YXRlbGVzc0Z1bmN0aW9uYWxDb21wb25lbnQgdG8gb3VyIFByaXZhdGVTdHlsZWRDb21wb25lbnQgY2xhc3NcblxuXG4gICAgdmFyIFN0eWxlZCA9IHdpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gICAgICB2YXIgZmluYWxUYWcgPSBzaG91bGRVc2VBcyAmJiBwcm9wcy5hcyB8fCBiYXNlVGFnO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgdmFyIGNsYXNzSW50ZXJwb2xhdGlvbnMgPSBbXTtcbiAgICAgIHZhciBtZXJnZWRQcm9wcyA9IHByb3BzO1xuXG4gICAgICBpZiAocHJvcHMudGhlbWUgPT0gbnVsbCkge1xuICAgICAgICBtZXJnZWRQcm9wcyA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICAgIG1lcmdlZFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVyZ2VkUHJvcHMudGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIGNsYXNzSW50ZXJwb2xhdGlvbnMsIHByb3BzLmNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhzdHlsZXMuY29uY2F0KGNsYXNzSW50ZXJwb2xhdGlvbnMpLCBjYWNoZS5yZWdpc3RlcmVkLCBtZXJnZWRQcm9wcyk7XG4gICAgICB2YXIgcnVsZXMgPSBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIHR5cGVvZiBmaW5hbFRhZyA9PT0gJ3N0cmluZycpO1xuICAgICAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xhc3NOYW1lICs9IFwiIFwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmluYWxTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZFVzZUFzICYmIHNob3VsZEZvcndhcmRQcm9wID09PSB1bmRlZmluZWQgPyBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoZmluYWxUYWcpIDogZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wO1xuICAgICAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgICAgIGZvciAodmFyIF9rZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKHNob3VsZFVzZUFzICYmIF9rZXkgPT09ICdhcycpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmICggLy8gJEZsb3dGaXhNZVxuICAgICAgICBmaW5hbFNob3VsZEZvcndhcmRQcm9wKF9rZXkpKSB7XG4gICAgICAgICAgbmV3UHJvcHNbX2tleV0gPSBwcm9wc1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gICAgICB2YXIgZWxlID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoZmluYWxUYWcsIG5ld1Byb3BzKTtcbiAgICAgIHZhciBwb3NzaWJseVN0eWxlRWxlbWVudCA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE5vb3AsIG51bGwpO1xuXG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgcG9zc2libHlTdHlsZUVsZW1lbnQsIGVsZSk7XG4gICAgfSk7XG4gICAgU3R5bGVkLmRpc3BsYXlOYW1lID0gaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCA/IGlkZW50aWZpZXJOYW1lIDogXCJTdHlsZWQoXCIgKyAodHlwZW9mIGJhc2VUYWcgPT09ICdzdHJpbmcnID8gYmFzZVRhZyA6IGJhc2VUYWcuZGlzcGxheU5hbWUgfHwgYmFzZVRhZy5uYW1lIHx8ICdDb21wb25lbnQnKSArIFwiKVwiO1xuICAgIFN0eWxlZC5kZWZhdWx0UHJvcHMgPSB0YWcuZGVmYXVsdFByb3BzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fcmVhbCA9IFN0eWxlZDtcbiAgICBTdHlsZWQuX19lbW90aW9uX2Jhc2UgPSBiYXNlVGFnO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fc3R5bGVzID0gc3R5bGVzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3R5bGVkLCAndG9TdHJpbmcnLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgPT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuICdOT19DT01QT05FTlRfU0VMRUNUT1InO1xuICAgICAgICB9IC8vICRGbG93Rml4TWU6IGNvZXJjZSB1bmRlZmluZWQgdG8gc3RyaW5nXG5cblxuICAgICAgICByZXR1cm4gXCIuXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBTdHlsZWQud2l0aENvbXBvbmVudCA9IGZ1bmN0aW9uIChuZXh0VGFnLCBuZXh0T3B0aW9ucykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0eWxlZChuZXh0VGFnLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgbmV4dE9wdGlvbnMsIHtcbiAgICAgICAgc2hvdWxkRm9yd2FyZFByb3A6IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMoU3R5bGVkLCBuZXh0T3B0aW9ucywgdHJ1ZSlcbiAgICAgIH0pKS5hcHBseSh2b2lkIDAsIHN0eWxlcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBTdHlsZWQ7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdHlsZWQ7XG4iLCJpbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgJ3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJy4uL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5cbnZhciB0YWdzID0gWydhJywgJ2FiYnInLCAnYWRkcmVzcycsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYXVkaW8nLCAnYicsICdiYXNlJywgJ2JkaScsICdiZG8nLCAnYmlnJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdicicsICdidXR0b24nLCAnY2FudmFzJywgJ2NhcHRpb24nLCAnY2l0ZScsICdjb2RlJywgJ2NvbCcsICdjb2xncm91cCcsICdkYXRhJywgJ2RhdGFsaXN0JywgJ2RkJywgJ2RlbCcsICdkZXRhaWxzJywgJ2RmbicsICdkaWFsb2cnLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtJywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2knLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2tleWdlbicsICdsYWJlbCcsICdsZWdlbmQnLCAnbGknLCAnbGluaycsICdtYWluJywgJ21hcCcsICdtYXJrJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ21ldGVyJywgJ25hdicsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAnb3B0Z3JvdXAnLCAnb3B0aW9uJywgJ291dHB1dCcsICdwJywgJ3BhcmFtJywgJ3BpY3R1cmUnLCAncHJlJywgJ3Byb2dyZXNzJywgJ3EnLCAncnAnLCAncnQnLCAncnVieScsICdzJywgJ3NhbXAnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NtYWxsJywgJ3NvdXJjZScsICdzcGFuJywgJ3N0cm9uZycsICdzdHlsZScsICdzdWInLCAnc3VtbWFyeScsICdzdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGltZScsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1JywgJ3VsJywgJ3ZhcicsICd2aWRlbycsICd3YnInLCAvLyBTVkdcbidjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2ZvcmVpZ25PYmplY3QnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbnZhciBuZXdTdHlsZWQgPSBjcmVhdGVTdHlsZWQuYmluZCgpO1xudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWdOYW1lKSB7XG4gIC8vICRGbG93Rml4TWU6IHdlIGNhbiBpZ25vcmUgdGhpcyBiZWNhdXNlIGl0cyBleHBvc2VkIHR5cGUgaXMgZGVmaW5lZCBieSB0aGUgQ3JlYXRlU3R5bGVkIHR5cGVcbiAgbmV3U3R5bGVkW3RhZ05hbWVdID0gbmV3U3R5bGVkKHRhZ05hbWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG5ld1N0eWxlZDtcbiIsIi8qKiBAbGljZW5zZSBNVUkgdjUuMy4wXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmltcG9ydCBlbVN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBjb25zdCBzdHlsZXNGYWN0b3J5ID0gZW1TdHlsZWQodGFnLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoLi4uc3R5bGVzKSA9PiB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyA/IGBcIiR7dGFnfVwiYCA6ICdjb21wb25lbnQnO1xuXG4gICAgICBpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBTZWVtcyBsaWtlIHlvdSBjYWxsZWQgXFxgc3R5bGVkKCR7Y29tcG9uZW50fSkoKVxcYCB3aXRob3V0IGEgXFxgc3R5bGVcXGAgYXJndW1lbnQuYCwgJ1lvdSBtdXN0IHByb3ZpZGUgYSBgc3R5bGVzYCBhcmd1bWVudDogYHN0eWxlZChcImRpdlwiKShzdHlsZVlvdUZvcmdvdFRvUGFzcylgLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVzLnNvbWUoc3R5bGUgPT4gc3R5bGUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiB0aGUgc3R5bGVkKCR7Y29tcG9uZW50fSkoLi4uYXJncykgQVBJIHJlcXVpcmVzIGFsbCBpdHMgYXJncyB0byBiZSBkZWZpbmVkLmApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGVzRmFjdG9yeSguLi5zdHlsZXMpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gc3R5bGVzRmFjdG9yeTtcbn1cbmV4cG9ydCB7IFRoZW1lQ29udGV4dCwga2V5ZnJhbWVzLCBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0eWxlZEVuZ2luZVByb3ZpZGVyIH0gZnJvbSAnLi9TdHlsZWRFbmdpbmVQcm92aWRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdsb2JhbFN0eWxlcyB9IGZyb20gJy4vR2xvYmFsU3R5bGVzJzsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJzsgLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4vLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbVsuXG5cbmV4cG9ydCBjb25zdCB2YWx1ZXMgPSB7XG4gIHhzOiAwLFxuICAvLyBwaG9uZVxuICBzbTogNjAwLFxuICAvLyB0YWJsZXRcbiAgbWQ6IDkwMCxcbiAgLy8gc21hbGwgbGFwdG9wXG4gIGxnOiAxMjAwLFxuICAvLyBkZXNrdG9wXG4gIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlblxuXG59O1xuY29uc3QgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDoga2V5ID0+IGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlc1trZXldfXB4KWBcbn07XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKSB7XG4gIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5yZWR1Y2UoKGFjYywgaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKHRoZW1lQnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbaW5kZXhdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcFZhbHVlKS5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgLy8ga2V5IGlzIGJyZWFrcG9pbnRcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGVtZUJyZWFrcG9pbnRzLnZhbHVlcyB8fCB2YWx1ZXMpLmluZGV4T2YoYnJlYWtwb2ludCkgIT09IC0xKSB7XG4gICAgICAgIGNvbnN0IG1lZGlhS2V5ID0gdGhlbWVCcmVha3BvaW50cy51cChicmVha3BvaW50KTtcbiAgICAgICAgYWNjW21lZGlhS2V5XSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbYnJlYWtwb2ludF0sIGJyZWFrcG9pbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY3NzS2V5ID0gYnJlYWtwb2ludDtcbiAgICAgICAgYWNjW2Nzc0tleV0gPSBwcm9wVmFsdWVbY3NzS2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICBjb25zdCBvdXRwdXQgPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlKTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gYnJlYWtwb2ludHMoc3R5bGVGdW5jdGlvbikge1xuICBjb25zdCBuZXdTdHlsZUZ1bmN0aW9uID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG4gICAgY29uc3QgYmFzZSA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgY29uc3QgZXh0ZW5kZWQgPSB0aGVtZUJyZWFrcG9pbnRzLmtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgYWNjID0gYWNjIHx8IHt9O1xuICAgICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICAgIHRoZW1lXG4gICAgICAgIH0sIHByb3BzW2tleV0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBudWxsKTtcbiAgICByZXR1cm4gbWVyZ2UoYmFzZSwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9leHRlbmRzKHt9LCBzdHlsZUZ1bmN0aW9uLnByb3BUeXBlcywge1xuICAgIHhzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNtOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1kOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxnOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHhsOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgLi4uc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wc107XG4gIHJldHVybiBuZXdTdHlsZUZ1bmN0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KGJyZWFrcG9pbnRzSW5wdXQgPSB7fSkge1xuICB2YXIgX2JyZWFrcG9pbnRzSW5wdXQka2V5O1xuXG4gIGNvbnN0IGJyZWFrcG9pbnRzSW5PcmRlciA9IGJyZWFrcG9pbnRzSW5wdXQgPT0gbnVsbCA/IHZvaWQgMCA6IChfYnJlYWtwb2ludHNJbnB1dCRrZXkgPSBicmVha3BvaW50c0lucHV0LmtleXMpID09IG51bGwgPyB2b2lkIDAgOiBfYnJlYWtwb2ludHNJbnB1dCRrZXkucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRTdHlsZUtleSA9IGJyZWFrcG9pbnRzSW5wdXQudXAoa2V5KTtcbiAgICBhY2NbYnJlYWtwb2ludFN0eWxlS2V5XSA9IHt9O1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzSW5PcmRlciB8fCB7fTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50S2V5cywgc3R5bGUpIHtcbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50T3V0cHV0ID0gYWNjW2tleV07XG4gICAgY29uc3QgaXNCcmVha3BvaW50VW51c2VkID0gIWJyZWFrcG9pbnRPdXRwdXQgfHwgT2JqZWN0LmtleXMoYnJlYWtwb2ludE91dHB1dCkubGVuZ3RoID09PSAwO1xuXG4gICAgaWYgKGlzQnJlYWtwb2ludFVudXNlZCkge1xuICAgICAgZGVsZXRlIGFjY1trZXldO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHN0eWxlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUJyZWFrcG9pbnRzSW5PcmRlcihicmVha3BvaW50c0lucHV0LCAuLi5zdHlsZXMpIHtcbiAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3QgbWVyZ2VkT3V0cHV0ID0gW2VtcHR5QnJlYWtwb2ludHMsIC4uLnN0eWxlc10ucmVkdWNlKChwcmV2LCBuZXh0KSA9PiBkZWVwbWVyZ2UocHJldiwgbmV4dCksIHt9KTtcbiAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKE9iamVjdC5rZXlzKGVtcHR5QnJlYWtwb2ludHMpLCBtZXJnZWRPdXRwdXQpO1xufSAvLyBjb21wdXRlIGJhc2UgZm9yIHJlc3BvbnNpdmUgdmFsdWVzOyBlLmcuLFxuLy8gWzEsMiwzXSA9PiB7eHM6IHRydWUsIHNtOiB0cnVlLCBtZDogdHJ1ZX1cbi8vIHt4czogMSwgc206IDIsIG1kOiAzfSA9PiB7eHM6IHRydWUsIHNtOiB0cnVlLCBtZDogdHJ1ZX1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVCcmVha3BvaW50c0Jhc2UoYnJlYWtwb2ludFZhbHVlcywgdGhlbWVCcmVha3BvaW50cykge1xuICAvLyBmaXhlZCB2YWx1ZVxuICBpZiAodHlwZW9mIGJyZWFrcG9pbnRWYWx1ZXMgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgYmFzZSA9IHt9O1xuICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyh0aGVtZUJyZWFrcG9pbnRzKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShicmVha3BvaW50VmFsdWVzKSkge1xuICAgIGJyZWFrcG9pbnRzS2V5cy5mb3JFYWNoKChicmVha3BvaW50LCBpKSA9PiB7XG4gICAgICBpZiAoaSA8IGJyZWFrcG9pbnRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGJhc2VbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGJyZWFrcG9pbnRzS2V5cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgICAgaWYgKGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgdmFsdWVzOiBicmVha3BvaW50VmFsdWVzLFxuICBicmVha3BvaW50czogdGhlbWVCcmVha3BvaW50cyxcbiAgYmFzZTogY3VzdG9tQmFzZVxufSkge1xuICBjb25zdCBiYXNlID0gY3VzdG9tQmFzZSB8fCBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYmFzZSk7XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRWYWx1ZXM7XG4gIH1cblxuICBsZXQgcHJldmlvdXM7XG4gIHJldHVybiBrZXlzLnJlZHVjZSgoYWNjLCBicmVha3BvaW50LCBpKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbaV0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbaV0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXTtcbiAgICAgIHByZXZpb3VzID0gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSAhPSBudWxsID8gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSA6IGJyZWFrcG9pbnRWYWx1ZXNbcHJldmlvdXNdIHx8IGJyZWFrcG9pbnRWYWx1ZXM7XG4gICAgICBwcmV2aW91cyA9IGJyZWFrcG9pbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZXhwb3J0IGRlZmF1bHQgYnJlYWtwb2ludHM7IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4gPSAwLCBtYXggPSAxKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAke3ZhbHVlfSBpcyBvdXQgb2YgcmFuZ2UgWyR7bWlufSwgJHttYXh9XS5gKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnN1YnN0cigxKTtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGAuezEsJHtjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxfX1gLCAnZycpO1xuICBsZXQgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuXG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAobiA9PiBuICsgbik7XG4gIH1cblxuICByZXR1cm4gY29sb3JzID8gYHJnYiR7Y29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnfSgke2NvbG9ycy5tYXAoKG4sIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpfSlgIDogJyc7XG59XG5cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICBjb25zdCBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IGAwJHtoZXh9YCA6IGhleDtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cblxuICBjb25zdCBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIGNvbnN0IHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcblxuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvciddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFVuc3VwcG9ydGVkIFxcYCR7Y29sb3J9XFxgIGNvbG9yLlxuVGhlIGZvbGxvd2luZyBmb3JtYXRzIGFyZSBzdXBwb3J0ZWQ6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKCkuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoOSwgY29sb3IpKTtcbiAgfVxuXG4gIGxldCB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSk7XG4gIGxldCBjb2xvclNwYWNlO1xuXG4gIGlmICh0eXBlID09PSAnY29sb3InKSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcgJyk7XG4gICAgY29sb3JTcGFjZSA9IHZhbHVlcy5zaGlmdCgpO1xuXG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDQgJiYgdmFsdWVzWzNdLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICB2YWx1ZXNbM10gPSB2YWx1ZXNbM10uc3Vic3RyKDEpO1xuICAgIH1cblxuICAgIGlmIChbJ3NyZ2InLCAnZGlzcGxheS1wMycsICdhOTgtcmdiJywgJ3Byb3Bob3RvLXJnYicsICdyZWMtMjAyMCddLmluZGV4T2YoY29sb3JTcGFjZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogdW5zdXBwb3J0ZWQgXFxgJHtjb2xvclNwYWNlfVxcYCBjb2xvciBzcGFjZS5cblRoZSBmb2xsb3dpbmcgY29sb3Igc3BhY2VzIGFyZSBzdXBwb3J0ZWQ6IHNyZ2IsIGRpc3BsYXktcDMsIGE5OC1yZ2IsIHByb3Bob3RvLXJnYiwgcmVjLTIwMjAuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTAsIGNvbG9yU3BhY2UpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcsJyk7XG4gIH1cblxuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKHZhbHVlID0+IHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIHZhbHVlcyxcbiAgICBjb2xvclNwYWNlXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSdcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgY29sb3JTcGFjZVxuICB9ID0gY29sb3I7XG4gIGxldCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcblxuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcCgobiwgaSkgPT4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuKTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IGAke3ZhbHVlc1sxXX0lYDtcbiAgICB2YWx1ZXNbMl0gPSBgJHt2YWx1ZXNbMl19JWA7XG4gIH1cblxuICBpZiAodHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIHZhbHVlcyA9IGAke2NvbG9yU3BhY2V9ICR7dmFsdWVzLmpvaW4oJyAnKX1gO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IGAke3ZhbHVlcy5qb2luKCcsICcpfWA7XG4gIH1cblxuICByZXR1cm4gYCR7dHlwZX0oJHt2YWx1ZXN9KWA7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci5pbmRleE9mKCcjJykgPT09IDApIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBgIyR7dmFsdWVzLm1hcCgobiwgaSkgPT4gaW50VG9IZXgoaSA9PT0gMyA/IE1hdGgucm91bmQoMjU1ICogbikgOiBuKSkuam9pbignJyl9YDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIGhzbCBmb3JtYXQgdG8gcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhTTCBjb2xvciB2YWx1ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvciB2YWx1ZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBjb25zdCBoID0gdmFsdWVzWzBdO1xuICBjb25zdCBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICBjb25zdCBsID0gdmFsdWVzWzJdIC8gMTAwO1xuICBjb25zdCBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcblxuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG5cbiAgbGV0IHR5cGUgPSAncmdiJztcbiAgY29uc3QgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBsZXQgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcCh2YWwgPT4ge1xuICAgIGlmIChjb2xvci50eXBlICE9PSAnY29sb3InKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiAoKHZhbCArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjQ7XG4gIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIGNvbnN0IGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIGNvbnN0IGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWxwaGEoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuXG4gIGlmIChjb2xvci50eXBlID09PSAnY29sb3InKSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gYC8ke3ZhbHVlfWA7XG4gIH0gZWxzZSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSB8fCBjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgxIC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQgPSAwLjE1KSB7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IGNvbnN0IGJyZWFrcG9pbnRLZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddOyAvLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgY29uc3Qge1xuICAgIC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuICAgIC8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtKS5cbiAgICB2YWx1ZXMgPSB7XG4gICAgICB4czogMCxcbiAgICAgIC8vIHBob25lXG4gICAgICBzbTogNjAwLFxuICAgICAgLy8gdGFibGV0XG4gICAgICBtZDogOTAwLFxuICAgICAgLy8gc21hbGwgbGFwdG9wXG4gICAgICBsZzogMTIwMCxcbiAgICAgIC8vIGRlc2t0b3BcbiAgICAgIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlblxuXG4gICAgfSxcbiAgICB1bml0ID0gJ3B4JyxcbiAgICBzdGVwID0gNVxuICB9ID0gYnJlYWtwb2ludHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoYnJlYWtwb2ludHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlcyk7XG5cbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlfSR7dW5pdH0pYDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1heC13aWR0aDoke3ZhbHVlIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpO1xuICAgIHJldHVybiBgQG1lZGlhIChtaW4td2lkdGg6JHt0eXBlb2YgdmFsdWVzW3N0YXJ0XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNbc3RhcnRdIDogc3RhcnR9JHt1bml0fSkgYW5kIGAgKyBgKG1heC13aWR0aDokeyhlbmRJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHZhbHVlc1trZXlzW2VuZEluZGV4XV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA6IGVuZCkgLSBzdGVwIC8gMTAwfSR7dW5pdH0pYDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihrZXkpICsgMSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBub3Qoa2V5KSB7XG4gICAgLy8gaGFuZGxlIGZpcnN0IGFuZCBsYXN0IGtleSBzZXBhcmF0ZWx5LCBmb3IgYmV0dGVyIHJlYWRhYmlsaXR5XG4gICAgY29uc3Qga2V5SW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KTtcblxuICAgIGlmIChrZXlJbmRleCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVwKGtleXNbMV0pO1xuICAgIH1cblxuICAgIGlmIChrZXlJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gZG93bihrZXlzW2tleUluZGV4XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXlzW2tleXMuaW5kZXhPZihrZXkpICsgMV0pLnJlcGxhY2UoJ0BtZWRpYScsICdAbWVkaWEgbm90IGFsbCBhbmQnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5cyxcbiAgICB2YWx1ZXMsXG4gICAgdXAsXG4gICAgZG93bixcbiAgICBiZXR3ZWVuLFxuICAgIG9ubHksXG4gICAgbm90LFxuICAgIHVuaXRcbiAgfSwgb3RoZXIpO1xufSIsImNvbnN0IHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuXG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50c0lucHV0ID0ge30sXG4gICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgIHNoYXBlOiBzaGFwZUlucHV0ID0ge31cbiAgfSA9IG9wdGlvbnMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgY29tcG9uZW50czoge30sXG4gICAgLy8gSW5qZWN0IGNvbXBvbmVudCBkZWZpbml0aW9ucy5cbiAgICBwYWxldHRlOiBfZXh0ZW5kcyh7XG4gICAgICBtb2RlOiAnbGlnaHQnXG4gICAgfSwgcGFsZXR0ZUlucHV0KSxcbiAgICBzcGFjaW5nLFxuICAgIHNoYXBlOiBfZXh0ZW5kcyh7fSwgc2hhcGUsIHNoYXBlSW5wdXQpXG4gIH0sIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnLi4vc3BhY2luZyc7XG5cbi8qIHRzbGludDplbmFibGU6dW5pZmllZC1zaWduYXR1cmVzICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCA9IDgpIHtcbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9IC8vIE1hdGVyaWFsIERlc2lnbiBsYXlvdXRzIGFyZSB2aXN1YWxseSBiYWxhbmNlZC4gTW9zdCBtZWFzdXJlbWVudHMgYWxpZ24gdG8gYW4gOGRwIGdyaWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWwjdXNhZ2VcblxuXG4gIGNvbnN0IHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuXG4gIGNvbnN0IHNwYWNpbmcgPSAoLi4uYXJnc0lucHV0KSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKGFyZ3NJbnB1dC5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290ICR7YXJnc0lucHV0Lmxlbmd0aH1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhcmdzID0gYXJnc0lucHV0Lmxlbmd0aCA9PT0gMCA/IFsxXSA6IGFyZ3NJbnB1dDtcbiAgICByZXR1cm4gYXJncy5tYXAoYXJndW1lbnQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IGAke291dHB1dH1weGAgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9O1xuXG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuXG5mdW5jdGlvbiBjb21wb3NlKC4uLnN0eWxlcykge1xuICBjb25zdCBoYW5kbGVycyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IHtcbiAgICBzdHlsZS5maWx0ZXJQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgYWNjW3Byb3BdID0gc3R5bGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChhY2MsIHByb3ApID0+IHtcbiAgICAgIGlmIChoYW5kbGVyc1twcm9wXSkge1xuICAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBoYW5kbGVyc1twcm9wXShwcm9wcykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTtcblxuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHN0eWxlLnByb3BUeXBlcyksIHt9KSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IGFjYy5jb25jYXQoc3R5bGUuZmlsdGVyUHJvcHMpLCBbXSk7XG4gIHJldHVybiBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZTsiLCJpbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVVuaXQsIGdldFZhbHVlIH0gZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5cbmZ1bmN0aW9uIGdldEJvcmRlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBgJHt2YWx1ZX1weCBzb2xpZGA7XG59XG5cbmV4cG9ydCBjb25zdCBib3JkZXIgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXInLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyVG9wJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyUmlnaHQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGdldEJvcmRlclxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQm90dG9tJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnQgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJMZWZ0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3BDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclRvcENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0Q29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b21Db2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckJvdHRvbUNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyTGVmdENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmFkaXVzID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuYm9yZGVyUmFkaXVzICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuYm9yZGVyUmFkaXVzICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzaGFwZS5ib3JkZXJSYWRpdXMnLCA0LCAnYm9yZGVyUmFkaXVzJyk7XG5cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGJvcmRlclJhZGl1czogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuYm9yZGVyUmFkaXVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuYm9yZGVyUmFkaXVzLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGJvcmRlclJhZGl1czogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5ib3JkZXJSYWRpdXMuZmlsdGVyUHJvcHMgPSBbJ2JvcmRlclJhZGl1cyddO1xuY29uc3QgYm9yZGVycyA9IGNvbXBvc2UoYm9yZGVyLCBib3JkZXJUb3AsIGJvcmRlclJpZ2h0LCBib3JkZXJCb3R0b20sIGJvcmRlckxlZnQsIGJvcmRlckNvbG9yLCBib3JkZXJUb3BDb2xvciwgYm9yZGVyUmlnaHRDb2xvciwgYm9yZGVyQm90dG9tQ29sb3IsIGJvcmRlckxlZnRDb2xvciwgYm9yZGVyUmFkaXVzKTtcbmV4cG9ydCBkZWZhdWx0IGJvcmRlcnM7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCBjb25zdCBkaXNwbGF5UHJpbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdkaXNwbGF5UHJpbnQnLFxuICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gIHRyYW5zZm9ybTogdmFsdWUgPT4gKHtcbiAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgZGlzcGxheTogdmFsdWVcbiAgICB9XG4gIH0pXG59KTtcbmV4cG9ydCBjb25zdCBkaXNwbGF5UmF3ID0gc3R5bGUoe1xuICBwcm9wOiAnZGlzcGxheSdcbn0pO1xuZXhwb3J0IGNvbnN0IG92ZXJmbG93ID0gc3R5bGUoe1xuICBwcm9wOiAnb3ZlcmZsb3cnXG59KTtcbmV4cG9ydCBjb25zdCB0ZXh0T3ZlcmZsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0T3ZlcmZsb3cnXG59KTtcbmV4cG9ydCBjb25zdCB2aXNpYmlsaXR5ID0gc3R5bGUoe1xuICBwcm9wOiAndmlzaWJpbGl0eSdcbn0pO1xuZXhwb3J0IGNvbnN0IHdoaXRlU3BhY2UgPSBzdHlsZSh7XG4gIHByb3A6ICd3aGl0ZVNwYWNlJ1xufSk7XG5leHBvcnQgZGVmYXVsdCBjb21wb3NlKGRpc3BsYXlQcmludCwgZGlzcGxheVJhdywgb3ZlcmZsb3csIHRleHRPdmVyZmxvdywgdmlzaWJpbGl0eSwgd2hpdGVTcGFjZSk7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCBjb25zdCBmbGV4QmFzaXMgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4QmFzaXMnXG59KTtcbmV4cG9ydCBjb25zdCBmbGV4RGlyZWN0aW9uID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleERpcmVjdGlvbidcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXhXcmFwID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleFdyYXAnXG59KTtcbmV4cG9ydCBjb25zdCBqdXN0aWZ5Q29udGVudCA9IHN0eWxlKHtcbiAgcHJvcDogJ2p1c3RpZnlDb250ZW50J1xufSk7XG5leHBvcnQgY29uc3QgYWxpZ25JdGVtcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2FsaWduSXRlbXMnXG59KTtcbmV4cG9ydCBjb25zdCBhbGlnbkNvbnRlbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnbkNvbnRlbnQnXG59KTtcbmV4cG9ydCBjb25zdCBvcmRlciA9IHN0eWxlKHtcbiAgcHJvcDogJ29yZGVyJ1xufSk7XG5leHBvcnQgY29uc3QgZmxleCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXgnXG59KTtcbmV4cG9ydCBjb25zdCBmbGV4R3JvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhHcm93J1xufSk7XG5leHBvcnQgY29uc3QgZmxleFNocmluayA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhTaHJpbmsnXG59KTtcbmV4cG9ydCBjb25zdCBhbGlnblNlbGYgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnblNlbGYnXG59KTtcbmV4cG9ydCBjb25zdCBqdXN0aWZ5SXRlbXMgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5SXRlbXMnXG59KTtcbmV4cG9ydCBjb25zdCBqdXN0aWZ5U2VsZiA9IHN0eWxlKHtcbiAgcHJvcDogJ2p1c3RpZnlTZWxmJ1xufSk7XG5jb25zdCBmbGV4Ym94ID0gY29tcG9zZShmbGV4QmFzaXMsIGZsZXhEaXJlY3Rpb24sIGZsZXhXcmFwLCBqdXN0aWZ5Q29udGVudCwgYWxpZ25JdGVtcywgYWxpZ25Db250ZW50LCBvcmRlciwgZmxleCwgZmxleEdyb3csIGZsZXhTaHJpbmssIGFsaWduU2VsZiwganVzdGlmeUl0ZW1zLCBqdXN0aWZ5U2VsZik7XG5leHBvcnQgZGVmYXVsdCBmbGV4Ym94OyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVVuaXQsIGdldFZhbHVlIH0gZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmV4cG9ydCBjb25zdCBnYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5nYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5nYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnZ2FwJyk7XG5cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuZ2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuZ2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5nYXAuZmlsdGVyUHJvcHMgPSBbJ2dhcCddO1xuZXhwb3J0IGNvbnN0IGNvbHVtbkdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmNvbHVtbkdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmNvbHVtbkdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdjb2x1bW5HYXAnKTtcblxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgY29sdW1uR2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5jb2x1bW5HYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5jb2x1bW5HYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgY29sdW1uR2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmNvbHVtbkdhcC5maWx0ZXJQcm9wcyA9IFsnY29sdW1uR2FwJ107XG5leHBvcnQgY29uc3Qgcm93R2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMucm93R2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMucm93R2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ3Jvd0dhcCcpO1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICByb3dHYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLnJvd0dhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbnJvd0dhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICByb3dHYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xucm93R2FwLmZpbHRlclByb3BzID0gWydyb3dHYXAnXTtcbmV4cG9ydCBjb25zdCBncmlkQ29sdW1uID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZENvbHVtbidcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRSb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkUm93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9GbG93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9GbG93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Db2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Db2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Sb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Sb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUNvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVSb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUFyZWFzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQXJlYXMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXJlYSA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBcmVhJ1xufSk7XG5jb25zdCBncmlkID0gY29tcG9zZShnYXAsIGNvbHVtbkdhcCwgcm93R2FwLCBncmlkQ29sdW1uLCBncmlkUm93LCBncmlkQXV0b0Zsb3csIGdyaWRBdXRvQ29sdW1ucywgZ3JpZEF1dG9Sb3dzLCBncmlkVGVtcGxhdGVDb2x1bW5zLCBncmlkVGVtcGxhdGVSb3dzLCBncmlkVGVtcGxhdGVBcmVhcywgZ3JpZEFyZWEpO1xuZXhwb3J0IGRlZmF1bHQgZ3JpZDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGNvbnN0IHBvc2l0aW9uID0gc3R5bGUoe1xuICBwcm9wOiAncG9zaXRpb24nXG59KTtcbmV4cG9ydCBjb25zdCB6SW5kZXggPSBzdHlsZSh7XG4gIHByb3A6ICd6SW5kZXgnLFxuICB0aGVtZUtleTogJ3pJbmRleCdcbn0pO1xuZXhwb3J0IGNvbnN0IHRvcCA9IHN0eWxlKHtcbiAgcHJvcDogJ3RvcCdcbn0pO1xuZXhwb3J0IGNvbnN0IHJpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAncmlnaHQnXG59KTtcbmV4cG9ydCBjb25zdCBib3R0b20gPSBzdHlsZSh7XG4gIHByb3A6ICdib3R0b20nXG59KTtcbmV4cG9ydCBjb25zdCBsZWZ0ID0gc3R5bGUoe1xuICBwcm9wOiAnbGVmdCdcbn0pO1xuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShwb3NpdGlvbiwgekluZGV4LCB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdjb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmNvbnN0IHBhbGV0dGUgPSBjb21wb3NlKGNvbG9yLCBiZ2NvbG9yLCBiYWNrZ3JvdW5kQ29sb3IpO1xuZXhwb3J0IGRlZmF1bHQgcGFsZXR0ZTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5jb25zdCBib3hTaGFkb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdib3hTaGFkb3cnLFxuICB0aGVtZUtleTogJ3NoYWRvd3MnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGJveFNoYWRvdzsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIHZhbHVlcyBhcyBicmVha3BvaW50c1ZhbHVlcyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDw9IDEgJiYgdmFsdWUgIT09IDAgPyBgJHt2YWx1ZSAqIDEwMH0lYCA6IHZhbHVlO1xufVxuXG5leHBvcnQgY29uc3Qgd2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4V2lkdGggPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5tYXhXaWR0aCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLm1heFdpZHRoICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+IHtcbiAgICAgIHZhciBfcHJvcHMkdGhlbWUsIF9wcm9wcyR0aGVtZSRicmVha3BvaSwgX3Byb3BzJHRoZW1lJGJyZWFrcG9pMjtcblxuICAgICAgY29uc3QgYnJlYWtwb2ludCA9ICgoX3Byb3BzJHRoZW1lID0gcHJvcHMudGhlbWUpID09IG51bGwgPyB2b2lkIDAgOiAoX3Byb3BzJHRoZW1lJGJyZWFrcG9pID0gX3Byb3BzJHRoZW1lLmJyZWFrcG9pbnRzKSA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSRicmVha3BvaTIgPSBfcHJvcHMkdGhlbWUkYnJlYWtwb2kudmFsdWVzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lJGJyZWFrcG9pMltwcm9wVmFsdWVdKSB8fCBicmVha3BvaW50c1ZhbHVlc1twcm9wVmFsdWVdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF4V2lkdGg6IGJyZWFrcG9pbnQgfHwgdHJhbnNmb3JtKHByb3BWYWx1ZSlcbiAgICAgIH07XG4gICAgfTtcblxuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMubWF4V2lkdGgsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5tYXhXaWR0aC5maWx0ZXJQcm9wcyA9IFsnbWF4V2lkdGgnXTtcbmV4cG9ydCBjb25zdCBtaW5XaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbldpZHRoJyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBoZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heEhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21heEhlaWdodCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWluSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWluSGVpZ2h0JyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3Qgc2l6ZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm94U2l6aW5nID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2l6aW5nJ1xufSk7XG5jb25zdCBzaXppbmcgPSBjb21wb3NlKHdpZHRoLCBtYXhXaWR0aCwgbWluV2lkdGgsIGhlaWdodCwgbWF4SGVpZ2h0LCBtaW5IZWlnaHQsIGJveFNpemluZyk7XG5leHBvcnQgZGVmYXVsdCBzaXppbmc7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCBjb25zdCBmb250RmFtaWx5ID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udEZhbWlseScsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IGNvbnN0IGZvbnRTaXplID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udFNpemUnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBmb250U3R5bGUgPSBzdHlsZSh7XG4gIHByb3A6ICdmb250U3R5bGUnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBmb250V2VpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udFdlaWdodCcsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuZXhwb3J0IGNvbnN0IGxldHRlclNwYWNpbmcgPSBzdHlsZSh7XG4gIHByb3A6ICdsZXR0ZXJTcGFjaW5nJ1xufSk7XG5leHBvcnQgY29uc3QgdGV4dFRyYW5zZm9ybSA9IHN0eWxlKHtcbiAgcHJvcDogJ3RleHRUcmFuc2Zvcm0nXG59KTtcbmV4cG9ydCBjb25zdCBsaW5lSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbGluZUhlaWdodCdcbn0pO1xuZXhwb3J0IGNvbnN0IHRleHRBbGlnbiA9IHN0eWxlKHtcbiAgcHJvcDogJ3RleHRBbGlnbidcbn0pO1xuZXhwb3J0IGNvbnN0IHR5cG9ncmFwaHlWYXJpYW50ID0gc3R5bGUoe1xuICBwcm9wOiAndHlwb2dyYXBoeScsXG4gIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5jb25zdCB0eXBvZ3JhcGh5ID0gY29tcG9zZSh0eXBvZ3JhcGh5VmFyaWFudCwgZm9udEZhbWlseSwgZm9udFNpemUsIGZvbnRTdHlsZSwgZm9udFdlaWdodCwgbGV0dGVyU3BhY2luZywgbGluZUhlaWdodCwgdGV4dEFsaWduLCB0ZXh0VHJhbnNmb3JtKTtcbmV4cG9ydCBkZWZhdWx0IHR5cG9ncmFwaHk7IiwiaW1wb3J0IGJvcmRlcnMgZnJvbSAnLi9ib3JkZXJzJztcbmltcG9ydCBkaXNwbGF5IGZyb20gJy4vZGlzcGxheSc7XG5pbXBvcnQgZmxleGJveCBmcm9tICcuL2ZsZXhib3gnO1xuaW1wb3J0IGdyaWQgZnJvbSAnLi9ncmlkJztcbmltcG9ydCBwb3NpdGlvbnMgZnJvbSAnLi9wb3NpdGlvbnMnO1xuaW1wb3J0IHBhbGV0dGUgZnJvbSAnLi9wYWxldHRlJztcbmltcG9ydCBzaGFkb3dzIGZyb20gJy4vc2hhZG93cyc7XG5pbXBvcnQgc2l6aW5nIGZyb20gJy4vc2l6aW5nJztcbmltcG9ydCBzcGFjaW5nIGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgdHlwb2dyYXBoeSBmcm9tICcuL3R5cG9ncmFwaHknO1xuY29uc3QgZmlsdGVyUHJvcHNNYXBwaW5nID0ge1xuICBib3JkZXJzOiBib3JkZXJzLmZpbHRlclByb3BzLFxuICBkaXNwbGF5OiBkaXNwbGF5LmZpbHRlclByb3BzLFxuICBmbGV4Ym94OiBmbGV4Ym94LmZpbHRlclByb3BzLFxuICBncmlkOiBncmlkLmZpbHRlclByb3BzLFxuICBwb3NpdGlvbnM6IHBvc2l0aW9ucy5maWx0ZXJQcm9wcyxcbiAgcGFsZXR0ZTogcGFsZXR0ZS5maWx0ZXJQcm9wcyxcbiAgc2hhZG93czogc2hhZG93cy5maWx0ZXJQcm9wcyxcbiAgc2l6aW5nOiBzaXppbmcuZmlsdGVyUHJvcHMsXG4gIHNwYWNpbmc6IHNwYWNpbmcuZmlsdGVyUHJvcHMsXG4gIHR5cG9ncmFwaHk6IHR5cG9ncmFwaHkuZmlsdGVyUHJvcHNcbn07XG5jb25zdCBzdHlsZUZ1bmN0aW9uTWFwcGluZyA9IHtcbiAgYm9yZGVycyxcbiAgZGlzcGxheSxcbiAgZmxleGJveCxcbiAgZ3JpZCxcbiAgcG9zaXRpb25zLFxuICBwYWxldHRlLFxuICBzaGFkb3dzLFxuICBzaXppbmcsXG4gIHNwYWNpbmcsXG4gIHR5cG9ncmFwaHlcbn07XG5leHBvcnQgY29uc3QgcHJvcFRvU3R5bGVGdW5jdGlvbiA9IE9iamVjdC5rZXlzKGZpbHRlclByb3BzTWFwcGluZykucmVkdWNlKChhY2MsIHN0eWxlRm5OYW1lKSA9PiB7XG4gIGZpbHRlclByb3BzTWFwcGluZ1tzdHlsZUZuTmFtZV0uZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgYWNjW3Byb3BOYW1lXSA9IHN0eWxlRnVuY3Rpb25NYXBwaW5nW3N0eWxlRm5OYW1lXTtcbiAgfSk7XG4gIHJldHVybiBhY2M7XG59LCB7fSk7XG5cbmZ1bmN0aW9uIGdldFRoZW1lVmFsdWUocHJvcCwgdmFsdWUsIHRoZW1lKSB7XG4gIGNvbnN0IGlucHV0UHJvcHMgPSB7XG4gICAgW3Byb3BdOiB2YWx1ZSxcbiAgICB0aGVtZVxuICB9O1xuICBjb25zdCBzdHlsZUZ1bmN0aW9uID0gcHJvcFRvU3R5bGVGdW5jdGlvbltwcm9wXTtcbiAgcmV0dXJuIHN0eWxlRnVuY3Rpb24gPyBzdHlsZUZ1bmN0aW9uKGlucHV0UHJvcHMpIDoge1xuICAgIFtwcm9wXTogdmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VGhlbWVWYWx1ZTsiLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcblxuZnVuY3Rpb24gbWVyZ2UoYWNjLCBpdGVtKSB7XG4gIGlmICghaXRlbSkge1xuICAgIHJldHVybiBhY2M7XG4gIH1cblxuICByZXR1cm4gZGVlcG1lcmdlKGFjYywgaXRlbSwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXAsIGl0J3Mgd2F5IGZhc3Rlci5cblxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgZ2V0UGF0aCB9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplJztcbmNvbnN0IHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG5jb25zdCBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59O1xuY29uc3QgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59OyAvLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuXG5jb25zdCBnZXRDc3NQcm9wZXJ0aWVzID0gbWVtb2l6ZShwcm9wID0+IHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDIpIHtcbiAgICBpZiAoYWxpYXNlc1twcm9wXSkge1xuICAgICAgcHJvcCA9IGFsaWFzZXNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgY29uc3QgW2EsIGJdID0gcHJvcC5zcGxpdCgnJyk7XG4gIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgY29uc3QgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tiXSB8fCAnJztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGlyZWN0aW9uKSA/IGRpcmVjdGlvbi5tYXAoZGlyID0+IHByb3BlcnR5ICsgZGlyKSA6IFtwcm9wZXJ0eSArIGRpcmVjdGlvbl07XG59KTtcbmNvbnN0IG1hcmdpbktleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAnbWFyZ2luSW5saW5lJywgJ21hcmdpbklubGluZVN0YXJ0JywgJ21hcmdpbklubGluZUVuZCcsICdtYXJnaW5CbG9jaycsICdtYXJnaW5CbG9ja1N0YXJ0JywgJ21hcmdpbkJsb2NrRW5kJ107XG5jb25zdCBwYWRkaW5nS2V5cyA9IFsncCcsICdwdCcsICdwcicsICdwYicsICdwbCcsICdweCcsICdweScsICdwYWRkaW5nJywgJ3BhZGRpbmdUb3AnLCAncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnLCAncGFkZGluZ1gnLCAncGFkZGluZ1knLCAncGFkZGluZ0lubGluZScsICdwYWRkaW5nSW5saW5lU3RhcnQnLCAncGFkZGluZ0lubGluZUVuZCcsICdwYWRkaW5nQmxvY2snLCAncGFkZGluZ0Jsb2NrU3RhcnQnLCAncGFkZGluZ0Jsb2NrRW5kJ107XG5jb25zdCBzcGFjaW5nS2V5cyA9IFsuLi5tYXJnaW5LZXlzLCAuLi5wYWRkaW5nS2V5c107XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlVbml0KHRoZW1lLCB0aGVtZUtleSwgZGVmYXVsdFZhbHVlLCBwcm9wTmFtZSkge1xuICBjb25zdCB0aGVtZVNwYWNpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwgZGVmYXVsdFZhbHVlO1xuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWJzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogRXhwZWN0ZWQgJHtwcm9wTmFtZX0gYXJndW1lbnQgdG8gYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcsIGdvdCAke2Fic30uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZyAqIGFicztcbiAgICB9O1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhYnMpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIGFycmF5IHR5cGUgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggbm9uIGludGVnZXIgdmFsdWVzLmAgKyBgWW91IHNob3VsZCBlaXRoZXIgdXNlIGFuIGludGVnZXIgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBpbmRleCwgb3IgZGVmaW5lIHRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcyBhIG51bWJlci5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKCR7YWJzfSkgb3ZlcmZsb3dzLmAsIGBUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6ICR7SlNPTi5zdHJpbmdpZnkodGhlbWVTcGFjaW5nKX0uYCwgYCR7YWJzfSA+ICR7dGhlbWVTcGFjaW5nLmxlbmd0aCAtIDF9LCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nW2Fic107XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIHZhbHVlICgke3RoZW1lU3BhY2luZ30pIGlzIGludmFsaWQuYCwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gIH1cblxuICByZXR1cm4gKCkgPT4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSkge1xuICByZXR1cm4gY3JlYXRlVW5hcnlVbml0KHRoZW1lLCAnc3BhY2luZycsIDgsICdzcGFjaW5nJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSkge1xuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3N0cmluZycgfHwgcHJvcFZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gcHJvcFZhbHVlO1xuICB9XG5cbiAgY29uc3QgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuXG4gIGlmIChwcm9wVmFsdWUgPj0gMCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHJhbnNmb3JtZWQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIC10cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIHJldHVybiBgLSR7dHJhbnNmb3JtZWR9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIHByb3BWYWx1ZSA9PiBjc3NQcm9wZXJ0aWVzLnJlZHVjZSgoYWNjLCBjc3NQcm9wZXJ0eSkgPT4ge1xuICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDc3NQcm9wZXJ0eShwcm9wcywga2V5cywgcHJvcCwgdHJhbnNmb3JtZXIpIHtcbiAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAyOCBpdGVtcyxcbiAgLy8gaXQncyBkb2Vzbid0IHdvcnRoIHRoZSBidW5kbGUgc2l6ZS5cbiAgaWYgKGtleXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHN0eWxlKHByb3BzLCBrZXlzKSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHByb3BzLnRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcCA9PiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXJnaW4ocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBtYXJnaW5LZXlzKTtcbn1cbm1hcmdpbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gbWFyZ2luS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5tYXJnaW4uZmlsdGVyUHJvcHMgPSBtYXJnaW5LZXlzO1xuZXhwb3J0IGZ1bmN0aW9uIHBhZGRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBwYWRkaW5nS2V5cyk7XG59XG5wYWRkaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBwYWRkaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5wYWRkaW5nLmZpbHRlclByb3BzID0gcGFkZGluZ0tleXM7XG5cbmZ1bmN0aW9uIHNwYWNpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBzcGFjaW5nS2V5cyk7XG59XG5cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gYXJnID0+IHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoKG9iaiwgcGF0aCkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgJiYgYWNjW2l0ZW1dID8gYWNjW2l0ZW1dIDogbnVsbCwgb2JqKTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsLCB1c2VyVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCkge1xuICBsZXQgdmFsdWU7XG5cbiAgaWYgKHR5cGVvZiB0aGVtZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZyhwcm9wVmFsdWVGaW5hbCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmdbcHJvcFZhbHVlRmluYWxdIHx8IHVzZXJWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGdldFBhdGgodGhlbWVNYXBwaW5nLCBwcm9wVmFsdWVGaW5hbCkgfHwgdXNlclZhbHVlO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybSkge1xuICAgIHZhbHVlID0gdHJhbnNmb3JtKHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gc3R5bGUob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcHJvcCxcbiAgICBjc3NQcm9wZXJ0eSA9IG9wdGlvbnMucHJvcCxcbiAgICB0aGVtZUtleSxcbiAgICB0cmFuc2Zvcm1cbiAgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzW3Byb3BdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgY29uc3QgdGhlbWVNYXBwaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IHt9O1xuXG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlRmluYWwgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsKTtcblxuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNzc1Byb3BlcnR5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjc3NQcm9wZXJ0eV06IHZhbHVlXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfTtcblxuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICAgIFtwcm9wXTogcmVzcG9uc2l2ZVByb3BUeXBlXG4gIH0gOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBbcHJvcF07XG4gIHJldHVybiBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiaW1wb3J0IG1lcmdlIGZyb20gJy4uL21lcmdlJztcbmltcG9ydCBnZXRUaGVtZVZhbHVlLCB7IHByb3BUb1N0eWxlRnVuY3Rpb24gfSBmcm9tICcuLi9nZXRUaGVtZVZhbHVlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QsIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vYnJlYWtwb2ludHMnO1xuXG5mdW5jdGlvbiBvYmplY3RzSGF2ZVNhbWVLZXlzKC4uLm9iamVjdHMpIHtcbiAgY29uc3QgYWxsS2V5cyA9IG9iamVjdHMucmVkdWNlKChrZXlzLCBvYmplY3QpID0+IGtleXMuY29uY2F0KE9iamVjdC5rZXlzKG9iamVjdCkpLCBbXSk7XG4gIGNvbnN0IHVuaW9uID0gbmV3IFNldChhbGxLZXlzKTtcbiAgcmV0dXJuIG9iamVjdHMuZXZlcnkob2JqZWN0ID0+IHVuaW9uLnNpemUgPT09IE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gY2FsbElmRm4obWF5YmVGbiwgYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgbWF5YmVGbiA9PT0gJ2Z1bmN0aW9uJyA/IG1heWJlRm4oYXJnKSA6IG1heWJlRm47XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb25TeChwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3gsXG4gICAgdGhlbWUgPSB7fVxuICB9ID0gcHJvcHMgfHwge307XG5cbiAgaWYgKCFzeCkge1xuICAgIHJldHVybiBudWxsOyAvLyBlbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMgd2lsbCBuZWdsZWN0IG51bGxcbiAgfVxuICAvKlxuICAgKiBSZWNlaXZlIGBzeElucHV0YCBhcyBvYmplY3Qgb3IgY2FsbGJhY2tcbiAgICogYW5kIHRoZW4gcmVjdXJzaXZlbHkgY2hlY2sga2V5cyAmIHZhbHVlcyB0byBjcmVhdGUgbWVkaWEgcXVlcnkgb2JqZWN0IHN0eWxlcy5cbiAgICogKHRoZSByZXN1bHQgd2lsbCBiZSB1c2VkIGluIGBzdHlsZWRgKVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHRyYXZlcnNlKHN4SW5wdXQpIHtcbiAgICBsZXQgc3hPYmplY3QgPSBzeElucHV0O1xuXG4gICAgaWYgKHR5cGVvZiBzeElucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzeE9iamVjdCA9IHN4SW5wdXQodGhlbWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN4SW5wdXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAvLyB2YWx1ZVxuICAgICAgcmV0dXJuIHN4SW5wdXQ7XG4gICAgfVxuXG4gICAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCh0aGVtZS5icmVha3BvaW50cyk7XG4gICAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyk7XG4gICAgbGV0IGNzcyA9IGVtcHR5QnJlYWtwb2ludHM7XG4gICAgT2JqZWN0LmtleXMoc3hPYmplY3QpLmZvckVhY2goc3R5bGVLZXkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBjYWxsSWZGbihzeE9iamVjdFtzdHlsZUtleV0sIHRoZW1lKTtcblxuICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAocHJvcFRvU3R5bGVGdW5jdGlvbltzdHlsZUtleV0pIHtcbiAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGJyZWFrcG9pbnRzVmFsdWVzID0gaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgfSwgdmFsdWUsIHggPT4gKHtcbiAgICAgICAgICAgICAgW3N0eWxlS2V5XTogeFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBpZiAob2JqZWN0c0hhdmVTYW1lS2V5cyhicmVha3BvaW50c1ZhbHVlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgIGNzc1tzdHlsZUtleV0gPSBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgICAgICAgICAgIHN4OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgYnJlYWtwb2ludHNWYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzS2V5cywgY3NzKTtcbiAgfVxuXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHN4KSA/IHN4Lm1hcCh0cmF2ZXJzZSkgOiB0cmF2ZXJzZShzeCk7XG59XG5cbnN0eWxlRnVuY3Rpb25TeC5maWx0ZXJQcm9wcyA9IFsnc3gnXTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlRnVuY3Rpb25TeDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBUaGVtZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgdXNlVGhlbWVXaXRob3V0RGVmYXVsdCBmcm9tICcuL3VzZVRoZW1lV2l0aG91dERlZmF1bHQnO1xuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5cbmZ1bmN0aW9uIHVzZVRoZW1lKGRlZmF1bHRUaGVtZSA9IHN5c3RlbURlZmF1bHRUaGVtZSkge1xuICByZXR1cm4gdXNlVGhlbWVXaXRob3V0RGVmYXVsdChkZWZhdWx0VGhlbWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VUaGVtZTsiLCJpbXBvcnQgeyB1c2VUaGVtZSBhcyBtdWlVc2VUaGVtZSB9IGZyb20gJ0BtdWkvcHJpdmF0ZS10aGVtaW5nJztcblxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuXG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBudWxsKSB7XG4gIGNvbnN0IGNvbnRleHRUaGVtZSA9IG11aVVzZVRoZW1lKCk7XG4gIHJldHVybiAhY29udGV4dFRoZW1lIHx8IGlzT2JqZWN0RW1wdHkoY29udGV4dFRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IGNvbnRleHRUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgY29uc3QgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGVtZTtcbn0iLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiLi9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgaW4gdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgY2FwaXRhbGl6ZShzdHJpbmcpXFxgIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn0iLCIvKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvbi5cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKC4uLmZ1bmNzKSB7XG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoKGFjYywgZnVuYykgPT4ge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sICgpID0+IHt9KTtcbn0iLCIvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4vLyBBIGZldyBieXRlcyBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzIH4zIGtCIGFuZCBkZWJvdW5jZSB+MzAwIEIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0ID0gMTY2KSB7XG4gIGxldCB0aW1lb3V0O1xuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCguLi5hcmdzKSB7XG4gICAgY29uc3QgbGF0ZXIgPSAoKSA9PiB7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICB9XG5cbiAgZGVib3VuY2VkLmNsZWFyID0gKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgfTtcblxuICByZXR1cm4gZGVib3VuY2VkO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICByZXR1cm4gaXRlbSAhPT0gbnVsbCAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zID0ge1xuICBjbG9uZTogdHJ1ZVxufSkge1xuICBjb25zdCBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG5cbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmIGtleSBpbiB0YXJnZXQgJiYgaXNQbGFpbk9iamVjdCh0YXJnZXRba2V5XSkpIHtcbiAgICAgICAgLy8gU2luY2UgYG91dHB1dGAgaXMgYSBjbG9uZSBvZiBgdGFyZ2V0YCBhbmQgd2UgaGF2ZSBuYXJyb3dlZCBgdGFyZ2V0YCBpbiB0aGlzIGJsb2NrIHdlIGNhbiBjYXN0IHRvIHRoZSBzYW1lIHR5cGUuXG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCIvKipcbiAqIFdBUk5JTkc6IERvbid0IGltcG9ydCB0aGlzIGRpcmVjdGx5LlxuICogVXNlIGBNdWlFcnJvcmAgZnJvbSBgQG11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgbGV0IHVybCA9ICdodHRwczovL211aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIHJlc3QgcGFyYW1zIG92ZXItdHJhbnNwaWxlIGZvciB0aGlzIGNhc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdXJsICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuXG4gIHJldHVybiAnTWluaWZpZWQgTVVJIGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyB1cmwgKyAnIGZvciB0aGUgZnVsbCBtZXNzYWdlLic7XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXRlbXBsYXRlICovXG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn0iLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuL293bmVyRG9jdW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KG5vZGUpO1xuICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbn0iLCIvKipcbiAqIFRPRE8gdjU6IGNvbnNpZGVyIG1ha2luZyBpdCBwcml2YXRlXG4gKlxuICogcGFzc2VzIHt2YWx1ZX0gdG8ge3JlZn1cbiAqXG4gKiBXQVJOSU5HOiBCZSBzdXJlIHRvIG9ubHkgY2FsbCB0aGlzIGluc2lkZSBhIGNhbGxiYWNrIHRoYXQgaXMgcGFzc2VkIGFzIGEgcmVmLlxuICogT3RoZXJ3aXNlLCBtYWtlIHN1cmUgdG8gY2xlYW51cCB0aGUgcHJldmlvdXMge3JlZn0gaWYgaXQgY2hhbmdlcy4gU2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXVpLW9yZy9tYXRlcmlhbC11aS9pc3N1ZXMvMTM1MzlcbiAqXG4gKiBVc2VmdWwgaWYgeW91IHdhbnQgdG8gZXhwb3NlIHRoZSByZWYgb2YgYW4gaW5uZXIgY29tcG9uZW50IHRvIHRoZSBwdWJsaWMgQVBJXG4gKiB3aGlsZSBzdGlsbCB1c2luZyBpdCBpbnNpZGUgdGhlIGNvbXBvbmVudC5cbiAqIEBwYXJhbSByZWYgQSByZWYgY2FsbGJhY2sgb3IgcmVmIG9iamVjdC4gSWYgYW55dGhpbmcgZmFsc3ksIHRoaXMgaXMgYSBuby1vcC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmVmKHJlZiwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYodmFsdWUpO1xuICB9IGVsc2UgaWYgKHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH1cbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcywgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDb250cm9sbGVkKHtcbiAgY29udHJvbGxlZCxcbiAgZGVmYXVsdDogZGVmYXVsdFByb3AsXG4gIG5hbWUsXG4gIHN0YXRlID0gJ3ZhbHVlJ1xufSkge1xuICAvLyBpc0NvbnRyb2xsZWQgaXMgaWdub3JlZCBpbiB0aGUgaG9vayBkZXBlbmRlbmN5IGxpc3RzIGFzIGl0IHNob3VsZCBuZXZlciBjaGFuZ2UuXG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZihjb250cm9sbGVkICE9PSB1bmRlZmluZWQpO1xuICBjb25zdCBbdmFsdWVTdGF0ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFByb3ApO1xuICBjb25zdCB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IGNvbnRyb2xsZWQgOiB2YWx1ZVN0YXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChpc0NvbnRyb2xsZWQgIT09IChjb250cm9sbGVkICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSAke2lzQ29udHJvbGxlZCA/ICcnIDogJ3VuJ31jb250cm9sbGVkICR7c3RhdGV9IHN0YXRlIG9mICR7bmFtZX0gdG8gYmUgJHtpc0NvbnRyb2xsZWQgPyAndW4nIDogJyd9Y29udHJvbGxlZC5gLCAnRWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuJywgYERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJHtuYW1lfSBgICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LicsIFwiVGhlIG5hdHVyZSBvZiB0aGUgc3RhdGUgaXMgZGV0ZXJtaW5lZCBkdXJpbmcgdGhlIGZpcnN0IHJlbmRlci4gSXQncyBjb25zaWRlcmVkIGNvbnRyb2xsZWQgaWYgdGhlIHZhbHVlIGlzIG5vdCBgdW5kZWZpbmVkYC5cIiwgJ01vcmUgaW5mbzogaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW3N0YXRlLCBuYW1lLCBjb250cm9sbGVkXSk7XG4gICAgY29uc3Qge1xuICAgICAgY3VycmVudDogZGVmYXVsdFZhbHVlXG4gICAgfSA9IFJlYWN0LnVzZVJlZihkZWZhdWx0UHJvcCk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmICghaXNDb250cm9sbGVkICYmIGRlZmF1bHRWYWx1ZSAhPT0gZGVmYXVsdFByb3ApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlIGRlZmF1bHQgJHtzdGF0ZX0gc3RhdGUgb2YgYW4gdW5jb250cm9sbGVkICR7bmFtZX0gYWZ0ZXIgYmVpbmcgaW5pdGlhbGl6ZWQuIGAgKyBgVG8gc3VwcHJlc3MgdGhpcyB3YXJuaW5nIG9wdCB0byB1c2UgYSBjb250cm9sbGVkICR7bmFtZX0uYF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtKU09OLnN0cmluZ2lmeShkZWZhdWx0UHJvcCldKTtcbiAgfVxuXG4gIGNvbnN0IHNldFZhbHVlSWZVbmNvbnRyb2xsZWQgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdWYWx1ZSA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVJZlVuY29udHJvbGxlZF07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICcuL3VzZUVuaGFuY2VkRWZmZWN0Jztcbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDA5OSNpc3N1ZWNvbW1lbnQtNDQwMDEzODkyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjayhmbikge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYoZm4pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjaygoLi4uYXJncykgPT4gLy8gQHRzLWV4cGVjdC1lcnJvciBoaWRlIGB0aGlzYFxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLWNvbW1hLW9wZXJhdG9yXG4gICgwLCByZWYuY3VycmVudCkoLi4uYXJncyksIFtdKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4vc2V0UmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcmtSZWYocmVmQSwgcmVmQikge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmIHByb3BzIGNoYW5nZSBhbmQgYXJlIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3IuXG4gICAqL1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKHJlZkEgPT0gbnVsbCAmJiByZWZCID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZWZWYWx1ZSA9PiB7XG4gICAgICBzZXRSZWYocmVmQSwgcmVmVmFsdWUpO1xuICAgICAgc2V0UmVmKHJlZkIsIHJlZlZhbHVlKTtcbiAgICB9O1xuICB9LCBbcmVmQSwgcmVmQl0pO1xufSIsIi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi92NC4xLjUvc3JjL2ZvY3VzLXZpc2libGUuanNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xubGV0IGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dDtcbmNvbnN0IGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG4vKipcbiAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIHRhZ05hbWVcbiAgfSA9IG5vZGU7XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdJTlBVVCcgJiYgaW5wdXRUeXBlc1doaXRlbGlzdFt0eXBlXSAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gIGlmIChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlUG9pbnRlckRvd24oKSB7XG4gIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlYXJkb3duKGRvYykge1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShldmVudCkge1xuICBjb25zdCB7XG4gICAgdGFyZ2V0XG4gIH0gPSBldmVudDtcblxuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsvLyBCcm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvci5cbiAgICAvLyBXZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzLlxuICAgIC8vIFJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gICAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIH0gLy8gTm8gbmVlZCBmb3IgdmFsaWRGb2N1c1RhcmdldCBjaGVjay4gVGhlIHVzZXIgZG9lcyB0aGF0IGJ5IGF0dGFjaGluZyBpdCB0b1xuICAvLyBmb2N1c2FibGUgZXZlbnRzIG9ubHkuXG5cblxuICByZXR1cm4gaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSh0YXJnZXQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJc0ZvY3VzVmlzaWJsZSgpIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgcHJlcGFyZShub2RlLm93bmVyRG9jdW1lbnQpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBpc0ZvY3VzVmlzaWJsZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZFxuICAgKi9cblxuICBmdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgICAvLyBjaGVja2luZyBhZ2FpbnN0IHBvdGVudGlhbCBzdGF0ZSB2YXJpYWJsZSBkb2VzIG5vdCBzdWZmaWNlIGlmIHdlIGZvY3VzIGFuZCBibHVyIHN5bmNocm9ub3VzbHkuXG4gICAgLy8gUmVhY3Qgd291bGRuJ3QgaGF2ZSB0aW1lIHRvIHRyaWdnZXIgYSByZS1yZW5kZXIgc28gYGZvY3VzVmlzaWJsZWAgd291bGQgYmUgc3RhbGUuXG4gICAgLy8gSWRlYWxseSB3ZSB3b3VsZCBhZGp1c3QgYGlzRm9jdXNWaXNpYmxlKGV2ZW50KWAgdG8gbG9vayBhdCBgcmVsYXRlZFRhcmdldGAgZm9yIGJsdXIgZXZlbnRzLlxuICAgIC8vIFRoaXMgZG9lc24ndCB3b3JrIGluIElFMTEgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzc1MVxuICAgIC8vIFRPRE86IGNoZWNrIGFnYWluIGlmIFJlYWN0IHJlbGVhc2VzIHRoZWlyIGludGVybmFsIGNoYW5nZXMgdG8gZm9jdXMgZXZlbnQgaGFuZGxpbmcgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzE5MTg2KS5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCkge1xuICAgICAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAgICAgLy8gcmFwaWRseSBieSBhIHZpc2liaWxpdHkgY2hhbmdlLlxuICAgICAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgICAgIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSB0cnVlO1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgICAgfSwgMTAwKTtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG5cblxuICBmdW5jdGlvbiBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpIHtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQpKSB7XG4gICAgICBpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmXG4gIH07XG59IiwiXG4vKipcbiAqIEV4cG9zZSBgRW1pdHRlcmAuXG4gKi9cblxuZXhwb3J0cy5FbWl0dGVyID0gRW1pdHRlcjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xufVxuXG4vKipcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub24gPVxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxuICAgIC5wdXNoKGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcbiAgZnVuY3Rpb24gb24oKSB7XG4gICAgdGhpcy5vZmYoZXZlbnQsIG9uKTtcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgb24uZm4gPSBmbjtcbiAgdGhpcy5vbihldmVudCwgb24pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcblxuICAvLyBhbGxcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG4gIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcblxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXG4gIGlmICgxID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXG4gIHZhciBjYjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcbiAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBldmVudCBzcGVjaWZpYyBhcnJheXMgZm9yIGV2ZW50IHR5cGVzIHRoYXQgbm9cbiAgLy8gb25lIGlzIHN1YnNjcmliZWQgZm9yIHRvIGF2b2lkIG1lbW9yeSBsZWFrLlxuICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtNaXhlZH0gLi4uXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcblxuICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSlcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgfVxuXG4gIGlmIChjYWxsYmFja3MpIHtcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gYWxpYXMgdXNlZCBmb3IgcmVzZXJ2ZWQgZXZlbnRzIChwcm90ZWN0ZWQgbWV0aG9kKVxuRW1pdHRlci5wcm90b3R5cGUuZW1pdFJlc2VydmVkID0gRW1pdHRlci5wcm90b3R5cGUuZW1pdDtcblxuLyoqXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuICAgIHZhciByZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIHZhciBvbkNhbmNlbGVkO1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCAgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gJ0VUSU1FRE9VVCcgOiAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuIHx8IGNvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCAoY2FuY2VsICYmIGNhbmNlbC50eXBlKSA/IG5ldyBDYW5jZWwoJ2NhbmNlbGVkJykgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5heGlvcy5WRVJTSU9OID0gcmVxdWlyZSgnLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpO1xuICAgIHZhciBsID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgfVxuICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbiA9IGZ1bmN0aW9uKG9uZnVsZmlsbGVkKSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICB9XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0b3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsO1xuXG4gIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gIHZhciByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB2YXIgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciBwcm9taXNlO1xuXG4gIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcblxuICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgY2hhaW4gPSBjaGFpbi5jb25jYXQocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcblxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cblxuICB2YXIgbmV3Q29uZmlnID0gY29uZmlnO1xuICB3aGlsZSAocmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgdmFyIG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB2YXIgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdHJ5IHtcbiAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG9uUmVqZWN0ZWQoZXJyb3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0KG5ld0NvbmZpZyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuXG4gIHdoaWxlIChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsKCdjYW5jZWxlZCcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lcmdlTWFwID0ge1xuICAgICd1cmwnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdtZXRob2QnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdkYXRhJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnYmFzZVVSTCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlcXVlc3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXNwb25zZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3BhcmFtc1NlcmlhbGl6ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dE1lc3NhZ2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoQ3JlZGVudGlhbHMnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdhZGFwdGVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VUeXBlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkNvb2tpZU5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmSGVhZGVyTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uVXBsb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvbkRvd25sb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdkZWNvbXByZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Q29udGVudExlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heEJvZHlMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vY29yZS9lbmhhbmNlRXJyb3InKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDoge1xuICAgIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG4gIH0sXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSB8fCAoaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICB2YXIgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgIHZhciBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgdmFyIHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcgfHwgKGZvcmNlZEpTT05QYXJzaW5nICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmIGRhdGEubGVuZ3RoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IGVuaGFuY2VFcnJvcihlLCB0aGlzLCAnRV9KU09OX1BBUlNFJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwidmVyc2lvblwiOiBcIjAuMjMuMFwiXG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuICh0eXBlb2YgcGF5bG9hZCA9PT0gJ29iamVjdCcpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSkpO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiY29uc3QgRXZlbnRzID0ge1xuICAgIENvbm5lY3Q6IFwiY29ubmVjdGlvblwiLFxuICAgIERpc2Nvbm5lY3Q6IFwiZGlzY29ubmVjdGVkXCIsXG4gICAgRXJyb3I6IFwiY29ubmVjdF9lcnJvclwiLFxuICAgIEludmFsaWRVc2VySWQ6IFwiaW52YWxpZCB1c2VyIGlkXCIsXG4gICAgTWVzc2FnZTogXCJtZXNzYWdlXCIsXG4gICAgTWVzc2FnZUZhaWx1cmU6IFwibWVzc2FnZSBzZW5kIGVycm9yXCJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRzO1xuIiwiLyoqXG4gKiBPdXRsaW5lcyB0aGUgdHlwZSBvZiBncm91cCB0aGF0IGEgc3R1ZHkgZ3JvdXAgY2FuIGJlLFxuICogaWdub3Jpbmcgd2hldGhlciBvciBub3QgdGhlIGdyb3VwIGlzIGEgdHV0b3IgZ3JvdXAuXG4gKiBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBtZWV0aW5nIHByZWZlcmVuY2Ugb2ZcbiAqIGEgc3R1ZHkgZ3JvdXAuIFRoaXMgaXMgdXNlZCB3aGVuIHNlYXJjaGluZyBmb3Igc3R1ZHkgZ3JvdXBzLlxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAqIEBkYXRlICAgMDEvMjUvMjAyMlxuICovXG5jb25zdCBNZWV0aW5nRm9ybWF0cyA9IHtcbiAgICBJblBlcnNvbjogXCJJbiBwZXJzb25cIixcbiAgICBNaXhlZDogXCJJbiBwZXJzb24gb3Igb25saW5lXCIsXG4gICAgT25saW5lOiBcIk9ubGluZVwiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBNZWV0aW5nRm9ybWF0cztcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgcG9zc2libGUgdHlwZXMgb2YgcG9zdHMgc3R1ZHkgZ3JvdXAgbWVtYmVycyBjYW4gbWFrZS5cbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgIDAxLzE0LzIwMjJcbiAqL1xuY29uc3QgUG9zdFR5cGVzID0ge1xuICAgIEFubm91bmNlbWVudDogXCJBbm5vdW5jZW1lbnRcIixcbiAgICBEaXNjdXNzaW9uOiBcIkRpc2N1c3Npb25cIixcbiAgICBRdWVzdGlvbjogXCJRdWVzdGlvblwiLFxuICAgIFByb2JsZW06IFwiUHJvYmxlbVwiLFxuICAgIE1lZXRpbmc6IFwiTWVldGluZ1wiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBQb3N0VHlwZXM7XG4iLCIvKipcbiAqIFRoZSBzdWJqZWN0cyB0aGF0IGEgZ3JvdXAgY2FuIGNob29zZSB0byBzdXBwb3J0LlxuICpcbiAqL1xuY29uc3QgU3ViamVjdHMgPSB7XG4gICAgQW55OiBcIkFueVwiLFxuICAgIEhpc3Rvcnk6IFwiSGlzdG9yeVwiLFxuICAgIExpdGVyYXR1cmU6IFwiTGl0ZXJhdHVyZVwiLFxuICAgIE1hdGg6IFwiTWF0aFwiLFxuICAgIFNjaWVuY2U6IFwiU2NpZW5jZVwiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBTdWJqZWN0cztcbiIsIi8vIFRoZSBmb2xsb3dpbmcgZW51bWVyYXRpb25zIGFyZSB1c2VkIHRvIHNpbXBsaWZ5IHRoZSBwcm9jZXNzIG9mIHdvcmtpbmcgd2l0aCBtZWV0aW5ncyBhbmQgdGltZS5cbmNvbnN0IERheXMgPSB7XG4gICAgTW9uZGF5OiBcIk1vbmRheVwiLFxuICAgIFR1ZXNkYXk6IFwiVHVlc2RheVwiLFxuICAgIFdlZG5lc2RheTogXCJXZWRuZXNkYXlcIixcbiAgICBUaHVyc2RheTogXCJUaHVyc2RheVwiLFxuICAgIEZyaWRheTogXCJGcmlkYXlcIixcbiAgICBTYXR1cmRheTogXCJTYXR1cmRheVwiLFxuICAgIFN1bmRheTogXCJTdW5kYXlcIlxufTtcbmNvbnN0IE1lZXRpbmdGcmVxdWVuY2llcyA9IHtcbiAgICBEYWlseTogXCJEYWlseVwiLFxuICAgIE1vbnRobHk6IFwiTW9udGhseVwiLFxuICAgIE9uZVRpbWU6IFwiT25lLXRpbWVcIixcbiAgICBXZWVrbHk6IFwiV2Vla2x5XCIsXG4gICAgWWVhcmx5OiBcIlllYXJseVwiXG59O1xuY29uc3QgUGFydE9mRGF5ID0ge1xuICAgIEFtOiBcIkFNXCIsXG4gICAgUG06IFwiUE1cIlxufTtcbmxldCBUaW1lcyA9IFtdO1xuWy4uLkFycmF5KDEyKS5rZXlzKCldLm1hcCgoaG91cikgPT4ge1xuICAgIGNvbnN0IE1pbnV0ZXMgPSBbXCIwMFwiLCBcIjE1XCIsIFwiMzBcIiwgXCI0NVwiXTtcbiAgICBNaW51dGVzLm1hcCgobWludXRlKSA9PiB7XG4gICAgICAgIFRpbWVzLnB1c2goYCR7aG91cn06JHttaW51dGV9YCk7XG4gICAgfSk7XG59KTtcblxuLyoqXG4gKiBBIG1vZGVsIGZvciByZXByZXNlbnRpbmcgdGltZS5cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBob3VyIFRoZSBob3VyIGNvbXBvbmVudCBvZiB0aW1lICgxMi1ob3VyIGZvcm1hdCkuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gbWludXRlIFRoZSBtaW51dGUgY29tcG9uZW50IG9mIHRpbWUuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcGFydE9mRGF5IFRoZSBwYXJ0IG9mIHRoZSBkYXkgKEFNIG9yIFBNKS5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDAxLzI4LzIwMjJcbiAqL1xuY2xhc3MgVGltZSB7XG4gICAgY29uc3RydWN0b3IoaG91ciwgbWludXRlLCBwYXJ0T2ZEYXkpIHtcbiAgICAgICAgdGhpcy5ob3VyID0gaG91cjtcbiAgICAgICAgdGhpcy5taW51dGUgPSBtaW51dGU7XG4gICAgICAgIHRoaXMucGFydE9mRGF5ID0gcGFydE9mRGF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBvbmUgdGltZSBpcyBhZnRlciBhbm90aGVyLlxuICAgICAqIEBwYXJhbSB7VGltZX0gbGF0ZXJUaW1lIFRoZSB0aW1lIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHRoZSBzZWNvbmQgdGltZSBjb21lcyBiZWZvcmUgdGhlIGZpcnN0LCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDAxLzI4LzIwMjJcbiAgICAgKi9cbiAgICBpc0FmdGVyKGZpcnN0VGltZSkge1xuICAgICAgICBsZXQgaXNBZnRlciA9IGZhbHNlO1xuICAgICAgICBsZXQgaG91ciA9IHBhcnNlSW50KHRoaXMuaG91cik7XG4gICAgICAgIGxldCBmaXJzdEhvdXIgPSBwYXJzZUludChmaXJzdFRpbWUuaG91cik7XG4gICAgICAgIGxldCBtaW51dGUgPSBwYXJzZUludCh0aGlzLm1pbnV0ZSk7XG4gICAgICAgIGxldCBmaXJzdE1pbnV0ZSA9IHBhcnNlSW50KGZpcnN0VGltZS5taW51dGUpO1xuICAgICAgICAvLyBJZiB0aGUgdGltZXMgYXJlIGJvdGggQU0gb3IgYm90aCBQTS5cbiAgICAgICAgaWYgKHRoaXMucGFydE9mRGF5ID09PSBmaXJzdFRpbWUucGFydE9mRGF5KSB7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGhvdXIgY29tZXMgYWZ0ZXIgdGhlIGZpcnN0IGhvdXIuXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJ0T2ZEYXkgPT09IFBhcnRPZkRheS5BbSkge1xuICAgICAgICAgICAgICAgIGhvdXIgPSBob3VyICUgMTI7XG4gICAgICAgICAgICAgICAgZmlyc3RIb3VyID0gZmlyc3RIb3VyICUgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaG91ciA+IGZpcnN0SG91cikge1xuICAgICAgICAgICAgICAgIGlzQWZ0ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaG91ciBjb21lcyBiZWZvcmUgdGhlIGZpcnN0IGhvdXIuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCBmaXJzdEhvdXIpIHtcbiAgICAgICAgICAgICAgICBpc0FmdGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGhvdXJzIGFyZSBlcXVhbC5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXNBZnRlciA9IG1pbnV0ZSA+IGZpcnN0TWludXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhpcyB0aW1lIG9mIGRheSBjb21lcyBhZnRlciB0aGUgZmlyc3QgdGltZSBvZiBkYXkuXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJ0T2ZEYXkgPiBmaXJzdFRpbWUucGFydE9mRGF5KSB7XG4gICAgICAgICAgICBpc0FmdGVyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzQWZ0ZXIgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBZnRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBhIGdpdmVuIG1lZXRpbmcgdGltZSBpcyBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kaW5nXG4gICAgICogb2YgYSB1c2VyJ3MgYXZhaWxhYmlsaXR5IHRpbWVzLlxuICAgICAqIEBwYXJhbSB7VGltZX0gbWVldGluZ1RpbWUgVGhlIHRpbWUgb2YgdGhlIG1lZXRpbmcuXG4gICAgICogQHBhcmFtIHtUaW1lfSBzdGFydFRpbWUgVGhlIHRpbWUgYXZhaWxhYmlsaXR5IHN0YXJ0cy5cbiAgICAgKiBAcGFyYW0ge1RpbWV9IGVuZFRpbWUgVGhlIHRpbWUgYXZhaWxhYmlsaXR5IGVuZHMuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWVldGluZyB0aW1lIGlzIGJldHdlZW4gdGhlIHR3byB0aW1lcywgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMS8yOC8yMDIyXG4gICAgICovXG4gICAgaXNCZXR3ZWVuKHN0YXJ0VGltZSwgZW5kVGltZSkge1xuICAgICAgICBjb25zdCBzdGFydFRpbWVJc1ZhbGlkID0gdGhpcy5pc0FmdGVyKHN0YXJ0VGltZSk7XG4gICAgICAgIGNvbnN0IGVuZFRpbWVJc1ZhbGlkID0gZW5kVGltZS5pc0FmdGVyKHRoaXMpO1xuICAgICAgICByZXR1cm4gc3RhcnRUaW1lSXNWYWxpZCAmJiBlbmRUaW1lSXNWYWxpZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIHRpbWUgZnJvbSBhIDI0LWhvdXIgZm9ybWF0IHRpbWUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0aW1lU3RyaW5nIFRoZSB0aW1lIHN0cmluZyB0byBwYXJzZS5cbiAgICAgKiBAcmV0dXJuIHtUaW1lfSBUaGUgdGltZSBvYmplY3QuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDAyLzAxLzIwMjJcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIHBhcnNlMjRIb3VyVGltZVN0cmluZyh0aW1lU3RyaW5nKSB7XG4gICAgICAgIC8vIFRoZSB0aW1lIHN0cmluZyB3aWxsIGJlIGluIGEgcHJlZGljdGFibGUgZm9ybWF0LlxuICAgICAgICBjb25zdCBDT0xPTiA9IFwiOlwiO1xuICAgICAgICB0aW1lU3RyaW5nID0gU3RyaW5nKHRpbWVTdHJpbmcpO1xuICAgICAgICBjb25zdCBjb2xvbkluZGV4ID0gdGltZVN0cmluZy5pbmRleE9mKENPTE9OKTtcbiAgICAgICAgY29uc3QgYmVnaW5uaW5nT2ZUaW1lU3RyaW5nID0gMDtcbiAgICAgICAgbGV0IGhvdXIgPSBwYXJzZUludCh0aW1lU3RyaW5nLnNsaWNlKGJlZ2lubmluZ09mVGltZVN0cmluZywgY29sb25JbmRleCkpO1xuICAgICAgICBjb25zdCBwYXJ0T2ZEYXlJbmRleCA9IHRpbWVTdHJpbmcubGVuZ3RoO1xuICAgICAgICBsZXQgbWludXRlID0gcGFyc2VJbnQodGltZVN0cmluZy5zbGljZShjb2xvbkluZGV4ICsgMSwgcGFydE9mRGF5SW5kZXgpKTtcbiAgICAgICAgbGV0IHBhcnRPZkRheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gQ29udmVydCAyNC1ob3VyIGZvcm1hdCB0byAxMi1ob3VyIGZvcm1hdC5cbiAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgcGFydE9mRGF5ID0gUGFydE9mRGF5LkFtO1xuICAgICAgICAgICAgaWYgKGhvdXIgPT0gMCkge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnRPZkRheSA9IFBhcnRPZkRheS5QbTtcbiAgICAgICAgICAgIGlmIChob3VyID4gMTIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaG91ciA9PSAyNCkge1xuICAgICAgICAgICAgICAgICAgICBob3VyID0gMTE7XG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZSA9IDQ1O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhvdXIgLT0gMTI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFBhZCBudW1iZXJzIHdpdGggemVyb2VzLlxuICAgICAgICBob3VyID0gaG91ciA8IDEwID8gYDAke2hvdXJ9YCA6IGAke2hvdXJ9YDtcbiAgICAgICAgbWludXRlID0gbWludXRlIDwgMTAgPyBgMCR7bWludXRlfWAgOiBgJHttaW51dGV9YDtcbiAgICAgICAgY29uc3QgdGltZSA9IG5ldyBUaW1lKGhvdXIsIG1pbnV0ZSwgcGFydE9mRGF5KTtcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSB0aW1lIGZyb20gYSB0aW1lIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGltZVN0cmluZyBUaGUgdGltZSBzdHJpbmcgdG8gcGFyc2UuXG4gICAgICogQHJldHVybiB7VGltZX0gVGhlIHRpbWUgb2JqZWN0LlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMS8yOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZVRpbWVTdHJpbmcodGltZVN0cmluZykge1xuICAgICAgICAvLyBUaGUgdGltZSBzdHJpbmcgd2lsbCBiZSBpbiBhIHByZWRpY3RhYmxlIGZvcm1hdC5cbiAgICAgICAgY29uc3QgQ09MT04gPSBcIjpcIjtcbiAgICAgICAgY29uc3QgY29sb25JbmRleCA9IHRpbWVTdHJpbmcuaW5kZXhPZihDT0xPTik7XG4gICAgICAgIGNvbnN0IGJlZ2lubmluZ09mVGltZVN0cmluZyA9IDA7XG4gICAgICAgIGNvbnN0IGhvdXIgPSB0aW1lU3RyaW5nLnNsaWNlKGJlZ2lubmluZ09mVGltZVN0cmluZywgY29sb25JbmRleCk7XG4gICAgICAgIGNvbnN0IHBhcnRPZkRheUluZGV4ID0gdGltZVN0cmluZy5sZW5ndGggLSAyO1xuICAgICAgICBjb25zdCBtaW51dGUgPSB0aW1lU3RyaW5nLnNsaWNlKGNvbG9uSW5kZXggKyAxLCBwYXJ0T2ZEYXlJbmRleCk7XG4gICAgICAgIGNvbnN0IHBhcnRPZkRheSA9IHRpbWVTdHJpbmcuc2xpY2UocGFydE9mRGF5SW5kZXgsIHRpbWVTdHJpbmcubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgdGltZSA9IG5ldyBUaW1lKGhvdXIsIG1pbnV0ZSwgcGFydE9mRGF5KTtcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVycyB0aGUgb2JqZWN0IHRvIHN0YW5kYXJkIHRpbWUgc3RyaW5nIHN5bnRheC5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSB0aW1lIGFzIGEgc3RyaW5nLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMi8wMS8yMDIyXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmhvdXJ9OiR7dGhpcy5taW51dGV9JHt0aGlzLnBhcnRPZkRheX1gO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IERheXMsIE1lZXRpbmdGcmVxdWVuY2llcywgUGFydE9mRGF5LCBUaW1lcywgVGltZSB9O1xuIiwiLyoqXG4gKiBEZWZpbmVzIHRoZSByZXNwb25zZSBtZXNzYWdlcyB0aGUgc2VydmVyIGNhbiBzZW5kLlxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAqIEBkYXRlICAgMTAvMDUvMjAyMVxuICovXG5jb25zdCBSZXNwb25zZU1lc3NhZ2VzID0ge1xuICAgIEFjY291bnQ6IHtcbiAgICAgICAgRXJyb3JDaGFuZ2luZ0VtYWlsOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gY2hhbmdlIHRoZSBlbWFpbC5cIixcbiAgICAgICAgRXJyb3JDaGFuZ2luZ1Bhc3N3b3JkOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gY2hhbmdlIHRoZSBwYXNzd29yZC5cIixcbiAgICAgICAgRXJyb3JDcmVhdGVBY2NvdW50OiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gY3JlYXRlIGFuIGFjY291bnQuXCIsXG4gICAgICAgIEVycm9yRGVsZXRlQWNjb3VudDogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGRlbGV0ZSBhbiBhY2NvdW50LlwiLFxuICAgICAgICBFcnJvckludmFsaWRQYXNzd29yZElucHV0OiBcIlRoZSBwYXNzd29yZHMgcHJvdmlkZWQgd2VyZSBpbnZhbGlkLlwiLFxuICAgICAgICBFcnJvclNlbmRpbmdFbWFpbDogXCJUaGVyZSB3YXMgYW4gZXJyb3Igc2VuZGluZyB5b3VyIHZlcmlmaWNhdGlvbiBlbWFpbC5cIixcbiAgICAgICAgRXJyb3JTZXR0aW5nVG9rZW46IFwiVGhlcmUgd2FzIGFuIGVycm9yIHNldHRpbmcgdGhlIHZlcmlmaWNhdGlvbiB0b2tlblwiLFxuICAgICAgICBFcnJvclVwbG9hZFByb2ZpbGVQaWN0dXJlOiBcIlRoZSBmaWxlIHR5cGUgc2VsZWN0ZWQgaXMgbm90IHN1cHBvcnRlZC5cIixcbiAgICAgICAgRW1haWxTZW50OiBcIlZlcmlmaWNhdGlvbiBlbWFpbCBzZW50LlwiLFxuICAgICAgICBOb3RPdmVyMTg6IFwiWW91IG5lZWQgdG8gYmUgMTggb3Igb2xkZXIgdG8gY3JlYXRlIGFuIGFjY291bnQuXCIsXG4gICAgICAgIEludmFsaWRFbWFpbDogXCJUaGUgZW1haWwgYWRkcmVzcyBlbnRlcmVkIGlzIG5vdCB2YWxpZC5cIixcbiAgICAgICAgSW5jb3JyZWN0UGFzc3dvcmQ6IFwiVGhlIHBhc3N3b3JkIHByb3ZpZGVkIGlzIGluY29ycmVjdC5cIixcbiAgICAgICAgSW52YWxpZEFjY291bnRJbnB1dDogXCJPbmUgb3IgbW9yZSBmaWVsZHMgaGF2ZSBiZWVuIGxlZnQgZW1wdHkuXCIsXG4gICAgICAgIFN1Y2Nlc3NBY2NvdW50Q3JlYXRlZDogXCJUaGUgYWNjb3VudCB3YXMgY3JlYXRlZCBzdWNjZXNzZnVsbHkuXCIsXG4gICAgICAgIFN1Y2Nlc3NBY2NvdW50RGVsZXRlZDogXCJUaGUgYWNjb3VudCB3YXMgZGVsZXRlZCBzdWNjZXNzZnVsbHlcIixcbiAgICAgICAgU3VjY2Vzc0FjY291bnRTZXR1cDogXCJUaGUgYWNjb3VudCB3YXMgc2V0dXAgc3VjY2Vzc2Z1bGx5LlwiLFxuICAgICAgICBTdWNjZXNzQ2hhbmdpbmdFbWFpbDogXCJUaGUgZW1haWwgd2FzIGNoYW5nZWQgc3VjY2Vzc2Z1bGx5XCIsXG4gICAgICAgIFN1Y2Nlc3NDaGFuZ2luZ1Bhc3N3b3JkOiBcIlRoZSBwYXNzd29yZCB3YXMgY2hhbmdlZCBzdWNjZXNzZnVsbHlcIixcbiAgICAgICAgU3VjY2Vzc0xvZ2luOiBcIlRoZSBsb2dpbiB3YXMgc3VjY2Vzc2Z1bC5cIixcbiAgICAgICAgU3VjY2Vzc1VwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW46IFwiVGhlIGF1dGhlbnRpY2F0aW9uIHRva2VuIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSB1cGRhdGVkLlwiLFxuICAgICAgICBVbnZlcmlmaWVkVXNlcldhc0ZvdW5kOiBcIlRoZSB1bnZlcmlmaWVkIHVzZXIgd2FzIGZvdW5kLlwiLFxuICAgICAgICBVc2VyQWxyZWFkeUV4aXN0czogXCJBIHVzZXIgd2l0aCB0aGF0IGVtYWlsIGFkZHJlc3MgYWxyZWFkeSBleGlzdHMuXCIsXG4gICAgICAgIFVzZXJOb3RGb3VuZDogXCJUaGUgdXNlciB3YXMgbm90IGZvdW5kLlwiLFxuICAgICAgICBQYXNzd29yZHNNdXN0TWF0Y2g6IFwiVGhlIHBhc3N3b3JkcyBlbnRlcmVkIG11c3QgbWF0Y2guXCIsXG4gICAgICAgIFBhc3N3b3JkVG9vU2hvcnQ6IFwiVGhlIHBhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzLlwiLFxuICAgICAgICBJbmFjdGl2ZUFjY291bnQ6IFwiVGhlIGFjY291bnQgcmVxdWVzdGVkIGlzIG5vdCBhY3RpdmUuXCJcbiAgICB9LFxuICAgIE1lc3NhZ2U6IHtcbiAgICAgICAgRXJyb3JBZGRDb252ZXJzYXRpb246IFwiQW4gZXJyb3Igb2NjdXJycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gYWRkIGEgY29udmVyc2F0aW9uLiBcIixcbiAgICAgICAgRXJyb3JDb252ZXJzYXRpb25FeGlzdHM6IFwiVGhlIGNvbnZlcnNhdGlvbiByZXF1ZXN0ZWQgYWxyZWFkeSBleGlzdHMuXCIsXG4gICAgICAgIEVycm9yR2V0Q29udmVyc2F0aW9uOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gZ2V0IHRoZSBjb252ZXJzYXRpb24uXCIsXG4gICAgICAgIEVycm9yR2V0UmVjZWl2ZXI6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBnZXQgdGhlIHJlY2VpdmVyLlwiLFxuICAgICAgICBFcnJvckNyZWF0ZUNvbnZlcnNhdGlvbjogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGNyZWF0ZSB0aGUgY29udmVyc2F0aW9uLlwiLFxuICAgICAgICBHZXRDb252ZXJzYXRpb25zOiB7XG4gICAgICAgICAgICBFcnJvcjogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGdldCBhbGwgY29udmVyc2F0aW9ucyBmb3IgYSB1c2VyLlwiLFxuICAgICAgICAgICAgU3VjY2VzczogXCJBbGwgY29udmVyc2F0aW9ucyB3ZXJlIGZvdW5kIGZvciBhIHVzZXIuXCJcbiAgICAgICAgfSxcbiAgICAgICAgU3VjY2Vzc0dldENvbnZlcnNhdGlvbjogXCJDb252ZXJzYXRpb24gcmV0dXJuZWQgc3VjY2Vzc2Z1bGx5LlwiLFxuICAgICAgICBTdWNjZXNzQ3JlYXRlQ29udmVyc2F0aW9uOiBcIkNvbnZlcnNhdGlvbiBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5cIlxuICAgIH0sXG4gICAgU3R1ZHlHcm91cDoge1xuICAgICAgICBBZGRPbmVUaW1lTWVldGluZzoge1xuICAgICAgICAgICAgRXJyb3I6IFwiQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGFkZCBhIG9uZS10aW1lIG1lZXRpbmcuXCIsXG4gICAgICAgICAgICBJbnZhbGlkSW5wdXQ6IFwiT25lIG9yIG1vcmUgcmVxdWlyZWQgZmllbGRzIGlzIGVtcHR5LlwiLFxuICAgICAgICAgICAgU3VjY2VzczogXCJUaGUgb25lLXRpbWUgbWVldGluZyB3YXMgYWRkZWQgc3VjY2Vzc2Z1bGx5LlwiXG4gICAgICAgIH0sXG4gICAgICAgIENyZWF0ZVBvc3Q6IHtcbiAgICAgICAgICAgIEVycm9yOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gY3JlYXRlIGEgcG9zdC5cIixcbiAgICAgICAgICAgIEludmFsaWRBdHRhY2htZW50OiBcIlRoZSBmaWxlIGF0dGFjaGVkIGlzIG9mIGFuIHVuc3VwcG9ydGVkIGZvcm1hdC5cIixcbiAgICAgICAgICAgIEludmFsaWRJbnB1dDogXCJPbmUgb3IgbW9yZSByZXF1aXJlZCBmaWVsZHMgaXMgZW1wdHkuXCIsXG4gICAgICAgICAgICBTdWNjZXNzOiBcIlRoZSBwb3N0IHdhcyBjcmVhdGVkIHN1Y2Nlc3NmdWxseS5cIlxuICAgICAgICB9LFxuICAgICAgICBFcnJvckNyZWF0ZVN0dWR5R3JvdXA6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBjcmVhdGUgYSBzdHVkeSBncm91cC5cIixcbiAgICAgICAgRXJyb3JEZWxldGVTdHVkeUdyb3VwOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gZGVsZXRlIGEgc3R1ZHkgZ3JvdXAuXCIsXG4gICAgICAgIEVycm9yRGVsZXRlTWVldGluZzogXCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBhdHRlbXB0aW5nIHRvIGRlbGV0ZSBhIG1lZXRpbmcuXCIsXG4gICAgICAgIEVycm9yRWRpdE1lZXRpbmc6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBlZGl0IHRoZSBtZWV0aW5nLlwiLFxuICAgICAgICBFcnJvckdldFN0dWR5R3JvdXA6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBnZXQgYSBzdHVkeSBncm91cC5cIixcbiAgICAgICAgRXJyb3JMZWF2ZVN0dWR5R3JvdXA6IFwiVGhlIHN0dWR5IGdyb3VwIHlvdSBhcmUgdHJ5aW5nIHRvIGxlYXZlIHdhcyBub3QgZm91bmQuXCIsXG4gICAgICAgIEVycm9ySm9pblN0dWR5R3JvdXA6IFwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBqb2luIGEgc3R1ZHkgZ3JvdXAuXCIsXG4gICAgICAgIEVycm9yUmVtb3ZlVXNlcjogXCJUaGVyZSB3YXMgYW4gZXJyb3IgcmVtb3ZpbmcgdXNlciBmcm9tIHRoZSBzdHVkeSBncm91cC5cIixcbiAgICAgICAgRXJyb3JSZW1vdmVTdHVkeUdyb3VwOiBcIlRoZXJlIHdhcyBhbiBlcnJvciByZW1vdmluZyBzdHVkeSBncm91cCBmcm9tIHRoZSB1c2VyLlwiLFxuICAgICAgICBJbnZhbGlkRWRpdFN0dWR5R3JvdXA6IFwiT25lIG9yIG1vcmUgcmVxdWlyZWQgZmllbGRzIGlzIGVtcHR5LlwiLFxuICAgICAgICBTdHVkeUdyb3VwSXNOb3RBY3RpdmU6IFwiVGhlIHJlcXVlc3RlZCBzdHVkeSBncm91cCBpcyBub3QgYWN0aXZlLlwiLFxuICAgICAgICBNZWV0aW5nTm90Rm91bmQ6IFwiVGhlIHJlcXVlc3RlZCBtZWV0aW5nIHdhcyBub3QgZm91bmQuXCIsXG4gICAgICAgIFN0dWR5R3JvdXBOb3RGb3VuZDogXCJUaGUgcmVxdWVzdGVkIHN0dWR5IGdyb3VwIHdhcyBub3QgZm91bmQuXCIsXG4gICAgICAgIFN1Y2Nlc3NEZWxldGVNZWV0aW5nOiBcIlRoZSBtZWV0aW5nIHdhcyBkZWxldGVkIHN1Y2Nlc3NmdWxseS5cIixcbiAgICAgICAgU3VjY2Vzc1N0dWR5R3JvdXBDcmVhdGVkOiBcIlRoZSBzdHVkeSBncm91cCB3YXMgY3JlYXRlZCBzdWNlc3NmdWxseS5cIixcbiAgICAgICAgU3VjY2Vzc1N0dWR5R3JvdXBEZWxldGVkOiBcIlRoZSBzdHVkeSBncm91cCB3YXMgZGVsZXRlZCBzdWNjZXNzZnVsbHkuXCIsXG4gICAgICAgIFN1Y2Nlc3NTdHVkeUdyb3VwRWRpdGVkOiBcIlRoZSBzdHVkeSBncm91cCB3YXMgZWRpdGVkIHN1Y2Nlc3NmdWxseVwiLFxuICAgICAgICBTdWNjZXNzU3R1ZHlHcm91cEpvaW5lZDogXCJUaGUgc3R1ZHkgZ3JvdXAgd2FzIGpvaW5lZCBzdWNjZXNzZnVsbHkuXCIsXG4gICAgICAgIFN1Y2Nlc3NTdHVkeUdyb3VwTGVmdDogXCJUaGUgc3R1ZHkgZ3JvdXAgd2FzIGxlZnQgc3VjY2Vzc2Z1bGx5LlwiLFxuICAgICAgICBTdWNjZXNzU3R1ZHlHcm91cFJldHJpZXZlZDogXCJUaGUgc3R1ZHkgZ3JvdXAgd2FzIHJldHJpZXZlZCBzdWNjZXNzZnVsbHkuXCIsXG4gICAgICAgIFN1Y2Nlc3NTdHVkeUdyb3Vwc1JldHJpZXZlZDogXCJUaGUgc3R1ZHkgZ3JvdXBzIHdlcmUgcmV0cmlldmVkIHN1Y2Vzc2Z1bGx5LlwiLFxuICAgICAgICBFcnJvckdldHRpbmdTZWFyY2hSZXN1bHRzOiBcIkFuIGVycm9yIG9jdXJyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBnZXQgc2VhcmNoIHJlc3VsdHMuXCIsXG4gICAgICAgIFVzZXJBbHJlYWR5Sm9pbmVkOiBcIlRoZSBzdHVkeSBncm91cCBjYW5ub3QgYmUgam9pbmVkIGFnYWluLlwiLFxuICAgICAgICBVc2VyTm90QXNzb2NpYXRlZFdpdGhTY2hvb2xPZlN0dWR5R3JvdXA6XG4gICAgICAgICAgICBcIlRoZSBzdHVkeSBncm91cCBjYW5ub3QgYmUgam9pbmVkIGJlY2F1c2UgeW91IGFyZSBub3QgYSBwYXJ0IG9mIHRoaXMgc2Nob29sLlwiLFxuICAgICAgICBVc2VyTm90SW5TdHVkeUdyb3VwOiBcIlRoZSByZXF1ZXN0aW5nIHVzZXIgaXMgbm90IGEgbWVtYmVyIG9mIHRoZSBzdHVkeSBncm91cC5cIixcbiAgICAgICAgVXNlck5vdE93bmVyOiBcIlRoZSByZXF1ZXN0aW5nIHVzZXIgaXMgbm90IHRoZSBvd25lciBvZiB0aGUgc3R1ZHkgZ3JvdXAuXCIsXG4gICAgICAgIEVycm9yTnVsbFN0dWR5R3JvdXBJbnB1dDogXCJFcnJvcjogRW1wdHkgaW5wdXQgd2FzIHJlY2VpdmVkIGZvciBlaXRoZXIgdGhlIHN0dWR5IGdyb3VwIG5hbWUgb3IgdGhlIHVzZXIuXCIsXG4gICAgICAgIFNldFJlY3VycmluZ01lZXRpbmc6IHtcbiAgICAgICAgICAgIEVycm9yOiBcIkFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gc2V0IHRoZSByZWN1cnJpbmcgbWVldGluZy5cIixcbiAgICAgICAgICAgIEludmFsaWRJbnB1dDogXCJPbmUgb3IgbW9yZSByZXF1aXJlZCBmaWVsZHMgaXMgZW1wdHkuXCIsXG4gICAgICAgICAgICBTdWNjZXNzOiBcIlRoZSByZWN1cnJpbmcgbWVldGluZyB3YXMgc2V0IHN1Y2Nlc3NmdWxseS5cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBSZXBvcnQ6IHtcbiAgICAgICAgRW1haWxTZW50OiBcIlJlcG9ydCBlbWFpbCB3YXMgc2VudC5cIixcbiAgICAgICAgRW1wdHlGaWVsZDogXCJFbXB0eSBmaWVsZCByZWNlaXZlZC4gUGxlYXNlIGluY2x1ZGUgYSBjb21tZW50IGFib3V0IHdoeSB5b3UgYXJlIHJlcG9ydGluZyB0aGlzIGl0ZW0uXCJcbiAgICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBSZXNwb25zZU1lc3NhZ2VzO1xuIiwiLyoqXG4gKiBUaGlzIGRlZmluZXMgdGhlIHJvdXRlcyB0aGUgc2VydmVyIHdpbGwgc2VydmUuXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICogQGRhdGUgICAwNy8zMS8yMDIxXG4gKi9cbmNvbnN0IFJvdXRlcyA9IHtcbiAgICBBY2NvdW50OiB7XG4gICAgICAgIENoYW5nZUVtYWlsOiBcIi9hcGkvYWNjb3VudC9jaGFuZ2UtZW1haWxcIixcbiAgICAgICAgQ2hhbmdlUGFzc3dvcmQ6IFwiL2FwaS9hY2NvdW50L2NoYW5nZS1wYXNzd29yZFwiLFxuICAgICAgICBDcmVhdGVBY2NvdW50OiBcIi9hcGkvYWNjb3VudC9jcmVhdGVcIixcbiAgICAgICAgRGVsZXRlOiBcIi9hcGkvYWNjb3VudC9kZWxldGVcIixcbiAgICAgICAgR2V0VW52ZXJpZmllZFVzZXI6IFwiL2FwaS9hY2NvdW50L2dldC11bnZlcmlmaWVkLXVzZXJcIixcbiAgICAgICAgTG9naW46IFwiL2FwaS9hY2NvdW50L2xvZ2luXCIsXG4gICAgICAgIFNldHVwQWNjb3VudDogXCIvYXBpL2FjY291bnQvc2V0dXBcIixcbiAgICAgICAgVXBkYXRlQXV0aGVudGljYXRpb25Ub2tlbjogXCIvYXBpL2FjY291bnQvdXBkYXRlLWF1dGhlbnRpY2F0aW9uLXRva2VuXCIsXG4gICAgICAgIFZlcmlmeUVtYWlsQ2hhbmdlOiBcIi9hcGkvYWNjb3VudC92ZXJpZnktZW1haWwtY2hhbmdlXCJcbiAgICB9LFxuICAgIE1lc3NhZ2U6IHtcbiAgICAgICAgR2V0Q29udmVyc2F0aW9uOiBcIi9hcGkvbWVzc2FnZS9nZXQtY29udmVyc2F0aW9uXCIsXG4gICAgICAgIEdldENvbnZlcnNhdGlvbnM6IFwiL2FwaS9tZXNzYWdlL2dldC1jb252ZXJzYXRpb25zXCIsXG4gICAgICAgIENyZWF0ZUNvbnZlcnNhdGlvbjogXCIvYXBpL21lc3NhZ2UvY3JlYXRlLWNvbnZlcnNhdGlvblwiXG4gICAgfSxcbiAgICBSZXBvcnQ6IHtcbiAgICAgICAgU2VuZFJlcG9ydDogXCIvYXBpL3JlcG9ydC9zZW5kLXJlcG9ydFwiXG4gICAgfSxcbiAgICBTdGF0aWNSZXNvdXJjZXM6IHtcbiAgICAgICAgSW5kZXg6IFwiLypcIlxuICAgIH0sXG4gICAgU2VhcmNoOiB7XG4gICAgICAgIEdldFNlYXJjaFJlc3VsdHM6IFwiL2FwaS9zZWFyY2gvZ2V0XCJcbiAgICB9LFxuICAgIFN0dWR5R3JvdXA6IHtcbiAgICAgICAgQWRkT25lVGltZU1lZXRpbmc6IFwiL2FwaS9zdHVkeS1ncm91cC9hZGQtb25lLXRpbWUtbWVldGluZ1wiLFxuICAgICAgICBDcmVhdGVQb3N0OiBcIi9hcGkvc3R1ZHktZ3JvdXAvY3JlYXRlLXBvc3RcIixcbiAgICAgICAgQ3JlYXRlU3R1ZHlHcm91cDogXCIvYXBpL3N0dWR5LWdyb3VwL2NyZWF0ZVwiLFxuICAgICAgICBEZWxldGVNZWV0aW5nOiBcIi9hcGkvc3R1ZHktZ3JvdXAvZGVsZXRlLW1lZXRpbmdcIixcbiAgICAgICAgRGVsZXRlU3R1ZHlHcm91cDogXCIvYXBpL3N0dWR5LWdyb3VwL2RlbGV0ZVwiLFxuICAgICAgICBFZGl0U3R1ZHlHcm91cDogXCIvYXBpL3N0dWR5LWdyb3VwL2VkaXQtc3R1ZHktZ3JvdXBcIixcbiAgICAgICAgRWRpdE1lZXRpbmc6IFwiL2FwaS9zdHVkeS1ncm91cC9lZGl0LW1lZXRpbmdcIixcbiAgICAgICAgR2V0VXNlclN0dWR5R3JvdXBzOiBcIi9hcGkvc3R1ZHktZ3JvdXAvZ2V0LWFsbFwiLFxuICAgICAgICBHZXRTdHVkeUdyb3VwOiBcIi9hcGkvc3R1ZHktZ3JvdXAvZ2V0XCIsXG4gICAgICAgIEpvaW5TdHVkeUdyb3VwOiBcIi9hcGkvc3R1ZHktZ3JvdXAvam9pblwiLFxuICAgICAgICBTZXRSZWN1cnJpbmdNZWV0aW5nOiBcIi9hcGkvc3R1ZHktZ3JvdXAvc2V0LXJlY3VycmluZy1tZWV0aW5nXCIsXG4gICAgICAgIExlYXZlU3R1ZHlHcm91cDogXCIvYXBpL3N0dWR5LWdyb3VwL2xlYXZlXCJcbiAgICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBSb3V0ZXM7XG4iLCJjb25zdCBSZXNwb25zZU1lc3NhZ2VzID0gcmVxdWlyZShcIi4vUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIik7XG5cbi8qKlxuICogVGhpcyBpcyB1c2VkIHRvIHZhbGlkYXRlIGFuZCB2ZXJpZnkgZGF0YSB0aHJvdWdob3V0IHRoZSBhcHBsaWNhdGlvbi5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDA3LzI5LzIwMjFcbiAqL1xuY2xhc3MgVmFsaWRhdG9yIHtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSB2YXJpYWJsZSBpcyBkZWZpbmVkLlxuICAgICAqIEBwYXJhbSB2YXJpYWJsZSBUaGUgdmFyaWFibGUgdG8gY2hlY2sgZm9yIGJlaW5nIGRlZmluZWQuXG4gICAgICogQHJldHVybiB7Ym9vbH0gVHJ1ZSBpZiB0aGUgdmFyaWFibGUgaXMgZGVmaW5lZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwNy8yOS8yMDIxXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBpc0RlZmluZWQodmFyaWFibGUpIHtcbiAgICAgICAgY29uc3QgdW5kZWZpbmVkVHlwZSA9IFwidW5kZWZpbmVkXCI7XG4gICAgICAgIGNvbnN0IGlzTm90VW5kZWZpbmVkID0gdW5kZWZpbmVkVHlwZSAhPT0gdHlwZW9mIHZhcmlhYmxlO1xuICAgICAgICBjb25zdCBpc05vdE51bGwgPSBudWxsICE9IHZhcmlhYmxlO1xuICAgICAgICByZXR1cm4gaXNOb3RVbmRlZmluZWQgJiYgaXNOb3ROdWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHZhcmlhYmxlIGlzIGFuIGVycm9yLlxuICAgICAqIEBwYXJhbSB2YXJpYWJsZSBUaGUgdmFyaWFibGUgdG8gY2hlY2sgZm9yIGJlaW5nIGFuIGVycm9yLlxuICAgICAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWYgdGhlIHZhcmlhYmxlIGlzIGFuIGVycm9yLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDA4LzAyLzIwMjFcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIGlzRXJyb3IodmFyaWFibGUpIHtcbiAgICAgICAgY29uc3QgdmFyaWFibGVJc0Vycm9yID0gdmFyaWFibGUgaW5zdGFuY2VvZiBFcnJvcjtcbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlSXNFcnJvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSB2YXJpYWJsZSBpcyB1bmRlZmluZWQuXG4gICAgICogQHBhcmFtIHZhcmlhYmxlIFRoZSB2YXJpYWJsZSB0byBjaGVjayBmb3IgYmVpbmcgdW5kZWZpbmVkLlxuICAgICAqIEByZXR1cm4ge2Jvb2x9IFRydWUgaWYgdGhlIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwNy8yOS8yMDIxXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyBpc1VuZGVmaW5lZCh2YXJpYWJsZSkge1xuICAgICAgICBjb25zdCB1bmRlZmluZWRUeXBlID0gXCJ1bmRlZmluZWRcIjtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFR5cGUgPT09IHR5cGVvZiB2YXJpYWJsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgdGhlIGZvcm0gaW5wdXQgZm9yIGNoYW5naW5nIGEgdXNlcidzIGVtYWlsLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZUNoYW5nZUVtYWlsKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0TWlkZGxld2FyZUZ1bmN0aW9uKSB7XG4gICAgICAgIC8vIENIRUNLIFRIRSBJTlBVVCBGT1IgRU1QVFkgVkFMVUVTLlxuICAgICAgICBsZXQgaW5wdXRJc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgbGV0IGVycm9yID0gUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LkludmFsaWRBY2NvdW50SW5wdXQ7XG4gICAgICAgIGNvbnN0IHsgbmV3RW1haWwgfSA9IHJlcXVlc3QuYm9keTtcbiAgICAgICAgaWYgKG5ld0VtYWlsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaW5wdXRJc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDSEVDSyBUSEFUIFRIRSBFTUFJTCBJUyBWQUxJRC5cbiAgICAgICAgaWYgKCFWYWxpZGF0b3IudmFsaWRhdGVFbWFpbChuZXdFbWFpbCkpIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLkFjY291bnQuSW52YWxpZEVtYWlsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR0VORVJBVEUgVEhFIFJFU1BPTlNFLlxuICAgICAgICBpZiAoaW5wdXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBmb3JtIGlucHV0IGZvciBjcmVhdGluZyBhbiBhY2NvdW50LlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZUNyZWF0ZUFjY291bnRJbnB1dChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dE1pZGRsZXdhcmVGdW5jdGlvbikge1xuICAgICAgICAvLyBDSEVDSyBUSEUgSU5QVVQgRk9SIEVNUFRZIFZBTFVFUy5cbiAgICAgICAgbGV0IGlucHV0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgIGxldCBlcnJvciA9IFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5JbnZhbGlkQWNjb3VudElucHV0O1xuICAgICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCwgcGFzc3dvcmRfY29uZmlybWF0aW9uIH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGNvbnN0IGNvbmZpcm1QYXNzd29yZCA9IHBhc3N3b3JkX2NvbmZpcm1hdGlvbjtcbiAgICAgICAgaWYgKGVtYWlsLmxlbmd0aCA9PT0gMCB8fCBwYXNzd29yZC5sZW5ndGggPT09IDAgfHwgY29uZmlybVBhc3N3b3JkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaW5wdXRJc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDSEVDSyBUSEFUIFRIRSBFTUFJTCBJUyBWQUxJRC5cbiAgICAgICAgaWYgKCFWYWxpZGF0b3IudmFsaWRhdGVFbWFpbChlbWFpbCkpIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLkFjY291bnQuSW52YWxpZEVtYWlsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBNSU5JTVVNIExFTkdUSFMuXG4gICAgICAgIGNvbnN0IE1JTklNVU1fUEFTU1dPUkRfTEVOR1RIID0gNjtcbiAgICAgICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IE1JTklNVU1fUEFTU1dPUkRfTEVOR1RIKSB7XG4gICAgICAgICAgICBpbnB1dElzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGVycm9yID0gUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlBhc3N3b3JkVG9vU2hvcnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDSEVDSyBUSEFUIFRIRSBQQVNTV09SRFMgTUFUQ0guXG4gICAgICAgIGlmIChwYXNzd29yZCAhPT0gY29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgICAgICBpbnB1dElzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGVycm9yID0gUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlBhc3N3b3Jkc011c3RNYXRjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdFTkVSQVRFIFRIRSBSRVNQT05TRS5cbiAgICAgICAgaWYgKGlucHV0SXNWYWxpZCkge1xuICAgICAgICAgICAgcmVxdWVzdC5jb25maXJtUGFzc3dvcmQgPSBjb25maXJtUGFzc3dvcmQ7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3IgY3JlYXRpbmcgYSBwb3N0LlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZUNyZWF0ZVBvc3QocmVxdWVzdCwgcmVzcG9uc2UsIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBFTVBUWSBWQUxVRVMuXG4gICAgICAgIGxldCBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICBsZXQgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuQ3JlYXRlUG9zdC5JbnZhbGlkSW5wdXQ7XG4gICAgICAgIGNvbnN0IHsgdGl0bGUsIG1lc3NhZ2UsIGNhdGVnb3J5IH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRpdGxlID09IG51bGwgfHxcbiAgICAgICAgICAgIHRpdGxlLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgbWVzc2FnZSA9PSBudWxsIHx8XG4gICAgICAgICAgICBtZXNzYWdlLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgY2F0ZWdvcnkgPT0gbnVsbCB8fFxuICAgICAgICAgICAgY2F0ZWdvcnkubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgICAgaW5wdXRJc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHRU5FUkFURSBUSEUgUkVTUE9OU0UuXG4gICAgICAgIGlmIChpbnB1dElzVmFsaWQpIHtcbiAgICAgICAgICAgIHJlcXVlc3QuYm9keS50eXBlID0gcmVxdWVzdC5ib2R5LmNhdGVnb3J5O1xuICAgICAgICAgICAgcmV0dXJuIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5lbmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyB0aGUgZm9ybSBpbnB1dCBmb3IgY3JlYXRpbmcgYSBzdHVkeSBncm91cCBiZWZvcmUgYSBzdHVkeSBncm91cCBnZXRzIGNyZWF0ZWQuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDAyLzA0LzIwMjJcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIHZhbGlkYXRlQ3JlYXRlU3R1ZHlHcm91cElucHV0KHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0TWlkZGxld2FyZUZ1bmN0aW9uKSB7XG4gICAgICAgIC8vIEdFVCBUSEUgRk9STSBJTlBVVCBEQVRBLlxuICAgICAgICAvLyBUaGUgZGF0YSB3aWxsIGFsbCBiZSBpbiB0aGUgcmVxdWVzdC5ib2R5IG9iamVjdCBhcyBhdHRyaWJ1dGVzIGFjY29yZGluZyB0byBlYWNoJ3MgbmFtZS5cbiAgICAgICAgbGV0IHN0dWR5R3JvdXBJc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIC8vIFZBTElEQVRFIFRIRSBJTlBVVC5cbiAgICAgICAgaWYgKHJlcXVlc3QuYm9keS5uYW1lICYmIHJlcXVlc3QudXNlcikge1xuICAgICAgICAgICAgc3R1ZHlHcm91cElzVmFsaWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdFTkVSQVRFIFRIRSBSRVNQT05TRS5cbiAgICAgICAgLy8gSWYgdGhlIGRhdGEgaXMgaW52YWxpZCwgdGhlbiBhIHJlc3BvbnNlIHNob3VsZCBiZSByZXR1cm5lZCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBtZXNzYWdlIGluZGljYXRpbmcgc3VjaC5cbiAgICAgICAgaWYgKCFzdHVkeUdyb3VwSXNWYWxpZCkge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5FcnJvck51bGxTdHVkeUdyb3VwSW5wdXQgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGRhdGEgaXMgdmFsaWQsIHRoZW4gdGhlIG5leHQgZnVuY3Rpb24gaW4gdGhlIG1pZGRsZXdhcmUgY2hhaW4gY2FuIGJlIGNhbGxlZC5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3IgZWRpdGluZyBhIG1lZXRpbmcuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDAzLzA4LzIwMjJcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIHZhbGlkYXRlRWRpdE1lZXRpbmcocmVxdWVzdCwgcmVzcG9uc2UsIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBFTVBUWSBWQUxVRVMuXG4gICAgICAgIGxldCBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICBsZXQgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuSW52YWxpZEFjY291bnRJbnB1dDtcbiAgICAgICAgY29uc3QgeyBkYXRlLCB0aW1lIH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGlmIChWYWxpZGF0b3IuaXNVbmRlZmluZWQoZGF0ZSkgfHwgVmFsaWRhdG9yLmlzVW5kZWZpbmVkKHRpbWUpKSB7XG4gICAgICAgICAgICBpbnB1dElzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdFTkVSQVRFIFRIRSBSRVNQT05TRS5cbiAgICAgICAgaWYgKGlucHV0SXNWYWxpZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5lbmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyB0aGUgaW5wdXQgZm9yIGVkaXRpbmcgYSBzdHVkeSBncm91cC5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMDMvMDgvMjAyMlxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgdmFsaWRhdGVFZGl0U3R1ZHlHcm91cChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dE1pZGRsZXdhcmVGdW5jdGlvbikge1xuICAgICAgICAvLyBDSEVDSyBUSEUgSU5QVVQgRk9SIEVNUFRZIFZBTFVFUy5cbiAgICAgICAgbGV0IGlucHV0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgIGxldCBlcnJvciA9IFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5JbnZhbGlkRWRpdFN0dWR5R3JvdXA7XG4gICAgICAgIGNvbnN0IHsgY291cnNlLCBkZXNjcmlwdGlvbiwgZ3JvdXBDb2xvciwgaXNPbmxpbmVHcm91cCwgaXNUdXRvckdyb3VwLCBuYW1lLCBzdWJqZWN0IH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGlmIChuYW1lID09IG51bGwgfHwgbmFtZS5sZW5ndGggPT09IDAgfHwgbmFtZSA9PSBcIlwiIHx8IGRlc2NyaXB0aW9uID09IG51bGwgfHwgZGVzY3JpcHRpb24ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpbnB1dElzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdFTkVSQVRFIFRIRSBSRVNQT05TRS5cbiAgICAgICAgaWYgKGlucHV0SXNWYWxpZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5lbmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhbiBlbWFpbCBpcyB2YWxpZC5cbiAgICAgKiBAYXV0aG9yIFczU2Nob29sc1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgdmFsaWRhdGVFbWFpbChlbWFpbCkge1xuICAgICAgICBpZiAoL15cXHcrKFtcXC4tXT9cXHcrKSpAXFx3KyhbXFwuLV0/XFx3KykqKFxcLlxcd3syLDN9KSskLy50ZXN0KGVtYWlsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgdGhlIGlucHV0IGZvciBjcmVhdGluZyBhIG9uZS10aW1lIG1lZXRpbmcuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDAzLzA4LzIwMjJcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3RhdGljIHZhbGlkYXRlT25lVGltZU1lZXRpbmcocmVxdWVzdCwgcmVzcG9uc2UsIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBFTVBUWSBWQUxVRVMuXG4gICAgICAgIGxldCBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICBsZXQgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuQWRkT25lVGltZU1lZXRpbmcuSW52YWxpZElucHV0O1xuICAgICAgICBjb25zdCB7IGRhdGUsIHRpbWUsIGRheSwgZGV0YWlscywgbG9jYXRpb24sIHJvb21OdW1iZXIgfSA9IHJlcXVlc3QuYm9keTtcbiAgICAgICAgaWYgKFZhbGlkYXRvci5pc1VuZGVmaW5lZChkYXRlKSB8fCBWYWxpZGF0b3IuaXNVbmRlZmluZWQodGltZSkgfHwgZGF0ZS5sZW5ndGggPT09IDAgfHwgdGltZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR0VORVJBVEUgVEhFIFJFU1BPTlNFLlxuICAgICAgICBpZiAoaW5wdXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3Igc2V0dGluZyBhIHJlY3VycmluZyBtZWV0aW5nLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZVNldFJlY3VycmluZ01lZXRpbmcocmVxdWVzdCwgcmVzcG9uc2UsIG5leHRNaWRkbGV3YXJlRnVuY3Rpb24pIHtcbiAgICAgICAgLy8gQ0hFQ0sgVEhFIElOUFVUIEZPUiBFTVBUWSBWQUxVRVMuXG4gICAgICAgIGxldCBpbnB1dElzVmFsaWQgPSB0cnVlO1xuICAgICAgICBsZXQgZXJyb3IgPSBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU2V0UmVjdXJyaW5nTWVldGluZy5JbnZhbGlkSW5wdXQ7XG4gICAgICAgIGNvbnN0IHsgZGF5LCBmcmVxdWVuY3ksIHRpbWUsIGRhdGUgfSA9IHJlcXVlc3QuYm9keTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgZnJlcXVlbmN5ID09IG51bGwgfHxcbiAgICAgICAgICAgIHRpbWUgPT0gbnVsbCB8fFxuICAgICAgICAgICAgZnJlcXVlbmN5Lmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgdGltZS5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgIFZhbGlkYXRvci5pc1VuZGVmaW5lZChkYXRlKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR0VORVJBVEUgVEhFIFJFU1BPTlNFLlxuICAgICAgICBpZiAoaW5wdXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3Igc2V0dGluZyB1cCBhbiBhY2NvdW50LlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAwMy8wOC8yMDIyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN0YXRpYyB2YWxpZGF0ZVNldHVwQWNjb3VudChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dE1pZGRsZXdhcmVGdW5jdGlvbikge1xuICAgICAgICAvLyBDSEVDSyBUSEUgSU5QVVQgRk9SIEVNUFRZIFZBTFVFUy5cbiAgICAgICAgbGV0IGlucHV0SXNWYWxpZCA9IHRydWU7XG4gICAgICAgIGxldCBlcnJvciA9IFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5JbnZhbGlkQWNjb3VudElucHV0O1xuICAgICAgICBjb25zdCB7IGFyZWFDb2RlLCBuYW1lIH0gPSByZXF1ZXN0LmJvZHk7XG4gICAgICAgIGlmIChhcmVhQ29kZSA9PSBudWxsIHx8IGFyZWFDb2RlLmxlbmd0aCA9PT0gMCB8fCBuYW1lID09IG51bGwgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlucHV0SXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR0VORVJBVEUgVEhFIFJFU1BPTlNFLlxuICAgICAgICBpZiAoaW5wdXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBpbnB1dCBmb3IgY2hhbmdpbmcgYSBwYXNzd29yZC5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMDIvMDgvMjAyMlxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdGF0aWMgdmFsaWRhdGVQYXNzd29yZElucHV0KHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0TWlkZGxld2FyZUZ1bmN0aW9uKSB7XG4gICAgICAgIC8vIEdFVCBUSEUgRk9STSBJTlBVVCBEQVRBLlxuICAgICAgICBjb25zdCBjdXJyZW50UGFzc3dvcmQgPSByZXF1ZXN0LmJvZHkuY3VycmVudFBhc3N3b3JkO1xuICAgICAgICBjb25zdCBuZXdQYXNzd29yZCA9IHJlcXVlc3QuYm9keS5uZXdQYXNzd29yZDtcblxuICAgICAgICAvLyBDSEVDSyBUSEFUIE5FSVRIRVIgSU5QVVQgSVMgRU1QVFkuXG4gICAgICAgIGNvbnN0IEVNUFRZX1NUUklORyA9IFwiXCI7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYXNzd29yZElzRW1wdHkgPSBFTVBUWV9TVFJJTkcgPT09IGN1cnJlbnRQYXNzd29yZDtcbiAgICAgICAgY29uc3QgbmV3UGFzc3dvcmRJc0VtcHR5ID0gRU1QVFlfU1RSSU5HID09PSBuZXdQYXNzd29yZDtcbiAgICAgICAgY29uc3QgcGFzc3dvcmRzQXJlRW1wdHkgPSBjdXJyZW50UGFzc3dvcmRJc0VtcHR5ICYmIG5ld1Bhc3N3b3JkSXNFbXB0eTtcbiAgICAgICAgaWYgKHBhc3N3b3Jkc0FyZUVtcHR5KSB7XG4gICAgICAgICAgICByZXNwb25zZS5qc29uKHsgbWVzc2FnZTogUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LkVycm9ySW52YWxpZFBhc3N3b3JkSW5wdXQgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDT05USU5VRSBXSVRIIFRIRSBQQVNTV09SRCBDSEFOR0lORyBQUk9DRVNTLlxuICAgICAgICByZXR1cm4gbmV4dE1pZGRsZXdhcmVGdW5jdGlvbigpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWYWxpZGF0b3I7XG4iLCJcbi8qKlxuICogRXhwb3NlIGBCYWNrb2ZmYC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxuICpcbiAqIC0gYG1pbmAgaW5pdGlhbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBbMTAwXVxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXG4gKiAtIGBqaXR0ZXJgIFswXVxuICogLSBgZmFjdG9yYCBbMl1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBCYWNrb2ZmKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XG4gIHRoaXMubWF4ID0gb3B0cy5tYXggfHwgMTAwMDA7XG4gIHRoaXMuZmFjdG9yID0gb3B0cy5mYWN0b3IgfHwgMjtcbiAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBiYWNrb2ZmIGR1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpe1xuICB2YXIgbXMgPSB0aGlzLm1zICogTWF0aC5wb3codGhpcy5mYWN0b3IsIHRoaXMuYXR0ZW1wdHMrKyk7XG4gIGlmICh0aGlzLmppdHRlcikge1xuICAgIHZhciByYW5kID0gIE1hdGgucmFuZG9tKCk7XG4gICAgdmFyIGRldmlhdGlvbiA9IE1hdGguZmxvb3IocmFuZCAqIHRoaXMuaml0dGVyICogbXMpO1xuICAgIG1zID0gKE1hdGguZmxvb3IocmFuZCAqIDEwKSAmIDEpID09IDAgID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcbiAgfVxuICByZXR1cm4gTWF0aC5taW4obXMsIHRoaXMubWF4KSB8IDA7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1pbmltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1pbiA9IGZ1bmN0aW9uKG1pbil7XG4gIHRoaXMubXMgPSBtaW47XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWF4aW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWF4ID0gZnVuY3Rpb24obWF4KXtcbiAgdGhpcy5tYXggPSBtYXg7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaml0dGVyXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbihqaXR0ZXIpe1xuICB0aGlzLmppdHRlciA9IGppdHRlcjtcbn07XG5cbiIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1NZXJyaXdlYXRoZXI6aXRhbCx3Z2h0QDAsMzAwOzAsNDAwOzAsNzAwOzAsOTAwOzEsMzAwOzEsNDAwOzEsNzAwOzEsOTAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIip7Zm9udC1mYW1pbHk6XFxcIk1lcnJpd2VhdGhlclxcXCIsIHNlcmlmO292ZXJmbG93LXg6aGlkZGVuO21hcmdpbjowO3BhZGRpbmc6MDtib3gtc2l6aW5nOmJvcmRlci1ib3h9KiA6Oi13ZWJraXQtc2Nyb2xsYmFye2Rpc3BsYXk6bm9uZX1odG1se2JhY2tncm91bmQtY29sb3I6I2Y5ZjVmMTtiYWNrZ3JvdW5kLWltYWdlOnVybChcXFwiaHR0cHM6Ly93d3cuZmxpcG5hdGlvbmFsLm9yZy93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wMy9DQUUtV2Vic2l0ZS1GdWxsLUJhY2tncm91bmQtVGV4dHVyZTE5MDJ4MTIwMC05LmpwZ1xcXCIpO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7aGVpZ2h0OjEwMCV9aHRtbCBib2R5e2hlaWdodDoxMDAlfWh0bWwgYm9keSAjcm9vdHtoZWlnaHQ6MTAwJX1odG1sIGJvZHkgI3Jvb3QgLmNvbnRhaW5lcntoZWlnaHQ6MTAwJTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO292ZXJmbG93OmhpZGRlbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL0FwcC5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2dsb2JhbHMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFHQSxFQUNJLGlDQUFrQyxDQUNsQyxpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULFNBQVUsQ0FDVixxQkFBc0IsQ0FMMUIsc0JBT1EsWUFBYSxDQUNoQixLQUdELHdCQ2QyQixDRGdCM0Isa0lBQW1JLENBR25JLDBCQUEyQixDQUMzQiwyQkFBNEIsQ0FDNUIscUJBQXNCLENBRXRCLFdBQVksQ0FWaEIsVUFhUSxXQUFZLENBYnBCLGdCQWVZLFdBQVksQ0FmeEIsMkJBaUJnQixXQUFZLENBQ1osWUFBYSxDQUNiLHFCQUFzQixDQUN0QixlQUFnQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuL2dsb2JhbHMuc2Nzc1xcXCI7XFxuQGltcG9ydCB1cmwoXFxcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9TWVycml3ZWF0aGVyOml0YWwsd2dodEAwLDMwMDswLDQwMDswLDcwMDswLDkwMDsxLDMwMDsxLDQwMDsxLDcwMDsxLDkwMCZkaXNwbGF5PXN3YXBcXFwiKTtcXG5cXG4qIHtcXG4gICAgZm9udC1mYW1pbHk6IFxcXCJNZXJyaXdlYXRoZXJcXFwiLCBzZXJpZjtcXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIDo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgfVxcbn1cXG5odG1sIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJG1haW4tYmFja2dyb3VuZC1jb2xvcjtcXG4gICAgLyogVGhlIGltYWdlIHVzZWQgKi9cXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJodHRwczovL3d3dy5mbGlwbmF0aW9uYWwub3JnL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE4LzAzL0NBRS1XZWJzaXRlLUZ1bGwtQmFja2dyb3VuZC1UZXh0dXJlMTkwMngxMjAwLTkuanBnXFxcIik7XFxuXFxuICAgIC8qIENlbnRlciBhbmQgc2NhbGUgdGhlIGltYWdlIG5pY2VseSAqL1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuXFxuICAgIGhlaWdodDogMTAwJTtcXG5cXG4gICAgYm9keSB7XFxuICAgICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgICAgICAjcm9vdCB7XFxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICAgIC5jb250YWluZXIge1xcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA4MDBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmFjY291bnQtcGFnZSAuaW5mb3N7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nLWJvdHRvbToxNTBweDtwYWRkaW5nLXRvcDoyMHB4fS5hY2NvdW50LXBhZ2UgLmluZm9zIC51c2VyLWluZm97cGFkZGluZzoxMHB4O2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjQzNCk7YmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTtib3JkZXItcmFkaXVzOjRweDtib3JkZXItYm90dG9tOiNkNGFhOGMgM3B4IHNvbGlkO2JveC1zaGFkb3c6cmdiYSg2LDYsNiwwLjEzMikgMnB4IDJweCAxMHB4O21hcmdpbjo1cHggMjBweCA1cHggMjBweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmFjY291bnQtcGFnZSAuaW5mb3MgLnVzZXItaW5mbyBoMXtmbGV4OjE7Zm9udC1zaXplOjE1cHg7dGV4dC1hbGlnbjpsZWZ0fS5hY2NvdW50LXBhZ2UgLmluZm9zIC51c2VyLWluZm8gcHtmb250LXNpemU6MTdweH0uYWNjb3VudC1wYWdlIC5lZGl0LWFjY291bnQtYnV0dG9uc3tkaXNwbGF5OmZsZXg7cG9zaXRpb246Zml4ZWQ7Ym90dG9tOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjVlbTtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO2JveC1zaGFkb3c6cmdiYSgwLDAsMCwwLjE1MSkgLTIwcHggMCAyMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvUGFnZXMvQWNjb3VudC9BY2NvdW50LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EscUJBRVEsWUFBYSxDQUNiLHFCQUFzQixDQXlCdEIsb0JBQXFCLENBQ3JCLGdCQUFpQixDQTdCekIsZ0NBTVksWUFBYSxDQUNiLHdDQUE0QyxDQUM1Qyx5QkFBMEIsQ0FDMUIsaUJBQWtCLENBRWxCLCtCQUFzQyxDQUN0Qyx5Q0FBNkMsQ0FDN0Msd0JBQXlCLENBQ3pCLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBaEJuQyxtQ0FtQmdCLE1BQU8sQ0FDUCxjQUFlLENBQ2YsZUFBZ0IsQ0FyQmhDLGtDQXlCZ0IsY0FBZSxDQXpCL0Isb0NBZ0NRLFlBQWEsQ0FDYixjQUFlLENBQ2YsUUFBUyxDQUNULE1BQU8sQ0FDUCxVQUFXLENBQ1gsVUFBVyxDQUNYLHNCQUF1QixDQUN2Qix5Q0FBNkNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG4uYWNjb3VudC1wYWdlIHtcXG4gICAgLmluZm9zIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgICAgICAgLnVzZXItaW5mbyB7XFxuICAgICAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNDM0KTtcXG4gICAgICAgICAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoM3B4KTtcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxuXFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogJGJvcmRlci1jb2xvciAzcHggc29saWQ7XFxuICAgICAgICAgICAgYm94LXNoYWRvdzogcmdiYSg2LCA2LCA2LCAwLjEzMikgMnB4IDJweCAxMHB4O1xcbiAgICAgICAgICAgIG1hcmdpbjogNXB4IDIwcHggNXB4IDIwcHg7XFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgICAgICAgICAgIGgxIHtcXG4gICAgICAgICAgICAgICAgZmxleDogMTtcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBwIHtcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3B4O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAxNTBweDtcXG4gICAgICAgIHBhZGRpbmctdG9wOiAyMHB4O1xcbiAgICB9XFxuICAgIC5lZGl0LWFjY291bnQtYnV0dG9ucyB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICAgICAgYm90dG9tOiAwO1xcbiAgICAgICAgbGVmdDogMDtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgaGVpZ2h0OiA1ZW07XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4xNTEpIC0yMHB4IDAgMjBweDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuSG9tZVBhZ2V7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0uSG9tZVBhZ2UgLnN1YnRpdGxle3Bvc2l0aW9uOmFic29sdXRlO2ZvbnQtc2l6ZTo4MHB4O21hcmdpbjoxMDBweDtvdmVyZmxvdy14OnZpc2libGU7Zm9udC13ZWlnaHQ6MzAwO2NvbG9yOnJnYmEoNTgsNTgsNTgsMC44NzIpO2ZvbnQtd2VpZ2h0OjkwMDtmb250LXNpemU6OTBweH0uSG9tZVBhZ2U6OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7d2lkdGg6OTQlO2hlaWdodDo4MHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZGE1YTtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4Oi0yO3RvcDo3ZW07cmlnaHQ6MH1AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey5Ib21lUGFnZXtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MDttYXJnaW46MH0uSG9tZVBhZ2U6OmFmdGVye2Rpc3BsYXk6bm9uZX0uSG9tZVBhZ2UgLnN1YnRpdGxle2Rpc3BsYXk6bm9uZX19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9QYWdlcy9Ib21lL0hvbWUuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsVUFDSSxVQUFXLENBQ1gsV0FBWSxDQUZoQixvQkFLUSxpQkFBa0IsQ0FDbEIsY0FBZSxDQUNmLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsZUFBZ0IsQ0FDaEIsMEJBQThCLENBQzlCLGVBQWdCLENBQ2hCLGNBQWUsQ0FadkIsaUJBZ0JRLFVBQVcsQ0FDWCxTQUFVLENBQ1YsV0FBWSxDQUNaLHdCQ2ZpQixDRGdCakIsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxPQUFRLENBQ1IsT0FBUSxDQUNYLDBCQXhCTCxVQTRCWSxhQUFjLENBQ2QsU0FBVSxDQUNWLFFBQVMsQ0E5QnJCLGlCQWlDWSxZQUFhLENBakN6QixvQkFvQ1ksWUFBYSxDQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5Ib21lUGFnZSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuXFxuICAgIC5zdWJ0aXRsZSB7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBmb250LXNpemU6IDgwcHg7XFxuICAgICAgICBtYXJnaW46IDEwMHB4O1xcbiAgICAgICAgb3ZlcmZsb3cteDogdmlzaWJsZTtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICAgICAgICBjb2xvcjogcmdiYSg1OCwgNTgsIDU4LCAwLjg3Mik7XFxuICAgICAgICBmb250LXdlaWdodDogOTAwO1xcbiAgICAgICAgZm9udC1zaXplOiA5MHB4O1xcbiAgICB9XFxuXFxuICAgICY6OmFmdGVyIHtcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgICAgd2lkdGg6IDk0JTtcXG4gICAgICAgIGhlaWdodDogODBweDtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICB6LWluZGV4OiAtMjtcXG4gICAgICAgIHRvcDogN2VtO1xcbiAgICAgICAgcmlnaHQ6IDA7XFxuICAgIH1cXG5cXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtb2JpbGUtd2lkdGgpIHtcXG4gICAgICAgICYge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgICAgICAgbWFyZ2luOiAwO1xcbiAgICAgICAgfVxcbiAgICAgICAgJjo6YWZ0ZXIge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICB9XFxuICAgICAgICAuc3VidGl0bGUge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXCIsXCIkbWFpbi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmNWYxO1xcbiRwcmltYXJ5LWJ1dHRvbi1jb2xvcjogI2Q0YWE4YztcXG4kY3JlYXRpb24tYnV0dG9uLWNvbG9yOiAjNzJiYTcyO1xcbiRkZXN0cnVjdGl2ZS1idXR0b24tY29sb3I6ICM5MzMyMzI7XFxuJGJvcmRlci1jb2xvcjogI2Q0YWE4YztcXG4kaGlnaGxpZ2h0LWNvbG9yOiAjZmZkYTVhO1xcblxcbiRtb2JpbGUtd2lkdGg6IDgwMHB4O1xcblxcbkBtaXhpbiBtb2JpbGUge1xcbiAgICBAbWVkaWEgKG1heC13aWR0aDojeyRtb2JpbGUtd2lkdGh9KSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubWVzc2FnZS1wYWdle2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OjEwMCV9Lm1lc3NhZ2UtcGFnZSAubWVzc2FnZS1hcmVhe2ZsZXg6MTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm1lc3NhZ2UtcGFnZSAuZ3Vlc3QtbWVzc2FnZXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2hlaWdodDoxMDAlO3dpZHRoOjEwMCV9Lm1lc3NhZ2UtcGFnZSAuZ3Vlc3QtbWVzc2FnZSBoMXttYXJnaW46MjBweDtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZkYTVhfS5tZXNzYWdlLXBhZ2UgLmd1ZXN0LW1lc3NhZ2UgcHtwYWRkaW5nOjEwcHg7Y29sb3I6IzU3NTc1Nztmb250LXNpemU6MjBweH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1BhZ2VzL01lc3NhZ2UvTWVzc2FnZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2dsb2JhbHMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxjQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsV0FBWSxDQUhoQiw0QkFNUSxNQUFPLENBQ1AsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FUL0IsNkJBYVEsWUFBYSxDQUNiLHFCQUFzQixDQUN0QixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBRXZCLFdBQVksQ0FDWixVQUFXLENBbkJuQixnQ0FzQlksV0FBWSxDQUNaLFlBQWEsQ0FDYix3QkNwQmEsQ0RKekIsK0JBMkJZLFlBQWEsQ0FDYixhQUFzQixDQUN0QixjQUFlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuLm1lc3NhZ2UtcGFnZSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGhlaWdodDogMTAwJTtcXG5cXG4gICAgLm1lc3NhZ2UtYXJlYSB7XFxuICAgICAgICBmbGV4OiAxO1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgfVxcblxcbiAgICAuZ3Vlc3QtbWVzc2FnZSB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cXG4gICAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcblxcbiAgICAgICAgaDEge1xcbiAgICAgICAgICAgIG1hcmdpbjogMjBweDtcXG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRoaWdobGlnaHQtY29sb3I7XFxuICAgICAgICB9XFxuICAgICAgICBwIHtcXG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoODcsIDg3LCA4Nyk7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA4MDBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnBhZ2V7YW5pbWF0aW9uOnBhZ2UtbG9hZC11cCAwLjNzIGVhc2Utb3V0O3BhZGRpbmctdG9wOjBweDtoZWlnaHQ6Y2FsYygxMDB2aCAtIDRlbSk7ZmxleDoxfS5wYWdlIC5wYWdlLXRpdGxle3BhZGRpbmc6NDBweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO292ZXJmbG93OmhpZGRlbjtoZWlnaHQ6NmVtO2JhY2tncm91bmQtY29sb3I6cmdiYSgxMDMsNzgsNDgsMC4wODQpO2JhY2tkcm9wLWZpbHRlcjpibHVyKDEwcHgpO2NvbG9yOnJnYmEoMCwwLDAsMC44NTgpO3RleHQtc2hhZG93OnJnYmEoMCwwLDAsMC4xMjMpIDAgM3B4IDFweDt6LWluZGV4OjA7Ym94LXNoYWRvdzppbnNldCAwcHggMHB4IDEwcHggcmdiYSgwLDAsMCwwLjEyMyl9QG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KXsucGFnZSAucGFnZS10aXRsZXtwYWRkaW5nOjQwcHh9fS5wYWdlIC5wYWdlLXRpdGxlIGgxe2JhY2tncm91bmQtY29sb3I6I2ZmZGE1YTtwYWRkaW5nOjAgMjBweCAwIDIwcHg7dGV4dC1hbGlnbjpsZWZ0fUBrZXlmcmFtZXMgcGFnZS1sb2FkLXVwezAle29wYWNpdHk6MDttYXJnaW4tdG9wOjIwcHh9MTAwJXtvcGFjaXR5OjE7bWFyZ2luLXRvcDowMHB4fX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1BhZ2VzL1BhZ2Uuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsTUFDSSxvQ0FBcUMsQ0FDckMsZUFBZ0IsQ0FFaEIsd0JBQXlCLENBQ3pCLE1BQU8sQ0FMWCxrQkFTUSxZQUFhLENBSWIsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixlQUFnQixDQUNoQixVQUFXLENBQ1gsc0NBQTBDLENBQzFDLDBCQUEyQixDQUMzQix1QkFBMkIsQ0FDM0IsdUNBQTJDLENBQzNDLFNBQVUsQ0FDViwrQ0FBbUQsQ0FTdEQsMEJBL0JMLGtCQVdZLFlBQWEsQ0FvQnBCLENBL0JMLHFCQXlCWSx3QkNyQmEsQ0RzQmIscUJBQXNCLENBRXRCLGVBQWdCLENBRW5CLHdCQUlMLEdBQ0ksU0FBVSxDQUNWLGVBQWdCLENBRXBCLEtBQ0ksU0FBVSxDQUNWLGVBQWdCLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG4ucGFnZSB7XFxuICAgIGFuaW1hdGlvbjogcGFnZS1sb2FkLXVwIDAuM3MgZWFzZS1vdXQ7XFxuICAgIHBhZGRpbmctdG9wOiAwcHg7XFxuXFxuICAgIGhlaWdodDogY2FsYygxMDB2aCAtIDRlbSk7XFxuICAgIGZsZXg6IDE7XFxuICAgIC8vIGJvcmRlci1ib3R0b206IDBweDtcXG5cXG4gICAgLnBhZ2UtdGl0bGUge1xcbiAgICAgICAgcGFkZGluZzogNDBweDtcXG4gICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgcGFkZGluZzogNDBweDtcXG4gICAgICAgIH1cXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICAgIGhlaWdodDogNmVtO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMDMsIDc4LCA0OCwgMC4wODQpO1xcbiAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpO1xcbiAgICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44NTgpO1xcbiAgICAgICAgdGV4dC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4xMjMpIDAgM3B4IDFweDtcXG4gICAgICAgIHotaW5kZXg6IDA7XFxuICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwcHggMHB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjEyMyk7XFxuXFxuICAgICAgICBoMSB7XFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGhpZ2hsaWdodC1jb2xvcjtcXG4gICAgICAgICAgICBwYWRkaW5nOiAwIDIwcHggMCAyMHB4O1xcbiAgICAgICAgICAgIC8vIHdpZHRoOiAxNTBweDtcXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgICAgICAgICAgIC8vIHBhZGRpbmctcmlnaHQ6IDIwcHg7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuQGtleWZyYW1lcyBwYWdlLWxvYWQtdXAge1xcbiAgICAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAwO1xcbiAgICAgICAgbWFyZ2luLXRvcDogMjBweDtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICBtYXJnaW4tdG9wOiAwMHB4O1xcbiAgICB9XFxufVxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA4MDBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNlYXJjaC1wYWdle2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OjEwMCV9LnNlYXJjaC1wYWdlIC5zZWFyY2gtYXJlYXtmbGV4OjE7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvUGFnZXMvU2VhcmNoL1NlYXJjaC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLGFBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUN0QixXQUFZLENBSGhCLDBCQU1RLE1BQU8sQ0FDUCxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLHNCQUF1QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5zZWFyY2gtcGFnZSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGhlaWdodDogMTAwJTtcXG5cXG4gICAgLnNlYXJjaC1hcmVhIHtcXG4gICAgICAgIGZsZXg6IDE7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zdHVkeS1wYWdle3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93LXk6dmlzaWJsZTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2hlaWdodDoxMDAlfS5zdHVkeS1wYWdlIC5ndWVzdC1tZXNzYWdle2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJX0uc3R1ZHktcGFnZSAuZ3Vlc3QtbWVzc2FnZSBoMXttYXJnaW46MjBweDtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZkYTVhfS5zdHVkeS1wYWdlIC5ndWVzdC1tZXNzYWdlIHB7cGFkZGluZzoxMHB4O2NvbG9yOiM1NzU3NTc7Zm9udC1zaXplOjIwcHh9LnN0dWR5LXBhZ2UgLmFkZC1idXR0b257cG9zaXRpb246Zml4ZWQ7dG9wOjEwLjVlbTtyaWdodDo1ZW07ei1pbmRleDo4O292ZXJmbG93OmhpZGRlbjtoZWlnaHQ6NDBweDt3aWR0aDo0MHB4O2JvcmRlci1yYWRpdXM6MjBweDtjb2xvcjp3aGl0ZTtib3JkZXI6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiNkZWI1NmI7Ym94LXNoYWRvdzowcHggMnB4IDIwcHggcmdiYSgxMDksMTA5LDEwOSwwLjU4Mik7Y3Vyc29yOnBvaW50ZXJ9LnN0dWR5LXBhZ2UgLmFkZC1idXR0b246OmFmdGVye2NvbnRlbnQ6XFxcIitcXFwiO2ZvbnQtc2l6ZTo0NHB4O3Bvc2l0aW9uOmFic29sdXRlO3RvcDotOC41cHg7bGVmdDoxNCV9LnN0dWR5LXBhZ2UgLnN0dWR5LWdyb3Vwcy1jb250YWluZXJ7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7ZmxleC13cmFwOndyYXA7cGFkZGluZzoxMHB4O292ZXJmbG93LXk6YXV0b31AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey5zdHVkeS1wYWdlIC5zdHVkeS1ncm91cHMtY29udGFpbmVye2Rpc3BsYXk6YmxvY2t9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvUGFnZXMvU3R1ZHkvU3R1ZHkuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsWUFDSSxpQkFBa0IsQ0FDbEIsa0JBQW1CLENBQ25CLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsV0FBWSxDQUxoQiwyQkFRUSxZQUFhLENBQ2IscUJBQXNCLENBQ3RCLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FFdkIsV0FBWSxDQUNaLFVBQVcsQ0FkbkIsOEJBaUJZLFdBQVksQ0FDWixZQUFhLENBQ2Isd0JDZmEsQ0RKekIsNkJBc0JZLFlBQWEsQ0FDYixhQUFzQixDQUN0QixjQUFlLENBeEIzQix3QkE4QlEsY0FBZSxDQUNmLFVBQVcsQ0FDWCxTQUFVLENBQ1YsU0FBVSxDQUNWLGVBQWdCLENBR2hCLFdBQVksQ0FDWixVQUFXLENBQ1gsa0JBQW1CLENBR25CLFdBQVksQ0FHWixXQUFZLENBQ1osd0JBQW9DLENBQ3BDLCtDQUFtRCxDQUNuRCxjQUFlLENBaER2QiwrQkFvRFksV0FBWSxDQUNaLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsVUFBVyxDQUNYLFFBQVMsQ0F4RHJCLG9DQTZEUSxZQUFhLENBQ2Isc0JBQXVCLENBQ3ZCLDBCQUEyQixDQUMzQixjQUFlLENBRWYsWUFBYSxDQUNiLGVBQWdCLENBTW5CLDBCQXpFTCxvQ0F1RVksYUFBYyxDQUVyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5zdHVkeS1wYWdlIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBvdmVyZmxvdy15OiB2aXNpYmxlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuXFxuICAgIC5ndWVzdC1tZXNzYWdlIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuXFxuICAgICAgICBoMSB7XFxuICAgICAgICAgICAgbWFyZ2luOiAyMHB4O1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGhpZ2hsaWdodC1jb2xvcjtcXG4gICAgICAgIH1cXG4gICAgICAgIHAge1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgICAgICAgICAgY29sb3I6IHJnYig4NywgODcsIDg3KTtcXG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLmFkZC1idXR0b24ge1xcbiAgICAgICAgLy9Qb3NpdGlvblxcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICAgICAgdG9wOiAxMC41ZW07XFxuICAgICAgICByaWdodDogNWVtO1xcbiAgICAgICAgei1pbmRleDogODtcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuXFxuICAgICAgICAvL1NpemVcXG4gICAgICAgIGhlaWdodDogNDBweDtcXG4gICAgICAgIHdpZHRoOiA0MHB4O1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweDtcXG5cXG4gICAgICAgIC8vdGV4dCBkZXNpZ25cXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG5cXG4gICAgICAgIC8vYm94IERlc2lnblxcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyMiwgMTgxLCAxMDcpO1xcbiAgICAgICAgYm94LXNoYWRvdzogMHB4IDJweCAyMHB4IHJnYmEoMTA5LCAxMDksIDEwOSwgMC41ODIpO1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgICAgICAgLy9QbHVzIHNpZ25cXG4gICAgICAgICY6OmFmdGVyIHtcXG4gICAgICAgICAgICBjb250ZW50OiBcXFwiK1xcXCI7XFxuICAgICAgICAgICAgZm9udC1zaXplOiA0NHB4O1xcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICB0b3A6IC04LjVweDtcXG4gICAgICAgICAgICBsZWZ0OiAxNCU7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLnN0dWR5LWdyb3Vwcy1jb250YWluZXIge1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xcblxcbiAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XFxuXFxuICAgICAgICAvLyBoZWlnaHQ6IDc0dmg7XFxuICAgICAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA4MDBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnN0dWR5LWdyb3VwLXBhZ2V7aGVpZ2h0OjEwMCU7b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnN0dWR5LWdyb3VwLXBhZ2UgLnBhZ2UtdGl0bGUtc3R1ZHktZ3JvdXB7cGFkZGluZzo0MHB4O21hcmdpbjoyMHB4IDIwcHggMCAyMHB4O2JvcmRlcjp3aGl0ZSA2cHggc29saWQ7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtvdmVyZmxvdzpoaWRkZW47aGVpZ2h0OjZlbTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTAzLDc4LDQ4LDAuMDg0KTtiYWNrZHJvcC1maWx0ZXI6Ymx1cigxMHB4KTtjb2xvcjpyZ2JhKDAsMCwwLDAuODU4KTt0ZXh0LXNoYWRvdzpyZ2JhKDAsMCwwLDAuMTIzKSAwIDNweCAxcHg7ei1pbmRleDowO2JveC1zaGFkb3c6MHB4IDBweCAxMHB4IHJnYmEoMCwwLDAsMC4xMjMpfS5zdHVkeS1ncm91cC1wYWdlIC5wYWdlLXRpdGxlLXN0dWR5LWdyb3VwIGgxe3BhZGRpbmc6MCAyMHB4IDAgMjBweDt0ZXh0LWFsaWduOmxlZnQ7Y29sb3I6d2hpdGV9LnN0dWR5LWdyb3VwLXBhZ2UgLm1haW4tdmlld3tmbGV4OjE7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztvdmVyZmxvdzpoaWRkZW59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9QYWdlcy9TdHVkeUdyb3VwL1N0dWR5R3JvdXAuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxrQkFDSSxXQUFZLENBQ1osZUFBZ0IsQ0FDaEIsWUFBYSxDQUNiLHFCQUFzQixDQUoxQiwwQ0FPUSxZQUFhLENBQ2IsdUJBQXdCLENBQ3hCLHNCQUF1QixDQUN2QixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLGVBQWdCLENBQ2hCLFVBQVcsQ0FDWCxzQ0FBMEMsQ0FDMUMsMEJBQTJCLENBQzNCLHVCQUEyQixDQUMzQix1Q0FBMkMsQ0FDM0MsU0FBVSxDQUNWLHlDQUE2QyxDQW5CckQsNkNBc0JZLHFCQUFzQixDQUV0QixlQUFnQixDQUNoQixXQUFZLENBekJ4Qiw2QkErQlEsTUFBTyxDQUNQLFlBQWEsQ0FDYixrQkFBbUIsQ0FFbkIsZUFBZ0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnN0dWR5LWdyb3VwLXBhZ2Uge1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFxuICAgIC5wYWdlLXRpdGxlLXN0dWR5LWdyb3VwIHtcXG4gICAgICAgIHBhZGRpbmc6IDQwcHg7XFxuICAgICAgICBtYXJnaW46IDIwcHggMjBweCAwIDIwcHg7XFxuICAgICAgICBib3JkZXI6IHdoaXRlIDZweCBzb2xpZDtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICAgIGhlaWdodDogNmVtO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMDMsIDc4LCA0OCwgMC4wODQpO1xcbiAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpO1xcbiAgICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44NTgpO1xcbiAgICAgICAgdGV4dC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4xMjMpIDAgM3B4IDFweDtcXG4gICAgICAgIHotaW5kZXg6IDA7XFxuICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjEyMyk7XFxuXFxuICAgICAgICBoMSB7XFxuICAgICAgICAgICAgcGFkZGluZzogMCAyMHB4IDAgMjBweDtcXG4gICAgICAgICAgICAvLyB3aWR0aDogMTUwcHg7XFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG4gICAgICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgICAgICAgLy8gcGFkZGluZy1yaWdodDogMjBweDtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAubWFpbi12aWV3IHtcXG4gICAgICAgIGZsZXg6IDE7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG5cXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNvbmZpcm1hdGlvbi1jb250YWluZXIgcHtwYWRkaW5nOjIwcHg7Zm9udC1zaXplOjMwcHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9Db25maXJtYXRpb25Gb3JtL0NvbmZpcm1hdGlvbkZvcm0uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSwwQkFFUSxZQUFhLENBQ2IsY0FBZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29uZmlybWF0aW9uLWNvbnRhaW5lciB7XFxuICAgIHAge1xcbiAgICAgICAgcGFkZGluZzogMjBweDtcXG4gICAgICAgIGZvbnQtc2l6ZTogMzBweDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYXV0aC12aWV3e3BhZGRpbmc6M2VtIDFlbSAxZW0gMWVtO2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjY0Nik7YmFja2Ryb3AtZmlsdGVyOmJsdXIoMjBweCk7Ym94LXNoYWRvdzowcHggM3B4IDRweCByZ2JhKDEyOCwxMjgsMTI4LDAuMzc3KTt3aWR0aDozMGVtO292ZXJmbG93OmF1dG87dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luOjUwcHggOTBweCAwIDA7YW5pbWF0aW9uOmF1dGgtdmlldy1sb2FkIDAuM3MgZWFzZS1vdXQ7dHJhbnNpdGlvbjphbGwgMXM7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmR9LmF1dGgtdmlldyBoMXt0ZXh0LWFsaWduOmNlbnRlcjtvdmVyZmxvdzpoaWRkZW59LmF1dGgtdmlldyBwe3BhZGRpbmctdG9wOjEwcHg7Y29sb3I6IzRmNGY0ZjtvdmVyZmxvdzpoaWRkZW59LmF1dGgtdmlldyAuZXJyb3ItbWVzc2FnZXtjb2xvcjpyZ2JhKDEzNiwxNywxNywwLjYzKTtmb250LXNpemU6MTVweDtmb250LXN0eWxlOml0YWxpY30uYXV0aC12aWV3IC5vdGhlci1vcHRpb25ze3BhZGRpbmctdG9wOjIwcHg7dGV4dC1hbGlnbjpjZW50ZXI7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uYXV0aC12aWV3IC5vdGhlci1vcHRpb25zIHB7Zm9udC1zaXplOjEwcHg7Y29sb3I6ZGFya2dyYXk7bWFyZ2luLWJvdHRvbTotMTBweH1AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey5hdXRoLXZpZXd7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTttYXJnaW46MH19QGtleWZyYW1lcyBhdXRoLXZpZXctbG9hZHswJXtvcGFjaXR5OjA7bWFyZ2luLXRvcDo0MHB4fTEwMCV7b3BhY2l0eToxO21hcmdpbi10b3A6NTBweH19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9Ib21lL0F1dGhWaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsV0FDSSx1QkFBd0IsQ0FDeEIsd0NBQTRDLENBQzVDLDBCQUEyQixDQUMzQiw4Q0FBa0QsQ0FDbEQsVUFBVyxDQUNYLGFBQWMsQ0FXZCxpQkFBa0IsQ0FDbEIsb0JBQXFCLENBQ3JCLHNDQUF1QyxDQUN2QyxpQkFBa0IsQ0FDbEIsaUJBQWtCLENBQ2xCLE9BQVEsQ0FFUixZQUFhLENBQ2IscUJBQXNCLENBQ3RCLDRCQUE2QixDQTFCakMsY0FRUSxpQkFBa0IsQ0FDbEIsZUFBZ0IsQ0FUeEIsYUFZUSxnQkFBaUIsQ0FDakIsYUFBc0IsQ0FDdEIsZUFBZ0IsQ0FkeEIsMEJBNkJRLDBCQUE4QixDQUM5QixjQUFlLENBQ2YsaUJBQWtCLENBL0IxQiwwQkFtQ1EsZ0JBQWlCLENBQ2pCLGlCQUFrQixDQUNsQixZQUFhLENBQ2IscUJBQXNCLENBdEM5Qiw0QkF5Q1ksY0FBZSxDQUNmLGNBQWUsQ0FDZixtQkFBb0IsQ0FDdkIsMEJBNUNULFdBaURZLFVBQVcsQ0FDWCxXQUFZLENBQ1osUUFBUyxDQUNaLENBSVQsMEJBQ0ksR0FDSSxTQUFVLENBQ1YsZUFBZ0IsQ0FFcEIsS0FDSSxTQUFVLENBQ1YsZUFBZ0IsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5hdXRoLXZpZXcge1xcbiAgICBwYWRkaW5nOiAzZW0gMWVtIDFlbSAxZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC42NDYpO1xcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjBweCk7XFxuICAgIGJveC1zaGFkb3c6IDBweCAzcHggNHB4IHJnYmEoMTI4LCAxMjgsIDEyOCwgMC4zNzcpO1xcbiAgICB3aWR0aDogMzBlbTtcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgIGgxIHtcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIH1cXG4gICAgcCB7XFxuICAgICAgICBwYWRkaW5nLXRvcDogMTBweDtcXG4gICAgICAgIGNvbG9yOiByZ2IoNzksIDc5LCA3OSk7XFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB9XFxuXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgbWFyZ2luOiA1MHB4IDkwcHggMCAwO1xcbiAgICBhbmltYXRpb246IGF1dGgtdmlldy1sb2FkIDAuM3MgZWFzZS1vdXQ7XFxuICAgIHRyYW5zaXRpb246IGFsbCAxcztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICByaWdodDogMDtcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuXFxuICAgIC5lcnJvci1tZXNzYWdlIHtcXG4gICAgICAgIGNvbG9yOiByZ2JhKDEzNiwgMTcsIDE3LCAwLjYzKTtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gICAgfVxcblxcbiAgICAub3RoZXItb3B0aW9ucyB7XFxuICAgICAgICBwYWRkaW5nLXRvcDogMjBweDtcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgICAgICAgcCB7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4O1xcbiAgICAgICAgICAgIGNvbG9yOiBkYXJrZ3JheTtcXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAtMTBweDtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBAbWVkaWEgKG1heC13aWR0aDogJG1vYmlsZS13aWR0aCkge1xcbiAgICAgICAgJiB7XFxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICAgIG1hcmdpbjogMDtcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cXG5Aa2V5ZnJhbWVzIGF1dGgtdmlldy1sb2FkIHtcXG4gICAgMCUge1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgIG1hcmdpbi10b3A6IDQwcHg7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICAgICAgbWFyZ2luLXRvcDogNTBweDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY2hhdHMtdmlld3tmbGV4OjIwJTttaW4td2lkdGg6MjUwcHg7aGVpZ2h0OjEwMCU7Ym94LXNoYWRvdzoxMHB4IDBweCAyMHB4IHJnYmEoMCwwLDAsMC4wNDMpO2JvcmRlci1yaWdodDojZDRhYThjIDVweCBzb2xpZDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7ei1pbmRleDo0O292ZXJmbG93OmF1dG87cGFkZGluZzoyMHB4IDIwcHggMjBweCAyMHB4fS5jaGF0cy12aWV3IC5jaGF0SXRlbXtjdXJzb3I6cG9pbnRlcjtvdmVyZmxvdzpoaWRkZW47dHJhbnNpdGlvbjphbGwgMC4ycztoZWlnaHQ6NzBweDt3aWR0aDoxNi42ZW07ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nOjE1cHg7bWFyZ2luOjIwcHggMTBweCAyMHB4IDBweH0uY2hhdHMtdmlldyAuY2hhdEl0ZW0gcHtmb250LXNpemU6MTRweDt0ZXh0LWFsaWduOnJpZ2h0fS5jaGF0cy12aWV3IC5jaGF0SXRlbSBpbWd7dGV4dC1hbGlnbjpsZWZ0fS5jaGF0cy12aWV3IC5jaGF0SXRlbS5jaGF0QWN0aXZle2JvcmRlci1yaWdodDojZDRhYThjIDEwcHggc29saWQ7bWFyZ2luLXJpZ2h0OjA7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI0OSwyMzIsMjMyLDApO2ZvbnQtd2VpZ2h0OjkwMDtib3gtc2hhZG93OnJnYmEoMCwwLDAsMCkgMHB4IDBweCAyMHB4O2NvbG9yOmJsYWNrfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvTWVzc2FnZS9DaGF0c1ZpZXcuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxZQUNJLFFBQVMsQ0FDVCxlQUFnQixDQUNoQixXQUFZLENBQ1osMENBQThDLENBQzlDLDhCQUFxQyxDQUNyQyxxQkFBb0MsQ0FDcEMsU0FBVSxDQUNWLGFBQWMsQ0FDZCwyQkFBNEIsQ0FUaEMsc0JBWVEsY0FBZSxDQUNmLGVBQWdCLENBRWhCLG1CQUFvQixDQUVwQixXQUFZLENBQ1osWUFBYSxDQUViLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsNkJBQThCLENBUzlCLFlBQWEsQ0FDYix5QkFBMEIsQ0FoQ2xDLHdCQXlCWSxjQUFlLENBQ2YsZ0JBQWlCLENBMUI3QiwwQkE2QlksZUFBZ0IsQ0E3QjVCLGlDQW9DWSwrQkFBc0MsQ0FFdEMsY0FBZSxDQUNmLG9DQUF3QyxDQUN4QyxlQUFnQixDQUNoQixxQ0FBeUMsQ0FDekMsV0FBWVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5jaGF0cy12aWV3IHtcXG4gICAgZmxleDogMjAlO1xcbiAgICBtaW4td2lkdGg6IDI1MHB4O1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGJveC1zaGFkb3c6IDEwcHggMHB4IDIwcHggcmdiYSgwLCAwLCAwLCAwLjA0Myk7XFxuICAgIGJvcmRlci1yaWdodDogJGJvcmRlci1jb2xvciA1cHggc29saWQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXG4gICAgei1pbmRleDogNDtcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgIHBhZGRpbmc6IDIwcHggMjBweCAyMHB4IDIwcHg7XFxuXFxuICAgIC5jaGF0SXRlbSB7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcblxcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMnM7XFxuXFxuICAgICAgICBoZWlnaHQ6IDcwcHg7XFxuICAgICAgICB3aWR0aDogMTYuNmVtO1xcblxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuXFxuICAgICAgICBwIHtcXG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgICAgICB9XFxuICAgICAgICBpbWcge1xcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgICAgICB9XFxuICAgICAgICBwYWRkaW5nOiAxNXB4O1xcbiAgICAgICAgbWFyZ2luOiAyMHB4IDEwcHggMjBweCAwcHg7XFxuICAgICAgICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODc5KTtcXG4gICAgICAgIC8vIGJveC1zaGFkb3c6IDAgMCAyMHB4IHJnYmEoMCwgMCwgMCwgMC4wOTYpO1xcbiAgICAgICAgJi5jaGF0QWN0aXZlIHtcXG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6ICRib3JkZXItY29sb3IgMTBweCBzb2xpZDtcXG4gICAgICAgICAgICAvLyB3aWR0aDogMTZlbTtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDksIDIzMiwgMjMyLCAwKTtcXG4gICAgICAgICAgICBmb250LXdlaWdodDogOTAwO1xcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMCkgMHB4IDBweCAyMHB4O1xcbiAgICAgICAgICAgIGNvbG9yOiBibGFjaztcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY29udmVyc2F0aW9uLXZpZXd7ZmxleDo4MCU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTk4LDE5OCwxOTgsMC4xOTkpO2hlaWdodDoxMDAlO2JhY2tkcm9wLWZpbHRlcjpibHVyKDNweCk7ei1pbmRleDowO292ZXJmbG93OnZpc2libGU7cG9zaXRpb246cmVsYXRpdmV9LmNvbnZlcnNhdGlvbi12aWV3IC5jdXJyZW50Q29udmVyc2F0aW9uSW5mb3twb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjMwO3RvcDowO3dpZHRoOjEwMCU7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjIwcHg7Ym9yZGVyLWJvdHRvbTojZjBlMWQ2IDNweCBzb2xpZDtiYWNrZHJvcC1maWx0ZXI6Ymx1cigzcHgpO2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjc4MSl9LmNvbnZlcnNhdGlvbi12aWV3IC5jdXJyZW50Q29udmVyc2F0aW9uSW5mbyBoMXttYXJnaW4tbGVmdDoyMHB4O2ZvbnQtc2l6ZToxNXB4fS5jb252ZXJzYXRpb24tdmlldyAubWVzc2FnZXMtdmlld3tvdmVyZmxvdy15OnZpc2libGU7ZmxleDo4MCU7cGFkZGluZy10b3A6N2VtOy1tcy1vdmVyZmxvdy1zdHlsZTpub25lO3Njcm9sbGJhci13aWR0aDpub25lfS5jb252ZXJzYXRpb24tdmlldyAubWVzc2FnZXMtdmlldzo6LXdlYmtpdC1zY3JvbGxiYXJ7ZGlzcGxheTpub25lfS5jb252ZXJzYXRpb24tdmlldyAubWVzc2FnZXMtdmlldyAubWVzc2FnZS1ib3h7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWxlZnQ6MjBweDttYXJnaW4tYm90dG9tOjIwcHg7ZGlzcGxheTpmbGV4O2FuaW1hdGlvbjptZXNzYWdlRmxvYXRJbiAwLjJzIGVhc2UtaW59LmNvbnZlcnNhdGlvbi12aWV3IC5tZXNzYWdlcy12aWV3IC5tZXNzYWdlLWJveC5yZWNlaXZpbmctbXNnIGltZ3t3aWR0aDozMHB4O2hlaWdodDozMHB4O2JvcmRlci13aWR0aDozcHg7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjB9LmNvbnZlcnNhdGlvbi12aWV3IC5tZXNzYWdlcy12aWV3IC5tZXNzYWdlLWJveC5yZWNlaXZpbmctbXNnIHB7bWF4LXdpZHRoOjYwMHB4O3dvcmQtd3JhcDpicmVhay13b3JkO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3gtc2hhZG93OnJnYmEoMCwwLDAsMC4wMjcpIDBweCAwcHggMjBweDtwYWRkaW5nOjIwcHg7bWFyZ2luLWxlZnQ6NDBweH0uY29udmVyc2F0aW9uLXZpZXcgLm1lc3NhZ2VzLXZpZXcgLm1lc3NhZ2UtYm94LnNlbmRpbmctbXNne2p1c3RpZnktY29udGVudDplbmR9LmNvbnZlcnNhdGlvbi12aWV3IC5tZXNzYWdlcy12aWV3IC5tZXNzYWdlLWJveC5zZW5kaW5nLW1zZyBwe2JhY2tncm91bmQtY29sb3I6I2UyYzViMTtwYWRkaW5nOjIwcHg7bWF4LXdpZHRoOjYwMHB4O3dvcmQtd3JhcDpicmVhay13b3JkO21hcmdpbi1yaWdodDo0MHB4O2NvbG9yOndoaXRlfS5jb252ZXJzYXRpb24tdmlldyAuc2VuZC1tZXNzYWdlLWZvcm17ZmxleDoyMCU7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsMC43ODEpO2JveC1zaGFkb3c6cmdiYSgwLDAsMCwwLjA1NykgMHB4IDAgMjBweH0uY29udmVyc2F0aW9uLXZpZXcgLnNlbmQtbWVzc2FnZS1mb3JtIC5zZW5kLWJ0bntmbGV4OjEwJX1Aa2V5ZnJhbWVzIG1lc3NhZ2VGbG9hdEluezAle21hcmdpbi10b3A6MzBweDtvcGFjaXR5OjAuMX0xMDAle21hcmdpbi10b3A6MDtvcGFjaXR5OjF9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvTWVzc2FnZS9Db252ZXJzYXRpb25WaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsbUJBQ0ksUUFBUyxDQUNULFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsd0NBQTRDLENBQzVDLFdBQVksQ0FDWix5QkFBMEIsQ0FFMUIsU0FBVSxDQUNWLGdCQUFpQixDQUNqQixpQkFBa0IsQ0FWdEIsNENBYVEsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxLQUFNLENBQ04sVUFBVyxDQUVYLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsWUFBYSxDQUNiLCtCQUFvRCxDQUNwRCx5QkFBMEIsQ0FDMUIsd0NBQTRDLENBdkJwRCwrQ0F5QlksZ0JBQWlCLENBQ2pCLGNBQWUsQ0ExQjNCLGtDQStCUSxrQkFBbUIsQ0FDbkIsUUFBUyxDQUNULGVBQWdCLENBSWhCLHVCQUF3QixDQUN4QixvQkFBcUIsQ0F0QzdCLHFEQW1DWSxZQUFhLENBbkN6QiwrQ0F5Q1ksaUJBQWtCLENBQ2xCLGdCQUFpQixDQUNqQixrQkFBbUIsQ0FDbkIsWUFBYSxDQUViLHFDQUFzQyxDQTlDbEQsaUVBa0RvQixVQUFXLENBQ1gsV0FBWSxDQUNaLGdCQUFpQixDQUVqQixpQkFBa0IsQ0FDbEIsUUFBUyxDQXZEN0IsK0RBMERvQixlQUFnQixDQUNoQixvQkFBcUIsQ0FFckIscUJBQW9DLENBQ3BDLHlDQUE2QyxDQUM3QyxZQUFhLENBQ2IsZ0JBQWlCLENBaEVyQywyREFvRWdCLG1CQUFvQixDQXBFcEMsNkRBdUVvQix3QkFBNkMsQ0FFN0MsWUFBYSxDQUNiLGVBQWdCLENBQ2hCLG9CQUFxQixDQUVyQixpQkFBa0IsQ0FDbEIsV0FBWSxDQTlFaEMsc0NBcUZRLFFBQVMsQ0FDVCxVQUFXLENBQ1gsd0NBQTRDLENBRTVDLHVDQUEyQyxDQXpGbkQsZ0RBNkZZLFFBQVMsQ0FDWiwwQkFLTCxHQUNJLGVBQWdCLENBQ2hCLFdBQVksQ0FFaEIsS0FDSSxZQUFhLENBQ2IsU0FBVSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuLmNvbnZlcnNhdGlvbi12aWV3IHtcXG4gICAgZmxleDogODAlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE5OCwgMTk4LCAxOTgsIDAuMTk5KTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoM3B4KTtcXG5cXG4gICAgei1pbmRleDogMDtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXG4gICAgLmN1cnJlbnRDb252ZXJzYXRpb25JbmZvIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHotaW5kZXg6IDMwO1xcbiAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgICAgICBib3JkZXItYm90dG9tOiBsaWdodGVuKCRib3JkZXItY29sb3IsIDIwJSkgM3B4IHNvbGlkO1xcbiAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDNweCk7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzgxKTtcXG4gICAgICAgIGgxIHtcXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMjBweDtcXG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLm1lc3NhZ2VzLXZpZXcge1xcbiAgICAgICAgb3ZlcmZsb3cteTogdmlzaWJsZTtcXG4gICAgICAgIGZsZXg6IDgwJTtcXG4gICAgICAgIHBhZGRpbmctdG9wOiA3ZW07XFxuICAgICAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcXG4gICAgICAgIH1cXG4gICAgICAgIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTtcXG4gICAgICAgIHNjcm9sbGJhci13aWR0aDogbm9uZTtcXG5cXG4gICAgICAgIC5tZXNzYWdlLWJveCB7XFxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG5cXG4gICAgICAgICAgICBhbmltYXRpb246IG1lc3NhZ2VGbG9hdEluIDAuMnMgZWFzZS1pbjtcXG5cXG4gICAgICAgICAgICAmLnJlY2VpdmluZy1tc2cge1xcbiAgICAgICAgICAgICAgICBpbWcge1xcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDMwcHg7XFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwcHg7XFxuICAgICAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDNweDtcXG5cXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBwIHtcXG4gICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogNjAwcHg7XFxuICAgICAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxuXFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxuICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMDI3KSAwcHggMHB4IDIwcHg7XFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDQwcHg7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgJi5zZW5kaW5nLW1zZyB7XFxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZW5kO1xcblxcbiAgICAgICAgICAgICAgICBwIHtcXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0ZW4oJGJvcmRlci1jb2xvciwgMTAlKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDYwMHB4O1xcbiAgICAgICAgICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkO1xcblxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0MHB4O1xcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIC5zZW5kLW1lc3NhZ2UtZm9ybSB7XFxuICAgICAgICAvLyBoZWlnaHQ6IDEwMHB4O1xcbiAgICAgICAgZmxleDogMjAlO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzgxKTtcXG5cXG4gICAgICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4wNTcpIDBweCAwIDIwcHg7XFxuXFxuICAgICAgICAvLyBwYWRkaW5nOiAyMHB4O1xcbiAgICAgICAgLnNlbmQtYnRuIHtcXG4gICAgICAgICAgICBmbGV4OiAxMCU7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXFxuQGtleWZyYW1lcyBtZXNzYWdlRmxvYXRJbiB7XFxuICAgIDAlIHtcXG4gICAgICAgIG1hcmdpbi10b3A6IDMwcHg7XFxuICAgICAgICBvcGFjaXR5OiAwLjE7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBtYXJnaW4tdG9wOiAwO1xcbiAgICAgICAgb3BhY2l0eTogMTtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubm90aWZpY2F0aW9ue29wYWNpdHk6MDtwb3NpdGlvbjpmaXhlZDtib3R0b206LTEwMHB4O3JpZ2h0OjIwcHg7bWFyZ2luLWxlZnQ6MjBweDtiYWNrZHJvcC1maWx0ZXI6Ymx1cigxMHB4KTtwYWRkaW5nOjIwcHggODBweCAyMHB4IDgwcHg7dHJhbnNpdGlvbjphbGwgMC40cyBlYXNlLWluLW91dDtib3gtc2hhZG93OnJnYmEoMCwwLDAsMC4wNjQpIDVweCA1cHggNXB4O3RleHQtc2hhZG93OnJnYmEoMCwwLDAsMC4wNjQpIDVweCA1cHggNXB4O3otaW5kZXg6MjAyMDAyMDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6c3RhcnQ7anVzdGlmeS1jb250ZW50OnN0YXJ0O2ZvbnQtc2l6ZToxNXB4fS5ub3RpZmljYXRpb24uZXJyb3J7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEzOSwwLDAsMC40MTMpO2NvbG9yOndoaXRlfS5ub3RpZmljYXRpb24uc3VjY2Vzc3tiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoNTEsMTIxLDY5LDAuNjQ2KTtjb2xvcjp3aGl0ZX0ubm90aWZpY2F0aW9uLmFjdGl2ZXtvcGFjaXR5OjE7Ym90dG9tOjMwcHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9Ob3RpZmljYXRpb24vTm90aWZpY2F0aW9uLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsY0FDSSxTQUFVLENBQ1YsY0FBZSxDQUNmLGFBQWMsQ0FDZCxVQUFXLENBQ1gsZ0JBQWlCLENBQ2pCLDBCQUEyQixDQUMzQiwyQkFBNEIsQ0FDNUIsK0JBQWdDLENBQ2hDLHdDQUE0QyxDQUM1Qyx5Q0FBNkMsQ0FFN0MsZUFBZ0IsQ0FFaEIsWUFBYSxDQUNiLGlCQUFrQixDQUNsQixxQkFBc0IsQ0FDdEIsY0FBZSxDQWpCbkIsb0JBbUJRLG9DQUF3QyxDQUN4QyxXQUFZLENBcEJwQixzQkF1QlEsc0NBQTBDLENBQzFDLFdBQVksQ0F4QnBCLHFCQTJCUSxTQUFVLENBQ1YsV0FBWVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubm90aWZpY2F0aW9uIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICBib3R0b206IC0xMDBweDtcXG4gICAgcmlnaHQ6IDIwcHg7XFxuICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTBweCk7XFxuICAgIHBhZGRpbmc6IDIwcHggODBweCAyMHB4IDgwcHg7XFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2UtaW4tb3V0O1xcbiAgICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMDY0KSA1cHggNXB4IDVweDtcXG4gICAgdGV4dC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4wNjQpIDVweCA1cHggNXB4O1xcblxcbiAgICB6LWluZGV4OiAyMDIwMDIwO1xcblxcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XFxuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxuICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gICAgJi5lcnJvciB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDEzOSwgMCwgMCwgMC40MTMpO1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxuICAgICYuc3VjY2VzcyB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDUxLCAxMjEsIDY5LCAwLjY0Nik7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG4gICAgJi5hY3RpdmUge1xcbiAgICAgICAgb3BhY2l0eTogMTtcXG4gICAgICAgIGJvdHRvbTogMzBweDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucG9wdXAtd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZX0ucG9wdXB7cG9zaXRpb246Zml4ZWQ7b3ZlcmZsb3cteTpzY3JvbGw7d2lkdGg6NjB2dztoZWlnaHQ6YXV0bzt0b3A6MTAlO2xlZnQ6MjAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMCk7ei1pbmRleDo5OTk5O2JhY2tncm91bmQtY29sb3I6d2hpdGU7Ym94LXNoYWRvdzowIDAgMCAxcHggcmdiYSg5Nyw5Nyw5NywwLjEpLDAgM3B4IDIwcHggMCByZ2JhKDkyLDkyLDkyLDAuMyksMCAxcHggMnB4IHJnYmEoMCwwLDAsMC41KTtib3JkZXItcmFkaXVzOjVweDt0cmFuc2Zvcm06c2NhbGUoMC45KTtvcGFjaXR5OjA7dHJhbnNpdGlvbjphbGwgMC4zcyBlYXNlLWluLW91dDtwb2ludGVyLWV2ZW50czpub25lO292ZXJmbG93LXk6YXV0b31AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey5wb3B1cHtib3JkZXItcmFkaXVzOjBweDt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX19LnBvcHVwLXRvcHtwYWRkaW5nOjIwcHggMzBweCAwIDMwcHg7aGVpZ2h0OjcwcHg7b3ZlcmZsb3cteTpoaWRkZW47Ym9yZGVyLWJvdHRvbTojZDRhYThjIDVweCBzb2xpZDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsMCk7YmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTtwYWRkaW5nLWJvdHRvbToxNXB4fS5wb3B1cC10b3AgaDF7Y29sb3I6YmxhY2s7ZmxleDo5MCU7Zm9udC1zaXplOjI1cHg7Zm9udC13ZWlnaHQ6ODAwfSNwb3B1cC1jbG9zZS1idXR0b257Ym9yZGVyOm5vbmU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjE0cHg7cmlnaHQ6MTdweDt6LWluZGV4OjkwMDA7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDExNiwxMSwxMSwwKTt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O2ZvbnQtZmFtaWx5OlxcXCJHaWxsIFNhbnNcXFwiLCBcXFwiR2lsbCBTYW5zIE1UXFxcIiwgQ2FsaWJyaSwgXFxcIlRyZWJ1Y2hldCBNU1xcXCIsIHNhbnMtc2VyaWY7Zm9udC1zaXplOjIwcHg7Zm9udC13ZWlnaHQ6MTAwO2NvbG9yOiMwMDA7Y3Vyc29yOnBvaW50ZXJ9LnBvcHVwLWJvZHl7cGFkZGluZzoyMHB4O21heC1oZWlnaHQ6NzB2aH1AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey5wb3B1cC1ib2R5e21heC1oZWlnaHQ6MTAwJX19LmFjdGl2ZXt0cmFuc2Zvcm06c2NhbGUoMSk7cG9pbnRlci1ldmVudHM6YWxsO29wYWNpdHk6MX0uYmFja2dyb3VuZHt3aWR0aDoxMDB2dztoZWlnaHQ6MTAwdmg7cG9zaXRpb246Zml4ZWQ7dG9wOjA7ei1pbmRleDo5OTkwO2JhY2tncm91bmQtY29sb3I6I2ZmZmZmZjcwO2JhY2tkcm9wLWZpbHRlcjpibHVyKDVweCk7cG9pbnRlci1ldmVudHM6bm9uZTt0cmFuc2l0aW9uOmFsbCAwLjNzO29wYWNpdHk6MH0uYmFja2dyb3VuZC5hY3RpdmV7cG9pbnRlci1ldmVudHM6YWxsO29wYWNpdHk6MX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1ZpZXdzL1BvcHVwL1BvcHVwLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsZUFDSSxpQkFBa0IsQ0FDckIsT0FHRyxjQUFlLENBQ2YsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxXQUFZLENBQ1osT0FBUSxDQUNSLFFBQVMsQ0FDVCw0QkFBNkIsQ0FDN0IsWUFBYSxDQUNiLHNCQUF1QixDQUV2QixpR0FBNkcsQ0FDN0csaUJBQWtCLENBQ2xCLG9CQUFxQixDQUNyQixTQUFVLENBQ1YsK0JBQWdDLENBQ2hDLG1CQUFvQixDQUNwQixlQUFnQixDQVFuQiwwQkF6QkQsT0FtQlEsaUJBQWtCLENBQ2xCLEtBQU0sQ0FDTixNQUFPLENBQ1AsVUFBVyxDQUNYLFdBQVksQ0FFbkIsQ0FFRCxXQUNJLHdCQUF5QixDQUN6QixXQUFZLENBQ1osaUJBQWtCLENBRWxCLCtCQUFzQyxDQUN0QyxvQ0FBd0MsQ0FDeEMseUJBQTBCLENBQzFCLG1CQUFvQixDQVJ4QixjQVdRLFdBQVksQ0FDWixRQUFTLENBQ1QsY0FBZSxDQUNmLGVBQWdCLENBQ25CLG9CQUlELFdBQVksQ0FDWixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULFVBQVcsQ0FDWCxZQUFhLENBQ2Isa0NBQXNDLENBQ3RDLFVBQVcsQ0FDWCxXQUFZLENBQ1osNEVBQTZFLENBQzdFLGNBQWUsQ0FDZixlQUFnQixDQUNoQixVQUFtQixDQUNuQixjQUFlLENBQ2xCLFlBR0csWUFBYSxDQUNiLGVBQWdCLENBSW5CLDBCQU5ELFlBSVEsZUFBZ0IsQ0FFdkIsQ0FFRCxRQUNJLGtCQUFtQixDQUNuQixrQkFBbUIsQ0FDbkIsU0FBVSxDQUNiLFlBR0csV0FBWSxDQUNaLFlBQWEsQ0FDYixjQUFlLENBQ2YsS0FBTSxDQUNOLFlBQWEsQ0FDYiwwQkFBMkIsQ0FDM0IseUJBQTBCLENBQzFCLG1CQUFvQixDQUNwQixtQkFBb0IsQ0FDcEIsU0FBVSxDQVZkLG1CQWFRLGtCQUFtQixDQUNuQixTQUFVXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuXFxuLnBvcHVwLXdyYXBwZXIge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5wb3B1cCB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbiAgICB3aWR0aDogNjB2dztcXG4gICAgaGVpZ2h0OiBhdXRvO1xcbiAgICB0b3A6IDEwJTtcXG4gICAgbGVmdDogMjAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcXG4gICAgei1pbmRleDogOTk5OTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCByZ2JhKDk3LCA5NywgOTcsIDAuMSksIDAgM3B4IDIwcHggMCByZ2JhKDkyLCA5MiwgOTIsIDAuMyksIDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkpO1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIG92ZXJmbG93LXk6IGF1dG87XFxuICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiAwcHg7XFxuICAgICAgICB0b3A6IDA7XFxuICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIH1cXG59XFxuXFxuLnBvcHVwLXRvcCB7XFxuICAgIHBhZGRpbmc6IDIwcHggMzBweCAwIDMwcHg7XFxuICAgIGhlaWdodDogNzBweDtcXG4gICAgb3ZlcmZsb3cteTogaGlkZGVuO1xcblxcbiAgICBib3JkZXItYm90dG9tOiAkYm9yZGVyLWNvbG9yIDVweCBzb2xpZDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwKTtcXG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDNweCk7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxNXB4O1xcblxcbiAgICBoMSB7XFxuICAgICAgICBjb2xvcjogYmxhY2s7XFxuICAgICAgICBmbGV4OiA5MCU7XFxuICAgICAgICBmb250LXNpemU6IDI1cHg7XFxuICAgICAgICBmb250LXdlaWdodDogODAwO1xcbiAgICB9XFxufVxcblxcbiNwb3B1cC1jbG9zZS1idXR0b24ge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAxNHB4O1xcbiAgICByaWdodDogMTdweDtcXG4gICAgei1pbmRleDogOTAwMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTYsIDExLCAxMSwgMCk7XFxuICAgIHdpZHRoOiA0MHB4O1xcbiAgICBoZWlnaHQ6IDQwcHg7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiR2lsbCBTYW5zXFxcIiwgXFxcIkdpbGwgU2FucyBNVFxcXCIsIENhbGlicmksIFxcXCJUcmVidWNoZXQgTVNcXFwiLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiAxMDA7XFxuICAgIGNvbG9yOiByZ2IoMCwgMCwgMCk7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnBvcHVwLWJvZHkge1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICBtYXgtaGVpZ2h0OiA3MHZoO1xcbiAgICBAaW5jbHVkZSBtb2JpbGUge1xcbiAgICAgICAgbWF4LWhlaWdodDogMTAwJTtcXG4gICAgfVxcbn1cXG5cXG4uYWN0aXZlIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gICAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG4gICAgb3BhY2l0eTogMTtcXG59XFxuXFxuLmJhY2tncm91bmQge1xcbiAgICB3aWR0aDogMTAwdnc7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgdG9wOiAwO1xcbiAgICB6LWluZGV4OiA5OTkwO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmNzA7XFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cig1cHgpO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3M7XFxuICAgIG9wYWNpdHk6IDA7XFxuXFxuICAgICYuYWN0aXZlIHtcXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5yZXBvcnQtdmlld3twYWRkaW5nOjIwcHh9LnJlcG9ydC12aWV3IGgxe2ZvbnQtc2l6ZToyMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvUmVwb3J0L1JlcG9ydFZpZXcuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxhQUNJLFlBQWEsQ0FEakIsZ0JBR1EsY0FBZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmVwb3J0LXZpZXcge1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICBoMSB7XFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNlYXJjaC1yZXN1bHRze2ZsZXg6NzAlO2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjE5OSk7aGVpZ2h0OjEwMCU7YmFja2Ryb3AtZmlsdGVyOmJsdXIoM3B4KTtwYWRkaW5nOjEwcHggMjBweCA4MHB4IDEwcHg7ei1pbmRleDowO292ZXJmbG93LXk6c2Nyb2xsfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFJlc3VsdHMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxnQkFDSSxRQUFTLENBQ1Qsd0NBQTRDLENBQzVDLFdBQVksQ0FDWix5QkFBMEIsQ0FFMUIsMkJBQTRCLENBQzVCLFNBQVUsQ0FDVixpQkFBa0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnNlYXJjaC1yZXN1bHRzIHtcXG4gICAgZmxleDogNzAlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTk5KTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoM3B4KTtcXG5cXG4gICAgcGFkZGluZzogMTBweCAyMHB4IDgwcHggMTBweDtcXG4gICAgei1pbmRleDogMDtcXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc2VhcmNoLXZpZXd7ZmxleDozMCU7aGVpZ2h0OjEwMCU7Ym94LXNoYWRvdzoxMHB4IDBweCAyMHB4IHJnYmEoMCwwLDAsMC4wNzEpO2JvcmRlci1yaWdodDojZDRhYThjIDVweCBzb2xpZDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7ei1pbmRleDo0O292ZXJmbG93OmF1dG87cGFkZGluZzoyMHB4IDIwcHggMjBweCAyMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvU2VhcmNoL1NlYXJjaFZpZXcuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSxhQUNJLFFBQVMsQ0FDVCxXQUFZLENBQ1osMENBQThDLENBQzlDLDhCQUFxQyxDQUNyQyxxQkFBb0MsQ0FDcEMsU0FBVSxDQUNWLGFBQWMsQ0FDZCwyQkFBNEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG5cXG4uc2VhcmNoLXZpZXcge1xcbiAgICBmbGV4OiAzMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgYm94LXNoYWRvdzogMTBweCAwcHggMjBweCByZ2JhKDAsIDAsIDAsIDAuMDcxKTtcXG4gICAgYm9yZGVyLXJpZ2h0OiAkYm9yZGVyLWNvbG9yIDVweCBzb2xpZDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcbiAgICB6LWluZGV4OiA0O1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG4gICAgcGFkZGluZzogMjBweCAyMHB4IDIwcHggMjBweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmpvaW4tZ3JvdXAtY29udGFpbmVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LmpvaW4tZ3JvdXAtY29udGFpbmVyIC5zdWItaW5mb3tkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXB9LmpvaW4tZ3JvdXAtY29udGFpbmVyIC5pbmZve3BhZGRpbmc6MjBweH0uam9pbi1ncm91cC1jb250YWluZXIgLmluZm8gcHt3b3JkLXdyYXA6bm9ybWFsfS5qb2luLWdyb3VwLWNvbnRhaW5lciAuZ3JvdXAtcG9wdXAtdGl0bGV7d2lkdGg6MTAwJTttYXJnaW46LTIwcHg7aGVpZ2h0OjVlbTtwYWRkaW5nLWxlZnQ6MzBweDtjb2xvcjp3aGl0ZTtwb3NpdGlvbjphYnNvbHV0ZTtib3gtc2hhZG93Omluc2V0IDAgMTBweCAyMHB4IHJnYmEoMCwwLDAsMC4yNjIpO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uam9pbi1ncm91cC1jb250YWluZXIgLmdyb3VwLXBvcHVwLXRpdGxlIGgxe3dpZHRoOjEwMCU7dGV4dC1hbGlnbjpsZWZ0fS5qb2luLWdyb3VwLWNvbnRhaW5lciAucG9wdXAtaW5mby1maWVsZHN7bWFyZ2luLXRvcDo1ZW19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9qb2luU3R1ZHlHcm91cFZpZXcvSm9pblN0dWR5R3JvdXBWaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsc0JBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUYxQixnQ0FJUSxZQUFhLENBQ2IsY0FBZSxDQUx2Qiw0QkFRUSxZQUFhLENBUnJCLDhCQVVZLGdCQUFpQixDQVY3Qix5Q0FlUSxVQUFXLENBQ1gsWUFBYSxDQUNiLFVBQVcsQ0FDWCxpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLGlCQUFrQixDQUNsQiw4Q0FBa0QsQ0FFbEQsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixzQkFBdUIsQ0F6Qi9CLDRDQTRCWSxVQUFXLENBQ1gsZUFBZ0IsQ0E3QjVCLHlDQWtDUSxjQUFlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5qb2luLWdyb3VwLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIC5zdWItaW5mbyB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICB9XFxuICAgIC5pbmZvIHtcXG4gICAgICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgICAgICBwIHtcXG4gICAgICAgICAgICB3b3JkLXdyYXA6IG5vcm1hbDtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAuZ3JvdXAtcG9wdXAtdGl0bGUge1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBtYXJnaW46IC0yMHB4O1xcbiAgICAgICAgaGVpZ2h0OiA1ZW07XFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwIDEwcHggMjBweCByZ2JhKDAsIDAsIDAsIDAuMjYyKTtcXG5cXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFxuICAgICAgICBoMSB7XFxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAucG9wdXAtaW5mby1maWVsZHMge1xcbiAgICAgICAgbWFyZ2luLXRvcDogNWVtO1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zdHVkeS1ncm91cC12aWV3e21pbi13aWR0aDoyMDBweDttaW4taGVpZ2h0OjIwMHB4O3BhZGRpbmc6MzBweCAyMHB4IDgwcHggMjBweDtvdmVyZmxvdzpub25lO2JveC1zaGFkb3c6MHB4IDEwcHggMTBweCAjMDAwMDAwMGE7bWFyZ2luOjMwcHg7cG9zaXRpb246cmVsYXRpdmU7YW5pbWF0aW9uOmZsb2F0LWluLWdyb3VwIDAuM3MgZWFzZS1vdXQ7Ym94LXNoYWRvdzpyZ2JhKDAsMCwwLDAuMTczKSA1cHggNXB4IDIwcHg7Ym9yZGVyLXJhZGl1czo1cHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5zdHVkeS1ncm91cC12aWV3IC5ncm91cC10aXRsZXtjb2xvcjojZmZmO2ZvbnQtc2l6ZTozMHB4O3RleHQtc2hhZG93OnJnYmEoMCwwLDAsMC43MDUpIDNweCA1cHggNXB4IDEwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LnN0dWR5LWdyb3VwLXZpZXcgLmdyb3VwLXZpZXctc3ViLWRldGFpbHN7cG9zaXRpb246YWJzb2x1dGU7dG9wOjVweDtyaWdodDo1cHg7ZGlzcGxheTpmbGV4fS5zdHVkeS1ncm91cC12aWV3IC5ncm91cC12aWV3LXN1Yi1kZXRhaWxzIHB7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LDAuMzQ5KTtiYWNrZHJvcC1maWx0ZXI6Ymx1cig1cHgpO2NvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czo3cHg7Zm9udC1zaXplOjEwcHg7cGFkZGluZzozcHg7bWFyZ2luLWxlZnQ6NXB4O3RleHQtc2hhZG93OnJnYmEoMCwwLDAsMC43MDUpIDNweCA1cHggNXB4IDEwcHh9LnN0dWR5LWdyb3VwLXZpZXcgLmdyb3VwLXZpZXctZGV0YWlsc3tkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjA7bGVmdDowO3dpZHRoOjEwMCU7cGFkZGluZzoyMHB4O2JhY2tncm91bmQtY29sb3I6cmdiYSgyNTUsMjU1LDI1NSwwLjk4Mik7Ym94LXNoYWRvdzotMTBweCAwcHggMjBweCByZ2JhKDAsMCwwLDAuMTM5KTtib3JkZXItdG9wOiNlM2UzZTMgc29saWQgM3B4fS5zdHVkeS1ncm91cC12aWV3IC5ncm91cC12aWV3LWRldGFpbHMgcHtmb250LXNpemU6MTBweDtjb2xvcjojNTQ1NDU0O21hcmdpbjowcHggMTBweCAwIDEwcHh9QGtleWZyYW1lcyBmbG9hdC1pbi1ncm91cHswJXttYXJnaW4tdG9wOjUwcHg7b3BhY2l0eTowfTEwMCV7bWFyZ2luLXRvcDozMHB4O29wYWNpdHk6MX19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeS9zdHVkeUdyb3VwVmlldy9TdHVkeUdyb3VwVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGtCQUNJLGVBQWdCLENBQ2hCLGdCQUFpQixDQUNqQiwyQkFBNEIsQ0FDNUIsYUFBYyxDQUNkLGtDQUFtQyxDQUNuQyxXQUFZLENBQ1osaUJBQWtCLENBQ2xCLHNDQUF1QyxDQUV2Qyx5Q0FBNkMsQ0FDN0MsaUJBQWtCLENBRWxCLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBZjNCLCtCQWtCUSxVQUF5QixDQUN6QixjQUFlLENBQ2YsOENBQWtELENBQ2xELGlCQUFrQixDQXJCMUIsMENBd0JRLGlCQUFrQixDQUNsQixPQUFRLENBQ1IsU0FBVSxDQUNWLFlBQWEsQ0EzQnJCLDRDQTZCWSx3Q0FBNEMsQ0FDNUMseUJBQTBCLENBQzFCLFVBQXlCLENBQ3pCLGlCQUFrQixDQUNsQixjQUFlLENBQ2YsV0FBWSxDQUNaLGVBQWdCLENBQ2hCLDhDQUFrRCxDQXBDOUQsc0NBd0NRLFlBQWEsQ0FDYixjQUFlLENBQ2YsaUJBQWtCLENBQ2xCLFFBQVMsQ0FDVCxNQUFPLENBQ1AsVUFBVyxDQUNYLFlBQWEsQ0FDYix3Q0FBNEMsQ0FDNUMsMkNBQStDLENBQy9DLDRCQUF3QyxDQWpEaEQsd0NBb0RZLGNBQWUsQ0FDZixhQUFzQixDQUN0QixzQkFBdUIsQ0FDMUIsMEJBS0wsR0FDSSxlQUFnQixDQUNoQixTQUFVLENBRWQsS0FDSSxlQUFnQixDQUNoQixTQUFVLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnN0dWR5LWdyb3VwLXZpZXcge1xcbiAgICBtaW4td2lkdGg6IDIwMHB4O1xcbiAgICBtaW4taGVpZ2h0OiAyMDBweDtcXG4gICAgcGFkZGluZzogMzBweCAyMHB4IDgwcHggMjBweDtcXG4gICAgb3ZlcmZsb3c6IG5vbmU7XFxuICAgIGJveC1zaGFkb3c6IDBweCAxMHB4IDEwcHggIzAwMDAwMDBhO1xcbiAgICBtYXJnaW46IDMwcHg7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgYW5pbWF0aW9uOiBmbG9hdC1pbi1ncm91cCAwLjNzIGVhc2Utb3V0O1xcblxcbiAgICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMTczKSA1cHggNXB4IDIwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFxuICAgIC5ncm91cC10aXRsZSB7XFxuICAgICAgICBjb2xvcjogcmdiKDI1NSwgMjU1LCAyNTUpO1xcbiAgICAgICAgZm9udC1zaXplOiAzMHB4O1xcbiAgICAgICAgdGV4dC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC43MDUpIDNweCA1cHggNXB4IDEwcHg7XFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIH1cXG4gICAgLmdyb3VwLXZpZXctc3ViLWRldGFpbHMge1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgdG9wOiA1cHg7XFxuICAgICAgICByaWdodDogNXB4O1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIHAge1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zNDkpO1xcbiAgICAgICAgICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cig1cHgpO1xcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogN3B4O1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTBweDtcXG4gICAgICAgICAgICBwYWRkaW5nOiAzcHg7XFxuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDVweDtcXG4gICAgICAgICAgICB0ZXh0LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjcwNSkgM3B4IDVweCA1cHggMTBweDtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICAuZ3JvdXAtdmlldy1kZXRhaWxzIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBib3R0b206IDA7XFxuICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjk4Mik7XFxuICAgICAgICBib3gtc2hhZG93OiAtMTBweCAwcHggMjBweCByZ2JhKDAsIDAsIDAsIDAuMTM5KTtcXG4gICAgICAgIGJvcmRlci10b3A6IHJnYigyMjcsIDIyNywgMjI3KSBzb2xpZCAzcHg7XFxuXFxuICAgICAgICBwIHtcXG4gICAgICAgICAgICBmb250LXNpemU6IDEwcHg7XFxuICAgICAgICAgICAgY29sb3I6IHJnYig4NCwgODQsIDg0KTtcXG4gICAgICAgICAgICBtYXJnaW46IDBweCAxMHB4IDAgMTBweDtcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cXG5Aa2V5ZnJhbWVzIGZsb2F0LWluLWdyb3VwIHtcXG4gICAgMCUge1xcbiAgICAgICAgbWFyZ2luLXRvcDogNTBweDtcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbiAgICAgICAgb3BhY2l0eTogMTtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZGV0YWlscy1jb250YWluZXJ7b3ZlcmZsb3cteTpzY3JvbGw7ZmxleDowLjI7bWluLXdpZHRoOjE2ZW07YmFja2dyb3VuZC1jb2xvcjojZmZmO2JveC1zaGFkb3c6MCAwIDAgMXB4IHJnYmEoOTcsOTcsOTcsMC4xKSwwIDNweCAyMHB4IDAgcmdiYSg5Miw5Miw5MiwwLjMpLDAgMXB4IDJweCByZ2JhKDAsMCwwLDAuNSk7Ym9yZGVyLXJhZGl1czo1cHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjttYXJnaW46MjBweDtwb3NpdGlvbjpyZWxhdGl2ZX0uZGV0YWlscy1jb250YWluZXIgLm1lZXRpbmdpbmZvLWNvbnRhaW5lcntwYWRkaW5nOjMwcHg7d2lkdGg6MTAwJTtmb250LXdlaWdodDpib2xkO2JveC1zaGFkb3c6MTBweCAwIDEwcHggcmdiYSgwLDAsMCwwLjE3Myl9LmRldGFpbHMtY29udGFpbmVyIC5tZWV0aW5naW5mby1jb250YWluZXIgaDF7YmFja2dyb3VuZC1jb2xvcjojZmZkYTVhO2ZvbnQtc2l6ZToyMHB4O21hcmdpbi1ib3R0b206MTBweH0uZGV0YWlscy1jb250YWluZXIgLm1lZXRpbmdpbmZvLWNvbnRhaW5lciAubWVldGluZ2luZm8tZGVzY3JpcHRpb257Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToxNXB4fS5kZXRhaWxzLWNvbnRhaW5lciAuZGVzY3JpcHRpb24tY29udGFpbmVye3BhZGRpbmc6MzBweCAyMHB4IDAgMjBweDtmb250LXdlaWdodDpib2xkO3dpZHRoOjEwMCV9LmRldGFpbHMtY29udGFpbmVyIC5kZXNjcmlwdGlvbi1jb250YWluZXIgaDF7Zm9udC1zaXplOjE1cHg7bWFyZ2luLWJvdHRvbToxMHB4fS5kZXRhaWxzLWNvbnRhaW5lciAuZGVzY3JpcHRpb24tY29udGFpbmVyIC5kZXRhaWxzLWRlc2NyaXB0aW9ue2ZvbnQtd2VpZ2h0Om5vcm1hbDt3b3JkLXdyYXA6YnJlYWstd29yZDt3aWR0aDoxMDAlO2ZvbnQtc2l6ZToxNXB4fS5kZXRhaWxzLWNvbnRhaW5lciAuYnV0dG9uc3twb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MjBweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvRGV0YWlsc1ZpZXcvRGV0YWlsc1ZpZXcuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsbUJBQ0ksaUJBQWtCLENBQ2xCLFFBQVMsQ0FDVCxjQUFlLENBQ2YscUJBQW9DLENBRXBDLGlHQUE2RyxDQUM3RyxpQkFBa0IsQ0FDbEIsWUFBYSxDQUNiLHFCQUFzQixDQUN0QixXQUFZLENBQ1osaUJBQWtCLENBWHRCLDBDQWtCUSxZQUFhLENBQ2IsVUFBVyxDQUVYLGdCQUFpQixDQUNqQix3Q0FBNEMsQ0F0QnBELDZDQXdCWSx3QkNwQmEsQ0RxQmIsY0FBZSxDQUNmLGtCQUFtQixDQTFCL0IsbUVBOEJZLGtCQUFtQixDQUNuQixjQUFlLENBL0IzQiwwQ0FvQ1Esd0JBQXlCLENBQ3pCLGdCQUFpQixDQUNqQixVQUFXLENBdENuQiw2Q0F3Q1ksY0FBZSxDQUNmLGtCQUFtQixDQXpDL0IsK0RBNkNZLGtCQUFtQixDQUNuQixvQkFBcUIsQ0FDckIsVUFBVyxDQUNYLGNBQWUsQ0FoRDNCLDRCQW9EUSxpQkFBa0IsQ0FDbEIsV0FBWSxDQUVaLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBQ3ZCLFVBQVdcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG4uZGV0YWlscy1jb250YWluZXIge1xcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XFxuICAgIGZsZXg6IDAuMjtcXG4gICAgbWluLXdpZHRoOiAxNmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxuXFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCByZ2JhKDk3LCA5NywgOTcsIDAuMSksIDAgM3B4IDIwcHggMCByZ2JhKDkyLCA5MiwgOTIsIDAuMyksIDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgbWFyZ2luOiAyMHB4O1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFxuICAgIC8vIGRpc3BsYXk6IGZsZXg7XFxuICAgIC8vIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIC8vIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICAgIC5tZWV0aW5naW5mby1jb250YWluZXIge1xcbiAgICAgICAgcGFkZGluZzogMzBweDtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcblxcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgICAgICBib3gtc2hhZG93OiAxMHB4IDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMTczKTtcXG4gICAgICAgIGgxIHtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkaGlnaGxpZ2h0LWNvbG9yO1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLm1lZXRpbmdpbmZvLWRlc2NyaXB0aW9uIHtcXG4gICAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICAuZGVzY3JpcHRpb24tY29udGFpbmVyIHtcXG4gICAgICAgIHBhZGRpbmc6IDMwcHggMjBweCAwIDIwcHg7XFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgaDEge1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLmRldGFpbHMtZGVzY3JpcHRpb24ge1xcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICAgICAgICAgICAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICAuYnV0dG9ucyB7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBib3R0b206IDIwcHg7XFxuICAgICAgICAvLyBtYXJnaW4tbGVmdDogNzVweDtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgfVxcbn1cXG5cIixcIiRtYWluLWJhY2tncm91bmQtY29sb3I6ICNmOWY1ZjE7XFxuJHByaW1hcnktYnV0dG9uLWNvbG9yOiAjZDRhYThjO1xcbiRjcmVhdGlvbi1idXR0b24tY29sb3I6ICM3MmJhNzI7XFxuJGRlc3RydWN0aXZlLWJ1dHRvbi1jb2xvcjogIzkzMzIzMjtcXG4kYm9yZGVyLWNvbG9yOiAjZDRhYThjO1xcbiRoaWdobGlnaHQtY29sb3I6ICNmZmRhNWE7XFxuXFxuJG1vYmlsZS13aWR0aDogODAwcHg7XFxuXFxuQG1peGluIG1vYmlsZSB7XFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiN7JG1vYmlsZS13aWR0aH0pIHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5mZWVkLWNvbnRhaW5lcntwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzp2aXNpYmxlO292ZXJmbG93LXk6c2Nyb2xsO2ZsZXg6MC42O2JhY2tkcm9wLWZpbHRlcjpibHVyKDNweCk7b3ZlcmZsb3c6YXV0bztwYWRkaW5nOjIwcHg7c2Nyb2xsYmFyLXdpZHRoOm5vbmV9LmZlZWQtY29udGFpbmVyIC5wb3N0cy1jb250YWluZXJ7cGFkZGluZy1ib3R0b206MzBweDtvdmVyZmxvdzp2aXNpYmxlfS5vcHRpb25zLWNvbnRhaW5lcntwb3NpdGlvbjpmaXhlZDt6LWluZGV4Ojk7Ym90dG9tOjA7cmlnaHQ6MzAwcHg7d2lkdGg6MTAwJTt0ZXh0LWFsaWduOnJpZ2h0fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9GZWVkL0ZlZWRWaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsZ0JBQ0ksaUJBQWtCLENBQ2xCLGdCQUFpQixDQUNqQixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULHlCQUEwQixDQUUxQixhQUFjLENBQ2QsWUFBYSxDQUViLG9CQUFxQixDQVZ6QixpQ0FZUSxtQkFBb0IsQ0FDcEIsZ0JBQWlCLENBQ3BCLG1CQUlELGNBQWUsQ0FDZixTQUFVLENBRVYsUUFBUyxDQUNULFdBQVksQ0FDWixVQUFXLENBQ1gsZ0JBQWlCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5mZWVkLWNvbnRhaW5lciB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcXG4gICAgZmxleDogMC42O1xcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoM3B4KTtcXG5cXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgIHBhZGRpbmc6IDIwcHg7XFxuXFxuICAgIHNjcm9sbGJhci13aWR0aDogbm9uZTtcXG4gICAgLnBvc3RzLWNvbnRhaW5lciB7XFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMzBweDtcXG4gICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgICB9XFxufVxcblxcbi5vcHRpb25zLWNvbnRhaW5lciB7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgei1pbmRleDogOTtcXG4gICAgLy9UT0RPIGZpbmQgYSBnb29kIHogaW5kZXhcXG4gICAgYm90dG9tOiAwO1xcbiAgICByaWdodDogMzAwcHg7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1lbWJlcnMtY29udGFpbmVye2JhY2tncm91bmQtY29sb3I6I2ZmZjtiYWNrZHJvcC1maWx0ZXI6Ymx1cigzcHgpO2JveC1zaGFkb3c6MCAwIDAgMXB4IHJnYmEoOTcsOTcsOTcsMC4xKSwwIDNweCAyMHB4IDAgcmdiYSg5Miw5Miw5MiwwLjMpLDAgMXB4IDJweCByZ2JhKDAsMCwwLDAuNSk7Ym9yZGVyLXJhZGl1czo1cHg7bWFyZ2luOjIwcHg7b3ZlcmZsb3cteTpzY3JvbGw7ZmxleDowLjI7bWluLXdpZHRoOjE2ZW19Lm1lbWJlcnMtY29udGFpbmVyIC5tZW1iZXJ7cGFkZGluZzoxMHB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3RyYW5zaXRpb246YWxsIDAuMnM7Ym9yZGVyLWxlZnQ6MHB4IHNvbGlkfS5tZW1iZXJzLWNvbnRhaW5lciAubWVtYmVyIHB7cGFkZGluZy1sZWZ0OjIwcHh9Lm1lbWJlcnMtY29udGFpbmVyIC5tZW1iZXI6Zmlyc3QtY2hpbGR7YmFja2dyb3VuZC1jb2xvcjojZmFmYWZhfS5tZW1iZXJzLWNvbnRhaW5lciAubWVtYmVyOm50aC1jaGlsZCgybiszKXtiYWNrZ3JvdW5kLWNvbG9yOiNmNGY0ZjR9Lm1lbWJlcnMtY29udGFpbmVyIC5tZW1iZXI6aG92ZXJ7Ym9yZGVyLWxlZnQ6MTBweCBzb2xpZDtjb2xvcjpibGFjaztjdXJzb3I6cG9pbnRlcjtvdmVyZmxvdzpoaWRkZW59Lm1lbWJlcnMtY29udGFpbmVyIC5tZW1iZXIub3duZXJ7bWFyZ2luLWJvdHRvbToyMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9NZW1iZXJzL01lbWJlcnNWaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsbUJBQ0kscUJBQW9DLENBQ3BDLHlCQUEwQixDQUMxQixpR0FBNkcsQ0FDN0csaUJBQWtCLENBQ2xCLFdBQVksQ0FDWixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULGNBQWUsQ0FSbkIsMkJBV1EsWUFBYSxDQUNiLHFCQUFvQyxDQUNwQyxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLG1CQUFvQixDQUNwQixxQkFBc0IsQ0FoQjlCLDZCQW9CWSxpQkFBa0IsQ0FwQjlCLHVDQXdCWSx3QkFBb0MsQ0F4QmhELDJDQTJCWSx3QkFBb0MsQ0EzQmhELGlDQStCWSxzQkFBdUIsQ0FFdkIsV0FBWSxDQUNaLGNBQWUsQ0FDZixlQUFnQixDQW5DNUIsaUNBdUNZLGtCQUFtQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCIuLi8uLi8uLi9nbG9iYWxzLnNjc3NcXFwiO1xcbi5tZW1iZXJzLWNvbnRhaW5lciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtcXG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDNweCk7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCByZ2JhKDk3LCA5NywgOTcsIDAuMSksIDAgM3B4IDIwcHggMCByZ2JhKDkyLCA5MiwgOTIsIDAuMyksIDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgbWFyZ2luOiAyMHB4O1xcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XFxuICAgIGZsZXg6IDAuMjtcXG4gICAgbWluLXdpZHRoOiAxNmVtO1xcblxcbiAgICAubWVtYmVyIHtcXG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzO1xcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDBweCBzb2xpZDtcXG4gICAgICAgIC8vIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG5cXG4gICAgICAgIHAge1xcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgICY6Zmlyc3QtY2hpbGQge1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTAsIDI1MCwgMjUwKTtcXG4gICAgICAgIH1cXG4gICAgICAgICY6bnRoLWNoaWxkKDJuICsgMykge1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDQsIDI0NCwgMjQ0KTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgICY6aG92ZXIge1xcbiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxMHB4IHNvbGlkO1xcbiAgICAgICAgICAgIC8vIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDQsIDI0NCwgMjQ0KTtcXG4gICAgICAgICAgICBjb2xvcjogYmxhY2s7XFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgICAgICB9XFxuXFxuICAgICAgICAmLm93bmVyIHtcXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgICAgICAgICAgIC8vIGJvcmRlci13aWR0aDogMjBweDtcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubWVtYmVyLWRldGFpbHN7cGFkZGluZzo2MHB4fS5tZW1iZXItZGV0YWlscyAubWVtYmVyLXByaW1hcnktaW5mb3tkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm1lbWJlci1kZXRhaWxzIC5tZW1iZXItcHJpbWFyeS1pbmZvIGltZ3t3aWR0aDoxMDBweDtoZWlnaHQ6MTAwcHg7Ym9yZGVyLXJhZGl1czo1MHB4O21hcmdpbi1yaWdodDozMHB4fS5tZW1iZXItZGV0YWlscyAubWVtYmVyLXByaW1hcnktaW5mbyBoMXtmb250LXdlaWdodDo5MDB9Lm1lbWJlci1kZXRhaWxzIC5tZW1iZXItc2Vjb25kYXJ5LWluZm97cGFkZGluZy10b3A6NTBweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWV2ZW5seX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL1ZpZXdzL1N0dWR5R3JvdXAvTWVtYmVycy9WaWV3TWVtYmVyVmlldy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGdCQUNJLFlBQWEsQ0FEakIscUNBR1EsWUFBYSxDQUNiLGtCQUFtQixDQUNuQixzQkFBdUIsQ0FML0IseUNBUVksV0FBWSxDQUNaLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsaUJBQWtCLENBWDlCLHdDQWNZLGVBQWdCLENBZDVCLHVDQWtCUSxnQkFBaUIsQ0FFakIsWUFBYSxDQUNiLDRCQUE2QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubWVtYmVyLWRldGFpbHMge1xcbiAgICBwYWRkaW5nOiA2MHB4O1xcbiAgICAubWVtYmVyLXByaW1hcnktaW5mbyB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgICAgICAgaW1nIHtcXG4gICAgICAgICAgICB3aWR0aDogMTAwcHg7XFxuICAgICAgICAgICAgaGVpZ2h0OiAxMDBweDtcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMzBweDtcXG4gICAgICAgIH1cXG4gICAgICAgIGgxIHtcXG4gICAgICAgICAgICBmb250LXdlaWdodDogOTAwO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIC5tZW1iZXItc2Vjb25kYXJ5LWluZm8ge1xcbiAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XFxuICAgICAgICAvLyBwYWRkaW5nLWJvdHRvbTogMzBweDtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIudmlldy1tZWV0aW5nLXRvcHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnN0YXJ0O2FsaWduLWl0ZW1zOmNlbnRlcn0udmlldy1tZWV0aW5nLXRvcCBoMXtmb250LXNpemU6MThweDtiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrO3BhZGRpbmc6NXB4O2NvbG9yOndoaXRlfS52aWV3LW1lZXRpbmctdG9wIC50b3AtaWNvbntmb250LXNpemU6MzBweDt3aWR0aDozMHB4O21hcmdpbi1yaWdodDoxMHB4fWhye21hcmdpbi1sZWZ0OjIwcHg7bWFyZ2luLXJpZ2h0OjIwcHg7aGVpZ2h0OjAuNXB4O2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwLjI4Myk7Ym9yZGVyOm5vbmV9Lm1lZXRpbmctY29udGFpbmVye21hcmdpbjo0MHB4IDQwcHggNDBweCA0MHB4fS5tZWV0aW5nLWNvbnRhaW5lci5uZXh0LW1lZXRpbmctY29udGFpbmVye2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwLjAzNik7cGFkZGluZzoyMHB4fS5tZWV0aW5nLWNvbnRhaW5lciBoMXtmb250LXNpemU6MjVweDtmb250LXdlaWdodDoxMDB9Lm1lZXRpbmctY29udGFpbmVyIC5tZWV0aW5ne2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtZXZlbmx5O2FsaWduLWl0ZW1zOnN0YXJ0fS5tZWV0aW5nLWNvbnRhaW5lciAubWVldGluZyBzcGFue2ZvbnQtd2VpZ2h0OjkwMH0ubWVldGluZy1jb250YWluZXIgLm1lZXRpbmcgcHtwYWRkaW5nOjJweCAwcHggMnB4IDB9Lm1lZXRpbmctY29udGFpbmVyIC5tZWV0aW5nIC5tZWV0aW5nLXRpbWV7cGFkZGluZzoxMHB4IDBweCAxMHB4IDA7ZmxleDowLjV9Lm1lZXRpbmctY29udGFpbmVyIC5tZWV0aW5nIC5tZWV0aW5nLWRldGFpbHN7cGFkZGluZzoxMHB4IDBweCAxMHB4IDA7ZmxleDowLjV9Lm9uZS10aW1lLW1lZXRpbmdzLWNvbnRhaW5lcnttYXJnaW46NDBweCA0MHB4IDQwcHggNDBweH0ub25lLXRpbWUtbWVldGluZ3MtY29udGFpbmVyIGgxe2ZvbnQtc2l6ZToyNXB4O2ZvbnQtd2VpZ2h0OjEwMH0ub25lLXRpbWUtbWVldGluZ3MtY29udGFpbmVyIC5vbmUtdGltZS1tZWV0aW5nLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2JvcmRlci1ib3R0b206c29saWQgcmdiYSgwLDAsMCwwLjE0NCkgMC41cHh9Lm9uZS10aW1lLW1lZXRpbmdzLWNvbnRhaW5lciAub25lLXRpbWUtbWVldGluZ3tmbGV4OjE7cGFkZGluZzoxMHB4IDAgMTBweCAwO21hcmdpbjoxMHB4IDAgMTBweCAwfS5vbmUtdGltZS1tZWV0aW5ncy1jb250YWluZXIgLm9uZS10aW1lLW1lZXRpbmcgc3Bhbntmb250LXdlaWdodDo5MDA7cGFkZGluZy1yaWdodDoyMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvVmlld3MvU3R1ZHlHcm91cC9WaWV3TWVldGluZ1ZpZXcvVmlld01lZXRpbmdWaWV3LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsa0JBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUN0QixrQkFBbUIsQ0FIdkIscUJBS1EsY0FBZSxDQUNmLHNCQUF1QixDQUN2QixXQUFZLENBQ1osV0FBWSxDQVJwQiw0QkFXUSxjQUFlLENBQ2YsVUFBVyxDQUNYLGlCQUFrQixDQUNyQixHQUlELGdCQUFpQixDQUNqQixpQkFBa0IsQ0FDbEIsWUFBYSxDQUNiLGtDQUFzQyxDQUN0QyxXQUFZLENBQ2YsbUJBNkJHLDBCQUEyQixDQTVCL0IsMENBRVEsa0NBQXNDLENBQ3RDLFlBQWEsQ0FIckIsc0JBTVEsY0FBZSxDQUNmLGVBQWdCLENBUHhCLDRCQVVRLFlBQWEsQ0FDYiw0QkFBNkIsQ0FDN0IsaUJBQWtCLENBWjFCLGlDQWNZLGVBQWdCLENBZDVCLDhCQWlCWSxxQkFBc0IsQ0FqQmxDLDBDQW9CWSx1QkFBd0IsQ0FDeEIsUUFBUyxDQXJCckIsNkNBd0JZLHVCQUF3QixDQUN4QixRQUFTLENBQ1osNkJBU0wsMEJBQTJCLENBTC9CLGdDQUVRLGNBQWUsQ0FDZixlQUFnQixDQUh4Qix5REFPUSxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLDJDQUErQyxDQVR2RCwrQ0FZUSxNQUFPLENBQ1AscUJBQXNCLENBQ3RCLG9CQUFxQixDQWQ3QixvREFnQlksZUFBZ0IsQ0FDaEIsa0JBQW1CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi52aWV3LW1lZXRpbmctdG9wIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgaDEge1xcbiAgICAgICAgZm9udC1zaXplOiAxOHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgICAgICBwYWRkaW5nOiA1cHg7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG4gICAgLnRvcC1pY29uIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMzBweDtcXG4gICAgICAgIHdpZHRoOiAzMHB4O1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICB9XFxufVxcblxcbmhyIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxuICAgIG1hcmdpbi1yaWdodDogMjBweDtcXG4gICAgaGVpZ2h0OiAwLjVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI4Myk7XFxuICAgIGJvcmRlcjogbm9uZTtcXG59XFxuLm1lZXRpbmctY29udGFpbmVyIHtcXG4gICAgJi5uZXh0LW1lZXRpbmctY29udGFpbmVyIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wMzYpO1xcbiAgICAgICAgcGFkZGluZzogMjBweDtcXG4gICAgfVxcbiAgICBoMSB7XFxuICAgICAgICBmb250LXNpemU6IDI1cHg7XFxuICAgICAgICBmb250LXdlaWdodDogMTAwO1xcbiAgICB9XFxuICAgIC5tZWV0aW5nIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcXG4gICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgICAgICB9XFxuICAgICAgICBwIHtcXG4gICAgICAgICAgICBwYWRkaW5nOiAycHggMHB4IDJweCAwO1xcbiAgICAgICAgfVxcbiAgICAgICAgLm1lZXRpbmctdGltZSB7XFxuICAgICAgICAgICAgcGFkZGluZzogMTBweCAwcHggMTBweCAwO1xcbiAgICAgICAgICAgIGZsZXg6IDAuNTtcXG4gICAgICAgIH1cXG4gICAgICAgIC5tZWV0aW5nLWRldGFpbHMge1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHggMHB4IDEwcHggMDtcXG4gICAgICAgICAgICBmbGV4OiAwLjU7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgbWFyZ2luOiA0MHB4IDQwcHggNDBweCA0MHB4O1xcbn1cXG4ub25lLXRpbWUtbWVldGluZ3MtY29udGFpbmVyIHtcXG4gICAgaDEge1xcbiAgICAgICAgZm9udC1zaXplOiAyNXB4O1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IDEwMDtcXG4gICAgfVxcbiAgICBtYXJnaW46IDQwcHggNDBweCA0MHB4IDQwcHg7XFxuICAgIC5vbmUtdGltZS1tZWV0aW5nLWNvbnRhaW5lciB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xNDQpIDAuNXB4O1xcbiAgICB9XFxuICAgIC5vbmUtdGltZS1tZWV0aW5nIHtcXG4gICAgICAgIGZsZXg6IDE7XFxuICAgICAgICBwYWRkaW5nOiAxMHB4IDAgMTBweCAwO1xcbiAgICAgICAgbWFyZ2luOiAxMHB4IDAgMTBweCAwO1xcbiAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi52aWV3LXBvc3QtdG9we2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3RhcnQ7YWxpZ24taXRlbXM6Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowcHg7bGVmdDowcHg7d2lkdGg6MTAwJTtoZWlnaHQ6NWVtO3BhZGRpbmctbGVmdDozMHB4O3BhZGRpbmctdG9wOjMwcHg7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDI1NSwyNTUsMjU1LDAuNTQzKTtiYWNrZHJvcC1maWx0ZXI6Ymx1cig1cHgpO2JvcmRlci1ib3R0b206MXB4IHdoaXRlc21va2Ugc29saWQ7cGFkZGluZy1ib3R0b206MjBweH0udmlldy1wb3N0LXRvcCBoMXtmb250LXNpemU6MThweDtiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrO3BhZGRpbmc6NXB4O2NvbG9yOndoaXRlfS52aWV3LXBvc3QtdG9wIC50b3AtaWNvbntmb250LXNpemU6MzBweDt3aWR0aDozMHB4O21hcmdpbi1yaWdodDoxMHB4fS5wb3N0LWNvbnRlbnRze21hcmdpbjoyMHB4O21hcmdpbi10b3A6OTBweH0ucG9zdC1jb250ZW50cyAucG9zdC10aXRsZXtmb250LXNpemU6MzVweDtwYWRkaW5nLWJvdHRvbToyMHB4fS5wb3N0LWNvbnRlbnRzIC5wb3N0LWJvZHl7ZGlzcGxheTpmbGV4O2JhY2tncm91bmQtY29sb3I6cmdiYSgyMzIsMjMxLDIzMSwwLjIyMSk7cGFkZGluZzozMHB4O21hcmdpbi1ib3R0b206MjBweDtib3JkZXItYm90dG9tOiNkNGFhOGMgNXB4IHNvbGlkfS5wb3N0LWNvbnRlbnRzIC5wb3N0LWJvZHkgLnBvc3QtbWVzc2FnZXtmbGV4OjcwJX0ucG9zdC1jb250ZW50cyAucG9zdC1ib2R5IC5wb3N0LWF0dGFjaG1lbnR7ZmxleDozMCV9LnBvc3QtY29udGVudHMgLnBvc3QtY3JlYXRvcntjdXJzb3I6cG9pbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmVuZDtkaXNwbGF5OmZsZXh9LnBvc3QtY29udGVudHMgLnBvc3QtY3JlYXRvciBwe2ZvbnQtc2l6ZToxMHB4O2ZvbnQtd2VpZ2h0OjEwMDtwYWRkaW5nLXJpZ2h0OjIwcHh9LnJlc3BvbnNlcy1jb250YWluZXJ7Ym9yZGVyLXRvcDpyZ2JhKDAsMCwwLDAuMjE0KSAwLjVweCBzb2xpZDtwYWRkaW5nLXRvcDoyMHB4fS5yZXNwb25zZXMtY29udGFpbmVyIGgxe21hcmdpbi1sZWZ0OjI1cHg7Zm9udC1zaXplOjEzcHg7Zm9udC13ZWlnaHQ6NDAwfS5yZXNwb25zZXMtY29udGFpbmVyIC5yZXNwb25zZXttYXJnaW46MjVweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsMC4wMTQpO3BhZGRpbmc6MjBweDtkaXNwbGF5OmZsZXg7YWxpZ24tY29udGVudDpjZW50ZXI7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LnJlc3BvbnNlcy1jb250YWluZXIgLnJlc3BvbnNlIHB7Zm9udC1zaXplOjE1cHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9WaWV3cy9TdHVkeUdyb3VwL1ZpZXdQb3N0Vmlldy9WaWV3UG9zdFZpZXcuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxlQUNJLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsa0JBQW1CLENBQ25CLGlCQUFrQixDQUNsQixPQUFRLENBQ1IsUUFBUyxDQUNULFVBQVcsQ0FDWCxVQUFXLENBRVgsaUJBQWtCLENBQ2xCLGdCQUFpQixDQUNqQix3Q0FBNEMsQ0FDNUMseUJBQTBCLENBQzFCLGtDQUFtQyxDQVluQyxtQkFBb0IsQ0ExQnhCLGtCQWdCUSxjQUFlLENBQ2Ysc0JBQXVCLENBQ3ZCLFdBQVksQ0FDWixXQUFZLENBbkJwQix5QkFzQlEsY0FBZSxDQUNmLFVBQVcsQ0FDWCxpQkFBa0IsQ0FDckIsZUFLRCxXQUFZLENBQ1osZUFBZ0IsQ0FGcEIsMkJBSVEsY0FBZSxDQUNmLG1CQUFvQixDQUw1QiwwQkFRUSxZQUFhLENBQ2Isd0NBQTRDLENBQzVDLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsK0JBQXNDLENBWjlDLHdDQWNZLFFBQVMsQ0FkckIsMkNBaUJZLFFBQVMsQ0FqQnJCLDZCQXNCUSxjQUFlLENBQ2Ysa0JBQW1CLENBQ25CLG1CQUFvQixDQU1wQixZQUFhLENBOUJyQiwrQkEwQlksY0FBZSxDQUNmLGVBQWdCLENBQ2hCLGtCQUFtQixDQUN0QixxQkFNTCx3Q0FBNEMsQ0FDNUMsZ0JBQWlCLENBSHJCLHdCQU1RLGdCQUFpQixDQUNqQixjQUFlLENBQ2YsZUFBZ0IsQ0FSeEIsK0JBV1EsV0FBWSxDQUNaLGtDQUFzQyxDQUN0QyxZQUFhLENBQ2IsWUFBYSxDQUNiLG9CQUFxQixDQUNyQiw2QkFBOEIsQ0FoQnRDLGlDQWtCWSxjQUFlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuLnZpZXctcG9zdC10b3Age1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMHB4O1xcbiAgICBsZWZ0OiAwcHg7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDVlbTtcXG5cXG4gICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xcbiAgICBwYWRkaW5nLXRvcDogMzBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjU0Myk7XFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cig1cHgpO1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggd2hpdGVzbW9rZSBzb2xpZDtcXG4gICAgaDEge1xcbiAgICAgICAgZm9udC1zaXplOiAxOHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgICAgICBwYWRkaW5nOiA1cHg7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG4gICAgLnRvcC1pY29uIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMzBweDtcXG4gICAgICAgIHdpZHRoOiAzMHB4O1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICB9XFxuICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xcbn1cXG5cXG4ucG9zdC1jb250ZW50cyB7XFxuICAgIG1hcmdpbjogMjBweDtcXG4gICAgbWFyZ2luLXRvcDogOTBweDtcXG4gICAgLnBvc3QtdGl0bGUge1xcbiAgICAgICAgZm9udC1zaXplOiAzNXB4O1xcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7XFxuICAgIH1cXG4gICAgLnBvc3QtYm9keSB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzIsIDIzMSwgMjMxLCAwLjIyMSk7XFxuICAgICAgICBwYWRkaW5nOiAzMHB4O1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXG4gICAgICAgIGJvcmRlci1ib3R0b206ICRib3JkZXItY29sb3IgNXB4IHNvbGlkO1xcbiAgICAgICAgLnBvc3QtbWVzc2FnZSB7XFxuICAgICAgICAgICAgZmxleDogNzAlO1xcbiAgICAgICAgfVxcbiAgICAgICAgLnBvc3QtYXR0YWNobWVudCB7XFxuICAgICAgICAgICAgZmxleDogMzAlO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC5wb3N0LWNyZWF0b3Ige1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogZW5kO1xcbiAgICAgICAgcCB7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4O1xcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAxMDA7XFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMjBweDtcXG4gICAgICAgIH1cXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIH1cXG59XFxuLnJlc3BvbnNlcy1jb250YWluZXIge1xcbiAgICAvLyBtYXJnaW46IDIwcHg7XFxuICAgIGJvcmRlci10b3A6IHJnYmEoMCwgMCwgMCwgMC4yMTQpIDAuNXB4IHNvbGlkO1xcbiAgICBwYWRkaW5nLXRvcDogMjBweDtcXG5cXG4gICAgaDEge1xcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDI1cHg7XFxuICAgICAgICBmb250LXNpemU6IDEzcHg7XFxuICAgICAgICBmb250LXdlaWdodDogNDAwO1xcbiAgICB9XFxuICAgIC5yZXNwb25zZSB7XFxuICAgICAgICBtYXJnaW46IDI1cHg7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDE0KTtcXG4gICAgICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICAgICAgcCB7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5pbmxpbmV7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztiYWNrZ3JvdW5kLWNvbG9yOndoaXRlc21va2U7cGFkZGluZzoxMHB4fS5pbmxpbmUgI2xlZnR7ZmxleDo1MCV9LmlubGluZSAjcmlnaHR7ZmxleDo1MCV9LnBob3Rve2JhY2tncm91bmQtY29sb3I6d2hpdGVzbW9rZX0ucGhvdG8gaW1ne3dpZHRoOjkwcHg7dGV4dC1hbGlnbjpsZWZ0fWlucHV0W3R5cGU9XFxcImZpbGVcXFwiXXtib3JkZXI6bm9uZTtwYWRkaW5nOjI1cHg7YXBwZWFyYW5jZTpub25lfWlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl17LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lO2JhY2tncm91bmQtY29sb3I6d2hpdGU7bWFyZ2luOjA7Ym94LXNoYWRvdzoxcHggMXB4IDFweCAjZWJlYmViO2ZvbnQ6aW5oZXJpdDtjb2xvcjpjdXJyZW50Q29sb3I7d2lkdGg6MS4yZW07aGVpZ2h0OjEuMmVtO2JvcmRlci1yYWRpdXM6MC4xNWVtO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0wLjA3NWVtKTtkaXNwbGF5OmdyaWQ7cGxhY2UtY29udGVudDpjZW50ZXJ9aW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXTo6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7d2lkdGg6MC42NWVtO2hlaWdodDowLjY1ZW07Y2xpcC1wYXRoOnBvbHlnb24oMTQlIDQ0JSwgMCA2NSUsIDUwJSAxMDAlLCAxMDAlIDE2JSwgODAlIDAlLCA0MyUgNjIlKTt0cmFuc2Zvcm06c2NhbGUoMCk7dHJhbnNmb3JtLW9yaWdpbjpib3R0b20gbGVmdDt0cmFuc2l0aW9uOjEyMG1zIHRyYW5zZm9ybSBlYXNlLWluLW91dDtib3gtc2hhZG93Omluc2V0IDFlbSAxZW0gIzAyOGEyMjtiYWNrZ3JvdW5kLWNvbG9yOkNhbnZhc1RleHR9aW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXTpjaGVja2VkOjpiZWZvcmV7dHJhbnNmb3JtOnNjYWxlKDEpfS5pbWdQcmV2aWV3e3dpZHRoOjEwMCU7cGFkZGluZzoyMHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9BY2NvdW50U2V0dXBGb3JtL0FjY291bnRTZXR1cEZvcm0uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxRQUNJLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsMkJBQTRCLENBQzVCLFlBQWEsQ0FKakIsY0FNUSxRQUFTLENBTmpCLGVBU1EsUUFBUyxDQUNaLE9BSUQsMkJBQTRCLENBRGhDLFdBR1EsVUFBVyxDQUNYLGVBQWdCLENBQ25CLG1CQUlELFdBQVksQ0FDWixZQUFhLENBQ2IsZUFBZ0IsQ0FDbkIsdUJBSUcsdUJBQXdCLENBRXhCLGVBQWdCLENBRWhCLHNCQUF1QixDQUV2QixRQUFTLENBQ1QsOEJBQTBDLENBRTFDLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsV0FBWSxDQUNaLFlBQWEsQ0FDYixvQkFBcUIsQ0FDckIsOEJBQStCLENBRS9CLFlBQWEsQ0FDYixvQkFBcUIsQ0FDeEIsK0JBR0csVUFBVyxDQUNYLFlBQWEsQ0FDYixhQUFjLENBQ2Qsc0VBQXVFLENBQ3ZFLGtCQUFtQixDQUNuQiw0QkFBNkIsQ0FDN0Isc0NBQXVDLENBQ3ZDLGdDQUF5QyxDQUV6QywyQkFBNEIsQ0FDL0IsdUNBR0csa0JBQW1CLENBQ3RCLFlBR0csVUFBVyxDQUNYLFlBQWFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmlubGluZSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgICNsZWZ0IHtcXG4gICAgICAgIGZsZXg6IDUwJTtcXG4gICAgfVxcbiAgICAjcmlnaHQge1xcbiAgICAgICAgZmxleDogNTAlO1xcbiAgICB9XFxufVxcblxcbi5waG90byB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XFxuICAgIGltZyB7XFxuICAgICAgICB3aWR0aDogOTBweDtcXG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgIH1cXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwiZmlsZVxcXCJdIHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBwYWRkaW5nOiAyNXB4O1xcbiAgICBhcHBlYXJhbmNlOiBub25lO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdIHtcXG4gICAgLyogQWRkIGlmIG5vdCB1c2luZyBhdXRvcHJlZml4ZXIgKi9cXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAvKiBSZW1vdmUgbW9zdCBhbGwgbmF0aXZlIGlucHV0IHN0eWxlcyAqL1xcbiAgICBhcHBlYXJhbmNlOiBub25lO1xcbiAgICAvKiBGb3IgaU9TIDwgMTUgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIC8qIE5vdCByZW1vdmVkIHZpYSBhcHBlYXJhbmNlICovXFxuICAgIG1hcmdpbjogMDtcXG4gICAgYm94LXNoYWRvdzogMXB4IDFweCAxcHggcmdiKDIzNSwgMjM1LCAyMzUpO1xcblxcbiAgICBmb250OiBpbmhlcml0O1xcbiAgICBjb2xvcjogY3VycmVudENvbG9yO1xcbiAgICB3aWR0aDogMS4yZW07XFxuICAgIGhlaWdodDogMS4yZW07XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuMTVlbTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0wLjA3NWVtKTtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgcGxhY2UtY29udGVudDogY2VudGVyO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOjpiZWZvcmUge1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgd2lkdGg6IDAuNjVlbTtcXG4gICAgaGVpZ2h0OiAwLjY1ZW07XFxuICAgIGNsaXAtcGF0aDogcG9seWdvbigxNCUgNDQlLCAwIDY1JSwgNTAlIDEwMCUsIDEwMCUgMTYlLCA4MCUgMCUsIDQzJSA2MiUpO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gbGVmdDtcXG4gICAgdHJhbnNpdGlvbjogMTIwbXMgdHJhbnNmb3JtIGVhc2UtaW4tb3V0O1xcbiAgICBib3gtc2hhZG93OiBpbnNldCAxZW0gMWVtIHJnYigyLCAxMzgsIDM0KTtcXG4gICAgLyogV2luZG93cyBIaWdoIENvbnRyYXN0IE1vZGUgKi9cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogQ2FudmFzVGV4dDtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXTpjaGVja2VkOjpiZWZvcmUge1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbn1cXG5cXG4uaW1nUHJldmlldyB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY3JlYXRlLXN0dWR5LWdyb3VwLWZvcm17ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5zaWRlLWJ5LXNpZGV7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXJ9LnNpZGUtYnktc2lkZT4qe3dpZHRoOjIwMHB4O2ZsZXg6MX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvQ3JlYXRlU3R1ZHlHcm91cEZvcm0vQ3JlYXRlU3R1ZHlHcm91cEZvcm0uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSx5QkFDSSxZQUFhLENBQ2IscUJBQXNCLENBQ3RCLHNCQUF1QixDQUMxQixjQUVHLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsNkJBQThCLENBQzlCLGtCQUFtQixDQUp2QixnQkFPUSxXQUFZLENBQ1osTUFBT1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY3JlYXRlLXN0dWR5LWdyb3VwLWZvcm0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuLnNpZGUtYnktc2lkZSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG4gICAgPiAqIHtcXG4gICAgICAgIHdpZHRoOiAyMDBweDtcXG4gICAgICAgIGZsZXg6IDE7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnBvc3QtY29udGFpbmVye3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206MTBweDttYXJnaW4tYm90dG9tOjQ1cHg7b3ZlcmZsb3c6dmlzaWJsZX0ucG9zdC1jb250YWluZXIgLnBvc3QtdG9we2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3RhcnQ7YWxpZ24taXRlbXM6Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDozMHB4O2xlZnQ6MzBweDt3aWR0aDoxMDAlO3BhZGRpbmctYm90dG9tOjIwcHh9LnBvc3QtY29udGFpbmVyIC5wb3N0LXRvcCBoMXtmb250LXNpemU6MThweDtiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrO3BhZGRpbmc6NXB4O2NvbG9yOndoaXRlfS5wb3N0LWNvbnRhaW5lciAucG9zdC10b3AgLnRvcC1pY29ue2ZvbnQtc2l6ZTozMHB4O3dpZHRoOjMwcHg7bWFyZ2luLXJpZ2h0OjEwcHh9LnBvc3QtY29udGFpbmVyIC5wb3N0LWNyZWF0b3J7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjBweDtyaWdodDoyMHB4fS5wb3N0LWNvbnRhaW5lciAucG9zdC1pbm5lcntvdmVyZmxvdzp2aXNpYmxlfS5wb3N0LWNvbnRhaW5lciAucG9zdC1pbm5lciAucG9zdC1kZXRhaWxze3BhZGRpbmc6MjBweDtib3gtc2hhZG93OjAgMCAwIDFweCByZ2JhKDk3LDk3LDk3LDAuMSksMCAzcHggMjBweCAwIHJnYmEoOTIsOTIsOTIsMC4zKSwwIDFweCAycHggcmdiYSgwLDAsMCwwLjUpO2JhY2tncm91bmQtY29sb3I6d2hpdGU7cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3c6dmlzaWJsZTtjdXJzb3I6cG9pbnRlcjt3aWR0aDo4NyU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmctdG9wOjgwcHh9LnBvc3QtY29udGFpbmVyIC5wb3N0LWlubmVyIC5wb3N0LWRldGFpbHMgLnBvc3QtaW5uZXItY29udGVudHtmbGV4OjkwJTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5wb3N0LWNvbnRhaW5lciAucG9zdC1pbm5lciAucG9zdC1kZXRhaWxzIC5wb3N0LWlubmVyLWNvbnRlbnQgLnBvc3QtdGl0bGV7Zm9udC1zaXplOjMwcHg7cGFkZGluZzoxMHB4O3RvcDozMHB4O2xlZnQ6MzBweH0ucG9zdC1jb250YWluZXIgLnBvc3QtaW5uZXIgLnBvc3QtZGV0YWlscyAucG9zdC1pbm5lci1jb250ZW50IC5wb3N0LWJvZHl7cGFkZGluZzo1cHggMTBweCAxMHB4IDEwcHg7d29yZC13cmFwOmJyZWFrLXdvcmQ7Y29sb3I6IzI2MjYyNn0ucG9zdC1jb250YWluZXIgLnBvc3QtbWV0YWluZm97cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOi0zNnB4O3JpZ2h0OjYwcHg7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDplbmQ7dGV4dC1hbGlnbjpyaWdodDtjb2xvcjojNDg0ODQ4O3BhZGRpbmc6MjBweDtwYWRkaW5nLXJpZ2h0OjUwcHh9LnBvc3QtY29udGFpbmVyIC5wb3N0LW1ldGFpbmZvIC5wb3N0LWRhdGV7dGV4dC1hbGlnbjpyaWdodDtmb250LXNpemU6MTFweH0ucG9zdC1jb250YWluZXIgLnBvc3QtbWV0YWluZm8gLnBvc3QtcmVzcG9uc2UtY291bnR7Zm9udC1zaXplOjExcHg7d2lkdGg6MTVlbTttYXJnaW4tcmlnaHQ6MTBweDt0ZXh0LWFsaWduOnJpZ2h0fS5wb3N0LWNvbnRhaW5lciAucG9zdC1tZXRhaW5mbyAucG9zdC1yZXNwb25zZS1jb3VudCBzcGFue2ZvbnQtd2VpZ2h0OjkwMH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvRmVlZC9Qb3N0LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0EsZ0JBQ0ksaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxtQkFBb0IsQ0FDcEIsa0JBQW1CLENBRW5CLGdCQUFpQixDQU5yQiwwQkFRUSxZQUFhLENBQ2IscUJBQXNCLENBQ3RCLGtCQUFtQixDQUNuQixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULFNBQVUsQ0FDVixVQUFXLENBYVgsbUJBQW9CLENBM0I1Qiw2QkFpQlksY0FBZSxDQUNmLHNCQUF1QixDQUN2QixXQUFZLENBQ1osV0FBWSxDQXBCeEIsb0NBdUJZLGNBQWUsQ0FDZixVQUFXLENBQ1gsaUJBQWtCLENBekI5Qiw4QkErQlEsY0FBZSxDQUNmLGlCQUFrQixDQUNsQixVQUFXLENBQ1gsVUFBVyxDQWxDbkIsNEJBcUNRLGdCQUFpQixDQXJDekIsMENBdUNZLFlBQWEsQ0FDYixpR0FDZ0MsQ0FDaEMsc0JBQXVCLENBRXZCLGlCQUFrQixDQUNsQixnQkFBaUIsQ0FDakIsY0FBZSxDQUVmLFNBQVUsQ0FFVixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLHNCQUF1QixDQUN2QixnQkFBaUIsQ0FyRDdCLDhEQXdEZ0IsUUFBUyxDQWFULFlBQWEsQ0FDYixxQkFBc0IsQ0F0RXRDLDBFQTBEb0IsY0FBZSxDQUNmLFlBQWEsQ0FDYixRQUFTLENBQ1QsU0FBVSxDQTdEOUIseUVBZ0VvQiwwQkFBMkIsQ0FFM0Isb0JBQXFCLENBQ3JCLGFBQXNCLENBbkUxQywrQkEyRVEsaUJBQWtCLENBQ2xCLFlBQWEsQ0FDYixVQUFXLENBQ1gsWUFBYSxDQUNiLG1CQUFvQixDQUVwQixnQkFBaUIsQ0FFakIsYUFBc0IsQ0FDdEIsWUFBYSxDQUNiLGtCQUFtQixDQXJGM0IsMENBd0ZZLGdCQUFpQixDQUNqQixjQUFlLENBekYzQixvREE2RlksY0FBZSxDQUNmLFVBQVcsQ0FDWCxpQkFBa0IsQ0FDbEIsZ0JBQWlCLENBaEc3Qix5REFtR2dCLGVBQWdCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuLnBvc3QtY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDQ1cHg7XFxuXFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgICAucG9zdC10b3Age1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgdG9wOiAzMHB4O1xcbiAgICAgICAgbGVmdDogMzBweDtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcblxcbiAgICAgICAgaDEge1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgICAgICAgICBwYWRkaW5nOiA1cHg7XFxuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgICAgfVxcbiAgICAgICAgLnRvcC1pY29uIHtcXG4gICAgICAgICAgICBmb250LXNpemU6IDMwcHg7XFxuICAgICAgICAgICAgd2lkdGg6IDMwcHg7XFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgfVxcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7XFxuICAgIH1cXG5cXG4gICAgLnBvc3QtY3JlYXRvciB7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBib3R0b206IDBweDtcXG4gICAgICAgIHJpZ2h0OiAyMHB4O1xcbiAgICB9XFxuICAgIC5wb3N0LWlubmVyIHtcXG4gICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgICAgICAgLnBvc3QtZGV0YWlscyB7XFxuICAgICAgICAgICAgcGFkZGluZzogMjBweDtcXG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSg5NywgOTcsIDk3LCAwLjEpLCAwIDNweCAyMHB4IDAgcmdiYSg5MiwgOTIsIDkyLCAwLjMpLFxcbiAgICAgICAgICAgICAgICAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjUpO1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICAgICAgICAgIC8vIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgICAgICAgICAgIHdpZHRoOiA4NyU7XFxuXFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA4MHB4O1xcblxcbiAgICAgICAgICAgIC5wb3N0LWlubmVyLWNvbnRlbnQge1xcbiAgICAgICAgICAgICAgICBmbGV4OiA5MCU7XFxuICAgICAgICAgICAgICAgIC5wb3N0LXRpdGxlIHtcXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDMwcHg7XFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAzMHB4O1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIC5wb3N0LWJvZHkge1xcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDEwcHggMTBweCAxMHB4O1xcbiAgICAgICAgICAgICAgICAgICAgLy8gd2lkdGg6IDkwcHg7XFxuICAgICAgICAgICAgICAgICAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmdiKDM4LCAzOCwgMzgpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIC5wb3N0LW1ldGFpbmZvIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGJvdHRvbTogLTM2cHg7XFxuICAgICAgICByaWdodDogNjBweDtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcXG5cXG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcblxcbiAgICAgICAgY29sb3I6IHJnYig3MiwgNzIsIDcyKTtcXG4gICAgICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xcblxcbiAgICAgICAgLnBvc3QtZGF0ZSB7XFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAxMXB4O1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLnBvc3QtcmVzcG9uc2UtY291bnQge1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTFweDtcXG4gICAgICAgICAgICB3aWR0aDogMTVlbTtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuXFxuICAgICAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5sb2FkaW5ne3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjUwcHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL0xvYWRpbmcvTG9hZGluZy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFNBQ0ksVUFBVyxDQUNYLFdBQVksQ0FDWixZQUFhLENBQ2Isa0JBQW1CLENBQ25CLHNCQUF1QixDQUN2QixlQUFnQixDQUNoQixZQUFhXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5sb2FkaW5nIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIHBhZGRpbmc6IDUwcHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5wcm9maWxlLXBpY3R1cmV7d2lkdGg6NTBweDtoZWlnaHQ6NTBweDtib3JkZXItcmFkaXVzOjI3cHg7b2JqZWN0LWZpdDpjb3ZlcjtvdmVyZmxvdzpoaWRkZW47Ym9yZGVyOiNkNGFhOGMgNHB4IHNvbGlkfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29tcG9uZW50cy9Qcm9maWxlUGljdHVyZS9Qcm9maWxlUGljdHVyZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBLGlCQUNJLFVBQVcsQ0FDWCxXQUFZLENBQ1osa0JBQW1CLENBQ25CLGdCQUFpQixDQUNqQixlQUFnQixDQUNoQix3QkFBK0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG4ucHJvZmlsZS1waWN0dXJlIHtcXG4gICAgd2lkdGg6IDUwcHg7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMjdweDtcXG4gICAgb2JqZWN0LWZpdDogY292ZXI7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIGJvcmRlcjogJGJvcmRlci1jb2xvciA0cHggc29saWQ7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zZWFyY2gtZm9ybXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpjZW50ZXJ9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1NlYXJjaEZvcm0vU2VhcmNoRm9ybS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGFBQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUN0QixzQkFBdUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnNlYXJjaC1mb3JtIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5saXN0aW5nLWNvbnRhaW5lcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmYyMztib3gtc2hhZG93OnJnYmEoMTIwLDEyMCwxMjAsMC4yNDkpIDNweCA1cHggNXB4IDFweDtkaXNwbGF5OmZsZXg7aGVpZ2h0OjgwcHg7bWFyZ2luOjVweCAxMHB4IDEwcHggMTBweDtib3JkZXItcmFkaXVzOjEwcHg7Y3Vyc29yOnBvaW50ZXI7b3ZlcmZsb3c6aGlkZGVuO2FuaW1hdGlvbjpmbG9hdC1pbi1saXN0aW5nIDAuM3MgZWFzZS1vdXR9Lmxpc3RpbmctY29udGFpbmVyIC50aXRsZS1waG90by1jb250YWluZXJ7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtib3JkZXItbGVmdDojZmZmZmZmN2MgNXB4IHNvbGlkO2JveC1zaGFkb3c6cmdiYSg0OCw0OCw0OCwwLjE1MykgMTBweCAxMHB4IDIwcHg7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmc6MjBweDtjb2xvcjp3aGl0ZTtmb250LXNpemU6MTBweH0ubGlzdGluZy1jb250YWluZXIgLmdyb3VwLWluZm8tY29udGFpbmVye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OnNwYWNlLWV2ZW5seTtvdmVyZmxvdzpoaWRkZW59Lmxpc3RpbmctY29udGFpbmVyIC5ncm91cC1pbmZvLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1pdGVte3BhZGRpbmc6NXB4IDE1cHggNXB4IDE1cHg7Ym9yZGVyLWxlZnQ6cmdiYSgxMjUsMTI1LDEyNSwwLjM0NSkgMnB4IHNvbGlkfS5saXN0aW5nLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1jb250YWluZXIgLmdyb3VwLWluZm8taXRlbSBwe2NvbG9yOmdyYXk7Zm9udC1zaXplOjhweH0ubGlzdGluZy1jb250YWluZXIgLmdyb3VwLWluZm8tY29udGFpbmVyIC5ncm91cC1pbmZvLWl0ZW0gaDJ7Zm9udC1zaXplOjE0cHg7d2hpdGUtc3BhY2U6bm93cmFwfS5saXN0aW5nLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1jb250YWluZXIgLmdyb3VwLWluZm8taXRlbSNvd25lci1pbmZve2JvcmRlci1sZWZ0Om5vbmV9Lmxpc3RpbmctY29udGFpbmVyIC5ncm91cC1pbmZvLWNvbnRhaW5lciAuZ3JvdXAtaW5mby1pdGVtI293bmVyLWluZm8gaDJ7d2hpdGUtc3BhY2U6dW5zZXQ7d29yZC13cmFwOmJyZWFrLXdvcmQ7bWF4LXdpZHRoOjEwMHB4fUBrZXlmcmFtZXMgZmxvYXQtaW4tbGlzdGluZ3swJXttYXJnaW4tdG9wOjUwcHg7b3BhY2l0eTowfTEwMCV7bWFyZ2luLXRvcDo1cHg7b3BhY2l0eToxfX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvU2VhcmNoTGlzdGluZy9TZWFyY2hMaXN0aW5nLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsbUJBQ0ksMEJBQTJCLENBQzNCLGtEQUFzRCxDQUN0RCxZQUFhLENBQ2IsV0FBWSxDQUNaLHlCQUEwQixDQUMxQixrQkFBbUIsQ0FDbkIsY0FBZSxDQUNmLGVBQWdCLENBRWhCLHdDQUF5QyxDQVY3QywwQ0FhUSxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLCtCQUFnQyxDQUNoQyw4Q0FBa0QsQ0FDbEQsZUFBZ0IsQ0FDaEIsWUFBYSxDQUNiLFdBQVksQ0FDWixjQUFlLENBcEJ2Qix5Q0F1QlEsWUFBYSxDQUNiLGtCQUFtQixDQUNuQiw0QkFBNkIsQ0FDN0IsZUFBZ0IsQ0ExQnhCLDBEQThDWSx5QkFBMEIsQ0FDMUIsNkNBQWlELENBL0M3RCw0REE4QmdCLFVBQVcsQ0FDWCxhQUFjLENBL0I5Qiw2REFrQ2dCLGNBQWUsQ0FDZixrQkFBbUIsQ0FuQ25DLHFFQTRDZ0IsZ0JBQWlCLENBNUNqQyx3RUF1Q29CLGlCQUFrQixDQUVsQixvQkFBcUIsQ0FDckIsZUFBZ0IsQ0FDbkIsNEJBVWIsR0FDSSxlQUFnQixDQUNoQixTQUFVLENBRWQsS0FDSSxjQUFlLENBQ2YsU0FBVSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uLy4uL2dsb2JhbHMuc2Nzc1xcXCI7XFxuXFxuLmxpc3RpbmctY29udGFpbmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjIzO1xcbiAgICBib3gtc2hhZG93OiByZ2JhKDEyMCwgMTIwLCAxMjAsIDAuMjQ5KSAzcHggNXB4IDVweCAxcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGhlaWdodDogODBweDtcXG4gICAgbWFyZ2luOiA1cHggMTBweCAxMHB4IDEwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG5cXG4gICAgYW5pbWF0aW9uOiBmbG9hdC1pbi1saXN0aW5nIDAuM3MgZWFzZS1vdXQ7XFxuXFxuICAgIC50aXRsZS1waG90by1jb250YWluZXIge1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBib3JkZXItbGVmdDogI2ZmZmZmZjdjIDVweCBzb2xpZDtcXG4gICAgICAgIGJveC1zaGFkb3c6IHJnYmEoNDgsIDQ4LCA0OCwgMC4xNTMpIDEwcHggMTBweCAyMHB4O1xcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICAgIHBhZGRpbmc6IDIwcHg7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgICBmb250LXNpemU6IDEwcHg7XFxuICAgIH1cXG4gICAgLmdyb3VwLWluZm8tY29udGFpbmVyIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcblxcbiAgICAgICAgLmdyb3VwLWluZm8taXRlbSB7XFxuICAgICAgICAgICAgcCB7XFxuICAgICAgICAgICAgICAgIGNvbG9yOiBncmF5O1xcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDhweDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaDIge1xcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxuICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICYjb3duZXItaW5mbyB7XFxuICAgICAgICAgICAgICAgIGgyIHtcXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiB1bnNldDtcXG5cXG4gICAgICAgICAgICAgICAgICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG4gICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwcHg7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IG5vbmU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxNXB4IDVweCAxNXB4O1xcbiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiByZ2JhKDEyNSwgMTI1LCAxMjUsIDAuMzQ1KSAycHggc29saWQ7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXFxuQGtleWZyYW1lcyBmbG9hdC1pbi1saXN0aW5nIHtcXG4gICAgMCUge1xcbiAgICAgICAgbWFyZ2luLXRvcDogNTBweDtcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICBtYXJnaW4tdG9wOiA1cHg7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5tZW51e2JhY2tncm91bmQtY29sb3I6d2hpdGU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nOjIwcHg7d2lkdGg6NDAwcHg7dHJhbnNpdGlvbjphbGwgMC4zcyBjdWJpYy1iZXppZXIoMC4wNzUsIDAuODIsIDAuMTY1LCAxKTtib3JkZXItcmFkaXVzOjRweDtwb2ludGVyLWV2ZW50czpub25lO3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMTAuNWVtO3JpZ2h0OjJlbTt6LWluZGV4OjEwO2JveC1zaGFkb3c6MCAwIDAgMXB4IHJnYmEoOTcsOTcsOTcsMC4xKSwwIDNweCAyMHB4IDAgcmdiYSg5Miw5Miw5MiwwLjMpLDAgMXB4IDJweCByZ2JhKDAsMCwwLDAuNSl9QG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KXsubWVudXtoZWlnaHQ6ODUlO3dpZHRoOjcwJTtkaXNwbGF5OmZsZXg7cG9zaXRpb246Zml4ZWQ7dG9wOjVlbTtyaWdodDotODAlfX0ubWVudS5pc1Nob3dpbmd7dG9wOjVlbTtwb2ludGVyLWV2ZW50czphbGw7b3ZlcmZsb3c6dmlzaWJsZX1AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey5tZW51LmlzU2hvd2luZ3tib3JkZXItYm90dG9tOm5vbmU7Ym9yZGVyLWxlZnQ6I2Q0YWE4YyA1cHggc29saWQ7cmlnaHQ6MDtyaWdodDoyMHB4fX0ubWVudSAubGlua3N7ZGlzcGxheTpub25lO292ZXJmbG93OnZpc2libGV9QG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KXsubWVudSAubGlua3N7ZGlzcGxheTpmbGV4O2ZsZXg6NTAlO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0ubWVudSAubGlua3MgLm5hdi1pdGVte3RleHQtZGVjb3JhdGlvbjpub25lO3dpZHRoOjEwMCU7bWFyZ2luOjEwcHg7b3ZlcmZsb3c6dmlzaWJsZTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9Lm1lbnUgLmxpbmtzIC5uYXYtaXRlbSBwe3BhZGRpbmc6MjBweDtoZWlnaHQ6MTAwJTt3aWR0aDoyMDBweDtjb2xvcjpibGFjaztmb250LXNpemU6MjBweDt0cmFuc2l0aW9uOmFsbCAwLjRzO3RleHQtYWxpZ246Y2VudGVyfS5tZW51IC5saW5rcyAubmF2LWl0ZW06YWN0aXZlIHB7YmFja2dyb3VuZC1jb2xvcjojZmZlNThkfS5tZW51IC5saW5rcyAubmF2LWl0ZW0uYWN0aXZlIHB7YmFja2dyb3VuZC1jb2xvcjojZmZkYTVhO3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93OnZpc2libGU7dHJhbnNpdGlvbjphbGwgMC40c30ubWVudSAubGlua3MgLm5hdi1pdGVtLmFjdGl2ZTo6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xLjVlbTt3aWR0aDoyMHB4O2hlaWdodDoxMDAlO3RvcDowO2JhY2tncm91bmQtY29sb3I6I2Q0YWE4YzthbmltYXRpb246cmlzZSAwLjJzIGVhc2UtaW4tb3V0fX0ubWVudSAudXNlci1hY3Rpb25ze2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59Lm1lbnUgLnVzZXItYWN0aW9ucyAudXNlci1pbmZve2Rpc3BsYXk6bm9uZX1AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey5tZW51IC51c2VyLWFjdGlvbnMgLnVzZXItaW5mb3tkaXNwbGF5OmZsZXg7cGFkZGluZzoyMHB4O2FsaWduLWl0ZW1zOmNlbnRlcn0ubWVudSAudXNlci1hY3Rpb25zIC51c2VyLWluZm8gLm5hbWUtYW5kLXNjaG9vbHtmbGV4OjgwJX0ubWVudSAudXNlci1hY3Rpb25zIC51c2VyLWluZm8gLm5hbWUtYW5kLXNjaG9vbCAuc2Nob29se2ZvbnQtc2l6ZToxNHB4O3BhZGRpbmctcmlnaHQ6MTBweH0ubWVudSAudXNlci1hY3Rpb25zIC51c2VyLWluZm8gLm5hbWUtYW5kLXNjaG9vbCAubmFtZXtmb250LXNpemU6MTRweDtmb250LXdlaWdodDo4MDA7cGFkZGluZy1yaWdodDoxMHB4fS5tZW51IC51c2VyLWFjdGlvbnMgLnVzZXItaW5mbyAucHJvZmlsZS1waWMtY29udGFpbmVye2p1c3RpZnktY29udGVudDplbmR9Lm1lbnUgLnVzZXItYWN0aW9ucyAudXNlci1pbmZvIC5wcm9maWxlLXBpYy1jb250YWluZXIgaW1ne3dpZHRoOjYwcHg7aGVpZ2h0OjYwcHg7Ym9yZGVyLXJhZGl1czozMHB4fX1AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey5tZW51IC51c2VyLWFjdGlvbnN7ZmxleDo1MCU7anVzdGlmeS1jb250ZW50OmVuZH19LmJhY2tncm91bmQubWVudS1iYWNrZ3JvdW5ke3otaW5kZXg6OX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9DbGllbnQvc3JjL2NvbXBvbmVudHMvVG9wQmFyL01lbnUuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsTUFDSSxzQkFBdUIsQ0FDdkIsWUFBYSxDQUNiLHFCQUFzQixDQUN0QixZQUFhLENBQ2IsV0FBWSxDQUNaLHVEQUF3RCxDQUN4RCxpQkFBa0IsQ0FDbEIsbUJBQW9CLENBQ3BCLGlCQUFrQixDQUNsQixXQUFZLENBQ1osU0FBVSxDQUNWLFVBQVcsQ0FDWCxpR0FBNkcsQ0EySGhILDBCQXhJRCxNQWdCUSxVQUFXLENBQ1gsU0FBVSxDQUVWLFlBQWEsQ0FDYixjQUFlLENBQ2YsT0FBUSxDQUNSLFVBQVcsQ0FrSGxCLENBeElELGdCQTBCUSxPQUFRLENBQ1Isa0JBQW1CLENBQ25CLGdCQUFpQixDQVNwQiwwQkFyQ0wsZ0JBK0JZLGtCQUFtQixDQUNuQiw2QkFBb0MsQ0FDcEMsT0FBUSxDQUVSLFVBQVcsQ0FFbEIsQ0FyQ0wsYUF3Q1EsWUFBYSxDQUNiLGdCQUFpQixDQW9EcEIsMEJBN0ZMLGFBMkNZLFlBQWEsQ0FDYixRQUFTLENBQ1QscUJBQXNCLENBQ3RCLGtCQUFtQixDQUNuQixzQkFBdUIsQ0EvQ25DLHVCQWtEZ0Isb0JBQXFCLENBQ3JCLFVBQVcsQ0FFWCxXQUFZLENBQ1osZ0JBQWlCLENBQ2pCLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBekR2Qyx5QkEyRG9CLFlBQWEsQ0FDYixXQUFZLENBQ1osV0FBWSxDQUNaLFdBQVksQ0FDWixjQUFlLENBQ2YsbUJBQW9CLENBQ3BCLGlCQUFrQixDQWpFdEMsZ0NBc0V3Qix3QkFBaUUsQ0F0RXpGLGdDQTJFd0Isd0JDeEVDLENEeUVELGlCQUFrQixDQUNsQixnQkFBaUIsQ0FDakIsbUJBQW9CLENBOUU1QyxxQ0FpRndCLFVBQVcsQ0FDWCxpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLFVBQVcsQ0FDWCxXQUFZLENBQ1osS0FBTSxDQUNOLHdCQ3JGRixDRHNGRSwrQkFBZ0MsQ0FDbkMsQ0F6RnJCLG9CQWdHUSxZQUFhLENBQ2IscUJBQXNCLENBakc5QiwrQkFvR1ksWUFBYSxDQTZCaEIsMEJBaklULCtCQXNHZ0IsWUFBYSxDQUNiLFlBQWEsQ0FDYixrQkFBbUIsQ0F4R25DLGdEQTJHb0IsUUFBUyxDQTNHN0Isd0RBNkd3QixjQUFlLENBRWYsa0JBQW1CLENBL0czQyxzREFrSHdCLGNBQWUsQ0FDZixlQUFnQixDQUNoQixrQkFBbUIsQ0FwSDNDLHNEQXlIb0IsbUJBQW9CLENBekh4QywwREEySHdCLFVBQVcsQ0FDWCxXQUFZLENBQ1osa0JBQW1CLENBQ3RCLENDdEhqQiwwQkRSSixvQkFvSVksUUFBUyxDQUNULG1CQUFvQixDQUUzQixDQUdMLDRCQUVRLFNBQVVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG5cXG4ubWVudSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICB3aWR0aDogNDAwcHg7XFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGN1YmljLWJlemllcigwLjA3NSwgMC44MiwgMC4xNjUsIDEpO1xcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogLTEwLjVlbTtcXG4gICAgcmlnaHQ6IDJlbTtcXG4gICAgei1pbmRleDogMTA7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCByZ2JhKDk3LCA5NywgOTcsIDAuMSksIDAgM3B4IDIwcHggMCByZ2JhKDkyLCA5MiwgOTIsIDAuMyksIDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuXFxuICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICBoZWlnaHQ6IDg1JTtcXG4gICAgICAgIHdpZHRoOiA3MCU7XFxuXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICAgICAgdG9wOiA1ZW07XFxuICAgICAgICByaWdodDogLTgwJTtcXG4gICAgfVxcblxcbiAgICAmLmlzU2hvd2luZyB7XFxuICAgICAgICB0b3A6IDVlbTtcXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxuICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG5cXG4gICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcXG4gICAgICAgICAgICBib3JkZXItbGVmdDogJGJvcmRlci1jb2xvciA1cHggc29saWQ7XFxuICAgICAgICAgICAgcmlnaHQ6IDA7XFxuXFxuICAgICAgICAgICAgcmlnaHQ6IDIwcHg7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLmxpbmtzIHtcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICBmbGV4OiA1MCU7XFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgICAgICAgICAgIC5uYXYtaXRlbSB7XFxuICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgICAgICAgIC8vIGJhY2tncm91bmQtY29sb3I6IHdoZWF0O1xcbiAgICAgICAgICAgICAgICBtYXJnaW46IDEwcHg7XFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgICAgICAgICAgcCB7XFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwMHB4O1xcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGJsYWNrO1xcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNHM7XFxuICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgJjphY3RpdmUge1xcbiAgICAgICAgICAgICAgICAgICAgcCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRlbigkY29sb3I6ICRoaWdobGlnaHQtY29sb3IsICRhbW91bnQ6IDEwJSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgJi5hY3RpdmUge1xcbiAgICAgICAgICAgICAgICAgICAgcCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGhpZ2hsaWdodC1jb2xvcjtcXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNHM7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAmOjphZnRlciB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IC0xLjVlbTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBweDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRib3JkZXItY29sb3I7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiByaXNlIDAuMnMgZWFzZS1pbi1vdXQ7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgLnVzZXItYWN0aW9ucyB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gICAgICAgIC51c2VyLWluZm8ge1xcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICAgICAgQGluY2x1ZGUgbW9iaWxlIHtcXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMjBweDtcXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG4gICAgICAgICAgICAgICAgLm5hbWUtYW5kLXNjaG9vbCB7XFxuICAgICAgICAgICAgICAgICAgICBmbGV4OiA4MCU7XFxuICAgICAgICAgICAgICAgICAgICAuc2Nob29sIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYm9yZGVyLXJpZ2h0OiBibGFjayAxcHggc29saWQ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIC5uYW1lIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDgwMDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJvcmRlci1yaWdodDogYmxhY2sgMXB4IHNvbGlkO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIC5wcm9maWxlLXBpYy1jb250YWluZXIge1xcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBlbmQ7XFxuICAgICAgICAgICAgICAgICAgICBpbWcge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA2MHB4O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNjBweDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzMHB4O1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgQGluY2x1ZGUgbW9iaWxlIHtcXG4gICAgICAgICAgICBmbGV4OiA1MCU7XFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBlbmQ7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXFxuLmJhY2tncm91bmQge1xcbiAgICAmLm1lbnUtYmFja2dyb3VuZCB7XFxuICAgICAgICB6LWluZGV4OiA5O1xcbiAgICB9XFxufVxcblwiLFwiJG1haW4tYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjVmMTtcXG4kcHJpbWFyeS1idXR0b24tY29sb3I6ICNkNGFhOGM7XFxuJGNyZWF0aW9uLWJ1dHRvbi1jb2xvcjogIzcyYmE3MjtcXG4kZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yOiAjOTMzMjMyO1xcbiRib3JkZXItY29sb3I6ICNkNGFhOGM7XFxuJGhpZ2hsaWdodC1jb2xvcjogI2ZmZGE1YTtcXG5cXG4kbW9iaWxlLXdpZHRoOiA4MDBweDtcXG5cXG5AbWl4aW4gbW9iaWxlIHtcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6I3skbW9iaWxlLXdpZHRofSkge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnRvcC1iYXJ7Ym9yZGVyLWJvdHRvbTojZDRhYThjIDVweCBzb2xpZDtwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzp2aXNpYmxlO3otaW5kZXg6MjA7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTt0cmFuc2l0aW9uOmFsbCAwLjRzfS50b3AtYmFyIC53cmFwcGVye3BhZGRpbmc6MTBweCAzMHB4O2hlaWdodDozLjdlbTtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO292ZXJmbG93LXk6aGlkZGVufS50b3AtYmFyIC53cmFwcGVyIC5sZWZ0e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7YWxpZ24taXRlbXM6Y2VudGVyfS50b3AtYmFyIC53cmFwcGVyIC5sZWZ0IGgxe2ZvbnQtc2l6ZToyMHB4O3BhZGRpbmctcmlnaHQ6MjBweDtjb2xvcjpibGFja30udG9wLWJhciAud3JhcHBlciAubGVmdCAubmF2LWl0ZW17bWFyZ2luOjIwcHg7cGFkZGluZzo1cHggMTBweCA1cHggMTBweDtoZWlnaHQ6MTAwJTt0ZXh0LWRlY29yYXRpb246bm9uZTtjb2xvcjpibGFjaztmb250LXNpemU6MTVweDt0cmFuc2l0aW9uOmFsbCAwLjRzfUBtZWRpYSAobWF4LXdpZHRoOiA4MDBweCl7LnRvcC1iYXIgLndyYXBwZXIgLmxlZnQgLm5hdi1pdGVte2Rpc3BsYXk6bm9uZX19LnRvcC1iYXIgLndyYXBwZXIgLmxlZnQgLm5hdi1pdGVtOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmU1OGR9LnRvcC1iYXIgLndyYXBwZXIgLmxlZnQgLm5hdi1pdGVtLmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmRhNWE7cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3c6dmlzaWJsZTt0cmFuc2l0aW9uOmFsbCAwLjRzfS50b3AtYmFyIC53cmFwcGVyIC5sZWZ0IC5uYXYtaXRlbS5hY3RpdmU6OmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO2JvdHRvbTotMTVweDt3aWR0aDoxMDAlO2hlaWdodDo0cHg7YmFja2dyb3VuZC1jb2xvcjojZDRhYThjO2FuaW1hdGlvbjpyaXNlIDAuMnMgZWFzZS1pbi1vdXR9LnRvcC1iYXIgLndyYXBwZXIgLnJpZ2h0IC51c2VySW5mb0NvbnRhaW5lcntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2FsaWduLWl0ZW1zOmNlbnRlcjtjdXJzb3I6cG9pbnRlcn0udG9wLWJhciAud3JhcHBlciAucmlnaHQgLnVzZXJJbmZvQ29udGFpbmVyIC5zY2hvb2x7Zm9udC1zaXplOjE0cHg7Ym9yZGVyLXJpZ2h0OmJsYWNrIDFweCBzb2xpZDtwYWRkaW5nLXJpZ2h0OjEwcHh9LnRvcC1iYXIgLndyYXBwZXIgLnJpZ2h0IC51c2VySW5mb0NvbnRhaW5lciAubmFtZXtmb250LXNpemU6MTRweDtmb250LXdlaWdodDo4MDA7cGFkZGluZy1sZWZ0OjEwcHg7cGFkZGluZy1yaWdodDoxMHB4fUBtZWRpYSAobWF4LXdpZHRoOiA4MDBweCl7LnRvcC1iYXIgLndyYXBwZXIgLnJpZ2h0IC51c2VySW5mb0NvbnRhaW5lcntkaXNwbGF5Om5vbmV9fS50b3AtYmFyIC53cmFwcGVyIC5yaWdodCAuaGFtYnVyZ2Vye3dpZHRoOjIwcHg7aGVpZ2h0OjE1cHg7bWFyZ2luLXJpZ2h0OjEwcHg7ZGlzcGxheTpub25lO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtjdXJzb3I6cG9pbnRlcn1AbWVkaWEgKG1heC13aWR0aDogODAwcHgpey50b3AtYmFyIC53cmFwcGVyIC5yaWdodCAuaGFtYnVyZ2Vye2Rpc3BsYXk6ZmxleH19LnRvcC1iYXIgLndyYXBwZXIgLnJpZ2h0IC5oYW1idXJnZXIgc3BhbntoZWlnaHQ6MnB4O3dpZHRoOjEwMCU7YmFja2dyb3VuZC1jb2xvcjpibGFjazt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7dHJhbnNpdGlvbjowLjVzIGFsbCBlYXNlfS50b3AtYmFyIC53cmFwcGVyIC5yaWdodCAuaGFtYnVyZ2VyLmFjdGl2ZUhhbWJ1cmdlciBzcGFuOmZpcnN0LWNoaWxke3RyYW5zZm9ybTpyb3RhdGUoNDBkZWcpfS50b3AtYmFyIC53cmFwcGVyIC5yaWdodCAuaGFtYnVyZ2VyLmFjdGl2ZUhhbWJ1cmdlciBzcGFuOm50aC1jaGlsZCgyKXtvcGFjaXR5OjB9LnRvcC1iYXIgLndyYXBwZXIgLnJpZ2h0IC5oYW1idXJnZXIuYWN0aXZlSGFtYnVyZ2VyIHNwYW46bGFzdC1jaGlsZHt0cmFuc2Zvcm06cm90YXRlKC00MGRlZyl9QGtleWZyYW1lcyByaXNlezAle2JvdHRvbTotMTdweH0xMDAle2JvdHRvbTotMTVweH19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vQ2xpZW50L3NyYy9jb21wb25lbnRzL1RvcEJhci9Ub3BCYXIuc2Nzc1wiLFwid2VicGFjazovLy4vQ2xpZW50L3NyYy9nbG9iYWxzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsU0FDSSwrQkFBc0MsQ0FFdEMsaUJBQWtCLENBQ2xCLGdCQUFpQixDQUNqQixVQUFXLENBQ1gsc0JBQXVCLENBQ3ZCLG1CQUFvQixDQVB4QixrQkFVUSxpQkFBa0IsQ0FDbEIsWUFBYSxDQUViLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsNkJBQThCLENBQzlCLGlCQUFrQixDQWhCMUIsd0JBbUJZLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsa0JBQW1CLENBckIvQiwyQkF1QmdCLGNBQWUsQ0FDZixrQkFBbUIsQ0FDbkIsV0FBWSxDQXpCNUIsa0NBNEJnQixXQUFZLENBQ1oseUJBQTBCLENBQzFCLFdBQVksQ0FDWixvQkFBcUIsQ0FDckIsV0FBWSxDQUNaLGNBQWUsQ0FDZixtQkFBb0IsQ0EwQnZCLDBCQTVEYixrQ0FxQ29CLFlBQWEsQ0F1QnBCLENBNURiLHlDQXlDb0Isd0JBQWlFLENBekNyRix5Q0E0Q29CLHdCQ3pDSyxDRDBDTCxpQkFBa0IsQ0FDbEIsZ0JBQWlCLENBQ2pCLG1CQUFvQixDQS9DeEMsZ0RBa0R3QixVQUFXLENBQ1gsaUJBQWtCLENBQ2xCLE1BQU8sQ0FDUCxZQUFhLENBQ2IsVUFBVyxDQUNYLFVBQVcsQ0FDWCx3QkN0REYsQ0R1REUsK0JBQWdDLENBekR4RCw0Q0FnRWdCLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsa0JBQW1CLENBQ25CLGNBQWUsQ0FuRS9CLG9EQXNFb0IsY0FBZSxDQUNmLDRCQUE2QixDQUM3QixrQkFBbUIsQ0F4RXZDLGtEQTJFb0IsY0FBZSxDQUNmLGVBQWdCLENBQ2hCLGlCQUFrQixDQUNsQixrQkFBbUIsQ0FDdEIsMEJBL0VqQiw0Q0FrRm9CLFlBQWEsQ0FFcEIsQ0FwRmIsb0NBdUZnQixVQUFXLENBQ1gsV0FBWSxDQUNaLGlCQUFrQixDQUNsQixZQUFhLENBTWIscUJBQXNCLENBQ3RCLDZCQUE4QixDQUM5QixjQUFlLENBc0JsQiwwQkF4SGIsb0NBNkZvQixZQUFhLENBMkJwQixDQXhIYix5Q0FxR29CLFVBQVcsQ0FDWCxVQUFXLENBQ1gsc0JBQXVCLENBQ3ZCLHFCQUFzQixDQUN0Qix3QkFBeUIsQ0F6RzdDLHFFQThHNEIsdUJBQXdCLENBOUdwRCxzRUFpSDRCLFNBQVUsQ0FqSHRDLG9FQW9INEIsd0JBQXlCLENBQzVCLGdCQVNyQixHQUNJLFlBQWEsQ0FFakIsS0FDSSxZQUFhLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwiLi4vLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG5cXG4udG9wLWJhciB7XFxuICAgIGJvcmRlci1ib3R0b206ICRib3JkZXItY29sb3IgNXB4IHNvbGlkO1xcblxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgICB6LWluZGV4OiAyMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIHRyYW5zaXRpb246IGFsbCAwLjRzO1xcblxcbiAgICAud3JhcHBlciB7XFxuICAgICAgICBwYWRkaW5nOiAxMHB4IDMwcHg7XFxuICAgICAgICBoZWlnaHQ6IDMuN2VtO1xcblxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgICAgICBvdmVyZmxvdy15OiBoaWRkZW47XFxuXFxuICAgICAgICAubGVmdCB7XFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICAgICAgaDEge1xcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDIwcHg7XFxuICAgICAgICAgICAgICAgIGNvbG9yOiBibGFjaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgLm5hdi1pdGVtIHtcXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAyMHB4O1xcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweCA1cHggMTBweDtcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgICAgICAgICAgICAgIGNvbG9yOiBibGFjaztcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC40cztcXG5cXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgbW9iaWxlIHtcXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgJjphY3RpdmUge1xcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRlbigkY29sb3I6ICRoaWdobGlnaHQtY29sb3IsICRhbW91bnQ6IDEwJSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgJi5hY3RpdmUge1xcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGhpZ2hsaWdodC1jb2xvcjtcXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuNHM7XFxuXFxuICAgICAgICAgICAgICAgICAgICAmOjphZnRlciB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAtMTVweDtcXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDRweDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYm9yZGVyLWNvbG9yO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogcmlzZSAwLjJzIGVhc2UtaW4tb3V0O1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgLnJpZ2h0IHtcXG4gICAgICAgICAgICAudXNlckluZm9Db250YWluZXIge1xcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuXFxuICAgICAgICAgICAgICAgIC5zY2hvb2wge1xcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiBibGFjayAxcHggc29saWQ7XFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIC5uYW1lIHtcXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA4MDA7XFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIC5oYW1idXJnZXIge1xcbiAgICAgICAgICAgICAgICB3aWR0aDogMjBweDtcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNXB4O1xcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuXFxuICAgICAgICAgICAgICAgIEBpbmNsdWRlIG1vYmlsZSB7XFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgICAgICAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMnB4O1xcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQ7XFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAwLjVzIGFsbCBlYXNlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICYuYWN0aXZlSGFtYnVyZ2VyIHtcXG4gICAgICAgICAgICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICY6Zmlyc3QtY2hpbGQge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0MGRlZyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICY6bnRoLWNoaWxkKDIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgJjpsYXN0LWNoaWxkIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTQwZGVnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXFxuQGtleWZyYW1lcyByaXNlIHtcXG4gICAgMCUge1xcbiAgICAgICAgYm90dG9tOiAtMTdweDtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIGJvdHRvbTogLTE1cHg7XFxuICAgIH1cXG59XFxuXCIsXCIkbWFpbi1iYWNrZ3JvdW5kLWNvbG9yOiAjZjlmNWYxO1xcbiRwcmltYXJ5LWJ1dHRvbi1jb2xvcjogI2Q0YWE4YztcXG4kY3JlYXRpb24tYnV0dG9uLWNvbG9yOiAjNzJiYTcyO1xcbiRkZXN0cnVjdGl2ZS1idXR0b24tY29sb3I6ICM5MzMyMzI7XFxuJGJvcmRlci1jb2xvcjogI2Q0YWE4YztcXG4kaGlnaGxpZ2h0LWNvbG9yOiAjZmZkYTVhO1xcblxcbiRtb2JpbGUtd2lkdGg6IDgwMHB4O1xcblxcbkBtaXhpbiBtb2JpbGUge1xcbiAgICBAbWVkaWEgKG1heC13aWR0aDojeyRtb2JpbGUtd2lkdGh9KSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuRm9ybXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5MYWJlbHtjb2xvcjojYWNhY2FjO2ZvbnQtc2l6ZToxMXB4O3BhZGRpbmctYm90dG9tOjEwcHg7Zm9udC13ZWlnaHQ6NjAwO3RleHQtYWxpZ246Y2VudGVyO3dpZHRoOjEwMCV9LklucHV0RmllbGR7cGFkZGluZzoxMHB4O21hcmdpbjoxMHB4O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Ym9yZGVyOm5vbmU7b3ZlcmZsb3cteDp2aXNpYmxlfS5JbnB1dEZpZWxkIC5MYWJlbHt0ZXh0LWFsaWduOmxlZnR9LklucHV0RmllbGQgLklucHV0e2JveC1zaGFkb3c6MHB4IDVweCAxMHB4IHJnYmEoMTI4LDEyOCwxMjgsMC4xNzEpO3BhZGRpbmc6MTBweDtib3JkZXI6bm9uZTtib3JkZXItYm90dG9tOnJnYmEoMjExLDIxMSwyMTEsMC41OTEpIDhweCBzb2xpZDt0cmFuc2l0aW9uLXByb3BlcnR5OmJvcmRlci1ib3R0b207dHJhbnNpdGlvbi1kdXJhdGlvbjowLjJzO2JvcmRlci1yYWRpdXM6NXB4fS5JbnB1dEZpZWxkIC5JbnB1dDpmb2N1c3tib3JkZXI6bm9uZTtib3JkZXItYm90dG9tOnJnYmEoMTM5LDc5LDExLDAuNjE2KSA4cHggc29saWQ7b3V0bGluZS13aWR0aDowfS5JbnB1dEZpZWxkIC5kcm9wZG93bntwYWRkaW5nOjVweCA1cHggNXB4IDVweDtib3JkZXItcmFkaXVzOjVweDtmb250LXNpemU6MTZweDtib3gtc2hhZG93OjBweCA1cHggMTBweCByZ2JhKDEyOCwxMjgsMTI4LDAuMTcxKTtib3JkZXI6bm9uZTtib3JkZXItYm90dG9tOnJnYmEoMjExLDIxMSwyMTEsMC41OTEpIDhweCBzb2xpZDt0cmFuc2l0aW9uLXByb3BlcnR5OmJvcmRlci1ib3R0b207aGVpZ2h0OjQwcHg7Y3Vyc29yOnBvaW50ZXI7dHJhbnNpdGlvbi1kdXJhdGlvbjowLjJzOy13ZWJraXQtYXBwZWFyYW5jZTpub25lOy1tb3otYXBwZWFyYW5jZTpub25lO2JhY2tncm91bmQ6dXJsKFxcXCJodHRwczovL2ljb25zLmRlYW5pc2hlLm5ldC9zdGF0aWMvaWNvbnMvZm9udGF3ZXNvbWUvNDQ0NDQ0L2FuZ2xlLWRvd24tMjU2LnBuZ1xcXCIpIDk2JS8xNSUgbm8tcmVwZWF0ICNmZmY7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTtiYWNrZ3JvdW5kLXNpemU6MjBweH0uSW5wdXRGaWVsZCAuZHJvcGRvd246Zm9jdXN7Ym9yZGVyOm5vbmU7Ym9yZGVyLWJvdHRvbTpyZ2JhKDEzOSw3OSwxMSwwLjYxNikgOHB4IHNvbGlkO291dGxpbmUtd2lkdGg6MH0uSW5wdXRGaWVsZCAuY29sb3ItcGlja2Vye2JvcmRlcjpub25lO2hlaWdodDo1MHB4O21pbi13aWR0aDoyMDBweDtwb3NpdGlvbjpyZWxhdGl2ZX0uSW5wdXRGaWVsZCAuY29sb3ItcGlja2VyOjphZnRlcntjb250ZW50OlxcXCIoQ2xpY2sgdG8gQ2hhbmdlKVxcXCI7cG9zaXRpb246YWJzb2x1dGU7Y29sb3I6d2hpdGU7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0bzt0b3A6MzMlO2xlZnQ6MDtyaWdodDowO3RleHQtYWxpZ246Y2VudGVyfS5CdXR0b257Ym94LXNoYWRvdzowIDJweCA1cHggcmdiYSgwLDAsMCwwLjEpLDAgMXB4IDJweCByZ2JhKDAsMCwwLDAuMDUpO3RyYW5zaXRpb246YWxsIDAuMnMgZWFzZS1vdXQ7Ym9yZGVyLXJhZGl1czo1cHg7Ym9yZGVyOm5vbmU7Zm9udC13ZWlnaHQ6OTAwO3RleHQtYWxpZ246Y2VudGVyO21pbi1oZWlnaHQ6M2VtO21heC1oZWlnaHQ6M2VtO2ZsZXg6MTtwYWRkaW5nOjAgMjBweCAwIDIwcHg7bWFyZ2luOjIwcHg7Y3Vyc29yOnBvaW50ZXJ9LkJ1dHRvbi5CdXR0b25EZXN0cnVjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiM5MzMyMzI7Y29sb3I6d2hpdGV9LkJ1dHRvbi5CdXR0b25QcmltYXJ5e2JhY2tncm91bmQtY29sb3I6I2Q0YWE4Yztjb2xvcjp3aGl0ZX0uQnV0dG9uLkJ1dHRvbkNyZWF0aW9ue2JhY2tncm91bmQtY29sb3I6IzcyYmE3Mjtjb2xvcjp3aGl0ZX0uQnV0dG9uOmFjdGl2ZXtib3gtc2hhZG93OjAgMnB4IDVweCByZ2JhKDAsMCwwLDApLDAgMXB4IDJweCByZ2JhKDAsMCwwLDAuMDUpO3RyYW5zZm9ybTpzY2FsZSgwLjk4KX0uVG9nZ2xlRmllbGR7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO2JveC1zaGFkb3c6MHB4IDVweCAxMHB4IHJnYmEoMTI4LDEyOCwxMjgsMC4xNzEpO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjEwcHg7bWFyZ2luOjIwcHh9LlRvZ2dsZUZpZWxkIC5MYWJlbHt0ZXh0LWFsaWduOmxlZnQ7Zm9udC1zaXplOjEycHg7bWFyZ2luLXRvcDoxMHB4fS5Ub2dnbGVGaWVsZCAuVG9nZ2xle3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjgwcHg7cGFkZGluZzoxMHB4O2hlaWdodDozNHB4fS5Ub2dnbGVGaWVsZCAuVG9nZ2xlIGlucHV0e29wYWNpdHk6MDt3aWR0aDowO2hlaWdodDowfS5Ub2dnbGVGaWVsZCAuc2xpZGVye3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlci1yYWRpdXM6MzRweDtjdXJzb3I6cG9pbnRlcjt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtiYWNrZ3JvdW5kLWNvbG9yOiNlOGU4ZTg7LXdlYmtpdC10cmFuc2l0aW9uOjAuNHM7dHJhbnNpdGlvbjowLjRzfS5Ub2dnbGVGaWVsZCAuc2xpZGVyOmJlZm9yZXtwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXItcmFkaXVzOjUwJTtjb250ZW50OlxcXCJcXFwiO2hlaWdodDoyNnB4O3dpZHRoOjI2cHg7bGVmdDo0cHg7Ym90dG9tOjRweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTQzLDI4LDI4LDAuNDgyKTstd2Via2l0LXRyYW5zaXRpb246MC40czt0cmFuc2l0aW9uOjAuNHN9LlRvZ2dsZUZpZWxkIGlucHV0OmNoZWNrZWQrLnNsaWRlcjpiZWZvcmV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyNnB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjZweCk7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMTI4LDAsMC40NTIpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDI2cHgpfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvY29yZS9jb3JlLnNjc3NcIixcIndlYnBhY2s6Ly8uL0NsaWVudC9zcmMvZ2xvYmFscy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUdBLE1BQ0ksWUFBYSxDQUNiLHFCQUFzQixDQUN6QixPQUVHLGFBQXlCLENBQ3pCLGNBQWUsQ0FDZixtQkFBb0IsQ0FDcEIsZUFBZ0IsQ0FDaEIsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDZCxZQUdHLFlBQWEsQ0FDYixXQUFZLENBQ1osWUFBYSxDQUNiLHFCQUFzQixDQUN0QixXQUFZLENBQ1osa0JBQW1CLENBTnZCLG1CQVNRLGVBQWdCLENBVHhCLG1CQVlRLCtDQUFtRCxDQUNuRCxZQUFhLENBQ2IsV0FBWSxDQUNaLCtDQUFtRCxDQUNuRCxpQ0FBa0MsQ0FDbEMsd0JBQXlCLENBQ3pCLGlCQUFrQixDQWxCMUIseUJBcUJRLFdBQVksQ0FDWiw2Q0FBaUQsQ0FDakQsZUFBZ0IsQ0F2QnhCLHNCQTRCUSx1QkFBd0IsQ0FDeEIsaUJBQWtCLENBRWxCLGNBQWUsQ0FDZiwrQ0FBbUQsQ0FDbkQsV0FBWSxDQUNaLCtDQUFtRCxDQUNuRCxpQ0FBa0MsQ0FDbEMsV0FBWSxDQUVaLGNBQWUsQ0FFZix3QkFBeUIsQ0FDekIsdUJBQXdCLENBQ3hCLG9CQUFxQixDQUVyQixzSEFDZ0MsQ0FDaEMsc0JBQXVCLENBQ3ZCLG9CQUFxQixDQS9DN0IsNEJBbURRLFdBQVksQ0FDWiw2Q0FBaUQsQ0FDakQsZUFBZ0IsQ0FyRHhCLDBCQXlEUSxXQUFZLENBQ1osV0FBWSxDQUNaLGVBQWdCLENBQ2hCLGlCQUFrQixDQTVEMUIsaUNBOERZLDJCQUE0QixDQUM1QixpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLGdCQUFpQixDQUNqQixpQkFBa0IsQ0FDbEIsT0FBUSxDQUNSLE1BQU8sQ0FDUCxPQUFRLENBQ1IsaUJBQWtCLENBQ3JCLFFBS0wsK0RBQXVFLENBRXZFLDRCQUE2QixDQUU3QixpQkFBa0IsQ0FDbEIsV0FBWSxDQUVaLGVBQWdCLENBQ2hCLGlCQUFrQixDQUVsQixjQUFlLENBQ2YsY0FBZSxDQUNmLE1BQU8sQ0FDUCxxQkFBc0IsQ0FFdEIsV0FBWSxDQUNaLGNBQWUsQ0FqQm5CLDBCQW9CUSx3QkM1RzBCLENENkcxQixXQUFZLENBckJwQixzQkF3QlEsd0JDbEhzQixDRG1IdEIsV0FBWSxDQXpCcEIsdUJBNEJRLHdCQ3JIdUIsQ0RzSHZCLFdBQVksQ0E3QnBCLGVBaUNRLDZEQUFxRSxDQUNyRSxxQkFBc0IsQ0FDekIsYUFLRCxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLHNCQUF1QixDQUN2QiwrQ0FBbUQsQ0FDbkQsNkJBQThCLENBQzlCLGtCQUFtQixDQUNuQixZQUFhLENBQ2IsV0FBWSxDQVJoQixvQkFVUSxlQUFnQixDQUVoQixjQUFlLENBQ2YsZUFBZ0IsQ0FieEIscUJBaUJRLGlCQUFrQixDQUNsQixvQkFBcUIsQ0FDckIsVUFBVyxDQUNYLFlBQWEsQ0FDYixXQUFZLENBckJwQiwyQkF5QlEsU0FBVSxDQUNWLE9BQVEsQ0FDUixRQUFTLENBM0JqQixxQkErQlEsaUJBQWtCLENBQ2xCLGtCQUFtQixDQUNuQixjQUFlLENBQ2YsS0FBTSxDQUNOLE1BQU8sQ0FDUCxPQUFRLENBQ1IsUUFBUyxDQUNULHdCQUFvQyxDQUNwQyx1QkFBd0IsQ0FDeEIsZUFBZ0IsQ0F4Q3hCLDRCQTRDUSxpQkFBa0IsQ0FDbEIsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxXQUFZLENBQ1osVUFBVyxDQUNYLFFBQVMsQ0FDVCxVQUFXLENBQ1gsc0NBQTBDLENBQzFDLHVCQUF3QixDQUN4QixlQUFnQixDQXJEeEIsMENBd0RRLGtDQUFtQyxDQUNuQyw4QkFBK0IsQ0FDL0Isb0NBQXdDLENBQ3hDLDBCQUEyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvL0lucHV0IEZpZWxkXFxuQGltcG9ydCBcXFwiLi4vZ2xvYmFscy5zY3NzXFxcIjtcXG5cXG4uRm9ybSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbi5MYWJlbCB7XFxuICAgIGNvbG9yOiByZ2IoMTcyLCAxNzIsIDE3Mik7XFxuICAgIGZvbnQtc2l6ZTogMTFweDtcXG4gICAgcGFkZGluZy1ib3R0b206IDEwcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5JbnB1dEZpZWxkIHtcXG4gICAgcGFkZGluZzogMTBweDtcXG4gICAgbWFyZ2luOiAxMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG92ZXJmbG93LXg6IHZpc2libGU7XFxuXFxuICAgIC5MYWJlbCB7XFxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgICB9XFxuICAgIC5JbnB1dCB7XFxuICAgICAgICBib3gtc2hhZG93OiAwcHggNXB4IDEwcHggcmdiYSgxMjgsIDEyOCwgMTI4LCAwLjE3MSk7XFxuICAgICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogcmdiYSgyMTEsIDIxMSwgMjExLCAwLjU5MSkgOHB4IHNvbGlkO1xcbiAgICAgICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogYm9yZGVyLWJvdHRvbTtcXG4gICAgICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIH1cXG4gICAgLklucHV0OmZvY3VzIHtcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IHJnYmEoMTM5LCA3OSwgMTEsIDAuNjE2KSA4cHggc29saWQ7XFxuICAgICAgICBvdXRsaW5lLXdpZHRoOiAwO1xcbiAgICB9XFxuXFxuICAgIC8vRHJvcGRvd25cXG4gICAgLmRyb3Bkb3duIHtcXG4gICAgICAgIHBhZGRpbmc6IDVweCA1cHggNXB4IDVweDtcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG5cXG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gICAgICAgIGJveC1zaGFkb3c6IDBweCA1cHggMTBweCByZ2JhKDEyOCwgMTI4LCAxMjgsIDAuMTcxKTtcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IHJnYmEoMjExLCAyMTEsIDIxMSwgMC41OTEpIDhweCBzb2xpZDtcXG4gICAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGJvcmRlci1ib3R0b207XFxuICAgICAgICBoZWlnaHQ6IDQwcHg7XFxuXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuXFxuICAgICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjJzO1xcbiAgICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAgICAgLy8gYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgICAgIGJhY2tncm91bmQ6IHVybChcXFwiaHR0cHM6Ly9pY29ucy5kZWFuaXNoZS5uZXQvc3RhdGljL2ljb25zL2ZvbnRhd2Vzb21lLzQ0NDQ0NC9hbmdsZS1kb3duLTI1Ni5wbmdcXFwiKSA5NiUgLyAxNSVcXG4gICAgICAgICAgICBuby1yZXBlYXQgcmdiKDI1NSwgMjU1LCAyNTUpO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDIwcHg7XFxuICAgIH1cXG5cXG4gICAgLmRyb3Bkb3duOmZvY3VzIHtcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IHJnYmEoMTM5LCA3OSwgMTEsIDAuNjE2KSA4cHggc29saWQ7XFxuICAgICAgICBvdXRsaW5lLXdpZHRoOiAwO1xcbiAgICB9XFxuXFxuICAgIC5jb2xvci1waWNrZXIge1xcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgaGVpZ2h0OiA1MHB4O1xcbiAgICAgICAgbWluLXdpZHRoOiAyMDBweDtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgICY6OmFmdGVyIHtcXG4gICAgICAgICAgICBjb250ZW50OiBcXFwiKENsaWNrIHRvIENoYW5nZSlcXFwiO1xcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgICAgICAgICAgIHRvcDogMzMlO1xcbiAgICAgICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICAgICAgcmlnaHQ6IDA7XFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVxcblxcbi5CdXR0b24ge1xcbiAgICBib3gtc2hhZG93OiAwIDJweCA1cHggcmdiYSgwLCAwLCAwLCAwLjEpLCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjA1KTtcXG5cXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1vdXQ7XFxuXFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYm9yZGVyOiBub25lO1xcblxcbiAgICBmb250LXdlaWdodDogOTAwO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFxuICAgIG1pbi1oZWlnaHQ6IDNlbTtcXG4gICAgbWF4LWhlaWdodDogM2VtO1xcbiAgICBmbGV4OiAxO1xcbiAgICBwYWRkaW5nOiAwIDIwcHggMCAyMHB4O1xcblxcbiAgICBtYXJnaW46IDIwcHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG5cXG4gICAgJi5CdXR0b25EZXN0cnVjdGl2ZSB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkZGVzdHJ1Y3RpdmUtYnV0dG9uLWNvbG9yO1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxuICAgICYuQnV0dG9uUHJpbWFyeSB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeS1idXR0b24tY29sb3I7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG4gICAgJi5CdXR0b25DcmVhdGlvbiB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY3JlYXRpb24tYnV0dG9uLWNvbG9yO1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxuXFxuICAgICY6YWN0aXZlIHtcXG4gICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsIDAsIDAsIDApLCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjA1KTtcXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45OCk7XFxuICAgIH1cXG59XFxuXFxuLy9Ub2dnbGUgU3dpdGNoXFxuLlRvZ2dsZUZpZWxkIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGJveC1zaGFkb3c6IDBweCA1cHggMTBweCByZ2JhKDEyOCwgMTI4LCAxMjgsIDAuMTcxKTtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICBtYXJnaW46IDIwcHg7XFxuICAgIC5MYWJlbCB7XFxuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgICAgICAgLy8gd2lkdGg6IDkwcHg7XFxuICAgICAgICBmb250LXNpemU6IDEycHg7XFxuICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xcbiAgICB9XFxuXFxuICAgIC5Ub2dnbGUge1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgd2lkdGg6IDgwcHg7XFxuICAgICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgICAgaGVpZ2h0OiAzNHB4O1xcbiAgICB9XFxuXFxuICAgIC5Ub2dnbGUgaW5wdXQge1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgIHdpZHRoOiAwO1xcbiAgICAgICAgaGVpZ2h0OiAwO1xcbiAgICB9XFxuXFxuICAgIC5zbGlkZXIge1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMzRweDtcXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAgIHRvcDogMDtcXG4gICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICByaWdodDogMDtcXG4gICAgICAgIGJvdHRvbTogMDtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzIsIDIzMiwgMjMyKTtcXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjogMC40cztcXG4gICAgICAgIHRyYW5zaXRpb246IDAuNHM7XFxuICAgIH1cXG5cXG4gICAgLnNsaWRlcjpiZWZvcmUge1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgICAgICBoZWlnaHQ6IDI2cHg7XFxuICAgICAgICB3aWR0aDogMjZweDtcXG4gICAgICAgIGxlZnQ6IDRweDtcXG4gICAgICAgIGJvdHRvbTogNHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNDMsIDI4LCAyOCwgMC40ODIpO1xcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiAwLjRzO1xcbiAgICAgICAgdHJhbnNpdGlvbjogMC40cztcXG4gICAgfVxcbiAgICBpbnB1dDpjaGVja2VkICsgLnNsaWRlcjpiZWZvcmUge1xcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMjZweCk7XFxuICAgICAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDI2cHgpO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAxMjgsIDAsIDAuNDUyKTtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgyNnB4KTtcXG4gICAgfVxcbn1cXG5cIixcIiRtYWluLWJhY2tncm91bmQtY29sb3I6ICNmOWY1ZjE7XFxuJHByaW1hcnktYnV0dG9uLWNvbG9yOiAjZDRhYThjO1xcbiRjcmVhdGlvbi1idXR0b24tY29sb3I6ICM3MmJhNzI7XFxuJGRlc3RydWN0aXZlLWJ1dHRvbi1jb2xvcjogIzkzMzIzMjtcXG4kYm9yZGVyLWNvbG9yOiAjZDRhYThjO1xcbiRoaWdobGlnaHQtY29sb3I6ICNmZmRhNWE7XFxuXFxuJG1vYmlsZS13aWR0aDogODAwcHg7XFxuXFxuQG1peGluIG1vYmlsZSB7XFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiN7JG1vYmlsZS13aWR0aH0pIHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBzdHIgPSAnJztcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XG4gIHZhciBxcnkgPSB7fTtcbiAgdmFyIHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgcXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gIH1cbiAgcmV0dXJuIHFyeTtcbn07XG4iLCIvKipcbiAqIFBhcnNlcyBhbiBVUklcbiAqXG4gKiBAYXV0aG9yIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPiAoTUlUIGxpY2Vuc2UpXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShodHRwfGh0dHBzfHdzfHdzcyk6XFwvXFwvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLztcblxudmFyIHBhcnRzID0gW1xuICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJ1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHtcbiAgICB2YXIgc3JjID0gc3RyLFxuICAgICAgICBiID0gc3RyLmluZGV4T2YoJ1snKSxcbiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7XG5cbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XG4gICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksXG4gICAgICAgIHVyaSA9IHt9LFxuICAgICAgICBpID0gMTQ7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xuICAgIH1cblxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcbiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYztcbiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpO1xuICAgICAgICB1cmkuYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eS5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgvOy9nLCAnOicpO1xuICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJpLnBhdGhOYW1lcyA9IHBhdGhOYW1lcyh1cmksIHVyaVsncGF0aCddKTtcbiAgICB1cmkucXVlcnlLZXkgPSBxdWVyeUtleSh1cmksIHVyaVsncXVlcnknXSk7XG5cbiAgICByZXR1cm4gdXJpO1xufTtcblxuZnVuY3Rpb24gcGF0aE5hbWVzKG9iaiwgcGF0aCkge1xuICAgIHZhciByZWd4ID0gL1xcL3syLDl9L2csXG4gICAgICAgIG5hbWVzID0gcGF0aC5yZXBsYWNlKHJlZ3gsIFwiL1wiKS5zcGxpdChcIi9cIik7XG5cbiAgICBpZiAocGF0aC5zdWJzdHIoMCwgMSkgPT0gJy8nIHx8IHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZSgwLCAxKTtcbiAgICB9XG4gICAgaWYgKHBhdGguc3Vic3RyKHBhdGgubGVuZ3RoIC0gMSwgMSkgPT0gJy8nKSB7XG4gICAgICAgIG5hbWVzLnNwbGljZShuYW1lcy5sZW5ndGggLSAxLCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZXM7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5S2V5KHVyaSwgcXVlcnkpIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgcXVlcnkucmVwbGFjZSgvKD86XnwmKShbXiY9XSopPT8oW14mXSopL2csIGZ1bmN0aW9uICgkMCwgJDEsICQyKSB7XG4gICAgICAgIGlmICgkMSkge1xuICAgICAgICAgICAgZGF0YVskMV0gPSAkMjtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGE7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIhZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz10KCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLHQpO2Vsc2V7dmFyIG49dCgpO2Zvcih2YXIgciBpbiBuKShcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzOmUpW3JdPW5bcl19fSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQocil7aWYobltyXSlyZXR1cm4gbltyXS5leHBvcnRzO3ZhciBvPW5bcl09e2V4cG9ydHM6e30saWQ6cixsb2FkZWQ6ITF9O3JldHVybiBlW3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubG9hZGVkPSEwLG8uZXhwb3J0c312YXIgbj17fTtyZXR1cm4gdC5tPWUsdC5jPW4sdC5wPVwiXCIsdCgwKX0oW2Z1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBvKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1mdW5jdGlvbiBpKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gYShlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpOmUuX19wcm90b19fPXQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciB1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxyJiZlKHQsciksdH19KCksYz1uKDM2KSxzPXIoYyksbD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe28odGhpcyx0KTt2YXIgbj1pKHRoaXMsKHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCkpLmNhbGwodGhpcyxlKSk7cmV0dXJuIG4uc3RhdGU9e2ZpbGVzOltdfSxufXJldHVybiBhKHQsZSksdSh0LFt7a2V5OlwiaGFuZGxlQ2hhbmdlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMsbj1lLnRhcmdldC5maWxlcyxyPVtdLG89ZnVuY3Rpb24oKXt2YXIgZT1uW2ldLG89bmV3IEZpbGVSZWFkZXI7by5yZWFkQXNEYXRhVVJMKGUpLG8ub25sb2FkPWZ1bmN0aW9uKCl7dmFyIGk9e25hbWU6ZS5uYW1lLHR5cGU6ZS50eXBlLHNpemU6TWF0aC5yb3VuZChlLnNpemUvMWUzKStcIiBrQlwiLGJhc2U2NDpvLnJlc3VsdCxmaWxlOmV9O3IucHVzaChpKSxyLmxlbmd0aD09bi5sZW5ndGgmJih0LnByb3BzLm11bHRpcGxlP3QucHJvcHMub25Eb25lKHIpOnQucHJvcHMub25Eb25lKHJbMF0pKX19LGk9MDtpPG4ubGVuZ3RoO2krKylvKCl9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gcy5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLHt0eXBlOlwiZmlsZVwiLG9uQ2hhbmdlOnRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyksbXVsdGlwbGU6dGhpcy5wcm9wcy5tdWx0aXBsZX0pfX1dKSx0fShzLmRlZmF1bHQuQ29tcG9uZW50KTt0LmRlZmF1bHQ9bCxsLmRlZmF1bHRQcm9wcz17bXVsdGlwbGU6ITF9fSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4oKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIHIoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gbyhlKXtpZihsPT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dChlLDApO2lmKChsPT09bnx8IWwpJiZzZXRUaW1lb3V0KXJldHVybiBsPXNldFRpbWVvdXQsc2V0VGltZW91dChlLDApO3RyeXtyZXR1cm4gbChlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gbC5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gbC5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIGkoZSl7aWYocD09PWNsZWFyVGltZW91dClyZXR1cm4gY2xlYXJUaW1lb3V0KGUpO2lmKChwPT09cnx8IXApJiZjbGVhclRpbWVvdXQpcmV0dXJuIHA9Y2xlYXJUaW1lb3V0LGNsZWFyVGltZW91dChlKTt0cnl7cmV0dXJuIHAoZSl9Y2F0Y2godCl7dHJ5e3JldHVybiBwLmNhbGwobnVsbCxlKX1jYXRjaCh0KXtyZXR1cm4gcC5jYWxsKHRoaXMsZSl9fX1mdW5jdGlvbiBhKCl7diYmZCYmKHY9ITEsZC5sZW5ndGg/eT1kLmNvbmNhdCh5KTptPS0xLHkubGVuZ3RoJiZ1KCkpfWZ1bmN0aW9uIHUoKXtpZighdil7dmFyIGU9byhhKTt2PSEwO2Zvcih2YXIgdD15Lmxlbmd0aDt0Oyl7Zm9yKGQ9eSx5PVtdOysrbTx0OylkJiZkW21dLnJ1bigpO209LTEsdD15Lmxlbmd0aH1kPW51bGwsdj0hMSxpKGUpfX1mdW5jdGlvbiBjKGUsdCl7dGhpcy5mdW49ZSx0aGlzLmFycmF5PXR9ZnVuY3Rpb24gcygpe312YXIgbCxwLGY9ZS5leHBvcnRzPXt9OyFmdW5jdGlvbigpe3RyeXtsPVwiZnVuY3Rpb25cIj09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpufWNhdGNoKGUpe2w9bn10cnl7cD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnJ9Y2F0Y2goZSl7cD1yfX0oKTt2YXIgZCx5PVtdLHY9ITEsbT0tMTtmLm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXRbbi0xXT1hcmd1bWVudHNbbl07eS5wdXNoKG5ldyBjKGUsdCkpLDEhPT15Lmxlbmd0aHx8dnx8byh1KX0sYy5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX0sZi50aXRsZT1cImJyb3dzZXJcIixmLmJyb3dzZXI9ITAsZi5lbnY9e30sZi5hcmd2PVtdLGYudmVyc2lvbj1cIlwiLGYudmVyc2lvbnM9e30sZi5vbj1zLGYuYWRkTGlzdGVuZXI9cyxmLm9uY2U9cyxmLm9mZj1zLGYucmVtb3ZlTGlzdGVuZXI9cyxmLnJlbW92ZUFsbExpc3RlbmVycz1zLGYuZW1pdD1zLGYucHJlcGVuZExpc3RlbmVyPXMsZi5wcmVwZW5kT25jZUxpc3RlbmVyPXMsZi5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119LGYuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX0sZi5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn0sZi5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9LGYudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQsbixvLGksYSx1LGMpe2lmKHIodCksIWUpe3ZhciBzO2lmKHZvaWQgMD09PXQpcz1uZXcgRXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtuLG8saSxhLHUsY10scD0wO3M9bmV3IEVycm9yKHQucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW3ArK119KSkscy5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifXRocm93IHMuZnJhbWVzVG9Qb3A9MSxzfX12YXIgcj1mdW5jdGlvbihlKXt9O1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJihyPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IEVycm9yKFwiaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnRcIil9KSxlLmV4cG9ydHM9bn0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDkpLG89cjtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXt2YXIgaT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPUFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTt2YXIgbz0wLGk9XCJXYXJuaW5nOiBcIitlLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbltvKytdfSk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUuZXJyb3IoaSk7dHJ5e3Rocm93IG5ldyBFcnJvcihpKX1jYXRjaChlKXt9fTtvPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgRXJyb3IoXCJgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyBtZXNzYWdlIGFyZ3VtZW50XCIpO2lmKDAhPT10LmluZGV4T2YoXCJGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiBcIikmJiFlKXtmb3IodmFyIG49YXJndW1lbnRzLmxlbmd0aCxyPUFycmF5KG4+Mj9uLTI6MCksbz0yO288bjtvKyspcltvLTJdPWFyZ3VtZW50c1tvXTtpLmFwcGx5KHZvaWQgMCxbdF0uY29uY2F0KHIpKX19fWUuZXhwb3J0cz1vfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmZC5jYWxsKGUsXCJyZWZcIikpe3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxcInJlZlwiKS5nZXQ7aWYobiYmbi5pc1JlYWN0V2FybmluZylyZXR1cm4hMX1yZXR1cm4gdm9pZCAwIT09ZS5yZWZ9ZnVuY3Rpb24gbyhlKXtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZkLmNhbGwoZSxcImtleVwiKSl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLFwia2V5XCIpLmdldDtpZihuJiZuLmlzUmVhY3RXYXJuaW5nKXJldHVybiExfXJldHVybiB2b2lkIDAhPT1lLmtleX1mdW5jdGlvbiBpKGUsbil7dmFyIHI9ZnVuY3Rpb24oKXt1fHwodT0hMCxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP3AoITEsXCIlczogYGtleWAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lIHZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgcHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcylcIixuKTp2b2lkIDApfTtyLmlzUmVhY3RXYXJuaW5nPSEwLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwia2V5XCIse2dldDpyLGNvbmZpZ3VyYWJsZTohMH0pfWZ1bmN0aW9uIGEoZSxuKXt2YXIgcj1mdW5jdGlvbigpe2N8fChjPSEwLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/cCghMSxcIiVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgdmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCBwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKVwiLG4pOnZvaWQgMCl9O3IuaXNSZWFjdFdhcm5pbmc9ITAsT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJyZWZcIix7Z2V0OnIsY29uZmlndXJhYmxlOiEwfSl9dmFyIHUsYyxzPW4oNiksbD1uKDcpLHA9bigzKSxmPW4oOCksZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHk9bigxNSksdj17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9LG09ZnVuY3Rpb24oZSxuLHIsbyxpLGEsdSl7dmFyIGM9eyQkdHlwZW9mOnksdHlwZTplLGtleTpuLHJlZjpyLHByb3BzOnUsX293bmVyOmF9O3JldHVyblwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJihjLl9zdG9yZT17fSxmPyhPYmplY3QuZGVmaW5lUHJvcGVydHkoYy5fc3RvcmUsXCJ2YWxpZGF0ZWRcIix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsdmFsdWU6ITF9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYyxcIl9zZWxmXCIse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiExLHZhbHVlOm99KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYyxcIl9zb3VyY2VcIix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITEsdmFsdWU6aX0pKTooYy5fc3RvcmUudmFsaWRhdGVkPSExLGMuX3NlbGY9byxjLl9zb3VyY2U9aSksT2JqZWN0LmZyZWV6ZSYmKE9iamVjdC5mcmVlemUoYy5wcm9wcyksT2JqZWN0LmZyZWV6ZShjKSkpLGN9O20uY3JlYXRlRWxlbWVudD1mdW5jdGlvbihlLG4sdSl7dmFyIGMscz17fSxwPW51bGwsZj1udWxsLGg9bnVsbCxnPW51bGw7aWYobnVsbCE9bil7cihuKSYmKGY9bi5yZWYpLG8obikmJihwPVwiXCIrbi5rZXkpLGg9dm9pZCAwPT09bi5fX3NlbGY/bnVsbDpuLl9fc2VsZixnPXZvaWQgMD09PW4uX19zb3VyY2U/bnVsbDpuLl9fc291cmNlO2ZvcihjIGluIG4pZC5jYWxsKG4sYykmJiF2Lmhhc093blByb3BlcnR5KGMpJiYoc1tjXT1uW2NdKX12YXIgYj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWIpcy5jaGlsZHJlbj11O2Vsc2UgaWYoYj4xKXtmb3IodmFyIEU9QXJyYXkoYiksTj0wO048YjtOKyspRVtOXT1hcmd1bWVudHNbTisyXTtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZPYmplY3QuZnJlZXplJiZPYmplY3QuZnJlZXplKEUpLHMuY2hpbGRyZW49RX1pZihlJiZlLmRlZmF1bHRQcm9wcyl7dmFyIF89ZS5kZWZhdWx0UHJvcHM7Zm9yKGMgaW4gXyl2b2lkIDA9PT1zW2NdJiYoc1tjXT1fW2NdKX1pZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiYocHx8ZikmJihcInVuZGVmaW5lZFwiPT10eXBlb2Ygcy4kJHR5cGVvZnx8cy4kJHR5cGVvZiE9PXkpKXt2YXIgTz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2UuZGlzcGxheU5hbWV8fGUubmFtZXx8XCJVbmtub3duXCI6ZTtwJiZpKHMsTyksZiYmYShzLE8pfXJldHVybiBtKGUscCxmLGgsZyxsLmN1cnJlbnQscyl9LG0uY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihlKXt2YXIgdD1tLmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLGUpO3JldHVybiB0LnR5cGU9ZSx0fSxtLmNsb25lQW5kUmVwbGFjZUtleT1mdW5jdGlvbihlLHQpe3ZhciBuPW0oZS50eXBlLHQsZS5yZWYsZS5fc2VsZixlLl9zb3VyY2UsZS5fb3duZXIsZS5wcm9wcyk7cmV0dXJuIG59LG0uY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxhPXMoe30sZS5wcm9wcyksdT1lLmtleSxjPWUucmVmLHA9ZS5fc2VsZixmPWUuX3NvdXJjZSx5PWUuX293bmVyO2lmKG51bGwhPXQpe3IodCkmJihjPXQucmVmLHk9bC5jdXJyZW50KSxvKHQpJiYodT1cIlwiK3Qua2V5KTt2YXIgaDtlLnR5cGUmJmUudHlwZS5kZWZhdWx0UHJvcHMmJihoPWUudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihpIGluIHQpZC5jYWxsKHQsaSkmJiF2Lmhhc093blByb3BlcnR5KGkpJiYodm9pZCAwPT09dFtpXSYmdm9pZCAwIT09aD9hW2ldPWhbaV06YVtpXT10W2ldKX12YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYS5jaGlsZHJlbj1uO2Vsc2UgaWYoZz4xKXtmb3IodmFyIGI9QXJyYXkoZyksRT0wO0U8ZztFKyspYltFXT1hcmd1bWVudHNbRSsyXTthLmNoaWxkcmVuPWJ9cmV0dXJuIG0oZS50eXBlLHUsYyxwLGYseSxhKX0sbS5pc1ZhbGlkRWxlbWVudD1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJmUuJCR0eXBlb2Y9PT15fSxlLmV4cG9ydHM9bX0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLTEsbj1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIitlK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIitlLHI9MDtyPHQ7cisrKW4rPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW3IrMV0pO24rPVwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIjt2YXIgbz1uZXcgRXJyb3Iobik7dGhyb3cgby5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwiLG8uZnJhbWVzVG9Qb3A9MSxvfWUuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQpey8qXG5cdG9iamVjdC1hc3NpZ25cblx0KGMpIFNpbmRyZSBTb3JodXNcblx0QGxpY2Vuc2UgTUlUXG5cdCovXG5cInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZFwiKTtyZXR1cm4gT2JqZWN0KGUpfWZ1bmN0aW9uIHIoKXt0cnl7aWYoIU9iamVjdC5hc3NpZ24pcmV0dXJuITE7dmFyIGU9bmV3IFN0cmluZyhcImFiY1wiKTtpZihlWzVdPVwiZGVcIixcIjVcIj09PU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpWzBdKXJldHVybiExO2Zvcih2YXIgdD17fSxuPTA7bjwxMDtuKyspdFtcIl9cIitTdHJpbmcuZnJvbUNoYXJDb2RlKG4pXT1uO3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0pO2lmKFwiMDEyMzQ1Njc4OVwiIT09ci5qb2luKFwiXCIpKXJldHVybiExO3ZhciBvPXt9O3JldHVyblwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIi5zcGxpdChcIlwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe29bZV09ZX0pLFwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIj09PU9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sbykpLmpvaW4oXCJcIil9Y2F0Y2goZSl7cmV0dXJuITF9fXZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsaT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGE9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtlLmV4cG9ydHM9cigpP09iamVjdC5hc3NpZ246ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsdSxjPW4oZSkscz0xO3M8YXJndW1lbnRzLmxlbmd0aDtzKyspe3I9T2JqZWN0KGFyZ3VtZW50c1tzXSk7Zm9yKHZhciBsIGluIHIpaS5jYWxsKHIsbCkmJihjW2xdPXJbbF0pO2lmKG8pe3U9byhyKTtmb3IodmFyIHA9MDtwPHUubGVuZ3RoO3ArKylhLmNhbGwocix1W3BdKSYmKGNbdVtwXV09clt1W3BdXSl9fXJldHVybiBjfX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj17Y3VycmVudDpudWxsfTtlLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj0hMTtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXRyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJ4XCIse2dldDpmdW5jdGlvbigpe319KSxuPSEwfWNhdGNoKGUpe31lLmV4cG9ydHM9bn0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlfX12YXIgcj1mdW5jdGlvbigpe307ci50aGF0UmV0dXJucz1uLHIudGhhdFJldHVybnNGYWxzZT1uKCExKSxyLnRoYXRSZXR1cm5zVHJ1ZT1uKCEwKSxyLnRoYXRSZXR1cm5zTnVsbD1uKG51bGwpLHIudGhhdFJldHVybnNUaGlzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHIudGhhdFJldHVybnNBcmd1bWVudD1mdW5jdGlvbihlKXtyZXR1cm4gZX0sZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt2YXIgdD1GdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcsbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHI9UmVnRXhwKFwiXlwiK3QuY2FsbChuKS5yZXBsYWNlKC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcIlxcXFwkJlwiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLFwiJDEuKj9cIikrXCIkXCIpO3RyeXt2YXIgbz10LmNhbGwoZSk7cmV0dXJuIHIudGVzdChvKX1jYXRjaChlKXtyZXR1cm4hMX19ZnVuY3Rpb24gbyhlKXt2YXIgdD1zKGUpO2lmKHQpe3ZhciBuPXQuY2hpbGRJRHM7bChlKSxuLmZvckVhY2gobyl9fWZ1bmN0aW9uIGkoZSx0LG4pe3JldHVyblwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKHQ/XCIgKGF0IFwiK3QuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIit0LmxpbmVOdW1iZXIrXCIpXCI6bj9cIiAoY3JlYXRlZCBieSBcIituK1wiKVwiOlwiXCIpfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIG51bGw9PWU/XCIjZW1wdHlcIjpcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGU/XCIjdGV4dFwiOlwic3RyaW5nXCI9PXR5cGVvZiBlLnR5cGU/ZS50eXBlOmUudHlwZS5kaXNwbGF5TmFtZXx8ZS50eXBlLm5hbWV8fFwiVW5rbm93blwifWZ1bmN0aW9uIHUoZSl7dmFyIG4scj1QLmdldERpc3BsYXlOYW1lKGUpLG89UC5nZXRFbGVtZW50KGUpLGE9UC5nZXRPd25lcklEKGUpO3JldHVybiBhJiYobj1QLmdldERpc3BsYXlOYW1lKGEpKSxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2cobyxcIlJlYWN0Q29tcG9uZW50VHJlZUhvb2s6IE1pc3NpbmcgUmVhY3QgZWxlbWVudCBmb3IgZGVidWdJRCAlcyB3aGVuIGJ1aWxkaW5nIHN0YWNrXCIsZSk6dm9pZCAwLGkocixvJiZvLl9zb3VyY2Usbil9dmFyIGMscyxsLHAsZixkLHksdj1uKDUpLG09big3KSxoPW4oMiksZz1uKDMpLGI9XCJmdW5jdGlvblwiPT10eXBlb2YgQXJyYXkuZnJvbSYmXCJmdW5jdGlvblwiPT10eXBlb2YgTWFwJiZyKE1hcCkmJm51bGwhPU1hcC5wcm90b3R5cGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIE1hcC5wcm90b3R5cGUua2V5cyYmcihNYXAucHJvdG90eXBlLmtleXMpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTZXQmJnIoU2V0KSYmbnVsbCE9U2V0LnByb3RvdHlwZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU2V0LnByb3RvdHlwZS5rZXlzJiZyKFNldC5wcm90b3R5cGUua2V5cyk7aWYoYil7dmFyIEU9bmV3IE1hcCxOPW5ldyBTZXQ7Yz1mdW5jdGlvbihlLHQpe0Uuc2V0KGUsdCl9LHM9ZnVuY3Rpb24oZSl7cmV0dXJuIEUuZ2V0KGUpfSxsPWZ1bmN0aW9uKGUpe0UuZGVsZXRlKGUpfSxwPWZ1bmN0aW9uKCl7cmV0dXJuIEFycmF5LmZyb20oRS5rZXlzKCkpfSxmPWZ1bmN0aW9uKGUpe04uYWRkKGUpfSxkPWZ1bmN0aW9uKGUpe04uZGVsZXRlKGUpfSx5PWZ1bmN0aW9uKCl7cmV0dXJuIEFycmF5LmZyb20oTi5rZXlzKCkpfX1lbHNle3ZhciBfPXt9LE89e30sRD1mdW5jdGlvbihlKXtyZXR1cm5cIi5cIitlfSx3PWZ1bmN0aW9uKGUpe3JldHVybiBwYXJzZUludChlLnN1YnN0cigxKSwxMCl9O2M9ZnVuY3Rpb24oZSx0KXt2YXIgbj1EKGUpO19bbl09dH0scz1mdW5jdGlvbihlKXt2YXIgdD1EKGUpO3JldHVybiBfW3RdfSxsPWZ1bmN0aW9uKGUpe3ZhciB0PUQoZSk7ZGVsZXRlIF9bdF19LHA9ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmtleXMoXykubWFwKHcpfSxmPWZ1bmN0aW9uKGUpe3ZhciB0PUQoZSk7T1t0XT0hMH0sZD1mdW5jdGlvbihlKXt2YXIgdD1EKGUpO2RlbGV0ZSBPW3RdfSx5PWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKE8pLm1hcCh3KX19dmFyIHg9W10sUD17b25TZXRDaGlsZHJlbjpmdW5jdGlvbihlLG4pe3ZhciByPXMoZSk7cj92b2lkIDA6XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9oKCExLFwiSXRlbSBtdXN0IGhhdmUgYmVlbiBzZXRcIik6dihcIjE0NFwiKSxyLmNoaWxkSURzPW47Zm9yKHZhciBvPTA7bzxuLmxlbmd0aDtvKyspe3ZhciBpPW5bb10sYT1zKGkpO2E/dm9pZCAwOlwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/aCghMSxcIkV4cGVjdGVkIGhvb2sgZXZlbnRzIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuXCIpOnYoXCIxNDBcIiksbnVsbD09YS5jaGlsZElEcyYmXCJvYmplY3RcIj09dHlwZW9mIGEuZWxlbWVudCYmbnVsbCE9YS5lbGVtZW50P1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/aCghMSxcIkV4cGVjdGVkIG9uU2V0Q2hpbGRyZW4oKSB0byBmaXJlIGZvciBhIGNvbnRhaW5lciBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuXCIpOnYoXCIxNDFcIik6dm9pZCAwLGEuaXNNb3VudGVkP3ZvaWQgMDpcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2goITEsXCJFeHBlY3RlZCBvbk1vdW50Q29tcG9uZW50KCkgdG8gZmlyZSBmb3IgdGhlIGNoaWxkIGJlZm9yZSBpdHMgcGFyZW50IGluY2x1ZGVzIGl0IGluIG9uU2V0Q2hpbGRyZW4oKS5cIik6dihcIjcxXCIpLG51bGw9PWEucGFyZW50SUQmJihhLnBhcmVudElEPWUpLGEucGFyZW50SUQhPT1lP1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/aCghMSxcIkV4cGVjdGVkIG9uQmVmb3JlTW91bnRDb21wb25lbnQoKSBwYXJlbnQgYW5kIG9uU2V0Q2hpbGRyZW4oKSB0byBiZSBjb25zaXN0ZW50ICglcyBoYXMgcGFyZW50cyAlcyBhbmQgJXMpLlwiLGksYS5wYXJlbnRJRCxlKTp2KFwiMTQyXCIsaSxhLnBhcmVudElELGUpOnZvaWQgMH19LG9uQmVmb3JlTW91bnRDb21wb25lbnQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXtlbGVtZW50OnQscGFyZW50SUQ6bix0ZXh0Om51bGwsY2hpbGRJRHM6W10saXNNb3VudGVkOiExLHVwZGF0ZUNvdW50OjB9O2MoZSxyKX0sb25CZWZvcmVVcGRhdGVDb21wb25lbnQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1zKGUpO24mJm4uaXNNb3VudGVkJiYobi5lbGVtZW50PXQpfSxvbk1vdW50Q29tcG9uZW50OmZ1bmN0aW9uKGUpe3ZhciBuPXMoZSk7bj92b2lkIDA6XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9oKCExLFwiSXRlbSBtdXN0IGhhdmUgYmVlbiBzZXRcIik6dihcIjE0NFwiKSxuLmlzTW91bnRlZD0hMDt2YXIgcj0wPT09bi5wYXJlbnRJRDtyJiZmKGUpfSxvblVwZGF0ZUNvbXBvbmVudDpmdW5jdGlvbihlKXt2YXIgdD1zKGUpO3QmJnQuaXNNb3VudGVkJiZ0LnVwZGF0ZUNvdW50Kyt9LG9uVW5tb3VudENvbXBvbmVudDpmdW5jdGlvbihlKXt2YXIgdD1zKGUpO2lmKHQpe3QuaXNNb3VudGVkPSExO3ZhciBuPTA9PT10LnBhcmVudElEO24mJmQoZSl9eC5wdXNoKGUpfSxwdXJnZVVubW91bnRlZENvbXBvbmVudHM6ZnVuY3Rpb24oKXtpZighUC5fcHJldmVudFB1cmdpbmcpe2Zvcih2YXIgZT0wO2U8eC5sZW5ndGg7ZSsrKXt2YXIgdD14W2VdO28odCl9eC5sZW5ndGg9MH19LGlzTW91bnRlZDpmdW5jdGlvbihlKXt2YXIgdD1zKGUpO3JldHVybiEhdCYmdC5pc01vdW50ZWR9LGdldEN1cnJlbnRTdGFja0FkZGVuZHVtOmZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7aWYoZSl7dmFyIG49YShlKSxyPWUuX293bmVyO3QrPWkobixlLl9zb3VyY2UsciYmci5nZXROYW1lKCkpfXZhciBvPW0uY3VycmVudCx1PW8mJm8uX2RlYnVnSUQ7cmV0dXJuIHQrPVAuZ2V0U3RhY2tBZGRlbmR1bUJ5SUQodSl9LGdldFN0YWNrQWRkZW5kdW1CeUlEOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1cIlwiO2U7KXQrPXUoZSksZT1QLmdldFBhcmVudElEKGUpO3JldHVybiB0fSxnZXRDaGlsZElEczpmdW5jdGlvbihlKXt2YXIgdD1zKGUpO3JldHVybiB0P3QuY2hpbGRJRHM6W119LGdldERpc3BsYXlOYW1lOmZ1bmN0aW9uKGUpe3ZhciB0PVAuZ2V0RWxlbWVudChlKTtyZXR1cm4gdD9hKHQpOm51bGx9LGdldEVsZW1lbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9cyhlKTtyZXR1cm4gdD90LmVsZW1lbnQ6bnVsbH0sZ2V0T3duZXJJRDpmdW5jdGlvbihlKXt2YXIgdD1QLmdldEVsZW1lbnQoZSk7cmV0dXJuIHQmJnQuX293bmVyP3QuX293bmVyLl9kZWJ1Z0lEOm51bGx9LGdldFBhcmVudElEOmZ1bmN0aW9uKGUpe3ZhciB0PXMoZSk7cmV0dXJuIHQ/dC5wYXJlbnRJRDpudWxsfSxnZXRTb3VyY2U6ZnVuY3Rpb24oZSl7dmFyIHQ9cyhlKSxuPXQ/dC5lbGVtZW50Om51bGwscj1udWxsIT1uP24uX3NvdXJjZTpudWxsO3JldHVybiByfSxnZXRUZXh0OmZ1bmN0aW9uKGUpe3ZhciB0PVAuZ2V0RWxlbWVudChlKTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD90OlwibnVtYmVyXCI9PXR5cGVvZiB0P1wiXCIrdDpudWxsfSxnZXRVcGRhdGVDb3VudDpmdW5jdGlvbihlKXt2YXIgdD1zKGUpO3JldHVybiB0P3QudXBkYXRlQ291bnQ6MH0sZ2V0Um9vdElEczp5LGdldFJlZ2lzdGVyZWRJRHM6cCxwdXNoTm9uU3RhbmRhcmRXYXJuaW5nU3RhY2s6ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBjb25zb2xlLnJlYWN0U3RhY2spe3ZhciBuPVtdLHI9bS5jdXJyZW50LG89ciYmci5fZGVidWdJRDt0cnl7Zm9yKGUmJm4ucHVzaCh7bmFtZTpvP1AuZ2V0RGlzcGxheU5hbWUobyk6bnVsbCxmaWxlTmFtZTp0P3QuZmlsZU5hbWU6bnVsbCxsaW5lTnVtYmVyOnQ/dC5saW5lTnVtYmVyOm51bGx9KTtvOyl7dmFyIGk9UC5nZXRFbGVtZW50KG8pLGE9UC5nZXRQYXJlbnRJRChvKSx1PVAuZ2V0T3duZXJJRChvKSxjPXU/UC5nZXREaXNwbGF5TmFtZSh1KTpudWxsLHM9aSYmaS5fc291cmNlO24ucHVzaCh7bmFtZTpjLGZpbGVOYW1lOnM/cy5maWxlTmFtZTpudWxsLGxpbmVOdW1iZXI6cz9zLmxpbmVOdW1iZXI6bnVsbH0pLG89YX19Y2F0Y2goZSl7fWNvbnNvbGUucmVhY3RTdGFjayhuKX19LHBvcE5vblN0YW5kYXJkV2FybmluZ1N0YWNrOmZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgY29uc29sZS5yZWFjdFN0YWNrRW5kJiZjb25zb2xlLnJlYWN0U3RhY2tFbmQoKX19O2UuZXhwb3J0cz1QfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciBuPWZ1bmN0aW9uKCl7fTtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKXt2YXIgcj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPUFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTt2YXIgbz0wLGk9XCJXYXJuaW5nOiBcIitlLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbltvKytdfSk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUud2FybihpKTt0cnl7dGhyb3cgbmV3IEVycm9yKGkpfWNhdGNoKGUpe319O249ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBFcnJvcihcImB3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nIG1lc3NhZ2UgYXJndW1lbnRcIik7aWYoIWUpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLG89QXJyYXkobj4yP24tMjowKSxpPTI7aTxuO2krKylvW2ktMl09YXJndW1lbnRzW2ldO3IuYXBwbHkodm9pZCAwLFt0XS5jb25jYXQobykpfX19ZS5leHBvcnRzPW59KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49e307XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmT2JqZWN0LmZyZWV6ZShuKSxlLmV4cG9ydHM9bn0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1cIlNFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEXCI7ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlLHQsbil7dGhpcy5wcm9wcz1lLHRoaXMuY29udGV4dD10LHRoaXMucmVmcz1sLHRoaXMudXBkYXRlcj1ufHxjfWZ1bmN0aW9uIG8oZSx0LG4pe3RoaXMucHJvcHM9ZSx0aGlzLmNvbnRleHQ9dCx0aGlzLnJlZnM9bCx0aGlzLnVwZGF0ZXI9bnx8Y31mdW5jdGlvbiBpKCl7fXZhciBhPW4oNSksdT1uKDYpLGM9bigxNykscz1uKDgpLGw9bigxMikscD1uKDIpLGY9bigxMSk7aWYoci5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fSxyLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihlLG4pe1wib2JqZWN0XCIhPXR5cGVvZiBlJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT1lP1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/cCghMSxcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTphKFwiODVcIik6dm9pZCAwLHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxlKSxuJiZ0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsbixcInNldFN0YXRlXCIpfSxyLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihlKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMpLGUmJnRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcyxlLFwiZm9yY2VVcGRhdGVcIil9LFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3ZhciBkPXtpc01vdW50ZWQ6W1wiaXNNb3VudGVkXCIsXCJJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiBjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy5cIl0scmVwbGFjZVN0YXRlOltcInJlcGxhY2VTdGF0ZVwiLFwiUmVmYWN0b3IgeW91ciBjb2RlIHRvIHVzZSBzZXRTdGF0ZSBpbnN0ZWFkIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS5cIl19LHk9ZnVuY3Rpb24oZSx0KXtzJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoci5wcm90b3R5cGUsZSx7Z2V0OmZ1bmN0aW9uKCl7ZighMSxcIiVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzXCIsdFswXSx0WzFdKX19KX07Zm9yKHZhciB2IGluIGQpZC5oYXNPd25Qcm9wZXJ0eSh2KSYmeSh2LGRbdl0pfWkucHJvdG90eXBlPXIucHJvdG90eXBlLG8ucHJvdG90eXBlPW5ldyBpLG8ucHJvdG90eXBlLmNvbnN0cnVjdG9yPW8sdShvLnByb3RvdHlwZSxyLnByb3RvdHlwZSksby5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITAsZS5leHBvcnRzPXtDb21wb25lbnQ6cixQdXJlQ29tcG9uZW50Om99fSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvciYmU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIil8fDYwMTAzO2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoKXtpZihzLmN1cnJlbnQpe3ZhciBlPXMuY3VycmVudC5nZXROYW1lKCk7aWYoZSlyZXR1cm5cIiBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgXCIrZStcImAuXCJ9cmV0dXJuXCJcIn1mdW5jdGlvbiBvKGUpe2lmKG51bGwhPT1lJiZ2b2lkIDAhPT1lJiZ2b2lkIDAhPT1lLl9fc291cmNlKXt2YXIgdD1lLl9fc291cmNlLG49dC5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpLHI9dC5saW5lTnVtYmVyO3JldHVyblwiIENoZWNrIHlvdXIgY29kZSBhdCBcIituK1wiOlwiK3IrXCIuXCJ9cmV0dXJuXCJcIn1mdW5jdGlvbiBpKGUpe3ZhciB0PXIoKTtpZighdCl7dmFyIG49XCJzdHJpbmdcIj09dHlwZW9mIGU/ZTplLmRpc3BsYXlOYW1lfHxlLm5hbWU7biYmKHQ9XCIgQ2hlY2sgdGhlIHRvcC1sZXZlbCByZW5kZXIgY2FsbCB1c2luZyA8XCIrbitcIj4uXCIpfXJldHVybiB0fWZ1bmN0aW9uIGEoZSxuKXtpZihlLl9zdG9yZSYmIWUuX3N0b3JlLnZhbGlkYXRlZCYmbnVsbD09ZS5rZXkpe2UuX3N0b3JlLnZhbGlkYXRlZD0hMDt2YXIgcj1oLnVuaXF1ZUtleXx8KGgudW5pcXVlS2V5PXt9KSxvPWkobik7aWYoIXJbb10pe3Jbb109ITA7dmFyIGE9XCJcIjtlJiZlLl9vd25lciYmZS5fb3duZXIhPT1zLmN1cnJlbnQmJihhPVwiIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tIFwiK2UuX293bmVyLmdldE5hbWUoKStcIi5cIiksXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj92KCExLCdFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4lcyVzIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4lcycsbyxhLGwuZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0oZSkpOnZvaWQgMH19fWZ1bmN0aW9uIHUoZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3AuaXNWYWxpZEVsZW1lbnQocikmJmEocix0KX1lbHNlIGlmKHAuaXNWYWxpZEVsZW1lbnQoZSkpZS5fc3RvcmUmJihlLl9zdG9yZS52YWxpZGF0ZWQ9ITApO2Vsc2UgaWYoZSl7dmFyIG89eShlKTtpZihvJiZvIT09ZS5lbnRyaWVzKWZvcih2YXIgaSx1PW8uY2FsbChlKTshKGk9dS5uZXh0KCkpLmRvbmU7KXAuaXNWYWxpZEVsZW1lbnQoaS52YWx1ZSkmJmEoaS52YWx1ZSx0KX19ZnVuY3Rpb24gYyhlKXt2YXIgbj1lLnR5cGU7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygbil7dmFyIHI9bi5kaXNwbGF5TmFtZXx8bi5uYW1lO24ucHJvcFR5cGVzJiZmKG4ucHJvcFR5cGVzLGUucHJvcHMsXCJwcm9wXCIscixlLG51bGwpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4uZ2V0RGVmYXVsdFByb3BzJiYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj92KG4uZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLFwiZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzIGRlZmluaXRpb25zLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgYGRlZmF1bHRQcm9wc2AgaW5zdGVhZC5cIik6dm9pZCAwKX19dmFyIHM9big3KSxsPW4oMTApLHA9big0KSxmPW4oMzIpLGQ9big4KSx5PW4oMTgpLHY9bigzKSxtPW4oMTEpLGg9e30sZz17Y3JlYXRlRWxlbWVudDpmdW5jdGlvbihlLG4saSl7dmFyIGE9XCJzdHJpbmdcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGU7aWYoIWEmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJlwic3RyaW5nXCIhPXR5cGVvZiBlKXt2YXIgcz1cIlwiOyh2b2lkIDA9PT1lfHxcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJjA9PT1PYmplY3Qua2V5cyhlKS5sZW5ndGgpJiYocys9XCIgWW91IGxpa2VseSBmb3Jnb3QgdG8gZXhwb3J0IHlvdXIgY29tcG9uZW50IGZyb20gdGhlIGZpbGUgaXQncyBkZWZpbmVkIGluLlwiKTt2YXIgZj1vKG4pO3MrPWY/ZjpyKCkscys9bC5nZXRDdXJyZW50U3RhY2tBZGRlbmR1bSgpO3ZhciBkPW51bGwhPT1uJiZ2b2lkIDAhPT1uJiZ2b2lkIDAhPT1uLl9fc291cmNlP24uX19zb3VyY2U6bnVsbDtsLnB1c2hOb25TdGFuZGFyZFdhcm5pbmdTdGFjayghMCxkKSxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP3YoITEsXCJSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIGlzIGludmFsaWQgLS0gZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciBidWlsdC1pbiBjb21wb25lbnRzKSBvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzXCIsbnVsbD09ZT9lOnR5cGVvZiBlLHMpOnZvaWQgMCxsLnBvcE5vblN0YW5kYXJkV2FybmluZ1N0YWNrKCl9dmFyIHk9cC5jcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihudWxsPT15KXJldHVybiB5O2lmKGEpZm9yKHZhciBtPTI7bTxhcmd1bWVudHMubGVuZ3RoO20rKyl1KGFyZ3VtZW50c1ttXSxlKTtyZXR1cm4gYyh5KSx5fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGUpe3ZhciBuPWcuY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsZSk7cmV0dXJuIG4udHlwZT1lLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJmQmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwidHlwZVwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBtKCExLFwiRmFjdG9yeS50eXBlIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB0aGUgY2xhc3MgZGlyZWN0bHkgYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3JlYXRlRmFjdG9yeS5cIiksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ0eXBlXCIse3ZhbHVlOmV9KSxlfX0pLG59LGNsb25lRWxlbWVudDpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPXAuY2xvbmVFbGVtZW50LmFwcGx5KHRoaXMsYXJndW1lbnRzKSxvPTI7bzxhcmd1bWVudHMubGVuZ3RoO28rKyl1KGFyZ3VtZW50c1tvXSxyLnR5cGUpO3JldHVybiBjKHIpLHJ9fTtlLmV4cG9ydHM9Z30pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUsbil7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7dmFyIHI9ZS5jb25zdHJ1Y3RvcjtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP28oITEsXCIlcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIG9yIG1vdW50aW5nIGNvbXBvbmVudC4gVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiBUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC5cIixuLG4sciYmKHIuZGlzcGxheU5hbWV8fHIubmFtZSl8fFwiUmVhY3RDbGFzc1wiKTp2b2lkIDB9fXZhciBvPW4oMyksaT17aXNNb3VudGVkOmZ1bmN0aW9uKGUpe3JldHVybiExfSxlbnF1ZXVlQ2FsbGJhY2s6ZnVuY3Rpb24oZSx0KXt9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihlKXtyKGUsXCJmb3JjZVVwZGF0ZVwiKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihlLHQpe3IoZSxcInJlcGxhY2VTdGF0ZVwiKX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGUsdCl7cihlLFwic2V0U3RhdGVcIil9fTtlLmV4cG9ydHM9aX0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3ZhciB0PWUmJihyJiZlW3JdfHxlW29dKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiB0fXZhciByPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLG89XCJAQGl0ZXJhdG9yXCI7ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZX1mdW5jdGlvbiBvKGUsbixvKXtmdW5jdGlvbiBwKGUsbixyKXtmb3IodmFyIG8gaW4gbiluLmhhc093blByb3BlcnR5KG8pJiZcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZjKFwiZnVuY3Rpb25cIj09dHlwZW9mIG5bb10sXCIlczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy5cIixlLmRpc3BsYXlOYW1lfHxcIlJlYWN0Q2xhc3NcIixzW3JdLG8pfWZ1bmN0aW9uIGYoZSx0KXt2YXIgbj1fLmhhc093blByb3BlcnR5KHQpP19bdF06bnVsbDt4Lmhhc093blByb3BlcnR5KHQpJiZ1KFwiT1ZFUlJJREVfQkFTRVwiPT09bixcIlJlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBvdmVycmlkZSBgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyBkbyBub3Qgb3ZlcmxhcCB3aXRoIFJlYWN0IG1ldGhvZHMuXCIsdCksZSYmdShcIkRFRklORV9NQU5ZXCI9PT1ufHxcIkRFRklORV9NQU5ZX01FUkdFRFwiPT09bixcIlJlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlIHRvIGEgbWl4aW4uXCIsdCl9ZnVuY3Rpb24gZChlLHIpe2lmKHIpe3UoXCJmdW5jdGlvblwiIT10eXBlb2YgcixcIlJlYWN0Q2xhc3M6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGNvbXBvbmVudCBjbGFzcyBvciBmdW5jdGlvbiBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LlwiKSx1KCFuKHIpLFwiUmVhY3RDbGFzczogWW91J3JlIGF0dGVtcHRpbmcgdG8gdXNlIGEgY29tcG9uZW50IGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgcmVndWxhciBvYmplY3QuXCIpO3ZhciBvPWUucHJvdG90eXBlLGk9by5fX3JlYWN0QXV0b0JpbmRQYWlycztyLmhhc093blByb3BlcnR5KGwpJiZPLm1peGlucyhlLHIubWl4aW5zKTtmb3IodmFyIGEgaW4gcilpZihyLmhhc093blByb3BlcnR5KGEpJiZhIT09bCl7dmFyIHM9clthXSxwPW8uaGFzT3duUHJvcGVydHkoYSk7aWYoZihwLGEpLE8uaGFzT3duUHJvcGVydHkoYSkpT1thXShlLHMpO2Vsc2V7dmFyIGQ9Xy5oYXNPd25Qcm9wZXJ0eShhKSx5PVwiZnVuY3Rpb25cIj09dHlwZW9mIHMsdj15JiYhZCYmIXAmJnIuYXV0b2JpbmQhPT0hMTtpZih2KWkucHVzaChhLHMpLG9bYV09cztlbHNlIGlmKHApe3ZhciBnPV9bYV07dShkJiYoXCJERUZJTkVfTUFOWV9NRVJHRURcIj09PWd8fFwiREVGSU5FX01BTllcIj09PWcpLFwiUmVhY3RDbGFzczogVW5leHBlY3RlZCBzcGVjIHBvbGljeSAlcyBmb3Iga2V5ICVzIHdoZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy5cIixnLGEpLFwiREVGSU5FX01BTllfTUVSR0VEXCI9PT1nP29bYV09bShvW2FdLHMpOlwiREVGSU5FX01BTllcIj09PWcmJihvW2FdPWgob1thXSxzKSl9ZWxzZSBvW2FdPXMsXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmXCJmdW5jdGlvblwiPT10eXBlb2YgcyYmci5kaXNwbGF5TmFtZSYmKG9bYV0uZGlzcGxheU5hbWU9ci5kaXNwbGF5TmFtZStcIl9cIithKX19fWVsc2UgaWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7dmFyIGI9dHlwZW9mIHIsRT1cIm9iamVjdFwiPT09YiYmbnVsbCE9PXI7XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmYyhFLFwiJXM6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIGluY2x1ZGUgYSBtaXhpbiB0aGF0IGlzIGVpdGhlciBudWxsIG9yIG5vdCBhbiBvYmplY3QuIENoZWNrIHRoZSBtaXhpbnMgaW5jbHVkZWQgYnkgdGhlIGNvbXBvbmVudCwgYXMgd2VsbCBhcyBhbnkgbWl4aW5zIHRoZXkgaW5jbHVkZSB0aGVtc2VsdmVzLiBFeHBlY3RlZCBvYmplY3QgYnV0IGdvdCAlcy5cIixlLmRpc3BsYXlOYW1lfHxcIlJlYWN0Q2xhc3NcIixudWxsPT09cj9udWxsOmIpfX1mdW5jdGlvbiB5KGUsdCl7aWYodClmb3IodmFyIG4gaW4gdCl7dmFyIHI9dFtuXTtpZih0Lmhhc093blByb3BlcnR5KG4pKXt2YXIgbz1uIGluIE87dSghbywnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkIHByb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBpbnN0ZWFkOyBpdCB3aWxsIHN0aWxsIGJlIGFjY2Vzc2libGUgb24gdGhlIGNvbnN0cnVjdG9yLicsbik7dmFyIGk9biBpbiBlO3UoIWksXCJSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lIGAlc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSB0byBhIG1peGluLlwiLG4pLGVbbl09cn19fWZ1bmN0aW9uIHYoZSx0KXt1KGUmJnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZcIm9iamVjdFwiPT10eXBlb2YgdCxcIm1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLlwiKTtmb3IodmFyIG4gaW4gdCl0Lmhhc093blByb3BlcnR5KG4pJiYodSh2b2lkIDA9PT1lW25dLFwibWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cygpOiBUcmllZCB0byBtZXJnZSB0d28gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIGtleTogYCVzYC4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gZ2V0SW5pdGlhbFN0YXRlKCkgb3IgZ2V0RGVmYXVsdFByb3BzKCkgbWV0aG9kcyByZXR1cm5pbmcgb2JqZWN0cyB3aXRoIGNsYXNoaW5nIGtleXMuXCIsbiksZVtuXT10W25dKTtyZXR1cm4gZX1mdW5jdGlvbiBtKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49ZS5hcHBseSh0aGlzLGFyZ3VtZW50cykscj10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihudWxsPT1uKXJldHVybiByO2lmKG51bGw9PXIpcmV0dXJuIG47dmFyIG89e307cmV0dXJuIHYobyxuKSx2KG8sciksb319ZnVuY3Rpb24gaChlLHQpe3JldHVybiBmdW5jdGlvbigpe2UuYXBwbHkodGhpcyxhcmd1bWVudHMpLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1mdW5jdGlvbiBnKGUsbil7dmFyIHI9bi5iaW5kKGUpO2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3IuX19yZWFjdEJvdW5kQ29udGV4dD1lLHIuX19yZWFjdEJvdW5kTWV0aG9kPW4sci5fX3JlYWN0Qm91bmRBcmd1bWVudHM9bnVsbDt2YXIgbz1lLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lLGk9ci5iaW5kO3IuYmluZD1mdW5jdGlvbihhKXtmb3IodmFyIHU9YXJndW1lbnRzLmxlbmd0aCxzPUFycmF5KHU+MT91LTE6MCksbD0xO2w8dTtsKyspc1tsLTFdPWFyZ3VtZW50c1tsXTtpZihhIT09ZSYmbnVsbCE9PWEpXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmYyghMSxcImJpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlIGNvbXBvbmVudCBpbnN0YW5jZS4gU2VlICVzXCIsbyk7ZWxzZSBpZighcy5sZW5ndGgpcmV0dXJuXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmYyghMSxcImJpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiBSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSB3YXksIHNvIHlvdSBjYW4gc2FmZWx5IHJlbW92ZSB0aGlzIGNhbGwuIFNlZSAlc1wiLG8pLHI7dmFyIHA9aS5hcHBseShyLGFyZ3VtZW50cyk7cmV0dXJuIHAuX19yZWFjdEJvdW5kQ29udGV4dD1lLHAuX19yZWFjdEJvdW5kTWV0aG9kPW4scC5fX3JlYWN0Qm91bmRBcmd1bWVudHM9cyxwfX1yZXR1cm4gcn1mdW5jdGlvbiBiKGUpe2Zvcih2YXIgdD1lLl9fcmVhY3RBdXRvQmluZFBhaXJzLG49MDtuPHQubGVuZ3RoO24rPTIpe3ZhciByPXRbbl0sbz10W24rMV07ZVtyXT1nKGUsbyl9fWZ1bmN0aW9uIEUoZSl7dmFyIG49cihmdW5jdGlvbihlLHIsaSl7XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmYyh0aGlzIGluc3RhbmNlb2YgbixcIlNvbWV0aGluZyBpcyBjYWxsaW5nIGEgUmVhY3QgY29tcG9uZW50IGRpcmVjdGx5LiBVc2UgYSBmYWN0b3J5IG9yIEpTWCBpbnN0ZWFkLiBTZWU6IGh0dHBzOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeVwiKSx0aGlzLl9fcmVhY3RBdXRvQmluZFBhaXJzLmxlbmd0aCYmYih0aGlzKSx0aGlzLnByb3BzPWUsdGhpcy5jb250ZXh0PXIsdGhpcy5yZWZzPWEsdGhpcy51cGRhdGVyPWl8fG8sdGhpcy5zdGF0ZT1udWxsO3ZhciBzPXRoaXMuZ2V0SW5pdGlhbFN0YXRlP3RoaXMuZ2V0SW5pdGlhbFN0YXRlKCk6bnVsbDtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZ2b2lkIDA9PT1zJiZ0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb24mJihzPW51bGwpLHUoXCJvYmplY3RcIj09dHlwZW9mIHMmJiFBcnJheS5pc0FycmF5KHMpLFwiJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsXCIsbi5kaXNwbGF5TmFtZXx8XCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFwiKSx0aGlzLnN0YXRlPXN9KTtuLnByb3RvdHlwZT1uZXcgUCxuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1uLG4ucHJvdG90eXBlLl9fcmVhY3RBdXRvQmluZFBhaXJzPVtdLE4uZm9yRWFjaChkLmJpbmQobnVsbCxuKSksZChuLEQpLGQobixlKSxkKG4sdyksbi5nZXREZWZhdWx0UHJvcHMmJihuLmRlZmF1bHRQcm9wcz1uLmdldERlZmF1bHRQcm9wcygpKSxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiYobi5nZXREZWZhdWx0UHJvcHMmJihuLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZD17fSksbi5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlJiYobi5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlLmlzUmVhY3RDbGFzc0FwcHJvdmVkPXt9KSksdShuLnByb3RvdHlwZS5yZW5kZXIsXCJjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLlwiKSxcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiYoYyghbi5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLFwiJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCBjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyBUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuXCIsZS5kaXNwbGF5TmFtZXx8XCJBIGNvbXBvbmVudFwiKSxjKCFuLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzLFwiJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCBjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/XCIsZS5kaXNwbGF5TmFtZXx8XCJBIGNvbXBvbmVudFwiKSk7Zm9yKHZhciBpIGluIF8pbi5wcm90b3R5cGVbaV18fChuLnByb3RvdHlwZVtpXT1udWxsKTtyZXR1cm4gbn12YXIgTj1bXSxfPXttaXhpbnM6XCJERUZJTkVfTUFOWVwiLHN0YXRpY3M6XCJERUZJTkVfTUFOWVwiLHByb3BUeXBlczpcIkRFRklORV9NQU5ZXCIsY29udGV4dFR5cGVzOlwiREVGSU5FX01BTllcIixjaGlsZENvbnRleHRUeXBlczpcIkRFRklORV9NQU5ZXCIsZ2V0RGVmYXVsdFByb3BzOlwiREVGSU5FX01BTllfTUVSR0VEXCIsZ2V0SW5pdGlhbFN0YXRlOlwiREVGSU5FX01BTllfTUVSR0VEXCIsZ2V0Q2hpbGRDb250ZXh0OlwiREVGSU5FX01BTllfTUVSR0VEXCIscmVuZGVyOlwiREVGSU5FX09OQ0VcIixjb21wb25lbnRXaWxsTW91bnQ6XCJERUZJTkVfTUFOWVwiLGNvbXBvbmVudERpZE1vdW50OlwiREVGSU5FX01BTllcIixjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOlwiREVGSU5FX01BTllcIixzaG91bGRDb21wb25lbnRVcGRhdGU6XCJERUZJTkVfT05DRVwiLGNvbXBvbmVudFdpbGxVcGRhdGU6XCJERUZJTkVfTUFOWVwiLGNvbXBvbmVudERpZFVwZGF0ZTpcIkRFRklORV9NQU5ZXCIsY29tcG9uZW50V2lsbFVubW91bnQ6XCJERUZJTkVfTUFOWVwiLHVwZGF0ZUNvbXBvbmVudDpcIk9WRVJSSURFX0JBU0VcIn0sTz17ZGlzcGxheU5hbWU6ZnVuY3Rpb24oZSx0KXtlLmRpc3BsYXlOYW1lPXR9LG1peGluczpmdW5jdGlvbihlLHQpe2lmKHQpZm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspZChlLHRbbl0pfSxjaGlsZENvbnRleHRUeXBlczpmdW5jdGlvbihlLG4pe1wicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJnAoZSxuLFwiY2hpbGRDb250ZXh0XCIpLGUuY2hpbGRDb250ZXh0VHlwZXM9aSh7fSxlLmNoaWxkQ29udGV4dFR5cGVzLG4pfSxjb250ZXh0VHlwZXM6ZnVuY3Rpb24oZSxuKXtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZwKGUsbixcImNvbnRleHRcIiksZS5jb250ZXh0VHlwZXM9aSh7fSxlLmNvbnRleHRUeXBlcyxuKX0sZ2V0RGVmYXVsdFByb3BzOmZ1bmN0aW9uKGUsdCl7ZS5nZXREZWZhdWx0UHJvcHM/ZS5nZXREZWZhdWx0UHJvcHM9bShlLmdldERlZmF1bHRQcm9wcyx0KTplLmdldERlZmF1bHRQcm9wcz10fSxwcm9wVHlwZXM6ZnVuY3Rpb24oZSxuKXtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiZwKGUsbixcInByb3BcIiksZS5wcm9wVHlwZXM9aSh7fSxlLnByb3BUeXBlcyxuKX0sc3RhdGljczpmdW5jdGlvbihlLHQpe3koZSx0KX0sYXV0b2JpbmQ6ZnVuY3Rpb24oKXt9fSxEPXtjb21wb25lbnREaWRNb3VudDpmdW5jdGlvbigpe3RoaXMuX19pc01vdW50ZWQ9ITB9fSx3PXtjb21wb25lbnRXaWxsVW5tb3VudDpmdW5jdGlvbigpe3RoaXMuX19pc01vdW50ZWQ9ITF9fSx4PXtyZXBsYWNlU3RhdGU6ZnVuY3Rpb24oZSx0KXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLGUsdCl9LGlzTW91bnRlZDpmdW5jdGlvbigpe3JldHVyblwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYmJihjKHRoaXMuX19kaWRXYXJuSXNNb3VudGVkLFwiJXM6IGlzTW91bnRlZCBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiBjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy5cIix0aGlzLmNvbnN0cnVjdG9yJiZ0aGlzLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lfHx0aGlzLm5hbWV8fFwiQ29tcG9uZW50XCIpLHRoaXMuX19kaWRXYXJuSXNNb3VudGVkPSEwKSwhIXRoaXMuX19pc01vdW50ZWR9fSxQPWZ1bmN0aW9uKCl7fTtyZXR1cm4gaShQLnByb3RvdHlwZSxlLnByb3RvdHlwZSx4KSxFfXZhciBpPW4oNiksYT1uKDEyKSx1PW4oMik7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil2YXIgYz1uKDMpO3ZhciBzLGw9XCJtaXhpbnNcIjtzPVwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/e3Byb3A6XCJwcm9wXCIsY29udGV4dDpcImNvbnRleHRcIixjaGlsZENvbnRleHQ6XCJjaGlsZCBjb250ZXh0XCJ9Ont9LGUuZXhwb3J0cz1vfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSxuLHIsYyxzKXtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WKWZvcih2YXIgbCBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkobCkpe3ZhciBwO3RyeXtvKFwiZnVuY3Rpb25cIj09dHlwZW9mIGVbbF0sXCIlczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy5cIixjfHxcIlJlYWN0IGNsYXNzXCIscixsKSxwPWVbbF0obixsLGMscixudWxsLGEpfWNhdGNoKGUpe3A9ZX1pZihpKCFwfHxwIGluc3RhbmNlb2YgRXJyb3IsXCIlczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciBmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCBzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuXCIsY3x8XCJSZWFjdCBjbGFzc1wiLHIsbCx0eXBlb2YgcCkscCBpbnN0YW5jZW9mIEVycm9yJiYhKHAubWVzc2FnZSBpbiB1KSl7dVtwLm1lc3NhZ2VdPSEwO3ZhciBmPXM/cygpOlwiXCI7aSghMSxcIkZhaWxlZCAlcyB0eXBlOiAlcyVzXCIscixwLm1lc3NhZ2UsbnVsbCE9Zj9mOlwiXCIpfX19aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil2YXIgbz1uKDIpLGk9bigzKSxhPW4oMTMpLHU9e307ZS5leHBvcnRzPXJ9KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDIyKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ITE7cmV0dXJuIHIoZSx0KX19LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9big5KSxvPW4oMiksaT1uKDMpLGE9bigxMyksdT1uKDIwKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSxuKXtmdW5jdGlvbiBjKGUpe3ZhciB0PWUmJihrJiZlW2tdfHxlW0ldKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiB0fWZ1bmN0aW9uIHMoZSx0KXtyZXR1cm4gZT09PXQ/MCE9PWV8fDEvZT09PTEvdDplIT09ZSYmdCE9PXR9ZnVuY3Rpb24gbChlKXt0aGlzLm1lc3NhZ2U9ZSx0aGlzLnN0YWNrPVwiXCJ9ZnVuY3Rpb24gcChlKXtmdW5jdGlvbiByKHIscyxwLGYsZCx5LHYpe2lmKGY9Znx8aix5PXl8fHAsdiE9PWEpaWYobilvKCExLFwiQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gVXNlIGBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKWAgdG8gY2FsbCB0aGVtLiBSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzXCIpO2Vsc2UgaWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUpe3ZhciBtPWYrXCI6XCIrcDshdVttXSYmYzwzJiYoaSghMSxcIllvdSBhcmUgbWFudWFsbHkgY2FsbGluZyBhIFJlYWN0LlByb3BUeXBlcyB2YWxpZGF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgYCVzYCBwcm9wIG9uIGAlc2AuIFRoaXMgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCB0aHJvdyBpbiB0aGUgc3RhbmRhbG9uZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gWW91IG1heSBiZSBzZWVpbmcgdGhpcyB3YXJuaW5nIGR1ZSB0byBhIHRoaXJkLXBhcnR5IFByb3BUeXBlcyBsaWJyYXJ5LiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWRvbnQtY2FsbC1wcm9wdHlwZXMgZm9yIGRldGFpbHMuXCIseSxmKSx1W21dPSEwLGMrKyl9cmV0dXJuIG51bGw9PXNbcF0/cj9uZXcgbChudWxsPT09c1twXT9cIlRoZSBcIitkK1wiIGBcIit5K1wiYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgXCIrKFwiaW4gYFwiK2YrXCJgLCBidXQgaXRzIHZhbHVlIGlzIGBudWxsYC5cIik6XCJUaGUgXCIrZCtcIiBgXCIreStcImAgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluIFwiKyhcImBcIitmK1wiYCwgYnV0IGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC5cIikpOm51bGw6ZShzLHAsZixkLHkpfWlmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpdmFyIHU9e30sYz0wO3ZhciBzPXIuYmluZChudWxsLCExKTtyZXR1cm4gcy5pc1JlcXVpcmVkPXIuYmluZChudWxsLCEwKSxzfWZ1bmN0aW9uIGYoZSl7ZnVuY3Rpb24gdCh0LG4scixvLGksYSl7dmFyIHU9dFtuXSxjPUQodSk7aWYoYyE9PWUpe3ZhciBzPXcodSk7cmV0dXJuIG5ldyBsKFwiSW52YWxpZCBcIitvK1wiIGBcIitpK1wiYCBvZiB0eXBlIFwiKyhcImBcIitzK1wiYCBzdXBwbGllZCB0byBgXCIrcitcImAsIGV4cGVjdGVkIFwiKSsoXCJgXCIrZStcImAuXCIpKX1yZXR1cm4gbnVsbH1yZXR1cm4gcCh0KX1mdW5jdGlvbiBkKCl7cmV0dXJuIHAoci50aGF0UmV0dXJuc051bGwpfWZ1bmN0aW9uIHkoZSl7ZnVuY3Rpb24gdCh0LG4scixvLGkpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpcmV0dXJuIG5ldyBsKFwiUHJvcGVydHkgYFwiK2krXCJgIG9mIGNvbXBvbmVudCBgXCIrcitcImAgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIGFycmF5T2YuXCIpO3ZhciB1PXRbbl07aWYoIUFycmF5LmlzQXJyYXkodSkpe3ZhciBjPUQodSk7cmV0dXJuIG5ldyBsKFwiSW52YWxpZCBcIitvK1wiIGBcIitpK1wiYCBvZiB0eXBlIFwiKyhcImBcIitjK1wiYCBzdXBwbGllZCB0byBgXCIrcitcImAsIGV4cGVjdGVkIGFuIGFycmF5LlwiKSl9Zm9yKHZhciBzPTA7czx1Lmxlbmd0aDtzKyspe3ZhciBwPWUodSxzLHIsbyxpK1wiW1wiK3MrXCJdXCIsYSk7aWYocCBpbnN0YW5jZW9mIEVycm9yKXJldHVybiBwfXJldHVybiBudWxsfXJldHVybiBwKHQpfWZ1bmN0aW9uIHYoKXtmdW5jdGlvbiB0KHQsbixyLG8saSl7dmFyIGE9dFtuXTtpZighZShhKSl7dmFyIHU9RChhKTtyZXR1cm4gbmV3IGwoXCJJbnZhbGlkIFwiK28rXCIgYFwiK2krXCJgIG9mIHR5cGUgXCIrKFwiYFwiK3UrXCJgIHN1cHBsaWVkIHRvIGBcIityK1wiYCwgZXhwZWN0ZWQgYSBzaW5nbGUgUmVhY3RFbGVtZW50LlwiKSl9cmV0dXJuIG51bGx9cmV0dXJuIHAodCl9ZnVuY3Rpb24gbShlKXtmdW5jdGlvbiB0KHQsbixyLG8saSl7aWYoISh0W25daW5zdGFuY2VvZiBlKSl7dmFyIGE9ZS5uYW1lfHxqLHU9UCh0W25dKTtyZXR1cm4gbmV3IGwoXCJJbnZhbGlkIFwiK28rXCIgYFwiK2krXCJgIG9mIHR5cGUgXCIrKFwiYFwiK3UrXCJgIHN1cHBsaWVkIHRvIGBcIityK1wiYCwgZXhwZWN0ZWQgXCIpKyhcImluc3RhbmNlIG9mIGBcIithK1wiYC5cIikpfXJldHVybiBudWxsfXJldHVybiBwKHQpfWZ1bmN0aW9uIGgoZSl7ZnVuY3Rpb24gbih0LG4scixvLGkpe2Zvcih2YXIgYT10W25dLHU9MDt1PGUubGVuZ3RoO3UrKylpZihzKGEsZVt1XSkpcmV0dXJuIG51bGw7dmFyIGM9SlNPTi5zdHJpbmdpZnkoZSk7cmV0dXJuIG5ldyBsKFwiSW52YWxpZCBcIitvK1wiIGBcIitpK1wiYCBvZiB2YWx1ZSBgXCIrYStcImAgXCIrKFwic3VwcGxpZWQgdG8gYFwiK3IrXCJgLCBleHBlY3RlZCBvbmUgb2YgXCIrYytcIi5cIikpfXJldHVybiBBcnJheS5pc0FycmF5KGUpP3Aobik6KFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/aSghMSxcIkludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LlwiKTp2b2lkIDAsci50aGF0UmV0dXJuc051bGwpfWZ1bmN0aW9uIGcoZSl7ZnVuY3Rpb24gdCh0LG4scixvLGkpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpcmV0dXJuIG5ldyBsKFwiUHJvcGVydHkgYFwiK2krXCJgIG9mIGNvbXBvbmVudCBgXCIrcitcImAgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIG9iamVjdE9mLlwiKTt2YXIgdT10W25dLGM9RCh1KTtpZihcIm9iamVjdFwiIT09YylyZXR1cm4gbmV3IGwoXCJJbnZhbGlkIFwiK28rXCIgYFwiK2krXCJgIG9mIHR5cGUgXCIrKFwiYFwiK2MrXCJgIHN1cHBsaWVkIHRvIGBcIityK1wiYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LlwiKSk7Zm9yKHZhciBzIGluIHUpaWYodS5oYXNPd25Qcm9wZXJ0eShzKSl7dmFyIHA9ZSh1LHMscixvLGkrXCIuXCIrcyxhKTtpZihwIGluc3RhbmNlb2YgRXJyb3IpcmV0dXJuIHB9cmV0dXJuIG51bGx9cmV0dXJuIHAodCl9ZnVuY3Rpb24gYihlKXtmdW5jdGlvbiBuKHQsbixyLG8saSl7Zm9yKHZhciB1PTA7dTxlLmxlbmd0aDt1Kyspe3ZhciBjPWVbdV07aWYobnVsbD09Yyh0LG4scixvLGksYSkpcmV0dXJuIG51bGx9cmV0dXJuIG5ldyBsKFwiSW52YWxpZCBcIitvK1wiIGBcIitpK1wiYCBzdXBwbGllZCB0byBcIisoXCJgXCIrcitcImAuXCIpKX1pZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2koITEsXCJJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuXCIpOnZvaWQgMCxyLnRoYXRSZXR1cm5zTnVsbDtmb3IodmFyIG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHU9ZVtvXTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB1KXJldHVybiBpKCExLFwiSW52YWxpZCBhcmd1bWVudCBzdXBwbGlkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgcmVjZWl2ZWQgJXMgYXQgaW5kZXggJXMuXCIseCh1KSxvKSxyLnRoYXRSZXR1cm5zTnVsbH1yZXR1cm4gcChuKX1mdW5jdGlvbiBFKCl7ZnVuY3Rpb24gZShlLHQsbixyLG8pe3JldHVybiBfKGVbdF0pP251bGw6bmV3IGwoXCJJbnZhbGlkIFwiK3IrXCIgYFwiK28rXCJgIHN1cHBsaWVkIHRvIFwiKyhcImBcIituK1wiYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuXCIpKX1yZXR1cm4gcChlKX1mdW5jdGlvbiBOKGUpe2Z1bmN0aW9uIHQodCxuLHIsbyxpKXt2YXIgdT10W25dLGM9RCh1KTtpZihcIm9iamVjdFwiIT09YylyZXR1cm4gbmV3IGwoXCJJbnZhbGlkIFwiK28rXCIgYFwiK2krXCJgIG9mIHR5cGUgYFwiK2MrXCJgIFwiKyhcInN1cHBsaWVkIHRvIGBcIityK1wiYCwgZXhwZWN0ZWQgYG9iamVjdGAuXCIpKTtmb3IodmFyIHMgaW4gZSl7dmFyIHA9ZVtzXTtpZihwKXt2YXIgZj1wKHUscyxyLG8saStcIi5cIitzLGEpO2lmKGYpcmV0dXJuIGZ9fXJldHVybiBudWxsfXJldHVybiBwKHQpfWZ1bmN0aW9uIF8odCl7c3dpdGNoKHR5cGVvZiB0KXtjYXNlXCJudW1iZXJcIjpjYXNlXCJzdHJpbmdcIjpjYXNlXCJ1bmRlZmluZWRcIjpyZXR1cm4hMDtjYXNlXCJib29sZWFuXCI6cmV0dXJuIXQ7Y2FzZVwib2JqZWN0XCI6aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gdC5ldmVyeShfKTtpZihudWxsPT09dHx8ZSh0KSlyZXR1cm4hMDt2YXIgbj1jKHQpO2lmKCFuKXJldHVybiExO3ZhciByLG89bi5jYWxsKHQpO2lmKG4hPT10LmVudHJpZXMpe2Zvcig7IShyPW8ubmV4dCgpKS5kb25lOylpZighXyhyLnZhbHVlKSlyZXR1cm4hMX1lbHNlIGZvcig7IShyPW8ubmV4dCgpKS5kb25lOyl7dmFyIGk9ci52YWx1ZTtpZihpJiYhXyhpWzFdKSlyZXR1cm4hMX1yZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBPKGUsdCl7cmV0dXJuXCJzeW1ib2xcIj09PWV8fChcIlN5bWJvbFwiPT09dFtcIkBAdG9TdHJpbmdUYWdcIl18fFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmdCBpbnN0YW5jZW9mIFN5bWJvbCl9ZnVuY3Rpb24gRChlKXt2YXIgdD10eXBlb2YgZTtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9cImFycmF5XCI6ZSBpbnN0YW5jZW9mIFJlZ0V4cD9cIm9iamVjdFwiOk8odCxlKT9cInN5bWJvbFwiOnR9ZnVuY3Rpb24gdyhlKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZXx8bnVsbD09PWUpcmV0dXJuXCJcIitlO3ZhciB0PUQoZSk7aWYoXCJvYmplY3RcIj09PXQpe2lmKGUgaW5zdGFuY2VvZiBEYXRlKXJldHVyblwiZGF0ZVwiO2lmKGUgaW5zdGFuY2VvZiBSZWdFeHApcmV0dXJuXCJyZWdleHBcIn1yZXR1cm4gdH1mdW5jdGlvbiB4KGUpe3ZhciB0PXcoZSk7c3dpdGNoKHQpe2Nhc2VcImFycmF5XCI6Y2FzZVwib2JqZWN0XCI6cmV0dXJuXCJhbiBcIit0O2Nhc2VcImJvb2xlYW5cIjpjYXNlXCJkYXRlXCI6Y2FzZVwicmVnZXhwXCI6cmV0dXJuXCJhIFwiK3Q7ZGVmYXVsdDpyZXR1cm4gdH19ZnVuY3Rpb24gUChlKXtyZXR1cm4gZS5jb25zdHJ1Y3RvciYmZS5jb25zdHJ1Y3Rvci5uYW1lP2UuY29uc3RydWN0b3IubmFtZTpqfXZhciBrPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLEk9XCJAQGl0ZXJhdG9yXCIsaj1cIjw8YW5vbnltb3VzPj5cIixSPXthcnJheTpmKFwiYXJyYXlcIiksYm9vbDpmKFwiYm9vbGVhblwiKSxmdW5jOmYoXCJmdW5jdGlvblwiKSxudW1iZXI6ZihcIm51bWJlclwiKSxvYmplY3Q6ZihcIm9iamVjdFwiKSxzdHJpbmc6ZihcInN0cmluZ1wiKSxzeW1ib2w6ZihcInN5bWJvbFwiKSxhbnk6ZCgpLGFycmF5T2Y6eSxlbGVtZW50OnYoKSxpbnN0YW5jZU9mOm0sbm9kZTpFKCksb2JqZWN0T2Y6ZyxvbmVPZjpoLG9uZU9mVHlwZTpiLHNoYXBlOk59O3JldHVybiBsLnByb3RvdHlwZT1FcnJvci5wcm90b3R5cGUsUi5jaGVja1Byb3BUeXBlcz11LFIuUHJvcFR5cGVzPVIsUn19KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXt2YXIgdD0vWz06XS9nLG49e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9LHI9KFwiXCIrZSkucmVwbGFjZSh0LGZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfSk7cmV0dXJuXCIkXCIrcn1mdW5jdGlvbiByKGUpe3ZhciB0PS8oPTB8PTIpL2csbj17XCI9MFwiOlwiPVwiLFwiPTJcIjpcIjpcIn0scj1cIi5cIj09PWVbMF0mJlwiJFwiPT09ZVsxXT9lLnN1YnN0cmluZygyKTplLnN1YnN0cmluZygxKTtyZXR1cm4oXCJcIityKS5yZXBsYWNlKHQsZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV19KX12YXIgbz17ZXNjYXBlOm4sdW5lc2NhcGU6cn07ZS5leHBvcnRzPW99LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9big1KSxvPW4oMiksaT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKHQuaW5zdGFuY2VQb29sLmxlbmd0aCl7dmFyIG49dC5pbnN0YW5jZVBvb2wucG9wKCk7cmV0dXJuIHQuY2FsbChuLGUpLG59cmV0dXJuIG5ldyB0KGUpfSxhPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZihuLmluc3RhbmNlUG9vbC5sZW5ndGgpe3ZhciByPW4uaW5zdGFuY2VQb29sLnBvcCgpO3JldHVybiBuLmNhbGwocixlLHQpLHJ9cmV0dXJuIG5ldyBuKGUsdCl9LHU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXM7aWYoci5pbnN0YW5jZVBvb2wubGVuZ3RoKXt2YXIgbz1yLmluc3RhbmNlUG9vbC5wb3AoKTtyZXR1cm4gci5jYWxsKG8sZSx0LG4pLG99cmV0dXJuIG5ldyByKGUsdCxuKX0sYz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz10aGlzO2lmKG8uaW5zdGFuY2VQb29sLmxlbmd0aCl7dmFyIGk9by5pbnN0YW5jZVBvb2wucG9wKCk7cmV0dXJuIG8uY2FsbChpLGUsdCxuLHIpLGl9cmV0dXJuIG5ldyBvKGUsdCxuLHIpfSxzPWZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7ZSBpbnN0YW5jZW9mIG4/dm9pZCAwOlwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/byghMSxcIlRyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuXCIpOnIoXCIyNVwiKSxlLmRlc3RydWN0b3IoKSxuLmluc3RhbmNlUG9vbC5sZW5ndGg8bi5wb29sU2l6ZSYmbi5pbnN0YW5jZVBvb2wucHVzaChlKX0sbD0xMCxwPWksZj1mdW5jdGlvbihlLHQpe3ZhciBuPWU7cmV0dXJuIG4uaW5zdGFuY2VQb29sPVtdLG4uZ2V0UG9vbGVkPXR8fHAsbi5wb29sU2l6ZXx8KG4ucG9vbFNpemU9bCksbi5yZWxlYXNlPXMsbn0sZD17YWRkUG9vbGluZ1RvOmYsb25lQXJndW1lbnRQb29sZXI6aSx0d29Bcmd1bWVudFBvb2xlcjphLHRocmVlQXJndW1lbnRQb29sZXI6dSxmb3VyQXJndW1lbnRQb29sZXI6Y307ZS5leHBvcnRzPWR9KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9big2KSxvPW4oMTQpLGk9bigyNiksYT1uKDI3KSx1PW4oNCksYz1uKDI5KSxzPW4oMzEpLGw9bigzMykscD1uKDM0KSxmPXUuY3JlYXRlRWxlbWVudCxkPXUuY3JlYXRlRmFjdG9yeSx5PXUuY2xvbmVFbGVtZW50O2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3ZhciB2PW4oMTEpLG09big4KSxoPW4oMTYpLGc9ITE7Zj1oLmNyZWF0ZUVsZW1lbnQsZD1oLmNyZWF0ZUZhY3RvcnkseT1oLmNsb25lRWxlbWVudH12YXIgYj1yLEU9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9O2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3ZhciBOPSExLF89ITE7Yj1mdW5jdGlvbigpe3JldHVybiB2KE4sXCJSZWFjdC5fX3NwcmVhZCBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuIFVzZSBPYmplY3QuYXNzaWduIGRpcmVjdGx5IG9yIGFub3RoZXIgaGVscGVyIGZ1bmN0aW9uIHdpdGggc2ltaWxhciBzZW1hbnRpY3MuIFlvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8geW91ciBjb21waWxlci4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtc3ByZWFkLWRlcHJlY2F0aW9uIGZvciBtb3JlIGRldGFpbHMuXCIpLE49ITAsci5hcHBseShudWxsLGFyZ3VtZW50cyl9LEU9ZnVuY3Rpb24oZSl7cmV0dXJuIHYoXyxcIlJlYWN0LmNyZWF0ZU1peGluIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZC4gSW4gUmVhY3QgdjE2LjAsIGl0IHdpbGwgYmUgcmVtb3ZlZC4gWW91IGNhbiB1c2UgdGhpcyBtaXhpbiBkaXJlY3RseSBpbnN0ZWFkLiBTZWUgaHR0cHM6Ly9mYi5tZS9jcmVhdGVtaXhpbi13YXMtbmV2ZXItaW1wbGVtZW50ZWQgZm9yIG1vcmUgaW5mby5cIiksXz0hMCxlfX12YXIgTz17Q2hpbGRyZW46e21hcDppLm1hcCxmb3JFYWNoOmkuZm9yRWFjaCxjb3VudDppLmNvdW50LHRvQXJyYXk6aS50b0FycmF5LG9ubHk6cH0sQ29tcG9uZW50Om8uQ29tcG9uZW50LFB1cmVDb21wb25lbnQ6by5QdXJlQ29tcG9uZW50LGNyZWF0ZUVsZW1lbnQ6ZixjbG9uZUVsZW1lbnQ6eSxpc1ZhbGlkRWxlbWVudDp1LmlzVmFsaWRFbGVtZW50LFByb3BUeXBlczpjLGNyZWF0ZUNsYXNzOmwsY3JlYXRlRmFjdG9yeTpkLGNyZWF0ZU1peGluOkUsRE9NOmEsdmVyc2lvbjpzLF9fc3ByZWFkOmJ9O2lmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlYpe3ZhciBEPSExO20mJihPYmplY3QuZGVmaW5lUHJvcGVydHkoTyxcIlByb3BUeXBlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdihnLFwiQWNjZXNzaW5nIFByb3BUeXBlcyB2aWEgdGhlIG1haW4gUmVhY3QgcGFja2FnZSBpcyBkZXByZWNhdGVkLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluICBSZWFjdCB2MTYuMC4gVXNlIHRoZSBsYXRlc3QgYXZhaWxhYmxlIHYxNS4qIHByb3AtdHlwZXMgcGFja2FnZSBmcm9tIG5wbSBpbnN0ZWFkLiBGb3IgaW5mbyBvbiB1c2FnZSwgY29tcGF0aWJpbGl0eSwgbWlncmF0aW9uIGFuZCBtb3JlLCBzZWUgaHR0cHM6Ly9mYi5tZS9wcm9wLXR5cGVzLWRvY3NcIiksZz0hMCxjfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLFwiY3JlYXRlQ2xhc3NcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHYoRCxcIkFjY2Vzc2luZyBjcmVhdGVDbGFzcyB2aWEgdGhlIG1haW4gUmVhY3QgcGFja2FnZSBpcyBkZXByZWNhdGVkLCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IHYxNi4wLiBVc2UgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzIGluc3RlYWQuIElmIHlvdSdyZSBub3QgeWV0IHJlYWR5IHRvIG1pZ3JhdGUsIGNyZWF0ZS1yZWFjdC1jbGFzcyB2MTUuKiBpcyBhdmFpbGFibGUgb24gbnBtIGFzIGEgdGVtcG9yYXJ5LCBkcm9wLWluIHJlcGxhY2VtZW50LiBGb3IgbW9yZSBpbmZvIHNlZSBodHRwczovL2ZiLm1lL3JlYWN0LWNyZWF0ZS1jbGFzc1wiKSxEPSEwLGx9fSkpLE8uRE9NPXt9O3ZhciB3PSExO09iamVjdC5rZXlzKGEpLmZvckVhY2goZnVuY3Rpb24oZSl7Ty5ET01bZV09ZnVuY3Rpb24oKXtyZXR1cm4gd3x8KHYoITEsXCJBY2Nlc3NpbmcgZmFjdG9yaWVzIGxpa2UgUmVhY3QuRE9NLiVzIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MTYuMCsuIFVzZSB0aGUgcmVhY3QtZG9tLWZhY3RvcmllcyBwYWNrYWdlIGluc3RlYWQuICBWZXJzaW9uIDEuMCBwcm92aWRlcyBhIGRyb3AtaW4gcmVwbGFjZW1lbnQuIEZvciBtb3JlIGluZm8sIHNlZSBodHRwczovL2ZiLm1lL3JlYWN0LWRvbS1mYWN0b3JpZXNcIixlKSx3PSEwKSxhW2VdLmFwcGx5KGEsYXJndW1lbnRzKX19KX1lLmV4cG9ydHM9T30pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuKFwiXCIrZSkucmVwbGFjZShFLFwiJCYvXCIpfWZ1bmN0aW9uIG8oZSx0KXt0aGlzLmZ1bmM9ZSx0aGlzLmNvbnRleHQ9dCx0aGlzLmNvdW50PTB9ZnVuY3Rpb24gaShlLHQsbil7dmFyIHI9ZS5mdW5jLG89ZS5jb250ZXh0O3IuY2FsbChvLHQsZS5jb3VudCsrKX1mdW5jdGlvbiBhKGUsdCxuKXtpZihudWxsPT1lKXJldHVybiBlO3ZhciByPW8uZ2V0UG9vbGVkKHQsbik7aChlLGksciksby5yZWxlYXNlKHIpfWZ1bmN0aW9uIHUoZSx0LG4scil7dGhpcy5yZXN1bHQ9ZSx0aGlzLmtleVByZWZpeD10LHRoaXMuZnVuYz1uLHRoaXMuY29udGV4dD1yLHRoaXMuY291bnQ9MH1mdW5jdGlvbiBjKGUsdCxuKXt2YXIgbz1lLnJlc3VsdCxpPWUua2V5UHJlZml4LGE9ZS5mdW5jLHU9ZS5jb250ZXh0LGM9YS5jYWxsKHUsdCxlLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYyk/cyhjLG8sbixtLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWMmJih2LmlzVmFsaWRFbGVtZW50KGMpJiYoYz12LmNsb25lQW5kUmVwbGFjZUtleShjLGkrKCFjLmtleXx8dCYmdC5rZXk9PT1jLmtleT9cIlwiOnIoYy5rZXkpK1wiL1wiKStuKSksby5wdXNoKGMpKX1mdW5jdGlvbiBzKGUsdCxuLG8saSl7dmFyIGE9XCJcIjtudWxsIT1uJiYoYT1yKG4pK1wiL1wiKTt2YXIgcz11LmdldFBvb2xlZCh0LGEsbyxpKTtoKGUsYyxzKSx1LnJlbGVhc2Uocyl9ZnVuY3Rpb24gbChlLHQsbil7aWYobnVsbD09ZSlyZXR1cm4gZTt2YXIgcj1bXTtyZXR1cm4gcyhlLHIsbnVsbCx0LG4pLHJ9ZnVuY3Rpb24gcChlLHQsbil7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZihlLHQpe3JldHVybiBoKGUscCxudWxsKX1mdW5jdGlvbiBkKGUpe3ZhciB0PVtdO3JldHVybiBzKGUsdCxudWxsLG0udGhhdFJldHVybnNBcmd1bWVudCksdH12YXIgeT1uKDI0KSx2PW4oNCksbT1uKDkpLGg9bigzNSksZz15LnR3b0FyZ3VtZW50UG9vbGVyLGI9eS5mb3VyQXJndW1lbnRQb29sZXIsRT0vXFwvKy9nO28ucHJvdG90eXBlLmRlc3RydWN0b3I9ZnVuY3Rpb24oKXt0aGlzLmZ1bmM9bnVsbCx0aGlzLmNvbnRleHQ9bnVsbCx0aGlzLmNvdW50PTB9LHkuYWRkUG9vbGluZ1RvKG8sZyksdS5wcm90b3R5cGUuZGVzdHJ1Y3Rvcj1mdW5jdGlvbigpe3RoaXMucmVzdWx0PW51bGwsdGhpcy5rZXlQcmVmaXg9bnVsbCx0aGlzLmZ1bmM9bnVsbCx0aGlzLmNvbnRleHQ9bnVsbCx0aGlzLmNvdW50PTB9LHkuYWRkUG9vbGluZ1RvKHUsYik7dmFyIE49e2ZvckVhY2g6YSxtYXA6bCxtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsOnMsY291bnQ6Zix0b0FycmF5OmR9O2UuZXhwb3J0cz1OfSxmdW5jdGlvbihlLHQsbil7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciByPW4oNCksbz1yLmNyZWF0ZUZhY3Rvcnk7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7XG52YXIgaT1uKDE2KTtvPWkuY3JlYXRlRmFjdG9yeX12YXIgYT17YTpvKFwiYVwiKSxhYmJyOm8oXCJhYmJyXCIpLGFkZHJlc3M6byhcImFkZHJlc3NcIiksYXJlYTpvKFwiYXJlYVwiKSxhcnRpY2xlOm8oXCJhcnRpY2xlXCIpLGFzaWRlOm8oXCJhc2lkZVwiKSxhdWRpbzpvKFwiYXVkaW9cIiksYjpvKFwiYlwiKSxiYXNlOm8oXCJiYXNlXCIpLGJkaTpvKFwiYmRpXCIpLGJkbzpvKFwiYmRvXCIpLGJpZzpvKFwiYmlnXCIpLGJsb2NrcXVvdGU6byhcImJsb2NrcXVvdGVcIiksYm9keTpvKFwiYm9keVwiKSxicjpvKFwiYnJcIiksYnV0dG9uOm8oXCJidXR0b25cIiksY2FudmFzOm8oXCJjYW52YXNcIiksY2FwdGlvbjpvKFwiY2FwdGlvblwiKSxjaXRlOm8oXCJjaXRlXCIpLGNvZGU6byhcImNvZGVcIiksY29sOm8oXCJjb2xcIiksY29sZ3JvdXA6byhcImNvbGdyb3VwXCIpLGRhdGE6byhcImRhdGFcIiksZGF0YWxpc3Q6byhcImRhdGFsaXN0XCIpLGRkOm8oXCJkZFwiKSxkZWw6byhcImRlbFwiKSxkZXRhaWxzOm8oXCJkZXRhaWxzXCIpLGRmbjpvKFwiZGZuXCIpLGRpYWxvZzpvKFwiZGlhbG9nXCIpLGRpdjpvKFwiZGl2XCIpLGRsOm8oXCJkbFwiKSxkdDpvKFwiZHRcIiksZW06byhcImVtXCIpLGVtYmVkOm8oXCJlbWJlZFwiKSxmaWVsZHNldDpvKFwiZmllbGRzZXRcIiksZmlnY2FwdGlvbjpvKFwiZmlnY2FwdGlvblwiKSxmaWd1cmU6byhcImZpZ3VyZVwiKSxmb290ZXI6byhcImZvb3RlclwiKSxmb3JtOm8oXCJmb3JtXCIpLGgxOm8oXCJoMVwiKSxoMjpvKFwiaDJcIiksaDM6byhcImgzXCIpLGg0Om8oXCJoNFwiKSxoNTpvKFwiaDVcIiksaDY6byhcImg2XCIpLGhlYWQ6byhcImhlYWRcIiksaGVhZGVyOm8oXCJoZWFkZXJcIiksaGdyb3VwOm8oXCJoZ3JvdXBcIiksaHI6byhcImhyXCIpLGh0bWw6byhcImh0bWxcIiksaTpvKFwiaVwiKSxpZnJhbWU6byhcImlmcmFtZVwiKSxpbWc6byhcImltZ1wiKSxpbnB1dDpvKFwiaW5wdXRcIiksaW5zOm8oXCJpbnNcIiksa2JkOm8oXCJrYmRcIiksa2V5Z2VuOm8oXCJrZXlnZW5cIiksbGFiZWw6byhcImxhYmVsXCIpLGxlZ2VuZDpvKFwibGVnZW5kXCIpLGxpOm8oXCJsaVwiKSxsaW5rOm8oXCJsaW5rXCIpLG1haW46byhcIm1haW5cIiksbWFwOm8oXCJtYXBcIiksbWFyazpvKFwibWFya1wiKSxtZW51Om8oXCJtZW51XCIpLG1lbnVpdGVtOm8oXCJtZW51aXRlbVwiKSxtZXRhOm8oXCJtZXRhXCIpLG1ldGVyOm8oXCJtZXRlclwiKSxuYXY6byhcIm5hdlwiKSxub3NjcmlwdDpvKFwibm9zY3JpcHRcIiksb2JqZWN0Om8oXCJvYmplY3RcIiksb2w6byhcIm9sXCIpLG9wdGdyb3VwOm8oXCJvcHRncm91cFwiKSxvcHRpb246byhcIm9wdGlvblwiKSxvdXRwdXQ6byhcIm91dHB1dFwiKSxwOm8oXCJwXCIpLHBhcmFtOm8oXCJwYXJhbVwiKSxwaWN0dXJlOm8oXCJwaWN0dXJlXCIpLHByZTpvKFwicHJlXCIpLHByb2dyZXNzOm8oXCJwcm9ncmVzc1wiKSxxOm8oXCJxXCIpLHJwOm8oXCJycFwiKSxydDpvKFwicnRcIikscnVieTpvKFwicnVieVwiKSxzOm8oXCJzXCIpLHNhbXA6byhcInNhbXBcIiksc2NyaXB0Om8oXCJzY3JpcHRcIiksc2VjdGlvbjpvKFwic2VjdGlvblwiKSxzZWxlY3Q6byhcInNlbGVjdFwiKSxzbWFsbDpvKFwic21hbGxcIiksc291cmNlOm8oXCJzb3VyY2VcIiksc3BhbjpvKFwic3BhblwiKSxzdHJvbmc6byhcInN0cm9uZ1wiKSxzdHlsZTpvKFwic3R5bGVcIiksc3ViOm8oXCJzdWJcIiksc3VtbWFyeTpvKFwic3VtbWFyeVwiKSxzdXA6byhcInN1cFwiKSx0YWJsZTpvKFwidGFibGVcIiksdGJvZHk6byhcInRib2R5XCIpLHRkOm8oXCJ0ZFwiKSx0ZXh0YXJlYTpvKFwidGV4dGFyZWFcIiksdGZvb3Q6byhcInRmb290XCIpLHRoOm8oXCJ0aFwiKSx0aGVhZDpvKFwidGhlYWRcIiksdGltZTpvKFwidGltZVwiKSx0aXRsZTpvKFwidGl0bGVcIiksdHI6byhcInRyXCIpLHRyYWNrOm8oXCJ0cmFja1wiKSx1Om8oXCJ1XCIpLHVsOm8oXCJ1bFwiKSx2YXI6byhcInZhclwiKSx2aWRlbzpvKFwidmlkZW9cIiksd2JyOm8oXCJ3YnJcIiksY2lyY2xlOm8oXCJjaXJjbGVcIiksY2xpcFBhdGg6byhcImNsaXBQYXRoXCIpLGRlZnM6byhcImRlZnNcIiksZWxsaXBzZTpvKFwiZWxsaXBzZVwiKSxnOm8oXCJnXCIpLGltYWdlOm8oXCJpbWFnZVwiKSxsaW5lOm8oXCJsaW5lXCIpLGxpbmVhckdyYWRpZW50Om8oXCJsaW5lYXJHcmFkaWVudFwiKSxtYXNrOm8oXCJtYXNrXCIpLHBhdGg6byhcInBhdGhcIikscGF0dGVybjpvKFwicGF0dGVyblwiKSxwb2x5Z29uOm8oXCJwb2x5Z29uXCIpLHBvbHlsaW5lOm8oXCJwb2x5bGluZVwiKSxyYWRpYWxHcmFkaWVudDpvKFwicmFkaWFsR3JhZGllbnRcIikscmVjdDpvKFwicmVjdFwiKSxzdG9wOm8oXCJzdG9wXCIpLHN2ZzpvKFwic3ZnXCIpLHRleHQ6byhcInRleHRcIiksdHNwYW46byhcInRzcGFuXCIpfTtlLmV4cG9ydHM9YX0pLmNhbGwodCxuKDEpKX0sZnVuY3Rpb24oZSx0LG4peyhmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj17fTtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiYobj17cHJvcDpcInByb3BcIixjb250ZXh0OlwiY29udGV4dFwiLGNoaWxkQ29udGV4dDpcImNoaWxkIGNvbnRleHRcIn0pLGUuZXhwb3J0cz1ufSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9big0KSxvPXIuaXNWYWxpZEVsZW1lbnQsaT1uKDIxKTtlLmV4cG9ydHM9aShvKX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjt2YXIgbj1cIlNFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEXCI7ZS5leHBvcnRzPW59LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPVwiMTUuNi4xXCJ9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlLHIscCxmLGQseSl7Zm9yKHZhciB2IGluIGUpaWYoZS5oYXNPd25Qcm9wZXJ0eSh2KSl7dmFyIG07dHJ5e1wiZnVuY3Rpb25cIiE9dHlwZW9mIGVbdl0/XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9jKCExLFwiJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSBSZWFjdC5Qcm9wVHlwZXMuXCIsZnx8XCJSZWFjdCBjbGFzc1wiLGFbcF0sdik6aShcIjg0XCIsZnx8XCJSZWFjdCBjbGFzc1wiLGFbcF0sdik6dm9pZCAwLG09ZVt2XShyLHYsZixwLG51bGwsdSl9Y2F0Y2goZSl7bT1lfWlmKFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/cyghbXx8bSBpbnN0YW5jZW9mIEVycm9yLFwiJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcyBgJXNgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuIFlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyIGNyZWF0b3IgKGFycmF5T2YsIGluc3RhbmNlT2YsIG9iamVjdE9mLCBvbmVPZiwgb25lT2ZUeXBlLCBhbmQgc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLlwiLGZ8fFwiUmVhY3QgY2xhc3NcIixhW3BdLHYsdHlwZW9mIG0pOnZvaWQgMCxtIGluc3RhbmNlb2YgRXJyb3ImJiEobS5tZXNzYWdlIGluIGwpKXtsW20ubWVzc2FnZV09ITA7dmFyIGg9XCJcIjtcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiYob3x8KG89bigxMCkpLG51bGwhPT15P2g9by5nZXRTdGFja0FkZGVuZHVtQnlJRCh5KTpudWxsIT09ZCYmKGg9by5nZXRDdXJyZW50U3RhY2tBZGRlbmR1bShkKSkpLFwicHJvZHVjdGlvblwiIT09dC5lbnYuTk9ERV9FTlY/cyghMSxcIkZhaWxlZCAlcyB0eXBlOiAlcyVzXCIscCxtLm1lc3NhZ2UsaCk6dm9pZCAwfX19dmFyIG8saT1uKDUpLGE9bigyOCksdT1uKDMwKSxjPW4oMikscz1uKDMpO1widW5kZWZpbmVkXCIhPXR5cGVvZiB0JiZ0LmVudiYmXCJ0ZXN0XCI9PT10LmVudi5OT0RFX0VOViYmKG89bigxMCkpO3ZhciBsPXt9O2UuZXhwb3J0cz1yfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigxNCksbz1yLkNvbXBvbmVudCxpPW4oNCksYT1pLmlzVmFsaWRFbGVtZW50LHU9bigxNyksYz1uKDE5KTtlLmV4cG9ydHM9YyhvLGEsdSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gaS5pc1ZhbGlkRWxlbWVudChlKT92b2lkIDA6XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9hKCExLFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpOm8oXCIxNDNcIiksZX12YXIgbz1uKDUpLGk9big0KSxhPW4oMik7ZS5leHBvcnRzPXJ9KS5jYWxsKHQsbigxKSl9LGZ1bmN0aW9uKGUsdCxuKXsoZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlLHQpe3JldHVybiBlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9ZS5rZXk/cC5lc2NhcGUoZS5rZXkpOnQudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIG8oZSxuLGksbSl7dmFyIGg9dHlwZW9mIGU7aWYoXCJ1bmRlZmluZWRcIiE9PWgmJlwiYm9vbGVhblwiIT09aHx8KGU9bnVsbCksbnVsbD09PWV8fFwic3RyaW5nXCI9PT1ofHxcIm51bWJlclwiPT09aHx8XCJvYmplY3RcIj09PWgmJmUuJCR0eXBlb2Y9PT1jKXJldHVybiBpKG0sZSxcIlwiPT09bj9kK3IoZSwwKTpuKSwxO3ZhciBnLGIsRT0wLE49XCJcIj09PW4/ZDpuK3k7aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIF89MDtfPGUubGVuZ3RoO18rKylnPWVbX10sYj1OK3IoZyxfKSxFKz1vKGcsYixpLG0pO2Vsc2V7dmFyIE89cyhlKTtpZihPKXt2YXIgRCx3PU8uY2FsbChlKTtpZihPIT09ZS5lbnRyaWVzKWZvcih2YXIgeD0wOyEoRD13Lm5leHQoKSkuZG9uZTspZz1ELnZhbHVlLGI9TityKGcseCsrKSxFKz1vKGcsYixpLG0pO2Vsc2V7aWYoXCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVil7dmFyIFA9XCJcIjtpZih1LmN1cnJlbnQpe3ZhciBrPXUuY3VycmVudC5nZXROYW1lKCk7ayYmKFA9XCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYFwiK2srXCJgLlwiKX1cInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WP2YodixcIlVzaW5nIE1hcHMgYXMgY2hpbGRyZW4gaXMgbm90IHlldCBmdWxseSBzdXBwb3J0ZWQuIEl0IGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWlnaHQgYmUgcmVtb3ZlZC4gQ29udmVydCBpdCB0byBhIHNlcXVlbmNlIC8gaXRlcmFibGUgb2Yga2V5ZWQgUmVhY3RFbGVtZW50cyBpbnN0ZWFkLiVzXCIsUCk6dm9pZCAwLHY9ITB9Zm9yKDshKEQ9dy5uZXh0KCkpLmRvbmU7KXt2YXIgST1ELnZhbHVlO0kmJihnPUlbMV0sYj1OK3AuZXNjYXBlKElbMF0pK3krcihnLDApLEUrPW8oZyxiLGksbSkpfX19ZWxzZSBpZihcIm9iamVjdFwiPT09aCl7dmFyIGo9XCJcIjtpZihcInByb2R1Y3Rpb25cIiE9PXQuZW52Lk5PREVfRU5WJiYoaj1cIiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgUmVhY3QgYWRkLW9ucy5cIixlLl9pc1JlYWN0RWxlbWVudCYmKGo9XCIgSXQgbG9va3MgbGlrZSB5b3UncmUgdXNpbmcgYW4gZWxlbWVudCBjcmVhdGVkIGJ5IGEgZGlmZmVyZW50IHZlcnNpb24gb2YgUmVhY3QuIE1ha2Ugc3VyZSB0byB1c2Ugb25seSBvbmUgY29weSBvZiBSZWFjdC5cIiksdS5jdXJyZW50KSl7dmFyIFI9dS5jdXJyZW50LmdldE5hbWUoKTtSJiYoais9XCIgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYFwiK1IrXCJgLlwiKX12YXIgUz1TdHJpbmcoZSk7XCJwcm9kdWN0aW9uXCIhPT10LmVudi5OT0RFX0VOVj9sKCExLFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXNcIixcIltvYmplY3QgT2JqZWN0XVwiPT09Uz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGUpLmpvaW4oXCIsIFwiKStcIn1cIjpTLGopOmEoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1TP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoZSkuam9pbihcIiwgXCIpK1wifVwiOlMsail9fXJldHVybiBFfWZ1bmN0aW9uIGkoZSx0LG4pe3JldHVybiBudWxsPT1lPzA6byhlLFwiXCIsdCxuKX12YXIgYT1uKDUpLHU9big3KSxjPW4oMTUpLHM9bigxOCksbD1uKDIpLHA9bigyMyksZj1uKDMpLGQ9XCIuXCIseT1cIjpcIix2PSExO2UuZXhwb3J0cz1pfSkuY2FsbCh0LG4oMSkpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPW4oMjUpfV0pfSk7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj02MDEwMyxjPTYwMTA2LGQ9NjAxMDcsZT02MDEwOCxmPTYwMTE0LGc9NjAxMDksaD02MDExMCxrPTYwMTEyLGw9NjAxMTMsbT02MDEyMCxuPTYwMTE1LHA9NjAxMTYscT02MDEyMSxyPTYwMTIyLHU9NjAxMTcsdj02MDEyOSx3PTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHg9U3ltYm9sLmZvcjtiPXgoXCJyZWFjdC5lbGVtZW50XCIpO2M9eChcInJlYWN0LnBvcnRhbFwiKTtkPXgoXCJyZWFjdC5mcmFnbWVudFwiKTtlPXgoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtmPXgoXCJyZWFjdC5wcm9maWxlclwiKTtnPXgoXCJyZWFjdC5wcm92aWRlclwiKTtoPXgoXCJyZWFjdC5jb250ZXh0XCIpO2s9eChcInJlYWN0LmZvcndhcmRfcmVmXCIpO2w9eChcInJlYWN0LnN1c3BlbnNlXCIpO209eChcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7bj14KFwicmVhY3QubWVtb1wiKTtwPXgoXCJyZWFjdC5sYXp5XCIpO3E9eChcInJlYWN0LmJsb2NrXCIpO3I9eChcInJlYWN0LnNlcnZlci5ibG9ja1wiKTt1PXgoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt2PXgoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO3c9eChcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG5mdW5jdGlvbiB5KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB0PWEuJCR0eXBlb2Y7c3dpdGNoKHQpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBsOmNhc2UgbTpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBoOmNhc2UgazpjYXNlIHA6Y2FzZSBuOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB0fX1jYXNlIGM6cmV0dXJuIHR9fX12YXIgej1nLEE9YixCPWssQz1kLEQ9cCxFPW4sRj1jLEc9ZixIPWUsST1sO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ejtleHBvcnRzLkVsZW1lbnQ9QTtleHBvcnRzLkZvcndhcmRSZWY9QjtleHBvcnRzLkZyYWdtZW50PUM7ZXhwb3J0cy5MYXp5PUQ7ZXhwb3J0cy5NZW1vPUU7ZXhwb3J0cy5Qb3J0YWw9RjtleHBvcnRzLlByb2ZpbGVyPUc7ZXhwb3J0cy5TdHJpY3RNb2RlPUg7XG5leHBvcnRzLlN1c3BlbnNlPUk7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1rfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXB9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bn07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1sfTtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT12fHxhPT09ZXx8YT09PWx8fGE9PT1tfHxhPT09d3x8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PXV8fGEuJCR0eXBlb2Y9PT1xfHxhWzBdPT09cik/ITA6ITF9O1xuZXhwb3J0cy50eXBlT2Y9eTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIik7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGc9NjAxMDM7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgaD1TeW1ib2wuZm9yO2c9aChcInJlYWN0LmVsZW1lbnRcIik7ZXhwb3J0cy5GcmFnbWVudD1oKFwicmVhY3QuZnJhZ21lbnRcIil9dmFyIG09Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsayl7dmFyIGIsZD17fSxlPW51bGwsbD1udWxsO3ZvaWQgMCE9PWsmJihlPVwiXCIrayk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYobD1hLnJlZik7Zm9yKGIgaW4gYSluLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6Zyx0eXBlOmMsa2V5OmUscmVmOmwscHJvcHM6ZCxfb3duZXI6bS5jdXJyZW50fX1leHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjIwLjJcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGs7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fVxuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHQ9bnVsbCx1PW51bGwsdz1mdW5jdGlvbigpe2lmKG51bGwhPT10KXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3QoITAsYSk7dD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodywwKSxiO319O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXQ/c2V0VGltZW91dChmLDAsYSk6KHQ9YSxzZXRUaW1lb3V0KHcsMCkpfTtnPWZ1bmN0aW9uKGEsYil7dT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSl9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07az1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB4PXdpbmRvdy5zZXRUaW1lb3V0LHk9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciB6PVxud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIHomJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpfXZhciBBPSExLEI9bnVsbCxDPS0xLEQ9NSxFPTA7ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1cbkV9O2s9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOkQ9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBGPW5ldyBNZXNzYWdlQ2hhbm5lbCxHPUYucG9ydDI7Ri5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZihudWxsIT09Qil7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtFPWErRDt0cnl7QighMCxhKT9HLnBvc3RNZXNzYWdlKG51bGwpOihBPSExLEI9bnVsbCl9Y2F0Y2goYil7dGhyb3cgRy5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBBPSExfTtmPWZ1bmN0aW9uKGEpe0I9YTtBfHwoQT0hMCxHLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0M9XG54KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt5KEMpO0M9LTF9fWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SShlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gSihhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5JKG4sYykpdm9pZCAwIT09ciYmMD5JKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5JKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBJKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBMPVtdLE09W10sTj0xLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEpe2Zvcih2YXIgYj1KKE0pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spSyhNKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKUsoTSksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxIKEwsYik7ZWxzZSBicmVhaztiPUooTSl9fWZ1bmN0aW9uIFUoYSl7Uz0hMTtUKGEpO2lmKCFSKWlmKG51bGwhPT1KKEwpKVI9ITAsZihWKTtlbHNle3ZhciBiPUooTSk7bnVsbCE9PWImJmcoVSxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBWKGEsYil7Uj0hMTtTJiYoUz0hMSxoKCkpO1E9ITA7dmFyIGM9UDt0cnl7VChiKTtmb3IoTz1KKEwpO251bGwhPT1PJiYoIShPLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCgpKTspe3ZhciBkPU8uY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe08uY2FsbGJhY2s9bnVsbDtQPU8ucHJpb3JpdHlMZXZlbDt2YXIgZT1kKE8uZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9PLmNhbGxiYWNrPWU6Tz09PUooTCkmJksoTCk7VChiKX1lbHNlIEsoTCk7Tz1KKEwpfWlmKG51bGwhPT1PKXZhciBtPSEwO2Vsc2V7dmFyIG49SihNKTtudWxsIT09biYmZyhVLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtPPW51bGwsUD1jLFE9ITF9fXZhciBXPWs7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZihWKSl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBKKEwpfTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVc7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDpOKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxIKE0sYSksbnVsbD09PUooTCkmJmE9PT1KKE0pJiYoUz9oKCk6Uz0hMCxnKFUsYy1kKSkpOihhLnNvcnRJbmRleD1lLEgoTCxhKSxSfHxRfHwoUj0hMCxmKFYpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fJy5zcGxpdCgnJylcbiAgLCBsZW5ndGggPSA2NFxuICAsIG1hcCA9IHt9XG4gICwgc2VlZCA9IDBcbiAgLCBpID0gMFxuICAsIHByZXY7XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShudW0pIHtcbiAgdmFyIGVuY29kZWQgPSAnJztcblxuICBkbyB7XG4gICAgZW5jb2RlZCA9IGFscGhhYmV0W251bSAlIGxlbmd0aF0gKyBlbmNvZGVkO1xuICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcbiAgfSB3aGlsZSAobnVtID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbnRlZ2VyIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVnZXIgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgdmFyIGRlY29kZWQgPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkO1xufVxuXG4vKipcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiB5ZWFzdCgpIHtcbiAgdmFyIG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XG5cbiAgaWYgKG5vdyAhPT0gcHJldikgcmV0dXJuIHNlZWQgPSAwLCBwcmV2ID0gbm93O1xuICByZXR1cm4gbm93ICsnLicrIGVuY29kZShzZWVkKyspO1xufVxuXG4vL1xuLy8gTWFwIGVhY2ggY2hhcmFjdGVyIHRvIGl0cyBpbmRleC5cbi8vXG5mb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBtYXBbYWxwaGFiZXRbaV1dID0gaTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgYHllYXN0YCwgYGVuY29kZWAgYW5kIGBkZWNvZGVgIGZ1bmN0aW9ucy5cbi8vXG55ZWFzdC5lbmNvZGUgPSBlbmNvZGU7XG55ZWFzdC5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cyA9IHllYXN0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FwcC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG52YXIgY29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3Rlbikge1xuICAgICAgdGhpcy51bmxpc3RlbigpO1xuICAgICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGhpc3RvcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaGlzdG9yeVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQxKSB7XG4gICAgICAhY29udGV4dCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUhpc3RvcnkoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChoaXN0b3J5Q29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247XG59XG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaC5wYXJhbXMgOiB7fTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlTWF0Y2gocGF0aCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBoaXN0b3J5Q29udGV4dCBhcyBfX0hpc3RvcnlDb250ZXh0LCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciByZXNvbHZlVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcbnZhciBub3JtYWxpemVUb0xvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBjcmVhdGVMb2NhdGlvbih0bywgbnVsbCwgbnVsbCwgY3VycmVudExvY2F0aW9uKSA6IHRvO1xufTtcblxudmFyIGZvcndhcmRSZWZTaGltID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxudmFyIExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIG5hdmlnYXRlID0gX3JlZi5uYXZpZ2F0ZSxcbiAgICAgIF9vbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImlubmVyUmVmXCIsIFwibmF2aWdhdGVcIiwgXCJvbkNsaWNrXCJdKTtcblxuICB2YXIgdGFyZ2V0ID0gcmVzdC50YXJnZXQ7XG5cbiAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoX29uQ2xpY2spIF9vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRocm93IGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICB9IGVsc2Uge1xuICAgIHByb3BzLnJlZiA9IGlubmVyUmVmO1xuICB9XG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQgKi9cblxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIGlzRHVwbGljYXRlTmF2aWdhdGlvbiA9IGNyZWF0ZVBhdGgoY29udGV4dC5sb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgobm9ybWFsaXplVG9Mb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSB8fCBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmUsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIHN0eWxlUHJvcCA9IF9yZWYuc3R5bGUsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXJpYS1jdXJyZW50XCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJjbGFzc05hbWVcIiwgXCJleGFjdFwiLCBcImlzQWN0aXZlXCIsIFwibG9jYXRpb25cIiwgXCJzZW5zaXRpdmVcIiwgXCJzdHJpY3RcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksIGN1cnJlbnRMb2NhdGlvbik7XG4gICAgdmFyIHBhdGggPSB0b0xvY2F0aW9uLnBhdGhuYW1lOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gICAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmUsXG4gICAgICBzdHJpY3Q6IHN0cmljdFxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3AgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGN1cnJlbnRMb2NhdGlvbikgOiBtYXRjaCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBjbGFzc05hbWVQcm9wKGlzQWN0aXZlKSA6IGNsYXNzTmFtZVByb3A7XG4gICAgdmFyIHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKGlzQWN0aXZlKSA6IHN0eWxlUHJvcDtcblxuICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgY2xhc3NOYW1lID0gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWUpO1xuICAgICAgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xuICB2YXIgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIiwgXCJmYWxzZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSksXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSlcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge30sXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICB2YXIgdW5zdWJzY3JpYmU7XG4gIHZhciBsaXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuXG4gIGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiBsaXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgbGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHVuc3Vic2NyaWJlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSA9IHBhcmVudFN1YiA/IHBhcmVudFN1Yi5hZGROZXN0ZWRTdWIoaGFuZGxlQ2hhbmdlV3JhcHBlcikgOiBzdG9yZS5zdWJzY3JpYmUoaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICBsaXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICB1bnN1YnNjcmliZSA9IHVuZGVmaW5lZDtcbiAgICAgIGxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH1cblxuICB2YXIgc3Vic2NyaXB0aW9uID0ge1xuICAgIGFkZE5lc3RlZFN1YjogYWRkTmVzdGVkU3ViLFxuICAgIG5vdGlmeU5lc3RlZFN1YnM6IG5vdGlmeU5lc3RlZFN1YnMsXG4gICAgaGFuZGxlQ2hhbmdlV3JhcHBlcjogaGFuZGxlQ2hhbmdlV3JhcHBlcixcbiAgICBpc1N1YnNjcmliZWQ6IGlzU3Vic2NyaWJlZCxcbiAgICB0cnlTdWJzY3JpYmU6IHRyeVN1YnNjcmliZSxcbiAgICB0cnlVbnN1YnNjcmliZTogdHJ5VW5zdWJzY3JpYmUsXG4gICAgZ2V0TGlzdGVuZXJzOiBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0Jztcbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcbiAqIGhvb2sgdGhhdCB5b3Ugc2hvdWxkIHVzdWFsbHkgbm90IG5lZWQgdG8gY2FsbCBkaXJlY3RseS5cbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xuICogICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQoKVxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cbiAqIH1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVkdXhDb250ZXh0KCkge1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChSZWFjdFJlZHV4Q29udGV4dCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbnRleHRWYWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+Jyk7XG4gIH1cblxuICByZXR1cm4gY29udGV4dFZhbHVlO1xufSIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0Jztcbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVN0b3JlKCkge1xuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZTtcblxuICAgIHJldHVybiBzdG9yZTtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUuXG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHJlZHV4IHN0b3JlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBFeGFtcGxlQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IHZhciB1c2VTdG9yZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVTdG9yZUhvb2soKTsiLCJpbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdG9yZSBhcyB1c2VEZWZhdWx0U3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vdXNlU3RvcmUnO1xuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlU3RvcmUgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZURpc3BhdGNoKCkge1xuICAgIHZhciBzdG9yZSA9IHVzZVN0b3JlKCk7XG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xuICB9O1xufVxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBgZGlzcGF0Y2hgIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHthbnl8ZnVuY3Rpb259IHJlZHV4IHN0b3JlJ3MgYGRpc3BhdGNoYCBmdW5jdGlvblxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAqICAgY29uc3QgaW5jcmVhc2VDb3VudGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnaW5jcmVhc2UtY291bnRlcicgfSksIFtdKVxuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZWFzZUNvdW50ZXJ9PkluY3JlYXNlIGNvdW50ZXI8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKVxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlRGlzcGF0Y2ggPSAvKiNfX1BVUkVfXyovY3JlYXRlRGlzcGF0Y2hIb29rKCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDb250ZXh0LCB1c2VEZWJ1Z1ZhbHVlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBzdG9yZVN0YXRlICE9PSBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlU3RhdGUpOyAvLyBlbnN1cmUgbGF0ZXN0IHNlbGVjdGVkIHN0YXRlIGlzIHJldXNlZCBzbyB0aGF0IGEgY3VzdG9tIGVxdWFsaXR5IGZ1bmN0aW9uIGNhbiByZXN1bHQgaW4gaWRlbnRpY2FsIHJlZmVyZW5jZXNcblxuICAgICAgaWYgKGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9PT0gdW5kZWZpbmVkIHx8ICFlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgc2VsZWN0ZWRTdGF0ZSA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyLm1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5cIjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50ID0gc3RvcmVTdGF0ZTtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTsgLy8gQXZvaWQgY2FsbGluZyBzZWxlY3RvciBtdWx0aXBsZSB0aW1lcyBpZiB0aGUgc3RvcmUncyBzdGF0ZSBoYXMgbm90IGNoYW5nZWRcblxuICAgICAgICBpZiAobmV3U3RvcmVTdGF0ZSA9PT0gbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9uZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChuZXdTdG9yZVN0YXRlKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihfbmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IF9uZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgICBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgPSBuZXdTdG9yZVN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59XG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlcXVhbGl0eUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhbiBlcXVhbGl0eSBmdW5jdGlvbiB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHZhciBzZWxlY3RlZFN0YXRlID0gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXG4gKlxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IHZhciB1c2VTZWxlY3RvciA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3Rvckhvb2soKTsiLCJleHBvcnQgKiBmcm9tICcuL2V4cG9ydHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJzsgLy8gRW5hYmxlIGJhdGNoZWQgdXBkYXRlcyBpbiBvdXIgc3Vic2NyaXB0aW9ucyBmb3IgdXNlXG4vLyB3aXRoIHN0YW5kYXJkIFJlYWN0IHJlbmRlcmVycyAoUmVhY3RET00sIFJlYWN0IE5hdGl2ZSlcblxuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgYmF0Y2ggfTsiLCIvL0FVVEhcbmV4cG9ydCBjb25zdCBhdXRoQ29uc3RhbnRzID0ge1xuICAgIFNJR05fSU46IFwiU0lHTl9JTlwiLFxuICAgIFNJR05fT1VUOiBcIlNJR05fT1VUXCIsXG4gICAgQ1JFQVRFX0FDQ09VTlQ6IFwiQ1JFQVRFX0FDQ09VTlRcIixcbiAgICBTRVRfVVNFUjogXCJTRVRfVVNFUlwiXG59O1xuXG4vLyBQT1BVUFxuZXhwb3J0IGNvbnN0IHBvcHVwQ29uc3RhbnRzID0ge1xuICAgIFNIT1dfQ1JFQVRFX1NUVURZX0dST1VQX1BPUFVQOiBcIlNIT1dfQ1JFQVRFX1NUVURZX0dST1VQX1BPUFVQXCIsXG4gICAgU0hPV19KT0lOX1NUVURZX0dST1VQX1BPUFVQOiBcIlNIT1dfSk9JTl9TVFVEWV9HUk9VUF9QT1BVUFwiLFxuICAgIFNIT1dfRURJVF9TVFVEWV9HUk9VUF9QT1BVUDogXCJTSE9XX0VESVRfU1RVRFlfR1JPVVBfUE9QVVBcIixcbiAgICBTSE9XX0NSRUFURV9NRUVUSU5HX1NUVURZX0dST1VQX1BPUFVQOiBcIlNIT1dfQ1JFQVRFX01FRVRJTkdfU1RVRFlfR1JPVVBfUE9QVVBcIixcbiAgICBTSE9XX0NSRUFURV9QT1NUX1NUVURZX0dST1VQX1BPUFVQOiBcIlNIT1dfQ1JFQVRFX1BPU1RfU1RVRFlfR1JPVVBfUE9QVVBcIixcbiAgICBTSE9XX1ZJRVdfUE9TVF9TVFVEWV9HUk9VUF9QT1BVUDogXCJTSE9XX1ZJRVdfUE9TVF9TVFVEWV9HUk9VUF9QT1BVUFwiLFxuICAgIFNIT1dfVklFV19NRUVUSU5HU19TVFVEWV9HUk9VUF9QT1BVUDogXCJTSE9XX1ZJRVdfTUVFVElOR1NfU1RVRFlfR1JPVVBfUE9QVVBcIixcbiAgICBTSE9XX1ZJRVdfTUVNQkVSX1BPUFVQOiBcIlNIT1dfVklFV19NRU1CRVJfUE9QVVBcIixcbiAgICBTSE9XX0lOUFVUX1BPUFVQOiBcIlNIT1dfSU5QVVRfUE9QVVBcIixcbiAgICBTSE9XX0NPTkZJUk1BVElPTl9QT1BVUDogXCJTSE9XX0NPTkZJUk1BVElPTl9QT1BVUFwiLFxuICAgIFNIT1dfUkVQT1JUX1BPUFVQOiBcIlJFUE9SVF9QT1BVUFwiLFxuICAgIENMT1NFX1BPUFVQOiBcIkNMT1NFX1BPUFVQXCJcbn07XG5cbi8vQVVUSFxuZXhwb3J0IGNvbnN0IHN0dWR5R3JvdXBzQ29uc3RhbnRzID0ge1xuICAgIEFERF9TVFVEWV9HUk9VUDogXCJBRERfU1RVRFlfR1JPVVBcIixcbiAgICBMT0FEX1NUVURZX0dST1VQUzogXCJMT0FEX1NUVURZX0dST1VQU1wiLFxuICAgIFBPUFVMQVRFX1NFQVJDSDogXCJQT1BVTEFURV9TRUFSQ0hcIixcbiAgICBDTEVBUl9TVFVEWV9HUk9VUFM6IFwiQ0xFQVJfU1RVRFlfR1JPVVBTXCJcbn07XG5cbi8vTk9USUZJQ0FUSU9OU1xuZXhwb3J0IGNvbnN0IG5vdGlmaWNhdGlvbkNvbnN0YW50cyA9IHtcbiAgICBTSE9XX0VSUk9SX05PVElGSUNBVElPTjogXCJTSE9XX0VSUk9SX05PVElGSUNBVElPTlwiLFxuICAgIFNIT1dfU1VDQ0VTU19OT1RJRklDQVRJT046IFwiU0hPV19TVUNDRVNTX05PVElGSUNBVElPTlwiLFxuICAgIEhJREVfTk9USUZJQ0FUSU9OOiBcIkhJREVfTk9USUZJQ0FUSU9OXCIsXG4gICAgU1RBUlRfTE9BRElORzogXCJTVEFSVF9MT0FESU5HXCIsXG4gICAgU1RPUF9MT0FESU5HOiBcIlNUT1BfTE9BRElOR1wiXG59O1xuIiwiaW1wb3J0IHsgc3R1ZHlHcm91cHNDb25zdGFudHMsIGF1dGhDb25zdGFudHMsIHBvcHVwQ29uc3RhbnRzLCBub3RpZmljYXRpb25Db25zdGFudHMgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xuXG4vL0FVVEggUkVEVUNFUlNcbmV4cG9ydCBjb25zdCBzaWduSW4gPSAodXNlcikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGF1dGhDb25zdGFudHMuU0lHTl9JTixcbiAgICAgICAgcGF5bG9hZDogdXNlclxuICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHNpZ25PdXQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYXV0aENvbnN0YW50cy5TSUdOX09VVFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlQWNjb3VudCA9ICh1bnZlcmlmaWVkVXNlcikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGF1dGhDb25zdGFudHMuQ1JFQVRFX0FDQ09VTlQsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIHVudmVyaWZpZWRVc2VyXG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNldFVzZXIgPSAodXNlcikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGF1dGhDb25zdGFudHMuU0VUX1VTRVIsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIHVzZXJcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG4vL1BPUFVQIFJFRFVDRVJcbmV4cG9ydCBjb25zdCBzaG93Q3JlYXRlU3R1ZHlHcm91cFBvcHVwID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfQ1JFQVRFX1NUVURZX0dST1VQX1BPUFVQXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93Sm9pblN0dWR5R3JvdXBQb3B1cCA9IChncm91cCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfSk9JTl9TVFVEWV9HUk9VUF9QT1BVUCxcbiAgICAgICAgcGF5bG9hZDogZ3JvdXBcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dFZGl0U3R1ZHlHcm91cFBvcHVwID0gKGdyb3VwKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcG9wdXBDb25zdGFudHMuU0hPV19FRElUX1NUVURZX0dST1VQX1BPUFVQLFxuICAgICAgICBwYXlsb2FkOiBncm91cFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvd0NyZWF0ZU1lZXRpbmdTdHVkeUdyb3VwUG9wdXAgPSAoZ3JvdXAsIGlzUmVjdXJyaW5nTWVldGluZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfQ1JFQVRFX01FRVRJTkdfU1RVRFlfR1JPVVBfUE9QVVAsXG4gICAgICAgIHBheWxvYWQ6IHsgZ3JvdXAsIGlzUmVjdXJyaW5nTWVldGluZyB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93Q3JlYXRlUG9zdFN0dWR5R3JvdXBQb3B1cCA9IChncm91cCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfQ1JFQVRFX1BPU1RfU1RVRFlfR1JPVVBfUE9QVVAsXG4gICAgICAgIHBheWxvYWQ6IGdyb3VwXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93Vmlld1Bvc3RTdHVkeUdyb3VwUG9wdXAgPSAocG9zdCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfVklFV19QT1NUX1NUVURZX0dST1VQX1BPUFVQLFxuICAgICAgICBwYXlsb2FkOiBwb3N0XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93Vmlld01lZXRpbmdzU3R1ZHlHcm91cFBvcHVwID0gKGdyb3VwKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcG9wdXBDb25zdGFudHMuU0hPV19WSUVXX01FRVRJTkdTX1NUVURZX0dST1VQX1BPUFVQLFxuICAgICAgICBwYXlsb2FkOiBncm91cFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2hvd1ZpZXdNZW1iZXJQb3B1cCA9IChtZW1iZXIpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwb3B1cENvbnN0YW50cy5TSE9XX1ZJRVdfTUVNQkVSX1BPUFVQLFxuICAgICAgICBwYXlsb2FkOiBtZW1iZXJcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dJbnB1dFBvcHVwID0gKHRpdGxlLCBsYWJlbCwgZGVmYXVsdElucHV0LCBjYWxsYmFjaywgbGFiZWwyKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcG9wdXBDb25zdGFudHMuU0hPV19JTlBVVF9QT1BVUCxcbiAgICAgICAgcGF5bG9hZDogeyB0aXRsZSwgbGFiZWwsIGRlZmF1bHRJbnB1dCwgY2FsbGJhY2ssIGxhYmVsMiB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93Q29uZmlybWF0aW9uUG9wdXAgPSAoXG4gICAgY2FsbGJhY2ssXG4gICAgdGl0bGUsXG4gICAgbWVzc2FnZSxcbiAgICBpc0NvbmZpcm1hdGlvbiA9IHRydWUsXG4gICAgZmlyc3RCdXR0b25UaXRsZSA9IFwiWWVzXCIsXG4gICAgc2Vjb25kQnV0dG9uVGl0bGUgPSBcIk5vXCJcbikgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLlNIT1dfQ09ORklSTUFUSU9OX1BPUFVQLFxuICAgICAgICBwYXlsb2FkOiB7IGNhbGxiYWNrLCB0aXRsZSwgbWVzc2FnZSwgaXNDb25maXJtYXRpb24sIGZpcnN0QnV0dG9uVGl0bGUsIHNlY29uZEJ1dHRvblRpdGxlIH1cbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dSZXBvcnRQb3B1cCA9ICh0eXBlLCByZXBvcnREYXRhKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcG9wdXBDb25zdGFudHMuU0hPV19SRVBPUlRfUE9QVVAsXG4gICAgICAgIHBheWxvYWQ6IHsgdHlwZSwgcmVwb3J0RGF0YSB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBjbG9zZVBvcHVwID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBvcHVwQ29uc3RhbnRzLkNMT1NFX1BPUFVQXG4gICAgfTtcbn07XG5cbi8vU1RVRFkgR1JPVVAgUkVEVUNFUlNcbmV4cG9ydCBjb25zdCBhZGRTdHVkeUdyb3VwID0gKGdyb3VwKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogc3R1ZHlHcm91cHNDb25zdGFudHMuQUREX1NUVURZX0dST1VQLFxuICAgICAgICBwYXlsb2FkOiB7IGdyb3VwIH1cbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGxvYWRTdHVkeUdyb3VwID0gKGdyb3VwcykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHN0dWR5R3JvdXBzQ29uc3RhbnRzLkxPQURfU1RVRFlfR1JPVVBTLFxuICAgICAgICBwYXlsb2FkOiB7IGdyb3VwcyB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBwb3B1bGF0ZVN0dWR5R3JvdXBTZWFyY2ggPSAoZ3JvdXBzKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogc3R1ZHlHcm91cHNDb25zdGFudHMuUE9QVUxBVEVfU0VBUkNILFxuICAgICAgICBwYXlsb2FkOiB7IGdyb3VwcyB9XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBjbGVhclN0dWR5R3JvdXBzID0gKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHN0dWR5R3JvdXBzQ29uc3RhbnRzLkNMRUFSX1NUVURZX0dST1VQU1xuICAgIH07XG59O1xuLy9OT1RJRklDQVRJT04gUkVEVUNFUlNcbmV4cG9ydCBjb25zdCBzaG93RXJyb3JOb3RpZmljYXRpb24gPSAobWVzc2FnZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvbkNvbnN0YW50cy5TSE9XX0VSUk9SX05PVElGSUNBVElPTixcbiAgICAgICAgcGF5bG9hZDogeyBtZXNzYWdlIH1cbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dTdWNjZXNzTm90aWZpY2F0aW9uID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBub3RpZmljYXRpb25Db25zdGFudHMuU0hPV19TVUNDRVNTX05PVElGSUNBVElPTixcbiAgICAgICAgcGF5bG9hZDogeyBtZXNzYWdlIH1cbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGhpZGVOb3RpZmljYXRpb24gPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogbm90aWZpY2F0aW9uQ29uc3RhbnRzLkhJREVfTk9USUZJQ0FUSU9OXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzdGFydExvYWRpbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogbm90aWZpY2F0aW9uQ29uc3RhbnRzLlNUQVJUX0xPQURJTkdcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBzdG9wTG9hZGluZyA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBub3RpZmljYXRpb25Db25zdGFudHMuU1RPUF9MT0FESU5HXG4gICAgfTtcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1BvcHVwLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qb3B1cC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DcmVhdGVTdHVkeUdyb3VwRm9ybS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ3JlYXRlU3R1ZHlHcm91cEZvcm0uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGEgZm9ybS5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAqL1xuY29uc3QgRm9ybSA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cIkZvcm1cIiB7Li4ucHJvcHN9PlxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICA8L2Zvcm0+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvcmUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvcmUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgdHlwZXMgb2YgYnV0dG9ucyB0aGF0IGNhbiBiZSB1c2VkLlxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICovXG5jb25zdCBCdXR0b25UeXBlcyA9IHtcbiAgICBQcmltYXJ5OiBcIlByaW1hcnlcIixcbiAgICBDcmVhdGlvbjogXCJDcmVhdGlvblwiLFxuICAgIERlc3RydWNpdmU6IFwiRGVzdHJ1Y3RpdmVcIlxufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uVHlwZXM7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgXCIuLi9jb3JlLnNjc3NcIjtcblxuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuL0J1dHRvblR5cGVzLmpzXCI7XG5cbi8qKlxuICogVXNlZCB0byByZW5kZXIgYnV0dG9ucy4gRGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIGJ1dHRvbiByZXF1ZXN0ZWQsXG4gKiB0aGUgYnV0dG9uIGRpc3BsYXllZCB3aWxsIHZhcnkuXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMudHlwZSBUaGUgdHlwZSBvZiBidXR0b24gdG8gcmVuZGVyLlxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICovXG5jb25zdCBCdXR0b24gPSAocHJvcHMpID0+IHtcbiAgICBsZXQgYnV0dG9uQ2xhc3NOYW1lO1xuXG4gICAgc3dpdGNoIChwcm9wcy50eXBlKSB7XG4gICAgICAgIGNhc2UgQnV0dG9uVHlwZXMuUHJpbWFyeTpcbiAgICAgICAgICAgIGJ1dHRvbkNsYXNzTmFtZSA9IFwiQnV0dG9uUHJpbWFyeVwiO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBCdXR0b25UeXBlcy5DcmVhdGlvbjpcbiAgICAgICAgICAgIGJ1dHRvbkNsYXNzTmFtZSA9IFwiQnV0dG9uQ3JlYXRpb25cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJ1dHRvblR5cGVzLkRlc3RydWNpdmU6XG4gICAgICAgICAgICBidXR0b25DbGFzc05hbWUgPSBcIkJ1dHRvbkRlc3RydWN0aXZlXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJ1dHRvbkNsYXNzTmFtZSA9IFwiQnV0dG9uUHJpbWFyeVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e2J1dHRvbkNsYXNzTmFtZSArIFwiIEJ1dHRvblwifSB7Li4ucHJvcHN9PlxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICA8L2J1dHRvbj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi4vY29yZS5zY3NzXCI7XG4vKipcbiAqIFJlbmRlcnMgYW4gaW5wdXQgZmllbGQuXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICogQGRhdGUgICAxMC8yMS8yMDIxXG4gKi9cbmNvbnN0IElucHV0RmllbGQgPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3NOYW1lPVwiSW5wdXRGaWVsZFwiIHN0eWxlPXtwcm9wcy5zdHlsZX0gey4uLnByb3BzfT5cbiAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9maWVsZHNldD5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW5wdXRGaWVsZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGEgbGFiZWwuXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICogQGRhdGUgICAxMC8yMS8yMDIxXG4gKi9cbmNvbnN0IExhYmVsID0gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cIkxhYmVsXCIgey4uLnByb3BzfT5cbiAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPC9sYWJlbD5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGFiZWw7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3IuanNcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGEgdGV4dCBpbnB1dC5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAqL1xuY29uc3QgVGV4dElucHV0ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgdHlwZUlzRGVmaW5lZCA9IFZhbGlkYXRvci5pc0RlZmluZWQocHJvcHMudHlwZSk7XG4gICAgY29uc3QgdHlwZSA9IHR5cGVJc0RlZmluZWQgPyBwcm9wcy50eXBlIDogXCJ0ZXh0XCI7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAge3Byb3BzLmlzVGV4dEFyZWEgPyAoXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzTmFtZT1cIklucHV0XCIgdmFsdWU9e3Byb3BzLnZhbHVlfSBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9IHR5cGU9e3R5cGV9IHsuLi5wcm9wc30gLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cIklucHV0XCIgdmFsdWU9e3Byb3BzLnZhbHVlfSBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9IHR5cGU9e3R5cGV9IHsuLi5wcm9wc30gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgIDwvPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0SW5wdXQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgXCIuLi9jb3JlLnNjc3NcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGFuIHRvZ2dsZSBmaWVsZC5cbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMC8yMS8yMDIxXG4gKi9cbmNvbnN0IFRvZ2dsZUZpZWxkID0gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJUb2dnbGVGaWVsZFwiIHsuLi5wcm9wc30+XG4gICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb2dnbGVGaWVsZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGEgdG9nZ2xlIHN3aXRjaC5cbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMS8yMC8yMDIxXG4gKi9cbmNvbnN0IFRvZ2dsZSA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJUb2dnbGVcIj5cbiAgICAgICAgICAgIHtjb25zb2xlLmxvZyhwcm9wcy52YWx1ZSl9XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3Byb3BzLnZhbHVlID8gXCJjaGVja2VkXCIgOiBcIlwifVxuICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy52YWx1ZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2xpZGVyXCI+PC9zcGFuPlxuICAgICAgICA8L2xhYmVsPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb2dnbGU7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgXCIuLi9jb3JlLnNjc3NcIjtcblxuLyoqXG4gKiBVc2VkIHRvIHJlbmRlciBkcm9wZG93biBtZW51cy5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzLm9wdGlvbnMgVGhlIGl0ZW1zIHRvIHJlbmRlciBpbiB0aGUgZHJvcGRvd24gbWVudS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3BzLm9uQ2hhbmdlIFRoZSBmdW5jdGlvbiB0byBiZSBydW4gd2hlbiBhbiBpdGVtIGlzIHNlbGVjdGVkXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTIvMDUvMjAyMVxuICovXG5jb25zdCBEcm9wZG93biA9IChwcm9wcykgPT4ge1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHByb3BzLm9wdGlvbnMpO1xuICAgIH0sIFtdKTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImRyb3Bkb3duXCIgb25DaGFuZ2U9e3Byb3BzLm9uQ2hhbmdlfSB2YWx1ZT17cHJvcHMudmFsdWV9PlxuICAgICAgICAgICAge3Byb3BzLm9wdGlvbnMubWFwKChvcHRpb24pID0+IChcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPXtvcHRpb259PntvcHRpb259PC9vcHRpb24+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi4vY29yZS5zY3NzXCI7XG5cbmNvbnN0IENvbG9yUGlja2VyID0gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIDxpbnB1dCBjbGFzc05hbWU9XCJjb2xvci1waWNrZXJcIiBvbkNoYW5nZT17cHJvcHMub25DaGFuZ2V9IHR5cGU9XCJjb2xvclwiIHZhbHVlPXtwcm9wcy52YWx1ZX0gLz47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb2xvclBpY2tlcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9DcmVhdGVTdHVkeUdyb3VwRm9ybS5zY3NzXCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vY29yZS9Gb3JtL0Zvcm0uanNcIjtcblxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uLmpzXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGQuanNcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbC5qc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXMuanNcIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXQuanNcIjtcblxuaW1wb3J0IFRvZ2dsZUZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL1RvZ2dsZUZpZWxkL1RvZ2dsZUZpZWxkLmpzXCI7XG5pbXBvcnQgVG9nZ2xlIGZyb20gXCIuLi8uLi9jb3JlL1RvZ2dsZS9Ub2dnbGUuanNcIjtcblxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IERyb3Bkb3duIGZyb20gXCIuLi8uLi9jb3JlL0Ryb3Bkb3duL0Ryb3Bkb3duXCI7XG5pbXBvcnQgQ29sb3JQaWNrZXIgZnJvbSBcIi4uLy4uL2NvcmUvQ29sb3JQaWNrZXIvQ29sb3JQaWNrZXJcIjtcbmltcG9ydCBTdWJqZWN0cyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9TdWJqZWN0cy5qc1wiO1xuXG4vKipcbiAqIFJlbmRlcnMgYSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybVxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLnRpdGxlXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMuZGVzY3JpcHRpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcy5wcml2YWN5XG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMuc3ViamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLmNsYXNzQ29kZVxuICogQHBhcmFtIHtib29sZWFufSBwcm9wcy5pc0Fzc29jaWF0ZWRXaXRoU2Nob29sXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHByb3BzLmlzVHV0b3JHcm91cFxuICogQHBhcmFtIHtib29sZWFufSBwcm9wcy5pc09ubGluZUdyb3VwXG4gKlxuICovXG5jb25zdCBDcmVhdGVTdHVkeUdyb3VwRm9ybSA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8Rm9ybSBvblN1Ym1pdD17cHJvcHMuc3VibWl0Q3JlYXRlU3R1ZHlHcm91cH0gY2xhc3NOYW1lPVwiY3JlYXRlLXN0dWR5LWdyb3VwLWZvcm1cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5TdHVkeSBHcm91cCBOYW1lPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3Byb3BzLm5hbWV9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVOYW1lRmllbGR9IHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Db2xvcjwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sb3JQaWNrZXIgdmFsdWU9e3Byb3BzLmdyb3VwQ29sb3J9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVHcm91cENvbG9yfSB0eXBlPVwiY29sb3JcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPkRlc2NyaXB0aW9uPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Byb3BzLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZURlc2NyaXB0aW9uRmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RleHRBcmVhPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cblxuICAgICAgICAgICAgICAgIHsvKiBkcm9wZG93bnMgKi99XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5TdWJqZWN0PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biBvcHRpb25zPXtPYmplY3Qua2V5cyhTdWJqZWN0cyl9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVTdWJqZWN0RmllbGR9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cblxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Qcml2YWN5PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biBvcHRpb25zPXtbXCJQdWJsaWNcIiwgXCJQdWJsaWNcIiwgXCJQdWJsaWNcIl19IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVQcml2YWN5fSAvPlxuICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+Q291cnNlIENvZGU8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17cHJvcHMuY291cnNlQ29kZX0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUNvdXJzZUNvZGVGaWVsZH0gdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICB7LyogdG9nZ2xlcyAqL31cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICB7cHJvcHMudXNlclNjaG9vbCAhPT0gXCJcIiAmJiBwcm9wcy51c2VyU2Nob29sICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb2dnbGVGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+SXMgdGhpcyBncm91cCBhc3NvY2lhdGVkIHdpdGgge3Byb3BzLnVzZXJTY2hvb2x9PzwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMudXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Byb3BzLmlzQXNzb2NpYXRlZFdpdGhTY2hvb2x9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVG9nZ2xlRmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZUZpZWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPklzIHRoaXMgYW4gb25saW5lIGdyb3VwPzwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Y29uc29sZS5sb2coXCJJcyBPbmxpbmU/XCIsIHByb3BzLmlzT25saW5lR3JvdXApfVxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZSBvbkNoYW5nZT17cHJvcHMudXBkYXRlSXNPbmxpbmVHcm91cH0gdmFsdWU9e3Byb3BzLmlzT25saW5lR3JvdXB9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvVG9nZ2xlRmllbGQ+XG5cbiAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZUZpZWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPklzIHRoaXMgYSB0dXRvciBncm91cD88L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZSBvbkNoYW5nZT17cHJvcHMudXBkYXRlSXNUdXRvckdyb3VwfSB2YWx1ZT17cHJvcHMuaXNUdXRvckdyb3VwfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1RvZ2dsZUZpZWxkPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0+U3VibWl0PC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVTdHVkeUdyb3VwRm9ybTtcbiIsImNsYXNzIEludmFsaWREYXRlQWRhcHRlckVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmxldCBkYXRlQWRhcHRlckNvbmZpZztcbmNsYXNzIERhdGVBZGFwdGVyQmFzZSB7XG4gIGNvbnN0cnVjdG9yKF9kYXRlLCBvcHRpb25zKSB7XG4gICAgdGhpcy5kdXJhdGlvbiA9IChvcHRpb25zICYmIG9wdGlvbnMuZHVyYXRpb24pIHx8IDA7XG4gICAgdGhpcy5nZW5lcmF0b3JzID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5nZW5lcmF0b3JzICYmIG9wdGlvbnMuZ2VuZXJhdG9ycy5zbGljZSgpKSB8fCBbXTtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodGhpcy5kdXJhdGlvbikgfHwgdGhpcy5kdXJhdGlvbiA8IDApIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZUFkYXB0ZXJFcnJvcignZHVyYXRpb24gbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyJyk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBzZXQgYWRhcHRlcih2YWx1ZSkge1xuICAgIGlmIChkYXRlQWRhcHRlckNvbmZpZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7ZGF0ZUFkYXB0ZXJDb25maWcubmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIGNvbmZpZ3VyZWQuYCk7XG4gICAgfVxuICAgIGRhdGVBZGFwdGVyQ29uZmlnID0gdmFsdWU7XG4gIH1cbiAgc3RhdGljIGdldCBhZGFwdGVyKCkge1xuICAgIGlmICghZGF0ZUFkYXB0ZXJDb25maWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF0ZSBhZGFwdGVyIGhhcyBiZWVuIGNvbmZpZ3VyZWQuIFNlZSByU2NoZWR1bGUgZG9jcy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGVBZGFwdGVyQ29uZmlnO1xuICB9XG4gIHN0YXRpYyBpc0RhdGUoX29iamVjdCkge1xuICAgIHRocm93IHVuaW1wbGVtZW50ZWRFcnJvcignaXNEYXRlKCknKTtcbiAgfVxuICBzdGF0aWMgZnJvbURhdGUoX2RhdGUsIF9vcHRpb25zKSB7XG4gICAgdGhyb3cgdW5pbXBsZW1lbnRlZEVycm9yKCdmcm9tRGF0ZSgpJyk7XG4gIH1cbiAgc3RhdGljIGZyb21KU09OKF9qc29uKSB7XG4gICAgdGhyb3cgdW5pbXBsZW1lbnRlZEVycm9yKCdmcm9tSlNPTigpJyk7XG4gIH1cbiAgc3RhdGljIGZyb21EYXRlVGltZShfZGF0ZXRpbWUpIHtcbiAgICB0aHJvdyB1bmltcGxlbWVudGVkRXJyb3IoJ2Zyb21EYXRlVGltZSgpJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgaW4gc2ltcGxpZmllZCBleHRlbmRlZCBJU08gZm9ybWF0IChJU08gODYwMSkuXG4gICAqXG4gICAqIF9Ob3RlOiB0aGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGVzdGluZyBhbmQgaXRzXG4gICAqIGltcGxlbWVudGF0aW9uIGlzbid0IHBhcnRpY3VsYXJseSBwZXJmb3JtYW50Ll9cbiAgICovXG4gIHRvSVNPU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnNldCgndGltZXpvbmUnLCAnVVRDJylcbiAgICAgIC50b0RhdGVUaW1lKClcbiAgICAgIC50b0lTT1N0cmluZygpO1xuICB9XG4gIHRvRGF0ZVRpbWUoKSB7XG4gICAgY29uc3QgZGF0ZSA9IERhdGVUaW1lLmZyb21KU09OKFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnRvSlNPTigpKSwgeyBnZW5lcmF0b3JzOiB0aGlzLmdlbmVyYXRvcnMgfSksXG4gICAgKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufVxuRGF0ZUFkYXB0ZXJCYXNlLmhhc1RpbWV6b25lU3VwcG9ydCA9IGZhbHNlO1xuZnVuY3Rpb24gdW5pbXBsZW1lbnRlZEVycm9yKG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcihgWW91IG11c3QgaW1wbGVtZW50IHRoZSBcIiR7bmFtZX1cIiBtZXRob2QgZm9yIHRoaXMgRGF0ZUFkYXB0ZXIgY2xhc3NgKTtcbn1cbnZhciBEYXRlQWRhcHRlcjtcbihmdW5jdGlvbihEYXRlQWRhcHRlcikge1xuICBEYXRlQWRhcHRlci5XRUVLREFZUyA9IFsnU1UnLCAnTU8nLCAnVFUnLCAnV0UnLCAnVEgnLCAnRlInLCAnU0EnXTtcbiAgRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX1NFQ09ORCA9IDEwMDA7XG4gIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9NSU5VVEUgPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fU0VDT05EICogNjA7XG4gIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9IT1VSID0gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX01JTlVURSAqIDYwO1xuICBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fREFZID0gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0hPVVIgKiAyNDtcbiAgRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX1dFRUsgPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fREFZICogNztcbn0pKERhdGVBZGFwdGVyIHx8IChEYXRlQWRhcHRlciA9IHt9KSk7XG5jbGFzcyBJbnZhbGlkRGF0ZVRpbWVFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBEYXRlVGltZSB7XG4gIGNvbnN0cnVjdG9yKGRhdGUsIHRpbWV6b25lLCBkdXJhdGlvbiwgZ2VuZXJhdG9ycykge1xuICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIHRoaXMudGltZXpvbmUgPSB0aW1lem9uZSB8fCBudWxsO1xuICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbiB8fCAwO1xuICAgIHRoaXMuZ2VuZXJhdG9ycyA9IChnZW5lcmF0b3JzICYmIGdlbmVyYXRvcnMuc2xpY2UoKSkgfHwgW107XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHRoaXMuZHVyYXRpb24pIHx8IHRoaXMuZHVyYXRpb24gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVUaW1lRXJyb3IoJ2R1cmF0aW9uIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcicpO1xuICAgIH1cbiAgICB0aGlzLmFzc2VydElzVmFsaWQoKTtcbiAgfVxuICAvLyAvKipcbiAgLy8gICogU2ltaWxhciB0byBgQXJyYXkuaXNBcnJheSgpYCwgYGlzSW5zdGFuY2UoKWAgcHJvdmlkZXMgYSBzdXJlZmlyZSBtZXRob2RcbiAgLy8gICogb2YgZGV0ZXJtaW5pbmcgaWYgYW4gb2JqZWN0IGlzIGEgYERhdGVUaW1lYCBieSBjaGVja2luZyBhZ2FpbnN0IHRoZVxuICAvLyAgKiBnbG9iYWwgc3ltYm9sIHJlZ2lzdHJ5LlxuICAvLyAgKi9cbiAgLy8gc3RhdGljIGlzSW5zdGFuY2Uob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgRGF0ZVRpbWUge1xuICAvLyAgIHJldHVybiAhIShvYmplY3QgJiYgb2JqZWN0W0RBVEVUSU1FX0lEXSk7XG4gIC8vIH1cbiAgc3RhdGljIGZyb21KU09OKGpzb24pIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoXG4gICAgICBEYXRlLlVUQyhcbiAgICAgICAganNvbi55ZWFyLFxuICAgICAgICBqc29uLm1vbnRoIC0gMSxcbiAgICAgICAganNvbi5kYXksXG4gICAgICAgIGpzb24uaG91cixcbiAgICAgICAganNvbi5taW51dGUsXG4gICAgICAgIGpzb24uc2Vjb25kLFxuICAgICAgICBqc29uLm1pbGxpc2Vjb25kLFxuICAgICAgKSxcbiAgICApO1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoZGF0ZSwganNvbi50aW1lem9uZSwganNvbi5kdXJhdGlvbiwganNvbi5nZW5lcmF0b3JzKTtcbiAgfVxuICBzdGF0aWMgZnJvbURhdGVBZGFwdGVyKGFkYXB0ZXIpIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUpTT04oXG4gICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFkYXB0ZXIudG9KU09OKCkpLCB7IGdlbmVyYXRvcnM6IGFkYXB0ZXIuZ2VuZXJhdG9ycyB9KSxcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIGBkdXJhdGlvbmAgaXMgYDBgLiBFbHNlIHJldHVybnNcbiAgICogdGhlIGBlbmRgIGRhdGUuXG4gICAqL1xuICBnZXQgZW5kKCkge1xuICAgIGlmICghdGhpcy5kdXJhdGlvbikgcmV0dXJuO1xuICAgIGlmICh0aGlzLl9lbmQpIHJldHVybiB0aGlzLl9lbmQ7XG4gICAgdGhpcy5fZW5kID0gdGhpcy5hZGQodGhpcy5kdXJhdGlvbiwgJ21pbGxpc2Vjb25kJyk7XG4gICAgcmV0dXJuIHRoaXMuX2VuZDtcbiAgfVxuICAvLyBXaGlsZSB3ZSBjb25zdHJhaW4gdGhlIGFyZ3VtZW50IHRvIGJlIGFub3RoZXIgRGF0ZUFkYXB0ZXIgaW4gdHlwZXNjcmlwdFxuICAvLyB3ZSBoYW5kbGUgdGhlIGNhc2Ugb2Ygc29tZW9uZSBwYXNzaW5nIGluIGFub3RoZXIgdHlwZSBvZiBvYmplY3QgaW4gamF2YXNjcmlwdFxuICBpc0VxdWFsKG9iamVjdCkge1xuICAgIGlmICghb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGFzc2VydFNhbWVUaW1lWm9uZSh0aGlzLCBvYmplY3QpO1xuICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gb2JqZWN0LnZhbHVlT2YoKTtcbiAgfVxuICBpc0JlZm9yZShvYmplY3QpIHtcbiAgICBhc3NlcnRTYW1lVGltZVpvbmUodGhpcywgb2JqZWN0KTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBvYmplY3QudmFsdWVPZigpO1xuICB9XG4gIGlzQmVmb3JlT3JFcXVhbChvYmplY3QpIHtcbiAgICBhc3NlcnRTYW1lVGltZVpvbmUodGhpcywgb2JqZWN0KTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPD0gb2JqZWN0LnZhbHVlT2YoKTtcbiAgfVxuICBpc0FmdGVyKG9iamVjdCkge1xuICAgIGFzc2VydFNhbWVUaW1lWm9uZSh0aGlzLCBvYmplY3QpO1xuICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IG9iamVjdC52YWx1ZU9mKCk7XG4gIH1cbiAgaXNBZnRlck9yRXF1YWwob2JqZWN0KSB7XG4gICAgYXNzZXJ0U2FtZVRpbWVab25lKHRoaXMsIG9iamVjdCk7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID49IG9iamVjdC52YWx1ZU9mKCk7XG4gIH1cbiAgaXNPY2N1cnJpbmcob2JqZWN0KSB7XG4gICAgaWYgKCF0aGlzLmR1cmF0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGVUaW1lI2lzT2NjdXJyaW5nKCkgaXMgb25seSBhcHBsaWNhYmxlIHRvIERhdGVUaW1lcyB3aXRoIGR1cmF0aW9ucycpO1xuICAgIH1cbiAgICBhc3NlcnRTYW1lVGltZVpvbmUodGhpcywgb2JqZWN0KTtcbiAgICByZXR1cm4gKFxuICAgICAgb2JqZWN0LmlzQWZ0ZXJPckVxdWFsKHRoaXMpICYmIG9iamVjdC5pc0JlZm9yZU9yRXF1YWwodGhpcy5hZGQodGhpcy5kdXJhdGlvbiwgJ21pbGxpc2Vjb25kJykpXG4gICAgKTtcbiAgfVxuICBhZGQoYW1vdW50LCB1bml0KSB7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICdnZW5lcmF0b3InOiB7XG4gICAgICAgIGNvbnN0IGdlbmVyYXRvcnMgPSB0aGlzLmdlbmVyYXRvcnMuc2xpY2UoKTtcbiAgICAgICAgZ2VuZXJhdG9ycy51bnNoaWZ0KGFtb3VudCk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUodGhpcy5kYXRlLCB0aGlzLnRpbWV6b25lLCB0aGlzLmR1cmF0aW9uLCBnZW5lcmF0b3JzKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDWWVhcnModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ01vbnRocyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENXZWVrcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ0RheXModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDSG91cnModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENNaW51dGVzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDU2Vjb25kcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDTWlsbGlzZWNvbmRzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdW5pdCBwcm92aWRlZCB0byBgRGF0ZVRpbWUjYWRkYCcpO1xuICAgIH1cbiAgfVxuICBzdWJ0cmFjdChhbW91bnQsIHVuaXQpIHtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDWWVhcnModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ01vbnRocyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENXZWVrcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ0RheXModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDSG91cnModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENNaW51dGVzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDU2Vjb25kcyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDTWlsbGlzZWNvbmRzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdW5pdCBwcm92aWRlZCB0byBgRGF0ZVRpbWUjc3VidHJhY3RgJyk7XG4gICAgfVxuICB9XG4gIGdldCh1bml0KSB7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ01vbnRoKCkgKyAxO1xuICAgICAgY2FzZSAneWVhcmRheSc6XG4gICAgICAgIHJldHVybiBnZXRVVENZZWFyRGF5KHRoaXMuZGF0ZSk7XG4gICAgICBjYXNlICd3ZWVrZGF5JzpcbiAgICAgICAgcmV0dXJuIERhdGVBZGFwdGVyLldFRUtEQVlTW3RoaXMuZGF0ZS5nZXRVVENEYXkoKV07XG4gICAgICBjYXNlICdkYXknOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ01pbnV0ZXMoKTtcbiAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0VVRDU2Vjb25kcygpO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVuaXQgcHJvdmlkZWQgdG8gYERhdGVUaW1lI3NldGAnKTtcbiAgICB9XG4gIH1cbiAgc2V0KHVuaXQsIHZhbHVlKSB7XG4gICAgaWYgKHVuaXQgPT09ICdkdXJhdGlvbicpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUodGhpcy5kYXRlLCB0aGlzLnRpbWV6b25lLCB2YWx1ZSwgdGhpcy5nZW5lcmF0b3JzKTtcbiAgICB9XG4gICAgaWYgKHVuaXQgPT09ICdnZW5lcmF0b3JzJykge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh0aGlzLmRhdGUsIHRoaXMudGltZXpvbmUsIHRoaXMuZHVyYXRpb24sIHZhbHVlKTtcbiAgICB9XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21vbnRoJzoge1xuICAgICAgICAvLyBJZiB0aGUgY3VycmVudCBkYXkgb2YgdGhlIG1vbnRoXG4gICAgICAgIC8vIGlzIGdyZWF0ZXIgdGhhbiBkYXlzIGluIHRoZSBtb250aCB3ZSBhcmUgbW92aW5nIHRvLCB3ZSBuZWVkIHRvIGFsc29cbiAgICAgICAgLy8gc2V0IHRoZSBkYXkgdG8gdGhlIGVuZCBvZiB0aGF0IG1vbnRoLlxuICAgICAgICBjb25zdCBsZW5ndGggPSBtb250aExlbmd0aCh2YWx1ZSwgZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgY29uc3QgZGF5ID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIGlmIChkYXkgPiBsZW5ndGgpIHtcbiAgICAgICAgICBkYXRlLnNldFVUQ0RhdGUoMSk7XG4gICAgICAgICAgZGF0ZS5zZXRVVENNb250aCh2YWx1ZSk7XG4gICAgICAgICAgZGF0ZSA9IHN1YlVUQ0RheXMoZGF0ZSwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0ZS5zZXRVVENNb250aCh2YWx1ZSAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgZGF0ZS5zZXRVVENEYXRlKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgZGF0ZS5zZXRVVENNaW51dGVzKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICBkYXRlLnNldFVUQ1NlY29uZHModmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgZGF0ZS5zZXRVVENNaWxsaXNlY29uZHModmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1bml0IHByb3ZpZGVkIHRvIGBEYXRlVGltZSNzZXRgJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShkYXRlKTtcbiAgfVxuICBncmFudWxhcml0eShncmFudWxhcml0eSwgb3B0ID0ge30pIHtcbiAgICBsZXQgZGF0ZSA9IHRoaXMuZm9ya0RhdGVUaW1lKHRoaXMuZGF0ZSk7XG4gICAgc3dpdGNoIChncmFudWxhcml0eSkge1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnbW9udGgnLCAxKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdkYXknLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgZGF0ZSA9IHNldERhdGVUb1N0YXJ0T2ZXZWVrKGRhdGUsIG9wdC53ZWVrU3RhcnQpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGdyYW51bGFyaXR5KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdob3VyJywgMCk7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdtaW51dGUnLCAwKTtcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnc2Vjb25kJywgMCk7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ21pbGxpc2Vjb25kJywgMCk7XG4gICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGdyYW51bGFyaXR5IHByb3ZpZGVkIHRvIGBEYXRlVGltZSNncmFudWxhcml0eWA6ICcgKyBncmFudWxhcml0eSk7XG4gICAgfVxuICB9XG4gIGVuZEdyYW51bGFyaXR5KGdyYW51bGFyaXR5LCBvcHQgPSB7fSkge1xuICAgIGxldCBkYXRlID0gdGhpcy5mb3JrRGF0ZVRpbWUodGhpcy5kYXRlKTtcbiAgICBzd2l0Y2ggKGdyYW51bGFyaXR5KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdtb250aCcsIDEyKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdkYXknLCBtb250aExlbmd0aChkYXRlLmdldCgnbW9udGgnKSwgZGF0ZS5nZXQoJ3llYXInKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICBkYXRlID0gc2V0RGF0ZVRvRW5kT2ZXZWVrKGRhdGUsIG9wdC53ZWVrU3RhcnQpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGdyYW51bGFyaXR5KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdob3VyJywgMjMpO1xuICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnbWludXRlJywgNTkpO1xuICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdzZWNvbmQnLCA1OSk7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ21pbGxpc2Vjb25kJywgOTk5KTtcbiAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZ3JhbnVsYXJpdHkgcHJvdmlkZWQgdG8gYERhdGVUaW1lI2dyYW51bGFyaXR5YDogJyArIGdyYW51bGFyaXR5KTtcbiAgICB9XG4gIH1cbiAgdG9JU09TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0ZS50b0lTT1N0cmluZygpO1xuICB9XG4gIHRvRGF0ZVRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IGpzb24gPSB7XG4gICAgICB0aW1lem9uZTogdGhpcy50aW1lem9uZSxcbiAgICAgIHllYXI6IHRoaXMuZ2V0KCd5ZWFyJyksXG4gICAgICBtb250aDogdGhpcy5nZXQoJ21vbnRoJyksXG4gICAgICBkYXk6IHRoaXMuZ2V0KCdkYXknKSxcbiAgICAgIGhvdXI6IHRoaXMuZ2V0KCdob3VyJyksXG4gICAgICBtaW51dGU6IHRoaXMuZ2V0KCdtaW51dGUnKSxcbiAgICAgIHNlY29uZDogdGhpcy5nZXQoJ3NlY29uZCcpLFxuICAgICAgbWlsbGlzZWNvbmQ6IHRoaXMuZ2V0KCdtaWxsaXNlY29uZCcpLFxuICAgIH07XG4gICAgaWYgKHRoaXMuZHVyYXRpb24pIHtcbiAgICAgIGpzb24uZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGUudmFsdWVPZigpO1xuICB9XG4gIGFzc2VydElzVmFsaWQoKSB7XG4gICAgaWYgKGlzTmFOKHRoaXMudmFsdWVPZigpKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlVGltZUVycm9yKCdEYXRlVGltZSBoYXMgaW52YWxpZCBkYXRlLicpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmb3JrRGF0ZVRpbWUoZGF0ZSkge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoZGF0ZSwgdGhpcy50aW1lem9uZSwgdGhpcy5kdXJhdGlvbiwgdGhpcy5nZW5lcmF0b3JzKTtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0U2FtZVRpbWVab25lKHgsIHkpIHtcbiAgaWYgKHgudGltZXpvbmUgIT09IHkudGltZXpvbmUpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVUaW1lRXJyb3IoXG4gICAgICAnQXR0ZW1wdGVkIHRvIGNvbXBhcmUgYSBkYXRldGltZSB0byBhbm90aGVyIGRhdGUgaW4gYSBkaWZmZXJlbnQgdGltZXpvbmU6ICcgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeSh4KSArXG4gICAgICAgICcgYW5kICcgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeSh5KSxcbiAgICApO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gc2V0RGF0ZVRvU3RhcnRPZldlZWsoZGF0ZSwgd2tzdCkge1xuICBjb25zdCBpbmRleCA9IG9yZGVyZWRXZWVrZGF5cyh3a3N0KS5pbmRleE9mKGRhdGUuZ2V0KCd3ZWVrZGF5JykpO1xuICByZXR1cm4gZGF0ZS5zdWJ0cmFjdChpbmRleCwgJ2RheScpO1xufVxuZnVuY3Rpb24gc2V0RGF0ZVRvRW5kT2ZXZWVrKGRhdGUsIHdrc3QpIHtcbiAgY29uc3QgaW5kZXggPSBvcmRlcmVkV2Vla2RheXMod2tzdCkuaW5kZXhPZihkYXRlLmdldCgnd2Vla2RheScpKTtcbiAgcmV0dXJuIGRhdGUuYWRkKDYgLSBpbmRleCwgJ2RheScpO1xufVxuZnVuY3Rpb24gZGF0ZVRpbWVTb3J0Q29tcGFyZXIoYSwgYikge1xuICBpZiAoYS5pc0FmdGVyKGIpKSByZXR1cm4gMTtcbiAgaWYgKGEuaXNCZWZvcmUoYikpIHJldHVybiAtMTtcbiAgaWYgKGEuZHVyYXRpb24gJiYgYi5kdXJhdGlvbikge1xuICAgIGlmIChhLmR1cmF0aW9uID4gYi5kdXJhdGlvbikgcmV0dXJuIDE7XG4gICAgaWYgKGEuZHVyYXRpb24gPCBiLmR1cmF0aW9uKSByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiB1bmlxRGF0ZVRpbWVzKGRhdGVzKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKG5ldyBNYXAoZGF0ZXMubWFwKGRhdGUgPT4gW2RhdGUudG9JU09TdHJpbmcoKSwgZGF0ZV0pKS52YWx1ZXMoKSk7XG59XG5mdW5jdGlvbiBvcmRlcmVkV2Vla2RheXMod2tzdCA9ICdTVScpIHtcbiAgY29uc3Qgd2tkYXlzID0gRGF0ZUFkYXB0ZXIuV0VFS0RBWVMuc2xpY2UoKTtcbiAgbGV0IGluZGV4ID0gd2tkYXlzLmluZGV4T2Yod2tzdCk7XG4gIHdoaWxlIChpbmRleCAhPT0gMCkge1xuICAgIHNoaWZ0QXJyYXkod2tkYXlzKTtcbiAgICBpbmRleC0tO1xuICB9XG4gIHJldHVybiB3a2RheXM7XG59XG5mdW5jdGlvbiBzaGlmdEFycmF5KGFycmF5LCBmcm9tID0gJ2ZpcnN0Jykge1xuICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9IGVsc2UgaWYgKGZyb20gPT09ICdmaXJzdCcpIHtcbiAgICBhcnJheS5wdXNoKGFycmF5LnNoaWZ0KCkpO1xuICB9IGVsc2Uge1xuICAgIGFycmF5LnVuc2hpZnQoYXJyYXkucG9wKCkpO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cbmZ1bmN0aW9uIGdldERpZmZlcmVuY2VCZXR3ZWVuV2Vla2RheXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkgcmV0dXJuIDA7XG4gIGNvbnN0IHJlc3VsdCA9IERhdGVBZGFwdGVyLldFRUtEQVlTLmluZGV4T2YoeCkgLSBEYXRlQWRhcHRlci5XRUVLREFZUy5pbmRleE9mKHkpO1xuICByZXR1cm4gcmVzdWx0ID4gMCA/IDcgLSByZXN1bHQgOiBNYXRoLmFicyhyZXN1bHQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkYXlzIGluIHRoZSBnaXZlbiBtb250aC5cbiAqXG4gKiBAcGFyYW0gbW9udGggYmFzZS0xXG4gKiBAcGFyYW0geWVhclxuICovXG5mdW5jdGlvbiBtb250aExlbmd0aChtb250aCwgeWVhcikge1xuICBjb25zdCBibG9jayA9IHtcbiAgICAxOiAzMSxcbiAgICAyOiBnZXREYXlzSW5GZWJydWFyeSh5ZWFyKSxcbiAgICAzOiAzMSxcbiAgICA0OiAzMCxcbiAgICA1OiAzMSxcbiAgICA2OiAzMCxcbiAgICA3OiAzMSxcbiAgICA4OiAzMSxcbiAgICA5OiAzMCxcbiAgICAxMDogMzEsXG4gICAgMTE6IDMwLFxuICAgIDEyOiAzMSxcbiAgfTtcbiAgcmV0dXJuIGJsb2NrW21vbnRoXTtcbn1cbmZ1bmN0aW9uIGdldERheXNJbkZlYnJ1YXJ5KHllYXIpIHtcbiAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAyOSA6IDI4O1xufVxuLy8gdGFrZW4gZnJvbSBkYXRlLWZuXG5mdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApO1xufVxuZnVuY3Rpb24gZ2V0RGF5c0luWWVhcih5ZWFyKSB7XG4gIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xufVxuZnVuY3Rpb24gZ2V0VVRDWWVhckRheShub3cpIHtcbiAgY29uc3Qgc3RhcnQgPSBuZXcgRGF0ZShEYXRlLlVUQyhub3cuZ2V0VVRDRnVsbFllYXIoKSwgMCwgMSkpO1xuICBjb25zdCBkaWZmID0gbm93LnZhbHVlT2YoKSAtIHN0YXJ0LnZhbHVlT2YoKTtcbiAgcmV0dXJuIDEgKyBNYXRoLmZsb29yKGRpZmYgLyBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fREFZKTtcbn1cbi8qKlxuICogVGhlc2UgZnVuY3Rpb25zIGFyZSBiYXNpY2FsbHkgbGlmdGVkIGZyb20gYGRhdGUtZm5zYCwgYnV0IGNoYW5nZWRcbiAqIHRvIHVzZSB0aGUgVVRDIGRhdGUgbWV0aG9kcywgd2hpY2ggYGRhdGUtZm5zYCBkb2Vzbid0IHN1cHBvcnQuXG4gKi9cbmZ1bmN0aW9uIHRvSW50ZWdlcihpbnB1dCkge1xuICBpZiAoaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHRydWUgfHwgaW5wdXQgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICBjb25zdCBpbnQgPSBOdW1iZXIoaW5wdXQpO1xuICBpZiAoaXNOYU4oaW50KSkge1xuICAgIHJldHVybiBpbnQ7XG4gIH1cbiAgcmV0dXJuIGludCA8IDAgPyBNYXRoLmNlaWwoaW50KSA6IE1hdGguZmxvb3IoaW50KTtcbn1cbmZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzIgYXJndW1lbnRzIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG4gIGNvbnN0IHRpbWVzdGFtcCA9IGRpcnR5RGF0ZS52YWx1ZU9mKCk7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufVxuZnVuY3Rpb24gYWRkVVRDWWVhcnMoZGF0ZSwgaW5wdXQpIHtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGlucHV0KTtcbiAgcmV0dXJuIGFkZFVUQ01vbnRocyhkYXRlLCBhbW91bnQgKiAxMik7XG59XG5mdW5jdGlvbiBhZGRVVENNb250aHMoZGF0ZSwgaW5wdXQpIHtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGlucHV0KTtcbiAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICBjb25zdCBkZXNpcmVkTW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCkgKyBhbW91bnQ7XG4gIGNvbnN0IGRhdGVXaXRoRGVzaXJlZE1vbnRoID0gbmV3IERhdGUoMCk7XG4gIGRhdGVXaXRoRGVzaXJlZE1vbnRoLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSwgZGVzaXJlZE1vbnRoLCAxKTtcbiAgZGF0ZVdpdGhEZXNpcmVkTW9udGguc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIGNvbnN0IGRheXNJbk1vbnRoID0gbW9udGhMZW5ndGgoXG4gICAgZGF0ZVdpdGhEZXNpcmVkTW9udGguZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgZGF0ZVdpdGhEZXNpcmVkTW9udGguZ2V0VVRDRnVsbFllYXIoKSxcbiAgKTtcbiAgLy8gU2V0IHRoZSBsYXN0IGRheSBvZiB0aGUgbmV3IG1vbnRoXG4gIC8vIGlmIHRoZSBvcmlnaW5hbCBkYXRlIHdhcyB0aGUgbGFzdCBkYXkgb2YgdGhlIGxvbmdlciBtb250aFxuICBkYXRlLnNldFVUQ01vbnRoKGRlc2lyZWRNb250aCwgTWF0aC5taW4oZGF5c0luTW9udGgsIGRhdGUuZ2V0VVRDRGF0ZSgpKSk7XG4gIHJldHVybiBkYXRlO1xufVxuZnVuY3Rpb24gYWRkVVRDV2Vla3MoZGF0ZSwgaW5wdXQpIHtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGlucHV0KTtcbiAgY29uc3QgZGF5cyA9IGFtb3VudCAqIDc7XG4gIHJldHVybiBhZGRVVENEYXlzKGRhdGUsIGRheXMpO1xufVxuZnVuY3Rpb24gYWRkVVRDRGF5cyhkYXRlLCBpbnB1dCkge1xuICAvLyBieSBhZGRpbmcgbWlsbGlzZWNvbmRzIHJhdGhlciB0aGFuIGRheXMsIHdlIHN1cHJlc3MgdGhlIG5hdGl2ZSBEYXRlIG9iamVjdCdzIGF1dG9tYXRpY1xuICAvLyBkYXlsaWdodCBzYXZpbmdzIHRpbWUgY29udmVyc2lvbnMgd2hpY2ggd2UgZG9uJ3Qgd2FudCBpbiBVVEMgbW9kZVxuICByZXR1cm4gYWRkVVRDTWlsbGlzZWNvbmRzKGRhdGUsIHRvSW50ZWdlcihpbnB1dCkgKiBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fREFZKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ0hvdXJzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGF0ZSwgYW1vdW50ICogRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0hPVVIpO1xufVxuZnVuY3Rpb24gYWRkVVRDTWludXRlcyhkYXRlLCBpbnB1dCkge1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoaW5wdXQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRhdGUsIGFtb3VudCAqIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9NSU5VVEUpO1xufVxuZnVuY3Rpb24gYWRkVVRDU2Vjb25kcyhkYXRlLCBpbnB1dCkge1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoaW5wdXQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRhdGUsIGFtb3VudCAqIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9TRUNPTkQpO1xufVxuZnVuY3Rpb24gYWRkVVRDTWlsbGlzZWNvbmRzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIGNvbnN0IHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ1llYXJzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkVVRDWWVhcnMoZGF0ZSwgLWFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENNb250aHMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENNb250aHMoZGF0ZSwgLWFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENXZWVrcyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ1dlZWtzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDRGF5cyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ0RheXMoZGF0ZSwgLWFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENIb3VycyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ0hvdXJzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDTWludXRlcyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ01pbnV0ZXMoZGF0ZSwgLWFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENTZWNvbmRzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkVVRDU2Vjb25kcyhkYXRlLCAtYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ01pbGxpc2Vjb25kcyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ01pbGxpc2Vjb25kcyhkYXRlLCAtYW1vdW50KTtcbn1cblxuY2xhc3MgQXJndW1lbnRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBJbmZpbml0ZUxvb3BFcnJvciBleHRlbmRzIEVycm9yIHt9XG5mdW5jdGlvbiBudW1iZXJTb3J0Q29tcGFyZXIoYSwgYikge1xuICBpZiAoYSA+IGIpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmIChiID4gYSkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuZnVuY3Rpb24gZnJlcVRvR3JhbnVsYXJpdHkoZnJlcSkge1xuICBzd2l0Y2ggKGZyZXEpIHtcbiAgICBjYXNlICdZRUFSTFknOlxuICAgICAgcmV0dXJuICd5ZWFyJztcbiAgICBjYXNlICdNT05USExZJzpcbiAgICAgIHJldHVybiAnbW9udGgnO1xuICAgIGNhc2UgJ1dFRUtMWSc6XG4gICAgICByZXR1cm4gJ3dlZWsnO1xuICAgIGNhc2UgJ0RBSUxZJzpcbiAgICAgIHJldHVybiAnZGF5JztcbiAgICBjYXNlICdIT1VSTFknOlxuICAgICAgcmV0dXJuICdob3VyJztcbiAgICBjYXNlICdNSU5VVEVMWSc6XG4gICAgICByZXR1cm4gJ21pbnV0ZSc7XG4gICAgY2FzZSAnU0VDT05ETFknOlxuICAgICAgcmV0dXJuICdzZWNvbmQnO1xuICAgIGNhc2UgJ01JTExJU0VDT05ETFknOlxuICAgICAgcmV0dXJuICdtaWxsaXNlY29uZCc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBmcmVxIHBhc3NlZCB0byBmcmVxVG9HcmFudWxhcml0eSgpJyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsb25lSlNPTihqc29uKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGpzb24pKTtcbn1cbmZ1bmN0aW9uIGRhdGVJbnB1dFRvRGF0ZUFkYXB0ZXIoZGF0ZSkge1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgcmV0dXJuIGRhdGUgaW5zdGFuY2VvZiBEYXRlVGltZSA/IERhdGVBZGFwdGVyQmFzZS5hZGFwdGVyLmZyb21EYXRlVGltZShkYXRlKSA6XG4gICAgICAgIGRhdGUgaW5zdGFuY2VvZiBEYXRlQWRhcHRlckJhc2UgPyBkYXRlIDpcbiAgICAgICAgICAgIERhdGVBZGFwdGVyQmFzZS5hZGFwdGVyLmZyb21EYXRlKGRhdGUpO1xufVxuZnVuY3Rpb24gZGF0ZUlucHV0VG9EYXRlVGltZShkYXRlLCB0aW1lem9uZSkge1xuICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGVUaW1lKSB7XG4gICAgaWYgKGRhdGUudGltZXpvbmUgIT09IHRpbWV6b25lKSB7XG4gICAgICByZXR1cm4gRGF0ZUFkYXB0ZXJCYXNlLmFkYXB0ZXJcbiAgICAgICAgLmZyb21EYXRlVGltZShkYXRlKVxuICAgICAgICAuc2V0KCd0aW1lem9uZScsIHRpbWV6b25lKVxuICAgICAgICAudG9EYXRlVGltZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gZGF0ZSBpbnN0YW5jZW9mIERhdGVBZGFwdGVyQmFzZVxuICAgID8gZGF0ZS5zZXQoJ3RpbWV6b25lJywgdGltZXpvbmUpLnRvRGF0ZVRpbWUoKVxuICAgIDogRGF0ZUFkYXB0ZXJCYXNlLmFkYXB0ZXJcbiAgICAgICAgLmZyb21EYXRlKGRhdGUpXG4gICAgICAgIC5zZXQoJ3RpbWV6b25lJywgdGltZXpvbmUpXG4gICAgICAgIC50b0RhdGVUaW1lKCk7XG59XG4vLyBleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplRGF0ZUlucHV0PFQgZXh0ZW5kcyBEYXRlQWRhcHRlcj4oXG4vLyAgIGRhdGVBZGFwdGVyOiBEYXRlQWRhcHRlckNvbnN0cnVjdG9yPFQ+LFxuLy8gICBpbnB1dDogRGF0ZUlucHV0PFQ+LFxuLy8gICB0aW1lem9uZTogc3RyaW5nIHwgbnVsbCxcbi8vICk6IERhdGVUaW1lIHtcbi8vICAgaWYgKGlucHV0IGluc3RhbmNlb2YgRGF0ZVRpbWUpIHtcbi8vICAgICBpZiAoaW5wdXQudGltZXpvbmUgIT09IHRpbWV6b25lKSB7XG4vLyAgICAgICByZXR1cm4gZGF0ZUFkYXB0ZXJcbi8vICAgICAgICAgLmZyb21EYXRlVGltZShpbnB1dClcbi8vICAgICAgICAgLnNldCgndGltZXpvbmUnLCB0aW1lem9uZSlcbi8vICAgICAgICAgLnRvRGF0ZVRpbWUoKTtcbi8vICAgICB9XG4vLyAgICAgcmV0dXJuIGlucHV0O1xuLy8gICB9XG4vLyAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGVBZGFwdGVyXG4vLyAgICAgPyBpbnB1dC5zZXQoJ3RpbWV6b25lJywgdGltZXpvbmUpLnRvRGF0ZVRpbWUoKVxuLy8gICAgIDogbmV3IGRhdGVBZGFwdGVyKGlucHV0KS50b0RhdGVUaW1lKCk7XG4vLyB9XG5mdW5jdGlvbiBub3JtYWxpemVEYXRlVGltZVRpbWV6b25lKGRhdGUsIHRpbWV6b25lKSB7XG4gIGlmIChkYXRlLnRpbWV6b25lICE9PSB0aW1lem9uZSkge1xuICAgIHJldHVybiBEYXRlQWRhcHRlckJhc2UuYWRhcHRlclxuICAgICAgLmZyb21EYXRlVGltZShkYXRlKVxuICAgICAgLnNldCgndGltZXpvbmUnLCB0aW1lem9uZSlcbiAgICAgIC50b0RhdGVUaW1lKCk7XG4gIH1cbiAgcmV0dXJuIGRhdGU7XG59XG5cbmNsYXNzIFJ1bGVPcHRpb25FcnJvciBleHRlbmRzIEVycm9yIHt9XG5mdW5jdGlvbiBub3JtYWxpemVEZWZhdWx0T3B0aW9ucyhvcHRpb25zKSB7XG4gIGxldCBzdGFydDtcbiAgaWYgKG9wdGlvbnMuc3RhcnQgaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuICAgIHN0YXJ0ID0gb3B0aW9ucy5zdGFydDtcbiAgfSBlbHNlIGlmIChvcHRpb25zLnN0YXJ0IGluc3RhbmNlb2YgRGF0ZUFkYXB0ZXJCYXNlKSB7XG4gICAgc3RhcnQgPSBvcHRpb25zLnN0YXJ0LnRvRGF0ZVRpbWUoKTtcbiAgfSBlbHNlIGlmIChEYXRlQWRhcHRlckJhc2UuYWRhcHRlci5pc0RhdGUob3B0aW9ucy5zdGFydCkpIHtcbiAgICBzdGFydCA9IERhdGVBZGFwdGVyQmFzZS5hZGFwdGVyLmZyb21EYXRlKG9wdGlvbnMuc3RhcnQpLnRvRGF0ZVRpbWUoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKFxuICAgICAgJ1wic3RhcnRcIiBtdXN0IGJlIGVpdGhlciBhIGBEYXRlQWRhcHRlcmAgaW5zdGFuY2Ugb3IgYW4gaW5zdGFuY2Ugb2YgdGhlICcgK1xuICAgICAgICAnZGF0ZSBhIERhdGVBZGFwdGVyIGlzIHdyYXBwaW5nIChlLmcuIGBTdGFuZGFyZERhdGVBZGFwdGVyYCB3cmFwcyBhIGBEYXRlYCknLFxuICAgICk7XG4gIH1cbiAgbGV0IGVuZDtcbiAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgaWYgKG9wdGlvbnMuZW5kIGluc3RhbmNlb2YgRGF0ZVRpbWUpIHtcbiAgICAgIGVuZCA9IG9wdGlvbnMuZW5kO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5lbmQgaW5zdGFuY2VvZiBEYXRlQWRhcHRlckJhc2UpIHtcbiAgICAgIGVuZCA9IG9wdGlvbnMuZW5kLnRvRGF0ZVRpbWUoKTtcbiAgICB9IGVsc2UgaWYgKERhdGVBZGFwdGVyQmFzZS5hZGFwdGVyLmlzRGF0ZShvcHRpb25zLmVuZCkpIHtcbiAgICAgIGVuZCA9IERhdGVBZGFwdGVyQmFzZS5hZGFwdGVyLmZyb21EYXRlKG9wdGlvbnMuZW5kKS50b0RhdGVUaW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoXG4gICAgICAgICdcImVuZFwiIG11c3QgYmUgZWl0aGVyIGJlIGB1bmRlZmluZWRgLCBhIGBEYXRlQWRhcHRlcmAgaW5zdGFuY2UsIG9yIGFuIGluc3RhbmNlIG9mIHRoZSAnICtcbiAgICAgICAgICAnZGF0ZSBhIERhdGVBZGFwdGVyIGlzIHdyYXBwaW5nIChlLmcuIGBTdGFuZGFyZERhdGVBZGFwdGVyYCB3cmFwcyBhIGBEYXRlYCknLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKG9wdGlvbnMuZHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmR1cmF0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJkdXJhdGlvblwiIGV4cGVjdHMgYSB3aG9sZSBudW1iZXInKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZHVyYXRpb24gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJkdXJhdGlvblwiIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnKTtcbiAgICB9XG4gIH1cbiAgaWYgKG9wdGlvbnMuY291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmNvdW50KSkge1xuICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJjb3VudFwiIG11c3QgYmUgYSB3aG9sZSBudW1iZXInKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY291bnQgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImNvdW50XCIgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5lbmQgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLmNvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImVuZFwiIGFuZCBcImNvdW50XCIgY2Fubm90IGJvdGggYmUgcHJlc2VudCcpO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RhcnQsXG4gICAgZW5kLFxuICAgIGNvdW50OiBvcHRpb25zLmNvdW50LFxuICAgIGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUnVsZU9wdGlvbnMocmVjdXJyZW5jZU1vZHVsZXMsIG9wdGlvbnMpIHtcbiAgY29uc3Qgbm9ybU9wdGlvbnMgPSBub3JtYWxpemVEZWZhdWx0T3B0aW9ucyhvcHRpb25zKTtcbiAgY29uc3Qgc3RhcnRPcHRpb25zID0gY2xvbmVKU09OKG9wdGlvbnMpO1xuICByZWN1cnJlbmNlTW9kdWxlcy5mb3JFYWNoKG1vZCA9PiB7XG4gICAgbW9kLm5vcm1hbGl6ZU9wdGlvbnMoc3RhcnRPcHRpb25zLCBub3JtT3B0aW9ucyk7XG4gIH0pO1xuICBPYmplY3Qua2V5cyhub3JtT3B0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChub3JtT3B0aW9uc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlbGV0ZSBub3JtT3B0aW9uc1trZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBub3JtT3B0aW9ucztcbn1cbmZ1bmN0aW9uIGNsb25lUnVsZU9wdGlvbnMob3B0aW9ucykge1xuICBjb25zdCBvYmogPSBjbG9uZUpTT04ob3B0aW9ucyk7XG4gIG9iai5zdGFydCA9IG9wdGlvbnMuc3RhcnQ7XG4gIGlmIChvcHRpb25zLmVuZCkgb2JqLmVuZCA9IG9wdGlvbnMuZW5kO1xuICByZXR1cm4gb2JqO1xufVxuXG5jbGFzcyBSZWN1cnJlbmNlUnVsZUVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIFZhbGlkRGF0ZVRpbWUge1xuICBjb25zdHJ1Y3RvcihkYXRlKSB7XG4gICAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgfVxufVxuY2xhc3MgSW52YWxpZERhdGVUaW1lIHtcbiAgY29uc3RydWN0b3IoZGF0ZSkge1xuICAgIHRoaXMuZGF0ZSA9IGRhdGU7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3VycmVuY2VSdWxlc1JlZHVjZXIocnVsZXMpIHtcbiAgcmV0dXJuIGl0ZXJhdG9yID0+XG4gICAgcnVsZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG4gICAgICBjb25zdCBydWxlID0gY3Vyci5nZXQoaXRlcmF0b3IpO1xuICAgICAgaWYgKHJ1bGUpIHByZXYucHVzaChydWxlKTtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH0sIFtdKTtcbn1cblxuY2xhc3MgUmVjdXJyZW5jZVJ1bGVzSXRlcmF0b3Ige1xuICBjb25zdHJ1Y3RvcihyZWN1cnJlbmNlUnVsZXMsIG9wdGlvbnMsIGFyZ3MpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5ydWxlcyA9IFtdO1xuICAgIHRoaXMuaXRlcmF0b3IgPVxuICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICB0aGlzLm9wdGlvbnMuY291bnQgPT09IHVuZGVmaW5lZCA/IHRoaXMuaXRlcmF0ZSgpIDpcbiAgICAgICAgICAgIHRoaXMuYXJncy5yZXZlcnNlID8gdGhpcy5pdGVyYXRlV2l0aFJldmVyc2VDb3VudCgpIDpcbiAgICAgICAgICAgICAgICB0aGlzLml0ZXJhdGVXaXRoQ291bnQoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNsb25lSlNPTihvcHRpb25zKSksIHtcbiAgICAgIHN0YXJ0OiBvcHRpb25zLnN0YXJ0LFxuICAgICAgZW5kOiBvcHRpb25zLmVuZCxcbiAgICB9KTtcbiAgICB0aGlzLnJldmVyc2UgPSAodGhpcy5vcHRpb25zLmNvdW50ID09PSB1bmRlZmluZWQgJiYgYXJncy5yZXZlcnNlKSB8fCBmYWxzZTtcbiAgICBjb25zdCB7IHN0YXJ0LCBlbmQgfSA9IHRoaXMubm9ybWFsaXplRGF0ZVRpbWVBcmdzKGFyZ3MpO1xuICAgIGlmIChvcHRpb25zLmNvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc3RhcnQgPSBvcHRpb25zLnN0YXJ0O1xuICAgIH0gZWxzZSBpZiAoc3RhcnQgJiYgb3B0aW9ucy5zdGFydCkge1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0LmlzQWZ0ZXJPckVxdWFsKG9wdGlvbnMuc3RhcnQpID8gc3RhcnQgOiBvcHRpb25zLnN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQgfHwgb3B0aW9ucy5zdGFydDtcbiAgICB9XG4gICAgaWYgKGVuZCAmJiBvcHRpb25zLmVuZCkge1xuICAgICAgdGhpcy5lbmQgPSBlbmQuaXNCZWZvcmVPckVxdWFsKG9wdGlvbnMuZW5kKSA/IGVuZCA6IG9wdGlvbnMuZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVuZCA9IGVuZCB8fCBvcHRpb25zLmVuZDtcbiAgICB9XG4gICAgaWYgKHRoaXMuYXJncy5yZXZlcnNlICYmICEob3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkIHx8IHRoaXMuZW5kKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnV2hlbiBpdGVyYXRpbmcgaW4gcmV2ZXJzZSwgdGhlIHJ1bGUgbXVzdCBoYXZlIGFuIGBlbmRgIG9yIGBjb3VudGAgJyArXG4gICAgICAgICAgJ3Byb3BlcnR5IG9yIHlvdSBtdXN0IHByb3ZpZGUgYW4gYGVuZGAgYXJndW1lbnQuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuaXNJbmZpbml0ZSA9ICF0aGlzLmVuZCAmJiB0aGlzLm9wdGlvbnMuY291bnQgPT09IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhhc0R1cmF0aW9uID0gISF0aGlzLm9wdGlvbnMuZHVyYXRpb247XG4gICAgdGhpcy5ydWxlcyA9IEFycmF5LmlzQXJyYXkocmVjdXJyZW5jZVJ1bGVzKSA/IHJlY3VycmVuY2VSdWxlcyA6IHJlY3VycmVuY2VSdWxlcyh0aGlzKTtcbiAgfVxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcjtcbiAgfVxuICBuZXh0KGFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvci5uZXh0KGFyZ3MpO1xuICB9XG4gIC8qKlxuICAgKiBJbiB0aGUgcGlwZSBjb250cm9sbGVyLCB3ZSBoYXZlIGFuIGV4dHJhIGxldmVsIG9mIGluZGlyZWN0aW9uIHdpdGhcbiAgICogdGhlIGBydW4oKWAgYW5kIGBpdGVyYXRlKClgIG1ldGhvZHMuIFRoZSBgaXRlcmF0ZSgpYCBtZXRob2QgaXMgdGhlXG4gICAqIG1ldGhvZCB3aGljaCBhY3R1YWxseSBydW5zIHRoZSBsb2dpYyBpbiB0aGUgcGlwZXMuIElmIHdlIGRpZG4ndFxuICAgKiBuZWVkIHRvIGFjY291bnQgZm9yIHRoZSBgY291bnRgIHByb3BlcnR5IG9mIGEgcnVsZSwgd2Ugd291bGQgKm9ubHkqXG4gICAqIG5lZWQgdGhlIGl0ZXJhdGUgbWV0aG9kLi4uIHNvIG11Y2ggc2ltcGxlci4gQnV0IHdlIGRvIG5lZWQgdG8gYWNjb3VudFxuICAgKiBmb3IgcnVsZXMgd2l0aCBhIGBjb3VudGAgcHJvcGVydHkuXG4gICAqXG4gICAqIFJ1bGVzIHdpdGggYSBgY291bnRgIHByb3BlcnR5IG5lZWQgdG8gYmVnaW4gaXRlcmF0aW9uIGF0IHRoZSBiZWdpbm5pbmdcbiAgICogYmVjYXVzZSB0aGUgYGNvdW50YCBpcyBhbHdheXMgZnJvbSB0aGUgcnVsZSdzIHN0YXJ0IHRpbWUuIFNvIGlmIHNvbWVvbmVcbiAgICogcGFzc2VzIGluIGEgbmV3IHN0YXJ0IHRpbWUgYXMgYW4gYXJndW1lbnQgdG8gYSBydWxlIHdpdGggYGNvdW50YCwgd2VcbiAgICogbmVlZCB0byBzZWNyZXRseSBpdGVyYXRlIGZyb20gdGhlIGJlZ2lubmluZywgdHJhY2tpbmcgdGhlIG51bWJlciBvZlxuICAgKiBpdGVyYXRpb25zLCBhbmQgdGhlbiBvbmx5IHN0YXJ0IHlpZWxkaW5nIGRhdGVzIHdoZW4gd2UgcmVhY2ggdGhlIHNlY3Rpb25cbiAgICogdGhlIHVzZXIgY2FyZXMgYWJvdXQgKG9yLCBpZiB3ZSBoaXQgb3VyIGBjb3VudGAgcXVvdGEsIGNhbmNlbCBpdGVyYXRpbmcpLlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHdlIG5lZWQgdG8gaGFuZGxlIGl0ZXJhdGluZyBpbiByZXZlcnNlLiBJbiB0aGlzIGNhc2UsIHdlIGJ1aWxkXG4gICAqIHVwIGEgY2FjaGUgb2YgZGF0ZXMgYmV0d2VlbiB0aGUgcnVsZSdzIHN0YXJ0IHRpbWUgYW5kIHRoZSByZXZlcnNlIGl0ZXJhdGlvblxuICAgKiBzdGFydCBkYXRlLiBPbmNlIHdlIGhpdCB0aGUgcmV2ZXJzZSBpdGVyYXRpb24gc3RhcnQgZGF0ZSwgd2Ugc3RhcnRcbiAgICogeWllbGRpbmcgZGF0ZXMgaW4gdGhlIGNhY2hlLCBpbiByZXZlcnNlIG9yZGVyLlxuICAgKlxuICAgKiBJbiBnZW5lcmFsLCBJIGltYWdpbmUgdGhlIGNvdW50IG51bWJlciwgaWYgdXNlZCwgd2lsbCBiZSBzbWFsbC4gQnV0IGEgbGFyZ2VcbiAgICogY291bnQgd2lsbCBkZWZpbml0ZWx5IGhhdmUgYSBuZWdhdGl2ZSBwZXJmb3JtYW5jZSBhZmZlY3QuIEkgZG9uJ3QgdGhpbmtcbiAgICogdGhlcmUncyBhbnl0aGluZyB0byBiZSBkb25lIGFib3V0IHRoaXMuXG4gICAqL1xuICAqaXRlcmF0ZVdpdGhSZXZlcnNlQ291bnQoKSB7XG4gICAgY29uc3QgZGF0ZXMgPSBBcnJheS5mcm9tKHRoaXMuaXRlcmF0ZVdpdGhDb3VudCgpKS5yZXZlcnNlKCk7XG4gICAgbGV0IHlpZWxkQXJncztcbiAgICBjb25zdCBkYXRlQ2FjaGUgPSBkYXRlcy5zbGljZSgpO1xuICAgIGxldCBkYXRlID0gZGF0ZUNhY2hlLnNoaWZ0KCk7XG4gICAgd2hpbGUgKGRhdGUpIHtcbiAgICAgIGlmICh5aWVsZEFyZ3MgJiYgeWllbGRBcmdzLnNraXBUb0RhdGUgJiYgZGF0ZS5pc0FmdGVyKHlpZWxkQXJncy5za2lwVG9EYXRlKSkge1xuICAgICAgICBkYXRlID0gZGF0ZUNhY2hlLnNoaWZ0KCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgeWllbGRBcmdzID0geWllbGQgZGF0ZTtcbiAgICAgIGlmICh5aWVsZEFyZ3MgJiYgeWllbGRBcmdzLnNraXBUb0RhdGUgJiYgeWllbGRBcmdzLnNraXBUb0RhdGUuaXNBZnRlck9yRXF1YWwoZGF0ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBIHByb3ZpZGVkIGBza2lwVG9EYXRlYCBvcHRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIGxhc3QgeWllbGRlZCBkYXRlICcgK1xuICAgICAgICAgICAgJyhvciBzbWFsbGVyLCBpbiB0aGUgY2FzZSBvZiByZXZlcnNlIGl0ZXJhdGlvbiknLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGF0ZSA9IGRhdGVDYWNoZS5zaGlmdCgpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gICppdGVyYXRlV2l0aENvdW50KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuY291bnQgPT09IDApIHJldHVybjtcbiAgICBjb25zdCBpdGVyYWJsZSA9IHRoaXMuaXRlcmF0ZSgpO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5hcmdzLnN0YXJ0IHx8IHRoaXMuc3RhcnQ7XG4gICAgbGV0IGRhdGUgPSBpdGVyYWJsZS5uZXh0KCkudmFsdWU7XG4gICAgbGV0IGluZGV4ID0gMTtcbiAgICBsZXQgeWllbGRBcmdzO1xuICAgIHdoaWxlIChkYXRlICYmIGluZGV4IDw9IHRoaXMub3B0aW9ucy5jb3VudCkge1xuICAgICAgaW5kZXgrKztcbiAgICAgIGlmIChkYXRlLmlzQmVmb3JlKHN0YXJ0KSkge1xuICAgICAgICBkYXRlID0gaXRlcmFibGUubmV4dCgpLnZhbHVlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh5aWVsZEFyZ3MgJiYgeWllbGRBcmdzLnNraXBUb0RhdGUgJiYgZGF0ZS5pc0JlZm9yZSh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSkpIHtcbiAgICAgICAgZGF0ZSA9IGl0ZXJhYmxlLm5leHQoKS52YWx1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB5aWVsZEFyZ3MgPSB5aWVsZCBkYXRlO1xuICAgICAgaWYgKHlpZWxkQXJncyAmJiB5aWVsZEFyZ3Muc2tpcFRvRGF0ZSAmJiB5aWVsZEFyZ3Muc2tpcFRvRGF0ZS5pc0JlZm9yZU9yRXF1YWwoZGF0ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBIHByb3ZpZGVkIGBza2lwVG9EYXRlYCBvcHRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIGxhc3QgeWllbGRlZCBkYXRlICcgK1xuICAgICAgICAgICAgJyhvciBzbWFsbGVyLCBpbiB0aGUgY2FzZSBvZiByZXZlcnNlIGl0ZXJhdGlvbiknLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGF0ZSA9IGl0ZXJhYmxlLm5leHQoKS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICAqaXRlcmF0ZSgpIHtcbiAgICBsZXQgc3RhcnRpbmdEYXRlID0gdGhpcy5zdGFydDtcbiAgICBpZiAodGhpcy5yZXZlcnNlKSBzdGFydGluZ0RhdGUgPSB0aGlzLmVuZDtcbiAgICBsZXQgZGF0ZSA9IHRoaXMubmV4dERhdGUoc3RhcnRpbmdEYXRlKTtcbiAgICB3aGlsZSAoZGF0ZSkge1xuICAgICAgY29uc3QgYXJncyA9IHlpZWxkIHRoaXMubm9ybWFsaXplUnVuT3V0cHV0KGRhdGUpO1xuICAgICAgaWYgKGFyZ3MgJiYgYXJncy5za2lwVG9EYXRlKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLnJldmVyc2VcbiAgICAgICAgICAgID8gYXJncy5za2lwVG9EYXRlLmlzQWZ0ZXJPckVxdWFsKGRhdGUpXG4gICAgICAgICAgICA6IGFyZ3Muc2tpcFRvRGF0ZS5pc0JlZm9yZU9yRXF1YWwoZGF0ZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gV2UgY2Fubm90IGNvbnNpc3RlbnRseSBza2lwIGJhY2t3YXJkcyBiZWNhdXNlIGFmdGVyIGFuIGl0ZXJhdG9yIGlzIFwiZG9uZVwiXG4gICAgICAgICAgLy8gaXQgYWx3YXlzIHJldHVybnMgdW5kZWZpbmVkIGFuZCB5b3UgY2Fubm90IHJlc2V0IGl0LiBUaGVvcmV0aWNhbGx5LCBpdCB3b3VsZCBiZVxuICAgICAgICAgIC8vIGZpbmUgdG8gc2tpcCBiYWNrd2FyZHMgaWYgdGhlIGl0ZXJhdG9yIHdhc24ndCBhbHJlYWR5IFwiZG9uZVwiLCBidXQgdGhpc1xuICAgICAgICAgIC8vIHdvdWxkIGJlIHByb25lIHRvIHVzZXIgZXJyb3Igc28gd2Ugc2ltcGx5IGRpc2FsbG93IHNraXBwaW5nIGJhY2t3YXJkcyBhbHRvZ2V0aGVyLlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdBIHByb3ZpZGVkIGBza2lwVG9EYXRlYCBvcHRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIGxhc3QgeWllbGRlZCBkYXRlICcgK1xuICAgICAgICAgICAgICAnKG9yIHNtYWxsZXIsIGluIHRoZSBjYXNlIG9mIHJldmVyc2UgaXRlcmF0aW9uKScsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRlID0gdGhpcy5uZXh0RGF0ZShhcmdzLnNraXBUb0RhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZSA9IHRoaXMubmV4dERhdGUoXG4gICAgICAgICAgdGhpcy5yZXZlcnNlID8gZGF0ZS5zdWJ0cmFjdCgxLCAnbWlsbGlzZWNvbmQnKSA6IGRhdGUuYWRkKDEsICdtaWxsaXNlY29uZCcpLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiBMb29wcyB0aHJvdWdoIHRoZSByZWN1cnJlbmNlIHJ1bGVzIHVudGlsIGEgdmFsaWQgZGF0ZSBpcyBmb3VuZC5cbiAgICovXG4gIG5leHREYXRlKHN0YXJ0KSB7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucnVuUnVsZXMoc3RhcnQuc2V0KCdnZW5lcmF0b3JzJywgW10pKTtcbiAgICBpZiAodGhpcy5pc0RhdGVQYXN0RW5kKHJlc3VsdC5kYXRlKSkgcmV0dXJuIG51bGw7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVzdWx0IGluc3RhbmNlb2YgSW52YWxpZERhdGVUaW1lICYmIGluZGV4IDwgNTApIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMucnVuUnVsZXMocmVzdWx0LmRhdGUpO1xuICAgICAgaWYgKHRoaXMuaXNEYXRlUGFzdEVuZChyZXN1bHQuZGF0ZSkpIHJldHVybiBudWxsO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEludmFsaWREYXRlVGltZSkge1xuICAgICAgdGhyb3cgbmV3IFJlY3VycmVuY2VSdWxlRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gZmluZCBhIG1hdGNoaW5nIG9jY3VycmVuY2UgaW4gJHtpbmRleH0gaXRlcmF0aW9ucy4gYCArXG4gICAgICAgICAgYExhc3QgaXRlcmF0ZWQgZGF0ZTogXCIke3Jlc3VsdC5kYXRlLnRvSVNPU3RyaW5nKCl9XCJgLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucmV2ZXJzZSA/IHN0YXJ0LmlzQmVmb3JlKHJlc3VsdC5kYXRlKSA6IHN0YXJ0LmlzQWZ0ZXIocmVzdWx0LmRhdGUpKSB7XG4gICAgICB0aHJvdyBuZXcgUmVjdXJyZW5jZVJ1bGVFcnJvcihcbiAgICAgICAgJ0FuIGVycm9yIG9jY3VycmVkIGluIGEgcmVjdXJyZW5jZSBydWxlLiBJZiB0aGlzIGhhcHBlbmVkIHVzaW5nICcgK1xuICAgICAgICAgICd0aGUgclNjaGVkdWxlIHByb3ZpZGVkIHJlY3VycmVuY2UgcnVsZXMsIHlvdSBzaG91bGQgJyArXG4gICAgICAgICAgJ29wZW4gYW4gaXNzdWUgaW4gdGhlIHJTY2hlZHVsZSByZXBvLiBUaGUgbWFpbnRhaW5lciBpcyBnb2luZyB0byAnICtcbiAgICAgICAgICAnd2FudCB0byBrbm93IGhvdyB0byByZWNyZWF0ZSB0aGUgZXJyb3IuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuZGF0ZTtcbiAgfVxuICAvKipcbiAgICogUGVyZm9ybXMgb25lIHJ1biBvZiB0aGUgcmVjdXJyZW5jZSBydWxlcyBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LlxuICAgKiBJdCdzIGEgc2xpZ2h0bHkgb3B0aW1pemVkIHJlZHVjZXIgZnVuY3Rpb24uXG4gICAqL1xuICBydW5SdWxlcyhzdGFydCkge1xuICAgIGxldCByZXN1bHQgPSBuZXcgVmFsaWREYXRlVGltZShzdGFydCk7XG4gICAgZm9yIChjb25zdCBydWxlIG9mIHRoaXMucnVsZXMpIHtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBJbnZhbGlkRGF0ZVRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHJ1bGUucnVuKHJlc3VsdC5kYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpc0RhdGVQYXN0RW5kKGRhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5yZXZlcnNlID8gZGF0ZS5pc0JlZm9yZSh0aGlzLnN0YXJ0KSA6IHRoaXMuZW5kICYmIGRhdGUuaXNBZnRlcih0aGlzLmVuZCk7XG4gIH1cbiAgbm9ybWFsaXplUnVuT3V0cHV0KGRhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNEdXJhdGlvbiA/IGRhdGUuc2V0KCdkdXJhdGlvbicsIHRoaXMub3B0aW9ucy5kdXJhdGlvbikgOiBkYXRlO1xuICB9XG4gIG5vcm1hbGl6ZURhdGVUaW1lQXJncyhhcmdzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBhcmdzLnN0YXJ0ICYmIG5vcm1hbGl6ZURhdGVUaW1lVGltZXpvbmUoYXJncy5zdGFydCwgdGhpcy5vcHRpb25zLnN0YXJ0LnRpbWV6b25lKSxcbiAgICAgIGVuZDogYXJncy5lbmQgJiYgbm9ybWFsaXplRGF0ZVRpbWVUaW1lem9uZShhcmdzLmVuZCwgdGhpcy5vcHRpb25zLnN0YXJ0LnRpbWV6b25lKSxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIEFyZ3VtZW50RXJyb3IsXG4gIERhdGVBZGFwdGVyLFxuICBEYXRlQWRhcHRlckJhc2UsXG4gIERhdGVUaW1lLFxuICBJbmZpbml0ZUxvb3BFcnJvcixcbiAgSW52YWxpZERhdGVBZGFwdGVyRXJyb3IsXG4gIEludmFsaWREYXRlVGltZSxcbiAgSW52YWxpZERhdGVUaW1lRXJyb3IsXG4gIFJlY3VycmVuY2VSdWxlRXJyb3IsXG4gIFJlY3VycmVuY2VSdWxlc0l0ZXJhdG9yLFxuICBSdWxlT3B0aW9uRXJyb3IsXG4gIFZhbGlkRGF0ZVRpbWUsXG4gIGNsb25lSlNPTixcbiAgY2xvbmVSdWxlT3B0aW9ucyxcbiAgZGF0ZUlucHV0VG9EYXRlQWRhcHRlcixcbiAgZGF0ZUlucHV0VG9EYXRlVGltZSxcbiAgZGF0ZVRpbWVTb3J0Q29tcGFyZXIsXG4gIGZyZXFUb0dyYW51bGFyaXR5LFxuICBnZXREYXlzSW5ZZWFyLFxuICBnZXREaWZmZXJlbmNlQmV0d2VlbldlZWtkYXlzLFxuICBpc0xlYXBZZWFyLFxuICBub3JtYWxpemVEYXRlVGltZVRpbWV6b25lLFxuICBub3JtYWxpemVSdWxlT3B0aW9ucyxcbiAgbnVtYmVyU29ydENvbXBhcmVyLFxuICBvcmRlcmVkV2Vla2RheXMsXG4gIHJlY3VycmVuY2VSdWxlc1JlZHVjZXIsXG4gIHVuaXFEYXRlVGltZXMsXG59O1xuIiwiaW1wb3J0IHtcbiAgQXJndW1lbnRFcnJvcixcbiAgZ2V0RGlmZmVyZW5jZUJldHdlZW5XZWVrZGF5cyxcbiAgRGF0ZUFkYXB0ZXJCYXNlIGFzIERhdGVBZGFwdGVyQmFzZSQxLFxuICBkYXRlSW5wdXRUb0RhdGVUaW1lLFxuICBkYXRlSW5wdXRUb0RhdGVBZGFwdGVyLFxuICBub3JtYWxpemVEYXRlVGltZVRpbWV6b25lIGFzIG5vcm1hbGl6ZURhdGVUaW1lVGltZXpvbmUkMSxcbiAgSW5maW5pdGVMb29wRXJyb3IsXG4gIGRhdGVUaW1lU29ydENvbXBhcmVyLFxuICBjbG9uZVJ1bGVPcHRpb25zLFxuICBub3JtYWxpemVSdWxlT3B0aW9ucyxcbiAgUmVjdXJyZW5jZVJ1bGVzSXRlcmF0b3IsXG4gIHJlY3VycmVuY2VSdWxlc1JlZHVjZXIsXG4gIERhdGVUaW1lIGFzIERhdGVUaW1lJDEsXG59IGZyb20gJ0Byc2NoZWR1bGUvY29yZSc7XG5cbmNsYXNzIE9jY3VycmVuY2VHZW5lcmF0b3Ige1xuICBjb25zdHJ1Y3RvcihhcmdzID0ge30pIHtcbiAgICB0aGlzLnRpbWV6b25lID0gYXJncy50aW1lem9uZSAhPT0gdW5kZWZpbmVkID8gYXJncy50aW1lem9uZSA6IG51bGw7XG4gICAgdGhpcy5tYXhEdXJhdGlvbiA9IGFyZ3MubWF4RHVyYXRpb24gfHwgMDtcbiAgfVxuICAvKiogUmV0dXJucyB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvciwgaWYgdGhlcmUgYXJlIG5vIG9jY3VycmVuY2VzLCBudWxsLiAqL1xuICBnZXQgZmlyc3REYXRlKCkge1xuICAgIGlmICh0aGlzLl9maXJzdERhdGUgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuX2ZpcnN0RGF0ZTtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuX3J1bigpLm5leHQoKS52YWx1ZTtcbiAgICB0aGlzLl9maXJzdERhdGUgPSBzdGFydCA/IHRoaXMuZGF0ZUFkYXB0ZXIuZnJvbURhdGVUaW1lKHN0YXJ0KSA6IG51bGw7XG4gICAgcmV0dXJuIHRoaXMuX2ZpcnN0RGF0ZTtcbiAgfVxuICAvKiogSWYgZ2VuZXJhdG9yIGlzIGluZmluaXRlLCByZXR1cm5zIGBudWxsYC4gT3RoZXJ3aXNlIHJldHVybnMgdGhlIGVuZCBkYXRlICovXG4gIGdldCBsYXN0RGF0ZSgpIHtcbiAgICBpZiAodGhpcy5fbGFzdERhdGUgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuX2xhc3REYXRlO1xuICAgIGlmICh0aGlzLmlzSW5maW5pdGUpIHtcbiAgICAgIHRoaXMuX2xhc3REYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBlbmQgPSB0aGlzLl9ydW4oeyByZXZlcnNlOiB0cnVlIH0pLm5leHQoKS52YWx1ZTtcbiAgICB0aGlzLl9sYXN0RGF0ZSA9IGVuZCA/IHRoaXMuZGF0ZUFkYXB0ZXIuZnJvbURhdGVUaW1lKGVuZCkgOiBudWxsO1xuICAgIHJldHVybiB0aGlzLl9sYXN0RGF0ZTtcbiAgfVxuICBwaXBlKC4uLm9wZXJhdG9ycykge1xuICAgIHJldHVybiBvcGVyYXRvcnMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBjdXJyKHsgYmFzZTogcHJldiwgdGltZXpvbmU6IHRoaXMudGltZXpvbmUgfSksIHRoaXMpO1xuICB9XG4gIC8qKlxuICAgICAqIFByb2Nlc3NlcyB0aGUgb2JqZWN0J3MgcnVsZXMvZGF0ZXMgYW5kIHJldHVybnMgYW4gaXRlcmFibGUgZm9yIHRoZSBvY2N1cnJlbmNlcy5cbiAgICAgKlxuICAgICAqIE9wdGlvbnMgb2JqZWN0OlxuICAgICAqIC0gYHN0YXJ0YCB0aGUgZGF0ZSB0byBiZWdpbiBpdGVyYXRpb24gb25cbiAgICAgKiAtIGBlbmRgIHRoZSBkYXRlIHRvIGVuZCBpdGVyYXRpb24gb25cbiAgICAgKiAtIGB0YWtlYCB0aGUgbWF4IG51bWJlciBvZiBkYXRlcyB0byB0YWtlIGJlZm9yZSBlbmRpbmcgaXRlcmF0aW9uXG4gICAgICogLSBgcmV2ZXJzZWAgd2hldGhlciB0byBpdGVyYXRlIGluIHJldmVyc2Ugb3Igbm90XG4gICAgICpcbiAgICAgKiBFeGFtcGxlczpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IGl0ZXJhdG9yID0gc2NoZWR1bGUub2NjdXJyZW5jZXMoeyBzdGFydDogbmV3IERhdGUoKSwgdGFrZTogNSB9KTtcbiAgICAgXG4gICAgICogZm9yIChjb25zdCBkYXRlIG9mIGl0ZXJhdG9yKSB7XG4gICAgICogICAvLyBkbyBzdHVmZlxuICAgICAqIH1cbiAgXG4gICAgICogaXRlcmF0b3IudG9BcnJheSgpIC8vIHJldHVybnMgRGF0ZSBhcnJheVxuICAgICAqIGl0ZXJhdG9yLm5leHQoKS52YWx1ZSAvLyByZXR1cm5zIG5leHQgRGF0ZVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG4gIG9jY3VycmVuY2VzKGFyZ3MgPSB7fSkge1xuICAgIHJldHVybiBuZXcgT2NjdXJyZW5jZUl0ZXJhdG9yKHRoaXMsIHRoaXMubm9ybWFsaXplT2NjdXJyZW5jZXNBcmdzKGFyZ3MpKTtcbiAgfVxuICAvKipcbiAgICogSXRlcmF0ZXMgb3ZlciB0aGUgb2JqZWN0J3Mgb2NjdXJyZW5jZXMgYW5kIGJ1bmRsZXMgdGhlbSBpbnRvIGNvbGxlY3Rpb25zXG4gICAqIHdpdGggYSBzcGVjaWZpZWQgZ3JhbnVsYXJpdHkgKGRlZmF1bHQgaXMgYFwiWUVBUkxZXCJgKS4gTWFrZSBzdXJlIHRvXG4gICAqIHJlYWQgYWJvdXQgZWFjaCBvcHRpb24gJiBjb21iaW5hdGlvbiBvZiBvcHRpb25zIGJlbG93LlxuICAgKlxuICAgKiBPcHRpb25zIG9iamVjdDpcbiAgICogICAtIHN0YXJ0PzogRGF0ZUFkYXB0ZXJcbiAgICogICAtIGVuZD86IERhdGVBZGFwdGVyXG4gICAqICAgLSB0YWtlPzogbnVtYmVyXG4gICAqICAgLSByZXZlcnNlPzogTk9UIFNVUFBPUlRFRFxuICAgKiAgIC0gZ3JhbnVsYXJpdHk/OiBDb2xsZWN0aW9uc0dyYW51bGFyaXR5XG4gICAqICAgLSB3ZWVrU3RhcnQ/OiBEYXRlQWRhcHRlci5XZWVrZGF5XG4gICAqICAgLSBza2lwRW1wdHlQZXJpb2RzPzogYm9vbGVhblxuICAgKlxuICAgKiBSZXR1cm5lZCBgQ29sbGVjdGlvbmAgb2JqZWN0OlxuICAgKlxuICAgKiAgIC0gYGRhdGVzYCBwcm9wZXJ0eSBjb250YWluaW5nIGFuIGFycmF5IG9mIERhdGVBZGFwdGVyIG9iamVjdHMuXG4gICAqICAgLSBgZ3JhbnVsYXJpdHlgIHByb3BlcnR5IGNvbnRhaW5pbmcgdGhlIGdyYW51bGFyaXR5LlxuICAgKiAgICAgLSBgQ29sbGVjdGlvbnNHcmFudWxhcml0eWAgPT09IGBSdWxlT3B0aW9ucy5GcmVxdWVuY3lgLlxuICAgKiAgICAgLSBkZWZhdWx0IGlzIGBcIllFQVJMWVwiYFxuICAgKiAgIC0gYHBlcmlvZFN0YXJ0YCBwcm9wZXJ0eSBjb250YWluaW5nIGEgRGF0ZUFkYXB0ZXIgZXF1YWwgdG8gdGhlIHBlcmlvZCdzXG4gICAqICAgICBzdGFydCB0aW1lLlxuICAgKiAgIC0gYHBlcmlvZEVuZGAgcHJvcGVydHkgY29udGFpbmluZyBhIERhdGVBZGFwdGVyIGVxdWFsIHRvIHRoZSBwZXJpb2Qnc1xuICAgKiAgICAgZW5kIHRpbWUuXG4gICAqXG4gICAqICMjIyMgRGV0YWlsczpcbiAgICpcbiAgICogYGNvbGxlY3Rpb25zKClgIGFsd2F5cyByZXR1cm5zIGZ1bGwgcGVyaW9kcy4gVGhpcyBtZWFucyB0aGF0IHRoZSBgc3RhcnRgIGFyZ3VtZW50IGlzXG4gICAqIHRyYW5zZm9ybWVkIHRvIGJlIHRoZSBzdGFydCBvZiB3aGF0ZXZlciBwZXJpb2QgdGhlIGBzdGFydGAgYXJndW1lbnQgaXMgaW4sIGFuZCB0aGVcbiAgICogYGVuZGAgYXJndW1lbnQgaXMgdHJhbnNmb3JtZWQgdG8gYmUgdGhlIGVuZCBvZiB3aGF0ZXZlciBwZXJpb2QgdGhlIGBlbmRgIGFyZ3VtZW50IGlzXG4gICAqIGluLlxuICAgKlxuICAgKiAtIEV4YW1wbGU6IHdpdGggZ3JhbnVsYXJpdHkgYFwiWUVBUkxZXCJgLCB0aGUgYHN0YXJ0YCBhcmd1bWVudCB3aWxsIGJlIHRyYW5zZm9ybWVkIHRvIGJlIHRoZVxuICAgKiAgIHN0YXJ0IG9mIHRoZSB5ZWFyIHBhc3NlZCBpbiB0aGUgYHN0YXJ0YCBhcmd1bWVudCwgYW5kIHRoZSBgZW5kYCBhcmd1bWVudCB3aWxsIGJlIHRyYW5zZm9ybWVkXG4gICAqICAgdG8gYmUgdGhlIGVuZCBvZiB0aGUgeWVhciBwYXNzZWQgaW4gdGhlIGBlbmRgIGFyZ3VtZW50LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgYHBlcmlvZFN0YXJ0YCB2YWx1ZSBvZiBgQ29sbGVjdGlvbmAgb2JqZWN0cyBwcm9kdWNlZCBieSB0aGlzIG1ldGhvZCBpbmNyZW1lbnRzIGxpbmVhcmx5LlxuICAgKiBUaGlzIG1lYW5zIHRoZSByZXR1cm5lZCBgQ29sbGVjdGlvbiNkYXRlc2AgcHJvcGVydHkgbWF5IGhhdmUgbGVuZ3RoIDAuIFRoaXMgY2FuIGJlIGNoYW5nZWQgYnlcbiAgICogcGFzc2luZyB0aGUgYHNraXBFbXB0eVBlcmlvZHM6IHRydWVgIG9wdGlvbiwgaW4gd2hpY2ggY2FzZSB0aGUgYHBlcmlvZFN0YXJ0YCBmcm9tIG9uZSBjb2xsZWN0aW9uIHRvIHRoZVxuICAgKiBuZXh0IGNhbiBcImp1bXBcIi5cbiAgICpcbiAgICogLSBFeGFtcGxlIDE6IGlmIHlvdXIgb2JqZWN0J3MgZmlyc3Qgb2NjdXJyZW5jZSBpcyAyMDE5LzIvMSAoRmVicnVhcnkgMXN0KSBhbmQgeW91IGNhbGxcbiAgICogICBgY29sbGVjdGlvbih7c2tpcEVtcHR5UGVyaW9kczogdHJ1ZSwgZ3JhbnVsYXJpdHk6ICdEQUlMWScsIHN0YXJ0OiBuZXcgRGF0ZSgyMDE5LDAsMSl9KWBcbiAgICogICAoc28gc3RhcnRpbmcgb24gSmFudWFyeSAxc3QpLCB0aGUgZmlyc3QgQ29sbGVjdGlvbiBwcm9kdWNlZCB3aWxsIGhhdmUgYSBgcGVyaW9kU3RhcnRgIGluIEZlYnJ1YXJ5LlxuICAgKlxuICAgKiAtIEV4YW1wbGUgMjogaWYgeW91ciBvYmplY3QncyBmaXJzdCBvY2N1cnJlbmNlIGlzIDIwMTkvMi8xIChGZWJydWFyeSAxc3QpIGFuZCB5b3UgY2FsbFxuICAgKiAgIGBjb2xsZWN0aW9uKHtncmFudWxhcml0eTogJ0RBSUxZJywgc3RhcnQ6IG5ldyBEYXRlKDIwMTksMCwxKX0pYFxuICAgKiAgIChzbyBzdGFydGluZyBvbiBKYW51YXJ5IDFzdCksIHRoZSBmaXJzdCBjb2xsZWN0aW9uIHByb2R1Y2VkIHdpbGwgaGF2ZSBhIGBDb2xsZWN0aW9uI3BlcmlvZFN0YXJ0YFxuICAgKiAgIG9mIEphbnVhcnkgMXN0IGFuZCBoYXZlIGBDb2xsZWN0aW9uI2RhdGVzID09PSBbXWAuIFNpbWlsYXJseSwgdGhlIG5leHQgMzAgY29sbGVjdGlvbnMgcHJvZHVjZWRcbiAgICogICAoSmFuIDJuZCAtIDMxc3QpIHdpbGwgYWxsIGNvbnRhaW4gYW4gZW1wdHkgYXJyYXkgZm9yIHRoZSBgZGF0ZXNgIHByb3BlcnR5LiBUaGVuIHRoZSBGZWJydWFyeSAxc3RcbiAgICogICBgQ29sbGVjdGlvbmAgd2lsbCBjb250YWluIGRhdGVzLlxuICAgKlxuICAgKiBXaGVuIGdpdmluZyBhIGB0YWtlYCBhcmd1bWVudCB0byBgY29sbGVjdGlvbnMoKWAsIHlvdSBhcmUgc3BlY2lmeWluZ1xuICAgKiB0aGUgbnVtYmVyIG9mIGBDb2xsZWN0aW9uYCBvYmplY3RzIHRvIHJldHVybiAocmF0aGVyIHRoYW4gb2NjdXJyZW5jZXMpLlxuICAgKlxuICAgKiBXaGVuIGNob29zaW5nIGEgZ3JhbnVsYXJpdHkgb2YgYFwiV0VFS0xZXCJgLCB0aGUgYHdlZWtTdGFydGAgb3B0aW9uIGlzIHJlcXVpcmVkLlxuICAgKlxuICAgKiBXaGVuIGNob29zaW5nIGEgZ3JhbnVsYXJpdHkgb2YgYFwiTU9OVEhMWVwiYDpcbiAgICpcbiAgICogLSBJZiB0aGUgYHdlZWtTdGFydGAgb3B0aW9uICppcyBub3QqIHByZXNlbnQsIHdpbGwgZ2VuZXJhdGUgY29sbGVjdGlvbnMgd2l0aFxuICAgKiAgIHRoZSBgcGVyaW9kU3RhcnRgIGFuZCBgcGVyaW9kRW5kYCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgZWFjaCBtb250aC5cbiAgICpcbiAgICogLSBJZiB0aGUgYHdlZWtTdGFydGAgb3B0aW9uICppcyogcHJlc2VudCwgd2lsbCBnZW5lcmF0ZSBjb2xsZWN0aW9ucyB3aXRoIHRoZVxuICAgKiAgIGBwZXJpb2RTdGFydGAgZXF1YWwgdG8gdGhlIHN0YXJ0IG9mIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSBtb250aCwgYW5kIHRoZVxuICAgKiAgIGBwZXJpb2RFbmRgIGVxdWFsIHRvIHRoZSBlbmQgb2YgdGhlIGxhc3Qgd2VlayBvZiB0aGUgbW9udGguIFRoaXMgYmVoYXZpb3IgY291bGQgYmVcbiAgICogICBkZXNpcmVkIHdoZW4gcmVuZGVyaW5nIG9wcG9ydHVuaXRpZXMgaW4gYSBjYWxlbmRhciB2aWV3LCB3aGVyZSB0aGUgY2FsZW5kYXIgcmVuZGVyc1xuICAgKiAgIGZ1bGwgd2Vla3MgKHdoaWNoIG1heSByZXN1bHQgaW4gdGhlIGNhbGVuZGFyIGRpc3BsYXlpbmcgZGF0ZXMgaW4gdGhlXG4gICAqICAgcHJldmlvdXMgb3IgbmV4dCBtb250aHMpLlxuICAgKlxuICAgKi9cbiAgY29sbGVjdGlvbnMoYXJncyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uSXRlcmF0b3IodGhpcywgdGhpcy5ub3JtYWxpemVDb2xsZWN0aW9uc0FyZ3MoYXJncykpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYW4gb2NjdXJyZW5jZSBzdGFydHMgb24gb3IgYmV0d2VlbiB0aGUgcHJvdmlkZWQgc3RhcnQvZW5kXG4gICAqIGRhdGV0aW1lcy4gSWYgdGhlIGBleGNsdWRlRW5kc2Agb3B0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIG9jY3VycmVuY2VzXG4gICAqIGVxdWFsIHRvIHRoZSBzdGFydC9lbmQgdGltZXMgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqIElmIHRoZSBvY2N1cnJlbmNlIGdlbmVyYXRvciBoYXMgYSBkdXJhdGlvbiwgYW5kIGBleGNsdWRlRW5kcyAhPT0gdHJ1ZWAsXG4gICAqIGFuZCBhIGBtYXhEdXJhdGlvbmAgYXJndW1lbnQgaXMgc3VwcGxpZWQgKGVpdGhlciBpbiB0aGUgY29uc3RydWN0b3Igb3JcbiAgICogaGVyZSksIHRoZW4gYW55IG9jY3VycmVuY2UgdGhhdCdzIHRpbWUgb3ZlcmxhcHMgd2l0aCB0aGUgc3RhcnQvZW5kIHRpbWVzXG4gICAqIHJldHVybiB0cnVlLlxuICAgKi9cbiAgb2NjdXJzQmV0d2VlbihzdGFydElucHV0LCBlbmRJbnB1dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChzdGFydElucHV0KTtcbiAgICBjb25zdCBlbmQgPSB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChlbmRJbnB1dCk7XG4gICAgaWYgKHRoaXMuaGFzRHVyYXRpb24gJiYgIW9wdGlvbnMuZXhjbHVkZUVuZHMpIHtcbiAgICAgIGNvbnN0IG1heER1cmF0aW9uID0gdGhpcy5nZXRNYXhEdXJhdGlvbignb2NjdXJzQmV0d2VlbicsIG9wdGlvbnMpO1xuICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLl9ydW4oe1xuICAgICAgICBzdGFydDogc3RhcnQuc3VidHJhY3QobWF4RHVyYXRpb24sICdtaWxsaXNlY29uZCcpLFxuICAgICAgICBlbmQsXG4gICAgICAgIHJldmVyc2U6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIGZvciAoY29uc3QgZGF5IG9mIGl0ZXJhdG9yKSB7XG4gICAgICAgIGlmIChkYXkuZW5kLmlzQmVmb3JlKHN0YXJ0KSkgY29udGludWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGRheSBvZiB0aGlzLl9ydW4oeyBzdGFydCwgZW5kIH0pKSB7XG4gICAgICBpZiAob3B0aW9ucy5leGNsdWRlRW5kcykge1xuICAgICAgICBpZiAoZGF5LmlzRXF1YWwoc3RhcnQpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheS5pc0VxdWFsKGVuZCkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBvY2N1cnNPbihyYXdBcmdzKSB7XG4gICAgY29uc3QgYXJncyA9IHRoaXMubm9ybWFsaXplT2NjdXJzT25BcmdzKHJhd0FyZ3MpO1xuICAgIGlmIChhcmdzLndlZWtkYXkpIHtcbiAgICAgIGlmICh0aGlzLmlzSW5maW5pdGUgJiYgIWFyZ3MuYmVmb3JlKSB7XG4gICAgICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKFxuICAgICAgICAgICdXaGVuIGNhbGxpbmcgYG9jY3Vyc09uKClgIHdpdGggYSBgd2Vla2RheWAgYXJndW1lbnQgJyArXG4gICAgICAgICAgICAnYW5kIGFuIG9jY3VycmVuY2Ugb2JqZWN0IHRoYXQgaGFzIGluZmluaXRlIG9jY3VycmVuY2VzLCAnICtcbiAgICAgICAgICAgICd5b3UgbXVzdCBpbmNsdWRlIGEgYGJlZm9yZWAgYXJndW1lbnQgYXMgd2VsbC4nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhcnQgPSBhcmdzLmFmdGVyICYmIChhcmdzLmV4Y2x1ZGVFbmRzID8gYXJncy5hZnRlci5hZGQoMSwgJ2RheScpIDogYXJncy5hZnRlcik7XG4gICAgICBjb25zdCBlbmQgPSBhcmdzLmJlZm9yZSAmJiAoYXJncy5leGNsdWRlRW5kcyA/IGFyZ3MuYmVmb3JlLnN1YnRyYWN0KDEsICdkYXknKSA6IGFyZ3MuYmVmb3JlKTtcbiAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5fcnVuKHsgc3RhcnQsIGVuZCB9KTtcbiAgICAgIGxldCBkYXRlID0gaXRlcmF0b3IubmV4dCgpLnZhbHVlO1xuICAgICAgaWYgKCFkYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgICB3aGlsZSAoZGF0ZSkge1xuICAgICAgICBpZiAoZGF0ZS5nZXQoJ3dlZWtkYXknKSA9PT0gYXJncy53ZWVrZGF5KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZGF0ZSA9IGl0ZXJhdG9yLm5leHQoe1xuICAgICAgICAgIHNraXBUb0RhdGU6IGRhdGVcbiAgICAgICAgICAgIC5hZGQoZ2V0RGlmZmVyZW5jZUJldHdlZW5XZWVrZGF5cyhkYXRlLmdldCgnd2Vla2RheScpLCBhcmdzLndlZWtkYXkpLCAnZGF5JylcbiAgICAgICAgICAgIC5ncmFudWxhcml0eSgnZGF5JyksXG4gICAgICAgIH0pLnZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWFyZ3MuZGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoXG4gICAgICAgIGBcIm9jY3Vyc09uKClcIiBtdXN0IGJlIGNhbGxlZCB3aXRoIGVpdGhlciBhIFwiZGF0ZVwiIG9yIFwid2Vla2RheVwiIGFyZ3VtZW50YCxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0aGlzLmhhc0R1cmF0aW9uKSB7XG4gICAgICBjb25zdCBtYXhEdXJhdGlvbiA9IHRoaXMuZ2V0TWF4RHVyYXRpb24oJ29jY3Vyc09uJywgYXJncyk7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuX3J1bih7XG4gICAgICAgIHN0YXJ0OiBhcmdzLmRhdGUuc3VidHJhY3QobWF4RHVyYXRpb24sICdtaWxsaXNlY29uZCcpLFxuICAgICAgICBlbmQ6IGFyZ3MuZGF0ZSxcbiAgICAgIH0pO1xuICAgICAgZm9yIChjb25zdCBkYXRlIG9mIGl0ZXJhdG9yKSB7XG4gICAgICAgIGlmIChkYXRlLmVuZC5pc0JlZm9yZShhcmdzLmRhdGUpKSBjb250aW51ZTtcbiAgICAgICAgaWYgKGRhdGUuaXNBZnRlcihhcmdzLmRhdGUpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGRheSBvZiB0aGlzLl9ydW4oeyBzdGFydDogYXJncy5kYXRlLCBlbmQ6IGFyZ3MuZGF0ZSB9KSkge1xuICAgICAgcmV0dXJuICEhZGF5O1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhbiBvY2N1cnJlbmNlIHN0YXJ0cyBhZnRlciB0aGUgcHJvdmlkZWQgZGF0ZXRpbWUuXG4gICAqIElmIHRoZSBgZXhjbHVkZVN0YXJ0YCBvcHRpb24gaXMgcHJvdmlkZWQsIHRoZW4gb2NjdXJyZW5jZXNcbiAgICogZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGRhdGV0aW1lIGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiBJZiB0aGUgb2NjdXJyZW5jZSBnZW5lcmF0b3IgaGFzIGEgZHVyYXRpb24sIGFuZCBgZXhjbHVkZVN0YXJ0ICE9PSB0cnVlYCxcbiAgICogYW5kIGEgYG1heER1cmF0aW9uYCBhcmd1bWVudCBpcyBzdXBwbGllZCAoZWl0aGVyIGluIHRoZSBjb25zdHJ1Y3RvciBvclxuICAgKiBoZXJlKSwgdGhlbiBhbnkgb2NjdXJyZW5jZSB0aGF0J3MgZW5kIHRpbWUgaXMgYWZ0ZXIvZXF1YWwgdG8gdGhlIHByb3ZpZGVkXG4gICAqIGRhdGV0aW1lIHJldHVybiB0cnVlLlxuICAgKi9cbiAgb2NjdXJzQWZ0ZXIoZGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgYWRhcHRlciA9IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KGRhdGUpO1xuICAgIGlmICh0aGlzLmhhc0R1cmF0aW9uICYmICFvcHRpb25zLmV4Y2x1ZGVTdGFydCkge1xuICAgICAgY29uc3QgbWF4RHVyYXRpb24gPSB0aGlzLmdldE1heER1cmF0aW9uKCdvY2N1cnNBZnRlcicsIG9wdGlvbnMpO1xuICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLl9ydW4oe1xuICAgICAgICBzdGFydDogYWRhcHRlci5zdWJ0cmFjdChtYXhEdXJhdGlvbiwgJ21pbGxpc2Vjb25kJyksXG4gICAgICB9KTtcbiAgICAgIGZvciAoY29uc3QgZGF0ZSBvZiBpdGVyYXRvcikge1xuICAgICAgICBpZiAoZGF0ZS5lbmQuaXNCZWZvcmUoYWRhcHRlcikpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBkYXkgb2YgdGhpcy5fcnVuKHsgc3RhcnQ6IGFkYXB0ZXIgfSkpIHtcbiAgICAgIGlmIChvcHRpb25zLmV4Y2x1ZGVTdGFydCAmJiBkYXkuaXNFcXVhbChhZGFwdGVyKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhbiBvY2N1cnJlbmNlIHN0YXJ0cyBiZWZvcmUgdGhlIHByb3ZpZGVkIGRhdGV0aW1lLlxuICAgKiBJZiB0aGUgYGV4Y2x1ZGVTdGFydGAgb3B0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIG9jY3VycmVuY2VzXG4gICAqIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBkYXRldGltZSBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogSWYgdGhlIG9jY3VycmVuY2UgZ2VuZXJhdG9yIGhhcyBhIGR1cmF0aW9uLCBhbmQgYGV4Y2x1ZGVTdGFydGAgaXNcbiAgICogYWxzbyBwcm92aWRlZCwgdGhlbiB0aGlzIHdpbGwgb25seSByZXR1cm4gdHJ1ZSBpZiBhbiBvY2N1cnJlbmNlXG4gICAqIGJvdGggc3RhcnRzIGFuZCBlbmRzIGJlZm9yZSB0aGUgcHJvdmlkZWQgZGF0ZXRpbWUuXG4gICAqL1xuICBvY2N1cnNCZWZvcmUoZGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgYWRhcHRlciA9IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KGRhdGUpO1xuICAgIGlmICh0aGlzLmhhc0R1cmF0aW9uICYmIG9wdGlvbnMuZXhjbHVkZVN0YXJ0KSB7XG4gICAgICBmb3IgKGNvbnN0IGRheSBvZiB0aGlzLl9ydW4oeyBlbmQ6IGFkYXB0ZXIsIHJldmVyc2U6IHRydWUgfSkpIHtcbiAgICAgICAgaWYgKGRheS5lbmQuaXNBZnRlck9yRXF1YWwoYWRhcHRlcikpIGNvbnRpbnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBkYXkgb2YgdGhpcy5fcnVuKHsgZW5kOiBhZGFwdGVyLCByZXZlcnNlOiB0cnVlIH0pKSB7XG4gICAgICBpZiAob3B0aW9ucy5leGNsdWRlU3RhcnQgJiYgZGF5LmlzRXF1YWwoYWRhcHRlcikpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldCBkYXRlQWRhcHRlcigpIHtcbiAgICByZXR1cm4gRGF0ZUFkYXB0ZXJCYXNlJDEuYWRhcHRlcjtcbiAgfVxuICBub3JtYWxpemVPY2N1cnJlbmNlc0FyZ3MocmF3QXJncykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJhd0FyZ3MpLCB7XG4gICAgICBzdGFydDogdGhpcy5ub3JtYWxpemVEYXRlSW5wdXQocmF3QXJncy5zdGFydCksXG4gICAgICBlbmQ6IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KHJhd0FyZ3MuZW5kKSxcbiAgICB9KTtcbiAgfVxuICBub3JtYWxpemVDb2xsZWN0aW9uc0FyZ3MocmF3QXJncykge1xuICAgIGlmIChyYXdBcmdzLnJldmVyc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICdgY29sbGVjdGlvbnMoKWAgZG9lcyBub3Qgc3VwcG9ydCB0aGUgYHJldmVyc2VgIG9wdGlvbiBhdCB0aGlzIHRpbWUuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJhd0FyZ3MpLCB7XG4gICAgICBzdGFydDogdGhpcy5ub3JtYWxpemVEYXRlSW5wdXQocmF3QXJncy5zdGFydCksXG4gICAgICBlbmQ6IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KHJhd0FyZ3MuZW5kKSxcbiAgICB9KTtcbiAgfVxuICBub3JtYWxpemVPY2N1cnNPbkFyZ3MocmF3QXJncyA9IHt9KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmF3QXJncyksIHtcbiAgICAgIGRhdGU6IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KHJhd0FyZ3MuZGF0ZSksXG4gICAgICBhZnRlcjogdGhpcy5ub3JtYWxpemVEYXRlSW5wdXQocmF3QXJncy5hZnRlciksXG4gICAgICBiZWZvcmU6IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KHJhd0FyZ3MuYmVmb3JlKSxcbiAgICAgIGV4Y2x1ZGVEYXRlczpcbiAgICAgICAgcmF3QXJncy5leGNsdWRlRGF0ZXMgJiYgcmF3QXJncy5leGNsdWRlRGF0ZXMubWFwKGRhdGUgPT4gdGhpcy5ub3JtYWxpemVEYXRlSW5wdXQoZGF0ZSkpLFxuICAgIH0pO1xuICB9XG4gIG5vcm1hbGl6ZVJ1bkFyZ3MoYXJncykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpLCB7XG4gICAgICBzdGFydDogdGhpcy5ub3JtYWxpemVEYXRlSW5wdXQoYXJncy5zdGFydCksXG4gICAgICBlbmQ6IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0KGFyZ3MuZW5kKSxcbiAgICB9KTtcbiAgfVxuICBub3JtYWxpemVEYXRlSW5wdXQoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlID8gZGF0ZUlucHV0VG9EYXRlVGltZShkYXRlLCB0aGlzLnRpbWV6b25lKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBub3JtYWxpemVEYXRlSW5wdXRUb0FkYXB0ZXIoZGF0ZSkge1xuICAgIGlmICghZGF0ZSkgcmV0dXJuO1xuICAgIHJldHVybiBkYXRlSW5wdXRUb0RhdGVBZGFwdGVyKGRhdGUpO1xuICB9XG4gIG5vcm1hbGl6ZVJ1bk91dHB1dChkYXRlKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZURhdGVUaW1lVGltZXpvbmUkMShkYXRlLCB0aGlzLnRpbWV6b25lKTtcbiAgfVxuICBnZXRNYXhEdXJhdGlvbihtZXRob2QsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBtYXhEdXJhdGlvbiA9IG9wdGlvbnMubWF4RHVyYXRpb24gfHwgdGhpcy5tYXhEdXJhdGlvbjtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobWF4RHVyYXRpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcihcbiAgICAgICAgYFdoZW4gYW4gb2NjdXJyZW5jZSBnZW5lcmF0b3IgYCArXG4gICAgICAgICAgYGhhcyBhIGR1cmF0aW9uLCBhICdtYXhEdXJhdGlvbicgYXJndW1lbnQgbXVzdCBiZSBzdXBwbGllZCBgICtcbiAgICAgICAgICBgdG8gJHttZXRob2R9KCkuYCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBtYXhEdXJhdGlvbjtcbiAgfVxufVxuY2xhc3MgT2NjdXJyZW5jZUl0ZXJhdG9yIHtcbiAgY29uc3RydWN0b3IoaXRlcmFibGUsIGFyZ3MpIHtcbiAgICB0aGlzLml0ZXJhYmxlID0gaXRlcmFibGU7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICAvLyBOZWVkIHRvIGFzc2VydCB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlc2UgbWV0aG9kcyB0byBwcmV2ZW50IHR5cGVzY3JpcHQgZnJvbVxuICAgIC8vIGluY29ycmVjdGx5IHJlZHVjaW5nIHRoZW0gdG8gYERhdGVBZGFwdGVyQmFzZSAmIHsgZ2VuZXJhdG9yczogRyB9YC5cbiAgICB0aGlzW1N5bWJvbC5pdGVyYXRvcl0gPSAoKSA9PiB0aGlzLm9jY3VycmVuY2VJdGVyYXRvcigpO1xuICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYWJsZS5fcnVuKGFyZ3MpO1xuICAgIHRoaXMuaXNJbmZpbml0ZSA9IGl0ZXJhYmxlLmlzSW5maW5pdGU7XG4gIH1cbiAgbmV4dChhcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMub2NjdXJyZW5jZUl0ZXJhdG9yKGFyZ3MpLm5leHQoKTtcbiAgfVxuICB0b0FycmF5KCkge1xuICAgIGlmICh0aGlzLmFyZ3MuZW5kIHx8IHRoaXMuYXJncy50YWtlIHx8ICF0aGlzLmlzSW5maW5pdGUpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMub2NjdXJyZW5jZUl0ZXJhdG9yKCkpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgSW5maW5pdGVMb29wRXJyb3IoXG4gICAgICAnT2NjdXJyZW5jZUl0ZXJhdG9yI3RvQXJyYXkoKSBjYW4gb25seSBiZSBjYWxsZWQgaWYgdGhlIGl0ZXJhdG9yICcgK1xuICAgICAgICAnaXMgbm90IGluZmluaXRlLCBvciB5b3UgcHJvdmlkZSBhbmQgYGVuZGAgYXJndW1lbnQsIG9yIHlvdSBwcm92aWRlICcgK1xuICAgICAgICAnYSBgdGFrZWAgYXJndW1lbnQuJyxcbiAgICApO1xuICB9XG4gICpvY2N1cnJlbmNlSXRlcmF0b3IocmF3QXJncykge1xuICAgIGxldCBhcmdzID0gdGhpcy5ub3JtYWxpemVSdW5BcmdzKHJhd0FyZ3MpO1xuICAgIGxldCBkYXRlID0gdGhpcy5pdGVyYXRvci5uZXh0KGFyZ3MpLnZhbHVlO1xuICAgIHdoaWxlIChkYXRlKSB7XG4gICAgICBjb25zdCB5aWVsZEFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZURhdGVPdXRwdXQoZGF0ZSk7XG4gICAgICBhcmdzID0gdGhpcy5ub3JtYWxpemVSdW5BcmdzKHlpZWxkQXJncyk7XG4gICAgICBkYXRlID0gdGhpcy5pdGVyYXRvci5uZXh0KGFyZ3MpLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIG5vcm1hbGl6ZVJ1bkFyZ3MoYXJncykge1xuICAgIHJldHVybiB7XG4gICAgICBza2lwVG9EYXRlOiB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dChhcmdzICYmIGFyZ3Muc2tpcFRvRGF0ZSksXG4gICAgfTtcbiAgfVxuICBub3JtYWxpemVEYXRlSW5wdXQoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlID8gZGF0ZUlucHV0VG9EYXRlVGltZShkYXRlLCB0aGlzLml0ZXJhYmxlLnRpbWV6b25lKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBub3JtYWxpemVEYXRlT3V0cHV0KGRhdGUpIHtcbiAgICBpZiAoIWRhdGUpIHJldHVybjtcbiAgICByZXR1cm4gZGF0ZSA/IERhdGVBZGFwdGVyQmFzZSQxLmFkYXB0ZXIuZnJvbURhdGVUaW1lKGRhdGUpIDogdW5kZWZpbmVkO1xuICB9XG59XG5jbGFzcyBDb2xsZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoZGF0ZXMgPSBbXSwgZ3JhbnVsYXJpdHksIHBlcmlvZFN0YXJ0LCBwZXJpb2RFbmQpIHtcbiAgICB0aGlzLmRhdGVzID0gZGF0ZXM7XG4gICAgdGhpcy5ncmFudWxhcml0eSA9IGdyYW51bGFyaXR5O1xuICAgIHRoaXMucGVyaW9kU3RhcnQgPSBwZXJpb2RTdGFydDtcbiAgICB0aGlzLnBlcmlvZEVuZCA9IHBlcmlvZEVuZDtcbiAgfVxufVxuY2xhc3MgQ29sbGVjdGlvbkl0ZXJhdG9yIHtcbiAgY29uc3RydWN0b3IoaXRlcmFibGUsIGFyZ3MpIHtcbiAgICB0aGlzLml0ZXJhYmxlID0gaXRlcmFibGU7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmdyYW51bGFyaXR5ID0gJ3llYXInO1xuICAgIHRoaXNbU3ltYm9sLml0ZXJhdG9yXSA9ICgpID0+IHRoaXMuaXRlcmF0b3I7XG4gICAgaWYgKGFyZ3MuZ3JhbnVsYXJpdHkpIHtcbiAgICAgIHRoaXMuZ3JhbnVsYXJpdHkgPSBhcmdzLmdyYW51bGFyaXR5O1xuICAgICAgaWYgKHRoaXMuZ3JhbnVsYXJpdHkgPT09ICd3ZWVrJyAmJiAhYXJncy53ZWVrU3RhcnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIndlZWtcIiBncmFudWxhcml0eSByZXF1aXJlcyBgd2Vla1N0YXJ0YCBhcmcnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFyZ3Mud2Vla1N0YXJ0KSB7XG4gICAgICB0aGlzLndlZWtTdGFydCA9IGFyZ3Mud2Vla1N0YXJ0O1xuICAgIH1cbiAgICBpZiAoYXJncy5yZXZlcnNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgT2NjdXJyZW5jZUdlbmVyYXRvciNjb2xsZWN0aW9ucygpYCBkb2VzIG5vdCBzdXBwb3J0IGl0ZXJhdGluZyBpbiByZXZlcnNlLiAnICtcbiAgICAgICAgICAnVGhvdWdoIGBPY2N1cnJlbmNlR2VuZXJhdG9yI29jY3VycmVuY2VzKClgIGRvZXMgc3VwcG9ydCBpdGVyYXRpbmcgaW4gcmV2ZXJzZS4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gU2V0IHRoZSBlbmQgYXJnLCBpZiBwcmVzZW50LCB0byB0aGUgZW5kIG9mIHRoZSBwZXJpb2QuXG4gICAgdGhpcy5hcmdzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmdzKSwge1xuICAgICAgc3RhcnQ6IGFyZ3Muc3RhcnQgfHwgaXRlcmFibGUuX3J1bigpLm5leHQoKS52YWx1ZSxcbiAgICAgIGVuZDogYXJncy5lbmQgJiYgdGhpcy5nZXRQZXJpb2QoYXJncy5lbmQpLmVuZCxcbiAgICB9KTtcbiAgICB0aGlzLnN0YXJ0RGF0ZSA9XG4gICAgICAodGhpcy5hcmdzLnN0YXJ0ICYmIHRoaXMubm9ybWFsaXplRGF0ZU91dHB1dCh0aGlzLmdldFBlcmlvZCh0aGlzLmFyZ3Muc3RhcnQpLnN0YXJ0KSkgfHwgbnVsbDtcbiAgICB0aGlzLml0ZXJhdG9yID0gdGhpcy5jb2xsZWN0aW9uSXRlcmF0b3IoKTtcbiAgfVxuICBuZXh0KCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yLm5leHQoKTtcbiAgfVxuICAvKipcbiAgICogV2hpbGUgYG5leHQoKWAgYW5kIGBbU3ltYm9sLml0ZXJhdG9yXWAgYm90aCBzaGFyZSBzdGF0ZSxcbiAgICogYHRvQXJyYXkoKWAgZG9lcyBub3Qgc2hhcmUgc3RhdGUgYW5kIGFsd2F5cyByZXR1cm5zIHRoZSB3aG9sZVxuICAgKiBjb2xsZWN0aW9ucyBhcnJheS5cbiAgICovXG4gIHRvQXJyYXkoKSB7XG4gICAgaWYgKHRoaXMuYXJncy5lbmQgfHwgdGhpcy5hcmdzLnRha2UgfHwgIXRoaXMuaXRlcmFibGUuaXNJbmZpbml0ZSkge1xuICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgY29sbGVjdGlvbiBvZiB0aGlzLmNvbGxlY3Rpb25JdGVyYXRvcigpKSB7XG4gICAgICAgIGNvbGxlY3Rpb25zLnB1c2goY29sbGVjdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sbGVjdGlvbnM7XG4gICAgfVxuICAgIHRocm93IG5ldyBJbmZpbml0ZUxvb3BFcnJvcihcbiAgICAgICdDb2xsZWN0aW9uSXRlcmF0b3IjdG9BcnJheSgpIGNhbiBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgaXRlcmF0b3IgJyArXG4gICAgICAgICdpcyBub3QgaW5maW5pdGUsIG9yIHlvdSBwcm92aWRlIGFuZCBgZW5kYCBhcmd1bWVudCwgb3IgeW91IHByb3ZpZGUgJyArXG4gICAgICAgICdhIGB0YWtlYCBhcmd1bWVudC4nLFxuICAgICk7XG4gIH1cbiAgbm9ybWFsaXplRGF0ZU91dHB1dChkYXRlKSB7XG4gICAgaWYgKCFkYXRlKSByZXR1cm47XG4gICAgcmV0dXJuIERhdGVBZGFwdGVyQmFzZSQxLmFkYXB0ZXIuZnJvbURhdGVUaW1lKGRhdGUpO1xuICB9XG4gICpjb2xsZWN0aW9uSXRlcmF0b3IoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXJ0RGF0ZSkgcmV0dXJuO1xuICAgIGxldCBpdGVyYXRvciA9IHRoaXMub2NjdXJyZW5jZUl0ZXJhdG9yKCk7XG4gICAgbGV0IGRhdGUgPSBpdGVyYXRvci5uZXh0KCkudmFsdWU7XG4gICAgaWYgKCFkYXRlKSByZXR1cm47XG4gICAgLy8gYHBlcmlvZGAgPT09IGBwZXJpb2RTdGFydGAgdW5sZXNzIHRoZSBncmFudWxhcml0eVxuICAgIC8vIGlzIGBNT05USExZYCBhbmQgYSBgd2Vla1N0YXJ0YCBwYXJhbSB3YXMgcHJvdmlkZWQuIEluIHRoaXMgY2FzZSxcbiAgICAvLyBwZXJpb2QgaG9sZHMgYSBkYXRlID09PSB0aGUgZmlyc3Qgb2YgdGhlIGN1cnJlbnQgbW9udGggd2hpbGVcbiAgICAvLyBwZXJpb2RTdGFydCBob2xkcyBhIGRhdGUgPT09IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIG1vbnRoXG4gICAgLy8gKHdoaWNoIG1pZ2h0IGJlIGluIHRoZSB0aGUgcHJldmlvdXMgbW9udGgpLiBSZWFkIHRoZVxuICAgIC8vIGBPY2N1cnJlbmNlR2VuZXJhdG9yI2NvbGxlY3Rpb25zKClgIGRlc2NyaXB0aW9uIGZvciBtb3JlIGluZm8uXG4gICAgbGV0IHBlcmlvZCA9IHRoaXMuZ2V0UGVyaW9kKHRoaXMuYXJncy5zdGFydCk7XG4gICAgbGV0IGRhdGVzID0gW107XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZGF0ZSAmJiAodGhpcy5hcmdzLnRha2UgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmFyZ3MudGFrZSA+IGluZGV4KSkge1xuICAgICAgd2hpbGUgKGRhdGUgJiYgZGF0ZS5pc0JlZm9yZU9yRXF1YWwocGVyaW9kLmVuZCkpIHtcbiAgICAgICAgZGF0ZXMucHVzaChkYXRlKTtcbiAgICAgICAgZGF0ZSA9IGl0ZXJhdG9yLm5leHQoKS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHlpZWxkIG5ldyBDb2xsZWN0aW9uKFxuICAgICAgICBkYXRlcy5tYXAoZGF0ZSA9PiB0aGlzLm5vcm1hbGl6ZURhdGVPdXRwdXQoZGF0ZSkpLFxuICAgICAgICB0aGlzLmdyYW51bGFyaXR5LFxuICAgICAgICB0aGlzLm5vcm1hbGl6ZURhdGVPdXRwdXQocGVyaW9kLnN0YXJ0KSxcbiAgICAgICAgdGhpcy5ub3JtYWxpemVEYXRlT3V0cHV0KHBlcmlvZC5lbmQpLFxuICAgICAgKTtcbiAgICAgIGlmICghZGF0ZSkgcmV0dXJuO1xuICAgICAgZGF0ZXMgPSBbXTtcbiAgICAgIHBlcmlvZCA9ICF0aGlzLmFyZ3Muc2tpcEVtcHR5UGVyaW9kc1xuICAgICAgICA/IHRoaXMuZ2V0UGVyaW9kKHRoaXMuaW5jcmVtZW50UGVyaW9kKHBlcmlvZC5wZXJpb2QpKVxuICAgICAgICA6IHRoaXMuZ2V0UGVyaW9kKGRhdGUpO1xuICAgICAgLy8gV2l0aCB0aGVzZSBhcmdzLCBwZXJpb2RzIG1heSBvdmVybGFwIGFuZCB0aGUgc2FtZSBkYXRlIG1heSBzaG93IHVwXG4gICAgICAvLyBpbiB0d28gcGVyaW9kcy4gQmVjYXVzZSBvZiB0aGlzLCB3ZSBuZWVkIHRvIHJlc2V0IHRoZSBpdGVyYXRvclxuICAgICAgLy8gKG90aGVyd2lzZSBpdCB3b24ndCByZXR1cm4gYSBkYXRlIGl0IGhhcyBhbHJlYWR5IHJldHVybmVkKS5cbiAgICAgIGlmICh0aGlzLmdyYW51bGFyaXR5ID09PSAnbW9udGgnICYmIHRoaXMud2Vla1N0YXJ0KSB7XG4gICAgICAgIGl0ZXJhdG9yID0gdGhpcy5pdGVyYWJsZS5fcnVuKHtcbiAgICAgICAgICBzdGFydDogcGVyaW9kLnN0YXJ0LFxuICAgICAgICAgIGVuZDogdGhpcy5hcmdzLmVuZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGRhdGUgPSBpdGVyYXRvci5uZXh0KCkudmFsdWU7XG4gICAgICB9XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuICBnZXRQZXJpb2QoZGF0ZSkge1xuICAgIGxldCBzdGFydDtcbiAgICBsZXQgZW5kO1xuICAgIGxldCBwZXJpb2Q7XG4gICAgaWYgKHRoaXMuZ3JhbnVsYXJpdHkgPT09ICdtb250aCcgJiYgdGhpcy53ZWVrU3RhcnQpIHtcbiAgICAgIHN0YXJ0ID0gZGF0ZS5ncmFudWxhcml0eSgnbW9udGgnKS5ncmFudWxhcml0eSgnd2VlaycsIHsgd2Vla1N0YXJ0OiB0aGlzLndlZWtTdGFydCB9KTtcbiAgICAgIGVuZCA9IGRhdGUuZW5kR3JhbnVsYXJpdHkoJ21vbnRoJykuZW5kR3JhbnVsYXJpdHkoJ3dlZWsnLCB7IHdlZWtTdGFydDogdGhpcy53ZWVrU3RhcnQgfSk7XG4gICAgICBwZXJpb2QgPSBkYXRlLmdyYW51bGFyaXR5KCdtb250aCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydCA9IGRhdGUuZ3JhbnVsYXJpdHkodGhpcy5ncmFudWxhcml0eSwgeyB3ZWVrU3RhcnQ6IHRoaXMud2Vla1N0YXJ0IH0pO1xuICAgICAgZW5kID0gZGF0ZS5lbmRHcmFudWxhcml0eSh0aGlzLmdyYW51bGFyaXR5LCB7IHdlZWtTdGFydDogdGhpcy53ZWVrU3RhcnQgfSk7XG4gICAgICBwZXJpb2QgPSBzdGFydDtcbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhcnQsIGVuZCwgcGVyaW9kIH07XG4gIH1cbiAgaW5jcmVtZW50UGVyaW9kKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5hZGQoMSwgdGhpcy5ncmFudWxhcml0eSk7XG4gIH1cbiAgb2NjdXJyZW5jZUl0ZXJhdG9yKCkge1xuICAgIGxldCBzdGFydCA9IHRoaXMuYXJncy5zdGFydCB8fCB0aGlzLml0ZXJhYmxlLl9ydW4oKS5uZXh0KCkudmFsdWU7XG4gICAgaWYgKCFzdGFydCkgcmV0dXJuIHRoaXMuaXRlcmFibGUuX3J1bih0aGlzLmFyZ3MpO1xuICAgIHN0YXJ0ID0gdGhpcy5nZXRQZXJpb2Qoc3RhcnQpLnN0YXJ0O1xuICAgIHJldHVybiB0aGlzLml0ZXJhYmxlLl9ydW4oe1xuICAgICAgc3RhcnQsXG4gICAgICBlbmQ6IHRoaXMuYXJncy5lbmQsXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIE9wZXJhdG9yIGV4dGVuZHMgT2NjdXJyZW5jZUdlbmVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbXMsIGNvbmZpZykge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgdGhpcy5zdHJlYW1zID0gc3RyZWFtcztcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLnRpbWV6b25lID0gY29uZmlnLnRpbWV6b25lO1xuICAgIHRoaXMuc3RyZWFtcyA9IHN0cmVhbXMubWFwKHN0cmVhbSA9PlxuICAgICAgc3RyZWFtIGluc3RhbmNlb2YgT3BlcmF0b3IgPyBzdHJlYW0gOiBzdHJlYW0uc2V0KCd0aW1lem9uZScsIHRoaXMudGltZXpvbmUpLFxuICAgICk7XG4gICAgdGhpcy5pc0luZmluaXRlID0gdGhpcy5jYWxjdWxhdGVJc0luZmluaXRlKCk7XG4gICAgdGhpcy5oYXNEdXJhdGlvbiA9IHRoaXMuY2FsY3VsYXRlSGFzRHVyYXRpb24oKTtcbiAgfVxuICBub3JtYWxpemVEYXRlSW5wdXQoZGF0ZSkge1xuICAgIGlmICghZGF0ZSkgcmV0dXJuO1xuICAgIHJldHVybiBkYXRlSW5wdXRUb0RhdGVUaW1lKGRhdGUsIHRoaXMudGltZXpvbmUpO1xuICB9XG4gIG5vcm1hbGl6ZVJ1bk91dHB1dChkYXRlKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZURhdGVUaW1lVGltZXpvbmUkMShkYXRlLCB0aGlzLnRpbWV6b25lKTtcbiAgfVxufVxuXG4vKipcbiAqIFNpbXBsZSBjbGFzcyB0aGF0IGxldHMgdXMgYWNjZXNzIHRoZSBgdmFsdWVgLCBgcnVuQXJnc2AsIGFuZCBgZG9uZWBcbiAqIHN0YXR1cyBvZiBhbiBPY2N1cnJlbmNlR2VuZXJhdG9yIGl0ZXJhdG9yXG4gKi9cbmNsYXNzIEl0ZXJhYmxlV3JhcHBlciB7XG4gIGNvbnN0cnVjdG9yKGdlbmVyYXRvciwgcnVuQXJncykge1xuICAgIHRoaXMucnVuQXJncyA9IHJ1bkFyZ3M7XG4gICAgdGhpcy5zdHJlYW0gPSBnZW5lcmF0b3IuX3J1bih0aGlzLnJ1bkFyZ3MpO1xuICAgIHRoaXMubmV4dCgpO1xuICB9XG4gIG5leHQoYXJncykge1xuICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IHRoaXMuc3RyZWFtLm5leHQoYXJncyk7XG4gICAgdGhpcy5kb25lID0gdHlwZW9mIGRvbmUgPT09ICdib29sZWFuJyA/IGRvbmUgOiB0cnVlO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4geyBkb25lLCB2YWx1ZSB9O1xuICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzWWllbGRBcmdzKHN0cmVhbXMsIG9wdGlvbnMgPSB7fSwgeWllbGRBcmdzID0ge30pIHtcbiAgaWYgKCF5aWVsZEFyZ3Muc2tpcFRvRGF0ZSB8fCBzdHJlYW1zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAvLyBjaGVjayBmb3IgaW52YWxpZCBgc2tpcFRvRGF0ZWAgb3B0aW9uXG4gIGlmIChcbiAgICBvcHRpb25zLnJldmVyc2VcbiAgICAgID8gc3RyZWFtcy5ldmVyeShzID0+IHMudmFsdWUuaXNCZWZvcmVPckVxdWFsKHlpZWxkQXJncy5za2lwVG9EYXRlKSlcbiAgICAgIDogc3RyZWFtcy5ldmVyeShzID0+IHMudmFsdWUuaXNBZnRlck9yRXF1YWwoeWllbGRBcmdzLnNraXBUb0RhdGUpKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQSBwcm92aWRlZCBgc2tpcFRvRGF0ZWAgb3B0aW9uIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBsYXN0IHlpZWxkZWQgZGF0ZSAnICtcbiAgICAgICAgJyhvciBzbWFsbGVyLCBpbiB0aGUgY2FzZSBvZiByZXZlcnNlIGl0ZXJhdGlvbiknLFxuICAgICk7XG4gIH1cbiAgZm9yIChjb25zdCBzdHJlYW0gb2Ygc3RyZWFtcykge1xuICAgIGlmIChzdHJlYW0uZG9uZSkgY29udGludWU7IC8vIG5vIHBvaW50IGluIGNhbGxpbmcgYG5leHQoKWBcbiAgICBpZiAoXG4gICAgICBvcHRpb25zLnJldmVyc2VcbiAgICAgICAgPyBzdHJlYW0udmFsdWUuaXNCZWZvcmVPckVxdWFsKHlpZWxkQXJncy5za2lwVG9EYXRlKVxuICAgICAgICA6IHN0cmVhbS52YWx1ZS5pc0FmdGVyT3JFcXVhbCh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSlcbiAgICApIHtcbiAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiB0aGVyZSBhcmUgdHdvIHN0cmVhbXMgYW5kIG9uZSBzdHJlYW0gc3RhcnRzIGFmdGVyIHRoZSBvdGhlciBmaW5pc2hlcy5cbiAgICAgIC8vIE9yLCB3aGVuIGl0ZXJhdGluZyBpbiByZXZlcnNlLCB3aGVuIG9uZSBzdHJlYW0gZW5kcyBiZWZvcmUgdGhlIG90aGVyIHN0YXJ0cy5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSB3ZSBkb24ndCB3YW50IHRvIGNhbGwgYG5leHQoKWAgYmVjYXVzZSBpdCB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICAgLy8gSW4gYm90aCBvZiB0aGVzZSBjYXNlcywgY2FsbGluZyBgbmV4dCgpYCB3b24ndCBkbyBhbnl0aGluZyBhbnl3YXkuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgc3RyZWFtLm5leHQoeWllbGRBcmdzKTtcbiAgfVxufVxuLyoqIHNvcnRzIGFzY2VuZGluZyB3aXRoIGNvbXBsZXRlZCBpdGVyYWJsZXMgYXQgdGhlIGVuZCAqL1xuZnVuY3Rpb24gc3RyZWFtc0NvbXBhcmVyKGEsIGIpIHtcbiAgaWYgKGEuZG9uZSAmJiBiLmRvbmUpIHJldHVybiAwO1xuICBpZiAoYS5kb25lKSByZXR1cm4gMTtcbiAgaWYgKGIuZG9uZSkgcmV0dXJuIC0xO1xuICBpZiAoYS52YWx1ZS5pc0FmdGVyKGIudmFsdWUpKSByZXR1cm4gMTtcbiAgcmV0dXJuIC0xO1xufVxuLyoqIHNvcnRzIGRlc2NlbmRpbmcgd2l0aCBjb21wbGV0ZWQgaXRlcmFibGVzIGF0IHRoZSBzdGFydCAqL1xuZnVuY3Rpb24gc3RyZWFtc1JldmVyc2VDb21wYXJlcihhLCBiKSB7XG4gIGlmIChhLmRvbmUgJiYgYi5kb25lKSByZXR1cm4gMDtcbiAgaWYgKGEuZG9uZSkgcmV0dXJuIC0xO1xuICBpZiAoYi5kb25lKSByZXR1cm4gMTtcbiAgaWYgKGEudmFsdWUuaXNBZnRlcihiLnZhbHVlKSkgcmV0dXJuIC0xO1xuICByZXR1cm4gMTtcbn1cbmZ1bmN0aW9uIHNlbGVjdE5leHRJdGVyYWJsZShzdHJlYW1zLCBvcHRpb25zID0ge30sIHlpZWxkQXJncyA9IHt9KSB7XG4gIHByb2Nlc3NZaWVsZEFyZ3Moc3RyZWFtcywgb3B0aW9ucywgeWllbGRBcmdzKTtcbiAgcmV0dXJuIHN0cmVhbXNcbiAgICAuc29ydChvcHRpb25zLnJldmVyc2UgPyBzdHJlYW1zUmV2ZXJzZUNvbXBhcmVyIDogc3RyZWFtc0NvbXBhcmVyKVxuICAgIC5maWx0ZXIocyA9PiAhcy5kb25lKVxuICAgIC5zaGlmdCgpO1xufVxuZnVuY3Rpb24gc2VsZWN0TGFzdEl0ZXJhYmxlKHN0cmVhbXMsIG9wdGlvbnMgPSB7fSwgeWllbGRBcmdzID0ge30pIHtcbiAgcHJvY2Vzc1lpZWxkQXJncyhzdHJlYW1zLCBvcHRpb25zLCB5aWVsZEFyZ3MpO1xuICByZXR1cm4gc3RyZWFtc1xuICAgIC5zb3J0KG9wdGlvbnMucmV2ZXJzZSA/IHN0cmVhbXNSZXZlcnNlQ29tcGFyZXIgOiBzdHJlYW1zQ29tcGFyZXIpXG4gICAgLmZpbHRlcihzID0+ICFzLmRvbmUpXG4gICAgLnBvcCgpO1xufVxuXG4vKipcbiAqIEFuIG9wZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdHMgYSBzcHJlYWQgb2Ygb2NjdXJyZW5jZSBnZW5lcmF0b3JzXG4gKiBhbmQgYWRkcyB0aGVpciBvY2N1cnJlbmNlcyB0byB0aGUgb3V0cHV0LlxuICpcbiAqIEBwYXJhbSBzdHJlYW1zIGEgc3ByZWFkIG9mIG9jY3VycmVuY2UgZ2VuZXJhdG9yc1xuICovXG5mdW5jdGlvbiBhZGQoLi4uc3RyZWFtcykge1xuICByZXR1cm4gb3B0aW9ucyA9PiBuZXcgQWRkT3BlcmF0b3Ioc3RyZWFtcywgb3B0aW9ucyk7XG59XG5jbGFzcyBBZGRPcGVyYXRvciBleHRlbmRzIE9wZXJhdG9yIHtcbiAgc2V0KF8sIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBBZGRPcGVyYXRvcihcbiAgICAgIHRoaXMuc3RyZWFtcy5tYXAoc3RyZWFtID0+IHN0cmVhbS5zZXQoJ3RpbWV6b25lJywgdmFsdWUpKSxcbiAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcpLCB7XG4gICAgICAgIGJhc2U6IHRoaXMuY29uZmlnLmJhc2UgJiYgdGhpcy5jb25maWcuYmFzZS5zZXQoJ3RpbWV6b25lJywgdmFsdWUpLFxuICAgICAgICB0aW1lem9uZTogdmFsdWUsXG4gICAgICB9KSxcbiAgICApO1xuICB9XG4gICpfcnVuKGFyZ3MgPSB7fSkge1xuICAgIGNvbnN0IHdyYXBwZWRTdHJlYW1zID0gdGhpcy5zdHJlYW1zLm1hcChpbnB1dCA9PiBuZXcgSXRlcmFibGVXcmFwcGVyKGlucHV0LCBhcmdzKSk7XG4gICAgaWYgKHRoaXMuY29uZmlnLmJhc2UpIHtcbiAgICAgIHdyYXBwZWRTdHJlYW1zLnB1c2gobmV3IEl0ZXJhYmxlV3JhcHBlcih0aGlzLmNvbmZpZy5iYXNlLCBhcmdzKSk7XG4gICAgfVxuICAgIGlmICh3cmFwcGVkU3RyZWFtcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBsZXQgc3RyZWFtID0gc2VsZWN0TmV4dEl0ZXJhYmxlKHdyYXBwZWRTdHJlYW1zLCBhcmdzKTtcbiAgICB3aGlsZSAoc3RyZWFtICYmICFzdHJlYW0uZG9uZSkge1xuICAgICAgLy8geWllbGQgdGhlIGN1cnJlbnQgc3RyZWFtJ3MgdmFsdWVcbiAgICAgIGNvbnN0IHlpZWxkQXJncyA9IHlpZWxkIHRoaXMubm9ybWFsaXplUnVuT3V0cHV0KHN0cmVhbS52YWx1ZSk7XG4gICAgICBpZiAoISh5aWVsZEFyZ3MgJiYgeWllbGRBcmdzLnNraXBUb0RhdGUpKSB7XG4gICAgICAgIC8vIGl0ZXJhdGUgdGhlIGN1cnJlbnQgc3RyZWFtXG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICB9XG4gICAgICAvLyBzZWxlY3QgdGhlIG5leHQgc3RyZWFtXG4gICAgICBzdHJlYW0gPSBzZWxlY3ROZXh0SXRlcmFibGUod3JhcHBlZFN0cmVhbXMsIGFyZ3MsIHlpZWxkQXJncyk7XG4gICAgfVxuICB9XG4gIGNhbGN1bGF0ZUlzSW5maW5pdGUoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICh0aGlzLmNvbmZpZy5iYXNlICYmIHRoaXMuY29uZmlnLmJhc2UuaXNJbmZpbml0ZSkgfHxcbiAgICAgIHRoaXMuc3RyZWFtcy5zb21lKHN0cmVhbSA9PiBzdHJlYW0uaXNJbmZpbml0ZSlcbiAgICApO1xuICB9XG4gIGNhbGN1bGF0ZUhhc0R1cmF0aW9uKCkge1xuICAgIGNvbnN0IHN0cmVhbXNEdXJhdGlvbiA9IHRoaXMuc3RyZWFtcy5ldmVyeShzdHJlYW0gPT4gc3RyZWFtLmhhc0R1cmF0aW9uKTtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmJhc2UpIHJldHVybiBzdHJlYW1zRHVyYXRpb247XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmJhc2UuaGFzRHVyYXRpb24gJiYgc3RyZWFtc0R1cmF0aW9uO1xuICB9XG59XG5cbmNsYXNzIENhbGVuZGFyIGV4dGVuZHMgT2NjdXJyZW5jZUdlbmVyYXRvciB7XG4gIC8qKlxuICAgKlxuICAgKiBDcmVhdGUgYSBuZXcgQ2FsZW5kYXIgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBvcHRpb25zLlxuICAgKlxuICAgKiAjIyMgT3B0aW9uc1xuICAgKlxuICAgKiAtICoqdGltZXpvbmUqKjogVGhlIHRpbWV6b25lIHRoYXQgeWllbGRlZCBvY2N1cnJlbmNlcyBzaG91bGQgYmUgKmRpc3BsYXllZCogaW4uXG4gICAqICAgTm90ZSwgdGhpcyBvbmUgYWZmZWN0cyB0aGUgKmRpc3BsYXllZCogdGltZXpvbmUgb2YgeWllbGRlZCBvY2N1cnJlbmNlcy5cbiAgICogICBGb3IgcnVsZXMsIG9jY3VycmVuY2VzIGFyZSBmaXJzdCBmb3VuZCB1c2luZyB0aGUgdW5tb2RpZmllZCBydWxlXG4gICAqICAgY29uZmlnIChpbmNsdWRpbmcgd2hhdGV2ZXIgdGltZXpvbmUgdGhlIGBzdGFydGAgZGF0ZXRpbWUgaXMgZGVmaW5lZFxuICAgKiAgIGluKSwgYW5kIHRoZW4gY29udmVydGVkIHRvIHRoZSB0aW1lem9uZSBzcGVjaWZpZWQgaGVyZSBiZWZvcmUgYmVpbmdcbiAgICogICB5aWVsZGVkLiBCeSBkZWZhdWx0LCB0aGUgdGltZXpvbmUgaXMgKmxvY2FsKiB0aW1lIChgbnVsbGApLiBTbyBpZiB5b3UgZG9uJ3RcbiAgICogICB3YW50IHlvdXIgcnVsZXMgdG8gYmUgZGlzcGxheWVkIGluIGxvY2FsIHRpbWUsIHlvdSBtdXN0IHN1cHBseSBhXG4gICAqICAgdGltZXpvbmUgYXJndW1lbnQuXG4gICAqIC0gKipkYXRhKio6IGFyYml0cmFyeSBkYXRhIHlvdSBjYW4gYXNzb2NpYXRlIHdpdGggdGhpcyBDYWxlbmRhci4gVGhpc1xuICAgKiAgIGlzIHRoZSBvbmx5IG11dGFibGUgcHJvcGVydHkgb2YgYENhbGVuZGFyYCBvYmplY3RzLlxuICAgKiAtICoqbWF4RHVyYXRpb24qKjogY3VycmVudGx5IHVudXNlZC5cbiAgICogLSAqKnNjaGVkdWxlcyoqOiBlaXRoZXIgYW4gb2NjdXJyZW5jZSBnZW5lcmF0b3IsIG9yIGFuIGFycmF5IG9mIG9jY3VycmVuY2UgZ2VuZXJhdG9ycywgd2hpY2ggc2hvdWxkXG4gICAqICAgYmUgdXNlZCB0byBidWlsZCB1cCB0aGlzIENhbGVuZGFyJ3Mgb2NjdXJyZW5jZXMuIFRoZSBDYWxlbmRhciB3aWxsIGRpc3BsYXkgdGhlIHVuaW9uIG9mIG9jY3VycmVuY2VzXG4gICAqICAgaXRzIHNjaGVkdWxlcyBwcm9kdWNlLlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoYXJncyA9IHt9KSB7XG4gICAgc3VwZXIoYXJncyk7XG4gICAgdGhpcy5zY2hlZHVsZXMgPSBbXTtcbiAgICB0aGlzLmRhdGEgPSBhcmdzLmRhdGE7XG4gICAgaWYgKGFyZ3Muc2NoZWR1bGVzKSB7XG4gICAgICB0aGlzLnNjaGVkdWxlcyA9IEFycmF5LmlzQXJyYXkoYXJncy5zY2hlZHVsZXMpID8gYXJncy5zY2hlZHVsZXMgOiBbYXJncy5zY2hlZHVsZXNdO1xuICAgICAgdGhpcy5zY2hlZHVsZXMgPSB0aGlzLnNjaGVkdWxlcy5tYXAoc2NoZWR1bGUgPT4gc2NoZWR1bGUuc2V0KCd0aW1lem9uZScsIHRoaXMudGltZXpvbmUpKTtcbiAgICB9XG4gICAgdGhpcy5pc0luZmluaXRlID0gdGhpcy5zY2hlZHVsZXMuc29tZShzY2hlZHVsZSA9PiBzY2hlZHVsZS5pc0luZmluaXRlKTtcbiAgICB0aGlzLmhhc0R1cmF0aW9uID0gdGhpcy5zY2hlZHVsZXMuZXZlcnkoc2NoZWR1bGUgPT4gc2NoZWR1bGUuaGFzRHVyYXRpb24pO1xuICB9XG4gIG9jY3VycmVuY2VzKGFyZ3MgPSB7fSkge1xuICAgIHJldHVybiBuZXcgT2NjdXJyZW5jZUl0ZXJhdG9yKHRoaXMsIHRoaXMubm9ybWFsaXplT2NjdXJyZW5jZXNBcmdzKGFyZ3MpKTtcbiAgfVxuICBjb2xsZWN0aW9ucyhhcmdzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IENvbGxlY3Rpb25JdGVyYXRvcih0aGlzLCB0aGlzLm5vcm1hbGl6ZUNvbGxlY3Rpb25zQXJncyhhcmdzKSk7XG4gIH1cbiAgc2V0KHByb3AsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb3AgPT09ICd0aW1lem9uZScpIHtcbiAgICAgIHJldHVybiBuZXcgQ2FsZW5kYXIoe1xuICAgICAgICBzY2hlZHVsZXM6IHRoaXMuc2NoZWR1bGVzLm1hcChzY2hlZHVsZSA9PiBzY2hlZHVsZS5zZXQocHJvcCwgdmFsdWUsIG9wdGlvbnMpKSxcbiAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgICB0aW1lem9uZTogdmFsdWUsXG4gICAgICAgIG1heER1cmF0aW9uOiB0aGlzLm1heER1cmF0aW9uLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSAnc2NoZWR1bGVzJykge1xuICAgICAgcmV0dXJuIG5ldyBDYWxlbmRhcih7XG4gICAgICAgIHNjaGVkdWxlczogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV0sXG4gICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICAgIG1heER1cmF0aW9uOiB0aGlzLm1heER1cmF0aW9uLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKCdVbmtub3duIHZhbHVlIGZvciBgcHJvcGA6ICcgKyBgXCIke3Byb3B9XCJgKTtcbiAgfVxuICAqX3J1bihhcmdzID0ge30pIHtcbiAgICBpZiAodGhpcy5zY2hlZHVsZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgY291bnQgPSBhcmdzLnRha2U7XG4gICAgZGVsZXRlIGFyZ3MudGFrZTtcbiAgICBsZXQgaXRlcmF0b3I7XG4gICAgaWYgKHRoaXMuc2NoZWR1bGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaXRlcmF0b3IgPSB0aGlzLnNjaGVkdWxlc1swXS5fcnVuKGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRvciA9IG5ldyBBZGRPcGVyYXRvcih0aGlzLnNjaGVkdWxlcywge1xuICAgICAgICB0aW1lem9uZTogdGhpcy50aW1lem9uZSxcbiAgICAgIH0pLl9ydW4oYXJncyk7XG4gICAgfVxuICAgIGxldCBkYXRlID0gaXRlcmF0b3IubmV4dCgpLnZhbHVlO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGRhdGUgJiYgKGNvdW50ID09PSB1bmRlZmluZWQgfHwgY291bnQgPiBpbmRleCkpIHtcbiAgICAgIGRhdGUgPSBkYXRlLmFkZCh0aGlzLCAnZ2VuZXJhdG9yJyk7XG4gICAgICBjb25zdCB5aWVsZEFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZVJ1bk91dHB1dChkYXRlKTtcbiAgICAgIGRhdGUgPSBpdGVyYXRvci5uZXh0KHlpZWxkQXJncykudmFsdWU7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmNsYXNzIERhdGVzIGV4dGVuZHMgT2NjdXJyZW5jZUdlbmVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKGFyZ3MgPSB7fSkge1xuICAgIHN1cGVyKGFyZ3MpO1xuICAgIHRoaXMuYWRhcHRlcnMgPSBbXTtcbiAgICB0aGlzLmlzSW5maW5pdGUgPSBmYWxzZTtcbiAgICB0aGlzLm1heER1cmF0aW9uID0gMDtcbiAgICB0aGlzLmRhdGV0aW1lcyA9IFtdO1xuICAgIHRoaXMuZGF0YSA9IGFyZ3MuZGF0YTtcbiAgICBpZiAoYXJncy5kYXRlcykge1xuICAgICAgdGhpcy5hZGFwdGVycyA9IGFyZ3MuZGF0ZXMubWFwKGRhdGUgPT4ge1xuICAgICAgICBsZXQgYWRhcHRlciA9IHRoaXMubm9ybWFsaXplRGF0ZUlucHV0VG9BZGFwdGVyKGRhdGUpO1xuICAgICAgICBpZiAoYXJncy5kdXJhdGlvbiAmJiAhYWRhcHRlci5kdXJhdGlvbikge1xuICAgICAgICAgIGFkYXB0ZXIgPSBhZGFwdGVyLnNldCgnZHVyYXRpb24nLCBhcmdzLmR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWRhcHRlci5zZXQoJ3RpbWV6b25lJywgdGhpcy50aW1lem9uZSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGF0ZXRpbWVzID0gdGhpcy5hZGFwdGVycy5tYXAoYWRhcHRlciA9PiBhZGFwdGVyLnRvRGF0ZVRpbWUoKSk7XG4gICAgfVxuICAgIHRoaXMuaGFzRHVyYXRpb24gPSB0aGlzLmRhdGV0aW1lcy5ldmVyeShkYXRlID0+ICEhZGF0ZS5kdXJhdGlvbik7XG4gICAgaWYgKHRoaXMuaGFzRHVyYXRpb24pIHtcbiAgICAgIHRoaXMubWF4RHVyYXRpb24gPSB0aGlzLmFkYXB0ZXJzLnJlZHVjZShcbiAgICAgICAgKHByZXYsIGN1cnIpID0+IChjdXJyLmR1cmF0aW9uID4gcHJldiA/IGN1cnIuZHVyYXRpb24gOiBwcmV2KSxcbiAgICAgICAgMCxcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlcnMubGVuZ3RoO1xuICB9XG4gIC8qKiBSZXR1cm5zIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9yLCBpZiB0aGVyZSBhcmUgbm8gb2NjdXJyZW5jZXMsIG51bGwuICovXG4gIGdldCBmaXJzdERhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlcnNbMF0gfHwgbnVsbDtcbiAgfVxuICAvKiogUmV0dXJucyB0aGUgbGFzdCBvY2N1cnJlbmNlIG9yLCBpZiB0aGVyZSBhcmUgbm8gb2NjdXJyZW5jZXMsIG51bGwuICovXG4gIGdldCBsYXN0RGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyc1t0aGlzLmxlbmd0aCAtIDFdIHx8IG51bGw7XG4gIH1cbiAgb2NjdXJyZW5jZXMoYXJncyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBPY2N1cnJlbmNlSXRlcmF0b3IodGhpcywgdGhpcy5ub3JtYWxpemVPY2N1cnJlbmNlc0FyZ3MoYXJncykpO1xuICB9XG4gIGNvbGxlY3Rpb25zKGFyZ3MgPSB7fSkge1xuICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbkl0ZXJhdG9yKHRoaXMsIHRoaXMubm9ybWFsaXplQ29sbGVjdGlvbnNBcmdzKGFyZ3MpKTtcbiAgfVxuICBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IERhdGVzKHtcbiAgICAgIGRhdGVzOiBbLi4udGhpcy5hZGFwdGVycywgdmFsdWVdLFxuICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgfSk7XG4gIH1cbiAgcmVtb3ZlKHZhbHVlKSB7XG4gICAgY29uc3QgZGF0ZXMgPSB0aGlzLmFkYXB0ZXJzLnNsaWNlKCk7XG4gICAgY29uc3QgaW5wdXQgPSB0aGlzLm5vcm1hbGl6ZURhdGVJbnB1dFRvQWRhcHRlcih2YWx1ZSk7XG4gICAgY29uc3QgaW5kZXggPSBkYXRlcy5maW5kSW5kZXgoZGF0ZSA9PiBkYXRlLnZhbHVlT2YoKSA9PT0gaW5wdXQudmFsdWVPZigpKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgZGF0ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlcyh7XG4gICAgICBkYXRlcyxcbiAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgIH0pO1xuICB9XG4gIHNldChwcm9wLCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHRpbWV6b25lID0gdGhpcy50aW1lem9uZTtcbiAgICBsZXQgZGF0ZXMgPSB0aGlzLmFkYXB0ZXJzLnNsaWNlKCk7XG4gICAgaWYgKHByb3AgPT09ICd0aW1lem9uZScpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcy50aW1lem9uZSkgcmV0dXJuIHRoaXM7XG4gICAgICBlbHNlIGlmIChvcHRpb25zLmtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgZGF0ZXMgPSB0aGlzLmFkYXB0ZXJzLm1hcChhZGFwdGVyID0+IHtcbiAgICAgICAgICBjb25zdCBqc29uID0gYWRhcHRlci50b0pTT04oKTtcbiAgICAgICAgICBqc29uLnRpbWV6b25lID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUFkYXB0ZXIuZnJvbUpTT04oanNvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGltZXpvbmUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09ICdkYXRlcycpIHtcbiAgICAgIGRhdGVzID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSAnZHVyYXRpb24nKSB7XG4gICAgICBkYXRlcyA9IGRhdGVzLm1hcChkYXRlID0+IGRhdGUuc2V0KCdkdXJhdGlvbicsIHZhbHVlIHx8IDApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoXG4gICAgICAgIGBVbmV4cGVjdGVkIHByb3AgYXJndW1lbnQgXCIke3Byb3B9XCIuIEFjY2VwdGVkIHZhbHVlcyBhcmUgXCJ0aW1lem9uZVwiIG9yIFwiZGF0ZXNcImAsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGVzKHtcbiAgICAgIGRhdGVzLFxuICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgdGltZXpvbmUsXG4gICAgfSk7XG4gIH1cbiAgZmlsdGVyKGZuKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlcyh7XG4gICAgICBkYXRlczogdGhpcy5hZGFwdGVycy5maWx0ZXIoZm4pLFxuICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgfSk7XG4gIH1cbiAgKl9ydW4oYXJncyA9IHt9KSB7XG4gICAgbGV0IGRhdGVzID0gdGhpcy5kYXRldGltZXMuc29ydChkYXRlVGltZVNvcnRDb21wYXJlcik7XG4gICAgaWYgKGFyZ3Muc3RhcnQpIHtcbiAgICAgIGRhdGVzID0gZGF0ZXMuZmlsdGVyKGRhdGUgPT4gZGF0ZS5pc0FmdGVyT3JFcXVhbChhcmdzLnN0YXJ0KSk7XG4gICAgfVxuICAgIGlmIChhcmdzLmVuZCkge1xuICAgICAgZGF0ZXMgPSBkYXRlcy5maWx0ZXIoZGF0ZSA9PiBkYXRlLmlzQmVmb3JlT3JFcXVhbChhcmdzLmVuZCkpO1xuICAgIH1cbiAgICBpZiAoYXJncy5yZXZlcnNlKSB7XG4gICAgICBkYXRlcyA9IGRhdGVzLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIH1cbiAgICBpZiAoYXJncy50YWtlKSB7XG4gICAgICBkYXRlcyA9IGRhdGVzLnNsaWNlKDAsIGFyZ3MudGFrZSk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGVDYWNoZSA9IGRhdGVzLnNsaWNlKCk7XG4gICAgbGV0IGRhdGUgPSBkYXRlQ2FjaGUuc2hpZnQoKTtcbiAgICBsZXQgeWllbGRBcmdzO1xuICAgIHdoaWxlIChkYXRlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHlpZWxkQXJncyAmJlxuICAgICAgICB5aWVsZEFyZ3Muc2tpcFRvRGF0ZSAmJlxuICAgICAgICAoYXJncy5yZXZlcnNlID8geWllbGRBcmdzLnNraXBUb0RhdGUuaXNCZWZvcmUoZGF0ZSkgOiB5aWVsZEFyZ3Muc2tpcFRvRGF0ZS5pc0FmdGVyKGRhdGUpKVxuICAgICAgKSB7XG4gICAgICAgIGRhdGUgPSBkYXRlQ2FjaGUuc2hpZnQoKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBkYXRlID0gZGF0ZS5hZGQodGhpcywgJ2dlbmVyYXRvcicpO1xuICAgICAgeWllbGRBcmdzID0geWllbGQgdGhpcy5ub3JtYWxpemVSdW5PdXRwdXQoZGF0ZSk7XG4gICAgICAvLyBIZXJlLCB3ZSBhcmUgbWF0Y2hpbmcgdGhlIGJlaGF2aW9yIG9mIHRoZSBSZWN1cnJlbmNlUnVsZXNJdGVyYXRvclxuICAgICAgaWYgKFxuICAgICAgICB5aWVsZEFyZ3MgJiZcbiAgICAgICAgeWllbGRBcmdzLnNraXBUb0RhdGUgJiZcbiAgICAgICAgKGFyZ3MucmV2ZXJzZVxuICAgICAgICAgID8geWllbGRBcmdzLnNraXBUb0RhdGUuaXNBZnRlck9yRXF1YWwoZGF0ZSlcbiAgICAgICAgICA6IHlpZWxkQXJncy5za2lwVG9EYXRlLmlzQmVmb3JlT3JFcXVhbChkYXRlKSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0EgcHJvdmlkZWQgYHNraXBUb0RhdGVgIG9wdGlvbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgbGFzdCB5aWVsZGVkIGRhdGUgJyArXG4gICAgICAgICAgICAnKG9yIHNtYWxsZXIsIGluIHRoZSBjYXNlIG9mIHJldmVyc2UgaXRlcmF0aW9uKScsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkYXRlID0gZGF0ZUNhY2hlLnNoaWZ0KCk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuY2xhc3MgSW52YWxpZERhdGVBZGFwdGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxubGV0IGRhdGVBZGFwdGVyQ29uZmlnO1xuY2xhc3MgRGF0ZUFkYXB0ZXJCYXNlIHtcbiAgY29uc3RydWN0b3IoX2RhdGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmR1cmF0aW9uID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5kdXJhdGlvbikgfHwgMDtcbiAgICB0aGlzLmdlbmVyYXRvcnMgPSAob3B0aW9ucyAmJiBvcHRpb25zLmdlbmVyYXRvcnMgJiYgb3B0aW9ucy5nZW5lcmF0b3JzLnNsaWNlKCkpIHx8IFtdO1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcih0aGlzLmR1cmF0aW9uKSB8fCB0aGlzLmR1cmF0aW9uIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlQWRhcHRlckVycm9yKCdkdXJhdGlvbiBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXInKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIHNldCBhZGFwdGVyKHZhbHVlKSB7XG4gICAgaWYgKGRhdGVBZGFwdGVyQ29uZmlnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtkYXRlQWRhcHRlckNvbmZpZy5uYW1lfVwiIGhhcyBhbHJlYWR5IGJlZW4gY29uZmlndXJlZC5gKTtcbiAgICB9XG4gICAgZGF0ZUFkYXB0ZXJDb25maWcgPSB2YWx1ZTtcbiAgfVxuICBzdGF0aWMgZ2V0IGFkYXB0ZXIoKSB7XG4gICAgaWYgKCFkYXRlQWRhcHRlckNvbmZpZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRlIGFkYXB0ZXIgaGFzIGJlZW4gY29uZmlndXJlZC4gU2VlIHJTY2hlZHVsZSBkb2NzLicpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZUFkYXB0ZXJDb25maWc7XG4gIH1cbiAgc3RhdGljIGlzRGF0ZShfb2JqZWN0KSB7XG4gICAgdGhyb3cgdW5pbXBsZW1lbnRlZEVycm9yKCdpc0RhdGUoKScpO1xuICB9XG4gIHN0YXRpYyBmcm9tRGF0ZShfZGF0ZSwgX29wdGlvbnMpIHtcbiAgICB0aHJvdyB1bmltcGxlbWVudGVkRXJyb3IoJ2Zyb21EYXRlKCknKTtcbiAgfVxuICBzdGF0aWMgZnJvbUpTT04oX2pzb24pIHtcbiAgICB0aHJvdyB1bmltcGxlbWVudGVkRXJyb3IoJ2Zyb21KU09OKCknKTtcbiAgfVxuICBzdGF0aWMgZnJvbURhdGVUaW1lKF9kYXRldGltZSkge1xuICAgIHRocm93IHVuaW1wbGVtZW50ZWRFcnJvcignZnJvbURhdGVUaW1lKCknKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyBpbiBzaW1wbGlmaWVkIGV4dGVuZGVkIElTTyBmb3JtYXQgKElTTyA4NjAxKS5cbiAgICpcbiAgICogX05vdGU6IHRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0ZXN0aW5nIGFuZCBpdHNcbiAgICogaW1wbGVtZW50YXRpb24gaXNuJ3QgcGFydGljdWxhcmx5IHBlcmZvcm1hbnQuX1xuICAgKi9cbiAgdG9JU09TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0KCd0aW1lem9uZScsICdVVEMnKVxuICAgICAgLnRvRGF0ZVRpbWUoKVxuICAgICAgLnRvSVNPU3RyaW5nKCk7XG4gIH1cbiAgdG9EYXRlVGltZSgpIHtcbiAgICBjb25zdCBkYXRlID0gRGF0ZVRpbWUuZnJvbUpTT04oXG4gICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMudG9KU09OKCkpLCB7IGdlbmVyYXRvcnM6IHRoaXMuZ2VuZXJhdG9ycyB9KSxcbiAgICApO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG5EYXRlQWRhcHRlckJhc2UuaGFzVGltZXpvbmVTdXBwb3J0ID0gZmFsc2U7XG5mdW5jdGlvbiB1bmltcGxlbWVudGVkRXJyb3IobmFtZSkge1xuICByZXR1cm4gbmV3IEVycm9yKGBZb3UgbXVzdCBpbXBsZW1lbnQgdGhlIFwiJHtuYW1lfVwiIG1ldGhvZCBmb3IgdGhpcyBEYXRlQWRhcHRlciBjbGFzc2ApO1xufVxudmFyIERhdGVBZGFwdGVyO1xuKGZ1bmN0aW9uKERhdGVBZGFwdGVyKSB7XG4gIERhdGVBZGFwdGVyLldFRUtEQVlTID0gWydTVScsICdNTycsICdUVScsICdXRScsICdUSCcsICdGUicsICdTQSddO1xuICBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fU0VDT05EID0gMTAwMDtcbiAgRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9TRUNPTkQgKiA2MDtcbiAgRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0hPVVIgPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fTUlOVVRFICogNjA7XG4gIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9EQVkgPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDI0O1xuICBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fV0VFSyA9IERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9EQVkgKiA3O1xufSkoRGF0ZUFkYXB0ZXIgfHwgKERhdGVBZGFwdGVyID0ge30pKTtcbmNsYXNzIEludmFsaWREYXRlVGltZUVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERhdGVUaW1lIHtcbiAgY29uc3RydWN0b3IoZGF0ZSwgdGltZXpvbmUsIGR1cmF0aW9uLCBnZW5lcmF0b3JzKSB7XG4gICAgdGhpcy5kYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgdGhpcy50aW1lem9uZSA9IHRpbWV6b25lIHx8IG51bGw7XG4gICAgdGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uIHx8IDA7XG4gICAgdGhpcy5nZW5lcmF0b3JzID0gKGdlbmVyYXRvcnMgJiYgZ2VuZXJhdG9ycy5zbGljZSgpKSB8fCBbXTtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodGhpcy5kdXJhdGlvbikgfHwgdGhpcy5kdXJhdGlvbiA8IDApIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZVRpbWVFcnJvcignZHVyYXRpb24gbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyJyk7XG4gICAgfVxuICAgIHRoaXMuYXNzZXJ0SXNWYWxpZCgpO1xuICB9XG4gIC8vIC8qKlxuICAvLyAgKiBTaW1pbGFyIHRvIGBBcnJheS5pc0FycmF5KClgLCBgaXNJbnN0YW5jZSgpYCBwcm92aWRlcyBhIHN1cmVmaXJlIG1ldGhvZFxuICAvLyAgKiBvZiBkZXRlcm1pbmluZyBpZiBhbiBvYmplY3QgaXMgYSBgRGF0ZVRpbWVgIGJ5IGNoZWNraW5nIGFnYWluc3QgdGhlXG4gIC8vICAqIGdsb2JhbCBzeW1ib2wgcmVnaXN0cnkuXG4gIC8vICAqL1xuICAvLyBzdGF0aWMgaXNJbnN0YW5jZShvYmplY3Q6IGFueSk6IG9iamVjdCBpcyBEYXRlVGltZSB7XG4gIC8vICAgcmV0dXJuICEhKG9iamVjdCAmJiBvYmplY3RbREFURVRJTUVfSURdKTtcbiAgLy8gfVxuICBzdGF0aWMgZnJvbUpTT04oanNvbikge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShcbiAgICAgIERhdGUuVVRDKFxuICAgICAgICBqc29uLnllYXIsXG4gICAgICAgIGpzb24ubW9udGggLSAxLFxuICAgICAgICBqc29uLmRheSxcbiAgICAgICAganNvbi5ob3VyLFxuICAgICAgICBqc29uLm1pbnV0ZSxcbiAgICAgICAganNvbi5zZWNvbmQsXG4gICAgICAgIGpzb24ubWlsbGlzZWNvbmQsXG4gICAgICApLFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBEYXRlVGltZShkYXRlLCBqc29uLnRpbWV6b25lLCBqc29uLmR1cmF0aW9uLCBqc29uLmdlbmVyYXRvcnMpO1xuICB9XG4gIHN0YXRpYyBmcm9tRGF0ZUFkYXB0ZXIoYWRhcHRlcikge1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tSlNPTihcbiAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYWRhcHRlci50b0pTT04oKSksIHsgZ2VuZXJhdG9yczogYWRhcHRlci5nZW5lcmF0b3JzIH0pLFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYHVuZGVmaW5lZGAgaWYgYGR1cmF0aW9uYCBpcyBgMGAuIEVsc2UgcmV0dXJuc1xuICAgKiB0aGUgYGVuZGAgZGF0ZS5cbiAgICovXG4gIGdldCBlbmQoKSB7XG4gICAgaWYgKCF0aGlzLmR1cmF0aW9uKSByZXR1cm47XG4gICAgaWYgKHRoaXMuX2VuZCkgcmV0dXJuIHRoaXMuX2VuZDtcbiAgICB0aGlzLl9lbmQgPSB0aGlzLmFkZCh0aGlzLmR1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKTtcbiAgICByZXR1cm4gdGhpcy5fZW5kO1xuICB9XG4gIC8vIFdoaWxlIHdlIGNvbnN0cmFpbiB0aGUgYXJndW1lbnQgdG8gYmUgYW5vdGhlciBEYXRlQWRhcHRlciBpbiB0eXBlc2NyaXB0XG4gIC8vIHdlIGhhbmRsZSB0aGUgY2FzZSBvZiBzb21lb25lIHBhc3NpbmcgaW4gYW5vdGhlciB0eXBlIG9mIG9iamVjdCBpbiBqYXZhc2NyaXB0XG4gIGlzRXF1YWwob2JqZWN0KSB7XG4gICAgaWYgKCFvYmplY3QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYXNzZXJ0U2FtZVRpbWVab25lKHRoaXMsIG9iamVjdCk7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBvYmplY3QudmFsdWVPZigpO1xuICB9XG4gIGlzQmVmb3JlKG9iamVjdCkge1xuICAgIGFzc2VydFNhbWVUaW1lWm9uZSh0aGlzLCBvYmplY3QpO1xuICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IG9iamVjdC52YWx1ZU9mKCk7XG4gIH1cbiAgaXNCZWZvcmVPckVxdWFsKG9iamVjdCkge1xuICAgIGFzc2VydFNhbWVUaW1lWm9uZSh0aGlzLCBvYmplY3QpO1xuICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8PSBvYmplY3QudmFsdWVPZigpO1xuICB9XG4gIGlzQWZ0ZXIob2JqZWN0KSB7XG4gICAgYXNzZXJ0U2FtZVRpbWVab25lKHRoaXMsIG9iamVjdCk7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gb2JqZWN0LnZhbHVlT2YoKTtcbiAgfVxuICBpc0FmdGVyT3JFcXVhbChvYmplY3QpIHtcbiAgICBhc3NlcnRTYW1lVGltZVpvbmUodGhpcywgb2JqZWN0KTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPj0gb2JqZWN0LnZhbHVlT2YoKTtcbiAgfVxuICBpc09jY3VycmluZyhvYmplY3QpIHtcbiAgICBpZiAoIXRoaXMuZHVyYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0ZVRpbWUjaXNPY2N1cnJpbmcoKSBpcyBvbmx5IGFwcGxpY2FibGUgdG8gRGF0ZVRpbWVzIHdpdGggZHVyYXRpb25zJyk7XG4gICAgfVxuICAgIGFzc2VydFNhbWVUaW1lWm9uZSh0aGlzLCBvYmplY3QpO1xuICAgIHJldHVybiAoXG4gICAgICBvYmplY3QuaXNBZnRlck9yRXF1YWwodGhpcykgJiYgb2JqZWN0LmlzQmVmb3JlT3JFcXVhbCh0aGlzLmFkZCh0aGlzLmR1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKSlcbiAgICApO1xuICB9XG4gIGFkZChhbW91bnQsIHVuaXQpIHtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJ2dlbmVyYXRvcic6IHtcbiAgICAgICAgY29uc3QgZ2VuZXJhdG9ycyA9IHRoaXMuZ2VuZXJhdG9ycy5zbGljZSgpO1xuICAgICAgICBnZW5lcmF0b3JzLnVuc2hpZnQoYW1vdW50KTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh0aGlzLmRhdGUsIHRoaXMudGltZXpvbmUsIHRoaXMuZHVyYXRpb24sIGdlbmVyYXRvcnMpO1xuICAgICAgfVxuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENZZWFycyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDTW9udGhzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ1dlZWtzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdkYXknOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoYWRkVVRDRGF5cyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENIb3Vycyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGFkZFVUQ01pbnV0ZXModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENTZWNvbmRzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShhZGRVVENNaWxsaXNlY29uZHModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1bml0IHByb3ZpZGVkIHRvIGBEYXRlVGltZSNhZGRgJyk7XG4gICAgfVxuICB9XG4gIHN1YnRyYWN0KGFtb3VudCwgdW5pdCkge1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENZZWFycyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDTW9udGhzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ1dlZWtzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdkYXknOlxuICAgICAgICByZXR1cm4gdGhpcy5mb3JrRGF0ZVRpbWUoc3ViVVRDRGF5cyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENIb3Vycyh0aGlzLmRhdGUsIGFtb3VudCkpO1xuICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKHN1YlVUQ01pbnV0ZXModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENTZWNvbmRzKHRoaXMuZGF0ZSwgYW1vdW50KSk7XG4gICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmtEYXRlVGltZShzdWJVVENNaWxsaXNlY29uZHModGhpcy5kYXRlLCBhbW91bnQpKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1bml0IHByb3ZpZGVkIHRvIGBEYXRlVGltZSNzdWJ0cmFjdGAnKTtcbiAgICB9XG4gIH1cbiAgZ2V0KHVuaXQpIHtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0VVRDTW9udGgoKSArIDE7XG4gICAgICBjYXNlICd5ZWFyZGF5JzpcbiAgICAgICAgcmV0dXJuIGdldFVUQ1llYXJEYXkodGhpcy5kYXRlKTtcbiAgICAgIGNhc2UgJ3dlZWtkYXknOlxuICAgICAgICByZXR1cm4gRGF0ZUFkYXB0ZXIuV0VFS0RBWVNbdGhpcy5kYXRlLmdldFVUQ0RheSgpXTtcbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0VVRDTWludXRlcygpO1xuICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gICAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdW5pdCBwcm92aWRlZCB0byBgRGF0ZVRpbWUjc2V0YCcpO1xuICAgIH1cbiAgfVxuICBzZXQodW5pdCwgdmFsdWUpIHtcbiAgICBpZiAodW5pdCA9PT0gJ2R1cmF0aW9uJykge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh0aGlzLmRhdGUsIHRoaXMudGltZXpvbmUsIHZhbHVlLCB0aGlzLmdlbmVyYXRvcnMpO1xuICAgIH1cbiAgICBpZiAodW5pdCA9PT0gJ2dlbmVyYXRvcnMnKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHRoaXMuZGF0ZSwgdGhpcy50aW1lem9uZSwgdGhpcy5kdXJhdGlvbiwgdmFsdWUpO1xuICAgIH1cbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuZGF0ZSk7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbW9udGgnOiB7XG4gICAgICAgIC8vIElmIHRoZSBjdXJyZW50IGRheSBvZiB0aGUgbW9udGhcbiAgICAgICAgLy8gaXMgZ3JlYXRlciB0aGFuIGRheXMgaW4gdGhlIG1vbnRoIHdlIGFyZSBtb3ZpbmcgdG8sIHdlIG5lZWQgdG8gYWxzb1xuICAgICAgICAvLyBzZXQgdGhlIGRheSB0byB0aGUgZW5kIG9mIHRoYXQgbW9udGguXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IG1vbnRoTGVuZ3RoKHZhbHVlLCBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgICAgICBjb25zdCBkYXkgPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgaWYgKGRheSA+IGxlbmd0aCkge1xuICAgICAgICAgIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgICAgICAgICBkYXRlLnNldFVUQ01vbnRoKHZhbHVlKTtcbiAgICAgICAgICBkYXRlID0gc3ViVVRDRGF5cyhkYXRlLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRlLnNldFVUQ01vbnRoKHZhbHVlIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdkYXknOlxuICAgICAgICBkYXRlLnNldFVUQ0RhdGUodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICBkYXRlLnNldFVUQ01pbnV0ZXModmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIGRhdGUuc2V0VVRDU2Vjb25kcyh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICBkYXRlLnNldFVUQ01pbGxpc2Vjb25kcyh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVuaXQgcHJvdmlkZWQgdG8gYERhdGVUaW1lI3NldGAnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZm9ya0RhdGVUaW1lKGRhdGUpO1xuICB9XG4gIGdyYW51bGFyaXR5KGdyYW51bGFyaXR5LCBvcHQgPSB7fSkge1xuICAgIGxldCBkYXRlID0gdGhpcy5mb3JrRGF0ZVRpbWUodGhpcy5kYXRlKTtcbiAgICBzd2l0Y2ggKGdyYW51bGFyaXR5KSB7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdtb250aCcsIDEpO1xuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ2RheScsIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICBkYXRlID0gc2V0RGF0ZVRvU3RhcnRPZldlZWsoZGF0ZSwgb3B0LndlZWtTdGFydCk7XG4gICAgfVxuICAgIHN3aXRjaCAoZ3JhbnVsYXJpdHkpIHtcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICBjYXNlICdkYXknOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ2hvdXInLCAwKTtcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ21pbnV0ZScsIDApO1xuICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdzZWNvbmQnLCAwKTtcbiAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnbWlsbGlzZWNvbmQnLCAwKTtcbiAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZ3JhbnVsYXJpdHkgcHJvdmlkZWQgdG8gYERhdGVUaW1lI2dyYW51bGFyaXR5YDogJyArIGdyYW51bGFyaXR5KTtcbiAgICB9XG4gIH1cbiAgZW5kR3JhbnVsYXJpdHkoZ3JhbnVsYXJpdHksIG9wdCA9IHt9KSB7XG4gICAgbGV0IGRhdGUgPSB0aGlzLmZvcmtEYXRlVGltZSh0aGlzLmRhdGUpO1xuICAgIHN3aXRjaCAoZ3JhbnVsYXJpdHkpIHtcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ21vbnRoJywgMTIpO1xuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ2RheScsIG1vbnRoTGVuZ3RoKGRhdGUuZ2V0KCdtb250aCcpLCBkYXRlLmdldCgneWVhcicpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIGRhdGUgPSBzZXREYXRlVG9FbmRPZldlZWsoZGF0ZSwgb3B0LndlZWtTdGFydCk7XG4gICAgfVxuICAgIHN3aXRjaCAoZ3JhbnVsYXJpdHkpIHtcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICBjYXNlICdkYXknOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ2hvdXInLCAyMyk7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgZGF0ZSA9IGRhdGUuc2V0KCdtaW51dGUnLCA1OSk7XG4gICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICBkYXRlID0gZGF0ZS5zZXQoJ3NlY29uZCcsIDU5KTtcbiAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIGRhdGUgPSBkYXRlLnNldCgnbWlsbGlzZWNvbmQnLCA5OTkpO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBncmFudWxhcml0eSBwcm92aWRlZCB0byBgRGF0ZVRpbWUjZ3JhbnVsYXJpdHlgOiAnICsgZ3JhbnVsYXJpdHkpO1xuICAgIH1cbiAgfVxuICB0b0lTT1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRlLnRvSVNPU3RyaW5nKCk7XG4gIH1cbiAgdG9EYXRlVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgY29uc3QganNvbiA9IHtcbiAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgeWVhcjogdGhpcy5nZXQoJ3llYXInKSxcbiAgICAgIG1vbnRoOiB0aGlzLmdldCgnbW9udGgnKSxcbiAgICAgIGRheTogdGhpcy5nZXQoJ2RheScpLFxuICAgICAgaG91cjogdGhpcy5nZXQoJ2hvdXInKSxcbiAgICAgIG1pbnV0ZTogdGhpcy5nZXQoJ21pbnV0ZScpLFxuICAgICAgc2Vjb25kOiB0aGlzLmdldCgnc2Vjb25kJyksXG4gICAgICBtaWxsaXNlY29uZDogdGhpcy5nZXQoJ21pbGxpc2Vjb25kJyksXG4gICAgfTtcbiAgICBpZiAodGhpcy5kdXJhdGlvbikge1xuICAgICAganNvbi5kdXJhdGlvbiA9IHRoaXMuZHVyYXRpb247XG4gICAgfVxuICAgIHJldHVybiBqc29uO1xuICB9XG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0ZS52YWx1ZU9mKCk7XG4gIH1cbiAgYXNzZXJ0SXNWYWxpZCgpIHtcbiAgICBpZiAoaXNOYU4odGhpcy52YWx1ZU9mKCkpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVUaW1lRXJyb3IoJ0RhdGVUaW1lIGhhcyBpbnZhbGlkIGRhdGUuJyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZvcmtEYXRlVGltZShkYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlVGltZShkYXRlLCB0aGlzLnRpbWV6b25lLCB0aGlzLmR1cmF0aW9uLCB0aGlzLmdlbmVyYXRvcnMpO1xuICB9XG59XG5mdW5jdGlvbiBhc3NlcnRTYW1lVGltZVpvbmUoeCwgeSkge1xuICBpZiAoeC50aW1lem9uZSAhPT0geS50aW1lem9uZSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZVRpbWVFcnJvcihcbiAgICAgICdBdHRlbXB0ZWQgdG8gY29tcGFyZSBhIGRhdGV0aW1lIHRvIGFub3RoZXIgZGF0ZSBpbiBhIGRpZmZlcmVudCB0aW1lem9uZTogJyArXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHgpICtcbiAgICAgICAgJyBhbmQgJyArXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHkpLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBzZXREYXRlVG9TdGFydE9mV2VlayhkYXRlLCB3a3N0KSB7XG4gIGNvbnN0IGluZGV4ID0gb3JkZXJlZFdlZWtkYXlzKHdrc3QpLmluZGV4T2YoZGF0ZS5nZXQoJ3dlZWtkYXknKSk7XG4gIHJldHVybiBkYXRlLnN1YnRyYWN0KGluZGV4LCAnZGF5Jyk7XG59XG5mdW5jdGlvbiBzZXREYXRlVG9FbmRPZldlZWsoZGF0ZSwgd2tzdCkge1xuICBjb25zdCBpbmRleCA9IG9yZGVyZWRXZWVrZGF5cyh3a3N0KS5pbmRleE9mKGRhdGUuZ2V0KCd3ZWVrZGF5JykpO1xuICByZXR1cm4gZGF0ZS5hZGQoNiAtIGluZGV4LCAnZGF5Jyk7XG59XG5mdW5jdGlvbiBvcmRlcmVkV2Vla2RheXMod2tzdCA9ICdTVScpIHtcbiAgY29uc3Qgd2tkYXlzID0gRGF0ZUFkYXB0ZXIuV0VFS0RBWVMuc2xpY2UoKTtcbiAgbGV0IGluZGV4ID0gd2tkYXlzLmluZGV4T2Yod2tzdCk7XG4gIHdoaWxlIChpbmRleCAhPT0gMCkge1xuICAgIHNoaWZ0QXJyYXkod2tkYXlzKTtcbiAgICBpbmRleC0tO1xuICB9XG4gIHJldHVybiB3a2RheXM7XG59XG5mdW5jdGlvbiBzaGlmdEFycmF5KGFycmF5LCBmcm9tID0gJ2ZpcnN0Jykge1xuICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9IGVsc2UgaWYgKGZyb20gPT09ICdmaXJzdCcpIHtcbiAgICBhcnJheS5wdXNoKGFycmF5LnNoaWZ0KCkpO1xuICB9IGVsc2Uge1xuICAgIGFycmF5LnVuc2hpZnQoYXJyYXkucG9wKCkpO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZGF5cyBpbiB0aGUgZ2l2ZW4gbW9udGguXG4gKlxuICogQHBhcmFtIG1vbnRoIGJhc2UtMVxuICogQHBhcmFtIHllYXJcbiAqL1xuZnVuY3Rpb24gbW9udGhMZW5ndGgobW9udGgsIHllYXIpIHtcbiAgY29uc3QgYmxvY2sgPSB7XG4gICAgMTogMzEsXG4gICAgMjogZ2V0RGF5c0luRmVicnVhcnkoeWVhciksXG4gICAgMzogMzEsXG4gICAgNDogMzAsXG4gICAgNTogMzEsXG4gICAgNjogMzAsXG4gICAgNzogMzEsXG4gICAgODogMzEsXG4gICAgOTogMzAsXG4gICAgMTA6IDMxLFxuICAgIDExOiAzMCxcbiAgICAxMjogMzEsXG4gIH07XG4gIHJldHVybiBibG9ja1ttb250aF07XG59XG5mdW5jdGlvbiBnZXREYXlzSW5GZWJydWFyeSh5ZWFyKSB7XG4gIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMjkgOiAyODtcbn1cbi8vIHRha2VuIGZyb20gZGF0ZS1mblxuZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gIHJldHVybiB5ZWFyICUgNDAwID09PSAwIHx8ICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKTtcbn1cbmZ1bmN0aW9uIGdldFVUQ1llYXJEYXkobm93KSB7XG4gIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoRGF0ZS5VVEMobm93LmdldFVUQ0Z1bGxZZWFyKCksIDAsIDEpKTtcbiAgY29uc3QgZGlmZiA9IG5vdy52YWx1ZU9mKCkgLSBzdGFydC52YWx1ZU9mKCk7XG4gIHJldHVybiAxICsgTWF0aC5mbG9vcihkaWZmIC8gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0RBWSk7XG59XG4vKipcbiAqIFRoZXNlIGZ1bmN0aW9ucyBhcmUgYmFzaWNhbGx5IGxpZnRlZCBmcm9tIGBkYXRlLWZuc2AsIGJ1dCBjaGFuZ2VkXG4gKiB0byB1c2UgdGhlIFVUQyBkYXRlIG1ldGhvZHMsIHdoaWNoIGBkYXRlLWZuc2AgZG9lc24ndCBzdXBwb3J0LlxuICovXG5mdW5jdGlvbiB0b0ludGVnZXIoaW5wdXQpIHtcbiAgaWYgKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB0cnVlIHx8IGlucHV0ID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgY29uc3QgaW50ID0gTnVtYmVyKGlucHV0KTtcbiAgaWYgKGlzTmFOKGludCkpIHtcbiAgICByZXR1cm4gaW50O1xuICB9XG4gIHJldHVybiBpbnQgPCAwID8gTWF0aC5jZWlsKGludCkgOiBNYXRoLmZsb29yKGludCk7XG59XG5mdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcyIGFyZ3VtZW50cyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3VtZW50cy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxuICBjb25zdCB0aW1lc3RhbXAgPSBkaXJ0eURhdGUudmFsdWVPZigpO1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ1llYXJzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIHJldHVybiBhZGRVVENNb250aHMoZGF0ZSwgYW1vdW50ICogMTIpO1xufVxuZnVuY3Rpb24gYWRkVVRDTW9udGhzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgY29uc3QgZGVzaXJlZE1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpICsgYW1vdW50O1xuICBjb25zdCBkYXRlV2l0aERlc2lyZWRNb250aCA9IG5ldyBEYXRlKDApO1xuICBkYXRlV2l0aERlc2lyZWRNb250aC5zZXRVVENGdWxsWWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCksIGRlc2lyZWRNb250aCwgMSk7XG4gIGRhdGVXaXRoRGVzaXJlZE1vbnRoLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBkYXlzSW5Nb250aCA9IG1vbnRoTGVuZ3RoKFxuICAgIGRhdGVXaXRoRGVzaXJlZE1vbnRoLmdldFVUQ01vbnRoKCkgKyAxLFxuICAgIGRhdGVXaXRoRGVzaXJlZE1vbnRoLmdldFVUQ0Z1bGxZZWFyKCksXG4gICk7XG4gIC8vIFNldCB0aGUgbGFzdCBkYXkgb2YgdGhlIG5ldyBtb250aFxuICAvLyBpZiB0aGUgb3JpZ2luYWwgZGF0ZSB3YXMgdGhlIGxhc3QgZGF5IG9mIHRoZSBsb25nZXIgbW9udGhcbiAgZGF0ZS5zZXRVVENNb250aChkZXNpcmVkTW9udGgsIE1hdGgubWluKGRheXNJbk1vbnRoLCBkYXRlLmdldFVUQ0RhdGUoKSkpO1xuICByZXR1cm4gZGF0ZTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ1dlZWtzKGRhdGUsIGlucHV0KSB7XG4gIGNvbnN0IGFtb3VudCA9IHRvSW50ZWdlcihpbnB1dCk7XG4gIGNvbnN0IGRheXMgPSBhbW91bnQgKiA3O1xuICByZXR1cm4gYWRkVVRDRGF5cyhkYXRlLCBkYXlzKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ0RheXMoZGF0ZSwgaW5wdXQpIHtcbiAgLy8gYnkgYWRkaW5nIG1pbGxpc2Vjb25kcyByYXRoZXIgdGhhbiBkYXlzLCB3ZSBzdXByZXNzIHRoZSBuYXRpdmUgRGF0ZSBvYmplY3QncyBhdXRvbWF0aWNcbiAgLy8gZGF5bGlnaHQgc2F2aW5ncyB0aW1lIGNvbnZlcnNpb25zIHdoaWNoIHdlIGRvbid0IHdhbnQgaW4gVVRDIG1vZGVcbiAgcmV0dXJuIGFkZFVUQ01pbGxpc2Vjb25kcyhkYXRlLCB0b0ludGVnZXIoaW5wdXQpICogRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0RBWSk7XG59XG5mdW5jdGlvbiBhZGRVVENIb3VycyhkYXRlLCBpbnB1dCkge1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoaW5wdXQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRhdGUsIGFtb3VudCAqIERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9IT1VSKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ01pbnV0ZXMoZGF0ZSwgaW5wdXQpIHtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGlucHV0KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkYXRlLCBhbW91bnQgKiBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fTUlOVVRFKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ1NlY29uZHMoZGF0ZSwgaW5wdXQpIHtcbiAgY29uc3QgYW1vdW50ID0gdG9JbnRlZ2VyKGlucHV0KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkYXRlLCBhbW91bnQgKiBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fU0VDT05EKTtcbn1cbmZ1bmN0aW9uIGFkZFVUQ01pbGxpc2Vjb25kcyhkYXRlLCBpbnB1dCkge1xuICBjb25zdCBhbW91bnQgPSB0b0ludGVnZXIoaW5wdXQpO1xuICBjb25zdCB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENZZWFycyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ1llYXJzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDTW9udGhzKGRhdGUsIGFtb3VudCkge1xuICByZXR1cm4gYWRkVVRDTW9udGhzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDV2Vla3MoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENXZWVrcyhkYXRlLCAtYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ0RheXMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENEYXlzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDSG91cnMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENIb3VycyhkYXRlLCAtYW1vdW50KTtcbn1cbmZ1bmN0aW9uIHN1YlVUQ01pbnV0ZXMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENNaW51dGVzKGRhdGUsIC1hbW91bnQpO1xufVxuZnVuY3Rpb24gc3ViVVRDU2Vjb25kcyhkYXRlLCBhbW91bnQpIHtcbiAgcmV0dXJuIGFkZFVUQ1NlY29uZHMoZGF0ZSwgLWFtb3VudCk7XG59XG5mdW5jdGlvbiBzdWJVVENNaWxsaXNlY29uZHMoZGF0ZSwgYW1vdW50KSB7XG4gIHJldHVybiBhZGRVVENNaWxsaXNlY29uZHMoZGF0ZSwgLWFtb3VudCk7XG59XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVEYXRlSW5wdXQ8VCBleHRlbmRzIERhdGVBZGFwdGVyPihcbi8vICAgZGF0ZUFkYXB0ZXI6IERhdGVBZGFwdGVyQ29uc3RydWN0b3I8VD4sXG4vLyAgIGlucHV0OiBEYXRlSW5wdXQ8VD4sXG4vLyAgIHRpbWV6b25lOiBzdHJpbmcgfCBudWxsLFxuLy8gKTogRGF0ZVRpbWUge1xuLy8gICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuLy8gICAgIGlmIChpbnB1dC50aW1lem9uZSAhPT0gdGltZXpvbmUpIHtcbi8vICAgICAgIHJldHVybiBkYXRlQWRhcHRlclxuLy8gICAgICAgICAuZnJvbURhdGVUaW1lKGlucHV0KVxuLy8gICAgICAgICAuc2V0KCd0aW1lem9uZScsIHRpbWV6b25lKVxuLy8gICAgICAgICAudG9EYXRlVGltZSgpO1xuLy8gICAgIH1cbi8vICAgICByZXR1cm4gaW5wdXQ7XG4vLyAgIH1cbi8vICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRGF0ZUFkYXB0ZXJcbi8vICAgICA/IGlucHV0LnNldCgndGltZXpvbmUnLCB0aW1lem9uZSkudG9EYXRlVGltZSgpXG4vLyAgICAgOiBuZXcgZGF0ZUFkYXB0ZXIoaW5wdXQpLnRvRGF0ZVRpbWUoKTtcbi8vIH1cbmZ1bmN0aW9uIG5vcm1hbGl6ZURhdGVUaW1lVGltZXpvbmUoZGF0ZSwgdGltZXpvbmUpIHtcbiAgaWYgKGRhdGUudGltZXpvbmUgIT09IHRpbWV6b25lKSB7XG4gICAgcmV0dXJuIERhdGVBZGFwdGVyQmFzZS5hZGFwdGVyXG4gICAgICAuZnJvbURhdGVUaW1lKGRhdGUpXG4gICAgICAuc2V0KCd0aW1lem9uZScsIHRpbWV6b25lKVxuICAgICAgLnRvRGF0ZVRpbWUoKTtcbiAgfVxuICByZXR1cm4gZGF0ZTtcbn1cblxuY2xhc3MgUnVsZUJhc2UgZXh0ZW5kcyBPY2N1cnJlbmNlR2VuZXJhdG9yIHtcbiAgY29uc3RydWN0b3IocmVjdXJyZW5jZVJ1bGVzLCBjb25maWcsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMucmVjdXJyZW5jZVJ1bGVzID0gcmVjdXJyZW5jZVJ1bGVzO1xuICAgIHRoaXMub3B0aW9ucyA9IGNsb25lUnVsZU9wdGlvbnMoY29uZmlnKTtcbiAgICB0aGlzLm5vcm1PcHRpb25zID0gbm9ybWFsaXplUnVsZU9wdGlvbnModGhpcy5yZWN1cnJlbmNlUnVsZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy50aW1lem9uZSA9XG4gICAgICBvcHRpb25zLnRpbWV6b25lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnRpbWV6b25lIDogdGhpcy5ub3JtT3B0aW9ucy5zdGFydC50aW1lem9uZTtcbiAgICB0aGlzLmRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgdGhpcy5oYXNEdXJhdGlvbiA9ICEhY29uZmlnLmR1cmF0aW9uO1xuICAgIGlmICh0aGlzLmhhc0R1cmF0aW9uKSB0aGlzLmR1cmF0aW9uID0gY29uZmlnLmR1cmF0aW9uO1xuICAgIHRoaXMuaXNJbmZpbml0ZSA9IHRoaXMubm9ybU9wdGlvbnMuZW5kID09PSB1bmRlZmluZWQgJiYgdGhpcy5ub3JtT3B0aW9ucy5jb3VudCA9PT0gdW5kZWZpbmVkO1xuICB9XG4gIG9jY3VycmVuY2VzKGFyZ3MgPSB7fSkge1xuICAgIHJldHVybiBuZXcgT2NjdXJyZW5jZUl0ZXJhdG9yKHRoaXMsIHRoaXMubm9ybWFsaXplT2NjdXJyZW5jZXNBcmdzKGFyZ3MpKTtcbiAgfVxuICBjb2xsZWN0aW9ucyhhcmdzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IENvbGxlY3Rpb25JdGVyYXRvcih0aGlzLCB0aGlzLm5vcm1hbGl6ZUNvbGxlY3Rpb25zQXJncyhhcmdzKSk7XG4gIH1cbiAgKl9ydW4ocmF3QXJncyA9IHt9KSB7XG4gICAgY29uc3QgYXJncyA9IHRoaXMubm9ybWFsaXplUnVuQXJncyhyYXdBcmdzKTtcbiAgICBjb25zdCBpdGVyYXRvciA9IG5ldyBSZWN1cnJlbmNlUnVsZXNJdGVyYXRvcihcbiAgICAgIHJlY3VycmVuY2VSdWxlc1JlZHVjZXIodGhpcy5yZWN1cnJlbmNlUnVsZXMpLFxuICAgICAgdGhpcy5ub3JtT3B0aW9ucyxcbiAgICAgIGFyZ3MsXG4gICAgKTtcbiAgICBsZXQgZGF0ZSA9IGl0ZXJhdG9yLm5leHQoKS52YWx1ZTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIHdoaWxlIChkYXRlICYmIChhcmdzLnRha2UgPT09IHVuZGVmaW5lZCB8fCBpbmRleCA8IGFyZ3MudGFrZSkpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgICBkYXRlID0gZGF0ZS5hZGQodGhpcywgJ2dlbmVyYXRvcicpO1xuICAgICAgY29uc3QgeWllbGRBcmdzID0geWllbGQgdGhpcy5ub3JtYWxpemVSdW5PdXRwdXQoZGF0ZSk7XG4gICAgICBpZiAoeWllbGRBcmdzID09PSBudWxsIHx8IHlpZWxkQXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogeWllbGRBcmdzLnNraXBUb0RhdGUpIHtcbiAgICAgICAgLy8gVGhlIFJlY3VycmVuY2VSdWxlSXRlcmF0b3IgbWlnaHQgaGF2ZSBhIGRpZmZlcmVudCB0aW1lem9uZSBmcm9tIHRoZSBydWxlLlxuICAgICAgICAvLyBCZWNhdXNlIG9mIHRoaXMsIHRoZSB5aWVsZEFyZ3Mgd2lsbCBub3QgcHJvcGVybHkgYmUgbm9ybWFsaXplZCBieSB0aGVcbiAgICAgICAgLy8gT2NjdXJyZW5jZUl0ZXJhdG9yLCBzbyB3ZSBuZWVkIHRvIGRvIGl0IGhlcmVcbiAgICAgICAgZGF0ZSA9IGl0ZXJhdG9yLm5leHQoXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB5aWVsZEFyZ3MpLCB7XG4gICAgICAgICAgICBza2lwVG9EYXRlOiBub3JtYWxpemVEYXRlVGltZVRpbWV6b25lKHlpZWxkQXJncy5za2lwVG9EYXRlLCBpdGVyYXRvci5zdGFydC50aW1lem9uZSksXG4gICAgICAgICAgfSksXG4gICAgICAgICkudmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGVvcmV0aWNhbGx5LCB0aGUgeWllbGRBcmdzIGFyZSB1bmRlZmluZWQgaGVyZVxuICAgICAgICAvLyBtYXliZSBpbiB0aGUgZnV0dXJlIHRoZXJlIHdpbGwgYmUgb3RoZXIgeWllbGRBcmcgb3B0aW9ucyB0aG91Z2hcbiAgICAgICAgZGF0ZSA9IGl0ZXJhdG9yLm5leHQoeWllbGRBcmdzKS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5jbGFzcyBSdWxlIGV4dGVuZHMgUnVsZUJhc2Uge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IFJ1bGUgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBydWxlIGNvbmZpZyBhbmQgb3B0aW9ucy5cbiAgICpcbiAgICogIyMjIE9wdGlvbnNcbiAgICpcbiAgICogLSAqKnRpbWV6b25lKio6IHRoZSB0aW1lem9uZSB0aGF0IHlpZWxkZWQgb2NjdXJyZW5jZXMgc2hvdWxkIGJlIGluLiBOb3RlLFxuICAgKiAgIHRoaXMgZG9lcyBub3QgY2hhbmdlIHRoZSBydWxlIGNvbmZpZy4gT2NjdXJyZW5jZXMgYXJlIGZpcnN0IGZvdW5kIHVzaW5nXG4gICAqICAgdGhlIHVubW9kaWZpZWQgcnVsZSBjb25maWcsIGFuZCB0aGVuIGNvbnZlcnRlZCB0byB0aGUgdGltZXpvbmUgc3BlY2lmaWVkXG4gICAqICAgaGVyZSBiZWZvcmUgYmVpbmcgeWllbGRlZC5cbiAgICogLSAqKmRhdGEqKjogYXJiaXRyYXJ5IGRhdGEgeW91IGNhbiBhc3NvY2lhdGUgd2l0aCB0aGlzIHJ1bGUuIFRoaXNcbiAgICogICBpcyB0aGUgb25seSBtdXRhYmxlIHByb3BlcnR5IG9mIGBSdWxlYCBvYmplY3RzLlxuICAgKlxuICAgKiAjIyMgUnVsZSBDb25maWdcbiAgICpcbiAgICogLSAjIyMjIGZyZXF1ZW5jeVxuICAgKlxuICAgKiAgIFRoZSBmcmVxdWVuY3kgcnVsZSBwYXJ0IGlkZW50aWZpZXMgdGhlIHR5cGUgb2YgcmVjdXJyZW5jZSBydWxlLiBWYWxpZCB2YWx1ZXNcbiAgICogICBpbmNsdWRlIGBcIlNFQ09ORExZXCJgLCBgXCJNSU5VVEVMWVwiYCwgYFwiSE9VUkxZXCJgLCBgXCJEQUlMWVwiYCwgYFwiV0VFS0xZXCJgLFxuICAgKiAgIGBcIk1PTlRITFlcImAsIG9yIGBcIllFQVJMWVwiYC5cbiAgICpcbiAgICogLSAjIyMjIHN0YXJ0XG4gICAqXG4gICAqICAgVGhlIHN0YXJ0IG9mIHRoZSBydWxlIChub3QgbmVjZXNzYXJpbHkgdGhlIGZpcnN0IG9jY3VycmVuY2UpLlxuICAgKiAgIEVpdGhlciBhIGBEYXRlQWRhcHRlcmAgaW5zdGFuY2UsIGRhdGUgb2JqZWN0LCBvciBgRGF0ZVRpbWVgIG9iamVjdC5cbiAgICogICBUaGUgdHlwZSBvZiBkYXRlIG9iamVjdCBkZXBlbmRzIG9uIHRoZSBgRGF0ZUFkYXB0ZXJgIGNsYXNzIHVzZWQgZm9yIHRoaXNcbiAgICogICBgUnVsZWAuXG4gICAqXG4gICAqIC0gIyMjIyBlbmQ/XG4gICAqXG4gICAqICAgVGhlIGVuZCBvZiB0aGUgcnVsZSAobm90IG5lY2Vzc2FyaWx5IHRoZSBsYXN0IG9jY3VycmVuY2UpLlxuICAgKiAgIEVpdGhlciBhIGBEYXRlQWRhcHRlcmAgaW5zdGFuY2UsIGRhdGUgb2JqZWN0LCBvciBgRGF0ZVRpbWVgIG9iamVjdC5cbiAgICogICBUaGUgdHlwZSBvZiBkYXRlIG9iamVjdCBkZXBlbmRzIG9uIHRoZSBgRGF0ZUFkYXB0ZXJgIGNsYXNzIHVzZWQgZm9yIHRoaXNcbiAgICogICBgUnVsZWAuXG4gICAqXG4gICAqIC0gIyMjIyBkdXJhdGlvbj9cbiAgICpcbiAgICogICBBIGxlbmd0aCBvZiB0aW1lIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIC0gIyMjIyBpbnRlcnZhbD9cbiAgICpcbiAgICogICBUaGUgaW50ZXJ2YWwgcnVsZSBwYXJ0IGNvbnRhaW5zIGEgcG9zaXRpdmUgaW50ZWdlciByZXByZXNlbnRpbmcgYXRcbiAgICogICB3aGljaCBpbnRlcnZhbHMgdGhlIHJlY3VycmVuY2UgcnVsZSByZXBlYXRzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpc1xuICAgKiAgIGAxYCwgbWVhbmluZyBldmVyeSBzZWNvbmQgZm9yIGEgU0VDT05ETFkgcnVsZSwgZXZlcnkgbWludXRlIGZvciBhXG4gICAqICAgTUlOVVRFTFkgcnVsZSwgZXZlcnkgaG91ciBmb3IgYW4gSE9VUkxZIHJ1bGUsIGV2ZXJ5IGRheSBmb3IgYVxuICAgKiAgIERBSUxZIHJ1bGUsIGV2ZXJ5IHdlZWsgZm9yIGEgV0VFS0xZIHJ1bGUsIGV2ZXJ5IG1vbnRoIGZvciBhXG4gICAqICAgTU9OVEhMWSBydWxlLCBhbmQgZXZlcnkgeWVhciBmb3IgYSBZRUFSTFkgcnVsZS4gRm9yIGV4YW1wbGUsXG4gICAqICAgd2l0aGluIGEgREFJTFkgcnVsZSwgYSB2YWx1ZSBvZiBgOGAgbWVhbnMgZXZlcnkgZWlnaHQgZGF5cy5cbiAgICpcbiAgICogLSAjIyMjIGNvdW50P1xuICAgKlxuICAgKiAgIFRoZSBjb3VudCBydWxlIHBhcnQgZGVmaW5lcyB0aGUgbnVtYmVyIG9mIG9jY3VycmVuY2VzIGF0IHdoaWNoIHRvXG4gICAqICAgcmFuZ2UtYm91bmQgdGhlIHJlY3VycmVuY2UuIGBjb3VudGAgYW5kIGBlbmRgIGFyZSBib3RoIHR3byBkaWZmZXJlbnRcbiAgICogICB3YXlzIG9mIHNwZWNpZnlpbmcgaG93IGEgcmVjdXJyZW5jZSBjb21wbGV0ZXMuXG4gICAqXG4gICAqIC0gIyMjIyB3ZWVrU3RhcnQ/XG4gICAqXG4gICAqICAgVGhlIHdlZWtTdGFydCBydWxlIHBhcnQgc3BlY2lmaWVzIHRoZSBkYXkgb24gd2hpY2ggdGhlIHdvcmt3ZWVrIHN0YXJ0cy5cbiAgICogICBWYWxpZCB2YWx1ZXMgYXJlIGBcIk1PXCJgLCBgXCJUVVwiYCwgYFwiV0VcImAsIGBcIlRIXCJgLCBgXCJGUlwiYCwgYFwiU0FcImAsIGFuZCBgXCJTVVwiYC5cbiAgICogICBUaGlzIGlzIHNpZ25pZmljYW50IHdoZW4gYSBXRUVLTFkgcnVsZSBoYXMgYW4gaW50ZXJ2YWwgZ3JlYXRlciB0aGFuIDEsXG4gICAqICAgYW5kIGEgYGJ5RGF5T2ZXZWVrYCBydWxlIHBhcnQgaXMgc3BlY2lmaWVkLiBUaGVcbiAgICogICBkZWZhdWx0IHZhbHVlIGlzIGBcIk1PXCJgLlxuICAgKlxuICAgKiAtICMjIyMgYnlTZWNvbmRPZk1pbnV0ZT9cbiAgICpcbiAgICogICBUaGUgYnlTZWNvbmRPZk1pbnV0ZSBydWxlIHBhcnQgZXhwZWN0cyBhbiBhcnJheSBvZiBzZWNvbmRzXG4gICAqICAgd2l0aGluIGEgbWludXRlLiBWYWxpZCB2YWx1ZXMgYXJlIDAgdG8gNjAuXG4gICAqXG4gICAqIC0gIyMjIyBieU1pbnV0ZU9mSG91cj9cbiAgICpcbiAgICogICBUaGUgYnlNaW51dGVPZkhvdXIgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2YgbWludXRlcyB3aXRoaW4gYW4gaG91ci5cbiAgICogICBWYWxpZCB2YWx1ZXMgYXJlIDAgdG8gNTkuXG4gICAqXG4gICAqIC0gIyMjIyBieUhvdXJPZkRheT9cbiAgICpcbiAgICogICBUaGUgYnlIb3VyT2ZEYXkgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2YgaG91cnMgb2YgdGhlIGRheS5cbiAgICogICBWYWxpZCB2YWx1ZXMgYXJlIDAgdG8gMjMuXG4gICAqXG4gICAqIC0gIyMjIyBieURheU9mV2Vlaz9cbiAgICpcbiAgICogICAqbm90ZTogdGhlIGJ5RGF5T2ZXZWVrIHJ1bGUgcGFydCBpcyBraW5kYSBjb21wbGV4LiBCbGFtZSB0aGUgSUNBTCBzcGVjLipcbiAgICpcbiAgICogICBUaGUgYnlEYXlPZldlZWsgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkuIEVhY2ggYXJyYXkgZW50cnkgY2FuXG4gICAqICAgYmUgYSBkYXkgb2YgdGhlIHdlZWsgKGBcIlNVXCJgLCBgXCJNT1wiYCAsIGBcIlRVXCJgLCBgXCJXRVwiYCwgYFwiVEhcImAsXG4gICAqICAgYFwiRlJcImAsIGBcIlNBXCJgKS4gSWYgdGhlIHJ1bGUncyBgZnJlcXVlbmN5YCBpcyBlaXRoZXIgTU9OVEhMWSBvciBZRUFSTFksXG4gICAqICAgQW55IGVudHJ5IGNhbiBhbHNvIGJlIGEgdHVwbGUgd2hlcmUgdGhlIGZpcnN0IHZhbHVlIG9mIHRoZSB0dXBsZSBpcyBhXG4gICAqICAgZGF5IG9mIHRoZSB3ZWVrIGFuZCB0aGUgc2Vjb25kIHZhbHVlIGlzIGFuIHBvc2l0aXZlL25lZ2F0aXZlIGludGVnZXJcbiAgICogICAoZS5nLiBgW1wiU1VcIiwgMV1gKS4gSW4gdGhpcyBjYXNlLCB0aGUgbnVtYmVyIGluZGljYXRlcyB0aGUgbnRoIG9jY3VycmVuY2Ugb2ZcbiAgICogICB0aGUgc3BlY2lmaWVkIGRheSB3aXRoaW4gdGhlIE1PTlRITFkgb3IgWUVBUkxZIHJ1bGUuXG4gICAqXG4gICAqICAgVGhlIGJlaGF2aW9yIG9mIGJ5RGF5T2ZXZWVrIGNoYW5nZXMgZGVwZW5kaW5nIG9uIHRoZSBgZnJlcXVlbmN5YFxuICAgKiAgIG9mIHRoZSBydWxlLlxuICAgKlxuICAgKiAgIFdpdGhpbiBhIE1PTlRITFkgcnVsZSwgYFtcIk1PXCIsIDFdYCByZXByZXNlbnRzIHRoZSBmaXJzdCBNb25kYXlcbiAgICogICB3aXRoaW4gdGhlIG1vbnRoLCB3aGVyZWFzIGBbXCJNT1wiLCAtMV1gIHJlcHJlc2VudHMgdGhlIGxhc3QgTW9uZGF5XG4gICAqICAgb2YgdGhlIG1vbnRoLlxuICAgKlxuICAgKiAgIFdpdGhpbiBhIFlFQVJMWSBydWxlLCB0aGUgbnVtZXJpYyB2YWx1ZSBpbiBhIGJ5RGF5T2ZXZWVrIHR1cGxlIGVudHJ5XG4gICAqICAgY29ycmVzcG9uZHMgdG8gYW4gb2Zmc2V0IHdpdGhpbiB0aGUgbW9udGggd2hlbiB0aGUgYnlNb250aE9mWWVhciBydWxlIHBhcnQgaXNcbiAgICogICBwcmVzZW50LCBhbmQgY29ycmVzcG9uZHMgdG8gYW4gb2Zmc2V0IHdpdGhpbiB0aGUgeWVhciBvdGhlcndpc2UuXG4gICAqXG4gICAqICAgUmVnYXJkbGVzcyBvZiBydWxlIGBmcmVxdWVuY3lgLCBpZiBhIGJ5RGF5T2ZXZWVrIGVudHJ5IGlzIGEgc3RyaW5nXG4gICAqICAgKHJhdGhlciB0aGFuIGEgdHVwbGUpLCBpdCBtZWFucyBcImFsbCBvZiB0aGVzZSBkYXlzXCIgd2l0aGluIHRoZSBzcGVjaWZpZWRcbiAgICogICBmcmVxdWVuY3kgKGUuZy4gd2l0aGluIGEgTU9OVEhMWSBydWxlLCBgXCJNT1wiYCByZXByZXNlbnRzIGFsbCBNb25kYXlzIHdpdGhpblxuICAgKiAgIHRoZSBtb250aCkuXG4gICAqXG4gICAqIC0gIyMjIyBieURheU9mTW9udGg/XG4gICAqXG4gICAqICAgVGhlIGJ5RGF5T2ZNb250aCBydWxlIHBhcnQgZXhwZWN0cyBhbiBhcnJheSBvZiBkYXlzXG4gICAqICAgb2YgdGhlIG1vbnRoLiBWYWxpZCB2YWx1ZXMgYXJlIDEgdG8gMzEgb3IgLTMxIHRvIC0xLlxuICAgKlxuICAgKiAgIEZvciBleGFtcGxlLCAtMTAgcmVwcmVzZW50cyB0aGUgdGVudGggdG8gdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aC5cbiAgICogICBUaGUgYnlEYXlPZk1vbnRoIHJ1bGUgcGFydCAqbXVzdCBub3QqIGJlIHNwZWNpZmllZCB3aGVuIHRoZSBydWxlJ3NcbiAgICogICBgZnJlcXVlbmN5YCBpcyBzZXQgdG8gV0VFS0xZLlxuICAgKlxuICAgKiAtICMjIyMgYnlNb250aE9mWWVhcj9cbiAgICpcbiAgICogICBUaGUgYnlNb250aE9mWWVhciBydWxlIHBhcnQgZXhwZWN0cyBhbiBhcnJheSBvZiBtb250aHNcbiAgICogICBvZiB0aGUgeWVhci4gVmFsaWQgdmFsdWVzIGFyZSAxIHRvIDEyLlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnLCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihSdWxlLnJlY3VycmVuY2VSdWxlcywgY29uZmlnLCBvcHRpb25zKTtcbiAgfVxuICBzZXQocHJvcCwgdmFsdWUsIHR6b3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IG9wdGlvbnMgPSBjbG9uZVJ1bGVPcHRpb25zKHRoaXMub3B0aW9ucyk7XG4gICAgbGV0IHRpbWV6b25lID0gdGhpcy50aW1lem9uZTtcbiAgICBpZiAocHJvcCA9PT0gJ3RpbWV6b25lJykge1xuICAgICAgaWYgKHZhbHVlID09PSB0aGlzLnRpbWV6b25lICYmICF0em9wdGlvbnMua2VlcExvY2FsVGltZSkgcmV0dXJuIHRoaXM7XG4gICAgICBlbHNlIGlmICh0em9wdGlvbnMua2VlcExvY2FsVGltZSkge1xuICAgICAgICBjb25zdCBqc29uID0gdGhpcy5ub3JtYWxpemVEYXRlSW5wdXQob3B0aW9ucy5zdGFydCkudG9KU09OKCk7XG4gICAgICAgIGpzb24udGltZXpvbmUgPSB2YWx1ZTtcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuZGF0ZUFkYXB0ZXIuZnJvbUpTT04oanNvbik7XG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICBvcHRpb25zLnN0YXJ0ID1cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zdGFydCBpbnN0YW5jZW9mIHRoaXMuZGF0ZUFkYXB0ZXIgPyBhZGFwdGVyIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RhcnQgaW5zdGFuY2VvZiBEYXRlVGltZSQxID8gYWRhcHRlci50b0RhdGVUaW1lKCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkYXB0ZXIuZGF0ZTtcbiAgICAgIH1cbiAgICAgIHRpbWV6b25lID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmIChwcm9wID09PSAnb3B0aW9ucycpIHtcbiAgICAgIG9wdGlvbnMgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9uc1twcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFJ1bGUob3B0aW9ucywge1xuICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgbWF4RHVyYXRpb246IHRoaXMubWF4RHVyYXRpb24sXG4gICAgICB0aW1lem9uZSxcbiAgICB9KTtcbiAgfVxufVxuUnVsZS5yZWN1cnJlbmNlUnVsZXMgPSBbXTtcblxuY2xhc3MgU2NoZWR1bGVCYXNlIGV4dGVuZHMgT2NjdXJyZW5jZUdlbmVyYXRvciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgU2NoZWR1bGUgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBvcHRpb25zLlxuICAgKlxuICAgKiBUaGUgb3JkZXIgb2YgcHJlY2lkZW5jZSBmb3IgcnJ1bGVzLCByZGF0ZXMsIGV4cnVsZXMsIGFuZCBleGRhdGVzIGlzOlxuICAgKlxuICAgKiAxLiBycnVsZXMgYXJlIGluY2x1ZGVkXG4gICAqIDIuIGV4cnVsZXMgYXJlIGV4Y2x1ZGVkXG4gICAqIDMuIHJkYXRlcyBhcmUgaW5jbHVkZWRcbiAgICogNC4gZXhkYXRlcyBhcmUgZXhjbHVkZWRcbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLmRhdGEgPSBvcHRpb25zLmRhdGE7XG4gIH1cbiAgb2NjdXJyZW5jZXMoYXJncyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBPY2N1cnJlbmNlSXRlcmF0b3IodGhpcywgdGhpcy5ub3JtYWxpemVPY2N1cnJlbmNlc0FyZ3MoYXJncykpO1xuICB9XG4gIGNvbGxlY3Rpb25zKGFyZ3MgPSB7fSkge1xuICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbkl0ZXJhdG9yKHRoaXMsIHRoaXMubm9ybWFsaXplQ29sbGVjdGlvbnNBcmdzKGFyZ3MpKTtcbiAgfVxuICAqX3J1bihhcmdzID0ge30pIHtcbiAgICBjb25zdCBjb3VudCA9IGFyZ3MudGFrZTtcbiAgICBkZWxldGUgYXJncy50YWtlO1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5vY2N1cnJlbmNlU3RyZWFtLl9ydW4oYXJncyk7XG4gICAgbGV0IGRhdGUgPSBpdGVyYXRvci5uZXh0KCkudmFsdWU7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZGF0ZSAmJiAoY291bnQgPT09IHVuZGVmaW5lZCB8fCBjb3VudCA+IGluZGV4KSkge1xuICAgICAgZGF0ZSA9IGRhdGUuYWRkKHRoaXMsICdnZW5lcmF0b3InKTtcbiAgICAgIGNvbnN0IHlpZWxkQXJncyA9IHlpZWxkIHRoaXMubm9ybWFsaXplUnVuT3V0cHV0KGRhdGUpO1xuICAgICAgZGF0ZSA9IGl0ZXJhdG9yLm5leHQoeWllbGRBcmdzKS52YWx1ZTtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBvcGVyYXRvciBmdW5jdGlvbiB3aGljaCBhY2NlcHRzIGEgc3ByZWFkIG9mIG9jY3VycmVuY2UgZ2VuZXJhdG9yc1xuICogYW5kIHJlbW92ZXMgdGhlaXIgb2NjdXJyZW5jZXMgZnJvbSB0aGUgb3V0cHV0LlxuICpcbiAqIEBwYXJhbSBzdHJlYW1zIGEgc3ByZWFkIG9mIG9jY3VycmVuY2UgZ2VuZXJhdG9yc1xuICovXG5mdW5jdGlvbiBzdWJ0cmFjdCguLi5zdHJlYW1zKSB7XG4gIHJldHVybiBvcHRpb25zID0+IG5ldyBTdWJ0cmFjdE9wZXJhdG9yKHN0cmVhbXMsIG9wdGlvbnMpO1xufVxuY2xhc3MgU3VidHJhY3RPcGVyYXRvciBleHRlbmRzIE9wZXJhdG9yIHtcbiAgLyoqIE5vdCBhY3R1YWxseSB1c2VkIGJ1dCBuZWNlc3NhcnkgZm9yIElSdW5uYWJsZSBpbnRlcmZhY2UgKi9cbiAgc2V0KF8sIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJ0cmFjdE9wZXJhdG9yKFxuICAgICAgdGhpcy5zdHJlYW1zLm1hcChzdHJlYW0gPT4gc3RyZWFtLnNldCgndGltZXpvbmUnLCB2YWx1ZSkpLFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZyksIHtcbiAgICAgICAgYmFzZTogdGhpcy5jb25maWcuYmFzZSAmJiB0aGlzLmNvbmZpZy5iYXNlLnNldCgndGltZXpvbmUnLCB2YWx1ZSksXG4gICAgICAgIHRpbWV6b25lOiB2YWx1ZSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbiAgKl9ydW4oYXJncyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5iYXNlKSByZXR1cm47XG4gICAgY29uc3QgaW5jbHVzaW9uID0gbmV3IEl0ZXJhYmxlV3JhcHBlcih0aGlzLmNvbmZpZy5iYXNlLCBhcmdzKTtcbiAgICBjb25zdCBleGNsdXNpb24gPSBuZXcgSXRlcmFibGVXcmFwcGVyKFxuICAgICAgbmV3IEFkZE9wZXJhdG9yKHRoaXMuc3RyZWFtcywge1xuICAgICAgICB0aW1lem9uZTogdGhpcy5jb25maWcudGltZXpvbmUsXG4gICAgICB9KSxcbiAgICAgIGFyZ3MsXG4gICAgKTtcbiAgICBjeWNsZVN0cmVhbXMoaW5jbHVzaW9uLCBleGNsdXNpb24sIGFyZ3MpO1xuICAgIHdoaWxlICghaW5jbHVzaW9uLmRvbmUpIHtcbiAgICAgIGNvbnN0IHlpZWxkQXJncyA9IHlpZWxkIHRoaXMubm9ybWFsaXplUnVuT3V0cHV0KGluY2x1c2lvbi52YWx1ZSk7XG4gICAgICBpZiAoISh5aWVsZEFyZ3MgJiYgeWllbGRBcmdzLnNraXBUb0RhdGUpKSB7XG4gICAgICAgIGluY2x1c2lvbi5uZXh0KCk7XG4gICAgICB9XG4gICAgICBjeWNsZVN0cmVhbXMoaW5jbHVzaW9uLCBleGNsdXNpb24sIGFyZ3MsIHlpZWxkQXJncyk7XG4gICAgfVxuICB9XG4gIGNhbGN1bGF0ZUlzSW5maW5pdGUoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuY29uZmlnLmJhc2UgJiYgdGhpcy5jb25maWcuYmFzZS5pc0luZmluaXRlKTtcbiAgfVxuICBjYWxjdWxhdGVIYXNEdXJhdGlvbigpIHtcbiAgICByZXR1cm4gISEodGhpcy5jb25maWcuYmFzZSAmJiB0aGlzLmNvbmZpZy5iYXNlLmhhc0R1cmF0aW9uKTtcbiAgfVxufVxuZnVuY3Rpb24gY3ljbGVTdHJlYW1zKGluY2x1c2lvbiwgZXhjbHVzaW9uLCBvcHRpb25zID0ge30sIHlpZWxkQXJncyA9IHt9KSB7XG4gIHByb2Nlc3NZaWVsZEFyZ3MoW2luY2x1c2lvbiwgZXhjbHVzaW9uXSwgb3B0aW9ucywgeWllbGRBcmdzKTtcbiAgaXRlcmF0ZUV4Y2x1c2lvbihpbmNsdXNpb24sIGV4Y2x1c2lvbiwgb3B0aW9ucyk7XG4gIHdoaWxlICghaW5jbHVzaW9uLmRvbmUgJiYgIWV4Y2x1c2lvbi5kb25lICYmIGluY2x1c2lvbi52YWx1ZS5pc0VxdWFsKGV4Y2x1c2lvbi52YWx1ZSkpIHtcbiAgICBpbmNsdXNpb24ubmV4dCgpO1xuICAgIGl0ZXJhdGVFeGNsdXNpb24oaW5jbHVzaW9uLCBleGNsdXNpb24sIG9wdGlvbnMpO1xuICB9XG59XG5mdW5jdGlvbiBpdGVyYXRlRXhjbHVzaW9uKGluY2x1c2lvbiwgZXhjbHVzaW9uLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgIHdoaWxlICghZXhjbHVzaW9uLmRvbmUgJiYgIWluY2x1c2lvbi5kb25lICYmIGV4Y2x1c2lvbi52YWx1ZS5pc0FmdGVyKGluY2x1c2lvbi52YWx1ZSkpIHtcbiAgICAgIGV4Y2x1c2lvbi5uZXh0KCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICB3aGlsZSAoIWV4Y2x1c2lvbi5kb25lICYmICFpbmNsdXNpb24uZG9uZSAmJiBleGNsdXNpb24udmFsdWUuaXNCZWZvcmUoaW5jbHVzaW9uLnZhbHVlKSkge1xuICAgIGV4Y2x1c2lvbi5uZXh0KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBvcGVyYXRvciBmdW5jdGlvbiB3aGljaCBkZWR1cGxpY2F0ZXMgYW4gb2NjdXJyZW5jZSBzdHJlYW0uIE9jY3VycmVuY2VcbiAqIGBkdXJhdGlvbmAgaXMgY3VycmVudGx5IGlnbm9yZWQuXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZSgpIHtcbiAgcmV0dXJuIG9wdGlvbnMgPT4gbmV3IFVuaXF1ZU9wZXJhdG9yKFtdLCBvcHRpb25zKTtcbn1cbmNsYXNzIFVuaXF1ZU9wZXJhdG9yIGV4dGVuZHMgT3BlcmF0b3Ige1xuICAvKiogTm90IGFjdHVhbGx5IHVzZWQgYnV0IG5lY2Vzc2FyeSBmb3IgSVJ1bm5hYmxlIGludGVyZmFjZSAqL1xuICBzZXQoXywgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFVuaXF1ZU9wZXJhdG9yKFxuICAgICAgW10sXG4gICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnKSwge1xuICAgICAgICBiYXNlOiB0aGlzLmNvbmZpZy5iYXNlICYmIHRoaXMuY29uZmlnLmJhc2Uuc2V0KCd0aW1lem9uZScsIHZhbHVlKSxcbiAgICAgICAgdGltZXpvbmU6IHZhbHVlLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuICAqX3J1bihhcmdzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmJhc2UpIHJldHVybjtcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgSXRlcmFibGVXcmFwcGVyKHRoaXMuY29uZmlnLmJhc2UsIGFyZ3MpO1xuICAgIHdoaWxlICghc3RyZWFtLmRvbmUpIHtcbiAgICAgIGNvbnN0IHlpZWxkQXJncyA9IHlpZWxkIHRoaXMubm9ybWFsaXplUnVuT3V0cHV0KHN0cmVhbS52YWx1ZSk7XG4gICAgICBjb25zdCBsYXN0VmFsdWUgPSBzdHJlYW0udmFsdWU7XG4gICAgICAvLyBpdGVyYXRlIHRoZSBjdXJyZW50IHN0cmVhbVxuICAgICAgc3RyZWFtLm5leHQoeWllbGRBcmdzKTtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgISh5aWVsZEFyZ3MgJiYgeWllbGRBcmdzLnNraXBUb0RhdGUpICYmXG4gICAgICAgICFzdHJlYW0uZG9uZSAmJlxuICAgICAgICBzdHJlYW0udmFsdWUuaXNFcXVhbChsYXN0VmFsdWUpXG4gICAgICApIHtcbiAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsY3VsYXRlSXNJbmZpbml0ZSgpIHtcbiAgICByZXR1cm4gISEodGhpcy5jb25maWcuYmFzZSAmJiB0aGlzLmNvbmZpZy5iYXNlLmlzSW5maW5pdGUpO1xuICB9XG4gIGNhbGN1bGF0ZUhhc0R1cmF0aW9uKCkge1xuICAgIHJldHVybiAhISh0aGlzLmNvbmZpZy5iYXNlICYmIHRoaXMuY29uZmlnLmJhc2UuaGFzRHVyYXRpb24pO1xuICB9XG59XG5cbmNsYXNzIFNjaGVkdWxlIGV4dGVuZHMgU2NoZWR1bGVCYXNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBTY2hlZHVsZSBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIG9wdGlvbnMuXG4gICAqXG4gICAqIFRoZSBvcmRlciBvZiBwcmVjaWRlbmNlIGZvciBycnVsZXMsIHJkYXRlcywgZXhydWxlcywgYW5kIGV4ZGF0ZXMgaXM6XG4gICAqXG4gICAqIDEuIHJydWxlcyBhcmUgaW5jbHVkZWRcbiAgICogMi4gZXhydWxlcyBhcmUgZXhjbHVkZWRcbiAgICogMy4gcmRhdGVzIGFyZSBpbmNsdWRlZFxuICAgKiA0LiBleGRhdGVzIGFyZSBleGNsdWRlZFxuICAgKlxuICAgKiAjIyMgT3B0aW9uc1xuICAgKlxuICAgKiAtICoqdGltZXpvbmUqKjogVGhlIHRpbWV6b25lIHRoYXQgeWllbGRlZCBvY2N1cnJlbmNlcyBzaG91bGQgYmUgKmRpc3BsYXllZCogaW4uXG4gICAqICAgTm90ZSwgdGhpcyBvbmUgYWZmZWN0cyB0aGUgKmRpc3BsYXllZCogdGltZXpvbmUgb2YgeWllbGRlZCBvY2N1cnJlbmNlcy5cbiAgICogICBGb3IgcnVsZXMsIG9jY3VycmVuY2VzIGFyZSBmaXJzdCBmb3VuZCB1c2luZyB0aGUgdW5tb2RpZmllZCBydWxlXG4gICAqICAgY29uZmlnIChpbmNsdWRpbmcgd2hhdGV2ZXIgdGltZXpvbmUgdGhlIGBzdGFydGAgZGF0ZXRpbWUgaXMgZGVmaW5lZFxuICAgKiAgIGluKSwgYW5kIHRoZW4gY29udmVydGVkIHRvIHRoZSB0aW1lem9uZSBzcGVjaWZpZWQgaGVyZSBiZWZvcmUgYmVpbmdcbiAgICogICB5aWVsZGVkLiBCeSBkZWZhdWx0LCB0aGUgdGltZXpvbmUgaXMgKmxvY2FsKiB0aW1lIChgbnVsbGApLiBTbyBpZiB5b3UgZG9uJ3RcbiAgICogICB3YW50IHlvdXIgcnVsZXMgdG8gYmUgZGlzcGxheWVkIGluIGxvY2FsIHRpbWUsIHlvdSBtdXN0IHN1cHBseSBhXG4gICAqICAgdGltZXpvbmUgYXJndW1lbnQuXG4gICAqIC0gKipkYXRhKio6IGFyYml0cmFyeSBkYXRhIHlvdSBjYW4gYXNzb2NpYXRlIHdpdGggdGhpcyBTY2hlZHVsZS4gVGhpc1xuICAgKiAgIGlzIHRoZSBvbmx5IG11dGFibGUgcHJvcGVydHkgb2YgYFNjaGVkdWxlYCBvYmplY3RzLlxuICAgKiAtICoqbWF4RHVyYXRpb24qKjogY3VycmVudGx5IHVudXNlZC5cbiAgICogLSAqKnJydWxlcyoqOiBydWxlcyBzcGVjaWZ5aW5nIHdoZW4gb2NjdXJyZW5jZXMgaGFwcGVuLiBTZWUgdGhlIFwiUnVsZSBDb25maWdcIlxuICAgKiAgIHNlY3Rpb24gYmVsb3cuXG4gICAqIC0gKipyZGF0ZXMqKjogaW5kaXZpZHVhbCBkYXRlcyB0aGF0IHNob3VsZCBiZSBfaW5jbHVkZWRfIGluIHRoZSBzY2hlZHVsZS5cbiAgICogLSAqKmV4ZGF0ZXMqKjogaW5kaXZpZHVhbCBkYXRlcyB0aGF0IHNob3VsZCBiZSBfZXhjbHVkZWRfIGZyb20gdGhlIHNjaGVkdWxlLlxuICAgKiAtICoqZXhydWxlcyoqOiBydWxlcyBzcGVjaWZ5aW5nIHdoZW4gb2NjdXJyZW5jZXMgc2hvdWxkbid0IGhhcHBlbi4gU2VlIHRoZVxuICAgKiAgIFwiUnVsZSBDb25maWdcIiBzZWN0aW9uIGJlbG93LlxuICAgKlxuICAgKiAjIyMgUnVsZSBDb25maWdcbiAgICpcbiAgICogLSAjIyMjIGZyZXF1ZW5jeVxuICAgKlxuICAgKiAgIFRoZSBmcmVxdWVuY3kgcnVsZSBwYXJ0IGlkZW50aWZpZXMgdGhlIHR5cGUgb2YgcmVjdXJyZW5jZSBydWxlLiBWYWxpZCB2YWx1ZXNcbiAgICogICBpbmNsdWRlIGBcIlNFQ09ORExZXCJgLCBgXCJNSU5VVEVMWVwiYCwgYFwiSE9VUkxZXCJgLCBgXCJEQUlMWVwiYCwgYFwiV0VFS0xZXCJgLFxuICAgKiAgIGBcIk1PTlRITFlcImAsIG9yIGBcIllFQVJMWVwiYC5cbiAgICpcbiAgICogLSAjIyMjIHN0YXJ0XG4gICAqXG4gICAqICAgVGhlIHN0YXJ0IG9mIHRoZSBydWxlIChub3QgbmVjZXNzYXJpbHkgdGhlIGZpcnN0IG9jY3VycmVuY2UpLlxuICAgKiAgIEVpdGhlciBhIGBEYXRlQWRhcHRlcmAgaW5zdGFuY2UsIGRhdGUgb2JqZWN0LCBvciBgRGF0ZVRpbWVgIG9iamVjdC5cbiAgICogICBUaGUgdHlwZSBvZiBkYXRlIG9iamVjdCBkZXBlbmRzIG9uIHRoZSBgRGF0ZUFkYXB0ZXJgIGNsYXNzIHVzZWQgZm9yIHRoaXNcbiAgICogICBgUnVsZWAuXG4gICAqXG4gICAqIC0gIyMjIyBlbmQ/XG4gICAqXG4gICAqICAgVGhlIGVuZCBvZiB0aGUgcnVsZSAobm90IG5lY2Vzc2FyaWx5IHRoZSBsYXN0IG9jY3VycmVuY2UpLlxuICAgKiAgIEVpdGhlciBhIGBEYXRlQWRhcHRlcmAgaW5zdGFuY2UsIGRhdGUgb2JqZWN0LCBvciBgRGF0ZVRpbWVgIG9iamVjdC5cbiAgICogICBUaGUgdHlwZSBvZiBkYXRlIG9iamVjdCBkZXBlbmRzIG9uIHRoZSBgRGF0ZUFkYXB0ZXJgIGNsYXNzIHVzZWQgZm9yIHRoaXNcbiAgICogICBgUnVsZWAuXG4gICAqXG4gICAqIC0gIyMjIyBkdXJhdGlvbj9cbiAgICpcbiAgICogICBBIGxlbmd0aCBvZiB0aW1lIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHMuXG4gICAqXG4gICAqIC0gIyMjIyBpbnRlcnZhbD9cbiAgICpcbiAgICogICBUaGUgaW50ZXJ2YWwgcnVsZSBwYXJ0IGNvbnRhaW5zIGEgcG9zaXRpdmUgaW50ZWdlciByZXByZXNlbnRpbmcgYXRcbiAgICogICB3aGljaCBpbnRlcnZhbHMgdGhlIHJlY3VycmVuY2UgcnVsZSByZXBlYXRzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpc1xuICAgKiAgIGAxYCwgbWVhbmluZyBldmVyeSBzZWNvbmQgZm9yIGEgU0VDT05ETFkgcnVsZSwgZXZlcnkgbWludXRlIGZvciBhXG4gICAqICAgTUlOVVRFTFkgcnVsZSwgZXZlcnkgaG91ciBmb3IgYW4gSE9VUkxZIHJ1bGUsIGV2ZXJ5IGRheSBmb3IgYVxuICAgKiAgIERBSUxZIHJ1bGUsIGV2ZXJ5IHdlZWsgZm9yIGEgV0VFS0xZIHJ1bGUsIGV2ZXJ5IG1vbnRoIGZvciBhXG4gICAqICAgTU9OVEhMWSBydWxlLCBhbmQgZXZlcnkgeWVhciBmb3IgYSBZRUFSTFkgcnVsZS4gRm9yIGV4YW1wbGUsXG4gICAqICAgd2l0aGluIGEgREFJTFkgcnVsZSwgYSB2YWx1ZSBvZiBgOGAgbWVhbnMgZXZlcnkgZWlnaHQgZGF5cy5cbiAgICpcbiAgICogLSAjIyMjIGNvdW50P1xuICAgKlxuICAgKiAgIFRoZSBjb3VudCBydWxlIHBhcnQgZGVmaW5lcyB0aGUgbnVtYmVyIG9mIG9jY3VycmVuY2VzIGF0IHdoaWNoIHRvXG4gICAqICAgcmFuZ2UtYm91bmQgdGhlIHJlY3VycmVuY2UuIGBjb3VudGAgYW5kIGBlbmRgIGFyZSBib3RoIHR3byBkaWZmZXJlbnRcbiAgICogICB3YXlzIG9mIHNwZWNpZnlpbmcgaG93IGEgcmVjdXJyZW5jZSBjb21wbGV0ZXMuXG4gICAqXG4gICAqIC0gIyMjIyB3ZWVrU3RhcnQ/XG4gICAqXG4gICAqICAgVGhlIHdlZWtTdGFydCBydWxlIHBhcnQgc3BlY2lmaWVzIHRoZSBkYXkgb24gd2hpY2ggdGhlIHdvcmt3ZWVrIHN0YXJ0cy5cbiAgICogICBWYWxpZCB2YWx1ZXMgYXJlIGBcIk1PXCJgLCBgXCJUVVwiYCwgYFwiV0VcImAsIGBcIlRIXCJgLCBgXCJGUlwiYCwgYFwiU0FcImAsIGFuZCBgXCJTVVwiYC5cbiAgICogICBUaGlzIGlzIHNpZ25pZmljYW50IHdoZW4gYSBXRUVLTFkgcnVsZSBoYXMgYW4gaW50ZXJ2YWwgZ3JlYXRlciB0aGFuIDEsXG4gICAqICAgYW5kIGEgYGJ5RGF5T2ZXZWVrYCBydWxlIHBhcnQgaXMgc3BlY2lmaWVkLiBUaGVcbiAgICogICBkZWZhdWx0IHZhbHVlIGlzIGBcIk1PXCJgLlxuICAgKlxuICAgKiAtICMjIyMgYnlTZWNvbmRPZk1pbnV0ZT9cbiAgICpcbiAgICogICBUaGUgYnlTZWNvbmRPZk1pbnV0ZSBydWxlIHBhcnQgZXhwZWN0cyBhbiBhcnJheSBvZiBzZWNvbmRzXG4gICAqICAgd2l0aGluIGEgbWludXRlLiBWYWxpZCB2YWx1ZXMgYXJlIDAgdG8gNjAuXG4gICAqXG4gICAqIC0gIyMjIyBieU1pbnV0ZU9mSG91cj9cbiAgICpcbiAgICogICBUaGUgYnlNaW51dGVPZkhvdXIgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2YgbWludXRlcyB3aXRoaW4gYW4gaG91ci5cbiAgICogICBWYWxpZCB2YWx1ZXMgYXJlIDAgdG8gNTkuXG4gICAqXG4gICAqIC0gIyMjIyBieUhvdXJPZkRheT9cbiAgICpcbiAgICogICBUaGUgYnlIb3VyT2ZEYXkgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkgb2YgaG91cnMgb2YgdGhlIGRheS5cbiAgICogICBWYWxpZCB2YWx1ZXMgYXJlIDAgdG8gMjMuXG4gICAqXG4gICAqIC0gIyMjIyBieURheU9mV2Vlaz9cbiAgICpcbiAgICogICAqbm90ZTogdGhlIGJ5RGF5T2ZXZWVrIHJ1bGUgcGFydCBpcyBraW5kYSBjb21wbGV4LiBCbGFtZSB0aGUgSUNBTCBzcGVjLipcbiAgICpcbiAgICogICBUaGUgYnlEYXlPZldlZWsgcnVsZSBwYXJ0IGV4cGVjdHMgYW4gYXJyYXkuIEVhY2ggYXJyYXkgZW50cnkgY2FuXG4gICAqICAgYmUgYSBkYXkgb2YgdGhlIHdlZWsgKGBcIlNVXCJgLCBgXCJNT1wiYCAsIGBcIlRVXCJgLCBgXCJXRVwiYCwgYFwiVEhcImAsXG4gICAqICAgYFwiRlJcImAsIGBcIlNBXCJgKS4gSWYgdGhlIHJ1bGUncyBgZnJlcXVlbmN5YCBpcyBlaXRoZXIgTU9OVEhMWSBvciBZRUFSTFksXG4gICAqICAgQW55IGVudHJ5IGNhbiBhbHNvIGJlIGEgdHVwbGUgd2hlcmUgdGhlIGZpcnN0IHZhbHVlIG9mIHRoZSB0dXBsZSBpcyBhXG4gICAqICAgZGF5IG9mIHRoZSB3ZWVrIGFuZCB0aGUgc2Vjb25kIHZhbHVlIGlzIGFuIHBvc2l0aXZlL25lZ2F0aXZlIGludGVnZXJcbiAgICogICAoZS5nLiBgW1wiU1VcIiwgMV1gKS4gSW4gdGhpcyBjYXNlLCB0aGUgbnVtYmVyIGluZGljYXRlcyB0aGUgbnRoIG9jY3VycmVuY2Ugb2ZcbiAgICogICB0aGUgc3BlY2lmaWVkIGRheSB3aXRoaW4gdGhlIE1PTlRITFkgb3IgWUVBUkxZIHJ1bGUuXG4gICAqXG4gICAqICAgVGhlIGJlaGF2aW9yIG9mIGJ5RGF5T2ZXZWVrIGNoYW5nZXMgZGVwZW5kaW5nIG9uIHRoZSBgZnJlcXVlbmN5YFxuICAgKiAgIG9mIHRoZSBydWxlLlxuICAgKlxuICAgKiAgIFdpdGhpbiBhIE1PTlRITFkgcnVsZSwgYFtcIk1PXCIsIDFdYCByZXByZXNlbnRzIHRoZSBmaXJzdCBNb25kYXlcbiAgICogICB3aXRoaW4gdGhlIG1vbnRoLCB3aGVyZWFzIGBbXCJNT1wiLCAtMV1gIHJlcHJlc2VudHMgdGhlIGxhc3QgTW9uZGF5XG4gICAqICAgb2YgdGhlIG1vbnRoLlxuICAgKlxuICAgKiAgIFdpdGhpbiBhIFlFQVJMWSBydWxlLCB0aGUgbnVtZXJpYyB2YWx1ZSBpbiBhIGJ5RGF5T2ZXZWVrIHR1cGxlIGVudHJ5XG4gICAqICAgY29ycmVzcG9uZHMgdG8gYW4gb2Zmc2V0IHdpdGhpbiB0aGUgbW9udGggd2hlbiB0aGUgYnlNb250aE9mWWVhciBydWxlIHBhcnQgaXNcbiAgICogICBwcmVzZW50LCBhbmQgY29ycmVzcG9uZHMgdG8gYW4gb2Zmc2V0IHdpdGhpbiB0aGUgeWVhciBvdGhlcndpc2UuXG4gICAqXG4gICAqICAgUmVnYXJkbGVzcyBvZiBydWxlIGBmcmVxdWVuY3lgLCBpZiBhIGJ5RGF5T2ZXZWVrIGVudHJ5IGlzIGEgc3RyaW5nXG4gICAqICAgKHJhdGhlciB0aGFuIGEgdHVwbGUpLCBpdCBtZWFucyBcImFsbCBvZiB0aGVzZSBkYXlzXCIgd2l0aGluIHRoZSBzcGVjaWZpZWRcbiAgICogICBmcmVxdWVuY3kgKGUuZy4gd2l0aGluIGEgTU9OVEhMWSBydWxlLCBgXCJNT1wiYCByZXByZXNlbnRzIGFsbCBNb25kYXlzIHdpdGhpblxuICAgKiAgIHRoZSBtb250aCkuXG4gICAqXG4gICAqIC0gIyMjIyBieURheU9mTW9udGg/XG4gICAqXG4gICAqICAgVGhlIGJ5RGF5T2ZNb250aCBydWxlIHBhcnQgZXhwZWN0cyBhbiBhcnJheSBvZiBkYXlzXG4gICAqICAgb2YgdGhlIG1vbnRoLiBWYWxpZCB2YWx1ZXMgYXJlIDEgdG8gMzEgb3IgLTMxIHRvIC0xLlxuICAgKlxuICAgKiAgIEZvciBleGFtcGxlLCAtMTAgcmVwcmVzZW50cyB0aGUgdGVudGggdG8gdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aC5cbiAgICogICBUaGUgYnlEYXlPZk1vbnRoIHJ1bGUgcGFydCAqbXVzdCBub3QqIGJlIHNwZWNpZmllZCB3aGVuIHRoZSBydWxlJ3NcbiAgICogICBgZnJlcXVlbmN5YCBpcyBzZXQgdG8gV0VFS0xZLlxuICAgKlxuICAgKiAtICMjIyMgYnlNb250aE9mWWVhcj9cbiAgICpcbiAgICogICBUaGUgYnlNb250aE9mWWVhciBydWxlIHBhcnQgZXhwZWN0cyBhbiBhcnJheSBvZiBtb250aHNcbiAgICogICBvZiB0aGUgeWVhci4gVmFsaWQgdmFsdWVzIGFyZSAxIHRvIDEyLlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy5ycnVsZXMgPSBbXTtcbiAgICB0aGlzLmV4cnVsZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgWydycnVsZXMnLCAnZXhydWxlcyddKSB7XG4gICAgICBjb25zdCBhcmcgPSBvcHRpb25zW3Byb3BdO1xuICAgICAgaWYgKGFyZykge1xuICAgICAgICB0aGlzW3Byb3BdID0gYXJnLm1hcChydWxlQXJncyA9PiB7XG4gICAgICAgICAgaWYgKHJ1bGVBcmdzIGluc3RhbmNlb2YgUnVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGVBcmdzLnNldCgndGltZXpvbmUnLCB0aGlzLnRpbWV6b25lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSdWxlKHJ1bGVBcmdzLCB7XG4gICAgICAgICAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIFsncmRhdGVzJywgJ2V4ZGF0ZXMnXSkge1xuICAgICAgY29uc3QgYXJnID0gb3B0aW9uc1twcm9wXTtcbiAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgdGhpc1twcm9wXSA9XG4gICAgICAgICAgYXJnIGluc3RhbmNlb2YgRGF0ZXNcbiAgICAgICAgICAgID8gYXJnLnNldCgndGltZXpvbmUnLCB0aGlzLnRpbWV6b25lKVxuICAgICAgICAgICAgOiBuZXcgRGF0ZXMoe1xuICAgICAgICAgICAgICAgIGRhdGVzOiBhcmcsXG4gICAgICAgICAgICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1twcm9wXSA9IG5ldyBEYXRlcyh7XG4gICAgICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmhhc0R1cmF0aW9uID1cbiAgICAgIHRoaXMucnJ1bGVzLmV2ZXJ5KHJ1bGUgPT4gcnVsZS5oYXNEdXJhdGlvbikgJiZcbiAgICAgIHRoaXMuZXhydWxlcy5ldmVyeShydWxlID0+IHJ1bGUuaGFzRHVyYXRpb24pICYmXG4gICAgICB0aGlzLnJkYXRlcy5oYXNEdXJhdGlvbiAmJlxuICAgICAgdGhpcy5leGRhdGVzLmhhc0R1cmF0aW9uO1xuICAgIHRoaXMuaXNJbmZpbml0ZSA9IHRoaXMucnJ1bGVzLnNvbWUocnVsZSA9PiBydWxlLmlzSW5maW5pdGUpO1xuICAgIHRoaXMub2NjdXJyZW5jZVN0cmVhbSA9IFtcbiAgICAgIGFkZCguLi50aGlzLnJydWxlcyksXG4gICAgICBzdWJ0cmFjdCguLi50aGlzLmV4cnVsZXMpLFxuICAgICAgYWRkKHRoaXMucmRhdGVzKSxcbiAgICAgIHN1YnRyYWN0KHRoaXMuZXhkYXRlcyksXG4gICAgICB1bmlxdWUoKSxcbiAgICBdLnJlZHVjZSgocHJldiwgY3VycikgPT4gY3Vycih7IGJhc2U6IHByZXYsIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lIH0pLCB1bmRlZmluZWQpO1xuICB9XG4gIGFkZChwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IHJydWxlcyA9IHRoaXMucnJ1bGVzLnNsaWNlKCk7XG4gICAgY29uc3QgZXhydWxlcyA9IHRoaXMuZXhydWxlcy5zbGljZSgpO1xuICAgIGxldCByZGF0ZXMgPSB0aGlzLnJkYXRlcztcbiAgICBsZXQgZXhkYXRlcyA9IHRoaXMuZXhkYXRlcztcbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ3JydWxlJzpcbiAgICAgICAgcnJ1bGVzLnB1c2godmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2V4cnVsZSc6XG4gICAgICAgIGV4cnVsZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmRhdGUnOlxuICAgICAgICByZGF0ZXMgPSB0aGlzLnJkYXRlcy5hZGQodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2V4ZGF0ZSc6XG4gICAgICAgIGV4ZGF0ZXMgPSB0aGlzLmV4ZGF0ZXMuYWRkKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2NoZWR1bGUoe1xuICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICBycnVsZXMsXG4gICAgICBleHJ1bGVzLFxuICAgICAgcmRhdGVzLFxuICAgICAgZXhkYXRlcyxcbiAgICB9KTtcbiAgfVxuICByZW1vdmUocHJvcCwgdmFsdWUpIHtcbiAgICBsZXQgcnJ1bGVzID0gdGhpcy5ycnVsZXM7XG4gICAgbGV0IGV4cnVsZXMgPSB0aGlzLmV4cnVsZXM7XG4gICAgbGV0IHJkYXRlcyA9IHRoaXMucmRhdGVzO1xuICAgIGxldCBleGRhdGVzID0gdGhpcy5leGRhdGVzO1xuICAgIHN3aXRjaCAocHJvcCkge1xuICAgICAgY2FzZSAncnJ1bGUnOlxuICAgICAgICBycnVsZXMgPSBycnVsZXMuZmlsdGVyKHJ1bGUgPT4gcnVsZSAhPT0gdmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2V4cnVsZSc6XG4gICAgICAgIGV4cnVsZXMgPSBleHJ1bGVzLmZpbHRlcihydWxlID0+IHJ1bGUgIT09IHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZGF0ZSc6XG4gICAgICAgIHJkYXRlcyA9IHRoaXMucmRhdGVzLnJlbW92ZSh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZXhkYXRlJzpcbiAgICAgICAgZXhkYXRlcyA9IHRoaXMuZXhkYXRlcy5yZW1vdmUodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTY2hlZHVsZSh7XG4gICAgICB0aW1lem9uZTogdGhpcy50aW1lem9uZSxcbiAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgIHJydWxlcyxcbiAgICAgIGV4cnVsZXMsXG4gICAgICByZGF0ZXMsXG4gICAgICBleGRhdGVzLFxuICAgIH0pO1xuICB9XG4gIHNldChwcm9wLCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHRpbWV6b25lID0gdGhpcy50aW1lem9uZTtcbiAgICBsZXQgcnJ1bGVzID0gdGhpcy5ycnVsZXM7XG4gICAgbGV0IGV4cnVsZXMgPSB0aGlzLmV4cnVsZXM7XG4gICAgbGV0IHJkYXRlcyA9IHRoaXMucmRhdGVzO1xuICAgIGxldCBleGRhdGVzID0gdGhpcy5leGRhdGVzO1xuICAgIHN3aXRjaCAocHJvcCkge1xuICAgICAgY2FzZSAndGltZXpvbmUnOlxuICAgICAgICBpZiAodmFsdWUgPT09IHRoaXMudGltZXpvbmUgJiYgIW9wdGlvbnMua2VlcExvY2FsVGltZSkgcmV0dXJuIHRoaXM7XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMua2VlcExvY2FsVGltZSkge1xuICAgICAgICAgIHJydWxlcyA9IHJydWxlcy5tYXAocnVsZSA9PiBydWxlLnNldCgndGltZXpvbmUnLCB2YWx1ZSwgb3B0aW9ucykpO1xuICAgICAgICAgIGV4cnVsZXMgPSBleHJ1bGVzLm1hcChydWxlID0+IHJ1bGUuc2V0KCd0aW1lem9uZScsIHZhbHVlLCBvcHRpb25zKSk7XG4gICAgICAgICAgcmRhdGVzID0gcmRhdGVzLnNldCgndGltZXpvbmUnLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgICAgZXhkYXRlcyA9IGV4ZGF0ZXMuc2V0KCd0aW1lem9uZScsIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aW1lem9uZSA9IHZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JydWxlcyc6XG4gICAgICAgIHJydWxlcyA9IHZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2V4cnVsZXMnOlxuICAgICAgICBleHJ1bGVzID0gdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmRhdGVzJzpcbiAgICAgICAgcmRhdGVzID0gdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZXhkYXRlcyc6XG4gICAgICAgIGV4ZGF0ZXMgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2NoZWR1bGUoe1xuICAgICAgdGltZXpvbmUsXG4gICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICBycnVsZXMsXG4gICAgICBleHJ1bGVzLFxuICAgICAgcmRhdGVzLFxuICAgICAgZXhkYXRlcyxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEFuIG9wZXJhdG9yIGZ1bmN0aW9uLCB3aGljaCB0YWtlcyBhIHNwcmVhZCBvZiBvY2N1cnJlbmNlIGdlbmVyYXRvcnMgYW5kIG9ubHlcbiAqIHJldHVybnMgdGhlIGRhdGVzIHdoaWNoIGludGVyc2VjdCBldmVyeSBvY2N1cnJlbmNlIGdlbmVyYXRvci5cbiAqXG4gKiBCZWNhdXNlIGl0J3MgcG9zc2libGUgZm9yIGFsbCB0aGUgZ2VuZXJhdG9ycyB0byBuZXZlciBpbnRlcnNlY3QsXG4gKiBhbmQgYmVjYXVzZSB0aGUgaW50ZXJzZWN0aW9uIG9wZXJhdG9yIGNhbid0IGRldGVjdCB0aGlzIGxhY2sgb2YgaW50ZXJzZWN0aW9uLFxuICogeW91IG11c3QgY2FsbCBgaW50ZXJzZWN0aW9uKClgIHdpdGggYSBge21heEZhaWxlZEl0ZXJhdGlvbnM6IG51bWJlcn1gIGFyZ3VtZW50LlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGdsb2JhbGx5IHNldCBgUlNjaGVkdWxlQ29uZmlnLmRlZmF1bHRNYXhGYWlsZWRJdGVyYXRpb25zYC5cbiAqIFdpdGhvdXQgZnVydGhlciBpbmZvcm1hdGlvbiwgSSdkIHByb2JhYmx5IHNldCBgZGVmYXVsdE1heEZhaWxlZEl0ZXJhdGlvbnMgPSA1MGAuXG4gKlxuICogVGhlIGBtYXhGYWlsZWRJdGVyYXRpb25zYCBhcmd1bWVudCBjYXBzIHRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGUgb3BlcmF0b3Igd2lsbFxuICogcnVuIHRocm91Z2ggd2l0aG91dCBmaW5kaW5nIGEgc2luZ2xlIHZhbGlkIG9jY3VycmVuY2UuIElmIHRoaXMgbnVtYmVyIGlzIHJlYWNoZWQsIHRoZSBvcGVyYXRvciB3aWxsXG4gKiBzdG9wIGl0ZXJhdGluZyAocHJldmVudGluZyBhIHBvc3NpYmxlIGluZmluaXRlIGxvb3ApLlxuICpcbiAqIC0gTm90ZTogYG1heEZhaWxlZEl0ZXJhdGlvbnNgIGNhcHMgdGhlIG51bWJlciBvZiBpdGVyYXRpb25zIHdoaWNoXG4gKiAgICpmYWlsIHRvIHR1cm4gdXAgYSBzaW5nbGUgdmFsaWQgb2NjdXJyZW5jZSouIEV2ZXJ5IHRpbWUgYSB2YWxpZCBvY2N1cnJlbmNlIGlzIHJldHVybmVkLFxuICogICB0aGUgY3VycmVudCBpdGVyYXRpb24gY291bnQgaXMgcmVzZXQgdG8gMC5cbiAqXG4gKi9cbmZ1bmN0aW9uIGludGVyc2VjdGlvbihhcmdzKSB7XG4gIHJldHVybiBvcHRpb25zID0+IG5ldyBJbnRlcnNlY3Rpb25PcGVyYXRvcihhcmdzLCBvcHRpb25zKTtcbn1cbmNsYXNzIEludGVyc2VjdGlvbk9wZXJhdG9yIGV4dGVuZHMgT3BlcmF0b3Ige1xuICBjb25zdHJ1Y3RvcihhcmdzLCBjb25maWcpIHtcbiAgICBzdXBlcihhcmdzLnN0cmVhbXMsIGNvbmZpZyk7XG4gICAgaWYgKHRoaXMuaXNJbmZpbml0ZSkge1xuICAgICAgdGhpcy5tYXhGYWlsZWRJdGVyYXRpb25zID1cbiAgICAgICAgYXJncy5tYXhGYWlsZWRJdGVyYXRpb25zIHx8IEludGVyc2VjdGlvbk9wZXJhdG9yLmRlZmF1bHRNYXhGYWlsZWRJdGVyYXRpb25zO1xuICAgICAgaWYgKCF0aGlzLm1heEZhaWxlZEl0ZXJhdGlvbnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgJ1RoZSBJbnRlcnNlY3Rpb25PcGVyYXRvciBtdXN0IGJlIHByb3ZpZGVkICcgK1xuICAgICAgICAgICAgJ2EgYG1heEZhaWxlZEl0ZXJhdGlvbnNgIGFyZ3VtZW50IHdoZW4gaXQgaXMgYnVpbHQgZnJvbSBzY2hlZHVsZXMgb2YgaW5maW5pdGUgbGVuZ3RoLiAnICtcbiAgICAgICAgICAgICdUaGlzIGFyZ3VtZW50IGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgdGhlIEludGVyc2VjdGlvbk9wZXJhdG9yIGRvZXMgbm90IGVudGVyICcgK1xuICAgICAgICAgICAgJ2FuIGluZmluaXRlIGxvb3AgYmVjYXVzZSB0aGUgdW5kZXJseWluZyBzY2hlZHVsZXMgbmV2ZXIgaW50ZXJzZWN0LiAnICtcbiAgICAgICAgICAgICdJZiB0aGUgYG1heEZhaWxlZEl0ZXJhdGlvbnNgIGNvdW50IGlzIHJlYWNoZWQgaXQgd2lsbCBiZSBhc3N1bWVkIHRoYXQgJyArXG4gICAgICAgICAgICAnYWxsIHZhbGlkIG9jY3VycmVuY2VzIGhhdmUgYmVlbiBmb3VuZCBhbmQgaXRlcmF0aW9uIHdpbGwgZW5kIHdpdGhvdXQgZXJyb3IuJyArXG4gICAgICAgICAgICAnV2l0aG91dCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLCBcIjUwXCIgaXMgcHJvYmFibHkgYSBnb29kICcgK1xuICAgICAgICAgICAgJ2BtYXhGYWlsZWRJdGVyYXRpb25zYCB2YWx1ZS4gJyArXG4gICAgICAgICAgICAnSWYgdGhlIHNjaGVkdWxlcyBhcmUgbm90IG9mIGluZmluaXRlIGxlbmd0aCwgYG1heEZhaWxlZEl0ZXJhdGlvbnNgIGlzIGlnbm9yZWQuICcgK1xuICAgICAgICAgICAgJ05vdGUgYWxzbyB0aGF0IHlvdSBjYW4gcHJvdmlkZSBhIGBkZWZhdWx0TWF4RmFpbGVkSXRlcmF0aW9uc2AgbnVtYmVyIHZpYSAnICtcbiAgICAgICAgICAgICdJbnRlcnNlY3Rpb25PcGVyYXRvci5kZWZhdWx0TWF4RmFpbGVkSXRlcmF0aW9ucy4nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzZXQoXywgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IEludGVyc2VjdGlvbk9wZXJhdG9yKFxuICAgICAge1xuICAgICAgICBtYXhGYWlsZWRJdGVyYXRpb25zOiB0aGlzLm1heEZhaWxlZEl0ZXJhdGlvbnMsXG4gICAgICAgIHN0cmVhbXM6IHRoaXMuc3RyZWFtcy5tYXAoc3RyZWFtID0+IHN0cmVhbS5zZXQoJ3RpbWV6b25lJywgdmFsdWUpKSxcbiAgICAgIH0sXG4gICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnKSwge1xuICAgICAgICBiYXNlOiB0aGlzLmNvbmZpZy5iYXNlICYmIHRoaXMuY29uZmlnLmJhc2Uuc2V0KCd0aW1lem9uZScsIHZhbHVlKSxcbiAgICAgICAgdGltZXpvbmU6IHZhbHVlLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuICAqX3J1bihhcmdzID0ge30pIHtcbiAgICBjb25zdCBzdHJlYW1zID0gdGhpcy5zdHJlYW1zLm1hcChzdHJlYW0gPT4gbmV3IEl0ZXJhYmxlV3JhcHBlcihzdHJlYW0sIGFyZ3MpKTtcbiAgICBpZiAodGhpcy5jb25maWcuYmFzZSkge1xuICAgICAgc3RyZWFtcy5wdXNoKG5ldyBJdGVyYWJsZVdyYXBwZXIodGhpcy5jb25maWcuYmFzZSwgYXJncykpO1xuICAgIH1cbiAgICBpZiAoc3RyZWFtcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBjb25zdCBoYXNFbmREYXRlID0gISEoIXRoaXMuaXNJbmZpbml0ZSB8fCBhcmdzLnJldmVyc2UgfHwgYXJncy5lbmQpO1xuICAgIGlmIChcbiAgICAgICFjeWNsZVN0cmVhbXMkMShcbiAgICAgICAgc3RyZWFtcyxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpLCB7XG4gICAgICAgICAgaGFzRW5kRGF0ZSxcbiAgICAgICAgICBpdGVyYXRpb246IDAsXG4gICAgICAgICAgbWF4SXRlcmF0aW9uczogdGhpcy5tYXhGYWlsZWRJdGVyYXRpb25zLFxuICAgICAgICB9KSxcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHN0cmVhbSA9IHNlbGVjdE5leHRJdGVyYWJsZShzdHJlYW1zLCBhcmdzKTtcbiAgICB3aGlsZSAoc3RyZWFtKSB7XG4gICAgICBjb25zdCB5aWVsZEFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZVJ1bk91dHB1dChzdHJlYW0udmFsdWUpO1xuICAgICAgY29uc3QgbGFzdFZhbGlkRGF0ZSA9IHN0cmVhbS52YWx1ZTtcbiAgICAgIGlmICghKHlpZWxkQXJncyA9PT0gbnVsbCB8fCB5aWVsZEFyZ3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHlpZWxkQXJncy5za2lwVG9EYXRlKSkge1xuICAgICAgICAvLyBpdGVyYXRlIHRoZSBjdXJyZW50IHN0cmVhbVxuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAhY3ljbGVTdHJlYW1zJDEoXG4gICAgICAgICAgc3RyZWFtcyxcbiAgICAgICAgICBsYXN0VmFsaWREYXRlLFxuICAgICAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYXJncyksIHtcbiAgICAgICAgICAgIGhhc0VuZERhdGUsXG4gICAgICAgICAgICBpdGVyYXRpb246IDAsXG4gICAgICAgICAgICBtYXhJdGVyYXRpb25zOiB0aGlzLm1heEZhaWxlZEl0ZXJhdGlvbnMsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgeWllbGRBcmdzLFxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gVGhlIGNhbGwgdG8gYGN5Y2xlU3RyZWFtcygpYCwgYWJvdmUsIGhhcyBhbHJlYWR5IGNhbGxlZFxuICAgICAgLy8gc2VsZWN0TmV4dEl0ZXJhYmxlIHdpdGggdGhlIGB5aWVsZEFyZ3NgXG4gICAgICBzdHJlYW0gPSBzZWxlY3ROZXh0SXRlcmFibGUoc3RyZWFtcywgYXJncyk7XG4gICAgfVxuICB9XG4gIGNhbGN1bGF0ZUlzSW5maW5pdGUoKSB7XG4gICAgLy8gTm90ZTogQXJyYXkjZXZlcnkoKSA9PT0gdHJ1ZSB3aGVuIGxlbmd0aCA9PT0gMFxuICAgIGlmICghdGhpcy5jb25maWcuYmFzZSkge1xuICAgICAgaWYgKHRoaXMuc3RyZWFtcy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbXMuZXZlcnkoc3RyZWFtID0+IHN0cmVhbS5pc0luZmluaXRlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RyZWFtcy5sZW5ndGggPT09IDApIHJldHVybiB0aGlzLmNvbmZpZy5iYXNlLmlzSW5maW5pdGU7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmJhc2UuaXNJbmZpbml0ZSAmJiB0aGlzLnN0cmVhbXMuZXZlcnkoc3RyZWFtID0+IHN0cmVhbS5pc0luZmluaXRlKTtcbiAgfVxuICBjYWxjdWxhdGVIYXNEdXJhdGlvbigpIHtcbiAgICBjb25zdCBzdHJlYW1zRHVyYXRpb24gPSB0aGlzLnN0cmVhbXMuZXZlcnkoc3RyZWFtID0+IHN0cmVhbS5oYXNEdXJhdGlvbik7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5iYXNlKSByZXR1cm4gc3RyZWFtc0R1cmF0aW9uO1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5iYXNlLmhhc0R1cmF0aW9uICYmIHN0cmVhbXNEdXJhdGlvbjtcbiAgfVxufVxuZnVuY3Rpb24gY3ljbGVTdHJlYW1zJDEoc3RyZWFtcywgbGFzdFZhbGlkRGF0ZSwgb3B0aW9ucywgeWllbGRBcmdzKSB7XG4gIGNvbnN0IG5leHQgPSBzZWxlY3ROZXh0SXRlcmFibGUoc3RyZWFtcywgb3B0aW9ucywgeWllbGRBcmdzKTtcbiAgaWYgKCFuZXh0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChsYXN0VmFsaWREYXRlICYmIG5leHQudmFsdWUuaXNFcXVhbChsYXN0VmFsaWREYXRlKSkgcmV0dXJuIHRydWU7XG4gIGlmIChzdHJlYW1zLnNvbWUoc3RyZWFtID0+IHN0cmVhbS5kb25lKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoc3RyZWFtcy5ldmVyeShzdHJlYW0gPT4gc3RyZWFtLnZhbHVlLmlzRXF1YWwobmV4dC52YWx1ZSkpKSByZXR1cm4gdHJ1ZTtcbiAgb3B0aW9ucy5pdGVyYXRpb24rKztcbiAgaWYgKG9wdGlvbnMubWF4SXRlcmF0aW9ucyAmJiAhb3B0aW9ucy5oYXNFbmREYXRlICYmIG9wdGlvbnMuaXRlcmF0aW9uID4gb3B0aW9ucy5tYXhJdGVyYXRpb25zKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFNpbmNlIG5vdCBhbGwgb2YgdGhlIHN0cmVhbXMgYXJlIGVxdWFsLCB3ZSBncmFiIHRoZSBsYXN0IHN0cmVhbS4uLlxuICBjb25zdCBsYXN0ID0gc2VsZWN0TGFzdEl0ZXJhYmxlKHN0cmVhbXMsIG9wdGlvbnMpO1xuICAvLyAuLi5hbmQgc2tpcCBhbGwgdGhlIG90aGVyIHN0cmVhbXMgc28gdGhleSBhcmUgZXF1YWwgb3IgcGFzdCB0aGUgbGFzdCBvbmVcbiAgc3RyZWFtcy5mb3JFYWNoKHN0cmVhbSA9PiB7XG4gICAgLy8gQmVjYXVzZSBzdHJlYW1zIGNhbiBoYXZlIG11bHRpcGxlLCBpZGVudGljYWwgZGF0ZXMgaW4gYSByb3csXG4gICAgLy8gd2UgZG9uJ3Qgd2FudCB0byBgc2tpcFRvRGF0ZWAgaWYgdGhlIHByb3ZpZGVkIGRhdGUgaXMgZXF1YWwgdG8gdGhlIGN1cnJlbnQgZGF0ZS5cbiAgICBpZiAobGFzdC52YWx1ZS5pc0VxdWFsKHN0cmVhbS52YWx1ZSkpIHJldHVybjtcbiAgICBzdHJlYW0ubmV4dCh7IHNraXBUb0RhdGU6IGxhc3QudmFsdWUgfSk7XG4gIH0pO1xuICAvLyB0aGVuIHdlIHJlcGVhdFxuICByZXR1cm4gY3ljbGVTdHJlYW1zJDEoc3RyZWFtcywgbGFzdFZhbGlkRGF0ZSwgb3B0aW9ucyk7XG59XG5cbmNsYXNzIER1cmF0aW9uSXRlcmFibGVXcmFwcGVyIGV4dGVuZHMgSXRlcmFibGVXcmFwcGVyIHtcbiAgY29uc3RydWN0b3IoZ2VuZXJhdG9yLCBydW5BcmdzKSB7XG4gICAgc3VwZXIoZ2VuZXJhdG9yLCBydW5BcmdzKTtcbiAgICB0aGlzLndvcmtpbmdWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy5uZXh0KCk7XG4gIH1cbn1cbmNsYXNzIE1lcmdlRHVyYXRpb25PcGVyYXRvckVycm9yIGV4dGVuZHMgRXJyb3Ige31cbi8qKlxuICogQW4gb3BlcmF0b3IgZnVuY3Rpb24gd2hpY2ggdGFrZXMgYW4gb2NjdXJyZW5jZSBzdHJlYW0gd2l0aFxuICogYGhhc0R1cmF0aW9uID09PSB0cnVlYCBhbmQgbWVyZ2VzIG9jY3VycmVuY2VzIHdoaWNoIGhhdmUgb3ZlcmxhcHBpbmdcbiAqIHN0YXJ0IGFuZCBlbmQgdGltZXMuXG4gKlxuICogQmVjYXVzZSBpdCdzIHBvc3NpYmxlIGZvciBhbGwgdGhlIG9jY3VycmVuY2VzIGluIHRoZSBzdHJlYW0gdG8gaGF2ZVxuICogb3ZlcmxhcHBpbmcgc3RhcnQgYW5kIGVuZCB0aW1lcywgeW91IG11c3QgcHJvdmlkZSBhIGBtYXhEdXJhdGlvbmBcbiAqIGFyZ3VtZW50IHRoYXQgcmVwcmVzZW50cyB0aGUgbWF4aW11bSBwb3NzaWJsZSBkdXJhdGlvbiBmb3IgYSBzaW5nbGVcbiAqIG9jY3VycmVuY2UuIElmIHRoaXMgZHVyYXRpb24gaXMgZXhjZWVkZWQsIGEgYE1lcmdlRHVyYXRpb25PcGVyYXRvckVycm9yYFxuICogd2lsbCBiZSB0aHJvd24uXG4gKlxuICogLSBGb3IgeW91ciBjb252ZW5pZW5jZSwgeW91IGNhbiBnbG9iYWxseSBzZXQgYSBkZWZhdWx0XG4gKiAgIGBNZXJnZUR1cmF0aW9uT3BlcmF0b3IjbWF4RHVyYXRpb25gIHZpYVxuICogICBgUlNjaGVkdWxlQ29uZmlnLk1lcmdlRHVyYXRpb25PcGVyYXRvci5kZWZhdWx0TWF4RHVyYXRpb25gLlxuICpcbiAqIFVzYWdlIGV4YW1wbGU6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgTUlMTElTRUNPTkRTX0lOX0hPVVIgPSAxMDAwICogNjAgKiA2MDtcbiAqXG4gKiBjb25zdCBkYXRlcyA9IG5ldyBEYXRlcyh7XG4gKiAgIGRhdGVzOiBbXG4gKiAgICAgbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIobmV3IERhdGUoMjAxMCwgMTAsIDEwLCAxMyksIHsgZHVyYXRpb246IE1JTExJU0VDT05EU19JTl9IT1VSICogMSB9KSxcbiAqICAgICBuZXcgU3RhbmRhcmREYXRlQWRhcHRlcihuZXcgRGF0ZSgyMDEwLCAxMCwgMTEsIDEzKSwgeyBkdXJhdGlvbjogTUlMTElTRUNPTkRTX0lOX0hPVVIgKiAyIH0pLFxuICogICAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMSwgMTQpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDIgfSksXG4gKiAgICAgbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIobmV3IERhdGUoMjAxMCwgMTAsIDEyLCAxMyksIHsgZHVyYXRpb246IE1JTExJU0VDT05EU19JTl9IT1VSICogMSB9KSxcbiAqICAgXSxcbiAqICAgZGF0ZUFkcHRlcjogU3RhbmRhcmREYXRlQWRhcHRlcixcbiAqIH0pLnBpcGUoXG4gKiAgIG1lcmdlRHVyYXRpb24oe1xuICogICAgIG1heER1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDI0XG4gKiAgIH0pXG4gKiApXG4gKlxuICogZGF0ZXMub2NjdXJyZW5jZXMoKS50b0FycmF5KCkgPT09IFtcbiAqICAgbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIobmV3IERhdGUoMjAxMCwgMTAsIDEwLCAxMyksIHsgZHVyYXRpb246IE1JTExJU0VDT05EU19JTl9IT1VSICogMSB9KSxcbiAqICAgbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIobmV3IERhdGUoMjAxMCwgMTAsIDExLCAxMyksIHsgZHVyYXRpb246IE1JTExJU0VDT05EU19JTl9IT1VSICogMyB9KSxcbiAqICAgbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIobmV3IERhdGUoMjAxMCwgMTAsIDEyLCAxMyksIHsgZHVyYXRpb246IE1JTExJU0VDT05EU19JTl9IT1VSICogMSB9KSxcbiAqIF1cbiAqIGBgYFxuICovXG5mdW5jdGlvbiBtZXJnZUR1cmF0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG9wdGlvbnMgPT4gbmV3IE1lcmdlRHVyYXRpb25PcGVyYXRvcihhcmdzLCBvcHRpb25zKTtcbn1cbmNsYXNzIE1lcmdlRHVyYXRpb25PcGVyYXRvciBleHRlbmRzIE9wZXJhdG9yIHtcbiAgY29uc3RydWN0b3IoYXJncywgY29uZmlnKSB7XG4gICAgc3VwZXIoW10sIGNvbmZpZyk7XG4gICAgdGhpcy5tYXhEdXJhdGlvbiA9IGFyZ3MubWF4RHVyYXRpb247XG4gICAgaWYgKGNvbmZpZy5iYXNlICYmICFjb25maWcuYmFzZS5oYXNEdXJhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICdCYXNlIHN0cmVhbSBwcm92aWRlZCB0byBNZXJnZUR1cmF0aW9uT3BlcmF0b3IgZG9lcyBub3QgaGF2ZSBhbiBhc3NvY2lhdGVkIGR1cmF0aW9uLiAnICtcbiAgICAgICAgICAnVGhlIE1lcmdlRHVyYXRpb25PcGVyYXRvciBjYW4gb25seSBiZSB1c2VkIHdpdGggc3RyZWFtcyB3aGljaCBoYXZlIGEgZHVyYXRpb24uICcsXG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvKiogTm90IGFjdHVhbGx5IHVzZWQgYnV0IG5lY2Vzc2FyeSBmb3IgSVJ1bm5hYmxlIGludGVyZmFjZSAqL1xuICBzZXQoXywgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IE1lcmdlRHVyYXRpb25PcGVyYXRvcihcbiAgICAgIHtcbiAgICAgICAgbWF4RHVyYXRpb246IHRoaXMubWF4RHVyYXRpb24sXG4gICAgICB9LFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZyksIHtcbiAgICAgICAgYmFzZTogdGhpcy5jb25maWcuYmFzZSAmJiB0aGlzLmNvbmZpZy5iYXNlLnNldCgndGltZXpvbmUnLCB2YWx1ZSksXG4gICAgICAgIHRpbWV6b25lOiB2YWx1ZSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbiAgX3J1bihhcmdzID0ge30pIHtcbiAgICByZXR1cm4gYXJncy5yZXZlcnNlID8gdGhpcy5yZXZlcnNlUnVuKGFyZ3MpIDogdGhpcy5mb3J3YXJkUnVuKGFyZ3MpO1xuICB9XG4gIGNhbGN1bGF0ZUlzSW5maW5pdGUoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuY29uZmlnLmJhc2UgJiYgdGhpcy5jb25maWcuYmFzZS5pc0luZmluaXRlKTtcbiAgfVxuICBjYWxjdWxhdGVIYXNEdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAqZm9yd2FyZFJ1bihhcmdzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmJhc2UpIHJldHVybjtcbiAgICAvLyBXZSB3YW50IHRvIGZpbmQgb2NjdXJyZW5jZXMgdGhhdCBlbmQgYWZ0ZXIgdGhlIHByb3ZpZGVkXG4gICAgLy8gYHN0YXJ0YCB0aW1lIGV2ZW4gaWYgdGhleSBiZWdpbiBiZWZvcmUgdGhlIHByb3ZpZGVkIGBzdGFydGBcbiAgICAvLyB0aW1lLiBCZWNhdXNlIG9mIHRoaXMsIHdlIG11c3QgYmVnaW4gaXRlcmF0aW5nIGBtYXhEdXJhdGlvbmBcbiAgICAvLyBiZWZvcmUgdGhlIHByb3ZpZGVkIHN0YXJ0IHRpbWUuXG4gICAgbGV0IGNoZWNrRnJvbVN0YXJ0ID0gYXJncy5zdGFydDtcbiAgICBpZiAoYXJncy5zdGFydCkge1xuICAgICAgY2hlY2tGcm9tU3RhcnQgPSBhcmdzLnN0YXJ0LnN1YnRyYWN0KHRoaXMubWF4RHVyYXRpb24sICdtaWxsaXNlY29uZCcpO1xuICAgIH1cbiAgICBsZXQgY2hlY2tGcm9tRW5kID0gYXJncy5lbmQ7XG4gICAgaWYgKGFyZ3MuZW5kKSB7XG4gICAgICBjaGVja0Zyb21FbmQgPSBhcmdzLmVuZC5hZGQodGhpcy5tYXhEdXJhdGlvbiwgJ21pbGxpc2Vjb25kJyk7XG4gICAgfVxuICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBEdXJhdGlvbkl0ZXJhYmxlV3JhcHBlcihcbiAgICAgIHRoaXMuY29uZmlnLmJhc2UsXG4gICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpLCB7IHN0YXJ0OiBjaGVja0Zyb21TdGFydCwgZW5kOiBjaGVja0Zyb21FbmQgfSksXG4gICAgKTtcbiAgICBsZXQgeWllbGRBcmdzO1xuICAgIC8vIGNoZWNraW5nIGBzdHJlYW0ud29ya2luZ1ZhbHVlYCBiZWNhdXNlIHdoZW4gYHN0cmVhbS5kb25lID09PSB0cnVlYFxuICAgIC8vIGBzdHJlYW0ud29ya2luZ1ZhbHVlYCB3aWxsIG5vdCBoYXZlIGJlZW4geWllbGRlZCB5ZXRcbiAgICB3aGlsZSAoc3RyZWFtLndvcmtpbmdWYWx1ZSkge1xuICAgICAgLy8gVE9ETyhAam9obi5jYXJyb2xsLnApOiBmaWd1cmUgb3V0IGhvdyB0byBoYW5kbGUgYERhdGVUaW1lI2dlbmVyYXRvcnNgIGZvciBtZXJnZWQgYERhdGVUaW1lc2BcbiAgICAgIHdoaWxlICghc3RyZWFtLmRvbmUgJiYgc3RyZWFtLndvcmtpbmdWYWx1ZS5lbmQuaXNBZnRlck9yRXF1YWwoc3RyZWFtLnZhbHVlKSkge1xuICAgICAgICBpZiAoc3RyZWFtLndvcmtpbmdWYWx1ZS5kdXJhdGlvbiA+IHRoaXMubWF4RHVyYXRpb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTWVyZ2VEdXJhdGlvbk9wZXJhdG9yRXJyb3IoXG4gICAgICAgICAgICBgTWVyZ2VEdXJhdGlvbk9wZXJhdG9yRXJyb3I6IE9jY3VycmVuY2UgZHVyYXRpb24gZXhjZWVkZWQgbWF4RHVyYXRpb24gb2YgYCArXG4gICAgICAgICAgICAgIHRoaXMubWF4RHVyYXRpb24sXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RyZWFtLnZhbHVlLmVuZC5pc0FmdGVyKHN0cmVhbS53b3JraW5nVmFsdWUuZW5kKSkge1xuICAgICAgICAgIGNvbnN0IGRpZmYgPSBzdHJlYW0udmFsdWUuZW5kLnZhbHVlT2YoKSAtIHN0cmVhbS53b3JraW5nVmFsdWUuZW5kLnZhbHVlT2YoKTtcbiAgICAgICAgICBzdHJlYW0ud29ya2luZ1ZhbHVlID0gc3RyZWFtLndvcmtpbmdWYWx1ZS5zZXQoXG4gICAgICAgICAgICAnZHVyYXRpb24nLFxuICAgICAgICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZS5kdXJhdGlvbiArIGRpZmYsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgfVxuICAgICAgLy8gY2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBvY2N1cnJlbmNlIHdlIGFyZSBhYm91dCB0byB5aWVsZCBlbmRzIGFmdGVyIHRoZVxuICAgICAgLy8gcHJvdmlkZWQgc3RhcnQgdGltZS5cbiAgICAgIGlmIChhcmdzLnN0YXJ0ICYmIHN0cmVhbS53b3JraW5nVmFsdWUuZW5kLmlzQmVmb3JlKGFyZ3Muc3RhcnQpKSB7XG4gICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUgPSBzdHJlYW0udmFsdWU7XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gbWFrZSBzdXJlIHRoZSBvY2N1cnJlbmNlIHdlIGFyZSBhYm91dCB0byB5aWVsZCBlbmRzIGFmdGVyIHRoZVxuICAgICAgLy8gcHJvdmlkZWQgc2tpcFRvRGF0ZVxuICAgICAgaWYgKFxuICAgICAgICAoeWllbGRBcmdzID09PSBudWxsIHx8IHlpZWxkQXJncyA9PT0gdm9pZCAwID8gdm9pZCAwIDogeWllbGRBcmdzLnNraXBUb0RhdGUpICYmXG4gICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUuZW5kLmlzQmVmb3JlKHlpZWxkQXJncy5za2lwVG9EYXRlKVxuICAgICAgKSB7XG4gICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUgPSBzdHJlYW0udmFsdWU7XG4gICAgICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gbWFrZSBzdXJlIHdlIGFyZSBub3QgYWZ0ZXIgdGhlIHVzZXIgcmVxdWVzdGVkIGBlbmRgIHRpbWUuXG4gICAgICBpZiAoYXJncy5lbmQgJiYgc3RyZWFtLndvcmtpbmdWYWx1ZSAmJiBzdHJlYW0ud29ya2luZ1ZhbHVlLmlzQWZ0ZXIoYXJncy5lbmQpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHN0cmVhbS53b3JraW5nVmFsdWUuZHVyYXRpb24gPiB0aGlzLm1heER1cmF0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBNZXJnZUR1cmF0aW9uT3BlcmF0b3JFcnJvcihcbiAgICAgICAgICBgTWVyZ2VEdXJhdGlvbk9wZXJhdG9yRXJyb3I6IE9jY3VycmVuY2UgZHVyYXRpb24gZXhjZWVkZWQgbWF4RHVyYXRpb24gb2YgYCArXG4gICAgICAgICAgICB0aGlzLm1heER1cmF0aW9uLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgeWllbGRBcmdzID0geWllbGQgdGhpcy5ub3JtYWxpemVSdW5PdXRwdXQoc3RyZWFtLndvcmtpbmdWYWx1ZSk7XG4gICAgICBpZiAoXG4gICAgICAgICh5aWVsZEFyZ3MgPT09IG51bGwgfHwgeWllbGRBcmdzID09PSB2b2lkIDAgPyB2b2lkIDAgOiB5aWVsZEFyZ3Muc2tpcFRvRGF0ZSkgJiZcbiAgICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZS5pc0FmdGVyT3JFcXVhbCh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0EgcHJvdmlkZWQgYHNraXBUb0RhdGVgIG9wdGlvbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgbGFzdCB5aWVsZGVkIGRhdGUgJyArXG4gICAgICAgICAgICAnKG9yIHNtYWxsZXIsIGluIHRoZSBjYXNlIG9mIHJldmVyc2UgaXRlcmF0aW9uKScsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBzdHJlYW0ud29ya2luZ1ZhbHVlID0gc3RyZWFtLnZhbHVlO1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICB9XG4gIH1cbiAgKnJldmVyc2VSdW4oYXJncyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5iYXNlKSByZXR1cm47XG4gICAgLy8gV2Ugd2FudCB0byBmaW5kIG9jY3VycmVuY2VzIHRoYXQgZW5kIGFmdGVyIHRoZSBwcm92aWRlZFxuICAgIC8vIGBzdGFydGAgdGltZSBldmVuIGlmIHRoZXkgYmVnaW4gYmVmb3JlIHRoZSBwcm92aWRlZCBgc3RhcnRgXG4gICAgLy8gdGltZS4gQmVjYXVzZSBvZiB0aGlzLCB3ZSBtdXN0IGJlZ2luIGl0ZXJhdGluZyBgbWF4RHVyYXRpb25gXG4gICAgLy8gYmVmb3JlIHRoZSBwcm92aWRlZCBzdGFydCB0aW1lLlxuICAgIGxldCBjaGVja0Zyb21TdGFydCA9IGFyZ3Muc3RhcnQ7XG4gICAgaWYgKGFyZ3Muc3RhcnQpIHtcbiAgICAgIGNoZWNrRnJvbVN0YXJ0ID0gYXJncy5zdGFydC5zdWJ0cmFjdCh0aGlzLm1heER1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKTtcbiAgICB9XG4gICAgbGV0IGNoZWNrRnJvbUVuZCA9IGFyZ3MuZW5kO1xuICAgIGlmIChhcmdzLmVuZCkge1xuICAgICAgY2hlY2tGcm9tRW5kID0gYXJncy5lbmQuYWRkKHRoaXMubWF4RHVyYXRpb24sICdtaWxsaXNlY29uZCcpO1xuICAgIH1cbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgRHVyYXRpb25JdGVyYWJsZVdyYXBwZXIoXG4gICAgICB0aGlzLmNvbmZpZy5iYXNlLFxuICAgICAgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhcmdzKSwgeyBzdGFydDogY2hlY2tGcm9tU3RhcnQsIGVuZDogY2hlY2tGcm9tRW5kIH0pLFxuICAgICk7XG4gICAgbGV0IHlpZWxkQXJncztcbiAgICAvLyBjaGVja2luZyBgc3RyZWFtLndvcmtpbmdWYWx1ZWAgYmVjYXVzZSB3aGVuIGBzdHJlYW0uZG9uZSA9PT0gdHJ1ZWBcbiAgICAvLyBgc3RyZWFtLndvcmtpbmdWYWx1ZWAgd2lsbCBub3QgaGF2ZSBiZWVuIHlpZWxkZWQgeWV0XG4gICAgd2hpbGUgKHN0cmVhbS53b3JraW5nVmFsdWUpIHtcbiAgICAgIC8vIFRPRE8oQGpvaG4uY2Fycm9sbC5wKTogZmlndXJlIG91dCBob3cgdG8gaGFuZGxlIGBEYXRlVGltZSNnZW5lcmF0b3JzYCBmb3IgbWVyZ2VkIGBEYXRlVGltZXNgXG4gICAgICB3aGlsZSAoIXN0cmVhbS5kb25lICYmIHN0cmVhbS53b3JraW5nVmFsdWUuaXNCZWZvcmVPckVxdWFsKHN0cmVhbS52YWx1ZS5lbmQpKSB7XG4gICAgICAgIGlmIChzdHJlYW0ud29ya2luZ1ZhbHVlLmR1cmF0aW9uID4gdGhpcy5tYXhEdXJhdGlvbikge1xuICAgICAgICAgIHRocm93IG5ldyBNZXJnZUR1cmF0aW9uT3BlcmF0b3JFcnJvcihcbiAgICAgICAgICAgIGBNZXJnZUR1cmF0aW9uT3BlcmF0b3JFcnJvcjogT2NjdXJyZW5jZSBkdXJhdGlvbiBleGNlZWRlZCBtYXhEdXJhdGlvbiBvZiBgICtcbiAgICAgICAgICAgICAgdGhpcy5tYXhEdXJhdGlvbixcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzdHJlYW0udmFsdWUuaXNCZWZvcmUoc3RyZWFtLndvcmtpbmdWYWx1ZSkgfHxcbiAgICAgICAgICBzdHJlYW0udmFsdWUuZW5kLmlzQWZ0ZXIoc3RyZWFtLndvcmtpbmdWYWx1ZS5lbmQpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChzdHJlYW0udmFsdWUuZW5kLmlzQWZ0ZXIoc3RyZWFtLndvcmtpbmdWYWx1ZS5lbmQpKSB7XG4gICAgICAgICAgICAvLyBgc3RyZWFtLndvcmtpbmdWYWx1ZWAgaXMgYSBzdWJzZXQgb2YgYHN0cmVhbS52YWx1ZWBcbiAgICAgICAgICAgIC8vIHNvIHNpbXBseSByZXBsYWNlIGBzdHJlYW0ud29ya2luZ1ZhbHVlYCB3aXRoIGBzdHJlYW0udmFsdWVgXG4gICAgICAgICAgICBzdHJlYW0ud29ya2luZ1ZhbHVlID0gc3RyZWFtLnZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkaWZmID0gc3RyZWFtLndvcmtpbmdWYWx1ZS52YWx1ZU9mKCkgLSBzdHJlYW0udmFsdWUudmFsdWVPZigpO1xuICAgICAgICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZSA9IHN0cmVhbS52YWx1ZS5zZXQoJ2R1cmF0aW9uJywgc3RyZWFtLndvcmtpbmdWYWx1ZS5kdXJhdGlvbiArIGRpZmYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgfVxuICAgICAgLy8gY2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBvY2N1cnJlbmNlIHdlIGFyZSBhYm91dCB0byB5aWVsZCBzdGFydHMgYmVmb3JlIHRoZVxuICAgICAgLy8gcHJvdmlkZWQgc3RhcnQgdGltZS5cbiAgICAgIGlmIChhcmdzLnN0YXJ0ICYmIHN0cmVhbS53b3JraW5nVmFsdWUuZW5kLmlzQmVmb3JlKGFyZ3Muc3RhcnQpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICB5aWVsZEFyZ3MgJiZcbiAgICAgICAgeWllbGRBcmdzLnNraXBUb0RhdGUgJiZcbiAgICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZS5lbmQuaXNCZWZvcmUoeWllbGRBcmdzLnNraXBUb0RhdGUpXG4gICAgICApIHtcbiAgICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZSA9IHN0cmVhbS52YWx1ZTtcbiAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyBtYWtlIHN1cmUgd2UgYXJlIG5vdCBhZnRlciB0aGUgdXNlciByZXF1ZXN0ZWQgYGVuZGAgdGltZS5cbiAgICAgIGlmIChhcmdzLmVuZCAmJiBzdHJlYW0ud29ya2luZ1ZhbHVlICYmIHN0cmVhbS53b3JraW5nVmFsdWUuaXNBZnRlcihhcmdzLmVuZCkpIHtcbiAgICAgICAgc3RyZWFtLndvcmtpbmdWYWx1ZSA9IHN0cmVhbS52YWx1ZTtcbiAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtLndvcmtpbmdWYWx1ZS5kdXJhdGlvbiA+IHRoaXMubWF4RHVyYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IE1lcmdlRHVyYXRpb25PcGVyYXRvckVycm9yKFxuICAgICAgICAgIGBNZXJnZUR1cmF0aW9uT3BlcmF0b3JFcnJvcjogT2NjdXJyZW5jZSBkdXJhdGlvbiBleGNlZWRlZCBtYXhEdXJhdGlvbiBvZiBgICtcbiAgICAgICAgICAgIHRoaXMubWF4RHVyYXRpb24sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB5aWVsZEFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZVJ1bk91dHB1dChzdHJlYW0ud29ya2luZ1ZhbHVlKTtcbiAgICAgIGlmIChcbiAgICAgICAgeWllbGRBcmdzICYmXG4gICAgICAgIHlpZWxkQXJncy5za2lwVG9EYXRlICYmXG4gICAgICAgIHN0cmVhbS53b3JraW5nVmFsdWUuZW5kLmlzQmVmb3JlT3JFcXVhbCh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0EgcHJvdmlkZWQgYHNraXBUb0RhdGVgIG9wdGlvbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgbGFzdCB5aWVsZGVkIGRhdGUgJyArXG4gICAgICAgICAgICAnKG9yIHNtYWxsZXIsIGluIHRoZSBjYXNlIG9mIHJldmVyc2UgaXRlcmF0aW9uKScsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBzdHJlYW0ud29ya2luZ1ZhbHVlID0gc3RyZWFtLnZhbHVlO1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgU3BsaXREdXJhdGlvbk9wZXJhdG9yRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuLyoqXG4gKiBBbiBvcGVyYXRvciBmdW5jdGlvbiB3aGljaCB0YWtlcyBhbiBvY2N1cnJlbmNlIHN0cmVhbSB3aXRoXG4gKiBgaGFzRHVyYXRpb24gPT09IHRydWVgIGFuZCBwYXNzZXMgb2NjdXJyZW5jZXMgdGhyb3VnaCBhIHNwbGl0dGluZ1xuICogZnVuY3Rpb24uIE9uZSB1c2VjYXNlIGZvciB0aGlzIG9wZXJhdG9yIGlzIHRvIGR5bmFtaWNhbGx5IGJyZWFrIHVwXG4gKiBvY2N1cnJlbmNlcyB3aXRoIGEgbGFyZ2UgZHVyYXRpb24gaW50byBzZXZlcmFsIHNtYWxsZXIgb2NjdXJyZW5jZXMuXG4gKlxuICogWW91IG11c3QgcHJvdmlkZSBhIGBtYXhEdXJhdGlvbmAgYXJndW1lbnQgdGhhdCByZXByZXNlbnRzIHRoZVxuICogbWF4aW11bSBwb3NzaWJsZSBkdXJhdGlvbiBmb3IgYSBzaW5nbGUgb2NjdXJyZW5jZS4gSWYgdGhpc1xuICogZHVyYXRpb24gaXMgZXhjZWVkZWQsIGEgYFNwbGl0RHVyYXRpb25PcGVyYXRvckVycm9yYCB3aWxsIGJlXG4gKiB0aHJvd24uXG4gKlxuICogLSBGb3IgeW91ciBjb252ZW5pZW5jZSwgeW91IGNhbiBnbG9iYWxseSBzZXQgYSBkZWZhdWx0XG4gKiAgIGBTcGxpdER1cmF0aW9uT3BlcmF0b3IjbWF4RHVyYXRpb25gIHZpYVxuICogICBgUlNjaGVkdWxlQ29uZmlnLlNwbGl0RHVyYXRpb25PcGVyYXRvci5kZWZhdWx0TWF4RHVyYXRpb25gLlxuICpcbiAqIFVzYWdlIGV4YW1wbGU6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgTUlMTElTRUNPTkRTX0lOX0hPVVIgPSAxMDAwICogNjAgKiA2MDtcbiAqXG4gKiBjb25zdCBzcGxpdEZuID0gKGRhdGU6IERhdGVUaW1lKSA9PiB7XG4gKiAgIGlmIChkYXRlLmR1cmF0aW9uID4gTUlMTElTRUNPTkRTX0lOX0hPVVIpIHtcbiAqICAgICBjb25zdCBkaWZmID0gZGF0ZS5kdXJhdGlvbiEgLyAyO1xuICpcbiAqICAgICByZXR1cm4gW1xuICogICAgICAgZGF0ZS5zZXQoJ2R1cmF0aW9uJywgZGlmZiksXG4gKiAgICAgICBkYXRlLmFkZChkaWZmLCAnbWlsbGlzZWNvbmQnKS5zZXQoJ2R1cmF0aW9uJywgZGlmZiksXG4gKiAgICAgXTtcbiAqICAgfVxuICpcbiAqICAgcmV0dXJuIFtkYXRlXTtcbiAqIH07XG4gKlxuICogY29uc3QgZGF0ZXMgPSBuZXcgRGF0ZXMoe1xuICogICBkYXRlczogW1xuICogICAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMCwgMTMpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDEgfSksXG4gKiAgICAgbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIobmV3IERhdGUoMjAxMCwgMTAsIDExLCAxMyksIHsgZHVyYXRpb246IE1JTExJU0VDT05EU19JTl9IT1VSICogMiB9KSxcbiAqICAgXSxcbiAqICAgZGF0ZUFkcHRlcjogU3RhbmRhcmREYXRlQWRhcHRlcixcbiAqIH0pLnBpcGUoXG4gKiAgIHNwbGl0RHVyYXRpb24oe1xuICogICAgIHNwbGl0Rm4sXG4gKiAgICAgbWF4RHVyYXRpb246IE1JTExJU0VDT05EU19JTl9IT1VSICogMVxuICogICB9KVxuICogKVxuICpcbiAqIGV4cGVjdChkYXRlcy5vY2N1cnJlbmNlcygpLnRvQXJyYXkoKSkudG9FcXVhbChbXG4gKiAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMCwgMTMpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDEgfSksXG4gKiAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMSwgMTMpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDEgfSksXG4gKiAgIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKG5ldyBEYXRlKDIwMTAsIDEwLCAxMSwgMTQpLCB7IGR1cmF0aW9uOiBNSUxMSVNFQ09ORFNfSU5fSE9VUiAqIDEgfSksXG4gKiBdKVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHNwbGl0RHVyYXRpb24oYXJncykge1xuICByZXR1cm4gb3B0aW9ucyA9PiBuZXcgU3BsaXREdXJhdGlvbk9wZXJhdG9yKGFyZ3MsIG9wdGlvbnMpO1xufVxuY2xhc3MgU3BsaXREdXJhdGlvbk9wZXJhdG9yIGV4dGVuZHMgT3BlcmF0b3Ige1xuICBjb25zdHJ1Y3RvcihhcmdzLCBjb25maWcpIHtcbiAgICBzdXBlcihbXSwgY29uZmlnKTtcbiAgICB0aGlzLnNwbGl0Rm4gPSBhcmdzLnNwbGl0Rm47XG4gICAgdGhpcy5tYXhEdXJhdGlvbiA9IGFyZ3MubWF4RHVyYXRpb247XG4gICAgaWYgKGNvbmZpZy5iYXNlICYmICFjb25maWcuYmFzZS5oYXNEdXJhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICdCYXNlIHN0cmVhbSBwcm92aWRlZCB0byBTcGxpdER1cmF0aW9uT3BlcmF0b3IgZG9lcyBub3QgaGF2ZSBhbiBhc3NvY2lhdGVkIGR1cmF0aW9uLiAnICtcbiAgICAgICAgICAnVGhlIFNwbGl0RHVyYXRpb25PcGVyYXRvciBjYW4gb25seSBiZSB1c2VkIHdpdGggc3RyZWFtcyB3aGljaCBoYXZlIGEgZHVyYXRpb24uJyxcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8qKiBOb3QgYWN0dWFsbHkgdXNlZCBidXQgbmVjZXNzYXJ5IGZvciBJUnVubmFibGUgaW50ZXJmYWNlICovXG4gIHNldChfLCB2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgU3BsaXREdXJhdGlvbk9wZXJhdG9yKFxuICAgICAge1xuICAgICAgICBtYXhEdXJhdGlvbjogdGhpcy5tYXhEdXJhdGlvbixcbiAgICAgICAgc3BsaXRGbjogdGhpcy5zcGxpdEZuLFxuICAgICAgfSxcbiAgICAgIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcpLCB7XG4gICAgICAgIGJhc2U6IHRoaXMuY29uZmlnLmJhc2UgJiYgdGhpcy5jb25maWcuYmFzZS5zZXQoJ3RpbWV6b25lJywgdmFsdWUpLFxuICAgICAgICB0aW1lem9uZTogdmFsdWUsXG4gICAgICB9KSxcbiAgICApO1xuICB9XG4gICpfcnVuKGFyZ3MgPSB7fSkge1xuICAgIGlmICghdGhpcy5jb25maWcuYmFzZSkgcmV0dXJuO1xuICAgIGNvbnN0IHJldmVyc2UgPSBhcmdzLnJldmVyc2UgfHwgZmFsc2U7XG4gICAgLy8gV2Ugd2FudCB0byBmaW5kIG9jY3VycmVuY2VzIHRoYXQgZW5kIGFmdGVyIHRoZSBwcm92aWRlZFxuICAgIC8vIGBzdGFydGAgdGltZSBldmVuIGlmIHRoZXkgYmVnaW4gYmVmb3JlIHRoZSBwcm92aWRlZCBgc3RhcnRgXG4gICAgLy8gdGltZS4gQmVjYXVzZSBvZiB0aGlzLCB3ZSBhZGQgYG1heER1cmF0aW9uYCB0b1xuICAgIC8vIHRoZSBwcm92aWRlZCBzdGFydCB0aW1lLlxuICAgIGxldCBjaGVja0Zyb21TdGFydCA9IGFyZ3Muc3RhcnQ7XG4gICAgaWYgKGFyZ3Muc3RhcnQpIHtcbiAgICAgIGNoZWNrRnJvbVN0YXJ0ID0gYXJncy5zdGFydC5zdWJ0cmFjdCh0aGlzLm1heER1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKTtcbiAgICB9XG4gICAgLy8gc2FtZSBnb2VzIGZvciBgZW5kYCB0aW1lIGFzIHdpdGggYHN0YXJ0YCB0aW1lLlxuICAgIGxldCBjaGVja0Zyb21FbmQgPSBhcmdzLmVuZDtcbiAgICBpZiAoYXJncy5lbmQpIHtcbiAgICAgIGNoZWNrRnJvbUVuZCA9IGFyZ3MuZW5kLmFkZCh0aGlzLm1heER1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKTtcbiAgICB9XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IEl0ZXJhYmxlV3JhcHBlcihcbiAgICAgIHRoaXMuY29uZmlnLmJhc2UsXG4gICAgICBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpLCB7IHN0YXJ0OiBjaGVja0Zyb21TdGFydCwgZW5kOiBjaGVja0Zyb21FbmQgfSksXG4gICAgKTtcbiAgICBsZXQgeWllbGRBcmdzO1xuICAgIGNvbnN0IGRhdGVzQnVja2V0ID0gW107XG4gICAgd2hpbGUgKCFzdHJlYW0uZG9uZSB8fCAoZGF0ZXNCdWNrZXRbMF0gJiYgZGF0ZXNCdWNrZXRbMF1bMF0pKSB7XG4gICAgICAvKipcbiAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgKiAxMGFtIC0gMnBtIC0+IDEwYW0gLSAxMnBtLCAxMnBtIC0gMnBtXG4gICAgICAgKiAxMWFtIC0gM3BtIC0+IDExYW0gLSAxcG0sIDFwbSAtIDNwbVxuICAgICAgICogMnBtIC0gNHBtIC0+IDJwbSAtIDNwbSwgM3BtIC0gNHBtXG4gICAgICAgKi9cbiAgICAgIGlmICghKGRhdGVzQnVja2V0WzBdICYmIGRhdGVzQnVja2V0WzBdWzBdKSkge1xuICAgICAgICAvLyB3ZSdyZSBvdXQgb2YgZGF0ZXNcbiAgICAgICAgZGF0ZXNCdWNrZXQucHVzaCh0aGlzLnNwbGl0RGF0ZShzdHJlYW0udmFsdWUsIHJldmVyc2UpKTtcbiAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChcbiAgICAgICAgIXN0cmVhbS5kb25lICYmXG4gICAgICAgIChyZXZlcnNlXG4gICAgICAgICAgPyBkYXRlc0J1Y2tldFswXS5zb21lKGRhdGUgPT4gZGF0ZS5pc0JlZm9yZU9yRXF1YWwoc3RyZWFtLnZhbHVlLmVuZCkpXG4gICAgICAgICAgOiBkYXRlc0J1Y2tldFswXS5zb21lKGRhdGUgPT4gZGF0ZS5pc0FmdGVyT3JFcXVhbChzdHJlYW0udmFsdWUpKSlcbiAgICAgICkge1xuICAgICAgICBkYXRlc0J1Y2tldC5wdXNoKHRoaXMuc3BsaXREYXRlKHN0cmVhbS52YWx1ZSwgcmV2ZXJzZSkpO1xuICAgICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgfVxuICAgICAgbGV0IHNlbGVjdGVkRGF0ZSA9IGRhdGVzQnVja2V0WzBdICYmIGRhdGVzQnVja2V0WzBdWzBdO1xuICAgICAgbGV0IGJ1Y2tldEluZGV4ID0gLTE7XG4gICAgICBsZXQgc2VsZWN0ZWRCdWNrZXRJbmRleCA9IDA7XG4gICAgICBsZXQgZGF0ZUluZGV4ID0gLTE7XG4gICAgICBsZXQgc2VsZWN0ZWREYXRlSW5kZXggPSAwO1xuICAgICAgLy8gZmluZCB0aGUgbmV4dCBkYXRlIGFzIHdlbGwgYXMgaXRzIGxvY2F0aW9uIGluIHRoZSBkYXRlc0J1Y2tldFxuICAgICAgZm9yIChjb25zdCBidWNrZXQgb2YgZGF0ZXNCdWNrZXQpIHtcbiAgICAgICAgYnVja2V0SW5kZXgrKztcbiAgICAgICAgZGF0ZUluZGV4ID0gLTE7XG4gICAgICAgIGZvciAoY29uc3QgZGF0ZSBvZiBidWNrZXQpIHtcbiAgICAgICAgICBkYXRlSW5kZXgrKztcbiAgICAgICAgICBsZXQgZGF0ZVNob3VsZENvbWVOZXh0O1xuICAgICAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgICAgICBkYXRlU2hvdWxkQ29tZU5leHQgPVxuICAgICAgICAgICAgICBkYXRlLmlzQWZ0ZXIoc2VsZWN0ZWREYXRlKSB8fFxuICAgICAgICAgICAgICAoZGF0ZS5pc0VxdWFsKHNlbGVjdGVkRGF0ZSkgJiYgZGF0ZS5kdXJhdGlvbiA+IHNlbGVjdGVkRGF0ZS5kdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGVTaG91bGRDb21lTmV4dCA9XG4gICAgICAgICAgICAgIGRhdGUuaXNCZWZvcmUoc2VsZWN0ZWREYXRlKSB8fFxuICAgICAgICAgICAgICAoZGF0ZS5pc0VxdWFsKHNlbGVjdGVkRGF0ZSkgJiYgZGF0ZS5kdXJhdGlvbiA8IHNlbGVjdGVkRGF0ZS5kdXJhdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkYXRlU2hvdWxkQ29tZU5leHQpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRGF0ZSA9IGRhdGU7XG4gICAgICAgICAgICBzZWxlY3RlZEJ1Y2tldEluZGV4ID0gYnVja2V0SW5kZXg7XG4gICAgICAgICAgICBzZWxlY3RlZERhdGVJbmRleCA9IGRhdGVJbmRleDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGF0ZXNCdWNrZXRbc2VsZWN0ZWRCdWNrZXRJbmRleF0uc3BsaWNlKHNlbGVjdGVkRGF0ZUluZGV4LCAxKTtcbiAgICAgIGlmIChkYXRlc0J1Y2tldFtzZWxlY3RlZEJ1Y2tldEluZGV4XS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGF0ZXNCdWNrZXQuc3BsaWNlKHNlbGVjdGVkQnVja2V0SW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UndmUgYmVlbiB5aWVsZGVkQXJncyBmcm9tIHRoZSBsYXN0IGN5Y2xlLCBjaGVjayB0byBzZWVcbiAgICAgIC8vIHRoYXQgdGhlIHNlbGVjdGVkRGF0ZSBob25vcnMgdGhlIGBza2lwVG9EYXRlYCByZXF1aXJlbWVudFxuICAgICAgLy8gaWYgbm90LCBkaXNjYXJkIHRoaXMgc2VsZWN0ZWREYXRlXG4gICAgICBpZiAoXG4gICAgICAgIHlpZWxkQXJncyAmJlxuICAgICAgICB5aWVsZEFyZ3Muc2tpcFRvRGF0ZSAmJlxuICAgICAgICBzZWxlY3RlZERhdGUgJiZcbiAgICAgICAgIWRhdGVQYXN0RW5kKHNlbGVjdGVkRGF0ZSwgYXJncykgJiZcbiAgICAgICAgIWRhdGVQYXN0U2tpcFRvRGF0ZShzZWxlY3RlZERhdGUsIHlpZWxkQXJncy5za2lwVG9EYXRlLCBhcmdzKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gYmVjYXVzZSB3ZSBzdWJ0cmFjdGVkIGBtYXhEdXJhdGlvbmAgdG8gdGhlIGJhc2UgaXRlcmF0b3IncyBzdGFydCB0aW1lLFxuICAgICAgLy8gY2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBzZWxlY3RlZERhdGUgd2UgYXJlIGFib3V0IHRvIHlpZWxkIHNob3VsZFxuICAgICAgLy8gYWN0dWFsbHkgYmUgeWllbGRlZCAoaXQgbWF5IGJlIGJlZm9yZSB0aGUgcHJvdmlkZWQgYHN0YXJ0YCB0aW1lKS5cbiAgICAgIC8vIElmIG5vdCwgZGlzY2FyZCB0aGUgc2VsZWN0ZWREYXRlLlxuICAgICAgaWYgKGFyZ3Muc3RhcnQgJiYgc2VsZWN0ZWREYXRlLmVuZC5pc0JlZm9yZShhcmdzLnN0YXJ0KSkge1xuICAgICAgICBpZiAocmV2ZXJzZSkgYnJlYWs7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gYmVjYXVzZSB3ZSBhZGRlZCBgbWF4RHVyYXRpb25gIHRvIHRoZSBiYXNlIGl0ZXJhdG9yJ3MgZW5kIHRpbWUsXG4gICAgICAvLyBjaGVjayB0byBtYWtlIHN1cmUgdGhlIHNlbGVjdGVkRGF0ZSB3ZSBhcmUgYWJvdXQgdG8geWllbGQgc2hvdWxkXG4gICAgICAvLyBhY3R1YWxseSBiZSB5aWVsZGVkIChpdCBtYXkgYmUgYWZ0ZXIgdGhlIHByb3ZpZGVkIGBlbmRgIHRpbWUpLlxuICAgICAgLy8gSWYgbm90LCBlbmQgaXRlcmF0aW9uLlxuICAgICAgaWYgKGFyZ3MuZW5kICYmIHNlbGVjdGVkRGF0ZS5pc0FmdGVyKGFyZ3MuZW5kKSkge1xuICAgICAgICBpZiAocmV2ZXJzZSkgY29udGludWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdGVkRGF0ZS5kdXJhdGlvbiA+IHRoaXMubWF4RHVyYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IFNwbGl0RHVyYXRpb25PcGVyYXRvckVycm9yKFxuICAgICAgICAgIGBTcGxpdER1cmF0aW9uT3BlcmF0b3JFcnJvcjogT2NjdXJyZW5jZSBkdXJhdGlvbiBleGNlZWRlZCBtYXhEdXJhdGlvbiBvZiBgICtcbiAgICAgICAgICAgIHRoaXMubWF4RHVyYXRpb24sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB5aWVsZEFyZ3MgPSB5aWVsZCB0aGlzLm5vcm1hbGl6ZVJ1bk91dHB1dChzZWxlY3RlZERhdGUpO1xuICAgICAgaWYgKFxuICAgICAgICB5aWVsZEFyZ3MgJiZcbiAgICAgICAgeWllbGRBcmdzLnNraXBUb0RhdGUgJiZcbiAgICAgICAgKGFyZ3MucmV2ZXJzZVxuICAgICAgICAgID8gc2VsZWN0ZWREYXRlLmlzQmVmb3JlT3JFcXVhbCh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSlcbiAgICAgICAgICA6IHNlbGVjdGVkRGF0ZS5pc0FmdGVyT3JFcXVhbCh5aWVsZEFyZ3Muc2tpcFRvRGF0ZSkpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBIHByb3ZpZGVkIGBza2lwVG9EYXRlYCBvcHRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIGxhc3QgeWllbGRlZCBkYXRlICcgK1xuICAgICAgICAgICAgJyhvciBzbWFsbGVyLCBpbiB0aGUgY2FzZSBvZiByZXZlcnNlIGl0ZXJhdGlvbiknLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjYWxjdWxhdGVJc0luZmluaXRlKCkge1xuICAgIHJldHVybiAhISh0aGlzLmNvbmZpZy5iYXNlICYmIHRoaXMuY29uZmlnLmJhc2UuaXNJbmZpbml0ZSk7XG4gIH1cbiAgY2FsY3VsYXRlSGFzRHVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc3BsaXREYXRlKGRhdGUsIHJldmVyc2UpIHtcbiAgICBjb25zdCBkYXRlcyA9IHRoaXMuc3BsaXRGbihkYXRlKTtcbiAgICBsZXQgdmFsaWQ7XG4gICAgaWYgKGRhdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGRhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFsaWQgPSBkYXRlLmR1cmF0aW9uID09PSBkYXRlc1swXS5kdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsaWQgPSBkYXRlLmR1cmF0aW9uID09PSBkYXRlcy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHByZXYgKyBjdXJyLmR1cmF0aW9uLCAwKTtcbiAgICB9XG4gICAgaWYgKCF2YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHByb3ZpZGVkIFNwbGl0RHVyYXRpb25PcGVyYXRvciBzcGxpdCBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnbXVzdCByZXR1cm4gYW4gYXJyYXkgb2YgRGF0ZVRpbWVzIHdpdGggbGVuZ3RoID4gMCAnICtcbiAgICAgICAgICAnd2hlcmUgdGhlIHRvdGFsIGR1cmF0aW9uIG9mIHRoZSBuZXcgZGF0ZXMgZXF1YWxzIHRoZSBkdXJhdGlvbiBvZiAnICtcbiAgICAgICAgICAndGhlIG9yaWdpbmFsIGRhdGUuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGRhdGVzLnNvcnQoZGF0ZVRpbWVTb3J0Q29tcGFyZXIpO1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICBkYXRlcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlcztcbiAgfVxufVxuZnVuY3Rpb24gZGF0ZVBhc3RFbmQoZGF0ZSwgb3B0aW9ucykge1xuICByZXR1cm4gISEob3B0aW9ucy5yZXZlcnNlXG4gICAgPyBvcHRpb25zLnN0YXJ0ICYmIGRhdGUuaXNCZWZvcmUob3B0aW9ucy5zdGFydClcbiAgICA6IG9wdGlvbnMuZW5kICYmIGRhdGUuaXNBZnRlcihvcHRpb25zLmVuZCkpO1xufVxuZnVuY3Rpb24gZGF0ZVBhc3RTa2lwVG9EYXRlKGRhdGUsIHNraXBUb0RhdGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuICEhKG9wdGlvbnMucmV2ZXJzZSA/IHNraXBUb0RhdGUuaXNBZnRlck9yRXF1YWwoZGF0ZSkgOiBza2lwVG9EYXRlLmlzQmVmb3JlT3JFcXVhbChkYXRlKSk7XG59XG5cbmV4cG9ydCB7XG4gIEFkZE9wZXJhdG9yLFxuICBDYWxlbmRhcixcbiAgQ29sbGVjdGlvbixcbiAgQ29sbGVjdGlvbkl0ZXJhdG9yLFxuICBEYXRlcyxcbiAgSW50ZXJzZWN0aW9uT3BlcmF0b3IsXG4gIE1lcmdlRHVyYXRpb25PcGVyYXRvcixcbiAgTWVyZ2VEdXJhdGlvbk9wZXJhdG9yRXJyb3IsXG4gIE9jY3VycmVuY2VHZW5lcmF0b3IsXG4gIE9jY3VycmVuY2VJdGVyYXRvcixcbiAgT3BlcmF0b3IsXG4gIFJ1bGUsXG4gIFJ1bGVCYXNlLFxuICBTY2hlZHVsZSxcbiAgU2NoZWR1bGVCYXNlLFxuICBTcGxpdER1cmF0aW9uT3BlcmF0b3IsXG4gIFNwbGl0RHVyYXRpb25PcGVyYXRvckVycm9yLFxuICBTdWJ0cmFjdE9wZXJhdG9yLFxuICBVbmlxdWVPcGVyYXRvcixcbiAgYWRkLFxuICBpbnRlcnNlY3Rpb24sXG4gIG1lcmdlRHVyYXRpb24sXG4gIHNwbGl0RHVyYXRpb24sXG4gIHN1YnRyYWN0LFxuICB1bmlxdWUsXG59O1xuIiwiaW1wb3J0IHtcbiAgZnJlcVRvR3JhbnVsYXJpdHksXG4gIFZhbGlkRGF0ZVRpbWUsXG4gIEludmFsaWREYXRlVGltZSxcbiAgRGF0ZUFkYXB0ZXIsXG4gIFJ1bGVPcHRpb25FcnJvcixcbiAgbnVtYmVyU29ydENvbXBhcmVyLFxuICBnZXREaWZmZXJlbmNlQmV0d2VlbldlZWtkYXlzLFxuICBSZWN1cnJlbmNlUnVsZUVycm9yLFxuICB1bmlxRGF0ZVRpbWVzLFxuICBkYXRlVGltZVNvcnRDb21wYXJlcixcbn0gZnJvbSAnQHJzY2hlZHVsZS9jb3JlJztcblxuY2xhc3MgUmVjdXJyZW5jZVJ1bGUge1xuICBjb25zdHJ1Y3Rvcihwcm9jZXNzb3IpIHtcbiAgICB0aGlzLnByb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICB0aGlzLnN0YXJ0ID0gcHJvY2Vzc29yLnN0YXJ0O1xuICAgIHRoaXMuZW5kID0gcHJvY2Vzc29yLmVuZDtcbiAgICB0aGlzLm9wdGlvbnMgPSBwcm9jZXNzb3Iub3B0aW9ucztcbiAgfVxufVxuXG5jbGFzcyBGcmVxdWVuY3lSdWxlIGV4dGVuZHMgUmVjdXJyZW5jZVJ1bGUge1xuICBjb25zdHJ1Y3Rvcihwcm9jZXNzb3IsIGluaXREYXRlKSB7XG4gICAgc3VwZXIocHJvY2Vzc29yKTtcbiAgICB0aGlzLmluaXREYXRlID0gaW5pdERhdGU7XG4gICAgdGhpcy5pbnRlcnZhbFVuaXQgPSBmcmVxVG9HcmFudWxhcml0eSh0aGlzLm9wdGlvbnMuZnJlcXVlbmN5KTtcbiAgICB0aGlzLmZpcnN0SW50ZXJ2YWxTdGFydERhdGUgPSB0aGlzLm5vcm1hbGl6ZWRTdGFydERhdGUodGhpcy5vcHRpb25zLnN0YXJ0KTtcbiAgICB0aGlzLmludGVydmFsU3RhcnREYXRlID0gdGhpcy5maXJzdEludGVydmFsU3RhcnREYXRlO1xuICAgIHRoaXMuaW50ZXJ2YWxFbmREYXRlID0gdGhpcy5ub3JtYWxpemVkRW5kRGF0ZSh0aGlzLmZpcnN0SW50ZXJ2YWxTdGFydERhdGUpO1xuICAgIHRoaXMuc2tpcFRvSW50ZXJ2YWwodGhpcy5pbml0RGF0ZSk7XG4gIH1cbiAgcnVuKGRhdGUpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IFZhbGlkRGF0ZVRpbWUoZGF0ZSkpO1xuICB9XG4gIHZhbGlkYXRlRGF0ZShhcmcpIHtcbiAgICBjb25zdCB7IGRhdGUgfSA9IGFyZztcbiAgICBpZiAoYXJnIGluc3RhbmNlb2YgVmFsaWREYXRlVGltZSAmJiB0aGlzLmRhdGVJc1dpdGhpbkludGVydmFsKGRhdGUpKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cbiAgICB0aGlzLnNraXBUb0ludGVydmFsKGRhdGUpO1xuICAgIHJldHVybiBuZXcgSW52YWxpZERhdGVUaW1lKFxuICAgICAgLy8gaWYgdGhlIGludGVydmFsIGlzIDEsIGRhdGUgd2lsbCBhbHdheXMgYmUgd2l0aGluIHRoZSBpbnRlcnZhbFxuICAgICAgdGhpcy5kYXRlSXNXaXRoaW5JbnRlcnZhbChkYXRlKSA/IGRhdGUgOiB0aGlzLnNldFRvQ3VycmVudEludGVydmFsKCksXG4gICAgKTtcbiAgfVxuICBzZXRUb0N1cnJlbnRJbnRlcnZhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnZhbFN0YXJ0RGF0ZTtcbiAgfVxuICBub3JtYWxpemVkU3RhcnREYXRlKGRhdGUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmZyZXF1ZW5jeSA9PT0gJ1dFRUtMWScpIHtcbiAgICAgIHJldHVybiBkYXRlLmdyYW51bGFyaXR5KCd3ZWVrJywgeyB3ZWVrU3RhcnQ6IHRoaXMub3B0aW9ucy53ZWVrU3RhcnQgfSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlLmdyYW51bGFyaXR5KHRoaXMuaW50ZXJ2YWxVbml0KTtcbiAgfVxuICBub3JtYWxpemVkRW5kRGF0ZShzdGFydCkge1xuICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLmZyZXF1ZW5jeSkge1xuICAgICAgY2FzZSAnWUVBUkxZJzpcbiAgICAgICAgcmV0dXJuIHN0YXJ0LmFkZCgxLCAneWVhcicpO1xuICAgICAgY2FzZSAnTU9OVEhMWSc6XG4gICAgICAgIHJldHVybiBzdGFydC5hZGQoMSwgJ21vbnRoJyk7XG4gICAgICBjYXNlICdXRUVLTFknOlxuICAgICAgICByZXR1cm4gc3RhcnQuYWRkKDEsICd3ZWVrJyk7XG4gICAgICBjYXNlICdEQUlMWSc6XG4gICAgICAgIHJldHVybiBzdGFydC5hZGQoMSwgJ2RheScpO1xuICAgICAgY2FzZSAnSE9VUkxZJzpcbiAgICAgICAgcmV0dXJuIHN0YXJ0LmFkZCgxLCAnaG91cicpO1xuICAgICAgY2FzZSAnTUlOVVRFTFknOlxuICAgICAgICByZXR1cm4gc3RhcnQuYWRkKDEsICdtaW51dGUnKTtcbiAgICAgIGNhc2UgJ1NFQ09ORExZJzpcbiAgICAgICAgcmV0dXJuIHN0YXJ0LmFkZCgxLCAnc2Vjb25kJyk7XG4gICAgICBjYXNlICdNSUxMSVNFQ09ORExZJzpcbiAgICAgICAgcmV0dXJuIHN0YXJ0LmFkZCgxLCAnbWlsbGlzZWNvbmQnKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBmcmVxdWVuY3kgJHt0aGlzLm9wdGlvbnMuZnJlcXVlbmN5fWApO1xuICAgIH1cbiAgfVxuICBza2lwVG9JbnRlcnZhbChkYXRlKSB7XG4gICAgY29uc3QgYW1vdW50ID0gdGhpcy5pbnRlcnZhbERpZmZlcmVuY2UoZGF0ZSk7XG4gICAgdGhpcy5pbnRlcnZhbFN0YXJ0RGF0ZSA9IHRoaXMuZmlyc3RJbnRlcnZhbFN0YXJ0RGF0ZS5hZGQoYW1vdW50LCB0aGlzLmludGVydmFsVW5pdCk7XG4gICAgdGhpcy5pbnRlcnZhbEVuZERhdGUgPSB0aGlzLm5vcm1hbGl6ZWRFbmREYXRlKHRoaXMuaW50ZXJ2YWxTdGFydERhdGUpO1xuICB9XG4gIGRhdGVJc1dpdGhpbkludGVydmFsKGRhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnZhbFN0YXJ0RGF0ZS5pc0JlZm9yZU9yRXF1YWwoZGF0ZSkgJiYgdGhpcy5pbnRlcnZhbEVuZERhdGUuaXNBZnRlcihkYXRlKTtcbiAgfVxuICBpbnRlcnZhbERpZmZlcmVuY2UoZGF0ZSkge1xuICAgIHJldHVybiBpbnRlcnZhbERpZmZlcmVuY2VCZXR3ZWVuRGF0ZXMoe1xuICAgICAgZmlyc3Q6IHRoaXMuZmlyc3RJbnRlcnZhbFN0YXJ0RGF0ZSxcbiAgICAgIHNlY29uZDogZGF0ZSxcbiAgICAgIHVuaXQ6IHRoaXMuaW50ZXJ2YWxVbml0LFxuICAgICAgaW50ZXJ2YWw6IHRoaXMub3B0aW9ucy5pbnRlcnZhbCxcbiAgICAgIHdlZWtTdGFydDogdGhpcy5vcHRpb25zLndlZWtTdGFydCxcbiAgICAgIGRpcmVjdGlvbjogJ2FmdGVyJyxcbiAgICB9KTtcbiAgfVxufVxuLyoqXG4gKiBHaXZlbiB0aGUgZnJlcXVlbmN5ICh1bml0KSBhbmQgaW50ZXJ2YWwsIHRoaXMgZnVuY3Rpb24gZmluZHNcbiAqIGhvdyBtYW55IGp1bXBzIGZvcndhcmQgdGhlIGZpcnN0IGRhdGUgbmVlZHMgaW4gb3JkZXIgdG8gZXF1YWxcbiAqIG9yIGV4Y2VlZCB0aGUgc2Vjb25kIGRhdGUuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKlxuICogMS4gVW5pdCBpcyBkYWlseSBhbmQgaW50ZXJ2YWwgaXMgMS4gVGhlIHNlY29uZCBkYXRlIGlzIDMgZGF5c1xuICogICAgYWZ0ZXIgdGhlIGZpcnN0LiBUaGlzIHdpbGwgcmV0dXJuIDMuXG4gKiAyLiBVbml0IGlzIHllYXJseSBhbmQgaW50ZXJ2YWwgaXMgMS4gVGhlIHNlY29uZCBkYXRlIGlzIDMgZGF5c1xuICogICAgYWZ0ZXIgdGhlIGZpcnN0LiBUaGlzIHdpbGwgcmV0dXJuIDAuXG4gKiAzLiBVbml0IGlzIHllYXJseSBhbmQgaW50ZXJ2YWwgaXMgMy4gVGhlIHNlY29uZCBkYXRlIGlzIDQgeWVhcnNcbiAqICAgIGFmdGVyIHRoZSBmaXJzdC4gVGhpcyB3aWxsIHJldHVybiA2LlxuICovXG5mdW5jdGlvbiBpbnRlcnZhbERpZmZlcmVuY2VCZXR3ZWVuRGF0ZXMoeyBmaXJzdCwgc2Vjb25kLCB1bml0LCBpbnRlcnZhbCwgd2Vla1N0YXJ0LCBkaXJlY3Rpb24gfSkge1xuICBsZXQgZGlmZmVyZW5jZSA9ICgoKSA9PiB7XG4gICAgbGV0IGludGVydmFsRHVyYXRpb247XG4gICAgbGV0IG1vbnRocztcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICBtb250aHMgPSAoc2Vjb25kLmdldCgneWVhcicpIC0gZmlyc3QuZ2V0KCd5ZWFyJykpICogMTI7XG4gICAgICAgIG1vbnRocyA9IG1vbnRocyArIHNlY29uZC5nZXQoJ21vbnRoJykgLSBmaXJzdC5nZXQoJ21vbnRoJyk7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgbW9udGhzID0gKHNlY29uZC5nZXQoJ3llYXInKSAtIGZpcnN0LmdldCgneWVhcicpKSAqIDEyO1xuICAgICAgICBtb250aHMgPSBtb250aHMgKyBzZWNvbmQuZ2V0KCdtb250aCcpIC0gZmlyc3QuZ2V0KCdtb250aCcpO1xuICAgICAgICByZXR1cm4gbW9udGhzO1xuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIGZpcnN0ID0gZmlyc3QuZ3JhbnVsYXJpdHkoJ3dlZWsnLCB7IHdlZWtTdGFydCB9KTtcbiAgICAgICAgaW50ZXJ2YWxEdXJhdGlvbiA9IERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9XRUVLO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGludGVydmFsRHVyYXRpb24gPSBEYXRlQWRhcHRlci5NSUxMSVNFQ09ORFNfSU5fREFZO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICBpbnRlcnZhbER1cmF0aW9uID0gRGF0ZUFkYXB0ZXIuTUlMTElTRUNPTkRTX0lOX0hPVVI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgaW50ZXJ2YWxEdXJhdGlvbiA9IERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9NSU5VVEU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgaW50ZXJ2YWxEdXJhdGlvbiA9IERhdGVBZGFwdGVyLk1JTExJU0VDT05EU19JTl9TRUNPTkQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgICAgICBpbnRlcnZhbER1cmF0aW9uID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgYHVuaXRgIHZhbHVlJyk7XG4gICAgfVxuICAgIGNvbnN0IGRpZmYgPSBzZWNvbmQudmFsdWVPZigpIC0gZmlyc3QudmFsdWVPZigpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKGRpZmYgLyBpbnRlcnZhbER1cmF0aW9uKTtcbiAgfSkoKTtcbiAgY29uc3QgZm4gPSBkaXJlY3Rpb24gPT09ICdhZnRlcicgPyBNYXRoLmNlaWwgOiBNYXRoLmZsb29yO1xuICBkaWZmZXJlbmNlID0gZm4oZGlmZmVyZW5jZSAvIGludGVydmFsKSAqIGludGVydmFsO1xuICByZXR1cm4gZGlmZmVyZW5jZTtcbn1cblxuY2xhc3MgUmV2RnJlcXVlbmN5UnVsZSBleHRlbmRzIEZyZXF1ZW5jeVJ1bGUge1xuICBzZXRUb0N1cnJlbnRJbnRlcnZhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnZhbEVuZERhdGUuc3VidHJhY3QoMSwgJ21pbGxpc2Vjb25kJyk7XG4gIH1cbiAgaW50ZXJ2YWxEaWZmZXJlbmNlKGRhdGUpIHtcbiAgICByZXR1cm4gaW50ZXJ2YWxEaWZmZXJlbmNlQmV0d2VlbkRhdGVzKHtcbiAgICAgIGZpcnN0OiB0aGlzLmZpcnN0SW50ZXJ2YWxTdGFydERhdGUsXG4gICAgICBzZWNvbmQ6IGRhdGUsXG4gICAgICB1bml0OiB0aGlzLmludGVydmFsVW5pdCxcbiAgICAgIGludGVydmFsOiB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwsXG4gICAgICB3ZWVrU3RhcnQ6IHRoaXMub3B0aW9ucy53ZWVrU3RhcnQsXG4gICAgICBkaXJlY3Rpb246ICdiZWZvcmUnLFxuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IEZSRVFVRU5DSUVTID0gW1xuICAnTUlMTElTRUNPTkRMWScsXG4gICdTRUNPTkRMWScsXG4gICdNSU5VVEVMWScsXG4gICdIT1VSTFknLFxuICAnREFJTFknLFxuICAnV0VFS0xZJyxcbiAgJ01PTlRITFknLFxuICAnWUVBUkxZJyxcbl07XG5jb25zdCBGcmVxdWVuY3lSdWxlTW9kdWxlID0ge1xuICBuYW1lOiAnRnJlcXVlbmN5UnVsZScsXG4gIGdldDogcHJvY2Vzc29yID0+IHtcbiAgICBpZiAoXG4gICAgICBwcm9jZXNzb3Iub3B0aW9ucy5ieU1pbGxpc2Vjb25kT2ZTZWNvbmQgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgcHJvY2Vzc29yLm9wdGlvbnMuZnJlcXVlbmN5ICE9PSAnTUlMTElTRUNPTkRMWSdcbiAgICApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzc29yLnJldmVyc2UpIHJldHVybiBuZXcgUmV2RnJlcXVlbmN5UnVsZShwcm9jZXNzb3IsIHByb2Nlc3Nvci5lbmQpO1xuICAgIHJldHVybiBuZXcgRnJlcXVlbmN5UnVsZShwcm9jZXNzb3IsIHByb2Nlc3Nvci5zdGFydCk7XG4gIH0sXG4gIG5vcm1hbGl6ZU9wdGlvbnM6IChvcHRpb25zLCBub3JtKSA9PiB7XG4gICAgaWYgKCFGUkVRVUVOQ0lFUy5pbmNsdWRlcyhvcHRpb25zLmZyZXF1ZW5jeSkpIHtcbiAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoYFwiZnJlcXVlbmN5XCIgbXVzdCBiZSBvbmUgb2YgJHtKU09OLnN0cmluZ2lmeShGUkVRVUVOQ0lFUyl9YCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmludGVydmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmludGVydmFsKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImludGVydmFsXCIgZXhwZWN0cyBhIHdob2xlIG51bWJlcicpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuaW50ZXJ2YWwgPCAxKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiaW50ZXJ2YWxcIiBjYW5ub3QgYmUgbGVzcyB0aGFuIDEnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMud2Vla1N0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghRGF0ZUFkYXB0ZXIuV0VFS0RBWVMuaW5jbHVkZXMob3B0aW9ucy53ZWVrU3RhcnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoXG4gICAgICAgICAgYFwid2Vla1N0YXJ0XCIgbXVzdCBiZSBvbmUgb2YgJHtKU09OLnN0cmluZ2lmeShEYXRlQWRhcHRlci5XRUVLREFZUyl9YCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbm9ybS5mcmVxdWVuY3kgPSBvcHRpb25zLmZyZXF1ZW5jeTtcbiAgICBub3JtLmludGVydmFsID0gb3B0aW9ucy5pbnRlcnZhbCB8fCAxO1xuICAgIG5vcm0ud2Vla1N0YXJ0ID0gb3B0aW9ucy53ZWVrU3RhcnQgfHwgJ01PJztcbiAgfSxcbiAgZGVwczogKCkgPT4gW0ZyZXF1ZW5jeVJ1bGVNb2R1bGVdLFxufTtcblxuZnVuY3Rpb24gcnVsZU9wdGlvbkZpbGxlZChvcHRpb24pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkob3B0aW9uKSAmJiBvcHRpb24ubGVuZ3RoID4gMDtcbn1cblxuY29uc3QgZnJlcUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmNsYXNzIFJlY3VycmVuY2VSdWxlQmFzZSBleHRlbmRzIFJlY3VycmVuY2VSdWxlIHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yKSB7XG4gICAgc3VwZXIocHJvY2Vzc29yKTtcbiAgICBpZiAoIWZyZXFDYWNoZS5oYXModGhpcy5wcm9jZXNzb3IpKSB7XG4gICAgICBmcmVxQ2FjaGUuc2V0KHRoaXMucHJvY2Vzc29yLCBuZXcgRnJlcXVlbmN5UnVsZShwcm9jZXNzb3IsIHByb2Nlc3Nvci5zdGFydCkpO1xuICAgIH1cbiAgICB0aGlzLmZyZXF1ZW5jeSA9IGZyZXFDYWNoZS5nZXQodGhpcy5wcm9jZXNzb3IpO1xuICB9XG4gIHZhbGlkYXRlRGF0ZShhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5mcmVxdWVuY3kudmFsaWRhdGVEYXRlKGFyZyk7XG4gIH1cbn1cbmNsYXNzIFJldlJlY3VycmVuY2VSdWxlQmFzZSBleHRlbmRzIFJlY3VycmVuY2VSdWxlIHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yKSB7XG4gICAgc3VwZXIocHJvY2Vzc29yKTtcbiAgICBpZiAoIWZyZXFDYWNoZS5oYXModGhpcy5wcm9jZXNzb3IpKSB7XG4gICAgICBmcmVxQ2FjaGUuc2V0KHRoaXMucHJvY2Vzc29yLCBuZXcgUmV2RnJlcXVlbmN5UnVsZShwcm9jZXNzb3IsIHByb2Nlc3Nvci5lbmQpKTtcbiAgICB9XG4gICAgdGhpcy5mcmVxdWVuY3kgPSBmcmVxQ2FjaGUuZ2V0KHRoaXMucHJvY2Vzc29yKTtcbiAgfVxuICB2YWxpZGF0ZURhdGUoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuZnJlcXVlbmN5LnZhbGlkYXRlRGF0ZShhcmcpO1xuICB9XG59XG5cbi8qKlxuICogQ29udGFpbnMgc2hhcmVkIGxvZ2ljIGZvciBCeUhvdXJPZkRheSwgQnlNaW51dGVPZkhvdXIsXG4gKiBCeVNlY29uZE9mTWludXRlLCBhbmQgQnlNaWxsaXNlY29uZE9mU2Vjb25kIHJldmVyc2UgcnVsZSBwaXBlc1xuICovXG5jbGFzcyBSZXZCeVRpbWVPZlVuaXRSdWxlIGV4dGVuZHMgUmV2UmVjdXJyZW5jZVJ1bGVCYXNlIHtcbiAgcnVuKGRhdGUpIHtcbiAgICAvLyBlLmcuIGNvbnN0IGN1cnJlbnRUaW1lID0gZGF0ZS5nZXQoJ2hvdXInKTtcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IGRhdGUuZ2V0KHRoaXMuZ3JhbnVsYXJpdHkpO1xuICAgIC8vIGUuZy4gZm9yIChjb25zdCB0aW1lIG9mIHRoaXMub3B0aW9ucy5ieUhvdXJPZkRheSkge1xuICAgIGZvciAoY29uc3QgdGltZSBvZiB0aGlzLm9wdGlvbikge1xuICAgICAgaWYgKGN1cnJlbnRUaW1lIDwgdGltZSkgY29udGludWU7XG4gICAgICBpZiAoY3VycmVudFRpbWUgPT09IHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBWYWxpZERhdGVUaW1lKGRhdGUpKTtcbiAgICAgIH1cbiAgICAgIC8vIGUuZy4gcmV0dXJuIHRoaXMubmV4dFZhbGlkRGF0ZShhcmdzLCBkYXRlLmVuZEdyYW51bGFyaXR5KCdkYXknKS5zZXQoJ2hvdXInLCB0aW1lKSk7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUoXG4gICAgICAgIG5ldyBJbnZhbGlkRGF0ZVRpbWUoZGF0ZS5lbmRHcmFudWxhcml0eSh0aGlzLmJhc2VHcmFudWxhcml0eSkuc2V0KHRoaXMuZ3JhbnVsYXJpdHksIHRpbWUpKSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShcbiAgICAgIG5ldyBJbnZhbGlkRGF0ZVRpbWUoXG4gICAgICAgIGRhdGVcbiAgICAgICAgICAvLyBlLmcuIC5lbmRHcmFudWxhcml0eSgnZGF5JylcbiAgICAgICAgICAuZW5kR3JhbnVsYXJpdHkodGhpcy5iYXNlR3JhbnVsYXJpdHkpXG4gICAgICAgICAgLy8gZS5nLiAuc3VidHJhY3QoMSwgJ2RheScpXG4gICAgICAgICAgLnN1YnRyYWN0KDEsIHRoaXMuYmFzZUdyYW51bGFyaXR5KVxuICAgICAgICAgIC8vIGUuZy4gLnNldCgnaG91cicsIHRoaXMub3B0aW9ucy5ieUhvdXJPZkRheVswXSk7XG4gICAgICAgICAgLnNldCh0aGlzLmdyYW51bGFyaXR5LCB0aGlzLm9wdGlvblswXSksXG4gICAgICApLFxuICAgICk7XG4gIH1cbn1cblxuY2xhc3MgUmV2QnlNaWxsaXNlY29uZE9mU2Vjb25kUnVsZSBleHRlbmRzIFJldkJ5VGltZU9mVW5pdFJ1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuYmFzZUdyYW51bGFyaXR5ID0gJ3NlY29uZCc7XG4gICAgdGhpcy5ncmFudWxhcml0eSA9ICdtaWxsaXNlY29uZCc7XG4gICAgdGhpcy5vcHRpb24gPSB0aGlzLm9wdGlvbnMuYnlNaWxsaXNlY29uZE9mU2Vjb25kLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG59XG5cbi8qKlxuICogQ29udGFpbnMgc2hhcmVkIGxvZ2ljIGZvciBCeUhvdXJPZkRheSwgQnlNaW51dGVPZkhvdXIsXG4gKiBCeVNlY29uZE9mTWludXRlLCBhbmQgQnlNaWxsaXNlY29uZE9mU2Vjb25kIHJ1bGUgcGlwZXNcbiAqL1xuY2xhc3MgQnlUaW1lT2ZVbml0UnVsZSBleHRlbmRzIFJlY3VycmVuY2VSdWxlQmFzZSB7XG4gIHJ1bihkYXRlKSB7XG4gICAgLy8gZS5nLiBjb25zdCBjdXJyZW50VGltZSA9IGRhdGUuZ2V0KCdob3VyJyk7XG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBkYXRlLmdldCh0aGlzLmdyYW51bGFyaXR5KTtcbiAgICAvLyBlLmcuIGZvciAoY29uc3QgdGltZSBvZiB0aGlzLm9wdGlvbnMuYnlIb3VyT2ZEYXkpIHtcbiAgICBmb3IgKGNvbnN0IHRpbWUgb2YgdGhpcy5vcHRpb24pIHtcbiAgICAgIGlmIChjdXJyZW50VGltZSA+IHRpbWUpIGNvbnRpbnVlO1xuICAgICAgaWYgKGN1cnJlbnRUaW1lID09PSB0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgVmFsaWREYXRlVGltZShkYXRlKSk7XG4gICAgICB9XG4gICAgICAvLyBlLmcuIHJldHVybiB0aGlzLm5leHRWYWxpZERhdGUoYXJncywgZGF0ZS5ncmFudWxhcml0eSgnZGF5Jykuc2V0KCdob3VyJywgdGltZSkpO1xuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKFxuICAgICAgICBuZXcgSW52YWxpZERhdGVUaW1lKGRhdGUuZ3JhbnVsYXJpdHkodGhpcy5iYXNlR3JhbnVsYXJpdHkpLnNldCh0aGlzLmdyYW51bGFyaXR5LCB0aW1lKSksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUoXG4gICAgICBuZXcgSW52YWxpZERhdGVUaW1lKFxuICAgICAgICBkYXRlXG4gICAgICAgICAgLy8gZS5nLiAuZ3JhbnVsYXJpdHkoJ2RheScpXG4gICAgICAgICAgLmdyYW51bGFyaXR5KHRoaXMuYmFzZUdyYW51bGFyaXR5KVxuICAgICAgICAgIC8vIGUuZy4gLmFkZCgxLCAnZGF5JylcbiAgICAgICAgICAuYWRkKDEsIHRoaXMuYmFzZUdyYW51bGFyaXR5KVxuICAgICAgICAgIC8vIGUuZy4gLnNldCgnaG91cicsIHRoaXMub3B0aW9ucy5ieUhvdXJPZkRheVswXSk7XG4gICAgICAgICAgLnNldCh0aGlzLmdyYW51bGFyaXR5LCB0aGlzLm9wdGlvblswXSksXG4gICAgICApLFxuICAgICk7XG4gIH1cbn1cblxuY2xhc3MgQnlNaWxsaXNlY29uZE9mU2Vjb25kUnVsZSBleHRlbmRzIEJ5VGltZU9mVW5pdFJ1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuYmFzZUdyYW51bGFyaXR5ID0gJ3NlY29uZCc7XG4gICAgdGhpcy5ncmFudWxhcml0eSA9ICdtaWxsaXNlY29uZCc7XG4gICAgdGhpcy5vcHRpb24gPSB0aGlzLm9wdGlvbnMuYnlNaWxsaXNlY29uZE9mU2Vjb25kO1xuICB9XG59XG5cbmNvbnN0IEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGVNb2R1bGUgPSB7XG4gIG5hbWU6ICdCeU1pbGxpc2Vjb25kT2ZTZWNvbmQnLFxuICBnZXQ6IHByb2Nlc3NvciA9PiB7XG4gICAgaWYgKHByb2Nlc3Nvci5vcHRpb25zLmJ5TWlsbGlzZWNvbmRPZlNlY29uZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcbiAgICBpZiAocHJvY2Vzc29yLnJldmVyc2UpIHJldHVybiBuZXcgUmV2QnlNaWxsaXNlY29uZE9mU2Vjb25kUnVsZShwcm9jZXNzb3IpO1xuICAgIHJldHVybiBuZXcgQnlNaWxsaXNlY29uZE9mU2Vjb25kUnVsZShwcm9jZXNzb3IpO1xuICB9LFxuICBub3JtYWxpemVPcHRpb25zOiAob3B0aW9ucywgbm9ybSkgPT4ge1xuICAgIGlmIChvcHRpb25zLmJ5TWlsbGlzZWNvbmRPZlNlY29uZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieU1pbGxpc2Vjb25kT2ZTZWNvbmQpKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiYnlNaWxsaXNlY29uZE9mU2Vjb25kXCIgZXhwZWN0cyBhIG5vbi1lbXB0eSBhcnJheScpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYnlNaWxsaXNlY29uZE9mU2Vjb25kLnNvbWUobnVtID0+IG51bSA8IDAgfHwgbnVtID4gOTk5KSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5TWlsbGlzZWNvbmRPZlNlY29uZFwiIHZhbHVlcyBtdXN0IGJlID49IDAgJiYgPD0gOTk5Jyk7XG4gICAgICB9XG4gICAgICBub3JtLmJ5TWlsbGlzZWNvbmRPZlNlY29uZCA9IG9wdGlvbnMuYnlNaWxsaXNlY29uZE9mU2Vjb25kO1xuICAgICAgbm9ybS5ieU1pbGxpc2Vjb25kT2ZTZWNvbmQuc29ydChudW1iZXJTb3J0Q29tcGFyZXIpO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5mcmVxdWVuY3kgIT09ICdNSUxMSVNFQ09ORExZJykge1xuICAgICAgbm9ybS5ieU1pbGxpc2Vjb25kT2ZTZWNvbmQgPSBbbm9ybS5zdGFydC5nZXQoJ21pbGxpc2Vjb25kJyldO1xuICAgIH1cbiAgfSxcbiAgZGVwczogKCkgPT4gW0ZyZXF1ZW5jeVJ1bGVNb2R1bGUsIEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGVNb2R1bGVdLFxufTtcblxuY2xhc3MgUmV2QnlTZWNvbmRPZk1pbnV0ZVJ1bGUgZXh0ZW5kcyBSZXZCeVRpbWVPZlVuaXRSdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmJhc2VHcmFudWxhcml0eSA9ICdtaW51dGUnO1xuICAgIHRoaXMuZ3JhbnVsYXJpdHkgPSAnc2Vjb25kJztcbiAgICB0aGlzLm9wdGlvbiA9IHRoaXMub3B0aW9ucy5ieVNlY29uZE9mTWludXRlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG59XG5cbmNsYXNzIEJ5U2Vjb25kT2ZNaW51dGVSdWxlIGV4dGVuZHMgQnlUaW1lT2ZVbml0UnVsZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5iYXNlR3JhbnVsYXJpdHkgPSAnbWludXRlJztcbiAgICB0aGlzLmdyYW51bGFyaXR5ID0gJ3NlY29uZCc7XG4gICAgdGhpcy5vcHRpb24gPSB0aGlzLm9wdGlvbnMuYnlTZWNvbmRPZk1pbnV0ZTtcbiAgfVxufVxuXG5jb25zdCBCeVNlY29uZE9mTWludXRlUnVsZU1vZHVsZSA9IHtcbiAgbmFtZTogJ0J5U2Vjb25kT2ZNaW51dGUnLFxuICBnZXQ6IHByb2Nlc3NvciA9PiB7XG4gICAgaWYgKHByb2Nlc3Nvci5vcHRpb25zLmJ5U2Vjb25kT2ZNaW51dGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKHByb2Nlc3Nvci5yZXZlcnNlKSByZXR1cm4gbmV3IFJldkJ5U2Vjb25kT2ZNaW51dGVSdWxlKHByb2Nlc3Nvcik7XG4gICAgcmV0dXJuIG5ldyBCeVNlY29uZE9mTWludXRlUnVsZShwcm9jZXNzb3IpO1xuICB9LFxuICBub3JtYWxpemVPcHRpb25zOiAob3B0aW9ucywgbm9ybSkgPT4ge1xuICAgIGlmIChvcHRpb25zLmJ5U2Vjb25kT2ZNaW51dGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlTZWNvbmRPZk1pbnV0ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJieVNlY29uZE9mTWludXRlXCIgZXhwZWN0cyBhIG5vbi1lbXB0eSBhcnJheScpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYnlTZWNvbmRPZk1pbnV0ZS5zb21lKG51bSA9PiBudW0gPCAwIHx8IG51bSA+IDYwKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5U2Vjb25kT2ZNaW51dGVcIiB2YWx1ZXMgbXVzdCBiZSA+PSAwICYmIDw9IDYwJyk7XG4gICAgICB9XG4gICAgICBub3JtLmJ5U2Vjb25kT2ZNaW51dGUgPSBvcHRpb25zLmJ5U2Vjb25kT2ZNaW51dGU7XG4gICAgICBub3JtLmJ5U2Vjb25kT2ZNaW51dGUuc29ydChudW1iZXJTb3J0Q29tcGFyZXIpO1xuICAgIH0gZWxzZSBpZiAoIVsnU0VDT05ETFknLCAnTUlMTElTRUNPTkRMWSddLmluY2x1ZGVzKG9wdGlvbnMuZnJlcXVlbmN5KSkge1xuICAgICAgbm9ybS5ieVNlY29uZE9mTWludXRlID0gW25vcm0uc3RhcnQuZ2V0KCdzZWNvbmQnKV07XG4gICAgfVxuICB9LFxuICBkZXBzOiAoKSA9PiBbRnJlcXVlbmN5UnVsZU1vZHVsZSwgQnlTZWNvbmRPZk1pbnV0ZVJ1bGVNb2R1bGUsIEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGVNb2R1bGVdLFxufTtcblxuY2xhc3MgUmV2QnlNaW51dGVPZkhvdXJSdWxlIGV4dGVuZHMgUmV2QnlUaW1lT2ZVbml0UnVsZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5iYXNlR3JhbnVsYXJpdHkgPSAnaG91cic7XG4gICAgdGhpcy5ncmFudWxhcml0eSA9ICdtaW51dGUnO1xuICAgIHRoaXMub3B0aW9uID0gdGhpcy5vcHRpb25zLmJ5TWludXRlT2ZIb3VyLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG59XG5cbmNsYXNzIEJ5TWludXRlT2ZIb3VyUnVsZSBleHRlbmRzIEJ5VGltZU9mVW5pdFJ1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuYmFzZUdyYW51bGFyaXR5ID0gJ2hvdXInO1xuICAgIHRoaXMuZ3JhbnVsYXJpdHkgPSAnbWludXRlJztcbiAgICB0aGlzLm9wdGlvbiA9IHRoaXMub3B0aW9ucy5ieU1pbnV0ZU9mSG91cjtcbiAgfVxufVxuXG5jb25zdCBCeU1pbnV0ZU9mSG91clJ1bGVNb2R1bGUgPSB7XG4gIG5hbWU6ICdCeU1pbnV0ZU9mSG91cicsXG4gIGdldDogcHJvY2Vzc29yID0+IHtcbiAgICBpZiAocHJvY2Vzc29yLm9wdGlvbnMuYnlNaW51dGVPZkhvdXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKHByb2Nlc3Nvci5yZXZlcnNlKSByZXR1cm4gbmV3IFJldkJ5TWludXRlT2ZIb3VyUnVsZShwcm9jZXNzb3IpO1xuICAgIHJldHVybiBuZXcgQnlNaW51dGVPZkhvdXJSdWxlKHByb2Nlc3Nvcik7XG4gIH0sXG4gIG5vcm1hbGl6ZU9wdGlvbnM6IChvcHRpb25zLCBub3JtKSA9PiB7XG4gICAgaWYgKG9wdGlvbnMuYnlNaW51dGVPZkhvdXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlNaW51dGVPZkhvdXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiYnlNaW51dGVPZkhvdXJcIiBleHBlY3RzIGEgbm9uLWVtcHR5IGFycmF5Jyk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5ieU1pbnV0ZU9mSG91ci5zb21lKG51bSA9PiBudW0gPCAwIHx8IG51bSA+IDU5KSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5TWludXRlT2ZIb3VyXCIgdmFsdWVzIG11c3QgYmUgPj0gMCAmJiA8PSA1OScpO1xuICAgICAgfVxuICAgICAgbm9ybS5ieU1pbnV0ZU9mSG91ciA9IG9wdGlvbnMuYnlNaW51dGVPZkhvdXI7XG4gICAgICBub3JtLmJ5TWludXRlT2ZIb3VyLnNvcnQobnVtYmVyU29ydENvbXBhcmVyKTtcbiAgICB9IGVsc2UgaWYgKCFbJ01JTlVURUxZJywgJ1NFQ09ORExZJywgJ01JTExJU0VDT05ETFknXS5pbmNsdWRlcyhvcHRpb25zLmZyZXF1ZW5jeSkpIHtcbiAgICAgIG5vcm0uYnlNaW51dGVPZkhvdXIgPSBbbm9ybS5zdGFydC5nZXQoJ21pbnV0ZScpXTtcbiAgICB9XG4gIH0sXG4gIGRlcHM6ICgpID0+IFtcbiAgICBGcmVxdWVuY3lSdWxlTW9kdWxlLFxuICAgIEJ5TWludXRlT2ZIb3VyUnVsZU1vZHVsZSxcbiAgICBCeVNlY29uZE9mTWludXRlUnVsZU1vZHVsZSxcbiAgICBCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlTW9kdWxlLFxuICBdLFxufTtcblxuY2xhc3MgUmV2QnlIb3VyT2ZEYXlSdWxlIGV4dGVuZHMgUmV2QnlUaW1lT2ZVbml0UnVsZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5iYXNlR3JhbnVsYXJpdHkgPSAnZGF5JztcbiAgICB0aGlzLmdyYW51bGFyaXR5ID0gJ2hvdXInO1xuICAgIHRoaXMub3B0aW9uID0gdGhpcy5vcHRpb25zLmJ5SG91ck9mRGF5LnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG59XG5cbmNsYXNzIEJ5SG91ck9mRGF5UnVsZSBleHRlbmRzIEJ5VGltZU9mVW5pdFJ1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuYmFzZUdyYW51bGFyaXR5ID0gJ2RheSc7XG4gICAgdGhpcy5ncmFudWxhcml0eSA9ICdob3VyJztcbiAgICB0aGlzLm9wdGlvbiA9IHRoaXMub3B0aW9ucy5ieUhvdXJPZkRheTtcbiAgfVxufVxuXG5jb25zdCBCeUhvdXJPZkRheVJ1bGVNb2R1bGUgPSB7XG4gIG5hbWU6ICdCeUhvdXJPZkRheScsXG4gIGdldDogcHJvY2Vzc29yID0+IHtcbiAgICBpZiAocHJvY2Vzc29yLm9wdGlvbnMuYnlIb3VyT2ZEYXkgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKHByb2Nlc3Nvci5yZXZlcnNlKSByZXR1cm4gbmV3IFJldkJ5SG91ck9mRGF5UnVsZShwcm9jZXNzb3IpO1xuICAgIHJldHVybiBuZXcgQnlIb3VyT2ZEYXlSdWxlKHByb2Nlc3Nvcik7XG4gIH0sXG4gIG5vcm1hbGl6ZU9wdGlvbnM6IChvcHRpb25zLCBub3JtKSA9PiB7XG4gICAgaWYgKG9wdGlvbnMuYnlIb3VyT2ZEYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFydWxlT3B0aW9uRmlsbGVkKG9wdGlvbnMuYnlIb3VyT2ZEYXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiYnlIb3VyT2ZEYXlcIiBleHBlY3RzIGEgbm9uLWVtcHR5IGFycmF5Jyk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5ieUhvdXJPZkRheS5zb21lKG51bSA9PiBudW0gPCAwIHx8IG51bSA+IDIzKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5SG91ck9mRGF5XCIgdmFsdWVzIG11c3QgYmUgPj0gMCAmJiA8PSAyMycpO1xuICAgICAgfVxuICAgICAgbm9ybS5ieUhvdXJPZkRheSA9IG9wdGlvbnMuYnlIb3VyT2ZEYXk7XG4gICAgICBub3JtLmJ5SG91ck9mRGF5LnNvcnQobnVtYmVyU29ydENvbXBhcmVyKTtcbiAgICB9IGVsc2UgaWYgKFsnWUVBUkxZJywgJ01PTlRITFknLCAnV0VFS0xZJywgJ0RBSUxZJ10uaW5jbHVkZXMob3B0aW9ucy5mcmVxdWVuY3kpKSB7XG4gICAgICBub3JtLmJ5SG91ck9mRGF5ID0gW25vcm0uc3RhcnQuZ2V0KCdob3VyJyldO1xuICAgIH1cbiAgfSxcbiAgZGVwczogKCkgPT4gW1xuICAgIEZyZXF1ZW5jeVJ1bGVNb2R1bGUsXG4gICAgQnlIb3VyT2ZEYXlSdWxlTW9kdWxlLFxuICAgIEJ5TWludXRlT2ZIb3VyUnVsZU1vZHVsZSxcbiAgICBCeVNlY29uZE9mTWludXRlUnVsZU1vZHVsZSxcbiAgICBCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlTW9kdWxlLFxuICBdLFxufTtcblxuZnVuY3Rpb24gZ2V0TmV4dFdlZWtkYXkoZGF0ZSwgd2Vla2RheSkge1xuICByZXR1cm4gZGF0ZS5hZGQoZ2V0RGlmZmVyZW5jZUJldHdlZW5XZWVrZGF5cyhkYXRlLmdldCgnd2Vla2RheScpLCB3ZWVrZGF5KSwgJ2RheScpO1xufVxuXG5mdW5jdGlvbiBnZXROdGhXZWVrZGF5T2ZNb250aChkYXRlLCB3ZWVrZGF5LCBudGgpIHtcbiAgbGV0IGJhc2UgPSBkYXRlLnNldCgnZGF5JywgMSk7XG4gIGlmIChudGggPCAwKSB7XG4gICAgYmFzZSA9IGJhc2UuYWRkKDEsICdtb250aCcpO1xuICB9XG4gIGJhc2UgPSBnZXROZXh0V2Vla2RheShiYXNlLCB3ZWVrZGF5KTtcbiAgLy8gd2hlbiBudGggaXMgbmVnYXRpdmUsIGFkZGluZyBpdCB3aWxsIGFjdCBhcyBzdWJ0cmFjdGlvblxuICByZXR1cm4gbnRoIDwgMCA/IGJhc2UuYWRkKG50aCwgJ3dlZWsnKSA6IGJhc2UuYWRkKG50aCAtIDEsICd3ZWVrJyk7XG59XG5cbmNsYXNzIEJ5RGF5T2ZNb250aFJ1bGUgZXh0ZW5kcyBSZWN1cnJlbmNlUnVsZUJhc2Uge1xuICBydW4oZGF0ZSkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRCeURheU9mTW9udGggPSBub3JtYWxpemVCeURheU9mTW9udGgoXG4gICAgICBkYXRlLFxuICAgICAgdGhpcy5vcHRpb25zLmJ5RGF5T2ZNb250aCxcbiAgICAgIHRoaXMub3B0aW9ucy5ieURheU9mV2VlayxcbiAgICApO1xuICAgIGNvbnN0IGN1cnJlbnREYXkgPSBkYXRlLmdldCgnZGF5Jyk7XG4gICAgZm9yIChjb25zdCBkYXkgb2Ygbm9ybWFsaXplZEJ5RGF5T2ZNb250aCkge1xuICAgICAgaWYgKGN1cnJlbnREYXkgPiBkYXkpIGNvbnRpbnVlO1xuICAgICAgaWYgKGN1cnJlbnREYXkgPT09IGRheSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IFZhbGlkRGF0ZVRpbWUoZGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBJbnZhbGlkRGF0ZVRpbWUoZGF0ZS5ncmFudWxhcml0eSgnbW9udGgnKS5zZXQoJ2RheScsIGRheSkpKTtcbiAgICB9XG4gICAgbGV0IG5leHQ7XG4gICAgbGV0IG5leHRNb250aCA9IGRhdGU7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB3aGlsZSAoIW5leHQgJiYgaW5kZXggPCAzMCkge1xuICAgICAgbmV4dE1vbnRoID0gbmV4dE1vbnRoLmdyYW51bGFyaXR5KCdtb250aCcpLmFkZCgxLCAnbW9udGgnKTtcbiAgICAgIG5leHQgPSBub3JtYWxpemVCeURheU9mTW9udGgoXG4gICAgICAgIG5leHRNb250aCxcbiAgICAgICAgdGhpcy5vcHRpb25zLmJ5RGF5T2ZNb250aCxcbiAgICAgICAgdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrLFxuICAgICAgKVswXTtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICAgIGlmIChpbmRleCA+PSAxMykge1xuICAgICAgdGhyb3cgbmV3IFJlY3VycmVuY2VSdWxlRXJyb3IoJ2J5RGF5T2ZNb250aCBJbmZpbml0ZSB3aGlsZSBsb29wJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgSW52YWxpZERhdGVUaW1lKG5leHRNb250aC5zZXQoJ2RheScsIG5leHQpKSk7XG4gIH1cbn1cbi8qKlxuICogRG9lcyBhIGZldyB0aGluZ3M6XG4gKlxuICogMS4gZmlsdGVycyBvdXQgYnlEYXlPZk1vbnRoIGVudHJpZXMgd2hpY2ggYXJlIG5vdCBhcHBsaWNhYmxlXG4gKiAgICB0byBjdXJyZW50IG1vbnRoXG4gKiAyLiBuZWdhdGl2ZSBlbnRyaWVzIHRvIHBvc2l0aXZlIG9uZXNcbiAqIDMuIGlmIGEgYnlEYXlPZldlZWsgb3B0aW9uIGlzIGdpdmVuLCByZW1vdmVzIGRheXMgd2hpY2ggYXJlXG4gKiAgICBub3Qgb24gdGhlIGNvcnJlY3QgZGF5IG9mIHRoZSB3ZWVrXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUJ5RGF5T2ZNb250aChkYXRlLCBieURheU9mTW9udGgsIGJ5RGF5T2ZXZWVrKSB7XG4gIGNvbnN0IGxlbmd0aE9mTW9udGggPSBkYXRlLmVuZEdyYW51bGFyaXR5KCdtb250aCcpLmdldCgnZGF5Jyk7XG4gIGxldCBub3JtYWxpemVkQnlEYXlPZk1vbnRoID0gYnlEYXlPZk1vbnRoXG4gICAgLmZpbHRlcihkYXkgPT4gbGVuZ3RoT2ZNb250aCA+PSBNYXRoLmFicyhkYXkpKVxuICAgIC5tYXAoZGF5ID0+IChkYXkgPiAwID8gZGF5IDogbGVuZ3RoT2ZNb250aCArIGRheSArIDEpKTtcbiAgaWYgKGJ5RGF5T2ZXZWVrKSB7XG4gICAgY29uc3QgYmFzZSA9IGRhdGUuZ3JhbnVsYXJpdHkoJ21vbnRoJyk7XG4gICAgY29uc3QgZmlsdGVyZWRCeURheU9mTW9udGggPSBbXTtcbiAgICBieURheU9mV2Vlay5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZpbHRlcmVkQnlEYXlPZk1vbnRoLnB1c2goXG4gICAgICAgICAgLi4ubm9ybWFsaXplZEJ5RGF5T2ZNb250aC5maWx0ZXIoZGF5ID0+IGJhc2Uuc2V0KCdkYXknLCBkYXkpLmdldCgnd2Vla2RheScpID09PSBlbnRyeSksXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG50aFdlZWtkYXlPZk1vbnRoID0gZ2V0TnRoV2Vla2RheU9mTW9udGgoZGF0ZSwgLi4uZW50cnkpLmdldCgnZGF5Jyk7XG4gICAgICBpZiAobm9ybWFsaXplZEJ5RGF5T2ZNb250aC5pbmNsdWRlcyhudGhXZWVrZGF5T2ZNb250aCkpIHtcbiAgICAgICAgZmlsdGVyZWRCeURheU9mTW9udGgucHVzaChudGhXZWVrZGF5T2ZNb250aCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbm9ybWFsaXplZEJ5RGF5T2ZNb250aCA9IEFycmF5LmZyb20obmV3IFNldChmaWx0ZXJlZEJ5RGF5T2ZNb250aCkpO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkQnlEYXlPZk1vbnRoLnNvcnQoKGEsIGIpID0+IHtcbiAgICBpZiAoYSA+IGIpIHJldHVybiAxO1xuICAgIGlmIChhIDwgYikgcmV0dXJuIC0xO1xuICAgIGVsc2UgcmV0dXJuIDA7XG4gIH0pO1xufVxuXG5jbGFzcyBSZXZCeURheU9mTW9udGhSdWxlIGV4dGVuZHMgUmV2UmVjdXJyZW5jZVJ1bGVCYXNlIHtcbiAgcnVuKGRhdGUpIHtcbiAgICBjb25zdCBub3JtYWxpemVkQnlEYXlPZk1vbnRoID0gbm9ybWFsaXplQnlEYXlPZk1vbnRoKFxuICAgICAgZGF0ZSxcbiAgICAgIHRoaXMub3B0aW9ucy5ieURheU9mTW9udGgsXG4gICAgICB0aGlzLm9wdGlvbnMuYnlEYXlPZldlZWssXG4gICAgKS5yZXZlcnNlKCk7XG4gICAgY29uc3QgY3VycmVudERheSA9IGRhdGUuZ2V0KCdkYXknKTtcbiAgICBmb3IgKGNvbnN0IGRheSBvZiBub3JtYWxpemVkQnlEYXlPZk1vbnRoKSB7XG4gICAgICBpZiAoY3VycmVudERheSA8IGRheSkgY29udGludWU7XG4gICAgICBpZiAoY3VycmVudERheSA9PT0gZGF5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgVmFsaWREYXRlVGltZShkYXRlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IEludmFsaWREYXRlVGltZShkYXRlLmVuZEdyYW51bGFyaXR5KCdtb250aCcpLnNldCgnZGF5JywgZGF5KSkpO1xuICAgIH1cbiAgICBsZXQgbmV4dDtcbiAgICBsZXQgbmV4dE1vbnRoID0gZGF0ZTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIHdoaWxlICghbmV4dCAmJiBpbmRleCA8IDMwKSB7XG4gICAgICBuZXh0TW9udGggPSBuZXh0TW9udGguZW5kR3JhbnVsYXJpdHkoJ21vbnRoJykuc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgICBuZXh0ID0gbm9ybWFsaXplQnlEYXlPZk1vbnRoKFxuICAgICAgICBuZXh0TW9udGgsXG4gICAgICAgIHRoaXMub3B0aW9ucy5ieURheU9mTW9udGgsXG4gICAgICAgIHRoaXMub3B0aW9ucy5ieURheU9mV2VlayxcbiAgICAgICkucG9wKCk7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPj0gMTMpIHtcbiAgICAgIHRocm93IG5ldyBSZWN1cnJlbmNlUnVsZUVycm9yKCdieURheU9mTW9udGggSW5maW5pdGUgd2hpbGUgbG9vcCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IEludmFsaWREYXRlVGltZShuZXh0TW9udGguc2V0KCdkYXknLCBuZXh0KSkpO1xuICB9XG59XG5cbmNvbnN0IEJ5RGF5T2ZNb250aFJ1bGVNb2R1bGUgPSB7XG4gIG5hbWU6ICdCeURheU9mTW9udGgnLFxuICBnZXQ6IHByb2Nlc3NvciA9PiB7XG4gICAgaWYgKHByb2Nlc3Nvci5vcHRpb25zLmJ5RGF5T2ZNb250aCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcbiAgICBpZiAocHJvY2Vzc29yLnJldmVyc2UpIHJldHVybiBuZXcgUmV2QnlEYXlPZk1vbnRoUnVsZShwcm9jZXNzb3IpO1xuICAgIHJldHVybiBuZXcgQnlEYXlPZk1vbnRoUnVsZShwcm9jZXNzb3IpO1xuICB9LFxuICBub3JtYWxpemVPcHRpb25zOiAob3B0aW9ucywgbm9ybSkgPT4ge1xuICAgIGlmIChvcHRpb25zLmJ5RGF5T2ZNb250aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAob3B0aW9ucy5mcmVxdWVuY3kgPT09ICdXRUVLTFknKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ3doZW4gXCJmcmVxdWVuY3lcIiBpcyBcIldFRUtMWVwiLCBcImJ5RGF5T2ZNb250aFwiIGNhbm5vdCBiZSBwcmVzZW50Jyk7XG4gICAgICB9XG4gICAgICBpZiAoIXJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieURheU9mTW9udGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiYnlEYXlPZk1vbnRoXCIgZXhwZWN0cyBhIG5vbi1lbXB0eSBhcnJheScpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuYnlEYXlPZk1vbnRoLnNvbWUobnVtID0+IG51bSA9PT0gMCB8fCBudW0gPCAtMzEgfHwgbnVtID4gMzEpKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoXG4gICAgICAgICAgJ1wiYnlEYXlPZk1vbnRoXCIgdmFsdWVzIG11c3QgYmUgYG51bSAhPT0gMCAmJiBudW0gPD0gMzEgJiYgbnVtID49IC0zMWAnLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbm9ybS5ieURheU9mTW9udGggPSBvcHRpb25zLmJ5RGF5T2ZNb250aC5zbGljZSgpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAhKHJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieURheU9mV2VlaykgfHwgcnVsZU9wdGlvbkZpbGxlZChvcHRpb25zLmJ5RGF5T2ZZZWFyKSkgJiZcbiAgICAgIFsnWUVBUkxZJywgJ01PTlRITFknXS5pbmNsdWRlcyhvcHRpb25zLmZyZXF1ZW5jeSlcbiAgICApIHtcbiAgICAgIG5vcm0uYnlEYXlPZk1vbnRoID0gW25vcm0uc3RhcnQuZ2V0KCdkYXknKV07XG4gICAgfVxuICB9LFxuICBkZXBzOiAoKSA9PiBbXG4gICAgRnJlcXVlbmN5UnVsZU1vZHVsZSxcbiAgICBCeURheU9mTW9udGhSdWxlTW9kdWxlLFxuICAgIEJ5SG91ck9mRGF5UnVsZU1vZHVsZSxcbiAgICBCeU1pbnV0ZU9mSG91clJ1bGVNb2R1bGUsXG4gICAgQnlTZWNvbmRPZk1pbnV0ZVJ1bGVNb2R1bGUsXG4gICAgQnlNaWxsaXNlY29uZE9mU2Vjb25kUnVsZU1vZHVsZSxcbiAgXSxcbn07XG5cbmZ1bmN0aW9uIGdldE50aFdlZWtkYXlPZlllYXIoZGF0ZSwgd2Vla2RheSwgbnRoKSB7XG4gIGxldCBiYXNlID0gZGF0ZS5zZXQoJ21vbnRoJywgMSkuc2V0KCdkYXknLCAxKTtcbiAgaWYgKG50aCA8IDApIHtcbiAgICBiYXNlID0gYmFzZS5hZGQoMSwgJ3llYXInKTtcbiAgfVxuICBiYXNlID0gZ2V0TmV4dFdlZWtkYXkoYmFzZSwgd2Vla2RheSk7XG4gIC8vIHdoZW4gbnRoIGlzIG5lZ2F0aXZlLCBhZGRpbmcgaXQgd2lsbCBhY3QgYXMgc3VidHJhY3Rpb25cbiAgcmV0dXJuIG50aCA8IDAgPyBiYXNlLmFkZChudGgsICd3ZWVrJykgOiBiYXNlLmFkZChudGggLSAxLCAnd2VlaycpO1xufVxuXG5mdW5jdGlvbiBnZXRQcmV2aW91c1dlZWtkYXkoZGF0ZSwgd2Vla2RheSkge1xuICBjb25zdCBkaWZmID0gZ2V0RGlmZmVyZW5jZUJldHdlZW5XZWVrZGF5cyhkYXRlLmdldCgnd2Vla2RheScpLCB3ZWVrZGF5KTtcbiAgcmV0dXJuIGRhdGUuc3VidHJhY3QoZGlmZiA9PT0gMCA/IDAgOiA3IC0gZGlmZiwgJ2RheScpO1xufVxuXG5jbGFzcyBSZXZCeURheU9mV2Vla1J1bGUgZXh0ZW5kcyBSZXZSZWN1cnJlbmNlUnVsZUJhc2Uge1xuICBydW4oZGF0ZSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZnJlcXVlbmN5ID09PSAnWUVBUkxZJykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ieU1vbnRoT2ZZZWFyID09PSB1bmRlZmluZWRcbiAgICAgICAgPyB0aGlzLmV4cGFuZFllYXJseShkYXRlKVxuICAgICAgICA6IHRoaXMuZXhwYW5kTW9udGhseShkYXRlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5mcmVxdWVuY3kgPT09ICdNT05USExZJykge1xuICAgICAgcmV0dXJuIHRoaXMuZXhwYW5kTW9udGhseShkYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZXhwYW5kKGRhdGUpO1xuICB9XG4gIGV4cGFuZFllYXJseShkYXRlKSB7XG4gICAgbGV0IG5leHQgPSBnZXRQcmV2V2Vla2RheXNPZlllYXIoZGF0ZSwgdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrKVswXTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGxldCBiYXNlID0gZGF0ZTtcbiAgICAvLyBJZiB3ZSBjYW4ndCBmaW5kIGEgdmFsaWQgZGF0ZSB0aGlzIHllYXIsXG4gICAgLy8gc2VhcmNoIHRoZSBwcmV2aW91cyB5ZWFyLiBPbmx5IHNlYXJjaCB0aGUgcGFzdCAyOCB5ZWFycy5cbiAgICAvLyAodGhlIGNhbGVuZGFyIHJlcGVhdHMgb24gYSAyOCB5ZWFyIGN5Y2xlLCBhY2NvcmRpbmdcbiAgICAvLyB0byB0aGUgaW50ZXJuZXQpLlxuICAgIHdoaWxlICghbmV4dCAmJiBpbmRleCA8IDI4KSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgYmFzZSA9IGJhc2UuZ3JhbnVsYXJpdHkoJ3llYXInKS5zdWJ0cmFjdCgxLCAnbWlsbGlzZWNvbmQnKTtcbiAgICAgIG5leHQgPSBnZXRQcmV2V2Vla2RheXNPZlllYXIoYmFzZSwgdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrKVswXTtcbiAgICB9XG4gICAgaWYgKCFuZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgUmVjdXJyZW5jZVJ1bGVFcnJvcihcbiAgICAgICAgJ1RoZSBieURheU9mV2VlayBydWxlIGFwcGVhcnMgdG8gY29udGFpbiBhbiBpbXBvc3NpYmxlIGNvbWJpbmF0aW9uJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlc3VsdChkYXRlLCBuZXh0KTtcbiAgfVxuICBleHBhbmRNb250aGx5KGRhdGUpIHtcbiAgICBsZXQgbmV4dCA9IGdldFByZXZXZWVrZGF5c09mTW9udGgoZGF0ZSwgdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrKVswXTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGxldCBiYXNlID0gZGF0ZTtcbiAgICAvLyBUT0RPOiBwZXJmb3JtYW5jZSBpbXByb3ZtZW50XG4gICAgLy8gSWYsIGluIHRoZSBmaXJzdCB5ZWFyLCBhIG1hdGNoIGlzbid0IGZvdW5kLCB3ZSBzaG91bGQgYmUgYWJsZSB0b1xuICAgIC8vIGp1bXB0IHRvIHRoZSBwcmV2aW91cyBsZWFwIHllYXIgYW5kIGNoZWNrIHRoYXQuIE9yLCBpZiBhbHJlYWR5IG9uXG4gICAgLy8gYSBsZWFwIHllYXIsIHdlIGNhbiBqdXN0IGVycm9yIGltbWVkaWF0ZWx5LlxuICAgIC8vIElmIHdlIGNhbid0IGZpbmQgYSB2YWxpZCBkYXRlIHRoaXMgbW9udGgsXG4gICAgLy8gc2VhcmNoIHRoZSBwcmV2aW91cyBtb250aC4gT25seSBzZWFyY2ggdGhlIHBhc3QgNCB5ZWFyc1xuICAgIC8vICh0byBhY2NvdW50IGZvciBsZWFwIHllYXIpLlxuICAgIHdoaWxlICghbmV4dCAmJiBpbmRleCA8IDUwKSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgYmFzZSA9IGJhc2UuZ3JhbnVsYXJpdHkoJ21vbnRoJykuc3VidHJhY3QoMSwgJ21pbGxpc2Vjb25kJyk7XG4gICAgICBuZXh0ID0gZ2V0UHJldldlZWtkYXlzT2ZNb250aChiYXNlLCB0aGlzLm9wdGlvbnMuYnlEYXlPZldlZWspWzBdO1xuICAgIH1cbiAgICBpZiAoIW5leHQpIHtcbiAgICAgIHRocm93IG5ldyBSZWN1cnJlbmNlUnVsZUVycm9yKFxuICAgICAgICAnVGhlIGJ5RGF5T2ZXZWVrIHJ1bGUgYXBwZWFycyB0byBjb250YWluIGFuIGltcG9zc2libGUgY29tYmluYXRpb24nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0KGRhdGUsIG5leHQpO1xuICB9XG4gIGV4cGFuZChkYXRlKSB7XG4gICAgY29uc3QgbmV4dCA9IHRoaXMub3B0aW9ucy5ieURheU9mV2Vla1xuICAgICAgLm1hcCh3ZWVrZGF5ID0+IGdldFByZXZpb3VzV2Vla2RheShkYXRlLCB3ZWVrZGF5KSlcbiAgICAgIC5zb3J0KGRhdGVUaW1lU29ydENvbXBhcmVyKVxuICAgICAgLnBvcCgpO1xuICAgIHJldHVybiB0aGlzLnJlc3VsdChkYXRlLCBuZXh0KTtcbiAgfVxuICByZXN1bHQoZGF0ZSwgbmV4dCkge1xuICAgIGlmIChuZXh0LmlzRXF1YWwoZGF0ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgVmFsaWREYXRlVGltZShkYXRlKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShuZXcgSW52YWxpZERhdGVUaW1lKG5leHQuZW5kR3JhbnVsYXJpdHkoJ2RheScpKSk7XG4gIH1cbn1cbi8qKiBGb3IgZWFjaCBieURheU9mV2VlayBlbnRyeSwgZmluZCB0aGUgcHJldmlvdXMgRGF0ZVRpbWUgKi9cbmZ1bmN0aW9uIGdldFByZXZXZWVrZGF5c09mWWVhcihkYXRlLCBieURheU9mV2Vlaykge1xuICBjb25zdCBub3JtYWxpemVkTnRoV2Vla2RheXNPZlllYXIgPSBieURheU9mV2Vla1xuICAgIC5maWx0ZXIoZW50cnkgPT4gQXJyYXkuaXNBcnJheShlbnRyeSkpXG4gICAgLm1hcChlbnRyeSA9PiBnZXROdGhXZWVrZGF5T2ZZZWFyKGRhdGUsIC4uLmVudHJ5KSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWROZXh0V2Vla2RheXMgPSBieURheU9mV2Vla1xuICAgIC5maWx0ZXIoZW50cnkgPT4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJylcbiAgICAubWFwKHdlZWtkYXkgPT4gZ2V0UHJldmlvdXNXZWVrZGF5KGRhdGUsIHdlZWtkYXkpKVxuICAgIC5maWx0ZXIoZW50cnkgPT4gZW50cnkuZ2V0KCd5ZWFyJykgPT09IGRhdGUuZ2V0KCd5ZWFyJykpO1xuICByZXR1cm4gdW5pcURhdGVUaW1lcyhbLi4ubm9ybWFsaXplZE50aFdlZWtkYXlzT2ZZZWFyLCAuLi5ub3JtYWxpemVkTmV4dFdlZWtkYXlzXSlcbiAgICAuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmlzQmVmb3JlT3JFcXVhbChkYXRlKSlcbiAgICAuc29ydChkYXRlVGltZVNvcnRDb21wYXJlcilcbiAgICAucmV2ZXJzZSgpO1xufVxuLyoqIEZvciBlYWNoIGJ5RGF5T2ZXZWVrIGVudHJ5LCBmaW5kIHRoZSBwcmV2aW91cyBEYXRlVGltZSAqL1xuZnVuY3Rpb24gZ2V0UHJldldlZWtkYXlzT2ZNb250aChkYXRlLCBieURheU9mV2Vlaykge1xuICBjb25zdCBub3JtYWxpemVkTnRoV2Vla2RheXNPZk1vbnRoID0gYnlEYXlPZldlZWtcbiAgICAuZmlsdGVyKGVudHJ5ID0+IEFycmF5LmlzQXJyYXkoZW50cnkpKVxuICAgIC5tYXAoZW50cnkgPT4gZ2V0TnRoV2Vla2RheU9mTW9udGgoZGF0ZSwgLi4uZW50cnkpKTtcbiAgY29uc3Qgbm9ybWFsaXplZE5leHRXZWVrZGF5cyA9IGJ5RGF5T2ZXZWVrXG4gICAgLmZpbHRlcihlbnRyeSA9PiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKVxuICAgIC5tYXAod2Vla2RheSA9PiBnZXRQcmV2aW91c1dlZWtkYXkoZGF0ZSwgd2Vla2RheSkpXG4gICAgLmZpbHRlcihcbiAgICAgIGVudHJ5ID0+IGVudHJ5LmdldCgneWVhcicpID09PSBkYXRlLmdldCgneWVhcicpICYmIGVudHJ5LmdldCgnbW9udGgnKSA9PT0gZGF0ZS5nZXQoJ21vbnRoJyksXG4gICAgKTtcbiAgcmV0dXJuIHVuaXFEYXRlVGltZXMoWy4uLm5vcm1hbGl6ZWROdGhXZWVrZGF5c09mTW9udGgsIC4uLm5vcm1hbGl6ZWROZXh0V2Vla2RheXNdKVxuICAgIC5maWx0ZXIoZW50cnkgPT4gZW50cnkuaXNCZWZvcmVPckVxdWFsKGRhdGUpKVxuICAgIC5zb3J0KGRhdGVUaW1lU29ydENvbXBhcmVyKVxuICAgIC5yZXZlcnNlKCk7XG59XG5cbmNsYXNzIEJ5RGF5T2ZXZWVrUnVsZSBleHRlbmRzIFJlY3VycmVuY2VSdWxlQmFzZSB7XG4gIHJ1bihkYXRlKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5mcmVxdWVuY3kgPT09ICdZRUFSTFknKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJ5TW9udGhPZlllYXIgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IHRoaXMuZXhwYW5kWWVhcmx5KGRhdGUpXG4gICAgICAgIDogdGhpcy5leHBhbmRNb250aGx5KGRhdGUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmZyZXF1ZW5jeSA9PT0gJ01PTlRITFknKSB7XG4gICAgICByZXR1cm4gdGhpcy5leHBhbmRNb250aGx5KGRhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5leHBhbmQoZGF0ZSk7XG4gIH1cbiAgZXhwYW5kWWVhcmx5KGRhdGUpIHtcbiAgICBsZXQgbmV4dCA9IGdldE5leHRXZWVrZGF5c09mWWVhcihkYXRlLCB0aGlzLm9wdGlvbnMuYnlEYXlPZldlZWspWzBdO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgbGV0IGJhc2UgPSBkYXRlO1xuICAgIC8vIElmIHdlIGNhbid0IGZpbmQgYSB2YWxpZCBkYXRlIHRoaXMgeWVhcixcbiAgICAvLyBzZWFyY2ggbmV4dCB5ZWFyLiBPbmx5IHNlYXJjaCB0aGUgbmV4dCAyOCB5ZWFycy5cbiAgICAvLyAodGhlIGNhbGVuZGFyIHJlcGVhdHMgb24gYSAyOCB5ZWFyIGN5Y2xlLCBhY2NvcmRpbmdcbiAgICAvLyB0byB0aGUgaW50ZXJuZXQpLlxuICAgIHdoaWxlICghbmV4dCAmJiBpbmRleCA8IDI4KSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgYmFzZSA9IGJhc2UuZ3JhbnVsYXJpdHkoJ3llYXInKS5hZGQoMSwgJ3llYXInKTtcbiAgICAgIG5leHQgPSBnZXROZXh0V2Vla2RheXNPZlllYXIoYmFzZSwgdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrKVswXTtcbiAgICB9XG4gICAgaWYgKCFuZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgUmVjdXJyZW5jZVJ1bGVFcnJvcihcbiAgICAgICAgJ1RoZSBieURheU9mV2VlayBydWxlIGFwcGVhcnMgdG8gY29udGFpbiBhbiBpbXBvc3NpYmxlIGNvbWJpbmF0aW9uJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlc3VsdChkYXRlLCBuZXh0KTtcbiAgfVxuICBleHBhbmRNb250aGx5KGRhdGUpIHtcbiAgICBsZXQgbmV4dCA9IGdldE5leHRXZWVrZGF5c09mTW9udGgoZGF0ZSwgdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrKVswXTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGxldCBiYXNlID0gZGF0ZTtcbiAgICAvLyBUT0RPOiBwZXJmb3JtYW5jZSBpbXByb3ZtZW50XG4gICAgLy8gSWYsIGluIHRoZSBmaXJzdCB5ZWFyLCBhIG1hdGNoIGlzbid0IGZvdW5kLCB3ZSBzaG91bGQgYmUgYWJsZSB0b1xuICAgIC8vIGp1bXB0IHRvIHRoZSBuZXh0IGxlYXAgeWVhciBhbmQgY2hlY2sgdGhhdC4gT3IsIGlmIGFscmVhZHkgb25cbiAgICAvLyBhIGxlYXAgeWVhciwgd2UgY2FuIGp1c3QgZXJyb3IgaW1tZWRpYXRlbHkuXG4gICAgLy8gSWYgd2UgY2FuJ3QgZmluZCBhIHZhbGlkIGRhdGUgdGhpcyBtb250aCxcbiAgICAvLyBzZWFyY2ggdGhlIG5leHQgbW9udGguIE9ubHkgc2VhcmNoIHRoZSBuZXh0IDQgeWVhcnNcbiAgICAvLyAodG8gYWNjb3VudCBmb3IgbGVhcCB5ZWFyKS5cbiAgICB3aGlsZSAoIW5leHQgJiYgaW5kZXggPCA1MCkge1xuICAgICAgaW5kZXgrKztcbiAgICAgIGJhc2UgPSBiYXNlLmdyYW51bGFyaXR5KCdtb250aCcpLmFkZCgxLCAnbW9udGgnKTtcbiAgICAgIG5leHQgPSBnZXROZXh0V2Vla2RheXNPZk1vbnRoKGJhc2UsIHRoaXMub3B0aW9ucy5ieURheU9mV2VlaylbMF07XG4gICAgfVxuICAgIGlmICghbmV4dCkge1xuICAgICAgdGhyb3cgbmV3IFJlY3VycmVuY2VSdWxlRXJyb3IoXG4gICAgICAgICdUaGUgYnlEYXlPZldlZWsgcnVsZSBhcHBlYXJzIHRvIGNvbnRhaW4gYW4gaW1wb3NzaWJsZSBjb21iaW5hdGlvbicsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZXN1bHQoZGF0ZSwgbmV4dCk7XG4gIH1cbiAgZXhwYW5kKGRhdGUpIHtcbiAgICBjb25zdCBuZXh0ID0gdGhpcy5vcHRpb25zLmJ5RGF5T2ZXZWVrXG4gICAgICAubWFwKHdlZWtkYXkgPT4gZ2V0TmV4dFdlZWtkYXkoZGF0ZSwgd2Vla2RheSkpXG4gICAgICAuc29ydChkYXRlVGltZVNvcnRDb21wYXJlcilbMF07XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0KGRhdGUsIG5leHQpO1xuICB9XG4gIHJlc3VsdChkYXRlLCBuZXh0KSB7XG4gICAgaWYgKG5leHQuaXNFcXVhbChkYXRlKSkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBWYWxpZERhdGVUaW1lKGRhdGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBJbnZhbGlkRGF0ZVRpbWUobmV4dC5ncmFudWxhcml0eSgnZGF5JykpKTtcbiAgfVxufVxuLyoqIEZvciBlYWNoIGJ5RGF5T2ZXZWVrIGVudHJ5LCBmaW5kIHRoZSBuZXh0IERhdGVUaW1lICovXG5mdW5jdGlvbiBnZXROZXh0V2Vla2RheXNPZlllYXIoZGF0ZSwgYnlEYXlPZldlZWspIHtcbiAgY29uc3Qgbm9ybWFsaXplZE50aFdlZWtkYXlzT2ZZZWFyID0gYnlEYXlPZldlZWtcbiAgICAuZmlsdGVyKGVudHJ5ID0+IEFycmF5LmlzQXJyYXkoZW50cnkpKVxuICAgIC5tYXAoZW50cnkgPT4gZ2V0TnRoV2Vla2RheU9mWWVhcihkYXRlLCAuLi5lbnRyeSkpO1xuICBjb25zdCBub3JtYWxpemVkTmV4dFdlZWtkYXlzID0gYnlEYXlPZldlZWtcbiAgICAuZmlsdGVyKGVudHJ5ID0+IHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycpXG4gICAgLm1hcCh3ZWVrZGF5ID0+IGdldE5leHRXZWVrZGF5KGRhdGUsIHdlZWtkYXkpKVxuICAgIC5maWx0ZXIoZW50cnkgPT4gZW50cnkuZ2V0KCd5ZWFyJykgPT09IGRhdGUuZ2V0KCd5ZWFyJykpO1xuICByZXR1cm4gdW5pcURhdGVUaW1lcyhbLi4ubm9ybWFsaXplZE50aFdlZWtkYXlzT2ZZZWFyLCAuLi5ub3JtYWxpemVkTmV4dFdlZWtkYXlzXSlcbiAgICAuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmlzQWZ0ZXJPckVxdWFsKGRhdGUpKVxuICAgIC5zb3J0KGRhdGVUaW1lU29ydENvbXBhcmVyKTtcbn1cbi8qKiBGb3IgZWFjaCBieURheU9mV2VlayBlbnRyeSwgZmluZCB0aGUgbmV4dCBEYXRlVGltZSAqL1xuZnVuY3Rpb24gZ2V0TmV4dFdlZWtkYXlzT2ZNb250aChkYXRlLCBieURheU9mV2Vlaykge1xuICBjb25zdCBub3JtYWxpemVkTnRoV2Vla2RheXNPZk1vbnRoID0gYnlEYXlPZldlZWtcbiAgICAuZmlsdGVyKGVudHJ5ID0+IEFycmF5LmlzQXJyYXkoZW50cnkpKVxuICAgIC5tYXAoZW50cnkgPT4gZ2V0TnRoV2Vla2RheU9mTW9udGgoZGF0ZSwgLi4uZW50cnkpKTtcbiAgY29uc3Qgbm9ybWFsaXplZE5leHRXZWVrZGF5cyA9IGJ5RGF5T2ZXZWVrXG4gICAgLmZpbHRlcihlbnRyeSA9PiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKVxuICAgIC5tYXAod2Vla2RheSA9PiBnZXROZXh0V2Vla2RheShkYXRlLCB3ZWVrZGF5KSlcbiAgICAuZmlsdGVyKFxuICAgICAgZW50cnkgPT4gZW50cnkuZ2V0KCd5ZWFyJykgPT09IGRhdGUuZ2V0KCd5ZWFyJykgJiYgZW50cnkuZ2V0KCdtb250aCcpID09PSBkYXRlLmdldCgnbW9udGgnKSxcbiAgICApO1xuICByZXR1cm4gdW5pcURhdGVUaW1lcyhbLi4ubm9ybWFsaXplZE50aFdlZWtkYXlzT2ZNb250aCwgLi4ubm9ybWFsaXplZE5leHRXZWVrZGF5c10pXG4gICAgLmZpbHRlcihlbnRyeSA9PiBlbnRyeS5pc0FmdGVyT3JFcXVhbChkYXRlKSlcbiAgICAuc29ydChkYXRlVGltZVNvcnRDb21wYXJlcik7XG59XG5cbmNvbnN0IEJ5RGF5T2ZXZWVrUnVsZU1vZHVsZSA9IHtcbiAgbmFtZTogJ0J5RGF5T2ZXZWVrJyxcbiAgZ2V0OiBwcm9jZXNzb3IgPT4ge1xuICAgIGlmIChwcm9jZXNzb3Iub3B0aW9ucy5ieURheU9mV2VlayA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcbiAgICBpZiAocHJvY2Vzc29yLnJldmVyc2UpIHJldHVybiBuZXcgUmV2QnlEYXlPZldlZWtSdWxlKHByb2Nlc3Nvcik7XG4gICAgcmV0dXJuIG5ldyBCeURheU9mV2Vla1J1bGUocHJvY2Vzc29yKTtcbiAgfSxcbiAgbm9ybWFsaXplT3B0aW9uczogKG9wdGlvbnMsIG5vcm0pID0+IHtcbiAgICBpZiAob3B0aW9ucy5ieURheU9mV2VlayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieURheU9mV2VlaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bGVPcHRpb25FcnJvcignXCJieURheU9mV2Vla1wiIGV4cGVjdHMgYSBub24tZW1wdHkgYXJyYXknKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGludmFsaWRXZWVkYXkgPSBvcHRpb25zLmJ5RGF5T2ZXZWVrLmZpbmQoZGF5ID0+XG4gICAgICAgIEFycmF5LmlzQXJyYXkoZGF5KVxuICAgICAgICAgID8gIURhdGVBZGFwdGVyLldFRUtEQVlTLmluY2x1ZGVzKGRheVswXSlcbiAgICAgICAgICA6ICFEYXRlQWRhcHRlci5XRUVLREFZUy5pbmNsdWRlcyhkYXkpLFxuICAgICAgKTtcbiAgICAgIGlmIChpbnZhbGlkV2VlZGF5KSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoXG4gICAgICAgICAgYFwiYnlEYXlPZldlZWtcIiBleHBlY3RzIHdlZWRheXMgaW4gdGhlIGZvcm0gYCArXG4gICAgICAgICAgICBgJHtKU09OLnN0cmluZ2lmeShEYXRlQWRhcHRlci5XRUVLREFZUyl9IGJ1dCBcIiR7aW52YWxpZFdlZWRheX1cIiB3YXMgcHJvdmlkZWRgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAhWydZRUFSTFknLCAnTU9OVEhMWSddLmluY2x1ZGVzKG9wdGlvbnMuZnJlcXVlbmN5KSAmJlxuICAgICAgICBvcHRpb25zLmJ5RGF5T2ZXZWVrLnNvbWUod2Vla2RheSA9PiBBcnJheS5pc0FycmF5KHdlZWtkYXkpKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoXG4gICAgICAgICAgJ1wiYnlEYXlPZldlZWtcIiBjYW4gb25seSBpbmNsdWRlIGEgbnVtZXJpYyB2YWx1ZSAoaS5lLiBgW3N0cmluZywgbnVtYmVyXWApIHdoZW4gdGhlIFwiZnJlcXVlbmN5XCIgaXMgJyArXG4gICAgICAgICAgICAnZWl0aGVyIFwiTU9OVEhMWVwiIG9yIFwiWUVBUkxZXCInLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBvcHRpb25zLmZyZXF1ZW5jeSA9PT0gJ01PTlRITFknICYmXG4gICAgICAgIG9wdGlvbnMuYnlEYXlPZldlZWsuc29tZShcbiAgICAgICAgICB3ZWVrZGF5ID0+XG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHdlZWtkYXkpICYmICh3ZWVrZGF5WzFdIDwgLTMxIHx8IHdlZWtkYXlbMV0gPT09IDAgfHwgd2Vla2RheVsxXSA+IDMxKSxcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoXG4gICAgICAgICAgJ3doZW4gXCJmcmVxdWVuY3lcIiBpcyBcIk1PTlRITFlcIiwgZWFjaCBcImJ5RGF5T2ZXZWVrXCIgY2FuIG9wdGlvbmFsbHkgb25seScgK1xuICAgICAgICAgICAgJyBoYXZlIGEgbnVtZXJpYyB2YWx1ZSA+PSAtMzEgYW5kIDw9IDMxIGFuZCAhPT0gMCcsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIG9wdGlvbnMuZnJlcXVlbmN5ID09PSAnWUVBUkxZJyAmJlxuICAgICAgICBvcHRpb25zLmJ5RGF5T2ZXZWVrLnNvbWUoXG4gICAgICAgICAgd2Vla2RheSA9PlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh3ZWVrZGF5KSAmJiAod2Vla2RheVsxXSA8IC0zNjYgfHwgd2Vla2RheVsxXSA9PT0gMCB8fCB3ZWVrZGF5WzFdID4gMzY2KSxcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoXG4gICAgICAgICAgJ3doZW4gXCJmcmVxdWVuY3lcIiBpcyBcIllFQVJMWVwiLCBlYWNoIFwiYnlEYXlPZldlZWtcIiBjYW4gb3B0aW9uYWxseSBvbmx5JyArXG4gICAgICAgICAgICAnIGhhdmUgYSBudW1lcmljIHZhbHVlID49IC0zNjYgYW5kIDw9IDM2NiBhbmQgIT09IDAnLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbm9ybS5ieURheU9mV2VlayA9IG9wdGlvbnMuYnlEYXlPZldlZWs7XG4gICAgfSBlbHNlIGlmICghcnVsZU9wdGlvbkZpbGxlZChvcHRpb25zLmJ5RGF5T2ZNb250aCkgJiYgb3B0aW9ucy5mcmVxdWVuY3kgPT09ICdXRUVLTFknKSB7XG4gICAgICBub3JtLmJ5RGF5T2ZXZWVrID0gW25vcm0uc3RhcnQuZ2V0KCd3ZWVrZGF5JyldO1xuICAgIH1cbiAgfSxcbiAgZGVwczogKCkgPT4gW1xuICAgIEZyZXF1ZW5jeVJ1bGVNb2R1bGUsXG4gICAgQnlEYXlPZldlZWtSdWxlTW9kdWxlLFxuICAgIEJ5SG91ck9mRGF5UnVsZU1vZHVsZSxcbiAgICBCeU1pbnV0ZU9mSG91clJ1bGVNb2R1bGUsXG4gICAgQnlTZWNvbmRPZk1pbnV0ZVJ1bGVNb2R1bGUsXG4gICAgQnlNaWxsaXNlY29uZE9mU2Vjb25kUnVsZU1vZHVsZSxcbiAgXSxcbn07XG5cbmNsYXNzIFJldkJ5TW9udGhPZlllYXJSdWxlIGV4dGVuZHMgUmV2UmVjdXJyZW5jZVJ1bGVCYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLm9wdGlvbiA9IHRoaXMucHJvY2Vzc29yLm9wdGlvbnMuYnlNb250aE9mWWVhci5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuICBydW4oZGF0ZSkge1xuICAgIGNvbnN0IGN1cnJlbnRNb250aCA9IGRhdGUuZ2V0KCdtb250aCcpO1xuICAgIGZvciAoY29uc3QgbW9udGggb2YgdGhpcy5vcHRpb24pIHtcbiAgICAgIGlmIChjdXJyZW50TW9udGggPCBtb250aCkgY29udGludWU7XG4gICAgICBpZiAoY3VycmVudE1vbnRoID09PSBtb250aCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IFZhbGlkRGF0ZVRpbWUoZGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKFxuICAgICAgICBuZXcgSW52YWxpZERhdGVUaW1lKGRhdGUuZW5kR3JhbnVsYXJpdHkoJ3llYXInKS5zZXQoJ21vbnRoJywgbW9udGgpKSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlRGF0ZShcbiAgICAgIG5ldyBJbnZhbGlkRGF0ZVRpbWUoXG4gICAgICAgIGRhdGVcbiAgICAgICAgICAuZW5kR3JhbnVsYXJpdHkoJ3llYXInKVxuICAgICAgICAgIC5zdWJ0cmFjdCgxLCAneWVhcicpXG4gICAgICAgICAgLnNldCgnbW9udGgnLCB0aGlzLm9wdGlvblswXSksXG4gICAgICApLFxuICAgICk7XG4gIH1cbn1cblxuY2xhc3MgQnlNb250aE9mWWVhclJ1bGUgZXh0ZW5kcyBSZWN1cnJlbmNlUnVsZUJhc2Uge1xuICBydW4oZGF0ZSkge1xuICAgIGNvbnN0IGN1cnJlbnRNb250aCA9IGRhdGUuZ2V0KCdtb250aCcpO1xuICAgIGZvciAoY29uc3QgbW9udGggb2YgdGhpcy5vcHRpb25zLmJ5TW9udGhPZlllYXIpIHtcbiAgICAgIGlmIChjdXJyZW50TW9udGggPiBtb250aCkgY29udGludWU7XG4gICAgICBpZiAoY3VycmVudE1vbnRoID09PSBtb250aCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZURhdGUobmV3IFZhbGlkRGF0ZVRpbWUoZGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKG5ldyBJbnZhbGlkRGF0ZVRpbWUoZGF0ZS5ncmFudWxhcml0eSgneWVhcicpLnNldCgnbW9udGgnLCBtb250aCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVEYXRlKFxuICAgICAgbmV3IEludmFsaWREYXRlVGltZShcbiAgICAgICAgZGF0ZVxuICAgICAgICAgIC5ncmFudWxhcml0eSgneWVhcicpXG4gICAgICAgICAgLmFkZCgxLCAneWVhcicpXG4gICAgICAgICAgLnNldCgnbW9udGgnLCB0aGlzLm9wdGlvbnMuYnlNb250aE9mWWVhclswXSksXG4gICAgICApLFxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgQnlNb250aE9mWWVhclJ1bGVNb2R1bGUgPSB7XG4gIG5hbWU6ICdCeU1vbnRoT2ZZZWFyJyxcbiAgZ2V0OiBwcm9jZXNzb3IgPT4ge1xuICAgIGlmIChwcm9jZXNzb3Iub3B0aW9ucy5ieU1vbnRoT2ZZZWFyID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xuICAgIGlmIChwcm9jZXNzb3IucmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIG5ldyBSZXZCeU1vbnRoT2ZZZWFyUnVsZShwcm9jZXNzb3IpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEJ5TW9udGhPZlllYXJSdWxlKHByb2Nlc3Nvcik7XG4gIH0sXG4gIG5vcm1hbGl6ZU9wdGlvbnM6IChvcHRpb25zLCBub3JtKSA9PiB7XG4gICAgaWYgKG9wdGlvbnMuYnlNb250aE9mWWVhciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieU1vbnRoT2ZZZWFyKSkge1xuICAgICAgICB0aHJvdyBuZXcgUnVsZU9wdGlvbkVycm9yKCdcImJ5TW9udGhPZlllYXJcIiBleHBlY3RzIGEgbm9uLWVtcHR5IGFycmF5Jyk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5ieU1vbnRoT2ZZZWFyLnNvbWUobnVtID0+IG51bSA8IDEgfHwgbnVtID4gMTIpKSB7XG4gICAgICAgIHRocm93IG5ldyBSdWxlT3B0aW9uRXJyb3IoJ1wiYnlNb250aE9mWWVhclwiIHZhbHVlcyBtdXN0IGJlIGBudW0gPj0gMSAmJiBudW0gPj0gMTJgJyk7XG4gICAgICB9XG4gICAgICBub3JtLmJ5TW9udGhPZlllYXIgPSBvcHRpb25zLmJ5TW9udGhPZlllYXIuc2xpY2UoKTtcbiAgICAgIG5vcm0uYnlNb250aE9mWWVhci5zb3J0KG51bWJlclNvcnRDb21wYXJlcik7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICEoXG4gICAgICAgIHJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieURheU9mTW9udGgpIHx8XG4gICAgICAgIHJ1bGVPcHRpb25GaWxsZWQob3B0aW9ucy5ieURheU9mV2VlaykgfHxcbiAgICAgICAgcnVsZU9wdGlvbkZpbGxlZChvcHRpb25zLmJ5RGF5T2ZZZWFyKVxuICAgICAgKSAmJlxuICAgICAgb3B0aW9ucy5mcmVxdWVuY3kgPT09ICdZRUFSTFknXG4gICAgKSB7XG4gICAgICBub3JtLmJ5TW9udGhPZlllYXIgPSBbbm9ybS5zdGFydC5nZXQoJ21vbnRoJyldO1xuICAgIH1cbiAgfSxcbiAgZGVwczogKCkgPT4gW1xuICAgIEZyZXF1ZW5jeVJ1bGVNb2R1bGUsXG4gICAgQnlNb250aE9mWWVhclJ1bGVNb2R1bGUsXG4gICAgQnlEYXlPZk1vbnRoUnVsZU1vZHVsZSxcbiAgICBCeUhvdXJPZkRheVJ1bGVNb2R1bGUsXG4gICAgQnlNaW51dGVPZkhvdXJSdWxlTW9kdWxlLFxuICAgIEJ5U2Vjb25kT2ZNaW51dGVSdWxlTW9kdWxlLFxuICAgIEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGVNb2R1bGUsXG4gIF0sXG59O1xuXG5jb25zdCBJQ0FMX1JVTEVTID0gW1xuICBGcmVxdWVuY3lSdWxlTW9kdWxlLFxuICBCeU1vbnRoT2ZZZWFyUnVsZU1vZHVsZSxcbiAgQnlEYXlPZk1vbnRoUnVsZU1vZHVsZSxcbiAgQnlEYXlPZldlZWtSdWxlTW9kdWxlLFxuICBCeUhvdXJPZkRheVJ1bGVNb2R1bGUsXG4gIEJ5TWludXRlT2ZIb3VyUnVsZU1vZHVsZSxcbiAgQnlTZWNvbmRPZk1pbnV0ZVJ1bGVNb2R1bGUsXG4gIEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGVNb2R1bGUsXG5dO1xuXG5leHBvcnQge1xuICBCeURheU9mTW9udGhSdWxlLFxuICBCeURheU9mTW9udGhSdWxlTW9kdWxlLFxuICBCeURheU9mV2Vla1J1bGUsXG4gIEJ5RGF5T2ZXZWVrUnVsZU1vZHVsZSxcbiAgQnlIb3VyT2ZEYXlSdWxlLFxuICBCeUhvdXJPZkRheVJ1bGVNb2R1bGUsXG4gIEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGUsXG4gIEJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGVNb2R1bGUsXG4gIEJ5TWludXRlT2ZIb3VyUnVsZSxcbiAgQnlNaW51dGVPZkhvdXJSdWxlTW9kdWxlLFxuICBCeU1vbnRoT2ZZZWFyUnVsZSxcbiAgQnlNb250aE9mWWVhclJ1bGVNb2R1bGUsXG4gIEJ5U2Vjb25kT2ZNaW51dGVSdWxlLFxuICBCeVNlY29uZE9mTWludXRlUnVsZU1vZHVsZSxcbiAgRnJlcXVlbmN5UnVsZSxcbiAgRnJlcXVlbmN5UnVsZU1vZHVsZSxcbiAgSUNBTF9SVUxFUyxcbiAgUmV2QnlEYXlPZk1vbnRoUnVsZSxcbiAgUmV2QnlEYXlPZldlZWtSdWxlLFxuICBSZXZCeUhvdXJPZkRheVJ1bGUsXG4gIFJldkJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGUsXG4gIFJldkJ5TWludXRlT2ZIb3VyUnVsZSxcbiAgUmV2QnlNb250aE9mWWVhclJ1bGUsXG4gIFJldkJ5U2Vjb25kT2ZNaW51dGVSdWxlLFxuICBSZXZGcmVxdWVuY3lSdWxlLFxuICBnZXRQcmV2V2Vla2RheXNPZk1vbnRoLFxuICBnZXRQcmV2V2Vla2RheXNPZlllYXIsXG59O1xuIiwiaW1wb3J0IHsgRGF0ZUFkYXB0ZXJCYXNlLCBJbnZhbGlkRGF0ZUFkYXB0ZXJFcnJvciwgQXJndW1lbnRFcnJvciB9IGZyb20gJ0Byc2NoZWR1bGUvY29yZSc7XG5cbmNsYXNzIFN0YW5kYXJkRGF0ZUFkYXB0ZXIgZXh0ZW5kcyBEYXRlQWRhcHRlckJhc2Uge1xuICBjb25zdHJ1Y3RvcihkYXRlLCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgIGlmICghWydVVEMnLCBudWxsLCB1bmRlZmluZWRdLmluY2x1ZGVzKG9wdGlvbnMudGltZXpvbmUpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVBZGFwdGVyRXJyb3IoXG4gICAgICAgIGBTdGFuZGFyZERhdGVBZGFwdGVyIG9ubHkgc3VwcG9ydHMgXCJVVENcIiBhbmQgYCArXG4gICAgICAgICAgYGxvY2FsIHRpbWUgem9uZXMgYnV0IFwiJHtvcHRpb25zLnRpbWV6b25lfVwiIHdhcyBwcm92aWRlZC5gLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5fZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIHRoaXMudGltZXpvbmUgPSBvcHRpb25zLnRpbWV6b25lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnRpbWV6b25lIDogbnVsbDtcbiAgICB0aGlzLmFzc2VydElzVmFsaWQoKTtcbiAgfVxuICBzdGF0aWMgaXNEYXRlKG9iamVjdCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuICB9XG4gIHN0YXRpYyBmcm9tRGF0ZShkYXRlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBTdGFuZGFyZERhdGVBZGFwdGVyKGRhdGUsIG9wdGlvbnMpO1xuICB9XG4gIHN0YXRpYyBmcm9tSlNPTihqc29uKSB7XG4gICAgY29uc3QgYXJncyA9IFtcbiAgICAgIGpzb24ueWVhcixcbiAgICAgIGpzb24ubW9udGggLSAxLFxuICAgICAganNvbi5kYXksXG4gICAgICBqc29uLmhvdXIsXG4gICAgICBqc29uLm1pbnV0ZSxcbiAgICAgIGpzb24uc2Vjb25kLFxuICAgICAganNvbi5taWxsaXNlY29uZCxcbiAgICBdO1xuICAgIHN3aXRjaCAoanNvbi50aW1lem9uZSkge1xuICAgICAgY2FzZSAnVVRDJzoge1xuICAgICAgICByZXR1cm4gbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIobmV3IERhdGUoRGF0ZS5VVEMoLi4uYXJncykpLCB7XG4gICAgICAgICAgdGltZXpvbmU6ICdVVEMnLFxuICAgICAgICAgIGR1cmF0aW9uOiBqc29uLmR1cmF0aW9uLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgbnVsbDoge1xuICAgICAgICByZXR1cm4gbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIobmV3IERhdGUoLi4uYXJncyksIHtcbiAgICAgICAgICB0aW1lem9uZTogbnVsbCxcbiAgICAgICAgICBkdXJhdGlvbjoganNvbi5kdXJhdGlvbixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZERhdGVBZGFwdGVyRXJyb3IoXG4gICAgICAgICAgJ1RoZSBgU3RhbmRhcmREYXRlQWRhcHRlcmAgb25seSBzdXBwb3J0cyBkYXRldGltZXMgaW4gJyArXG4gICAgICAgICAgICBgVVRDIG9yIExPQ0FMIChudWxsKSB0aW1lLiBZb3UgcHJvdmlkZWQgYSBKU09OIG9iamVjdCBgICtcbiAgICAgICAgICAgIGB3aXRoIHRpbWV6b25lIFwiJHtqc29uLnRpbWV6b25lfVwiLmAsXG4gICAgICAgICk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBmcm9tRGF0ZVRpbWUoZGF0ZXRpbWUpIHtcbiAgICBjb25zdCBkYXRlID0gU3RhbmRhcmREYXRlQWRhcHRlci5mcm9tSlNPTihkYXRldGltZS50b0pTT04oKSk7XG4gICAgZGF0ZS5nZW5lcmF0b3JzLnB1c2goLi4uZGF0ZXRpbWUuZ2VuZXJhdG9ycyk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgZ2V0IGRhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuX2RhdGUpO1xuICB9XG4gIGdldCBlbmQoKSB7XG4gICAgaWYgKCF0aGlzLmR1cmF0aW9uKSByZXR1cm47XG4gICAgaWYgKHRoaXMuX2VuZCkgcmV0dXJuIHRoaXMuX2VuZDtcbiAgICB0aGlzLl9lbmQgPSBTdGFuZGFyZERhdGVBZGFwdGVyLmZyb21EYXRlVGltZShcbiAgICAgIHRoaXMudG9EYXRlVGltZSgpLmFkZCh0aGlzLmR1cmF0aW9uLCAnbWlsbGlzZWNvbmQnKSxcbiAgICApLmRhdGU7XG4gICAgcmV0dXJuIHRoaXMuX2VuZDtcbiAgfVxuICBzZXQocHJvcCwgdmFsdWUpIHtcbiAgICBpZiAocHJvcCA9PT0gJ3RpbWV6b25lJykge1xuICAgICAgaWYgKHRoaXMudGltZXpvbmUgPT09IHZhbHVlKSByZXR1cm4gdGhpcztcbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIodGhpcy5fZGF0ZSwge1xuICAgICAgICAgIHRpbWV6b25lOiB2YWx1ZSxcbiAgICAgICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbixcbiAgICAgICAgICBnZW5lcmF0b3JzOiB0aGlzLmdlbmVyYXRvcnMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ2R1cmF0aW9uJykge1xuICAgICAgaWYgKHRoaXMuZHVyYXRpb24gPT09IHZhbHVlKSByZXR1cm4gdGhpcztcbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IFN0YW5kYXJkRGF0ZUFkYXB0ZXIodGhpcy5fZGF0ZSwge1xuICAgICAgICAgIHRpbWV6b25lOiB0aGlzLnRpbWV6b25lLFxuICAgICAgICAgIGR1cmF0aW9uOiB2YWx1ZSxcbiAgICAgICAgICBnZW5lcmF0b3JzOiB0aGlzLmdlbmVyYXRvcnMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcihgVW5rbm93biBwcm9wIFwiJHtwcm9wfVwiIGZvciBTdGFuZGFyZERhdGVBZGFwdGVyI3NldCgpYCk7XG4gIH1cbiAgdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0ZS52YWx1ZU9mKCk7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIGxldCBqc29uO1xuICAgIGlmICh0aGlzLnRpbWV6b25lID09PSAnVVRDJykge1xuICAgICAganNvbiA9IHtcbiAgICAgICAgdGltZXpvbmU6IHRoaXMudGltZXpvbmUsXG4gICAgICAgIHllYXI6IHRoaXMuX2RhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgbW9udGg6IHRoaXMuX2RhdGUuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgICAgIGRheTogdGhpcy5fZGF0ZS5nZXRVVENEYXRlKCksXG4gICAgICAgIGhvdXI6IHRoaXMuX2RhdGUuZ2V0VVRDSG91cnMoKSxcbiAgICAgICAgbWludXRlOiB0aGlzLl9kYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgICAgc2Vjb25kOiB0aGlzLl9kYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgICAgbWlsbGlzZWNvbmQ6IHRoaXMuX2RhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCksXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBqc29uID0ge1xuICAgICAgICB0aW1lem9uZTogdGhpcy50aW1lem9uZSxcbiAgICAgICAgeWVhcjogdGhpcy5fZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICBtb250aDogdGhpcy5fZGF0ZS5nZXRNb250aCgpICsgMSxcbiAgICAgICAgZGF5OiB0aGlzLl9kYXRlLmdldERhdGUoKSxcbiAgICAgICAgaG91cjogdGhpcy5fZGF0ZS5nZXRIb3VycygpLFxuICAgICAgICBtaW51dGU6IHRoaXMuX2RhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICBzZWNvbmQ6IHRoaXMuX2RhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICBtaWxsaXNlY29uZDogdGhpcy5fZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0aGlzLmR1cmF0aW9uKSB7XG4gICAgICBqc29uLmR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgYXNzZXJ0SXNWYWxpZCgpIHtcbiAgICBpZiAoIVN0YW5kYXJkRGF0ZUFkYXB0ZXIuaXNEYXRlKHRoaXMuX2RhdGUpIHx8IGlzTmFOKHRoaXMuX2RhdGUudmFsdWVPZigpKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlQWRhcHRlckVycm9yKCdTdGFuZGFyZERhdGVBZGFwdGVyIGhhcyBpbnZhbGlkIGRhdGUuJyk7XG4gICAgfSBlbHNlIGlmICghW251bGwsICdVVEMnXS5pbmNsdWRlcyh0aGlzLnRpbWV6b25lKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlQWRhcHRlckVycm9yKFxuICAgICAgICAnU3RhbmRhcmREYXRlQWRhcHRlciBvbmx5IHN1cHBvcnRzIGxvY2FsIChudWxsKSBhbmQgVVRDIHRpbWV6b25lcyBidXQgJyArXG4gICAgICAgICAgYFwiJHt0aGlzLnRpbWV6b25lfVwiIHdhcyBzcGVjaWZpZWQuYCxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmR1cmF0aW9uICYmIHRoaXMuZHVyYXRpb24gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREYXRlQWRhcHRlckVycm9yKCdJZiBwcm92aWRlZCwgZHVyYXRpb24gbXVzdCBiZSBncmVhdGVyIHRoYW4gMC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblN0YW5kYXJkRGF0ZUFkYXB0ZXIuaGFzVGltZXpvbmVTdXBwb3J0ID0gZmFsc2U7XG5cbmV4cG9ydCB7IFN0YW5kYXJkRGF0ZUFkYXB0ZXIgfTtcbiIsImltcG9ydCB7IERhdGVBZGFwdGVyQmFzZSB9IGZyb20gJ0Byc2NoZWR1bGUvY29yZSc7XG5pbXBvcnQgeyBSdWxlIH0gZnJvbSAnQHJzY2hlZHVsZS9jb3JlL2dlbmVyYXRvcnMnO1xuaW1wb3J0IHsgSUNBTF9SVUxFUyB9IGZyb20gJ0Byc2NoZWR1bGUvY29yZS9ydWxlcy9JQ0FMX1JVTEVTJztcbmltcG9ydCB7IFN0YW5kYXJkRGF0ZUFkYXB0ZXIgfSBmcm9tICdAcnNjaGVkdWxlL3N0YW5kYXJkLWRhdGUtYWRhcHRlcic7XG5cbkRhdGVBZGFwdGVyQmFzZS5hZGFwdGVyID0gU3RhbmRhcmREYXRlQWRhcHRlcjtcblJ1bGUucmVjdXJyZW5jZVJ1bGVzID0gSUNBTF9SVUxFUztcbiIsImltcG9ydCB7IHN0b3JlIH0gZnJvbSBcIi4vc3JjXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQge1xuICAgIGNsZWFyU3R1ZHlHcm91cHMsXG4gICAgc2hvd0Vycm9yTm90aWZpY2F0aW9uLFxuICAgIHNob3dTdWNjZXNzTm90aWZpY2F0aW9uLFxuICAgIHNpZ25PdXQsXG4gICAgc3RhcnRMb2FkaW5nLFxuICAgIHN0b3BMb2FkaW5nXG59IGZyb20gXCIuL3NyYy9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi9TZXJ2ZXIvVmFsaWRhdG9yXCI7XG5pbXBvcnQgeyBTY2hlZHVsZSB9IGZyb20gXCIuL3JzY2hlZHVsZVwiO1xuXG4vKipcbiAqIFN1Ym1pdHMgYSBnZW5lcmFsIHBvc3QgcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICogQHBhcmFtIHtTdHJpbmd9IHJvdXRlIFRoZSByb3V0ZSBvZiB3aGljaCB0byBzZW5kIHRoZSByZXF1ZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgZGF0YSB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdWNjZXNzUmVzcG9uc2VNZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGluZGljYXRlIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gKiBAcGFyYW0ge1N0cmluZ30gY2F0Y2hNZXNzYWdlIElmIHRoZSBjYXRjaCBzdGF0ZW1lbnQgcnVucywgYSBub3RpZmljYXRpb24gd2lsbCBiZSBzaG93biB3aXRoIHRoaXMgbWVzc2FnZVxuICogQHBhcmFtIHtCb29sZWFufSBpc0F1dGhlbnRpY2F0ZWQgVHJ1ZSBpZiB0aGlzIHJvdXRlIHJlcXVpcmVzIGF1dGhlbnRpY2F0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBvbiBlcnJvciBvciBzdWNjZXNzIGFuZCByZXR1cm5zIChkYXRhLCBlcnJvcilcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAyLzExLzIwMjJcbiAqIEBhc3luY1xuICovXG5leHBvcnQgY29uc3Qgc2VuZFBvc3RSZXF1ZXN0ID0gYXN5bmMgKFxuICAgIHJvdXRlLFxuICAgIGRhdGEsXG4gICAgc3VjY2Vzc1Jlc3BvbnNlTWVzc2FnZSxcbiAgICBjYXRjaE1lc3NhZ2UsXG4gICAgaXNBdXRoZW50aWNhdGVkLFxuICAgIGNhbGxiYWNrID0gKCkgPT4ge30sXG4gICAgc2hvdWxkU2hvd05vdGlmaWNhdGlvbiA9IHRydWVcbikgPT4ge1xuICAgIGxldCByZXNwb25zZTtcbiAgICB0cnkge1xuICAgICAgICBpZiAoaXNBdXRoZW50aWNhdGVkKSBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRva2VuXCIpO1xuXG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0YXJ0TG9hZGluZygpKTtcbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KHJvdXRlLCBkYXRhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICBzaG91bGRTaG93Tm90aWZpY2F0aW9uICYmXG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JOb3RpZmljYXRpb24oY2F0Y2hNZXNzYWdlIHx8IFwiQ2Fubm90IGNvbm5lY3QgdG8gdGhlIHNlcnZlciwgcGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIilcbiAgICAgICAgICAgICk7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBjb25uZWN0aW5nIHRvIHRoZSBzZXJ2ZXI6IFwiICsgZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goc3RvcExvYWRpbmcoKSk7XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VJc0RlZmluZWQgPSBWYWxpZGF0b3IuaXNEZWZpbmVkKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICBpZiAocmVzcG9uc2VJc0RlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RXYXNWYWxpZCA9IHN1Y2Nlc3NSZXNwb25zZU1lc3NhZ2UgPT09IHJlc3BvbnNlLmRhdGEubWVzc2FnZTtcblxuICAgICAgICAgICAgaWYgKHJlcXVlc3RXYXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIHNob3VsZFNob3dOb3RpZmljYXRpb24gJiYgc3RvcmUuZGlzcGF0Y2goc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNob3VsZFNob3dOb3RpZmljYXRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiVGhlcmUgd2FzIGFuIGVycm9yOiBcIiArIHJlc3BvbnNlLmRhdGEubWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlLmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24oXCJUaGVyZSB3YXMgYW4gZXJyb3IsIHRoZSBzZXJ2ZXIgc2VudCB1bmRlZmluZWQgcmVzdWx0c1wiKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBcIlRoZXJlIHdhcyBhbiBlcnJvciwgdGhlIHNlcnZlciBzZW50IHVuZGVmaW5lZCByZXN1bHRzXCIpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBTdWJtaXRzIGEgZ2VuZXJhbCBnZXQgcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICogQHBhcmFtIHtTdHJpbmd9IHJvdXRlIFRoZSByb3V0ZSBvZiB3aGljaCB0byBzZW5kIHRoZSByZXF1ZXN0XG4gKiBAcGFyYW0ge1N0cmluZ30gc3VjY2Vzc1Jlc3BvbnNlTWVzc2FnZSBUaGUgbWVzc2FnZSB0byBpbmRpY2F0ZSBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICogQHBhcmFtIHtTdHJpbmd9IGNhdGNoTWVzc2FnZSBJZiB0aGUgY2F0Y2ggc3RhdGVtZW50IHJ1bnMsIGEgbm90aWZpY2F0aW9uIHdpbGwgYmUgc2hvd24gd2l0aCB0aGlzIG1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNBdXRoZW50aWNhdGVkIFRydWUgaWYgdGhpcyByb3V0ZSByZXF1aXJlcyBhdXRoZW50aWNhdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgb24gZXJyb3Igb3Igc3VjY2VzcyBhbmQgcmV0dXJucyAoZGF0YSwgZXJyb3IpXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMi8xMS8yMDIyXG4gKiBAYXN5bmNcbiAqL1xuZXhwb3J0IGNvbnN0IHNlbmRHZXRSZXF1ZXN0ID0gYXN5bmMgKFxuICAgIHJvdXRlLFxuICAgIHN1Y2Nlc3NSZXNwb25zZU1lc3NhZ2UsXG4gICAgY2F0Y2hNZXNzYWdlLFxuICAgIGlzQXV0aGVudGljYXRlZCxcbiAgICBjYWxsYmFjayA9ICgpID0+IHt9LFxuICAgIHNob3VsZFNob3dOb3RpZmljYXRpb24gPSB0cnVlXG4pID0+IHtcbiAgICBsZXQgcmVzcG9uc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzQXV0aGVudGljYXRlZCkgYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0b2tlblwiKTtcblxuICAgICAgICBzdG9yZS5kaXNwYXRjaChzdGFydExvYWRpbmcoKSk7XG4gICAgICAgIHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHJvdXRlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICBzaG91bGRTaG93Tm90aWZpY2F0aW9uICYmXG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChcbiAgICAgICAgICAgICAgICBzaG93RXJyb3JOb3RpZmljYXRpb24oY2F0Y2hNZXNzYWdlIHx8IFwiQ2Fubm90IGNvbm5lY3QgdG8gdGhlIHNlcnZlciwgcGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIilcbiAgICAgICAgICAgICk7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBjb25uZWN0aW5nIHRvIHRoZSBzZXJ2ZXI6IFwiICsgZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goc3RvcExvYWRpbmcoKSk7XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VJc0RlZmluZWQgPSBWYWxpZGF0b3IuaXNEZWZpbmVkKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICBpZiAocmVzcG9uc2VJc0RlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RXYXNWYWxpZCA9IHN1Y2Nlc3NSZXNwb25zZU1lc3NhZ2UgPT09IHJlc3BvbnNlLmRhdGEubWVzc2FnZTtcblxuICAgICAgICAgICAgaWYgKHJlcXVlc3RXYXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIHNob3VsZFNob3dOb3RpZmljYXRpb24gJiYgc3RvcmUuZGlzcGF0Y2goc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNob3VsZFNob3dOb3RpZmljYXRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiVGhlcmUgd2FzIGFuIGVycm9yOiBcIiArIHJlc3BvbnNlLmRhdGEubWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlLmRhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24oXCJUaGVyZSB3YXMgYW4gZXJyb3IsIHRoZSBzZXJ2ZXIgc2VudCB1bmRlZmluZWQgcmVzdWx0c1wiKSk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBcIlRoZXJlIHdhcyBhbiBlcnJvciwgdGhlIHNlcnZlciBzZW50IHVuZGVmaW5lZCByZXN1bHRzXCIpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBTdWJtaXRzIGEgZ2VuZXJhbCBkZWxldGUgcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICogQHBhcmFtIHtTdHJpbmd9IHJvdXRlIFRoZSByb3V0ZSBvZiB3aGljaCB0byBzZW5kIHRoZSByZXF1ZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgZGF0YSB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdWNjZXNzUmVzcG9uc2VNZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGluZGljYXRlIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gKiBAcGFyYW0ge1N0cmluZ30gY2F0Y2hNZXNzYWdlIElmIHRoZSBjYXRjaCBzdGF0ZW1lbnQgcnVucywgYSBub3RpZmljYXRpb24gd2lsbCBiZSBzaG93biB3aXRoIHRoaXMgbWVzc2FnZVxuICogQHBhcmFtIHtCb29sZWFufSBpc0F1dGhlbnRpY2F0ZWQgVHJ1ZSBpZiB0aGlzIHJvdXRlIHJlcXVpcmVzIGF1dGhlbnRpY2F0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBvbiBlcnJvciBvciBzdWNjZXNzIGFuZCByZXR1cm5zIChkYXRhLCBlcnJvcilcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAyLzExLzIwMjJcbiAqIEBhc3luY1xuICovXG5leHBvcnQgY29uc3Qgc2VuZERlbGV0ZVJlcXVlc3QgPSBhc3luYyAoXG4gICAgcm91dGUsXG4gICAgZGF0YSxcbiAgICBzdWNjZXNzUmVzcG9uc2VNZXNzYWdlLFxuICAgIGNhdGNoTWVzc2FnZSxcbiAgICBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgY2FsbGJhY2sgPSAoKSA9PiB7fSxcbiAgICBzaG91bGRTaG93Tm90aWZpY2F0aW9uID0gdHJ1ZVxuKSA9PiB7XG4gICAgbGV0IHJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0F1dGhlbnRpY2F0ZWQpIGF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidG9rZW5cIik7XG5cbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goc3RhcnRMb2FkaW5nKCkpO1xuICAgICAgICByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmRlbGV0ZShyb3V0ZSwgeyBkYXRhIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGNvbm5lY3RpbmcgdG8gdGhlIHNlcnZlcjogXCIgKyBlKTtcbiAgICAgICAgc2hvdWxkU2hvd05vdGlmaWNhdGlvbiAmJlxuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yTm90aWZpY2F0aW9uKGNhdGNoTWVzc2FnZSB8fCBcIkNhbm5vdCBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIsIHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIpXG4gICAgICAgICAgICApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0b3BMb2FkaW5nKCkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlSXNEZWZpbmVkID0gVmFsaWRhdG9yLmlzRGVmaW5lZChyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlSXNEZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0V2FzVmFsaWQgPSBzdWNjZXNzUmVzcG9uc2VNZXNzYWdlID09PSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAocmVxdWVzdFdhc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgc2hvdWxkU2hvd05vdGlmaWNhdGlvbiAmJiBzdG9yZS5kaXNwYXRjaChzaG93U3VjY2Vzc05vdGlmaWNhdGlvbihyZXNwb25zZS5kYXRhLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBzaG91bGRTaG93Tm90aWZpY2F0aW9uICYmXG4gICAgICAgICAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIlRoZXJlIHdhcyBhbiBlcnJvcjogXCIgKyByZXNwb25zZS5kYXRhLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIFwiVGhlcmUgd2FzIGFuIGVycm9yLCB0aGUgc2VydmVyIHNlbnQgdW5kZWZpbmVkIHJlc3VsdHNcIik7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24oXCJUaGVyZSB3YXMgYW4gZXJyb3IsIHRoZSBzZXJ2ZXIgc2VudCB1bmRlZmluZWQgcmVzdWx0c1wiKSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKipcbiAqIFN1Ym1pdHMgYSBnZW5lcmFsIGRlbGV0ZSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIuXG4gKiBAcGFyYW0ge1N0cmluZ30gcm91dGUgVGhlIHJvdXRlIG9mIHdoaWNoIHRvIHNlbmQgdGhlIHJlcXVlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBmb3JtRGF0YSBUaGUgZm9ybURhdGEgdG8gYmUgc2VudCB0byB0aGUgc2VydmVyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3VjY2Vzc1Jlc3BvbnNlTWVzc2FnZSBUaGUgbWVzc2FnZSB0byBpbmRpY2F0ZSBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICogQHBhcmFtIHtTdHJpbmd9IGNhdGNoTWVzc2FnZSBJZiB0aGUgY2F0Y2ggc3RhdGVtZW50IHJ1bnMsIGEgbm90aWZpY2F0aW9uIHdpbGwgYmUgc2hvd24gd2l0aCB0aGlzIG1lc3NhZ2VcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNBdXRoZW50aWNhdGVkIFRydWUgaWYgdGhpcyByb3V0ZSByZXF1aXJlcyBhdXRoZW50aWNhdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgb24gZXJyb3Igb3Igc3VjY2VzcyBhbmQgcmV0dXJucyAoZGF0YSwgZXJyb3IpXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMi8xMS8yMDIyXG4gKiBAYXN5bmNcbiAqL1xuZXhwb3J0IGNvbnN0IHNlbmRQb3N0UmVxdWVzdFdpdGhGb3JtRGF0YSA9IGFzeW5jIChcbiAgICByb3V0ZSxcbiAgICBmb3JtZGF0YSxcbiAgICBzdWNjZXNzUmVzcG9uc2VNZXNzYWdlLFxuICAgIGNhdGNoTWVzc2FnZSxcbiAgICBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgY2FsbGJhY2sgPSAoKSA9PiB7fVxuKSA9PiB7XG4gICAgbGV0IHJlc3BvbnNlO1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0F1dGhlbnRpY2F0ZWQpIGF4aW9zLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidG9rZW5cIik7XG5cbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goc3RhcnRMb2FkaW5nKCkpO1xuICAgICAgICByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3Qocm91dGUsIGZvcm1kYXRhLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKGNhdGNoTWVzc2FnZSB8fCBcIkNhbm5vdCBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIsIHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIpKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGNvbm5lY3RpbmcgdG8gdGhlIHNlcnZlcjogXCIgKyBlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBzdG9yZS5kaXNwYXRjaChzdG9wTG9hZGluZygpKTtcblxuICAgICAgICBjb25zdCByZXNwb25zZUlzRGVmaW5lZCA9IFZhbGlkYXRvci5pc0RlZmluZWQocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgIGlmIChyZXNwb25zZUlzRGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdFdhc1ZhbGlkID0gc3VjY2Vzc1Jlc3BvbnNlTWVzc2FnZSA9PT0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlO1xuXG4gICAgICAgICAgICBpZiAocmVxdWVzdFdhc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24ocmVzcG9uc2UuZGF0YS5tZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIlRoZXJlIHdhcyBhbiBlcnJvcjogXCIgKyByZXNwb25zZS5kYXRhLm1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZS5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc2hvd0Vycm9yTm90aWZpY2F0aW9uKFwiVGhlcmUgd2FzIGFuIGVycm9yLCB0aGUgc2VydmVyIHNlbnQgdW5kZWZpbmVkIHJlc3VsdHNcIikpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgXCJUaGVyZSB3YXMgYW4gZXJyb3IsIHRoZSBzZXJ2ZXIgc2VudCB1bmRlZmluZWQgcmVzdWx0c1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXROZXh0TWVldGluZyA9IChncm91cCkgPT4ge1xuICAgIHZhciBuZXh0T25lVGltZU1lZXRpbmcgPSB7fTtcblxuICAgIGlmIChncm91cC5tZWV0aW5ncyAmJiBncm91cC5tZWV0aW5ncy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgbmV4dE9uZVRpbWVNZWV0aW5nID0gZ3JvdXAubWVldGluZ3NbMF07XG4gICAgICAgIGdyb3VwLm1lZXRpbmdzLmZvckVhY2goKG1lZXRpbmcpID0+IHtcbiAgICAgICAgICAgIGlmIChuZXcgRGF0ZShtZWV0aW5nLmRhdGUpIDw9IG5ldyBEYXRlKG5leHRPbmVUaW1lTWVldGluZy5kYXRlKSAmJiBuZXcgRGF0ZShtZWV0aW5nLmRhdGUpID49IG5ldyBEYXRlKCkpXG4gICAgICAgICAgICAgICAgbmV4dE9uZVRpbWVNZWV0aW5nID0gbWVldGluZztcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG5leHRPbmVUaW1lTWVldGluZyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChncm91cC5yZWN1cnJpbmdNZWV0aW5nKSB7XG4gICAgICAgIGNvbnN0IHJlY3VycmluZ1N0YXJ0RGF0ZSA9IG5ldyBEYXRlKGdyb3VwLnJlY3VycmluZ01lZXRpbmcuZGF0ZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU1RBUlQgREFURVwiLCByZWN1cnJpbmdTdGFydERhdGUsIGdyb3VwLnJlY3VycmluZ01lZXRpbmcpO1xuICAgICAgICBjb25zdCBzY2hlZHVsZSA9IG5ldyBTY2hlZHVsZSh7XG4gICAgICAgICAgICBycnVsZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogZ3JvdXAucmVjdXJyaW5nTWVldGluZy5mcmVxdWVuY3kudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHJlY3VycmluZ1N0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3VycmluZ1N0YXJ0RGF0ZS5nZXRGdWxsWWVhcigpICsgNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3VycmluZ1N0YXJ0RGF0ZS5nZXRNb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjdXJyaW5nU3RhcnREYXRlLmdldERhdGUoKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbmV4dFJlY3VycmluZ01lZXRpbmcgPSB7fTtcbiAgICAgICAgbmV4dFJlY3VycmluZ01lZXRpbmcgPSBzY2hlZHVsZVxuICAgICAgICAgICAgLm9jY3VycmVuY2VzKClcbiAgICAgICAgICAgIC50b0FycmF5KClcbiAgICAgICAgICAgIC5maWx0ZXIoKHsgZGF0ZSB9KSA9PiBkYXRlID49IG5ldyBEYXRlKCkpXG4gICAgICAgICAgICAubWFwKCh7IGRhdGUgfSkgPT4gbmV3IERhdGUoZGF0ZSkudG9Mb2NhbGVEYXRlU3RyaW5nKCkpWzBdO1xuXG4gICAgICAgIGdyb3VwLnJlY3VycmluZ01lZXRpbmcuZGF0ZSA9IG5leHRSZWN1cnJpbmdNZWV0aW5nO1xuXG4gICAgICAgIGlmIChncm91cC5tZWV0aW5ncy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShuZXh0UmVjdXJyaW5nTWVldGluZykgPiBuZXcgRGF0ZShuZXh0T25lVGltZU1lZXRpbmcuZGF0ZSlcbiAgICAgICAgICAgICAgICA/IG5leHRPbmVUaW1lTWVldGluZ1xuICAgICAgICAgICAgICAgIDogZ3JvdXAucmVjdXJyaW5nTWVldGluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBncm91cC5yZWN1cnJpbmdNZWV0aW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0T25lVGltZU1lZXRpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgcGVyZm9ybVNpZ25PdXQgPSAoKSA9PiB7XG4gICAgc3RvcmUuZGlzcGF0Y2goc2lnbk91dCgpKTtcbiAgICBzdG9yZS5kaXNwYXRjaChzaG93U3VjY2Vzc05vdGlmaWNhdGlvbihcIllvdSBoYXZlIGJlZW4gc3VjY2Vzc2Z1bGx5IHNpZ25lZCBvdXQuXCIpKTtcbiAgICBzdG9yZS5kaXNwYXRjaChjbGVhclN0dWR5R3JvdXBzKCkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldFJlZnJlc2ggPSAoKSA9PiB7fTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IENyZWF0ZVN0dWR5R3JvdXBGb3JtIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL0NyZWF0ZVN0dWR5R3JvdXBGb3JtL0NyZWF0ZVN0dWR5R3JvdXBGb3JtXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IGFkZFN0dWR5R3JvdXAsIGNsb3NlUG9wdXAsIHNob3dTdWNjZXNzTm90aWZpY2F0aW9uLCBzaG93RXJyb3JOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9ucy9pbmRleFwiO1xuXG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzLmpzXCI7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlc1wiO1xuaW1wb3J0IFN1YmplY3RzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL1N1YmplY3RzLmpzXCI7XG5pbXBvcnQgeyBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vSGVscGVyXCI7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNwZWNpZmljIHZpZXcgdGhhdCBpcyB1c2VkIGluIGEgcG9wdXAgdG8gYWxsb3cgYSB1c2VyIHRvIGNyZWF0ZSBhIHN0dWR5IGdyb3VwXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTEvMjAvMjAyMVxuICovXG5jb25zdCBDcmVhdGVTdHVkeUdyb3VwVmlldyA9ICgpID0+IHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgdXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlcik7XG5cbiAgICBjb25zdCBCTEFOSyA9IFwiXCI7XG4gICAgY29uc3QgW25hbWUsIHNldE5hbWVdID0gdXNlU3RhdGUoQkxBTkspOyAvL1RleHRJbnB1dCB0YWdcbiAgICBjb25zdCBbZGVzY3JpcHRpb24sIHNldERlc2NyaXB0aW9uXSA9IHVzZVN0YXRlKEJMQU5LKTsgLy9UZXh0SW5wdXQgdGFnXG4gICAgY29uc3QgW3N1YmplY3QsIHNldFN1YmplY3RdID0gdXNlU3RhdGUoU3ViamVjdHMuQW55KTsgLy9zZWxlY3QgdGFnLCBmaWxsZWQgd2l0aCBvcHRpb24gdGFnc1xuICAgIGNvbnN0IFtwcml2YWN5LCBzZXRQcml2YWN5XSA9IHVzZVN0YXRlKFwiUHVibGljXCIpOyAvL3NlbGVjdCB0YWcsIGZpbGxlZCB3aXRoIG9wdGlvbiB0YWdzXG4gICAgY29uc3QgW2NvdXJzZUNvZGUsIHNldENvdXJzZUNvZGVdID0gdXNlU3RhdGUoQkxBTkspOyAvL1RleHRJbnB1dCB0YWdcbiAgICBjb25zdCBbaXNBc3NvY2lhdGVkV2l0aFNjaG9vbCwgc2V0SXNBc3NvY2lhdGVkV2l0aFNjaG9vbF0gPSB1c2VTdGF0ZShmYWxzZSk7IC8vSW5wdXQgdGFnIHdpdGggdHlwZSBcImNoZWNrYm94XCJcbiAgICBjb25zdCBbaXNUdXRvckdyb3VwLCBzZXRJc1R1dG9yR3JvdXBdID0gdXNlU3RhdGUoZmFsc2UpOyAvL1RvZ2dsZSB0YWdcbiAgICBjb25zdCBbaXNPbmxpbmVHcm91cCwgc2V0SXNPbmxpbmVHcm91cF0gPSB1c2VTdGF0ZShmYWxzZSk7IC8vVG9nZ2xlIHRhZ1xuICAgIGNvbnN0IFtncm91cENvbG9yLCBzZXRHcm91cENvbG9yXSA9IHVzZVN0YXRlKFwiIzAwMDAwMFwiKTsgLy9UZXh0SW5wdXQgdGFnIGZvciBub3dcbiAgICBjb25zdCBbZ3JvdXBQaG90bywgc2V0R3JvdXBQaG90b10gPSB1c2VTdGF0ZShCTEFOSyk7IC8vVGV4dElucHV0IHRhZyBmb3Igbm93XG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhbiBhcGkgY2FsbCB0byB0aGUgQ3JlYXRlIHN0dWR5IGdyb3VwIHJvdXRlLCBwYXNzaW5nIGluIHRoZSBpbmZvcm1hdGlvbiBlbnRlcmVkIGluIHRoZSBmb3JtIGFuZCByZW5kZXJpbmcgdGhlIGNsaWVudCBhY2NvcmRpbmcgdG8gdGhlIHJlc3BvbnNlIHJlY2VpdmVkXG4gICAgICogQGF1dGhvciBTdGFjZXkgUG9wZW5mb29zZSBhbmQgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTIvMDgvMjFcbiAgICAgKi9cbiAgICBjb25zdCBzdWJtaXRDcmVhdGVTdHVkeUdyb3VwID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIC8vUHJldmVudCBkZWZhdWx0IGZvcm0gYmVoYXZpb3JcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5DcmVhdGVTdHVkeUdyb3VwLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZ3JvdXBDb2xvcixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBzdWJqZWN0LFxuICAgICAgICAgICAgICAgIHByaXZhY3lTZXR0aW5nOiBwcml2YWN5LFxuICAgICAgICAgICAgICAgIGNvdXJzZTogY291cnNlQ29kZSxcbiAgICAgICAgICAgICAgICBzY2hvb2w6IGlzQXNzb2NpYXRlZFdpdGhTY2hvb2wgPyB1c2VyLnNjaG9vbCA6IFwiXCIsXG4gICAgICAgICAgICAgICAgaXNUdXRvckdyb3VwLFxuICAgICAgICAgICAgICAgIGlzT25saW5lR3JvdXBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU3VjY2Vzc1N0dWR5R3JvdXBDcmVhdGVkLFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLkVycm9yQ3JlYXRlU3R1ZHlHcm91cCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChhZGRTdHVkeUdyb3VwKGRhdGEubmV3U3R1ZHlHcm91cCkpO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNsb3NlUG9wdXAoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBuYW1lIGZpZWxkIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVOYW1lRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0TmFtZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgZ3JvdXAgY29sb3IgZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTIvMDgvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUdyb3VwQ29sb3IgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0R3JvdXBDb2xvcihldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgZGVzY3JpcHRpb24gZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTIvMDgvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZURlc2NyaXB0aW9uRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0RGVzY3JpcHRpb24oZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIHN1YmplY3QgZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTIvMDgvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZVN1YmplY3RGaWVsZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRTdWJqZWN0KGV2ZW50LnRhcmdldC5vcHRpb25zW2V2ZW50LnRhcmdldC5zZWxlY3RlZEluZGV4XS52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBwcml2YWN5IGZpZWxkIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVQcml2YWN5ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldFByaXZhY3koZXZlbnQudGFyZ2V0Lm9wdGlvbnNbZXZlbnQudGFyZ2V0LnNlbGVjdGVkSW5kZXhdLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNvdXJzZSBjb2RlIGZpZWxkIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVDb3Vyc2VDb2RlRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0Q291cnNlQ29kZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgaXMgb25saW5lIGdyb3VwIHN3aXRjaCB2YWx1ZSBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMi8wOC8yMDIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlSXNPbmxpbmVHcm91cCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRJc09ubGluZUdyb3VwKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGlzIGFzc29jaWF0ZWQgd2l0aCBzY2hvb2wgc3dpdGNoIHZhbHVlIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVJc0Fzc29jaWF0ZWRXaXRoU2Nob29sID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldElzQXNzb2NpYXRlZFdpdGhTY2hvb2woZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgaXMgdHV0b3IgZ3JvdXAgc3dpdGNoIHZhbHVlIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEyLzA4LzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVJc1R1dG9yR3JvdXAgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0SXNUdXRvckdyb3VwKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjcmVhdGUtc3R1ZHlncm91cC12aWV3XCI+XG4gICAgICAgICAgICA8Q3JlYXRlU3R1ZHlHcm91cEZvcm1cbiAgICAgICAgICAgICAgICBzdWJtaXRDcmVhdGVTdHVkeUdyb3VwPXtzdWJtaXRDcmVhdGVTdHVkeUdyb3VwfVxuICAgICAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgIHN1YmplY3Q9e3N1YmplY3R9XG4gICAgICAgICAgICAgICAgcHJpdmFjeT17cHJpdmFjeX1cbiAgICAgICAgICAgICAgICBjb3Vyc2VDb2RlPXtjb3Vyc2VDb2RlfVxuICAgICAgICAgICAgICAgIGlzQXNzb2NpYXRlZFdpdGhTY2hvb2w9e2lzQXNzb2NpYXRlZFdpdGhTY2hvb2x9XG4gICAgICAgICAgICAgICAgaXNUdXRvckdyb3VwPXtpc1R1dG9yR3JvdXB9XG4gICAgICAgICAgICAgICAgaXNPbmxpbmVHcm91cD17aXNPbmxpbmVHcm91cH1cbiAgICAgICAgICAgICAgICBncm91cENvbG9yPXtncm91cENvbG9yfVxuICAgICAgICAgICAgICAgIHVwZGF0ZU5hbWVGaWVsZD17dXBkYXRlTmFtZUZpZWxkfVxuICAgICAgICAgICAgICAgIHVwZGF0ZURlc2NyaXB0aW9uRmllbGQ9e3VwZGF0ZURlc2NyaXB0aW9uRmllbGR9XG4gICAgICAgICAgICAgICAgdXBkYXRlU3ViamVjdEZpZWxkPXt1cGRhdGVTdWJqZWN0RmllbGR9XG4gICAgICAgICAgICAgICAgdXBkYXRlUHJpdmFjeT17dXBkYXRlUHJpdmFjeX1cbiAgICAgICAgICAgICAgICB1cGRhdGVDb3Vyc2VDb2RlRmllbGQ9e3VwZGF0ZUNvdXJzZUNvZGVGaWVsZH1cbiAgICAgICAgICAgICAgICB1cGRhdGVJc0Fzc29jaWF0ZWRXaXRoU2Nob29sPXt1cGRhdGVJc0Fzc29jaWF0ZWRXaXRoU2Nob29sfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUlzVHV0b3JHcm91cD17dXBkYXRlSXNUdXRvckdyb3VwfVxuICAgICAgICAgICAgICAgIHVwZGF0ZUlzT25saW5lR3JvdXA9e3VwZGF0ZUlzT25saW5lR3JvdXB9XG4gICAgICAgICAgICAgICAgdXBkYXRlR3JvdXBDb2xvcj17dXBkYXRlR3JvdXBDb2xvcn1cbiAgICAgICAgICAgICAgICBzdWJtaXRDcmVhdGVTdHVkeUdyb3VwPXtzdWJtaXRDcmVhdGVTdHVkeUdyb3VwfVxuICAgICAgICAgICAgICAgIHVzZXJTY2hvb2w9e3VzZXIuc2Nob29sfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENyZWF0ZVN0dWR5R3JvdXBWaWV3O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Kb2luU3R1ZHlHcm91cFZpZXcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0pvaW5TdHVkeUdyb3VwVmlldy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9Kb2luU3R1ZHlHcm91cFZpZXcuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgeyBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vSGVscGVyXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlc1wiO1xuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi8uLi9jb3JlL0xhYmVsL0xhYmVsXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBhZGRTdHVkeUdyb3VwLCBzaG93RXJyb3JOb3RpZmljYXRpb24sIGNsb3NlUG9wdXAsIHNob3dTdWNjZXNzTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcblxuY29uc3QgSm9pblN0dWR5R3JvdXBWaWV3ID0gKHsgZ3JvdXAgfSkgPT4ge1xuICAgIGNvbnN0IHsgbmFtZSwgc2Nob29sLCBvd25lciwgc3ViamVjdCwgY291cnNlLCBpc1R1dG9yR3JvdXAsIGlzT25saW5lR3JvdXAsIGdyb3VwQ29sb3IsIGRlc2NyaXB0aW9uLCBfaWQgfSA9IGdyb3VwO1xuXG4gICAgY29uc3QgdXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlcik7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcblxuICAgIGNvbnN0IHN1Ym1pdEpvaW4gPSBhc3luYyAoZSkgPT4ge1xuICAgICAgICAvLyBTVUJNSVQgVEhFIFNFQVJDSCBSRVFVRVNULlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJTdWJtaXR0aW5nXCIpO1xuXG4gICAgICAgIGF3YWl0IHNlbmRQb3N0UmVxdWVzdChcbiAgICAgICAgICAgIFJvdXRlcy5TdHVkeUdyb3VwLkpvaW5TdHVkeUdyb3VwLFxuICAgICAgICAgICAgeyBzdHVkeUdyb3VwSWQ6IF9pZCB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLlN1Y2Nlc3NTdHVkeUdyb3VwSm9pbmVkLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChhZGRTdHVkeUdyb3VwKGdyb3VwKSk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3VibWl0TWVzc2FnZVN0dWR5R3JvdXBPd25lciA9IGFzeW5jIChlKSA9PiB7XG4gICAgICAgIC8vIFNVQk1JVCBUSEUgU0VBUkNIIFJFUVVFU1QuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuTWVzc2FnZS5DcmVhdGVDb252ZXJzYXRpb24sXG4gICAgICAgICAgICB7IHJlY2VpdmVySWQ6IG93bmVyLl9pZCB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5NZXNzYWdlLlN1Y2Nlc3NDcmVhdGVDb252ZXJzYXRpb24sXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNsb3NlUG9wdXAoKSk7XG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKFwiL21lc3NhZ2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiam9pbi1ncm91cC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtcG9wdXAtdGl0bGVcIiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IGAke2dyb3VwQ29sb3J9NzBgIH19PlxuICAgICAgICAgICAgICAgIDxoMT57bmFtZX08L2gxPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcHVwLWluZm8tZmllbGRzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5EZXNjcmlwdGlvbjwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxwPntkZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdWItaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Pd25lcjwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57b3duZXIubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Db3Vyc2UgQ29kZTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57Y291cnNlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPlN1YmplY3Q8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3N1YmplY3R9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+QXNzb2NpYXRlZCBXaXRoPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPntzY2hvb2x9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+VHlwZTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57aXNUdXRvckdyb3VwID8gPHA+VHV0b3I8L3A+IDogPHA+R3JvdXA8L3A+fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPk1lZXRpbmcgRm9ybWF0PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPntpc09ubGluZUdyb3VwID8gPHA+T25saW5lPC9wPiA6IDxwPkluIFBlcnNvbjwvcD59PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAge2dyb3VwLnJlY3VycmluZ01lZXRpbmcgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2dyb3VwLmlzT25saW5lR3JvdXAgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lZXRzIDxzdHJvbmc+T25saW5lPC9zdHJvbmc+OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lZXRzIDxzdHJvbmc+SW4tUGVyc29uPC9zdHJvbmc+OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nLmZyZXF1ZW5jeX0gb24ge2dyb3VwLnJlY3VycmluZ01lZXRpbmcuZGF5fSBhdHtcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2dyb3VwLnJlY3VycmluZ01lZXRpbmcudGltZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuUHJpbWFyeX0gb25DbGljaz17c3VibWl0TWVzc2FnZVN0dWR5R3JvdXBPd25lcn0+XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2UgU3R1ZHkgR3JvdXAgT3duZXJcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufSBvbkNsaWNrPXtzdWJtaXRKb2lufT5cbiAgICAgICAgICAgICAgICAgICAgSm9pblxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBKb2luU3R1ZHlHcm91cFZpZXc7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0lucHV0Vmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSW5wdXRWaWV3LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL0lucHV0Vmlldy5zY3NzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBjbG9zZVBvcHVwIH0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBGb3JtIGZyb20gXCIuLi8uLi9jb3JlL0Zvcm0vRm9ybVwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGRcIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXRcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbFwiO1xuXG5jb25zdCBJbnB1dFZpZXcgPSAoeyBsYWJlbCwgZGVmYXVsdElucHV0ID0gXCJcIiwgY2FsbGJhY2ssIGxhYmVsMiA9IFwiXCIgfSkgPT4ge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBbaW5wdXQsIHNldElucHV0XSA9IHVzZVN0YXRlKGRlZmF1bHRJbnB1dCk7XG4gICAgY29uc3QgW2lucHV0Miwgc2V0SW5wdXQyXSA9IHVzZVN0YXRlKGRlZmF1bHRJbnB1dCk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgaW5wdXQgZmllbGQgaW4gdGhlIGlucHV0IHBvcHVwXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzA3LzIwMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVJbnB1dCA9IChlKSA9PiB7XG4gICAgICAgIHNldElucHV0KGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIHNlY29uZCBpbnB1dCBmaWVsZCBpbiB0aGUgaW5wdXQgcG9wdXBcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMDcvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUlucHV0MiA9IChlKSA9PiB7XG4gICAgICAgIHNldElucHV0MihlLnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtXG4gICAgICAgICAgICBvblN1Ym1pdD17KGUpID0+IHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpbnB1dCwgaW5wdXQyKTtcbiAgICAgICAgICAgICAgICBzZXRJbnB1dChcIlwiKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxMYWJlbD57bGFiZWx9PC9MYWJlbD5cbiAgICAgICAgICAgICAgICA8VGV4dElucHV0IG9uQ2hhbmdlPXt1cGRhdGVJbnB1dH0gdmFsdWU9e2lucHV0fSAvPlxuICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuXG4gICAgICAgICAgICB7bGFiZWwyICE9PSBcIlwiICYmIChcbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPntsYWJlbDJ9PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCBvbkNoYW5nZT17dXBkYXRlSW5wdXQyfSB2YWx1ZT17aW5wdXQyfSAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5Eb25lPC9CdXR0b24+XG4gICAgICAgIDwvRm9ybT5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW5wdXRWaWV3O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Db25maXJtYXRpb25Gb3JtLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Db25maXJtYXRpb25Gb3JtLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgXCIuL0NvbmZpcm1hdGlvbkZvcm0uc2Nzc1wiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IHsgY2xvc2VQb3B1cCB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5cbmNvbnN0IENvbmZpcm1hdGlvbkZvcm0gPSAoeyBjYWxsYmFjaywgbWVzc2FnZSwgaXNDb25maXJtYXRpb24sIGZpcnN0QnV0dG9uVGl0bGUsIHNlY29uZEJ1dHRvblRpdGxlIH0pID0+IHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtYXRpb24tY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8cD57bWVzc2FnZX08L3A+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICB0eXBlPXtpc0NvbmZpcm1hdGlvbiA/IEJ1dHRvblR5cGVzLkRlc3RydWNpdmUgOiBCdXR0b25UeXBlcy5QcmltYXJ5fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2ZpcnN0QnV0dG9uVGl0bGUgfHwgXCJZZXNcIn1cbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNsb3NlUG9wdXAoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7c2Vjb25kQnV0dG9uVGl0bGUgfHwgXCJOb1wifVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb25maXJtYXRpb25Gb3JtO1xuIiwiLyoqXG4gKiBUaGUgdmFyaW91cyBwb3NzaWJsZSB2aWV3cyBhbmQgcG9wdXBzIHRoYXQgZWFjaCBwYWdlIGNhbiBwcmVzZW50LlxuICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXIgYW5kIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTAvMjAvMjAyMVxuICovXG5jb25zdCBWaWV3cyA9IHtcbiAgICBIb21lOiB7XG4gICAgICAgIExvZ2luOiBcIkxvZ2luXCIsXG4gICAgICAgIEZvcmdvdFBhc3N3b3JkOiBcIkZvcmdvdCBwYXNzd29yZFwiLFxuICAgICAgICBDcmVhdGVBY2NvdW50OiBcIkNyZWF0ZSBhY2NvdW50XCIsXG4gICAgICAgIFZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uOiBcIlZlcmlmaWNhdGlvbiBlbWFpbCBjb25maXJtYXRpb25cIixcbiAgICAgICAgQWNjb3VudFNldHVwOiBcIkFjY291bnQgc2V0dXBcIlxuICAgIH0sXG4gICAgUG9wdXA6IHtcbiAgICAgICAgU3R1ZHlHcm91cDoge1xuICAgICAgICAgICAgSm9pbjogXCJKb2luIFN0dWR5IEdyb3VwXCIsXG4gICAgICAgICAgICBDcmVhdGU6IFwiQ3JlYXRlIFN0dWR5IEdyb3VwXCIsXG4gICAgICAgICAgICBFZGl0OiBcIkVkaXQgU3R1ZHkgR3JvdXBcIixcbiAgICAgICAgICAgIENyZWF0ZU1lZXRpbmc6IFwiQ3JlYXRlIE1lZXRpbmdcIixcbiAgICAgICAgICAgIENyZWF0ZVBvc3Q6IFwiQ3JlYXRlIFBvc3RcIixcbiAgICAgICAgICAgIFZpZXdQb3N0OiBcIlZpZXcgUG9zdFwiLFxuICAgICAgICAgICAgVmlld01lZXRpbmdzOiBcIlZpZXcgTWVldGluZ3NcIixcbiAgICAgICAgICAgIFZpZXdNZW1iZXI6IFwiVmlldyBNZW1iZXJcIlxuICAgICAgICB9LFxuICAgICAgICBJbnB1dDogXCJJbnB1dCBJbmZvcm1hdGlvblwiLFxuICAgICAgICBDb25maXJtYXRpb246IFwiQ29uZmlybVwiLFxuICAgICAgICBSZXBvcnQ6IFwiUmVwb3J0XCJcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBWaWV3cztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBhZGRTdHVkeUdyb3VwLCBjbG9zZVBvcHVwIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnMvaW5kZXhcIjtcbmltcG9ydCB7IHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcblxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcblxuaW1wb3J0IENyZWF0ZVN0dWR5R3JvdXBGb3JtIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL0NyZWF0ZVN0dWR5R3JvdXBGb3JtL0NyZWF0ZVN0dWR5R3JvdXBGb3JtXCI7XG5cbi8qKlxuICogVGhpcyBpcyBhIHNwZWNpZmljIHZpZXcgdGhhdCBpcyB1c2VkIGluIGEgcG9wdXAgdG8gYWxsb3cgYSB1c2VyIHRvIGVkaXQgYSBzdHVkeSBncm91cFxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDAyLzE0LzIwMjJcbiAqL1xuY29uc3QgRWRpdFN0dWR5R3JvdXBWaWV3ID0gKHsgZ3JvdXAgfSkgPT4ge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICAgIGNvbnN0IFtuYW1lLCBzZXROYW1lXSA9IHVzZVN0YXRlKGdyb3VwLm5hbWUpO1xuICAgIGNvbnN0IFtkZXNjcmlwdGlvbiwgc2V0RGVzY3JpcHRpb25dID0gdXNlU3RhdGUoZ3JvdXAuZGVzY3JpcHRpb24pO1xuICAgIGNvbnN0IFtzdWJqZWN0LCBzZXRTdWJqZWN0XSA9IHVzZVN0YXRlKGdyb3VwLnN1YmplY3QpO1xuICAgIGNvbnN0IFtwcml2YWN5LCBzZXRQcml2YWN5XSA9IHVzZVN0YXRlKGdyb3VwLnByaXZhY3kpO1xuICAgIGNvbnN0IFtjb3Vyc2VDb2RlLCBzZXRDb3Vyc2VDb2RlXSA9IHVzZVN0YXRlKGdyb3VwLmNvdXJzZUNvZGUpO1xuICAgIGNvbnN0IFtpc1R1dG9yR3JvdXAsIHNldElzVHV0b3JHcm91cF0gPSB1c2VTdGF0ZShncm91cC5pc1R1dG9yR3JvdXApO1xuICAgIGNvbnN0IFtpc09ubGluZUdyb3VwLCBzZXRJc09ubGluZUdyb3VwXSA9IHVzZVN0YXRlKGdyb3VwLmlzT25saW5lR3JvdXApO1xuICAgIGNvbnN0IFtncm91cENvbG9yLCBzZXRHcm91cENvbG9yXSA9IHVzZVN0YXRlKGdyb3VwLmdyb3VwQ29sb3IpO1xuXG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gYXBpIGNhbGwgdG8gdGhlIEVkaXQgc3R1ZHkgZ3JvdXAgcm91dGUsIHBhc3NpbmcgaW4gdGhlIGluZm9ybWF0aW9uIGVudGVyZWQgaW4gdGhlIGZvcm0gYW5kIHJlbmRlcmluZyB0aGUgY2xpZW50IGFjY29yZGluZyB0byB0aGUgcmVzcG9uc2UgcmVjZWl2ZWRcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzE0LzIwMjJcbiAgICAgKiBAYXN5bmNcbiAgICAgKiAqL1xuICAgIGNvbnN0IHN1Ym1pdEVkaXRTdHVkeUdyb3VwID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIC8vUHJldmVudCBkZWZhdWx0IGZvcm0gYmVoYXZpb3JcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5FZGl0U3R1ZHlHcm91cCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHVkeUdyb3VwSWQ6IGdyb3VwLl9pZCxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGdyb3VwQ29sb3IsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgc3ViamVjdCxcbiAgICAgICAgICAgICAgICBwcml2YWN5U2V0dGluZzogcHJpdmFjeSxcbiAgICAgICAgICAgICAgICBjb3Vyc2U6IGNvdXJzZUNvZGUsXG4gICAgICAgICAgICAgICAgaXNUdXRvckdyb3VwLFxuICAgICAgICAgICAgICAgIGlzT25saW5lR3JvdXBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU3VjY2Vzc1N0dWR5R3JvdXBFZGl0ZWQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIGhpc3RvcnkuZ28oMCk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIG5hbWUgZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMTQvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZU5hbWVGaWVsZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXROYW1lKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBncm91cCBjb2xvciBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNC8yMDIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlR3JvdXBDb2xvciA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRHcm91cENvbG9yKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBkZXNjcmlwdGlvbiBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNC8yMDIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlRGVzY3JpcHRpb25GaWVsZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXREZXNjcmlwdGlvbihldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgc3ViamVjdCBmaWVsZCBpbiB0aGUgY3JlYXRlIHN0dWR5IGdyb3VwIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNC8yMDIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlU3ViamVjdEZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldFN1YmplY3QoZXZlbnQudGFyZ2V0Lm9wdGlvbnNbZXZlbnQudGFyZ2V0LnNlbGVjdGVkSW5kZXhdLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIHByaXZhY3kgZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMTQvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZVByaXZhY3kgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0UHJpdmFjeShldmVudC50YXJnZXQub3B0aW9uc1tldmVudC50YXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgY291cnNlIGNvZGUgZmllbGQgaW4gdGhlIGNyZWF0ZSBzdHVkeSBncm91cCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMTQvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUNvdXJzZUNvZGVGaWVsZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRDb3Vyc2VDb2RlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBpcyBvbmxpbmUgZ3JvdXAgc3dpdGNoIHZhbHVlIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzE0LzIwMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVJc09ubGluZUdyb3VwID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldElzT25saW5lR3JvdXAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgaXMgdHV0b3IgZ3JvdXAgc3dpdGNoIHZhbHVlIGluIHRoZSBjcmVhdGUgc3R1ZHkgZ3JvdXAgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzE0LzIwMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVJc1R1dG9yR3JvdXAgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0SXNUdXRvckdyb3VwKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LXN0dWR5Z3JvdXAtdmlld1wiPlxuICAgICAgICAgICAge2NvbnNvbGUubG9nKGdyb3VwKX1cbiAgICAgICAgICAgIDxDcmVhdGVTdHVkeUdyb3VwRm9ybVxuICAgICAgICAgICAgICAgIHN1Ym1pdENyZWF0ZVN0dWR5R3JvdXA9e3N1Ym1pdEVkaXRTdHVkeUdyb3VwfVxuICAgICAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgIHN1YmplY3Q9e3N1YmplY3R9XG4gICAgICAgICAgICAgICAgcHJpdmFjeT17cHJpdmFjeX1cbiAgICAgICAgICAgICAgICBjb3Vyc2VDb2RlPXtjb3Vyc2VDb2RlfVxuICAgICAgICAgICAgICAgIGlzVHV0b3JHcm91cD17aXNUdXRvckdyb3VwfVxuICAgICAgICAgICAgICAgIGlzT25saW5lR3JvdXA9e2lzT25saW5lR3JvdXB9XG4gICAgICAgICAgICAgICAgZ3JvdXBDb2xvcj17Z3JvdXBDb2xvcn1cbiAgICAgICAgICAgICAgICB1cGRhdGVOYW1lRmllbGQ9e3VwZGF0ZU5hbWVGaWVsZH1cbiAgICAgICAgICAgICAgICB1cGRhdGVEZXNjcmlwdGlvbkZpZWxkPXt1cGRhdGVEZXNjcmlwdGlvbkZpZWxkfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVN1YmplY3RGaWVsZD17dXBkYXRlU3ViamVjdEZpZWxkfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVByaXZhY3k9e3VwZGF0ZVByaXZhY3l9XG4gICAgICAgICAgICAgICAgdXBkYXRlQ291cnNlQ29kZUZpZWxkPXt1cGRhdGVDb3Vyc2VDb2RlRmllbGR9XG4gICAgICAgICAgICAgICAgdXBkYXRlSXNUdXRvckdyb3VwPXt1cGRhdGVJc1R1dG9yR3JvdXB9XG4gICAgICAgICAgICAgICAgdXBkYXRlSXNPbmxpbmVHcm91cD17dXBkYXRlSXNPbmxpbmVHcm91cH1cbiAgICAgICAgICAgICAgICB1cGRhdGVHcm91cENvbG9yPXt1cGRhdGVHcm91cENvbG9yfVxuICAgICAgICAgICAgICAgIHVzZXJTY2hvb2w9e251bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRWRpdFN0dWR5R3JvdXBWaWV3O1xuXG5jb25zdCBzdWJtaXREYXRhID0gKCkgPT4ge307XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vY29yZS9Gb3JtL0Zvcm1cIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXRcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGRcIjtcbmltcG9ydCBEcm9wZG93biBmcm9tIFwiLi4vLi4vY29yZS9Ecm9wZG93bi9Ecm9wZG93blwiO1xuaW1wb3J0IHsgTWVldGluZ0ZyZXF1ZW5jaWVzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvVGltZVwiO1xuXG5jb25zdCBDcmVhdGVNZWV0aW5nRm9ybSA9ICh7XG4gICAgZGF0ZSxcbiAgICB0aW1lLFxuICAgIGZyZXF1ZW5jeSxcbiAgICBkZXRhaWxzLFxuICAgIGxvY2F0aW9uLFxuICAgIHJvb21OdW1iZXIsXG4gICAgdXBkYXRlRGF0ZUZpZWxkLFxuICAgIHVwZGF0ZVRpbWVGaWVsZCxcbiAgICB1cGRhdGVGcmVxdWVuY3lGaWVsZCxcbiAgICB1cGRhdGVEZXRhaWxzRmllbGQsXG4gICAgdXBkYXRlTG9jYXRpb25GaWVsZCxcbiAgICB1cGRhdGVSb29tTnVtYmVyRmllbGQsXG4gICAgc3VibWl0Q3JlYXRlTWVldGluZyxcbiAgICBpc1JlY3VycmluZ01lZXRpbmdcbn0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNyZWF0ZS1tZWV0aW5nLWZvcm1cIj5cbiAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtzdWJtaXRDcmVhdGVNZWV0aW5nfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5EYXRlPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e2RhdGV9IG9uQ2hhbmdlPXt1cGRhdGVEYXRlRmllbGR9IHR5cGU9XCJkYXRlXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPlRpbWU8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17dGltZX0gb25DaGFuZ2U9e3VwZGF0ZVRpbWVGaWVsZH0gdHlwZT1cInRpbWVcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICAgICAge2lzUmVjdXJyaW5nTWVldGluZyAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+RnJlcXVlbmN5PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17Wy4uLk9iamVjdC52YWx1ZXMoTWVldGluZ0ZyZXF1ZW5jaWVzKV19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmcmVxdWVuY3l9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt1cGRhdGVGcmVxdWVuY3lGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+RGV0YWlsczwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e2RldGFpbHN9IG9uQ2hhbmdlPXt1cGRhdGVEZXRhaWxzRmllbGR9IGlzVGV4dEFyZWE9e3RydWV9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TG9jYXRpb248L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtsb2NhdGlvbn0gb25DaGFuZ2U9e3VwZGF0ZUxvY2F0aW9uRmllbGR9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+Um9vbSBOdW1iZXIgKGlmIGFwcGxpY2FibGUpPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17cm9vbU51bWJlcn0gb25DaGFuZ2U9e3VwZGF0ZVJvb21OdW1iZXJGaWVsZH0gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0+Q3JlYXRlPC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVNZWV0aW5nRm9ybTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCB7IHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBjbG9zZVBvcHVwIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBDcmVhdGVNZWV0aW5nRm9ybSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9DcmVhdGVNZWV0aW5nRm9ybS9DcmVhdGVNZWV0aW5nRm9ybVwiO1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IE1lZXRpbmdGcmVxdWVuY2llcyB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL1RpbWVcIjtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc3BlY2lmaWMgdmlldyB0aGF0IGlzIHVzZWQgaW4gYSBwb3B1cFxuICogdG8gYWxsb3cgYSB1c2VyIHRvIGNyZWF0ZSBhIG1lZXRpbmdcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAwMi8xNy8yMDIyXG4gKi9cbmNvbnN0IENyZWF0ZU1lZXRpbmdWaWV3ID0gKHsgZ3JvdXAsIGlzUmVjdXJyaW5nTWVldGluZyB9KSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gICAgY29uc3QgW2RhdGUsIHNldERhdGVdID0gdXNlU3RhdGUoXG4gICAgICAgIGlzUmVjdXJyaW5nTWVldGluZyAmJiBncm91cC5yZWN1cnJpbmdNZWV0aW5nID8gZ3JvdXAucmVjdXJyaW5nTWVldGluZy5kYXRlLnJlcGxhY2UoXCIvXCIsIFwiLVwiKSA6IFwiXCJcbiAgICApO1xuICAgIGNvbnN0IFt0aW1lLCBzZXRUaW1lXSA9IHVzZVN0YXRlKGlzUmVjdXJyaW5nTWVldGluZyAmJiBncm91cC5yZWN1cnJpbmdNZWV0aW5nID8gZ3JvdXAucmVjdXJyaW5nTWVldGluZy50aW1lIDogXCJcIik7XG5cbiAgICBjb25zdCBbZnJlcXVlbmN5LCBzZXRGcmVxdWVuY3ldID0gdXNlU3RhdGUoXG4gICAgICAgIGlzUmVjdXJyaW5nTWVldGluZyAmJiBncm91cC5yZWN1cnJpbmdNZWV0aW5nID8gZ3JvdXAucmVjdXJyaW5nTWVldGluZy5mcmVxdWVuY3kgOiBNZWV0aW5nRnJlcXVlbmNpZXMuRGFpbHlcbiAgICApO1xuICAgIGNvbnN0IFtkZXRhaWxzLCBzZXREZXRhaWxzXSA9IHVzZVN0YXRlKFxuICAgICAgICBpc1JlY3VycmluZ01lZXRpbmcgJiYgZ3JvdXAucmVjdXJyaW5nTWVldGluZyA/IGdyb3VwLnJlY3VycmluZ01lZXRpbmcuZGV0YWlscyA6IFwiXCJcbiAgICApO1xuICAgIGNvbnN0IFtsb2NhdGlvbiwgc2V0TG9jYXRpb25dID0gdXNlU3RhdGUoXG4gICAgICAgIGlzUmVjdXJyaW5nTWVldGluZyAmJiBncm91cC5yZWN1cnJpbmdNZWV0aW5nID8gZ3JvdXAucmVjdXJyaW5nTWVldGluZy5sb2NhdGlvbiA6IFwiXCJcbiAgICApO1xuICAgIGNvbnN0IFtyb29tTnVtYmVyLCBzZXRSb29tTnVtYmVyXSA9IHVzZVN0YXRlKFxuICAgICAgICBpc1JlY3VycmluZ01lZXRpbmcgJiYgZ3JvdXAucmVjdXJyaW5nTWVldGluZyA/IGdyb3VwLnJlY3VycmluZ01lZXRpbmcucm9vbU51bWJlciA6IFwiXCJcbiAgICApO1xuXG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gYXBpIGNhbGwgdG8gdGhlIGNyZWF0ZSBtZWV0aW5nIHJvdXRlLCBwYXNzaW5nIGluIHRoZSBpbmZvcm1hdGlvbiBlbnRlcmVkIGluIHRoZSBmb3JtIGFuZCByZW5kZXJpbmcgdGhlIGNsaWVudCBhY2NvcmRpbmcgdG8gdGhlIHJlc3BvbnNlIHJlY2VpdmVkXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNy8yMDIyXG4gICAgICogQGFzeW5jXG4gICAgICogKi9cbiAgICBjb25zdCBzdWJtaXRDcmVhdGVNZWV0aW5nID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGlmIChpc1JlY3VycmluZ01lZXRpbmcpXG4gICAgICAgICAgICBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICAgICAgUm91dGVzLlN0dWR5R3JvdXAuU2V0UmVjdXJyaW5nTWVldGluZyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGRheTogbmV3IERhdGUoZGF0ZSkuZ2V0RGF5KCksXG4gICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGUucmVwbGFjZSgvLS9nLCBcIi9cIiksXG4gICAgICAgICAgICAgICAgICAgIHRpbWUsXG4gICAgICAgICAgICAgICAgICAgIGZyZXF1ZW5jeSxcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHJvb21OdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHN0dWR5R3JvdXBJZDogZ3JvdXAuX2lkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU2V0UmVjdXJyaW5nTWVldGluZy5TdWNjZXNzLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNsb3NlUG9wdXAoKSk7XG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnkuZ28oMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgc2VuZFBvc3RSZXF1ZXN0KFxuICAgICAgICAgICAgICAgIFJvdXRlcy5TdHVkeUdyb3VwLkFkZE9uZVRpbWVNZWV0aW5nLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZGF5OiBuZXcgRGF0ZShkYXRlKS5nZXREYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF0ZS5yZXBsYWNlKC8tL2csIFwiL1wiKSxcbiAgICAgICAgICAgICAgICAgICAgdGltZSxcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHJvb21OdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHN0dWR5R3JvdXBJZDogZ3JvdXAuX2lkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuQWRkT25lVGltZU1lZXRpbmcuU3VjY2VzcyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LmdvKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgZGF0ZSBmaWVsZCBpbiB0aGUgY3JlYXRlIG1lZXRpbmcgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzE3LzIwMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVEYXRlRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0RGF0ZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgdGltZSBmaWVsZCBpbiB0aGUgY3JlYXRlIG1lZXRpbmcgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzE3LzIwMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVUaW1lRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0VGltZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgZnJlcXVlbmN5IHZhbHVlIGluIHRoZSBjcmVhdGUgbWVldGluZyBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMTcvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUZyZXF1ZW5jeUZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldEZyZXF1ZW5jeShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgZGV0YWlscyBmaWVsZCBpbiB0aGUgY3JlYXRlIG1lZXRpbmcgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzE3LzIwMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVEZXRhaWxzRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0RGV0YWlscyhldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgbG9jYXRpb24gZmllbGQgaW4gdGhlIGNyZWF0ZSBtZWV0aW5nIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNy8yMDIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlTG9jYXRpb25GaWVsZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRMb2NhdGlvbihldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgcm9vbSBudW1iZXIgZmllbGQgaW4gdGhlIGNyZWF0ZSBtZWV0aW5nIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNy8yMDIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlUm9vbU51bWJlckZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldFJvb21OdW1iZXIoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8Q3JlYXRlTWVldGluZ0Zvcm1cbiAgICAgICAgICAgICAgICBkYXRlPXtkYXRlfVxuICAgICAgICAgICAgICAgIHRpbWU9e3RpbWV9XG4gICAgICAgICAgICAgICAgZnJlcXVlbmN5PXtmcmVxdWVuY3l9XG4gICAgICAgICAgICAgICAgZGV0YWlscz17ZGV0YWlsc31cbiAgICAgICAgICAgICAgICBsb2NhdGlvbj17bG9jYXRpb259XG4gICAgICAgICAgICAgICAgcm9vbU51bWJlcj17cm9vbU51bWJlcn1cbiAgICAgICAgICAgICAgICB1cGRhdGVEYXRlRmllbGQ9e3VwZGF0ZURhdGVGaWVsZH1cbiAgICAgICAgICAgICAgICB1cGRhdGVUaW1lRmllbGQ9e3VwZGF0ZVRpbWVGaWVsZH1cbiAgICAgICAgICAgICAgICB1cGRhdGVGcmVxdWVuY3lGaWVsZD17dXBkYXRlRnJlcXVlbmN5RmllbGR9XG4gICAgICAgICAgICAgICAgdXBkYXRlRGV0YWlsc0ZpZWxkPXt1cGRhdGVEZXRhaWxzRmllbGR9XG4gICAgICAgICAgICAgICAgdXBkYXRlTG9jYXRpb25GaWVsZD17dXBkYXRlTG9jYXRpb25GaWVsZH1cbiAgICAgICAgICAgICAgICB1cGRhdGVSb29tTnVtYmVyRmllbGQ9e3VwZGF0ZVJvb21OdW1iZXJGaWVsZH1cbiAgICAgICAgICAgICAgICBzdWJtaXRDcmVhdGVNZWV0aW5nPXtzdWJtaXRDcmVhdGVNZWV0aW5nfVxuICAgICAgICAgICAgICAgIGlzUmVjdXJyaW5nTWVldGluZz17aXNSZWN1cnJpbmdNZWV0aW5nfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC8+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENyZWF0ZU1lZXRpbmdWaWV3O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0XCI7XG5pbXBvcnQgTGFiZWwgZnJvbSBcIi4uLy4uL2NvcmUvTGFiZWwvTGFiZWxcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkXCI7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSBcIi4uLy4uL2NvcmUvRHJvcGRvd24vRHJvcGRvd25cIjtcblxuY29uc3QgQ3JlYXRlUG9zdEZvcm0gPSAoe1xuICAgIHRpdGxlLFxuICAgIGJvZHksXG4gICAgY2F0ZWdvcnksXG4gICAgYXR0YWNobWVudCxcbiAgICB1cGRhdGVUaXRsZUZpZWxkLFxuICAgIHVwZGF0ZUJvZHlGaWVsZCxcbiAgICB1cGRhdGVDYXRlZ29yeUZpZWxkLFxuICAgIHVwZGF0ZUF0dGFjaG1lbnQsXG4gICAgc3VibWl0Q3JlYXRlUG9zdFxufSkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3JlYXRlLW1lZXRpbmctZm9ybVwiPlxuICAgICAgICAgICAgPEZvcm0gb25TdWJtaXQ9e3N1Ym1pdENyZWF0ZVBvc3R9PlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+VGl0bGU8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXt0aXRsZX0gb25DaGFuZ2U9e3VwZGF0ZVRpdGxlRmllbGR9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuXG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Cb2R5PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17Ym9keX0gb25DaGFuZ2U9e3VwZGF0ZUJvZHlGaWVsZH0gaXNUZXh0QXJlYT17dHJ1ZX0gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5DYXRlZ29yeTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17Y2F0ZWdvcnl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3VwZGF0ZUNhdGVnb3J5RmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17W1wiUHJvYmxlbVwiLCBcIkRpc2N1c3Npb25cIiwgXCJRdWVzdGlvblwiLCBcIkFubm91bmNlbWVudFwiXX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cblxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5BdHRhY2htZW50PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGhvdG9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImZpbGVJbnB1dCByaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdD1cIi5wbmcsIC5qcGcsIC5qcGVnXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInByb2ZpbGVQaWN0dXJlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3VwZGF0ZUF0dGFjaG1lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiaW1nUHJldmlld1wiIGlkPVwibGVmdFwiIHNyYz17YXR0YWNobWVudH0gYWx0PVwiXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5DcmVhdGU8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENyZWF0ZVBvc3RGb3JtO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQ3JlYXRlUG9zdEZvcm0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvQ3JlYXRlUG9zdEZvcm0vQ3JlYXRlUG9zdEZvcm1cIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IFBvc3RUeXBlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9Qb3N0VHlwZXNcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBjbG9zZVBvcHVwIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCB7IHNlbmRQb3N0UmVxdWVzdFdpdGhGb3JtRGF0YSB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc3BlY2lmaWMgdmlldyB0aGF0IGlzIHVzZWQgaW4gYSBwb3B1cFxuICogdG8gYWxsb3cgYSB1c2VyIHRvIGNyZWF0ZSBhIHBvc3QgZm9yIGEgc3R1ZHkgZ3JvdXBcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAwMi8xNy8yMDIyXG4gKi9cbmNvbnN0IENyZWF0ZVBvc3RWaWV3ID0gKHsgZ3JvdXAgfSkgPT4ge1xuICAgIGNvbnN0IFt0aXRsZSwgc2V0VGl0bGVdID0gdXNlU3RhdGUoXCJcIik7XG4gICAgY29uc3QgW2JvZHksIHNldEJvZHldID0gdXNlU3RhdGUoXCJcIik7XG4gICAgY29uc3QgW2NhdGVnb3J5LCBzZXRDYXRlZ29yeV0gPSB1c2VTdGF0ZShQb3N0VHlwZXMuUHJvYmxlbSk7XG4gICAgY29uc3QgW2F0dGFjaG1lbnQsIHNldEF0dGFjaG1lbnRdID0gdXNlU3RhdGUoXCJcIik7XG5cbiAgICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIGFuIGFwaSBjYWxsIHRvIHRoZSBjcmVhdGUgbWVldGluZyByb3V0ZSwgcGFzc2luZyBpbiB0aGUgaW5mb3JtYXRpb24gZW50ZXJlZCBpbiB0aGUgZm9ybSBhbmQgcmVuZGVyaW5nIHRoZSBjbGllbnQgYWNjb3JkaW5nIHRvIHRoZSByZXNwb25zZSByZWNlaXZlZFxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMTcvMjAyMlxuICAgICAqIEBhc3luY1xuICAgICAqICovXG4gICAgY29uc3Qgc3VibWl0Q3JlYXRlUG9zdCA9IGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJ0aXRsZVwiLCB0aXRsZSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcIm1lc3NhZ2VcIiwgYm9keSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcImNhdGVnb3J5XCIsIGNhdGVnb3J5KTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiYXR0YWNobWVudFwiLCBhdHRhY2htZW50KTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwic3R1ZHlHcm91cElkXCIsIGdyb3VwLl9pZCk7XG4gICAgICAgIGF3YWl0IHNlbmRQb3N0UmVxdWVzdFdpdGhGb3JtRGF0YShcbiAgICAgICAgICAgIFJvdXRlcy5TdHVkeUdyb3VwLkNyZWF0ZVBvc3QsXG4gICAgICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5DcmVhdGVQb3N0LlN1Y2Nlc3MsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGNsb3NlUG9wdXAoKSk7XG4gICAgICAgICAgICAgICAgaGlzdG9yeS5nbygwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSB0aXRsZSBmaWVsZCBpbiB0aGUgY3JlYXRlIHBvc3QgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzE3LzIwMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVUaXRsZUZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldFRpdGxlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBib2R5IGZpZWxkIGluIHRoZSBjcmVhdGUgcG9zdCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMDIvMTcvMjAyMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUJvZHlGaWVsZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRCb2R5KGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBjYXRlZ29yeSBmaWVsZCBpbiB0aGUgY3JlYXRlIHBvc3QgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzE3LzIwMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVDYXRlZ29yeUZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldENhdGVnb3J5KGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBhdHRhY2htZW50IHB1dCBpbiB0aGUgY3JlYXRlIHBvc3QgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzE3LzIwMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVBdHRhY2htZW50ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldEF0dGFjaG1lbnQoZXZlbnQudGFyZ2V0LmZpbGVzWzBdKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPENyZWF0ZVBvc3RGb3JtXG4gICAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgICBib2R5PXtib2R5fVxuICAgICAgICAgICAgY2F0ZWdvcnk9e2NhdGVnb3J5fVxuICAgICAgICAgICAgYXR0YWNobWVudD17YXR0YWNobWVudH1cbiAgICAgICAgICAgIHVwZGF0ZVRpdGxlRmllbGQ9e3VwZGF0ZVRpdGxlRmllbGR9XG4gICAgICAgICAgICB1cGRhdGVCb2R5RmllbGQ9e3VwZGF0ZUJvZHlGaWVsZH1cbiAgICAgICAgICAgIHVwZGF0ZUNhdGVnb3J5RmllbGQ9e3VwZGF0ZUNhdGVnb3J5RmllbGR9XG4gICAgICAgICAgICB1cGRhdGVBdHRhY2htZW50PXt1cGRhdGVBdHRhY2htZW50fVxuICAgICAgICAgICAgc3VibWl0Q3JlYXRlUG9zdD17c3VibWl0Q3JlYXRlUG9zdH1cbiAgICAgICAgLz5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3JlYXRlUG9zdFZpZXc7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1ZpZXdQb3N0Vmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVmlld1Bvc3RWaWV3LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1Byb2ZpbGVQaWN0dXJlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qcm9maWxlUGljdHVyZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9Qcm9maWxlUGljdHVyZS5zY3NzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IFByb2ZpbGVQaWN0dXJlID0gKHsgaW1hZ2UgfSkgPT4ge1xuICAgIHJldHVybiA8aW1nIGNsYXNzTmFtZT1cInByb2ZpbGUtcGljdHVyZVwiIHNyYz17XCJkYXRhOmltYWdlL3BuZztjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIiArIGltYWdlfSBhbHQ9XCJcIiAvPjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb2ZpbGVQaWN0dXJlO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qb3N0LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Qb3N0LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL1Bvc3Quc2Nzc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2hvd1ZpZXdQb3N0U3R1ZHlHcm91cFBvcHVwLCBzaG93Vmlld01lZXRpbmdzU3R1ZHlHcm91cFBvcHVwLCBzaG93Vmlld01lbWJlclBvcHVwIH0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbkJ1dHRvblR5cGVzO1xuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlXCI7XG5pbXBvcnQgUG9zdFR5cGVzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL1Bvc3RUeXBlc1wiO1xuaW1wb3J0IFF1ZXN0aW9uTWFya0ljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvUXVlc3Rpb25NYXJrXCI7IC8vUXVlc3Rpb25cbmltcG9ydCBDYW1wYWlnbkljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvQ2FtcGFpZ25cIjsgLy9Bbm5vdW5jZW1lbnRcbmltcG9ydCBDb21tZW50SWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9Db21tZW50XCI7IC8vRGlzY3Vzc2lvblxuaW1wb3J0IEVycm9ySWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9FcnJvclwiOyAvL1Byb2JsZW1cbmltcG9ydCBFdmVudE5vdGVJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL0V2ZW50Tm90ZVwiOyAvL01lZXRpbmdcblxuZXhwb3J0IGNvbnN0IGdldFBvc3RUeXBlRGV0YWlscyA9IChwb3N0KSA9PiB7XG4gICAgdmFyIGljb247XG4gICAgdmFyIHJlc3BvbnNlVHlwZTtcbiAgICBzd2l0Y2ggKHBvc3QudHlwZSkge1xuICAgICAgICBjYXNlIFBvc3RUeXBlcy5RdWVzdGlvbjpcbiAgICAgICAgICAgIGljb24gPSA8UXVlc3Rpb25NYXJrSWNvbiBjbGFzc05hbWU9XCJ0b3AtaWNvblwiIHN0eWxlPXt7IGNvbG9yOiBwb3N0LmNvbG9yIH19IC8+O1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gXCJBbnN3ZXJcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBvc3RUeXBlcy5Bbm5vdW5jZW1lbnQ6XG4gICAgICAgICAgICBpY29uID0gPENhbXBhaWduSWNvbiBjbGFzc05hbWU9XCJ0b3AtaWNvblwiIHN0eWxlPXt7IGNvbG9yOiBwb3N0LmNvbG9yIH19IC8+O1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gXCJDb21tZW50XCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBQb3N0VHlwZXMuRGlzY3Vzc2lvbjpcbiAgICAgICAgICAgIGljb24gPSA8Q29tbWVudEljb24gY2xhc3NOYW1lPVwidG9wLWljb25cIiBzdHlsZT17eyBjb2xvcjogcG9zdC5jb2xvciB9fSAvPjtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9IFwiUmVwbHlcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBvc3RUeXBlcy5Qcm9ibGVtOlxuICAgICAgICAgICAgaWNvbiA9IDxFcnJvckljb24gY2xhc3NOYW1lPVwidG9wLWljb25cIiBzdHlsZT17eyBjb2xvcjogcG9zdC5jb2xvciB9fSAvPjtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9IFwiU29sdXRpb25cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFBvc3RUeXBlcy5NZWV0aW5nOlxuICAgICAgICAgICAgaWNvbiA9IDxFdmVudE5vdGVJY29uIGNsYXNzTmFtZT1cInRvcC1pY29uXCIgc3R5bGU9e3sgY29sb3I6IHBvc3QuY29sb3IgfX0gLz47XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHsgaWNvbiwgcmVzcG9uc2VUeXBlIH07XG59O1xuY29uc3QgUG9zdCA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zb2xlLmxvZyhwcm9wcyk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWlubmVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwb3N0LWRldGFpbHNcIlxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnR5cGUgIT09IFBvc3RUeXBlcy5NZWV0aW5nID8gXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOSlcIiA6IHByb3BzLmdyb3VwLmNvbG9yICsgXCIxMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBwcm9wcy50eXBlID09PSBQb3N0VHlwZXMuTWVldGluZyAmJiBcIndoaXRlIDRweCBzb2xpZFwiXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy50eXBlICE9PSBQb3N0VHlwZXMuTWVldGluZykgZGlzcGF0Y2goc2hvd1ZpZXdQb3N0U3R1ZHlHcm91cFBvcHVwKHByb3BzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGRpc3BhdGNoKHNob3dWaWV3TWVldGluZ3NTdHVkeUdyb3VwUG9wdXAocHJvcHMuZ3JvdXApKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1pbm5lci1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldFBvc3RUeXBlRGV0YWlscyhwcm9wcykuaWNvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDEgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBwcm9wcy5jb2xvciB9fT57cHJvcHMudHlwZX08L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwicG9zdC10aXRsZVwiPntwcm9wcy50aXRsZX08L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicG9zdC1ib2R5XCI+e3Byb3BzLm1lc3NhZ2V9PC9wPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICB7Lyoge3Byb3BzLnR5cGUgIT09IFBvc3RUeXBlcy5NZWV0aW5nICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dWaWV3UG9zdFN0dWR5R3JvdXBQb3B1cCh7IHByb3BzIH0pKX0+QW5zd2VyPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICApfSAqL31cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy5hdHRhY2htZW50ICE9PSBcIlwiID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImF0dGFjaG1lbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17XCJkYXRhOmltYWdlL3BuZztjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIiArIHByb3BzLmF0dGFjaG1lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LW1ldGFpbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIHsvKiA8cCBjbGFzc05hbWU9XCJwb3N0LXJlc3BvbnNlLWNvdW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57cHJvcHMucmVzcG9uc2VzLmxlbmd0aH0gPC9zcGFuPlJlc3BvbnNlc1xuICAgICAgICAgICAgICAgICAgICA8L3A+ICovfVxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJwb3N0LWRhdGVcIj57cHJvcHMudGltZXN0YW1wICYmIG5ldyBEYXRlKHByb3BzLnRpbWVzdGFtcCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1jcmVhdG9yXCIgb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2hvd1ZpZXdNZW1iZXJQb3B1cChwcm9wcy5jcmVhdG9yKSl9PlxuICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZSBpbWFnZT17cHJvcHMuY3JlYXRvci5wcm9maWxlUGljdHVyZX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9zdDtcbiIsImltcG9ydCBcIi4vVmlld1Bvc3RWaWV3LnNjc3NcIjtcblxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUG9zdFR5cGVzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL1Bvc3RUeXBlc1wiO1xuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvRm9ybS9Gb3JtXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi8uLi9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0LmpzXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b24uanNcIjtcbmltcG9ydCBJbnB1dEZpZWxkIGZyb20gXCIuLi8uLi8uLi9jb3JlL0lucHV0RmllbGQvSW5wdXRGaWVsZC5qc1wiO1xuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlXCI7XG5pbXBvcnQgeyBnZXRQb3N0VHlwZURldGFpbHMgfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9GZWVkL1Bvc3RcIjtcbmltcG9ydCB7IHNob3dSZXBvcnRQb3B1cCwgc2hvd1ZpZXdNZW1iZXJQb3B1cCB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgUmVwb3J0VHlwZXMgfSBmcm9tIFwiLi4vLi4vUmVwb3J0L1JlcG9ydFR5cGVzXCI7XG5cbmNvbnN0IFZpZXdQb3N0VmlldyA9ICh7IHBvc3QgfSkgPT4ge1xuICAgIGNvbnN0IFtyZXNwb25zZSwgc2V0UmVzcG9uc2VdID0gdXNlU3RhdGUoXCJcIik7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gICAgY29uc3QgdXBkYXRlUmVzcG9uc2VGaWVsZCA9IChlKSA9PiB7XG4gICAgICAgIHNldFJlc3BvbnNlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3VibWl0UmVzcG9uc2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZXctcG9zdC10b3BcIj5cbiAgICAgICAgICAgICAgICB7Z2V0UG9zdFR5cGVEZXRhaWxzKHBvc3QpLmljb259XG4gICAgICAgICAgICAgICAgPGgxIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogcG9zdC5jb2xvciB9fT57cG9zdC50eXBlfTwvaDE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1jb250ZW50c1wiPlxuICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJwb3N0LXRpdGxlXCI+e3Bvc3QudGl0bGV9PC9oMT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJwb3N0LW1lc3NhZ2VcIj57cG9zdC5tZXNzYWdlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJwb3N0LWF0dGFjaG1lbnRcIiBzcmM9e1wiZGF0YTppbWFnZS9wbmc7Y2hhcnNldD11dGYtODtiYXNlNjQsXCIgKyBwb3N0LmF0dGFjaG1lbnR9IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWNyZWF0b3JcIiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzaG93Vmlld01lbWJlclBvcHVwKHBvc3QuY3JlYXRvcikpfT5cbiAgICAgICAgICAgICAgICAgICAgey8qIFRPRE8gLSBwb3B1bGF0ZSBwb3N0LmNyZWF0b3IgKi99XG4gICAgICAgICAgICAgICAgICAgIDxwPntwb3N0LmNyZWF0b3IubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZSBpbWFnZT17cG9zdC5jcmVhdG9yLnByb2ZpbGVQaWN0dXJlfSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7LyogPGRpdiBjbGFzc05hbWU9XCJyZXNwb25zZXMtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGgxPntnZXRQb3N0VHlwZURldGFpbHMocG9zdCkucmVzcG9uc2VUeXBlfXM6PC9oMT5cbiAgICAgICAgICAgICAgICB7cG9zdC5yZXNwb25zZXMubWFwKChyZXNwb25zZSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlc3BvbnNlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57cmVzcG9uc2UubWVzc2FnZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UHJvZmlsZVBpY3R1cmUgaW1hZ2U9e3Jlc3BvbnNlLnByb2ZpbGVQaWN0dXJlfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICA8Rm9ybSBzdHlsZT17eyBwYWRkaW5nOiAwLCBtYXJnaW46IDAgfX0gb25TdWJtaXQ9e3N1Ym1pdFJlc3BvbnNlfT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkIHN0eWxlPXt7IGZsZXg6IFwiNzAlXCIgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cmVzcG9uc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt1cGRhdGVSZXNwb25zZUZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17Z2V0UG9zdFR5cGVEZXRhaWxzKHBvc3QpLnJlc3BvbnNlVHlwZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5TdWJtaXQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9Gb3JtPlxuICAgICAgICAgICAgPC9kaXY+ICovfVxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goc2hvd1JlcG9ydFBvcHVwKFJlcG9ydFR5cGVzLlBPU1QsIHBvc3QpKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFJlcG9ydFxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBWaWV3UG9zdFZpZXc7XG4iLCJleHBvcnQgY29uc3QgUmVwb3J0VHlwZXMgPSB7XG4gICAgU1RVRFlfR1JPVVA6IFwiU3R1ZHkgR3JvdXBcIixcbiAgICBVU0VSOiBcIlVzZXJcIixcbiAgICBQT1NUOiBcIlBvc3RcIlxufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTG9hZGluZy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTG9hZGluZy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgdXNlQ29udGV4dCwgdXNlUmVmLCB1c2VMYXlvdXRFZmZlY3QsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgeyBoIGFzIGhhc093blByb3BlcnR5LCBFIGFzIEVtb3Rpb24sIGMgYXMgY3JlYXRlRW1vdGlvblByb3BzLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIFQgYXMgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtNjk5ZTY5MDguYnJvd3Nlci5lc20uanMnO1xuZXhwb3J0IHsgQyBhcyBDYWNoZVByb3ZpZGVyLCBUIGFzIFRoZW1lQ29udGV4dCwgYSBhcyBUaGVtZVByb3ZpZGVyLCBfIGFzIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSwgdSBhcyB1c2VUaGVtZSwgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBiIGFzIHdpdGhUaGVtZSB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LTY5OWU2OTA4LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0ICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgaW5zZXJ0U3R5bGVzLCBnZXRSZWdpc3RlcmVkU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5cbnZhciBwa2cgPSB7XG5cdG5hbWU6IFwiQGVtb3Rpb24vcmVhY3RcIixcblx0dmVyc2lvbjogXCIxMS43LjFcIixcblx0bWFpbjogXCJkaXN0L2Vtb3Rpb24tcmVhY3QuY2pzLmpzXCIsXG5cdG1vZHVsZTogXCJkaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCIsXG5cdGJyb3dzZXI6IHtcblx0XHRcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuY2pzLmpzXCIsXG5cdFx0XCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qc1wiXG5cdH0sXG5cdHR5cGVzOiBcInR5cGVzL2luZGV4LmQudHNcIixcblx0ZmlsZXM6IFtcblx0XHRcInNyY1wiLFxuXHRcdFwiZGlzdFwiLFxuXHRcdFwianN4LXJ1bnRpbWVcIixcblx0XHRcImpzeC1kZXYtcnVudGltZVwiLFxuXHRcdFwiX2lzb2xhdGVkLWhucnNcIixcblx0XHRcInR5cGVzLyouZC50c1wiLFxuXHRcdFwibWFjcm8uanNcIixcblx0XHRcIm1hY3JvLmQudHNcIixcblx0XHRcIm1hY3JvLmpzLmZsb3dcIlxuXHRdLFxuXHRzaWRlRWZmZWN0czogZmFsc2UsXG5cdGF1dGhvcjogXCJtaXRjaGVsbGhhbWlsdG9uIDxtaXRjaGVsbEBtaXRjaGVsbGhhbWlsdG9uLm1lPlwiLFxuXHRsaWNlbnNlOiBcIk1JVFwiLFxuXHRzY3JpcHRzOiB7XG5cdFx0XCJ0ZXN0OnR5cGVzY3JpcHRcIjogXCJkdHNsaW50IHR5cGVzXCJcblx0fSxcblx0ZGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvcnVudGltZVwiOiBcIl43LjEzLjEwXCIsXG5cdFx0XCJAZW1vdGlvbi9jYWNoZVwiOiBcIl4xMS43LjFcIixcblx0XHRcIkBlbW90aW9uL3NlcmlhbGl6ZVwiOiBcIl4xLjAuMlwiLFxuXHRcdFwiQGVtb3Rpb24vc2hlZXRcIjogXCJeMS4xLjBcIixcblx0XHRcIkBlbW90aW9uL3V0aWxzXCI6IFwiXjEuMC4wXCIsXG5cdFx0XCJAZW1vdGlvbi93ZWFrLW1lbW9pemVcIjogXCJeMC4yLjVcIixcblx0XHRcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI6IFwiXjMuMy4xXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjogXCJeNy4wLjBcIixcblx0XHRyZWFjdDogXCI+PTE2LjguMFwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXNNZXRhOiB7XG5cdFx0XCJAYmFiZWwvY29yZVwiOiB7XG5cdFx0XHRvcHRpb25hbDogdHJ1ZVxuXHRcdH0sXG5cdFx0XCJAdHlwZXMvcmVhY3RcIjoge1xuXHRcdFx0b3B0aW9uYWw6IHRydWVcblx0XHR9XG5cdH0sXG5cdGRldkRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjogXCJeNy4xMy4xMFwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzXCI6IFwiMTEuNy4xXCIsXG5cdFx0XCJAZW1vdGlvbi9jc3MtcHJldHRpZmllclwiOiBcIjEuMC4xXCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJ2ZXJcIjogXCIxMS40LjBcIixcblx0XHRcIkBlbW90aW9uL3N0eWxlZFwiOiBcIjExLjYuMFwiLFxuXHRcdFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE2LjkuMTFcIixcblx0XHRkdHNsaW50OiBcIl4wLjMuMFwiLFxuXHRcdFwiaHRtbC10YWctbmFtZXNcIjogXCJeMS4xLjJcIixcblx0XHRyZWFjdDogXCIxNi4xNC4wXCIsXG5cdFx0XCJzdmctdGFnLW5hbWVzXCI6IFwiXjEuMS4xXCJcblx0fSxcblx0cmVwb3NpdG9yeTogXCJodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL3RyZWUvbWFpbi9wYWNrYWdlcy9yZWFjdFwiLFxuXHRwdWJsaXNoQ29uZmlnOiB7XG5cdFx0YWNjZXNzOiBcInB1YmxpY1wiXG5cdH0sXG5cdFwidW1kOm1haW5cIjogXCJkaXN0L2Vtb3Rpb24tcmVhY3QudW1kLm1pbi5qc1wiLFxuXHRwcmVjb25zdHJ1Y3Q6IHtcblx0XHRlbnRyeXBvaW50czogW1xuXHRcdFx0XCIuL2luZGV4LmpzXCIsXG5cdFx0XHRcIi4vanN4LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9qc3gtZGV2LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9faXNvbGF0ZWQtaG5ycy5qc1wiXG5cdFx0XSxcblx0XHR1bWROYW1lOiBcImVtb3Rpb25SZWFjdFwiXG5cdH1cbn07XG5cbnZhciBqc3ggPSBmdW5jdGlvbiBqc3godHlwZSwgcHJvcHMpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgaWYgKHByb3BzID09IG51bGwgfHwgIWhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3NMZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVtpXSA9IGFyZ3NbaV07XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgY3JlYXRlRWxlbWVudEFyZ0FycmF5KTtcbn07XG5cbnZhciB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSBmYWxzZTsgLy8gbWFpbnRhaW4gcGxhY2Ugb3ZlciByZXJlbmRlcnMuXG4vLyBpbml0aWFsIHJlbmRlciBmcm9tIGJyb3dzZXIsIGluc2VydEJlZm9yZSBjb250ZXh0LnNoZWV0LnRhZ3NbMF0gb3IgaWYgYSBzdHlsZSBoYXNuJ3QgYmVlbiBpbnNlcnRlZCB0aGVyZSB5ZXQsIGFwcGVuZENoaWxkXG4vLyBpbml0aWFsIGNsaWVudC1zaWRlIHJlbmRlciBmcm9tIFNTUiwgdXNlIHBsYWNlIG9mIGh5ZHJhdGluZyB0YWdcblxudmFyIEdsb2JhbCA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsICYmICggLy8gY2hlY2sgZm9yIGNsYXNzTmFtZSBhcyB3ZWxsIHNpbmNlIHRoZSB1c2VyIGlzXG4gIC8vIHByb2JhYmx5IHVzaW5nIHRoZSBjdXN0b20gY3JlYXRlRWxlbWVudCB3aGljaFxuICAvLyBtZWFucyBpdCB3aWxsIGJlIHR1cm5lZCBpbnRvIGEgY2xhc3NOYW1lIHByb3BcbiAgLy8gJEZsb3dGaXhNZSBJIGRvbid0IHJlYWxseSB3YW50IHRvIGFkZCBpdCB0byB0aGUgdHlwZSBzaW5jZSBpdCBzaG91bGRuJ3QgYmUgdXNlZFxuICBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHMuY3NzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyB0aGUgY3NzIHByb3Agb24gR2xvYmFsLCBkaWQgeW91IG1lYW4gdG8gdXNlIHRoZSBzdHlsZXMgcHJvcCBpbnN0ZWFkP1wiKTtcbiAgICB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10sIHVuZGVmaW5lZCwgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcbiAgLy8gYnV0IGl0IGlzIGJhc2VkIG9uIGEgY29uc3RhbnQgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSBhdCBydW50aW1lXG4gIC8vIGl0J3MgZWZmZWN0aXZlbHkgbGlrZSBoYXZpbmcgdHdvIGltcGxlbWVudGF0aW9ucyBhbmQgc3dpdGNoaW5nIHRoZW0gb3V0XG4gIC8vIHNvIGl0J3Mgbm90IGFjdHVhbGx5IGJyZWFraW5nIGFueXRoaW5nXG5cblxuICB2YXIgc2hlZXRSZWYgPSB1c2VSZWYoKTtcbiAgdXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5ID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsXCI7XG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBub25jZTogY2FjaGUuc2hlZXQubm9uY2UsXG4gICAgICBjb250YWluZXI6IGNhY2hlLnNoZWV0LmNvbnRhaW5lcixcbiAgICAgIHNwZWVkeTogY2FjaGUuc2hlZXQuaXNTcGVlZHlcbiAgICB9KTtcbiAgICB2YXIgcmVoeWRyYXRpbmcgPSBmYWxzZTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbZGF0YS1lbW90aW9uPVxcXCJcIiArIGtleSArIFwiIFwiICsgc2VyaWFsaXplZC5uYW1lICsgXCJcXFwiXVwiKTtcblxuICAgIGlmIChjYWNoZS5zaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgc2hlZXQuYmVmb3JlID0gY2FjaGUuc2hlZXQudGFnc1swXTtcbiAgICB9XG5cbiAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgcmVoeWRyYXRpbmcgPSB0cnVlOyAvLyBjbGVhciB0aGUgaGFzaCBzbyB0aGlzIG5vZGUgd29uJ3QgYmUgcmVjb2duaXphYmxlIGFzIHJlaHlkcmF0YWJsZSBieSBvdGhlciA8R2xvYmFsLz5zXG5cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBrZXkpO1xuICAgICAgc2hlZXQuaHlkcmF0ZShbbm9kZV0pO1xuICAgIH1cblxuICAgIHNoZWV0UmVmLmN1cnJlbnQgPSBbc2hlZXQsIHJlaHlkcmF0aW5nXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9O1xuICB9LCBbY2FjaGVdKTtcbiAgdXNlTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hlZXRSZWZDdXJyZW50ID0gc2hlZXRSZWYuY3VycmVudDtcbiAgICB2YXIgc2hlZXQgPSBzaGVldFJlZkN1cnJlbnRbMF0sXG4gICAgICAgIHJlaHlkcmF0aW5nID0gc2hlZXRSZWZDdXJyZW50WzFdO1xuXG4gICAgaWYgKHJlaHlkcmF0aW5nKSB7XG4gICAgICBzaGVldFJlZkN1cnJlbnRbMV0gPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2VyaWFsaXplZC5uZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGluc2VydCBrZXlmcmFtZXNcbiAgICAgIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZC5uZXh0LCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoc2hlZXQudGFncy5sZW5ndGgpIHtcbiAgICAgIC8vIGlmIHRoaXMgZG9lc24ndCBleGlzdCB0aGVuIGl0IHdpbGwgYmUgbnVsbCBzbyB0aGUgc3R5bGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICB2YXIgZWxlbWVudCA9IHNoZWV0LnRhZ3Nbc2hlZXQudGFncy5sZW5ndGggLSAxXS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICBzaGVldC5iZWZvcmUgPSBlbGVtZW50O1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9XG5cbiAgICBjYWNoZS5pbnNlcnQoXCJcIiwgc2VyaWFsaXplZCwgc2hlZXQsIGZhbHNlKTtcbiAgfSwgW2NhY2hlLCBzZXJpYWxpemVkLm5hbWVdKTtcbiAgcmV0dXJuIG51bGw7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgR2xvYmFsLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25HbG9iYWwnO1xufVxuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplU3R5bGVzKGFyZ3MpO1xufVxuXG52YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24ga2V5ZnJhbWVzKCkge1xuICB2YXIgaW5zZXJ0YWJsZSA9IGNzcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIHZhciBuYW1lID0gXCJhbmltYXRpb24tXCIgKyBpbnNlcnRhYmxlLm5hbWU7IC8vICRGbG93Rml4TWVcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBcIkBrZXlmcmFtZXMgXCIgKyBuYW1lICsgXCJ7XCIgKyBpbnNlcnRhYmxlLnN0eWxlcyArIFwifVwiLFxuICAgIGFuaW06IDEsXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiX0VNT19cIiArIHRoaXMubmFtZSArIFwiX1wiICsgdGhpcy5zdHlsZXMgKyBcIl9FTU9fXCI7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGNsYXNzbmFtZXMgPSBmdW5jdGlvbiBjbGFzc25hbWVzKGFyZ3MpIHtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV07XG4gICAgaWYgKGFyZyA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YXIgdG9BZGQgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmcuc3R5bGVzICE9PSB1bmRlZmluZWQgJiYgYXJnLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdZb3UgaGF2ZSBwYXNzZWQgc3R5bGVzIGNyZWF0ZWQgd2l0aCBgY3NzYCBmcm9tIGBAZW1vdGlvbi9yZWFjdGAgcGFja2FnZSB0byB0aGUgYGN4YC5cXG4nICsgJ2BjeGAgaXMgbWVhbnQgdG8gY29tcG9zZSBjbGFzcyBuYW1lcyAoc3RyaW5ncykgc28geW91IHNob3VsZCBjb252ZXJ0IHRob3NlIHN0eWxlcyB0byBhIGNsYXNzIG5hbWUgYnkgcGFzc2luZyB0aGVtIHRvIHRoZSBgY3NzYCByZWNlaXZlZCBmcm9tIDxDbGFzc05hbWVzLz4gY29tcG9uZW50LicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b0FkZCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGFyZykge1xuICAgICAgICAgICAgICBpZiAoYXJnW2tdICYmIGspIHtcbiAgICAgICAgICAgICAgICB0b0FkZCAmJiAodG9BZGQgKz0gJyAnKTtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRvQWRkID0gYXJnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQWRkKSB7XG4gICAgICBjbHMgJiYgKGNscyArPSAnICcpO1xuICAgICAgY2xzICs9IHRvQWRkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xuXG5mdW5jdGlvbiBtZXJnZShyZWdpc3RlcmVkLCBjc3MsIGNsYXNzTmFtZSkge1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtdO1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWUpO1xuXG4gIGlmIChyZWdpc3RlcmVkU3R5bGVzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgcmV0dXJuIHJhd0NsYXNzTmFtZSArIGNzcyhyZWdpc3RlcmVkU3R5bGVzKTtcbn1cblxudmFyIE5vb3AgPSBmdW5jdGlvbiBOb29wKCkge1xuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBDbGFzc05hbWVzID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIHZhciBoYXNSZW5kZXJlZCA9IGZhbHNlO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3NzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcblxuICAgIHtcbiAgICAgIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgfTtcblxuICB2YXIgY3ggPSBmdW5jdGlvbiBjeCgpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoY2FjaGUucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgfTtcblxuICB2YXIgY29udGVudCA9IHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgdGhlbWU6IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KVxuICB9O1xuICB2YXIgZWxlID0gcHJvcHMuY2hpbGRyZW4oY29udGVudCk7XG4gIGhhc1JlbmRlcmVkID0gdHJ1ZTtcbiAgdmFyIHBvc3NpYmx5U3R5bGVFbGVtZW50ID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTm9vcCwgbnVsbCk7XG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIHBvc3NpYmx5U3R5bGVFbGVtZW50LCBlbGUpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIENsYXNzTmFtZXMuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNsYXNzTmFtZXMnO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7IC8vICMxNzI3IGZvciBzb21lIHJlYXNvbiBKZXN0IGV2YWx1YXRlcyBtb2R1bGVzIHR3aWNlIGlmIHNvbWUgY29uc3VtaW5nIG1vZHVsZSBnZXRzIG1vY2tlZCB3aXRoIGplc3QubW9ja1xuXG4gIHZhciBpc0plc3QgPSB0eXBlb2YgamVzdCAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgaWYgKGlzQnJvd3NlciAmJiAhaXNKZXN0KSB7XG4gICAgLy8gZ2xvYmFsVGhpcyBoYXMgd2lkZSBicm93c2VyIHN1cHBvcnQgLSBodHRwczovL2Nhbml1c2UuY29tLz9zZWFyY2g9Z2xvYmFsVGhpcywgTm9kZS5qcyAxMiBhbmQgbGF0ZXJcbiAgICB2YXIgZ2xvYmFsQ29udGV4dCA9IC8vICRGbG93SWdub3JlXG4gICAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgOiBpc0Jyb3dzZXIgPyB3aW5kb3cgOiBnbG9iYWw7XG4gICAgdmFyIGdsb2JhbEtleSA9IFwiX19FTU9USU9OX1JFQUNUX1wiICsgcGtnLnZlcnNpb24uc3BsaXQoJy4nKVswXSArIFwiX19cIjtcblxuICAgIGlmIChnbG9iYWxDb250ZXh0W2dsb2JhbEtleV0pIHtcbiAgICAgIGNvbnNvbGUud2FybignWW91IGFyZSBsb2FkaW5nIEBlbW90aW9uL3JlYWN0IHdoZW4gaXQgaXMgYWxyZWFkeSBsb2FkZWQuIFJ1bm5pbmcgJyArICdtdWx0aXBsZSBpbnN0YW5jZXMgbWF5IGNhdXNlIHByb2JsZW1zLiBUaGlzIGNhbiBoYXBwZW4gaWYgbXVsdGlwbGUgJyArICd2ZXJzaW9ucyBhcmUgdXNlZCwgb3IgaWYgbXVsdGlwbGUgYnVpbGRzIG9mIHRoZSBzYW1lIHZlcnNpb24gYXJlICcgKyAndXNlZC4nKTtcbiAgICB9XG5cbiAgICBnbG9iYWxDb250ZXh0W2dsb2JhbEtleV0gPSB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCB7IENsYXNzTmFtZXMsIEdsb2JhbCwganN4IGFzIGNyZWF0ZUVsZW1lbnQsIGNzcywganN4LCBrZXlmcmFtZXMgfTtcbiIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDaXJjdWxhclByb2dyZXNzJywgc2xvdCk7XG59XG5jb25zdCBjaXJjdWxhclByb2dyZXNzQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLCBbJ3Jvb3QnLCAnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnc3ZnJywgJ2NpcmNsZScsICdjaXJjbGVEZXRlcm1pbmF0ZScsICdjaXJjbGVJbmRldGVybWluYXRlJywgJ2NpcmNsZURpc2FibGVTaHJpbmsnXSk7XG5leHBvcnQgZGVmYXVsdCBjaXJjdWxhclByb2dyZXNzQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlU2hyaW5rXCIsIFwic2l6ZVwiLCBcInN0eWxlXCIsIFwidGhpY2tuZXNzXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdO1xuXG5sZXQgXyA9IHQgPT4gdCxcbiAgICBfdCxcbiAgICBfdDIsXG4gICAgX3QzLFxuICAgIF90NDtcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IGtleWZyYW1lcywgY3NzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2lyY3VsYXJQcm9ncmVzc0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFNJWkUgPSA0NDtcbmNvbnN0IGNpcmN1bGFyUm90YXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QgfHwgKF90ID0gX2BcbiAgMCUge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgfVxuYCkpO1xuY29uc3QgY2lyY3VsYXJEYXNoS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QyIHx8IChfdDIgPSBfYFxuICAwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMXB4LCAyMDBweDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgfVxuXG4gIDUwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMTAwcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAtMTVweDtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHN0cm9rZS1kYXNoYXJyYXk6IDEwMHB4LCAyMDBweDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogLTEyNXB4O1xuICB9XG5gKSk7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHZhcmlhbnQsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZVNocmlua1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSxcbiAgICBzdmc6IFsnc3ZnJ10sXG4gICAgY2lyY2xlOiBbJ2NpcmNsZScsIGBjaXJjbGUke2NhcGl0YWxpemUodmFyaWFudCl9YCwgZGlzYWJsZVNocmluayAmJiAnY2lyY2xlRGlzYWJsZVNocmluayddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBDaXJjdWxhclByb2dyZXNzUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHtcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nKVxufSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmIGNzcyhfdDMgfHwgKF90MyA9IF9gXG4gICAgICBhbmltYXRpb246ICR7MH0gMS40cyBsaW5lYXIgaW5maW5pdGU7XG4gICAgYCksIGNpcmN1bGFyUm90YXRlS2V5ZnJhbWUpKTtcbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NTVkcgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnU3ZnJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuc3ZnXG59KSh7XG4gIGRpc3BsYXk6ICdibG9jaycgLy8gS2VlcHMgdGhlIHByb2dyZXNzIGNlbnRlcmVkXG5cbn0pO1xuY29uc3QgQ2lyY3VsYXJQcm9ncmVzc0NpcmNsZSA9IHN0eWxlZCgnY2lyY2xlJywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdDaXJjbGUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmNpcmNsZSwgc3R5bGVzW2BjaXJjbGUke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5kaXNhYmxlU2hyaW5rICYmIHN0eWxlcy5jaXJjbGVEaXNhYmxlU2hyaW5rXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgc3Ryb2tlOiAnY3VycmVudENvbG9yJ1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHtcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdzdHJva2UtZGFzaG9mZnNldCcpXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiB7XG4gIC8vIFNvbWUgZGVmYXVsdCB2YWx1ZSB0aGF0IGxvb2tzIGZpbmUgd2FpdGluZyBmb3IgdGhlIGFuaW1hdGlvbiB0byBraWNrcyBpbi5cbiAgc3Ryb2tlRGFzaGFycmF5OiAnODBweCwgMjAwcHgnLFxuICBzdHJva2VEYXNob2Zmc2V0OiAwIC8vIEFkZCB0aGUgdW5pdCB0byBmaXggYSBFZGdlIDE2IGFuZCBiZWxvdyBidWcuXG5cbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiAhb3duZXJTdGF0ZS5kaXNhYmxlU2hyaW5rICYmIGNzcyhfdDQgfHwgKF90NCA9IF9gXG4gICAgICBhbmltYXRpb246ICR7MH0gMS40cyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbiAgICBgKSwgY2lyY3VsYXJEYXNoS2V5ZnJhbWUpKTtcbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuXG5jb25zdCBDaXJjdWxhclByb2dyZXNzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2lyY3VsYXJQcm9ncmVzcyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcydcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICBkaXNhYmxlU2hyaW5rID0gZmFsc2UsXG4gICAgc2l6ZSA9IDQwLFxuICAgIHN0eWxlLFxuICAgIHRoaWNrbmVzcyA9IDMuNixcbiAgICB2YWx1ZSA9IDAsXG4gICAgdmFyaWFudCA9ICdpbmRldGVybWluYXRlJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGRpc2FibGVTaHJpbmssXG4gICAgc2l6ZSxcbiAgICB0aGlja25lc3MsXG4gICAgdmFsdWUsXG4gICAgdmFyaWFudFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGNpcmNsZVN0eWxlID0ge307XG4gIGNvbnN0IHJvb3RTdHlsZSA9IHt9O1xuICBjb25zdCByb290UHJvcHMgPSB7fTtcblxuICBpZiAodmFyaWFudCA9PT0gJ2RldGVybWluYXRlJykge1xuICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSAyICogTWF0aC5QSSAqICgoU0laRSAtIHRoaWNrbmVzcykgLyAyKTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBjaXJjdW1mZXJlbmNlLnRvRml4ZWQoMyk7XG4gICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gYCR7KCgxMDAgLSB2YWx1ZSkgLyAxMDAgKiBjaXJjdW1mZXJlbmNlKS50b0ZpeGVkKDMpfXB4YDtcbiAgICByb290U3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgtOTBkZWcpJztcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplXG4gICAgfSwgcm9vdFN0eWxlLCBzdHlsZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzU1ZHLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3ZnLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHZpZXdCb3g6IGAke1NJWkUgLyAyfSAke1NJWkUgLyAyfSAke1NJWkV9ICR7U0laRX1gLFxuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNpcmNsZSxcbiAgICAgICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjeDogU0laRSxcbiAgICAgICAgY3k6IFNJWkUsXG4gICAgICAgIHI6IChTSVpFIC0gdGhpY2tuZXNzKSAvIDIsXG4gICAgICAgIGZpbGw6IFwibm9uZVwiLFxuICAgICAgICBzdHJva2VXaWR0aDogdGhpY2tuZXNzXG4gICAgICB9KVxuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2lyY3VsYXJQcm9ncmVzcy5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2hyaW5rIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICogVGhpcyBvbmx5IHdvcmtzIGlmIHZhcmlhbnQgaXMgYGluZGV0ZXJtaW5hdGVgLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVNocmluazogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLmJvb2wsIHByb3BzID0+IHtcbiAgICBpZiAocHJvcHMuZGlzYWJsZVNocmluayAmJiBwcm9wcy52YXJpYW50ICYmIHByb3BzLnZhcmlhbnQgIT09ICdpbmRldGVybWluYXRlJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTVVJOiBZb3UgaGF2ZSBwcm92aWRlZCB0aGUgYGRpc2FibGVTaHJpbmtgIHByb3AgJyArICd3aXRoIGEgdmFyaWFudCBvdGhlciB0aGFuIGBpbmRldGVybWluYXRlYC4gVGhpcyB3aWxsIGhhdmUgbm8gZWZmZWN0LicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSWYgdXNpbmcgYSBudW1iZXIsIHRoZSBwaXhlbCB1bml0IGlzIGFzc3VtZWQuXG4gICAqIElmIHVzaW5nIGEgc3RyaW5nLCB5b3UgbmVlZCB0byBwcm92aWRlIHRoZSBDU1MgdW5pdCwgZS5nICczcmVtJy5cbiAgICogQGRlZmF1bHQgNDBcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIHRoaWNrbmVzcyBvZiB0aGUgY2lyY2xlLlxuICAgKiBAZGVmYXVsdCAzLjZcbiAgICovXG4gIHRoaWNrbmVzczogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3IgZm9yIHRoZSBkZXRlcm1pbmF0ZSB2YXJpYW50LlxuICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogVXNlIGluZGV0ZXJtaW5hdGUgd2hlbiB0aGVyZSBpcyBubyBwcm9ncmVzcyB2YWx1ZS5cbiAgICogQGRlZmF1bHQgJ2luZGV0ZXJtaW5hdGUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ2lyY3VsYXJQcm9ncmVzczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wic3hcIl07XG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBwcm9wVG9TdHlsZUZ1bmN0aW9uIH0gZnJvbSAnLi4vZ2V0VGhlbWVWYWx1ZSc7XG5cbmNvbnN0IHNwbGl0UHJvcHMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBzeXN0ZW1Qcm9wczoge30sXG4gICAgb3RoZXJQcm9wczoge31cbiAgfTtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHByb3BUb1N0eWxlRnVuY3Rpb25bcHJvcF0pIHtcbiAgICAgIHJlc3VsdC5zeXN0ZW1Qcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQub3RoZXJQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRTeFByb3AocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHN4OiBpblN4XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCB7XG4gICAgc3lzdGVtUHJvcHMsXG4gICAgb3RoZXJQcm9wc1xuICB9ID0gc3BsaXRQcm9wcyhvdGhlcik7XG4gIGxldCBmaW5hbFN4O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGluU3gpKSB7XG4gICAgZmluYWxTeCA9IFtzeXN0ZW1Qcm9wcywgLi4uaW5TeF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGluU3ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBmaW5hbFN4ID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGluU3goLi4uYXJncyk7XG5cbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzeXN0ZW1Qcm9wcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzeXN0ZW1Qcm9wcywgcmVzdWx0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZpbmFsU3ggPSBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIGluU3gpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdGhlclByb3BzLCB7XG4gICAgc3g6IGZpbmFsU3hcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3gsIHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4vdXNlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJveChvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGRlZmF1bHRUaGVtZSxcbiAgICBkZWZhdWx0Q2xhc3NOYW1lID0gJ011aUJveC1yb290JyxcbiAgICBnZW5lcmF0ZUNsYXNzTmFtZVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgQm94Um9vdCA9IHN0eWxlZCgnZGl2Jykoc3R5bGVGdW5jdGlvblN4KTtcbiAgY29uc3QgQm94ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm94KGluUHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcblxuICAgIGNvbnN0IF9leHRlbmRTeFByb3AgPSBleHRlbmRTeFByb3AoaW5Qcm9wcyksXG4gICAgICAgICAge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdidcbiAgICB9ID0gX2V4dGVuZFN4UHJvcCxcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9leHRlbmRTeFByb3AsIF9leGNsdWRlZCk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQm94Um9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzTmFtZSwgZ2VuZXJhdGVDbGFzc05hbWUgPyBnZW5lcmF0ZUNsYXNzTmFtZShkZWZhdWx0Q2xhc3NOYW1lKSA6IGRlZmF1bHRDbGFzc05hbWUpLFxuICAgICAgdGhlbWU6IHRoZW1lXG4gICAgfSwgb3RoZXIpKTtcbiAgfSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJveC5wcm9wVHlwZXNcbiAgLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuICA9IHtcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAgIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMuZnVuY10pXG4gIH0gOiB2b2lkIDA7XG4gIHJldHVybiBCb3g7XG59IiwiaW1wb3J0IHsgY3JlYXRlQm94IH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHsgdW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yIGFzIENsYXNzTmFtZUdlbmVyYXRvciB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnLi4vc3R5bGVzJztcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKi9cblxuY29uc3QgQm94ID0gY3JlYXRlQm94KHtcbiAgZGVmYXVsdFRoZW1lLFxuICBkZWZhdWx0Q2xhc3NOYW1lOiAnTXVpQm94LXJvb3QnLFxuICBnZW5lcmF0ZUNsYXNzTmFtZTogQ2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlXG59KTtcbmV4cG9ydCBkZWZhdWx0IEJveDsiLCJpbXBvcnQgXCIuL0xvYWRpbmcuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IENpcmN1bGFyUHJvZ3Jlc3MgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvQ2lyY3VsYXJQcm9ncmVzc1wiO1xuaW1wb3J0IEJveCBmcm9tIFwiQG11aS9tYXRlcmlhbC9Cb3hcIjtcblxuY29uc3QgTG9hZGluZyA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvYWRpbmdcIj5cbiAgICAgICAgICAgIDxCb3ggc3g9e3sgb3ZlcmZsb3c6IFwiaGlkZGVuXCIgfX0+XG4gICAgICAgICAgICAgICAgPENpcmN1bGFyUHJvZ3Jlc3Mgc3g9e3sgY29sb3I6IFwiI2Q0YWE4Y1wiIH19IC8+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRpbmc7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1ZpZXdNZWV0aW5nVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVmlld01lZXRpbmdWaWV3LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHNob3dDb25maXJtYXRpb25Qb3B1cCwgc2hvd1ZpZXdNZWV0aW5nc1N0dWR5R3JvdXBQb3B1cCB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgeyBEYXlzLCBNZWV0aW5nRnJlcXVlbmNpZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9UaW1lXCI7XG5pbXBvcnQgeyBnZXROZXh0TWVldGluZywgc2VuZERlbGV0ZVJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vSGVscGVyXCI7XG5pbXBvcnQgRXZlbnROb3RlSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9FdmVudE5vdGVcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IFwiLi9WaWV3TWVldGluZ1ZpZXcuc2Nzc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcblxuLyoqXG4gKiBUaGlzIGlzIGEgc3BlY2lmaWMgdmlldyB0aGF0IGlzIHVzZWQgaW4gYSBwb3B1cFxuICogdG8gYWxsb3cgYSB1c2VyIHRvIHZpZXcgYWxsIHRoZSBtZWV0aW5ncyBpbiBhIHN0dWR5IGdyb3VwXG4gKiBAcGFyYW0ge09iamVjdH0gZ3JvdXAgVGhlIGdyb3VwIHRvIHJlZmVyZW5jZSB0aGUgbWVldGluZ3NcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAwMi8yMy8yMDIyXG4gKi9cbmNvbnN0IFZpZXdNZWV0aW5nVmlldyA9ICh7IGdyb3VwIH0pID0+IHtcbiAgICBjb25zdCBbbmV4dE1lZXRpbmcsIHNldE5leHRNZWV0aW5nXSA9IHVzZVN0YXRlKFwiQWxsIENsZWFyIVwiKTtcbiAgICBjb25zdCB1c2VyID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlci51c2VyKTtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldE5leHRNZWV0aW5nKGdldE5leHRNZWV0aW5nKGdyb3VwKSk7XG4gICAgfSwgW10pO1xuXG4gICAgY29uc3QgZ2V0UmVjdXJyaW5nTWVldGluZ0ZyZXF1ZW5jeUpTWCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGdyb3VwLnJlY3VycmluZ01lZXRpbmcpIHtcbiAgICAgICAgICAgIGlmIChncm91cC5yZWN1cnJpbmdNZWV0aW5nLmZyZXF1ZW5jeSA9PT0gTWVldGluZ0ZyZXF1ZW5jaWVzLkRhaWx5KSByZXR1cm4gPD5FdmVyeSBkYXk8Lz47XG5cbiAgICAgICAgICAgIGlmIChncm91cC5yZWN1cnJpbmdNZWV0aW5nLmZyZXF1ZW5jeSA9PT0gTWVldGluZ0ZyZXF1ZW5jaWVzLldlZWtseSlcbiAgICAgICAgICAgICAgICByZXR1cm4gPD5FdmVyeSB7Z3JvdXAucmVjdXJyaW5nTWVldGluZy5kYXl9PC8+O1xuXG4gICAgICAgICAgICBpZiAoZ3JvdXAucmVjdXJyaW5nTWVldGluZy5mcmVxdWVuY3kgPT09IE1lZXRpbmdGcmVxdWVuY2llcy5Nb250aGx5KVxuICAgICAgICAgICAgICAgIHJldHVybiA8Pk9uIHRoZSB7bmV3IERhdGUoZ3JvdXAucmVjdXJyaW5nTWVldGluZy5kYXRlKS5nZXREYXRlfXRoIG9mIGV2ZXJ5IG1vbnRoLjwvPjtcblxuICAgICAgICAgICAgaWYgKGdyb3VwLnJlY3VycmluZ01lZXRpbmcuZnJlcXVlbmN5ID09PSBNZWV0aW5nRnJlcXVlbmNpZXMuWWVhcmx5KVxuICAgICAgICAgICAgICAgIHJldHVybiA8Pk9uIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nLmRhdGV9IG9mIGV2ZXJ5IHllYXIuPC8+O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IHN1Ym1pdERlbGV0ZU9uZVRpbWVNZWV0aW5nID0gKG1lZXRpbmdJZCkgPT4ge1xuICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgIHNob3dDb25maXJtYXRpb25Qb3B1cChcbiAgICAgICAgICAgICAgICBhc3luYyAoY29uZmlybWVkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZW5kRGVsZXRlUmVxdWVzdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5EZWxldGVNZWV0aW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3R1ZHlHcm91cElkOiBncm91cC5faWQsIG1lZXRpbmdJZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuU3R1ZHlHcm91cC5TdWNjZXNzRGVsZXRlTWVldGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2goMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBkaXNwYXRjaChzaG93Vmlld01lZXRpbmdzU3R1ZHlHcm91cFBvcHVwKGdyb3VwKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIkNvbmZpcm0gRGVsZXRpb25cIixcbiAgICAgICAgICAgICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIG1lZXRpbmc/XCJcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlldy1tZWV0aW5nLXRvcFwiPlxuICAgICAgICAgICAgICAgIDxFdmVudE5vdGVJY29uIGNsYXNzTmFtZT1cInRvcC1pY29uXCIgc3R5bGU9e3sgY29sb3I6IGdyb3VwLmdyb3VwQ29sb3IgfX0gLz5cbiAgICAgICAgICAgICAgICA8aDEgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBncm91cC5ncm91cENvbG9yIH19Pk1lZXRpbmcgU2NoZWR1bGUgZm9yIHtncm91cC5uYW1lfTwvaDE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZy1jb250YWluZXIgbmV4dC1tZWV0aW5nLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxoMT5OZXh0IE1lZXRpbmc6PC9oMT5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZ1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lZXRpbmctdGltZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RGF0ZTogPC9zcGFuPiB7bmV4dE1lZXRpbmcuZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlRpbWU6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmV4dE1lZXRpbmcudGltZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkxvY2F0aW9uOiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge25leHRNZWV0aW5nLmxvY2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZWV0aW5nLWRldGFpbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkRldGFpbHM6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmV4dE1lZXRpbmcuZGV0YWlsc31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAge2dyb3VwLnJlY3VycmluZ01lZXRpbmcgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZy1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgxPlJlY3VycmluZyBTY2hlZHVsZTo8L2gxPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZWV0aW5nLXRpbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RnJlcXVlbmN5OiA8L3NwYW4+IHtnZXRSZWN1cnJpbmdNZWV0aW5nRnJlcXVlbmN5SlNYKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UaW1lOiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nLnRpbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Mb2NhdGlvbjogPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z3JvdXAucmVjdXJyaW5nTWVldGluZy5sb2NhdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZy1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkRldGFpbHM6IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2dyb3VwLnJlY3VycmluZ01lZXRpbmcuZGV0YWlsc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9uZS10aW1lLW1lZXRpbmdzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxoMT5PbmUtdGltZSBNZWV0aW5nczo8L2gxPlxuXG4gICAgICAgICAgICAgICAge2dyb3VwLm93bmVyICYmXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLm93bmVyLl9pZCA9PT0gdXNlci5faWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAubWVldGluZ3MubWFwKChtZWV0aW5nKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9uZS10aW1lLW1lZXRpbmctY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvbmUtdGltZS1tZWV0aW5nXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RGF0ZTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttZWV0aW5nLmRhdGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UaW1lPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge21lZXRpbmcudGltZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZWxldGUtbWVldGluZy1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdERlbGV0ZU9uZVRpbWVNZWV0aW5nKG1lZXRpbmcuX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlbGV0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmlld01lZXRpbmdWaWV3O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9WaWV3TWVtYmVyVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVmlld01lbWJlclZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlXCI7XG5pbXBvcnQgXCIuL1ZpZXdNZW1iZXJWaWV3LnNjc3NcIjtcbmltcG9ydCB7IHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgY2xvc2VQb3B1cCwgc2hvd1JlcG9ydFBvcHVwIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBSZXBvcnRUeXBlcyB9IGZyb20gXCIuLi8uLi9SZXBvcnQvUmVwb3J0VHlwZXNcIjtcblxuY29uc3QgVmlld01lbWJlclZpZXcgPSAoeyBtZW1iZXIgfSkgPT4ge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICAgIGNvbnN0IGNyZWF0ZUNvbnZlcnNhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgc2VuZFBvc3RSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLk1lc3NhZ2UuQ3JlYXRlQ29udmVyc2F0aW9uLFxuICAgICAgICAgICAgeyByZWNlaXZlcklkOiBtZW1iZXIuX2lkIH0sXG4gICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLk1lc3NhZ2UuU3VjY2Vzc0NyZWF0ZUNvbnZlcnNhdGlvbixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKFwiL21lc3NhZ2VcIik7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlldy1tZW1iZXItdmlldy1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVtYmVyLWRldGFpbHNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lbWJlci1wcmltYXJ5LWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgPFByb2ZpbGVQaWN0dXJlIGltYWdlPXttZW1iZXIucHJvZmlsZVBpY3R1cmV9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxoMT57bWVtYmVyLm5hbWV9PC9oMT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lbWJlci1zZWNvbmRhcnktaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICA8cD57bWVtYmVyLmVtYWlsfTwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3B0aW9ucyBzaWRlLWJ5LXNpZGVcIj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufSBvbkNsaWNrPXtjcmVhdGVDb252ZXJzYXRpb259PlxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0eXBlPXtCdXR0b25UeXBlcy5EZXN0cnVjaXZlfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzaG93UmVwb3J0UG9wdXAoUmVwb3J0VHlwZXMuVVNFUiwgbWVtYmVyKSl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICBSZXBvcnRcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmlld01lbWJlclZpZXc7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1JlcG9ydFZpZXcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1JlcG9ydFZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vUmVwb3J0Vmlldy5zY3NzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlc1wiO1xuaW1wb3J0IHsgc2VuZFBvc3RSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uLy4uL0hlbHBlclwiO1xuaW1wb3J0IHsgY2xvc2VQb3B1cCB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vY29yZS9Gb3JtL0Zvcm1cIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0XCI7XG5pbXBvcnQgTGFiZWwgZnJvbSBcIi4uLy4uL2NvcmUvTGFiZWwvTGFiZWxcIjtcblxuY29uc3QgUmVwb3J0VmlldyA9ICh7IHR5cGUsIHJlcG9ydERhdGEgfSkgPT4ge1xuICAgIGNvbnN0IFtjb21tZW50LCBzZXRDb21tZW50XSA9IHVzZVN0YXRlKFwiXCIpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICAgIGNvbnN0IHN1Ym1pdFJlcG9ydCA9IChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuUmVwb3J0LlNlbmRSZXBvcnQsXG4gICAgICAgICAgICB7IGlkOiByZXBvcnREYXRhLl9pZCwgY29tbWVudCwgcmVwb3J0VHlwZTogdHlwZSB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5SZXBvcnQuRW1haWxTZW50LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXBvcnQtdmlld1wiPlxuICAgICAgICAgICAgPGgxPlBsZWFzZSBhZGQgYSBjb21tZW50IGZvciB0aGUgcmVhc29uIHlvdSBhcmUgcmVwb3J0aW5nIHRoaXMge3R5cGV9PC9oMT5cbiAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtzdWJtaXRSZXBvcnR9PlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+Q29tbWVudHM6PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCBvbkNoYW5nZT17KGUpID0+IHNldENvbW1lbnQoZS50YXJnZXQudmFsdWUpfSB2YWx1ZT17Y29tbWVudH0gaXNUZXh0QXJlYT17dHJ1ZX0gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5Eb25lPC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZXBvcnRWaWV3O1xuIiwiaW1wb3J0IFwiLi9Qb3B1cC5zY3NzXCI7XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGNsb3NlUG9wdXAsIHNob3dKb2luU3R1ZHlHcm91cFBvcHVwIH0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBDcmVhdGVTdHVkeUdyb3VwVmlldyBmcm9tIFwiLi4vU3R1ZHkvQ3JlYXRlU3R1ZHlHcm91cFZpZXdcIjtcbmltcG9ydCBKb2luU3R1ZHlHcm91cFZpZXcgZnJvbSBcIi4uL1N0dWR5L2pvaW5TdHVkeUdyb3VwVmlldy9Kb2luU3R1ZHlHcm91cFZpZXdcIjtcbmltcG9ydCBJbnB1dFZpZXcgZnJvbSBcIi4uL0lucHV0L0lucHV0Vmlld1wiO1xuaW1wb3J0IENvbmZpcm1hdGlvbkZvcm0gZnJvbSBcIi4uL0NvbmZpcm1hdGlvbkZvcm0vQ29uZmlybWF0aW9uRm9ybVwiO1xuXG5pbXBvcnQgdmlld3MgZnJvbSBcIi4uL1ZpZXdzXCI7XG5pbXBvcnQgRWRpdFN0dWR5R3JvdXAgZnJvbSBcIi4uLy4uL1ZpZXdzL1N0dWR5R3JvdXAvRWRpdFN0dWR5R3JvdXAvRWRpdFN0dWR5R3JvdXBWaWV3XCI7XG5pbXBvcnQgQ3JlYXRlTWVldGluZ1ZpZXcgZnJvbSBcIi4uL1N0dWR5R3JvdXAvQ3JlYXRlTWVldGluZ1ZpZXcvQ3JlYXRlTWVldGluZ1ZpZXdcIjtcbmltcG9ydCBDcmVhdGVQb3N0VmlldyBmcm9tIFwiLi4vU3R1ZHlHcm91cC9DcmVhdGVQb3N0Vmlldy9DcmVhdGVQb3N0Vmlld1wiO1xuaW1wb3J0IFZpZXdQb3N0VmlldyBmcm9tIFwiLi4vU3R1ZHlHcm91cC9WaWV3UG9zdFZpZXcvVmlld1Bvc3RWaWV3XCI7XG5pbXBvcnQgTG9hZGluZyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Mb2FkaW5nL0xvYWRpbmdcIjtcbmltcG9ydCBWaWV3TWVldGluZ1ZpZXcgZnJvbSBcIi4uL1N0dWR5R3JvdXAvVmlld01lZXRpbmdWaWV3L1ZpZXdNZWV0aW5nVmlld1wiO1xuaW1wb3J0IFZpZXdNZW1iZXJWaWV3IGZyb20gXCIuLi9TdHVkeUdyb3VwL01lbWJlcnMvVmlld01lbWJlclZpZXdcIjtcbmltcG9ydCBSZXBvcnRWaWV3IGZyb20gXCIuLi9SZXBvcnQvUmVwb3J0Vmlld1wiO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHByZXNlbnRhdGlvbmFsIGNvbXBvbmVudCB0aGF0IHByZXNlbnRzIGRpZmZlcmVudCBwb3B1cCB2aWV3cyBhY2NvcmRpbmcgdG8gdGhlXG4gKiB2aWV3IHByb3BlcnR5IGluIHRoZSBwb3B1cFJlZHVjZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2hvd2luZyB0cnVlIGlmIHRoZSBwb3B1cCBpcyBjdXJyZW50bHkgc2hvd2luZyBvbiB0aGUgc2NyZWVuIGFuZCBmYWxzZSBvdGhlcndpc2VcbiAqIEBwYXJhbSB7SlNYfSBjaGlsZHJlbiBjb250ZW50IG9mIHRoZSBwb3B1cFxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDExLzI1LzIwMjFcbiAqL1xuY29uc3QgUG9wdXAgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHZpZXcsIHBheWxvYWQsIHNob3dUb3AgfSA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUucG9wdXBSZWR1Y2VyKTtcbiAgICBjb25zdCBpc0xvYWRpbmcgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLm5vdGlmaWNhdGlvblJlZHVjZXIubG9hZGluZyk7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgbGV0IHBvcHVwVmlldyA9IDw+PC8+O1xuXG4gICAgc3dpdGNoICh2aWV3KSB7XG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5DcmVhdGU6XG4gICAgICAgICAgICBwb3B1cFZpZXcgPSA8Q3JlYXRlU3R1ZHlHcm91cFZpZXcgLz47XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB2aWV3cy5Qb3B1cC5TdHVkeUdyb3VwLkpvaW46XG4gICAgICAgICAgICBwb3B1cFZpZXcgPSA8Sm9pblN0dWR5R3JvdXBWaWV3IGdyb3VwPXtwYXlsb2FkfSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5FZGl0OlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gPEVkaXRTdHVkeUdyb3VwIGdyb3VwPXtwYXlsb2FkfSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5DcmVhdGVNZWV0aW5nOlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gPENyZWF0ZU1lZXRpbmdWaWV3IGdyb3VwPXtwYXlsb2FkLmdyb3VwfSBpc1JlY3VycmluZ01lZXRpbmc9e3BheWxvYWQuaXNSZWN1cnJpbmdNZWV0aW5nfSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5DcmVhdGVQb3N0OlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gPENyZWF0ZVBvc3RWaWV3IGdyb3VwPXtwYXlsb2FkfSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5WaWV3UG9zdDpcbiAgICAgICAgICAgIHBvcHVwVmlldyA9IDxWaWV3UG9zdFZpZXcgcG9zdD17cGF5bG9hZH0gLz47XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuVmlld01lZXRpbmdzOlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gPFZpZXdNZWV0aW5nVmlldyBncm91cD17cGF5bG9hZH0gLz47XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuVmlld01lbWJlcjpcbiAgICAgICAgICAgIHBvcHVwVmlldyA9IDxWaWV3TWVtYmVyVmlldyBtZW1iZXI9e3BheWxvYWR9IC8+O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSB2aWV3cy5Qb3B1cC5JbnB1dDpcbiAgICAgICAgICAgIHBvcHVwVmlldyA9IChcbiAgICAgICAgICAgICAgICA8SW5wdXRWaWV3XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXtwYXlsb2FkLmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0SW5wdXQ9e3BheWxvYWQuZGVmYXVsdElucHV0fVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaz17cGF5bG9hZC5jYWxsYmFja31cbiAgICAgICAgICAgICAgICAgICAgbGFiZWwyPXtwYXlsb2FkLmxhYmVsMn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2Ugdmlld3MuUG9wdXAuQ29uZmlybWF0aW9uOlxuICAgICAgICAgICAgcG9wdXBWaWV3ID0gKFxuICAgICAgICAgICAgICAgIDxDb25maXJtYXRpb25Gb3JtXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrPXtwYXlsb2FkLmNhbGxiYWNrfVxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17cGF5bG9hZC50aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT17cGF5bG9hZC5tZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICBpc0NvbmZpcm1hdGlvbj17cGF5bG9hZC5pc0NvbmZpcm1hdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgZmlyc3RCdXR0b25UaXRsZT17cGF5bG9hZC5maXJzdEJ1dHRvblRpdGxlfVxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRCdXR0b25UaXRsZT17cGF5bG9hZC5zZWNvbmRCdXR0b25UaXRsZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHZpZXdzLlBvcHVwLlJlcG9ydDpcbiAgICAgICAgICAgIHBvcHVwVmlldyA9IDxSZXBvcnRWaWV3IHR5cGU9e3BheWxvYWQudHlwZX0gcmVwb3J0RGF0YT17cGF5bG9hZC5yZXBvcnREYXRhfSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wdXAtd3JhcHBlclwiPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJiYWNrZ3JvdW5kIFwiICsgKHByb3BzLmlzU2hvd2luZyA/IFwiYWN0aXZlXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChjbG9zZVBvcHVwKCkpfVxuICAgICAgICAgICAgPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wicG9wdXAgXCIgKyAocHJvcHMuaXNTaG93aW5nID8gXCJhY3RpdmVcIiA6IFwiXCIpfT5cbiAgICAgICAgICAgICAgICB7c2hvd1RvcCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wdXAtdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+e3BheWxvYWQudGl0bGUgfHwgdmlld308L2gxPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAge2lzTG9hZGluZyA/IChcbiAgICAgICAgICAgICAgICAgICAgPExvYWRpbmcgLz5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcHVwLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJwb3B1cC1jbG9zZS1idXR0b25cIiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChjbG9zZVBvcHVwKCkpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBYXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgeyFwcm9wcy5jaGlsZHJlbiA/IHBvcHVwVmlldyA6IHByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3B1cDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTm90aWZpY2F0aW9uLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ob3RpZmljYXRpb24uc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgICBFUlJPUjogXCJFUlJPUlwiLFxuICAgIFNVQ0NFU1M6IFwiU1VDQ0VTU1wiXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9Ob3RpZmljYXRpb24uc2Nzc1wiO1xuaW1wb3J0IG5vdGlmaWNhdGlvblR5cGVzIGZyb20gXCIuL25vdGlmaWNhdGlvblR5cGVzXCI7XG5cbi8vUmVkdXhcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgaGlkZU5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5cbi8qKlxuICogUmVuZGVycyBhIG5vdGlmaWNhdGlvbiB2aWV3LCB3aGljaCB3aWxsIGJlIHNob3duIHdoZW5ldmVyIHRoZVxuICogc2hvd05vdGlmaWNhdGlvbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCB0byB0aGUgTm90aWZpY2F0aW9uUmVkdWNlci5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcHJvcHMuaXNTaG93aW5nIHRydWUgaWYgdGhlIG5vdGlmaWNhdGlvbiBpcyBjdXJyZW50bHkgYmVpbmdcbiAqIHNob3duXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMDEvMzAvMjAyMlxuICovXG5jb25zdCBOb3RpZmljYXRpb24gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB0eXBlID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLnR5cGUpO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLm5vdGlmaWNhdGlvblJlZHVjZXIubWVzc2FnZSk7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gICAgdmFyIGNsYXNzTmFtZSA9IFwiXCI7XG4gICAgY29uc3QgdGltZW91dCA9IHVzZVJlZigpO1xuXG4gICAgY29uc3QgY29uZmlndXJlVGltZW91dCA9ICgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQuY3VycmVudCk7XG5cbiAgICAgICAgdGltZW91dC5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaChoaWRlTm90aWZpY2F0aW9uKCkpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQuY3VycmVudCk7XG4gICAgICAgIH0sIDUwMDApO1xuICAgIH07XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2Ugbm90aWZpY2F0aW9uVHlwZXMuRVJST1I6XG4gICAgICAgICAgICBjb25maWd1cmVUaW1lb3V0KCk7XG4gICAgICAgICAgICBjbGFzc05hbWUgPSBcImVycm9yXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBub3RpZmljYXRpb25UeXBlcy5TVUNDRVNTOlxuICAgICAgICAgICAgY29uZmlndXJlVGltZW91dCgpO1xuICAgICAgICAgICAgY2xhc3NOYW1lID0gXCJzdWNjZXNzXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wibm90aWZpY2F0aW9uIFwiICsgY2xhc3NOYW1lICsgXCIgXCIgKyAocHJvcHMuaXNTaG93aW5nID8gXCJhY3RpdmVcIiA6IFwiXCIpfT5cbiAgICAgICAgICAgIDxoMT57bWVzc2FnZSB8fCBcIk5vIE1lc3NhZ2VcIn08L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9uO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ib21lLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ib21lLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1RvcEJhci5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vVG9wQmFyLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL01lbnUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL01lbnUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vTWVudS5zY3NzXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHNpZ25PdXQsIHNob3dTdWNjZXNzTm90aWZpY2F0aW9uLCBzaG93Q29uZmlybWF0aW9uUG9wdXAgfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBwZXJmb3JtU2lnbk91dCB9IGZyb20gXCIuLi8uLi8uLi9IZWxwZXJcIjtcbmltcG9ydCBQcm9maWxlUGljdHVyZSBmcm9tIFwiLi4vUHJvZmlsZVBpY3R1cmUvUHJvZmlsZVBpY3R1cmVcIjtcblxuY29uc3QgTWVudSA9ICh7IGlzU2hvd2luZywgc2V0SXNTaG93aW5nLCBjdXJyZW50UGFnZSwgdXNlciB9KSA9PiB7XG4gICAgY29uc3QgaXNMb2dnZWRJbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIuaXNMb2dnZWRJbik7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gICAgY29uc3Qgc2lnbk91dFVzZXIgPSAoY29uZmlybWVkKSA9PiB7XG4gICAgICAgIGlmIChjb25maXJtZWQpIHtcbiAgICAgICAgICAgIHBlcmZvcm1TaWduT3V0KCk7XG4gICAgICAgICAgICBzZXRJc1Nob3dpbmcoZmFsc2UpO1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKFwiL3N0dWR5XCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2lzU2hvd2luZyA/IFwiaXNTaG93aW5nIG1lbnVcIiA6IFwibWVudVwifT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpbmtzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL3N0dWR5XCIgY2xhc3NOYW1lPXtjdXJyZW50UGFnZSA9PT0gXCJzdHVkeVwiID8gXCJhY3RpdmUgbmF2LWl0ZW1cIiA6IFwibmF2LWl0ZW1cIn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5TdHVkeTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9zZWFyY2hcIiBjbGFzc05hbWU9e2N1cnJlbnRQYWdlID09PSBcInNlYXJjaFwiID8gXCJhY3RpdmUgbmF2LWl0ZW1cIiA6IFwibmF2LWl0ZW1cIn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5TZWFyY2g8L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvbWVzc2FnZVwiIGNsYXNzTmFtZT17Y3VycmVudFBhZ2UgPT09IFwibWVzc2FnZVwiID8gXCJhY3RpdmUgbmF2LWl0ZW1cIiA6IFwibmF2LWl0ZW1cIn0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5NZXNzYWdlPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAge2lzTG9nZ2VkSW4gPyAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlci1hY3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVzZXItaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmFtZS1hbmQtc2Nob29sXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm5hbWVcIj57dXNlci5uYW1lfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic2Nob29sXCI+e3VzZXIuc2Nob29sfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2ZpbGUtcGljLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvZmlsZVBpY3R1cmUgaW1hZ2U9e3VzZXIucHJvZmlsZVBpY3R1cmV9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1hdGlvblBvcHVwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25PdXRVc2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29uZmlybSBTaWduIE91dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHNpZ24gb3V0IG9mIFN0dWR5IFNwYWNlcz8gIFlvdSB3aWxsIGJlIG1pc3NlZC5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZyBvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9IG9uQ2xpY2s9eygpID0+IGhpc3RvcnkucHVzaChcIi9hY2NvdW50XCIpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5Mb2cgaW48L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtpc1Nob3dpbmcgPyBcImFjdGl2ZSBiYWNrZ3JvdW5kIG1lbnUtYmFja2dyb3VuZFwiIDogXCJiYWNrZ3JvdW5kIG1lbnUtYmFja2dyb3VuZFwifT48L2Rpdj5cbiAgICAgICAgPC8+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lbnU7XG4iLCJpbXBvcnQgXCIuL1RvcEJhci5zY3NzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcbmltcG9ydCBQcm9maWxlUGljdHVyZSBmcm9tIFwiLi4vUHJvZmlsZVBpY3R1cmUvUHJvZmlsZVBpY3R1cmVcIjtcblxuaW1wb3J0IE1lbnUgZnJvbSBcIi4vTWVudVwiO1xuY29uc3QgVG9wQmFyID0gKHsgY3VycmVudFBhZ2UsIGNvbG9yIH0pID0+IHtcbiAgICBjb25zdCB7IHVzZXIsIGlzTG9nZ2VkSW4gfSA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIpO1xuICAgIGNvbnN0IFttZW51SXNTaG93aW5nLCBzZXRNZW51SXNTaG93aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcC1iYXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndyYXBwZXJcIiBzdHlsZT17eyBib3JkZXJDb2xvcjogY29sb3IgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVmdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvXCIgc3R5bGU9e3sgdGV4dERlY29yYXRpb246IFwibm9uZVwiIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5TdHVkeSBTcGFjZXM8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvc3R1ZHlcIiBjbGFzc05hbWU9e2N1cnJlbnRQYWdlID09PSBcInN0dWR5XCIgPyBcImFjdGl2ZSBuYXYtaXRlbVwiIDogXCJuYXYtaXRlbVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TdHVkeTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPVwiL3NlYXJjaFwiIGNsYXNzTmFtZT17Y3VycmVudFBhZ2UgPT09IFwic2VhcmNoXCIgPyBcImFjdGl2ZSBuYXYtaXRlbVwiIDogXCJuYXYtaXRlbVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TZWFyY2g8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9tZXNzYWdlXCIgY2xhc3NOYW1lPXtjdXJyZW50UGFnZSA9PT0gXCJtZXNzYWdlXCIgPyBcImFjdGl2ZSBuYXYtaXRlbVwiIDogXCJuYXYtaXRlbVwifT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5NZXNzYWdlPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAge2lzTG9nZ2VkSW4gPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWVudUlzU2hvd2luZyghbWVudUlzU2hvd2luZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lbnVJc1Nob3dpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VySW5mb0NvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzY2hvb2xcIj57dXNlci5zY2hvb2x9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJuYW1lXCI+e3VzZXIubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZSBpbWFnZT17dXNlci5wcm9maWxlUGljdHVyZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImhhbWJ1cmdlclwiICsgXCIgXCIgKyAobWVudUlzU2hvd2luZyAmJiBcImFjdGl2ZUhhbWJ1cmdlclwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TWVudUlzU2hvd2luZyghbWVudUlzU2hvd2luZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJsaW5lMVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibGluZTJcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImxpbmUzXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5Mb2cgaW48L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8TWVudSBpc1Nob3dpbmc9e21lbnVJc1Nob3dpbmd9IHNldElzU2hvd2luZz17c2V0TWVudUlzU2hvd2luZ30gY3VycmVudFBhZ2U9e2N1cnJlbnRQYWdlfSB1c2VyPXt1c2VyfSAvPlxuICAgICAgICA8Lz5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVG9wQmFyO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9QYWdlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9QYWdlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgVG9wQmFyIGZyb20gXCIuLi9jb21wb25lbnRzL1RvcEJhci9Ub3BCYXJcIjtcbmltcG9ydCBcIi4vUGFnZS5zY3NzXCI7XG5cbi8qKlxuICogUmVuZGVycyBhIHBhZ2UuXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlciBhbmQgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMC8yMC8yMDIxXG4gKi9cbmNvbnN0IFBhZ2UgPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAge3Byb3BzLnRvcEJhciAmJiA8VG9wQmFyIGN1cnJlbnRQYWdlPXtwcm9wcy5jdXJyZW50UGFnZX0gLz59XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZVwiIHsuLi5wcm9wc30+XG4gICAgICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQYWdlO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2dpbkZvcm0uc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0xvZ2luRm9ybS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9Mb2dpbkZvcm0uc2Nzc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b24uanNcIjtcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcbmltcG9ydCBGb3JtIGZyb20gXCIuLi8uLi9jb3JlL0Zvcm0vRm9ybS5qc1wiO1xuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkLmpzXCI7XG5pbXBvcnQgTGFiZWwgZnJvbSBcIi4uLy4uL2NvcmUvTGFiZWwvTGFiZWwuanNcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0LmpzXCI7XG5cbi8qKlxuICogUmVuZGVycyBhIGxvZ2luIGZvcm0uXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMuZW1haWwgVGhlIGVtYWlsIGFkZHJlc3MgaW4gdGhlIGZvcm0uXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMucGFzc3dvcmQgVGhlIHBhc3N3b3JkIGluIHRoZSBmb3JtLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMuc3VibWl0TG9naW4gVXNlZCB0byBzdWJtaXQgdGhlIGxvZ2luIGZvcm0uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVFbWFpbEZpZWxkIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgZW1haWwgYWRkcmVzcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnVwZGF0ZVBhc3N3b3JkRmllbGQgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSBwYXNzd29yZC5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAqL1xuY29uc3QgTG9naW5Gb3JtID0gKHByb3BzKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dpbi1mb3JtXCI+XG4gICAgICAgICAgICA8Rm9ybSBvblN1Ym1pdD17cHJvcHMuc3VibWl0TG9naW59PlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+RW1haWw8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5lbWFpbH0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZUVtYWlsRmllbGR9IHR5cGU9XCJlbWFpbFwiIC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+UGFzc3dvcmQ8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0IHZhbHVlPXtwcm9wcy5wYXNzd29yZH0gb25DaGFuZ2U9e3Byb3BzLnVwZGF0ZVBhc3N3b3JkRmllbGR9IHR5cGU9XCJwYXNzd29yZFwiIC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIHsvKiB7cHJvcHMubG9naW5EaWRGYWlsfSAqL31cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9PlNpZ24gaW48L0J1dHRvbj5cbiAgICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luRm9ybTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXV0aFZpZXcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0F1dGhWaWV3LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTG9hZGluZy9Mb2FkaW5nXCI7XG5pbXBvcnQgXCIuL0F1dGhWaWV3LnNjc3NcIjtcblxuY29uc3QgQXV0aFZpZXcgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCBpc0xvYWRpbmcgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLm5vdGlmaWNhdGlvblJlZHVjZXIubG9hZGluZyk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhdXRoLXZpZXdcIj5cbiAgICAgICAgICAgIHtpc0xvYWRpbmcgPyAoXG4gICAgICAgICAgICAgICAgPExvYWRpbmcgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPGgxPlN0dWR5IFNwYWNlczwvaDE+XG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBdXRoVmlldztcbiIsImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHNpZ25Jbiwgc2lnbk91dCwgc2hvd0Vycm9yTm90aWZpY2F0aW9uLCBzaG93U3VjY2Vzc05vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5cbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXMuanNcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xuaW1wb3J0IExvZ2luRm9ybSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9Mb2dpbkZvcm0vTG9naW5Gb3JtLmpzXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzLmpzXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlcy5qc1wiO1xuaW1wb3J0IFZhbGlkYXRvciBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1ZhbGlkYXRvci5qc1wiO1xuaW1wb3J0IFZpZXdzIGZyb20gXCIuLi8uLi9WaWV3cy5qc1wiO1xuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi8uLi9jb3JlL0xhYmVsL0xhYmVsXCI7XG5pbXBvcnQgQXV0aFZpZXcgZnJvbSBcIi4uL0F1dGhWaWV3XCI7XG5pbXBvcnQgeyBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vSGVscGVyXCI7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG4vKipcbiAqIFVzZWQgdG8gZGlzcGxheSB0aGUgbG9naW4gZm9ybSBhbmQgbG9nIHRoZSB1c2VyIGluLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2xpZW50U2lkZUxvZ2luIFVzZWQgdG8gbG9nIHRoZSB1c2VyIGluIGZyb20gdGhlIGNsaWVudC1zaWRlIHBlcnNwZWN0aXZlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2xpZW50U2lkZUxvZ291dCBVc2VkIHRvIGxvZyB0aGUgdXNlciBvdXQgZnJvbSB0aGUgY2xpZW50LXNpZGUgcGVyc3BlY3RpdmUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZXRIb21lVmlldyBVc2VkIHRvIHNldCB0aGUgdmlldyBvZiB0aGUgaG9tZSBwYWdlLCBpZiB0aGUgdXNlciBwcmVzc2VzIHRoZSBjcmVhdGUgYWNjb3VudCBidXR0b25cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyIGFuZCBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAqL1xuY29uc3QgTG9naW5WaWV3ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgQkxBTksgPSBcIlwiO1xuICAgIGNvbnN0IFtlbWFpbCwgc2V0RW1haWxdID0gdXNlU3RhdGUoQkxBTkspO1xuICAgIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGUoQkxBTkspO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuXG4gICAgLyoqXG4gICAgICogU3VibWl0cyB0aGUgbG9naW4gcmVxdWVzdCB0byB0aGUgc2VydmVyIGZvciB2ZXJpZmljYXRpb24uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGZvcm0gc3VibWlzc2lvbiBldmVudCB0aGF0IHRyaWdnZXJzIHRoZSBsb2dpbi5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHN1Ym1pdExvZ2luID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgIC8vIFBSRVZFTlQgVEhFIERFRkFVTFQgRk9STSBTVUJNSVNTSU9OIEJFSEFWSU9SLlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5Mb2dpbixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzTG9naW4sXG4gICAgICAgICAgICBcIkVycm9yIGxvZ2dpbmcgaW46IENhbm5vdCBjb25uZWN0IHRvIHRoZSBzZXJ2ZXJcIixcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgeyBhdXRoZW50aWNhdGlvblRva2VuLCBhdXRoZW50aWNhdGlvblRva2VuRXhwaXJhdGlvbkRhdGUsIHVzZXIgfSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goc2lnbkluKHsgYXV0aGVudGljYXRpb25Ub2tlbiwgYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlLCB1c2VyIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGVtYWlsIGZpZWxkIGluIHRoZSBsb2dpbiBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVFbWFpbEZpZWxkID0gKGUpID0+IHtcbiAgICAgICAgc2V0RW1haWwoZS50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgcGFzc3dvcmQgZmllbGQgaW4gdGhlIGxvZ2luIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlclxuICAgICAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZVBhc3N3b3JkRmllbGQgPSAoZSkgPT4ge1xuICAgICAgICBzZXRQYXNzd29yZChlLnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhvbWUgdmlldyB0byB0aGUgc2lnbiB1cCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMC8yMS8yMDIxXG4gICAgICovXG4gICAgY29uc3Qgc2lnblVwQ2xpY2tlZCA9IChlKSA9PiB7XG4gICAgICAgIHByb3BzLnNldEhvbWVWaWV3KFZpZXdzLkhvbWUuQ3JlYXRlQWNjb3VudCk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxBdXRoVmlldz5cbiAgICAgICAgICAgIDxMb2dpbkZvcm1cbiAgICAgICAgICAgICAgICBlbWFpbD17ZW1haWx9XG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ9e3Bhc3N3b3JkfVxuICAgICAgICAgICAgICAgIHN1Ym1pdExvZ2luPXtzdWJtaXRMb2dpbn1cbiAgICAgICAgICAgICAgICB1cGRhdGVFbWFpbEZpZWxkPXt1cGRhdGVFbWFpbEZpZWxkfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVBhc3N3b3JkRmllbGQ9e3VwZGF0ZVBhc3N3b3JkRmllbGR9XG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm90aGVyLW9wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+RG9uJ3QgaGF2ZSBhbiBhY2NvdW50PzwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259IG9uQ2xpY2s9e3NpZ25VcENsaWNrZWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpZ24gVXBcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkp1c3QgbG9va2luZyB0byBicm93c2U8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLlByaW1hcnl9IG9uQ2xpY2s9eygpID0+IGhpc3RvcnkucHVzaChcIi9zZWFyY2hcIil9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlYXJjaFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvQXV0aFZpZXc+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luVmlldztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ3JlYXRlQWNjb3VudEZvcm0uc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NyZWF0ZUFjY291bnRGb3JtLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL0NyZWF0ZUFjY291bnRGb3JtLnNjc3NcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uLmpzXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5cbmltcG9ydCBGb3JtIGZyb20gXCIuLi8uLi9jb3JlL0Zvcm0vRm9ybS5qc1wiO1xuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkLmpzXCI7XG5pbXBvcnQgTGFiZWwgZnJvbSBcIi4uLy4uL2NvcmUvTGFiZWwvTGFiZWwuanNcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0LmpzXCI7XG5cbi8qKlxuICogUmVuZGVycyBhIGNyZWF0ZSBhY2NvdW50IGZvcm0uXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMuZW1haWwgVGhlIGVtYWlsIGFkZHJlc3MgaW4gdGhlIGZvcm0uXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMucGFzc3dvcmQgVGhlIHBhc3N3b3JkIGluIHRoZSBmb3JtLlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLmNvbmZpcm1QYXNzd29yZCBUaGUgdmFsdWUgb2YgdGhlIGNvbmZpcm0gcGFzc3dvcmQgZmllbGQgaW4gdGhlIGZvcm0uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy5zdWJtaXRBY2NvdW50Q3JlYXRpb24gVXNlZCB0byBzdWJtaXQgdGhlIEFjY291bnRDcmVhdGlvbiBmb3JtLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMudXBkYXRlRW1haWxGaWVsZCBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIGVtYWlsIGFkZHJlc3MuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVQYXNzd29yZEZpZWxkIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgcGFzc3dvcmQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVDb25maXJtUGFzc3dvcmRGaWVsZCBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIGNvbmZpcm0gcGFzc3dvcmQuXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTEvMTAvMjAyMVxuICovXG5jb25zdCBDcmVhdGVBY2NvdW50Rm9ybSA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3JlYXRlLWFjY291bnQtZm9ybVwiPlxuICAgICAgICAgICAgPEZvcm0gb25TdWJtaXQ9e3Byb3BzLnN1Ym1pdEFjY291bnRDcmVhdGlvbn0+XG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5FbWFpbDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3Byb3BzLmVtYWlsfSBvbkNoYW5nZT17cHJvcHMudXBkYXRlRW1haWxGaWVsZH0gdHlwZT1cImVtYWlsXCIgLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5QYXNzd29yZDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3Byb3BzLnBhc3N3b3JkfSBvbkNoYW5nZT17cHJvcHMudXBkYXRlUGFzc3dvcmRGaWVsZH0gdHlwZT1cInBhc3N3b3JkXCIgLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Db25maXJtIFBhc3N3b3JkPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Byb3BzLmNvbmZpcm1QYXNzd29yZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVDb25maXJtUGFzc3dvcmRGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuXG4gICAgICAgICAgICAgICAge3Byb3BzLmxvZ2luRGlkRmFpbH1cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9e0J1dHRvblR5cGVzLkNyZWF0aW9ufT5OZXh0PC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVBY2NvdW50Rm9ybTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3JcIjtcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgY3JlYXRlQWNjb3VudCwgc2hvd0Vycm9yTm90aWZpY2F0aW9uLCBzaG93U3VjY2Vzc05vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgQ3JlYXRlQWNjb3VudEZvcm0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvQ3JlYXRlQWNjb3VudEZvcm0vQ3JlYXRlQWNjb3VudEZvcm1cIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzLmpzXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzLmpzXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzLmpzXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b24uanNcIjtcbmltcG9ydCBWaWV3cyBmcm9tIFwiLi4vLi4vVmlld3MuanNcIjtcblxuaW1wb3J0IEF1dGhWaWV3IGZyb20gXCIuLi9BdXRoVmlld1wiO1xuaW1wb3J0IHsgc2VuZFBvc3RSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL0hlbHBlclwiO1xuXG4vKipcbiAqIFRoaXMgdmlldyBwcmVzZW50cyB0aGUgY3JlYXRlIGFjY291bnQgZm9ybSBvbiB0aGUgaG9tZSBwYWdlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZXRIb21lVmlldyBVc2VkIHRvIHNldCB0aGUgdmlldyBvZiB0aGlzIHBhZ2UsIGlmIHRoZSB1c2VyIHByZXNzZXMgdGhlIGxvZyBpbiBidXR0b25cbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMC8yMS8yMDIxXG4gKi9cbmNvbnN0IENyZWF0ZUFjY291bnRWaWV3ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgQkxBTksgPSBcIlwiO1xuICAgIGNvbnN0IFtlbWFpbCwgc2V0RW1haWxdID0gdXNlU3RhdGUoQkxBTkspO1xuICAgIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGUoQkxBTkspO1xuICAgIGNvbnN0IFtjb25maXJtUGFzc3dvcmQsIHNldENvbmZpcm1QYXNzd29yZF0gPSB1c2VTdGF0ZShCTEFOSyk7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJtaXRzIHRoZSBjcmVhdGUgYWNjb3VudCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgZm9yIHZlcmlmaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZm9ybSBzdWJtaXNzaW9uIGV2ZW50IHRoYXQgdHJpZ2dlcnMgdGhlIGxvZ2luLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHN1Ym1pdEFjY291bnRDcmVhdGlvbiA9IGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAvLyBQUkVWRU5UIFRIRSBERUZBVUxUIEZPUk0gU1VCTUlTU0lPTiBCRUhBVklPUi5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgLy8gRklSU1QsIENPTVBBUkUgVEhFIFBBU1NXT1JEIEFORCBDT05GSVJNIFBBU1NXT1JEIEZJRUxEU1xuICAgICAgICBpZiAocGFzc3dvcmQgPT09IEJMQU5LICYmIGNvbmZpcm1QYXNzd29yZCA9PT0gQkxBTksgJiYgZW1haWwgPT09IEJMQU5LKSB7XG4gICAgICAgICAgICBkaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24oXCJQbGVhc2UgZmlsbCBpbiB0aGUgaW5mb3JtYXRpb25cIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhc3N3b3JkICE9PSBjb25maXJtUGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKHNob3dFcnJvck5vdGlmaWNhdGlvbihcIlBhc3N3b3JkcyBkb24ndCBtYXRjaFwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5DcmVhdGVBY2NvdW50LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkX2NvbmZpcm1hdGlvbjogY29uZmlybVBhc3N3b3JkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlN1Y2Nlc3NBY2NvdW50Q3JlYXRlZCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdW52ZXJpZmllZFVzZXIgfSA9IGRhdGE7XG5cbiAgICAgICAgICAgICAgICBkaXNwYXRjaChjcmVhdGVBY2NvdW50KHVudmVyaWZpZWRVc2VyKSk7XG5cbiAgICAgICAgICAgICAgICBwcm9wcy5zZXRIb21lVmlldyhWaWV3cy5Ib21lLlZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGVtYWlsIGZpZWxkIGluIHRoZSBjcmVhdGUgYWNjb3VudCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyXG4gICAgICogQGRhdGUgICAxMC8yMS8yMDIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlRW1haWxGaWVsZCA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRFbWFpbChldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgcGFzc3dvcmQgZmllbGQgaW4gdGhlIGNyZWF0ZSBhY2NvdW50IGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVQYXNzd29yZEZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldFBhc3N3b3JkKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBjb25maXJtIHBhc3N3b3JkIGZpZWxkIGluIHRoZSBjcmVhdGUgYWNjb3VudCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTAvMjEvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUNvbmZpcm1QYXNzd29yZEZpZWxkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldENvbmZpcm1QYXNzd29yZChldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBob21lIHZpZXcgdG8gdGhlIHNpZ24gaW4gZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDEwLzIxLzIwMjFcbiAgICAgKi9cbiAgICBjb25zdCBzaWduSW5DbGlja2VkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHByb3BzLnNldEhvbWVWaWV3KFZpZXdzLkhvbWUuTG9naW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8QXV0aFZpZXc+XG4gICAgICAgICAgICA8cD5DcmVhdGUgWW91ciBBY2NvdW50PC9wPlxuICAgICAgICAgICAgPENyZWF0ZUFjY291bnRGb3JtXG4gICAgICAgICAgICAgICAgZW1haWw9e2VtYWlsfVxuICAgICAgICAgICAgICAgIHBhc3N3b3JkPXtwYXNzd29yZH1cbiAgICAgICAgICAgICAgICBjb25maXJtUGFzc3dvcmQ9e2NvbmZpcm1QYXNzd29yZH1cbiAgICAgICAgICAgICAgICBzdWJtaXRBY2NvdW50Q3JlYXRpb249e3N1Ym1pdEFjY291bnRDcmVhdGlvbn1cbiAgICAgICAgICAgICAgICB1cGRhdGVFbWFpbEZpZWxkPXt1cGRhdGVFbWFpbEZpZWxkfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVBhc3N3b3JkRmllbGQ9e3VwZGF0ZVBhc3N3b3JkRmllbGR9XG4gICAgICAgICAgICAgICAgdXBkYXRlQ29uZmlybVBhc3N3b3JkRmllbGQ9e3VwZGF0ZUNvbmZpcm1QYXNzd29yZEZpZWxkfVxuICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvdGhlci1vcHRpb25zXCI+XG4gICAgICAgICAgICAgICAgPHA+QWxyZWFkeSBoYXZlIGFuIGFjY291bnQ/PC9wPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuUHJpbWFyeX0gb25DbGljaz17c2lnbkluQ2xpY2tlZH0+XG4gICAgICAgICAgICAgICAgICAgIFNpZ24gSW5cbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0F1dGhWaWV3PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDcmVhdGVBY2NvdW50VmlldztcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgVmlld3MgZnJvbSBcIi4uLy4uL1ZpZXdzXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCBBdXRoVmlldyBmcm9tIFwiLi4vQXV0aFZpZXdcIjtcblxuLyoqXG4gKiBPbmNlIGEgdXNlciBjcmVhdGVzIGFuIGFjY291bnQsIHRoaXMgdmlldyB3aWxsIGJlIGRpc3BsYXllZCBvbiB0aGUgaG9tZSBwYWdlIHRvIGluZGljYXRlIHRoYXQgdGhlIHVzZXIgbmVlZHMgdG8gdmVyaWZ5IHRoZSBhY2NvdW50IHRvIGNvbnRpbnVlIHNldHRpbmcgaXQgdXBcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHNldEhvbWVWaWV3IFVzZWQgdG8gc2V0IHRoZSB2aWV3IG9mIHRoZSBob21lIHBhZ2UsIGlmIHRoZSB1c2VyIHByZXNzZXMgdGhlIGxvZyBpbiBidXR0b25cbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMS8wMi8yMDIxXG4gKi9cbmNvbnN0IFZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uVmlldyA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHVudmVyaWZpZWRVc2VyID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlci51bnZlcmlmaWVkVXNlcik7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPEF1dGhWaWV3PlxuICAgICAgICAgICAgPGgxPllvdSdyZSBhbG1vc3QgdGhlcmUhPC9oMT5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgIENoZWNrIHlvdXIgZW1haWw6IDxzdHJvbmc+e3VudmVyaWZpZWRVc2VyLmVtYWlsfTwvc3Ryb25nPiBmb3IgYSBsaW5rIHRvIGNvbnRpbnVlIHRoZSBzaWdudXAgcHJvY2Vzc1xuICAgICAgICAgICAgPC9wPlxuXG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwcm9wcy5zZXRIb21lVmlldyhWaWV3cy5Ib21lLkxvZ2luKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFJldHVyblxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvQXV0aFZpZXc+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uVmlldztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQWNjb3VudFNldHVwRm9ybS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQWNjb3VudFNldHVwRm9ybS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9BY2NvdW50U2V0dXBGb3JtLnNjc3NcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IEZpbGVCYXNlNjQgZnJvbSBcInJlYWN0LWZpbGUtYmFzZTY0XCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vY29yZS9Gb3JtL0Zvcm0uanNcIjtcbmltcG9ydCBJbnB1dEZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL0lucHV0RmllbGQvSW5wdXRGaWVsZC5qc1wiO1xuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi9jb3JlL0xhYmVsL0xhYmVsLmpzXCI7XG5pbXBvcnQgUm91dGVzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUm91dGVzL1JvdXRlcy5qc1wiO1xuaW1wb3J0IFRleHRJbnB1dCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dHMvVGV4dElucHV0L1RleHRJbnB1dC5qc1wiO1xuXG4vKipcbiAqIFJlbmRlcnMgYW4gYWNjb3VudCBzZXR1cCBmb3JtLlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BzLm5hbWUgVGhlIHZhbHVlIG9mIHRoZSBmdWxsIG5hbWUgZmllbGQgaW4gdGhlIGZvcm1cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcy5hcmVhQ29kZSBUaGUgdmFsdWUgb2YgdGhlIGFyZWEgY29kZSBmaWVsZCBpbiB0aGUgZm9ybVxuICogQHBhcmFtIHtib29sZWFufSBwcm9wcy5pczE4T3JPdmVyIFRoZSB2YWx1ZSBvZiB0aGUgaXMgMTggb3Igb3ZlciBzd2l0Y2ggaW4gdGhlIGZvcm0uXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcHMucHJvZmlsZVBpY3R1cmUgdGhlIGJpbmFyeSB2YWx1ZSBvZiB0aGUgdXBsb2FkZWQgcHJvZmlsZSBwaWN0dXJlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy5zdWJtaXRBY2NvdW50U2V0dXAgVXNlZCB0byBzdWJtaXQgdGhlIEFjY291bnQgU2V0dXAgZm9ybS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnVwZGF0ZU5hbWVGaWVsZCBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIG5hbWUgdmFsdWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBwcm9wcy51cGRhdGVBcmVhQ29kZUZpZWxkIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgYXJlYSBjb2RlIHZhbHVlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvcHMudXBkYXRlSXMxOE9yT3ZlciBUaGUgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIHZhbHVlIG9mIHRoZSBpcyAxOCBvciBvdmVyIHN3aXRjaC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb3BzLnVwZGF0ZVByb2ZpbGVQaWN0dXJlIFRoZSBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgcHJvZmlsZSBwaWN0dXJlLlxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDExLzEwLzIwMjFcbiAqL1xuY29uc3QgQWNjb3VudFNldHVwRm9ybSA9IChwcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8Rm9ybSBvblN1Ym1pdD17cHJvcHMuc3VibWl0QWNjb3VudFNldHVwfT5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPkZ1bGwgTmFtZTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3Byb3BzLm5hbWV9IG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVOYW1lRmllbGR9IHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPkFyZWEgQ29kZTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3Byb3BzLmFyZWFDb2RlfSBvbkNoYW5nZT17cHJvcHMudXBkYXRlQXJlYUNvZGVGaWVsZH0gdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmxpbmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbCBjbGFzc05hbWU9XCJsZWZ0IExhYmVsXCI+QXJlIHlvdSAxOCBvciBvbGRlcjwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtwcm9wcy5pczE4T3JPdmVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVJczE4T3JPdmVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5Qcm9maWxlIFBpY3R1cmU8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBob3RvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZmlsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJmaWxlSW5wdXQgcmlnaHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdD1cIi5wbmcsIC5qcGcsIC5qcGVnXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwicHJvZmlsZVBpY3R1cmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtwcm9wcy51cGRhdGVQcm9maWxlUGljdHVyZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiaW1nUHJldmlld1wiIGlkPVwibGVmdFwiIHNyYz17cHJvcHMucHJvZmlsZVBpY3R1cmV9IGFsdD1cIlwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cblxuICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259PkNyZWF0ZSBBY2NvdW50PC9CdXR0b24+XG4gICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBY2NvdW50U2V0dXBGb3JtO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBBY2NvdW50U2V0dXBGb3JtIGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL0FjY291bnRTZXR1cEZvcm0vQWNjb3VudFNldHVwRm9ybVwiO1xuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi8uLi9jb3JlL0xhYmVsL0xhYmVsXCI7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBzaWduSW4sIHNob3dFcnJvck5vdGlmaWNhdGlvbiwgc2hvd1N1Y2Nlc3NOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yXCI7XG5pbXBvcnQgVmlld3MgZnJvbSBcIi4uLy4uL1ZpZXdzXCI7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGRcIjtcbmltcG9ydCBBdXRoVmlldyBmcm9tIFwiLi4vQXV0aFZpZXdcIjtcbmltcG9ydCB7IHNlbmRQb3N0UmVxdWVzdCwgc2VuZFBvc3RSZXF1ZXN0V2l0aEZvcm1EYXRhIH0gZnJvbSBcIi4uLy4uLy4uLy4uL0hlbHBlclwiO1xuXG4vKipcbiAqIE9uY2UgdGhlIHVzZXIgaGFzIHZlcmlmaWVkIHRoZWlyIGFjY291bnQgYW5kIGNsaWNrZWQgdGhlIGxpbmssIHRoaXMgdmlldyBpcyB1c2VkIHRvIHByZXNlbnQgdGhlIGFjb3VudCBzZXR1cCBmb3JtIHNvIHRoZXkgY2FuIG9mZmljYWxseSBjcmVhdGUgdGhlaXIgYWNjb3VudCBvbiB0aGUgaG9tZSBwYWdlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZXRIb21lVmlldyBVc2VkIHRvIHNldCB0aGUgdmlldyBvZiB0aGlzIHBhZ2UsIGlmIHRoZSB1c2VyIHByZXNzZXMgdGhlIGxvZyBpbiBidXR0b25cbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMC8yMS8yMDIxXG4gKi9cbmNvbnN0IEFjY291bnRTZXR1cFZpZXcgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCBCTEFOSyA9IFwiXCI7XG4gICAgY29uc3QgW3VzZXJJc1ZlcmlmaWVkLCBzZXRVc2VySXNWZXJpZmllZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW25hbWUsIHNldE5hbWVdID0gdXNlU3RhdGUoQkxBTkspO1xuICAgIGNvbnN0IFthcmVhQ29kZSwgc2V0QXJlYUNvZGVdID0gdXNlU3RhdGUoQkxBTkspO1xuICAgIGNvbnN0IFtpczE4T3JPdmVyLCBzZXRJczE4T3JPdmVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbcHJvZmlsZVBpY3R1cmUsIHNldFByb2ZpbGVQaWN0dXJlXSA9IHVzZVN0YXRlKEJMQU5LKTtcbiAgICBjb25zdCBbdXNlciwgc2V0VXNlcl0gPSB1c2VTdGF0ZSh7fSk7XG4gICAgY29uc3QgdmVyaWZpY2F0aW9uVG9rZW4gPSBwcm9wcy52ZXJpZmljYXRpb25Ub2tlbjtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHZlcmlmeVVzZXIodmVyaWZpY2F0aW9uVG9rZW4pO1xuICAgIH0sIFtdKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdmVyaWZ5IHRoZSB1c2VyIGFzc29jaWF0ZWQgd2l0aCB0aGUgdG9rZW4gdGhhdCB3YXMgcmVjZWl2ZWQgZnJvbSB0aGUgbGlua1xuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0b2tlbiBUaGUgdmVyaWZpY2F0aW9uIHRva2VuXG4gICAgICogQGRhdGUgICAxMS8xMy8yMVxuICAgICAqL1xuICAgIGNvbnN0IHZlcmlmeVVzZXIgPSBhc3luYyAodmVyaWZpY2F0aW9uVG9rZW4pID0+IHtcbiAgICAgICAgLy8gU1VCTUlUIFRIRSBWRVJJRlkgVVNFUiBSRVFVRVNULlxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5HZXRVbnZlcmlmaWVkVXNlcixcbiAgICAgICAgICAgIHsgdmVyaWZpY2F0aW9uVG9rZW46IHZlcmlmaWNhdGlvblRva2VuIH0sXG4gICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLkFjY291bnQuVW52ZXJpZmllZFVzZXJXYXNGb3VuZCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgc2V0VXNlcihkYXRhLnVudmVyaWZpZWRVc2VyKTtcbiAgICAgICAgICAgICAgICBzZXRVc2VySXNWZXJpZmllZCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2VuZHMgdGhlIHJlcXVlc3QgdG8gdGhlIHNlcnZlciBmb3IgdGhlIG5ldyAoY29tcGxldGUpIHVzZXIgdG8gYmUgY3JlYXRlZCB3aXRoIHRoZSBwcm92aWRlZCBpbmZvcm1hdGlvblxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTEvMTMvMjFcbiAgICAgKi9cbiAgICBjb25zdCBzdWJtaXRBY2NvdW50U2V0dXAgPSBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgLy8gU1VCTUlUIFRIRSBDUkVBVEUgQUNDT1VOVCBSRVFVRVNULlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJwcm9maWxlUGljdHVyZVwiLCBwcm9maWxlUGljdHVyZSk7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChcInZlcmlmaWNhdGlvblRva2VuXCIsIHZlcmlmaWNhdGlvblRva2VuKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwidXNlclwiLCB1c2VyKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwibmFtZVwiLCBuYW1lKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiYXJlYUNvZGVcIiwgYXJlYUNvZGUpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJpczE4T3JPdmVyXCIsIGlzMThPck92ZXIpO1xuXG4gICAgICAgIGlmICghaXMxOE9yT3Zlcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJOT1QgMThcIik7XG4gICAgICAgICAgICBkaXNwYXRjaChzaG93RXJyb3JOb3RpZmljYXRpb24oXCJZb3UgbmVlZCB0byBiZSAxOCBvciBvbGRlciB0byBzaWduIHVwXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHNlbmRQb3N0UmVxdWVzdFdpdGhGb3JtRGF0YShcbiAgICAgICAgICAgIFJvdXRlcy5BY2NvdW50LlNldHVwQWNjb3VudCxcbiAgICAgICAgICAgIGZvcm1EYXRhLFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlN1Y2Nlc3NBY2NvdW50U2V0dXAsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGF1dGhlbnRpY2F0aW9uVG9rZW4sIGF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZSwgdXNlciwgc3R1ZHlHcm91cHMgfSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goc2lnbkluKHsgYXV0aGVudGljYXRpb25Ub2tlbiwgYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlLCB1c2VyIH0pKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChzaG93U3VjY2Vzc05vdGlmaWNhdGlvbihcIlN1Y2Nlc3NmdWxseSBzaWduZWQgaW46IFwiICsgdXNlci5uYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhvbWUgdmlldyB0byB0aGUgc2lnbiBpbiBmb3JtLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTEvMTMvMjFcbiAgICAgKi9cbiAgICBjb25zdCBzaWduSW5DbGlja2VkID0gKCkgPT4ge1xuICAgICAgICBwcm9wcy5zZXRIb21lVmlldyhWaWV3cy5Ib21lLkxvZ2luKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGZ1bGwgbmFtZSBmaWVsZCBpbiB0aGUgc2V0dXAgYWNjb3VudCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTEvMTMvMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVOYW1lRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0TmFtZShldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgZnVsbCBuYW1lIGZpZWxkIGluIHRoZSBzZXR1cCBhY2NvdW50IGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAxMS8xMy8yMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUFyZWFDb2RlRmllbGQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgc2V0QXJlYUNvZGUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGRhdGUgb2YgYmlydGggZmllbGQgaW4gdGhlIHNldHVwIGFjY291bnQgZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDExLzEzLzIxXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlSXMxOE9yT3ZlciA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRJczE4T3JPdmVyKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGZ1bGwgbmFtZSBmaWVsZCBpbiB0aGUgc2V0dXAgYWNjb3VudCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTEvMTMvMjFcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVQcm9maWxlUGljdHVyZSA9IChldmVudCkgPT4ge1xuICAgICAgICBzZXRQcm9maWxlUGljdHVyZShldmVudC50YXJnZXQuZmlsZXNbMF0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8QXV0aFZpZXc+XG4gICAgICAgICAgICA8aDM+U2V0dXAgWW91ciBBY2NvdW50PC9oMz5cbiAgICAgICAgICAgIDxwPnt1c2VyLmVtYWlsfTwvcD5cbiAgICAgICAgICAgIHt1c2VySXNWZXJpZmllZCA/IChcbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8QWNjb3VudFNldHVwRm9ybVxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcj17dXNlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmVhQ29kZT17YXJlYUNvZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICBpczE4T3JPdmVyPXtpczE4T3JPdmVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZVBpY3R1cmU9e3Byb2ZpbGVQaWN0dXJlfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlTmFtZUZpZWxkPXt1cGRhdGVOYW1lRmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVBcmVhQ29kZUZpZWxkPXt1cGRhdGVBcmVhQ29kZUZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlSXMxOE9yT3Zlcj17dXBkYXRlSXMxOE9yT3Zlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVByb2ZpbGVQaWN0dXJlPXt1cGRhdGVQcm9maWxlUGljdHVyZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEFjY291bnRTZXR1cD17c3VibWl0QWNjb3VudFNldHVwfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8aDE+WW91IHNob3VsZG4ndCBiZSBoZXJlITwvaDE+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm90aGVyLW9wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8cD5BbHJlYWR5IGhhdmUgYW4gYWNjb3VudD88L3A+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5DcmVhdGlvbn0gb25DbGljaz17c2lnbkluQ2xpY2tlZH0+XG4gICAgICAgICAgICAgICAgICAgIFNpZ24gSW5cbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0F1dGhWaWV3PlxuICAgICk7XG59O1xuZXhwb3J0IGRlZmF1bHQgQWNjb3VudFNldHVwVmlldztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vSG9tZS5zY3NzXCI7XG5cbmltcG9ydCBQYWdlIGZyb20gXCIuLi9QYWdlLmpzXCI7XG5pbXBvcnQgVmlld3MgZnJvbSBcIi4uLy4uL1ZpZXdzL1ZpZXdzLmpzXCI7XG5cbi8vIElNUE9SVCBWSUVXUyBGT1IgVEhJUyBQQUdFLlxuaW1wb3J0IExvZ2luVmlldyBmcm9tIFwiLi4vLi4vVmlld3MvSG9tZS9Mb2dpblZpZXcvTG9naW5WaWV3XCI7XG5pbXBvcnQgQ3JlYXRlQWNjb3VudFZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL0hvbWUvQ3JlYXRlQWNjb3VudFZpZXcvQ3JlYXRlQWNjb3VudFZpZXdcIjtcbmltcG9ydCBWZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvblZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL0hvbWUvVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb25WaWV3L1ZlcmlmaWNhdGlvbkVtYWlsQ29uZmlybWF0aW9uVmlld1wiO1xuaW1wb3J0IEFjY291bnRTZXR1cFZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL0hvbWUvQWNjb3VudFNldHVwVmlldy9BY2NvdW50U2V0dXBWaWV3XCI7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yLmpzXCI7XG5cbi8qKlxuICogVGhlIGhvbWUgcGFnZSBvZiB0aGUgYXBwbGljYXRpb24uIFRoaXMgaXMgc2hvd24gd2hlbiB0aGUgdXNlciBoYXMgbm90IGxvZ2dlZCBpbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNsaWVudFNpZGVMb2dpbiBUaGUgZnVuY3Rpb24gdXNlZCB0byBsb2cgaW4gYSB1c2VyIGZyb20gdGhlIGNsaWVudC1zaWRlIHBlcnNwZWN0aXZlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2xpZW50U2lkZUxvZ291dCBUaGUgZnVuY3Rpb24gdXNlZCB0byBsb2cgb3V0IGEgdXNlciBmcm9tIHRoZSBjbGllbnQtc2lkZSBwZXJzcGVjdGl2ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBob21lVmlldyBUaGUgdmlldyB0aGF0IGlzIHN1cHBvc2VkIHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgaG9tZSBwYWdlLCBkZWZpbmVkIGluIFZpZXdzLmpzXG4gKiBAYXV0aG9yIENhbWVyb24gQnVya2hvbGRlciBhbmQgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMC8yMC8yMDIxXG4gKi9cbmNvbnN0IEhvbWUgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCBbdmlldywgc2V0SG9tZVZpZXddID0gdXNlU3RhdGUocHJvcHMuaG9tZVZpZXcgPyBwcm9wcy5ob21lVmlldyA6IFZpZXdzLkhvbWUuTG9naW4pO1xuICAgIGxldCBob21lVmlldyA9IDw+PC8+O1xuICAgIC8vIGxldCB2ZXJpZmljYXRpb25Ub2tlbiA9IHVuZGVmaW5lZDtcbiAgICAvLyBjb25zdCB2ZXJpZmljYXRpb25Ub2tlbkV4aXN0cyA9IFZhbGlkYXRvci5pc0RlZmluZWQocHJvcHMubWF0Y2gpO1xuICAgIC8vIGlmICh2ZXJpZmljYXRpb25Ub2tlbkV4aXN0cykge1xuICAgIC8vICAgdmVyaWZpY2F0aW9uVG9rZW4gPSBwcm9wcy5tYXRjaC5wYXJhbXMudmVyaWZpY2F0aW9uVG9rZW47XG4gICAgLy8gfVxuXG4gICAgLy9cbiAgICBzd2l0Y2ggKHZpZXcpIHtcbiAgICAgICAgY2FzZSBWaWV3cy5Ib21lLkxvZ2luOlxuICAgICAgICAgICAgaG9tZVZpZXcgPSA8TG9naW5WaWV3IHNldEhvbWVWaWV3PXtzZXRIb21lVmlld30gLz47XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFZpZXdzLkhvbWUuQ3JlYXRlQWNjb3VudDpcbiAgICAgICAgICAgIGhvbWVWaWV3ID0gPENyZWF0ZUFjY291bnRWaWV3IHNldEhvbWVWaWV3PXtzZXRIb21lVmlld30gLz47XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFZpZXdzLkhvbWUuVmVyaWZpY2F0aW9uRW1haWxDb25maXJtYXRpb246XG4gICAgICAgICAgICBob21lVmlldyA9IDxWZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvblZpZXcgc2V0SG9tZVZpZXc9e3NldEhvbWVWaWV3fSAvPjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVmlld3MuSG9tZS5BY2NvdW50U2V0dXA6XG4gICAgICAgICAgICBob21lVmlldyA9IChcbiAgICAgICAgICAgICAgICA8QWNjb3VudFNldHVwVmlldyBzZXRIb21lVmlldz17c2V0SG9tZVZpZXd9IHZlcmlmaWNhdGlvblRva2VuPXtwcm9wcy5tYXRjaC5wYXJhbXMudmVyaWZpY2F0aW9uVG9rZW59IC8+XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFBhZ2UgdG9wQmFyPXtmYWxzZX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkhvbWVQYWdlXCI+XG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInN1YnRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgIFN0dWR5IDxiciAvPiB3aXRoIDxiciAvPiBleGNlbGxlbmNlLlxuICAgICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgICAgPGRpdj57IXByb3BzLmNoaWxkcmVuID8gaG9tZVZpZXcgOiBwcm9wcy5jaGlsZHJlbn08L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1BhZ2U+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWU7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1N0dWR5LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHVkeS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TdHVkeUdyb3VwVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R1ZHlHcm91cFZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IFwiLi9TdHVkeUdyb3VwVmlldy5zY3NzXCI7XG5cbi8qKlxuICogVXNlZCB0byBkaXNwbGF5IGEgam9pbmVkIHN0dWR5IGdyb3VwIG9uIHRoZSBzdHVkeSBwYWdlXG4gKiBAcGFyYW0ge1N0cmluZ30gdGl0bGUgdGl0bGUgb2YgdGhlIHN0dWR5IGdyb3VwXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTEvMDIvMjAyMVxuICovXG5jb25zdCBTdHVkeUdyb3VwVmlldyA9ICh7IGdyb3VwIH0pID0+IHtcbiAgICBjb25zdCB7IG5hbWUsIHNjaG9vbCwgb3duZXIsIHN1YmplY3QsIGNvdXJzZSwgaXNUdXRvckdyb3VwLCBpc09ubGluZUdyb3VwLCBncm91cENvbG9yLCBkZXNjcmlwdGlvbiwgX2lkIH0gPSBncm91cDtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxMaW5rIHRvPXtcIi9ncm91cC9cIiArIF9pZH0gc3R5bGU9e3sgdGV4dERlY29yYXRpb246IFwibm9uZVwiIH19PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInN0dWR5LWdyb3VwLXZpZXdcIlxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogYCR7Z3JvdXBDb2xvcn0gNHB4IHNvbGlkYCxcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBncm91cENvbG9yICsgXCI5OVwiLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCJcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJncm91cC10aXRsZVwiPntuYW1lfTwvaDE+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC12aWV3LXN1Yi1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPntpc1R1dG9yR3JvdXAgPyBcIlR1dG9yXCIgOiBcIkdyb3VwXCJ9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD57aXNPbmxpbmVHcm91cCA/IFwiT25saW5lXCIgOiBcIkluLXBlcnNvblwifTwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLXZpZXctZGV0YWlsc1wiPlxuICAgICAgICAgICAgICAgICAgICA8cD5Pd25lcjoge293bmVyLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD5Db3Vyc2UgQ29kZToge2NvdXJzZX08L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9MaW5rPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdHVkeUdyb3VwVmlldztcbiIsImltcG9ydCBcIi4vU3R1ZHkuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgc2VuZEdldFJlcXVlc3QsIHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi9IZWxwZXJcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHtcbiAgICBzaWduT3V0LFxuICAgIHNob3dDcmVhdGVTdHVkeUdyb3VwUG9wdXAsXG4gICAgbG9hZFN0dWR5R3JvdXAsXG4gICAgc2hvd0Vycm9yTm90aWZpY2F0aW9uLFxuICAgIHNldFVzZXJcbn0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3JcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XG5cbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xuaW1wb3J0IHsgUmVkaXJlY3QgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcblxuaW1wb3J0IFRvcEJhciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyXCI7XG5pbXBvcnQgU3R1ZHlHcm91cFZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL1N0dWR5L3N0dWR5R3JvdXBWaWV3L1N0dWR5R3JvdXBWaWV3XCI7XG5pbXBvcnQgUGFnZSBmcm9tIFwiLi4vUGFnZVwiO1xuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTG9hZGluZy9Mb2FkaW5nXCI7XG5cbi8qKlxuICogUmVuZGVycyB0aGUgc3R1ZHkgcGFnZSwgZGlzcGxheWluZyBhbGwgdGhlIHN0dWR5IGdyb3VwcyB0aGUgdXNlciBpcyBhIG1lbWJlciBvZi5cbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMS8yMC8yMDIxXG4gKi9cbmNvbnN0IFN0dWR5ID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgaXNMb2FkaW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLmxvYWRpbmcpO1xuICAgIGNvbnN0IGlzTG9nZ2VkSW4gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLmlzTG9nZ2VkSW4pO1xuICAgIGNvbnN0IHN0dWR5R3JvdXBzID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5zdHVkeUdyb3Vwc1JlZHVjZXIuc3R1ZHlHcm91cHMpO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gZ2V0R3JvdXBzKCkge1xuICAgICAgICAgICAgYXdhaXQgZ2V0U3R1ZHlHcm91cHMoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhzdHVkeUdyb3Vwcyk7XG4gICAgICAgIGlzTG9nZ2VkSW4gJiYgc3R1ZHlHcm91cHMubGVuZ3RoID09PSAwICYmIGdldEdyb3VwcygpO1xuXG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIHZlcmlmeVVzZXJFbWFpbCgpIHtcbiAgICAgICAgICAgIGF3YWl0IHZlcmlmeUVtYWlsKHByb3BzLm1hdGNoLnBhcmFtcy52ZXJpZmljYXRpb25Ub2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMuaXNWZXJpZnlpbmdFbWFpbCAmJiBpc0xvZ2dlZEluICYmIHZlcmlmeVVzZXJFbWFpbCgpO1xuICAgIH0sIFtdKTtcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbGwgc3R1ZHkgZ3JvdXBzIHRoZSB1c2VyIGlzIGEgbWVtYmVyIG9mIGZyb20gdGhlIHNlcnZlclxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTEvMjAvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IGdldFN0dWR5R3JvdXBzID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJ1bm5pbmdcIik7XG4gICAgICAgIGF3YWl0IHNlbmRHZXRSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLlN0dWR5R3JvdXAuR2V0VXNlclN0dWR5R3JvdXBzLFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLlN1Y2Nlc3NTdHVkeUdyb3Vwc1JldHJpZXZlZCxcbiAgICAgICAgICAgIFwiVGhlcmUncyBiZWVuIGFuIGVycm9yIGxvYWRpbmcgeW91ciBzdHVkeSBncm91cHMuICBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLiBcIixcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IHN0dWR5R3JvdXBzIH0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIGlmIChzdHVkeUdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICBzdHVkeUdyb3Vwcy5tYXAoKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGxvYWRTdHVkeUdyb3VwKHN0dWR5R3JvdXBzKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHZlcmlmeSB0aGUgZW1haWwsIGlmIGEgdXNlciBjaGFuZ2VkIHRoZWlyIGVtYWlsLCBmcm9tIGFcbiAgICAgKiB0b2tlbiB0aGF0IHdhcyByZWNlaXZlZCBmcm9tIHRoZSBsaW5rXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZlcmlmaWNhdGlvblRva2VuIFRoZSB2ZXJpZmljYXRpb24gdG9rZW5cbiAgICAgKiBAZGF0ZSAgIDAyLzA5LzIyXG4gICAgICogQGFzeW5jXG4gICAgICovXG4gICAgY29uc3QgdmVyaWZ5RW1haWwgPSBhc3luYyAodmVyaWZpY2F0aW9uVG9rZW4pID0+IHtcbiAgICAgICAgLy8gU1VCTUlUIFRIRSBWRVJJRlkgVVNFUiBSRVFVRVNULlxuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5WZXJpZnlFbWFpbENoYW5nZSxcbiAgICAgICAgICAgIHsgdmVyaWZpY2F0aW9uVG9rZW4gfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzQ2hhbmdpbmdFbWFpbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIChkYXRhLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNldFVzZXIoZGF0YS51c2VyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8UGFnZSB0b3BCYXI9e3RydWV9IGN1cnJlbnRQYWdlPVwic3R1ZHlcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0dWR5LXBhZ2VcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+U3R1ZHk8L2gxPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAge2lzTG9nZ2VkSW4gPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWRkLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dDcmVhdGVTdHVkeUdyb3VwUG9wdXAoKSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpc0xvYWRpbmcgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkaW5nIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHVkeS1ncm91cHMtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7VmFsaWRhdG9yLmlzRGVmaW5lZChzdHVkeUdyb3VwcykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHVkeUdyb3Vwcy5tYXAoKHN0dWR5R3JvdXApID0+IDxTdHVkeUdyb3VwVmlldyBncm91cD17c3R1ZHlHcm91cH0gLz4pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImd1ZXN0LW1lc3NhZ2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+WW91IGFyZSBjdXJyZW50bHkgYnJvd3NpbmcgU3R1ZHkgU3BhY2VzIGFzIGEgZ3Vlc3QhPC9oMT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2Ugc2lnbi11cCBvciBsb2ctaW4gdG8gYmUgYWJsZSB0byBqb2luIGFuZCBjcmVhdGUgc3R1ZHkgZ3JvdXBzPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkZlZWwgZnJlZSB0byB1c2Ugb3VyIHNlYXJjaCB0b29sIHRvIGRpc2NvdmVyIHN0dWR5IGdyb3VwcyBpbiB5b3VyIGFyZWEuPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1BhZ2U+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdHVkeTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2guc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoVmlldy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hGb3JtLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hGb3JtLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTbGlkZXInLCBzbG90KTtcbn1cbmNvbnN0IHNsaWRlclVuc3R5bGVkQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNsaWRlcicsIFsncm9vdCcsICdhY3RpdmUnLCAnZm9jdXNWaXNpYmxlJywgJ2Rpc2FibGVkJywgJ2RyYWdnaW5nJywgJ21hcmtlZCcsICd2ZXJ0aWNhbCcsICd0cmFja0ludmVydGVkJywgJ3RyYWNrRmFsc2UnLCAncmFpbCcsICd0cmFjaycsICdtYXJrJywgJ21hcmtBY3RpdmUnLCAnbWFya0xhYmVsJywgJ21hcmtMYWJlbEFjdGl2ZScsICd0aHVtYicsICd2YWx1ZUxhYmVsJywgJ3ZhbHVlTGFiZWxPcGVuJywgJ3ZhbHVlTGFiZWxDaXJjbGUnLCAndmFsdWVMYWJlbExhYmVsJ10pO1xuZXhwb3J0IGRlZmF1bHQgc2xpZGVyVW5zdHlsZWRDbGFzc2VzOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzbGlkZXJVbnN0eWxlZENsYXNzZXMgZnJvbSAnLi9zbGlkZXJVbnN0eWxlZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVmFsdWVMYWJlbENsYXNzZXMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcGVuXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgdXRpbGl0eUNsYXNzZXMgPSB7XG4gICAgb2Zmc2V0OiBjbHN4KG9wZW4gJiYgc2xpZGVyVW5zdHlsZWRDbGFzc2VzLnZhbHVlTGFiZWxPcGVuKSxcbiAgICBjaXJjbGU6IHNsaWRlclVuc3R5bGVkQ2xhc3Nlcy52YWx1ZUxhYmVsQ2lyY2xlLFxuICAgIGxhYmVsOiBzbGlkZXJVbnN0eWxlZENsYXNzZXMudmFsdWVMYWJlbExhYmVsXG4gIH07XG4gIHJldHVybiB1dGlsaXR5Q2xhc3Nlcztcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICB2YWx1ZSxcbiAgICB0aGVtZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VWYWx1ZUxhYmVsQ2xhc3Nlcyhwcm9wcyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSlcbiAgfSwgLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbi5wcm9wcy5jaGlsZHJlbiwgLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLm9mZnNldCwgY2xhc3NOYW1lKSxcbiAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY2lyY2xlLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWwsXG4gICAgICAgICAgY2hpbGRyZW46IHZhbHVlXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXVxuICB9KSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlclZhbHVlTGFiZWxVbnN0eWxlZC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRoZW1lOiBQcm9wVHlwZXMuYW55LFxuICB2YWx1ZTogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQ7IiwiLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIERPTSBlbGVtZW50IG5hbWUgKGkuZS4gbm90IGEgUmVhY3QgY29tcG9uZW50KS5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0Q29tcG9uZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNIb3N0Q29tcG9uZW50OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICcuL2lzSG9zdENvbXBvbmVudCc7XG4vKipcbiAqIEFwcGVuZHMgdGhlIG93bmVyU3RhdGUgb2JqZWN0IHRvIHRoZSBwcm9wcywgbWVyZ2luZyB3aXRoIHRoZSBleGlzdGluZyBvbmUgaWYgbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSBlbGVtZW50VHlwZSBUeXBlIG9mIHRoZSBlbGVtZW50IHRoYXQgb3ducyB0aGUgYGV4aXN0aW5nUHJvcHNgLiBJZiB0aGUgZWxlbWVudCBpcyBhIERPTSBub2RlLCBgb3duZXJTdGF0ZWAgYXJlIG5vdCBhcHBsaWVkLlxuICogQHBhcmFtIGV4aXN0aW5nUHJvcHMgUHJvcHMgb2YgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gb3duZXJTdGF0ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIGV4aXN0aW5nUHJvcHMgPSB7fSwgb3duZXJTdGF0ZSkge1xuICBpZiAoaXNIb3N0Q29tcG9uZW50KGVsZW1lbnRUeXBlKSkge1xuICAgIHJldHVybiBleGlzdGluZ1Byb3BzO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBleGlzdGluZ1Byb3BzLCB7XG4gICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIGV4aXN0aW5nUHJvcHMub3duZXJTdGF0ZSwgb3duZXJTdGF0ZSlcbiAgfSk7XG59IiwiY29uc3QgdmlzdWFsbHlIaWRkZW4gPSB7XG4gIGJvcmRlcjogMCxcbiAgY2xpcDogJ3JlY3QoMCAwIDAgMCknLFxuICBoZWlnaHQ6ICcxcHgnLFxuICBtYXJnaW46IC0xLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBhZGRpbmc6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgd2lkdGg6ICcxcHgnXG59O1xuZXhwb3J0IGRlZmF1bHQgdmlzdWFsbHlIaWRkZW47IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VJc0ZvY3VzVmlzaWJsZSBhcyB1c2VJc0ZvY3VzVmlzaWJsZSwgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QsIHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCwgdW5zdGFibGVfdXNlRXZlbnRDYWxsYmFjayBhcyB1c2VFdmVudENhbGxiYWNrLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUNvbnRyb2xsZWQgYXMgdXNlQ29udHJvbGxlZCwgdmlzdWFsbHlIaWRkZW4gfSBmcm9tICdAbXVpL3V0aWxzJztcbmNvbnN0IElOVEVOVElPTkFMX0RSQUdfQ09VTlRfVEhSRVNIT0xEID0gMjtcblxuZnVuY3Rpb24gYXNjKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xufVxuXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdCh2YWx1ZXMsIGN1cnJlbnRWYWx1ZSkge1xuICB2YXIgX3ZhbHVlcyRyZWR1Y2U7XG5cbiAgY29uc3Qge1xuICAgIGluZGV4OiBjbG9zZXN0SW5kZXhcbiAgfSA9IChfdmFsdWVzJHJlZHVjZSA9IHZhbHVlcy5yZWR1Y2UoKGFjYywgdmFsdWUsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLmFicyhjdXJyZW50VmFsdWUgLSB2YWx1ZSk7XG5cbiAgICBpZiAoYWNjID09PSBudWxsIHx8IGRpc3RhbmNlIDwgYWNjLmRpc3RhbmNlIHx8IGRpc3RhbmNlID09PSBhY2MuZGlzdGFuY2UpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpc3RhbmNlLFxuICAgICAgICBpbmRleFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBudWxsKSkgIT0gbnVsbCA/IF92YWx1ZXMkcmVkdWNlIDoge307XG4gIHJldHVybiBjbG9zZXN0SW5kZXg7XG59XG5cbmZ1bmN0aW9uIHRyYWNrRmluZ2VyKGV2ZW50LCB0b3VjaElkKSB7XG4gIC8vIFRoZSBldmVudCBpcyBUb3VjaEV2ZW50XG4gIGlmICh0b3VjaElkLmN1cnJlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuICAgIGNvbnN0IHRvdWNoRXZlbnQgPSBldmVudDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldO1xuXG4gICAgICBpZiAodG91Y2guaWRlbnRpZmllciA9PT0gdG91Y2hJZC5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogdG91Y2guY2xpZW50WCxcbiAgICAgICAgICB5OiB0b3VjaC5jbGllbnRZXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIFRoZSBldmVudCBpcyBNb3VzZUV2ZW50XG5cblxuICByZXR1cm4ge1xuICAgIHg6IGV2ZW50LmNsaWVudFgsXG4gICAgeTogZXZlbnQuY2xpZW50WVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb1BlcmNlbnQodmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiAodmFsdWUgLSBtaW4pICogMTAwIC8gKG1heCAtIG1pbik7XG59XG5cbmZ1bmN0aW9uIHBlcmNlbnRUb1ZhbHVlKHBlcmNlbnQsIG1pbiwgbWF4KSB7XG4gIHJldHVybiAobWF4IC0gbWluKSAqIHBlcmNlbnQgKyBtaW47XG59XG5cbmZ1bmN0aW9uIGdldERlY2ltYWxQcmVjaXNpb24obnVtKSB7XG4gIC8vIFRoaXMgaGFuZGxlcyB0aGUgY2FzZSB3aGVuIG51bSBpcyB2ZXJ5IHNtYWxsICgwLjAwMDAwMDAxKSwganMgd2lsbCB0dXJuIHRoaXMgaW50byAxZS04LlxuICAvLyBXaGVuIG51bSBpcyBiaWdnZXIgdGhhbiAxIG9yIGxlc3MgdGhhbiAtMSBpdCB3b24ndCBnZXQgY29udmVydGVkIHRvIHRoaXMgbm90YXRpb24gc28gaXQncyBmaW5lLlxuICBpZiAoTWF0aC5hYnMobnVtKSA8IDEpIHtcbiAgICBjb25zdCBwYXJ0cyA9IG51bS50b0V4cG9uZW50aWFsKCkuc3BsaXQoJ2UtJyk7XG4gICAgY29uc3QgbWF0aXNzYURlY2ltYWxQYXJ0ID0gcGFydHNbMF0uc3BsaXQoJy4nKVsxXTtcbiAgICByZXR1cm4gKG1hdGlzc2FEZWNpbWFsUGFydCA/IG1hdGlzc2FEZWNpbWFsUGFydC5sZW5ndGggOiAwKSArIHBhcnNlSW50KHBhcnRzWzFdLCAxMCk7XG4gIH1cblxuICBjb25zdCBkZWNpbWFsUGFydCA9IG51bS50b1N0cmluZygpLnNwbGl0KCcuJylbMV07XG4gIHJldHVybiBkZWNpbWFsUGFydCA/IGRlY2ltYWxQYXJ0Lmxlbmd0aCA6IDA7XG59XG5cbmZ1bmN0aW9uIHJvdW5kVmFsdWVUb1N0ZXAodmFsdWUsIHN0ZXAsIG1pbikge1xuICBjb25zdCBuZWFyZXN0ID0gTWF0aC5yb3VuZCgodmFsdWUgLSBtaW4pIC8gc3RlcCkgKiBzdGVwICsgbWluO1xuICByZXR1cm4gTnVtYmVyKG5lYXJlc3QudG9GaXhlZChnZXREZWNpbWFsUHJlY2lzaW9uKHN0ZXApKSk7XG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlSW5kZXgoe1xuICB2YWx1ZXMsXG4gIG5ld1ZhbHVlLFxuICBpbmRleFxufSkge1xuICBjb25zdCBvdXRwdXQgPSB2YWx1ZXMuc2xpY2UoKTtcbiAgb3V0cHV0W2luZGV4XSA9IG5ld1ZhbHVlO1xuICByZXR1cm4gb3V0cHV0LnNvcnQoYXNjKTtcbn1cblxuZnVuY3Rpb24gZm9jdXNUaHVtYih7XG4gIHNsaWRlclJlZixcbiAgYWN0aXZlSW5kZXgsXG4gIHNldEFjdGl2ZVxufSkge1xuICB2YXIgX3NsaWRlclJlZiRjdXJyZW50LCBfZG9jJGFjdGl2ZUVsZW1lbnQ7XG5cbiAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChzbGlkZXJSZWYuY3VycmVudCk7XG5cbiAgaWYgKCEoKF9zbGlkZXJSZWYkY3VycmVudCA9IHNsaWRlclJlZi5jdXJyZW50KSAhPSBudWxsICYmIF9zbGlkZXJSZWYkY3VycmVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHx8IE51bWJlcihkb2MgPT0gbnVsbCA/IHZvaWQgMCA6IChfZG9jJGFjdGl2ZUVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kb2MkYWN0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSkgIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgdmFyIF9zbGlkZXJSZWYkY3VycmVudDI7XG5cbiAgICAoX3NsaWRlclJlZiRjdXJyZW50MiA9IHNsaWRlclJlZi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX3NsaWRlclJlZiRjdXJyZW50Mi5xdWVyeVNlbGVjdG9yKGBbdHlwZT1cInJhbmdlXCJdW2RhdGEtaW5kZXg9XCIke2FjdGl2ZUluZGV4fVwiXWApLmZvY3VzKCk7XG4gIH1cblxuICBpZiAoc2V0QWN0aXZlKSB7XG4gICAgc2V0QWN0aXZlKGFjdGl2ZUluZGV4KTtcbiAgfVxufVxuXG5jb25zdCBheGlzUHJvcHMgPSB7XG4gIGhvcml6b250YWw6IHtcbiAgICBvZmZzZXQ6IHBlcmNlbnQgPT4gKHtcbiAgICAgIGxlZnQ6IGAke3BlcmNlbnR9JWBcbiAgICB9KSxcbiAgICBsZWFwOiBwZXJjZW50ID0+ICh7XG4gICAgICB3aWR0aDogYCR7cGVyY2VudH0lYFxuICAgIH0pXG4gIH0sXG4gICdob3Jpem9udGFsLXJldmVyc2UnOiB7XG4gICAgb2Zmc2V0OiBwZXJjZW50ID0+ICh7XG4gICAgICByaWdodDogYCR7cGVyY2VudH0lYFxuICAgIH0pLFxuICAgIGxlYXA6IHBlcmNlbnQgPT4gKHtcbiAgICAgIHdpZHRoOiBgJHtwZXJjZW50fSVgXG4gICAgfSlcbiAgfSxcbiAgdmVydGljYWw6IHtcbiAgICBvZmZzZXQ6IHBlcmNlbnQgPT4gKHtcbiAgICAgIGJvdHRvbTogYCR7cGVyY2VudH0lYFxuICAgIH0pLFxuICAgIGxlYXA6IHBlcmNlbnQgPT4gKHtcbiAgICAgIGhlaWdodDogYCR7cGVyY2VudH0lYFxuICAgIH0pXG4gIH1cbn07XG5leHBvcnQgY29uc3QgSWRlbnRpdHkgPSB4ID0+IHg7IC8vIFRPRE86IHJlbW92ZSBzdXBwb3J0IGZvciBTYWZhcmkgPCAxMy5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10b3VjaC1hY3Rpb25cbi8vXG4vLyBTYWZhcmksIG9uIGlPUywgc3VwcG9ydHMgdG91Y2ggYWN0aW9uIHNpbmNlIHYxMy5cbi8vIE92ZXIgODAlIG9mIHRoZSBpT1MgcGhvbmVzIGFyZSBjb21wYXRpYmxlXG4vLyBpbiBBdWd1c3QgMjAyMC5cbi8vIFV0aWxpemluZyB0aGUgQ1NTLnN1cHBvcnRzIG1ldGhvZCB0byBjaGVjayBpZiB0b3VjaC1hY3Rpb24gaXMgc3VwcG9ydGVkLlxuLy8gU2luY2UgQ1NTLnN1cHBvcnRzIGlzIHN1cHBvcnRlZCBvbiBhbGwgYnV0IEVkZ2VAMTIgYW5kIElFIGFuZCB0b3VjaC1hY3Rpb25cbi8vIGlzIHN1cHBvcnRlZCBvbiBib3RoIEVkZ2VAMTIgYW5kIElFIGlmIENTUy5zdXBwb3J0cyBpcyBub3QgYXZhaWxhYmxlIHRoYXQgbWVhbnMgdGhhdFxuLy8gdG91Y2gtYWN0aW9uIHdpbGwgYmUgc3VwcG9ydGVkXG5cbmxldCBjYWNoZWRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZTtcblxuZnVuY3Rpb24gZG9lc1N1cHBvcnRUb3VjaEFjdGlvbk5vbmUoKSB7XG4gIGlmIChjYWNoZWRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBDU1MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBDU1Muc3VwcG9ydHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhY2hlZFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lID0gQ1NTLnN1cHBvcnRzKCd0b3VjaC1hY3Rpb24nLCAnbm9uZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZWRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhY2hlZFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTbGlkZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHJlZixcbiAgICAnYXJpYS1sYWJlbGxlZGJ5JzogYXJpYUxhYmVsbGVkYnksXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVTd2FwID0gZmFsc2UsXG4gICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICBtYXJrczogbWFya3NQcm9wID0gZmFsc2UsXG4gICAgbWF4ID0gMTAwLFxuICAgIG1pbiA9IDAsXG4gICAgbmFtZSxcbiAgICBvbkNoYW5nZSxcbiAgICBvbkNoYW5nZUNvbW1pdHRlZCxcbiAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyxcbiAgICBzY2FsZSA9IElkZW50aXR5LFxuICAgIHN0ZXAgPSAxLFxuICAgIHRhYkluZGV4LFxuICAgIHZhbHVlOiB2YWx1ZVByb3AsXG4gICAgaXNSdGwgPSBmYWxzZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHRvdWNoSWQgPSBSZWFjdC51c2VSZWYoKTsgLy8gV2UgY2FuJ3QgdXNlIHRoZSA6YWN0aXZlIGJyb3dzZXIgcHNldWRvLWNsYXNzZXMuXG4gIC8vIC0gVGhlIGFjdGl2ZSBzdGF0ZSBpc24ndCB0cmlnZ2VyZWQgd2hlbiBjbGlja2luZyBvbiB0aGUgcmFpbC5cbiAgLy8gLSBUaGUgYWN0aXZlIHN0YXRlIGlzbid0IHRyYW5zZmVycmVkIHdoZW4gaW52ZXJzaW5nIGEgcmFuZ2Ugc2xpZGVyLlxuXG4gIGNvbnN0IFthY3RpdmUsIHNldEFjdGl2ZV0gPSBSZWFjdC51c2VTdGF0ZSgtMSk7XG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKC0xKTtcbiAgY29uc3QgW2RyYWdnaW5nLCBzZXREcmFnZ2luZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IG1vdmVDb3VudCA9IFJlYWN0LnVzZVJlZigwKTtcbiAgY29uc3QgW3ZhbHVlRGVyaXZlZCwgc2V0VmFsdWVTdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiB2YWx1ZVByb3AsXG4gICAgZGVmYXVsdDogZGVmYXVsdFZhbHVlICE9IG51bGwgPyBkZWZhdWx0VmFsdWUgOiBtaW4sXG4gICAgbmFtZTogJ1NsaWRlcidcbiAgfSk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gb25DaGFuZ2UgJiYgKChldmVudCwgdmFsdWUsIHRodW1iSW5kZXgpID0+IHtcbiAgICAvLyBSZWRlZmluZSB0YXJnZXQgdG8gYWxsb3cgbmFtZSBhbmQgdmFsdWUgdG8gYmUgcmVhZC5cbiAgICAvLyBUaGlzIGFsbG93cyBzZWFtbGVzcyBpbnRlZ3JhdGlvbiB3aXRoIHRoZSBtb3N0IHBvcHVsYXIgZm9ybSBsaWJyYXJpZXMuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNDg1I2lzc3VlY29tbWVudC02NzYwNDg0OTJcbiAgICAvLyBDbG9uZSB0aGUgZXZlbnQgdG8gbm90IG92ZXJyaWRlIGB0YXJnZXRgIG9mIHRoZSBvcmlnaW5hbCBldmVudC5cbiAgICBjb25zdCBuYXRpdmVFdmVudCA9IGV2ZW50Lm5hdGl2ZUV2ZW50IHx8IGV2ZW50OyAvLyBAdHMtaWdub3JlIFRoZSBuYXRpdmVFdmVudCBpcyBmdW5jdGlvbiwgbm90IG9iamVjdFxuXG4gICAgY29uc3QgY2xvbmVkRXZlbnQgPSBuZXcgbmF0aXZlRXZlbnQuY29uc3RydWN0b3IobmF0aXZlRXZlbnQudHlwZSwgbmF0aXZlRXZlbnQpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbG9uZWRFdmVudCwgJ3RhcmdldCcsIHtcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG5hbWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbkNoYW5nZShjbG9uZWRFdmVudCwgdmFsdWUsIHRodW1iSW5kZXgpO1xuICB9KTtcblxuICBjb25zdCByYW5nZSA9IEFycmF5LmlzQXJyYXkodmFsdWVEZXJpdmVkKTtcbiAgbGV0IHZhbHVlcyA9IHJhbmdlID8gdmFsdWVEZXJpdmVkLnNsaWNlKCkuc29ydChhc2MpIDogW3ZhbHVlRGVyaXZlZF07XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gY2xhbXAodmFsdWUsIG1pbiwgbWF4KSk7XG4gIGNvbnN0IG1hcmtzID0gbWFya3NQcm9wID09PSB0cnVlICYmIHN0ZXAgIT09IG51bGwgPyBbLi4uQXJyYXkoTWF0aC5mbG9vcigobWF4IC0gbWluKSAvIHN0ZXApICsgMSldLm1hcCgoXywgaW5kZXgpID0+ICh7XG4gICAgdmFsdWU6IG1pbiArIHN0ZXAgKiBpbmRleFxuICB9KSkgOiBtYXJrc1Byb3AgfHwgW107XG4gIGNvbnN0IG1hcmtzVmFsdWVzID0gbWFya3MubWFwKG1hcmsgPT4gbWFyay52YWx1ZSk7XG4gIGNvbnN0IHtcbiAgICBpc0ZvY3VzVmlzaWJsZVJlZixcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICByZWY6IGZvY3VzVmlzaWJsZVJlZlxuICB9ID0gdXNlSXNGb2N1c1Zpc2libGUoKTtcbiAgY29uc3QgW2ZvY3VzVmlzaWJsZSwgc2V0Rm9jdXNWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlKC0xKTtcbiAgY29uc3Qgc2xpZGVyUmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZUZvY3VzUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIHNsaWRlclJlZik7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBoYW5kbGVGb2N1c1JlZik7XG5cbiAgY29uc3QgY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRGb2N1cyA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkZvY3U7XG5cbiAgICBjb25zdCBpbmRleCA9IE51bWJlcihldmVudC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpKTtcbiAgICBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpO1xuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IHRydWUpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShpbmRleCk7XG4gICAgfVxuXG4gICAgc2V0T3BlbihpbmRleCk7XG4gICAgb3RoZXJIYW5kbGVycyA9PSBudWxsID8gdm9pZCAwIDogKF9vdGhlckhhbmRsZXJzJG9uRm9jdSA9IG90aGVySGFuZGxlcnMub25Gb2N1cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uRm9jdS5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVIYW5kbGVIaWRlbklucHV0Qmx1ciA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbkJsdXI7XG5cbiAgICBoYW5kbGVCbHVyVmlzaWJsZShldmVudCk7XG5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gZmFsc2UpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSgtMSk7XG4gICAgfVxuXG4gICAgc2V0T3BlbigtMSk7XG4gICAgb3RoZXJIYW5kbGVycyA9PSBudWxsID8gdm9pZCAwIDogKF9vdGhlckhhbmRsZXJzJG9uQmx1ciA9IG90aGVySGFuZGxlcnMub25CbHVyKSA9PSBudWxsID8gdm9pZCAwIDogX290aGVySGFuZGxlcnMkb25CbHVyLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICB9O1xuXG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGlzYWJsZWQgJiYgc2xpZGVyUmVmLmN1cnJlbnQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIHZhciBfZG9jdW1lbnQkYWN0aXZlRWxlbWU7XG5cbiAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgRmlyZWZveCBhbmQgU2FmYXJpIHdpbGwga2VlcCBmb2N1c1xuICAgICAgLy8gb24gYSBkaXNhYmxlZCBlbGVtZW50OlxuICAgICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL211aS1wci0yMjI0Ny1mb3JrZWQtaDE1MWg/ZmlsZT0vc3JjL0FwcC5qc1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgKF9kb2N1bWVudCRhY3RpdmVFbGVtZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZG9jdW1lbnQkYWN0aXZlRWxlbWUuYmx1cigpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVkXSk7XG5cbiAgaWYgKGRpc2FibGVkICYmIGFjdGl2ZSAhPT0gLTEpIHtcbiAgICBzZXRBY3RpdmUoLTEpO1xuICB9XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSAhPT0gLTEpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoLTEpO1xuICB9XG5cbiAgY29uc3QgY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRDaGFuZ2UgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25DaGFuO1xuXG4gICAgKF9vdGhlckhhbmRsZXJzJG9uQ2hhbiA9IG90aGVySGFuZGxlcnMub25DaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbkNoYW4uY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSk7XG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdO1xuICAgIGNvbnN0IG1hcmtzSW5kZXggPSBtYXJrc1ZhbHVlcy5pbmRleE9mKHZhbHVlKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgbGV0IG5ld1ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlQXNOdW1iZXI7XG5cbiAgICBpZiAobWFya3MgJiYgc3RlcCA9PSBudWxsKSB7XG4gICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlIDwgdmFsdWUgPyBtYXJrc1ZhbHVlc1ttYXJrc0luZGV4IC0gMV0gOiBtYXJrc1ZhbHVlc1ttYXJrc0luZGV4ICsgMV07XG4gICAgfVxuXG4gICAgbmV3VmFsdWUgPSBjbGFtcChuZXdWYWx1ZSwgbWluLCBtYXgpO1xuXG4gICAgaWYgKG1hcmtzICYmIHN0ZXAgPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudE1hcmtJbmRleCA9IG1hcmtzVmFsdWVzLmluZGV4T2YodmFsdWVzW2luZGV4XSk7XG4gICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlIDwgdmFsdWVzW2luZGV4XSA/IG1hcmtzVmFsdWVzW2N1cnJlbnRNYXJrSW5kZXggLSAxXSA6IG1hcmtzVmFsdWVzW2N1cnJlbnRNYXJrSW5kZXggKyAxXTtcbiAgICB9XG5cbiAgICBpZiAocmFuZ2UpIHtcbiAgICAgIC8vIEJvdW5kIHRoZSBuZXcgdmFsdWUgdG8gdGhlIHRodW1iJ3MgbmVpZ2hib3Vycy5cbiAgICAgIGlmIChkaXNhYmxlU3dhcCkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNsYW1wKG5ld1ZhbHVlLCB2YWx1ZXNbaW5kZXggLSAxXSB8fCAtSW5maW5pdHksIHZhbHVlc1tpbmRleCArIDFdIHx8IEluZmluaXR5KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJldmlvdXNWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgbmV3VmFsdWUgPSBzZXRWYWx1ZUluZGV4KHtcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgaW5kZXhcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGl2ZUluZGV4ID0gaW5kZXg7IC8vIFBvdGVudGlhbGx5IHN3YXAgdGhlIGluZGV4IGlmIG5lZWRlZC5cblxuICAgICAgaWYgKCFkaXNhYmxlU3dhcCkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IG5ld1ZhbHVlLmluZGV4T2YocHJldmlvdXNWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZvY3VzVGh1bWIoe1xuICAgICAgICBzbGlkZXJSZWYsXG4gICAgICAgIGFjdGl2ZUluZGV4XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcbiAgICBzZXRGb2N1c1Zpc2libGUoaW5kZXgpO1xuXG4gICAgaWYgKGhhbmRsZUNoYW5nZSkge1xuICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50LCBuZXdWYWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZUNvbW1pdHRlZCkge1xuICAgICAgb25DaGFuZ2VDb21taXR0ZWQoZXZlbnQsIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcHJldmlvdXNJbmRleCA9IFJlYWN0LnVzZVJlZigpO1xuICBsZXQgYXhpcyA9IG9yaWVudGF0aW9uO1xuXG4gIGlmIChpc1J0bCAmJiBvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgYXhpcyArPSAnLXJldmVyc2UnO1xuICB9XG5cbiAgY29uc3QgZ2V0RmluZ2VyTmV3VmFsdWUgPSAoe1xuICAgIGZpbmdlcixcbiAgICBtb3ZlID0gZmFsc2UsXG4gICAgdmFsdWVzOiB2YWx1ZXMyXG4gIH0pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50OiBzbGlkZXJcbiAgICB9ID0gc2xpZGVyUmVmO1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgbGVmdFxuICAgIH0gPSBzbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IHBlcmNlbnQ7XG5cbiAgICBpZiAoYXhpcy5pbmRleE9mKCd2ZXJ0aWNhbCcpID09PSAwKSB7XG4gICAgICBwZXJjZW50ID0gKGJvdHRvbSAtIGZpbmdlci55KSAvIGhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGVyY2VudCA9IChmaW5nZXIueCAtIGxlZnQpIC8gd2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKGF4aXMuaW5kZXhPZignLXJldmVyc2UnKSAhPT0gLTEpIHtcbiAgICAgIHBlcmNlbnQgPSAxIC0gcGVyY2VudDtcbiAgICB9XG5cbiAgICBsZXQgbmV3VmFsdWU7XG4gICAgbmV3VmFsdWUgPSBwZXJjZW50VG9WYWx1ZShwZXJjZW50LCBtaW4sIG1heCk7XG5cbiAgICBpZiAoc3RlcCkge1xuICAgICAgbmV3VmFsdWUgPSByb3VuZFZhbHVlVG9TdGVwKG5ld1ZhbHVlLCBzdGVwLCBtaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjbG9zZXN0SW5kZXggPSBmaW5kQ2xvc2VzdChtYXJrc1ZhbHVlcywgbmV3VmFsdWUpO1xuICAgICAgbmV3VmFsdWUgPSBtYXJrc1ZhbHVlc1tjbG9zZXN0SW5kZXhdO1xuICAgIH1cblxuICAgIG5ld1ZhbHVlID0gY2xhbXAobmV3VmFsdWUsIG1pbiwgbWF4KTtcbiAgICBsZXQgYWN0aXZlSW5kZXggPSAwO1xuXG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICBpZiAoIW1vdmUpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBmaW5kQ2xvc2VzdCh2YWx1ZXMyLCBuZXdWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVJbmRleCA9IHByZXZpb3VzSW5kZXguY3VycmVudDtcbiAgICAgIH0gLy8gQm91bmQgdGhlIG5ldyB2YWx1ZSB0byB0aGUgdGh1bWIncyBuZWlnaGJvdXJzLlxuXG5cbiAgICAgIGlmIChkaXNhYmxlU3dhcCkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNsYW1wKG5ld1ZhbHVlLCB2YWx1ZXMyW2FjdGl2ZUluZGV4IC0gMV0gfHwgLUluZmluaXR5LCB2YWx1ZXMyW2FjdGl2ZUluZGV4ICsgMV0gfHwgSW5maW5pdHkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmV2aW91c1ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBuZXdWYWx1ZSA9IHNldFZhbHVlSW5kZXgoe1xuICAgICAgICB2YWx1ZXM6IHZhbHVlczIsXG4gICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICBpbmRleDogYWN0aXZlSW5kZXhcbiAgICAgIH0pOyAvLyBQb3RlbnRpYWxseSBzd2FwIHRoZSBpbmRleCBpZiBuZWVkZWQuXG5cbiAgICAgIGlmICghKGRpc2FibGVTd2FwICYmIG1vdmUpKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gbmV3VmFsdWUuaW5kZXhPZihwcmV2aW91c1ZhbHVlKTtcbiAgICAgICAgcHJldmlvdXNJbmRleC5jdXJyZW50ID0gYWN0aXZlSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgYWN0aXZlSW5kZXhcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVRvdWNoTW92ZSA9IHVzZUV2ZW50Q2FsbGJhY2sobmF0aXZlRXZlbnQgPT4ge1xuICAgIGNvbnN0IGZpbmdlciA9IHRyYWNrRmluZ2VyKG5hdGl2ZUV2ZW50LCB0b3VjaElkKTtcblxuICAgIGlmICghZmluZ2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbW92ZUNvdW50LmN1cnJlbnQgKz0gMTsgLy8gQ2FuY2VsIG1vdmUgaW4gY2FzZSBzb21lIG90aGVyIGVsZW1lbnQgY29uc3VtZWQgYSBtb3VzZXVwIGV2ZW50IGFuZCBpdCB3YXMgbm90IGZpcmVkLlxuICAgIC8vIEB0cy1pZ25vcmUgYnV0dG9ucyBkb2Vzbid0IG5vdCBleGlzdHMgb24gdG91Y2ggZXZlbnRcblxuICAgIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAnbW91c2Vtb3ZlJyAmJiBuYXRpdmVFdmVudC5idXR0b25zID09PSAwKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICBoYW5kbGVUb3VjaEVuZChuYXRpdmVFdmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgbmV3VmFsdWUsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBnZXRGaW5nZXJOZXdWYWx1ZSh7XG4gICAgICBmaW5nZXIsXG4gICAgICBtb3ZlOiB0cnVlLFxuICAgICAgdmFsdWVzXG4gICAgfSk7XG4gICAgZm9jdXNUaHVtYih7XG4gICAgICBzbGlkZXJSZWYsXG4gICAgICBhY3RpdmVJbmRleCxcbiAgICAgIHNldEFjdGl2ZVxuICAgIH0pO1xuICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuXG4gICAgaWYgKCFkcmFnZ2luZyAmJiBtb3ZlQ291bnQuY3VycmVudCA+IElOVEVOVElPTkFMX0RSQUdfQ09VTlRfVEhSRVNIT0xEKSB7XG4gICAgICBzZXREcmFnZ2luZyh0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoaGFuZGxlQ2hhbmdlKSB7XG4gICAgICBoYW5kbGVDaGFuZ2UobmF0aXZlRXZlbnQsIG5ld1ZhbHVlLCBhY3RpdmVJbmRleCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlVG91Y2hFbmQgPSB1c2VFdmVudENhbGxiYWNrKG5hdGl2ZUV2ZW50ID0+IHtcbiAgICBjb25zdCBmaW5nZXIgPSB0cmFja0ZpbmdlcihuYXRpdmVFdmVudCwgdG91Y2hJZCk7XG4gICAgc2V0RHJhZ2dpbmcoZmFsc2UpO1xuXG4gICAgaWYgKCFmaW5nZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBuZXdWYWx1ZVxuICAgIH0gPSBnZXRGaW5nZXJOZXdWYWx1ZSh7XG4gICAgICBmaW5nZXIsXG4gICAgICB2YWx1ZXNcbiAgICB9KTtcbiAgICBzZXRBY3RpdmUoLTEpO1xuXG4gICAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICd0b3VjaGVuZCcpIHtcbiAgICAgIHNldE9wZW4oLTEpO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZUNvbW1pdHRlZCkge1xuICAgICAgb25DaGFuZ2VDb21taXR0ZWQobmF0aXZlRXZlbnQsIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICB0b3VjaElkLmN1cnJlbnQgPSB1bmRlZmluZWQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcblxuICAgIHN0b3BMaXN0ZW5pbmcoKTtcbiAgfSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VFdmVudENhbGxiYWNrKG5hdGl2ZUV2ZW50ID0+IHtcbiAgICAvLyBJZiB0b3VjaC1hY3Rpb246IG5vbmU7IGlzIG5vdCBzdXBwb3J0ZWQgd2UgbmVlZCB0byBwcmV2ZW50IHRoZSBzY3JvbGwgbWFudWFsbHkuXG4gICAgaWYgKCFkb2VzU3VwcG9ydFRvdWNoQWN0aW9uTm9uZSgpKSB7XG4gICAgICBuYXRpdmVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGNvbnN0IHRvdWNoID0gbmF0aXZlRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG5cbiAgICBpZiAodG91Y2ggIT0gbnVsbCkge1xuICAgICAgLy8gQSBudW1iZXIgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIHRoZSBjdXJyZW50IGZpbmdlciBpbiB0aGUgdG91Y2ggc2Vzc2lvbi5cbiAgICAgIHRvdWNoSWQuY3VycmVudCA9IHRvdWNoLmlkZW50aWZpZXI7XG4gICAgfVxuXG4gICAgY29uc3QgZmluZ2VyID0gdHJhY2tGaW5nZXIobmF0aXZlRXZlbnQsIHRvdWNoSWQpO1xuXG4gICAgaWYgKGZpbmdlciAhPT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgIGFjdGl2ZUluZGV4XG4gICAgICB9ID0gZ2V0RmluZ2VyTmV3VmFsdWUoe1xuICAgICAgICBmaW5nZXIsXG4gICAgICAgIHZhbHVlc1xuICAgICAgfSk7XG4gICAgICBmb2N1c1RodW1iKHtcbiAgICAgICAgc2xpZGVyUmVmLFxuICAgICAgICBhY3RpdmVJbmRleCxcbiAgICAgICAgc2V0QWN0aXZlXG4gICAgICB9KTtcbiAgICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAoaGFuZGxlQ2hhbmdlKSB7XG4gICAgICAgIGhhbmRsZUNoYW5nZShuYXRpdmVFdmVudCwgbmV3VmFsdWUsIGFjdGl2ZUluZGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtb3ZlQ291bnQuY3VycmVudCA9IDA7XG4gICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChzbGlkZXJSZWYuY3VycmVudCk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlVG91Y2hFbmQpO1xuICB9KTtcbiAgY29uc3Qgc3RvcExpc3RlbmluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHNsaWRlclJlZi5jdXJyZW50KTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZVRvdWNoRW5kKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVUb3VjaEVuZCk7XG4gIH0sIFtoYW5kbGVUb3VjaEVuZCwgaGFuZGxlVG91Y2hNb3ZlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY3VycmVudDogc2xpZGVyXG4gICAgfSA9IHNsaWRlclJlZjtcbiAgICBzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVRvdWNoU3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IGRvZXNTdXBwb3J0VG91Y2hBY3Rpb25Ob25lKClcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgc2xpZGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0LCB7XG4gICAgICAgIHBhc3NpdmU6IGRvZXNTdXBwb3J0VG91Y2hBY3Rpb25Ob25lKClcbiAgICAgIH0pO1xuICAgICAgc3RvcExpc3RlbmluZygpO1xuICAgIH07XG4gIH0sIFtzdG9wTGlzdGVuaW5nLCBoYW5kbGVUb3VjaFN0YXJ0XSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBzdG9wTGlzdGVuaW5nKCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZWQsIHN0b3BMaXN0ZW5pbmddKTtcblxuICBjb25zdCBjcmVhdGVIYW5kbGVNb3VzZURvd24gPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25Nb3VzO1xuXG4gICAgKF9vdGhlckhhbmRsZXJzJG9uTW91cyA9IG90aGVySGFuZGxlcnMub25Nb3VzZURvd24pID09IG51bGwgPyB2b2lkIDAgOiBfb3RoZXJIYW5kbGVycyRvbk1vdXMuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG5cbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gT25seSBoYW5kbGUgbGVmdCBjbGlja3NcblxuXG4gICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQXZvaWQgdGV4dCBzZWxlY3Rpb25cblxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBmaW5nZXIgPSB0cmFja0ZpbmdlcihldmVudCwgdG91Y2hJZCk7XG5cbiAgICBpZiAoZmluZ2VyICE9PSBmYWxzZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgYWN0aXZlSW5kZXhcbiAgICAgIH0gPSBnZXRGaW5nZXJOZXdWYWx1ZSh7XG4gICAgICAgIGZpbmdlcixcbiAgICAgICAgdmFsdWVzXG4gICAgICB9KTtcbiAgICAgIGZvY3VzVGh1bWIoe1xuICAgICAgICBzbGlkZXJSZWYsXG4gICAgICAgIGFjdGl2ZUluZGV4LFxuICAgICAgICBzZXRBY3RpdmVcbiAgICAgIH0pO1xuICAgICAgc2V0VmFsdWVTdGF0ZShuZXdWYWx1ZSk7XG5cbiAgICAgIGlmIChoYW5kbGVDaGFuZ2UpIHtcbiAgICAgICAgaGFuZGxlQ2hhbmdlKGV2ZW50LCBuZXdWYWx1ZSwgYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1vdmVDb3VudC5jdXJyZW50ID0gMDtcbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHNsaWRlclJlZi5jdXJyZW50KTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZVRvdWNoRW5kKTtcbiAgfTtcblxuICBjb25zdCB0cmFja09mZnNldCA9IHZhbHVlVG9QZXJjZW50KHJhbmdlID8gdmFsdWVzWzBdIDogbWluLCBtaW4sIG1heCk7XG4gIGNvbnN0IHRyYWNrTGVhcCA9IHZhbHVlVG9QZXJjZW50KHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0sIG1pbiwgbWF4KSAtIHRyYWNrT2Zmc2V0O1xuXG4gIGNvbnN0IGdldFJvb3RQcm9wcyA9IG90aGVySGFuZGxlcnMgPT4ge1xuICAgIGNvbnN0IG93bkV2ZW50SGFuZGxlcnMgPSB7XG4gICAgICBvbk1vdXNlRG93bjogY3JlYXRlSGFuZGxlTW91c2VEb3duKG90aGVySGFuZGxlcnMgfHwge30pXG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlZEV2ZW50SGFuZGxlcnMgPSBfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywgb3duRXZlbnRIYW5kbGVycyk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBtZXJnZWRFdmVudEhhbmRsZXJzKTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVIYW5kbGVNb3VzZU92ZXIgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25Nb3VzMjtcblxuICAgIChfb3RoZXJIYW5kbGVycyRvbk1vdXMyID0gb3RoZXJIYW5kbGVycy5vbk1vdXNlT3ZlcikgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uTW91czIuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgY29uc3QgaW5kZXggPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnKSk7XG4gICAgc2V0T3BlbihpbmRleCk7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlSGFuZGxlTW91c2VMZWF2ZSA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbk1vdXMzO1xuXG4gICAgKF9vdGhlckhhbmRsZXJzJG9uTW91czMgPSBvdGhlckhhbmRsZXJzLm9uTW91c2VMZWF2ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9vdGhlckhhbmRsZXJzJG9uTW91czMuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG4gICAgc2V0T3BlbigtMSk7XG4gIH07XG5cbiAgY29uc3QgZ2V0VGh1bWJQcm9wcyA9IG90aGVySGFuZGxlcnMgPT4ge1xuICAgIGNvbnN0IG93bkV2ZW50SGFuZGxlcnMgPSB7XG4gICAgICBvbk1vdXNlT3ZlcjogY3JlYXRlSGFuZGxlTW91c2VPdmVyKG90aGVySGFuZGxlcnMgfHwge30pLFxuICAgICAgb25Nb3VzZUxlYXZlOiBjcmVhdGVIYW5kbGVNb3VzZUxlYXZlKG90aGVySGFuZGxlcnMgfHwge30pXG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlZEV2ZW50SGFuZGxlcnMgPSBfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywgb3duRXZlbnRIYW5kbGVycyk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG1lcmdlZEV2ZW50SGFuZGxlcnMpO1xuICB9O1xuXG4gIGNvbnN0IGdldEhpZGRlbklucHV0UHJvcHMgPSBvdGhlckhhbmRsZXJzID0+IHtcbiAgICBjb25zdCBvd25FdmVudEhhbmRsZXJzID0ge1xuICAgICAgb25DaGFuZ2U6IGNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Q2hhbmdlKG90aGVySGFuZGxlcnMgfHwge30pLFxuICAgICAgb25Gb2N1czogY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRGb2N1cyhvdGhlckhhbmRsZXJzIHx8IHt9KSxcbiAgICAgIG9uQmx1cjogY3JlYXRlSGFuZGxlSGlkZW5JbnB1dEJsdXIob3RoZXJIYW5kbGVycyB8fCB7fSlcbiAgICB9O1xuXG4gICAgY29uc3QgbWVyZ2VkRXZlbnRIYW5kbGVycyA9IF9leHRlbmRzKHt9LCBvdGhlckhhbmRsZXJzLCBvd25FdmVudEhhbmRsZXJzKTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICB0YWJJbmRleCxcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBhcmlhTGFiZWxsZWRieSxcbiAgICAgICdhcmlhLW9yaWVudGF0aW9uJzogb3JpZW50YXRpb24sXG4gICAgICAnYXJpYS12YWx1ZW1heCc6IHNjYWxlKG1heCksXG4gICAgICAnYXJpYS12YWx1ZW1pbic6IHNjYWxlKG1pbiksXG4gICAgICBuYW1lLFxuICAgICAgdHlwZTogJ3JhbmdlJyxcbiAgICAgIG1pbjogcHJvcHMubWluLFxuICAgICAgbWF4OiBwcm9wcy5tYXgsXG4gICAgICBzdGVwOiBwcm9wcy5zdGVwLFxuICAgICAgZGlzYWJsZWRcbiAgICB9LCBtZXJnZWRFdmVudEhhbmRsZXJzLCB7XG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHZpc3VhbGx5SGlkZGVuLCB7XG4gICAgICAgIGRpcmVjdGlvbjogaXNSdGwgPyAncnRsJyA6ICdsdHInLFxuICAgICAgICAvLyBTbyB0aGF0IFZvaWNlT3ZlcidzIGZvY3VzIGluZGljYXRvciBtYXRjaGVzIHRoZSB0aHVtYidzIGRpbWVuc2lvbnNcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH0pXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBheGlzLFxuICAgIGF4aXNQcm9wcyxcbiAgICBnZXRSb290UHJvcHMsXG4gICAgZ2V0SGlkZGVuSW5wdXRQcm9wcyxcbiAgICBnZXRUaHVtYlByb3BzLFxuICAgIGRyYWdnaW5nLFxuICAgIG1hcmtzLFxuICAgIHZhbHVlcyxcbiAgICBhY3RpdmUsXG4gICAgZm9jdXNWaXNpYmxlLFxuICAgIG9wZW4sXG4gICAgcmFuZ2UsXG4gICAgdHJhY2tPZmZzZXQsXG4gICAgdHJhY2tMZWFwXG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFyaWEtbGFiZWxcIiwgXCJhcmlhLXZhbHVldGV4dFwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImNsYXNzZXNcIiwgXCJkaXNhYmxlU3dhcFwiLCBcImRpc2FibGVkXCIsIFwiZ2V0QXJpYUxhYmVsXCIsIFwiZ2V0QXJpYVZhbHVlVGV4dFwiLCBcIm1hcmtzXCIsIFwibWF4XCIsIFwibWluXCIsIFwibmFtZVwiLCBcIm9uQ2hhbmdlXCIsIFwib25DaGFuZ2VDb21taXR0ZWRcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9yaWVudGF0aW9uXCIsIFwic2NhbGVcIiwgXCJzdGVwXCIsIFwidGFiSW5kZXhcIiwgXCJ0cmFja1wiLCBcInZhbHVlXCIsIFwidmFsdWVMYWJlbERpc3BsYXlcIiwgXCJ2YWx1ZUxhYmVsRm9ybWF0XCIsIFwiaXNSdGxcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBhcHBlbmRPd25lclN0YXRlIGZyb20gJy4uL3V0aWxzL2FwcGVuZE93bmVyU3RhdGUnO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICcuLi91dGlscy9pc0hvc3RDb21wb25lbnQnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJy4uL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGdldFNsaWRlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc2xpZGVyVW5zdHlsZWRDbGFzc2VzJztcbmltcG9ydCBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQgZnJvbSAnLi9TbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQnO1xuaW1wb3J0IHVzZVNsaWRlciwgeyB2YWx1ZVRvUGVyY2VudCB9IGZyb20gJy4vdXNlU2xpZGVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IElkZW50aXR5ID0geCA9PiB4O1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgZGlzYWJsZWQsXG4gICAgZHJhZ2dpbmcsXG4gICAgbWFya2VkLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIHRyYWNrLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGRyYWdnaW5nICYmICdkcmFnZ2luZycsIG1hcmtlZCAmJiAnbWFya2VkJywgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgJ3ZlcnRpY2FsJywgdHJhY2sgPT09ICdpbnZlcnRlZCcgJiYgJ3RyYWNrSW52ZXJ0ZWQnLCB0cmFjayA9PT0gZmFsc2UgJiYgJ3RyYWNrRmFsc2UnXSxcbiAgICByYWlsOiBbJ3JhaWwnXSxcbiAgICB0cmFjazogWyd0cmFjayddLFxuICAgIG1hcms6IFsnbWFyayddLFxuICAgIG1hcmtBY3RpdmU6IFsnbWFya0FjdGl2ZSddLFxuICAgIG1hcmtMYWJlbDogWydtYXJrTGFiZWwnXSxcbiAgICBtYXJrTGFiZWxBY3RpdmU6IFsnbWFya0xhYmVsQWN0aXZlJ10sXG4gICAgdmFsdWVMYWJlbDogWyd2YWx1ZUxhYmVsJ10sXG4gICAgdGh1bWI6IFsndGh1bWInLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBhY3RpdmU6IFsnYWN0aXZlJ10sXG4gICAgZGlzYWJsZWQ6IFsnZGlzYWJsZWQnXSxcbiAgICBmb2N1c1Zpc2libGU6IFsnZm9jdXNWaXNpYmxlJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTbGlkZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgRm9yd2FyZCA9ICh7XG4gIGNoaWxkcmVuXG59KSA9PiBjaGlsZHJlbjtcblxuY29uc3QgU2xpZGVyVW5zdHlsZWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTbGlkZXJVbnN0eWxlZChwcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfY29tcG9uZW50cyRSYWlsLCBfY29tcG9uZW50cyRUcmFjaywgX2NvbXBvbmVudHMkVGh1bWIsIF9jb21wb25lbnRzJFZhbHVlTGFiZSwgX2NvbXBvbmVudHMkTWFyaywgX2NvbXBvbmVudHMkTWFya0xhYmVsO1xuXG4gIGNvbnN0IHtcbiAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICAnYXJpYS12YWx1ZXRleHQnOiBhcmlhVmFsdWV0ZXh0LFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQsXG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgZGlzYWJsZVN3YXAgPSBmYWxzZSxcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGdldEFyaWFMYWJlbCxcbiAgICBnZXRBcmlhVmFsdWVUZXh0LFxuICAgIG1hcmtzOiBtYXJrc1Byb3AgPSBmYWxzZSxcbiAgICBtYXggPSAxMDAsXG4gICAgbWluID0gMCxcbiAgICBvbk1vdXNlRG93bixcbiAgICBvcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyxcbiAgICBzY2FsZSA9IElkZW50aXR5LFxuICAgIHN0ZXAgPSAxLFxuICAgIHRyYWNrID0gJ25vcm1hbCcsXG4gICAgdmFsdWVMYWJlbERpc3BsYXkgPSAnb2ZmJyxcbiAgICB2YWx1ZUxhYmVsRm9ybWF0ID0gSWRlbnRpdHksXG4gICAgaXNSdGwgPSBmYWxzZSxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzID0ge31cbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpOyAvLyBhbGwgcHJvcHMgd2l0aCBkZWZhdWx0c1xuICAvLyBjb25zaWRlciBleHRyYWN0aW5nIHRvIGhvb2sgYW4gcmV1c2luZyB0aGUgbGludCBydWxlIGZvciB0aGUgdmFyaW50c1xuXG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIG1hcms6IG1hcmtzUHJvcCxcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcCxcbiAgICBkaXNhYmxlZCxcbiAgICBpc1J0bCxcbiAgICBtYXgsXG4gICAgbWluLFxuICAgIG9yaWVudGF0aW9uLFxuICAgIHNjYWxlLFxuICAgIHN0ZXAsXG4gICAgdHJhY2ssXG4gICAgdmFsdWVMYWJlbERpc3BsYXksXG4gICAgdmFsdWVMYWJlbEZvcm1hdFxuICB9KTtcblxuICBjb25zdCB7XG4gICAgYXhpc1Byb3BzLFxuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRIaWRkZW5JbnB1dFByb3BzLFxuICAgIGdldFRodW1iUHJvcHMsXG4gICAgb3BlbixcbiAgICBhY3RpdmUsXG4gICAgYXhpcyxcbiAgICByYW5nZSxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZHJhZ2dpbmcsXG4gICAgbWFya3MsXG4gICAgdmFsdWVzLFxuICAgIHRyYWNrT2Zmc2V0LFxuICAgIHRyYWNrTGVhcFxuICB9ID0gdXNlU2xpZGVyKF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCB7XG4gICAgcmVmXG4gIH0pKTtcbiAgb3duZXJTdGF0ZS5tYXJrZWQgPSBtYXJrcy5sZW5ndGggPiAwICYmIG1hcmtzLnNvbWUobWFyayA9PiBtYXJrLmxhYmVsKTtcbiAgb3duZXJTdGF0ZS5kcmFnZ2luZyA9IGRyYWdnaW5nO1xuICBjb25zdCBSb290ID0gKF9yZWYgPSBjb21wb25lbnQgIT0gbnVsbCA/IGNvbXBvbmVudCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiAnc3Bhbic7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoUm9vdCwgX2V4dGVuZHMoe30sIG90aGVyLCBjb21wb25lbnRzUHJvcHMucm9vdCksIG93bmVyU3RhdGUpO1xuICBjb25zdCBSYWlsID0gKF9jb21wb25lbnRzJFJhaWwgPSBjb21wb25lbnRzLlJhaWwpICE9IG51bGwgPyBfY29tcG9uZW50cyRSYWlsIDogJ3NwYW4nO1xuICBjb25zdCByYWlsUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKFJhaWwsIGNvbXBvbmVudHNQcm9wcy5yYWlsLCBvd25lclN0YXRlKTtcbiAgY29uc3QgVHJhY2sgPSAoX2NvbXBvbmVudHMkVHJhY2sgPSBjb21wb25lbnRzLlRyYWNrKSAhPSBudWxsID8gX2NvbXBvbmVudHMkVHJhY2sgOiAnc3Bhbic7XG4gIGNvbnN0IHRyYWNrUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKFRyYWNrLCBjb21wb25lbnRzUHJvcHMudHJhY2ssIG93bmVyU3RhdGUpO1xuXG4gIGNvbnN0IHRyYWNrU3R5bGUgPSBfZXh0ZW5kcyh7fSwgYXhpc1Byb3BzW2F4aXNdLm9mZnNldCh0cmFja09mZnNldCksIGF4aXNQcm9wc1theGlzXS5sZWFwKHRyYWNrTGVhcCkpO1xuXG4gIGNvbnN0IFRodW1iID0gKF9jb21wb25lbnRzJFRodW1iID0gY29tcG9uZW50cy5UaHVtYikgIT0gbnVsbCA/IF9jb21wb25lbnRzJFRodW1iIDogJ3NwYW4nO1xuICBjb25zdCB0aHVtYlByb3BzID0gYXBwZW5kT3duZXJTdGF0ZShUaHVtYiwgY29tcG9uZW50c1Byb3BzLnRodW1iLCBvd25lclN0YXRlKTtcbiAgY29uc3QgVmFsdWVMYWJlbCA9IChfY29tcG9uZW50cyRWYWx1ZUxhYmUgPSBjb21wb25lbnRzLlZhbHVlTGFiZWwpICE9IG51bGwgPyBfY29tcG9uZW50cyRWYWx1ZUxhYmUgOiBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQ7XG4gIGNvbnN0IHZhbHVlTGFiZWxQcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoVmFsdWVMYWJlbCwgY29tcG9uZW50c1Byb3BzLnZhbHVlTGFiZWwsIG93bmVyU3RhdGUpO1xuICBjb25zdCBNYXJrID0gKF9jb21wb25lbnRzJE1hcmsgPSBjb21wb25lbnRzLk1hcmspICE9IG51bGwgPyBfY29tcG9uZW50cyRNYXJrIDogJ3NwYW4nO1xuICBjb25zdCBtYXJrUHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKE1hcmssIGNvbXBvbmVudHNQcm9wcy5tYXJrLCBvd25lclN0YXRlKTtcbiAgY29uc3QgTWFya0xhYmVsID0gKF9jb21wb25lbnRzJE1hcmtMYWJlbCA9IGNvbXBvbmVudHMuTWFya0xhYmVsKSAhPSBudWxsID8gX2NvbXBvbmVudHMkTWFya0xhYmVsIDogJ3NwYW4nO1xuICBjb25zdCBtYXJrTGFiZWxQcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoTWFya0xhYmVsLCBjb21wb25lbnRzUHJvcHMubWFya0xhYmVsLCBvd25lclN0YXRlKTtcbiAgY29uc3QgSW5wdXQgPSBjb21wb25lbnRzLklucHV0IHx8ICdpbnB1dCc7XG4gIGNvbnN0IGlucHV0UHJvcHMgPSBhcHBlbmRPd25lclN0YXRlKElucHV0LCBjb21wb25lbnRzUHJvcHMuaW5wdXQsIG93bmVyU3RhdGUpO1xuICBjb25zdCBoaWRkZW5JbnB1dFByb3BzID0gZ2V0SGlkZGVuSW5wdXRQcm9wcygpO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgZ2V0Um9vdFByb3BzKHtcbiAgICBvbk1vdXNlRG93blxuICB9KSwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHJvb3RQcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSksXG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChSYWlsLCBfZXh0ZW5kcyh7fSwgcmFpbFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yYWlsLCByYWlsUHJvcHMuY2xhc3NOYW1lKVxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goVHJhY2ssIF9leHRlbmRzKHt9LCB0cmFja1Byb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy50cmFjaywgdHJhY2tQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCB0cmFja1N0eWxlLCB0cmFja1Byb3BzLnN0eWxlKVxuICAgIH0pKSwgbWFya3MubWFwKChtYXJrLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgcGVyY2VudCA9IHZhbHVlVG9QZXJjZW50KG1hcmsudmFsdWUsIG1pbiwgbWF4KTtcbiAgICAgIGNvbnN0IHN0eWxlID0gYXhpc1Byb3BzW2F4aXNdLm9mZnNldChwZXJjZW50KTtcbiAgICAgIGxldCBtYXJrQWN0aXZlO1xuXG4gICAgICBpZiAodHJhY2sgPT09IGZhbHNlKSB7XG4gICAgICAgIG1hcmtBY3RpdmUgPSB2YWx1ZXMuaW5kZXhPZihtYXJrLnZhbHVlKSAhPT0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXJrQWN0aXZlID0gdHJhY2sgPT09ICdub3JtYWwnICYmIChyYW5nZSA/IG1hcmsudmFsdWUgPj0gdmFsdWVzWzBdICYmIG1hcmsudmFsdWUgPD0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXSA6IG1hcmsudmFsdWUgPD0gdmFsdWVzWzBdKSB8fCB0cmFjayA9PT0gJ2ludmVydGVkJyAmJiAocmFuZ2UgPyBtYXJrLnZhbHVlIDw9IHZhbHVlc1swXSB8fCBtYXJrLnZhbHVlID49IHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0gOiBtYXJrLnZhbHVlID49IHZhbHVlc1swXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChNYXJrLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGluZGV4XG4gICAgICAgIH0sIG1hcmtQcm9wcywgIWlzSG9zdENvbXBvbmVudChNYXJrKSAmJiB7XG4gICAgICAgICAgbWFya0FjdGl2ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZSwgbWFya1Byb3BzLnN0eWxlKSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5tYXJrLCBtYXJrUHJvcHMuY2xhc3NOYW1lLCBtYXJrQWN0aXZlICYmIGNsYXNzZXMubWFya0FjdGl2ZSlcbiAgICAgICAgfSkpLCBtYXJrLmxhYmVsICE9IG51bGwgPyAvKiNfX1BVUkVfXyovX2pzeChNYXJrTGFiZWwsIF9leHRlbmRzKHtcbiAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGluZGV4XG4gICAgICAgIH0sIG1hcmtMYWJlbFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KE1hcmtMYWJlbCkgJiYge1xuICAgICAgICAgIG1hcmtMYWJlbEFjdGl2ZTogbWFya0FjdGl2ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZSwgbWFya0xhYmVsUHJvcHMuc3R5bGUpLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLm1hcmtMYWJlbCwgbWFya0xhYmVsUHJvcHMuY2xhc3NOYW1lLCBtYXJrQWN0aXZlICYmIGNsYXNzZXMubWFya0xhYmVsQWN0aXZlKSxcbiAgICAgICAgICBjaGlsZHJlbjogbWFyay5sYWJlbFxuICAgICAgICB9KSkgOiBudWxsXVxuICAgICAgfSwgbWFyay52YWx1ZSk7XG4gICAgfSksIHZhbHVlcy5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgcGVyY2VudCA9IHZhbHVlVG9QZXJjZW50KHZhbHVlLCBtaW4sIG1heCk7XG4gICAgICBjb25zdCBzdHlsZSA9IGF4aXNQcm9wc1theGlzXS5vZmZzZXQocGVyY2VudCk7XG4gICAgICBjb25zdCBWYWx1ZUxhYmVsQ29tcG9uZW50ID0gdmFsdWVMYWJlbERpc3BsYXkgPT09ICdvZmYnID8gRm9yd2FyZCA6IFZhbHVlTGFiZWw7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFZhbHVlTGFiZWxDb21wb25lbnQsIF9leHRlbmRzKHt9LCAhaXNIb3N0Q29tcG9uZW50KFZhbHVlTGFiZWxDb21wb25lbnQpICYmIHtcbiAgICAgICAgICB2YWx1ZUxhYmVsRm9ybWF0LFxuICAgICAgICAgIHZhbHVlTGFiZWxEaXNwbGF5LFxuICAgICAgICAgIHZhbHVlOiB0eXBlb2YgdmFsdWVMYWJlbEZvcm1hdCA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlTGFiZWxGb3JtYXQoc2NhbGUodmFsdWUpLCBpbmRleCkgOiB2YWx1ZUxhYmVsRm9ybWF0LFxuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIG9wZW46IG9wZW4gPT09IGluZGV4IHx8IGFjdGl2ZSA9PT0gaW5kZXggfHwgdmFsdWVMYWJlbERpc3BsYXkgPT09ICdvbicsXG4gICAgICAgICAgZGlzYWJsZWRcbiAgICAgICAgfSwgdmFsdWVMYWJlbFByb3BzLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMudmFsdWVMYWJlbCwgdmFsdWVMYWJlbFByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRodW1iLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBcImRhdGEtaW5kZXhcIjogaW5kZXhcbiAgICAgICAgICB9LCB0aHVtYlByb3BzLCBnZXRUaHVtYlByb3BzKCksIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnRodW1iLCB0aHVtYlByb3BzLmNsYXNzTmFtZSwgYWN0aXZlID09PSBpbmRleCAmJiBjbGFzc2VzLmFjdGl2ZSwgZm9jdXNWaXNpYmxlID09PSBpbmRleCAmJiBjbGFzc2VzLmZvY3VzVmlzaWJsZSlcbiAgICAgICAgICB9LCAhaXNIb3N0Q29tcG9uZW50KFRodW1iKSAmJiB7XG4gICAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgdGh1bWJQcm9wcy5vd25lclN0YXRlKVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGUsIHtcbiAgICAgICAgICAgICAgcG9pbnRlckV2ZW50czogZGlzYWJsZVN3YXAgJiYgYWN0aXZlICE9PSBpbmRleCA/ICdub25lJyA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSwgdGh1bWJQcm9wcy5zdHlsZSksXG4gICAgICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goSW5wdXQsIF9leHRlbmRzKHt9LCBoaWRkZW5JbnB1dFByb3BzLCB7XG4gICAgICAgICAgICAgIFwiZGF0YS1pbmRleFwiOiBpbmRleCxcbiAgICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGdldEFyaWFMYWJlbCA/IGdldEFyaWFMYWJlbChpbmRleCkgOiBhcmlhTGFiZWwsXG4gICAgICAgICAgICAgIFwiYXJpYS12YWx1ZW5vd1wiOiBzY2FsZSh2YWx1ZSksXG4gICAgICAgICAgICAgIFwiYXJpYS12YWx1ZXRleHRcIjogZ2V0QXJpYVZhbHVlVGV4dCA/IGdldEFyaWFWYWx1ZVRleHQoc2NhbGUodmFsdWUpLCBpbmRleCkgOiBhcmlhVmFsdWV0ZXh0LFxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVzW2luZGV4XVxuICAgICAgICAgICAgfSwgIWlzSG9zdENvbXBvbmVudChJbnB1dCkgJiYge1xuICAgICAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgaW5wdXRQcm9wcy5vd25lclN0YXRlKVxuICAgICAgICAgICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIGhpZGRlbklucHV0UHJvcHMuc3R5bGUsIGlucHV0UHJvcHMuc3R5bGUpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSkpXG4gICAgICB9LCBpbmRleCk7XG4gICAgfSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyVW5zdHlsZWQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgc2xpZGVyLlxuICAgKi9cbiAgJ2FyaWEtbGFiZWwnOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuc3RyaW5nLCBwcm9wcyA9PiB7XG4gICAgY29uc3QgcmFuZ2UgPSBBcnJheS5pc0FycmF5KHByb3BzLnZhbHVlIHx8IHByb3BzLmRlZmF1bHRWYWx1ZSk7XG5cbiAgICBpZiAocmFuZ2UgJiYgcHJvcHNbJ2FyaWEtbGFiZWwnXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHVzZSB0aGUgYGdldEFyaWFMYWJlbGAgcHJvcCBpbnN0ZWFkIG9mIGBhcmlhLWxhYmVsYCB3aGVuIHVzaW5nIGEgcmFuZ2Ugc2xpZGVyLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBlbGVtZW50IGNvbnRhaW5pbmcgYSBsYWJlbCBmb3IgdGhlIHNsaWRlci5cbiAgICovXG4gICdhcmlhLWxhYmVsbGVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKi9cbiAgJ2FyaWEtdmFsdWV0ZXh0JzogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLnN0cmluZywgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHJhbmdlID0gQXJyYXkuaXNBcnJheShwcm9wcy52YWx1ZSB8fCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuXG4gICAgaWYgKHJhbmdlICYmIHByb3BzWydhcmlhLXZhbHVldGV4dCddICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogWW91IG5lZWQgdG8gdXNlIHRoZSBgZ2V0QXJpYVZhbHVlVGV4dGAgcHJvcCBpbnN0ZWFkIG9mIGBhcmlhLXZhbHVldGV4dGAgd2hlbiB1c2luZyBhIHJhbmdlIHNsaWRlci4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgU2xpZGVyLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIE1hcms6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBNYXJrTGFiZWw6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSYWlsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFRodW1iOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgVHJhY2s6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBWYWx1ZUxhYmVsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBTbGlkZXIuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWFyazogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtYXJrTGFiZWw6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcmFpbDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRodW1iOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRyYWNrOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHZhbHVlTGFiZWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgICAgIH0pLFxuICAgICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICAgIHZhbHVlTGFiZWxEaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ29mZicsICdvbiddKVxuICAgIH0pXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBhY3RpdmUgdGh1bWIgZG9lc24ndCBzd2FwIHdoZW4gbW92aW5nIHBvaW50ZXIgb3ZlciBhIHRodW1iIHdoaWxlIGRyYWdnaW5nIGFub3RoZXIgdGh1bWIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU3dhcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFjY2VwdHMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlIHRoYXQgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IG5hbWUgZm9yIHRoZSB0aHVtYiBsYWJlbHMgb2YgdGhlIHNsaWRlci5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgdGh1bWIgbGFiZWwncyBpbmRleCB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRBcmlhTGFiZWw6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBY2NlcHRzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBUaGlzIGlzIGltcG9ydGFudCBmb3Igc2NyZWVuIHJlYWRlciB1c2Vycy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB0aHVtYiBsYWJlbCdzIHZhbHVlIHRvIGZvcm1hdC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSB0aHVtYiBsYWJlbCdzIGluZGV4IHRvIGZvcm1hdC5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldEFyaWFWYWx1ZVRleHQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdGhlbWUgY29udGV4dCBoYXMgcnRsIGRpcmVjdGlvbi4gSXQgaXMgc2V0IGF1dG9tYXRpY2FsbHkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpc1J0bDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE1hcmtzIGluZGljYXRlIHByZWRldGVybWluZWQgdmFsdWVzIHRvIHdoaWNoIHRoZSB1c2VyIGNhbiBtb3ZlIHRoZSBzbGlkZXIuXG4gICAqIElmIGB0cnVlYCB0aGUgbWFya3MgYXJlIHNwYWNlZCBhY2NvcmRpbmcgdGhlIHZhbHVlIG9mIHRoZSBgc3RlcGAgcHJvcC5cbiAgICogSWYgYW4gYXJyYXksIGl0IHNob3VsZCBjb250YWluIG9iamVjdHMgd2l0aCBgdmFsdWVgIGFuZCBhbiBvcHRpb25hbCBgbGFiZWxgIGtleXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtYXJrczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSksIFByb3BUeXBlcy5ib29sXSksXG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGFsbG93ZWQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogU2hvdWxkIG5vdCBiZSBlcXVhbCB0byBtaW4uXG4gICAqIEBkZWZhdWx0IDEwMFxuICAgKi9cbiAgbWF4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBhbGxvd2VkIHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIFNob3VsZCBub3QgYmUgZXF1YWwgdG8gbWF4LlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBtaW46IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBzbGlkZXIncyB2YWx1ZSBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoYW55KS5cbiAgICogKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50IG5vdCBhIGNoYW5nZSBldmVudC5cbiAgICogQHBhcmFtIHtudW1iZXIgfCBudW1iZXJbXX0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGFjdGl2ZVRodW1iIEluZGV4IG9mIHRoZSBjdXJyZW50bHkgbW92ZWQgdGh1bWIuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgYG1vdXNldXBgIGlzIHRyaWdnZXJlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5TeW50aGV0aWNFdmVudCB8IEV2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay4gKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50IG5vdCBhIGNoYW5nZSBldmVudC5cbiAgICogQHBhcmFtIHtudW1iZXIgfCBudW1iZXJbXX0gdmFsdWUgVGhlIG5ldyB2YWx1ZS5cbiAgICovXG4gIG9uQ2hhbmdlQ29tbWl0dGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG9yaWVudGF0aW9uLlxuICAgKiBAZGVmYXVsdCAnaG9yaXpvbnRhbCdcbiAgICovXG4gIG9yaWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLFxuXG4gIC8qKlxuICAgKiBBIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uLCB0byBjaGFuZ2UgdGhlIHNjYWxlIG9mIHRoZSBzbGlkZXIuXG4gICAqIEBkZWZhdWx0ICh4KSA9PiB4XG4gICAqL1xuICBzY2FsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBncmFudWxhcml0eSB3aXRoIHdoaWNoIHRoZSBzbGlkZXIgY2FuIHN0ZXAgdGhyb3VnaCB2YWx1ZXMuIChBIFwiZGlzY3JldGVcIiBzbGlkZXIuKVxuICAgKiBUaGUgYG1pbmAgcHJvcCBzZXJ2ZXMgYXMgdGhlIG9yaWdpbiBmb3IgdGhlIHZhbGlkIHZhbHVlcy5cbiAgICogV2UgcmVjb21tZW5kIChtYXggLSBtaW4pIHRvIGJlIGV2ZW5seSBkaXZpc2libGUgYnkgdGhlIHN0ZXAuXG4gICAqXG4gICAqIFdoZW4gc3RlcCBpcyBgbnVsbGAsIHRoZSB0aHVtYiBjYW4gb25seSBiZSBzbGlkIG9udG8gbWFya3MgcHJvdmlkZWQgd2l0aCB0aGUgYG1hcmtzYCBwcm9wLlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBzdGVwOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUYWIgaW5kZXggYXR0cmlidXRlIG9mIHRoZSBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB0cmFjayBwcmVzZW50YXRpb246XG4gICAqXG4gICAqIC0gYG5vcm1hbGAgdGhlIHRyYWNrIHdpbGwgcmVuZGVyIGEgYmFyIHJlcHJlc2VudGluZyB0aGUgc2xpZGVyIHZhbHVlLlxuICAgKiAtIGBpbnZlcnRlZGAgdGhlIHRyYWNrIHdpbGwgcmVuZGVyIGEgYmFyIHJlcHJlc2VudGluZyB0aGUgcmVtYWluaW5nIHNsaWRlciB2YWx1ZS5cbiAgICogLSBgZmFsc2VgIHRoZSB0cmFjayB3aWxsIHJlbmRlciB3aXRob3V0IGEgYmFyLlxuICAgKiBAZGVmYXVsdCAnbm9ybWFsJ1xuICAgKi9cbiAgdHJhY2s6IFByb3BUeXBlcy5vbmVPZihbJ2ludmVydGVkJywgJ25vcm1hbCcsIGZhbHNlXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBGb3IgcmFuZ2VkIHNsaWRlcnMsIHByb3ZpZGUgYW4gYXJyYXkgd2l0aCB0d28gdmFsdWVzLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZW4gdGhlIHZhbHVlIGxhYmVsIGlzIGRpc3BsYXllZDpcbiAgICpcbiAgICogLSBgYXV0b2AgdGhlIHZhbHVlIGxhYmVsIHdpbGwgZGlzcGxheSB3aGVuIHRoZSB0aHVtYiBpcyBob3ZlcmVkIG9yIGZvY3VzZWQuXG4gICAqIC0gYG9uYCB3aWxsIGRpc3BsYXkgcGVyc2lzdGVudGx5LlxuICAgKiAtIGBvZmZgIHdpbGwgbmV2ZXIgZGlzcGxheS5cbiAgICogQGRlZmF1bHQgJ29mZidcbiAgICovXG4gIHZhbHVlTGFiZWxEaXNwbGF5OiBQcm9wVHlwZXMub25lT2YoWydhdXRvJywgJ29mZicsICdvbiddKSxcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBmdW5jdGlvbiB0aGUgdmFsdWUgbGFiZWwncyB2YWx1ZS5cbiAgICpcbiAgICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCBpdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHNpZ25hdHVyZTpcbiAgICpcbiAgICogLSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgbGFiZWwncyB2YWx1ZSB0byBmb3JtYXRcbiAgICogLSB7bnVtYmVyfSBpbmRleCBUaGUgdmFsdWUgbGFiZWwncyBpbmRleCB0byBmb3JtYXRcbiAgICogQGRlZmF1bHQgKHgpID0+IHhcbiAgICovXG4gIHZhbHVlTGFiZWxGb3JtYXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZXJVbnN0eWxlZDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUaGVtZSBhcyB1c2VUaGVtZVN5c3RlbSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWVTeXN0ZW0oZGVmYXVsdFRoZW1lKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCB7IGlzSG9zdENvbXBvbmVudCB9IGZyb20gJ0BtdWkvYmFzZSc7XG5cbmNvbnN0IHNob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcyA9IFNsb3QgPT4ge1xuICByZXR1cm4gIVNsb3QgfHwgIWlzSG9zdENvbXBvbmVudChTbG90KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50XCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImNvbG9yXCIsIFwic2l6ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBTbGlkZXJVbnN0eWxlZCwgeyBTbGlkZXJWYWx1ZUxhYmVsVW5zdHlsZWQsIHNsaWRlclVuc3R5bGVkQ2xhc3NlcywgZ2V0U2xpZGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnQG11aS9iYXNlL1NsaWRlclVuc3R5bGVkJztcbmltcG9ydCB7IGFscGhhLCBsaWdodGVuLCBkYXJrZW4gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkLCB7IHNsb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzIGZyb20gJy4uL3V0aWxzL3Nob3VsZFNwcmVhZEFkZGl0aW9uYWxQcm9wcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgY29uc3Qgc2xpZGVyQ2xhc3NlcyA9IF9leHRlbmRzKHt9LCBzbGlkZXJVbnN0eWxlZENsYXNzZXMsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNsaWRlcicsIFsnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ3RodW1iQ29sb3JQcmltYXJ5JywgJ3RodW1iQ29sb3JTZWNvbmRhcnknLCAnc2l6ZVNtYWxsJywgJ3RodW1iU2l6ZVNtYWxsJ10pKTtcbmNvbnN0IFNsaWRlclJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3QgbWFya3MgPSBvd25lclN0YXRlLm1hcmtzUHJvcCA9PT0gdHJ1ZSAmJiBvd25lclN0YXRlLnN0ZXAgIT09IG51bGwgPyBbLi4uQXJyYXkoTWF0aC5mbG9vcigob3duZXJTdGF0ZS5tYXggLSBvd25lclN0YXRlLm1pbikgLyBvd25lclN0YXRlLnN0ZXApICsgMSldLm1hcCgoXywgaW5kZXgpID0+ICh7XG4gICAgICB2YWx1ZTogb3duZXJTdGF0ZS5taW4gKyBvd25lclN0YXRlLnN0ZXAgKiBpbmRleFxuICAgIH0pKSA6IG93bmVyU3RhdGUubWFya3NQcm9wIHx8IFtdO1xuICAgIGNvbnN0IG1hcmtlZCA9IG1hcmtzLmxlbmd0aCA+IDAgJiYgbWFya3Muc29tZShtYXJrID0+IG1hcmsubGFiZWwpO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIG93bmVyU3RhdGUuc2l6ZSAhPT0gJ21lZGl1bScgJiYgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIG1hcmtlZCAmJiBzdHlsZXMubWFya2VkLCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHN0eWxlcy52ZXJ0aWNhbCwgb3duZXJTdGF0ZS50cmFjayA9PT0gJ2ludmVydGVkJyAmJiBzdHlsZXMudHJhY2tJbnZlcnRlZCwgb3duZXJTdGF0ZS50cmFjayA9PT0gZmFsc2UgJiYgc3R5bGVzLnRyYWNrRmFsc2VdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBib3JkZXJSYWRpdXM6IDEyLFxuICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHRvdWNoQWN0aW9uOiAnbm9uZScsXG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgX2V4dGVuZHMoe1xuICBoZWlnaHQ6IDQsXG4gIHdpZHRoOiAnMTAwJScsXG4gIHBhZGRpbmc6ICcxM3B4IDAnLFxuICAvLyBUaGUgcHJpbWFyeSBpbnB1dCBtZWNoYW5pc20gb2YgdGhlIGRldmljZSBpbmNsdWRlcyBhIHBvaW50aW5nIGRldmljZSBvZiBsaW1pdGVkIGFjY3VyYWN5LlxuICAnQG1lZGlhIChwb2ludGVyOiBjb2Fyc2UpJzoge1xuICAgIC8vIFJlYWNoIDQycHggdG91Y2ggdGFyZ2V0LCBhYm91dCB+OG1tIG9uIHNjcmVlbi5cbiAgICBwYWRkaW5nOiAnMjBweCAwJ1xuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBoZWlnaHQ6IDJcbn0sIG93bmVyU3RhdGUubWFya2VkICYmIHtcbiAgbWFyZ2luQm90dG9tOiAyMFxufSksIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgX2V4dGVuZHMoe1xuICBoZWlnaHQ6ICcxMDAlJyxcbiAgd2lkdGg6IDQsXG4gIHBhZGRpbmc6ICcwIDEzcHgnLFxuICAvLyBUaGUgcHJpbWFyeSBpbnB1dCBtZWNoYW5pc20gb2YgdGhlIGRldmljZSBpbmNsdWRlcyBhIHBvaW50aW5nIGRldmljZSBvZiBsaW1pdGVkIGFjY3VyYWN5LlxuICAnQG1lZGlhIChwb2ludGVyOiBjb2Fyc2UpJzoge1xuICAgIC8vIFJlYWNoIDQycHggdG91Y2ggdGFyZ2V0LCBhYm91dCB+OG1tIG9uIHNjcmVlbi5cbiAgICBwYWRkaW5nOiAnMCAyMHB4J1xuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICB3aWR0aDogMlxufSwgb3duZXJTdGF0ZS5tYXJrZWQgJiYge1xuICBtYXJnaW5SaWdodDogNDRcbn0pLCB7XG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgfSxcbiAgW2AmLiR7c2xpZGVyQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF1cbiAgfSxcbiAgW2AmLiR7c2xpZGVyQ2xhc3Nlcy5kcmFnZ2luZ31gXToge1xuICAgIFtgJiAuJHtzbGlkZXJDbGFzc2VzLnRodW1ifSwgJiAuJHtzbGlkZXJDbGFzc2VzLnRyYWNrfWBdOiB7XG4gICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICB9XG4gIH1cbn0pKTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlclJvb3QucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcbmV4cG9ydCB7IFNsaWRlclJvb3QgfTtcbmNvbnN0IFNsaWRlclJhaWwgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnUmFpbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJhaWxcbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICBvcGFjaXR5OiAwLjM4XG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICdpbmhlcml0JyxcbiAgdG9wOiAnNTAlJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICBoZWlnaHQ6ICcxMDAlJyxcbiAgd2lkdGg6ICdpbmhlcml0JyxcbiAgbGVmdDogJzUwJScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknXG59LCBvd25lclN0YXRlLnRyYWNrID09PSAnaW52ZXJ0ZWQnICYmIHtcbiAgb3BhY2l0eTogMVxufSkpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyUmFpbC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgU2xpZGVyUmFpbCB9O1xuY29uc3QgU2xpZGVyVHJhY2sgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnVHJhY2snLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy50cmFja1xufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgY29sb3IgPSAvLyBTYW1lIGxvZ2ljIGFzIHRoZSBMaW5lYXJQcm9ncmVzcyB0cmFjayBjb2xvclxuICB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBsaWdodGVuKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC42MikgOiBkYXJrZW4odGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjUpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkIGN1cnJlbnRDb2xvcicsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydsZWZ0JywgJ3dpZHRoJywgJ2JvdHRvbScsICdoZWlnaHQnXSwge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgfSlcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBib3JkZXI6ICdub25lJ1xuICB9LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICAgIGhlaWdodDogJ2luaGVyaXQnLFxuICAgIHRvcDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbiAgfSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gICAgd2lkdGg6ICdpbmhlcml0JyxcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKC01MCUpJ1xuICB9LCBvd25lclN0YXRlLnRyYWNrID09PSBmYWxzZSAmJiB7XG4gICAgZGlzcGxheTogJ25vbmUnXG4gIH0sIG93bmVyU3RhdGUudHJhY2sgPT09ICdpbnZlcnRlZCcgJiYge1xuICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgYm9yZGVyQ29sb3I6IGNvbG9yXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXJUcmFjay5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgU2xpZGVyVHJhY2sgfTtcbmNvbnN0IFNsaWRlclRodW1iID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpU2xpZGVyJyxcbiAgc2xvdDogJ1RodW1iJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy50aHVtYiwgc3R5bGVzW2B0aHVtYkNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLnNpemUgIT09ICdtZWRpdW0nICYmIHN0eWxlc1tgdGh1bWJTaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6IDIwLFxuICBoZWlnaHQ6IDIwLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgb3V0bGluZTogMCxcbiAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydib3gtc2hhZG93JywgJ2xlZnQnLCAnYm90dG9tJ10sIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfSlcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHdpZHRoOiAxMixcbiAgaGVpZ2h0OiAxMlxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgdG9wOiAnNTAlJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJ1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGxlZnQ6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgNTAlKSdcbn0sIHtcbiAgJyY6YmVmb3JlJzogX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1syXVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIGJveFNoYWRvdzogJ25vbmUnXG4gIH0pLFxuICAnJjo6YWZ0ZXInOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgLy8gNDJweCBpcyB0aGUgaGl0IHRhcmdldFxuICAgIHdpZHRoOiA0MixcbiAgICBoZWlnaHQ6IDQyLFxuICAgIHRvcDogJzUwJScsXG4gICAgbGVmdDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJ1xuICB9LFxuICBbYCY6aG92ZXIsICYuJHtzbGlkZXJDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJveFNoYWRvdzogYDBweCAwcHggMHB4IDhweCAke2FscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC4xNil9YCxcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgIH1cbiAgfSxcbiAgW2AmLiR7c2xpZGVyQ2xhc3Nlcy5hY3RpdmV9YF06IHtcbiAgICBib3hTaGFkb3c6IGAwcHggMHB4IDBweCAxNHB4ICR7YWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjE2KX1gXG4gIH0sXG4gIFtgJi4ke3NsaWRlckNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgfVxuICB9XG59KSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXJUaHVtYi5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgU2xpZGVyVGh1bWIgfTtcbmNvbnN0IFNsaWRlclZhbHVlTGFiZWwgPSBzdHlsZWQoU2xpZGVyVmFsdWVMYWJlbFVuc3R5bGVkLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnVmFsdWVMYWJlbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnZhbHVlTGFiZWxcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIFtgJi4ke3NsaWRlckNsYXNzZXMudmFsdWVMYWJlbE9wZW59YF06IHtcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0xMDAlKSBzY2FsZSgxKSdcbiAgfSxcbiAgekluZGV4OiAxLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBmb250V2VpZ2h0OiA1MDAsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ3RyYW5zZm9ybSddLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pLFxuICB0b3A6IC0xMCxcbiAgdHJhbnNmb3JtT3JpZ2luOiAnYm90dG9tIGNlbnRlcicsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTEwMCUpIHNjYWxlKDApJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzYwMF0sXG4gIGJvcmRlclJhZGl1czogMixcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHBhZGRpbmc6ICcwLjI1cmVtIDAuNzVyZW0nXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgcGFkZGluZzogJzAuMjVyZW0gMC41cmVtJ1xufSwge1xuICAnJjpiZWZvcmUnOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIHdpZHRoOiA4LFxuICAgIGhlaWdodDogOCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIDUwJSkgcm90YXRlKDQ1ZGVnKScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnaW5oZXJpdCdcbiAgfVxufSkpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyVmFsdWVMYWJlbC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59IDogdm9pZCAwO1xuZXhwb3J0IHsgU2xpZGVyVmFsdWVMYWJlbCB9O1xuY29uc3QgU2xpZGVyTWFyayA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVNsaWRlcicsXG4gIHNsb3Q6ICdNYXJrJyxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gc2xvdFNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdtYXJrQWN0aXZlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubWFya1xufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGUsXG4gIG1hcmtBY3RpdmVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHdpZHRoOiAyLFxuICBoZWlnaHQ6IDIsXG4gIGJvcmRlclJhZGl1czogMSxcbiAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJ1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIHtcbiAgdG9wOiAnNTAlJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC0xcHgsIC01MCUpJ1xufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGxlZnQ6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgMXB4KSdcbn0sIG1hcmtBY3RpdmUgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgb3BhY2l0eTogMC44XG59KSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZXJNYXJrLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBTbGlkZXJNYXJrIH07XG5jb25zdCBTbGlkZXJNYXJrTGFiZWwgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlTbGlkZXInLFxuICBzbG90OiAnTWFya0xhYmVsJyxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gc2xvdFNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdtYXJrTGFiZWxBY3RpdmUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5tYXJrTGFiZWxcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlLFxuICBtYXJrTGFiZWxBY3RpdmVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gIHRvcDogMzAsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknLFxuICAnQG1lZGlhIChwb2ludGVyOiBjb2Fyc2UpJzoge1xuICAgIHRvcDogNDBcbiAgfVxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGxlZnQ6IDM2LFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDUwJSknLFxuICAnQG1lZGlhIChwb2ludGVyOiBjb2Fyc2UpJzoge1xuICAgIGxlZnQ6IDQ0XG4gIH1cbn0sIG1hcmtMYWJlbEFjdGl2ZSAmJiB7XG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxufSkpO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2xpZGVyTWFya0xhYmVsLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBTbGlkZXJNYXJrTGFiZWwgfTtcblxuY29uc3QgZXh0ZW5kVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIHNpemUsXG4gICAgY2xhc3NlcyA9IHt9XG4gIH0gPSBvd25lclN0YXRlO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICByb290OiBjbHN4KGNsYXNzZXMucm9vdCwgZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCksIGNsYXNzZXNbYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSwgc2l6ZSAmJiBbZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWApLCBjbGFzc2VzW2BzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdXSksXG4gICAgdGh1bWI6IGNsc3goY2xhc3Nlcy50aHVtYiwgZ2V0U2xpZGVyVXRpbGl0eUNsYXNzKGB0aHVtYkNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gKSwgY2xhc3Nlc1tgdGh1bWJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sIHNpemUgJiYgW2dldFNsaWRlclV0aWxpdHlDbGFzcyhgdGh1bWJTaXplJHtjYXBpdGFsaXplKHNpemUpfWApLCBjbGFzc2VzW2B0aHVtYlNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF1dKVxuICB9KTtcbn07XG5cbmNvbnN0IFNsaWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNsaWRlcihpbnB1dFByb3BzLCByZWYpIHtcbiAgdmFyIF9jb21wb25lbnRzUHJvcHMkcm9vdCwgX2NvbXBvbmVudHNQcm9wcyR0aHVtLCBfY29tcG9uZW50c1Byb3BzJHRyYWMsIF9jb21wb25lbnRzUHJvcHMkdmFsdTtcblxuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpbnB1dFByb3BzLFxuICAgIG5hbWU6ICdNdWlTbGlkZXInXG4gIH0pO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGlzUnRsID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJztcblxuICBjb25zdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBjb21wb25lbnQgPSAnc3BhbicsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgIHNpemUgPSAnbWVkaXVtJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIHNpemVcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IGV4dGVuZFV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU2xpZGVyVW5zdHlsZWQsIF9leHRlbmRzKHt9LCBvdGhlciwge1xuICAgIGlzUnRsOiBpc1J0bCxcbiAgICBjb21wb25lbnRzOiBfZXh0ZW5kcyh7XG4gICAgICBSb290OiBTbGlkZXJSb290LFxuICAgICAgUmFpbDogU2xpZGVyUmFpbCxcbiAgICAgIFRyYWNrOiBTbGlkZXJUcmFjayxcbiAgICAgIFRodW1iOiBTbGlkZXJUaHVtYixcbiAgICAgIFZhbHVlTGFiZWw6IFNsaWRlclZhbHVlTGFiZWwsXG4gICAgICBNYXJrOiBTbGlkZXJNYXJrLFxuICAgICAgTWFya0xhYmVsOiBTbGlkZXJNYXJrTGFiZWxcbiAgICB9LCBjb21wb25lbnRzKSxcbiAgICBjb21wb25lbnRzUHJvcHM6IF9leHRlbmRzKHt9LCBjb21wb25lbnRzUHJvcHMsIHtcbiAgICAgIHJvb3Q6IF9leHRlbmRzKHt9LCBjb21wb25lbnRzUHJvcHMucm9vdCwgc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzKGNvbXBvbmVudHMuUm9vdCkgJiYge1xuICAgICAgICBhczogY29tcG9uZW50LFxuICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkcm9vdCA9IGNvbXBvbmVudHNQcm9wcy5yb290KSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHNQcm9wcyRyb290Lm93bmVyU3RhdGUsIHtcbiAgICAgICAgICBjb2xvcixcbiAgICAgICAgICBzaXplXG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICAgIHRodW1iOiBfZXh0ZW5kcyh7fSwgY29tcG9uZW50c1Byb3BzLnRodW1iLCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMoY29tcG9uZW50cy5UaHVtYikgJiYge1xuICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkdGh1bSA9IGNvbXBvbmVudHNQcm9wcy50aHVtYikgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb21wb25lbnRzUHJvcHMkdGh1bS5vd25lclN0YXRlLCB7XG4gICAgICAgICAgY29sb3IsXG4gICAgICAgICAgc2l6ZVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICB0cmFjazogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcy50cmFjaywgc2hvdWxkU3ByZWFkQWRkaXRpb25hbFByb3BzKGNvbXBvbmVudHMuVHJhY2spICYmIHtcbiAgICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIChfY29tcG9uZW50c1Byb3BzJHRyYWMgPSBjb21wb25lbnRzUHJvcHMudHJhY2spID09IG51bGwgPyB2b2lkIDAgOiBfY29tcG9uZW50c1Byb3BzJHRyYWMub3duZXJTdGF0ZSwge1xuICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgIHNpemVcbiAgICAgICAgfSlcbiAgICAgIH0pLFxuICAgICAgdmFsdWVMYWJlbDogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcy52YWx1ZUxhYmVsLCBzaG91bGRTcHJlYWRBZGRpdGlvbmFsUHJvcHMoY29tcG9uZW50cy5WYWx1ZUxhYmVsKSAmJiB7XG4gICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCAoX2NvbXBvbmVudHNQcm9wcyR2YWx1ID0gY29tcG9uZW50c1Byb3BzLnZhbHVlTGFiZWwpID09IG51bGwgPyB2b2lkIDAgOiBfY29tcG9uZW50c1Byb3BzJHZhbHUub3duZXJTdGF0ZSwge1xuICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgIHNpemVcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSksXG4gICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICByZWY6IHJlZlxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlci5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBzbGlkZXIuXG4gICAqL1xuICAnYXJpYS1sYWJlbCc6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5zdHJpbmcsIHByb3BzID0+IHtcbiAgICBjb25zdCByYW5nZSA9IEFycmF5LmlzQXJyYXkocHJvcHMudmFsdWUgfHwgcHJvcHMuZGVmYXVsdFZhbHVlKTtcblxuICAgIGlmIChyYW5nZSAmJiBwcm9wc1snYXJpYS1sYWJlbCddICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogWW91IG5lZWQgdG8gdXNlIHRoZSBgZ2V0QXJpYUxhYmVsYCBwcm9wIGluc3RlYWQgb2YgYGFyaWEtbGFiZWxgIHdoZW4gdXNpbmcgYSByYW5nZSBzbGlkZXIuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGVsZW1lbnQgY29udGFpbmluZyBhIGxhYmVsIGZvciB0aGUgc2xpZGVyLlxuICAgKi9cbiAgJ2FyaWEtbGFiZWxsZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEEgc3RyaW5nIHZhbHVlIHRoYXQgcHJvdmlkZXMgYSB1c2VyLWZyaWVuZGx5IG5hbWUgZm9yIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqL1xuICAnYXJpYS12YWx1ZXRleHQnOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuc3RyaW5nLCBwcm9wcyA9PiB7XG4gICAgY29uc3QgcmFuZ2UgPSBBcnJheS5pc0FycmF5KHByb3BzLnZhbHVlIHx8IHByb3BzLmRlZmF1bHRWYWx1ZSk7XG5cbiAgICBpZiAocmFuZ2UgJiYgcHJvcHNbJ2FyaWEtdmFsdWV0ZXh0J10gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTVVJOiBZb3UgbmVlZCB0byB1c2UgdGhlIGBnZXRBcmlhVmFsdWVUZXh0YCBwcm9wIGluc3RlYWQgb2YgYGFyaWEtdmFsdWV0ZXh0YCB3aGVuIHVzaW5nIGEgcmFuZ2Ugc2xpZGVyLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIFNsaWRlci5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBNYXJrOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgTWFya0xhYmVsOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUmFpbDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBUaHVtYjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFRyYWNrOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgVmFsdWVMYWJlbDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgU2xpZGVyLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1hcms6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWFya0xhYmVsOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJhaWw6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0aHVtYjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB0cmFjazogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB2YWx1ZUxhYmVsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gICAgICB9KSxcbiAgICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgICAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gICAgICB2YWx1ZUxhYmVsRGlzcGxheTogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdvZmYnLCAnb24nXSlcbiAgICB9KVxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYWN0aXZlIHRodW1iIGRvZXNuJ3Qgc3dhcCB3aGVuIG1vdmluZyBwb2ludGVyIG92ZXIgYSB0aHVtYiB3aGlsZSBkcmFnZ2luZyBhbm90aGVyIHRodW1iLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVN3YXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBY2NlcHRzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHN0cmluZyB2YWx1ZSB0aGF0IHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBuYW1lIGZvciB0aGUgdGh1bWIgbGFiZWxzIG9mIHRoZSBzbGlkZXIuXG4gICAqIFRoaXMgaXMgaW1wb3J0YW50IGZvciBzY3JlZW4gcmVhZGVyIHVzZXJzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIHRodW1iIGxhYmVsJ3MgaW5kZXggdG8gZm9ybWF0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0QXJpYUxhYmVsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBzdHJpbmcgdmFsdWUgdGhhdCBwcm92aWRlcyBhIHVzZXItZnJpZW5kbHkgbmFtZSBmb3IgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHNjcmVlbiByZWFkZXIgdXNlcnMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdGh1bWIgbGFiZWwncyB2YWx1ZSB0byBmb3JtYXQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgdGh1bWIgbGFiZWwncyBpbmRleCB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRBcmlhVmFsdWVUZXh0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHRoZW1lIGNvbnRleHQgaGFzIHJ0bCBkaXJlY3Rpb24uIEl0IGlzIHNldCBhdXRvbWF0aWNhbGx5LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaXNSdGw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNYXJrcyBpbmRpY2F0ZSBwcmVkZXRlcm1pbmVkIHZhbHVlcyB0byB3aGljaCB0aGUgdXNlciBjYW4gbW92ZSB0aGUgc2xpZGVyLlxuICAgKiBJZiBgdHJ1ZWAgdGhlIG1hcmtzIGFyZSBzcGFjZWQgYWNjb3JkaW5nIHRoZSB2YWx1ZSBvZiB0aGUgYHN0ZXBgIHByb3AuXG4gICAqIElmIGFuIGFycmF5LCBpdCBzaG91bGQgY29udGFpbiBvYmplY3RzIHdpdGggYHZhbHVlYCBhbmQgYW4gb3B0aW9uYWwgYGxhYmVsYCBrZXlzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbWFya3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAgIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfSkpLCBQcm9wVHlwZXMuYm9vbF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIFNob3VsZCBub3QgYmUgZXF1YWwgdG8gbWluLlxuICAgKiBAZGVmYXVsdCAxMDBcbiAgICovXG4gIG1heDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIG1pbmltdW0gYWxsb3dlZCB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBTaG91bGQgbm90IGJlIGVxdWFsIHRvIG1heC5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgbWluOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgc2xpZGVyJ3MgdmFsdWUgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqICoqV2FybmluZyoqOiBUaGlzIGlzIGEgZ2VuZXJpYyBldmVudCBub3QgYSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVtYmVyW119IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhY3RpdmVUaHVtYiBJbmRleCBvZiB0aGUgY3VycmVudGx5IG1vdmVkIHRodW1iLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGBtb3VzZXVwYCBpcyB0cmlnZ2VyZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuU3ludGhldGljRXZlbnQgfCBFdmVudH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suICoqV2FybmluZyoqOiBUaGlzIGlzIGEgZ2VuZXJpYyBldmVudCBub3QgYSBjaGFuZ2UgZXZlbnQuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVtYmVyW119IHZhbHVlIFRoZSBuZXcgdmFsdWUuXG4gICAqL1xuICBvbkNoYW5nZUNvbW1pdHRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgb3JpZW50YXRpb24uXG4gICAqIEBkZWZhdWx0ICdob3Jpem9udGFsJ1xuICAgKi9cbiAgb3JpZW50YXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2hvcml6b250YWwnLCAndmVydGljYWwnXSksXG5cbiAgLyoqXG4gICAqIEEgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24sIHRvIGNoYW5nZSB0aGUgc2NhbGUgb2YgdGhlIHNsaWRlci5cbiAgICogQGRlZmF1bHQgKHgpID0+IHhcbiAgICovXG4gIHNjYWxlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHNsaWRlci5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bSddKSxcblxuICAvKipcbiAgICogVGhlIGdyYW51bGFyaXR5IHdpdGggd2hpY2ggdGhlIHNsaWRlciBjYW4gc3RlcCB0aHJvdWdoIHZhbHVlcy4gKEEgXCJkaXNjcmV0ZVwiIHNsaWRlci4pXG4gICAqIFRoZSBgbWluYCBwcm9wIHNlcnZlcyBhcyB0aGUgb3JpZ2luIGZvciB0aGUgdmFsaWQgdmFsdWVzLlxuICAgKiBXZSByZWNvbW1lbmQgKG1heCAtIG1pbikgdG8gYmUgZXZlbmx5IGRpdmlzaWJsZSBieSB0aGUgc3RlcC5cbiAgICpcbiAgICogV2hlbiBzdGVwIGlzIGBudWxsYCwgdGhlIHRodW1iIGNhbiBvbmx5IGJlIHNsaWQgb250byBtYXJrcyBwcm92aWRlZCB3aXRoIHRoZSBgbWFya3NgIHByb3AuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHN0ZXA6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGFiIGluZGV4IGF0dHJpYnV0ZSBvZiB0aGUgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGUgdHJhY2sgcHJlc2VudGF0aW9uOlxuICAgKlxuICAgKiAtIGBub3JtYWxgIHRoZSB0cmFjayB3aWxsIHJlbmRlciBhIGJhciByZXByZXNlbnRpbmcgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICogLSBgaW52ZXJ0ZWRgIHRoZSB0cmFjayB3aWxsIHJlbmRlciBhIGJhciByZXByZXNlbnRpbmcgdGhlIHJlbWFpbmluZyBzbGlkZXIgdmFsdWUuXG4gICAqIC0gYGZhbHNlYCB0aGUgdHJhY2sgd2lsbCByZW5kZXIgd2l0aG91dCBhIGJhci5cbiAgICogQGRlZmF1bHQgJ25vcm1hbCdcbiAgICovXG4gIHRyYWNrOiBQcm9wVHlwZXMub25lT2YoWydpbnZlcnRlZCcsICdub3JtYWwnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHNsaWRlci5cbiAgICogRm9yIHJhbmdlZCBzbGlkZXJzLCBwcm92aWRlIGFuIGFycmF5IHdpdGggdHdvIHZhbHVlcy5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyKSwgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGVuIHRoZSB2YWx1ZSBsYWJlbCBpcyBkaXNwbGF5ZWQ6XG4gICAqXG4gICAqIC0gYGF1dG9gIHRoZSB2YWx1ZSBsYWJlbCB3aWxsIGRpc3BsYXkgd2hlbiB0aGUgdGh1bWIgaXMgaG92ZXJlZCBvciBmb2N1c2VkLlxuICAgKiAtIGBvbmAgd2lsbCBkaXNwbGF5IHBlcnNpc3RlbnRseS5cbiAgICogLSBgb2ZmYCB3aWxsIG5ldmVyIGRpc3BsYXkuXG4gICAqIEBkZWZhdWx0ICdvZmYnXG4gICAqL1xuICB2YWx1ZUxhYmVsRGlzcGxheTogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdvZmYnLCAnb24nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBmb3JtYXQgZnVuY3Rpb24gdGhlIHZhbHVlIGxhYmVsJ3MgdmFsdWUuXG4gICAqXG4gICAqIFdoZW4gYSBmdW5jdGlvbiBpcyBwcm92aWRlZCwgaXQgc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBzaWduYXR1cmU6XG4gICAqXG4gICAqIC0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIGxhYmVsJ3MgdmFsdWUgdG8gZm9ybWF0XG4gICAqIC0ge251bWJlcn0gaW5kZXggVGhlIHZhbHVlIGxhYmVsJ3MgaW5kZXggdG8gZm9ybWF0XG4gICAqIEBkZWZhdWx0ICh4KSA9PiB4XG4gICAqL1xuICB2YWx1ZUxhYmVsRm9ybWF0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2xpZGVyOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQm94IGZyb20gXCJAbXVpL21hdGVyaWFsL0JveFwiO1xuaW1wb3J0IFNsaWRlciBmcm9tIFwiQG11aS9tYXRlcmlhbC9TbGlkZXJcIjtcblxuY29uc3QgVGltZVJhbmdlID0gKHsgdXBkYXRlVGltZVJhbmdlIH0pID0+IHtcbiAgICBjb25zdCBbdmFsdWVzLCBzZXRWYWx1ZXNdID0gUmVhY3QudXNlU3RhdGUoWzAsIDE0NDBdKTtcblxuICAgIGZ1bmN0aW9uIHZhbHVldGV4dCh2YWx1ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCBuZXdOdW0pID0+IHtcbiAgICAgICAgLy9Db252ZXJ0IG1pbnV0ZXMgdG8gMjQgaHIgdGltZVxuICAgICAgICB2YXIgaG91cnMgPSBuZXdOdW1bMF0gLyA2MDtcbiAgICAgICAgdmFyIHJob3VycyA9IE1hdGguZmxvb3IoaG91cnMpO1xuICAgICAgICB2YXIgbWludXRlcyA9IChob3VycyAtIHJob3VycykgKiA2MDtcbiAgICAgICAgdmFyIHJtaW51dGVzID0gTWF0aC5yb3VuZChtaW51dGVzKTtcblxuICAgICAgICB2YXIgaG91cnMyID0gbmV3TnVtWzFdIC8gNjA7XG4gICAgICAgIHZhciByaG91cnMyID0gTWF0aC5mbG9vcihob3VyczIpO1xuICAgICAgICB2YXIgbWludXRlczIgPSAoaG91cnMyIC0gcmhvdXJzMikgKiA2MDtcbiAgICAgICAgdmFyIHJtaW51dGVzMiA9IE1hdGgucm91bmQobWludXRlczIpO1xuXG4gICAgICAgIC8vQWRkIGEgemVybyBpZiBuZWVkZWRcbiAgICAgICAgaWYgKHJtaW51dGVzIDwgMTApIHJtaW51dGVzID0gcm1pbnV0ZXMgKyBcIjBcIjtcbiAgICAgICAgaWYgKHJtaW51dGVzMiA8IDEwKSBybWludXRlczIgPSBybWludXRlczIgKyBcIjBcIjtcblxuICAgICAgICAvL0NvbnZlcnQgdG8gMTIgaG91clxuICAgICAgICB2YXIgQW1PclBtMSA9IHJob3VycyA+PSAxMiA/IFwiUE1cIiA6IFwiQU1cIjtcbiAgICAgICAgdmFyIEFtT3JQbTIgPSByaG91cnMyID49IDEyID8gXCJQTVwiIDogXCJBTVwiO1xuXG4gICAgICAgIHJob3VycyA9IHJob3VycyAlIDEyIHx8IDEyO1xuICAgICAgICByaG91cnMyID0gcmhvdXJzMiAlIDEyIHx8IDEyO1xuXG4gICAgICAgIC8vRm9ybWF0IHRpbWUgaW50byBhIHN0cmluZ1xuICAgICAgICB2YXIgdGltZTEgPSByaG91cnMgKyBcIjpcIiArIHJtaW51dGVzICsgQW1PclBtMTtcblxuICAgICAgICB2YXIgdGltZTIgPSByaG91cnMyICsgXCI6XCIgKyBybWludXRlczIgKyBBbU9yUG0yO1xuXG4gICAgICAgIC8vVXBkYXRlIHRoZSB0aW1lIHJhbmdlIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICBpZiAodGltZTIgPT09IFwiMTI6MDBQTVwiKSB7XG4gICAgICAgICAgICB0aW1lMiA9IFwiMTE6NDVQTVwiO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVRpbWVSYW5nZShbdGltZTEsIHRpbWUyXSk7XG4gICAgICAgIHNldFZhbHVlcyhuZXdOdW0pO1xuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgICAgPEJveCBzeD17eyB3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCI5MHB4XCIsIG92ZXJmbG93OiBcImhpZGRlblwiIH19PlxuICAgICAgICAgICAgPFNsaWRlclxuICAgICAgICAgICAgICAgIHN4PXt7IGhlaWdodDogXCI0MHB4XCIsIGNvbG9yOiBcInJnYmEoMTM5LCA3OSwgMTEsIDAuNjE2KVwiLCBvdmVyZmxvdzogXCJoaWRkZW5cIiB9fVxuICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZXN9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICBzdGVwPXsxNX1cbiAgICAgICAgICAgICAgICBtaW49ezB9XG4gICAgICAgICAgICAgICAgbWF4PXsxNDQwfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRpbWVSYW5nZTtcbiIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJsYWJlbFwiLCBcIm5vdGNoZWRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBOb3RjaGVkT3V0bGluZVJvb3QgPSBzdHlsZWQoJ2ZpZWxkc2V0Jykoe1xuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogMCxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogLTUsXG4gIGxlZnQ6IDAsXG4gIG1hcmdpbjogMCxcbiAgcGFkZGluZzogJzAgOHB4JyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIG1pbldpZHRoOiAnMCUnXG59KTtcbmNvbnN0IE5vdGNoZWRPdXRsaW5lTGVnZW5kID0gc3R5bGVkKCdsZWdlbmQnLCB7XG4gIHNraXBTeDogdHJ1ZVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgZmxvYXQ6ICd1bnNldCdcbn0sIG93bmVyU3RhdGUubGFiZWwgPT09IHVuZGVmaW5lZCAmJiB7XG4gIHBhZGRpbmc6IDAsXG4gIGxpbmVIZWlnaHQ6ICcxMXB4JyxcbiAgLy8gc3luYyB3aXRoIGBoZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3dpZHRoJywge1xuICAgIGR1cmF0aW9uOiAxNTAsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICB9KVxufSwgb3duZXJTdGF0ZS5sYWJlbCAhPT0gdW5kZWZpbmVkICYmIF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgLy8gRml4IGNvbmZsaWN0IHdpdGggbm9ybWFsaXplLmNzcyBhbmQgc2FuaXRpemUuY3NzXG4gIHdpZHRoOiAnYXV0bycsXG4gIC8vIEZpeCBjb25mbGljdCB3aXRoIGJvb3RzdHJhcFxuICBwYWRkaW5nOiAwLFxuICBoZWlnaHQ6IDExLFxuICAvLyBzeW5jIHdpdGggYGxpbmVIZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICBmb250U2l6ZTogJzAuNzVlbScsXG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICBtYXhXaWR0aDogMC4wMSxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdtYXgtd2lkdGgnLCB7XG4gICAgZHVyYXRpb246IDUwLFxuICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgfSksXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAnJiA+IHNwYW4nOiB7XG4gICAgcGFkZGluZ0xlZnQ6IDUsXG4gICAgcGFkZGluZ1JpZ2h0OiA1LFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gIH1cbn0sIG93bmVyU3RhdGUubm90Y2hlZCAmJiB7XG4gIG1heFdpZHRoOiAnMTAwJScsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgIGR1cmF0aW9uOiAxMDAsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dCxcbiAgICBkZWxheTogNTBcbiAgfSlcbn0pKSk7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90Y2hlZE91dGxpbmUocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBsYWJlbCxcbiAgICBub3RjaGVkXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgbm90Y2hlZCxcbiAgICBsYWJlbFxuICB9KTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTm90Y2hlZE91dGxpbmVSb290LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTm90Y2hlZE91dGxpbmVMZWdlbmQsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogbGFiZWwgPyAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjaGlsZHJlbjogbGFiZWxcbiAgICAgIH0pIDpcbiAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgIC8vIG5vdHJhbnNsYXRlIG5lZWRlZCB3aGlsZSBHb29nbGUgVHJhbnNsYXRlIHdpbGwgbm90IGZpeCB6ZXJvLXdpZHRoIHNwYWNlIGlzc3VlXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gICAgICBfanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJub3RyYW5zbGF0ZVwiLFxuICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgICAgIF9faHRtbDogJyYjODIwMzsnXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfSkpO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTm90Y2hlZE91dGxpbmUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5jb25zdCBGb3JtQ29udHJvbENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBGb3JtQ29udHJvbENvbnRleHQuZGlzcGxheU5hbWUgPSAnRm9ybUNvbnRyb2xDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xDb250ZXh0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2woKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gIHByb3BzLFxuICBzdGF0ZXMsXG4gIG11aUZvcm1Db250cm9sXG59KSB7XG4gIHJldHVybiBzdGF0ZXMucmVkdWNlKChhY2MsIHN0YXRlKSA9PiB7XG4gICAgYWNjW3N0YXRlXSA9IHByb3BzW3N0YXRlXTtcblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wc1tzdGF0ZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFjY1tzdGF0ZV0gPSBtdWlGb3JtQ29udHJvbFtzdGF0ZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufSIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMsIGdlbmVyYXRlVXRpbGl0eUNsYXNzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlPdXRsaW5lZElucHV0Jywgc2xvdCk7XG59XG5jb25zdCBvdXRsaW5lZElucHV0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU91dGxpbmVkSW5wdXQnLCBbJ3Jvb3QnLCAnY29sb3JTZWNvbmRhcnknLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdhZG9ybmVkU3RhcnQnLCAnYWRvcm5lZEVuZCcsICdlcnJvcicsICdzaXplU21hbGwnLCAnbXVsdGlsaW5lJywgJ25vdGNoZWRPdXRsaW5lJywgJ2lucHV0JywgJ2lucHV0U2l6ZVNtYWxsJywgJ2lucHV0TXVsdGlsaW5lJywgJ2lucHV0QWRvcm5lZFN0YXJ0JywgJ2lucHV0QWRvcm5lZEVuZCddKTtcbmV4cG9ydCBkZWZhdWx0IG91dGxpbmVkSW5wdXRDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNoYW5nZVwiLCBcIm1heFJvd3NcIiwgXCJtaW5Sb3dzXCIsIFwic3R5bGVcIiwgXCJ2YWx1ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9kZWJvdW5jZSBhcyBkZWJvdW5jZSwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCBhcyB1c2VFbmhhbmNlZEVmZmVjdCwgdW5zdGFibGVfb3duZXJXaW5kb3cgYXMgb3duZXJXaW5kb3cgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmZ1bmN0aW9uIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbcHJvcGVydHldLCAxMCkgfHwgMDtcbn1cblxuY29uc3Qgc3R5bGVzID0ge1xuICBzaGFkb3c6IHtcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaVBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAvLyBSZW1vdmUgZnJvbSB0aGUgY29udGVudCBmbG93XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGxiYXIgd2lkdGhcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIC8vIENyZWF0ZSBhIG5ldyBsYXllciwgaW5jcmVhc2UgdGhlIGlzb2xhdGlvbiBvZiB0aGUgY29tcHV0ZWQgdmFsdWVzXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKSdcbiAgfVxufTtcbmNvbnN0IFRleHRhcmVhQXV0b3NpemUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0YXJlYUF1dG9zaXplKHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIG9uQ2hhbmdlLFxuICAgIG1heFJvd3MsXG4gICAgbWluUm93cyA9IDEsXG4gICAgc3R5bGUsXG4gICAgdmFsdWVcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBpbnB1dFJlZik7XG4gIGNvbnN0IHNoYWRvd1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgcmVuZGVycyA9IFJlYWN0LnVzZVJlZigwKTtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7fSk7XG4gIGNvbnN0IHN5bmNIZWlnaHQgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gY29udGFpbmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5wdXQpOyAvLyBJZiBpbnB1dCdzIHdpZHRoIGlzIHNocnVuayBhbmQgaXQncyBub3QgdmlzaWJsZSwgZG9uJ3Qgc3luYyBoZWlnaHQuXG5cbiAgICBpZiAoY29tcHV0ZWRTdHlsZS53aWR0aCA9PT0gJzBweCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbnB1dFNoYWxsb3cgPSBzaGFkb3dSZWYuY3VycmVudDtcbiAgICBpbnB1dFNoYWxsb3cuc3R5bGUud2lkdGggPSBjb21wdXRlZFN0eWxlLndpZHRoO1xuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9IGlucHV0LnZhbHVlIHx8IHByb3BzLnBsYWNlaG9sZGVyIHx8ICd4JztcblxuICAgIGlmIChpbnB1dFNoYWxsb3cudmFsdWUuc2xpY2UoLTEpID09PSAnXFxuJykge1xuICAgICAgLy8gQ2VydGFpbiBmb250cyB3aGljaCBvdmVyZmxvdyB0aGUgbGluZSBoZWlnaHQgd2lsbCBjYXVzZSB0aGUgdGV4dGFyZWFcbiAgICAgIC8vIHRvIHJlcG9ydCBhIGRpZmZlcmVudCBzY3JvbGxIZWlnaHQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGxhc3QgbGluZVxuICAgICAgLy8gaXMgZW1wdHkuIE1ha2UgaXQgbm9uLWVtcHR5IHRvIGF2b2lkIHRoaXMgaXNzdWUuXG4gICAgICBpbnB1dFNoYWxsb3cudmFsdWUgKz0gJyAnO1xuICAgIH1cblxuICAgIGNvbnN0IGJveFNpemluZyA9IGNvbXB1dGVkU3R5bGVbJ2JveC1zaXppbmcnXTtcbiAgICBjb25zdCBwYWRkaW5nID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAncGFkZGluZy1ib3R0b20nKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ3BhZGRpbmctdG9wJyk7XG4gICAgY29uc3QgYm9yZGVyID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAnYm9yZGVyLWJvdHRvbS13aWR0aCcpICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAnYm9yZGVyLXRvcC13aWR0aCcpOyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBpbm5lciBjb250ZW50XG5cbiAgICBjb25zdCBpbm5lckhlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQ7IC8vIE1lYXN1cmUgaGVpZ2h0IG9mIGEgdGV4dGFyZWEgd2l0aCBhIHNpbmdsZSByb3dcblxuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9ICd4JztcbiAgICBjb25zdCBzaW5nbGVSb3dIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0OyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBvdXRlciBjb250ZW50XG5cbiAgICBsZXQgb3V0ZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcblxuICAgIGlmIChtaW5Sb3dzKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KE51bWJlcihtaW5Sb3dzKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIGlmIChtYXhSb3dzKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWluKE51bWJlcihtYXhSb3dzKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7IC8vIFRha2UgdGhlIGJveCBzaXppbmcgaW50byBhY2NvdW50IGZvciBhcHBseWluZyB0aGlzIHZhbHVlIGFzIGEgc3R5bGUuXG5cbiAgICBjb25zdCBvdXRlckhlaWdodFN0eWxlID0gb3V0ZXJIZWlnaHQgKyAoYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcgPyBwYWRkaW5nICsgYm9yZGVyIDogMCk7XG4gICAgY29uc3Qgb3ZlcmZsb3cgPSBNYXRoLmFicyhvdXRlckhlaWdodCAtIGlubmVySGVpZ2h0KSA8PSAxO1xuICAgIHNldFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICAvLyBOZWVkIGEgbGFyZ2UgZW5vdWdoIGRpZmZlcmVuY2UgdG8gdXBkYXRlIHRoZSBoZWlnaHQuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgaWYgKHJlbmRlcnMuY3VycmVudCA8IDIwICYmIChvdXRlckhlaWdodFN0eWxlID4gMCAmJiBNYXRoLmFicygocHJldlN0YXRlLm91dGVySGVpZ2h0U3R5bGUgfHwgMCkgLSBvdXRlckhlaWdodFN0eWxlKSA+IDEgfHwgcHJldlN0YXRlLm92ZXJmbG93ICE9PSBvdmVyZmxvdykpIHtcbiAgICAgICAgcmVuZGVycy5jdXJyZW50ICs9IDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3ZlcmZsb3csXG4gICAgICAgICAgb3V0ZXJIZWlnaHRTdHlsZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAocmVuZGVycy5jdXJyZW50ID09PSAyMCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRvbyBtYW55IHJlLXJlbmRlcnMuIFRoZSBsYXlvdXQgaXMgdW5zdGFibGUuJywgJ1RleHRhcmVhQXV0b3NpemUgbGltaXRzIHRoZSBudW1iZXIgb2YgcmVuZGVycyB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgfSk7XG4gIH0sIFttYXhSb3dzLCBtaW5Sb3dzLCBwcm9wcy5wbGFjZWhvbGRlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKCgpID0+IHtcbiAgICAgIHJlbmRlcnMuY3VycmVudCA9IDA7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfSk7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coaW5wdXRSZWYuY3VycmVudCk7XG4gICAgY29udGFpbmVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgbGV0IHJlc2l6ZU9ic2VydmVyO1xuXG4gICAgaWYgKHR5cGVvZiBSZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGhhbmRsZVJlc2l6ZSk7XG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGlucHV0UmVmLmN1cnJlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIGNvbnRhaW5lcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuXG4gICAgICBpZiAocmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtzeW5jSGVpZ2h0XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBzeW5jSGVpZ2h0KCk7XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlbmRlcnMuY3VycmVudCA9IDA7XG4gIH0sIFt2YWx1ZV0pO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IGV2ZW50ID0+IHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuXG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCBfZXh0ZW5kcyh7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgICAgcmVmOiBoYW5kbGVSZWYgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAgICxcbiAgICAgIHJvd3M6IG1pblJvd3MsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBoZWlnaHQ6IHN0YXRlLm91dGVySGVpZ2h0U3R5bGUsXG4gICAgICAgIC8vIE5lZWQgYSBsYXJnZSBlbm91Z2ggZGlmZmVyZW5jZSB0byBhbGxvdyBzY3JvbGxpbmcuXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgICAgIG92ZXJmbG93OiBzdGF0ZS5vdmVyZmxvdyA/ICdoaWRkZW4nIDogbnVsbFxuICAgICAgfSwgc3R5bGUpXG4gICAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL19qc3goXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgcmVmOiBzaGFkb3dSZWYsXG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5zaGFkb3csIHN0eWxlLCB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH0pXG4gICAgfSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0YXJlYUF1dG9zaXplLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhQXV0b3NpemU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGwgfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdsb2JhbFN0eWxlcyhwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3R5bGVzLFxuICAgIGRlZmF1bHRUaGVtZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgY29uc3QgZ2xvYmFsU3R5bGVzID0gdHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoZW1lSW5wdXQgPT4gc3R5bGVzKGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0KSA6IHN0eWxlcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEdsb2JhbCwge1xuICAgIHN0eWxlczogZ2xvYmFsU3R5bGVzXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyA9IHtcbiAgZGVmYXVsdFRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSlcbn0gOiB2b2lkIDA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgR2xvYmFsU3R5bGVzIGFzIFN5c3RlbUdsb2JhbFN0eWxlcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi4vc3R5bGVzL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5mdW5jdGlvbiBHbG9iYWxTdHlsZXMocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN5c3RlbUdsb2JhbFN0eWxlcywgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSkpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHbG9iYWxTdHlsZXMucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBzdHlsZXMgeW91IHdhbnQgdG8gYXBwbHkgZ2xvYmFsbHkuXG4gICAqL1xuICBzdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIF9fZW1vdGlvbl9zdHlsZXM6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZFxuICB9KSwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFN0eWxlczsiLCIvLyBTdXBwb3J0cyBkZXRlcm1pbmF0aW9uIG9mIGlzQ29udHJvbGxlZCgpLlxuLy8gQ29udHJvbGxlZCBpbnB1dCBhY2NlcHRzIGl0cyBjdXJyZW50IHZhbHVlIGFzIGEgcHJvcC5cbi8vXG4vLyBAc2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHNcbi8vIEBwYXJhbSB2YWx1ZVxuLy8gQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgc3RyaW5nIChpbmNsdWRpbmcgJycpIG9yIG51bWJlciAoaW5jbHVkaW5nIHplcm8pXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xufSAvLyBEZXRlcm1pbmUgaWYgZmllbGQgaXMgZW1wdHkgb3IgZmlsbGVkLlxuLy8gUmVzcG9uc2UgZGV0ZXJtaW5lcyBpZiBsYWJlbCBpcyBwcmVzZW50ZWQgYWJvdmUgZmllbGQgb3IgYXMgcGxhY2Vob2xkZXIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHBhcmFtIFNTUlxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm90IHByZXNlbnQgb3IgZW1wdHkgc3RyaW5nLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhbnkgbnVtYmVyIG9yIHN0cmluZyB3aXRoIGxlbmd0aC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsbGVkKG9iaiwgU1NSID0gZmFsc2UpIHtcbiAgcmV0dXJuIG9iaiAmJiAoaGFzVmFsdWUob2JqLnZhbHVlKSAmJiBvYmoudmFsdWUgIT09ICcnIHx8IFNTUiAmJiBoYXNWYWx1ZShvYmouZGVmYXVsdFZhbHVlKSAmJiBvYmouZGVmYXVsdFZhbHVlICE9PSAnJyk7XG59IC8vIERldGVybWluZSBpZiBhbiBJbnB1dCBpcyBhZG9ybmVkIG9uIHN0YXJ0LlxuLy8gSXQncyBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHdpdGggTFRSLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vIGFkb3JubWVudHMuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFkb3JuZWQgYXQgdGhlIHN0YXJ0LlxuXG5leHBvcnQgZnVuY3Rpb24gaXNBZG9ybmVkU3RhcnQob2JqKSB7XG4gIHJldHVybiBvYmouc3RhcnRBZG9ybm1lbnQ7XG59IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0QmFzZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXRCYXNlJywgc2xvdCk7XG59XG5jb25zdCBpbnB1dEJhc2VDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXRCYXNlJywgWydyb290JywgJ2Zvcm1Db250cm9sJywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnYWRvcm5lZFN0YXJ0JywgJ2Fkb3JuZWRFbmQnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdjb2xvclNlY29uZGFyeScsICdmdWxsV2lkdGgnLCAnaGlkZGVuTGFiZWwnLCAnaW5wdXQnLCAnaW5wdXRTaXplU21hbGwnLCAnaW5wdXRNdWx0aWxpbmUnLCAnaW5wdXRUeXBlU2VhcmNoJywgJ2lucHV0QWRvcm5lZFN0YXJ0JywgJ2lucHV0QWRvcm5lZEVuZCcsICdpbnB1dEhpZGRlbkxhYmVsJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRCYXNlQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlc1wiLCBcImVuZEFkb3JubWVudFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWRcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm1hcmdpblwiLCBcIm1heFJvd3NcIiwgXCJtaW5Sb3dzXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclN1ZmZpeFwiLCBcInJvd3NcIiwgXCJzaXplXCIsIFwic3RhcnRBZG9ybm1lbnRcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlLCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMsIGlzSG9zdENvbXBvbmVudCwgVGV4dGFyZWFBdXRvc2l6ZSB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi4vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICcuLi91dGlscy91c2VFbmhhbmNlZEVmZmVjdCc7XG5pbXBvcnQgR2xvYmFsU3R5bGVzIGZyb20gJy4uL0dsb2JhbFN0eWxlcyc7XG5pbXBvcnQgeyBpc0ZpbGxlZCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGlucHV0QmFzZUNsYXNzZXMsIHsgZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbnB1dEJhc2VDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgY29uc3Qgcm9vdE92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmZvcm1Db250cm9sICYmIHN0eWxlcy5mb3JtQ29udHJvbCwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiBzdHlsZXMuYWRvcm5lZFN0YXJ0LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiBzdHlsZXMuYWRvcm5lZEVuZCwgb3duZXJTdGF0ZS5lcnJvciAmJiBzdHlsZXMuZXJyb3IsIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBzdHlsZXMuc2l6ZVNtYWxsLCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBzdHlsZXMubXVsdGlsaW5lLCBvd25lclN0YXRlLmNvbG9yICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHN0eWxlcy5mdWxsV2lkdGgsIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgc3R5bGVzLmhpZGRlbkxhYmVsXTtcbn07XG5leHBvcnQgY29uc3QgaW5wdXRPdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMuaW5wdXQsIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBzdHlsZXMuaW5wdXRTaXplU21hbGwsIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHN0eWxlcy5pbnB1dE11bHRpbGluZSwgb3duZXJTdGF0ZS50eXBlID09PSAnc2VhcmNoJyAmJiBzdHlsZXMuaW5wdXRUeXBlU2VhcmNoLCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHN0eWxlcy5pbnB1dEFkb3JuZWRTdGFydCwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYgc3R5bGVzLmlucHV0QWRvcm5lZEVuZCwgb3duZXJTdGF0ZS5oaWRkZW5MYWJlbCAmJiBzdHlsZXMuaW5wdXRIaWRkZW5MYWJlbF07XG59O1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbCxcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHNpemUsXG4gICAgc3RhcnRBZG9ybm1lbnQsXG4gICAgdHlwZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBlcnJvciAmJiAnZXJyb3InLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCcsIGZvY3VzZWQgJiYgJ2ZvY3VzZWQnLCBmb3JtQ29udHJvbCAmJiAnZm9ybUNvbnRyb2wnLCBzaXplID09PSAnc21hbGwnICYmICdzaXplU21hbGwnLCBtdWx0aWxpbmUgJiYgJ211bHRpbGluZScsIHN0YXJ0QWRvcm5tZW50ICYmICdhZG9ybmVkU3RhcnQnLCBlbmRBZG9ybm1lbnQgJiYgJ2Fkb3JuZWRFbmQnLCBoaWRkZW5MYWJlbCAmJiAnaGlkZGVuTGFiZWwnXSxcbiAgICBpbnB1dDogWydpbnB1dCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIHR5cGUgPT09ICdzZWFyY2gnICYmICdpbnB1dFR5cGVTZWFyY2gnLCBtdWx0aWxpbmUgJiYgJ2lucHV0TXVsdGlsaW5lJywgc2l6ZSA9PT0gJ3NtYWxsJyAmJiAnaW5wdXRTaXplU21hbGwnLCBoaWRkZW5MYWJlbCAmJiAnaW5wdXRIaWRkZW5MYWJlbCcsIHN0YXJ0QWRvcm5tZW50ICYmICdpbnB1dEFkb3JuZWRTdGFydCcsIGVuZEFkb3JubWVudCAmJiAnaW5wdXRBZG9ybmVkRW5kJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IElucHV0QmFzZVJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUlucHV0QmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IHJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgbGluZUhlaWdodDogJzEuNDM3NWVtJyxcbiAgLy8gMjNweFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggZnVsbFdpZHRoLlxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgY3Vyc29yOiAndGV4dCcsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBbYCYuJHtpbnB1dEJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZCxcbiAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICB9XG59LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBfZXh0ZW5kcyh7XG4gIHBhZGRpbmc6ICc0cHggMCA1cHgnXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBwYWRkaW5nVG9wOiAxXG59KSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYge1xuICB3aWR0aDogJzEwMCUnXG59KSk7XG5leHBvcnQgY29uc3QgSW5wdXRCYXNlQ29tcG9uZW50ID0gc3R5bGVkKCdpbnB1dCcsIHtcbiAgbmFtZTogJ011aUlucHV0QmFzZScsXG4gIHNsb3Q6ICdJbnB1dCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBsaWdodCA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JztcbiAgY29uc3QgcGxhY2Vob2xkZXIgPSB7XG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH07XG4gIGNvbnN0IHBsYWNlaG9sZGVySGlkZGVuID0ge1xuICAgIG9wYWNpdHk6ICcwICFpbXBvcnRhbnQnXG4gIH07XG4gIGNvbnN0IHBsYWNlaG9sZGVyVmlzaWJsZSA9IHtcbiAgICBvcGFjaXR5OiBsaWdodCA/IDAuNDIgOiAwLjVcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgbGV0dGVyU3BhY2luZzogJ2luaGVyaXQnLFxuICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICBwYWRkaW5nOiAnNHB4IDAgNXB4JyxcbiAgICBib3JkZXI6IDAsXG4gICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICBoZWlnaHQ6ICcxLjQzNzVlbScsXG4gICAgLy8gUmVzZXQgMjNweHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVzZXQgZm9yIFNhZmFyaVxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgLy8gTWFrZSB0aGUgZmxleCBpdGVtIHNocmluayB3aXRoIEZpcmVmb3hcbiAgICBtaW5XaWR0aDogMCxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIC8vIEZpeCBJRTExIHdpZHRoIGlzc3VlXG4gICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwtY2FuY2VsJyxcbiAgICBhbmltYXRpb25EdXJhdGlvbjogJzEwbXMnLFxuICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAvLyBGaXJlZm94IDE5K1xuICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgIC8vIElFMTFcbiAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgLy8gRWRnZVxuICAgICcmOmZvY3VzJzoge1xuICAgICAgb3V0bGluZTogMFxuICAgIH0sXG4gICAgLy8gUmVzZXQgRmlyZWZveCBpbnZhbGlkIHJlcXVpcmVkIGlucHV0IHN0eWxlXG4gICAgJyY6aW52YWxpZCc6IHtcbiAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgfSxcbiAgICAnJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbic6IHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyB3aGVuIHR5cGU9c2VhcmNoLlxuICAgICAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnXG4gICAgfSxcbiAgICAvLyBTaG93IGFuZCBoaWRlIHRoZSBwbGFjZWhvbGRlciBsb2dpY1xuICAgIFtgbGFiZWxbZGF0YS1zaHJpbms9ZmFsc2VdICsgLiR7aW5wdXRCYXNlQ2xhc3Nlcy5mb3JtQ29udHJvbH0gJmBdOiB7XG4gICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgIC8vIElFMTFcbiAgICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgIC8vIEVkZ2VcbiAgICAgICcmOmZvY3VzOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgJyY6Zm9jdXM6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgJyY6Zm9jdXM6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgLy8gSUUxMVxuICAgICAgJyY6Zm9jdXM6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSAvLyBFZGdlXG5cbiAgICB9LFxuICAgIFtgJi4ke2lucHV0QmFzZUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAvLyBSZXNldCBpT1Mgb3BhY2l0eVxuICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkIC8vIEZpeCBvcGFjaXR5IFNhZmFyaSBidWdcblxuICAgIH0sXG4gICAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnNTAwMHMnLFxuICAgICAgYW5pbWF0aW9uTmFtZTogJ211aS1hdXRvLWZpbGwnXG4gICAgfVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIHBhZGRpbmdUb3A6IDFcbiAgfSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYge1xuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgcGFkZGluZ1RvcDogMFxuICB9LCBvd25lclN0YXRlLnR5cGUgPT09ICdzZWFyY2gnICYmIHtcbiAgICAvLyBJbXByb3ZlIHR5cGUgc2VhcmNoIHN0eWxlLlxuICAgIE1vekFwcGVhcmFuY2U6ICd0ZXh0ZmllbGQnXG4gIH0pO1xufSk7XG5cbmNvbnN0IGlucHV0R2xvYmFsU3R5bGVzID0gLyojX19QVVJFX18qL19qc3goR2xvYmFsU3R5bGVzLCB7XG4gIHN0eWxlczoge1xuICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwnOiB7XG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwtY2FuY2VsJzoge1xuICAgICAgZnJvbToge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbi8qKlxuICogYElucHV0QmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGFuIGlucHV0LlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIHN0YXRlIGxvZ2ljLlxuICovXG5cblxuY29uc3QgSW5wdXRCYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJbnB1dEJhc2UnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFEZXNjcmliZWRieSxcbiAgICBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXMsXG4gICAgZW5kQWRvcm5tZW50LFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIGlkLFxuICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzUHJvcCA9IHt9LFxuICAgIGlucHV0UmVmOiBpbnB1dFJlZlByb3AsXG4gICAgbWF4Um93cyxcbiAgICBtaW5Sb3dzLFxuICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgIG5hbWUsXG4gICAgb25CbHVyLFxuICAgIG9uQ2hhbmdlLFxuICAgIG9uQ2xpY2ssXG4gICAgb25Gb2N1cyxcbiAgICBvbktleURvd24sXG4gICAgb25LZXlVcCxcbiAgICBwbGFjZWhvbGRlcixcbiAgICByZWFkT25seSxcbiAgICByZW5kZXJTdWZmaXgsXG4gICAgcm93cyxcbiAgICBzdGFydEFkb3JubWVudCxcbiAgICB0eXBlID0gJ3RleHQnLFxuICAgIHZhbHVlOiB2YWx1ZVByb3BcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IHZhbHVlID0gaW5wdXRQcm9wc1Byb3AudmFsdWUgIT0gbnVsbCA/IGlucHV0UHJvcHNQcm9wLnZhbHVlIDogdmFsdWVQcm9wO1xuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCk7XG4gIGNvbnN0IGlucHV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZUlucHV0UmVmV2FybmluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKGluc3RhbmNlID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLm5vZGVOYW1lICE9PSAnSU5QVVQnICYmICFpbnN0YW5jZS5mb2N1cykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBZb3UgaGF2ZSBwcm92aWRlZCBhIGBpbnB1dENvbXBvbmVudGAgdG8gdGhlIGlucHV0IGNvbXBvbmVudCcsICd0aGF0IGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgdGhlIGByZWZgIHByb3AuJywgJ01ha2Ugc3VyZSB0aGUgYHJlZmAgcHJvcCBpcyBjYWxsZWQgd2l0aCBhIEhUTUxJbnB1dEVsZW1lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCA9IHVzZUZvcmtSZWYoaW5wdXRQcm9wc1Byb3AucmVmLCBoYW5kbGVJbnB1dFJlZldhcm5pbmcpO1xuICBjb25zdCBoYW5kbGVJbnB1dFJlZlByb3AgPSB1c2VGb3JrUmVmKGlucHV0UmVmUHJvcCwgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3ApO1xuICBjb25zdCBoYW5kbGVJbnB1dFJlZiA9IHVzZUZvcmtSZWYoaW5wdXRSZWYsIGhhbmRsZUlucHV0UmVmUHJvcCk7XG4gIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgICByZXR1cm4gbXVpRm9ybUNvbnRyb2wucmVnaXN0ZXJFZmZlY3QoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LCBbbXVpRm9ybUNvbnRyb2xdKTtcbiAgfVxuXG4gIGNvbnN0IGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdkaXNhYmxlZCcsICdlcnJvcicsICdoaWRkZW5MYWJlbCcsICdzaXplJywgJ3JlcXVpcmVkJywgJ2ZpbGxlZCddXG4gIH0pO1xuICBmY3MuZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IGZvY3VzZWQ7IC8vIFRoZSBibHVyIHdvbid0IGZpcmUgd2hlbiB0aGUgZGlzYWJsZWQgc3RhdGUgaXMgc2V0IG9uIGEgZm9jdXNlZCBpbnB1dC5cbiAgLy8gV2UgbmVlZCB0byBib29rIGtlZXAgdGhlIGZvY3VzZWQgc3RhdGUgbWFudWFsbHkuXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW11aUZvcm1Db250cm9sICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuXG4gICAgICBpZiAob25CbHVyKSB7XG4gICAgICAgIG9uQmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBkaXNhYmxlZCwgZm9jdXNlZCwgb25CbHVyXSk7XG4gIGNvbnN0IG9uRmlsbGVkID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQ7XG4gIGNvbnN0IG9uRW1wdHkgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkVtcHR5O1xuICBjb25zdCBjaGVja0RpcnR5ID0gUmVhY3QudXNlQ2FsbGJhY2sob2JqID0+IHtcbiAgICBpZiAoaXNGaWxsZWQob2JqKSkge1xuICAgICAgaWYgKG9uRmlsbGVkKSB7XG4gICAgICAgIG9uRmlsbGVkKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkVtcHR5KSB7XG4gICAgICBvbkVtcHR5KCk7XG4gICAgfVxuICB9LCBbb25GaWxsZWQsIG9uRW1wdHldKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbdmFsdWUsIGNoZWNrRGlydHksIGlzQ29udHJvbGxlZF0pO1xuXG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZXZlbnQgPT4ge1xuICAgIC8vIEZpeCBhIGJ1ZyB3aXRoIElFMTEgd2hlcmUgdGhlIGZvY3VzL2JsdXIgZXZlbnRzIGFyZSB0cmlnZ2VyZWRcbiAgICAvLyB3aGlsZSB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgIGlmIChmY3MuZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25Gb2N1cykge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uQmx1cikge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25CbHVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25CbHVyKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcblxuICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogRXhwZWN0ZWQgdmFsaWQgaW5wdXQgdGFyZ2V0LiBEaWQgeW91IHVzZSBhIGN1c3RvbSBcXGBpbnB1dENvbXBvbmVudFxcYCBhbmQgZm9yZ2V0IHRvIGZvcndhcmQgcmVmcz8gU2VlIGh0dHBzOi8vbXVpLmNvbS9yL2lucHV0LWNvbXBvbmVudC1yZWYtaW50ZXJmYWNlIGZvciBtb3JlIGluZm8uYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMSkpO1xuICAgICAgfVxuXG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWU6IGVsZW1lbnQudmFsdWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkNoYW5nZSkge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH0gLy8gUGVyZm9ybSBpbiB0aGUgd2lsbFVwZGF0ZVxuXG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07IC8vIENoZWNrIHRoZSBpbnB1dCBzdGF0ZSBvbiBtb3VudCwgaW4gY2FzZSBpdCB3YXMgZmlsbGVkIGJ5IHRoZSB1c2VyXG4gIC8vIG9yIGF1dG8gZmlsbGVkIGJ5IHRoZSBicm93c2VyIGJlZm9yZSB0aGUgaHlkcmF0aW9uIChmb3IgU1NSKS5cblxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY2hlY2tEaXJ0eShpbnB1dFJlZi5jdXJyZW50KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQgJiYgZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBsZXQgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcbiAgbGV0IGlucHV0UHJvcHMgPSBpbnB1dFByb3BzUHJvcDtcblxuICBpZiAobXVsdGlsaW5lICYmIElucHV0Q29tcG9uZW50ID09PSAnaW5wdXQnKSB7XG4gICAgaWYgKHJvd3MpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChtaW5Sb3dzIHx8IG1heFJvd3MpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ01VSTogWW91IGNhbiBub3QgdXNlIHRoZSBgbWluUm93c2Agb3IgYG1heFJvd3NgIHByb3BzIHdoZW4gdGhlIGlucHV0IGByb3dzYCBwcm9wIGlzIHNldC4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgIG1pblJvd3M6IHJvd3MsXG4gICAgICAgIG1heFJvd3M6IHJvd3NcbiAgICAgIH0sIGlucHV0UHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFJvd3MsXG4gICAgICAgIG1pblJvd3NcbiAgICAgIH0sIGlucHV0UHJvcHMpO1xuICAgIH1cblxuICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUF1dG9GaWxsID0gZXZlbnQgPT4ge1xuICAgIC8vIFByb3ZpZGUgYSBmYWtlIHZhbHVlIGFzIENocm9tZSBtaWdodCBub3QgbGV0IHlvdSBhY2Nlc3MgaXQgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG4gICAgY2hlY2tEaXJ0eShldmVudC5hbmltYXRpb25OYW1lID09PSAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnID8gaW5wdXRSZWYuY3VycmVudCA6IHtcbiAgICAgIHZhbHVlOiAneCdcbiAgICB9KTtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgbXVpRm9ybUNvbnRyb2wuc2V0QWRvcm5lZFN0YXJ0KEJvb2xlYW4oc3RhcnRBZG9ybm1lbnQpKTtcbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgc3RhcnRBZG9ybm1lbnRdKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3I6IGZjcy5jb2xvciB8fCAncHJpbWFyeScsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsOiBmY3MuaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHNpemU6IGZjcy5zaXplLFxuICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgIHR5cGVcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBSb290ID0gY29tcG9uZW50cy5Sb290IHx8IElucHV0QmFzZVJvb3Q7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICBjb25zdCBJbnB1dCA9IGNvbXBvbmVudHMuSW5wdXQgfHwgSW5wdXRCYXNlQ29tcG9uZW50O1xuICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHMsIGNvbXBvbmVudHNQcm9wcy5pbnB1dCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWyFkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzICYmIGlucHV0R2xvYmFsU3R5bGVzLCAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgcm9vdFByb3BzLm93bmVyU3RhdGUpXG4gICAgfSwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgIH0sIG90aGVyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCByb290UHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpLFxuICAgICAgY2hpbGRyZW46IFtzdGFydEFkb3JubWVudCwgLyojX19QVVJFX18qL19qc3goRm9ybUNvbnRyb2xDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goSW5wdXQsIF9leHRlbmRzKHtcbiAgICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IGZjcy5lcnJvcixcbiAgICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZGJ5LFxuICAgICAgICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgICAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgIG9uQW5pbWF0aW9uU3RhcnQ6IGhhbmRsZUF1dG9GaWxsLFxuICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgICAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgICAgICAgIG9uS2V5VXA6IG9uS2V5VXAsXG4gICAgICAgICAgdHlwZTogdHlwZVxuICAgICAgICB9LCBpbnB1dFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KElucHV0KSAmJiB7XG4gICAgICAgICAgYXM6IElucHV0Q29tcG9uZW50LFxuICAgICAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCBpbnB1dFByb3BzLm93bmVyU3RhdGUpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICByZWY6IGhhbmRsZUlucHV0UmVmLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmlucHV0LCBpbnB1dFByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgb25Gb2N1czogaGFuZGxlRm9jdXNcbiAgICAgICAgfSkpXG4gICAgICB9KSwgZW5kQWRvcm5tZW50LCByZW5kZXJTdWZmaXggPyByZW5kZXJTdWZmaXgoX2V4dGVuZHMoe30sIGZjcywge1xuICAgICAgICBzdGFydEFkb3JubWVudFxuICAgICAgfSkpIDogbnVsbF1cbiAgICB9KSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dEJhc2UucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gICdhcmlhLWRlc2NyaWJlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAncHJpbWFyeSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dEJhc2UuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgSW5wdXQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBHbG9iYWxTdHlsZXMgZm9yIHRoZSBhdXRvLWZpbGwga2V5ZnJhbWVzIHdpbGwgbm90IGJlIGluamVjdGVkL3JlbW92ZWQgb24gbW91bnQvdW5tb3VudC4gTWFrZSBzdXJlIHRvIGluamVjdCB0aGVtIGF0IHRoZSB0b3Agb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICogVGhpcyBvcHRpb24gaXMgaW50ZW5kZWQgdG8gaGVscCB3aXRoIGJvb3N0aW5nIHRoZSBpbml0aWFsIHJlbmRlcmluZyBwZXJmb3JtYW5jZSBpZiB5b3UgYXJlIGxvYWRpbmcgYSBiaWcgYW1vdW50IG9mIElucHV0IGNvbXBvbmVudHMgYXQgb25jZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIGB0ZXh0YXJlYWAgZWxlbWVudCBpcyByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBgaW5wdXRgIGlzIGJsdXJyZWQuXG4gICAqXG4gICAqIE5vdGljZSB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCAoZXZlbnQpIG1pZ2h0IGJlIHVuZGVmaW5lZC5cbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudCB8IEhUTUxJbnB1dEVsZW1lbnQ+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBgaW5wdXRgIGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVuZGVyU3VmZml4OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIHJlcXVpcmVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBJbnB1dEJhc2U7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNvbXBvbmVudHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImxhYmVsXCIsIFwibXVsdGlsaW5lXCIsIFwibm90Y2hlZFwiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IE5vdGNoZWRPdXRsaW5lIGZyb20gJy4vTm90Y2hlZE91dGxpbmUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBvdXRsaW5lZElucHV0Q2xhc3NlcywgeyBnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9vdXRsaW5lZElucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgSW5wdXRCYXNlLCB7IHJvb3RPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIsIGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlciwgSW5wdXRCYXNlUm9vdCwgSW5wdXRCYXNlQ29tcG9uZW50IGFzIElucHV0QmFzZUlucHV0IH0gZnJvbSAnLi4vSW5wdXRCYXNlL0lucHV0QmFzZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgbm90Y2hlZE91dGxpbmU6IFsnbm90Y2hlZE91dGxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBjbGFzc2VzLCBjb21wb3NlZENsYXNzZXMpO1xufTtcblxuY29uc3QgT3V0bGluZWRJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgW2AmOmhvdmVyIC4ke291dGxpbmVkSW5wdXRDbGFzc2VzLm5vdGNoZWRPdXRsaW5lfWBdOiB7XG4gICAgICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgW2AmOmhvdmVyIC4ke291dGxpbmVkSW5wdXRDbGFzc2VzLm5vdGNoZWRPdXRsaW5lfWBdOiB7XG4gICAgICAgIGJvcmRlckNvbG9yXG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5mb2N1c2VkfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgICAgIGJvcmRlcldpZHRoOiAyXG4gICAgfSxcbiAgICBbYCYuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5lcnJvcn0gLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuICAgIFtgJi4ke291dGxpbmVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfVxuICB9LCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nTGVmdDogMTRcbiAgfSwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYge1xuICAgIHBhZGRpbmdSaWdodDogMTRcbiAgfSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgX2V4dGVuZHMoe1xuICAgIHBhZGRpbmc6ICcxNi41cHggMTRweCdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nOiAnOC41cHggMTRweCdcbiAgfSkpO1xufSk7XG5jb25zdCBOb3RjaGVkT3V0bGluZVJvb3QgPSBzdHlsZWQoTm90Y2hlZE91dGxpbmUsIHtcbiAgbmFtZTogJ011aU91dGxpbmVkSW5wdXQnLFxuICBzbG90OiAnTm90Y2hlZE91dGxpbmUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5ub3RjaGVkT3V0bGluZVxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSdcbn0pKTtcbmNvbnN0IE91dGxpbmVkSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCcsXG4gIHNsb3Q6ICdJbnB1dCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwYWRkaW5nOiAnMTYuNXB4IDE0cHgnLFxuICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICBXZWJraXRUZXh0RmlsbENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCdcbiAgfVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZzogJzguNXB4IDE0cHgnXG59LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiB7XG4gIHBhZGRpbmc6IDBcbn0sIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nTGVmdDogMFxufSwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nUmlnaHQ6IDBcbn0pKTtcbmNvbnN0IE91dGxpbmVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBPdXRsaW5lZElucHV0KGluUHJvcHMsIHJlZikge1xuICB2YXIgX1JlYWN0JEZyYWdtZW50O1xuXG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aU91dGxpbmVkSW5wdXQnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgaW5wdXRDb21wb25lbnQgPSAnaW5wdXQnLFxuICAgIGxhYmVsLFxuICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgIG5vdGNoZWQsXG4gICAgdHlwZSA9ICd0ZXh0J1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsncmVxdWlyZWQnXVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgIFJvb3Q6IE91dGxpbmVkSW5wdXRSb290LFxuICAgICAgSW5wdXQ6IE91dGxpbmVkSW5wdXRJbnB1dFxuICAgIH0sIGNvbXBvbmVudHMpLFxuICAgIHJlbmRlclN1ZmZpeDogc3RhdGUgPT4gLyojX19QVVJFX18qL19qc3goTm90Y2hlZE91dGxpbmVSb290LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubm90Y2hlZE91dGxpbmUsXG4gICAgICBsYWJlbDogbGFiZWwgJiYgZmNzLnJlcXVpcmVkID8gX1JlYWN0JEZyYWdtZW50IHx8IChfUmVhY3QkRnJhZ21lbnQgPSAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IFtsYWJlbCwgXCJcXHhBMFwiLCAnKiddXG4gICAgICB9KSkgOiBsYWJlbCxcbiAgICAgIG5vdGNoZWQ6IHR5cGVvZiBub3RjaGVkICE9PSAndW5kZWZpbmVkJyA/IG5vdGNoZWQgOiBCb29sZWFuKHN0YXRlLnN0YXJ0QWRvcm5tZW50IHx8IHN0YXRlLmZpbGxlZCB8fCBzdGF0ZS5mb2N1c2VkKVxuICAgIH0pLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIG5vdGNoZWRPdXRsaW5lOiBudWxsXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBPdXRsaW5lZElucHV0LnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAncHJpbWFyeSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dEJhc2UuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgYGlucHV0YC4gSXQgaXMgb25seSB1c2VkIGZvciBsYXlvdXQuIFRoZSBhY3R1YWwgbGFiZWxsaW5nXG4gICAqIGlzIGhhbmRsZWQgYnkgYElucHV0TGFiZWxgLlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgYHRleHRhcmVhYCBlbGVtZW50IGlzIHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG91dGxpbmUgaXMgbm90Y2hlZCB0byBhY2NvbW1vZGF0ZSB0aGUgbGFiZWwuXG4gICAqL1xuICBub3RjaGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5PdXRsaW5lZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgT3V0bGluZWRJbnB1dDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuY29uc3QgTGlzdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIExpc3RDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0xpc3RDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlzdENvbnRleHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIHJ1biB0aGUgbWFwIGZ1bmN0aW9uIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHRoZSBrZXkgaXMgdGhlIGNvbXB1dGVkIG9uZVxuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gbWFwcGVyKGNoaWxkKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0gKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgaGFzTmV4dCA9IChrZXkgaW4gbmV4dENoaWxkTWFwcGluZyk7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuLyoqXG4gKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAqXG4gKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAqXG4gKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAqIGl0ZW1zLlxuICovXG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBub2RlIGlzIGB1bmRlZmluZWRgIHdoZW4gdXNlciBwcm92aWRlZCBgbm9kZVJlZmAgcHJvcFxuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG91Y2hSaXBwbGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvdWNoUmlwcGxlJywgc2xvdCk7XG59XG5jb25zdCB0b3VjaFJpcHBsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb3VjaFJpcHBsZScsIFsncm9vdCcsICdyaXBwbGUnLCAncmlwcGxlVmlzaWJsZScsICdyaXBwbGVQdWxzYXRlJywgJ2NoaWxkJywgJ2NoaWxkTGVhdmluZycsICdjaGlsZFB1bHNhdGUnXSk7XG5leHBvcnQgZGVmYXVsdCB0b3VjaFJpcHBsZUNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNlbnRlclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl07XG5cbmxldCBfID0gdCA9PiB0LFxuICAgIF90LFxuICAgIF90MixcbiAgICBfdDMsXG4gICAgX3Q0O1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbmltcG9ydCB0b3VjaFJpcHBsZUNsYXNzZXMgZnJvbSAnLi90b3VjaFJpcHBsZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IGNvbnN0IERFTEFZX1JJUFBMRSA9IDgwO1xuY29uc3QgZW50ZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgICBvcGFjaXR5OiAwLjE7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIG9wYWNpdHk6IDAuMztcbiAgfVxuYCkpO1xuY29uc3QgZXhpdEtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5gKSk7XG5jb25zdCBwdWxzYXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QzIHx8IChfdDMgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuXG4gIDUwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmApKTtcbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgc2tpcFN4OiB0cnVlXG59KSh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgekluZGV4OiAwLFxuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG59KTsgLy8gVGhpcyBgc3R5bGVkKClgIGZ1bmN0aW9uIGludm9rZXMga2V5ZnJhbWVzLiBgc3R5bGVkLWNvbXBvbmVudHNgIG9ubHkgc3VwcG9ydHMga2V5ZnJhbWVzXG4vLyBpbiBzdHJpbmcgdGVtcGxhdGVzLiBEbyBub3QgY29udmVydCB0aGVzZSBzdHlsZXMgaW4gSlMgb2JqZWN0IGFzIGl0IHdpbGwgYnJlYWsuXG5cbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJpcHBsZSA9IHN0eWxlZChSaXBwbGUsIHtcbiAgbmFtZTogJ011aVRvdWNoUmlwcGxlJyxcbiAgc2xvdDogJ1JpcHBsZSdcbn0pKF90NCB8fCAoX3Q0ID0gX2BcbiAgb3BhY2l0eTogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuXG4gICYuJHswfSB7XG4gICAgb3BhY2l0eTogMC4zO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAkezB9bXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgfVxuXG4gICYuJHswfSB7XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAkezB9bXM7XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xuICB9XG5cbiAgJiAuJHswfSB7XG4gICAgb3BhY2l0eTogMDtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICB9XG5cbiAgJiAuJHswfSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIC8qIEBub2ZsaXAgKi9cbiAgICBsZWZ0OiAwcHg7XG4gICAgdG9wOiAwO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMjUwMG1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAyMDBtcztcbiAgfVxuYCksIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCBlbnRlcktleWZyYW1lLCBEVVJBVElPTiwgKHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlciwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRMZWF2aW5nLCBleGl0S2V5ZnJhbWUsIERVUkFUSU9OLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkUHVsc2F0ZSwgcHVsc2F0ZUtleWZyYW1lLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCk7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogVE9ETyB2NTogTWFrZSBwcml2YXRlXG4gKi9cblxuY29uc3QgVG91Y2hSaXBwbGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUb3VjaFJpcHBsZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjZW50ZXI6IGNlbnRlclByb3AgPSBmYWxzZSxcbiAgICBjbGFzc2VzID0ge30sXG4gICAgY2xhc3NOYW1lXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBbcmlwcGxlcywgc2V0UmlwcGxlc10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG4gIGNvbnN0IG5leHRLZXkgPSBSZWFjdC51c2VSZWYoMCk7XG4gIGNvbnN0IHJpcHBsZUNhbGxiYWNrID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyaXBwbGVDYWxsYmFjay5jdXJyZW50KSB7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50KCk7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIFtyaXBwbGVzXSk7IC8vIFVzZWQgdG8gZmlsdGVyIG91dCBtb3VzZSBlbXVsYXRlZCBldmVudHMgb24gbW9iaWxlLlxuXG4gIGNvbnN0IGlnbm9yaW5nTW91c2VEb3duID0gUmVhY3QudXNlUmVmKGZhbHNlKTsgLy8gV2UgdXNlIGEgdGltZXIgaW4gb3JkZXIgdG8gb25seSBzaG93IHRoZSByaXBwbGVzIGZvciB0b3VjaCBcImNsaWNrXCIgbGlrZSBldmVudHMuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gZGlzcGxheSB0aGUgcmlwcGxlIGZvciB0b3VjaCBzY3JvbGwgZXZlbnRzLlxuXG4gIGNvbnN0IHN0YXJ0VGltZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgaXMgdGhlIGhvb2sgY2FsbGVkIG9uY2UgdGhlIHByZXZpb3VzIHRpbWVvdXQgaXMgcmVhZHkuXG5cbiAgY29uc3Qgc3RhcnRUaW1lckNvbW1pdCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgY29udGFpbmVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIGNvbnN0IHN0YXJ0Q29tbWl0ID0gUmVhY3QudXNlQ2FsbGJhY2socGFyYW1zID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlLFxuICAgICAgcmlwcGxlWCxcbiAgICAgIHJpcHBsZVksXG4gICAgICByaXBwbGVTaXplLFxuICAgICAgY2JcbiAgICB9ID0gcGFyYW1zO1xuICAgIHNldFJpcHBsZXMob2xkUmlwcGxlcyA9PiBbLi4ub2xkUmlwcGxlcywgLyojX19QVVJFX18qL19qc3goVG91Y2hSaXBwbGVSaXBwbGUsIHtcbiAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgcmlwcGxlOiBjbHN4KGNsYXNzZXMucmlwcGxlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlKSxcbiAgICAgICAgcmlwcGxlVmlzaWJsZTogY2xzeChjbGFzc2VzLnJpcHBsZVZpc2libGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVWaXNpYmxlKSxcbiAgICAgICAgcmlwcGxlUHVsc2F0ZTogY2xzeChjbGFzc2VzLnJpcHBsZVB1bHNhdGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGVQdWxzYXRlKSxcbiAgICAgICAgY2hpbGQ6IGNsc3goY2xhc3Nlcy5jaGlsZCwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkKSxcbiAgICAgICAgY2hpbGRMZWF2aW5nOiBjbHN4KGNsYXNzZXMuY2hpbGRMZWF2aW5nLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRMZWF2aW5nKSxcbiAgICAgICAgY2hpbGRQdWxzYXRlOiBjbHN4KGNsYXNzZXMuY2hpbGRQdWxzYXRlLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRQdWxzYXRlKVxuICAgICAgfSxcbiAgICAgIHRpbWVvdXQ6IERVUkFUSU9OLFxuICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVg6IHJpcHBsZVgsXG4gICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZVxuICAgIH0sIG5leHRLZXkuY3VycmVudCldKTtcbiAgICBuZXh0S2V5LmN1cnJlbnQgKz0gMTtcbiAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gY2I7XG4gIH0sIFtjbGFzc2VzXSk7XG4gIGNvbnN0IHN0YXJ0ID0gUmVhY3QudXNlQ2FsbGJhY2soKGV2ZW50ID0ge30sIG9wdGlvbnMgPSB7fSwgY2IpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlID0gZmFsc2UsXG4gICAgICBjZW50ZXIgPSBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgIGZha2VFbGVtZW50ID0gZmFsc2UgLy8gRm9yIHRlc3QgcHVycG9zZXNcblxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQpIHtcbiAgICAgIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50ID0gZmFrZUVsZW1lbnQgPyBudWxsIDogY29udGFpbmVyLmN1cnJlbnQ7XG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQgPyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwXG4gICAgfTsgLy8gR2V0IHRoZSBzaXplIG9mIHRoZSByaXBwbGVcblxuICAgIGxldCByaXBwbGVYO1xuICAgIGxldCByaXBwbGVZO1xuICAgIGxldCByaXBwbGVTaXplO1xuXG4gICAgaWYgKGNlbnRlciB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdIDogZXZlbnQ7XG4gICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChjbGllbnRYIC0gcmVjdC5sZWZ0KTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKGNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgfVxuXG4gICAgaWYgKGNlbnRlcikge1xuICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydCgoMiAqIHJlY3Qud2lkdGggKiogMiArIHJlY3QuaGVpZ2h0ICoqIDIpIC8gMyk7IC8vIEZvciBzb21lIHJlYXNvbiB0aGUgYW5pbWF0aW9uIGlzIGJyb2tlbiBvbiBNb2JpbGUgQ2hyb21lIGlmIHRoZSBzaXplIGlzIGV2ZW4uXG5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIGNvbnN0IHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KHNpemVYICoqIDIgKyBzaXplWSAqKiAyKTtcbiAgICB9IC8vIFRvdWNoZSBkZXZpY2VzXG5cblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAvLyBjaGVjayB0aGF0IHRoaXMgaXNuJ3QgYW5vdGhlciB0b3VjaHN0YXJ0IGR1ZSB0byBtdWx0aXRvdWNoXG4gICAgICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCBvbmx5IGNsZWFyIGEgc2luZ2xlIHRpbWVyIHdoZW4gdW5tb3VudGluZyB3aGlsZSB0d29cbiAgICAgIC8vIGFyZSBydW5uaW5nXG4gICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9ICgpID0+IHtcbiAgICAgICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYLFxuICAgICAgICByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplLFxuICAgICAgICBjYlxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY2VudGVyUHJvcCwgc3RhcnRDb21taXRdKTtcbiAgY29uc3QgcHVsc2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzdGFydCh7fSwge1xuICAgICAgcHVsc2F0ZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbc3RhcnRdKTtcbiAgY29uc3Qgc3RvcCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCwgY2IpID0+IHtcbiAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTsgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cblxuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN0b3AoZXZlbnQsIGNiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgc2V0UmlwcGxlcyhvbGRSaXBwbGVzID0+IHtcbiAgICAgIGlmIChvbGRSaXBwbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG9sZFJpcHBsZXMuc2xpY2UoMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHtcbiAgICBwdWxzYXRlLFxuICAgIHN0YXJ0LFxuICAgIHN0b3BcbiAgfSksIFtwdWxzYXRlLCBzdGFydCwgc3RvcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVG91Y2hSaXBwbGVSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgdG91Y2hSaXBwbGVDbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiBjb250YWluZXJcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgICBleGl0OiB0cnVlLFxuICAgICAgY2hpbGRyZW46IHJpcHBsZXNcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvdWNoUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBzdGFydHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY29tcG9uZW50XG4gICAqIHJhdGhlciB0aGFuIGF0IHRoZSBwb2ludCBvZiBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG91Y2hSaXBwbGU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzZXMsXG4gICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgIHJpcHBsZVgsXG4gICAgcmlwcGxlWSxcbiAgICByaXBwbGVTaXplLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FeGl0ZWQsXG4gICAgdGltZW91dFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtsZWF2aW5nLCBzZXRMZWF2aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWUsIGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgY29uc3QgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgY29uc3QgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuXG4gIGlmICghaW5Qcm9wICYmICFsZWF2aW5nKSB7XG4gICAgc2V0TGVhdmluZyh0cnVlKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpblByb3AgJiYgb25FeGl0ZWQgIT0gbnVsbCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dChvbkV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW29uRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICB9KVxuICB9KTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCdXR0b25CYXNlJywgc2xvdCk7XG59XG5jb25zdCBidXR0b25CYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbkJhc2UnLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uQmFzZUNsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJMaW5rQ29tcG9uZW50XCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uQ29udGV4dE1lbnVcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiwgcmVmVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgVG91Y2hSaXBwbGUgZnJvbSAnLi9Ub3VjaFJpcHBsZSc7XG5pbXBvcnQgYnV0dG9uQmFzZUNsYXNzZXMsIHsgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYnV0dG9uQmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZm9jdXNWaXNpYmxlICYmICdmb2N1c1Zpc2libGUnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG5cbiAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1Zpc2libGVDbGFzc05hbWUpIHtcbiAgICBjb21wb3NlZENsYXNzZXMucm9vdCArPSBgICR7Zm9jdXNWaXNpYmxlQ2xhc3NOYW1lfWA7XG4gIH1cblxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvbkJhc2VSb290ID0gc3R5bGVkKCdidXR0b24nLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwLFxuICBib3JkZXI6IDAsXG4gIG1hcmdpbjogMCxcbiAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gIGJvcmRlclJhZGl1czogMCxcbiAgcGFkZGluZzogMCxcbiAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICAvLyBSZXNldFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICBjb2xvcjogJ2luaGVyaXQnLFxuICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gIH0sXG4gIFtgJi4ke2J1dHRvbkJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIC8vIERpc2FibGUgbGluayBpbnRlcmFjdGlvbnNcbiAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICB9LFxuICAnQG1lZGlhIHByaW50Jzoge1xuICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gIH1cbn0pO1xuLyoqXG4gKiBgQnV0dG9uQmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGEgYnV0dG9uLlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIGZvY3VzL3JpcHBsZSBsb2dpYy5cbiAqL1xuXG5jb25zdCBCdXR0b25CYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQnV0dG9uQmFzZSdcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGFjdGlvbixcbiAgICBjZW50ZXJSaXBwbGUgPSBmYWxzZSxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50ID0gJ2J1dHRvbicsXG4gICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICBkaXNhYmxlUmlwcGxlID0gZmFsc2UsXG4gICAgZGlzYWJsZVRvdWNoUmlwcGxlID0gZmFsc2UsXG4gICAgZm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICBMaW5rQ29tcG9uZW50ID0gJ2EnLFxuICAgIG9uQmx1cixcbiAgICBvbkNsaWNrLFxuICAgIG9uQ29udGV4dE1lbnUsXG4gICAgb25EcmFnTGVhdmUsXG4gICAgb25Gb2N1cyxcbiAgICBvbkZvY3VzVmlzaWJsZSxcbiAgICBvbktleURvd24sXG4gICAgb25LZXlVcCxcbiAgICBvbk1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwLFxuICAgIG9uVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0LFxuICAgIHRhYkluZGV4ID0gMCxcbiAgICBUb3VjaFJpcHBsZVByb3BzLFxuICAgIHR5cGVcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmOiBmb2N1c1Zpc2libGVSZWZcbiAgfSA9IHVzZUlzRm9jdXNWaXNpYmxlKCk7XG4gIGNvbnN0IFtmb2N1c1Zpc2libGUsIHNldEZvY3VzVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSkge1xuICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gIH1cblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgKCkgPT4gKHtcbiAgICBmb2N1c1Zpc2libGU6ICgpID0+IHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9KSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNSaXBwbGUgJiYgIWRpc2FibGVSaXBwbGUpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlUmlwcGxlLCBmb2N1c1JpcHBsZSwgZm9jdXNWaXNpYmxlXSk7XG5cbiAgZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGVBY3Rpb24sIGV2ZW50Q2FsbGJhY2ssIHNraXBSaXBwbGVBY3Rpb24gPSBkaXNhYmxlVG91Y2hSaXBwbGUpIHtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaWdub3JlID0gc2tpcFJpcHBsZUFjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgaGFuZGxlTW91c2VEb3duID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvbk1vdXNlRG93bik7XG4gIGNvbnN0IGhhbmRsZUNvbnRleHRNZW51ID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uQ29udGV4dE1lbnUpO1xuICBjb25zdCBoYW5kbGVEcmFnTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25EcmFnTGVhdmUpO1xuICBjb25zdCBoYW5kbGVNb3VzZVVwID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uTW91c2VVcCk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZXZlbnQgPT4ge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoRW5kKTtcbiAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hNb3ZlKTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBldmVudCA9PiB7XG4gICAgaGFuZGxlQmx1clZpc2libGUoZXZlbnQpO1xuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcbiAgICBpZiAoIWJ1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICBidXR0b25SZWYuY3VycmVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgfVxuXG4gICAgaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KTtcblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG5cbiAgICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgaXNOb25OYXRpdmVCdXR0b24gPSAoKSA9PiB7XG4gICAgY29uc3QgYnV0dG9uID0gYnV0dG9uUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZik7XG4gIH07XG4gIC8qKlxuICAgKiBJRTExIHNoaW0gZm9yIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L3JlcGVhdFxuICAgKi9cblxuXG4gIGNvbnN0IGtleWRvd25SZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBoYW5kbGVLZXlEb3duID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgIWtleWRvd25SZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0YXJ0KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICdFbnRlcicgJiYgIWRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVLZXlVcCA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIGNhbGxpbmcgcHJldmVudERlZmF1bHQgaW4ga2V5VXAgb24gYSA8YnV0dG9uPiB3aWxsIG5vdCBkaXNwYXRjaCBhIGNsaWNrIGV2ZW50IGlmIFNwYWNlIGlzIHByZXNzZWRcbiAgICAvLyBodHRwczovL2NvZGVzYW5kYm94LmlvL3MvYnV0dG9uLWtleXVwLXByZXZlbnRkZWZhdWx0LWRuN2YwXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5VXApIHtcbiAgICAgIG9uS2V5VXAoZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChvbkNsaWNrICYmIGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBsZXQgQ29tcG9uZW50UHJvcCA9IGNvbXBvbmVudDtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicgJiYgKG90aGVyLmhyZWYgfHwgb3RoZXIudG8pKSB7XG4gICAgQ29tcG9uZW50UHJvcCA9IExpbmtDb21wb25lbnQ7XG4gIH1cblxuICBjb25zdCBidXR0b25Qcm9wcyA9IHt9O1xuXG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlID09PSB1bmRlZmluZWQgPyAnYnV0dG9uJyA6IHR5cGU7XG4gICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW90aGVyLmhyZWYgJiYgIW90aGVyLnRvKSB7XG4gICAgICBidXR0b25Qcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBidXR0b25Qcm9wc1snYXJpYS1kaXNhYmxlZCddID0gZGlzYWJsZWQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgaGFuZGxlT3duUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIGJ1dHRvblJlZik7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBoYW5kbGVPd25SZWYpO1xuICBjb25zdCBbbW91bnRlZFN0YXRlLCBzZXRNb3VudGVkU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgYGNvbXBvbmVudGAgcHJvcCBwcm92aWRlZCB0byBCdXR0b25CYXNlIGlzIGludmFsaWQuJywgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIGNoaWxkcmVuIHByb3AgaXMgcmVuZGVyZWQgaW4gdGhpcyBjdXN0b20gY29tcG9uZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZW5hYmxlVG91Y2hSaXBwbGVdKTtcbiAgfVxuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjZW50ZXJSaXBwbGUsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVSaXBwbGUsXG4gICAgZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgIGZvY3VzUmlwcGxlLFxuICAgIHRhYkluZGV4LFxuICAgIGZvY3VzVmlzaWJsZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoQnV0dG9uQmFzZVJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogQ29tcG9uZW50UHJvcCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgb25Db250ZXh0TWVudTogaGFuZGxlQ29udGV4dE1lbnUsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd24sXG4gICAgb25Nb3VzZUxlYXZlOiBoYW5kbGVNb3VzZUxlYXZlLFxuICAgIG9uTW91c2VVcDogaGFuZGxlTW91c2VVcCxcbiAgICBvbkRyYWdMZWF2ZTogaGFuZGxlRHJhZ0xlYXZlLFxuICAgIG9uVG91Y2hFbmQ6IGhhbmRsZVRvdWNoRW5kLFxuICAgIG9uVG91Y2hNb3ZlOiBoYW5kbGVUb3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0OiBoYW5kbGVUb3VjaFN0YXJ0LFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IC0xIDogdGFiSW5kZXgsXG4gICAgdHlwZTogdHlwZVxuICB9LCBidXR0b25Qcm9wcywgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCBlbmFibGVUb3VjaFJpcHBsZSA/XG4gICAgLyojX19QVVJFX18qL1xuXG4gICAgLyogVG91Y2hSaXBwbGUgaXMgb25seSBuZWVkZWQgY2xpZW50LXNpZGUsIHgyIGJvb3N0IG9uIHRoZSBzZXJ2ZXIuICovXG4gICAgX2pzeChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiByaXBwbGVSZWYsXG4gICAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICAgIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGxdXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uQmFzZS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYGZvY3VzVmlzaWJsZSgpYCBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgYXJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG91Y2ggcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgaGF2ZSBhIGtleWJvYXJkIGZvY3VzIHJpcHBsZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGlkZW50aWZ5IHdoaWNoIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWlucyB0aGUgZm9jdXMgdGhyb3VnaCBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvSEVBRC9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgYSBsaW5rIHdoZW4gdGhlIGBocmVmYCBwcm9wIGlzIHByb3ZpZGVkLlxuICAgKiBAZGVmYXVsdCAnYSdcbiAgICovXG4gIExpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ29udGV4dE1lbnU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkRyYWdMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaE1vdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICBUb3VjaFJpcHBsZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b25CYXNlOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXREaXZpZGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlEaXZpZGVyJywgc2xvdCk7XG59XG5jb25zdCBkaXZpZGVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aURpdmlkZXInLCBbJ3Jvb3QnLCAnYWJzb2x1dGUnLCAnZnVsbFdpZHRoJywgJ2luc2V0JywgJ21pZGRsZScsICdmbGV4SXRlbScsICdsaWdodCcsICd2ZXJ0aWNhbCcsICd3aXRoQ2hpbGRyZW4nLCAnd2l0aENoaWxkcmVuVmVydGljYWwnLCAndGV4dEFsaWduUmlnaHQnLCAndGV4dEFsaWduTGVmdCcsICd3cmFwcGVyJywgJ3dyYXBwZXJWZXJ0aWNhbCddKTtcbmV4cG9ydCBkZWZhdWx0IGRpdmlkZXJDbGFzc2VzOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbUljb25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtSWNvbicsIHNsb3QpO1xufVxuY29uc3QgbGlzdEl0ZW1JY29uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtSWNvbicsIFsncm9vdCcsICdhbGlnbkl0ZW1zRmxleFN0YXJ0J10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1JY29uQ2xhc3NlczsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdEl0ZW1UZXh0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaXN0SXRlbVRleHQnLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtVGV4dENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbVRleHQnLCBbJ3Jvb3QnLCAnbXVsdGlsaW5lJywgJ2RlbnNlJywgJ2luc2V0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1UZXh0Q2xhc3NlczsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVudUl0ZW1VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU1lbnVJdGVtJywgc2xvdCk7XG59XG5jb25zdCBtZW51SXRlbUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlNZW51SXRlbScsIFsncm9vdCcsICdmb2N1c1Zpc2libGUnLCAnZGVuc2UnLCAnZGlzYWJsZWQnLCAnZGl2aWRlcicsICdndXR0ZXJzJywgJ3NlbGVjdGVkJ10pO1xuZXhwb3J0IGRlZmF1bHQgbWVudUl0ZW1DbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhdXRvRm9jdXNcIiwgXCJjb21wb25lbnRcIiwgXCJkZW5zZVwiLCBcImRpdmlkZXJcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcInJvbGVcIiwgXCJ0YWJJbmRleFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsgZGl2aWRlckNsYXNzZXMgfSBmcm9tICcuLi9EaXZpZGVyJztcbmltcG9ydCB7IGxpc3RJdGVtSWNvbkNsYXNzZXMgfSBmcm9tICcuLi9MaXN0SXRlbUljb24nO1xuaW1wb3J0IHsgbGlzdEl0ZW1UZXh0Q2xhc3NlcyB9IGZyb20gJy4uL0xpc3RJdGVtVGV4dCc7XG5pbXBvcnQgbWVudUl0ZW1DbGFzc2VzLCB7IGdldE1lbnVJdGVtVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tZW51SXRlbUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBvdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2UsIG93bmVyU3RhdGUuZGl2aWRlciAmJiBzdHlsZXMuZGl2aWRlciwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYgc3R5bGVzLmd1dHRlcnNdO1xufTtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGRlbnNlLFxuICAgIGRpdmlkZXIsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgc2VsZWN0ZWQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGVuc2UgJiYgJ2RlbnNlJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJywgZGl2aWRlciAmJiAnZGl2aWRlcicsIHNlbGVjdGVkICYmICdzZWxlY3RlZCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRNZW51SXRlbVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IE1lbnVJdGVtUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlNZW51SXRlbScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5MSwge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgbWluSGVpZ2h0OiA0OCxcbiAgcGFkZGluZ1RvcDogNixcbiAgcGFkZGluZ0JvdHRvbTogNixcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAxNixcbiAgcGFkZGluZ1JpZ2h0OiAxNlxufSwgb3duZXJTdGF0ZS5kaXZpZGVyICYmIHtcbiAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5kaXZpZGVyfWAsXG4gIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG59LCB7XG4gICcmOmhvdmVyJzoge1xuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3ZlcixcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLnNlbGVjdGVkfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICBbYCYuJHttZW51SXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LFxuICBbYCYuJHttZW51SXRlbUNsYXNzZXMuc2VsZWN0ZWR9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KVxuICAgIH1cbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNcbiAgfSxcbiAgW2AmLiR7bWVudUl0ZW1DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH0sXG4gIFtgJiArIC4ke2RpdmlkZXJDbGFzc2VzLnJvb3R9YF06IHtcbiAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDEpXG4gIH0sXG4gIFtgJiArIC4ke2RpdmlkZXJDbGFzc2VzLmluc2V0fWBdOiB7XG4gICAgbWFyZ2luTGVmdDogNTJcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMucm9vdH1gXToge1xuICAgIG1hcmdpblRvcDogMCxcbiAgICBtYXJnaW5Cb3R0b206IDBcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMuaW5zZXR9YF06IHtcbiAgICBwYWRkaW5nTGVmdDogMzZcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtSWNvbkNsYXNzZXMucm9vdH1gXToge1xuICAgIG1pbldpZHRoOiAzNlxuICB9XG59LCAhb3duZXJTdGF0ZS5kZW5zZSAmJiB7XG4gIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICBtaW5IZWlnaHQ6ICdhdXRvJ1xuICB9XG59LCBvd25lclN0YXRlLmRlbnNlICYmIF9leHRlbmRzKHtcbiAgbWluSGVpZ2h0OiAzMixcbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9jb21wb25lbnRzL21lbnVzI3NwZWNzID4gRGVuc2VcbiAgcGFkZGluZ1RvcDogNCxcbiAgcGFkZGluZ0JvdHRvbTogNFxufSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBbYCYgLiR7bGlzdEl0ZW1JY29uQ2xhc3Nlcy5yb290fSBzdmdgXToge1xuICAgIGZvbnRTaXplOiAnMS4yNXJlbSdcbiAgfVxufSkpKTtcbmNvbnN0IE1lbnVJdGVtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUl0ZW0oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aU1lbnVJdGVtJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgY29tcG9uZW50ID0gJ2xpJyxcbiAgICBkZW5zZSA9IGZhbHNlLFxuICAgIGRpdmlkZXIgPSBmYWxzZSxcbiAgICBkaXNhYmxlR3V0dGVycyA9IGZhbHNlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICByb2xlID0gJ21lbnVpdGVtJyxcbiAgICB0YWJJbmRleDogdGFiSW5kZXhQcm9wXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIGNvbnN0IGNoaWxkQ29udGV4dCA9IHtcbiAgICBkZW5zZTogZGVuc2UgfHwgY29udGV4dC5kZW5zZSB8fCBmYWxzZSxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9O1xuICBjb25zdCBtZW51SXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGlmIChtZW51SXRlbVJlZi5jdXJyZW50KSB7XG4gICAgICAgIG1lbnVJdGVtUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBNZW51SXRlbSB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkZW5zZTogY2hpbGRDb250ZXh0LmRlbnNlLFxuICAgIGRpdmlkZXIsXG4gICAgZGlzYWJsZUd1dHRlcnNcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihtZW51SXRlbVJlZiwgcmVmKTtcbiAgbGV0IHRhYkluZGV4O1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcCAhPT0gdW5kZWZpbmVkID8gdGFiSW5kZXhQcm9wIDogLTE7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChNZW51SXRlbVJvb3QsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgcm9sZTogcm9sZSxcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWUpXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51SXRlbS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogRm9jdXMgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBpZiB0aGUgdmFsdWUgY2hhbmdlcyBmcm9tIGZhbHNlIHRvIHRydWUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb21wYWN0IHZlcnRpY2FsIHBhZGRpbmcgZGVzaWduZWQgZm9yIGtleWJvYXJkIGFuZCBtb3VzZSBpbnB1dCBpcyB1c2VkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBNZW51IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSAxcHggbGlnaHQgYm9yZGVyIGlzIGFkZGVkIHRvIHRoZSBib3R0b20gb2YgdGhlIG1lbnUgaXRlbS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpdmlkZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudUl0ZW07IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZvcm1Db250cm9sJywgc2xvdCk7XG59XG5jb25zdCBmb3JtQ29udHJvbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtQ29udHJvbCcsIFsncm9vdCcsICdtYXJnaW5Ob25lJywgJ21hcmdpbk5vcm1hbCcsICdtYXJnaW5EZW5zZScsICdmdWxsV2lkdGgnLCAnZGlzYWJsZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtQ29udHJvbENsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZm9jdXNlZFwiLCBcImZ1bGxXaWR0aFwiLCBcImhpZGRlbkxhYmVsXCIsIFwibWFyZ2luXCIsIFwicmVxdWlyZWRcIiwgXCJzaXplXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBpc0ZpbGxlZCwgaXNBZG9ybmVkU3RhcnQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgaXNNdWlFbGVtZW50IGZyb20gJy4uL3V0aWxzL2lzTXVpRWxlbWVudCc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4vRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB7IGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL2Zvcm1Db250cm9sQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBtYXJnaW4sXG4gICAgZnVsbFdpZHRoXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBtYXJnaW4gIT09ICdub25lJyAmJiBgbWFyZ2luJHtjYXBpdGFsaXplKG1hcmdpbil9YCwgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgRm9ybUNvbnRyb2xSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlGb3JtQ29udHJvbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6ICh7XG4gICAgb3duZXJTdGF0ZVxuICB9LCBzdHlsZXMpID0+IHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0eWxlcy5yb290LCBzdHlsZXNbYG1hcmdpbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLm1hcmdpbil9YF0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHN0eWxlcy5mdWxsV2lkdGgpO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgLy8gUmVzZXQgZmllbGRzZXQgZGVmYXVsdCBzdHlsZS5cbiAgbWluV2lkdGg6IDAsXG4gIHBhZGRpbmc6IDAsXG4gIG1hcmdpbjogMCxcbiAgYm9yZGVyOiAwLFxuICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xufSwgb3duZXJTdGF0ZS5tYXJnaW4gPT09ICdub3JtYWwnICYmIHtcbiAgbWFyZ2luVG9wOiAxNixcbiAgbWFyZ2luQm90dG9tOiA4XG59LCBvd25lclN0YXRlLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiB7XG4gIG1hcmdpblRvcDogOCxcbiAgbWFyZ2luQm90dG9tOiA0XG59LCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiB7XG4gIHdpZHRoOiAnMTAwJSdcbn0pKTtcbi8qKlxuICogUHJvdmlkZXMgY29udGV4dCBzdWNoIGFzIGZpbGxlZC9mb2N1c2VkL2Vycm9yL3JlcXVpcmVkIGZvciBmb3JtIGlucHV0cy5cbiAqIFJlbHlpbmcgb24gdGhlIGNvbnRleHQgcHJvdmlkZXMgaGlnaCBmbGV4aWJpbGl0eSBhbmQgZW5zdXJlcyB0aGF0IHRoZSBzdGF0ZSBhbHdheXMgc3RheXNcbiAqIGNvbnNpc3RlbnQgYWNyb3NzIHRoZSBjaGlsZHJlbiBvZiB0aGUgYEZvcm1Db250cm9sYC5cbiAqIFRoaXMgY29udGV4dCBpcyB1c2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAgLSBGb3JtTGFiZWxcbiAqICAtIEZvcm1IZWxwZXJUZXh0XG4gKiAgLSBJbnB1dFxuICogIC0gSW5wdXRMYWJlbFxuICpcbiAqIFlvdSBjYW4gZmluZCBvbmUgY29tcG9zaXRpb24gZXhhbXBsZSBiZWxvdyBhbmQgbW9yZSBnb2luZyB0byBbdGhlIGRlbW9zXSgvY29tcG9uZW50cy90ZXh0LWZpZWxkcy8jY29tcG9uZW50cykuXG4gKlxuICogYGBganN4XG4gKiA8Rm9ybUNvbnRyb2w+XG4gKiAgIDxJbnB1dExhYmVsIGh0bWxGb3I9XCJteS1pbnB1dFwiPkVtYWlsIGFkZHJlc3M8L0lucHV0TGFiZWw+XG4gKiAgIDxJbnB1dCBpZD1cIm15LWlucHV0XCIgYXJpYS1kZXNjcmliZWRieT1cIm15LWhlbHBlci10ZXh0XCIgLz5cbiAqICAgPEZvcm1IZWxwZXJUZXh0IGlkPVwibXktaGVscGVyLXRleHRcIj5XZSdsbCBuZXZlciBzaGFyZSB5b3VyIGVtYWlsLjwvRm9ybUhlbHBlclRleHQ+XG4gKiA8L0Zvcm1Db250cm9sPlxuICogYGBgXG4gKlxuICog4pqg77iPIE9ubHkgb25lIGBJbnB1dEJhc2VgIGNhbiBiZSB1c2VkIHdpdGhpbiBhIEZvcm1Db250cm9sIGJlY2F1c2UgaXQgY3JlYXRlIHZpc3VhbCBpbmNvbnNpc3RlbmNpZXMuXG4gKiBGb3IgaW5zdGFuY2UsIG9ubHkgb25lIGlucHV0IGNhbiBiZSBmb2N1c2VkIGF0IHRoZSBzYW1lIHRpbWUsIHRoZSBzdGF0ZSBzaG91bGRuJ3QgYmUgc2hhcmVkLlxuICovXG5cbmNvbnN0IEZvcm1Db250cm9sID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUNvbnRyb2woaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUZvcm1Db250cm9sJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgZXJyb3IgPSBmYWxzZSxcbiAgICBmb2N1c2VkOiB2aXN1YWxseUZvY3VzZWQsXG4gICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgaGlkZGVuTGFiZWwgPSBmYWxzZSxcbiAgICBtYXJnaW4gPSAnbm9uZScsXG4gICAgcmVxdWlyZWQgPSBmYWxzZSxcbiAgICBzaXplID0gJ21lZGl1bScsXG4gICAgdmFyaWFudCA9ICdvdXRsaW5lZCdcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsLFxuICAgIG1hcmdpbixcbiAgICByZXF1aXJlZCxcbiAgICBzaXplLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBbYWRvcm5lZFN0YXJ0LCBzZXRBZG9ybmVkU3RhcnRdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgZmluZCB0aGUgSW5wdXQgaW4gb3JkZXJcbiAgICAvLyB0byBmdWxseSBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICBsZXQgaW5pdGlhbEFkb3JuZWRTdGFydCA9IGZhbHNlO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmICghaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlucHV0ID0gaXNNdWlFbGVtZW50KGNoaWxkLCBbJ1NlbGVjdCddKSA/IGNoaWxkLnByb3BzLmlucHV0IDogY2hpbGQ7XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIGlzQWRvcm5lZFN0YXJ0KGlucHV0LnByb3BzKSkge1xuICAgICAgICAgIGluaXRpYWxBZG9ybmVkU3RhcnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSk7XG4gIGNvbnN0IFtmaWxsZWQsIHNldEZpbGxlZF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGxldCBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRmlsbGVkKGNoaWxkLnByb3BzLCB0cnVlKSkge1xuICAgICAgICAgIGluaXRpYWxGaWxsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEZpbGxlZDtcbiAgfSk7XG4gIGNvbnN0IFtmb2N1c2VkU3RhdGUsIHNldEZvY3VzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c2VkU3RhdGUpIHtcbiAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGZvY3VzZWQgPSB2aXN1YWxseUZvY3VzZWQgIT09IHVuZGVmaW5lZCAmJiAhZGlzYWJsZWQgPyB2aXN1YWxseUZvY3VzZWQgOiBmb2N1c2VkU3RhdGU7XG4gIGxldCByZWdpc3RlckVmZmVjdDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHJlZ2lzdGVyZWRJbnB1dCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgICByZWdpc3RlckVmZmVjdCA9ICgpID0+IHtcbiAgICAgIGlmIChyZWdpc3RlcmVkSW5wdXQuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGVyZSBhcmUgbXVsdGlwbGUgYElucHV0QmFzZWAgY29tcG9uZW50cyBpbnNpZGUgYSBGb3JtQ29udHJvbC4nLCAnVGhpcyBjcmVhdGVzIHZpc3VhbCBpbmNvbnNpc3RlbmNpZXMsIG9ubHkgdXNlIG9uZSBgSW5wdXRCYXNlYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG5cbiAgICAgIHJlZ2lzdGVyZWRJbnB1dC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHJlZ2lzdGVyZWRJbnB1dC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICBjb25zdCBvbkZpbGxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRGaWxsZWQodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgY29uc3Qgb25FbXB0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRGaWxsZWQoZmFsc2UpO1xuICB9LCBbXSk7XG4gIGNvbnN0IGNoaWxkQ29udGV4dCA9IHtcbiAgICBhZG9ybmVkU3RhcnQsXG4gICAgc2V0QWRvcm5lZFN0YXJ0LFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGZpbGxlZCxcbiAgICBmb2N1c2VkLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbCxcbiAgICBzaXplLFxuICAgIG9uQmx1cjogKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgfSxcbiAgICBvbkVtcHR5LFxuICAgIG9uRmlsbGVkLFxuICAgIG9uRm9jdXM6ICgpID0+IHtcbiAgICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfSxcbiAgICByZWdpc3RlckVmZmVjdCxcbiAgICByZXF1aXJlZCxcbiAgICB2YXJpYW50XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUNvbnRyb2wucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwsIGlucHV0IGFuZCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc3BsYXllZCBpbiBmb2N1c2VkIHN0YXRlLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGhpZGRlbi5cbiAgICogVGhpcyBpcyB1c2VkIHRvIGluY3JlYXNlIGRlbnNpdHkgZm9yIGEgYEZpbGxlZElucHV0YC5cbiAgICogQmUgc3VyZSB0byBhZGQgYGFyaWEtbGFiZWxgIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBoaWRkZW5MYWJlbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAgb3IgYG5vcm1hbGAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcgb2YgdGhpcyBhbmQgY29udGFpbmVkIGNvbXBvbmVudHMuXG4gICAqIEBkZWZhdWx0ICdub25lJ1xuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJywgJ25vcm1hbCddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBgaW5wdXRgIGlzIHJlcXVpcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnb3V0bGluZWQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbDsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdCcsIHNsb3QpO1xufVxuY29uc3QgbGlzdENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0JywgWydyb290JywgJ3BhZGRpbmcnLCAnZGVuc2UnLCAnc3ViaGVhZGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdENsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlUGFkZGluZ1wiLCBcInN1YmhlYWRlclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi9MaXN0Q29udGV4dCc7XG5pbXBvcnQgeyBnZXRMaXN0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlUGFkZGluZyxcbiAgICBkZW5zZSxcbiAgICBzdWJoZWFkZXJcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlUGFkZGluZyAmJiAncGFkZGluZycsIGRlbnNlICYmICdkZW5zZScsIHN1YmhlYWRlciAmJiAnc3ViaGVhZGVyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaXN0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IExpc3RSb290ID0gc3R5bGVkKCd1bCcsIHtcbiAgbmFtZTogJ011aUxpc3QnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYgc3R5bGVzLnBhZGRpbmcsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlLCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiBzdHlsZXMuc3ViaGVhZGVyXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYge1xuICBwYWRkaW5nVG9wOiA4LFxuICBwYWRkaW5nQm90dG9tOiA4XG59LCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiB7XG4gIHBhZGRpbmdUb3A6IDBcbn0pKTtcbmNvbnN0IExpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaXN0J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCA9ICd1bCcsXG4gICAgZGVuc2UgPSBmYWxzZSxcbiAgICBkaXNhYmxlUGFkZGluZyA9IGZhbHNlLFxuICAgIHN1YmhlYWRlclxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBkZW5zZVxuICB9KSwgW2RlbnNlXSk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBkZW5zZSxcbiAgICBkaXNhYmxlUGFkZGluZ1xuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBbc3ViaGVhZGVyLCBjaGlsZHJlbl1cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3QucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgaXMgdXNlZCBmb3JcbiAgICogdGhlIGxpc3QgYW5kIGxpc3QgaXRlbXMuXG4gICAqIFRoZSBwcm9wIGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlIGBkZW5zZWAgY29udGV4dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQYWRkaW5nOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHN1YmhlYWRlciwgbm9ybWFsbHkgYExpc3RTdWJoZWFkZXJgLlxuICAgKi9cbiAgc3ViaGVhZGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdDsiLCIvLyBBIGNoYW5nZSBvZiB0aGUgYnJvd3NlciB6b29tIGNoYW5nZSB0aGUgc2Nyb2xsYmFyIHNpemUuXG4vLyBDcmVkaXQgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvNDg4ZmQ4YWZjNTM1Y2EzYTZhZDRkYzU4MWY1ZTg5MjE3YjZhMzZhYy9qcy9zcmMvdXRpbC9zY3JvbGxiYXIuanMjTDE0LUwxOFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyU2l6ZShkb2MpIHtcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9pbm5lcldpZHRoI3VzYWdlX25vdGVzXG4gIGNvbnN0IGRvY3VtZW50V2lkdGggPSBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICByZXR1cm4gTWF0aC5hYnMod2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudFdpZHRoKTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9nZXRTY3JvbGxiYXJTaXplIGFzIGdldFNjcm9sbGJhclNpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGdldFNjcm9sbGJhclNpemU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvbnNcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvRm9jdXNJdGVtXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlXCIsIFwiZGlzYWJsZUxpc3RXcmFwXCIsIFwib25LZXlEb3duXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgTGlzdCBmcm9tICcuLi9MaXN0JztcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJy4uL3V0aWxzL2dldFNjcm9sbGJhclNpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuZnVuY3Rpb24gbmV4dEl0ZW0obGlzdCwgaXRlbSwgZGlzYWJsZUxpc3RXcmFwKSB7XG4gIGlmIChsaXN0ID09PSBpdGVtKSB7XG4gICAgcmV0dXJuIGxpc3QuZmlyc3RDaGlsZDtcbiAgfVxuXG4gIGlmIChpdGVtICYmIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0LmZpcnN0Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHByZXZpb3VzSXRlbShsaXN0LCBpdGVtLCBkaXNhYmxlTGlzdFdyYXApIHtcbiAgaWYgKGxpc3QgPT09IGl0ZW0pIHtcbiAgICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbGlzdC5maXJzdENoaWxkIDogbGlzdC5sYXN0Q2hpbGQ7XG4gIH1cblxuICBpZiAoaXRlbSAmJiBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGRpc2FibGVMaXN0V3JhcCA/IG51bGwgOiBsaXN0Lmxhc3RDaGlsZDtcbn1cblxuZnVuY3Rpb24gdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkge1xuICBpZiAodGV4dENyaXRlcmlhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGxldCB0ZXh0ID0gbmV4dEZvY3VzLmlubmVyVGV4dDtcblxuICBpZiAodGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8ganNkb20gZG9lc24ndCBzdXBwb3J0IGlubmVyVGV4dFxuICAgIHRleHQgPSBuZXh0Rm9jdXMudGV4dENvbnRlbnQ7XG4gIH1cblxuICB0ZXh0ID0gdGV4dC50cmltKCkudG9Mb3dlckNhc2UoKTtcblxuICBpZiAodGV4dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodGV4dENyaXRlcmlhLnJlcGVhdGluZykge1xuICAgIHJldHVybiB0ZXh0WzBdID09PSB0ZXh0Q3JpdGVyaWEua2V5c1swXTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0LmluZGV4T2YodGV4dENyaXRlcmlhLmtleXMuam9pbignJykpID09PSAwO1xufVxuXG5mdW5jdGlvbiBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHRyYXZlcnNhbEZ1bmN0aW9uLCB0ZXh0Q3JpdGVyaWEpIHtcbiAgbGV0IHdyYXBwZWRPbmNlID0gZmFsc2U7XG4gIGxldCBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBjdXJyZW50Rm9jdXMsIGN1cnJlbnRGb2N1cyA/IGRpc2FibGVMaXN0V3JhcCA6IGZhbHNlKTtcblxuICB3aGlsZSAobmV4dEZvY3VzKSB7XG4gICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wLlxuICAgIGlmIChuZXh0Rm9jdXMgPT09IGxpc3QuZmlyc3RDaGlsZCkge1xuICAgICAgaWYgKHdyYXBwZWRPbmNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlZE9uY2UgPSB0cnVlO1xuICAgIH0gLy8gU2FtZSBsb2dpYyBhcyB1c2VBdXRvY29tcGxldGUuanNcblxuXG4gICAgY29uc3QgbmV4dEZvY3VzRGlzYWJsZWQgPSBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID8gZmFsc2UgOiBuZXh0Rm9jdXMuZGlzYWJsZWQgfHwgbmV4dEZvY3VzLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZSc7XG5cbiAgICBpZiAoIW5leHRGb2N1cy5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykgfHwgIXRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpIHx8IG5leHRGb2N1c0Rpc2FibGVkKSB7XG4gICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnQuXG4gICAgICBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBuZXh0Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRGb2N1cy5mb2N1cygpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBBIHBlcm1hbmVudGx5IGRpc3BsYXllZCBtZW51IGZvbGxvd2luZyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzLyNtZW51YnV0dG9uLlxuICogSXQncyBleHBvc2VkIHRvIGhlbHAgY3VzdG9taXphdGlvbiBvZiB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgY29tcG9uZW50IGlmIHlvdVxuICogdXNlIGl0IHNlcGFyYXRlbHkgeW91IG5lZWQgdG8gbW92ZSBmb2N1cyBpbnRvIHRoZSBjb21wb25lbnQgbWFudWFsbHkuIE9uY2VcbiAqIHRoZSBmb2N1cyBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgaXQgaXMgZnVsbHkga2V5Ym9hcmQgYWNjZXNzaWJsZS5cbiAqL1xuXG5cbmNvbnN0IE1lbnVMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUxpc3QocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgLy8gcHJpdmF0ZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgYWN0aW9ucyxcbiAgICBhdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBhdXRvRm9jdXNJdGVtID0gZmFsc2UsXG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPSBmYWxzZSxcbiAgICBkaXNhYmxlTGlzdFdyYXAgPSBmYWxzZSxcbiAgICBvbktleURvd24sXG4gICAgdmFyaWFudCA9ICdzZWxlY3RlZE1lbnUnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBsaXN0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCB0ZXh0Q3JpdGVyaWFSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIGtleXM6IFtdLFxuICAgIHJlcGVhdGluZzogdHJ1ZSxcbiAgICBwcmV2aW91c0tleU1hdGNoZWQ6IHRydWUsXG4gICAgbGFzdFRpbWU6IG51bGxcbiAgfSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBsaXN0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb25zLCAoKSA9PiAoe1xuICAgIGFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyOiAoY29udGFpbmVyRWxlbWVudCwgdGhlbWUpID0+IHtcbiAgICAgIC8vIExldCdzIGlnbm9yZSB0aGF0IHBpZWNlIG9mIGxvZ2ljIGlmIHVzZXJzIGFyZSBhbHJlYWR5IG92ZXJyaWRpbmcgdGhlIHdpZHRoXG4gICAgICAvLyBvZiB0aGUgbWVudS5cbiAgICAgIGNvbnN0IG5vRXhwbGljaXRXaWR0aCA9ICFsaXN0UmVmLmN1cnJlbnQuc3R5bGUud2lkdGg7XG5cbiAgICAgIGlmIChjb250YWluZXJFbGVtZW50LmNsaWVudEhlaWdodCA8IGxpc3RSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgJiYgbm9FeHBsaWNpdFdpZHRoKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbGJhclNpemUgPSBgJHtnZXRTY3JvbGxiYXJTaXplKG93bmVyRG9jdW1lbnQoY29udGFpbmVyRWxlbWVudCkpfXB4YDtcbiAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlW3RoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCddID0gc2Nyb2xsYmFyU2l6ZTtcbiAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlLndpZHRoID0gYGNhbGMoMTAwJSArICR7c2Nyb2xsYmFyU2l6ZX0pYDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3RSZWYuY3VycmVudDtcbiAgICB9XG4gIH0pLCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICBjb25zdCBsaXN0ID0gbGlzdFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGtleSA9IGV2ZW50LmtleTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7RWxlbWVudH0gLSB3aWxsIGFsd2F5cyBiZSBkZWZpbmVkIHNpbmNlIHdlIGFyZSBpbiBhIGtleWRvd24gaGFuZGxlclxuICAgICAqIGF0dGFjaGVkIHRvIGFuIGVsZW1lbnQuIEEga2V5ZG93biBldmVudCBpcyBlaXRoZXIgZGlzcGF0Y2hlZCB0byB0aGUgYWN0aXZlRWxlbWVudFxuICAgICAqIG9yIGRvY3VtZW50LmJvZHkgb3IgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LiBPbmx5IHRoZSBmaXJzdCBjYXNlIHdpbGxcbiAgICAgKiB0cmlnZ2VyIHRoaXMgc3BlY2lmaWMgaGFuZGxlci5cbiAgICAgKi9cblxuICAgIGNvbnN0IGN1cnJlbnRGb2N1cyA9IG93bmVyRG9jdW1lbnQobGlzdCkuYWN0aXZlRWxlbWVudDtcblxuICAgIGlmIChrZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdIb21lJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0VuZCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBwcmV2aW91c0l0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgY3JpdGVyaWEgPSB0ZXh0Q3JpdGVyaWFSZWYuY3VycmVudDtcbiAgICAgIGNvbnN0IGxvd2VyS2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCBjdXJyVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgICBpZiAoY3JpdGVyaWEua2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFJlc2V0XG4gICAgICAgIGlmIChjdXJyVGltZSAtIGNyaXRlcmlhLmxhc3RUaW1lID4gNTAwKSB7XG4gICAgICAgICAgY3JpdGVyaWEua2V5cyA9IFtdO1xuICAgICAgICAgIGNyaXRlcmlhLnJlcGVhdGluZyA9IHRydWU7XG4gICAgICAgICAgY3JpdGVyaWEucHJldmlvdXNLZXlNYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjcml0ZXJpYS5yZXBlYXRpbmcgJiYgbG93ZXJLZXkgIT09IGNyaXRlcmlhLmtleXNbMF0pIHtcbiAgICAgICAgICBjcml0ZXJpYS5yZXBlYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjcml0ZXJpYS5sYXN0VGltZSA9IGN1cnJUaW1lO1xuICAgICAgY3JpdGVyaWEua2V5cy5wdXNoKGxvd2VyS2V5KTtcbiAgICAgIGNvbnN0IGtlZXBGb2N1c09uQ3VycmVudCA9IGN1cnJlbnRGb2N1cyAmJiAhY3JpdGVyaWEucmVwZWF0aW5nICYmIHRleHRDcml0ZXJpYU1hdGNoZXMoY3VycmVudEZvY3VzLCBjcml0ZXJpYSk7XG5cbiAgICAgIGlmIChjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgJiYgKGtlZXBGb2N1c09uQ3VycmVudCB8fCBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBmYWxzZSwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0sIGNyaXRlcmlhKSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobGlzdFJlZiwgcmVmKTtcbiAgLyoqXG4gICAqIHRoZSBpbmRleCBvZiB0aGUgaXRlbSBzaG91bGQgcmVjZWl2ZSBmb2N1c1xuICAgKiBpbiBhIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgIGl0J3MgdGhlIGZpcnN0IGBzZWxlY3RlZGAgaXRlbVxuICAgKiBvdGhlcndpc2UgaXQncyB0aGUgdmVyeSBmaXJzdCBpdGVtLlxuICAgKi9cblxuICBsZXQgYWN0aXZlSXRlbUluZGV4ID0gLTE7IC8vIHNpbmNlIHdlIGluamVjdCBmb2N1cyByZWxhdGVkIHByb3BzIGludG8gY2hpbGRyZW4gd2UgaGF2ZSB0byBkbyBhIGxvb2thaGVhZFxuICAvLyB0byBjaGVjayBpZiB0aGVyZSBpcyBhIGBzZWxlY3RlZGAgaXRlbS4gV2UncmUgbG9va2luZyBmb3IgdGhlIGxhc3QgYHNlbGVjdGVkYFxuICAvLyBpdGVtIGFuZCB1c2UgdGhlIGZpcnN0IHZhbGlkIGl0ZW0gYXMgYSBmYWxsYmFja1xuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIE1lbnUgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUl0ZW1JbmRleCkge1xuICAgICAgY29uc3QgbmV3Q2hpbGRQcm9wcyA9IHt9O1xuXG4gICAgICBpZiAoYXV0b0ZvY3VzSXRlbSkge1xuICAgICAgICBuZXdDaGlsZFByb3BzLmF1dG9Gb2N1cyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkICYmIHZhcmlhbnQgPT09ICdzZWxlY3RlZE1lbnUnKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMudGFiSW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3QsIF9leHRlbmRzKHtcbiAgICByb2xlOiBcIm1lbnVcIixcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgdGFiSW5kZXg6IGF1dG9Gb2N1cyA/IDAgOiAtMVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBpdGVtc1xuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1lbnVMaXN0LnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGNvbnRhaW5lciBhbmQgbW92ZSBpbnRvIHRhYiBvcmRlci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBmb2N1cyB0aGUgZmlyc3QgbWVudWl0ZW0gaWYgYHZhcmlhbnQ9XCJtZW51XCJgIG9yIHNlbGVjdGVkIGl0ZW1cbiAgICogaWYgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXNJdGVtOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudUxpc3QgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgd2lsbCBhbGxvdyBmb2N1cyBvbiBkaXNhYmxlZCBpdGVtcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkSXRlbXNGb2N1c2FibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGl0ZW1zIHdpbGwgbm90IHdyYXAgZm9jdXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlTGlzdFdyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1c1xuICAgKiBhbmQgdGhlIHZlcnRpY2FsIGFsaWdubWVudCByZWxhdGl2ZSB0byB0aGUgYW5jaG9yIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0ICdzZWxlY3RlZE1lbnUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydtZW51JywgJ3NlbGVjdGVkTWVudSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1lbnVMaXN0OyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXBlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpUGFwZXInLCBzbG90KTtcbn1cbmNvbnN0IHBhcGVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVBhcGVyJywgWydyb290JywgJ3JvdW5kZWQnLCAnb3V0bGluZWQnLCAnZWxldmF0aW9uJywgJ2VsZXZhdGlvbjAnLCAnZWxldmF0aW9uMScsICdlbGV2YXRpb24yJywgJ2VsZXZhdGlvbjMnLCAnZWxldmF0aW9uNCcsICdlbGV2YXRpb241JywgJ2VsZXZhdGlvbjYnLCAnZWxldmF0aW9uNycsICdlbGV2YXRpb244JywgJ2VsZXZhdGlvbjknLCAnZWxldmF0aW9uMTAnLCAnZWxldmF0aW9uMTEnLCAnZWxldmF0aW9uMTInLCAnZWxldmF0aW9uMTMnLCAnZWxldmF0aW9uMTQnLCAnZWxldmF0aW9uMTUnLCAnZWxldmF0aW9uMTYnLCAnZWxldmF0aW9uMTcnLCAnZWxldmF0aW9uMTgnLCAnZWxldmF0aW9uMTknLCAnZWxldmF0aW9uMjAnLCAnZWxldmF0aW9uMjEnLCAnZWxldmF0aW9uMjInLCAnZWxldmF0aW9uMjMnLCAnZWxldmF0aW9uMjQnXSk7XG5leHBvcnQgZGVmYXVsdCBwYXBlckNsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImVsZXZhdGlvblwiLCBcInNxdWFyZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgaW50ZWdlclByb3BUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IGdldFBhcGVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wYXBlckNsYXNzZXMnOyAvLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLWlvcy9ibG9iL2JjYTM2MTA3NDA1NTk0ZDViN2IxNjI2NWE1YjBlZDY5OGY4NWE1ZWUvY29tcG9uZW50cy9FbGV2YXRpb24vc3JjL1VJQ29sb3IlMkJNYXRlcmlhbEVsZXZhdGlvbi5tI0w2MVxuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCBnZXRPdmVybGF5QWxwaGEgPSBlbGV2YXRpb24gPT4ge1xuICBsZXQgYWxwaGFWYWx1ZTtcblxuICBpZiAoZWxldmF0aW9uIDwgMSkge1xuICAgIGFscGhhVmFsdWUgPSA1LjExOTE2ICogZWxldmF0aW9uICoqIDI7XG4gIH0gZWxzZSB7XG4gICAgYWxwaGFWYWx1ZSA9IDQuNSAqIE1hdGgubG9nKGVsZXZhdGlvbiArIDEpICsgMjtcbiAgfVxuXG4gIHJldHVybiAoYWxwaGFWYWx1ZSAvIDEwMCkudG9GaXhlZCgyKTtcbn07XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBzcXVhcmUsXG4gICAgZWxldmF0aW9uLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgIXNxdWFyZSAmJiAncm91bmRlZCcsIHZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIGBlbGV2YXRpb24ke2VsZXZhdGlvbn1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBhcGVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5cbmNvbnN0IFBhcGVyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpUGFwZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sICFvd25lclN0YXRlLnNxdWFyZSAmJiBzdHlsZXMucm91bmRlZCwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBzdHlsZXNbYGVsZXZhdGlvbiR7b3duZXJTdGF0ZS5lbGV2YXRpb259YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxufSwgIW93bmVyU3RhdGUuc3F1YXJlICYmIHtcbiAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIGJvcmRlcjogYDFweCBzb2xpZCAke3RoZW1lLnBhbGV0dGUuZGl2aWRlcn1gXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIF9leHRlbmRzKHtcbiAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzW293bmVyU3RhdGUuZWxldmF0aW9uXVxufSwgdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnZGFyaycgJiYge1xuICBiYWNrZ3JvdW5kSW1hZ2U6IGBsaW5lYXItZ3JhZGllbnQoJHthbHBoYSgnI2ZmZicsIGdldE92ZXJsYXlBbHBoYShvd25lclN0YXRlLmVsZXZhdGlvbikpfSwgJHthbHBoYSgnI2ZmZicsIGdldE92ZXJsYXlBbHBoYShvd25lclN0YXRlLmVsZXZhdGlvbikpfSlgXG59KSkpO1xuY29uc3QgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpUGFwZXInXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgZWxldmF0aW9uID0gMSxcbiAgICBzcXVhcmUgPSBmYWxzZSxcbiAgICB2YXJpYW50ID0gJ2VsZXZhdGlvbidcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZWxldmF0aW9uLFxuICAgIHNxdWFyZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcblxuICAgIGlmICh0aGVtZS5zaGFkb3dzW2VsZXZhdGlvbl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGVsZXZhdGlvbiBwcm92aWRlZCA8UGFwZXIgZWxldmF0aW9uPXske2VsZXZhdGlvbn19PiBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSB0aGVtZS5gLCBgUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IFxcYHRoZW1lLnNoYWRvd3NbJHtlbGV2YXRpb259XVxcYCBpcyBkZWZpbmVkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUGFwZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUGFwZXIucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNoYWRvdyBkZXB0aCwgY29ycmVzcG9uZHMgdG8gYGRwYCBpbiB0aGUgc3BlYy5cbiAgICogSXQgYWNjZXB0cyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIGVsZXZhdGlvbjogY2hhaW5Qcm9wVHlwZXMoaW50ZWdlclByb3BUeXBlLCBwcm9wcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWxldmF0aW9uLFxuICAgICAgdmFyaWFudFxuICAgIH0gPSBwcm9wcztcblxuICAgIGlmIChlbGV2YXRpb24gPiAwICYmIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYE1VSTogQ29tYmluaW5nIFxcYGVsZXZhdGlvbj17JHtlbGV2YXRpb259fVxcYCB3aXRoIFxcYHZhcmlhbnQ9XCIke3ZhcmlhbnR9XCJcXGAgaGFzIG5vIGVmZmVjdC4gRWl0aGVyIHVzZSBcXGBlbGV2YXRpb249ezB9XFxgIG9yIHVzZSBhIGRpZmZlcmVudCBcXGB2YXJpYW50XFxgLmApO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdlbGV2YXRpb24nXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlbGV2YXRpb24nLCAnb3V0bGluZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFBhcGVyOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmV4cG9ydCB2YXIgVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG5leHBvcnQgdmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0IHZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnQgdmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnQgdmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIC0tLVxuICpcbiAqICoqTm90ZSoqOiBgVHJhbnNpdGlvbmAgaXMgYSBwbGF0Zm9ybS1hZ25vc3RpYyBiYXNlIGNvbXBvbmVudC4gSWYgeW91J3JlIHVzaW5nXG4gKiB0cmFuc2l0aW9ucyBpbiBDU1MsIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZVxuICogW2BDU1NUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9jc3MtdHJhbnNpdGlvbilcbiAqIGluc3RlYWQuIEl0IGluaGVyaXRzIGFsbCB0aGUgZmVhdHVyZXMgb2YgYFRyYW5zaXRpb25gLCBidXQgY29udGFpbnNcbiAqIGFkZGl0aW9uYWwgZmVhdHVyZXMgbmVjZXNzYXJ5IHRvIHBsYXkgbmljZSB3aXRoIENTUyB0cmFuc2l0aW9ucyAoaGVuY2UgdGhlXG4gKiBuYW1lIG9mIHRoZSBjb21wb25lbnQpLlxuICpcbiAqIC0tLVxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGVcbiAqIGNvbXBvbmVudHMuIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yXG4gKiBleGFtcGxlIHdlIGNhbiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMSB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGV4aXRpbmc6ICB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZXhpdGVkOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50XG4gKiBiZWdpbnMgdGhlIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tXG4gKiBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLCB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UgaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZVxuICogdGhlIGZvbGxvd2luZyBleGFtcGxlICh3ZSdsbCB1c2UgdGhlXG4gKiBbdXNlU3RhdGVdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VzdGF0ZSkgaG9vayk6XG4gKlxuICogYGBganN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IFtpblByb3AsIHNldEluUHJvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9ezUwMH0+XG4gKiAgICAgICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICAgICAgLy8gLi4uXG4gKiAgICAgICAgICl9XG4gKiAgICAgICA8L1RyYW5zaXRpb24+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlXG4gKiBhbmQgc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzXG4gKiB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbVxuICogYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuICA7XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW2FwcGVhcmluZ10gOiBbUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIGFwcGVhcmluZ10sXG4gICAgICAgIG1heWJlTm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICBtYXliZUFwcGVhcmluZyA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQoZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgbWF5YmVOb2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdW5kZWZpbmVkIDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobWF5YmVOb2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQodGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbdGhpcy5uZXh0Q2FsbGJhY2tdIDogW25vZGUsIHRoaXMubmV4dENhbGxiYWNrXSxcbiAgICAgICAgICBtYXliZU5vZGUgPSBfcmVmM1swXSxcbiAgICAgICAgICBtYXliZU5leHRDYWxsYmFjayA9IF9yZWYzWzFdO1xuXG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG1heWJlTm9kZSwgbWF5YmVOZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX2luID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIF9tb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIF91bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgX2FwcGVhciA9IF90aGlzJHByb3BzLmFwcGVhcixcbiAgICAgICAgX2VudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgIF9leGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgX3RpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICBfYWRkRW5kTGlzdGVuZXIgPSBfdGhpcyRwcm9wcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgX29uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBfb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIF9vbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIF9vbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIF9vbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIF9vbkV4aXRlZCA9IF90aGlzJHByb3BzLm9uRXhpdGVkLFxuICAgICAgICBfbm9kZVJlZiA9IF90aGlzJHByb3BzLm5vZGVSZWYsXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIiwgXCJ0aW1lb3V0XCIsIFwiYWRkRW5kTGlzdGVuZXJcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRXhpdGVkXCIsIFwibm9kZVJlZlwiXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSA6IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgUmVhY3QgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50IHRoYXQgbmVlZCB0byB0cmFuc2l0aW9uOlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTExMjcxMzAvNDY3MTkzMlxuICAgKlxuICAgKiAgIC0gV2hlbiBgbm9kZVJlZmAgcHJvcCBpcyB1c2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogICAgICAoZS5nLiBgb25FbnRlcmApIGJlY2F1c2UgdXNlciBhbHJlYWR5IGhhcyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBub2RlLlxuICAgKiAgIC0gV2hlbiBjaGFuZ2luZyBga2V5YCBwcm9wIG9mIGBUcmFuc2l0aW9uYCBpbiBhIGBUcmFuc2l0aW9uR3JvdXBgIGEgbmV3XG4gICAqICAgICBgbm9kZVJlZmAgbmVlZCB0byBiZSBwcm92aWRlZCB0byBgVHJhbnNpdGlvbmAgd2l0aCBjaGFuZ2VkIGBrZXlgIHByb3BcbiAgICogICAgIChzZWVcbiAgICogICAgIFt0ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qc10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzEzNDM1Zjg5N2IzYWI3MWY2ZTE5ZDcyNGYxNDU1OTZmNTkxMDU4MWMvdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanMjTDM2Mi1MNDM3KSkuXG4gICAqL1xuICBub2RlUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IFByb3BUeXBlcy5hbnkgOiBmdW5jdGlvbiAocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHZhbHVlID0gcHJvcFZhbHVlW2tleV07XG4gICAgICByZXR1cm4gUHJvcFR5cGVzLmluc3RhbmNlT2YodmFsdWUgJiYgJ293bmVyRG9jdW1lbnQnIGluIHZhbHVlID8gdmFsdWUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5FbGVtZW50IDogRWxlbWVudCkocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCk7XG4gICAgfVxuICB9KSxcblxuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBkb2VzIG5vdCBwZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW5cbiAgICogaXQgZmlyc3QgbW91bnRzLCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgaW5gLiBJZiB5b3Ugd2FudCB0aGlzXG4gICAqIGJlaGF2aW9yLCBzZXQgYm90aCBgYXBwZWFyYCBhbmQgYGluYCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9OyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IEVYSVRFRDtcblRyYW5zaXRpb24uRU5URVJJTkcgPSBFTlRFUklORztcblRyYW5zaXRpb24uRU5URVJFRCA9IEVOVEVSRUQ7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSBFWElUSU5HO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJleHBvcnQgY29uc3QgcmVmbG93ID0gbm9kZSA9PiBub2RlLnNjcm9sbFRvcDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcHMocHJvcHMsIG9wdGlvbnMpIHtcbiAgdmFyIF9zdHlsZSR0cmFuc2l0aW9uRHVyYSwgX3N0eWxlJHRyYW5zaXRpb25UaW1pO1xuXG4gIGNvbnN0IHtcbiAgICB0aW1lb3V0LFxuICAgIGVhc2luZyxcbiAgICBzdHlsZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbjogKF9zdHlsZSR0cmFuc2l0aW9uRHVyYSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbikgIT0gbnVsbCA/IF9zdHlsZSR0cmFuc2l0aW9uRHVyYSA6IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiB0aW1lb3V0W29wdGlvbnMubW9kZV0gfHwgMCxcbiAgICBlYXNpbmc6IChfc3R5bGUkdHJhbnNpdGlvblRpbWkgPSBzdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24pICE9IG51bGwgPyBfc3R5bGUkdHJhbnNpdGlvblRpbWkgOiB0eXBlb2YgZWFzaW5nID09PSAnb2JqZWN0JyA/IGVhc2luZ1tvcHRpb25zLm1vZGVdIDogZWFzaW5nLFxuICAgIGRlbGF5OiBzdHlsZS50cmFuc2l0aW9uRGVsYXlcbiAgfTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWRkRW5kTGlzdGVuZXJcIiwgXCJhcHBlYXJcIiwgXCJjaGlsZHJlblwiLCBcImVhc2luZ1wiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuZnVuY3Rpb24gZ2V0U2NhbGUodmFsdWUpIHtcbiAgcmV0dXJuIGBzY2FsZSgke3ZhbHVlfSwgJHt2YWx1ZSAqKiAyfSlgO1xufVxuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDEpXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogJ25vbmUnXG4gIH1cbn07XG4vKipcbiAqIFRoZSBHcm93IHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW1Rvb2x0aXBdKC9jb21wb25lbnRzL3Rvb2x0aXBzLykgYW5kXG4gKiBbUG9wb3Zlcl0oL2NvbXBvbmVudHMvcG9wb3Zlci8pIGNvbXBvbmVudHMuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cbmNvbnN0IEdyb3cgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcm93KHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIGFkZEVuZExpc3RlbmVyLFxuICAgIGFwcGVhciA9IHRydWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZWFzaW5nLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FbnRlcixcbiAgICBvbkVudGVyZWQsXG4gICAgb25FbnRlcmluZyxcbiAgICBvbkV4aXQsXG4gICAgb25FeGl0ZWQsXG4gICAgb25FeGl0aW5nLFxuICAgIHN0eWxlLFxuICAgIHRpbWVvdXQgPSAnYXV0bycsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgdGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgYXV0b1RpbWVvdXQgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBmb3JlaWduUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobm9kZVJlZiwgZm9yZWlnblJlZik7XG5cbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGNhbGxiYWNrID0+IG1heWJlSXNBcHBlYXJpbmcgPT4ge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVSZWYuY3VycmVudDsgLy8gb25FbnRlclh4eCBhbmQgb25FeGl0WHh4IGNhbGxiYWNrcyBoYXZlIGEgZGlmZmVyZW50IGFyZ3VtZW50cy5sZW5ndGggdmFsdWUuXG5cbiAgICAgIGlmIChtYXliZUlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhub2RlLCBtYXliZUlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHtcbiAgICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBkZWxheSxcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbGV0IGR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb24sXG4gICAgICBkZWxheVxuICAgIH0pLCB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXksXG4gICAgICBlYXNpbmc6IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuICAgIH0pXS5qb2luKCcsJyk7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmVkKTtcbiAgY29uc3QgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgY29uc3QgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIGRlbGF5LFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIGxldCBkdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgIGF1dG9UaW1lb3V0LmN1cnJlbnQgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgfVxuXG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gW3RoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5OiBkZWxheSB8fCBkdXJhdGlvbiAqIDAuMzMzLFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9KV0uam9pbignLCcpO1xuICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGdldFNjYWxlKDAuNzUpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuXG4gIGNvbnN0IGhhbmRsZUFkZEVuZExpc3RlbmVyID0gbmV4dCA9PiB7XG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgdGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQobmV4dCwgYXV0b1RpbWVvdXQuY3VycmVudCB8fCAwKTtcbiAgICB9XG5cbiAgICBpZiAoYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIC8vIE9sZCBjYWxsIHNpZ25hdHVyZSBiZWZvcmUgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBgIGltcGxlbWVudGVkIGBub2RlUmVmYFxuICAgICAgYWRkRW5kTGlzdGVuZXIobm9kZVJlZi5jdXJyZW50LCBuZXh0KTtcbiAgICB9XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IGFwcGVhcixcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IG5vZGVSZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogaGFuZGxlQWRkRW5kTGlzdGVuZXIsXG4gICAgdGltZW91dDogdGltZW91dCA9PT0gJ2F1dG8nID8gbnVsbCA6IHRpbWVvdXRcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogKHN0YXRlLCBjaGlsZFByb3BzKSA9PiB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgwLjc1KSxcbiAgICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICAgIH0sIHN0eWxlc1tzdGF0ZV0sIHN0eWxlLCBjaGlsZHJlbi5wcm9wcy5zdHlsZSksXG4gICAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgICB9LCBjaGlsZFByb3BzKSk7XG4gICAgfVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyb3cucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZyBET01cbiAgICogbm9kZSBhbmQgYSBkb25lIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiBOb3RlOiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW4gaXQgZmlyc3QgbW91bnRzIGlmIGBpbmAgaXMgYWxzbyBgdHJ1ZWAuXG4gICAqIFNldCB0aGlzIHRvIGBmYWxzZWAgdG8gZGlzYWJsZSB0aGlzIGJlaGF2aW9yLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb24uXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSBlYXNpbmcgb3IgYSBvYmplY3QgY29udGFpbmluZyBlbnRlciBhbmQgZXhpdCB2YWx1ZXMuXG4gICAqL1xuICBlYXNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhpdDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluLlxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKlxuICAgKiBTZXQgdG8gJ2F1dG8nIHRvIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHRyYW5zaXRpb24gdGltZSBiYXNlZCBvbiBoZWlnaHQuXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuR3Jvdy5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCBHcm93OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCBIVE1MRWxlbWVudFR5cGUsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3NldFJlZiBhcyBzZXRSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xufVxuLyoqXG4gKiBQb3J0YWxzIHByb3ZpZGUgYSBmaXJzdC1jbGFzcyB3YXkgdG8gcmVuZGVyIGNoaWxkcmVuIGludG8gYSBET00gbm9kZVxuICogdGhhdCBleGlzdHMgb3V0c2lkZSB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqL1xuXG5cbmNvbnN0IFBvcnRhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcnRhbChwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgW21vdW50Tm9kZSwgc2V0TW91bnROb2RlXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gY2hpbGRyZW4ucmVmIDogbnVsbCwgcmVmKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0TW91bnROb2RlKGdldENvbnRhaW5lcihjb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHkpO1xuICAgIH1cbiAgfSwgW2NvbnRhaW5lciwgZGlzYWJsZVBvcnRhbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1vdW50Tm9kZSAmJiAhZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0UmVmKHJlZiwgbW91bnROb2RlKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHNldFJlZihyZWYsIG51bGwpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbcmVmLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcblxuICBpZiAoZGlzYWJsZVBvcnRhbCkge1xuICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiBtb3VudE5vZGUgPyAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBtb3VudE5vZGUpIDogbW91bnROb2RlO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3J0YWwucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjaGlsZHJlbiB0byByZW5kZXIgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIFRoZSBgY2hpbGRyZW5gIHdpbGwgYmUgdW5kZXIgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFBvcnRhbFsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChQb3J0YWwucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsImltcG9ydCB7IHVuc3RhYmxlX293bmVyV2luZG93IGFzIG93bmVyV2luZG93LCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQsIHVuc3RhYmxlX2dldFNjcm9sbGJhclNpemUgYXMgZ2V0U2Nyb2xsYmFyU2l6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuXG4vLyBJcyBhIHZlcnRpY2FsIHNjcm9sbGJhciBkaXNwbGF5ZWQ/XG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KGNvbnRhaW5lcik7XG5cbiAgaWYgKGRvYy5ib2R5ID09PSBjb250YWluZXIpIHtcbiAgICByZXR1cm4gb3duZXJXaW5kb3coY29udGFpbmVyKS5pbm5lcldpZHRoID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIHJldHVybiBjb250YWluZXIuc2Nyb2xsSGVpZ2h0ID4gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFyaWFIaWRkZW4oZWxlbWVudCwgc2hvdykge1xuICBpZiAoc2hvdykge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gIH0gZWxzZSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGFkZGluZ1JpZ2h0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHBhcnNlSW50KG93bmVyV2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucGFkZGluZ1JpZ2h0LCAxMCkgfHwgMDtcbn1cblxuZnVuY3Rpb24gYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnRFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgZWxlbWVudHNUb0V4Y2x1ZGUgPSBbXSwgc2hvdykge1xuICBjb25zdCBibGFja2xpc3QgPSBbbW91bnRFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgLi4uZWxlbWVudHNUb0V4Y2x1ZGVdO1xuICBjb25zdCBibGFja2xpc3RUYWdOYW1lcyA9IFsnVEVNUExBVEUnLCAnU0NSSVBUJywgJ1NUWUxFJ107XG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGVsZW1lbnQgPT4ge1xuICAgIGlmIChibGFja2xpc3QuaW5kZXhPZihlbGVtZW50KSA9PT0gLTEgJiYgYmxhY2tsaXN0VGFnTmFtZXMuaW5kZXhPZihlbGVtZW50LnRhZ05hbWUpID09PSAtMSkge1xuICAgICAgYXJpYUhpZGRlbihlbGVtZW50LCBzaG93KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihpdGVtcywgY2FsbGJhY2spIHtcbiAgbGV0IGlkeCA9IC0xO1xuICBpdGVtcy5zb21lKChpdGVtLCBpbmRleCkgPT4ge1xuICAgIGlmIChjYWxsYmFjayhpdGVtKSkge1xuICAgICAgaWR4ID0gaW5kZXg7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpIHtcbiAgY29uc3QgcmVzdG9yZVN0eWxlID0gW107XG4gIGNvbnN0IGNvbnRhaW5lciA9IGNvbnRhaW5lckluZm8uY29udGFpbmVyO1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZVNjcm9sbExvY2spIHtcbiAgICBpZiAoaXNPdmVyZmxvd2luZyhjb250YWluZXIpKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBzaXplIGJlZm9yZSBhcHBseWluZyBvdmVyZmxvdyBoaWRkZW4gdG8gYXZvaWQgYW55IHNjcm9sbCBqdW1wcy5cbiAgICAgIGNvbnN0IHNjcm9sbGJhclNpemUgPSBnZXRTY3JvbGxiYXJTaXplKG93bmVyRG9jdW1lbnQoY29udGFpbmVyKSk7XG4gICAgICByZXN0b3JlU3R5bGUucHVzaCh7XG4gICAgICAgIHZhbHVlOiBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0LFxuICAgICAgICBwcm9wZXJ0eTogJ3BhZGRpbmctcmlnaHQnLFxuICAgICAgICBlbDogY29udGFpbmVyXG4gICAgICB9KTsgLy8gVXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nIHRvIGFkZCBvdXIgc2Nyb2xsYmFyIHdpZHRoLlxuXG4gICAgICBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7Z2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplfXB4YDsgLy8gLm11aS1maXhlZCBpcyBhIGdsb2JhbCBoZWxwZXIuXG5cbiAgICAgIGNvbnN0IGZpeGVkRWxlbWVudHMgPSBvd25lckRvY3VtZW50KGNvbnRhaW5lcikucXVlcnlTZWxlY3RvckFsbCgnLm11aS1maXhlZCcpO1xuICAgICAgW10uZm9yRWFjaC5jYWxsKGZpeGVkRWxlbWVudHMsIGVsZW1lbnQgPT4ge1xuICAgICAgICByZXN0b3JlU3R5bGUucHVzaCh7XG4gICAgICAgICAgdmFsdWU6IGVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0LFxuICAgICAgICAgIHByb3BlcnR5OiAncGFkZGluZy1yaWdodCcsXG4gICAgICAgICAgZWw6IGVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7Z2V0UGFkZGluZ1JpZ2h0KGVsZW1lbnQpICsgc2Nyb2xsYmFyU2l6ZX1weGA7XG4gICAgICB9KTtcbiAgICB9IC8vIEltcHJvdmUgR2F0c2J5IHN1cHBvcnRcbiAgICAvLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9mb3JjZS12ZXJ0aWNhbC1zY3JvbGxiYXIvXG5cblxuICAgIGNvbnN0IHBhcmVudCA9IGNvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGNvbnRhaW5lcik7XG4gICAgY29uc3Qgc2Nyb2xsQ29udGFpbmVyID0gKHBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGFyZW50Lm5vZGVOYW1lKSA9PT0gJ0hUTUwnICYmIGNvbnRhaW5lcldpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudCkub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyA/IHBhcmVudCA6IGNvbnRhaW5lcjsgLy8gQmxvY2sgdGhlIHNjcm9sbCBldmVuIGlmIG5vIHNjcm9sbGJhciBpcyB2aXNpYmxlIHRvIGFjY291bnQgZm9yIG1vYmlsZSBrZXlib2FyZFxuICAgIC8vIHNjcmVlbnNpemUgc2hyaW5rLlxuXG4gICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyxcbiAgICAgIHByb3BlcnR5OiAnb3ZlcmZsb3cnLFxuICAgICAgZWw6IHNjcm9sbENvbnRhaW5lclxuICAgIH0sIHtcbiAgICAgIHZhbHVlOiBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3dYLFxuICAgICAgcHJvcGVydHk6ICdvdmVyZmxvdy14JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9LCB7XG4gICAgICB2YWx1ZTogc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93WSxcbiAgICAgIHByb3BlcnR5OiAnb3ZlcmZsb3cteScsXG4gICAgICBlbDogc2Nyb2xsQ29udGFpbmVyXG4gICAgfSk7XG4gICAgc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gIH1cblxuICBjb25zdCByZXN0b3JlID0gKCkgPT4ge1xuICAgIHJlc3RvcmVTdHlsZS5mb3JFYWNoKCh7XG4gICAgICB2YWx1ZSxcbiAgICAgIGVsLFxuICAgICAgcHJvcGVydHlcbiAgICB9KSA9PiB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gcmVzdG9yZTtcbn1cblxuZnVuY3Rpb24gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKSB7XG4gIGNvbnN0IGhpZGRlblNpYmxpbmdzID0gW107XG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGVsZW1lbnQgPT4ge1xuICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnKSB7XG4gICAgICBoaWRkZW5TaWJsaW5ncy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoaWRkZW5TaWJsaW5ncztcbn1cblxuLyoqXG4gKiBAaWdub3JlIC0gZG8gbm90IGRvY3VtZW50LlxuICpcbiAqIFByb3BlciBzdGF0ZSBtYW5hZ2VtZW50IGZvciBjb250YWluZXJzIGFuZCB0aGUgbW9kYWxzIGluIHRob3NlIGNvbnRhaW5lcnMuXG4gKiBTaW1wbGlmaWVkLCBidXQgaW5zcGlyZWQgYnkgcmVhY3Qtb3ZlcmxheSdzIE1vZGFsTWFuYWdlciBjbGFzcy5cbiAqIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lcnMgPSB2b2lkIDA7XG4gICAgdGhpcy5tb2RhbHMgPSB2b2lkIDA7XG4gICAgdGhpcy5tb2RhbHMgPSBbXTtcbiAgICB0aGlzLmNvbnRhaW5lcnMgPSBbXTtcbiAgfVxuXG4gIGFkZChtb2RhbCwgY29udGFpbmVyKSB7XG4gICAgbGV0IG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcblxuICAgIGlmIChtb2RhbEluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgfVxuXG4gICAgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmxlbmd0aDtcbiAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTsgLy8gSWYgdGhlIG1vZGFsIHdlIGFyZSBhZGRpbmcgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuXG4gICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGlkZGVuU2libGluZ3MgPSBnZXRIaWRkZW5TaWJsaW5ncyhjb250YWluZXIpO1xuICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vZGFsLm1vdW50LCBtb2RhbC5tb2RhbFJlZiwgaGlkZGVuU2libGluZ3MsIHRydWUpO1xuICAgIGNvbnN0IGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBpdGVtID0+IGl0ZW0uY29udGFpbmVyID09PSBjb250YWluZXIpO1xuXG4gICAgaWYgKGNvbnRhaW5lckluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRhaW5lcnMucHVzaCh7XG4gICAgICBtb2RhbHM6IFttb2RhbF0sXG4gICAgICBjb250YWluZXIsXG4gICAgICByZXN0b3JlOiBudWxsLFxuICAgICAgaGlkZGVuU2libGluZ3NcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgfVxuXG4gIG1vdW50KG1vZGFsLCBwcm9wcykge1xuICAgIGNvbnN0IGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBpdGVtID0+IGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMSk7XG4gICAgY29uc3QgY29udGFpbmVySW5mbyA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF07XG5cbiAgICBpZiAoIWNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlID0gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmUobW9kYWwpIHtcbiAgICBjb25zdCBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG5cbiAgICBpZiAobW9kYWxJbmRleCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBpdGVtID0+IGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMSk7XG4gICAgY29uc3QgY29udGFpbmVySW5mbyA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF07XG4gICAgY29udGFpbmVySW5mby5tb2RhbHMuc3BsaWNlKGNvbnRhaW5lckluZm8ubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcbiAgICB0aGlzLm1vZGFscy5zcGxpY2UobW9kYWxJbmRleCwgMSk7IC8vIElmIHRoYXQgd2FzIHRoZSBsYXN0IG1vZGFsIGluIGEgY29udGFpbmVyLCBjbGVhbiB1cCB0aGUgY29udGFpbmVyLlxuXG4gICAgaWYgKGNvbnRhaW5lckluZm8ubW9kYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gVGhlIG1vZGFsIG1pZ2h0IGJlIGNsb3NlZCBiZWZvcmUgaXQgaGFkIHRoZSBjaGFuY2UgdG8gYmUgbW91bnRlZCBpbiB0aGUgRE9NLlxuICAgICAgaWYgKGNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICAgIC8vIEluIGNhc2UgdGhlIG1vZGFsIHdhc24ndCBpbiB0aGUgRE9NIHlldC5cbiAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXJJbmZvLmNvbnRhaW5lciwgbW9kYWwubW91bnQsIG1vZGFsLm1vZGFsUmVmLCBjb250YWluZXJJbmZvLmhpZGRlblNpYmxpbmdzLCBmYWxzZSk7XG4gICAgICB0aGlzLmNvbnRhaW5lcnMuc3BsaWNlKGNvbnRhaW5lckluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIHNjcmVlbiByZWFkZXIuXG4gICAgICBjb25zdCBuZXh0VG9wID0gY29udGFpbmVySW5mby5tb2RhbHNbY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoIC0gMV07IC8vIGFzIHNvb24gYXMgYSBtb2RhbCBpcyBhZGRpbmcgaXRzIG1vZGFsUmVmIGlzIHVuZGVmaW5lZC4gaXQgY2FuJ3Qgc2V0XG4gICAgICAvLyBhcmlhLWhpZGRlbiBiZWNhdXNlIHRoZSBkb20gZWxlbWVudCBkb2Vzbid0IGV4aXN0IGVpdGhlclxuICAgICAgLy8gd2hlbiBtb2RhbCB3YXMgdW5tb3VudGVkIGJlZm9yZSBtb2RhbFJlZiBnZXRzIG51bGxcblxuICAgICAgaWYgKG5leHRUb3AubW9kYWxSZWYpIHtcbiAgICAgICAgYXJpYUhpZGRlbihuZXh0VG9wLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gIH1cblxuICBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kYWxzLmxlbmd0aCA+IDAgJiYgdGhpcy5tb2RhbHNbdGhpcy5tb2RhbHMubGVuZ3RoIC0gMV0gPT09IG1vZGFsO1xuICB9XG5cbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24sIGNvbnNpc3RlbnQtcmV0dXJuLCBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS10YWJpbmRleCAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCwgZWxlbWVudEFjY2VwdGluZ1JlZiwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQgfSBmcm9tICdAbXVpL3V0aWxzJzsgLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZvY3VzLXRyYXAvdGFiYmFibGVcblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IGNhbmRpZGF0ZXNTZWxlY3RvciA9IFsnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJywgJ2FbaHJlZl0nLCAnYnV0dG9uJywgJ1t0YWJpbmRleF0nLCAnYXVkaW9bY29udHJvbHNdJywgJ3ZpZGVvW2NvbnRyb2xzXScsICdbY29udGVudGVkaXRhYmxlXTpub3QoW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdKSddLmpvaW4oJywnKTtcblxuZnVuY3Rpb24gZ2V0VGFiSW5kZXgobm9kZSkge1xuICBjb25zdCB0YWJpbmRleEF0dHIgPSBwYXJzZUludChub2RlLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSwgMTApO1xuXG4gIGlmICghTnVtYmVyLmlzTmFOKHRhYmluZGV4QXR0cikpIHtcbiAgICByZXR1cm4gdGFiaW5kZXhBdHRyO1xuICB9IC8vIEJyb3dzZXJzIGRvIG5vdCByZXR1cm4gYHRhYkluZGV4YCBjb3JyZWN0bHkgZm9yIGNvbnRlbnRFZGl0YWJsZSBub2RlcztcbiAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjYxMTA4JnE9Y29udGVudGVkaXRhYmxlJTIwdGFiaW5kZXgmY2FuPTJcbiAgLy8gc28gaWYgdGhleSBkb24ndCBoYXZlIGEgdGFiaW5kZXggYXR0cmlidXRlIHNwZWNpZmljYWxseSBzZXQsIGFzc3VtZSBpdCdzIDAuXG4gIC8vIGluIENocm9tZSwgPGRldGFpbHMvPiwgPGF1ZGlvIGNvbnRyb2xzLz4gYW5kIDx2aWRlbyBjb250cm9scy8+IGVsZW1lbnRzIGdldCBhIGRlZmF1bHRcbiAgLy8gIGB0YWJJbmRleGAgb2YgLTEgd2hlbiB0aGUgJ3RhYmluZGV4JyBhdHRyaWJ1dGUgaXNuJ3Qgc3BlY2lmaWVkIGluIHRoZSBET00sXG4gIC8vICB5ZXQgdGhleSBhcmUgc3RpbGwgcGFydCBvZiB0aGUgcmVndWxhciB0YWIgb3JkZXI7IGluIEZGLCB0aGV5IGdldCBhIGRlZmF1bHRcbiAgLy8gIGB0YWJJbmRleGAgb2YgMDsgc2luY2UgQ2hyb21lIHN0aWxsIHB1dHMgdGhvc2UgZWxlbWVudHMgaW4gdGhlIHJlZ3VsYXIgdGFiXG4gIC8vICBvcmRlciwgY29uc2lkZXIgdGhlaXIgdGFiIGluZGV4IHRvIGJlIDAuXG5cblxuICBpZiAobm9kZS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyB8fCAobm9kZS5ub2RlTmFtZSA9PT0gJ0FVRElPJyB8fCBub2RlLm5vZGVOYW1lID09PSAnVklERU8nIHx8IG5vZGUubm9kZU5hbWUgPT09ICdERVRBSUxTJykgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykgPT09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBub2RlLnRhYkluZGV4O1xufVxuXG5mdW5jdGlvbiBpc05vblRhYmJhYmxlUmFkaW8obm9kZSkge1xuICBpZiAobm9kZS50YWdOYW1lICE9PSAnSU5QVVQnIHx8IG5vZGUudHlwZSAhPT0gJ3JhZGlvJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghbm9kZS5uYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgZ2V0UmFkaW8gPSBzZWxlY3RvciA9PiBub2RlLm93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihgaW5wdXRbdHlwZT1cInJhZGlvXCJdJHtzZWxlY3Rvcn1gKTtcblxuICBsZXQgcm92aW5nID0gZ2V0UmFkaW8oYFtuYW1lPVwiJHtub2RlLm5hbWV9XCJdOmNoZWNrZWRgKTtcblxuICBpZiAoIXJvdmluZykge1xuICAgIHJvdmluZyA9IGdldFJhZGlvKGBbbmFtZT1cIiR7bm9kZS5uYW1lfVwiXWApO1xuICB9XG5cbiAgcmV0dXJuIHJvdmluZyAhPT0gbm9kZTtcbn1cblxuZnVuY3Rpb24gaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZShub2RlKSB7XG4gIGlmIChub2RlLmRpc2FibGVkIHx8IG5vZGUudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBub2RlLnR5cGUgPT09ICdoaWRkZW4nIHx8IGlzTm9uVGFiYmFibGVSYWRpbyhub2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0R2V0VGFiYmFibGUocm9vdCkge1xuICBjb25zdCByZWd1bGFyVGFiTm9kZXMgPSBbXTtcbiAgY29uc3Qgb3JkZXJlZFRhYk5vZGVzID0gW107XG4gIEFycmF5LmZyb20ocm9vdC5xdWVyeVNlbGVjdG9yQWxsKGNhbmRpZGF0ZXNTZWxlY3RvcikpLmZvckVhY2goKG5vZGUsIGkpID0+IHtcbiAgICBjb25zdCBub2RlVGFiSW5kZXggPSBnZXRUYWJJbmRleChub2RlKTtcblxuICAgIGlmIChub2RlVGFiSW5kZXggPT09IC0xIHx8ICFpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG5vZGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGVUYWJJbmRleCA9PT0gMCkge1xuICAgICAgcmVndWxhclRhYk5vZGVzLnB1c2gobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yZGVyZWRUYWJOb2Rlcy5wdXNoKHtcbiAgICAgICAgZG9jdW1lbnRPcmRlcjogaSxcbiAgICAgICAgdGFiSW5kZXg6IG5vZGVUYWJJbmRleCxcbiAgICAgICAgbm9kZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9yZGVyZWRUYWJOb2Rlcy5zb3J0KChhLCBiKSA9PiBhLnRhYkluZGV4ID09PSBiLnRhYkluZGV4ID8gYS5kb2N1bWVudE9yZGVyIC0gYi5kb2N1bWVudE9yZGVyIDogYS50YWJJbmRleCAtIGIudGFiSW5kZXgpLm1hcChhID0+IGEubm9kZSkuY29uY2F0KHJlZ3VsYXJUYWJOb2Rlcyk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRJc0VuYWJsZWQoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBVdGlsaXR5IGNvbXBvbmVudCB0aGF0IGxvY2tzIGZvY3VzIGluc2lkZSB0aGUgY29tcG9uZW50LlxuICovXG5cblxuZnVuY3Rpb24gVW5zdGFibGVfVHJhcEZvY3VzKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBmYWxzZSxcbiAgICBnZXRUYWJiYWJsZSA9IGRlZmF1bHRHZXRUYWJiYWJsZSxcbiAgICBpc0VuYWJsZWQgPSBkZWZhdWx0SXNFbmFibGVkLFxuICAgIG9wZW5cbiAgfSA9IHByb3BzO1xuICBjb25zdCBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IHNlbnRpbmVsU3RhcnQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHNlbnRpbmVsRW5kID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBub2RlVG9SZXN0b3JlID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCByZWFjdEZvY3VzRXZlbnRUYXJnZXQgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgdmFyaWFibGUgaXMgdXNlZnVsIHdoZW4gZGlzYWJsZUF1dG9Gb2N1cyBpcyB0cnVlLlxuICAvLyBJdCB3YWl0cyBmb3IgdGhlIGFjdGl2ZSBlbGVtZW50IHRvIG1vdmUgaW50byB0aGUgY29tcG9uZW50IHRvIGFjdGl2YXRlLlxuXG4gIGNvbnN0IGFjdGl2YXRlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IHJvb3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCByb290UmVmKTtcbiAgY29uc3QgbGFzdEtleWRvd24gPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gV2UgbWlnaHQgcmVuZGVyIGFuIGVtcHR5IGNoaWxkLlxuICAgIGlmICghb3BlbiB8fCAhcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYWN0aXZhdGVkLmN1cnJlbnQgPSAhZGlzYWJsZUF1dG9Gb2N1cztcbiAgfSwgW2Rpc2FibGVBdXRvRm9jdXMsIG9wZW5dKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBXZSBtaWdodCByZW5kZXIgYW4gZW1wdHkgY2hpbGQuXG4gICAgaWYgKCFvcGVuIHx8ICFyb290UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7XG5cbiAgICBpZiAoIXJvb3RSZWYuY3VycmVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGlmICghcm9vdFJlZi5jdXJyZW50Lmhhc0F0dHJpYnV0ZSgndGFiSW5kZXgnKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRoZSBtb2RhbCBjb250ZW50IG5vZGUgZG9lcyBub3QgYWNjZXB0IGZvY3VzLicsICdGb3IgdGhlIGJlbmVmaXQgb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgJyArICd0aGUgdGFiSW5kZXggb2YgdGhlIG5vZGUgaXMgYmVpbmcgc2V0IHRvIFwiLTFcIi4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICByb290UmVmLmN1cnJlbnQuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2YXRlZC5jdXJyZW50KSB7XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyByZXN0b3JlTGFzdEZvY3VzKClcbiAgICAgIGlmICghZGlzYWJsZVJlc3RvcmVGb2N1cykge1xuICAgICAgICAvLyBJbiBJRTExIGl0IGlzIHBvc3NpYmxlIGZvciBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHRvIGJlIG51bGwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIG5vZGVUb1Jlc3RvcmUuY3VycmVudCBiZWluZyBudWxsLlxuICAgICAgICAvLyBOb3QgYWxsIGVsZW1lbnRzIGluIElFMTEgaGF2ZSBhIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgLy8gT25jZSBJRTExIHN1cHBvcnQgaXMgZHJvcHBlZCB0aGUgZm9jdXMoKSBjYWxsIGNhbiBiZSB1bmNvbmRpdGlvbmFsLlxuICAgICAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ICYmIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cykge1xuICAgICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH07IC8vIE1pc3NpbmcgYGRpc2FibGVSZXN0b3JlRm9jdXNgIHdoaWNoIGlzIGZpbmUuXG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBjaGFuZ2luZyB0aGF0IHByb3Agb24gYW4gb3BlbiBUcmFwRm9jdXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtvcGVuXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gV2UgbWlnaHQgcmVuZGVyIGFuIGVtcHR5IGNoaWxkLlxuICAgIGlmICghb3BlbiB8fCAhcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChyb290UmVmLmN1cnJlbnQpO1xuXG4gICAgY29uc3QgY29udGFpbiA9IG5hdGl2ZUV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY3VycmVudDogcm9vdEVsZW1lbnRcbiAgICAgIH0gPSByb290UmVmOyAvLyBDbGVhbnVwIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQgbGF6aWx5IGluIFJlYWN0IDE3LlxuICAgICAgLy8gQ29udGFpbiBjYW4gYmUgY2FsbGVkIGJldHdlZW4gdGhlIGNvbXBvbmVudCBiZWluZyB1bm1vdW50ZWQgYW5kIGl0cyBjbGVhbnVwIGZ1bmN0aW9uIGJlaW5nIHJ1bi5cblxuICAgICAgaWYgKHJvb3RFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkb2MuaGFzRm9jdXMoKSB8fCBkaXNhYmxlRW5mb3JjZUZvY3VzIHx8ICFpc0VuYWJsZWQoKSB8fCBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQpIHtcbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb290RWxlbWVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgLy8gaWYgdGhlIGZvY3VzIGV2ZW50IGlzIG5vdCBjb21pbmcgZnJvbSBpbnNpZGUgdGhlIGNoaWxkcmVuJ3MgcmVhY3QgdHJlZSwgcmVzZXQgdGhlIHJlZnNcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50ICYmIHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50ICE9PSBuYXRpdmVFdmVudC50YXJnZXQgfHwgZG9jLmFjdGl2ZUVsZW1lbnQgIT09IHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50KSB7XG4gICAgICAgICAgcmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhY3RpdmF0ZWQuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0YWJiYWJsZSA9IFtdO1xuXG4gICAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCA9PT0gc2VudGluZWxTdGFydC5jdXJyZW50IHx8IGRvYy5hY3RpdmVFbGVtZW50ID09PSBzZW50aW5lbEVuZC5jdXJyZW50KSB7XG4gICAgICAgICAgdGFiYmFibGUgPSBnZXRUYWJiYWJsZShyb290UmVmLmN1cnJlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhYmJhYmxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgX2xhc3RLZXlkb3duJGN1cnJlbnQsIF9sYXN0S2V5ZG93biRjdXJyZW50MjtcblxuICAgICAgICAgIGNvbnN0IGlzU2hpZnRUYWIgPSBCb29sZWFuKCgoX2xhc3RLZXlkb3duJGN1cnJlbnQgPSBsYXN0S2V5ZG93bi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2xhc3RLZXlkb3duJGN1cnJlbnQuc2hpZnRLZXkpICYmICgoX2xhc3RLZXlkb3duJGN1cnJlbnQyID0gbGFzdEtleWRvd24uY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sYXN0S2V5ZG93biRjdXJyZW50Mi5rZXkpID09PSAnVGFiJyk7XG4gICAgICAgICAgY29uc3QgZm9jdXNOZXh0ID0gdGFiYmFibGVbMF07XG4gICAgICAgICAgY29uc3QgZm9jdXNQcmV2aW91cyA9IHRhYmJhYmxlW3RhYmJhYmxlLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgaWYgKGlzU2hpZnRUYWIpIHtcbiAgICAgICAgICAgIGZvY3VzUHJldmlvdXMuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9jdXNOZXh0LmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvb3RFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgbG9vcEZvY3VzID0gbmF0aXZlRXZlbnQgPT4ge1xuICAgICAgbGFzdEtleWRvd24uY3VycmVudCA9IG5hdGl2ZUV2ZW50O1xuXG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgbmF0aXZlRXZlbnQua2V5ICE9PSAnVGFiJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgbmV4dCB0YWIgc3RhcnRzIGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuICAgICAgLy8gZG9jLmFjdGl2ZUVsZW1lbnQgcmVmZXJlcyB0byB0aGUgb3JpZ2luLlxuXG5cbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCA9PT0gcm9vdFJlZi5jdXJyZW50ICYmIG5hdGl2ZUV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gaWdub3JlIHRoZSBuZXh0IGNvbnRhaW4gYXNcbiAgICAgICAgLy8gaXQgd2lsbCB0cnkgdG8gbW92ZSB0aGUgZm9jdXMgYmFjayB0byB0aGUgcm9vdFJlZiBlbGVtZW50LlxuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBzZW50aW5lbEVuZC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgY29udGFpbik7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpOyAvLyBXaXRoIEVkZ2UsIFNhZmFyaSBhbmQgRmlyZWZveCwgbm8gZm9jdXMgcmVsYXRlZCBldmVudHMgYXJlIGZpcmVkIHdoZW4gdGhlIGZvY3VzZWQgYXJlYSBzdG9wcyBiZWluZyBhIGZvY3VzZWQgYXJlYS5cbiAgICAvLyBlLmcuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU1OTU2MS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBjYW4gbG9vayBpZiB0aGUgYWN0aXZlIGVsZW1lbnQgd2FzIHJlc3RvcmVkIG9uIHRoZSBCT0RZIGVsZW1lbnQuXG4gICAgLy9cbiAgICAvLyBUaGUgd2hhdHdnIHNwZWMgZGVmaW5lcyBob3cgdGhlIGJyb3dzZXIgc2hvdWxkIGJlaGF2ZSBidXQgZG9lcyBub3QgZXhwbGljaXRseSBtZW50aW9uIGFueSBldmVudHM6XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNmb2N1cy1maXh1cC1ydWxlLlxuXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGNvbnRhaW4oKTtcbiAgICAgIH1cbiAgICB9LCA1MCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjb250YWluKTtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgbG9vcEZvY3VzLCB0cnVlKTtcbiAgICB9O1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgZGlzYWJsZUVuZm9yY2VGb2N1cywgZGlzYWJsZVJlc3RvcmVGb2N1cywgaXNFbmFibGVkLCBvcGVuLCBnZXRUYWJiYWJsZV0pO1xuXG4gIGNvbnN0IG9uRm9jdXMgPSBldmVudCA9PiB7XG4gICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9IHRydWU7XG4gICAgcmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQgPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgY2hpbGRyZW5Qcm9wc0hhbmRsZXIgPSBjaGlsZHJlbi5wcm9wcy5vbkZvY3VzO1xuXG4gICAgaWYgKGNoaWxkcmVuUHJvcHNIYW5kbGVyKSB7XG4gICAgICBjaGlsZHJlblByb3BzSGFuZGxlcihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUZvY3VzU2VudGluZWwgPSBldmVudCA9PiB7XG4gICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICB9XG5cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9IHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goXCJkaXZcIiwge1xuICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1NlbnRpbmVsLFxuICAgICAgcmVmOiBzZW50aW5lbFN0YXJ0LFxuICAgICAgXCJkYXRhLXRlc3RcIjogXCJzZW50aW5lbFN0YXJ0XCJcbiAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICBvbkZvY3VzXG4gICAgfSksIC8qI19fUFVSRV9fKi9fanN4KFwiZGl2XCIsIHtcbiAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgb25Gb2N1czogaGFuZGxlRm9jdXNTZW50aW5lbCxcbiAgICAgIHJlZjogc2VudGluZWxFbmQsXG4gICAgICBcImRhdGEtdGVzdFwiOiBcInNlbnRpbmVsRW5kXCJcbiAgICB9KV1cbiAgfSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVuc3RhYmxlX1RyYXBGb2N1cy5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRyYXAgZm9jdXMgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IHRyYXAgZm9jdXMgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgZGlzYWJsZUF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIHRyYXAgZm9jdXMgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhcCBmb2N1cyB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgdHJhcCBmb2N1cyB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgdHJhcCBmb2N1cyBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFwIGZvY3VzIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiB0cmFwIGZvY3VzIGlzIGhpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIG9yZGVyZWQgdGFiYmFibGUgbm9kZXMgKGkuZS4gaW4gdGFiIG9yZGVyKSB3aXRoaW4gdGhlIHJvb3QuXG4gICAqIEZvciBpbnN0YW5jZSwgeW91IGNhbiBwcm92aWRlIHRoZSBcInRhYmJhYmxlXCIgbnBtIGRlcGVuZGVuY3kuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3RcbiAgICovXG4gIGdldFRhYmJhYmxlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGV4dGVuZHMgdGhlIGBvcGVuYCBwcm9wLlxuICAgKiBJdCBhbGxvd3MgdG8gdG9nZ2xlIHRoZSBvcGVuIHN0YXRlIHdpdGhvdXQgaGF2aW5nIHRvIHdhaXQgZm9yIGEgcmVyZW5kZXIgd2hlbiBjaGFuZ2luZyB0aGUgYG9wZW5gIHByb3AuXG4gICAqIFRoaXMgcHJvcCBzaG91bGQgYmUgbWVtb2l6ZWQuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHRvIHN1cHBvcnQgbXVsdGlwbGUgdHJhcCBmb2N1cyBtb3VudGVkIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAqIEBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRJc0VuYWJsZWQoKSB7XG4gICAqICAgcmV0dXJuIHRydWU7XG4gICAqIH1cbiAgICovXG4gIGlzRW5hYmxlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZm9jdXMgaXMgbG9ja2VkLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFVuc3RhYmxlX1RyYXBGb2N1c1sncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChVbnN0YWJsZV9UcmFwRm9jdXMucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5zdGFibGVfVHJhcEZvY3VzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RhbFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTW9kYWwnLCBzbG90KTtcbn1cbmNvbnN0IG1vZGFsVW5zdHlsZWRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTW9kYWwnLCBbJ3Jvb3QnLCAnaGlkZGVuJ10pO1xuZXhwb3J0IGRlZmF1bHQgbW9kYWxVbnN0eWxlZENsYXNzZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIkJhY2tkcm9wQ29tcG9uZW50XCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNsb3NlQWZ0ZXJUcmFuc2l0aW9uXCIsIFwiY29tcG9uZW50XCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImNvbnRhaW5lclwiLCBcImRpc2FibGVBdXRvRm9jdXNcIiwgXCJkaXNhYmxlRW5mb3JjZUZvY3VzXCIsIFwiZGlzYWJsZUVzY2FwZUtleURvd25cIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwiZGlzYWJsZVJlc3RvcmVGb2N1c1wiLCBcImRpc2FibGVTY3JvbGxMb2NrXCIsIFwiaGlkZUJhY2tkcm9wXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtYW5hZ2VyXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uS2V5RG93blwiLCBcIm9wZW5cIiwgXCJ0aGVtZVwiLCBcIm9uVHJhbnNpdGlvbkVudGVyXCIsIFwib25UcmFuc2l0aW9uRXhpdGVkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiwgSFRNTEVsZW1lbnRUeXBlLCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGFzIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiwgdW5zdGFibGVfdXNlRXZlbnRDYWxsYmFjayBhcyB1c2VFdmVudENhbGxiYWNrIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnLi4vY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGlzSG9zdENvbXBvbmVudCBmcm9tICcuLi91dGlscy9pc0hvc3RDb21wb25lbnQnO1xuaW1wb3J0IFBvcnRhbCBmcm9tICcuLi9Qb3J0YWwnO1xuaW1wb3J0IE1vZGFsTWFuYWdlciwgeyBhcmlhSGlkZGVuIH0gZnJvbSAnLi9Nb2RhbE1hbmFnZXInO1xuaW1wb3J0IFRyYXBGb2N1cyBmcm9tICcuLi9VbnN0YWJsZV9UcmFwRm9jdXMnO1xuaW1wb3J0IHsgZ2V0TW9kYWxVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL21vZGFsVW5zdHlsZWRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcGVuLFxuICAgIGV4aXRlZCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhb3BlbiAmJiBleGl0ZWQgJiYgJ2hpZGRlbiddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TW9kYWxVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbiA/IHByb3BzLmNoaWxkcmVuLnByb3BzLmhhc093blByb3BlcnR5KCdpbicpIDogZmFsc2U7XG59IC8vIEEgbW9kYWwgbWFuYWdlciB1c2VkIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHN0YXRlIG9mIG9wZW4gTW9kYWxzLlxuLy8gTW9kYWxzIGRvbid0IG9wZW4gb24gdGhlIHNlcnZlciBzbyB0aGlzIHdvbid0IGNvbmZsaWN0IHdpdGggY29uY3VycmVudCByZXF1ZXN0cy5cblxuXG5jb25zdCBkZWZhdWx0TWFuYWdlciA9IG5ldyBNb2RhbE1hbmFnZXIoKTtcbi8qKlxuICogTW9kYWwgaXMgYSBsb3dlci1sZXZlbCBjb25zdHJ1Y3QgdGhhdCBpcyBsZXZlcmFnZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqIC0gW0RpYWxvZ10oL2FwaS9kaWFsb2cvKVxuICogLSBbRHJhd2VyXSgvYXBpL2RyYXdlci8pXG4gKiAtIFtNZW51XSgvYXBpL21lbnUvKVxuICogLSBbUG9wb3Zlcl0oL2FwaS9wb3BvdmVyLylcbiAqXG4gKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgbW9kYWwgZGlhbG9nLCB5b3UgcHJvYmFibHkgd2FudCB0byB1c2UgdGhlIFtEaWFsb2ddKC9hcGkvZGlhbG9nLykgY29tcG9uZW50XG4gKiByYXRoZXIgdGhhbiBkaXJlY3RseSB1c2luZyBNb2RhbC5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBzaGFyZXMgbWFueSBjb25jZXB0cyB3aXRoIFtyZWFjdC1vdmVybGF5c10oaHR0cHM6Ly9yZWFjdC1ib290c3RyYXAuZ2l0aHViLmlvL3JlYWN0LW92ZXJsYXlzLyNtb2RhbHMpLlxuICovXG5cbmNvbnN0IE1vZGFsVW5zdHlsZWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNb2RhbFVuc3R5bGVkKHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgIEJhY2tkcm9wQ29tcG9uZW50LFxuICAgIEJhY2tkcm9wUHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgY2xhc3NOYW1lLFxuICAgIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uID0gZmFsc2UsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gZmFsc2UsXG4gICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlU2Nyb2xsTG9jayA9IGZhbHNlLFxuICAgIGhpZGVCYWNrZHJvcCA9IGZhbHNlLFxuICAgIGtlZXBNb3VudGVkID0gZmFsc2UsXG4gICAgLy8gcHJpdmF0ZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgbWFuYWdlciA9IGRlZmF1bHRNYW5hZ2VyLFxuICAgIG9uQmFja2Ryb3BDbGljayxcbiAgICBvbkNsb3NlLFxuICAgIG9uS2V5RG93bixcbiAgICBvcGVuLFxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuICAgIHRoZW1lLFxuICAgIG9uVHJhbnNpdGlvbkVudGVyLFxuICAgIG9uVHJhbnNpdGlvbkV4aXRlZFxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgW2V4aXRlZCwgc2V0RXhpdGVkXSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBtb2RhbCA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIGNvbnN0IG1vdW50Tm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgbW9kYWxSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobW9kYWxSZWYsIHJlZik7XG4gIGNvbnN0IGhhc1RyYW5zaXRpb24gPSBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKTtcblxuICBjb25zdCBnZXREb2MgPSAoKSA9PiBvd25lckRvY3VtZW50KG1vdW50Tm9kZVJlZi5jdXJyZW50KTtcblxuICBjb25zdCBnZXRNb2RhbCA9ICgpID0+IHtcbiAgICBtb2RhbC5jdXJyZW50Lm1vZGFsUmVmID0gbW9kYWxSZWYuY3VycmVudDtcbiAgICBtb2RhbC5jdXJyZW50Lm1vdW50Tm9kZSA9IG1vdW50Tm9kZVJlZi5jdXJyZW50O1xuICAgIHJldHVybiBtb2RhbC5jdXJyZW50O1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU1vdW50ZWQgPSAoKSA9PiB7XG4gICAgbWFuYWdlci5tb3VudChnZXRNb2RhbCgpLCB7XG4gICAgICBkaXNhYmxlU2Nyb2xsTG9ja1xuICAgIH0pOyAvLyBGaXggYSBidWcgb24gQ2hyb21lIHdoZXJlIHRoZSBzY3JvbGwgaXNuJ3QgaW5pdGlhbGx5IDAuXG5cbiAgICBtb2RhbFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IDA7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlT3BlbiA9IHVzZUV2ZW50Q2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IHJlc29sdmVkQ29udGFpbmVyID0gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZ2V0RG9jKCkuYm9keTtcbiAgICBtYW5hZ2VyLmFkZChnZXRNb2RhbCgpLCByZXNvbHZlZENvbnRhaW5lcik7IC8vIFRoZSBlbGVtZW50IHdhcyBhbHJlYWR5IG1vdW50ZWQuXG5cbiAgICBpZiAobW9kYWxSZWYuY3VycmVudCkge1xuICAgICAgaGFuZGxlTW91bnRlZCgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGlzVG9wTW9kYWwgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBtYW5hZ2VyLmlzVG9wTW9kYWwoZ2V0TW9kYWwoKSksIFttYW5hZ2VyXSk7XG4gIGNvbnN0IGhhbmRsZVBvcnRhbFJlZiA9IHVzZUV2ZW50Q2FsbGJhY2sobm9kZSA9PiB7XG4gICAgbW91bnROb2RlUmVmLmN1cnJlbnQgPSBub2RlO1xuXG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9wZW4gJiYgaXNUb3BNb2RhbCgpKSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyaWFIaWRkZW4obW9kYWxSZWYuY3VycmVudCwgdHJ1ZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlQ2xvc2UgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgbWFuYWdlci5yZW1vdmUoZ2V0TW9kYWwoKSk7XG4gIH0sIFttYW5hZ2VyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZUNsb3NlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGhhbmRsZU9wZW4oKTtcbiAgICB9IGVsc2UgaWYgKCFoYXNUcmFuc2l0aW9uIHx8ICFjbG9zZUFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9XG4gIH0sIFtvcGVuLCBoYW5kbGVDbG9zZSwgaGFzVHJhbnNpdGlvbiwgY2xvc2VBZnRlclRyYW5zaXRpb24sIGhhbmRsZU9wZW5dKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb24sXG4gICAgZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgIGRpc2FibGVQb3J0YWwsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICBkaXNhYmxlU2Nyb2xsTG9jayxcbiAgICBleGl0ZWQsXG4gICAgaGlkZUJhY2tkcm9wLFxuICAgIGtlZXBNb3VudGVkXG4gIH0pO1xuXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcblxuICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghaGFzVHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBoYW5kbGVFbnRlciA9ICgpID0+IHtcbiAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuXG4gICAgaWYgKG9uVHJhbnNpdGlvbkVudGVyKSB7XG4gICAgICBvblRyYW5zaXRpb25FbnRlcigpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSAoKSA9PiB7XG4gICAgc2V0RXhpdGVkKHRydWUpO1xuXG4gICAgaWYgKG9uVHJhbnNpdGlvbkV4aXRlZCkge1xuICAgICAgb25UcmFuc2l0aW9uRXhpdGVkKCk7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVCYWNrZHJvcENsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25CYWNrZHJvcENsaWNrKSB7XG4gICAgICBvbkJhY2tkcm9wQ2xpY2soZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50LCAnYmFja2Ryb3BDbGljaycpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfSAvLyBUaGUgaGFuZGxlciBkb2Vzbid0IHRha2UgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCBpbnRvIGFjY291bnQ6XG4gICAgLy9cbiAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvcnMgbGlrZVxuICAgIC8vIGNsaWNraW5nIGEgY2hlY2tib3ggdG8gY2hlY2sgaXQsIGhpdHRpbmcgYSBidXR0b24gdG8gc3VibWl0IGEgZm9ybSxcbiAgICAvLyBhbmQgaGl0dGluZyBsZWZ0IGFycm93IHRvIG1vdmUgdGhlIGN1cnNvciBpbiBhIHRleHQgaW5wdXQgZXRjLlxuICAgIC8vIE9ubHkgc3BlY2lhbCBIVE1MIGVsZW1lbnRzIGhhdmUgdGhlc2UgZGVmYXVsdCBiZWhhdmlvcnMuXG5cblxuICAgIGlmIChldmVudC5rZXkgIT09ICdFc2NhcGUnIHx8ICFpc1RvcE1vZGFsKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRpc2FibGVFc2NhcGVLZXlEb3duKSB7XG4gICAgICAvLyBTd2FsbG93IHRoZSBldmVudCwgaW4gY2FzZSBzb21lb25lIGlzIGxpc3RlbmluZyBmb3IgdGhlIGVzY2FwZSBrZXkgb24gdGhlIGJvZHkuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2hpbGRQcm9wcyA9IHt9O1xuXG4gIGlmIChjaGlsZHJlbi5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2hpbGRQcm9wcy50YWJJbmRleCA9ICctMSc7XG4gIH0gLy8gSXQncyBhIFRyYW5zaXRpb24gbGlrZSBjb21wb25lbnRcblxuXG4gIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgY2hpbGRQcm9wcy5vbkVudGVyID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUVudGVyLCBjaGlsZHJlbi5wcm9wcy5vbkVudGVyKTtcbiAgICBjaGlsZFByb3BzLm9uRXhpdGVkID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUV4aXRlZCwgY2hpbGRyZW4ucHJvcHMub25FeGl0ZWQpO1xuICB9XG5cbiAgY29uc3QgUm9vdCA9IGNvbXBvbmVudHMuUm9vdCB8fCBjb21wb25lbnQ7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUG9ydGFsLCB7XG4gICAgcmVmOiBoYW5kbGVQb3J0YWxSZWYsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCJcbiAgICB9LCByb290UHJvcHMsICFpc0hvc3RDb21wb25lbnQoUm9vdCkgJiYge1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCByb290UHJvcHMub3duZXJTdGF0ZSksXG4gICAgICB0aGVtZVxuICAgIH0sIG90aGVyLCB7XG4gICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIHJvb3RQcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSksXG4gICAgICBjaGlsZHJlbjogWyFoaWRlQmFja2Ryb3AgJiYgQmFja2Ryb3BDb21wb25lbnQgPyAvKiNfX1BVUkVfXyovX2pzeChCYWNrZHJvcENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBvbkNsaWNrOiBoYW5kbGVCYWNrZHJvcENsaWNrXG4gICAgICB9LCBCYWNrZHJvcFByb3BzKSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeChUcmFwRm9jdXMsIHtcbiAgICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1czogZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICAgICAgZGlzYWJsZUF1dG9Gb2N1czogZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1czogZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICAgICAgaXNFbmFibGVkOiBpc1RvcE1vZGFsLFxuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcylcbiAgICAgIH0pXVxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTW9kYWxVbnN0eWxlZC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBiYWNrZHJvcCBjb21wb25lbnQuIFRoaXMgcHJvcCBlbmFibGVzIGN1c3RvbSBiYWNrZHJvcCByZW5kZXJpbmcuXG4gICAqL1xuICBCYWNrZHJvcENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEJhY2tkcm9wVW5zdHlsZWRgXSgvYXBpL2JhY2tkcm9wLXVuc3R5bGVkLykgZWxlbWVudC5cbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNb2RhbC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgTW9kYWwuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50IG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgbW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGl0dGluZyBlc2NhcGUgd2lsbCBub3QgZmlyZSB0aGUgYG9uQ2xvc2VgIGNhbGxiYWNrLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1vZGFsVW5zdHlsZWQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCYWNrZHJvcCcsIHNsb3QpO1xufVxuY29uc3QgYmFja2Ryb3BVbnN0eWxlZENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCYWNrZHJvcCcsIFsncm9vdCcsICdpbnZpc2libGUnXSk7XG5leHBvcnQgZGVmYXVsdCBiYWNrZHJvcFVuc3R5bGVkQ2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImludmlzaWJsZVwiLCBcImNvbXBvbmVudFwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJ0aGVtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICcuLi9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgaXNIb3N0Q29tcG9uZW50IGZyb20gJy4uL3V0aWxzL2lzSG9zdENvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXRCYWNrZHJvcFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYmFja2Ryb3BVbnN0eWxlZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgaW52aXNpYmxlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBpbnZpc2libGUgJiYgJ2ludmlzaWJsZSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgQmFja2Ryb3BVbnN0eWxlZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJhY2tkcm9wVW5zdHlsZWQocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1Byb3AsXG4gICAgY2xhc3NOYW1lLFxuICAgIGludmlzaWJsZSA9IGZhbHNlLFxuICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cbiAgICB0aGVtZVxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wLFxuICAgIGludmlzaWJsZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFJvb3QgPSBjb21wb25lbnRzLlJvb3QgfHwgY29tcG9uZW50O1xuICBjb25zdCByb290UHJvcHMgPSBjb21wb25lbnRzUHJvcHMucm9vdCB8fCB7fTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJvb3QsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWVcbiAgfSwgcm9vdFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KFJvb3QpICYmIHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLCByb290UHJvcHMub3duZXJTdGF0ZSksXG4gICAgdGhlbWVcbiAgfSwge1xuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgcm9vdFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJhY2tkcm9wVW5zdHlsZWQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIEJhY2tkcm9wLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWNrZHJvcC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBpbnZpc2libGUuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIGEgcG9wb3ZlciBvciBhIGN1c3RvbSBzZWxlY3QgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJhY2tkcm9wVW5zdHlsZWQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFkZEVuZExpc3RlbmVyXCIsIFwiYXBwZWFyXCIsIFwiY2hpbGRyZW5cIiwgXCJlYXNpbmdcIiwgXCJpblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB7IGVsZW1lbnRBY2NlcHRpbmdSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGR1cmF0aW9uIH0gZnJvbSAnLi4vc3R5bGVzL2NyZWF0ZVRyYW5zaXRpb25zJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMVxuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgb3BhY2l0eTogMVxuICB9XG59O1xuY29uc3QgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIEZhZGUgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbTW9kYWxdKC9jb21wb25lbnRzL21vZGFsLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG5jb25zdCBGYWRlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRmFkZShwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICBhcHBlYXIgPSB0cnVlLFxuICAgIGNoaWxkcmVuLFxuICAgIGVhc2luZyxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRW50ZXIsXG4gICAgb25FbnRlcmVkLFxuICAgIG9uRW50ZXJpbmcsXG4gICAgb25FeGl0LFxuICAgIG9uRXhpdGVkLFxuICAgIG9uRXhpdGluZyxcbiAgICBzdHlsZSxcbiAgICB0aW1lb3V0ID0gZGVmYXVsdFRpbWVvdXQsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID0gdHJ1ZTtcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgZm9yZWlnblJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCByZWYpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKG5vZGVSZWYsIGZvcmVpZ25SZWYpO1xuXG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiBtYXliZUlzQXBwZWFyaW5nID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7IC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuXG4gICAgICBpZiAobWF5YmVJc0FwcGVhcmluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSwgbWF5YmVJc0FwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUVudGVyaW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyaW5nKTtcbiAgY29uc3QgaGFuZGxlRW50ZXIgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIHJlZmxvdyhub2RlKTsgLy8gU28gdGhlIGFuaW1hdGlvbiBhbHdheXMgc3RhcnQgZnJvbSB0aGUgc3RhcnQuXG5cbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2VudGVyJ1xuICAgIH0pO1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcblxuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICBjb25zdCBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICBjb25zdCBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuXG4gIGNvbnN0IGhhbmRsZUFkZEVuZExpc3RlbmVyID0gbmV4dCA9PiB7XG4gICAgaWYgKGFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAvLyBPbGQgY2FsbCBzaWduYXR1cmUgYmVmb3JlIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwYCBpbXBsZW1lbnRlZCBgbm9kZVJlZmBcbiAgICAgIGFkZEVuZExpc3RlbmVyKG5vZGVSZWYuY3VycmVudCwgbmV4dCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiBhcHBlYXIsXG4gICAgaW46IGluUHJvcCxcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBoYW5kbGVBZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IChzdGF0ZSwgY2hpbGRQcm9wcykgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmFkZS5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nIERPTVxuICAgKiBub2RlIGFuZCBhIGRvbmUgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIE5vdGU6IFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSB0cmFuc2l0aW9uIHRpbWluZyBmdW5jdGlvbi5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIGVhc2luZyBvciBhIG9iamVjdCBjb250YWluaW5nIGVudGVyIGFuZCBleGl0IHZhbHVlcy5cbiAgICovXG4gIGVhc2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbnRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGl0OiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAqICAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlbixcbiAgICogfVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRmFkZTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiY2xhc3NOYW1lXCIsIFwiaW52aXNpYmxlXCIsIFwib3BlblwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgaXNIb3N0Q29tcG9uZW50IH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBCYWNrZHJvcFVuc3R5bGVkLCB7IGJhY2tkcm9wVW5zdHlsZWRDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL0JhY2tkcm9wVW5zdHlsZWQnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBGYWRlIGZyb20gJy4uL0ZhZGUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBiYWNrZHJvcENsYXNzZXMgPSBiYWNrZHJvcFVuc3R5bGVkQ2xhc3NlcztcblxuY29uc3QgZXh0ZW5kVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIHJldHVybiBjbGFzc2VzO1xufTtcblxuY29uc3QgQmFja2Ryb3BSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlCYWNrZHJvcCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmludmlzaWJsZSAmJiBzdHlsZXMuaW52aXNpYmxlXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC41KScsXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG59LCBvd25lclN0YXRlLmludmlzaWJsZSAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xufSkpO1xuY29uc3QgQmFja2Ryb3AgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCYWNrZHJvcChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9jb21wb25lbnRzUHJvcHMkcm9vdDtcblxuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCYWNrZHJvcCdcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICBjbGFzc05hbWUsXG4gICAgaW52aXNpYmxlID0gZmFsc2UsXG4gICAgb3BlbixcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gRmFkZVxuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGludmlzaWJsZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gZXh0ZW5kVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEJhY2tkcm9wVW5zdHlsZWQsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgaW52aXNpYmxlOiBpbnZpc2libGUsXG4gICAgICBjb21wb25lbnRzOiBfZXh0ZW5kcyh7XG4gICAgICAgIFJvb3Q6IEJhY2tkcm9wUm9vdFxuICAgICAgfSwgY29tcG9uZW50cyksXG4gICAgICBjb21wb25lbnRzUHJvcHM6IHtcbiAgICAgICAgcm9vdDogX2V4dGVuZHMoe30sIGNvbXBvbmVudHNQcm9wcy5yb290LCAoIWNvbXBvbmVudHMuUm9vdCB8fCAhaXNIb3N0Q29tcG9uZW50KGNvbXBvbmVudHMuUm9vdCkpICYmIHtcbiAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkcm9vdCA9IGNvbXBvbmVudHNQcm9wcy5yb290KSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHNQcm9wcyRyb290Lm93bmVyU3RhdGUpXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWNrZHJvcC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWNrZHJvcC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgQmFja2Ryb3AuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgaW52aXNpYmxlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB3aGVuIHJlbmRlcmluZyBhIHBvcG92ZXIgb3IgYSBjdXN0b20gc2VsZWN0IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJhY2tkcm9wOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJCYWNrZHJvcENvbXBvbmVudFwiLCBcImNsb3NlQWZ0ZXJUcmFuc2l0aW9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c1wiLCBcImRpc2FibGVFbmZvcmNlRm9jdXNcIiwgXCJkaXNhYmxlRXNjYXBlS2V5RG93blwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJkaXNhYmxlUmVzdG9yZUZvY3VzXCIsIFwiZGlzYWJsZVNjcm9sbExvY2tcIiwgXCJoaWRlQmFja2Ryb3BcIiwgXCJrZWVwTW91bnRlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiwgSFRNTEVsZW1lbnRUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgTW9kYWxVbnN0eWxlZCwgeyBtb2RhbFVuc3R5bGVkQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9Nb2RhbFVuc3R5bGVkJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQmFja2Ryb3AgZnJvbSAnLi4vQmFja2Ryb3AnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBtb2RhbENsYXNzZXMgPSBtb2RhbFVuc3R5bGVkQ2xhc3NlcztcblxuY29uc3QgZXh0ZW5kVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgcmV0dXJuIG93bmVyU3RhdGUuY2xhc3Nlcztcbn07XG5cbmNvbnN0IE1vZGFsUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpTW9kYWwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUub3BlbiAmJiBvd25lclN0YXRlLmV4aXRlZCAmJiBzdHlsZXMuaGlkZGVuXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHpJbmRleDogdGhlbWUuekluZGV4Lm1vZGFsLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDBcbn0sICFvd25lclN0YXRlLm9wZW4gJiYgb3duZXJTdGF0ZS5leGl0ZWQgJiYge1xuICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xufSkpO1xuY29uc3QgTW9kYWxCYWNrZHJvcCA9IHN0eWxlZChCYWNrZHJvcCwge1xuICBuYW1lOiAnTXVpTW9kYWwnLFxuICBzbG90OiAnQmFja2Ryb3AnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICByZXR1cm4gc3R5bGVzLmJhY2tkcm9wO1xuICB9XG59KSh7XG4gIHpJbmRleDogLTFcbn0pO1xuLyoqXG4gKiBNb2RhbCBpcyBhIGxvd2VyLWxldmVsIGNvbnN0cnVjdCB0aGF0IGlzIGxldmVyYWdlZCBieSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogLSBbRGlhbG9nXSgvYXBpL2RpYWxvZy8pXG4gKiAtIFtEcmF3ZXJdKC9hcGkvZHJhd2VyLylcbiAqIC0gW01lbnVdKC9hcGkvbWVudS8pXG4gKiAtIFtQb3BvdmVyXSgvYXBpL3BvcG92ZXIvKVxuICpcbiAqIElmIHlvdSBhcmUgY3JlYXRpbmcgYSBtb2RhbCBkaWFsb2csIHlvdSBwcm9iYWJseSB3YW50IHRvIHVzZSB0aGUgW0RpYWxvZ10oL2FwaS9kaWFsb2cvKSBjb21wb25lbnRcbiAqIHJhdGhlciB0aGFuIGRpcmVjdGx5IHVzaW5nIE1vZGFsLlxuICpcbiAqIFRoaXMgY29tcG9uZW50IHNoYXJlcyBtYW55IGNvbmNlcHRzIHdpdGggW3JlYWN0LW92ZXJsYXlzXShodHRwczovL3JlYWN0LWJvb3RzdHJhcC5naXRodWIuaW8vcmVhY3Qtb3ZlcmxheXMvI21vZGFscykuXG4gKi9cblxuY29uc3QgTW9kYWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNb2RhbChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9jb21wb25lbnRzUHJvcHMkcm9vdDtcblxuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIG5hbWU6ICdNdWlNb2RhbCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gTW9kYWxCYWNrZHJvcCxcbiAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IGZhbHNlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICBkaXNhYmxlQXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gZmFsc2UsXG4gICAgZGlzYWJsZVBvcnRhbCA9IGZhbHNlLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlU2Nyb2xsTG9jayA9IGZhbHNlLFxuICAgIGhpZGVCYWNrZHJvcCA9IGZhbHNlLFxuICAgIGtlZXBNb3VudGVkID0gZmFsc2VcbiAgfSA9IHByb3BzLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIGNvbnN0IFtleGl0ZWQsIHNldEV4aXRlZF0gPSBSZWFjdC51c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgY29tbW9uUHJvcHMgPSB7XG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb24sXG4gICAgZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgIGRpc2FibGVQb3J0YWwsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICBkaXNhYmxlU2Nyb2xsTG9jayxcbiAgICBoaWRlQmFja2Ryb3AsXG4gICAga2VlcE1vdW50ZWRcbiAgfTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCBjb21tb25Qcm9wcywge1xuICAgIGV4aXRlZFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gZXh0ZW5kVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChNb2RhbFVuc3R5bGVkLCBfZXh0ZW5kcyh7XG4gICAgY29tcG9uZW50czogX2V4dGVuZHMoe1xuICAgICAgUm9vdDogTW9kYWxSb290XG4gICAgfSwgY29tcG9uZW50cyksXG4gICAgY29tcG9uZW50c1Byb3BzOiB7XG4gICAgICByb290OiBfZXh0ZW5kcyh7fSwgY29tcG9uZW50c1Byb3BzLnJvb3QsICghY29tcG9uZW50cy5Sb290IHx8ICFpc0hvc3RDb21wb25lbnQoY29tcG9uZW50cy5Sb290KSkgJiYge1xuICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgKF9jb21wb25lbnRzUHJvcHMkcm9vdCA9IGNvbXBvbmVudHNQcm9wcy5yb290KSA9PSBudWxsID8gdm9pZCAwIDogX2NvbXBvbmVudHNQcm9wcyRyb290Lm93bmVyU3RhdGUpXG4gICAgICB9KVxuICAgIH0sXG4gICAgQmFja2Ryb3BDb21wb25lbnQ6IEJhY2tkcm9wQ29tcG9uZW50LFxuICAgIG9uVHJhbnNpdGlvbkVudGVyOiAoKSA9PiBzZXRFeGl0ZWQoZmFsc2UpLFxuICAgIG9uVHJhbnNpdGlvbkV4aXRlZDogKCkgPT4gc2V0RXhpdGVkKHRydWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1xuICB9LCBjb21tb25Qcm9wcywge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1vZGFsLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIGJhY2tkcm9wIGNvbXBvbmVudC4gVGhpcyBwcm9wIGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICogQGRlZmF1bHQgc3R5bGVkKEJhY2tkcm9wLCB7XG4gICAqICAgbmFtZTogJ011aU1vZGFsJyxcbiAgICogICBzbG90OiAnQmFja2Ryb3AnLFxuICAgKiAgIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgKiAgICAgcmV0dXJuIHN0eWxlcy5iYWNrZHJvcDtcbiAgICogICB9LFxuICAgKiB9KSh7XG4gICAqICAgekluZGV4OiAtMSxcbiAgICogfSlcbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgQmFja2Ryb3BgXSgvYXBpL2JhY2tkcm9wLykgZWxlbWVudC5cbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFdoZW4gc2V0IHRvIHRydWUgdGhlIE1vZGFsIHdhaXRzIHVudGlsIGEgbmVzdGVkIFRyYW5zaXRpb24gaXMgY29tcGxldGVkIGJlZm9yZSBjbG9zaW5nLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY2xvc2VBZnRlclRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNb2RhbC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgTW9kYWwuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcblxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50IG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIHBvcnRhbCBjaGlsZHJlbiBhcHBlbmRlZCB0byBpdC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgbW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGl0dGluZyBlc2NhcGUgd2lsbCBub3QgZmlyZSB0aGUgYG9uQ2xvc2VgIGNhbGxiYWNrLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVzY2FwZUtleURvd246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3AgY2FuIGJlIHVzZWZ1bCBpbiBTRU8gc2l0dWF0aW9uIG9yXG4gICAqIHdoZW4geW91IHdhbnQgdG8gbWF4aW1pemUgdGhlIHJlc3BvbnNpdmVuZXNzIG9mIHRoZSBNb2RhbC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGtlZXBNb3VudGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBvcG92ZXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVBvcG92ZXInLCBzbG90KTtcbn1cbmNvbnN0IHBvcG92ZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUG9wb3ZlcicsIFsncm9vdCcsICdwYXBlciddKTtcbmV4cG9ydCBkZWZhdWx0IHBvcG92ZXJDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkVudGVyaW5nXCJdLFxuICAgICAgX2V4Y2x1ZGVkMiA9IFtcImFjdGlvblwiLCBcImFuY2hvckVsXCIsIFwiYW5jaG9yT3JpZ2luXCIsIFwiYW5jaG9yUG9zaXRpb25cIiwgXCJhbmNob3JSZWZlcmVuY2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRhaW5lclwiLCBcImVsZXZhdGlvblwiLCBcIm1hcmdpblRocmVzaG9sZFwiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwidHJhbnNmb3JtT3JpZ2luXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzLCBpbnRlZ2VyUHJvcFR5cGUsIGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLCByZWZUeXBlLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgb3duZXJXaW5kb3cgZnJvbSAnLi4vdXRpbHMvb3duZXJXaW5kb3cnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgR3JvdyBmcm9tICcuLi9Hcm93JztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9Nb2RhbCc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IHsgZ2V0UG9wb3ZlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vcG9wb3ZlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRUb3AocmVjdCwgdmVydGljYWwpIHtcbiAgbGV0IG9mZnNldCA9IDA7XG5cbiAgaWYgKHR5cGVvZiB2ZXJ0aWNhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSB2ZXJ0aWNhbDtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodCAvIDI7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdib3R0b20nKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldExlZnQocmVjdCwgaG9yaXpvbnRhbCkge1xuICBsZXQgb2Zmc2V0ID0gMDtcblxuICBpZiAodHlwZW9mIGhvcml6b250YWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gaG9yaXpvbnRhbDtcbiAgfSBlbHNlIGlmIChob3Jpem9udGFsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGggLyAyO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdyaWdodCcpIHtcbiAgICBvZmZzZXQgPSByZWN0LndpZHRoO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKSB7XG4gIHJldHVybiBbdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbF0ubWFwKG4gPT4gdHlwZW9mIG4gPT09ICdudW1iZXInID8gYCR7bn1weGAgOiBuKS5qb2luKCcgJyk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkge1xuICByZXR1cm4gdHlwZW9mIGFuY2hvckVsID09PSAnZnVuY3Rpb24nID8gYW5jaG9yRWwoKSA6IGFuY2hvckVsO1xufVxuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgcGFwZXI6IFsncGFwZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBvcG92ZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgUG9wb3ZlclJvb3QgPSBzdHlsZWQoTW9kYWwsIHtcbiAgbmFtZTogJ011aVBvcG92ZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbmNvbnN0IFBvcG92ZXJQYXBlciA9IHN0eWxlZChQYXBlciwge1xuICBuYW1lOiAnTXVpUG9wb3ZlcicsXG4gIHNsb3Q6ICdQYXBlcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnBhcGVyXG59KSh7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgLy8gU28gd2Ugc2VlIHRoZSBwb3BvdmVyIHdoZW4gaXQncyBlbXB0eS5cbiAgLy8gSXQncyBtb3N0IGxpa2VseSBvbiBpc3N1ZSBvbiB1c2VybGFuZC5cbiAgbWluV2lkdGg6IDE2LFxuICBtaW5IZWlnaHQ6IDE2LFxuICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gMzJweCknLFxuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwXG59KTtcbmNvbnN0IFBvcG92ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BvdmVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQb3BvdmVyJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYWN0aW9uLFxuICAgIGFuY2hvckVsLFxuICAgIGFuY2hvck9yaWdpbiA9IHtcbiAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICAgIH0sXG4gICAgYW5jaG9yUG9zaXRpb24sXG4gICAgYW5jaG9yUmVmZXJlbmNlID0gJ2FuY2hvckVsJyxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29udGFpbmVyOiBjb250YWluZXJQcm9wLFxuICAgIGVsZXZhdGlvbiA9IDgsXG4gICAgbWFyZ2luVGhyZXNob2xkID0gMTYsXG4gICAgb3BlbixcbiAgICBQYXBlclByb3BzID0ge30sXG4gICAgdHJhbnNmb3JtT3JpZ2luID0ge1xuICAgICAgdmVydGljYWw6ICd0b3AnLFxuICAgICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gICAgfSxcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gR3JvdyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblByb3AgPSAnYXV0bycsXG4gICAgVHJhbnNpdGlvblByb3BzOiB7XG4gICAgICBvbkVudGVyaW5nXG4gICAgfSA9IHt9XG4gIH0gPSBwcm9wcyxcbiAgICAgICAgVHJhbnNpdGlvblByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMuVHJhbnNpdGlvblByb3BzLCBfZXhjbHVkZWQpLFxuICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcblxuICBjb25zdCBwYXBlclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBoYW5kbGVQYXBlclJlZiA9IHVzZUZvcmtSZWYocGFwZXJSZWYsIFBhcGVyUHJvcHMucmVmKTtcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYW5jaG9yT3JpZ2luLFxuICAgIGFuY2hvclJlZmVyZW5jZSxcbiAgICBlbGV2YXRpb24sXG4gICAgbWFyZ2luVGhyZXNob2xkLFxuICAgIFBhcGVyUHJvcHMsXG4gICAgdHJhbnNmb3JtT3JpZ2luLFxuICAgIFRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wLFxuICAgIFRyYW5zaXRpb25Qcm9wc1xuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7IC8vIFJldHVybnMgdGhlIHRvcC9sZWZ0IG9mZnNldCBvZiB0aGUgcG9zaXRpb25cbiAgLy8gdG8gYXR0YWNoIHRvIG9uIHRoZSBhbmNob3IgZWxlbWVudCAob3IgYm9keSBpZiBub25lIGlzIHByb3ZpZGVkKVxuXG4gIGNvbnN0IGdldEFuY2hvck9mZnNldCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnYW5jaG9yUG9zaXRpb24nKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIWFuY2hvclBvc2l0aW9uKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgYGFuY2hvclBvc2l0aW9uYCBwcm9wIHdoZW4gdXNpbmcgJyArICc8UG9wb3ZlciBhbmNob3JSZWZlcmVuY2U9XCJhbmNob3JQb3NpdGlvblwiIC8+LicpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhbmNob3JQb3NpdGlvbjtcbiAgICB9XG5cbiAgICBjb25zdCByZXNvbHZlZEFuY2hvckVsID0gcmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKTsgLy8gSWYgYW4gYW5jaG9yIGVsZW1lbnQgd2Fzbid0IHByb3ZpZGVkLCBqdXN0IHVzZSB0aGUgcGFyZW50IGJvZHkgZWxlbWVudCBvZiB0aGlzIFBvcG92ZXJcblxuICAgIGNvbnN0IGFuY2hvckVsZW1lbnQgPSByZXNvbHZlZEFuY2hvckVsICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEgPyByZXNvbHZlZEFuY2hvckVsIDogb3duZXJEb2N1bWVudChwYXBlclJlZi5jdXJyZW50KS5ib2R5O1xuICAgIGNvbnN0IGFuY2hvclJlY3QgPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGJveCA9IGFuY2hvckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGJveC50b3AgPT09IDAgJiYgYm94LmxlZnQgPT09IDAgJiYgYm94LnJpZ2h0ID09PSAwICYmIGJveC5ib3R0b20gPT09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBhbmNob3JSZWN0LnRvcCArIGdldE9mZnNldFRvcChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4udmVydGljYWwpLFxuICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0ICsgZ2V0T2Zmc2V0TGVmdChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsLCBhbmNob3JPcmlnaW4udmVydGljYWwsIGFuY2hvclBvc2l0aW9uLCBhbmNob3JSZWZlcmVuY2VdKTsgLy8gUmV0dXJucyB0aGUgYmFzZSB0cmFuc2Zvcm0gb3JpZ2luIHVzaW5nIHRoZSBlbGVtZW50XG5cbiAgY29uc3QgZ2V0VHJhbnNmb3JtT3JpZ2luID0gUmVhY3QudXNlQ2FsbGJhY2soZWxlbVJlY3QgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJ0aWNhbDogZ2V0T2Zmc2V0VG9wKGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWwpLFxuICAgICAgaG9yaXpvbnRhbDogZ2V0T2Zmc2V0TGVmdChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwpXG4gICAgfTtcbiAgfSwgW3RyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsLCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWxdKTtcbiAgY29uc3QgZ2V0UG9zaXRpb25pbmdTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGVsZW1lbnQgPT4ge1xuICAgIGNvbnN0IGVsZW1SZWN0ID0ge1xuICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gICAgfTsgLy8gR2V0IHRoZSB0cmFuc2Zvcm0gb3JpZ2luIHBvaW50IG9uIHRoZSBlbGVtZW50IGl0c2VsZlxuXG4gICAgY29uc3QgZWxlbVRyYW5zZm9ybU9yaWdpbiA9IGdldFRyYW5zZm9ybU9yaWdpbihlbGVtUmVjdCk7XG5cbiAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgbGVmdDogbnVsbCxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZShlbGVtVHJhbnNmb3JtT3JpZ2luKVxuICAgICAgfTtcbiAgICB9IC8vIEdldCB0aGUgb2Zmc2V0IG9mIHRoZSBhbmNob3JpbmcgZWxlbWVudFxuXG5cbiAgICBjb25zdCBhbmNob3JPZmZzZXQgPSBnZXRBbmNob3JPZmZzZXQoKTsgLy8gQ2FsY3VsYXRlIGVsZW1lbnQgcG9zaXRpb25pbmdcblxuICAgIGxldCB0b3AgPSBhbmNob3JPZmZzZXQudG9wIC0gZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbDtcbiAgICBsZXQgbGVmdCA9IGFuY2hvck9mZnNldC5sZWZ0IC0gZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsO1xuICAgIGNvbnN0IGJvdHRvbSA9IHRvcCArIGVsZW1SZWN0LmhlaWdodDtcbiAgICBjb25zdCByaWdodCA9IGxlZnQgKyBlbGVtUmVjdC53aWR0aDsgLy8gVXNlIHRoZSBwYXJlbnQgd2luZG93IG9mIHRoZSBhbmNob3JFbCBpZiBwcm92aWRlZFxuXG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3cocmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKSk7IC8vIFdpbmRvdyB0aHJlc2hvbGRzIHRha2luZyByZXF1aXJlZCBtYXJnaW4gaW50byBhY2NvdW50XG5cbiAgICBjb25zdCBoZWlnaHRUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJIZWlnaHQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgY29uc3Qgd2lkdGhUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJXaWR0aCAtIG1hcmdpblRocmVzaG9sZDsgLy8gQ2hlY2sgaWYgdGhlIHZlcnRpY2FsIGF4aXMgbmVlZHMgc2hpZnRpbmdcblxuICAgIGlmICh0b3AgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSB0b3AgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICB0b3AgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKGJvdHRvbSA+IGhlaWdodFRocmVzaG9sZCkge1xuICAgICAgY29uc3QgZGlmZiA9IGJvdHRvbSAtIGhlaWdodFRocmVzaG9sZDtcbiAgICAgIHRvcCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCArPSBkaWZmO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWxlbVJlY3QuaGVpZ2h0ID4gaGVpZ2h0VGhyZXNob2xkICYmIGVsZW1SZWN0LmhlaWdodCAmJiBoZWlnaHRUaHJlc2hvbGQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlIHBvcG92ZXIgY29tcG9uZW50IGlzIHRvbyB0YWxsLicsIGBTb21lIHBhcnQgb2YgaXQgY2FuIG5vdCBiZSBzZWVuIG9uIHRoZSBzY3JlZW4gKCR7ZWxlbVJlY3QuaGVpZ2h0IC0gaGVpZ2h0VGhyZXNob2xkfXB4KS5gLCAnUGxlYXNlIGNvbnNpZGVyIGFkZGluZyBhIGBtYXgtaGVpZ2h0YCB0byBpbXByb3ZlIHRoZSB1c2VyLWV4cGVyaWVuY2UuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0gLy8gQ2hlY2sgaWYgdGhlIGhvcml6b250YWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuXG5cbiAgICBpZiAobGVmdCA8IG1hcmdpblRocmVzaG9sZCkge1xuICAgICAgY29uc3QgZGlmZiA9IGxlZnQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICBsZWZ0IC09IGRpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKHJpZ2h0ID4gd2lkdGhUaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSByaWdodCAtIHdpZHRoVGhyZXNob2xkO1xuICAgICAgbGVmdCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IGRpZmY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYCR7TWF0aC5yb3VuZCh0b3ApfXB4YCxcbiAgICAgIGxlZnQ6IGAke01hdGgucm91bmQobGVmdCl9cHhgLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZShlbGVtVHJhbnNmb3JtT3JpZ2luKVxuICAgIH07XG4gIH0sIFthbmNob3JFbCwgYW5jaG9yUmVmZXJlbmNlLCBnZXRBbmNob3JPZmZzZXQsIGdldFRyYW5zZm9ybU9yaWdpbiwgbWFyZ2luVGhyZXNob2xkXSk7XG4gIGNvbnN0IHNldFBvc2l0aW9uaW5nU3R5bGVzID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBwYXBlclJlZi5jdXJyZW50O1xuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcG9zaXRpb25pbmcgPSBnZXRQb3NpdGlvbmluZ1N0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKHBvc2l0aW9uaW5nLnRvcCAhPT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSBwb3NpdGlvbmluZy50b3A7XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uaW5nLmxlZnQgIT09IG51bGwpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IHBvc2l0aW9uaW5nLmxlZnQ7XG4gICAgfVxuXG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBwb3NpdGlvbmluZy50cmFuc2Zvcm1PcmlnaW47XG4gIH0sIFtnZXRQb3NpdGlvbmluZ1N0eWxlXSk7XG5cbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSAoZWxlbWVudCwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZyk7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCAoKSA9PiBvcGVuID8ge1xuICAgIHVwZGF0ZVBvc2l0aW9uOiAoKSA9PiB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSA6IG51bGwsIFtvcGVuLCBzZXRQb3NpdGlvbmluZ1N0eWxlc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGFuY2hvckVsKTtcbiAgICBjb250YWluZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICBjb250YWluZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIG9wZW4sIHNldFBvc2l0aW9uaW5nU3R5bGVzXSk7XG4gIGxldCB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wO1xuXG4gIGlmICh0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID09PSAnYXV0bycgJiYgIVRyYW5zaXRpb25Db21wb25lbnQubXVpU3VwcG9ydEF1dG8pIHtcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSB1bmRlZmluZWQ7XG4gIH0gLy8gSWYgdGhlIGNvbnRhaW5lciBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgdGhhdFxuICAvLyBJZiB0aGUgYW5jaG9yRWwgcHJvcCBpcyBwcm92aWRlZCwgdXNlIGl0cyBwYXJlbnQgYm9keSBlbGVtZW50IGFzIHRoZSBjb250YWluZXJcbiAgLy8gSWYgbmVpdGhlciBhcmUgcHJvdmlkZWQgbGV0IHRoZSBNb2RhbCB0YWtlIGNhcmUgb2YgY2hvb3NpbmcgdGhlIGNvbnRhaW5lclxuXG5cbiAgY29uc3QgY29udGFpbmVyID0gY29udGFpbmVyUHJvcCB8fCAoYW5jaG9yRWwgPyBvd25lckRvY3VtZW50KHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkpLmJvZHkgOiB1bmRlZmluZWQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUG9wb3ZlclJvb3QsIF9leHRlbmRzKHtcbiAgICBCYWNrZHJvcFByb3BzOiB7XG4gICAgICBpbnZpc2libGU6IHRydWVcbiAgICB9LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgb3Blbjogb3BlbixcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgIGluOiBvcGVuLFxuICAgICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICB9LCBUcmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChQb3BvdmVyUGFwZXIsIF9leHRlbmRzKHtcbiAgICAgICAgZWxldmF0aW9uOiBlbGV2YXRpb25cbiAgICAgIH0sIFBhcGVyUHJvcHMsIHtcbiAgICAgICAgcmVmOiBoYW5kbGVQYXBlclJlZixcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIFBhcGVyUHJvcHMuY2xhc3NOYW1lKSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KSlcbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3BvdmVyLnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyB1cGRhdGVQb3NpdGlvbigpIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKi9cbiAgYW5jaG9yRWw6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5vcGVuICYmICghcHJvcHMuYW5jaG9yUmVmZXJlbmNlIHx8IHByb3BzLmFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvckVsJykpIHtcbiAgICAgIGNvbnN0IHJlc29sdmVkQW5jaG9yRWwgPSByZXNvbHZlQW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuXG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCAmJiByZXNvbHZlZEFuY2hvckVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIGNvbnN0IGJveCA9IHJlc29sdmVkQW5jaG9yRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCBgSXQgc2hvdWxkIGJlIGFuIEVsZW1lbnQgaW5zdGFuY2UgYnV0IGl0J3MgXFxgJHtyZXNvbHZlZEFuY2hvckVsfVxcYCBpbnN0ZWFkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBhbmNob3Igd2hlcmUgdGhlIHBvcG92ZXInc1xuICAgKiBgYW5jaG9yRWxgIHdpbGwgYXR0YWNoIHRvLiBUaGlzIGlzIG5vdCB1c2VkIHdoZW4gdGhlXG4gICAqIGFuY2hvclJlZmVyZW5jZSBpcyAnYW5jaG9yUG9zaXRpb24nLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodF0uXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAqICAgaG9yaXpvbnRhbDogJ2xlZnQnLFxuICAgKiB9XG4gICAqL1xuICBhbmNob3JPcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2xlZnQnLCAncmlnaHQnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnY2VudGVyJywgJ3RvcCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvc2l0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogVGhlIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSB0byB0aGUgYXBwbGljYXRpb24ncyBjbGllbnQgYXJlYS5cbiAgICovXG4gIGFuY2hvclBvc2l0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxlZnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0b3A6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhpcyBkZXRlcm1pbmVzIHdoaWNoIGFuY2hvciBwcm9wIHRvIHJlZmVyIHRvIHdoZW4gc2V0dGluZ1xuICAgKiB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIEBkZWZhdWx0ICdhbmNob3JFbCdcbiAgICovXG4gIGFuY2hvclJlZmVyZW5jZTogUHJvcFR5cGVzLm9uZU9mKFsnYW5jaG9yRWwnLCAnYW5jaG9yUG9zaXRpb24nLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgcGFzc2VkIHRvIHRoZSBNb2RhbCBjb21wb25lbnQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIGFuY2hvckVsJ3MgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogQGRlZmF1bHQgOFxuICAgKi9cbiAgZWxldmF0aW9uOiBpbnRlZ2VyUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBob3cgY2xvc2UgdG8gdGhlIGVkZ2Ugb2YgdGhlIHdpbmRvdyB0aGUgcG9wb3ZlciBjYW4gYXBwZWFyLlxuICAgKiBAZGVmYXVsdCAxNlxuICAgKi9cbiAgbWFyZ2luVGhyZXNob2xkOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBUaGUgYHJlYXNvbmAgcGFyYW1ldGVyIGNhbiBvcHRpb25hbGx5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmVzcG9uc2UgdG8gYG9uQ2xvc2VgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgUGFwZXJgXSgvYXBpL3BhcGVyLykgZWxlbWVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5zaGFwZSh7XG4gICAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZlxuICB9KSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgcG9wb3ZlciB3aGljaFxuICAgKiB3aWxsIGF0dGFjaCB0byB0aGUgYW5jaG9yJ3Mgb3JpZ2luLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b20sIHgocHgpXTtcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIGNlbnRlciwgcmlnaHQsIHgocHgpXS5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICogICBob3Jpem9udGFsOiAnbGVmdCcsXG4gICAqIH1cbiAgICovXG4gIHRyYW5zZm9ybU9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdjZW50ZXInLCAndG9wJ10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICogW0ZvbGxvdyB0aGlzIGd1aWRlXSgvY29tcG9uZW50cy90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBHcm93XG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uLykgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlcjsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVudVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTWVudScsIHNsb3QpO1xufVxuY29uc3QgbWVudUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlNZW51JywgWydyb290JywgJ3BhcGVyJywgJ2xpc3QnXSk7XG5leHBvcnQgZGVmYXVsdCBtZW51Q2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25FbnRlcmluZ1wiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImRpc2FibGVBdXRvRm9jdXNJdGVtXCIsIFwiTWVudUxpc3RQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlBvcG92ZXJDbGFzc2VzXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBNZW51TGlzdCBmcm9tICcuLi9NZW51TGlzdCc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi4vUG9wb3Zlcic7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRNZW51VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tZW51Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgUlRMX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAncmlnaHQnXG59O1xuY29uc3QgTFRSX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAnbGVmdCdcbn07XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBwYXBlcjogWydwYXBlciddLFxuICAgIGxpc3Q6IFsnbGlzdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TWVudVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG5jb25zdCBNZW51Um9vdCA9IHN0eWxlZChQb3BvdmVyLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlNZW51JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7fSk7XG5jb25zdCBNZW51UGFwZXIgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aU1lbnUnLFxuICBzbG90OiAnUGFwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5wYXBlclxufSkoe1xuICAvLyBzcGVjWjogVGhlIG1heGltdW0gaGVpZ2h0IG9mIGEgc2ltcGxlIG1lbnUgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHJvd3MgbGVzcyB0aGFuIHRoZSB2aWV3XG4gIC8vIGhlaWdodC4gVGhpcyBlbnN1cmVzIGEgdGFwYWJsZSBhcmVhIG91dHNpZGUgb2YgdGhlIHNpbXBsZSBtZW51IHdpdGggd2hpY2ggdG8gZGlzbWlzc1xuICAvLyB0aGUgbWVudS5cbiAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gOTZweCknLFxuICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZyBmb3IgaU9TIDwgMTMuMFxuICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xufSk7XG5jb25zdCBNZW51TWVudUxpc3QgPSBzdHlsZWQoTWVudUxpc3QsIHtcbiAgbmFtZTogJ011aU1lbnUnLFxuICBzbG90OiAnTGlzdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmxpc3Rcbn0pKHtcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMFxufSk7XG5jb25zdCBNZW51ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTWVudSdcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGF1dG9Gb2N1cyA9IHRydWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gPSBmYWxzZSxcbiAgICBNZW51TGlzdFByb3BzID0ge30sXG4gICAgb25DbG9zZSxcbiAgICBvcGVuLFxuICAgIFBhcGVyUHJvcHMgPSB7fSxcbiAgICBQb3BvdmVyQ2xhc3NlcyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSAnYXV0bycsXG4gICAgVHJhbnNpdGlvblByb3BzOiB7XG4gICAgICBvbkVudGVyaW5nXG4gICAgfSA9IHt9LFxuICAgIHZhcmlhbnQgPSAnc2VsZWN0ZWRNZW51J1xuICB9ID0gcHJvcHMsXG4gICAgICAgIFRyYW5zaXRpb25Qcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLlRyYW5zaXRpb25Qcm9wcywgX2V4Y2x1ZGVkKSxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG5cbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBpc1J0bCA9IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCc7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlQXV0b0ZvY3VzSXRlbSxcbiAgICBNZW51TGlzdFByb3BzLFxuICAgIG9uRW50ZXJpbmcsXG4gICAgUGFwZXJQcm9wcyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgVHJhbnNpdGlvblByb3BzLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBhdXRvRm9jdXNJdGVtID0gYXV0b0ZvY3VzICYmICFkaXNhYmxlQXV0b0ZvY3VzSXRlbSAmJiBvcGVuO1xuICBjb25zdCBtZW51TGlzdEFjdGlvbnNSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSAoZWxlbWVudCwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICBpZiAobWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQpIHtcbiAgICAgIG1lbnVMaXN0QWN0aW9uc1JlZi5jdXJyZW50LmFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyKGVsZW1lbnQsIHRoZW1lKTtcbiAgICB9XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUxpc3RLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdUYWInKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKGV2ZW50LCAndGFiS2V5RG93bicpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIHRoZSBpbmRleCBvZiB0aGUgaXRlbSBzaG91bGQgcmVjZWl2ZSBmb2N1c1xuICAgKiBpbiBhIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgIGl0J3MgdGhlIGZpcnN0IGBzZWxlY3RlZGAgaXRlbVxuICAgKiBvdGhlcndpc2UgaXQncyB0aGUgdmVyeSBmaXJzdCBpdGVtLlxuICAgKi9cblxuXG4gIGxldCBhY3RpdmVJdGVtSW5kZXggPSAtMTsgLy8gc2luY2Ugd2UgaW5qZWN0IGZvY3VzIHJlbGF0ZWQgcHJvcHMgaW50byBjaGlsZHJlbiB3ZSBoYXZlIHRvIGRvIGEgbG9va2FoZWFkXG4gIC8vIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgYHNlbGVjdGVkYCBpdGVtLiBXZSdyZSBsb29raW5nIGZvciB0aGUgbGFzdCBgc2VsZWN0ZWRgXG4gIC8vIGl0ZW0gYW5kIHVzZSB0aGUgZmlyc3QgdmFsaWQgaXRlbSBhcyBhIGZhbGxiYWNrXG5cbiAgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNVUk6IFRoZSBNZW51IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgaWYgKHZhcmlhbnQgPT09ICdzZWxlY3RlZE1lbnUnICYmIGNoaWxkLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfSBlbHNlIGlmIChhY3RpdmVJdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChNZW51Um9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzZXM6IFBvcG92ZXJDbGFzc2VzLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgYW5jaG9yT3JpZ2luOiB7XG4gICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICBob3Jpem9udGFsOiBpc1J0bCA/ICdyaWdodCcgOiAnbGVmdCdcbiAgICB9LFxuICAgIHRyYW5zZm9ybU9yaWdpbjogaXNSdGwgPyBSVExfT1JJR0lOIDogTFRSX09SSUdJTixcbiAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjb21wb25lbnQ6IE1lbnVQYXBlclxuICAgIH0sIFBhcGVyUHJvcHMsIHtcbiAgICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBQYXBlclByb3BzLmNsYXNzZXMsIHtcbiAgICAgICAgcm9vdDogY2xhc3Nlcy5wYXBlclxuICAgICAgfSlcbiAgICB9KSxcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdCxcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIFRyYW5zaXRpb25Qcm9wczogX2V4dGVuZHMoe1xuICAgICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmdcbiAgICB9LCBUcmFuc2l0aW9uUHJvcHMpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTWVudU1lbnVMaXN0LCBfZXh0ZW5kcyh7XG4gICAgICBvbktleURvd246IGhhbmRsZUxpc3RLZXlEb3duLFxuICAgICAgYWN0aW9uczogbWVudUxpc3RBY3Rpb25zUmVmLFxuICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMgJiYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEgfHwgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0pLFxuICAgICAgYXV0b0ZvY3VzSXRlbTogYXV0b0ZvY3VzSXRlbSxcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5saXN0LCBNZW51TGlzdFByb3BzLmNsYXNzTmFtZSksXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51LnByb3BUeXBlc1xuLyogcmVtb3ZlLXByb3B0eXBlcyAqL1xuPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIG1lbnUuXG4gICAqL1xuICBhbmNob3JFbDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAgKERlZmF1bHQpIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGlmIG5vIGZvY3VzYWJsZSBjaGlsZCBpcyBmb3VuZC4gRGlzYWJsZWRcbiAgICogY2hpbGRyZW4gYXJlIG5vdCBmb2N1c2FibGUuIElmIHlvdSBzZXQgdGhpcyBwcm9wIHRvIGBmYWxzZWAgZm9jdXMgd2lsbCBiZSBwbGFjZWRcbiAgICogb24gdGhlIHBhcmVudCBtb2RhbCBjb250YWluZXIuIFRoaXMgaGFzIHNldmVyZSBhY2Nlc3NpYmlsaXR5IGltcGxpY2F0aW9uc1xuICAgKiBhbmQgc2hvdWxkIG9ubHkgYmUgY29uc2lkZXJlZCBpZiB5b3UgbWFuYWdlIGZvY3VzIG90aGVyd2lzZS5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWVudSBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFdoZW4gb3BlbmluZyB0aGUgbWVudSB3aWxsIG5vdCBmb2N1cyB0aGUgYWN0aXZlIGl0ZW0gYnV0IHRoZSBgW3JvbGU9XCJtZW51XCJdYFxuICAgKiB1bmxlc3MgYGF1dG9Gb2N1c2AgaXMgYWxzbyBzZXQgdG8gYGZhbHNlYC4gTm90IHVzaW5nIHRoZSBkZWZhdWx0IG1lYW5zIG5vdFxuICAgKiBmb2xsb3dpbmcgV0FJLUFSSUEgYXV0aG9yaW5nIHByYWN0aWNlcy4gUGxlYXNlIGJlIGNvbnNpZGVyYXRlIGFib3V0IHBvc3NpYmxlXG4gICAqIGFjY2Vzc2liaWxpdHkgaW1wbGljYXRpb25zLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW06IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVMaXN0YF0oL2FwaS9tZW51LWxpc3QvKSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgTWVudUxpc3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYCwgYFwidGFiS2V5RG93blwiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcCBhcHBsaWVkIHRvIHRoZSBbYFBvcG92ZXJgXSgvYXBpL3BvcG92ZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUG9wb3ZlckNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIGxlbmd0aCBvZiB0aGUgdHJhbnNpdGlvbiBpbiBgbXNgLCBvciAnYXV0bydcbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uLykgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1cy5cbiAgICogQGRlZmF1bHQgJ3NlbGVjdGVkTWVudSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ21lbnUnLCAnc2VsZWN0ZWRNZW51J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudTsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU5hdGl2ZVNlbGVjdCcsIHNsb3QpO1xufVxuY29uc3QgbmF0aXZlU2VsZWN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU5hdGl2ZVNlbGVjdCcsIFsncm9vdCcsICdzZWxlY3QnLCAnbXVsdGlwbGUnLCAnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJywgJ2Rpc2FibGVkJywgJ2ljb24nLCAnaWNvbk9wZW4nLCAnaWNvbkZpbGxlZCcsICdpY29uT3V0bGluZWQnLCAnaWNvblN0YW5kYXJkJywgJ25hdGl2ZUlucHV0J10pO1xuZXhwb3J0IGRlZmF1bHQgbmF0aXZlU2VsZWN0Q2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgbmF0aXZlU2VsZWN0Q2xhc3NlcywgeyBnZXROYXRpdmVTZWxlY3RVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vbmF0aXZlU2VsZWN0Q2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBkaXNhYmxlZCxcbiAgICBtdWx0aXBsZSxcbiAgICBvcGVuXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBzZWxlY3Q6IFsnc2VsZWN0JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgbXVsdGlwbGUgJiYgJ211bHRpcGxlJ10sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUodmFyaWFudCl9YCwgb3BlbiAmJiAnaWNvbk9wZW4nLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE5hdGl2ZVNlbGVjdFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMgPSAoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgLy8gV2hlbiBpbnRlcmFjdGluZyBxdWlja2x5LCB0aGUgdGV4dCBjYW4gZW5kIHVwIHNlbGVjdGVkLlxuICAvLyBOYXRpdmUgc2VsZWN0IGNhbid0IGJlIHNlbGVjdGVkIGVpdGhlci5cbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBib3JkZXJSYWRpdXM6IDAsXG4gIC8vIFJlc2V0XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICAnJjpmb2N1cyc6IHtcbiAgICAvLyBTaG93IHRoYXQgaXQncyBub3QgYW4gdGV4dCBpbnB1dFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4wNSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNSknLFxuICAgIGJvcmRlclJhZGl1czogMCAvLyBSZXNldCBDaHJvbWUgc3R5bGVcblxuICB9LFxuICAvLyBSZW1vdmUgSUUxMSBhcnJvd1xuICAnJjo6LW1zLWV4cGFuZCc6IHtcbiAgICBkaXNwbGF5OiAnbm9uZSdcbiAgfSxcbiAgW2AmLiR7bmF0aXZlU2VsZWN0Q2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH0sXG4gICcmW211bHRpcGxlXSc6IHtcbiAgICBoZWlnaHQ6ICdhdXRvJ1xuICB9LFxuICAnJjpub3QoW211bHRpcGxlXSkgb3B0aW9uLCAmOm5vdChbbXVsdGlwbGVdKSBvcHRncm91cCc6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICB9LFxuICAvLyBCdW1wIHNwZWNpZmljaXR5IHRvIGFsbG93IGV4dGVuZGluZyBjdXN0b20gaW5wdXRzXG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAyNCxcbiAgICBtaW5XaWR0aDogMTYgLy8gU28gaXQgZG9lc24ndCBjb2xsYXBzZS5cblxuICB9XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdmaWxsZWQnICYmIHtcbiAgJyYmJic6IHtcbiAgICBwYWRkaW5nUmlnaHQ6IDMyXG4gIH1cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAnJjpmb2N1cyc6IHtcbiAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyAvLyBSZXNldCB0aGUgcmVzZXQgZm9yIENocm9tZSBzdHlsZVxuXG4gIH0sXG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAzMlxuICB9XG59KTtcbmNvbnN0IE5hdGl2ZVNlbGVjdFNlbGVjdCA9IHN0eWxlZCgnc2VsZWN0Jywge1xuICBuYW1lOiAnTXVpTmF0aXZlU2VsZWN0JyxcbiAgc2xvdDogJ1NlbGVjdCcsXG4gIHNob3VsZEZvcndhcmRQcm9wOiByb290U2hvdWxkRm9yd2FyZFByb3AsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuc2VsZWN0LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwge1xuICAgICAgW2AmLiR7bmF0aXZlU2VsZWN0Q2xhc3Nlcy5tdWx0aXBsZX1gXTogc3R5bGVzLm11bHRpcGxlXG4gICAgfV07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdFNlbGVjdFN0eWxlcyk7XG5leHBvcnQgY29uc3QgbmF0aXZlU2VsZWN0SWNvblN0eWxlcyA9ICh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIC8vIFdlIHVzZSBhIHBvc2l0aW9uIGFic29sdXRlIG92ZXIgYSBmbGV4Ym94IGluIG9yZGVyIHRvIGZvcndhcmQgdGhlIHBvaW50ZXIgZXZlbnRzXG4gIC8vIHRvIHRoZSBpbnB1dCBhbmQgdG8gc3VwcG9ydCB3cmFwcGluZyB0YWdzLi5cbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHJpZ2h0OiAwLFxuICB0b3A6ICdjYWxjKDUwJSAtIC41ZW0pJyxcbiAgLy8gQ2VudGVyIHZlcnRpY2FsbHksIGhlaWdodCBpcyAxZW1cbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAvLyBEb24ndCBibG9jayBwb2ludGVyIGV2ZW50cyBvbiB0aGUgc2VsZWN0IHVuZGVyIHRoZSBpY29uLlxuICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gIH1cbn0sIG93bmVyU3RhdGUub3BlbiAmJiB7XG4gIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZmlsbGVkJyAmJiB7XG4gIHJpZ2h0OiA3XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICByaWdodDogN1xufSk7XG5jb25zdCBOYXRpdmVTZWxlY3RJY29uID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlOYXRpdmVTZWxlY3QnLFxuICBzbG90OiAnSWNvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuaWNvbiwgb3duZXJTdGF0ZS52YXJpYW50ICYmIHN0eWxlc1tgaWNvbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnZhcmlhbnQpfWBdLCBvd25lclN0YXRlLm9wZW4gJiYgc3R5bGVzLmljb25PcGVuXTtcbiAgfVxufSkobmF0aXZlU2VsZWN0SWNvblN0eWxlcyk7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuY29uc3QgTmF0aXZlU2VsZWN0SW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXRpdmVTZWxlY3RJbnB1dChwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgZGlzYWJsZWQsXG4gICAgSWNvbkNvbXBvbmVudCxcbiAgICBpbnB1dFJlZixcbiAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVkLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChOYXRpdmVTZWxlY3RTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5zZWxlY3QsIGNsYXNzTmFtZSksXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICByZWY6IGlucHV0UmVmIHx8IHJlZlxuICAgIH0sIG90aGVyKSksIHByb3BzLm11bHRpcGxlID8gbnVsbCA6IC8qI19fUFVSRV9fKi9fanN4KE5hdGl2ZVNlbGVjdEljb24sIHtcbiAgICAgIGFzOiBJY29uQ29tcG9uZW50LFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uXG4gICAgfSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOYXRpdmVTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxvcHRpb24+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3QgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgbmF0aXZlIHNlbGVjdCBlbGVtZW50LlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBOYXRpdmVTZWxlY3RJbnB1dDsiLCJpbXBvcnQgeyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVNlbGVjdCcsIHNsb3QpO1xufVxuY29uc3Qgc2VsZWN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVNlbGVjdCcsIFsnc2VsZWN0JywgJ211bHRpcGxlJywgJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCcsICdkaXNhYmxlZCcsICdmb2N1c2VkJywgJ2ljb24nLCAnaWNvbk9wZW4nLCAnaWNvbkZpbGxlZCcsICdpY29uT3V0bGluZWQnLCAnaWNvblN0YW5kYXJkJywgJ25hdGl2ZUlucHV0J10pO1xuZXhwb3J0IGRlZmF1bHQgc2VsZWN0Q2xhc3NlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImFyaWEtbGFiZWxcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRPcGVuXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJsYWJlbElkXCIsIFwiTWVudVByb3BzXCIsIFwibXVsdGlwbGVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsb3NlXCIsIFwib25Gb2N1c1wiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclZhbHVlXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCIsIFwidGFiSW5kZXhcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgTWVudSBmcm9tICcuLi9NZW51L01lbnUnO1xuaW1wb3J0IHsgbmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzLCBuYXRpdmVTZWxlY3RJY29uU3R5bGVzIH0gZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi4vSW5wdXRCYXNlL3V0aWxzJztcbmltcG9ydCBzdHlsZWQsIHsgc2xvdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuaW1wb3J0IHNlbGVjdENsYXNzZXMsIHsgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL3NlbGVjdENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFNlbGVjdFNlbGVjdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ1NlbGVjdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFsvLyBXaW4gc3BlY2lmaWNpdHkgb3ZlciB0aGUgaW5wdXQgYmFzZVxuICAgIHtcbiAgICAgIFtgJi4ke3NlbGVjdENsYXNzZXMuc2VsZWN0fWBdOiBzdHlsZXMuc2VsZWN0XG4gICAgfSwge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5zZWxlY3R9YF06IHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXG4gICAgfSwge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5tdWx0aXBsZX1gXTogc3R5bGVzLm11bHRpcGxlXG4gICAgfV07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdFNlbGVjdFN0eWxlcywge1xuICAvLyBXaW4gc3BlY2lmaWNpdHkgb3ZlciB0aGUgaW5wdXQgYmFzZVxuICBbYCYuJHtzZWxlY3RDbGFzc2VzLnNlbGVjdH1gXToge1xuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIC8vIFJlc2V0cyBmb3IgbXVsdGlwbGUgc2VsZWN0IHdpdGggY2hpcHNcbiAgICBtaW5IZWlnaHQ6ICcxLjQzNzVlbScsXG4gICAgLy8gUmVxdWlyZWQgZm9yIHNlbGVjdFxcdGV4dC1maWVsZCBoZWlnaHQgY29uc2lzdGVuY3lcbiAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gIH1cbn0pO1xuY29uc3QgU2VsZWN0SWNvbiA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ0ljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmljb24sIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5pY29uT3Blbl07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdEljb25TdHlsZXMpO1xuY29uc3QgU2VsZWN0TmF0aXZlSW5wdXQgPSBzdHlsZWQoJ2lucHV0Jywge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBzbG90U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpU2VsZWN0JyxcbiAgc2xvdDogJ05hdGl2ZUlucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubmF0aXZlSW5wdXRcbn0pKHtcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgb3BhY2l0eTogMCxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICB3aWR0aDogJzEwMCUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94J1xufSk7XG5cbmZ1bmN0aW9uIGFyZUVxdWFsVmFsdWVzKGEsIGIpIHtcbiAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH0gLy8gVGhlIHZhbHVlIGNvdWxkIGJlIGEgbnVtYmVyLCB0aGUgRE9NIHdpbGwgc3RyaW5naWZ5IGl0IGFueXdheS5cblxuXG4gIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eShkaXNwbGF5KSB7XG4gIHJldHVybiBkaXNwbGF5ID09IG51bGwgfHwgdHlwZW9mIGRpc3BsYXkgPT09ICdzdHJpbmcnICYmICFkaXNwbGF5LnRyaW0oKTtcbn1cblxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBkaXNhYmxlZCxcbiAgICBtdWx0aXBsZSxcbiAgICBvcGVuXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBzZWxlY3Q6IFsnc2VsZWN0JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgbXVsdGlwbGUgJiYgJ211bHRpcGxlJ10sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUodmFyaWFudCl9YCwgb3BlbiAmJiAnaWNvbk9wZW4nLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBuYXRpdmVJbnB1dDogWyduYXRpdmVJbnB1dCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5cbmNvbnN0IFNlbGVjdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgJ2FyaWEtbGFiZWwnOiBhcmlhTGFiZWwsXG4gICAgYXV0b0ZvY3VzLFxuICAgIGF1dG9XaWR0aCxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgZGVmYXVsdE9wZW4sXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc3BsYXlFbXB0eSxcbiAgICBJY29uQ29tcG9uZW50LFxuICAgIGlucHV0UmVmOiBpbnB1dFJlZlByb3AsXG4gICAgbGFiZWxJZCxcbiAgICBNZW51UHJvcHMgPSB7fSxcbiAgICBtdWx0aXBsZSxcbiAgICBuYW1lLFxuICAgIG9uQmx1cixcbiAgICBvbkNoYW5nZSxcbiAgICBvbkNsb3NlLFxuICAgIG9uRm9jdXMsXG4gICAgb25PcGVuLFxuICAgIG9wZW46IG9wZW5Qcm9wLFxuICAgIHJlYWRPbmx5LFxuICAgIHJlbmRlclZhbHVlLFxuICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IHt9LFxuICAgIHRhYkluZGV4OiB0YWJJbmRleFByb3AsXG4gICAgdmFsdWU6IHZhbHVlUHJvcCxcbiAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZVN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IHZhbHVlUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgbmFtZTogJ1NlbGVjdCdcbiAgfSk7XG4gIGNvbnN0IFtvcGVuU3RhdGUsIHNldE9wZW5TdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiBvcGVuUHJvcCxcbiAgICBkZWZhdWx0OiBkZWZhdWx0T3BlbixcbiAgICBuYW1lOiAnU2VsZWN0J1xuICB9KTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGRpc3BsYXlSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IFtkaXNwbGF5Tm9kZSwgc2V0RGlzcGxheU5vZGVdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc09wZW5Db250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYob3BlblByb3AgIT0gbnVsbCk7XG4gIGNvbnN0IFttZW51TWluV2lkdGhTdGF0ZSwgc2V0TWVudU1pbldpZHRoU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmUHJvcCk7XG4gIGNvbnN0IGhhbmRsZURpc3BsYXlSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBkaXNwbGF5UmVmLmN1cnJlbnQgPSBub2RlO1xuXG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIHNldERpc3BsYXlOb2RlKG5vZGUpO1xuICAgIH1cbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGhhbmRsZVJlZiwgKCkgPT4gKHtcbiAgICBmb2N1czogKCkgPT4ge1xuICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfSxcbiAgICBub2RlOiBpbnB1dFJlZi5jdXJyZW50LFxuICAgIHZhbHVlXG4gIH0pLCBbdmFsdWVdKTsgLy8gUmVzaXplIG1lbnUgb24gYGRlZmF1bHRPcGVuYCBhdXRvbWF0aWMgdG9nZ2xlLlxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRlZmF1bHRPcGVuICYmIG9wZW5TdGF0ZSAmJiBkaXNwbGF5Tm9kZSAmJiAhaXNPcGVuQ29udHJvbGxlZCkge1xuICAgICAgc2V0TWVudU1pbldpZHRoU3RhdGUoYXV0b1dpZHRoID8gbnVsbCA6IGRpc3BsYXlOb2RlLmNsaWVudFdpZHRoKTtcbiAgICAgIGRpc3BsYXlSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuXG4gIH0sIFtkaXNwbGF5Tm9kZSwgYXV0b1dpZHRoXSk7IC8vIGBpc09wZW5Db250cm9sbGVkYCBpcyBpZ25vcmVkIGJlY2F1c2UgdGhlIGNvbXBvbmVudCBzaG91bGQgbmV2ZXIgc3dpdGNoIGJldHdlZW4gY29udHJvbGxlZCBhbmQgdW5jb250cm9sbGVkIG1vZGVzLlxuICAvLyBgZGVmYXVsdE9wZW5gIGFuZCBgb3BlblN0YXRlYCBhcmUgaWdub3JlZCB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjYWxsYmFja3MuXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBsYWJlbCA9IG93bmVyRG9jdW1lbnQoZGlzcGxheVJlZi5jdXJyZW50KS5nZXRFbGVtZW50QnlJZChsYWJlbElkKTtcblxuICAgIGlmIChsYWJlbCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKGdldFNlbGVjdGlvbigpLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsYWJlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbbGFiZWxJZF0pO1xuXG4gIGNvbnN0IHVwZGF0ZSA9IChvcGVuLCBldmVudCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgIG9uT3BlbihldmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBkaXNwbGF5Tm9kZS5jbGllbnRXaWR0aCk7XG4gICAgICBzZXRPcGVuU3RhdGUob3Blbik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEhpamFjayB0aGUgZGVmYXVsdCBmb2N1cyBiZWhhdmlvci5cblxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB1cGRhdGUodHJ1ZSwgZXZlbnQpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gZXZlbnQgPT4ge1xuICAgIHVwZGF0ZShmYWxzZSwgZXZlbnQpO1xuICB9O1xuXG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTsgLy8gU3VwcG9ydCBhdXRvZmlsbC5cblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiBjaGlsZC5wcm9wcy52YWx1ZSkuaW5kZXhPZihldmVudC50YXJnZXQudmFsdWUpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5BcnJheVtpbmRleF07XG4gICAgc2V0VmFsdWVTdGF0ZShjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBjaGlsZCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUl0ZW1DbGljayA9IGNoaWxkID0+IGV2ZW50ID0+IHtcbiAgICBsZXQgbmV3VmFsdWU7IC8vIFdlIHVzZSB0aGUgdGFiaW5kZXggYXR0cmlidXRlIHRvIHNpZ25hbCB0aGUgYXZhaWxhYmxlIG9wdGlvbnMuXG5cbiAgICBpZiAoIWV2ZW50LmN1cnJlbnRUYXJnZXQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICBuZXdWYWx1ZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuc2xpY2UoKSA6IFtdO1xuICAgICAgY29uc3QgaXRlbUluZGV4ID0gdmFsdWUuaW5kZXhPZihjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIG5ld1ZhbHVlLnB1c2goY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1ZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIHNldFZhbHVlU3RhdGUobmV3VmFsdWUpO1xuXG4gICAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgICAgLy8gUmVkZWZpbmUgdGFyZ2V0IHRvIGFsbG93IG5hbWUgYW5kIHZhbHVlIHRvIGJlIHJlYWQuXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHNlYW1sZXNzIGludGVncmF0aW9uIHdpdGggdGhlIG1vc3QgcG9wdWxhciBmb3JtIGxpYnJhcmllcy5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNDg1I2lzc3VlY29tbWVudC02NzYwNDg0OTJcbiAgICAgICAgLy8gQ2xvbmUgdGhlIGV2ZW50IHRvIG5vdCBvdmVycmlkZSBgdGFyZ2V0YCBvZiB0aGUgb3JpZ2luYWwgZXZlbnQuXG4gICAgICAgIGNvbnN0IG5hdGl2ZUV2ZW50ID0gZXZlbnQubmF0aXZlRXZlbnQgfHwgZXZlbnQ7XG4gICAgICAgIGNvbnN0IGNsb25lZEV2ZW50ID0gbmV3IG5hdGl2ZUV2ZW50LmNvbnN0cnVjdG9yKG5hdGl2ZUV2ZW50LnR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsb25lZEV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3VmFsdWUsXG4gICAgICAgICAgICBuYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb25DaGFuZ2UoY2xvbmVkRXZlbnQsIGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIW11bHRpcGxlKSB7XG4gICAgICB1cGRhdGUoZmFsc2UsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICBpZiAoIXJlYWRPbmx5KSB7XG4gICAgICBjb25zdCB2YWxpZEtleXMgPSBbJyAnLCAnQXJyb3dVcCcsICdBcnJvd0Rvd24nLCAvLyBUaGUgbmF0aXZlIHNlbGVjdCBkb2Vzbid0IHJlc3BvbmQgdG8gZW50ZXIgb24gTWFjT1MsIGJ1dCBpdCdzIHJlY29tbWVuZGVkIGJ5XG4gICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzL2V4YW1wbGVzL2xpc3Rib3gvbGlzdGJveC1jb2xsYXBzaWJsZS5odG1sXG4gICAgICAnRW50ZXInXTtcblxuICAgICAgaWYgKHZhbGlkS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9wZW4gPSBkaXNwbGF5Tm9kZSAhPT0gbnVsbCAmJiBvcGVuU3RhdGU7XG5cbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICAvLyBpZiBvcGVuIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblxuICAgIGlmICghb3BlbiAmJiBvbkJsdXIpIHtcbiAgICAgIC8vIFByZWFjdCBzdXBwb3J0LCB0YXJnZXQgaXMgcmVhZCBvbmx5IHByb3BlcnR5IG9uIGEgbmF0aXZlIGV2ZW50LlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBuYW1lXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgZGVsZXRlIG90aGVyWydhcmlhLWludmFsaWQnXTtcbiAgbGV0IGRpc3BsYXk7XG4gIGxldCBkaXNwbGF5U2luZ2xlO1xuICBjb25zdCBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgbGV0IGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIGxldCBmb3VuZE1hdGNoID0gZmFsc2U7IC8vIE5vIG5lZWQgdG8gZGlzcGxheSBhbnkgdmFsdWUgaWYgdGhlIGZpZWxkIGlzIGVtcHR5LlxuXG4gIGlmIChpc0ZpbGxlZCh7XG4gICAgdmFsdWVcbiAgfSkgfHwgZGlzcGxheUVtcHR5KSB7XG4gICAgaWYgKHJlbmRlclZhbHVlKSB7XG4gICAgICBkaXNwbGF5ID0gcmVuZGVyVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wdXRlRGlzcGxheSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgaXRlbXMgPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIFNlbGVjdCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzZWxlY3RlZDtcblxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIFxcYHZhbHVlXFxgIHByb3AgbXVzdCBiZSBhbiBhcnJheSB3aGVuIHVzaW5nIHRoZSBcXGBTZWxlY3RcXGAgY29tcG9uZW50IHdpdGggXFxgbXVsdGlwbGVcXGAuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMikpO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3RlZCA9IHZhbHVlLnNvbWUodiA9PiBhcmVFcXVhbFZhbHVlcyh2LCBjaGlsZC5wcm9wcy52YWx1ZSkpO1xuXG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheU11bHRpcGxlLnB1c2goY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZCA9IGFyZUVxdWFsVmFsdWVzKHZhbHVlLCBjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBjb21wdXRlRGlzcGxheSkge1xuICAgICAgICBkaXNwbGF5U2luZ2xlID0gY2hpbGQucHJvcHMuY2hpbGRyZW47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBzZWxlY3RlZCA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgb25LZXlVcDogZXZlbnQgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugb3VyIE1lbnVJdGVtcyBkaXNwYXRjaGVzIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAvLyBpdCdzIG5vdCBiZWhhdmlvciBvZiB0aGUgbmF0aXZlIDxvcHRpb24+IGFuZCBjYXVzZXNcbiAgICAgICAgICAvLyB0aGUgc2VsZWN0IHRvIGNsb3NlIGltbWVkaWF0ZWx5IHNpbmNlIHdlIG9wZW4gb24gc3BhY2Uga2V5ZG93blxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGQucHJvcHMub25LZXlVcCkge1xuICAgICAgICAgIGNoaWxkLnByb3BzLm9uS2V5VXAoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcm9sZTogJ29wdGlvbicsXG4gICAgICBzZWxlY3RlZCxcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAvLyBUaGUgdmFsdWUgaXMgbW9zdCBsaWtlbHkgbm90IGEgdmFsaWQgSFRNTCBhdHRyaWJ1dGUuXG4gICAgICAnZGF0YS12YWx1ZSc6IGNoaWxkLnByb3BzLnZhbHVlIC8vIEluc3RlYWQsIHdlIHByb3ZpZGUgaXQgYXMgYSBkYXRhIGF0dHJpYnV0ZS5cblxuICAgIH0pO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWZvdW5kTWF0Y2ggJiYgIW11bHRpcGxlICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIGNvbnNvbGUud2FybihbYE1VSTogWW91IGhhdmUgcHJvdmlkZWQgYW4gb3V0LW9mLXJhbmdlIHZhbHVlIFxcYCR7dmFsdWV9XFxgIGZvciB0aGUgc2VsZWN0ICR7bmFtZSA/IGAobmFtZT1cIiR7bmFtZX1cIikgYCA6ICcnfWNvbXBvbmVudC5gLCBcIkNvbnNpZGVyIHByb3ZpZGluZyBhIHZhbHVlIHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIG9yICcnLlwiLCBgVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlICR7dmFsdWVzLmZpbHRlcih4ID0+IHggIT0gbnVsbCkubWFwKHggPT4gYFxcYCR7eH1cXGBgKS5qb2luKCcsICcpIHx8ICdcIlwiJ30uYF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtmb3VuZE1hdGNoLCBjaGlsZHJlbkFycmF5LCBtdWx0aXBsZSwgbmFtZSwgdmFsdWVdKTtcbiAgfVxuXG4gIGlmIChjb21wdXRlRGlzcGxheSkge1xuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgaWYgKGRpc3BsYXlNdWx0aXBsZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGlzcGxheSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwbGF5ID0gZGlzcGxheU11bHRpcGxlLnJlZHVjZSgob3V0cHV0LCBjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBvdXRwdXQucHVzaChjaGlsZCk7XG5cbiAgICAgICAgICBpZiAoaW5kZXggPCBkaXNwbGF5TXVsdGlwbGUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgb3V0cHV0LnB1c2goJywgJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwbGF5ID0gZGlzcGxheVNpbmdsZTtcbiAgICB9XG4gIH0gLy8gQXZvaWQgcGVyZm9ybWluZyBhIGxheW91dCBjb21wdXRhdGlvbiBpbiB0aGUgcmVuZGVyIG1ldGhvZC5cblxuXG4gIGxldCBtZW51TWluV2lkdGggPSBtZW51TWluV2lkdGhTdGF0ZTtcblxuICBpZiAoIWF1dG9XaWR0aCAmJiBpc09wZW5Db250cm9sbGVkICYmIGRpc3BsYXlOb2RlKSB7XG4gICAgbWVudU1pbldpZHRoID0gZGlzcGxheU5vZGUuY2xpZW50V2lkdGg7XG4gIH1cblxuICBsZXQgdGFiSW5kZXg7XG5cbiAgaWYgKHR5cGVvZiB0YWJJbmRleFByb3AgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGFiSW5kZXggPSB0YWJJbmRleFByb3A7XG4gIH0gZWxzZSB7XG4gICAgdGFiSW5kZXggPSBkaXNhYmxlZCA/IG51bGwgOiAwO1xuICB9XG5cbiAgY29uc3QgYnV0dG9uSWQgPSBTZWxlY3REaXNwbGF5UHJvcHMuaWQgfHwgKG5hbWUgPyBgbXVpLWNvbXBvbmVudC1zZWxlY3QtJHtuYW1lfWAgOiB1bmRlZmluZWQpO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB2YXJpYW50LFxuICAgIHZhbHVlLFxuICAgIG9wZW5cbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlRGlzcGxheVJlZixcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogW2xhYmVsSWQsIGJ1dHRvbklkXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpIHx8IHVuZGVmaW5lZCxcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgb25Gb2N1czogb25Gb2N1c1xuICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNlbGVjdCwgY2xhc3NOYW1lLCBTZWxlY3REaXNwbGF5UHJvcHMuY2xhc3NOYW1lKSAvLyBUaGUgaWQgaXMgcmVxdWlyZWQgZm9yIHByb3BlciBhMTF5XG4gICAgICAsXG4gICAgICBpZDogYnV0dG9uSWQsXG4gICAgICBjaGlsZHJlbjogaXNFbXB0eShkaXNwbGF5KSA/XG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBub3RyYW5zbGF0ZSBuZWVkZWQgd2hpbGUgR29vZ2xlIFRyYW5zbGF0ZSB3aWxsIG5vdCBmaXggemVyby13aWR0aCBzcGFjZSBpc3N1ZVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWRhbmdlclxuICAgICAgX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwibm90cmFuc2xhdGVcIixcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgICAgICB9XG4gICAgICB9KSA6IGRpc3BsYXlcbiAgICB9KSksIC8qI19fUFVSRV9fKi9fanN4KFNlbGVjdE5hdGl2ZUlucHV0LCBfZXh0ZW5kcyh7XG4gICAgICB2YWx1ZTogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsJykgOiB2YWx1ZSxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5uYXRpdmVJbnB1dCxcbiAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0sIG90aGVyKSksIC8qI19fUFVSRV9fKi9fanN4KFNlbGVjdEljb24sIHtcbiAgICAgIGFzOiBJY29uQ29tcG9uZW50LFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmljb24sXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSksIC8qI19fUFVSRV9fKi9fanN4KE1lbnUsIF9leHRlbmRzKHtcbiAgICAgIGlkOiBgbWVudS0ke25hbWUgfHwgJyd9YCxcbiAgICAgIGFuY2hvckVsOiBkaXNwbGF5Tm9kZSxcbiAgICAgIG9wZW46IG9wZW4sXG4gICAgICBvbkNsb3NlOiBoYW5kbGVDbG9zZSxcbiAgICAgIGFuY2hvck9yaWdpbjoge1xuICAgICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICAgIGhvcml6b250YWw6ICdjZW50ZXInXG4gICAgICB9LFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiB7XG4gICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgaG9yaXpvbnRhbDogJ2NlbnRlcidcbiAgICAgIH1cbiAgICB9LCBNZW51UHJvcHMsIHtcbiAgICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxhYmVsSWQsXG4gICAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgICAgZGlzYWJsZUxpc3RXcmFwOiB0cnVlXG4gICAgICB9LCBNZW51UHJvcHMuTWVudUxpc3RQcm9wcyksXG4gICAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7fSwgTWVudVByb3BzLlBhcGVyUHJvcHMsIHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBtaW5XaWR0aDogbWVudU1pbldpZHRoXG4gICAgICAgIH0sIE1lbnVQcm9wcy5QYXBlclByb3BzICE9IG51bGwgPyBNZW51UHJvcHMuUGFwZXJQcm9wcy5zdHlsZSA6IG51bGwpXG4gICAgICB9KSxcbiAgICAgIGNoaWxkcmVuOiBpdGVtc1xuICAgIH0pKV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNlbGVjdElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gICdhcmlhLWRlc2NyaWJlZGJ5JzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtbGFiZWwnOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPE1lbnVJdGVtPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHRvZ2dsZWQgb24gbW91bnQuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZC5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEltcGVyYXRpdmUgaGFuZGxlIGltcGxlbWVudGluZyBgeyB2YWx1ZTogVCwgbm9kZTogSFRNTEVsZW1lbnQsIGZvY3VzKCk6IHZvaWQgfWBcbiAgICogRXF1aXZhbGVudCB0byBgcmVmYFxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2VsZWN0SW5wdXQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTcgMTBsNSA1IDUtNXpcIlxufSksICdBcnJvd0Ryb3BEb3duJyk7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJbnB1dCcsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXQnLCBbJ3Jvb3QnLCAnZm9ybUNvbnRyb2wnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdjb2xvclNlY29uZGFyeScsICd1bmRlcmxpbmUnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdmdWxsV2lkdGgnLCAnaW5wdXQnLCAnaW5wdXRTaXplU21hbGwnLCAnaW5wdXRNdWx0aWxpbmUnLCAnaW5wdXRUeXBlU2VhcmNoJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyByZWZUeXBlLCBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgaW5wdXRDbGFzc2VzLCB7IGdldElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9pbnB1dENsYXNzZXMnO1xuaW1wb3J0IHsgcm9vdE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlciwgaW5wdXRPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyLCBJbnB1dEJhc2VSb290LCBJbnB1dEJhc2VDb21wb25lbnQgYXMgSW5wdXRCYXNlSW5wdXQgfSBmcm9tICcuLi9JbnB1dEJhc2UvSW5wdXRCYXNlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IElucHV0Um9vdCA9IHN0eWxlZChJbnB1dEJhc2VSb290LCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gWy4uLmlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlcihwcm9wcywgc3R5bGVzKSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiBzdHlsZXMudW5kZXJsaW5lXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgfSwgb3duZXJTdGF0ZS5mb3JtQ29udHJvbCAmJiB7XG4gICAgJ2xhYmVsICsgJic6IHtcbiAgICAgIG1hcmdpblRvcDogMTZcbiAgICB9XG4gIH0sICFvd25lclN0YXRlLmRpc2FibGVVbmRlcmxpbmUgJiYge1xuICAgICcmOmFmdGVyJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWlufWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICB9LFxuICAgIFtgJi4ke2lucHV0Q2xhc3Nlcy5mb2N1c2VkfTphZnRlcmBdOiB7XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknXG4gICAgfSxcbiAgICBbYCYuJHtpbnB1dENsYXNzZXMuZXJyb3J9OmFmdGVyYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknIC8vIGVycm9yIGlzIGFsd2F5cyB1bmRlcmxpbmVkIGluIHJlZFxuXG4gICAgfSxcbiAgICAnJjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHtib3R0b21MaW5lQ29sb3J9YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgfSxcbiAgICBbYCY6aG92ZXI6bm90KC4ke2lucHV0Q2xhc3Nlcy5kaXNhYmxlZH0pOmJlZm9yZWBdOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHt0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeX1gLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7Ym90dG9tTGluZUNvbG9yfWBcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke2lucHV0Q2xhc3Nlcy5kaXNhYmxlZH06YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgIH1cbiAgfSk7XG59KTtcbmNvbnN0IElucHV0SW5wdXQgPSBzdHlsZWQoSW5wdXRCYXNlSW5wdXQsIHtcbiAgbmFtZTogJ011aUlucHV0JyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKHt9KTtcbmNvbnN0IElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUlucHV0J1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgZGlzYWJsZVVuZGVybGluZSxcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHNQcm9wLFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICB0eXBlID0gJ3RleHQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfTtcbiAgY29uc3QgaW5wdXRDb21wb25lbnRzUHJvcHMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH1cbiAgfTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzID0gY29tcG9uZW50c1Byb3BzUHJvcCA/IGRlZXBtZXJnZShjb21wb25lbnRzUHJvcHNQcm9wLCBpbnB1dENvbXBvbmVudHNQcm9wcykgOiBpbnB1dENvbXBvbmVudHNQcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgIFJvb3Q6IElucHV0Um9vdCxcbiAgICAgIElucHV0OiBJbnB1dElucHV0XG4gICAgfSwgY29tcG9uZW50cyksXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIElucHV0QmFzZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2lucHV0J1xuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIGB0ZXh0YXJlYWAgZWxlbWVudCBpcyByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgYGlucHV0YCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiaW1wb3J0IHsgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL2Jhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGxlZElucHV0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlGaWxsZWRJbnB1dCcsIHNsb3QpO1xufVxuY29uc3QgZmlsbGVkSW5wdXRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRmlsbGVkSW5wdXQnLCBbJ3Jvb3QnLCAnY29sb3JTZWNvbmRhcnknLCAndW5kZXJsaW5lJywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnYWRvcm5lZFN0YXJ0JywgJ2Fkb3JuZWRFbmQnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdoaWRkZW5MYWJlbCcsICdpbnB1dCcsICdpbnB1dFNpemVTbWFsbCcsICdpbnB1dEhpZGRlbkxhYmVsJywgJ2lucHV0TXVsdGlsaW5lJywgJ2lucHV0QWRvcm5lZFN0YXJ0JywgJ2lucHV0QWRvcm5lZEVuZCddKTtcbmV4cG9ydCBkZWZhdWx0IGZpbGxlZElucHV0Q2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZGlzYWJsZVVuZGVybGluZVwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoaWRkZW5MYWJlbFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlZlR5cGUsIGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgZmlsbGVkSW5wdXRDbGFzc2VzLCB7IGdldEZpbGxlZElucHV0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9maWxsZWRJbnB1dENsYXNzZXMnO1xuaW1wb3J0IHsgcm9vdE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlciwgaW5wdXRPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyLCBJbnB1dEJhc2VSb290LCBJbnB1dEJhc2VDb21wb25lbnQgYXMgSW5wdXRCYXNlSW5wdXQgfSBmcm9tICcuLi9JbnB1dEJhc2UvSW5wdXRCYXNlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5cbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5cbmNvbnN0IEZpbGxlZElucHV0Um9vdCA9IHN0eWxlZChJbnB1dEJhc2VSb290LCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gWy4uLmlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlcihwcm9wcywgc3R5bGVzKSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiBzdHlsZXMudW5kZXJsaW5lXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wNiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJhY2tncm91bmRDb2xvcixcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICB9KSxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjA5KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEzKScsXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JcbiAgICAgIH1cbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5mb2N1c2VkfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3JcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJ1xuICAgIH1cbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiB7XG4gICAgJyY6YWZ0ZXInOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHt0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW59YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmZvY3VzZWR9OmFmdGVyYF06IHtcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5lcnJvcn06YWZ0ZXJgXToge1xuICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKScgLy8gZXJyb3IgaXMgYWx3YXlzIHVuZGVybGluZWQgaW4gcmVkXG5cbiAgICB9LFxuICAgICcmOmJlZm9yZSc6IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAke2JvdHRvbUxpbmVDb2xvcn1gLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICBjb250ZW50OiAnXCJcXFxcMDBhMFwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JvcmRlci1ib3R0b20tY29sb3InLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICB9LFxuICAgIFtgJjpob3Zlcjpub3QoLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSk6YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAke3RoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5fWBcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5kaXNhYmxlZH06YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ0xlZnQ6IDEyXG4gIH0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nUmlnaHQ6IDEyXG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgICBwYWRkaW5nOiAnMjVweCAxMnB4IDhweCdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nVG9wOiAyMSxcbiAgICBwYWRkaW5nQm90dG9tOiA0XG4gIH0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYge1xuICAgIHBhZGRpbmdUb3A6IDE2LFxuICAgIHBhZGRpbmdCb3R0b206IDE3XG4gIH0pKTtcbn0pO1xuY29uc3QgRmlsbGVkSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcGFkZGluZ1RvcDogMjUsXG4gIHBhZGRpbmdSaWdodDogMTIsXG4gIHBhZGRpbmdCb3R0b206IDgsXG4gIHBhZGRpbmdMZWZ0OiAxMixcbiAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICBjYXJldENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICdpbmhlcml0JyxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJ2luaGVyaXQnXG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDIxLFxuICBwYWRkaW5nQm90dG9tOiA0XG59LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHtcbiAgcGFkZGluZ1RvcDogMTYsXG4gIHBhZGRpbmdCb3R0b206IDE3XG59LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiB7XG4gIHBhZGRpbmdUb3A6IDAsXG4gIHBhZGRpbmdCb3R0b206IDAsXG4gIHBhZGRpbmdMZWZ0OiAwLFxuICBwYWRkaW5nUmlnaHQ6IDBcbn0sIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nTGVmdDogMFxufSwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nUmlnaHQ6IDBcbn0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ1RvcDogOCxcbiAgcGFkZGluZ0JvdHRvbTogOVxufSkpO1xuY29uc3QgRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHNQcm9wLFxuICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgIC8vIGRlY2xhcmUgaGVyZSB0byBwcmV2ZW50IHNwcmVhZGluZyB0byBET01cbiAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgbXVsdGlsaW5lID0gZmFsc2UsXG4gICAgdHlwZSA9ICd0ZXh0J1xuICB9ID0gcHJvcHMsXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmUsXG4gICAgdHlwZVxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcyA9IHtcbiAgICByb290OiB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSxcbiAgICBpbnB1dDoge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH1cbiAgfTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzID0gY29tcG9uZW50c1Byb3BzUHJvcCA/IGRlZXBtZXJnZShjb21wb25lbnRzUHJvcHNQcm9wLCBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcykgOiBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudHM6IF9leHRlbmRzKHtcbiAgICAgIFJvb3Q6IEZpbGxlZElucHV0Um9vdCxcbiAgICAgIElucHV0OiBGaWxsZWRJbnB1dElucHV0XG4gICAgfSwgY29tcG9uZW50cyksXG4gICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmlsbGVkSW5wdXQucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIElucHV0QmFzZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBJbnB1dC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIG5vdCBoYXZlIGFuIHVuZGVybGluZS5cbiAgICovXG4gIGRpc2FibGVVbmRlcmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBoaWRkZW4uXG4gICAqIFRoaXMgaXMgdXNlZCB0byBpbmNyZWFzZSBkZW5zaXR5IGZvciBhIGBGaWxsZWRJbnB1dGAuXG4gICAqIEJlIHN1cmUgdG8gYWRkIGBhcmlhLWxhYmVsYCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZGVuTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ25vbmUnYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSBgdGV4dGFyZWFgIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IEZpbGxlZElucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5cbnZhciBfSW5wdXQsIF9GaWxsZWRJbnB1dDtcblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaWRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJsYWJlbFwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hdGl2ZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgU2VsZWN0SW5wdXQgZnJvbSAnLi9TZWxlY3RJbnB1dCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmltcG9ydCBOYXRpdmVTZWxlY3RJbnB1dCBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IEZpbGxlZElucHV0IGZyb20gJy4uL0ZpbGxlZElucHV0JztcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gJy4uL091dGxpbmVkSW5wdXQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgcmV0dXJuIGNsYXNzZXM7XG59O1xuXG5jb25zdCBTZWxlY3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3QoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgbmFtZTogJ011aVNlbGVjdCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIGF1dG9XaWR0aCA9IGZhbHNlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wID0ge30sXG4gICAgY2xhc3NOYW1lLFxuICAgIGRlZmF1bHRPcGVuID0gZmFsc2UsXG4gICAgZGlzcGxheUVtcHR5ID0gZmFsc2UsXG4gICAgSWNvbkNvbXBvbmVudCA9IEFycm93RHJvcERvd25JY29uLFxuICAgIGlkLFxuICAgIGlucHV0LFxuICAgIGlucHV0UHJvcHMsXG4gICAgbGFiZWwsXG4gICAgbGFiZWxJZCxcbiAgICBNZW51UHJvcHMsXG4gICAgbXVsdGlwbGUgPSBmYWxzZSxcbiAgICBuYXRpdmUgPSBmYWxzZSxcbiAgICBvbkNsb3NlLFxuICAgIG9uT3BlbixcbiAgICBvcGVuLFxuICAgIHJlbmRlclZhbHVlLFxuICAgIFNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICB2YXJpYW50OiB2YXJpYW50UHJvcHMgPSAnb3V0bGluZWQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBpbnB1dENvbXBvbmVudCA9IG5hdGl2ZSA/IE5hdGl2ZVNlbGVjdElucHV0IDogU2VsZWN0SW5wdXQ7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnXVxuICB9KTtcbiAgY29uc3QgdmFyaWFudCA9IGZjcy52YXJpYW50IHx8IHZhcmlhbnRQcm9wcztcbiAgY29uc3QgSW5wdXRDb21wb25lbnQgPSBpbnB1dCB8fCB7XG4gICAgc3RhbmRhcmQ6IF9JbnB1dCB8fCAoX0lucHV0ID0gLyojX19QVVJFX18qL19qc3goSW5wdXQsIHt9KSksXG4gICAgb3V0bGluZWQ6IC8qI19fUFVSRV9fKi9fanN4KE91dGxpbmVkSW5wdXQsIHtcbiAgICAgIGxhYmVsOiBsYWJlbFxuICAgIH0pLFxuICAgIGZpbGxlZDogX0ZpbGxlZElucHV0IHx8IChfRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovX2pzeChGaWxsZWRJbnB1dCwge30pKVxuICB9W3ZhcmlhbnRdO1xuXG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcFxuICB9KTtcblxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50UmVmID0gdXNlRm9ya1JlZihyZWYsIElucHV0Q29tcG9uZW50LnJlZik7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYFNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudCxcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIEljb25Db21wb25lbnQsXG4gICAgICB2YXJpYW50LFxuICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgLy8gV2UgcmVuZGVyIGEgc2VsZWN0LiBXZSBjYW4gaWdub3JlIHRoZSB0eXBlIHByb3ZpZGVkIGJ5IHRoZSBgSW5wdXRgLlxuICAgICAgbXVsdGlwbGVcbiAgICB9LCBuYXRpdmUgPyB7XG4gICAgICBpZFxuICAgIH0gOiB7XG4gICAgICBhdXRvV2lkdGgsXG4gICAgICBkZWZhdWx0T3BlbixcbiAgICAgIGRpc3BsYXlFbXB0eSxcbiAgICAgIGxhYmVsSWQsXG4gICAgICBNZW51UHJvcHMsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3BlbixcbiAgICAgIHJlbmRlclZhbHVlLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAgIGlkXG4gICAgICB9LCBTZWxlY3REaXNwbGF5UHJvcHMpXG4gICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgY2xhc3NlczogaW5wdXRQcm9wcyA/IGRlZXBtZXJnZShjbGFzc2VzLCBpbnB1dFByb3BzLmNsYXNzZXMpIDogY2xhc3Nlc1xuICAgIH0sIGlucHV0ID8gaW5wdXQucHJvcHMuaW5wdXRQcm9wcyA6IHt9KVxuICB9LCBtdWx0aXBsZSAmJiBuYXRpdmUgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJyA/IHtcbiAgICBub3RjaGVkOiB0cnVlXG4gIH0gOiB7fSwge1xuICAgIHJlZjogaW5wdXRDb21wb25lbnRSZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KElucHV0Q29tcG9uZW50LnByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3QucHJvcFR5cGVzXG4vKiByZW1vdmUtcHJvcHR5cGVzICovXG49IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHdpZHRoIG9mIHRoZSBwb3BvdmVyIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSBpdGVtcyBpbnNpZGUgdGhlXG4gICAqIG1lbnUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGF0IGxlYXN0IHRoZSB3aWR0aCBvZiB0aGUgc2VsZWN0IGlucHV0LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b1dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGBNZW51SXRlbWAgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZSBhbmQgYG9wdGlvbmAgd2hlbiBgbmF0aXZlYCBpcyB0cnVlLlxuICAgKlxuICAgKiDimqDvuI9UaGUgYE1lbnVJdGVtYCBlbGVtZW50cyAqKm11c3QqKiBiZSBkaXJlY3QgZGVzY2VuZGFudHMgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IG9wZW4uIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZCAoaS5lLiB0aGUgYG9wZW5gIHByb3AgaXMgbm90IGRlZmluZWQpLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWZhdWx0T3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdmFsdWUgaXMgZGlzcGxheWVkIGV2ZW4gaWYgbm8gaXRlbXMgYXJlIHNlbGVjdGVkLlxuICAgKlxuICAgKiBJbiBvcmRlciB0byBkaXNwbGF5IGEgbWVhbmluZ2Z1bCB2YWx1ZSwgYSBmdW5jdGlvbiBjYW4gYmUgcGFzc2VkIHRvIHRoZSBgcmVuZGVyVmFsdWVgIHByb3Agd2hpY2hcbiAgICogcmV0dXJucyB0aGUgdmFsdWUgdG8gYmUgZGlzcGxheWVkIHdoZW4gbm8gaXRlbXMgYXJlIHNlbGVjdGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2hlbiB1c2luZyB0aGlzIHByb3AsIG1ha2Ugc3VyZSB0aGUgbGFiZWwgZG9lc24ndCBvdmVybGFwIHdpdGggdGhlIGVtcHR5IGRpc3BsYXllZCB2YWx1ZS5cbiAgICogVGhlIGxhYmVsIHNob3VsZCBlaXRoZXIgYmUgaGlkZGVuIG9yIGZvcmNlZCB0byBhIHNocnVuayBzdGF0ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKiBAZGVmYXVsdCBBcnJvd0Ryb3BEb3duSWNvblxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgYGlkYCBvZiB0aGUgd3JhcHBlciBlbGVtZW50IG9yIHRoZSBgc2VsZWN0YCBlbGVtZW50IHdoZW4gYG5hdGl2ZWAuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQW4gYElucHV0YCBlbGVtZW50OyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgbWF0ZXJpYWwtdWkgc3BlY2lmaWMgYElucHV0YC5cbiAgICovXG4gIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFdoZW4gYG5hdGl2ZWAgaXMgYHRydWVgLCB0aGUgYXR0cmlidXRlcyBhcmUgYXBwbGllZCBvbiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFNlZSBbT3V0bGluZWRJbnB1dCNsYWJlbF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8jcHJvcHMpXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHVzZXMgYSBuYXRpdmUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG5hdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U2VsZWN0Q2hhbmdlRXZlbnQ8VD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChhbnkpLlxuICAgKiAqKldhcm5pbmcqKjogVGhpcyBpcyBhIGdlbmVyaWMgZXZlbnQgbm90IGEgY2hhbmdlIGV2ZW50IHVubGVzcyB0aGUgY2hhbmdlIGV2ZW50IGlzIGNhdXNlZCBieSBicm93c2VyIGF1dG9maWxsLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZCB3aGVuIGBuYXRpdmVgIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNsaWNrYWJsZSBkaXYgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdERpc3BsYXlQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgYGlucHV0YCB2YWx1ZS4gUHJvdmlkaW5nIGFuIGVtcHR5IHN0cmluZyB3aWxsIHNlbGVjdCBubyBvcHRpb25zLlxuICAgKiBTZXQgdG8gYW4gZW1wdHkgc3RyaW5nIGAnJ2AgaWYgeW91IGRvbid0IHdhbnQgYW55IG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucyB0byBiZSBzZWxlY3RlZC5cbiAgICpcbiAgICogSWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdCBpdCBtdXN0IGhhdmUgcmVmZXJlbmNlIGVxdWFsaXR5IHdpdGggdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICogSWYgdGhlIHZhbHVlIGlzIG5vdCBhbiBvYmplY3QsIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gbXVzdCBtYXRjaCB3aXRoIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcblNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDJDNi40NyAyIDIgNi40NyAyIDEyczQuNDcgMTAgMTAgMTAgMTAtNC40NyAxMC0xMFMxNy41MyAyIDEyIDJ6bTUgMTMuNTlMMTUuNTkgMTcgMTIgMTMuNDEgOC40MSAxNyA3IDE1LjU5IDEwLjU5IDEyIDcgOC40MSA4LjQxIDcgMTIgMTAuNTkgMTUuNTkgNyAxNyA4LjQxIDEzLjQxIDEyIDE3IDE1LjU5elwiXG59KSwgJ0NhbmNlbCcpOyIsImltcG9ydCB7IGdlbmVyYXRlVXRpbGl0eUNsYXNzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlwVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDaGlwJywgc2xvdCk7XG59XG5jb25zdCBjaGlwQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNoaXAnLCBbJ3Jvb3QnLCAnc2l6ZVNtYWxsJywgJ3NpemVNZWRpdW0nLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2Rpc2FibGVkJywgJ2NsaWNrYWJsZScsICdjbGlja2FibGVDb2xvclByaW1hcnknLCAnY2xpY2thYmxlQ29sb3JTZWNvbmRhcnknLCAnZGVsZXRhYmxlJywgJ2RlbGV0YWJsZUNvbG9yUHJpbWFyeScsICdkZWxldGFibGVDb2xvclNlY29uZGFyeScsICdvdXRsaW5lZCcsICdmaWxsZWQnLCAnb3V0bGluZWRQcmltYXJ5JywgJ291dGxpbmVkU2Vjb25kYXJ5JywgJ2F2YXRhcicsICdhdmF0YXJTbWFsbCcsICdhdmF0YXJNZWRpdW0nLCAnYXZhdGFyQ29sb3JQcmltYXJ5JywgJ2F2YXRhckNvbG9yU2Vjb25kYXJ5JywgJ2ljb24nLCAnaWNvblNtYWxsJywgJ2ljb25NZWRpdW0nLCAnaWNvbkNvbG9yUHJpbWFyeScsICdpY29uQ29sb3JTZWNvbmRhcnknLCAnbGFiZWwnLCAnbGFiZWxTbWFsbCcsICdsYWJlbE1lZGl1bScsICdkZWxldGVJY29uJywgJ2RlbGV0ZUljb25TbWFsbCcsICdkZWxldGVJY29uTWVkaXVtJywgJ2RlbGV0ZUljb25Db2xvclByaW1hcnknLCAnZGVsZXRlSWNvbkNvbG9yU2Vjb25kYXJ5JywgJ2RlbGV0ZUljb25PdXRsaW5lZENvbG9yUHJpbWFyeScsICdkZWxldGVJY29uT3V0bGluZWRDb2xvclNlY29uZGFyeScsICdmb2N1c1Zpc2libGUnXSk7XG5leHBvcnQgZGVmYXVsdCBjaGlwQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXZhdGFyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xpY2thYmxlXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkZWxldGVJY29uXCIsIFwiZGlzYWJsZWRcIiwgXCJpY29uXCIsIFwibGFiZWxcIiwgXCJvbkNsaWNrXCIsIFwib25EZWxldGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBDYW5jZWxJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DYW5jZWwnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdW5zdXBwb3J0ZWRQcm9wIGZyb20gJy4uL3V0aWxzL3Vuc3VwcG9ydGVkUHJvcCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBjaGlwQ2xhc3NlcywgeyBnZXRDaGlwVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jaGlwQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuXG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlZCxcbiAgICBzaXplLFxuICAgIGNvbG9yLFxuICAgIG9uRGVsZXRlLFxuICAgIGNsaWNrYWJsZSxcbiAgICB2YXJpYW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGNsaWNrYWJsZSAmJiAnY2xpY2thYmxlJywgY2xpY2thYmxlICYmIGBjbGlja2FibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgb25EZWxldGUgJiYgJ2RlbGV0YWJsZScsIG9uRGVsZXRlICYmIGBkZWxldGFibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYCR7dmFyaWFudH0ke2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIGxhYmVsOiBbJ2xhYmVsJywgYGxhYmVsJHtjYXBpdGFsaXplKHNpemUpfWBdLFxuICAgIGF2YXRhcjogWydhdmF0YXInLCBgYXZhdGFyJHtjYXBpdGFsaXplKHNpemUpfWAsIGBhdmF0YXJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUoc2l6ZSl9YCwgYGljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgZGVsZXRlSWNvbjogWydkZWxldGVJY29uJywgYGRlbGV0ZUljb24ke2NhcGl0YWxpemUoc2l6ZSl9YCwgYGRlbGV0ZUljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYGRlbGV0ZUljb25PdXRsaW5lZENvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENoaXBVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcblxuY29uc3QgQ2hpcFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNoaXAnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgY29sb3IsXG4gICAgICBjbGlja2FibGUsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIHNpemUsXG4gICAgICB2YXJpYW50XG4gICAgfSA9IG93bmVyU3RhdGU7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiBzdHlsZXMuYXZhdGFyXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXTogc3R5bGVzW2BhdmF0YXIke2NhcGl0YWxpemUoc2l6ZSl9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiBzdHlsZXNbYGF2YXRhckNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBzdHlsZXMuaWNvblxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUoc2l6ZSl9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvbn1gXTogc3R5bGVzW2BpY29uQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHN0eWxlcy5kZWxldGVJY29uXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHN0eWxlc1tgZGVsZXRlSWNvbiR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5kZWxldGVJY29ufWBdOiBzdHlsZXNbYGRlbGV0ZUljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXTogc3R5bGVzW2BkZWxldGVJY29uT3V0bGluZWRDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgICB9LCBzdHlsZXMucm9vdCwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKHNpemUpfWBdLCBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSwgY2xpY2thYmxlICYmIHN0eWxlcy5jbGlja2FibGUsIGNsaWNrYWJsZSAmJiBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIHN0eWxlc1tgY2xpY2thYmxlQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfSlgXSwgb25EZWxldGUgJiYgc3R5bGVzLmRlbGV0YWJsZSwgb25EZWxldGUgJiYgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGRlbGV0YWJsZUNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSwgc3R5bGVzW3ZhcmlhbnRdLCB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHN0eWxlc1tgb3V0bGluZWQke2NhcGl0YWxpemUoY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgZGVsZXRlSWNvbkNvbG9yID0gYWxwaGEodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIDAuMjYpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKSxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBoZWlnaHQ6IDMyLFxuICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLFxuICAgIGJvcmRlclJhZGl1czogMzIgLyAyLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdyddKSxcbiAgICAvLyBsYWJlbCB3aWxsIGluaGVyaXQgdGhpcyBmcm9tIHJvb3QsIHRoZW4gYGNsaWNrYWJsZWAgY2xhc3Mgb3ZlcnJpZGVzIHRoaXMgZm9yIGJvdGhcbiAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6IDAsXG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICBib3JkZXI6IDAsXG4gICAgLy8gUmVtb3ZlIGBidXR0b25gIGJvcmRlclxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIGBidXR0b25gIHBhZGRpbmdcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBbYCYuJHtjaGlwQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5LFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXG4gICAgfSxcbiAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiB7XG4gICAgICBtYXJnaW5MZWZ0OiA1LFxuICAgICAgbWFyZ2luUmlnaHQ6IC02LFxuICAgICAgd2lkdGg6IDI0LFxuICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMilcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5hdmF0YXJDb2xvclByaW1hcnl9YF06IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuZGFya1xuICAgIH0sXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhckNvbG9yU2Vjb25kYXJ5fWBdOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5kYXJrXG4gICAgfSxcbiAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyU21hbGx9YF06IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICBtYXJnaW5SaWdodDogLTQsXG4gICAgICB3aWR0aDogMTgsXG4gICAgICBoZWlnaHQ6IDE4LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMClcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBfZXh0ZW5kcyh7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgICBtYXJnaW5SaWdodDogLTZcbiAgICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgICAgZm9udFNpemU6IDE4LFxuICAgICAgbWFyZ2luTGVmdDogNCxcbiAgICAgIG1hcmdpblJpZ2h0OiAtNFxuICAgIH0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSksXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IF9leHRlbmRzKHtcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6IGRlbGV0ZUljb25Db2xvcixcbiAgICAgIGZvbnRTaXplOiAyMixcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgbWFyZ2luOiAnMCA1cHggMCAtNnB4JyxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogYWxwaGEoZGVsZXRlSWNvbkNvbG9yLCAwLjQpXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgIG1hcmdpblJpZ2h0OiA0LFxuICAgICAgbWFyZ2luTGVmdDogLTRcbiAgICB9LCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYge1xuICAgICAgY29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uY29udHJhc3RUZXh0LCAwLjcpLFxuICAgICAgJyY6aG92ZXIsICY6YWN0aXZlJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHRcbiAgICAgIH1cbiAgICB9KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIGhlaWdodDogMjRcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHRcbiAgfSwgb3duZXJTdGF0ZS5vbkRlbGV0ZSAmJiB7XG4gICAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LCBvd25lclN0YXRlLm9uRGVsZXRlICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gICAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFya1xuICAgIH1cbiAgfSk7XG59LCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY2xpY2thYmxlICYmIHtcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gICcmOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWQsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSlcbiAgfSxcbiAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZCwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5ICsgdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5KVxuICB9LFxuICAnJjphY3RpdmUnOiB7XG4gICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzFdXG4gIH1cbn0sIG93bmVyU3RhdGUuY2xpY2thYmxlICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIFtgJjpob3ZlciwgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5kYXJrXG4gIH1cbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgYm9yZGVyOiBgMXB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF0gOiB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXX1gLFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5jbGlja2FibGV9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyXG4gIH0sXG4gIFtgJi4ke2NoaXBDbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDRcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhclNtYWxsfWBdOiB7XG4gICAgbWFyZ2luTGVmdDogMlxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvbn1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDRcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmljb25TbWFsbH1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDJcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHtcbiAgICBtYXJnaW5SaWdodDogNVxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvblNtYWxsfWBdOiB7XG4gICAgbWFyZ2luUmlnaHQ6IDNcbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIGNvbG9yOiB0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gIGJvcmRlcjogYDFweCBzb2xpZCAke2FscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC43KX1gLFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5jbGlja2FibGV9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KVxuICB9LFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5KVxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXToge1xuICAgIGNvbG9yOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIDAuNyksXG4gICAgJyY6aG92ZXIsICY6YWN0aXZlJzoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICAgIH1cbiAgfVxufSkpO1xuY29uc3QgQ2hpcExhYmVsID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQ2hpcCcsXG4gIHNsb3Q6ICdMYWJlbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZVxuICAgIH0gPSBvd25lclN0YXRlO1xuICAgIHJldHVybiBbc3R5bGVzLmxhYmVsLCBzdHlsZXNbYGxhYmVsJHtjYXBpdGFsaXplKHNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgcGFkZGluZ0xlZnQ6IDEyLFxuICBwYWRkaW5nUmlnaHQ6IDEyLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDgsXG4gIHBhZGRpbmdSaWdodDogOFxufSkpO1xuXG5mdW5jdGlvbiBpc0RlbGV0ZUtleWJvYXJkRXZlbnQoa2V5Ym9hcmRFdmVudCkge1xuICByZXR1cm4ga2V5Ym9hcmRFdmVudC5rZXkgPT09ICdCYWNrc3BhY2UnIHx8IGtleWJvYXJkRXZlbnQua2V5ID09PSAnRGVsZXRlJztcbn1cbi8qKlxuICogQ2hpcHMgcmVwcmVzZW50IGNvbXBsZXggZW50aXRpZXMgaW4gc21hbGwgYmxvY2tzLCBzdWNoIGFzIGEgY29udGFjdC5cbiAqL1xuXG5cbmNvbnN0IENoaXAgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaGlwKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDaGlwJ1xuICB9KTtcblxuICBjb25zdCB7XG4gICAgYXZhdGFyOiBhdmF0YXJQcm9wLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjbGlja2FibGU6IGNsaWNrYWJsZVByb3AsXG4gICAgY29sb3IgPSAnZGVmYXVsdCcsXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRQcm9wLFxuICAgIGRlbGV0ZUljb246IGRlbGV0ZUljb25Qcm9wLFxuICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgaWNvbjogaWNvblByb3AsXG4gICAgbGFiZWwsXG4gICAgb25DbGljayxcbiAgICBvbkRlbGV0ZSxcbiAgICBvbktleURvd24sXG4gICAgb25LZXlVcCxcbiAgICBzaXplID0gJ21lZGl1bScsXG4gICAgdmFyaWFudCA9ICdmaWxsZWQnXG4gIH0gPSBwcm9wcyxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICBjb25zdCBjaGlwUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaXBSZWYsIHJlZik7XG5cbiAgY29uc3QgaGFuZGxlRGVsZXRlSWNvbkNsaWNrID0gZXZlbnQgPT4ge1xuICAgIC8vIFN0b3AgdGhlIGV2ZW50IGZyb20gYnViYmxpbmcgdXAgdG8gdGhlIGBDaGlwYFxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKG9uRGVsZXRlKSB7XG4gICAgICBvbkRlbGV0ZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgLy8gSWdub3JlIGV2ZW50cyBmcm9tIGNoaWxkcmVuIG9mIGBDaGlwYC5cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0ICYmIGlzRGVsZXRlS2V5Ym9hcmRFdmVudChldmVudCkpIHtcbiAgICAgIC8vIFdpbGwgYmUgaGFuZGxlZCBpbiBrZXlVcCwgb3RoZXJ3aXNlIHNvbWUgYnJvd3NlcnNcbiAgICAgIC8vIG1pZ2h0IGluaXQgbmF2aWdhdGlvblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVLZXlVcCA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlbnRzIGZyb20gY2hpbGRyZW4gb2YgYENoaXBgLlxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlmIChvbkRlbGV0ZSAmJiBpc0RlbGV0ZUtleWJvYXJkRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgIG9uRGVsZXRlKGV2ZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJyAmJiBjaGlwUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2hpcFJlZi5jdXJyZW50LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25LZXlVcCkge1xuICAgICAgb25LZXlVcChldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNsaWNrYWJsZSA9IGNsaWNrYWJsZVByb3AgIT09IGZhbHNlICYmIG9uQ2xpY2sgPyB0cnVlIDogY2xpY2thYmxlUHJvcDtcbiAgY29uc3Qgc21hbGwgPSBzaXplID09PSAnc21hbGwnO1xuICBjb25zdCBjb21wb25lbnQgPSBjbGlja2FibGUgfHwgb25EZWxldGUgPyBCdXR0b25CYXNlIDogQ29tcG9uZW50UHJvcCB8fCAnZGl2JztcblxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIHNpemUsXG4gICAgY29sb3IsXG4gICAgb25EZWxldGU6ICEhb25EZWxldGUsXG4gICAgY2xpY2thYmxlLFxuICAgIHZhcmlhbnRcbiAgfSk7XG5cbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBtb3JlUHJvcHMgPSBjb21wb25lbnQgPT09IEJ1dHRvbkJhc2UgPyBfZXh0ZW5kcyh7XG4gICAgY29tcG9uZW50OiBDb21wb25lbnRQcm9wIHx8ICdkaXYnLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xhc3Nlcy5mb2N1c1Zpc2libGVcbiAgfSwgb25EZWxldGUgJiYge1xuICAgIGRpc2FibGVSaXBwbGU6IHRydWVcbiAgfSkgOiB7fTtcbiAgbGV0IGRlbGV0ZUljb24gPSBudWxsO1xuXG4gIGlmIChvbkRlbGV0ZSkge1xuICAgIGNvbnN0IGN1c3RvbUNsYXNzZXMgPSBjbHN4KGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgKHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgPyBjbGFzc2VzW2BkZWxldGVJY29uT3V0bGluZWRDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0gOiBjbGFzc2VzW2BkZWxldGVJY29uQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdKSwgc21hbGwgJiYgY2xhc3Nlcy5kZWxldGVJY29uU21hbGwpO1xuICAgIGRlbGV0ZUljb24gPSBkZWxldGVJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZGVsZXRlSWNvblByb3ApID8gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChkZWxldGVJY29uUHJvcCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGRlbGV0ZUljb25Qcm9wLnByb3BzLmNsYXNzTmFtZSwgY2xhc3Nlcy5kZWxldGVJY29uLCBjdXN0b21DbGFzc2VzKSxcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZURlbGV0ZUljb25DbGlja1xuICAgIH0pIDogLyojX19QVVJFX18qL19qc3goQ2FuY2VsSWNvbiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZGVsZXRlSWNvbiwgY3VzdG9tQ2xhc3NlcyksXG4gICAgICBvbkNsaWNrOiBoYW5kbGVEZWxldGVJY29uQ2xpY2tcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBhdmF0YXIgPSBudWxsO1xuXG4gIGlmIChhdmF0YXJQcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChhdmF0YXJQcm9wKSkge1xuICAgIGF2YXRhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoYXZhdGFyUHJvcCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYXZhdGFyLCBhdmF0YXJQcm9wLnByb3BzLmNsYXNzTmFtZSlcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBpY29uID0gbnVsbDtcblxuICBpZiAoaWNvblByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGljb25Qcm9wKSkge1xuICAgIGljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGljb25Qcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pY29uLCBpY29uUHJvcC5wcm9wcy5jbGFzc05hbWUpXG4gICAgfSk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChhdmF0YXIgJiYgaWNvbikge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBUaGUgQ2hpcCBjb21wb25lbnQgY2FuIG5vdCBoYW5kbGUgdGhlIGF2YXRhciAnICsgJ2FuZCB0aGUgaWNvbiBwcm9wIGF0IHRoZSBzYW1lIHRpbWUuIFBpY2sgb25lLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoQ2hpcFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZGlzYWJsZWQ6IGNsaWNrYWJsZSAmJiBkaXNhYmxlZCA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBtb3JlUHJvcHMsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFthdmF0YXIgfHwgaWNvbiwgLyojX19QVVJFX18qL19qc3goQ2hpcExhYmVsLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5sYWJlbCksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgfSksIGRlbGV0ZUljb25dXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2hpcC5wcm9wVHlwZXNcbi8qIHJlbW92ZS1wcm9wdHlwZXMgKi9cbj0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIEF2YXRhciBlbGVtZW50IHRvIGRpc3BsYXkuXG4gICAqL1xuICBhdmF0YXI6IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaXNuJ3Qgc3VwcG9ydGVkLlxuICAgKiBVc2UgdGhlIGBjb21wb25lbnRgIHByb3AgaWYgeW91IG5lZWQgdG8gY2hhbmdlIHRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogdW5zdXBwb3J0ZWRQcm9wLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaXAgd2lsbCBhcHBlYXIgY2xpY2thYmxlLCBhbmQgd2lsbCByYWlzZSB3aGVuIHByZXNzZWQsXG4gICAqIGV2ZW4gaWYgdGhlIG9uQ2xpY2sgcHJvcCBpcyBub3QgZGVmaW5lZC5cbiAgICogSWYgYGZhbHNlYCwgdGhlIGNoaXAgd2lsbCBub3QgYXBwZWFyIGNsaWNrYWJsZSwgZXZlbiBpZiBvbkNsaWNrIHByb3AgaXMgZGVmaW5lZC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsXG4gICAqIGFsb25nIHdpdGggdGhlIGNvbXBvbmVudCBwcm9wIHRvIGluZGljYXRlIGFuIGFuY2hvciBDaGlwIGlzIGNsaWNrYWJsZS5cbiAgICogTm90ZTogdGhpcyBjb250cm9scyB0aGUgVUkgYW5kIGRvZXMgbm90IGFmZmVjdCB0aGUgb25DbGljayBldmVudC5cbiAgICovXG4gIGNsaWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgZGVsZXRlIGljb24gZWxlbWVudC4gU2hvd24gb25seSBpZiBgb25EZWxldGVgIGlzIHNldC5cbiAgICovXG4gIGRlbGV0ZUljb246IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEljb24gZWxlbWVudC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZGVsZXRlIGljb24gaXMgY2xpY2tlZC5cbiAgICogSWYgc2V0LCB0aGUgZGVsZXRlIGljb24gd2lsbCBiZSBzaG93bi5cbiAgICovXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdmaWxsZWQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENoaXA7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gXCJAbXVpL21hdGVyaWFsL3N0eWxlc1wiO1xuaW1wb3J0IEJveCBmcm9tIFwiQG11aS9tYXRlcmlhbC9Cb3hcIjtcbmltcG9ydCBPdXRsaW5lZElucHV0IGZyb20gXCJAbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXRcIjtcbmltcG9ydCBJbnB1dExhYmVsIGZyb20gXCJAbXVpL21hdGVyaWFsL0lucHV0TGFiZWxcIjtcbmltcG9ydCBNZW51SXRlbSBmcm9tIFwiQG11aS9tYXRlcmlhbC9NZW51SXRlbVwiO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gXCJAbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sXCI7XG5pbXBvcnQgU2VsZWN0IGZyb20gXCJAbXVpL21hdGVyaWFsL1NlbGVjdFwiO1xuaW1wb3J0IENoaXAgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvQ2hpcFwiO1xuXG5jb25zdCBJVEVNX0hFSUdIVCA9IDQ4O1xuY29uc3QgSVRFTV9QQURESU5HX1RPUCA9IDg7XG5jb25zdCBNZW51UHJvcHMgPSB7XG4gICAgUGFwZXJQcm9wczoge1xuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgbWF4SGVpZ2h0OiBJVEVNX0hFSUdIVCAqIDQuNSArIElURU1fUEFERElOR19UT1AsXG4gICAgICAgICAgICB3aWR0aDogMjUwXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5mdW5jdGlvbiBnZXRTdHlsZXMobmFtZSwgcGVyc29uTmFtZSwgdGhlbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmb250V2VpZ2h0OlxuICAgICAgICAgICAgcGVyc29uTmFtZS5pbmRleE9mKG5hbWUpID09PSAtMSA/IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodFJlZ3VsYXIgOiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW1cbiAgICB9O1xufVxuXG5jb25zdCBNdWx0aXBsZURyb3Bkb3duID0gKHsgaXRlbXMsIHNldEl0ZW1zIH0pID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgW2Nob3Nlbkl0ZW0sIHNldENob3Nlbkl0ZW1dID0gdXNlU3RhdGUoW10pO1xuXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRhcmdldDogeyB2YWx1ZSB9XG4gICAgICAgIH0gPSBldmVudDtcbiAgICAgICAgc2V0Q2hvc2VuSXRlbShcbiAgICAgICAgICAgIC8vIE9uIGF1dG9maWxsIHdlIGdldCBhIHN0cmluZ2lmaWVkIHZhbHVlLlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoXCIsXCIpIDogdmFsdWVcbiAgICAgICAgKTtcbiAgICAgICAgc2V0SXRlbXMoXG4gICAgICAgICAgICAvLyBPbiBhdXRvZmlsbCB3ZSBnZXQgYSBzdHJpbmdpZmllZCB2YWx1ZS5cbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KFwiLFwiKSA6IHZhbHVlXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8Rm9ybUNvbnRyb2wgc3g9e3sgd2lkdGg6IFwiMTAwJVwiIH19PlxuICAgICAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxJZD1cImRlbW8tbXVsdGlwbGUtY2hpcC1sYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgIGlkPVwiZGVtby1tdWx0aXBsZS1jaGlwXCJcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2Nob3Nlbkl0ZW19XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIGlucHV0PXs8T3V0bGluZWRJbnB1dCBpZD1cInNlbGVjdC1tdWx0aXBsZS1jaGlwXCIgLz59XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclZhbHVlPXsoc2VsZWN0ZWQpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGZsZXhXcmFwOiBcIndyYXBcIiwgZ2FwOiAwLjUgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3NlbGVjdGVkLm1hcCgodmFsdWUpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoaXAga2V5PXt2YWx1ZX0gbGFiZWw9e3ZhbHVlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIE1lbnVQcm9wcz17TWVudVByb3BzfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2l0ZW1zLm1hcCgoaXRlbSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPE1lbnVJdGVtIGtleT17aXRlbX0gdmFsdWU9e2l0ZW19IHN0eWxlPXtnZXRTdHlsZXMoaXRlbSwgY2hvc2VuSXRlbSwgdGhlbWUpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE11bHRpcGxlRHJvcGRvd247XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9TZWFyY2hGb3JtLnNjc3NcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvbi5qc1wiO1xuaW1wb3J0IEJ1dHRvblR5cGVzIGZyb20gXCIuLi8uLi9jb3JlL0J1dHRvbi9CdXR0b25UeXBlc1wiO1xuaW1wb3J0IEZvcm0gZnJvbSBcIi4uLy4uL2NvcmUvRm9ybS9Gb3JtLmpzXCI7XG5pbXBvcnQgSW5wdXRGaWVsZCBmcm9tIFwiLi4vLi4vY29yZS9JbnB1dEZpZWxkL0lucHV0RmllbGQuanNcIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRzL1RleHRJbnB1dC9UZXh0SW5wdXRcIjtcbmltcG9ydCBMYWJlbCBmcm9tIFwiLi4vLi4vY29yZS9MYWJlbC9MYWJlbC5qc1wiO1xuaW1wb3J0IFRvZ2dsZUZpZWxkIGZyb20gXCIuLi8uLi9jb3JlL1RvZ2dsZUZpZWxkL1RvZ2dsZUZpZWxkLmpzXCI7XG5pbXBvcnQgVG9nZ2xlIGZyb20gXCIuLi8uLi9jb3JlL1RvZ2dsZS9Ub2dnbGUuanNcIjtcbmltcG9ydCBEcm9wZG93biBmcm9tIFwiLi4vLi4vY29yZS9Ecm9wZG93bi9Ecm9wZG93bi5qc1wiO1xuaW1wb3J0IE1lZXRpbmdGb3JtYXRzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL01lZXRpbmdGb3JtYXRzXCI7XG5pbXBvcnQgU3ViamVjdHMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvU3ViamVjdHMuanNcIjtcbmltcG9ydCBUaW1lUmFuZ2UgZnJvbSBcIi4uLy4uL2NvcmUvUmFuZ2UvVGltZVJhbmdlXCI7XG5pbXBvcnQgTXVsdGlwbGVEcm9wZG93biBmcm9tIFwiLi4vLi4vY29yZS9Ecm9wZG93bi9NdWx0aXBsZURyb3Bkb3duXCI7XG5pbXBvcnQgeyBEYXlzLCBNZWV0aW5nRnJlcXVlbmNpZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9UaW1lXCI7XG5cbi8qKlxuICogUmVuZGVycyBhIHNlYXJjaCBmb3JtIGZvciBzZWFyY2hpbmcgc3R1ZHkgZ3JvdXBzXG4gKiBAYXV0aG9yIFN0YWNleSBQb3BlbmZvb3NlIGFuZCBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAxLzI3LzIwMjJcbiAqL1xuY29uc3QgU2VhcmNoRm9ybSA9ICh7XG4gICAgc2VhcmNoVGVybSxcbiAgICBzdWJqZWN0LFxuICAgIGlzQXNzb2NpYXRlZFdpdGhTY2hvb2wsXG4gICAgbWVldGluZ0Zvcm1hdCxcbiAgICB0eXBlLFxuICAgIHRpbWVSYW5nZSxcbiAgICBkYXlzLFxuICAgIG1lZXRpbmdGcmVxdWVuY2llcyxcbiAgICB1cGRhdGVTZWFyY2hUZXJtLFxuICAgIHVwZGF0ZVN1YmplY3QsXG4gICAgdXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbCxcbiAgICB1cGRhdGVNZWV0aW5nRm9ybWF0LFxuICAgIHVwZGF0ZVR5cGUsXG4gICAgdXBkYXRlVGltZVJhbmdlLFxuICAgIHVwZGF0ZURheXMsXG4gICAgdXBkYXRlTWVldGluZ0ZyZXF1ZW5jaWVzLFxuICAgIHN1Ym1pdFNlYXJjaCxcbiAgICB1c2VyU2Nob29sXG59KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtzdWJtaXRTZWFyY2h9IGNsYXNzTmFtZT1cInNlYXJjaC1mb3JtXCI+XG4gICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbD5TZWFyY2ggVGVybTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgdmFsdWU9e3NlYXJjaFRlcm19IG9uQ2hhbmdlPXt1cGRhdGVTZWFyY2hUZXJtfSAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPkNhdGVnb3J5PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duIG9wdGlvbnM9e09iamVjdC5rZXlzKFN1YmplY3RzKX0gdmFsdWU9e3N1YmplY3R9IG9uQ2hhbmdlPXt1cGRhdGVTdWJqZWN0fSAvPlxuICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsPk1lZXRpbmcgRnJlcXVlbmN5PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPE11bHRpcGxlRHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zPXtbLi4uT2JqZWN0LnZhbHVlcyhNZWV0aW5nRnJlcXVlbmNpZXMpXX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW1zPXt1cGRhdGVNZWV0aW5nRnJlcXVlbmNpZXN9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TWVldGluZyBEYXlzPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPE11bHRpcGxlRHJvcGRvd24gaXRlbXM9e1suLi5PYmplY3QudmFsdWVzKERheXMpXX0gc2V0SXRlbXM9e3VwZGF0ZURheXN9IC8+XG4gICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgIDxJbnB1dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TWVldGluZyBUaW1lIFJhbmdlPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGg0PlxuICAgICAgICAgICAgICAgICAgICAgICAge3RpbWVSYW5nZVswXX0gdG8ge3RpbWVSYW5nZVsxXX1cbiAgICAgICAgICAgICAgICAgICAgPC9oND5cbiAgICAgICAgICAgICAgICAgICAgPFRpbWVSYW5nZSB1cGRhdGVUaW1lUmFuZ2U9e3VwZGF0ZVRpbWVSYW5nZX0gLz5cbiAgICAgICAgICAgICAgICA8L0lucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWRlLWJ5LXNpZGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+TWVldGluZyBGb3JtYXQ8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17Wy4uLk9iamVjdC52YWx1ZXMoTWVldGluZ0Zvcm1hdHMpXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlTWVldGluZ0Zvcm1hdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17bWVldGluZ0Zvcm1hdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWw+VHlwZTwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd24gb3B0aW9ucz17W1wiR3JvdXBcIiwgXCJUdXRvclwiLCBcIk1peGVkXCJdfSBvbkNoYW5nZT17dXBkYXRlVHlwZX0gdmFsdWU9e3R5cGV9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSW5wdXRGaWVsZD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7dXNlclNjaG9vbCAhPT0gXCJcIiAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxUb2dnbGVGaWVsZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbD5TaG93IE9ubHkgR3JvdXBzIEFzc29jaWF0ZWQgd2l0aCB7dXNlclNjaG9vbH0/PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb2dnbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aXNBc3NvY2lhdGVkV2l0aFNjaG9vbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXBkYXRlSXNBc3NvY2lhdGVkV2l0aFNjaG9vbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Ub2dnbGVGaWVsZD5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPXtCdXR0b25UeXBlcy5QcmltYXJ5fT5TZWFyY2g8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaEZvcm07XG4iLCJpbXBvcnQgXCIuL1NlYXJjaFZpZXcuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCBTZWFyY2hGb3JtIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1NlYXJjaEZvcm0vU2VhcmNoRm9ybVwiO1xuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCB7IFRpbWUgfSBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL01vZGVscy9UaW1lLmpzXCI7XG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgcG9wdWxhdGVTdHVkeUdyb3VwU2VhcmNoLCBzaG93RXJyb3JOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IE1lZXRpbmdGb3JtYXRzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL01lZXRpbmdGb3JtYXRzXCI7XG5pbXBvcnQgeyBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vSGVscGVyXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuXG5pbXBvcnQgU3ViamVjdHMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Nb2RlbHMvU3ViamVjdHMuanNcIjtcblxuLyoqXG4gKiBBIHZpZXcgZm9yIGlucHV0dGluZyBzZWFyY2ggdGVybXMgYW5kIGZpbHRlcnMgZm9yIHNlYXJjaGluZyBzdHVkeSBncm91cHNcbiAqIFRoZSByZXN1bHRzIG9mIHRoaXMgc2VhcmNoIHdpbGwgYmUgZGlzcGxheWVkIG9uIHRoZSBTZWFyY2hSZXN1bHRzLmpzIFZpZXdcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICovXG5jb25zdCBTZWFyY2hWaWV3ID0gKCkgPT4ge1xuICAgIGNvbnN0IFtzZWFyY2hUZXJtLCBzZXRTZWFyY2hUZXJtXSA9IHVzZVN0YXRlKFwiXCIpO1xuICAgIGNvbnN0IFtzdWJqZWN0LCBzZXRTdWJqZWN0XSA9IHVzZVN0YXRlKFN1YmplY3RzLkFueSk7XG4gICAgY29uc3QgW2lzQXNzb2NpYXRlZFdpdGhTY2hvb2wsIHNldElzQXNzb2NpYXRlZFdpdGhTY2hvb2xdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFttZWV0aW5nRm9ybWF0LCBzZXRNZWV0aW5nRm9ybWF0XSA9IHVzZVN0YXRlKE1lZXRpbmdGb3JtYXRzLk1peGVkKTtcbiAgICBjb25zdCBbdHlwZSwgc2V0VHlwZV0gPSB1c2VTdGF0ZShcIk1peGVkXCIpO1xuICAgIGNvbnN0IFt0aW1lUmFuZ2UsIHNldFRpbWVSYW5nZV0gPSB1c2VTdGF0ZShbXCIxMjowMEFNXCIsIFwiMTE6NDVQTVwiXSk7XG4gICAgY29uc3QgW2RheXMsIHNldERheXNdID0gdXNlU3RhdGUoW10pO1xuICAgIGNvbnN0IFttZWV0aW5nRnJlcXVlbmNpZXMsIHNldE1lZXRpbmdGcmVxdWVuY2llc10gPSB1c2VTdGF0ZShbXSk7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgdXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlciB8fCBcIlwiKTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgc3R1ZHkgZ3JvdXBzIGZyb20gc2VhcmNoIHF1ZXJ5IGJ5IHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAwMS8yOS8yMlxuICAgICAqL1xuICAgIGNvbnN0IHN1Ym1pdFNlYXJjaCA9IGFzeW5jIChlKSA9PiB7XG4gICAgICAgIC8vIFNVQk1JVCBUSEUgU0VBUkNIIFJFUVVFU1QuXG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgc2VuZFBvc3RSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLlNlYXJjaC5HZXRTZWFyY2hSZXN1bHRzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlYXJjaFRlcm0sXG4gICAgICAgICAgICAgICAgc3ViamVjdCxcbiAgICAgICAgICAgICAgICBzY2hvb2w6IGlzQXNzb2NpYXRlZFdpdGhTY2hvb2wgPyB1c2VyLnNjaG9vbCA6IFwiXCIsXG4gICAgICAgICAgICAgICAgbWVldGluZ0Zvcm1hdCxcbiAgICAgICAgICAgICAgICBtZWV0aW5nRnJlcXVlbmNpZXMsXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWU6IFRpbWUucGFyc2VUaW1lU3RyaW5nKHRpbWVSYW5nZVswXSksXG4gICAgICAgICAgICAgICAgZW5kVGltZTogVGltZS5wYXJzZVRpbWVTdHJpbmcodGltZVJhbmdlWzFdKSxcbiAgICAgICAgICAgICAgICBkYXlzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLlN1Y2Nlc3NTdHVkeUdyb3Vwc1JldHJpZXZlZCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2gocG9wdWxhdGVTdHVkeUdyb3VwU2VhcmNoKGRhdGEuc3R1ZHlHcm91cHMpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgc2VhcmNoIHRlcm0gZmllbGQgaW4gdGhlIHNlYXJjaCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgIDAxLzI2LzIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlU2VhcmNoVGVybSA9IChlKSA9PiB7XG4gICAgICAgIHNldFNlYXJjaFRlcm0oZS50YXJnZXQudmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgc3ViamVjdCBkcm9wZG93biBmaWVsZCBpbiB0aGUgc2VhcmNoIGZvcm0uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBUaGUgY2hhbmdlIGV2ZW50IHRvIHVwZGF0ZSB0aGUgZmllbGQgd2l0aC5cbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgMDEvMjYvMjJcbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVTdWJqZWN0ID0gKGUpID0+IHtcbiAgICAgICAgc2V0U3ViamVjdChlLnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBcInNob3cgb25seSBncm91cHMgYXNzb2NpYXRlZCB3aXRoIHNjaG9vbFwiIGNoZWNrYm94IGluIHRoZSBzZWFyY2ggZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAwMS8yNi8yMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUlzQXNzb2NpYXRlZFdpdGhTY2hvb2wgPSAoZSkgPT4ge1xuICAgICAgICBzZXRJc0Fzc29jaWF0ZWRXaXRoU2Nob29sKGUudGFyZ2V0LmNoZWNrZWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgY2hvc2VuIG1lZXRpbmcgZm9ybWF0IGZyb20gdGhlIGRyb3Bkb3duIG1lbnUgaW4gdGhlIHNlYXJjaCBmb3JtLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgVGhlIGNoYW5nZSBldmVudCB0byB1cGRhdGUgdGhlIGZpZWxkIHdpdGguXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgIDAxLzI2LzIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlTWVldGluZ0Zvcm1hdCA9IChlKSA9PiB7XG4gICAgICAgIHNldE1lZXRpbmdGb3JtYXQoZS50YXJnZXQub3B0aW9uc1tlLnRhcmdldC5zZWxlY3RlZEluZGV4XS52YWx1ZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBjaG9zZW4gdHlwZSBmcm9tIHRoZSBkcm9wZG93biBtZW51IGluIHRoZSBzZWFyY2ggZm9ybS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIFRoZSBjaGFuZ2UgZXZlbnQgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aXRoLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAwMS8yNi8yMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZVR5cGUgPSAoZSkgPT4ge1xuICAgICAgICBzZXRUeXBlKGUudGFyZ2V0Lm9wdGlvbnNbZS50YXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgY2hvc2VuIHRpbWUgcmFuZ2UgaW4gdGhlIHNlYXJjaCBmb3JtLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlIFRoZSBbc3RhcnRUaW1lLCBlbmRUaW1lXVxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAwMS8yOS8yMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZVRpbWVSYW5nZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBzZXRUaW1lUmFuZ2UodmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHVwZGF0ZSB0aGUgY2hvc2VuIHRpbWUgcmFuZ2UgaW4gdGhlIHNlYXJjaCBmb3JtLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlIEFuIGFycmF5IG9mIGNob3NlbiBkYXlzXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgIDAxLzI5LzIyXG4gICAgICovXG4gICAgY29uc3QgdXBkYXRlRGF5cyA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBzZXREYXlzKHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB1cGRhdGUgdGhlIGNob3NlbiB0aW1lIHJhbmdlIGluIHRoZSBzZWFyY2ggZm9ybS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZSBBbiBhcnJheSBvZiBjaG9zZW4gbWVldGluZyBmcmVxdWVuY2llc1xuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAwMS8yOS8yMlxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZU1lZXRpbmdGcmVxdWVuY2llcyA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBzZXRNZWV0aW5nRnJlcXVlbmNpZXModmFsdWUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIGRlZmF1bHQgc2VhcmNoIHVwb24gaW5pdGlhbGx5IGxvYWRpbmcgdGhlIHBhZ2UuXG4gICAgICovXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc3VibWl0U2VhcmNoKCk7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VhcmNoLXZpZXdcIj5cbiAgICAgICAgICAgIDxTZWFyY2hGb3JtXG4gICAgICAgICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgICBzdWJqZWN0PXtzdWJqZWN0fVxuICAgICAgICAgICAgICAgIGlzQXNzb2NpYXRlZFdpdGhTY2hvb2w9e2lzQXNzb2NpYXRlZFdpdGhTY2hvb2x9XG4gICAgICAgICAgICAgICAgbWVldGluZ0Zvcm1hdD17bWVldGluZ0Zvcm1hdH1cbiAgICAgICAgICAgICAgICB0eXBlPXt0eXBlfVxuICAgICAgICAgICAgICAgIHRpbWVSYW5nZT17dGltZVJhbmdlfVxuICAgICAgICAgICAgICAgIGRheXM9e2RheXN9XG4gICAgICAgICAgICAgICAgbWVldGluZ0ZyZXF1ZW5jaWVzPXttZWV0aW5nRnJlcXVlbmNpZXN9XG4gICAgICAgICAgICAgICAgdXBkYXRlU2VhcmNoVGVybT17dXBkYXRlU2VhcmNoVGVybX1cbiAgICAgICAgICAgICAgICB1cGRhdGVTdWJqZWN0PXt1cGRhdGVTdWJqZWN0fVxuICAgICAgICAgICAgICAgIHVwZGF0ZUlzQXNzb2NpYXRlZFdpdGhTY2hvb2w9e3VwZGF0ZUlzQXNzb2NpYXRlZFdpdGhTY2hvb2x9XG4gICAgICAgICAgICAgICAgdXBkYXRlTWVldGluZ0Zvcm1hdD17dXBkYXRlTWVldGluZ0Zvcm1hdH1cbiAgICAgICAgICAgICAgICB1cGRhdGVUeXBlPXt1cGRhdGVUeXBlfVxuICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWVSYW5nZT17dXBkYXRlVGltZVJhbmdlfVxuICAgICAgICAgICAgICAgIHVwZGF0ZURheXM9e3VwZGF0ZURheXN9XG4gICAgICAgICAgICAgICAgdXBkYXRlTWVldGluZ0ZyZXF1ZW5jaWVzPXt1cGRhdGVNZWV0aW5nRnJlcXVlbmNpZXN9XG4gICAgICAgICAgICAgICAgc3VibWl0U2VhcmNoPXtzdWJtaXRTZWFyY2h9XG4gICAgICAgICAgICAgICAgdXNlclNjaG9vbD17dXNlciAhPT0gXCJcIiA/IHVzZXIuc2Nob29sIDogXCJcIn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hWaWV3O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hSZXN1bHRzLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9TZWFyY2hSZXN1bHRzLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaExpc3Rpbmcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlYXJjaExpc3Rpbmcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vU2VhcmNoTGlzdGluZy5zY3NzXCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2hvd0pvaW5TdHVkeUdyb3VwUG9wdXAgfSBmcm9tIFwiLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuLyoqXG4gKiBBIHZpZXcgZm9yIGRpc3BsYXlpbmcgYSBzaW5nbGUgc3R1ZHkgZ3JvdXAgbGlzdGluZyByZXN1bHRpbmcgZnJvbSBhIHNlYXJjaCBxdWVyeVxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKi9cbmNvbnN0IFNlYXJjaExpc3RpbmcgPSAoeyBncm91cCB9KSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdyb3VwKTtcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJsaXN0aW5nLWNvbnRhaW5lclwiXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGJvcmRlcjogYCR7Z3JvdXAuZ3JvdXBDb2xvcn0gNXB4IHNvbGlkYFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dKb2luU3R1ZHlHcm91cFBvcHVwKGdyb3VwKSl9XG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0aXRsZS1waG90by1jb250YWluZXJcIlxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZ3JvdXAuZ3JvdXBDb2xvclxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImdyb3VwLXRpdGxlXCI+e2dyb3VwLm5hbWV9PC9oMT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC1pbmZvLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JvdXAtaW5mby1pdGVtXCIgaWQ9XCJvd25lci1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIHtncm91cC5pc1R1dG9yR3JvdXAgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlR1dG9yOjwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5Pd25lcjo8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgPGgyPntncm91cC5vd25lci5uYW1lfTwvaDI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC1pbmZvLWl0ZW1cIiBpZD1cInNjaG9vbC1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlNjaG9vbDo8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxoMj57Z3JvdXAuc2Nob29sID8gZ3JvdXAuc2Nob29sIDogXCJOb25lXCJ9PC9oMj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLWluZm8taXRlbVwiIGlkPVwic3ViamVjdC1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPlN1YmplY3Q6PC9wPlxuICAgICAgICAgICAgICAgICAgICA8aDI+e2dyb3VwLnN1YmplY3R9PC9oMj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyb3VwLWluZm8taXRlbVwiIGlkPVwiY291cnNlQ29kZS1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwPkNvdXJzZSBDb2RlOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGgyPntncm91cC5jb3Vyc2UgPyBncm91cC5jb3Vyc2UgOiBcIk5vbmVcIn08L2gyPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nICYmIChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncm91cC1pbmZvLWl0ZW1cIiBpZD1cInNjaGVkdWxlLWluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5pc09ubGluZUdyb3VwID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZWV0cyA8c3Ryb25nPk9ubGluZTwvc3Ryb25nPjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZWV0cyA8c3Ryb25nPkluLVBlcnNvbjwvc3Ryb25nPjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtncm91cC5yZWN1cnJpbmdNZWV0aW5nLmZyZXF1ZW5jeX0gb24ge2dyb3VwLnJlY3VycmluZ01lZXRpbmcuZGF5fSBhdHtcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z3JvdXAucmVjdXJyaW5nTWVldGluZy50aW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoTGlzdGluZztcbiIsImltcG9ydCBcIi4vU2VhcmNoUmVzdWx0cy5zY3NzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgU2VhcmNoTGlzdGluZyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9TZWFyY2hMaXN0aW5nL1NlYXJjaExpc3RpbmdcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgQ2lyY3VsYXJQcm9ncmVzcyBmcm9tIFwiQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzXCI7XG5pbXBvcnQgQm94IGZyb20gXCJAbXVpL21hdGVyaWFsL0JveFwiO1xuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTG9hZGluZy9Mb2FkaW5nXCI7XG5cbi8qKlxuICogQSB2aWV3IGZvciBkaXNwbGF5aW5nIHJlc3VsdGluZyBzdHVkeSBncm91cHMgZnJvbSBhIHNlYXJjaCBxdWVyeVxuICogQGF1dGhvciA/Pz9cbiAqL1xuY29uc3QgU2VhcmNoUmVzdWx0VmlldyA9ICgpID0+IHtcbiAgICBjb25zdCBzZWFyY2ggPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLnN0dWR5R3JvdXBzUmVkdWNlci5zZWFyY2gpO1xuICAgIGNvbnN0IGlzTG9hZGluZyA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUubm90aWZpY2F0aW9uUmVkdWNlci5sb2FkaW5nKTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaC1yZXN1bHRzXCI+XG4gICAgICAgICAgICB7LyogUmVuZGVyIGdyb3VwcyBmcm9tIHNlYXJjaCB1c2luZyBzZWFyY2ggbGlzdGluZyBmb3VuZCB3aXRoaW4gc3RhdGUgKi99XG4gICAgICAgICAgICB7aXNMb2FkaW5nID8gPExvYWRpbmcgLz4gOiBzZWFyY2gubWFwKChncm91cCkgPT4gPFNlYXJjaExpc3RpbmcgZ3JvdXA9e2dyb3VwfSBrZXk9e2dyb3VwLl9pZH0gLz4pfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoUmVzdWx0VmlldztcbiIsImltcG9ydCBcIi4vU2VhcmNoLnNjc3NcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFRvcEJhciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Ub3BCYXIvVG9wQmFyXCI7XG5pbXBvcnQgU2VhcmNoVmlldyBmcm9tIFwiLi4vLi4vVmlld3MvU2VhcmNoL1NlYXJjaFZpZXdcIjtcbmltcG9ydCBTZWFyY2hSZXN1bHRzVmlldyBmcm9tIFwiLi4vLi4vVmlld3MvU2VhcmNoL1NlYXJjaFJlc3VsdFZpZXdcIjtcbmltcG9ydCBQYWdlIGZyb20gXCIuLi9QYWdlXCI7XG5cbi8qKlxuICogUmVuZGVycyB0aGUgU2VhcmNoIHBhZ2VcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxLzI0LzIwMjJcbiAqL1xuY29uc3QgU2VhcmNoID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8UGFnZSB0b3BCYXI9e3RydWV9IGN1cnJlbnRQYWdlPVwic2VhcmNoXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2gtcGFnZVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2UtdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5TZWFyY2g8L2gxPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2gtYXJlYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaFZpZXcgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWFyY2hSZXN1bHRzVmlldyAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvUGFnZT5cbiAgICAgICAgPC8+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R1ZHlHcm91cC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU3R1ZHlHcm91cC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9NZW1iZXJzVmlldy5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTWVtYmVyc1ZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vTWVtYmVyc1ZpZXcuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IExhYmVsIGZyb20gXCIuLi8uLi8uLi9jb3JlL0xhYmVsL0xhYmVsXCI7XG5pbXBvcnQgUHJvZmlsZVBpY3R1cmUgZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvUHJvZmlsZVBpY3R1cmUvUHJvZmlsZVBpY3R1cmVcIjtcbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBzaG93Vmlld01lbWJlclBvcHVwIH0gZnJvbSBcIi4uLy4uLy4uL3N0YXRlL2FjdGlvbnMvaW5kZXhcIjtcblxuY29uc3QgTWVtYmVyc1ZpZXcgPSAoeyBncm91cCB9KSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVtYmVycy1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxMYWJlbCBzdHlsZT17eyBwYWRkaW5nOiBcIjEwcHhcIiB9fT5Pd25lcjwvTGFiZWw+XG5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtZW1iZXIgb3duZXJcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dWaWV3TWVtYmVyUG9wdXAoZ3JvdXAub3duZXIpKX1cbiAgICAgICAgICAgICAgICBzdHlsZT17eyBib3JkZXJDb2xvcjogZ3JvdXAuZ3JvdXBDb2xvciB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtncm91cC5vd25lciAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UHJvZmlsZVBpY3R1cmUgaW1hZ2U9e2dyb3VwLm93bmVyLnByb2ZpbGVQaWN0dXJlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2dyb3VwLm93bmVyLm5hbWV9PC9wPntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPExhYmVsIHN0eWxlPXt7IHBhZGRpbmc6IFwiMTBweFwiIH19Pk1lbWJlcnM8L0xhYmVsPlxuICAgICAgICAgICAge2dyb3VwLm1lbWJlcnMgJiZcbiAgICAgICAgICAgICAgICBncm91cC5tZW1iZXJzLm1hcCgobWVtYmVyKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1lbWJlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzaG93Vmlld01lbWJlclBvcHVwKG1lbWJlcikpfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgYm9yZGVyQ29sb3I6IGdyb3VwLmdyb3VwQ29sb3IgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFByb2ZpbGVQaWN0dXJlIGltYWdlPXttZW1iZXIucHJvZmlsZVBpY3R1cmV9IC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPnttZW1iZXIubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVtYmVyc1ZpZXc7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0RldGFpbHNWaWV3LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9EZXRhaWxzVmlldy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9EZXRhaWxzVmlldy5zY3NzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQge1xuICAgIHNob3dFZGl0U3R1ZHlHcm91cFBvcHVwLFxuICAgIHNob3dDb25maXJtYXRpb25Qb3B1cCxcbiAgICBzaG93Vmlld01lZXRpbmdzU3R1ZHlHcm91cFBvcHVwLFxuICAgIGNsZWFyU3R1ZHlHcm91cHMsXG4gICAgc2hvd1JlcG9ydFBvcHVwXG59IGZyb20gXCIuLi8uLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgeyBnZXROZXh0TWVldGluZywgc2VuZERlbGV0ZVJlcXVlc3QsIHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi8uLi9IZWxwZXJcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgUmVzcG9uc2VNZXNzYWdlcyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vU2VydmVyL1Jlc3BvbnNlcy9SZXNwb25zZU1lc3NhZ2VzXCI7XG5pbXBvcnQgeyBSZXBvcnRUeXBlcyB9IGZyb20gXCIuLi8uLi9SZXBvcnQvUmVwb3J0VHlwZXNcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGEgdmlldyBmb3IgYSB1c2VyIHRvIHZpZXcgZGV0YWlscyBhYm91dCBhIGpvaW5lZCBvciBlZGl0IGFuIG93bmVkIHN0dWR5IGdyb3VwXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMDIvMTUvMjAyMlxuICogQHBhcmFtIHtPYmplY3R9IGdyb3VwIHRoZSBzdHVkeSBncm91cFxuICogKi9cbmNvbnN0IERldGFpbHNWaWV3ID0gKHsgZ3JvdXAgfSkgPT4ge1xuICAgIGNvbnN0IHVzZXIgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IHN0YXRlLmF1dGhSZWR1Y2VyLnVzZXIpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuXG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gYXBpIGNhbGwgdG8gdGhlIERlbGV0ZSBzdHVkeSBncm91cCByb3V0ZSwgcGFzc2luZyBpbiB0aGUgaW5mb3JtYXRpb24gZW50ZXJlZCBpblxuICAgICAqIHRoZSBmb3JtIGFuZCByZW5kZXJpbmcgdGhlIGNsaWVudCBhY2NvcmRpbmcgdG8gdGhlIHJlc3BvbnNlIHJlY2VpdmVkXG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xNi8yMDIyXG4gICAgICogQGFzeW5jXG4gICAgICogKi9cbiAgICBjb25zdCBzdWJtaXREZWxldGUgPSBhc3luYyAoY29uZmlybWVkKSA9PiB7XG4gICAgICAgIGlmIChjb25maXJtZWQpXG4gICAgICAgICAgICBhd2FpdCBzZW5kRGVsZXRlUmVxdWVzdChcbiAgICAgICAgICAgICAgICBSb3V0ZXMuU3R1ZHlHcm91cC5EZWxldGVTdHVkeUdyb3VwLFxuICAgICAgICAgICAgICAgIHsgc3R1ZHlHcm91cElkOiBncm91cC5faWQgfSxcbiAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU3VjY2Vzc1N0dWR5R3JvdXBEZWxldGVkLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaChcIi9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICB9O1xuICAgIGNvbnN0IHN1Ym1pdExlYXZlID0gYXN5bmMgKGNvbmZpcm1lZCkgPT4ge1xuICAgICAgICBpZiAoY29uZmlybWVkKSB7XG4gICAgICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICAgICAgUm91dGVzLlN0dWR5R3JvdXAuTGVhdmVTdHVkeUdyb3VwLFxuICAgICAgICAgICAgICAgIHsgc3R1ZHlHcm91cElkOiBncm91cC5faWQgfSxcbiAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLlN0dWR5R3JvdXAuU3VjY2Vzc1N0dWR5R3JvdXBMZWZ0LFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaChcIi9cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZXRhaWxzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZWV0aW5naW5mby1jb250YWluZXJcIiBvbkNsaWNrPXsoKSA9PiBkaXNwYXRjaChzaG93Vmlld01lZXRpbmdzU3R1ZHlHcm91cFBvcHVwKGdyb3VwKSl9PlxuICAgICAgICAgICAgICAgIDxoMT5OZXh0IE1lZXRpbmc8L2gxPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVldGluZ2luZm8tZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICBEYXRlOiA8c3Ryb25nPntncm91cCAmJiBnZXROZXh0TWVldGluZyhncm91cCkuZGF0ZX08L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIFRpbWU6IDxzdHJvbmc+e2dyb3VwICYmIGdldE5leHRNZWV0aW5nKGdyb3VwKS50aW1lfTwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGVzY3JpcHRpb24tY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGgxPkdyb3VwIERlc2NyaXB0aW9uPC9oMT5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJkZXRhaWxzLWRlc2NyaXB0aW9uXCI+e2dyb3VwLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICB7Z3JvdXAub3duZXIgJiYgZ3JvdXAub3duZXIuX2lkID09PSB1c2VyLl9pZCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IGRpc3BhdGNoKHNob3dFZGl0U3R1ZHlHcm91cFBvcHVwKGdyb3VwKSl9PkVESVQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb25maXJtYXRpb25Qb3B1cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXREZWxldGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb25maXJtIERlbGV0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSBzdHVkeSBncm91cDogXCIgKyBncm91cC5uYW1lICsgXCI/XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWxldGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHtncm91cC5vd25lciAmJiBncm91cC5vd25lci5faWQgIT09IHVzZXIuX2lkICYmIChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1hdGlvblBvcHVwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdExlYXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29uZmlybSBMZWF2ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGxlYXZlIHRoZSBzdHVkeSBncm91cDogXCIgKyBncm91cC5uYW1lICsgXCI/XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xlYXJTdHVkeUdyb3VwcygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExlYXZlIEdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7Z3JvdXAub3duZXIgJiYgZ3JvdXAub3duZXIuX2lkICE9PSB1c2VyLl9pZCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzaG93UmVwb3J0UG9wdXAoUmVwb3J0VHlwZXMuU1RVRFlfR1JPVVAsIGdyb3VwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXBvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZXRhaWxzVmlldztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRmVlZFZpZXcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0ZlZWRWaWV3LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL0ZlZWRWaWV3LnNjc3NcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQge1xuICAgIHNob3dDb25maXJtYXRpb25Qb3B1cCxcbiAgICBzaG93Q3JlYXRlTWVldGluZ1N0dWR5R3JvdXBQb3B1cCxcbiAgICBzaG93Q3JlYXRlUG9zdFN0dWR5R3JvdXBQb3B1cFxufSBmcm9tIFwiLi4vLi4vLi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IFBvc3QgZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvRmVlZC9Qb3N0XCI7XG5pbXBvcnQgUG9zdFR5cGVzIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9TZXJ2ZXIvTW9kZWxzL1Bvc3RUeXBlc1wiO1xuXG5jb25zdCBGZWVkVmlldyA9ICh7IGdyb3VwIH0pID0+IHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgdXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlcik7XG4gICAgY29uc3QgZmVlZFJlZiA9IHVzZVJlZigpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZmVlZFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IGZlZWRSZWYuY3VycmVudC5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnVubmluZ1wiKTtcbiAgICB9LCBbZ3JvdXAucG9zdHNdKTtcblxuICAgIGNvbnN0IGhhbmRsZVNlbGVjdE1lZXRpbmcgPSAocmVjdXJyaW5nTWVldGluZ1NlbGVjdGVkKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHNob3dDcmVhdGVNZWV0aW5nU3R1ZHlHcm91cFBvcHVwKGdyb3VwLCByZWN1cnJpbmdNZWV0aW5nU2VsZWN0ZWQpKTtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZlZWQtY29udGFpbmVyXCIgcmVmPXtmZWVkUmVmfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3RzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICB7Z3JvdXAucG9zdHMgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5wb3N0cy5tYXAoKHBvc3QpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UG9zdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2htZW50PXtwb3N0LmF0dGFjaG1lbnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtwb3N0LnRpdGxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlPXtwb3N0Lm1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0b3I9e3Bvc3QuY3JlYXRvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wPXtwb3N0LmNyZWF0ZWRBdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT17cG9zdC50eXBlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj17Z3JvdXAuZ3JvdXBDb2xvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VzPXtwb3N0LnJlc3BvbnNlc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA9e2dyb3VwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxPk5vdGhpbmcgeWV0PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcHRpb25zLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gZGlzcGF0Y2goc2hvd0NyZWF0ZVBvc3RTdHVkeUdyb3VwUG9wdXAoZ3JvdXApKX0+U3RhcnQgUG9zdDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIHtncm91cC5vd25lciAmJiB1c2VyLl9pZCA9PT0gZ3JvdXAub3duZXIuX2lkICYmIChcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1hdGlvblBvcHVwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2VsZWN0TWVldGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2hvb3NlIE1lZXRpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiV2hpY2ggbWVldGluZyB3b3VsZCB5b3UgbGlrZSB0byBjcmVhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJSZWN1cnJpbmcgTWVldGluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJPbmUtdGltZSBNZWV0aW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgU2NoZWR1bGUgTWVldGluZ1xuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGZWVkVmlldztcbiIsImltcG9ydCBcIi4vU3R1ZHlHcm91cC5zY3NzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBUb3BCYXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvVG9wQmFyL1RvcEJhclwiO1xuaW1wb3J0IFBhZ2UgZnJvbSBcIi4uL1BhZ2VcIjtcbmltcG9ydCBNZW1iZXJzVmlldyBmcm9tIFwiLi4vLi4vVmlld3MvU3R1ZHlHcm91cC9NZW1iZXJzL01lbWJlcnNWaWV3XCI7XG5pbXBvcnQgRGV0YWlsc1ZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL1N0dWR5R3JvdXAvRGV0YWlsc1ZpZXcvRGV0YWlsc1ZpZXdcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgeyBzZW5kR2V0UmVxdWVzdCwgc2VuZFBvc3RSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uLy4uL0hlbHBlclwiO1xuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlc1wiO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBzaG93RWRpdFN0dWR5R3JvdXBQb3B1cCB9IGZyb20gXCIuLi8uLi9zdGF0ZS9hY3Rpb25zXCI7XG5pbXBvcnQgRmVlZFZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL1N0dWR5R3JvdXAvRmVlZC9GZWVkVmlld1wiO1xuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvTG9hZGluZy9Mb2FkaW5nXCI7XG5cbmNvbnN0IFN0dWR5R3JvdXAgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gICAgY29uc3QgdXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlcik7XG4gICAgY29uc3QgaXNMb2FkaW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLmxvYWRpbmcpO1xuXG4gICAgY29uc3Qge1xuICAgICAgICBtYXRjaDoge1xuICAgICAgICAgICAgcGFyYW1zOiB7IGlkIH1cbiAgICAgICAgfVxuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IFtncm91cCwgc2V0R3JvdXBdID0gdXNlU3RhdGUoe30pO1xuICAgIGNvbnN0IFtuZXh0TWVldGluZywgc2V0TmV4dE1lZXRpbmddID0gdXNlU3RhdGUoXCJBbGwgQ2xlYXJcIik7XG4gICAgY29uc3QgZ2V0TmV4dE1lZXRpbmcgPSAoKSA9PiB7XG4gICAgICAgIHZhciBuZXh0TWVldGluZyA9IHsgZGF0ZTogXCJBbGwgQ2xlYXJcIiB9O1xuXG4gICAgICAgIGdyb3VwLm1lZXRpbmdzLmZvckVhY2goKG1lZXRpbmcpID0+IHtcbiAgICAgICAgICAgIGlmIChuZXcgRGF0ZShtZWV0aW5nLmRhdGUpID4gRGF0ZS5ub3coKSkgbmV4dE1lZXRpbmcgPSBtZWV0aW5nO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV4dE1lZXRpbmc7XG4gICAgfTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGdldEdyb3VwcygpIHtcbiAgICAgICAgICAgIGF3YWl0IGdldFN0dWR5R3JvdXAoKTtcbiAgICAgICAgfVxuICAgICAgICBnZXRHcm91cHMoKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhncm91cCk7XG4gICAgfSwgW10pO1xuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBzdHVkeSBncm91cCBhc3NvY2lhdGVkIHdpdGggdGhlIGlkIGZyb20gdGhlIHVybFxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlIDAyLzEwLzIwMjJcbiAgICAgKi9cblxuICAgIGNvbnN0IGdldFN0dWR5R3JvdXAgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHNlbmRHZXRSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLlN0dWR5R3JvdXAuR2V0U3R1ZHlHcm91cCArIFwiP3N0dWR5R3JvdXBJZD1cIiArIGlkLFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLlN1Y2Nlc3NTdHVkeUdyb3VwUmV0cmlldmVkLFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5TdHVkeUdyb3VwLkVycm9yR2V0U3R1ZHlHcm91cCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICAvL0xvYWQgc3R1ZHkgZ3JvdXAgaW50byBzdGF0ZVxuICAgICAgICAgICAgICAgIHNldEdyb3VwKGRhdGEuc3R1ZHlHcm91cCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8UGFnZSB0b3BCYXI9e3RydWV9IGN1cnJlbnRQYWdlPVwic3R1ZHlcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0dWR5LWdyb3VwLXBhZ2VcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlLXRpdGxlLXN0dWR5LWdyb3VwXCIgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBncm91cC5ncm91cENvbG9yICsgXCI5MFwiIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89XCIvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzdHlsZT17eyBtYXJnaW5MZWZ0OiBcIjBweFwiLCBiYWNrZ3JvdW5kQ29sb3I6IGdyb3VwLmdyb3VwQ29sb3IgfX0+e1wiPFwifTwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxPntncm91cC5uYW1lfTwvaDE+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpbi12aWV3XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7aXNMb2FkaW5nID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMb2FkaW5nIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNZW1iZXJzVmlldyBncm91cD17Z3JvdXB9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxGZWVkVmlldyBncm91cD17Z3JvdXB9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEZXRhaWxzVmlldyBncm91cD17Z3JvdXB9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvUGFnZT5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0dWR5R3JvdXA7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FjY291bnQuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FjY291bnQuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vQWNjb3VudC5zY3NzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBzZW5kRGVsZXRlUmVxdWVzdCwgc2VuZFBvc3RSZXF1ZXN0IH0gZnJvbSBcIi4uLy4uLy4uL0hlbHBlclwiO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQge1xuICAgIHNob3dJbnB1dFBvcHVwLFxuICAgIHNob3dFcnJvck5vdGlmaWNhdGlvbixcbiAgICBzaG93U3VjY2Vzc05vdGlmaWNhdGlvbixcbiAgICBzaWduT3V0LFxuICAgIGNsb3NlUG9wdXBcbn0gZnJvbSBcIi4uLy4uL3N0YXRlL2FjdGlvbnNcIjtcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcbmltcG9ydCBWYWxpZGF0b3IgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9WYWxpZGF0b3JcIjtcbmltcG9ydCBUb3BCYXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvVG9wQmFyL1RvcEJhclwiO1xuaW1wb3J0IFBhZ2UgZnJvbSBcIi4uL1BhZ2VcIjtcbmltcG9ydCBCdXR0b25UeXBlcyBmcm9tIFwiLi4vLi4vY29yZS9CdXR0b24vQnV0dG9uVHlwZXNcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1Byb2ZpbGVQaWN0dXJlL1Byb2ZpbGVQaWN0dXJlXCI7XG5pbXBvcnQgTG9hZGluZyBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Mb2FkaW5nL0xvYWRpbmdcIjtcblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBBY2NvdW50IHBhZ2VcbiAqIEBhdXRob3IgU3RhY2V5IFBvcGVuZm9vc2VcbiAqIEBkYXRlICAgMi8wNS8yMDIyXG4gKi9cbmNvbnN0IEFjY291bnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IHsgdXNlciB9ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlcik7XG4gICAgY29uc3QgaXNMb2FkaW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLmxvYWRpbmcpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzdWJtaXQgdGhlIG5ldyBlbWFpbCByZXF1ZXN0XG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8xMS8yMDIyXG4gICAgICogQGFzeW5jXG4gICAgICovXG4gICAgY29uc3Qgc3VibWl0TmV3RW1haWwgPSBhc3luYyAobmV3RW1haWwsIGN1cnJlbnRQYXNzd29yZCkgPT4ge1xuICAgICAgICBhd2FpdCBzZW5kUG9zdFJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5DaGFuZ2VFbWFpbCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuZXdFbWFpbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFzc3dvcmRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2VzLkFjY291bnQuRW1haWxTZW50LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0ZSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHN1Ym1pdCB0aGUgbmV3IHBhc3N3b3JkIHJlcXVlc3RcbiAgICAgKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAgICAgKiBAZGF0ZSAgIDAyLzA3LzIwMjJcbiAgICAgKiBAYXN5bmNcbiAgICAgKi9cbiAgICBjb25zdCBzdWJtaXROZXdQYXNzd29yZCA9IGFzeW5jIChjdXJyZW50UGFzc3dvcmQsIG5ld1Bhc3N3b3JkKSA9PiB7XG4gICAgICAgIGF3YWl0IHNlbmRQb3N0UmVxdWVzdChcbiAgICAgICAgICAgIFJvdXRlcy5BY2NvdW50LkNoYW5nZVBhc3N3b3JkLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXNzd29yZCxcbiAgICAgICAgICAgICAgICBuZXdQYXNzd29yZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzQ2hhbmdpbmdQYXNzd29yZCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGUsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goY2xvc2VQb3B1cCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzdWJtaXQgdGhlIGRlbGV0ZSBhY2NvdW50IHJlcXVlc3QgYW5kIHNpZ24gdGhlIHVzZXIgb3V0XG4gICAgICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gICAgICogQGRhdGUgICAwMi8wNy8yMDIyXG4gICAgICogQGFzeW5jXG4gICAgICovXG4gICAgY29uc3Qgc3VibWl0RGVsZXRlQWNjb3VudCA9IGFzeW5jIChjdXJyZW50UGFzc3dvcmQpID0+IHtcbiAgICAgICAgYXdhaXQgc2VuZERlbGV0ZVJlcXVlc3QoXG4gICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5EZWxldGUsXG4gICAgICAgICAgICB7IGN1cnJlbnRQYXNzd29yZCB9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5BY2NvdW50LlN1Y2Nlc3NBY2NvdW50RGVsZXRlZCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goc2lnbk91dCgpKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChjbG9zZVBvcHVwKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxQYWdlIHRvcEJhcj17dHJ1ZX0gY3VycmVudFBhZ2U9e1wiXCJ9PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZS10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICA8aDE+QWNjb3VudDwvaDE+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjY291bnQtcGFnZVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVzZXItaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5GdWxsIE5hbWU6PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJuYW1lXCI+e3VzZXIubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlci1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPkVtYWlsOjwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZW1haWxcIj57dXNlci5lbWFpbH08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlci1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPkFyZWEgQ29kZTo8L2gxPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImFyZWFDb2RlXCI+e3VzZXIuYXJlYUNvZGV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVzZXItaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5Qcm9maWxlIFBpY3R1cmU6PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvZmlsZVBpY3R1cmUgaW1hZ2U9e3VzZXIucHJvZmlsZVBpY3R1cmV9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1hY2NvdW50LWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPXtCdXR0b25UeXBlcy5QcmltYXJ5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0lucHV0UG9wdXAoXCJDaGFuZ2UgRW1haWxcIiwgXCJOZXcgRW1haWxcIiwgXCJcIiwgc3VibWl0TmV3RW1haWwsIFwiQ3VycmVudCBQYXNzd29yZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5nZSBFbWFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT17QnV0dG9uVHlwZXMuUHJpbWFyeX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dJbnB1dFBvcHVwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2hhbmdlIFBhc3N3b3JkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDdXJyZW50IFBhc3N3b3JkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXROZXdQYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk5ldyBQYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbmdlIFBhc3N3b3JkXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9e0J1dHRvblR5cGVzLkRlc3RydWNpdmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93SW5wdXRQb3B1cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNvbmZpcm0gUGFzc3dvcmQgdG8gRGVsZXRlIEFjY291bnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNvbmZpcm0geW91ciBwYXNzd29yZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0RGVsZXRlQWNjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlbGV0ZSBBY2NvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1BhZ2U+XG4gICAgICAgIDwvPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBY2NvdW50O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9NZXNzYWdlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9NZXNzYWdlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCAoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbiAgICB9XG59KSgpO1xuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcbmltcG9ydCBoYXNDT1JTIGZyb20gXCJoYXMtY29yc1wiO1xuaW1wb3J0IGdsb2JhbFRoaXMgZnJvbSBcIi4uL2dsb2JhbFRoaXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgY29uc3QgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcbiAgICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgICB0cnkge1xuICAgICAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlKSB7IH1cbiAgICBpZiAoIXhkb21haW4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZ2xvYmFsVGhpc1tbXCJBY3RpdmVcIl0uY29uY2F0KFwiT2JqZWN0XCIpLmpvaW4oXCJYXCIpXShcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICB9XG59XG4iLCJpbXBvcnQgZ2xvYmFsVGhpcyBmcm9tIFwiLi9nbG9iYWxUaGlzLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGljayhvYmosIC4uLmF0dHIpIHtcbiAgICByZXR1cm4gYXR0ci5yZWR1Y2UoKGFjYywgaykgPT4ge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBhY2Nba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG59XG4vLyBLZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSByZWFsIHRpbWVvdXQgZnVuY3Rpb25zIHNvIHRoZXkgY2FuIGJlIHVzZWQgd2hlbiBvdmVycmlkZGVuXG5jb25zdCBOQVRJVkVfU0VUX1RJTUVPVVQgPSBzZXRUaW1lb3V0O1xuY29uc3QgTkFUSVZFX0NMRUFSX1RJTUVPVVQgPSBjbGVhclRpbWVvdXQ7XG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbFRpbWVyRnVuY3Rpb25zKG9iaiwgb3B0cykge1xuICAgIGlmIChvcHRzLnVzZU5hdGl2ZVRpbWVycykge1xuICAgICAgICBvYmouc2V0VGltZW91dEZuID0gTkFUSVZFX1NFVF9USU1FT1VULmJpbmQoZ2xvYmFsVGhpcyk7XG4gICAgICAgIG9iai5jbGVhclRpbWVvdXRGbiA9IE5BVElWRV9DTEVBUl9USU1FT1VULmJpbmQoZ2xvYmFsVGhpcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBvYmouc2V0VGltZW91dEZuID0gc2V0VGltZW91dC5iaW5kKGdsb2JhbFRoaXMpO1xuICAgICAgICBvYmouY2xlYXJUaW1lb3V0Rm4gPSBjbGVhclRpbWVvdXQuYmluZChnbG9iYWxUaGlzKTtcbiAgICB9XG59XG4iLCJjb25zdCBQQUNLRVRfVFlQRVMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBubyBNYXAgPSBubyBwb2x5ZmlsbFxuUEFDS0VUX1RZUEVTW1wib3BlblwiXSA9IFwiMFwiO1xuUEFDS0VUX1RZUEVTW1wiY2xvc2VcIl0gPSBcIjFcIjtcblBBQ0tFVF9UWVBFU1tcInBpbmdcIl0gPSBcIjJcIjtcblBBQ0tFVF9UWVBFU1tcInBvbmdcIl0gPSBcIjNcIjtcblBBQ0tFVF9UWVBFU1tcIm1lc3NhZ2VcIl0gPSBcIjRcIjtcblBBQ0tFVF9UWVBFU1tcInVwZ3JhZGVcIl0gPSBcIjVcIjtcblBBQ0tFVF9UWVBFU1tcIm5vb3BcIl0gPSBcIjZcIjtcbmNvbnN0IFBBQ0tFVF9UWVBFU19SRVZFUlNFID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbk9iamVjdC5rZXlzKFBBQ0tFVF9UWVBFUykuZm9yRWFjaChrZXkgPT4ge1xuICAgIFBBQ0tFVF9UWVBFU19SRVZFUlNFW1BBQ0tFVF9UWVBFU1trZXldXSA9IGtleTtcbn0pO1xuY29uc3QgRVJST1JfUEFDS0VUID0geyB0eXBlOiBcImVycm9yXCIsIGRhdGE6IFwicGFyc2VyIGVycm9yXCIgfTtcbmV4cG9ydCB7IFBBQ0tFVF9UWVBFUywgUEFDS0VUX1RZUEVTX1JFVkVSU0UsIEVSUk9SX1BBQ0tFVCB9O1xuIiwiaW1wb3J0IHsgUEFDS0VUX1RZUEVTIH0gZnJvbSBcIi4vY29tbW9ucy5qc1wiO1xuY29uc3Qgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgKHR5cGVvZiBCbG9iICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gXCJbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl1cIik7XG5jb25zdCB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIjtcbi8vIEFycmF5QnVmZmVyLmlzVmlldyBtZXRob2QgaXMgbm90IGRlZmluZWQgaW4gSUUxMFxuY29uc3QgaXNWaWV3ID0gb2JqID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iailcbiAgICAgICAgOiBvYmogJiYgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufTtcbmNvbnN0IGVuY29kZVBhY2tldCA9ICh7IHR5cGUsIGRhdGEgfSwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKHdpdGhOYXRpdmVCbG9iICYmIGRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c0JpbmFyeSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZUJsb2JBc0Jhc2U2NChkYXRhLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmXG4gICAgICAgIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KGRhdGEpKSkge1xuICAgICAgICBpZiAoc3VwcG9ydHNCaW5hcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVCbG9iQXNCYXNlNjQobmV3IEJsb2IoW2RhdGFdKSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHBsYWluIHN0cmluZ1xuICAgIHJldHVybiBjYWxsYmFjayhQQUNLRVRfVFlQRVNbdHlwZV0gKyAoZGF0YSB8fCBcIlwiKSk7XG59O1xuY29uc3QgZW5jb2RlQmxvYkFzQmFzZTY0ID0gKGRhdGEsIGNhbGxiYWNrKSA9PiB7XG4gICAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBmaWxlUmVhZGVyLnJlc3VsdC5zcGxpdChcIixcIilbMV07XG4gICAgICAgIGNhbGxiYWNrKFwiYlwiICsgY29udGVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGRhdGEpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGVuY29kZVBhY2tldDtcbiIsIi8qXG4gKiBiYXNlNjQtYXJyYXlidWZmZXIgMS4wLjEgPGh0dHBzOi8vZ2l0aHViLmNvbS9uaWtsYXN2aC9iYXNlNjQtYXJyYXlidWZmZXI+XG4gKiBDb3B5cmlnaHQgKGMpIDIwMjIgTmlrbGFzIHZvbiBIZXJ0emVuIDxodHRwczovL2hlcnR6ZW4uY29tPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIExpY2Vuc2VcbiAqL1xudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4LlxudmFyIGxvb2t1cCA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IFtdIDogbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbmZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xufVxudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSwgaSwgbGVuID0gYnl0ZXMubGVuZ3RoLCBiYXNlNjQgPSAnJztcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDMpIHtcbiAgICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2ldID4+IDJdO1xuICAgICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cbiAgICBpZiAobGVuICUgMyA9PT0gMikge1xuICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArICc9JztcbiAgICB9XG4gICAgZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArICc9PSc7XG4gICAgfVxuICAgIHJldHVybiBiYXNlNjQ7XG59O1xudmFyIGRlY29kZSA9IGZ1bmN0aW9uIChiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLCBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gJz0nKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAyXSA9PT0gJz0nKSB7XG4gICAgICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSwgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDEpXTtcbiAgICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDIpXTtcbiAgICAgICAgZW5jb2RlZDQgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDMpXTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbn07XG5cbmV4cG9ydCB7IGRlY29kZSwgZW5jb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjQtYXJyYXlidWZmZXIuZXM1LmpzLm1hcFxuIiwiaW1wb3J0IHsgRVJST1JfUEFDS0VULCBQQUNLRVRfVFlQRVNfUkVWRVJTRSB9IGZyb20gXCIuL2NvbW1vbnMuanNcIjtcbmltcG9ydCB7IGRlY29kZSB9IGZyb20gXCJAc29ja2V0LmlvL2Jhc2U2NC1hcnJheWJ1ZmZlclwiO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5jb25zdCBkZWNvZGVQYWNrZXQgPSAoZW5jb2RlZFBhY2tldCwgYmluYXJ5VHlwZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgZW5jb2RlZFBhY2tldCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICBkYXRhOiBtYXBCaW5hcnkoZW5jb2RlZFBhY2tldCwgYmluYXJ5VHlwZSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IGVuY29kZWRQYWNrZXQuY2hhckF0KDApO1xuICAgIGlmICh0eXBlID09PSBcImJcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICBkYXRhOiBkZWNvZGVCYXNlNjRQYWNrZXQoZW5jb2RlZFBhY2tldC5zdWJzdHJpbmcoMSksIGJpbmFyeVR5cGUpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHBhY2tldFR5cGUgPSBQQUNLRVRfVFlQRVNfUkVWRVJTRVt0eXBlXTtcbiAgICBpZiAoIXBhY2tldFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgICB9XG4gICAgcmV0dXJuIGVuY29kZWRQYWNrZXQubGVuZ3RoID4gMVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIHR5cGU6IFBBQ0tFVF9UWVBFU19SRVZFUlNFW3R5cGVdLFxuICAgICAgICAgICAgZGF0YTogZW5jb2RlZFBhY2tldC5zdWJzdHJpbmcoMSlcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIHR5cGU6IFBBQ0tFVF9UWVBFU19SRVZFUlNFW3R5cGVdXG4gICAgICAgIH07XG59O1xuY29uc3QgZGVjb2RlQmFzZTY0UGFja2V0ID0gKGRhdGEsIGJpbmFyeVR5cGUpID0+IHtcbiAgICBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGUoZGF0YSk7XG4gICAgICAgIHJldHVybiBtYXBCaW5hcnkoZGVjb2RlZCwgYmluYXJ5VHlwZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geyBiYXNlNjQ6IHRydWUsIGRhdGEgfTsgLy8gZmFsbGJhY2sgZm9yIG9sZCBicm93c2Vyc1xuICAgIH1cbn07XG5jb25zdCBtYXBCaW5hcnkgPSAoZGF0YSwgYmluYXJ5VHlwZSkgPT4ge1xuICAgIHN3aXRjaCAoYmluYXJ5VHlwZSkge1xuICAgICAgICBjYXNlIFwiYmxvYlwiOlxuICAgICAgICAgICAgcmV0dXJuIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IG5ldyBCbG9iKFtkYXRhXSkgOiBkYXRhO1xuICAgICAgICBjYXNlIFwiYXJyYXlidWZmZXJcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBkYXRhOyAvLyBhc3N1bWluZyB0aGUgZGF0YSBpcyBhbHJlYWR5IGFuIEFycmF5QnVmZmVyXG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGRlY29kZVBhY2tldDtcbiIsImltcG9ydCBlbmNvZGVQYWNrZXQgZnJvbSBcIi4vZW5jb2RlUGFja2V0LmpzXCI7XG5pbXBvcnQgZGVjb2RlUGFja2V0IGZyb20gXCIuL2RlY29kZVBhY2tldC5qc1wiO1xuY29uc3QgU0VQQVJBVE9SID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMCk7IC8vIHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EZWxpbWl0ZXIjQVNDSUlfZGVsaW1pdGVkX3RleHRcbmNvbnN0IGVuY29kZVBheWxvYWQgPSAocGFja2V0cywgY2FsbGJhY2spID0+IHtcbiAgICAvLyBzb21lIHBhY2tldHMgbWF5IGJlIGFkZGVkIHRvIHRoZSBhcnJheSB3aGlsZSBlbmNvZGluZywgc28gdGhlIGluaXRpYWwgbGVuZ3RoIG11c3QgYmUgc2F2ZWRcbiAgICBjb25zdCBsZW5ndGggPSBwYWNrZXRzLmxlbmd0aDtcbiAgICBjb25zdCBlbmNvZGVkUGFja2V0cyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgcGFja2V0cy5mb3JFYWNoKChwYWNrZXQsIGkpID0+IHtcbiAgICAgICAgLy8gZm9yY2UgYmFzZTY0IGVuY29kaW5nIGZvciBiaW5hcnkgcGFja2V0c1xuICAgICAgICBlbmNvZGVQYWNrZXQocGFja2V0LCBmYWxzZSwgZW5jb2RlZFBhY2tldCA9PiB7XG4gICAgICAgICAgICBlbmNvZGVkUGFja2V0c1tpXSA9IGVuY29kZWRQYWNrZXQ7XG4gICAgICAgICAgICBpZiAoKytjb3VudCA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZW5jb2RlZFBhY2tldHMuam9pbihTRVBBUkFUT1IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuY29uc3QgZGVjb2RlUGF5bG9hZCA9IChlbmNvZGVkUGF5bG9hZCwgYmluYXJ5VHlwZSkgPT4ge1xuICAgIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gZW5jb2RlZFBheWxvYWQuc3BsaXQoU0VQQVJBVE9SKTtcbiAgICBjb25zdCBwYWNrZXRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkZWNvZGVkUGFja2V0ID0gZGVjb2RlUGFja2V0KGVuY29kZWRQYWNrZXRzW2ldLCBiaW5hcnlUeXBlKTtcbiAgICAgICAgcGFja2V0cy5wdXNoKGRlY29kZWRQYWNrZXQpO1xuICAgICAgICBpZiAoZGVjb2RlZFBhY2tldC50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYWNrZXRzO1xufTtcbmV4cG9ydCBjb25zdCBwcm90b2NvbCA9IDQ7XG5leHBvcnQgeyBlbmNvZGVQYWNrZXQsIGVuY29kZVBheWxvYWQsIGRlY29kZVBhY2tldCwgZGVjb2RlUGF5bG9hZCB9O1xuIiwiaW1wb3J0IHsgZGVjb2RlUGFja2V0IH0gZnJvbSBcImVuZ2luZS5pby1wYXJzZXJcIjtcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tIFwiQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlclwiO1xuaW1wb3J0IHsgaW5zdGFsbFRpbWVyRnVuY3Rpb25zIH0gZnJvbSBcIi4vdXRpbC5qc1wiO1xuZXhwb3J0IGNsYXNzIFRyYW5zcG9ydCBleHRlbmRzIEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgICBpbnN0YWxsVGltZXJGdW5jdGlvbnModGhpcywgb3B0cyk7XG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgICAgIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIlwiO1xuICAgICAgICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICAgKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICAgICAqIEBhcGkgcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25FcnJvcihtc2csIGRlc2MpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgZXJyLnR5cGUgPSBcIlRyYW5zcG9ydEVycm9yXCI7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgICAgICAgc3VwZXIuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICAgICAqXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICBvcGVuKCkge1xuICAgICAgICBpZiAoXCJjbG9zZWRcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwiXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7XG4gICAgICAgICAgICB0aGlzLmRvT3BlbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZG9DbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIG11bHRpcGxlIHBhY2tldHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICBzZW5kKHBhY2tldHMpIHtcbiAgICAgICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIG1pZ2h0IGhhcHBlbiBpZiB0aGUgdHJhbnNwb3J0IHdhcyBzaWxlbnRseSBjbG9zZWQgaW4gdGhlIGJlZm9yZXVubG9hZCBldmVudCBoYW5kbGVyXG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gb3BlblxuICAgICAqXG4gICAgICogQGFwaSBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuZW1pdChcIm9wZW5cIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aXRoIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICAgICAqIEBhcGkgcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25EYXRhKGRhdGEpIHtcbiAgICAgICAgY29uc3QgcGFja2V0ID0gZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICAgICAgICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAYXBpIHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uUGFja2V0KHBhY2tldCkge1xuICAgICAgICBzdXBlci5lbWl0KFwicGFja2V0XCIsIHBhY2tldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGNsb3NlLlxuICAgICAqXG4gICAgICogQGFwaSBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICBzdXBlci5lbWl0KFwiY2xvc2VcIik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVHJhbnNwb3J0IH0gZnJvbSBcIi4uL3RyYW5zcG9ydC5qc1wiO1xuaW1wb3J0IHllYXN0IGZyb20gXCJ5ZWFzdFwiO1xuaW1wb3J0IHBhcnNlcXMgZnJvbSBcInBhcnNlcXNcIjtcbmltcG9ydCB7IGVuY29kZVBheWxvYWQsIGRlY29kZVBheWxvYWQgfSBmcm9tIFwiZW5naW5lLmlvLXBhcnNlclwiO1xuZXhwb3J0IGNsYXNzIFBvbGxpbmcgZXh0ZW5kcyBUcmFuc3BvcnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNwb3J0IG5hbWUuXG4gICAgICovXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcInBvbGxpbmdcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHNvY2tldCAodHJpZ2dlcnMgcG9sbGluZykuIFdlIHdyaXRlIGEgUElORyBtZXNzYWdlIHRvIGRldGVybWluZVxuICAgICAqIHdoZW4gdGhlIHRyYW5zcG9ydCBpcyBvcGVuLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZG9PcGVuKCkge1xuICAgICAgICB0aGlzLnBvbGwoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGF1c2VzIHBvbGxpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBwYXVzZShvblBhdXNlKSB7XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwicGF1c2luZ1wiO1xuICAgICAgICBjb25zdCBwYXVzZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwicGF1c2VkXCI7XG4gICAgICAgICAgICBvblBhdXNlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICAgICAgICAgIGxldCB0b3RhbCA9IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5wb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgdG90YWwrKztcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJwb2xsQ29tcGxldGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMud3JpdGFibGUpIHtcbiAgICAgICAgICAgICAgICB0b3RhbCsrO1xuICAgICAgICAgICAgICAgIHRoaXMub25jZShcImRyYWluXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGF1c2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgcG9sbGluZyBjeWNsZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgcG9sbCgpIHtcbiAgICAgICAgdGhpcy5wb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kb1BvbGwoKTtcbiAgICAgICAgdGhpcy5lbWl0KFwicG9sbFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvbkRhdGEoZGF0YSkge1xuICAgICAgICBjb25zdCBjYWxsYmFjayA9IHBhY2tldCA9PiB7XG4gICAgICAgICAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSAmJiBwYWNrZXQudHlwZSA9PT0gXCJvcGVuXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgaXRzIGEgY2xvc2UgcGFja2V0LCB3ZSBjbG9zZSB0aGUgb25nb2luZyByZXF1ZXN0c1xuICAgICAgICAgICAgaWYgKFwiY2xvc2VcIiA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgYnlwYXNzIG9uRGF0YSBhbmQgaGFuZGxlIHRoZSBtZXNzYWdlXG4gICAgICAgICAgICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGRlY29kZSBwYXlsb2FkXG4gICAgICAgIGRlY29kZVBheWxvYWQoZGF0YSwgdGhpcy5zb2NrZXQuYmluYXJ5VHlwZSkuZm9yRWFjaChjYWxsYmFjayk7XG4gICAgICAgIC8vIGlmIGFuIGV2ZW50IGRpZCBub3QgdHJpZ2dlciBjbG9zaW5nXG4gICAgICAgIGlmIChcImNsb3NlZFwiICE9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGdvdCBkYXRhIHdlJ3JlIG5vdCBwb2xsaW5nXG4gICAgICAgICAgICB0aGlzLnBvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcInBvbGxDb21wbGV0ZVwiKTtcbiAgICAgICAgICAgIGlmIChcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3IgcG9sbGluZywgc2VuZCBhIGNsb3NlIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGRvQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53cml0ZShbeyB0eXBlOiBcImNsb3NlXCIgfV0pO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGluIGNhc2Ugd2UncmUgdHJ5aW5nIHRvIGNsb3NlIHdoaWxlXG4gICAgICAgICAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgICAgICAgICAgdGhpcy5vbmNlKFwib3BlblwiLCBjbG9zZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBwYWNrZXRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICB3cml0ZShwYWNrZXRzKSB7XG4gICAgICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgICAgZW5jb2RlUGF5bG9hZChwYWNrZXRzLCBkYXRhID0+IHtcbiAgICAgICAgICAgIHRoaXMuZG9Xcml0ZShkYXRhLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZHJhaW5cIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICB1cmkoKSB7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMub3B0cy5zZWN1cmUgPyBcImh0dHBzXCIgOiBcImh0dHBcIjtcbiAgICAgICAgbGV0IHBvcnQgPSBcIlwiO1xuICAgICAgICAvLyBjYWNoZSBidXN0aW5nIGlzIGZvcmNlZFxuICAgICAgICBpZiAoZmFsc2UgIT09IHRoaXMub3B0cy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgICAgICAgICAgcXVlcnlbdGhpcy5vcHRzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmICFxdWVyeS5zaWQpIHtcbiAgICAgICAgICAgIHF1ZXJ5LmI2NCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgICAgICAgaWYgKHRoaXMub3B0cy5wb3J0ICYmXG4gICAgICAgICAgICAoKFwiaHR0cHNcIiA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLm9wdHMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgICAgICAgICAgICAoXCJodHRwXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA4MCkpKSB7XG4gICAgICAgICAgICBwb3J0ID0gXCI6XCIgKyB0aGlzLm9wdHMucG9ydDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbmNvZGVkUXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG4gICAgICAgIGNvbnN0IGlwdjYgPSB0aGlzLm9wdHMuaG9zdG5hbWUuaW5kZXhPZihcIjpcIikgIT09IC0xO1xuICAgICAgICByZXR1cm4gKHNjaGVtYSArXG4gICAgICAgICAgICBcIjovL1wiICtcbiAgICAgICAgICAgIChpcHY2ID8gXCJbXCIgKyB0aGlzLm9wdHMuaG9zdG5hbWUgKyBcIl1cIiA6IHRoaXMub3B0cy5ob3N0bmFtZSkgK1xuICAgICAgICAgICAgcG9ydCArXG4gICAgICAgICAgICB0aGlzLm9wdHMucGF0aCArXG4gICAgICAgICAgICAoZW5jb2RlZFF1ZXJ5Lmxlbmd0aCA/IFwiP1wiICsgZW5jb2RlZFF1ZXJ5IDogXCJcIikpO1xuICAgIH1cbn1cbiIsIi8qIGdsb2JhbCBhdHRhY2hFdmVudCAqL1xuaW1wb3J0IFhNTEh0dHBSZXF1ZXN0IGZyb20gXCIuL3htbGh0dHByZXF1ZXN0LmpzXCI7XG5pbXBvcnQgZ2xvYmFsVGhpcyBmcm9tIFwiLi4vZ2xvYmFsVGhpcy5qc1wiO1xuaW1wb3J0IHsgaW5zdGFsbFRpbWVyRnVuY3Rpb25zLCBwaWNrIH0gZnJvbSBcIi4uL3V0aWwuanNcIjtcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tIFwiQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlclwiO1xuaW1wb3J0IHsgUG9sbGluZyB9IGZyb20gXCIuL3BvbGxpbmcuanNcIjtcbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gZW1wdHkoKSB7IH1cbmNvbnN0IGhhc1hIUjIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh7XG4gICAgICAgIHhkb21haW46IGZhbHNlXG4gICAgfSk7XG4gICAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5leHBvcnQgY2xhc3MgWEhSIGV4dGVuZHMgUG9sbGluZyB7XG4gICAgLyoqXG4gICAgICogWEhSIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcihvcHRzKTtcbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgY29uc3QgaXNTU0wgPSBcImh0dHBzOlwiID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICAgICAgICAgIGxldCBwb3J0ID0gbG9jYXRpb24ucG9ydDtcbiAgICAgICAgICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICAgICAgICAgIGlmICghcG9ydCkge1xuICAgICAgICAgICAgICAgIHBvcnQgPSBpc1NTTCA/IFwiNDQzXCIgOiBcIjgwXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnhkID1cbiAgICAgICAgICAgICAgICAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuaG9zdG5hbWUgIT09IGxvY2F0aW9uLmhvc3RuYW1lKSB8fFxuICAgICAgICAgICAgICAgICAgICBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgICAgICAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBmb3JjZUJhc2U2NCA9IG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NDtcbiAgICAgICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGhhc1hIUjIgJiYgIWZvcmNlQmFzZTY0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICByZXF1ZXN0KG9wdHMgPSB7fSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKG9wdHMsIHsgeGQ6IHRoaXMueGQsIHhzOiB0aGlzLnhzIH0sIHRoaXMub3B0cyk7XG4gICAgICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLnVyaSgpLCBvcHRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZG9Xcml0ZShkYXRhLCBmbikge1xuICAgICAgICBjb25zdCByZXEgPSB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcS5vbihcInN1Y2Nlc3NcIiwgZm4pO1xuICAgICAgICByZXEub24oXCJlcnJvclwiLCBlcnIgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKFwieGhyIHBvc3QgZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBkb1BvbGwoKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IHRoaXMucmVxdWVzdCgpO1xuICAgICAgICByZXEub24oXCJkYXRhXCIsIHRoaXMub25EYXRhLmJpbmQodGhpcykpO1xuICAgICAgICByZXEub24oXCJlcnJvclwiLCBlcnIgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKFwieGhyIHBvbGwgZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucG9sbFhociA9IHJlcTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUmVxdWVzdCBleHRlbmRzIEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8IFwiR0VUXCI7XG4gICAgICAgIHRoaXMudXJpID0gdXJpO1xuICAgICAgICB0aGlzLmFzeW5jID0gZmFsc2UgIT09IG9wdHMuYXN5bmM7XG4gICAgICAgIHRoaXMuZGF0YSA9IHVuZGVmaW5lZCAhPT0gb3B0cy5kYXRhID8gb3B0cy5kYXRhIDogbnVsbDtcbiAgICAgICAgdGhpcy5jcmVhdGUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBwaWNrKHRoaXMub3B0cywgXCJhZ2VudFwiLCBcInBmeFwiLCBcImtleVwiLCBcInBhc3NwaHJhc2VcIiwgXCJjZXJ0XCIsIFwiY2FcIiwgXCJjaXBoZXJzXCIsIFwicmVqZWN0VW5hdXRob3JpemVkXCIsIFwiYXV0b1VucmVmXCIpO1xuICAgICAgICBvcHRzLnhkb21haW4gPSAhIXRoaXMub3B0cy54ZDtcbiAgICAgICAgb3B0cy54c2NoZW1lID0gISF0aGlzLm9wdHMueHM7XG4gICAgICAgIGNvbnN0IHhociA9ICh0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB4aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmksIHRoaXMuYXN5bmMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrICYmIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgaW4gdGhpcy5vcHRzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5leHRyYUhlYWRlcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgICAgIGlmIChcIlBPU1RcIiA9PT0gdGhpcy5tZXRob2QpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcInRleHQvcGxhaW47Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICAgICAgICAgIC8vIGllNiBjaGVja1xuICAgICAgICAgICAgaWYgKFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyKSB7XG4gICAgICAgICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRoaXMub3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgeGhyLnRpbWVvdXQgPSB0aGlzLm9wdHMucmVxdWVzdFRpbWVvdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTG9hZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IHRocm93IGluIHRoZSBzYW1lIHRpY2sgYW5kIGdldHMgY2F1Z2h0IGhlcmVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHR5cGVvZiB4aHIuc3RhdHVzID09PSBcIm51bWJlclwiID8geGhyLnN0YXR1cyA6IDApO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gTmVlZCB0byBkZWZlciBzaW5jZSAuY3JlYXRlKCkgaXMgY2FsbGVkIGRpcmVjdGx5IGZyb20gdGhlIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAgICAgICAgIC8vIG9jY3Vycy4gIFRoZXJlZm9yZSwgYWxzbywgd2UgY2Fubm90IHRocm93IGhlcmUgYXQgYWxsLlxuICAgICAgICAgICAgdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICAgICAgICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvblN1Y2Nlc3MoKSB7XG4gICAgICAgIHRoaXMuZW1pdChcInN1Y2Nlc3NcIik7XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25EYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCBkYXRhKTtcbiAgICAgICAgdGhpcy5vblN1Y2Nlc3MoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZXJyb3IuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvbkVycm9yKGVycikge1xuICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICB0aGlzLmNsZWFudXAodHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBob3VzZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGNsZWFudXAoZnJvbUVycm9yKSB7XG4gICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBlbXB0eTtcbiAgICAgICAgaWYgKGZyb21FcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueGhyID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gbG9hZC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uTG9hZCgpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFib3J0cyB0aGUgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH1cbn1cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG4vKipcbiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnRcbiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXNcbiAqIGVtaXR0ZWQuXG4gKi9cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKHR5cGVvZiBhdHRhY2hFdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCB0ZXJtaW5hdGlvbkV2ZW50ID0gXCJvbnBhZ2VoaWRlXCIgaW4gZ2xvYmFsVGhpcyA/IFwicGFnZWhpZGVcIiA6IFwidW5sb2FkXCI7XG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIodGVybWluYXRpb25FdmVudCwgdW5sb2FkSGFuZGxlciwgZmFsc2UpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIoKSB7XG4gICAgZm9yIChsZXQgaSBpbiBSZXF1ZXN0LnJlcXVlc3RzKSB7XG4gICAgICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgZ2xvYmFsVGhpcyBmcm9tIFwiLi4vZ2xvYmFsVGhpcy5qc1wiO1xuZXhwb3J0IGNvbnN0IG5leHRUaWNrID0gKCgpID0+IHtcbiAgICBjb25zdCBpc1Byb21pc2VBdmFpbGFibGUgPSB0eXBlb2YgUHJvbWlzZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBQcm9taXNlLnJlc29sdmUgPT09IFwiZnVuY3Rpb25cIjtcbiAgICBpZiAoaXNQcm9taXNlQXZhaWxhYmxlKSB7XG4gICAgICAgIHJldHVybiBjYiA9PiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGNiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAoY2IsIHNldFRpbWVvdXRGbikgPT4gc2V0VGltZW91dEZuKGNiLCAwKTtcbiAgICB9XG59KSgpO1xuZXhwb3J0IGNvbnN0IFdlYlNvY2tldCA9IGdsb2JhbFRoaXMuV2ViU29ja2V0IHx8IGdsb2JhbFRoaXMuTW96V2ViU29ja2V0O1xuZXhwb3J0IGNvbnN0IHVzaW5nQnJvd3NlcldlYlNvY2tldCA9IHRydWU7XG5leHBvcnQgY29uc3QgZGVmYXVsdEJpbmFyeVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4iLCJpbXBvcnQgeyBUcmFuc3BvcnQgfSBmcm9tIFwiLi4vdHJhbnNwb3J0LmpzXCI7XG5pbXBvcnQgcGFyc2VxcyBmcm9tIFwicGFyc2Vxc1wiO1xuaW1wb3J0IHllYXN0IGZyb20gXCJ5ZWFzdFwiO1xuaW1wb3J0IHsgcGljayB9IGZyb20gXCIuLi91dGlsLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0QmluYXJ5VHlwZSwgbmV4dFRpY2ssIHVzaW5nQnJvd3NlcldlYlNvY2tldCwgV2ViU29ja2V0IH0gZnJvbSBcIi4vd2Vic29ja2V0LWNvbnN0cnVjdG9yLmpzXCI7XG5pbXBvcnQgeyBlbmNvZGVQYWNrZXQgfSBmcm9tIFwiZW5naW5lLmlvLXBhcnNlclwiO1xuLy8gZGV0ZWN0IFJlYWN0TmF0aXZlIGVudmlyb25tZW50XG5jb25zdCBpc1JlYWN0TmF0aXZlID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gXCJzdHJpbmdcIiAmJlxuICAgIG5hdmlnYXRvci5wcm9kdWN0LnRvTG93ZXJDYXNlKCkgPT09IFwicmVhY3RuYXRpdmVcIjtcbmV4cG9ydCBjbGFzcyBXUyBleHRlbmRzIFRyYW5zcG9ydCB7XG4gICAgLyoqXG4gICAgICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAgICAgKlxuICAgICAqIEBhcGkge09iamVjdH0gY29ubmVjdGlvbiBvcHRpb25zXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKG9wdHMpO1xuICAgICAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gIW9wdHMuZm9yY2VCYXNlNjQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9ydCBuYW1lLlxuICAgICAqXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwid2Vic29ja2V0XCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW5zIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGRvT3BlbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrKCkpIHtcbiAgICAgICAgICAgIC8vIGxldCBwcm9iZSB0aW1lb3V0XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJpID0gdGhpcy51cmkoKTtcbiAgICAgICAgY29uc3QgcHJvdG9jb2xzID0gdGhpcy5vcHRzLnByb3RvY29scztcbiAgICAgICAgLy8gUmVhY3QgTmF0aXZlIG9ubHkgc3VwcG9ydHMgdGhlICdoZWFkZXJzJyBvcHRpb24sIGFuZCB3aWxsIHByaW50IGEgd2FybmluZyBpZiBhbnl0aGluZyBlbHNlIGlzIHBhc3NlZFxuICAgICAgICBjb25zdCBvcHRzID0gaXNSZWFjdE5hdGl2ZVxuICAgICAgICAgICAgPyB7fVxuICAgICAgICAgICAgOiBwaWNrKHRoaXMub3B0cywgXCJhZ2VudFwiLCBcInBlck1lc3NhZ2VEZWZsYXRlXCIsIFwicGZ4XCIsIFwia2V5XCIsIFwicGFzc3BocmFzZVwiLCBcImNlcnRcIiwgXCJjYVwiLCBcImNpcGhlcnNcIiwgXCJyZWplY3RVbmF1dGhvcml6ZWRcIiwgXCJsb2NhbEFkZHJlc3NcIiwgXCJwcm90b2NvbFZlcnNpb25cIiwgXCJvcmlnaW5cIiwgXCJtYXhQYXlsb2FkXCIsIFwiZmFtaWx5XCIsIFwiY2hlY2tTZXJ2ZXJJZGVudGl0eVwiKTtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICAgIG9wdHMuaGVhZGVycyA9IHRoaXMub3B0cy5leHRyYUhlYWRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud3MgPVxuICAgICAgICAgICAgICAgIHVzaW5nQnJvd3NlcldlYlNvY2tldCAmJiAhaXNSZWFjdE5hdGl2ZVxuICAgICAgICAgICAgICAgICAgICA/IHByb3RvY29sc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgV2ViU29ja2V0KHVyaSlcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSB0aGlzLnNvY2tldC5iaW5hcnlUeXBlIHx8IGRlZmF1bHRCaW5hcnlUeXBlO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLndzLm9ub3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53cy5fc29ja2V0LnVucmVmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm9uT3BlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLndzLm9uY2xvc2UgPSB0aGlzLm9uQ2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy53cy5vbm1lc3NhZ2UgPSBldiA9PiB0aGlzLm9uRGF0YShldi5kYXRhKTtcbiAgICAgICAgdGhpcy53cy5vbmVycm9yID0gZSA9PiB0aGlzLm9uRXJyb3IoXCJ3ZWJzb2NrZXQgZXJyb3JcIiwgZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBkYXRhIHRvIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIHBhY2tldHMuXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgd3JpdGUocGFja2V0cykge1xuICAgICAgICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICAgIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gICAgICAgIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYWNrZXQgPSBwYWNrZXRzW2ldO1xuICAgICAgICAgICAgY29uc3QgbGFzdFBhY2tldCA9IGkgPT09IHBhY2tldHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGVuY29kZVBhY2tldChwYWNrZXQsIHRoaXMuc3VwcG9ydHNCaW5hcnksIGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGFsd2F5cyBjcmVhdGUgYSBuZXcgb2JqZWN0IChHSC00MzcpXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0cyA9IHt9O1xuICAgICAgICAgICAgICAgIGlmICghdXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWNrZXQub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdHMucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbiA9IFwic3RyaW5nXCIgPT09IHR5cGVvZiBkYXRhID8gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4gPCB0aGlzLm9wdHMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgd2Vic29ja2V0IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkIGJ1dCB0aGUgYnJvd3NlciBkaWRuJ3RcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgICAgICAgICAvLyB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzLnNlbmQoZGF0YSwgb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RQYWNrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFrZSBkcmFpblxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgICAgICAgICAgICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZHJhaW5cIik7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuc2V0VGltZW91dEZuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgc29ja2V0LlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZG9DbG9zZSgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLndzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgdXJpKCkge1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm9wdHMuc2VjdXJlID8gXCJ3c3NcIiA6IFwid3NcIjtcbiAgICAgICAgbGV0IHBvcnQgPSBcIlwiO1xuICAgICAgICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICAgICAgICBpZiAodGhpcy5vcHRzLnBvcnQgJiZcbiAgICAgICAgICAgICgoXCJ3c3NcIiA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLm9wdHMucG9ydCkgIT09IDQ0MykgfHxcbiAgICAgICAgICAgICAgICAoXCJ3c1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gODApKSkge1xuICAgICAgICAgICAgcG9ydCA9IFwiOlwiICsgdGhpcy5vcHRzLnBvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgICAgICAgaWYgKHRoaXMub3B0cy50aW1lc3RhbXBSZXF1ZXN0cykge1xuICAgICAgICAgICAgcXVlcnlbdGhpcy5vcHRzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29tbXVuaWNhdGUgYmluYXJ5IHN1cHBvcnQgY2FwYWJpbGl0aWVzXG4gICAgICAgIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSkge1xuICAgICAgICAgICAgcXVlcnkuYjY0ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbmNvZGVkUXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG4gICAgICAgIGNvbnN0IGlwdjYgPSB0aGlzLm9wdHMuaG9zdG5hbWUuaW5kZXhPZihcIjpcIikgIT09IC0xO1xuICAgICAgICByZXR1cm4gKHNjaGVtYSArXG4gICAgICAgICAgICBcIjovL1wiICtcbiAgICAgICAgICAgIChpcHY2ID8gXCJbXCIgKyB0aGlzLm9wdHMuaG9zdG5hbWUgKyBcIl1cIiA6IHRoaXMub3B0cy5ob3N0bmFtZSkgK1xuICAgICAgICAgICAgcG9ydCArXG4gICAgICAgICAgICB0aGlzLm9wdHMucGF0aCArXG4gICAgICAgICAgICAoZW5jb2RlZFF1ZXJ5Lmxlbmd0aCA/IFwiP1wiICsgZW5jb2RlZFF1ZXJ5IDogXCJcIikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGZWF0dXJlIGRldGVjdGlvbiBmb3IgV2ViU29ja2V0LlxuICAgICAqXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gd2hldGhlciB0aGlzIHRyYW5zcG9ydCBpcyBhdmFpbGFibGUuXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICBjaGVjaygpIHtcbiAgICAgICAgcmV0dXJuICghIVdlYlNvY2tldCAmJlxuICAgICAgICAgICAgIShcIl9faW5pdGlhbGl6ZVwiIGluIFdlYlNvY2tldCAmJiB0aGlzLm5hbWUgPT09IFdTLnByb3RvdHlwZS5uYW1lKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgWEhSIH0gZnJvbSBcIi4vcG9sbGluZy14aHIuanNcIjtcbmltcG9ydCB7IFdTIH0gZnJvbSBcIi4vd2Vic29ja2V0LmpzXCI7XG5leHBvcnQgY29uc3QgdHJhbnNwb3J0cyA9IHtcbiAgICB3ZWJzb2NrZXQ6IFdTLFxuICAgIHBvbGxpbmc6IFhIUlxufTtcbiIsImltcG9ydCB7IHRyYW5zcG9ydHMgfSBmcm9tIFwiLi90cmFuc3BvcnRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpbnN0YWxsVGltZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi91dGlsLmpzXCI7XG5pbXBvcnQgcGFyc2VxcyBmcm9tIFwicGFyc2Vxc1wiO1xuaW1wb3J0IHBhcnNldXJpIGZyb20gXCJwYXJzZXVyaVwiO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCJAc29ja2V0LmlvL2NvbXBvbmVudC1lbWl0dGVyXCI7XG5pbXBvcnQgeyBwcm90b2NvbCB9IGZyb20gXCJlbmdpbmUuaW8tcGFyc2VyXCI7XG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgRW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogU29ja2V0IGNvbnN0cnVjdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodXJpLCBvcHRzID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKHVyaSAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgdXJpKSB7XG4gICAgICAgICAgICBvcHRzID0gdXJpO1xuICAgICAgICAgICAgdXJpID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXJpKSB7XG4gICAgICAgICAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgICAgICAgICAgb3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0O1xuICAgICAgICAgICAgb3B0cy5zZWN1cmUgPSB1cmkucHJvdG9jb2wgPT09IFwiaHR0cHNcIiB8fCB1cmkucHJvdG9jb2wgPT09IFwid3NzXCI7XG4gICAgICAgICAgICBvcHRzLnBvcnQgPSB1cmkucG9ydDtcbiAgICAgICAgICAgIGlmICh1cmkucXVlcnkpXG4gICAgICAgICAgICAgICAgb3B0cy5xdWVyeSA9IHVyaS5xdWVyeTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRzLmhvc3QpIHtcbiAgICAgICAgICAgIG9wdHMuaG9zdG5hbWUgPSBwYXJzZXVyaShvcHRzLmhvc3QpLmhvc3Q7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLnNlY3VyZSA9XG4gICAgICAgICAgICBudWxsICE9IG9wdHMuc2VjdXJlXG4gICAgICAgICAgICAgICAgPyBvcHRzLnNlY3VyZVxuICAgICAgICAgICAgICAgIDogdHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIFwiaHR0cHM6XCIgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgICAgICBpZiAob3B0cy5ob3N0bmFtZSAmJiAhb3B0cy5wb3J0KSB7XG4gICAgICAgICAgICAvLyBpZiBubyBwb3J0IGlzIHNwZWNpZmllZCBtYW51YWxseSwgdXNlIHRoZSBwcm90b2NvbCBkZWZhdWx0XG4gICAgICAgICAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/IFwiNDQzXCIgOiBcIjgwXCI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ob3N0bmFtZSA9XG4gICAgICAgICAgICBvcHRzLmhvc3RuYW1lIHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiA/IGxvY2F0aW9uLmhvc3RuYW1lIDogXCJsb2NhbGhvc3RcIik7XG4gICAgICAgIHRoaXMucG9ydCA9XG4gICAgICAgICAgICBvcHRzLnBvcnQgfHxcbiAgICAgICAgICAgICAgICAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIGxvY2F0aW9uLnBvcnRcbiAgICAgICAgICAgICAgICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5zZWN1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCI0NDNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIjgwXCIpO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydHMgPSBvcHRzLnRyYW5zcG9ydHMgfHwgW1wicG9sbGluZ1wiLCBcIndlYnNvY2tldFwiXTtcbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJcIjtcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICAgICAgICB0aGlzLm9wdHMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIHBhdGg6IFwiL2VuZ2luZS5pb1wiLFxuICAgICAgICAgICAgYWdlbnQ6IGZhbHNlLFxuICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBmYWxzZSxcbiAgICAgICAgICAgIHVwZ3JhZGU6IHRydWUsXG4gICAgICAgICAgICB0aW1lc3RhbXBQYXJhbTogXCJ0XCIsXG4gICAgICAgICAgICByZW1lbWJlclVwZ3JhZGU6IGZhbHNlLFxuICAgICAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiB0cnVlLFxuICAgICAgICAgICAgcGVyTWVzc2FnZURlZmxhdGU6IHtcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDEwMjRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0cmFuc3BvcnRPcHRpb25zOiB7fSxcbiAgICAgICAgICAgIGNsb3NlT25CZWZvcmV1bmxvYWQ6IHRydWVcbiAgICAgICAgfSwgb3B0cyk7XG4gICAgICAgIHRoaXMub3B0cy5wYXRoID0gdGhpcy5vcHRzLnBhdGgucmVwbGFjZSgvXFwvJC8sIFwiXCIpICsgXCIvXCI7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRzLnF1ZXJ5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLm9wdHMucXVlcnkgPSBwYXJzZXFzLmRlY29kZSh0aGlzLm9wdHMucXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNldCBvbiBoYW5kc2hha2VcbiAgICAgICAgdGhpcy5pZCA9IG51bGw7XG4gICAgICAgIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICAgICAgICB0aGlzLnBpbmdJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIHRoaXMucGluZ1RpbWVvdXQgPSBudWxsO1xuICAgICAgICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gICAgICAgIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmNsb3NlT25CZWZvcmV1bmxvYWQpIHtcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IGNsb3NlcyB0aGUgY29ubmVjdGlvbiB3aGVuIHRoZSBcImJlZm9yZXVubG9hZFwiIGV2ZW50IGlzIGVtaXR0ZWQgYnV0IG5vdCBDaHJvbWUuIFRoaXMgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgICAgICAgICAvLyBlbnN1cmVzIGV2ZXJ5IGJyb3dzZXIgYmVoYXZlcyB0aGUgc2FtZSAobm8gXCJkaXNjb25uZWN0XCIgZXZlbnQgYXQgdGhlIFNvY2tldC5JTyBsZXZlbCB3aGVuIHRoZSBwYWdlIGlzXG4gICAgICAgICAgICAgICAgLy8gY2xvc2VkL3JlbG9hZGVkKVxuICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNpbGVudGx5IGNsb3NlIHRoZSB0cmFuc3BvcnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmhvc3RuYW1lICE9PSBcImxvY2FsaG9zdFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICAgICAqIEByZXR1cm4ge1RyYW5zcG9ydH1cbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBjcmVhdGVUcmFuc3BvcnQobmFtZSkge1xuICAgICAgICBjb25zdCBxdWVyeSA9IGNsb25lKHRoaXMub3B0cy5xdWVyeSk7XG4gICAgICAgIC8vIGFwcGVuZCBlbmdpbmUuaW8gcHJvdG9jb2wgaWRlbnRpZmllclxuICAgICAgICBxdWVyeS5FSU8gPSBwcm90b2NvbDtcbiAgICAgICAgLy8gdHJhbnNwb3J0IG5hbWVcbiAgICAgICAgcXVlcnkudHJhbnNwb3J0ID0gbmFtZTtcbiAgICAgICAgLy8gc2Vzc2lvbiBpZCBpZiB3ZSBhbHJlYWR5IGhhdmUgb25lXG4gICAgICAgIGlmICh0aGlzLmlkKVxuICAgICAgICAgICAgcXVlcnkuc2lkID0gdGhpcy5pZDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cy50cmFuc3BvcnRPcHRpb25zW25hbWVdLCB0aGlzLm9wdHMsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgc29ja2V0OiB0aGlzLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHRoaXMuaG9zdG5hbWUsXG4gICAgICAgICAgICBzZWN1cmU6IHRoaXMuc2VjdXJlLFxuICAgICAgICAgICAgcG9ydDogdGhpcy5wb3J0XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IHRyYW5zcG9ydHNbbmFtZV0ob3B0cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9wZW4oKSB7XG4gICAgICAgIGxldCB0cmFuc3BvcnQ7XG4gICAgICAgIGlmICh0aGlzLm9wdHMucmVtZW1iZXJVcGdyYWRlICYmXG4gICAgICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzICYmXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydHMuaW5kZXhPZihcIndlYnNvY2tldFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRyYW5zcG9ydCA9IFwid2Vic29ja2V0XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gRW1pdCBlcnJvciBvbiBuZXh0IHRpY2sgc28gaXQgY2FuIGJlIGxpc3RlbmVkIHRvXG4gICAgICAgICAgICB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBcIk5vIHRyYW5zcG9ydHMgYXZhaWxhYmxlXCIpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSB0aGlzLnRyYW5zcG9ydHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7XG4gICAgICAgIC8vIFJldHJ5IHdpdGggdGhlIG5leHQgdHJhbnNwb3J0IGlmIHRoZSB0cmFuc3BvcnQgaXMgZGlzYWJsZWQgKGpzb25wOiBmYWxzZSlcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNwb3J0Lm9wZW4oKTtcbiAgICAgICAgdGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQuIERpc2FibGVzIHRoZSBleGlzdGluZyBvbmUgKGlmIGFueSkuXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBzZXRUcmFuc3BvcnQodHJhbnNwb3J0KSB7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICAgICAgLy8gc2V0IHVwIHRyYW5zcG9ydCBsaXN0ZW5lcnNcbiAgICAgICAgdHJhbnNwb3J0XG4gICAgICAgICAgICAub24oXCJkcmFpblwiLCB0aGlzLm9uRHJhaW4uYmluZCh0aGlzKSlcbiAgICAgICAgICAgIC5vbihcInBhY2tldFwiLCB0aGlzLm9uUGFja2V0LmJpbmQodGhpcykpXG4gICAgICAgICAgICAub24oXCJlcnJvclwiLCB0aGlzLm9uRXJyb3IuYmluZCh0aGlzKSlcbiAgICAgICAgICAgIC5vbihcImNsb3NlXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZShcInRyYW5zcG9ydCBjbG9zZVwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHByb2JlKG5hbWUpIHtcbiAgICAgICAgbGV0IHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUpO1xuICAgICAgICBsZXQgZmFpbGVkID0gZmFsc2U7XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgb25UcmFuc3BvcnRPcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGZhaWxlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiBcInBpbmdcIiwgZGF0YTogXCJwcm9iZVwiIH1dKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5vbmNlKFwicGFja2V0XCIsIG1zZyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZhaWxlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChcInBvbmdcIiA9PT0gbXNnLnR5cGUgJiYgXCJwcm9iZVwiID09PSBtc2cuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwidXBncmFkaW5nXCIsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNwb3J0KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PT0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnBhdXNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogXCJ1cGdyYWRlXCIgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJ1cGdyYWRlXCIsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXCJwcm9iZSBlcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwidXBncmFkZUVycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCgpIHtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgICAgICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgICAgICAgY29uc3Qgb25lcnJvciA9IGVyciA9PiB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcInByb2JlIGVycm9yOiBcIiArIGVycik7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBlcnJvci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJ1cGdyYWRlRXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlKCkge1xuICAgICAgICAgICAgb25lcnJvcihcInRyYW5zcG9ydCBjbG9zZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIGNsb3NlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nXG4gICAgICAgIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgICAgICAgICBvbmVycm9yKFwic29ja2V0IGNsb3NlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgdXBncmFkZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICAgICAgICBmdW5jdGlvbiBvbnVwZ3JhZGUodG8pIHtcbiAgICAgICAgICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gICAgICAgIGNvbnN0IGNsZWFudXAgPSAoKSA9PiB7XG4gICAgICAgICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJvcGVuXCIsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgICAgICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgICAgICAgICAgdGhpcy5vZmYoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICAgICAgICAgIHRoaXMub2ZmKFwidXBncmFkaW5nXCIsIG9udXBncmFkZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRyYW5zcG9ydC5vbmNlKFwib3BlblwiLCBvblRyYW5zcG9ydE9wZW4pO1xuICAgICAgICB0cmFuc3BvcnQub25jZShcImVycm9yXCIsIG9uZXJyb3IpO1xuICAgICAgICB0cmFuc3BvcnQub25jZShcImNsb3NlXCIsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgICAgICB0aGlzLm9uY2UoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICAgICAgdGhpcy5vbmNlKFwidXBncmFkaW5nXCIsIG9udXBncmFkZSk7XG4gICAgICAgIHRyYW5zcG9ydC5vcGVuKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgZGVlbWVkIG9wZW4uXG4gICAgICpcbiAgICAgKiBAYXBpIHByaXZhdGVcbiAgICAgKi9cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJvcGVuXCIpO1xuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgICAgICAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSAmJlxuICAgICAgICAgICAgdGhpcy5vcHRzLnVwZ3JhZGUgJiZcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnBhdXNlKSB7XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICBjb25zdCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uUGFja2V0KHBhY2tldCkge1xuICAgICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgICAgICAgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgICAgICAgXCJjbG9zaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwYWNrZXRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiaGVhcnRiZWF0XCIpO1xuICAgICAgICAgICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25IYW5kc2hha2UoSlNPTi5wYXJzZShwYWNrZXQuZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwicGluZ1wiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kUGFja2V0KFwicG9uZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwaW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBvbmdcIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXCJzZXJ2ZXIgZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZGF0YVwiLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwibWVzc2FnZVwiLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGhhbmRzaGFrZSBjb21wbGV0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBoYW5kc2hha2Ugb2JqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25IYW5kc2hha2UoZGF0YSkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImhhbmRzaGFrZVwiLCBkYXRhKTtcbiAgICAgICAgdGhpcy5pZCA9IGRhdGEuc2lkO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydC5xdWVyeS5zaWQgPSBkYXRhLnNpZDtcbiAgICAgICAgdGhpcy51cGdyYWRlcyA9IHRoaXMuZmlsdGVyVXBncmFkZXMoZGF0YS51cGdyYWRlcyk7XG4gICAgICAgIHRoaXMucGluZ0ludGVydmFsID0gZGF0YS5waW5nSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMucGluZ1RpbWVvdXQgPSBkYXRhLnBpbmdUaW1lb3V0O1xuICAgICAgICB0aGlzLm9uT3BlbigpO1xuICAgICAgICAvLyBJbiBjYXNlIG9wZW4gaGFuZGxlciBjbG9zZXMgc29ja2V0XG4gICAgICAgIGlmIChcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucmVzZXRQaW5nVGltZW91dCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGFuZCByZXNldHMgcGluZyB0aW1lb3V0IHRpbWVyIGJhc2VkIG9uIHNlcnZlciBwaW5ncy5cbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlc2V0UGluZ1RpbWVvdXQoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0Rm4odGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgICAgICAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkNsb3NlKFwicGluZyB0aW1lb3V0XCIpO1xuICAgICAgICB9LCB0aGlzLnBpbmdJbnRlcnZhbCArIHRoaXMucGluZ1RpbWVvdXQpO1xuICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICAgICAgdGhpcy5waW5nVGltZW91dFRpbWVyLnVucmVmKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uRHJhaW4oKSB7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG4gICAgICAgIC8vIHNldHRpbmcgcHJldkJ1ZmZlckxlbiA9IDAgaXMgdmVyeSBpbXBvcnRhbnRcbiAgICAgICAgLy8gZm9yIGV4YW1wbGUsIHdoZW4gdXBncmFkaW5nLCB1cGdyYWRlIHBhY2tldCBpcyBzZW50IG92ZXIsXG4gICAgICAgIC8vIGFuZCBhIG5vbnplcm8gcHJldkJ1ZmZlckxlbiBjb3VsZCBjYXVzZSBwcm9ibGVtcyBvbiBgZHJhaW5gXG4gICAgICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG4gICAgICAgIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJkcmFpblwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGbHVzaCB3cml0ZSBidWZmZXJzLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgZmx1c2goKSB7XG4gICAgICAgIGlmIChcImNsb3NlZFwiICE9PSB0aGlzLnJlYWR5U3RhdGUgJiZcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LndyaXRhYmxlICYmXG4gICAgICAgICAgICAhdGhpcy51cGdyYWRpbmcgJiZcbiAgICAgICAgICAgIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiBjdXJyZW50IGxlbmd0aCBvZiB3cml0ZUJ1ZmZlclxuICAgICAgICAgICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgICAgICAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZmx1c2hcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAgICogQHJldHVybiB7U29ja2V0fSBmb3IgY2hhaW5pbmcuXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cbiAgICB3cml0ZShtc2csIG9wdGlvbnMsIGZuKSB7XG4gICAgICAgIHRoaXMuc2VuZFBhY2tldChcIm1lc3NhZ2VcIiwgbXNnLCBvcHRpb25zLCBmbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZW5kKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgICAgICAgdGhpcy5zZW5kUGFja2V0KFwibWVzc2FnZVwiLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGEgcGFja2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIHNlbmRQYWNrZXQodHlwZSwgZGF0YSwgb3B0aW9ucywgZm4pIHtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICAgICAgICAgIGZuID0gZGF0YTtcbiAgICAgICAgICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGZuID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcImNsb3NpbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwiY2xvc2VkXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zLmNvbXByZXNzID0gZmFsc2UgIT09IG9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgIGNvbnN0IHBhY2tldCA9IHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBhY2tldENyZWF0ZVwiLCBwYWNrZXQpO1xuICAgICAgICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgICAgICAgaWYgKGZuKVxuICAgICAgICAgICAgdGhpcy5vbmNlKFwiZmx1c2hcIiwgZm4pO1xuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgY29ubmVjdGlvbi5cbiAgICAgKlxuICAgICAqIEBhcGkgcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkNsb3NlKFwiZm9yY2VkIGNsb3NlXCIpO1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2xlYW51cEFuZENsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vZmYoXCJ1cGdyYWRlXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgICAgICAgICB0aGlzLm9mZihcInVwZ3JhZGVFcnJvclwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgd2FpdEZvclVwZ3JhZGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgICAgICAgICAgdGhpcy5vbmNlKFwidXBncmFkZVwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgICAgICAgdGhpcy5vbmNlKFwidXBncmFkZUVycm9yXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2luZ1wiO1xuICAgICAgICAgICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwiZHJhaW5cIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAgICAgKlxuICAgICAqIEBhcGkgcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uRXJyb3IoZXJyKSB7XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICB0aGlzLm9uQ2xvc2UoXCJ0cmFuc3BvcnQgZXJyb3JcIiwgZXJyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICAgICAqXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICovXG4gICAgb25DbG9zZShyZWFzb24sIGRlc2MpIHtcbiAgICAgICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICAgICAgIFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICAgICAgIFwiY2xvc2luZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgIC8vIGNsZWFyIHRpbWVyc1xuICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVvdXRGbih0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuICAgICAgICAgICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJjbG9zZVwiKTtcbiAgICAgICAgICAgIC8vIGVuc3VyZSB0cmFuc3BvcnQgd29uJ3Qgc3RheSBvcGVuXG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICAgICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZW1vdmVFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCB0aGlzLm9mZmxpbmVFdmVudExpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzZXQgcmVhZHkgc3RhdGVcbiAgICAgICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgICAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgICAgICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICAgICAgICAgIC8vIGVtaXQgY2xvc2UgZXZlbnRcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY2xvc2VcIiwgcmVhc29uLCBkZXNjKTtcbiAgICAgICAgICAgIC8vIGNsZWFuIGJ1ZmZlcnMgYWZ0ZXIsIHNvIHVzZXJzIGNhbiBzdGlsbFxuICAgICAgICAgICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgICAgICAgICB0aGlzLndyaXRlQnVmZmVyID0gW107XG4gICAgICAgICAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdXBncmFkZXMsIHJldHVybmluZyBvbmx5IHRob3NlIG1hdGNoaW5nIGNsaWVudCB0cmFuc3BvcnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gICAgICogQGFwaSBwcml2YXRlXG4gICAgICpcbiAgICAgKi9cbiAgICBmaWx0ZXJVcGdyYWRlcyh1cGdyYWRlcykge1xuICAgICAgICBjb25zdCBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgY29uc3QgaiA9IHVwZ3JhZGVzLmxlbmd0aDtcbiAgICAgICAgZm9yICg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh+dGhpcy50cmFuc3BvcnRzLmluZGV4T2YodXBncmFkZXNbaV0pKVxuICAgICAgICAgICAgICAgIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG4gICAgfVxufVxuU29ja2V0LnByb3RvY29sID0gcHJvdG9jb2w7XG5mdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgICBjb25zdCBvID0ge307XG4gICAgZm9yIChsZXQgaSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgb1tpXSA9IG9ialtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbztcbn1cbiIsImltcG9ydCB7IFNvY2tldCB9IGZyb20gXCIuL3NvY2tldC5qc1wiO1xuZXhwb3J0IHsgU29ja2V0IH07XG5leHBvcnQgY29uc3QgcHJvdG9jb2wgPSBTb2NrZXQucHJvdG9jb2w7XG5leHBvcnQgeyBUcmFuc3BvcnQgfSBmcm9tIFwiLi90cmFuc3BvcnQuanNcIjtcbmV4cG9ydCB7IHRyYW5zcG9ydHMgfSBmcm9tIFwiLi90cmFuc3BvcnRzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBpbnN0YWxsVGltZXJGdW5jdGlvbnMgfSBmcm9tIFwiLi91dGlsLmpzXCI7XG4iLCJjb25zdCB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0IGlzVmlldyA9IChvYmopID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iailcbiAgICAgICAgOiBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7XG59O1xuY29uc3QgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuY29uc3Qgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgKHR5cGVvZiBCbG9iICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09IFwiW29iamVjdCBCbG9iQ29uc3RydWN0b3JdXCIpO1xuY29uc3Qgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgKHR5cGVvZiBGaWxlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09IFwiW29iamVjdCBGaWxlQ29uc3RydWN0b3JdXCIpO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGEgQnVmZmVyLCBhbiBBcnJheUJ1ZmZlciwgYSBCbG9iIG9yIGEgRmlsZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCaW5hcnkob2JqKSB7XG4gICAgcmV0dXJuICgod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcob2JqKSkpIHx8XG4gICAgICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc0JpbmFyeShvYmosIHRvSlNPTikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXNCaW5hcnkob2JqKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9iai50b0pTT04gJiZcbiAgICAgICAgdHlwZW9mIG9iai50b0pTT04gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbiIsImltcG9ydCB7IGlzQmluYXJ5IH0gZnJvbSBcIi4vaXMtYmluYXJ5LmpzXCI7XG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIHwgQmxvYiB8IEZpbGUgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnNcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29uc3RydWN0UGFja2V0KHBhY2tldCkge1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcbiAgICBjb25zdCBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gICAgY29uc3QgcGFjayA9IHBhY2tldDtcbiAgICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gICAgcGFjay5hdHRhY2htZW50cyA9IGJ1ZmZlcnMubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmluYXJ5ICdhdHRhY2htZW50cydcbiAgICByZXR1cm4geyBwYWNrZXQ6IHBhY2ssIGJ1ZmZlcnM6IGJ1ZmZlcnMgfTtcbn1cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gICAgaWYgKCFkYXRhKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBpZiAoaXNCaW5hcnkoZGF0YSkpIHtcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9O1xuICAgICAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICBjb25zdCBuZXdEYXRhID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdEYXRhO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICBjb25zdCBuZXdEYXRhID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSkge1xuICAgICAgICAgICAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdEYXRhO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LCBidWZmZXJzKSB7XG4gICAgcGFja2V0LmRhdGEgPSBfcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LmRhdGEsIGJ1ZmZlcnMpO1xuICAgIHBhY2tldC5hdHRhY2htZW50cyA9IHVuZGVmaW5lZDsgLy8gbm8gbG9uZ2VyIHVzZWZ1bFxuICAgIHJldHVybiBwYWNrZXQ7XG59XG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICAgIGlmICghZGF0YSlcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgaWYgKGRhdGEgJiYgZGF0YS5fcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRhdGFbaV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG4iLCJpbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSBcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIjtcbmltcG9ydCB7IGRlY29uc3RydWN0UGFja2V0LCByZWNvbnN0cnVjdFBhY2tldCB9IGZyb20gXCIuL2JpbmFyeS5qc1wiO1xuaW1wb3J0IHsgaXNCaW5hcnksIGhhc0JpbmFyeSB9IGZyb20gXCIuL2lzLWJpbmFyeS5qc1wiO1xuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvY29sID0gNTtcbmV4cG9ydCB2YXIgUGFja2V0VHlwZTtcbihmdW5jdGlvbiAoUGFja2V0VHlwZSkge1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkNPTk5FQ1RcIl0gPSAwXSA9IFwiQ09OTkVDVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkRJU0NPTk5FQ1RcIl0gPSAxXSA9IFwiRElTQ09OTkVDVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkVWRU5UXCJdID0gMl0gPSBcIkVWRU5UXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQUNLXCJdID0gM10gPSBcIkFDS1wiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkNPTk5FQ1RfRVJST1JcIl0gPSA0XSA9IFwiQ09OTkVDVF9FUlJPUlwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkJJTkFSWV9FVkVOVFwiXSA9IDVdID0gXCJCSU5BUllfRVZFTlRcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJCSU5BUllfQUNLXCJdID0gNl0gPSBcIkJJTkFSWV9BQ0tcIjtcbn0pKFBhY2tldFR5cGUgfHwgKFBhY2tldFR5cGUgPSB7fSkpO1xuLyoqXG4gKiBBIHNvY2tldC5pbyBFbmNvZGVyIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBFbmNvZGVyIHtcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAgICAgKiBidWZmZXIgc2VxdWVuY2UsIGRlcGVuZGluZyBvbiBwYWNrZXQgdHlwZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gICAgICovXG4gICAgZW5jb2RlKG9iaikge1xuICAgICAgICBpZiAob2JqLnR5cGUgPT09IFBhY2tldFR5cGUuRVZFTlQgfHwgb2JqLnR5cGUgPT09IFBhY2tldFR5cGUuQUNLKSB7XG4gICAgICAgICAgICBpZiAoaGFzQmluYXJ5KG9iaikpIHtcbiAgICAgICAgICAgICAgICBvYmoudHlwZSA9XG4gICAgICAgICAgICAgICAgICAgIG9iai50eXBlID09PSBQYWNrZXRUeXBlLkVWRU5UXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFBhY2tldFR5cGUuQklOQVJZX0FDSztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVBc0JpbmFyeShvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdGhpcy5lbmNvZGVBc1N0cmluZyhvYmopXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5jb2RlIHBhY2tldCBhcyBzdHJpbmcuXG4gICAgICovXG4gICAgZW5jb2RlQXNTdHJpbmcob2JqKSB7XG4gICAgICAgIC8vIGZpcnN0IGlzIHR5cGVcbiAgICAgICAgbGV0IHN0ciA9IFwiXCIgKyBvYmoudHlwZTtcbiAgICAgICAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtXG4gICAgICAgIGlmIChvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfRVZFTlQgfHxcbiAgICAgICAgICAgIG9iai50eXBlID09PSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0spIHtcbiAgICAgICAgICAgIHN0ciArPSBvYmouYXR0YWNobWVudHMgKyBcIi1cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gXG4gICAgICAgIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYFxuICAgICAgICBpZiAob2JqLm5zcCAmJiBcIi9cIiAhPT0gb2JqLm5zcCkge1xuICAgICAgICAgICAgc3RyICs9IG9iai5uc3AgKyBcIixcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSB0aGUgaWRcbiAgICAgICAgaWYgKG51bGwgIT0gb2JqLmlkKSB7XG4gICAgICAgICAgICBzdHIgKz0gb2JqLmlkO1xuICAgICAgICB9XG4gICAgICAgIC8vIGpzb24gZGF0YVxuICAgICAgICBpZiAobnVsbCAhPSBvYmouZGF0YSkge1xuICAgICAgICAgICAgc3RyICs9IEpTT04uc3RyaW5naWZ5KG9iai5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmNvZGUgcGFja2V0IGFzICdidWZmZXIgc2VxdWVuY2UnIGJ5IHJlbW92aW5nIGJsb2JzLCBhbmRcbiAgICAgKiBkZWNvbnN0cnVjdGluZyBwYWNrZXQgaW50byBvYmplY3Qgd2l0aCBwbGFjZWhvbGRlcnMgYW5kXG4gICAgICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gICAgICovXG4gICAgZW5jb2RlQXNCaW5hcnkob2JqKSB7XG4gICAgICAgIGNvbnN0IGRlY29uc3RydWN0aW9uID0gZGVjb25zdHJ1Y3RQYWNrZXQob2JqKTtcbiAgICAgICAgY29uc3QgcGFjayA9IHRoaXMuZW5jb2RlQXNTdHJpbmcoZGVjb25zdHJ1Y3Rpb24ucGFja2V0KTtcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IGRlY29uc3RydWN0aW9uLmJ1ZmZlcnM7XG4gICAgICAgIGJ1ZmZlcnMudW5zaGlmdChwYWNrKTsgLy8gYWRkIHBhY2tldCBpbmZvIHRvIGJlZ2lubmluZyBvZiBkYXRhIGxpc3RcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcnM7IC8vIHdyaXRlIGFsbCB0aGUgYnVmZmVyc1xuICAgIH1cbn1cbi8qKlxuICogQSBzb2NrZXQuaW8gRGVjb2RlciBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gZGVjb2RlclxuICovXG5leHBvcnQgY2xhc3MgRGVjb2RlciBleHRlbmRzIEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGFuIGVuY29kZWQgcGFja2V0IHN0cmluZyBpbnRvIHBhY2tldCBKU09OLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9iaiAtIGVuY29kZWQgcGFja2V0XG4gICAgICovXG4gICAgYWRkKG9iaikge1xuICAgICAgICBsZXQgcGFja2V0O1xuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcGFja2V0ID0gdGhpcy5kZWNvZGVTdHJpbmcob2JqKTtcbiAgICAgICAgICAgIGlmIChwYWNrZXQudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfRVZFTlQgfHxcbiAgICAgICAgICAgICAgICBwYWNrZXQudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfQUNLKSB7XG4gICAgICAgICAgICAgICAgLy8gYmluYXJ5IHBhY2tldCdzIGpzb25cbiAgICAgICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBuZXcgQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpO1xuICAgICAgICAgICAgICAgIC8vIG5vIGF0dGFjaG1lbnRzLCBsYWJlbGVkIGJpbmFyeSBidXQgbm8gYmluYXJ5IGRhdGEgdG8gZm9sbG93XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldC5hdHRhY2htZW50cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBlci5lbWl0UmVzZXJ2ZWQoXCJkZWNvZGVkXCIsIHBhY2tldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbm9uLWJpbmFyeSBmdWxsIHBhY2tldFxuICAgICAgICAgICAgICAgIHN1cGVyLmVtaXRSZXNlcnZlZChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0JpbmFyeShvYmopIHx8IG9iai5iYXNlNjQpIHtcbiAgICAgICAgICAgIC8vIHJhdyBiaW5hcnkgZGF0YVxuICAgICAgICAgICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYWNrZXQgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEob2JqKTtcbiAgICAgICAgICAgICAgICBpZiAocGFja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBzdXBlci5lbWl0UmVzZXJ2ZWQoXCJkZWNvZGVkXCIsIHBhY2tldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB0eXBlOiBcIiArIG9iaik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlIGEgcGFja2V0IFN0cmluZyAoSlNPTiBkYXRhKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgICAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gICAgICovXG4gICAgZGVjb2RlU3RyaW5nKHN0cikge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIC8vIGxvb2sgdXAgdHlwZVxuICAgICAgICBjb25zdCBwID0ge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyKHN0ci5jaGFyQXQoMCkpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoUGFja2V0VHlwZVtwLnR5cGVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVua25vd24gcGFja2V0IHR5cGUgXCIgKyBwLnR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb2sgdXAgYXR0YWNobWVudHMgaWYgdHlwZSBiaW5hcnlcbiAgICAgICAgaWYgKHAudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfRVZFTlQgfHxcbiAgICAgICAgICAgIHAudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfQUNLKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgd2hpbGUgKHN0ci5jaGFyQXQoKytpKSAhPT0gXCItXCIgJiYgaSAhPSBzdHIubGVuZ3RoKSB7IH1cbiAgICAgICAgICAgIGNvbnN0IGJ1ZiA9IHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpO1xuICAgICAgICAgICAgaWYgKGJ1ZiAhPSBOdW1iZXIoYnVmKSB8fCBzdHIuY2hhckF0KGkpICE9PSBcIi1cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgYXR0YWNobWVudHNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLmF0dGFjaG1lbnRzID0gTnVtYmVyKGJ1Zik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBuYW1lc3BhY2UgKGlmIGFueSlcbiAgICAgICAgaWYgKFwiL1wiID09PSBzdHIuY2hhckF0KGkgKyAxKSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgICBpZiAoXCIsXCIgPT09IGMpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAubnNwID0gc3RyLnN1YnN0cmluZyhzdGFydCwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwLm5zcCA9IFwiL1wiO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb2sgdXAgaWRcbiAgICAgICAgY29uc3QgbmV4dCA9IHN0ci5jaGFyQXQoaSArIDEpO1xuICAgICAgICBpZiAoXCJcIiAhPT0gbmV4dCAmJiBOdW1iZXIobmV4dCkgPT0gbmV4dCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIHdoaWxlICgrK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBjIHx8IE51bWJlcihjKSAhPSBjKSB7XG4gICAgICAgICAgICAgICAgICAgIC0taTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAuaWQgPSBOdW1iZXIoc3RyLnN1YnN0cmluZyhzdGFydCwgaSArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIGpzb24gZGF0YVxuICAgICAgICBpZiAoc3RyLmNoYXJBdCgrK2kpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gdHJ5UGFyc2Uoc3RyLnN1YnN0cihpKSk7XG4gICAgICAgICAgICBpZiAoRGVjb2Rlci5pc1BheWxvYWRWYWxpZChwLnR5cGUsIHBheWxvYWQpKSB7XG4gICAgICAgICAgICAgICAgcC5kYXRhID0gcGF5bG9hZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcGF5bG9hZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgc3RhdGljIGlzUGF5bG9hZFZhbGlkKHR5cGUsIHBheWxvYWQpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQ09OTkVDVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCI7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuRElTQ09OTkVDVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gcGF5bG9hZCA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkNPTk5FQ1RfRVJST1I6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBwYXlsb2FkID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBwYXlsb2FkID09PSBcIm9iamVjdFwiO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkVWRU5UOlxuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXlsb2FkKSAmJiBwYXlsb2FkLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQUNLOlxuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkJJTkFSWV9BQ0s6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkocGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdHJ5UGFyc2Uoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogQSBtYW5hZ2VyIG9mIGEgYmluYXJ5IGV2ZW50J3MgJ2J1ZmZlciBzZXF1ZW5jZScuIFNob3VsZFxuICogYmUgY29uc3RydWN0ZWQgd2hlbmV2ZXIgYSBwYWNrZXQgb2YgdHlwZSBCSU5BUllfRVZFTlQgaXNcbiAqIGRlY29kZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QmluYXJ5UmVjb25zdHJ1Y3Rvcn0gaW5pdGlhbGl6ZWQgcmVjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBCaW5hcnlSZWNvbnN0cnVjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgICAgICAgdGhpcy5wYWNrZXQgPSBwYWNrZXQ7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvblxuICAgICAqIGFmdGVyIGEgQklOQVJZX0VWRU5UIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkXG4gICAgICogQHJldHVybiB7bnVsbCB8IE9iamVjdH0gcmV0dXJucyBudWxsIGlmIG1vcmUgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQgb3JcbiAgICAgKiAgIGEgcmVjb25zdHJ1Y3RlZCBwYWNrZXQgb2JqZWN0IGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiByZWNlaXZlZC5cbiAgICAgKi9cbiAgICB0YWtlQmluYXJ5RGF0YShiaW5EYXRhKSB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJpbkRhdGEpO1xuICAgICAgICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpIHtcbiAgICAgICAgICAgIC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdFxuICAgICAgICAgICAgY29uc3QgcGFja2V0ID0gcmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7XG4gICAgICAgICAgICB0aGlzLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBwYWNrZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBiaW5hcnkgcGFja2V0IHJlY29uc3RydWN0aW9uIHZhcmlhYmxlcy5cbiAgICAgKi9cbiAgICBmaW5pc2hlZFJlY29uc3RydWN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlY29uUGFjayA9IG51bGw7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBvbihvYmosIGV2LCBmbikge1xuICAgIG9iai5vbihldiwgZm4pO1xuICAgIHJldHVybiBmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICBvYmoub2ZmKGV2LCBmbik7XG4gICAgfTtcbn1cbiIsImltcG9ydCB7IFBhY2tldFR5cGUgfSBmcm9tIFwic29ja2V0LmlvLXBhcnNlclwiO1xuaW1wb3J0IHsgb24gfSBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHsgRW1pdHRlciwgfSBmcm9tIFwiQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlclwiO1xuLyoqXG4gKiBJbnRlcm5hbCBldmVudHMuXG4gKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci5cbiAqL1xuY29uc3QgUkVTRVJWRURfRVZFTlRTID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgY29ubmVjdDogMSxcbiAgICBjb25uZWN0X2Vycm9yOiAxLFxuICAgIGRpc2Nvbm5lY3Q6IDEsXG4gICAgZGlzY29ubmVjdGluZzogMSxcbiAgICAvLyBFdmVudEVtaXR0ZXIgcmVzZXJ2ZWQgZXZlbnRzOiBodHRwczovL25vZGVqcy5vcmcvYXBpL2V2ZW50cy5odG1sI2V2ZW50c19ldmVudF9uZXdsaXN0ZW5lclxuICAgIG5ld0xpc3RlbmVyOiAxLFxuICAgIHJlbW92ZUxpc3RlbmVyOiAxLFxufSk7XG5leHBvcnQgY2xhc3MgU29ja2V0IGV4dGVuZHMgRW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW8sIG5zcCwgb3B0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5pZHMgPSAwO1xuICAgICAgICB0aGlzLmFja3MgPSB7fTtcbiAgICAgICAgdGhpcy5mbGFncyA9IHt9O1xuICAgICAgICB0aGlzLmlvID0gaW87XG4gICAgICAgIHRoaXMubnNwID0gbnNwO1xuICAgICAgICBpZiAob3B0cyAmJiBvcHRzLmF1dGgpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0aCA9IG9wdHMuYXV0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pby5fYXV0b0Nvbm5lY3QpXG4gICAgICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRvIG9wZW4sIGNsb3NlIGFuZCBwYWNrZXQgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHN1YkV2ZW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMuc3VicylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgaW8gPSB0aGlzLmlvO1xuICAgICAgICB0aGlzLnN1YnMgPSBbXG4gICAgICAgICAgICBvbihpbywgXCJvcGVuXCIsIHRoaXMub25vcGVuLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb24oaW8sIFwicGFja2V0XCIsIHRoaXMub25wYWNrZXQuYmluZCh0aGlzKSksXG4gICAgICAgICAgICBvbihpbywgXCJlcnJvclwiLCB0aGlzLm9uZXJyb3IuYmluZCh0aGlzKSksXG4gICAgICAgICAgICBvbihpbywgXCJjbG9zZVwiLCB0aGlzLm9uY2xvc2UuYmluZCh0aGlzKSksXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIFNvY2tldCB3aWxsIHRyeSB0byByZWNvbm5lY3Qgd2hlbiBpdHMgTWFuYWdlciBjb25uZWN0cyBvciByZWNvbm5lY3RzXG4gICAgICovXG4gICAgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zdWJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5zdWJFdmVudHMoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlvW1wiX3JlY29ubmVjdGluZ1wiXSlcbiAgICAgICAgICAgIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMuaW8uX3JlYWR5U3RhdGUpXG4gICAgICAgICAgICB0aGlzLm9ub3BlbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGNvbm5lY3QoKVxuICAgICAqL1xuICAgIG9wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2VuZCguLi5hcmdzKSB7XG4gICAgICAgIGFyZ3MudW5zaGlmdChcIm1lc3NhZ2VcIik7XG4gICAgICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGBlbWl0YC5cbiAgICAgKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBlbWl0KGV2LCAuLi5hcmdzKSB7XG4gICAgICAgIGlmIChSRVNFUlZFRF9FVkVOVFMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGV2ICsgJ1wiIGlzIGEgcmVzZXJ2ZWQgZXZlbnQgbmFtZScpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MudW5zaGlmdChldik7XG4gICAgICAgIGNvbnN0IHBhY2tldCA9IHtcbiAgICAgICAgICAgIHR5cGU6IFBhY2tldFR5cGUuRVZFTlQsXG4gICAgICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICB9O1xuICAgICAgICBwYWNrZXQub3B0aW9ucyA9IHt9O1xuICAgICAgICBwYWNrZXQub3B0aW9ucy5jb21wcmVzcyA9IHRoaXMuZmxhZ3MuY29tcHJlc3MgIT09IGZhbHNlO1xuICAgICAgICAvLyBldmVudCBhY2sgY2FsbGJhY2tcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgY29uc3QgaWQgPSB0aGlzLmlkcysrO1xuICAgICAgICAgICAgY29uc3QgYWNrID0gYXJncy5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyQWNrQ2FsbGJhY2soaWQsIGFjayk7XG4gICAgICAgICAgICBwYWNrZXQuaWQgPSBpZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc1RyYW5zcG9ydFdyaXRhYmxlID0gdGhpcy5pby5lbmdpbmUgJiZcbiAgICAgICAgICAgIHRoaXMuaW8uZW5naW5lLnRyYW5zcG9ydCAmJlxuICAgICAgICAgICAgdGhpcy5pby5lbmdpbmUudHJhbnNwb3J0LndyaXRhYmxlO1xuICAgICAgICBjb25zdCBkaXNjYXJkUGFja2V0ID0gdGhpcy5mbGFncy52b2xhdGlsZSAmJiAoIWlzVHJhbnNwb3J0V3JpdGFibGUgfHwgIXRoaXMuY29ubmVjdGVkKTtcbiAgICAgICAgaWYgKGRpc2NhcmRQYWNrZXQpIHtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5wYWNrZXQocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mbGFncyA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVnaXN0ZXJBY2tDYWxsYmFjayhpZCwgYWNrKSB7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSB0aGlzLmZsYWdzLnRpbWVvdXQ7XG4gICAgICAgIGlmICh0aW1lb3V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWNrc1tpZF0gPSBhY2s7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCB0aW1lciA9IHRoaXMuaW8uc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFja3NbaWRdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNlbmRCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZW5kQnVmZmVyW2ldLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRCdWZmZXIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjay5jYWxsKHRoaXMsIG5ldyBFcnJvcihcIm9wZXJhdGlvbiBoYXMgdGltZWQgb3V0XCIpKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIHRoaXMuYWNrc1tpZF0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGhpcy5pby5jbGVhclRpbWVvdXRGbih0aW1lcik7XG4gICAgICAgICAgICBhY2suYXBwbHkodGhpcywgW251bGwsIC4uLmFyZ3NdKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwYWNrZXQocGFja2V0KSB7XG4gICAgICAgIHBhY2tldC5uc3AgPSB0aGlzLm5zcDtcbiAgICAgICAgdGhpcy5pby5fcGFja2V0KHBhY2tldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVuZ2luZSBgb3BlbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ub3BlbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmF1dGggPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGgoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhY2tldCh7IHR5cGU6IFBhY2tldFR5cGUuQ09OTkVDVCwgZGF0YSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBQYWNrZXRUeXBlLkNPTk5FQ1QsIGRhdGE6IHRoaXMuYXV0aCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgb3IgbWFuYWdlciBgZXJyb3JgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVyclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25lcnJvcihlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0X2Vycm9yXCIsIGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGBjbG9zZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVhc29uXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNsb3NlKHJlYXNvbikge1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmlkO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImRpc2Nvbm5lY3RcIiwgcmVhc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucGFja2V0KHBhY2tldCkge1xuICAgICAgICBjb25zdCBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gICAgICAgIGlmICghc2FtZU5hbWVzcGFjZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkNPTk5FQ1Q6XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldC5kYXRhICYmIHBhY2tldC5kYXRhLnNpZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHBhY2tldC5kYXRhLnNpZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNvbm5lY3QoaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0X2Vycm9yXCIsIG5ldyBFcnJvcihcIkl0IHNlZW1zIHlvdSBhcmUgdHJ5aW5nIHRvIHJlYWNoIGEgU29ja2V0LklPIHNlcnZlciBpbiB2Mi54IHdpdGggYSB2My54IGNsaWVudCwgYnV0IHRoZXkgYXJlIG5vdCBjb21wYXRpYmxlIChtb3JlIGluZm9ybWF0aW9uIGhlcmU6IGh0dHBzOi8vc29ja2V0LmlvL2RvY3MvdjMvbWlncmF0aW5nLWZyb20tMi14LXRvLTMtMC8pXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuRVZFTlQ6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQklOQVJZX0VWRU5UOlxuICAgICAgICAgICAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkFDSzpcbiAgICAgICAgICAgICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQklOQVJZX0FDSzpcbiAgICAgICAgICAgICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuRElTQ09OTkVDVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQYWNrZXRUeXBlLkNPTk5FQ1RfRVJST1I6XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKHBhY2tldC5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBlcnIuZGF0YSA9IHBhY2tldC5kYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0X2Vycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmV2ZW50KHBhY2tldCkge1xuICAgICAgICBjb25zdCBhcmdzID0gcGFja2V0LmRhdGEgfHwgW107XG4gICAgICAgIGlmIChudWxsICE9IHBhY2tldC5pZCkge1xuICAgICAgICAgICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQoYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChPYmplY3QuZnJlZXplKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbWl0RXZlbnQoYXJncykge1xuICAgICAgICBpZiAodGhpcy5fYW55TGlzdGVuZXJzICYmIHRoaXMuX2FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycy5zbGljZSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBlci5lbWl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhbiBhY2sgY2FsbGJhY2sgdG8gZW1pdCB3aXRoIGFuIGV2ZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBhY2soaWQpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBzZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gcHJldmVudCBkb3VibGUgY2FsbGJhY2tzXG4gICAgICAgICAgICBpZiAoc2VudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlbGYucGFja2V0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBQYWNrZXRUeXBlLkFDSyxcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBhY2tub3dsZWdlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uYWNrKHBhY2tldCkge1xuICAgICAgICBjb25zdCBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjaykge1xuICAgICAgICAgICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgY29ubmVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25jb25uZWN0KGlkKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVtaXRCdWZmZXJlZCgpO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNvbm5lY3RcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtaXQgYnVmZmVyZWQgZXZlbnRzIChyZWNlaXZlZCBhbmQgZW1pdHRlZCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGVtaXRCdWZmZXJlZCgpIHtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLmZvckVhY2goKGFyZ3MpID0+IHRoaXMuZW1pdEV2ZW50KGFyZ3MpKTtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKChwYWNrZXQpID0+IHRoaXMucGFja2V0KHBhY2tldCkpO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZGlzY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMub25jbG9zZShcImlvIHNlcnZlciBkaXNjb25uZWN0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLFxuICAgICAqIHRoaXMgbWV0aG9kIGVuc3VyZXMgdGhlIG1hbmFnZXIgc3RvcHMgdHJhY2tpbmcgdXMgYW5kXG4gICAgICogdGhhdCByZWNvbm5lY3Rpb25zIGRvbid0IGdldCB0cmlnZ2VyZWQgZm9yIHRoaXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpIHtcbiAgICAgICAgICAgIC8vIGNsZWFuIHN1YnNjcmlwdGlvbnMgdG8gYXZvaWQgcmVjb25uZWN0aW9uc1xuICAgICAgICAgICAgdGhpcy5zdWJzLmZvckVhY2goKHN1YkRlc3Ryb3kpID0+IHN1YkRlc3Ryb3koKSk7XG4gICAgICAgICAgICB0aGlzLnN1YnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pb1tcIl9kZXN0cm95XCJdKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0IG1hbnVhbGx5LlxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBQYWNrZXRUeXBlLkRJU0NPTk5FQ1QgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2xcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgLy8gZmlyZSBldmVudHNcbiAgICAgICAgICAgIHRoaXMub25jbG9zZShcImlvIGNsaWVudCBkaXNjb25uZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgZGlzY29ubmVjdCgpXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29tcHJlc3MgZmxhZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb21wcmVzcyAtIGlmIGB0cnVlYCwgY29tcHJlc3NlcyB0aGUgc2VuZGluZyBkYXRhXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbXByZXNzKGNvbXByZXNzKSB7XG4gICAgICAgIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSBtb2RpZmllciBmb3IgYSBzdWJzZXF1ZW50IGV2ZW50IGVtaXNzaW9uIHRoYXQgdGhlIGV2ZW50IG1lc3NhZ2Ugd2lsbCBiZSBkcm9wcGVkIHdoZW4gdGhpcyBzb2NrZXQgaXMgbm90XG4gICAgICogcmVhZHkgdG8gc2VuZCBtZXNzYWdlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgZ2V0IHZvbGF0aWxlKCkge1xuICAgICAgICB0aGlzLmZsYWdzLnZvbGF0aWxlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSBtb2RpZmllciBmb3IgYSBzdWJzZXF1ZW50IGV2ZW50IGVtaXNzaW9uIHRoYXQgdGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHdpdGggYW4gZXJyb3Igd2hlbiB0aGVcbiAgICAgKiBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCB3aXRob3V0IGFuIGFja25vd2xlZGdlbWVudCBmcm9tIHRoZSBzZXJ2ZXI6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBzb2NrZXQudGltZW91dCg1MDAwKS5lbWl0KFwibXktZXZlbnRcIiwgKGVycikgPT4ge1xuICAgICAqICAgaWYgKGVycikge1xuICAgICAqICAgICAvLyB0aGUgc2VydmVyIGRpZCBub3QgYWNrbm93bGVkZ2UgdGhlIGV2ZW50IGluIHRoZSBnaXZlbiBkZWxheVxuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHJldHVybnMgc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICB0aW1lb3V0KHRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5mbGFncy50aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiBhbnkgZXZlbnQgaXMgZW1pdHRlZC4gVGhlIGV2ZW50IG5hbWUgaXMgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGVcbiAgICAgKiBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBvbkFueShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMgfHwgW107XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiBhbnkgZXZlbnQgaXMgZW1pdHRlZC4gVGhlIGV2ZW50IG5hbWUgaXMgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGVcbiAgICAgKiBjYWxsYmFjay4gVGhlIGxpc3RlbmVyIGlzIGFkZGVkIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3RlbmVycyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBwcmVwZW5kQW55KGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb2ZmQW55KGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5fYW55TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2FueUxpc3RlbmVycztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyID09PSBsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIHRoYXQgYXJlIGxpc3RlbmluZyBmb3IgYW55IGV2ZW50IHRoYXQgaXMgc3BlY2lmaWVkLiBUaGlzIGFycmF5IGNhbiBiZSBtYW5pcHVsYXRlZCxcbiAgICAgKiBlLmcuIHRvIHJlbW92ZSBsaXN0ZW5lcnMuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgbGlzdGVuZXJzQW55KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNvY2tldCBhcyBFbmdpbmUsIGluc3RhbGxUaW1lckZ1bmN0aW9ucywgfSBmcm9tIFwiZW5naW5lLmlvLWNsaWVudFwiO1xuaW1wb3J0IHsgU29ja2V0IH0gZnJvbSBcIi4vc29ja2V0LmpzXCI7XG5pbXBvcnQgKiBhcyBwYXJzZXIgZnJvbSBcInNvY2tldC5pby1wYXJzZXJcIjtcbmltcG9ydCB7IG9uIH0gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCBCYWNrb2ZmIGZyb20gXCJiYWNrbzJcIjtcbmltcG9ydCB7IEVtaXR0ZXIsIH0gZnJvbSBcIkBzb2NrZXQuaW8vY29tcG9uZW50LWVtaXR0ZXJcIjtcbmV4cG9ydCBjbGFzcyBNYW5hZ2VyIGV4dGVuZHMgRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IodXJpLCBvcHRzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uc3BzID0ge307XG4gICAgICAgIHRoaXMuc3VicyA9IFtdO1xuICAgICAgICBpZiAodXJpICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1cmkpIHtcbiAgICAgICAgICAgIG9wdHMgPSB1cmk7XG4gICAgICAgICAgICB1cmkgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgICAgIG9wdHMucGF0aCA9IG9wdHMucGF0aCB8fCBcIi9zb2NrZXQuaW9cIjtcbiAgICAgICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICAgICAgaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgICAgICAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKChfYSA9IG9wdHMucmFuZG9taXphdGlvbkZhY3RvcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMC41KTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xuICAgICAgICAgICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgICAgICAgICBtYXg6IHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgoKSxcbiAgICAgICAgICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKCksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRpbWVvdXQobnVsbCA9PSBvcHRzLnRpbWVvdXQgPyAyMDAwMCA6IG9wdHMudGltZW91dCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgY29uc3QgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgICAgICAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICAgICAgICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gICAgICAgIHRoaXMuX2F1dG9Db25uZWN0ID0gb3B0cy5hdXRvQ29ubmVjdCAhPT0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9hdXRvQ29ubmVjdClcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb24odikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb24gPSAhIXY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZWNvbm5lY3Rpb25BdHRlbXB0cyh2KSB7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheSA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1pbih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJhbmRvbWl6YXRpb25GYWN0b3Iodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgICAgICAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEppdHRlcih2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkRlbGF5TWF4KHYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4O1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheU1heCA9IHY7XG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1heCh2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRpbWVvdXQodikge1xuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZW91dDtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdHJ5aW5nIHRvIHJlY29ubmVjdCBpZiByZWNvbm5lY3Rpb24gaXMgZW5hYmxlZCBhbmQgd2UgaGF2ZSBub3RcbiAgICAgKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgbWF5YmVSZWNvbm5lY3RPbk9wZW4oKSB7XG4gICAgICAgIC8vIE9ubHkgdHJ5IHRvIHJlY29ubmVjdCBpZiBpdCdzIHRoZSBmaXJzdCB0aW1lIHdlJ3JlIGNvbm5lY3RpbmdcbiAgICAgICAgaWYgKCF0aGlzLl9yZWNvbm5lY3RpbmcgJiZcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbiAmJlxuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLmF0dGVtcHRzID09PSAwKSB7XG4gICAgICAgICAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0IGBzb2NrZXRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBvcHRpb25hbCwgY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb3Blbihmbikge1xuICAgICAgICBpZiAofnRoaXMuX3JlYWR5U3RhdGUuaW5kZXhPZihcIm9wZW5cIikpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5lbmdpbmUgPSBuZXcgRW5naW5lKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIC8vIGVtaXQgYG9wZW5gXG4gICAgICAgIGNvbnN0IG9wZW5TdWJEZXN0cm95ID0gb24oc29ja2V0LCBcIm9wZW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbm9wZW4oKTtcbiAgICAgICAgICAgIGZuICYmIGZuKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBlbWl0IGBlcnJvcmBcbiAgICAgICAgY29uc3QgZXJyb3JTdWIgPSBvbihzb2NrZXQsIFwiZXJyb3JcIiwgKGVycikgPT4ge1xuICAgICAgICAgICAgc2VsZi5jbGVhbnVwKCk7XG4gICAgICAgICAgICBzZWxmLl9yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgICAgIGZuKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBPbmx5IGRvIHRoaXMgaWYgdGhlcmUgaXMgbm8gZm4gdG8gaGFuZGxlIHRoZSBlcnJvclxuICAgICAgICAgICAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHRoaXMuX3RpbWVvdXQ7XG4gICAgICAgICAgICBpZiAodGltZW91dCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG9wZW5TdWJEZXN0cm95KCk7IC8vIHByZXZlbnRzIGEgcmFjZSBjb25kaXRpb24gd2l0aCB0aGUgJ29wZW4nIGV2ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzZXQgdGltZXJcbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9wZW5TdWJEZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgc29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KFwiZXJyb3JcIiwgbmV3IEVycm9yKFwidGltZW91dFwiKSk7XG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3Vicy5wdXNoKGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKG9wZW5TdWJEZXN0cm95KTtcbiAgICAgICAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIG9wZW4oKVxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNvbm5lY3QoZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3Blbihmbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBvcGVuLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbm9wZW4oKSB7XG4gICAgICAgIC8vIGNsZWFyIG9sZCBzdWJzXG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAvLyBtYXJrIGFzIG9wZW5cbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcIm9wZW5cIik7XG4gICAgICAgIC8vIGFkZCBuZXcgc3Vic1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCBcInBpbmdcIiwgdGhpcy5vbnBpbmcuYmluZCh0aGlzKSksIG9uKHNvY2tldCwgXCJkYXRhXCIsIHRoaXMub25kYXRhLmJpbmQodGhpcykpLCBvbihzb2NrZXQsIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLCBvbihzb2NrZXQsIFwiY2xvc2VcIiwgdGhpcy5vbmNsb3NlLmJpbmQodGhpcykpLCBvbih0aGlzLmRlY29kZXIsIFwiZGVjb2RlZFwiLCB0aGlzLm9uZGVjb2RlZC5iaW5kKHRoaXMpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgcGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25waW5nKCkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBpbmdcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aXRoIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRlY29kZWQocGFja2V0KSB7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicGFja2V0XCIsIHBhY2tldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNvY2tldCBlcnJvci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25lcnJvcihlcnIpIHtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBlcnIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHNvY2tldCBmb3IgdGhlIGdpdmVuIGBuc3BgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U29ja2V0fVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzb2NrZXQobnNwLCBvcHRzKSB7XG4gICAgICAgIGxldCBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgICAgICAgaWYgKCFzb2NrZXQpIHtcbiAgICAgICAgICAgIHNvY2tldCA9IG5ldyBTb2NrZXQodGhpcywgbnNwLCBvcHRzKTtcbiAgICAgICAgICAgIHRoaXMubnNwc1tuc3BdID0gc29ja2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb2NrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2Rlc3Ryb3koc29ja2V0KSB7XG4gICAgICAgIGNvbnN0IG5zcHMgPSBPYmplY3Qua2V5cyh0aGlzLm5zcHMpO1xuICAgICAgICBmb3IgKGNvbnN0IG5zcCBvZiBuc3BzKSB7XG4gICAgICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgICAgICAgICAgIGlmIChzb2NrZXQuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9wYWNrZXQocGFja2V0KSB7XG4gICAgICAgIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjbGVhbnVwKCkge1xuICAgICAgICB0aGlzLnN1YnMuZm9yRWFjaCgoc3ViRGVzdHJveSkgPT4gc3ViRGVzdHJveSgpKTtcbiAgICAgICAgdGhpcy5zdWJzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuZGVjb2Rlci5kZXN0cm95KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlIHRoZSBjdXJyZW50IHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2Nsb3NlKCkge1xuICAgICAgICB0aGlzLnNraXBSZWNvbm5lY3QgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbmNsb3NlKFwiZm9yY2VkIGNsb3NlXCIpO1xuICAgICAgICBpZiAodGhpcy5lbmdpbmUpXG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgY2xvc2UoKVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNsb3NlKHJlYXNvbikge1xuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNsb3NlXCIsIHJlYXNvbik7XG4gICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0IGEgcmVjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICByZWNvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RpbmcgfHwgdGhpcy5za2lwUmVjb25uZWN0KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0X2ZhaWxlZFwiKTtcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGVsYXkgPSB0aGlzLmJhY2tvZmYuZHVyYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCB0aW1lciA9IHRoaXMuc2V0VGltZW91dEZuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfYXR0ZW1wdFwiLCBzZWxmLmJhY2tvZmYuYXR0ZW1wdHMpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZWxmLm9wZW4oKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInJlY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vbnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICAgICAgICAgIHRpbWVyLnVucmVmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaChmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlY29ubmVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25yZWNvbm5lY3QoKSB7XG4gICAgICAgIGNvbnN0IGF0dGVtcHQgPSB0aGlzLmJhY2tvZmYuYXR0ZW1wdHM7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RcIiwgYXR0ZW1wdCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgdXJsIH0gZnJvbSBcIi4vdXJsLmpzXCI7XG5pbXBvcnQgeyBNYW5hZ2VyIH0gZnJvbSBcIi4vbWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgU29ja2V0IH0gZnJvbSBcIi4vc29ja2V0LmpzXCI7XG4vKipcbiAqIE1hbmFnZXJzIGNhY2hlLlxuICovXG5jb25zdCBjYWNoZSA9IHt9O1xuZnVuY3Rpb24gbG9va3VwKHVyaSwgb3B0cykge1xuICAgIGlmICh0eXBlb2YgdXJpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIG9wdHMgPSB1cmk7XG4gICAgICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgY29uc3QgcGFyc2VkID0gdXJsKHVyaSwgb3B0cy5wYXRoIHx8IFwiL3NvY2tldC5pb1wiKTtcbiAgICBjb25zdCBzb3VyY2UgPSBwYXJzZWQuc291cmNlO1xuICAgIGNvbnN0IGlkID0gcGFyc2VkLmlkO1xuICAgIGNvbnN0IHBhdGggPSBwYXJzZWQucGF0aDtcbiAgICBjb25zdCBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdW1wibnNwc1wiXTtcbiAgICBjb25zdCBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fFxuICAgICAgICBvcHRzW1wiZm9yY2UgbmV3IGNvbm5lY3Rpb25cIl0gfHxcbiAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8XG4gICAgICAgIHNhbWVOYW1lc3BhY2U7XG4gICAgbGV0IGlvO1xuICAgIGlmIChuZXdDb25uZWN0aW9uKSB7XG4gICAgICAgIGlvID0gbmV3IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICAgICAgICBjYWNoZVtpZF0gPSBuZXcgTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlvID0gY2FjaGVbaWRdO1xuICAgIH1cbiAgICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgICAgIG9wdHMucXVlcnkgPSBwYXJzZWQucXVlcnlLZXk7XG4gICAgfVxuICAgIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpO1xufVxuLy8gc28gdGhhdCBcImxvb2t1cFwiIGNhbiBiZSB1c2VkIGJvdGggYXMgYSBmdW5jdGlvbiAoZS5nLiBgaW8oLi4uKWApIGFuZCBhcyBhXG4vLyBuYW1lc3BhY2UgKGUuZy4gYGlvLmNvbm5lY3QoLi4uKWApLCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuT2JqZWN0LmFzc2lnbihsb29rdXAsIHtcbiAgICBNYW5hZ2VyLFxuICAgIFNvY2tldCxcbiAgICBpbzogbG9va3VwLFxuICAgIGNvbm5lY3Q6IGxvb2t1cCxcbn0pO1xuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHsgcHJvdG9jb2wgfSBmcm9tIFwic29ja2V0LmlvLXBhcnNlclwiO1xuLyoqXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHsgTWFuYWdlciwgU29ja2V0LCBsb29rdXAgYXMgaW8sIGxvb2t1cCBhcyBjb25uZWN0LCBsb29rdXAgYXMgZGVmYXVsdCwgfTtcbiIsImltcG9ydCBwYXJzZXVyaSBmcm9tIFwicGFyc2V1cmlcIjtcbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0gdXJpIC0gdXJsXG4gKiBAcGFyYW0gcGF0aCAtIHRoZSByZXF1ZXN0IHBhdGggb2YgdGhlIGNvbm5lY3Rpb25cbiAqIEBwYXJhbSBsb2MgLSBBbiBvYmplY3QgbWVhbnQgdG8gbWltaWMgd2luZG93LmxvY2F0aW9uLlxuICogICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVybCh1cmksIHBhdGggPSBcIlwiLCBsb2MpIHtcbiAgICBsZXQgb2JqID0gdXJpO1xuICAgIC8vIGRlZmF1bHQgdG8gd2luZG93LmxvY2F0aW9uXG4gICAgbG9jID0gbG9jIHx8ICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgbG9jYXRpb24pO1xuICAgIGlmIChudWxsID09IHVyaSlcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgbG9jLmhvc3Q7XG4gICAgLy8gcmVsYXRpdmUgcGF0aCBzdXBwb3J0XG4gICAgaWYgKHR5cGVvZiB1cmkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKFwiL1wiID09PSB1cmkuY2hhckF0KDApKSB7XG4gICAgICAgICAgICBpZiAoXCIvXCIgPT09IHVyaS5jaGFyQXQoMSkpIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBsb2MpIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmkgPSBcImh0dHBzOi8vXCIgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcGFyc2VcbiAgICAgICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgICB9XG4gICAgLy8gbWFrZSBzdXJlIHdlIHRyZWF0IGBsb2NhbGhvc3Q6ODBgIGFuZCBgbG9jYWxob3N0YCBlcXVhbGx5XG4gICAgaWYgKCFvYmoucG9ydCkge1xuICAgICAgICBpZiAoL14oaHR0cHx3cykkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgICAgICAgIG9iai5wb3J0ID0gXCI4MFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKC9eKGh0dHB8d3MpcyQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgICAgICAgb2JqLnBvcnQgPSBcIjQ0M1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9iai5wYXRoID0gb2JqLnBhdGggfHwgXCIvXCI7XG4gICAgY29uc3QgaXB2NiA9IG9iai5ob3N0LmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICBjb25zdCBob3N0ID0gaXB2NiA/IFwiW1wiICsgb2JqLmhvc3QgKyBcIl1cIiA6IG9iai5ob3N0O1xuICAgIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgICBvYmouaWQgPSBvYmoucHJvdG9jb2wgKyBcIjovL1wiICsgaG9zdCArIFwiOlwiICsgb2JqLnBvcnQgKyBwYXRoO1xuICAgIC8vIGRlZmluZSBocmVmXG4gICAgb2JqLmhyZWYgPVxuICAgICAgICBvYmoucHJvdG9jb2wgK1xuICAgICAgICAgICAgXCI6Ly9cIiArXG4gICAgICAgICAgICBob3N0ICtcbiAgICAgICAgICAgIChsb2MgJiYgbG9jLnBvcnQgPT09IG9iai5wb3J0ID8gXCJcIiA6IFwiOlwiICsgb2JqLnBvcnQpO1xuICAgIHJldHVybiBvYmo7XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvbnZlcnNhdGlvblZpZXcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvbnZlcnNhdGlvblZpZXcuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBcIi4vQ29udmVyc2F0aW9uVmlldy5zY3NzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IEV2ZW50cyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL0V2ZW50cy5qc1wiO1xuaW1wb3J0IGlvIGZyb20gXCJzb2NrZXQuaW8tY2xpZW50XCI7XG5pbXBvcnQgQnV0dG9uVHlwZXMgZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblR5cGVzXCI7XG5pbXBvcnQgRm9ybSBmcm9tIFwiLi4vLi4vY29yZS9Gb3JtL0Zvcm1cIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL2NvcmUvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IElucHV0RmllbGQgZnJvbSBcIi4uLy4uL2NvcmUvSW5wdXRGaWVsZC9JbnB1dEZpZWxkXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi9jb3JlL0lucHV0cy9UZXh0SW5wdXQvVGV4dElucHV0XCI7XG5pbXBvcnQgTGFiZWwgZnJvbSBcIi4uLy4uL2NvcmUvTGFiZWwvTGFiZWxcIjtcbmltcG9ydCBQcm9maWxlUGljdHVyZSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Qcm9maWxlUGljdHVyZS9Qcm9maWxlUGljdHVyZVwiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXNcIjtcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcbmltcG9ydCB7IHNlbmRHZXRSZXF1ZXN0LCBzZW5kUG9zdFJlcXVlc3QgfSBmcm9tIFwiLi4vLi4vLi4vSGVscGVyXCI7XG5cbi8qKlxuICogQSB2aWV3IGZvciBtZXNzYWdpbmcgYSBjZXJ0YWluIHVzZXJcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICovXG5jb25zdCBDb252ZXJzYXRpb25WaWV3ID0gKHsgY29udmVyc2F0aW9uIH0pID0+IHtcbiAgICBjb25zdCBtZXNzYWdlc1ZpZXdSZWYgPSB1c2VSZWYoKTtcblxuICAgIGNvbnN0IGxvZ2dlZEluVXNlciA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIudXNlcik7XG5cbiAgICBjb25zdCByZWNlaXZpbmdVc2VyID1cbiAgICAgICAgY29udmVyc2F0aW9uLnBhcnRpY2lwYW50cyAmJlxuICAgICAgICAoU3RyaW5nKGNvbnZlcnNhdGlvbi5wYXJ0aWNpcGFudHNbMF0uX2lkKSAhPT0gbG9nZ2VkSW5Vc2VyLl9pZFxuICAgICAgICAgICAgPyBjb252ZXJzYXRpb24ucGFydGljaXBhbnRzWzBdXG4gICAgICAgICAgICA6IGNvbnZlcnNhdGlvbi5wYXJ0aWNpcGFudHNbMV0pO1xuXG4gICAgY29uc3QgcmVjZWl2ZXJJZCA9IHJlY2VpdmluZ1VzZXIgJiYgcmVjZWl2aW5nVXNlci5faWQ7XG4gICAgY29uc3Qgc2VuZGVySWQgPSBsb2dnZWRJblVzZXIuX2lkOyAvL3NldCB0byBsb2dnZWRJblVzZXIuX2lkXG5cbiAgICBjb25zdCBTRVJWRVJfVVJMID1cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gcHJvY2Vzcy5lbnYuUFJPRFVDVElPTl9TRVJWRVJfVVJMIDogcHJvY2Vzcy5lbnYuREVWRUxPUE1FTlRfU0VSVkVSX1VSTDtcblxuICAgIGNvbnN0IFtzb2NrZXQsIHNldFNvY2tldF0gPSB1c2VTdGF0ZSh7fSk7XG4gICAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGUoXCJcIik7XG5cbiAgICBjb25zdCBbbWVzc2FnZXMsIHNldE1lc3NhZ2VzXSA9IHVzZVN0YXRlKFtdKTtcblxuICAgIGNvbnN0IGxvYWRDb252ZXJzYXRpb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHNlbmRQb3N0UmVxdWVzdChcbiAgICAgICAgICAgIFJvdXRlcy5NZXNzYWdlLkdldENvbnZlcnNhdGlvbixcbiAgICAgICAgICAgIHsgcmVjZWl2ZXJJZDogcmVjZWl2aW5nVXNlci5faWQgfSxcbiAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuTWVzc2FnZS5TdWNjZXNzR2V0Q29udmVyc2F0aW9uLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAoZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZXRNZXNzYWdlcyhkYXRhLmNvbnZlcnNhdGlvbi5tZXNzYWdlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGNvbnZlcnNhdGlvbi5wYXJ0aWNpcGFudHMpIHtcbiAgICAgICAgICAgIGxvYWRDb252ZXJzYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH0sIFtjb252ZXJzYXRpb25dKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChyZWNlaXZpbmdVc2VyKSB7XG4gICAgICAgICAgICBsZXQgaW5pdGlhbFNvY2tldCA9IGlvKFNFUlZFUl9VUkwsIHsgYXV0b0Nvbm5lY3Q6IGZhbHNlIH0pO1xuICAgICAgICAgICAgaW5pdGlhbFNvY2tldC5hdXRoID0geyBpZDogc2VuZGVySWQgfTtcblxuICAgICAgICAgICAgaW5pdGlhbFNvY2tldC5vbihFdmVudHMuTWVzc2FnZSwgKHsgbWVzc2FnZSwgc2VuZGVySWQgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wTWVzc2FnZXMgPSBbLi4ubWVzc2FnZXNdO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VXYXNSZWNlaXZlZCA9IHNlbmRlcklkID09PSByZWNlaXZlcklkO1xuICAgICAgICAgICAgICAgIHRlbXBNZXNzYWdlcy5wdXNoKHsgdmFsdWU6IG1lc3NhZ2UsIHNlbmRlcklkIH0pO1xuICAgICAgICAgICAgICAgIHNldE1lc3NhZ2VzKHRlbXBNZXNzYWdlcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGluaXRpYWxTb2NrZXQub24oRXZlbnRzLk1lc3NhZ2VGYWlsdXJlLCAoZXJyb3JNZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAvL1RPRE8gc2hvdyBub3RpZmljYXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW5pdGlhbFNvY2tldC5jb25uZWN0KCk7XG4gICAgICAgICAgICBzZXRTb2NrZXQoaW5pdGlhbFNvY2tldCk7XG4gICAgICAgICAgICBtZXNzYWdlc1ZpZXdSZWYuY3VycmVudC5zY3JvbGxUb3AgPSBtZXNzYWdlc1ZpZXdSZWYuY3VycmVudC5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9LCBbbWVzc2FnZXNdKTtcblxuICAgIC8vIHNlbmQgcmVxdWVzdCB0byBnZXQgY29udmVyc2F0aW9uc1xuICAgIC8vIG5lZWRzOiBhdXRoIHRva2VuLCByZWNpcGllbnRJZFxuXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHNldE1lc3NhZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlLCByZWNlaXZlcklkKTtcbiAgICAgICAgc29ja2V0LmVtaXQoRXZlbnRzLk1lc3NhZ2UsIHtcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICByZWNlaXZlcklkXG4gICAgICAgIH0pO1xuICAgICAgICBzZXRNZXNzYWdlKFwiXCIpO1xuICAgIH07XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb252ZXJzYXRpb24tdmlld1wiPlxuICAgICAgICAgICAge3JlY2VpdmluZ1VzZXIgJiYgKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3VycmVudENvbnZlcnNhdGlvbkluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZSBpbWFnZT17cmVjZWl2aW5nVXNlci5wcm9maWxlUGljdHVyZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT57cmVjZWl2aW5nVXNlciAmJiByZWNlaXZpbmdVc2VyLm5hbWV9PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXNzYWdlcy12aWV3XCIgcmVmPXttZXNzYWdlc1ZpZXdSZWZ9PlxuICAgICAgICAgICAgICAgICAgICAgICAge21lc3NhZ2VzLm1hcCgobXNnKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlLWJveCBcIiArIChtc2cuc2VuZGVySWQgIT09IHNlbmRlcklkID8gXCJyZWNlaXZpbmctbXNnXCIgOiBcInNlbmRpbmctbXNnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttc2cuc2VuZGVySWQgIT09IHNlbmRlcklkICYmIDxQcm9maWxlUGljdHVyZSBpbWFnZT17cmVjZWl2aW5nVXNlci5wcm9maWxlUGljdHVyZX0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnttc2cudmFsdWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmQtbWVzc2FnZS1mb3JtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZGUtYnktc2lkZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRGaWVsZCBzdHlsZT17eyBmbGV4OiBcIjcwJVwiIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsPk1lc3NhZ2U8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRJbnB1dCB2YWx1ZT17bWVzc2FnZX0gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9JbnB1dEZpZWxkPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT17QnV0dG9uVHlwZXMuQ3JlYXRpb259IG9uQ2xpY2s9e2hhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Gb3JtPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb252ZXJzYXRpb25WaWV3O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9DaGF0c1ZpZXcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NoYXRzVmlldy5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFwiLi9DaGF0c1ZpZXcuc2Nzc1wiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9maWxlUGljdHVyZSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Qcm9maWxlUGljdHVyZS9Qcm9maWxlUGljdHVyZVwiO1xuaW1wb3J0IHsgc2VuZEdldFJlcXVlc3QsIHNlbmRQb3N0UmVxdWVzdCB9IGZyb20gXCIuLi8uLi8uLi9IZWxwZXJcIjtcbmltcG9ydCBSZXNwb25zZU1lc3NhZ2VzIGZyb20gXCIuLi8uLi8uLi8uLi9TZXJ2ZXIvUmVzcG9uc2VzL1Jlc3BvbnNlTWVzc2FnZXNcIjtcbmltcG9ydCBSb3V0ZXMgZnJvbSBcIi4uLy4uLy4uLy4uL1NlcnZlci9Sb3V0ZXMvUm91dGVzXCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuXG4vKipcbiAqIEEgdmlldyBmb3IgZGlzcGxheWluZyB0aGUgY2hhdHMgb2YgYSB1c2VyXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqL1xuY29uc3QgQ2hhdHNWaWV3ID0gKHsgc2V0U2VsZWN0ZWRDb252ZXJzYXRpb24gfSkgPT4ge1xuICAgIGNvbnN0IFtjb252ZXJzYXRpb25zLCBzZXRDb252ZXJzYXRpb25zXSA9IHVzZVN0YXRlKFtdKTtcbiAgICBjb25zdCB1c2VyID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlci51c2VyKTtcblxuICAgIC8qKlxuICAgICAqIFNlbmRzIGNoYXQgZ2V0IHJlcXVlc3QuXG4gICAgICogQGF1dGhvciBTdGFjZXkgUG9wZW5mb29zZVxuICAgICAqIEBkYXRlICAwMy8xOC8yMlxuICAgICAqL1xuICAgIGNvbnN0IHBvcHVsYXRlQ29udmVyc2F0aW9ucyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgc2VuZFBvc3RSZXF1ZXN0KFxuICAgICAgICAgICAgUm91dGVzLk1lc3NhZ2UuR2V0Q29udmVyc2F0aW9ucyxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlcy5NZXNzYWdlLkdldENvbnZlcnNhdGlvbnMuU3VjY2VzcyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgc2V0Q29udmVyc2F0aW9ucyhkYXRhLmNvbnZlcnNhdGlvbnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHBvcHVsYXRlQ29udmVyc2F0aW9ucygpO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hhdHMtdmlld1wiPlxuICAgICAgICAgICAge2NvbnZlcnNhdGlvbnMubWFwKChjaGF0KSA9PiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiY2hhdEl0ZW0gXCIgKyAoY2hhdC5hY3RpdmUgJiYgXCJjaGF0QWN0aXZlXCIpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25zLmZvckVhY2goKG90aGVyQ2hhdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyQ2hhdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhdC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2VsZWN0ZWRDb252ZXJzYXRpb24oY2hhdCk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8UHJvZmlsZVBpY3R1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcoY2hhdC5wYXJ0aWNpcGFudHNbMF0uX2lkKSAhPT0gdXNlci5faWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjaGF0LnBhcnRpY2lwYW50c1swXS5wcm9maWxlUGljdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGNoYXQucGFydGljaXBhbnRzWzFdLnByb2ZpbGVQaWN0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAge1N0cmluZyhjaGF0LnBhcnRpY2lwYW50c1swXS5faWQpICE9PSB1c2VyLl9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2hhdC5wYXJ0aWNpcGFudHNbMF0ubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY2hhdC5wYXJ0aWNpcGFudHNbMV0ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaGF0c1ZpZXc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9NZXNzYWdlLnNjc3NcIjtcbmltcG9ydCBpbyBmcm9tIFwic29ja2V0LmlvLWNsaWVudFwiO1xuaW1wb3J0IFBhZ2UgZnJvbSBcIi4uL1BhZ2UuanNcIjtcbmltcG9ydCBDb252ZXJzYXRpb25WaWV3IGZyb20gXCIuLi8uLi9WaWV3cy9NZXNzYWdlL0NvbnZlcnNhdGlvblZpZXdcIjtcbmltcG9ydCBDaGF0c1ZpZXcgZnJvbSBcIi4uLy4uL1ZpZXdzL01lc3NhZ2UvQ2hhdHNWaWV3XCI7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuXG5jb25zdCBFdmVudHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vU2VydmVyL0V2ZW50cy5qc1wiKTtcblxuY29uc3QgU0VSVkVSX1VSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAwXCI7XG5cbmNvbnN0IE1lc3NhZ2UgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCBbc2VsZWN0ZWRDb252ZXJzYXRpb24sIHNldFNlbGVjdGVkQ29udmVyc2F0aW9uXSA9IHVzZVN0YXRlKHt9KTtcbiAgICBjb25zdCBpc0xvZ2dlZEluID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5hdXRoUmVkdWNlci5pc0xvZ2dlZEluKTtcbiAgICByZXR1cm4gKFxuICAgICAgICA8UGFnZSBjdXJyZW50UGFnZT1cIm1lc3NhZ2VcIiB0b3BCYXI9e3RydWV9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXNzYWdlLXBhZ2VcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2UtdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgxPk1lc3NhZ2U8L2gxPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIHtpc0xvZ2dlZEluID8gKFxuICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCBzcmM9XCIvc29ja2V0LmlvL3NvY2tldC5pby5qc1wiPjwvc2NyaXB0PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lc3NhZ2UtYXJlYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGF0c1ZpZXcgc2V0U2VsZWN0ZWRDb252ZXJzYXRpb249e3NldFNlbGVjdGVkQ29udmVyc2F0aW9ufSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb252ZXJzYXRpb25WaWV3IGNvbnZlcnNhdGlvbj17c2VsZWN0ZWRDb252ZXJzYXRpb259IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJndWVzdC1tZXNzYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDE+WW91IGFyZSBjdXJyZW50bHkgYnJvd3NpbmcgU3R1ZHkgU3BhY2VzIGFzIGEgZ3Vlc3QhPC9oMT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBsZWFzZSBzaWduLXVwIG9yIGxvZy1pbiB0byBiZSBhYmxlIHRvIG1lc3NhZ2UgdXNlcnM8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5GZWVsIGZyZWUgdG8gdXNlIG91ciBzZWFyY2ggdG9vbCB0byBkaXNjb3ZlciBzdHVkeSBncm91cHMgaW4geW91ciBhcmVhLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1BhZ2U+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2U7XG4iLCJpbXBvcnQgXCIuL0FwcC5zY3NzXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzXCI7XG5pbXBvcnQgeyBSb3V0ZSwgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFN3aXRjaCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBSZWRpcmVjdCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgc2lnbkluLCBzaWduT3V0IH0gZnJvbSBcIi4vc3RhdGUvYWN0aW9uc1wiO1xuaW1wb3J0IFBvcHVwIGZyb20gXCIuL1ZpZXdzL1BvcHVwL1BvcHVwXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uIGZyb20gXCIuL1ZpZXdzL05vdGlmaWNhdGlvbi9Ob3RpZmljYXRpb25cIjtcblxuaW1wb3J0IFJlc3BvbnNlTWVzc2FnZXMgZnJvbSBcIi4uLy4uL1NlcnZlci9SZXNwb25zZXMvUmVzcG9uc2VNZXNzYWdlcy5qc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi4vLi4vU2VydmVyL1JvdXRlcy9Sb3V0ZXMuanNcIjtcblxuLy8gUEFHRVMuXG5pbXBvcnQgSG9tZSBmcm9tIFwiLi9QYWdlcy9Ib21lL0hvbWUuanNcIjtcbmltcG9ydCBTdHVkeSBmcm9tIFwiLi9QYWdlcy9TdHVkeS9TdHVkeS5qc1wiO1xuaW1wb3J0IFZpZXdzIGZyb20gXCIuL1ZpZXdzL1ZpZXdzXCI7XG5pbXBvcnQgU2VhcmNoIGZyb20gXCIuL1BhZ2VzL1NlYXJjaC9TZWFyY2hcIjtcbmltcG9ydCBTdHVkeUdyb3VwIGZyb20gXCIuL1BhZ2VzL1N0dWR5R3JvdXAvU3R1ZHlHcm91cFwiO1xuaW1wb3J0IEFjY291bnQgZnJvbSBcIi4vUGFnZXMvQWNjb3VudC9BY2NvdW50XCI7XG5pbXBvcnQgeyBzZW5kR2V0UmVxdWVzdCB9IGZyb20gXCIuLi9IZWxwZXJcIjtcbmltcG9ydCBNZXNzYWdlIGZyb20gXCIuL1BhZ2VzL01lc3NhZ2UvTWVzc2FnZVwiO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHJvb3QgcHJlc2VudGF0aW9uYWwgY29tcG9uZW50IHRoYXQgcHJvY2Vzc2VzIHVzZXIgYXV0aGVudGljYXRpb25cbiAqIGFuZCBtYW5hZ2VzIHRoZSBkaXNwbGF5IG9mIHRoZSBhcHBsaWNhdGlvblwicyBwYWdlcy5cbiAqIEBhdXRob3IgQ2FtZXJvbiBCdXJraG9sZGVyIGFuZCBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDEwLzIwLzIwMjFcbiAqL1xuY29uc3QgQXBwID0gKHByb3BzKSA9PiB7XG4gICAgY29uc3QgaXNMb2dnZWRJbiA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUuYXV0aFJlZHVjZXIuaXNMb2dnZWRJbik7XG4gICAgY29uc3QgW2hhc05vdE1vdW50ZWQsIHNldEhhc05vdE1vdW50ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCBwb3B1cElzU2hvd2luZyA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gc3RhdGUucG9wdXBSZWR1Y2VyLmlzU2hvd2luZyk7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uSXNTaG93aW5nID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBzdGF0ZS5ub3RpZmljYXRpb25SZWR1Y2VyLmlzU2hvd2luZyk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIHBhZ2UgaGFzIGZpbmlzaGVkIGxvYWRlZCBhbmQgcmVmcmVzaGVzIHRoZSBhdXRoZW50aWNhdGlvbiB0b2tlblxuICAgICAqIGlmIHRoZSB1c2VyIGlzIGFscmVhZHkgbG9nZ2VkIGluLiBVc2luZyBhbiBlbXB0eSBkZXBlbmRlbmN5IGFycmF5IGVuc3VyZXNcbiAgICAgKiB0aGF0IHRoaXMgb25seSBydW5zIG9uIHVubW91bnQuXG4gICAgICogQGF1dGhvciBDYW1lcm9uIEJ1cmtob2xkZXJcbiAgICAgKiBAZGF0ZSAgIDEwLzIwLzIwMjFcbiAgICAgKi9cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc2V0SGFzTm90TW91bnRlZCh0cnVlKTtcbiAgICAgICAgICAgIHVwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4oKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSB1c2VyJ3MgYXV0aGVudGljYXRpb24gdG9rZW4gZm9yIHBlcnNpc3RlbnQgbG9naW5zLlxuICAgICAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICAgICAqIEBkYXRlICAgMTAvMjIvMjAyMVxuICAgICAqL1xuICAgIGNvbnN0IHVwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChpc0xvZ2dlZEluKSB7XG4gICAgICAgICAgICBhd2FpdCBzZW5kR2V0UmVxdWVzdChcbiAgICAgICAgICAgICAgICBSb3V0ZXMuQWNjb3VudC5VcGRhdGVBdXRoZW50aWNhdGlvblRva2VuLFxuICAgICAgICAgICAgICAgIFJlc3BvbnNlTWVzc2FnZXMuQWNjb3VudC5TdWNjZXNzVXBkYXRlQXV0aGVudGljYXRpb25Ub2tlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgKGRhdGEsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTSUdOSU5HIE9VVCEhISEhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXNwYXRjaChzaWduT3V0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgYXV0aGVudGljYXRpb25Ub2tlbiwgYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlLCB1c2VyIH0gPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzaWduSW4oeyBhdXRoZW50aWNhdGlvblRva2VuLCBhdXRoZW50aWNhdGlvblRva2VuRXhwaXJhdGlvbkRhdGUsIHVzZXIgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJvdXRlcj5cbiAgICAgICAgICAgIDxQb3B1cCBpc1Nob3dpbmc9e3BvcHVwSXNTaG93aW5nfSAvPlxuICAgICAgICAgICAgPE5vdGlmaWNhdGlvbiBpc1Nob3dpbmc9e25vdGlmaWNhdGlvbklzU2hvd2luZ30gLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7aXNMb2dnZWRJbiA/IDxSZWRpcmVjdCB0bz1cIi9zdHVkeVwiIC8+IDogPEhvbWUgLz59XG4gICAgICAgICAgICAgICAgICAgIDwvUm91dGU+XG5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoPVwiL3ZlcmlmeS86dmVyaWZpY2F0aW9uVG9rZW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXsocHJvcHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50U2V0dXBWaWV3ID0gVmlld3MuSG9tZS5BY2NvdW50U2V0dXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzTG9nZ2VkSW4gPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVkaXJlY3QgdG89XCIvc3R1ZHlcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SG9tZSB7Li4ucHJvcHN9IGhvbWVWaWV3PXthY2NvdW50U2V0dXBWaWV3fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aD1cIi92ZXJpZnlFbWFpbC86dmVyaWZpY2F0aW9uVG9rZW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXsocHJvcHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50TG9naW5WaWV3ID0gVmlld3MuSG9tZS5Mb2dpbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNMb2dnZWRJbiA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdHVkeSB7Li4ucHJvcHN9IGlzVmVyaWZ5aW5nRW1haWw9e3RydWV9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxIb21lIHsuLi5wcm9wc30gaG9tZVZpZXc9e2FjY291bnRMb2dpblZpZXd9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvc3R1ZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHVkeSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9zZWFyY2hcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWFyY2ggLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvbWVzc2FnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPE1lc3NhZ2UgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cblxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg9XCIvZ3JvdXAvOmlkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcj17KHByb3BzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzTG9nZ2VkSW4gPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3R1ZHlHcm91cCB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWRpcmVjdCB0bz1cIi9cIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoPVwiL2FjY291bnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyPXsocHJvcHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNMb2dnZWRJbiA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBY2NvdW50IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWRpcmVjdCB0bz1cIi9cIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg9XCIqXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcj17KHByb3BzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz1cIi9cIiAvPjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Td2l0Y2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Sb3V0ZXI+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyJztcblxuLyoqXG4gKiBBZGFwdGVkIGZyb20gUmVhY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL21hc3Rlci9wYWNrYWdlcy9zaGFyZWQvZm9ybWF0UHJvZEVycm9yTWVzc2FnZS5qc1xuICpcbiAqIERvIG5vdCByZXF1aXJlIHRoaXMgbW9kdWxlIGRpcmVjdGx5ISBVc2Ugbm9ybWFsIHRocm93IGVycm9yIGNhbGxzLiBUaGVzZSBtZXNzYWdlcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggZXJyb3IgY29kZXNcbiAqIGR1cmluZyBidWlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICByZXR1cm4gXCJNaW5pZmllZCBSZWR1eCBlcnJvciAjXCIgKyBjb2RlICsgXCI7IHZpc2l0IGh0dHBzOi8vcmVkdXguanMub3JnL0Vycm9ycz9jb2RlPVwiICsgY29kZSArIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIFwiICsgJ3VzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMuICc7XG59XG5cbi8vIElubGluZWQgdmVyc2lvbiBvZiB0aGUgYHN5bWJvbC1vYnNlcnZhYmxlYCBwb2x5ZmlsbFxudmFyICQkb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnO1xufSkoKTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8vIElubGluZWQgLyBzaG9ydGVuZWQgdmVyc2lvbiBvZiBga2luZE9mYCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2tpbmQtb2ZcbmZ1bmN0aW9uIG1pbmlLaW5kT2YodmFsKSB7XG4gIGlmICh2YWwgPT09IHZvaWQgMCkgcmV0dXJuICd1bmRlZmluZWQnO1xuICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHJldHVybiAnYXJyYXknO1xuICBpZiAoaXNEYXRlKHZhbCkpIHJldHVybiAnZGF0ZSc7XG4gIGlmIChpc0Vycm9yKHZhbCkpIHJldHVybiAnZXJyb3InO1xuICB2YXIgY29uc3RydWN0b3JOYW1lID0gY3Rvck5hbWUodmFsKTtcblxuICBzd2l0Y2ggKGNvbnN0cnVjdG9yTmFtZSkge1xuICAgIGNhc2UgJ1N5bWJvbCc6XG4gICAgY2FzZSAnUHJvbWlzZSc6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgY2FzZSAnTWFwJzpcbiAgICBjYXNlICdTZXQnOlxuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yTmFtZTtcbiAgfSAvLyBvdGhlclxuXG5cbiAgcmV0dXJuIHR5cGUuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICcnKTtcbn1cblxuZnVuY3Rpb24gY3Rvck5hbWUodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nID8gdmFsLmNvbnN0cnVjdG9yLm5hbWUgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yKHZhbCkge1xuICByZXR1cm4gdmFsIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIHZhbC5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiB2YWwuY29uc3RydWN0b3IgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5zdGFja1RyYWNlTGltaXQgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHR5cGVvZiB2YWwudG9EYXRlU3RyaW5nID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuZ2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsLnNldERhdGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGtpbmRPZih2YWwpIHtcbiAgdmFyIHR5cGVPZlZhbCA9IHR5cGVvZiB2YWw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0eXBlT2ZWYWwgPSBtaW5pS2luZE9mKHZhbCk7XG4gIH1cblxuICByZXR1cm4gdHlwZU9mVmFsO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsga2luZE9mKGlucHV0U3RhdGUpICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTIpIDogXCJUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTMpIDogXCJUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgJ1wiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiJyBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNCkgOiBcIldoZW4gY2FsbGVkIHdpdGggYW4gYWN0aW9uIG9mIHR5cGUgXCIgKyAoYWN0aW9uVHlwZSA/IFwiXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgOiAnKHVua25vd24gdHlwZSknKSArIFwiLCB0aGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFxcXCJcIiArIF9rZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYpIDogXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGJ1dCBpbnN0ZWFkIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YoYWN0aW9uQ3JlYXRvcnMpICsgXCInLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1KSA6ICdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdG9yZSksIHt9LCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsIi8qKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIHBvdGVudGlhbCBcImV4dHJhIGFyZ3VtZW50XCIgdmFsdWUgdG8gYmUgaW5qZWN0ZWQgbGF0ZXIsXHJcbiAqIGFuZCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSB0aHVuayBtaWRkbGV3YXJlIHRoYXQgdXNlcyB0aGF0IHZhbHVlXHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgLy8gU3RhbmRhcmQgUmVkdXggbWlkZGxld2FyZSBkZWZpbml0aW9uIHBhdHRlcm46XG4gIC8vIFNlZTogaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjd3JpdGluZy1jdXN0b20tbWlkZGxld2FyZVxuICB2YXIgbWlkZGxld2FyZSA9IGZ1bmN0aW9uIG1pZGRsZXdhcmUoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIC8vIFRoZSB0aHVuayBtaWRkbGV3YXJlIGxvb2tzIGZvciBhbnkgZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgdG8gYHN0b3JlLmRpc3BhdGNoYC5cbiAgICAgICAgLy8gSWYgdGhpcyBcImFjdGlvblwiIGlzIHJlYWxseSBhIGZ1bmN0aW9uLCBjYWxsIGl0IGFuZCByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBJbmplY3QgdGhlIHN0b3JlJ3MgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBtZXRob2RzLCBhcyB3ZWxsIGFzIGFueSBcImV4dHJhIGFyZ1wiXG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcGFzcyB0aGUgYWN0aW9uIGRvd24gdGhlIG1pZGRsZXdhcmUgY2hhaW4gYXMgdXN1YWxcblxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIG1pZGRsZXdhcmU7XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpOyAvLyBBdHRhY2ggdGhlIGZhY3RvcnkgZnVuY3Rpb24gc28gdXNlcnMgY2FuIGNyZWF0ZSBhIGN1c3RvbWl6ZWQgdmVyc2lvblxuLy8gd2l0aCB3aGF0ZXZlciBcImV4dHJhIGFyZ1wiIHRoZXkgd2FudCB0byBpbmplY3QgaW50byB0aGVpciB0aHVua3NcblxudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgeyBhdXRoQ29uc3RhbnRzIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9jb25zdGFudHNcIjtcblxuLy8gTG9hZCB0aGUgdXNlciBpbnRvIHRoZSBzdGF0ZSBpZiBpdCBpcyBhbHJlYWR5IGxvZ2dlZCBpblxubGV0IHVzZXIgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidXNlclwiKSk7XG5jb25zdCBjdXJyZW50RGF0ZSA9IERhdGUubm93KCk7XG5jb25zdCBqd3RFeHBpcmF0aW9uRGF0ZSA9IG5ldyBEYXRlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiYXV0aGVudGljYXRpb25Ub2tlbkV4cGlyYXRpb25EYXRlXCIpKTtcbmNvbnN0IHVzZXJJc0xvZ2dlZEluID0gY3VycmVudERhdGUgPCBqd3RFeHBpcmF0aW9uRGF0ZTtcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHVzZXIgPyB7IGlzTG9nZ2VkSW46IHVzZXJJc0xvZ2dlZEluLCB1c2VyIH0gOiB7IGlzTG9nZ2VkSW46IGZhbHNlIH07XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgcmVkdWNlciBmb3IgYWxsIGFjdGlvbnMgcmVsYXRpbmcgdG8gYXV0aGVudGljYXRpb25cblxuICogQHBhcmFtICB7b2JqZWN0fSBzdGF0ZSBUaGUgaW5pdGFsIHN0YXRlIG9mIHRoZSByZWR1Y2VyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGFjdGlvbiBUaGUgYWN0aW9uIGZyb20gcG9wdXBDb25zdGFudHMgdGhhdCB0cmFuc2Zvcm1zIHRoZSBzdGF0ZSBpbnRvIHRoZSBuZXh0IHN0YXRlXG4gKiBAYXV0aG9yIEV0aGFuIENhbm5lbG9uZ29cbiAqIEBkYXRlICAgMTEvMDkvMjAyMVxuICovXG5jb25zdCBhdXRoUmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAvL1NpZ24gdGhlIHVzZXIgaW4gYW5kIHNhdmUgdGhlIHVzZXIgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgICBjYXNlIGF1dGhDb25zdGFudHMuU0lHTl9JTjpcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidG9rZW5cIiwgYWN0aW9uLnBheWxvYWQuYXV0aGVudGljYXRpb25Ub2tlbik7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZVwiLCBhY3Rpb24ucGF5bG9hZC5hdXRoZW50aWNhdGlvblRva2VuRXhwaXJhdGlvbkRhdGUpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1c2VyXCIsIEpTT04uc3RyaW5naWZ5KGFjdGlvbi5wYXlsb2FkLnVzZXIpKTtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VyOiBhY3Rpb24ucGF5bG9hZC51c2VyLCBpc0xvZ2dlZEluOiB0cnVlIH07XG5cbiAgICAgICAgY2FzZSBhdXRoQ29uc3RhbnRzLlNJR05fT1VUOlxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdXNlcjoge30sIGlzTG9nZ2VkSW46IGZhbHNlIH07XG5cbiAgICAgICAgY2FzZSBhdXRoQ29uc3RhbnRzLkNSRUFURV9BQ0NPVU5UOlxuICAgICAgICAgICAgLy8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ1bnZlcmlmaWVkVXNlclwiLCBKU09OLnN0cmluZ2lmeShhY3Rpb24ucGF5bG9hZC51bnZlcmlmaWVkVXNlcikpO1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHVudmVyaWZpZWRVc2VyOiBhY3Rpb24ucGF5bG9hZC51bnZlcmlmaWVkVXNlciB9O1xuXG4gICAgICAgIGNhc2UgYXV0aENvbnN0YW50cy5TRVRfVVNFUjpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VyOiBhY3Rpb24ucGF5bG9hZC51c2VyIH07XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhdXRoUmVkdWNlcjtcbiIsImltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gXCJyZWR1eFwiO1xuaW1wb3J0IGF1dGhSZWR1Y2VyIGZyb20gXCIuL2F1dGhSZWR1Y2VyXCI7XG5pbXBvcnQgcG9wdXBSZWR1Y2VyIGZyb20gXCIuL3BvcHVwUmVkdWNlclwiO1xuaW1wb3J0IHN0dWR5R3JvdXBzUmVkdWNlciBmcm9tIFwiLi9zdHVkeUdyb3Vwc1JlZHVjZXJcIjtcbmltcG9ydCBub3RpZmljYXRpb25SZWR1Y2VyIGZyb20gXCIuL25vdGlmaWNhdGlvblJlZHVjZXJcIjtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNvbWJpbmVzIGFsbCB0aGUgcmVkdWNlcnMgc28gdGhleSBhbGwgY2FuIGJlIHJlZmVyZW5jZWQgZnJvbSB0aGlzIGZpbGVcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMS8wOS8yMDIxXG4gKi9cbmNvbnN0IGFsbFJlZHVjZXJzID0gY29tYmluZVJlZHVjZXJzKHtcbiAgICBhdXRoUmVkdWNlcixcbiAgICBwb3B1cFJlZHVjZXIsXG4gICAgc3R1ZHlHcm91cHNSZWR1Y2VyLFxuICAgIG5vdGlmaWNhdGlvblJlZHVjZXJcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhbGxSZWR1Y2VycztcbiIsImltcG9ydCB7IHBvcHVwQ29uc3RhbnRzIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9jb25zdGFudHNcIjtcbmltcG9ydCB2aWV3cyBmcm9tIFwiLi4vLi4vVmlld3MvVmlld3NcIjtcbi8qKlxuICogVGhpcyBpcyB0aGUgcmVkdWNlciBmb3IgYWxsIGFjdGlvbnMgcmVsYXRpbmcgdG8gcG9wdXNcbiAqIEBwYXJhbSAge29iamVjdH0gc3RhdGUgVGhlIGluaXRhbCBzdGF0ZSBvZiB0aGUgcmVkdWNlclxuICogQHBhcmFtICB7U3RyaW5nfSBhY3Rpb24gVGhlIGFjdGlvbiBmcm9tIHBvcHVwQ29uc3RhbnRzIHRoYXQgdHJhbnNmb3JtcyB0aGUgc3RhdGUgaW50byB0aGUgbmV4dCBzdGF0ZVxuICogQGF1dGhvciBFdGhhbiBDYW5uZWxvbmdvXG4gKiBAZGF0ZSAgIDExLzE4LzIwMjFcbiAqL1xuY29uc3QgcG9wdXBSZWR1Y2VyID0gKHN0YXRlID0geyB2aWV3OiBcIlwiLCBpc1Nob3dpbmc6IGZhbHNlLCBwYXlsb2FkOiB7fSwgc2hvd1RvcDogdHJ1ZSB9LCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgcG9wdXBDb25zdGFudHMuU0hPV19DUkVBVEVfU1RVRFlfR1JPVVBfUE9QVVA6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdmlldzogdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5DcmVhdGUsIGlzU2hvd2luZzogdHJ1ZSwgcGF5bG9hZDoge30sIHNob3dUb3A6IHRydWUgfTtcbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5TSE9XX0pPSU5fU1RVRFlfR1JPVVBfUE9QVVA6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuSm9pbixcbiAgICAgICAgICAgICAgICBpc1Nob3dpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgc2hvd1RvcDogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSBwb3B1cENvbnN0YW50cy5TSE9XX0VESVRfU1RVRFlfR1JPVVBfUE9QVVA6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuRWRpdCxcbiAgICAgICAgICAgICAgICBpc1Nob3dpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgc2hvd1RvcDogdHJ1ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfQ1JFQVRFX01FRVRJTkdfU1RVRFlfR1JPVVBfUE9QVVA6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuQ3JlYXRlTWVldGluZyxcbiAgICAgICAgICAgICAgICBpc1Nob3dpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgc2hvd1RvcDogdHJ1ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfQ1JFQVRFX1BPU1RfU1RVRFlfR1JPVVBfUE9QVVA6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdzLlBvcHVwLlN0dWR5R3JvdXAuQ3JlYXRlUG9zdCxcbiAgICAgICAgICAgICAgICBpc1Nob3dpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgc2hvd1RvcDogdHJ1ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfVklFV19QT1NUX1NUVURZX0dST1VQX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3cy5Qb3B1cC5TdHVkeUdyb3VwLlZpZXdQb3N0LFxuICAgICAgICAgICAgICAgIGlzU2hvd2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93VG9wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfVklFV19NRUVUSU5HU19TVFVEWV9HUk9VUF9QT1BVUDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgdmlldzogdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5WaWV3TWVldGluZ3MsXG4gICAgICAgICAgICAgICAgaXNTaG93aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dUb3A6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGNhc2UgcG9wdXBDb25zdGFudHMuU0hPV19WSUVXX01FTUJFUl9QT1BVUDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgdmlldzogdmlld3MuUG9wdXAuU3R1ZHlHcm91cC5WaWV3TWVtYmVyLFxuICAgICAgICAgICAgICAgIGlzU2hvd2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93VG9wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfSU5QVVRfUE9QVVA6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdmlldzogdmlld3MuUG9wdXAuSW5wdXQsIGlzU2hvd2luZzogdHJ1ZSwgcGF5bG9hZDogYWN0aW9uLnBheWxvYWQsIHNob3dUb3A6IHRydWUgfTtcblxuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLlNIT1dfQ09ORklSTUFUSU9OX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICB2aWV3OiB2aWV3cy5Qb3B1cC5Db25maXJtYXRpb24sXG4gICAgICAgICAgICAgICAgaXNTaG93aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIHNob3dUb3A6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgcG9wdXBDb25zdGFudHMuU0hPV19SRVBPUlRfUE9QVVA6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdzLlBvcHVwLlJlcG9ydCxcbiAgICAgICAgICAgICAgICBpc1Nob3dpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgc2hvd1RvcDogdHJ1ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIHBvcHVwQ29uc3RhbnRzLkNMT1NFX1BPUFVQOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGlzU2hvd2luZzogZmFsc2UsIHZpZXc6IFwiXCIgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwb3B1cFJlZHVjZXI7XG4iLCJpbXBvcnQgeyBzdHVkeUdyb3Vwc0NvbnN0YW50cyB9IGZyb20gXCIuLi9jb25zdGFudHMvY29uc3RhbnRzXCI7XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgcmVkdWNlciBmb3IgYWxsIGFjdGlvbnMgcmVsYXRpbmcgdG8gc3R1ZHkgZ3JvdXBzXG4gKiBBIHJlZHVjZXIgaXMgaG93IGFjdGlvbnMgdHJhbnNmb3JtIHRoZSBzdGF0ZSBpbnRvIHRoZSBuZXh0IHN0YXRlXG4gKiBAcGFyYW0gIHtvYmplY3R9IHN0YXRlIFRoZSBpbml0YWwgc3RhdGUgb2YgdGhlIHJlZHVjZXJcbiAqIEBwYXJhbSAge1N0cmluZ30gYWN0aW9uIFRoZSBhY3Rpb24gZnJvbSBwb3B1cENvbnN0YW50cyB0aGF0IHRyYW5zZm9ybXMgdGhlIHN0YXRlIGludG8gdGhlIG5leHQgc3RhdGVcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxMi8yMC8yMDIxXG4gKi9cbmNvbnN0IHN0dWR5R3JvdXBzUmVkdWNlciA9IChcbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgc3R1ZHlHcm91cHM6IFtdLFxuICAgICAgICBzZWFyY2g6IFtdXG4gICAgfSxcbiAgICBhY3Rpb25cbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBzdHVkeUdyb3Vwc0NvbnN0YW50cy5BRERfU1RVRFlfR1JPVVA6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3R1ZHlHcm91cHM6IFsuLi5zdGF0ZS5zdHVkeUdyb3VwcywgYWN0aW9uLnBheWxvYWQuZ3JvdXBdIH07XG4gICAgICAgIGNhc2Ugc3R1ZHlHcm91cHNDb25zdGFudHMuTE9BRF9TVFVEWV9HUk9VUFM6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3R1ZHlHcm91cHM6IGFjdGlvbi5wYXlsb2FkLmdyb3VwcyB9O1xuXG4gICAgICAgIGNhc2Ugc3R1ZHlHcm91cHNDb25zdGFudHMuUE9QVUxBVEVfU0VBUkNIOlxuICAgICAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHNlYXJjaDogWy4uLmFjdGlvbi5wYXlsb2FkLmdyb3Vwc10gfTtcblxuICAgICAgICBjYXNlIHN0dWR5R3JvdXBzQ29uc3RhbnRzLkNMRUFSX1NUVURZX0dST1VQUzpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBzdHVkeUdyb3VwczogW10gfTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWR5R3JvdXBzUmVkdWNlcjtcbiIsImltcG9ydCB7IG5vdGlmaWNhdGlvbkNvbnN0YW50cyB9IGZyb20gXCIuLi9jb25zdGFudHMvY29uc3RhbnRzXCI7XG5cbmltcG9ydCBub3RpZmljYXRpb25UeXBlcyBmcm9tIFwiLi4vLi4vVmlld3MvTm90aWZpY2F0aW9uL25vdGlmaWNhdGlvblR5cGVzXCI7XG4vKipcbiAqIFRoaXMgaXMgdGhlIHJlZHVjZXIgZm9yIGFsbCBhY3Rpb25zIHJlbGF0aW5nIHRvIG5vdGlmaWNhdGlvbnMgKGVycm9ycywgaW5mbywgc3VjY2VzcylcbiAqIEBwYXJhbSAge29iamVjdH0gc3RhdGUgVGhlIGluaXRhbCBzdGF0ZSBvZiB0aGUgcmVkdWNlclxuICogQHBhcmFtICB7U3RyaW5nfSBhY3Rpb24gVGhlIGFjdGlvbiBmcm9tIG5vdGlmaWNhdGlvbkNvbnN0YW50cyB0aGF0IHRyYW5zZm9ybXMgdGhlIHN0YXRlIGludG8gdGhlIG5leHQgc3RhdGVcbiAqIEBhdXRob3IgRXRoYW4gQ2FubmVsb25nb1xuICogQGRhdGUgICAxLzI3LzIwMjJcbiAqL1xuY29uc3Qgbm90aWZpY2F0aW9uUmVkdWNlciA9IChzdGF0ZSA9IHsgaXNTaG93aW5nOiBmYWxzZSwgbG9hZGluZzogZmFsc2UgfSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIG5vdGlmaWNhdGlvbkNvbnN0YW50cy5TSE9XX0VSUk9SX05PVElGSUNBVElPTjpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB0eXBlOiBub3RpZmljYXRpb25UeXBlcy5FUlJPUiwgaXNTaG93aW5nOiB0cnVlLCBtZXNzYWdlOiBhY3Rpb24ucGF5bG9hZC5tZXNzYWdlIH07XG5cbiAgICAgICAgY2FzZSBub3RpZmljYXRpb25Db25zdGFudHMuU0hPV19TVUNDRVNTX05PVElGSUNBVElPTjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgdHlwZTogbm90aWZpY2F0aW9uVHlwZXMuU1VDQ0VTUyxcbiAgICAgICAgICAgICAgICBpc1Nob3dpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYWN0aW9uLnBheWxvYWQubWVzc2FnZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBub3RpZmljYXRpb25Db25zdGFudHMuSElERV9OT1RJRklDQVRJT046XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaXNTaG93aW5nOiBmYWxzZSB9O1xuXG4gICAgICAgIGNhc2Ugbm90aWZpY2F0aW9uQ29uc3RhbnRzLlNUQVJUX0xPQURJTkc6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbG9hZGluZzogdHJ1ZSB9O1xuXG4gICAgICAgIGNhc2Ugbm90aWZpY2F0aW9uQ29uc3RhbnRzLlNUT1BfTE9BRElORzpcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBsb2FkaW5nOiBmYWxzZSB9O1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbm90aWZpY2F0aW9uUmVkdWNlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcC5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9IGZyb20gXCJyZWR1eFwiO1xuaW1wb3J0IHRodW5rIGZyb20gXCJyZWR1eC10aHVua1wiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBhbGxSZWR1Y2VycyBmcm9tIFwiLi9zdGF0ZS9yZWR1Y2Vyc1wiO1xuXG5pbXBvcnQgVmFsaWRhdG9yIGZyb20gXCIuLi8uLi9TZXJ2ZXIvVmFsaWRhdG9yLmpzXCI7XG5cbmNvbnN0IHBlcnNpc3RpZW50U3RhdGUgPSB7fTtcbmNvbnN0IHJlZHV4RGV2VG9vbHNBcmVJbnN0YWxsZWQgPVxuICAgIFZhbGlkYXRvci5pc0RlZmluZWQod2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18pICYmXG4gICAgVmFsaWRhdG9yLmlzRGVmaW5lZCh3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXygpKTtcbmV4cG9ydCBjb25zdCBzdG9yZSA9IHJlZHV4RGV2VG9vbHNBcmVJbnN0YWxsZWRcbiAgICA/IGNyZWF0ZVN0b3JlKFxuICAgICAgICAgIGFsbFJlZHVjZXJzLFxuICAgICAgICAgIHBlcnNpc3RpZW50U3RhdGUsXG4gICAgICAgICAgY29tcG9zZShhcHBseU1pZGRsZXdhcmUodGh1bmspLCB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXygpKVxuICAgICAgKVxuICAgIDogY3JlYXRlU3RvcmUoYWxsUmVkdWNlcnMsIHBlcnNpc3RpZW50U3RhdGUpO1xuXG5SZWFjdERPTS5yZW5kZXIoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgIDxSZWFjdC5TdHJpY3RNb2RlPlxuICAgICAgICAgICAgPEFwcCAvPlxuICAgICAgICA8L1JlYWN0LlN0cmljdE1vZGU+XG4gICAgPC9Qcm92aWRlcj4sXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpXG4pO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiYWJzIiwiTWF0aCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIk9iamVjdCIsImFzc2lnbiIsInRyaW0iLCJ2YWx1ZSIsInJlcGxhY2UiLCJwYXR0ZXJuIiwicmVwbGFjZW1lbnQiLCJpbmRleG9mIiwic2VhcmNoIiwiaW5kZXhPZiIsImluZGV4IiwiY2hhckNvZGVBdCIsImJlZ2luIiwiZW5kIiwic2xpY2UiLCJsZW5ndGgiLCJhcnJheSIsInB1c2giLCJsaW5lIiwiY29sdW1uIiwicG9zaXRpb24iLCJjaGFyYWN0ZXIiLCJjaGFyYWN0ZXJzIiwibm9kZSIsInJvb3QiLCJwYXJlbnQiLCJ0eXBlIiwicHJvcHMiLCJjaGlsZHJlbiIsInJldHVybiIsImNvcHkiLCJwcmV2IiwibmV4dCIsInBlZWsiLCJjYXJldCIsInRva2VuIiwiYWxsb2MiLCJkZWFsbG9jIiwiZGVsaW1pdCIsImRlbGltaXRlciIsIndoaXRlc3BhY2UiLCJlc2NhcGluZyIsImNvdW50IiwiY29tbWVudGVyIiwiaWRlbnRpZmllciIsIk1TIiwiTU9aIiwiV0VCS0lUIiwiQ09NTUVOVCIsIkRFQ0xBUkFUSU9OIiwiS0VZRlJBTUVTIiwic2VyaWFsaXplIiwiY2FsbGJhY2siLCJvdXRwdXQiLCJpIiwic3RyaW5naWZ5IiwiZWxlbWVudCIsImpvaW4iLCJwcmVmaXgiLCJoYXNoIiwiY29tcGlsZSIsInBhcnNlIiwicnVsZSIsInJ1bGVzIiwicnVsZXNldHMiLCJwc2V1ZG8iLCJwb2ludHMiLCJkZWNsYXJhdGlvbnMiLCJvZmZzZXQiLCJhdHJ1bGUiLCJwcm9wZXJ0eSIsInByZXZpb3VzIiwidmFyaWFibGUiLCJzY2FubmluZyIsImFtcGVyc2FuZCIsInJlZmVyZW5jZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsInJ1bGVzZXQiLCJwb3N0Iiwic2l6ZSIsImoiLCJrIiwieCIsInkiLCJ6IiwiaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nIiwiZml4ZWRFbGVtZW50cyIsIldlYWtNYXAiLCJjb21wYXQiLCJpc0ltcGxpY2l0UnVsZSIsImdldCIsInNldCIsInBhcnNlZCIsInRvUnVsZXMiLCJnZXRSdWxlcyIsInBhcmVudFJ1bGVzIiwicmVtb3ZlTGFiZWwiLCJkZWZhdWx0U3R5bGlzUGx1Z2lucyIsIm1hcCIsImV4ZWMiLCJtYXRjaCIsIm9wdGlvbnMiLCJrZXkiLCJzc3JTdHlsZXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJBcnJheSIsInByb3RvdHlwZSIsImZvckVhY2giLCJjYWxsIiwiZ2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwic2V0QXR0cmlidXRlIiwiY29udGFpbmVyIiwiX2luc2VydCIsInN0eWxpc1BsdWdpbnMiLCJpbnNlcnRlZCIsIm5vZGVzVG9IeWRyYXRlIiwiYXR0cmliIiwic3BsaXQiLCJjdXJyZW50U2hlZXQiLCJjb2xsZWN0aW9uIiwiZmluYWxpemluZ1BsdWdpbnMiLCJpbnNlcnQiLCJzZXJpYWxpemVyIiwiY29uY2F0Iiwic2VsZWN0b3IiLCJzZXJpYWxpemVkIiwic2hlZXQiLCJzaG91bGRDYWNoZSIsInN0eWxlcyIsImNhY2hlIiwibmFtZSIsIm5vbmNlIiwic3BlZWR5IiwicHJlcGVuZCIsImluc2VydGlvblBvaW50IiwicmVnaXN0ZXJlZCIsImh5ZHJhdGUiLCJmbiIsImNyZWF0ZSIsImFyZyIsInVuZGVmaW5lZCIsIkVtb3Rpb25DYWNoZUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiSFRNTEVsZW1lbnQiLCJQcm92aWRlciIsIndpdGhFbW90aW9uQ2FjaGUiLCJmdW5jIiwiZm9yd2FyZFJlZiIsInJlZiIsInVzZUNvbnRleHQiLCJUaGVtZUNvbnRleHQiLCJzdHIiLCJoIiwibGVuIiwidG9TdHJpbmciLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNQcm9jZXNzYWJsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsInRvTG93ZXJDYXNlIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJwMSIsInAyIiwiY3Vyc29yIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsIl9fZW1vdGlvbl9zdHlsZXMiLCJhbmltIiwic3RyaW5nIiwiaXNBcnJheSIsIl9rZXkiLCJpbnRlcnBvbGF0ZWQiLCJfaSIsImNyZWF0ZVN0cmluZ0Zyb21PYmplY3QiLCJwcmV2aW91c0N1cnNvciIsInJlc3VsdCIsImNhY2hlZCIsImxhYmVsUGF0dGVybiIsInNlcmlhbGl6ZVN0eWxlcyIsImFyZ3MiLCJzdHJpbmdNb2RlIiwic3RyaW5ncyIsInJhdyIsImxhc3RJbmRleCIsImlkZW50aWZpZXJOYW1lIiwiU3R5bGVTaGVldCIsIl90aGlzIiwidGhpcyIsIl9pbnNlcnRUYWciLCJ0YWciLCJiZWZvcmUiLCJ0YWdzIiwibmV4dFNpYmxpbmciLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiaXNTcGVlZHkiLCJjdHIiLCJfcHJvdG8iLCJub2RlcyIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJlIiwiZmx1c2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJnZXRSZWdpc3RlcmVkU3R5bGVzIiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJpbnNlcnRTdHlsZXMiLCJpc1N0cmluZ1RhZyIsImN1cnJlbnQiLCJjb21wb3NlQ2xhc3NlcyIsInNsb3RzIiwiZ2V0VXRpbGl0eUNsYXNzIiwiY2xhc3NlcyIsImtleXMiLCJzbG90IiwicmVkdWNlIiwiYWNjIiwiZGVmYXVsdEdlbmVyYXRvciIsImNvbXBvbmVudE5hbWUiLCJnZW5lcmF0ZSIsImNvbmZpZ3VyZSIsImdlbmVyYXRvciIsInJlc2V0IiwiY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yIiwiZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZyIsImFjdGl2ZSIsImNoZWNrZWQiLCJjb21wbGV0ZWQiLCJkaXNhYmxlZCIsImVycm9yIiwiZXhwYW5kZWQiLCJmb2N1c2VkIiwiZm9jdXNWaXNpYmxlIiwicmVxdWlyZWQiLCJzZWxlY3RlZCIsImdlbmVyYXRlVXRpbGl0eUNsYXNzIiwiZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY3JlYXRlU3ZnSWNvbiIsIl9qc3hSdW50aW1lIiwiX2RlZmF1bHQiLCJkZWZhdWx0IiwianN4IiwiZCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIl91dGlscyIsImNyZWF0ZVN2Z0ljb24iLCJTeW1ib2wiLCJmb3IiLCJibGFjayIsIndoaXRlIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsIl9leGNsdWRlZCIsImxpZ2h0IiwidGV4dCIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJkaXZpZGVyIiwiYmFja2dyb3VuZCIsInBhcGVyIiwiYWN0aW9uIiwiaG92ZXIiLCJob3Zlck9wYWNpdHkiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1cyIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJkYXJrIiwiaWNvbiIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50IiwiZGlyZWN0aW9uIiwic2hhZGUiLCJ0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0TGlnaHQiLCJ0b25hbE9mZnNldERhcmsiLCJoYXNPd25Qcm9wZXJ0eSIsIm1haW4iLCJjYXNlQWxsQ2FwcyIsInRleHRUcmFuc2Zvcm0iLCJkZWZhdWx0Rm9udEZhbWlseSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJwYWxldHRlIiwidHlwb2dyYXBoeSIsIl9yZWYiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0UmVndWxhciIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0Qm9sZCIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbSIsInB4VG9SZW0yIiwib3RoZXIiLCJjb2VmIiwiYnVpbGRWYXJpYW50IiwibGV0dGVyU3BhY2luZyIsImNhc2luZyIsInJvdW5kIiwidmFyaWFudHMiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiYnV0dG9uIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiZGVlcG1lcmdlIiwiY2xvbmUiLCJjcmVhdGVTaGFkb3ciLCJweCIsIm1vYmlsZVN0ZXBwZXIiLCJzcGVlZERpYWwiLCJhcHBCYXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsIm1peGlucyIsIm1peGluc0lucHV0IiwicGFsZXR0ZUlucHV0IiwidHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9uc0lucHV0IiwidHlwb2dyYXBoeUlucHV0IiwibW9kZSIsImNvbnRyYXN0VGhyZXNob2xkIiwiZ2V0RGVmYXVsdFByaW1hcnkiLCJnZXREZWZhdWx0U2Vjb25kYXJ5IiwiZ2V0RGVmYXVsdEVycm9yIiwiaW5mbyIsImdldERlZmF1bHRJbmZvIiwic3VjY2VzcyIsImdldERlZmF1bHRTdWNjZXNzIiwid2FybmluZyIsImdldERlZmF1bHRXYXJuaW5nIiwiZ2V0Q29udHJhc3RUZXh0IiwiYXVnbWVudENvbG9yIiwiY29sb3IiLCJtYWluU2hhZGUiLCJsaWdodFNoYWRlIiwiZGFya1NoYWRlIiwiRXJyb3IiLCJKU09OIiwiY29udHJhc3RUZXh0IiwibW9kZXMiLCJjb21tb24iLCJncmV5IiwiY3JlYXRlUGFsZXR0ZSIsInN5c3RlbVRoZW1lIiwibXVpVGhlbWUiLCJicmVha3BvaW50cyIsInNwYWNpbmciLCJ0b29sYmFyIiwibWluSGVpZ2h0IiwidXAiLCJzaGFkb3dzIiwiY3JlYXRlVHJhbnNpdGlvbnMiLCJhcmd1bWVudCIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsImR1cmF0aW9uIiwic2hvcnRlc3QiLCJzaG9ydGVyIiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsImdldEF1dG9IZWlnaHREdXJhdGlvbiIsImhlaWdodCIsImNvbnN0YW50IiwiaW5wdXRUcmFuc2l0aW9ucyIsIm1lcmdlZEVhc2luZyIsIm1lcmdlZER1cmF0aW9uIiwiZHVyYXRpb25PcHRpb24iLCJlYXNpbmdPcHRpb24iLCJkZWxheSIsImFuaW1hdGVkUHJvcCIsImlzRW1wdHkiLCJwcm9wc1RvQ2xhc3NLZXkiLCJ2YXJpYW50IiwiY2xhc3NLZXkiLCJzb3J0IiwiY2FwaXRhbGl6ZSIsIl9leGNsdWRlZDIiLCJfZXhjbHVkZWQzIiwic2hvdWxkRm9yd2FyZFByb3AiLCJwcm9wIiwic3lzdGVtRGVmYXVsdFRoZW1lIiwiY3JlYXRlVGhlbWUiLCJyb290U2hvdWxkRm9yd2FyZFByb3AiLCJzbG90U2hvdWxkRm9yd2FyZFByb3AiLCJzdHlsZWQiLCJpbnB1dCIsImRlZmF1bHRUaGVtZSIsImlucHV0T3B0aW9ucyIsImNvbXBvbmVudFNsb3QiLCJza2lwVmFyaWFudHNSZXNvbHZlciIsImlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJza2lwU3giLCJpbnB1dFNraXBTeCIsIm92ZXJyaWRlc1Jlc29sdmVyIiwic2hvdWxkRm9yd2FyZFByb3BPcHRpb24iLCJkZWZhdWx0U3R5bGVkUmVzb2x2ZXIiLCJsYWJlbCIsIm11aVN0eWxlZFJlc29sdmVyIiwic3R5bGVBcmciLCJleHByZXNzaW9ucyIsImV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSIsInN0eWxlc0FyZyIsIl9fZW1vdGlvbl9yZWFsIiwidGhlbWUiLCJ0aGVtZUlucHV0IiwidHJhbnNmb3JtZWRTdHlsZUFyZyIsInN0eWxlT3ZlcnJpZGVzIiwiY29tcG9uZW50cyIsImdldFN0eWxlT3ZlcnJpZGVzIiwicmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyIsImVudHJpZXMiLCJzbG90S2V5Iiwic2xvdFN0eWxlIiwiX3RoZW1lJGNvbXBvbmVudHMiLCJfdGhlbWUkY29tcG9uZW50cyRuYW0iLCJvd25lclN0YXRlIiwidmFyaWFudHNTdHlsZXMiLCJ0aGVtZVZhcmlhbnRzIiwidGhlbWVWYXJpYW50IiwiaXNNYXRjaCIsInZhcmlhbnRzUmVzb2x2ZXIiLCJkZWZpbml0aW9uIiwic3R5bGUiLCJnZXRWYXJpYW50U3R5bGVzIiwic3R5bGVGdW5jdGlvblN4IiwibnVtT2ZDdXN0b21GbnNBcHBsaWVkIiwicGxhY2Vob2xkZXJzIiwiZmlsbCIsIl9yZWYyIiwid2l0aENvbmZpZyIsImNyZWF0ZVN0eWxlZCIsInBhcmFtcyIsImRlZmF1bHRQcm9wcyIsInByb3BOYW1lIiwicmVzb2x2ZVByb3BzIiwiZ2V0VGhlbWVQcm9wcyIsInVzZVRoZW1lIiwiZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyIsIlN2Z0ljb25Sb290IiwiX3RoZW1lJHRyYW5zaXRpb25zIiwiX3RoZW1lJHRyYW5zaXRpb25zJGNyIiwiX3RoZW1lJHRyYW5zaXRpb25zMiIsIl90aGVtZSR0cmFuc2l0aW9uczIkZCIsIl90aGVtZSR0eXBvZ3JhcGh5IiwiX3RoZW1lJHR5cG9ncmFwaHkkcHhUIiwiX3RoZW1lJHR5cG9ncmFwaHkyIiwiX3RoZW1lJHR5cG9ncmFwaHkyJHB4IiwiX3RoZW1lJHR5cG9ncmFwaHkzIiwiX3RoZW1lJHR5cG9ncmFwaHkzJHB4IiwiX3RoZW1lJHBhbGV0dGUkb3duZXJTIiwiX3RoZW1lJHBhbGV0dGUiLCJfdGhlbWUkcGFsZXR0ZSRvd25lclMyIiwiX3RoZW1lJHBhbGV0dGUyIiwiX3RoZW1lJHBhbGV0dGUyJGFjdGlvIiwiX3RoZW1lJHBhbGV0dGUzIiwiX3RoZW1lJHBhbGV0dGUzJGFjdGlvIiwidXNlclNlbGVjdCIsIndpZHRoIiwiZGlzcGxheSIsInRyYW5zaXRpb24iLCJpbmhlcml0Iiwic21hbGwiLCJtZWRpdW0iLCJsYXJnZSIsIlN2Z0ljb24iLCJpblByb3BzIiwidXNlVGhlbWVQcm9wcyIsImNvbXBvbmVudCIsImh0bWxDb2xvciIsImluaGVyaXRWaWV3Qm94IiwidGl0bGVBY2Nlc3MiLCJ2aWV3Qm94IiwibW9yZSIsInVzZVV0aWxpdHlDbGFzc2VzIiwiYXMiLCJmb2N1c2FibGUiLCJyb2xlIiwibXVpTmFtZSIsInBhdGgiLCJkaXNwbGF5TmFtZSIsIkNvbXBvbmVudCIsInZhbGlkYXRvciIsInJlYXNvbiIsImNvbXBvbmVudE5hbWVJbkVycm9yIiwiZ2xvYmFsSWQiLCJpZE92ZXJyaWRlIiwiZGVmYXVsdElkIiwic2V0RGVmYXVsdElkIiwiaWQiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsIm11aU5hbWVzIiwicmVhY3RQcm9wc1JlZ2V4IiwidGVzdCIsInRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCIsImdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMiLCJpc1JlYWwiLCJvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AiLCJfX2Vtb3Rpb25fZm9yd2FyZFByb3AiLCJOb29wIiwibmV3U3R5bGVkIiwidGFyZ2V0Q2xhc3NOYW1lIiwiYmFzZVRhZyIsIl9fZW1vdGlvbl9iYXNlIiwidGFyZ2V0IiwiZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wIiwic2hvdWxkVXNlQXMiLCJhcmd1bWVudHMiLCJhcHBseSIsIlN0eWxlZCIsInciLCJmaW5hbFRhZyIsImNsYXNzSW50ZXJwb2xhdGlvbnMiLCJUIiwiZmluYWxTaG91bGRGb3J3YXJkUHJvcCIsIm5ld1Byb3BzIiwiZWxlIiwicG9zc2libHlTdHlsZUVsZW1lbnQiLCJGcmFnbWVudCIsIndpdGhDb21wb25lbnQiLCJuZXh0VGFnIiwibmV4dE9wdGlvbnMiLCJ0YWdOYW1lIiwidmFsdWVzIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsImRlZmF1bHRCcmVha3BvaW50cyIsImhhbmRsZUJyZWFrcG9pbnRzIiwicHJvcFZhbHVlIiwic3R5bGVGcm9tUHJvcFZhbHVlIiwidGhlbWVCcmVha3BvaW50cyIsIml0ZW0iLCJicmVha3BvaW50IiwiY3NzS2V5IiwiY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0IiwiYnJlYWtwb2ludHNJbnB1dCIsIl9icmVha3BvaW50c0lucHV0JGtleSIsInJlbW92ZVVudXNlZEJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludEtleXMiLCJicmVha3BvaW50T3V0cHV0IiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJkZWNvbXBvc2VDb2xvciIsImNoYXJBdCIsInN1YnN0ciIsInJlIiwiUmVnRXhwIiwiY29sb3JzIiwibiIsInBhcnNlSW50IiwiaGV4VG9SZ2IiLCJtYXJrZXIiLCJzdWJzdHJpbmciLCJjb2xvclNwYWNlIiwic2hpZnQiLCJwYXJzZUZsb2F0IiwicmVjb21wb3NlQ29sb3IiLCJnZXRMdW1pbmFuY2UiLCJyZ2IiLCJzIiwibCIsImEiLCJmIiwiaHNsVG9SZ2IiLCJ2YWwiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiZ2V0Q29udHJhc3RSYXRpbyIsImZvcmVncm91bmQiLCJsdW1BIiwibHVtQiIsImFscGhhIiwiZGFya2VuIiwiY29lZmZpY2llbnQiLCJsaWdodGVuIiwiYm9yZGVyUmFkaXVzIiwic3BhY2luZ0lucHV0Iiwic2hhcGUiLCJzaGFwZUlucHV0IiwidW5pdCIsInN0ZXAiLCJkb3duIiwiYmV0d2VlbiIsInN0YXJ0IiwiZW5kSW5kZXgiLCJvbmx5Iiwibm90Iiwia2V5SW5kZXgiLCJjcmVhdGVCcmVha3BvaW50cyIsIm11aSIsInRyYW5zZm9ybSIsImFyZ3NJbnB1dCIsImNyZWF0ZVNwYWNpbmciLCJoYW5kbGVycyIsImZpbHRlclByb3BzIiwibWVyZ2UiLCJwcm9wVHlwZXMiLCJnZXRCb3JkZXIiLCJib3JkZXIiLCJ0aGVtZUtleSIsImJvcmRlclRvcCIsImJvcmRlclJpZ2h0IiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyTGVmdCIsImJvcmRlckNvbG9yIiwiYm9yZGVyVG9wQ29sb3IiLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0Q29sb3IiLCJ0cmFuc2Zvcm1lciIsImNzc1Byb3BlcnR5IiwiZ2FwIiwiY29sdW1uR2FwIiwicm93R2FwIiwibWF4V2lkdGgiLCJfcHJvcHMkdGhlbWUiLCJfcHJvcHMkdGhlbWUkYnJlYWtwb2kiLCJfcHJvcHMkdGhlbWUkYnJlYWtwb2kyIiwibWluV2lkdGgiLCJtYXhIZWlnaHQiLCJmb250U3R5bGUiLCJ0ZXh0QWxpZ24iLCJmaWx0ZXJQcm9wc01hcHBpbmciLCJib3JkZXJzIiwiZmxleGJveCIsImdyaWQiLCJwb3NpdGlvbnMiLCJzaXppbmciLCJzdHlsZUZ1bmN0aW9uTWFwcGluZyIsInByb3BUb1N0eWxlRnVuY3Rpb24iLCJzdHlsZUZuTmFtZSIsImlucHV0UHJvcHMiLCJzdHlsZUZ1bmN0aW9uIiwicHJvcGVydGllcyIsIm0iLCJwIiwiZGlyZWN0aW9ucyIsInQiLCJyIiwiYiIsImFsaWFzZXMiLCJtYXJnaW5YIiwibWFyZ2luWSIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJnZXRDc3NQcm9wZXJ0aWVzIiwiZGlyIiwibWVtb2l6ZSIsIm1hcmdpbktleXMiLCJwYWRkaW5nS2V5cyIsInNwYWNpbmdLZXlzIiwiY3JlYXRlVW5hcnlVbml0IiwiZGVmYXVsdFZhbHVlIiwidGhlbWVTcGFjaW5nIiwiY3JlYXRlVW5hcnlTcGFjaW5nIiwiZ2V0VmFsdWUiLCJ0cmFuc2Zvcm1lZCIsImNzc1Byb3BlcnRpZXMiLCJnZXRTdHlsZUZyb21Qcm9wVmFsdWUiLCJyZXNvbHZlQ3NzUHJvcGVydHkiLCJtYXJnaW4iLCJwYWRkaW5nIiwiZ2V0UGF0aCIsInRoZW1lTWFwcGluZyIsInByb3BWYWx1ZUZpbmFsIiwidXNlclZhbHVlIiwic3giLCJ0cmF2ZXJzZSIsInN4SW5wdXQiLCJzeE9iamVjdCIsImVtcHR5QnJlYWtwb2ludHMiLCJicmVha3BvaW50c0tleXMiLCJjc3MiLCJzdHlsZUtleSIsIm1heWJlRm4iLCJicmVha3BvaW50c1ZhbHVlcyIsIm9iamVjdHMiLCJhbGxLZXlzIiwib2JqZWN0IiwidW5pb24iLCJTZXQiLCJldmVyeSIsIm9iamVjdHNIYXZlU2FtZUtleXMiLCJjb250ZXh0VGhlbWUiLCJ1c2VUaGVtZVdpdGhvdXREZWZhdWx0IiwidG9VcHBlckNhc2UiLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJmdW5jcyIsImRlYm91bmNlIiwid2FpdCIsInRpbWVvdXQiLCJkZWJvdW5jZWQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXIiLCJpc1BsYWluT2JqZWN0IiwiY29uc3RydWN0b3IiLCJzb3VyY2UiLCJmb3JtYXRNdWlFcnJvck1lc3NhZ2UiLCJjb2RlIiwidXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib3duZXJEb2N1bWVudCIsIm93bmVyV2luZG93IiwiZGVmYXVsdFZpZXciLCJ3aW5kb3ciLCJzZXRSZWYiLCJ1c2VDb250cm9sbGVkIiwiY29udHJvbGxlZCIsImRlZmF1bHRQcm9wIiwic3RhdGUiLCJpc0NvbnRyb2xsZWQiLCJ2YWx1ZVN0YXRlIiwic2V0VmFsdWUiLCJuZXdWYWx1ZSIsInVzZUV2ZW50Q2FsbGJhY2siLCJ1c2VGb3JrUmVmIiwicmVmQSIsInJlZkIiLCJyZWZWYWx1ZSIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJ0ZWwiLCJlbWFpbCIsInBhc3N3b3JkIiwibnVtYmVyIiwiZGF0ZSIsIm1vbnRoIiwid2VlayIsInRpbWUiLCJkYXRldGltZSIsImhhbmRsZUtleURvd24iLCJldmVudCIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5IiwiaGFuZGxlUG9pbnRlckRvd24iLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwidXNlSXNGb2N1c1Zpc2libGUiLCJkb2MiLCJhZGRFdmVudExpc3RlbmVyIiwiaXNGb2N1c1Zpc2libGVSZWYiLCJvbkZvY3VzIiwibWF0Y2hlcyIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSIsImlzRm9jdXNWaXNpYmxlIiwib25CbHVyIiwiRW1pdHRlciIsIm1peGluIiwib24iLCJfY2FsbGJhY2tzIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNiIiwiY2FsbGJhY2tzIiwic3BsaWNlIiwiZW1pdCIsImVtaXRSZXNlcnZlZCIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsInV0aWxzIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiZGVmYXVsdHMiLCJDYW5jZWwiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uQ2FuY2VsZWQiLCJyZXF1ZXN0RGF0YSIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJkb25lIiwiY2FuY2VsVG9rZW4iLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsImlzRm9ybURhdGEiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJ1bmVzY2FwZSIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZXJyIiwib3BlbiIsIm1ldGhvZCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ0cmFuc2l0aW9uYWwiLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ4c3JmSGVhZGVyTmFtZSIsInNldFJlcXVlc3RIZWFkZXIiLCJpc1VuZGVmaW5lZCIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWwiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJzZW5kIiwiYmluZCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJheGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsImV4dGVuZCIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsIlZFUlNJT04iLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsIm1lc3NhZ2UiLCJfX0NBTkNFTF9fIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2UiLCJ0aGVuIiwiX2xpc3RlbmVycyIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJ0aHJvd0lmUmVxdWVzdGVkIiwibGlzdGVuZXIiLCJjIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwidmFsaWRhdG9ycyIsImludGVyY2VwdG9ycyIsImFzc2VydE9wdGlvbnMiLCJzaWxlbnRKU09OUGFyc2luZyIsImJvb2xlYW4iLCJmb3JjZWRKU09OUGFyc2luZyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJydW5XaGVuIiwic3luY2hyb25vdXMiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJjaGFpbiIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdldFVyaSIsInVzZSIsImVqZWN0IiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwiZW5oYW5jZUVycm9yIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiYWRhcHRlciIsInRyYW5zZm9ybVJlc3BvbnNlIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsImNvbmZpZ1ZhbHVlIiwidmFsaWRhdGVTdGF0dXMiLCJmbnMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJwcm9jZXNzIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNPYmplY3QiLCJyYXdWYWx1ZSIsInBhcnNlciIsImVuY29kZXIiLCJpc1N0cmluZyIsInN0cmluZ2lmeVNhZmVseSIsInN0cmljdEpTT05QYXJzaW5nIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ0aGlzQXJnIiwiZW5jb2RlIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiaGFzaG1hcmtJbmRleCIsInJlbGF0aXZlVVJMIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJwYXlsb2FkIiwib3JpZ2luVVJMIiwibXNpZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJwcm90b2NvbCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJub3JtYWxpemVkTmFtZSIsImlnbm9yZUR1cGxpY2F0ZU9mIiwiYXJyIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2ZXJzaW9uIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiY29uc29sZSIsIndhcm4iLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJnZXRQcm90b3R5cGVPZiIsImlzRnVuY3Rpb24iLCJGb3JtRGF0YSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInByb2R1Y3QiLCJhc3NpZ25WYWx1ZSIsInN0cmlwQk9NIiwiY29udGVudCIsIkNvbm5lY3QiLCJEaXNjb25uZWN0IiwiSW52YWxpZFVzZXJJZCIsIk1lc3NhZ2UiLCJNZXNzYWdlRmFpbHVyZSIsIkluUGVyc29uIiwiTWl4ZWQiLCJPbmxpbmUiLCJBbm5vdW5jZW1lbnQiLCJEaXNjdXNzaW9uIiwiUXVlc3Rpb24iLCJQcm9ibGVtIiwiTWVldGluZyIsIkFueSIsIkhpc3RvcnkiLCJMaXRlcmF0dXJlIiwiU2NpZW5jZSIsIlBhcnRPZkRheSIsIkFtIiwiUG0iLCJUaW1lcyIsImhvdXIiLCJtaW51dGUiLCJUaW1lIiwicGFydE9mRGF5IiwidGltZVN0cmluZyIsImNvbG9uSW5kZXgiLCJwYXJ0T2ZEYXlJbmRleCIsImZpcnN0VGltZSIsImlzQWZ0ZXIiLCJmaXJzdEhvdXIiLCJmaXJzdE1pbnV0ZSIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJzdGFydFRpbWVJc1ZhbGlkIiwiZW5kVGltZUlzVmFsaWQiLCJEYXlzIiwiTW9uZGF5IiwiVHVlc2RheSIsIldlZG5lc2RheSIsIlRodXJzZGF5IiwiRnJpZGF5IiwiU2F0dXJkYXkiLCJTdW5kYXkiLCJNZWV0aW5nRnJlcXVlbmNpZXMiLCJEYWlseSIsIk1vbnRobHkiLCJPbmVUaW1lIiwiV2Vla2x5IiwiWWVhcmx5IiwiQWNjb3VudCIsIkVycm9yQ2hhbmdpbmdFbWFpbCIsIkVycm9yQ2hhbmdpbmdQYXNzd29yZCIsIkVycm9yQ3JlYXRlQWNjb3VudCIsIkVycm9yRGVsZXRlQWNjb3VudCIsIkVycm9ySW52YWxpZFBhc3N3b3JkSW5wdXQiLCJFcnJvclNlbmRpbmdFbWFpbCIsIkVycm9yU2V0dGluZ1Rva2VuIiwiRXJyb3JVcGxvYWRQcm9maWxlUGljdHVyZSIsIkVtYWlsU2VudCIsIk5vdE92ZXIxOCIsIkludmFsaWRFbWFpbCIsIkluY29ycmVjdFBhc3N3b3JkIiwiSW52YWxpZEFjY291bnRJbnB1dCIsIlN1Y2Nlc3NBY2NvdW50Q3JlYXRlZCIsIlN1Y2Nlc3NBY2NvdW50RGVsZXRlZCIsIlN1Y2Nlc3NBY2NvdW50U2V0dXAiLCJTdWNjZXNzQ2hhbmdpbmdFbWFpbCIsIlN1Y2Nlc3NDaGFuZ2luZ1Bhc3N3b3JkIiwiU3VjY2Vzc0xvZ2luIiwiU3VjY2Vzc1VwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4iLCJVbnZlcmlmaWVkVXNlcldhc0ZvdW5kIiwiVXNlckFscmVhZHlFeGlzdHMiLCJVc2VyTm90Rm91bmQiLCJQYXNzd29yZHNNdXN0TWF0Y2giLCJQYXNzd29yZFRvb1Nob3J0IiwiSW5hY3RpdmVBY2NvdW50IiwiRXJyb3JBZGRDb252ZXJzYXRpb24iLCJFcnJvckNvbnZlcnNhdGlvbkV4aXN0cyIsIkVycm9yR2V0Q29udmVyc2F0aW9uIiwiRXJyb3JHZXRSZWNlaXZlciIsIkVycm9yQ3JlYXRlQ29udmVyc2F0aW9uIiwiR2V0Q29udmVyc2F0aW9ucyIsIlN1Y2Nlc3MiLCJTdWNjZXNzR2V0Q29udmVyc2F0aW9uIiwiU3VjY2Vzc0NyZWF0ZUNvbnZlcnNhdGlvbiIsIlN0dWR5R3JvdXAiLCJBZGRPbmVUaW1lTWVldGluZyIsIkludmFsaWRJbnB1dCIsIkNyZWF0ZVBvc3QiLCJJbnZhbGlkQXR0YWNobWVudCIsIkVycm9yQ3JlYXRlU3R1ZHlHcm91cCIsIkVycm9yRGVsZXRlU3R1ZHlHcm91cCIsIkVycm9yRGVsZXRlTWVldGluZyIsIkVycm9yRWRpdE1lZXRpbmciLCJFcnJvckdldFN0dWR5R3JvdXAiLCJFcnJvckxlYXZlU3R1ZHlHcm91cCIsIkVycm9ySm9pblN0dWR5R3JvdXAiLCJFcnJvclJlbW92ZVVzZXIiLCJFcnJvclJlbW92ZVN0dWR5R3JvdXAiLCJJbnZhbGlkRWRpdFN0dWR5R3JvdXAiLCJTdHVkeUdyb3VwSXNOb3RBY3RpdmUiLCJNZWV0aW5nTm90Rm91bmQiLCJTdHVkeUdyb3VwTm90Rm91bmQiLCJTdWNjZXNzRGVsZXRlTWVldGluZyIsIlN1Y2Nlc3NTdHVkeUdyb3VwQ3JlYXRlZCIsIlN1Y2Nlc3NTdHVkeUdyb3VwRGVsZXRlZCIsIlN1Y2Nlc3NTdHVkeUdyb3VwRWRpdGVkIiwiU3VjY2Vzc1N0dWR5R3JvdXBKb2luZWQiLCJTdWNjZXNzU3R1ZHlHcm91cExlZnQiLCJTdWNjZXNzU3R1ZHlHcm91cFJldHJpZXZlZCIsIlN1Y2Nlc3NTdHVkeUdyb3Vwc1JldHJpZXZlZCIsIkVycm9yR2V0dGluZ1NlYXJjaFJlc3VsdHMiLCJVc2VyQWxyZWFkeUpvaW5lZCIsIlVzZXJOb3RBc3NvY2lhdGVkV2l0aFNjaG9vbE9mU3R1ZHlHcm91cCIsIlVzZXJOb3RJblN0dWR5R3JvdXAiLCJVc2VyTm90T3duZXIiLCJFcnJvck51bGxTdHVkeUdyb3VwSW5wdXQiLCJTZXRSZWN1cnJpbmdNZWV0aW5nIiwiUmVwb3J0IiwiRW1wdHlGaWVsZCIsIkNoYW5nZUVtYWlsIiwiQ2hhbmdlUGFzc3dvcmQiLCJDcmVhdGVBY2NvdW50IiwiRGVsZXRlIiwiR2V0VW52ZXJpZmllZFVzZXIiLCJMb2dpbiIsIlNldHVwQWNjb3VudCIsIlVwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4iLCJWZXJpZnlFbWFpbENoYW5nZSIsIkdldENvbnZlcnNhdGlvbiIsIkNyZWF0ZUNvbnZlcnNhdGlvbiIsIlNlbmRSZXBvcnQiLCJTdGF0aWNSZXNvdXJjZXMiLCJJbmRleCIsIlNlYXJjaCIsIkdldFNlYXJjaFJlc3VsdHMiLCJDcmVhdGVTdHVkeUdyb3VwIiwiRGVsZXRlTWVldGluZyIsIkRlbGV0ZVN0dWR5R3JvdXAiLCJFZGl0U3R1ZHlHcm91cCIsIkVkaXRNZWV0aW5nIiwiR2V0VXNlclN0dWR5R3JvdXBzIiwiR2V0U3R1ZHlHcm91cCIsIkpvaW5TdHVkeUdyb3VwIiwiTGVhdmVTdHVkeUdyb3VwIiwiUmVzcG9uc2VNZXNzYWdlcyIsInJlcXVpcmUiLCJWYWxpZGF0b3IiLCJuZXh0TWlkZGxld2FyZUZ1bmN0aW9uIiwiaW5wdXRJc1ZhbGlkIiwibmV3RW1haWwiLCJib2R5IiwidmFsaWRhdGVFbWFpbCIsImpzb24iLCJjb25maXJtUGFzc3dvcmQiLCJwYXNzd29yZF9jb25maXJtYXRpb24iLCJ0aXRsZSIsImNhdGVnb3J5Iiwic3R1ZHlHcm91cElzVmFsaWQiLCJ1c2VyIiwiY291cnNlIiwiZ3JvdXBDb2xvciIsImlzT25saW5lR3JvdXAiLCJpc1R1dG9yR3JvdXAiLCJzdWJqZWN0IiwiZGF5IiwiZGV0YWlscyIsInJvb21OdW1iZXIiLCJmcmVxdWVuY3kiLCJhcmVhQ29kZSIsImN1cnJlbnRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwiQmFja29mZiIsIm1zIiwiZmFjdG9yIiwiaml0dGVyIiwiYXR0ZW1wdHMiLCJwb3ciLCJyYW5kIiwicmFuZG9tIiwiZGV2aWF0aW9uIiwiZmxvb3IiLCJzZXRNaW4iLCJzZXRNYXgiLCJzZXRKaXR0ZXIiLCJ0b1ZhbCIsIm1peCIsInRtcCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9rIiwiY3NzTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwiZGVjb2RlIiwicXMiLCJxcnkiLCJwYWlycyIsInBhaXIiLCJuYW1lcyIsInNyYyIsInF1ZXJ5IiwidXJpIiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsInBhdGhOYW1lcyIsInF1ZXJ5S2V5IiwiJDAiLCIkMSIsIiQyIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJiYSIsImNhIiwiZGEiLCJlYSIsImFkZCIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJCIiwiZyIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsIm9hIiwicGEiLCJxYSIsIm1hIiwiaXNOYU4iLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkUiLCJNYSIsIkthIiwiaXRlcmF0b3IiLCJMYSIsIk5hIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIlFhIiwiX3JlbmRlciIsIlJhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJjb25maWd1cmFibGUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiJGEiLCJhYiIsImJiIiwiZWIiLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJwYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicWIiLCJncmlkQXJlYSIsImxpbmVDbGFtcCIsInJiIiwic2IiLCJ0YiIsInNldFByb3BlcnR5IiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJiYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJNYXAiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsInRjIiwidmMiLCJ3YyIsImxhbmVQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiY2x6MzIiLCJiZCIsImNkIiwibG9nIiwiTE4yIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwidWMiLCJqZCIsImtkIiwibGQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwicmFuZ2UiLCJtZSIsIm5lIiwib2UiLCJwZSIsInFlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIk1lIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsIkciLCIkZSIsImhhcyIsImFmIiwiYmYiLCJjZiIsImRmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJOYiIsInUiLCJxIiwiZWYiLCJmZiIsInBhcmVudFdpbmRvdyIsImdmIiwiaGYiLCJKIiwiSyIsIlEiLCJMIiwiamUiLCJjaGFyIiwia2UiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJwZiIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJIIiwiSSIsIkNmIiwiTSIsIk4iLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsIk8iLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsIkFnIiwiQmciLCJDZyIsIkEiLCJDIiwiRGciLCJFZyIsIkZnIiwicmVmcyIsIkdnIiwiS2ciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJIZyIsIklnIiwiSmciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIk1nIiwidXBkYXRlciIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlBnIiwiUWciLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJUZyIsIlVnIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZG9jdW1lbnRFbGVtZW50IiwiZmgiLCJnaCIsImhoIiwiUCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJ3aCIsInhoIiwiUiIsIlMiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJ1c2VTdGF0ZSIsImdldFNuYXBzaG90IiwidXNlRWZmZWN0Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImFqIiwiYmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsImNlaWwiLCJvaiIsInBqIiwiWCIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJJbmZpbml0eSIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsIldqIiwiWGoiLCJwaW5nQ2FjaGUiLCJZaiIsIlpqIiwidmEiLCJhayIsImJrIiwiZGsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJrayIsImxrIiwibWsiLCJuayIsIm9rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJoayIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJmb3JtIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwibyIsImxvYWRlZCIsIndyaXRhYmxlIiwiUmVmZXJlbmNlRXJyb3IiLCJfX3Byb3RvX18iLCJmaWxlcyIsInNldFByb3RvdHlwZU9mIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJvbmxvYWQiLCJmaWxlIiwib25Eb25lIiwib25DaGFuZ2UiLCJoYW5kbGVDaGFuZ2UiLCJydW4iLCJmdW4iLCJuZXh0VGljayIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIk5PREVfRU5WIiwiZnJhbWVzVG9Qb3AiLCJpc1JlYWN0V2FybmluZyIsIl9fc2VsZiIsIl9fc291cmNlIiwiX3N0b3JlIiwidmFsaWRhdGVkIiwiX3NlbGYiLCJmcmVlemUiLCJfIiwiY3JlYXRlRmFjdG9yeSIsImNsb25lQW5kUmVwbGFjZUtleSIsImNsb25lRWxlbWVudCIsImlzVmFsaWRFbGVtZW50IiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsIkZ1bmN0aW9uIiwiY2hpbGRJRHMiLCJnZXREaXNwbGF5TmFtZSIsImdldEVsZW1lbnQiLCJnZXRPd25lcklEIiwib25TZXRDaGlsZHJlbiIsInBhcmVudElEIiwib25CZWZvcmVNb3VudENvbXBvbmVudCIsInVwZGF0ZUNvdW50Iiwib25CZWZvcmVVcGRhdGVDb21wb25lbnQiLCJvbk1vdW50Q29tcG9uZW50Iiwib25VcGRhdGVDb21wb25lbnQiLCJvblVubW91bnRDb21wb25lbnQiLCJwdXJnZVVubW91bnRlZENvbXBvbmVudHMiLCJfcHJldmVudFB1cmdpbmciLCJnZXRDdXJyZW50U3RhY2tBZGRlbmR1bSIsImdldE5hbWUiLCJfZGVidWdJRCIsImdldFN0YWNrQWRkZW5kdW1CeUlEIiwiZ2V0UGFyZW50SUQiLCJnZXRDaGlsZElEcyIsImdldFNvdXJjZSIsImdldFRleHQiLCJnZXRVcGRhdGVDb3VudCIsImdldFJvb3RJRHMiLCJnZXRSZWdpc3RlcmVkSURzIiwicHVzaE5vblN0YW5kYXJkV2FybmluZ1N0YWNrIiwicmVhY3RTdGFjayIsInBvcE5vblN0YW5kYXJkV2FybmluZ1N0YWNrIiwicmVhY3RTdGFja0VuZCIsInNldFN0YXRlIiwiZW5xdWV1ZUNhbGxiYWNrIiwiZm9yY2VVcGRhdGUiLCJyZXBsYWNlU3RhdGUiLCJQdXJlQ29tcG9uZW50IiwidW5pcXVlS2V5IiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJjaGlsZENvbnRleHQiLCJfX3JlYWN0QXV0b0JpbmRQYWlycyIsImF1dG9iaW5kIiwiX19yZWFjdEJvdW5kQ29udGV4dCIsIl9fcmVhY3RCb3VuZE1ldGhvZCIsIl9fcmVhY3RCb3VuZEFyZ3VtZW50cyIsInN0YXRpY3MiLCJnZXRJbml0aWFsU3RhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJfX2lzTW91bnRlZCIsIl9fZGlkV2FybklzTW91bnRlZCIsIl9pc01vY2tGdW5jdGlvbiIsImNvbXBvbmVudFNob3VsZFVwZGF0ZSIsImNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMiLCJlc2NhcGUiLCJpbnN0YW5jZVBvb2wiLCJwb3AiLCJkZXN0cnVjdG9yIiwicG9vbFNpemUiLCJhZGRQb29saW5nVG8iLCJnZXRQb29sZWQiLCJyZWxlYXNlIiwib25lQXJndW1lbnRQb29sZXIiLCJ0d29Bcmd1bWVudFBvb2xlciIsInRocmVlQXJndW1lbnRQb29sZXIiLCJmb3VyQXJndW1lbnRQb29sZXIiLCJ0b0FycmF5IiwiY3JlYXRlQ2xhc3MiLCJjcmVhdGVNaXhpbiIsIkRPTSIsIl9fc3ByZWFkIiwia2V5UHJlZml4IiwibWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCIsImFiYnIiLCJhZGRyZXNzIiwiYXJ0aWNsZSIsImFzaWRlIiwiYXVkaW8iLCJiZGkiLCJiZG8iLCJiaWciLCJibG9ja3F1b3RlIiwiY2FudmFzIiwiY2l0ZSIsImNvbGdyb3VwIiwiZGF0YWxpc3QiLCJkZWwiLCJkZm4iLCJkaWFsb2ciLCJkaXYiLCJkbCIsImR0IiwiZW0iLCJmaWVsZHNldCIsImZpZ2NhcHRpb24iLCJmaWd1cmUiLCJmb290ZXIiLCJoZWFkZXIiLCJoZ3JvdXAiLCJodG1sIiwiaWZyYW1lIiwiaW5zIiwia2JkIiwibGVnZW5kIiwibWFyayIsIm1lbnUiLCJtZXRlciIsIm5hdiIsIm5vc2NyaXB0Iiwib2wiLCJvcHRncm91cCIsIm9wdGlvbiIsInBpY3R1cmUiLCJwcmUiLCJwcm9ncmVzcyIsInJwIiwicnQiLCJydWJ5Iiwic2FtcCIsInNjcmlwdCIsInNlY3Rpb24iLCJzZWxlY3QiLCJzcGFuIiwic3Ryb25nIiwic3ViIiwic3VtbWFyeSIsInN1cCIsInRhYmxlIiwidGJvZHkiLCJ0ZXh0YXJlYSIsInRmb290IiwidGhlYWQiLCJ0ciIsInVsIiwidmFyIiwidmlkZW8iLCJjaXJjbGUiLCJjbGlwUGF0aCIsImRlZnMiLCJlbGxpcHNlIiwiaW1hZ2UiLCJsaW5lYXJHcmFkaWVudCIsIm1hc2siLCJwb2x5Z29uIiwicG9seWxpbmUiLCJyYWRpYWxHcmFkaWVudCIsInJlY3QiLCJzdG9wIiwic3ZnIiwidHNwYW4iLCJfaXNSZWFjdEVsZW1lbnQiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwiZ3JvdXBzIiwib3B0aW9uYWwiLCJwYXJ0aWFsIiwiYXN0ZXJpc2siLCJhdHRhY2hLZXlzIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwidG9rZW5zVG9SZWdFeHAiLCJzdHJpbmdUb1JlZ2V4cCIsInRva2Vuc1RvRnVuY3Rpb24iLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJlc2NhcGVkIiwiZ3JvdXAiLCJtb2RpZmllciIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwicHJldHR5Iiwic2VnbWVudCIsInNlbnNpdGl2ZSIsInN0cmljdCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJqc3hzIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiQ29uc3VtZXIiLCJjcmVhdGVSZWYiLCJsYXp5IiwibWVtbyIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJyZXZlcnNlIiwic2tpcFRlbXBSZXNldCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJzb3J0SW5kZXgiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudERvY3VtZW50IiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiYWxwaGFiZXQiLCJzZWVkIiwibnVtIiwiZW5jb2RlZCIsInllYXN0IiwiZGVjb2RlZCIsIl9leHRlbmRzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX3NldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwidmFsdWVFcXVhbCIsImFWYWx1ZSIsImJWYWx1ZSIsImNvbmRpdGlvbiIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJjcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwicGFydCIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImZpbHRlciIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiUG9wU3RhdGVFdmVudCIsIkhhc2hDaGFuZ2VFdmVudCIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjb21tb25qc0dsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXIiLCJjaGFuZ2VkQml0cyIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJfQ29tcG9uZW50IiwiZW1pdHRlciIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJoaXN0b3J5Q29udGV4dCIsIlJvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwiaXNFeGFjdCIsIkxpZmVjeWNsZSIsIm9uTW91bnQiLCJwcmV2UHJvcHMiLCJvblVubW91bnQiLCJjYWNoZUNvdW50IiwiZ2VuZXJhdGVQYXRoIiwiY29tcGlsZVBhdGgiLCJSZWRpcmVjdCIsImNvbXB1dGVkTWF0Y2giLCJfcmVmJHB1c2giLCJwcmV2TG9jYXRpb24iLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJSb3V0ZSIsImNvbnRleHQkMSIsIl90aGlzJHByb3BzIiwiaXNFbXB0eUNoaWxkcmVuIiwiU3dpdGNoIiwidXNlSGlzdG9yeSIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJmb3J3YXJkZWRSZWYiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiaXNEdXBsaWNhdGVOYXZpZ2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJiYXRjaCIsImdldEJhdGNoIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsInN0b3JlIiwicGFyZW50U3ViIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsInN1YnNjcmlwdGlvbiIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlTdWJzY3JpYmUiLCJhZGROZXN0ZWRTdWIiLCJmaXJzdCIsImlzU3Vic2NyaWJlZCIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsIm5vdGlmeU5lc3RlZFN1YnMiLCJCb29sZWFuIiwidHJ5VW5zdWJzY3JpYmUiLCJnZXRMaXN0ZW5lcnMiLCJjb250ZXh0VmFsdWUiLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJjcmVhdGVTdG9yZUhvb2siLCJ1c2VSZWR1eENvbnRleHQiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VTdG9yZSIsInVzZURpc3BhdGNoIiwicmVmRXF1YWxpdHkiLCJjcmVhdGVTZWxlY3Rvckhvb2siLCJlcXVhbGl0eUZuIiwiX3VzZVJlZHV4Q29udGV4dCIsInNlbGVjdGVkU3RhdGUiLCJjb250ZXh0U3ViIiwiZm9yY2VSZW5kZXIiLCJsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yIiwibGF0ZXN0U2VsZWN0b3IiLCJsYXRlc3RTdG9yZVN0YXRlIiwibGF0ZXN0U2VsZWN0ZWRTdGF0ZSIsInN0b3JlU3RhdGUiLCJuZXdTZWxlY3RlZFN0YXRlIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3U3RvcmVTdGF0ZSIsIl9uZXdTZWxlY3RlZFN0YXRlIiwidXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24iLCJuZXdCYXRjaCIsInVzZVNlbGVjdG9yIiwiYXV0aENvbnN0YW50cyIsInBvcHVwQ29uc3RhbnRzIiwic3R1ZHlHcm91cHNDb25zdGFudHMiLCJub3RpZmljYXRpb25Db25zdGFudHMiLCJzaWduSW4iLCJzaWduT3V0IiwiY3JlYXRlQWNjb3VudCIsInVudmVyaWZpZWRVc2VyIiwic2V0VXNlciIsInNob3dWaWV3TWVldGluZ3NTdHVkeUdyb3VwUG9wdXAiLCJzaG93Vmlld01lbWJlclBvcHVwIiwibWVtYmVyIiwic2hvd0lucHV0UG9wdXAiLCJkZWZhdWx0SW5wdXQiLCJsYWJlbDIiLCJzaG93Q29uZmlybWF0aW9uUG9wdXAiLCJpc0NvbmZpcm1hdGlvbiIsImZpcnN0QnV0dG9uVGl0bGUiLCJzZWNvbmRCdXR0b25UaXRsZSIsInNob3dSZXBvcnRQb3B1cCIsInJlcG9ydERhdGEiLCJjbG9zZVBvcHVwIiwiYWRkU3R1ZHlHcm91cCIsImNsZWFyU3R1ZHlHcm91cHMiLCJzaG93RXJyb3JOb3RpZmljYXRpb24iLCJzaG93U3VjY2Vzc05vdGlmaWNhdGlvbiIsInN0YXJ0TG9hZGluZyIsInN0b3BMb2FkaW5nIiwiYnV0dG9uQ2xhc3NOYW1lIiwiQnV0dG9uVHlwZXMiLCJpc1RleHRBcmVhIiwib25TdWJtaXQiLCJzdWJtaXRDcmVhdGVTdHVkeUdyb3VwIiwidXBkYXRlTmFtZUZpZWxkIiwidXBkYXRlR3JvdXBDb2xvciIsInVwZGF0ZURlc2NyaXB0aW9uRmllbGQiLCJTdWJqZWN0cyIsInVwZGF0ZVN1YmplY3RGaWVsZCIsInVwZGF0ZVByaXZhY3kiLCJjb3Vyc2VDb2RlIiwidXBkYXRlQ291cnNlQ29kZUZpZWxkIiwidXNlclNjaG9vbCIsInVwZGF0ZUlzQXNzb2NpYXRlZFdpdGhTY2hvb2wiLCJpc0Fzc29jaWF0ZWRXaXRoU2Nob29sIiwidXBkYXRlSXNPbmxpbmVHcm91cCIsInVwZGF0ZUlzVHV0b3JHcm91cCIsIkludmFsaWREYXRlQWRhcHRlckVycm9yIiwiZGF0ZUFkYXB0ZXJDb25maWciLCJEYXRlQWRhcHRlckJhc2UiLCJfZGF0ZSIsImdlbmVyYXRvcnMiLCJpc0ludGVnZXIiLCJzdGF0aWMiLCJfb2JqZWN0IiwidW5pbXBsZW1lbnRlZEVycm9yIiwiX2pzb24iLCJfZGF0ZXRpbWUiLCJ0b0RhdGVUaW1lIiwiRGF0ZVRpbWUiLCJmcm9tSlNPTiIsIkRhdGVBZGFwdGVyIiwiaGFzVGltZXpvbmVTdXBwb3J0IiwiV0VFS0RBWVMiLCJNSUxMSVNFQ09ORFNfSU5fU0VDT05EIiwiTUlMTElTRUNPTkRTX0lOX01JTlVURSIsIk1JTExJU0VDT05EU19JTl9IT1VSIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsIk1JTExJU0VDT05EU19JTl9XRUVLIiwiSW52YWxpZERhdGVUaW1lRXJyb3IiLCJ0aW1lem9uZSIsImFzc2VydElzVmFsaWQiLCJVVEMiLCJ5ZWFyIiwic2Vjb25kIiwibWlsbGlzZWNvbmQiLCJfZW5kIiwiaXNFcXVhbCIsImFzc2VydFNhbWVUaW1lWm9uZSIsImlzQmVmb3JlIiwiaXNCZWZvcmVPckVxdWFsIiwiaXNBZnRlck9yRXF1YWwiLCJpc09jY3VycmluZyIsImFtb3VudCIsImZvcmtEYXRlVGltZSIsImFkZFVUQ1llYXJzIiwiYWRkVVRDTW9udGhzIiwiYWRkVVRDV2Vla3MiLCJhZGRVVENEYXlzIiwiYWRkVVRDSG91cnMiLCJhZGRVVENNaW51dGVzIiwiYWRkVVRDU2Vjb25kcyIsImFkZFVUQ01pbGxpc2Vjb25kcyIsInN1YnRyYWN0Iiwic3ViVVRDWWVhcnMiLCJzdWJVVENNb250aHMiLCJzdWJVVENXZWVrcyIsInN1YlVUQ0RheXMiLCJzdWJVVENIb3VycyIsInN1YlVUQ01pbnV0ZXMiLCJzdWJVVENTZWNvbmRzIiwic3ViVVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImRpZmYiLCJnZXRVVENZZWFyRGF5IiwiZ2V0VVRDRGF5IiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJzZXRVVENGdWxsWWVhciIsIm1vbnRoTGVuZ3RoIiwic2V0VVRDRGF0ZSIsInNldFVUQ01vbnRoIiwic2V0VVRDSG91cnMiLCJzZXRVVENNaW51dGVzIiwic2V0VVRDU2Vjb25kcyIsInNldFVUQ01pbGxpc2Vjb25kcyIsImdyYW51bGFyaXR5Iiwid2tzdCIsIm9yZGVyZWRXZWVrZGF5cyIsInNldERhdGVUb1N0YXJ0T2ZXZWVrIiwid2Vla1N0YXJ0IiwiZW5kR3JhbnVsYXJpdHkiLCJzZXREYXRlVG9FbmRPZldlZWsiLCJ1bmlxRGF0ZVRpbWVzIiwiZGF0ZXMiLCJ3a2RheXMiLCJzaGlmdEFycmF5IiwiZ2V0RGlmZmVyZW5jZUJldHdlZW5XZWVrZGF5cyIsImdldERheXNJbkZlYnJ1YXJ5IiwiaXNMZWFwWWVhciIsInRvSW50ZWdlciIsIk5hTiIsImludCIsImFkZE1pbGxpc2Vjb25kcyIsImRpcnR5RGF0ZSIsImRpcnR5QW1vdW50IiwidGltZXN0YW1wIiwiZGVzaXJlZE1vbnRoIiwiZGF0ZVdpdGhEZXNpcmVkTW9udGgiLCJkYXlzSW5Nb250aCIsImdldFRpbWUiLCJJbmZpbml0ZUxvb3BFcnJvciIsIm51bWJlclNvcnRDb21wYXJlciIsImNsb25lSlNPTiIsImRhdGVJbnB1dFRvRGF0ZVRpbWUiLCJmcm9tRGF0ZVRpbWUiLCJmcm9tRGF0ZSIsIm5vcm1hbGl6ZURhdGVUaW1lVGltZXpvbmUiLCJSdWxlT3B0aW9uRXJyb3IiLCJjbG9uZVJ1bGVPcHRpb25zIiwiUmVjdXJyZW5jZVJ1bGVFcnJvciIsIlZhbGlkRGF0ZVRpbWUiLCJJbnZhbGlkRGF0ZVRpbWUiLCJSZWN1cnJlbmNlUnVsZXNJdGVyYXRvciIsInJlY3VycmVuY2VSdWxlcyIsIml0ZXJhdGUiLCJpdGVyYXRlV2l0aFJldmVyc2VDb3VudCIsIml0ZXJhdGVXaXRoQ291bnQiLCJub3JtYWxpemVEYXRlVGltZUFyZ3MiLCJpc0luZmluaXRlIiwiaGFzRHVyYXRpb24iLCJ5aWVsZEFyZ3MiLCJkYXRlQ2FjaGUiLCJza2lwVG9EYXRlIiwic3RhcnRpbmdEYXRlIiwibmV4dERhdGUiLCJub3JtYWxpemVSdW5PdXRwdXQiLCJydW5SdWxlcyIsImlzRGF0ZVBhc3RFbmQiLCJPY2N1cnJlbmNlR2VuZXJhdG9yIiwibWF4RHVyYXRpb24iLCJmaXJzdERhdGUiLCJfZmlyc3REYXRlIiwiX3J1biIsImRhdGVBZGFwdGVyIiwibGFzdERhdGUiLCJfbGFzdERhdGUiLCJvcGVyYXRvcnMiLCJjdXJyIiwib2NjdXJyZW5jZXMiLCJPY2N1cnJlbmNlSXRlcmF0b3IiLCJub3JtYWxpemVPY2N1cnJlbmNlc0FyZ3MiLCJjb2xsZWN0aW9ucyIsIkNvbGxlY3Rpb25JdGVyYXRvciIsIm5vcm1hbGl6ZUNvbGxlY3Rpb25zQXJncyIsIm9jY3Vyc0JldHdlZW4iLCJzdGFydElucHV0IiwiZW5kSW5wdXQiLCJub3JtYWxpemVEYXRlSW5wdXQiLCJleGNsdWRlRW5kcyIsImdldE1heER1cmF0aW9uIiwib2NjdXJzT24iLCJyYXdBcmdzIiwibm9ybWFsaXplT2NjdXJzT25BcmdzIiwid2Vla2RheSIsImFmdGVyIiwib2NjdXJzQWZ0ZXIiLCJleGNsdWRlU3RhcnQiLCJvY2N1cnNCZWZvcmUiLCJleGNsdWRlRGF0ZXMiLCJub3JtYWxpemVSdW5BcmdzIiwibm9ybWFsaXplRGF0ZUlucHV0VG9BZGFwdGVyIiwiZGF0ZUlucHV0VG9EYXRlQWRhcHRlciIsIm9jY3VycmVuY2VJdGVyYXRvciIsInRha2UiLCJub3JtYWxpemVEYXRlT3V0cHV0IiwiQ29sbGVjdGlvbiIsInBlcmlvZFN0YXJ0IiwicGVyaW9kRW5kIiwiZ2V0UGVyaW9kIiwic3RhcnREYXRlIiwiY29sbGVjdGlvbkl0ZXJhdG9yIiwicGVyaW9kIiwic2tpcEVtcHR5UGVyaW9kcyIsImluY3JlbWVudFBlcmlvZCIsIk9wZXJhdG9yIiwic3RyZWFtcyIsInN1cGVyIiwic3RyZWFtIiwiY2FsY3VsYXRlSXNJbmZpbml0ZSIsImNhbGN1bGF0ZUhhc0R1cmF0aW9uIiwiSXRlcmFibGVXcmFwcGVyIiwicnVuQXJncyIsInByb2Nlc3NZaWVsZEFyZ3MiLCJzdHJlYW1zQ29tcGFyZXIiLCJzdHJlYW1zUmV2ZXJzZUNvbXBhcmVyIiwic2VsZWN0TmV4dEl0ZXJhYmxlIiwiQWRkT3BlcmF0b3IiLCJ3cmFwcGVkU3RyZWFtcyIsInNvbWUiLCJzdHJlYW1zRHVyYXRpb24iLCJEYXRlcyIsImFkYXB0ZXJzIiwiZGF0ZXRpbWVzIiwiZmluZEluZGV4Iiwia2VlcExvY2FsVGltZSIsIlJ1bGVCYXNlIiwibm9ybU9wdGlvbnMiLCJyZWN1cnJlbmNlTW9kdWxlcyIsIm5vcm1hbGl6ZURlZmF1bHRPcHRpb25zIiwic3RhcnRPcHRpb25zIiwibW9kIiwibm9ybWFsaXplT3B0aW9ucyIsIm5vcm1hbGl6ZVJ1bGVPcHRpb25zIiwiUnVsZSIsInR6b3B0aW9ucyIsIlNjaGVkdWxlQmFzZSIsIm9jY3VycmVuY2VTdHJlYW0iLCJTdWJ0cmFjdE9wZXJhdG9yIiwiaW5jbHVzaW9uIiwiZXhjbHVzaW9uIiwiY3ljbGVTdHJlYW1zIiwiaXRlcmF0ZUV4Y2x1c2lvbiIsIlVuaXF1ZU9wZXJhdG9yIiwibGFzdFZhbHVlIiwiU2NoZWR1bGUiLCJycnVsZXMiLCJleHJ1bGVzIiwicnVsZUFyZ3MiLCJyZGF0ZXMiLCJleGRhdGVzIiwiUmVjdXJyZW5jZVJ1bGUiLCJwcm9jZXNzb3IiLCJGcmVxdWVuY3lSdWxlIiwiaW5pdERhdGUiLCJpbnRlcnZhbFVuaXQiLCJmcmVxIiwiZnJlcVRvR3JhbnVsYXJpdHkiLCJmaXJzdEludGVydmFsU3RhcnREYXRlIiwibm9ybWFsaXplZFN0YXJ0RGF0ZSIsImludGVydmFsU3RhcnREYXRlIiwiaW50ZXJ2YWxFbmREYXRlIiwibm9ybWFsaXplZEVuZERhdGUiLCJza2lwVG9JbnRlcnZhbCIsInZhbGlkYXRlRGF0ZSIsImRhdGVJc1dpdGhpbkludGVydmFsIiwic2V0VG9DdXJyZW50SW50ZXJ2YWwiLCJpbnRlcnZhbERpZmZlcmVuY2UiLCJpbnRlcnZhbERpZmZlcmVuY2VCZXR3ZWVuRGF0ZXMiLCJpbnRlcnZhbCIsImRpZmZlcmVuY2UiLCJpbnRlcnZhbER1cmF0aW9uIiwibW9udGhzIiwiUmV2RnJlcXVlbmN5UnVsZSIsIkZSRVFVRU5DSUVTIiwiRnJlcXVlbmN5UnVsZU1vZHVsZSIsImJ5TWlsbGlzZWNvbmRPZlNlY29uZCIsIm5vcm0iLCJpbmNsdWRlcyIsInJ1bGVPcHRpb25GaWxsZWQiLCJmcmVxQ2FjaGUiLCJSZWN1cnJlbmNlUnVsZUJhc2UiLCJSZXZSZWN1cnJlbmNlUnVsZUJhc2UiLCJSZXZCeVRpbWVPZlVuaXRSdWxlIiwiY3VycmVudFRpbWUiLCJiYXNlR3JhbnVsYXJpdHkiLCJSZXZCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlIiwiQnlUaW1lT2ZVbml0UnVsZSIsIkJ5TWlsbGlzZWNvbmRPZlNlY29uZFJ1bGUiLCJCeU1pbGxpc2Vjb25kT2ZTZWNvbmRSdWxlTW9kdWxlIiwiUmV2QnlTZWNvbmRPZk1pbnV0ZVJ1bGUiLCJieVNlY29uZE9mTWludXRlIiwiQnlTZWNvbmRPZk1pbnV0ZVJ1bGUiLCJCeVNlY29uZE9mTWludXRlUnVsZU1vZHVsZSIsIlJldkJ5TWludXRlT2ZIb3VyUnVsZSIsImJ5TWludXRlT2ZIb3VyIiwiQnlNaW51dGVPZkhvdXJSdWxlIiwiQnlNaW51dGVPZkhvdXJSdWxlTW9kdWxlIiwiUmV2QnlIb3VyT2ZEYXlSdWxlIiwiYnlIb3VyT2ZEYXkiLCJCeUhvdXJPZkRheVJ1bGUiLCJCeUhvdXJPZkRheVJ1bGVNb2R1bGUiLCJnZXROZXh0V2Vla2RheSIsImdldE50aFdlZWtkYXlPZk1vbnRoIiwibnRoIiwiQnlEYXlPZk1vbnRoUnVsZSIsIm5vcm1hbGl6ZWRCeURheU9mTW9udGgiLCJub3JtYWxpemVCeURheU9mTW9udGgiLCJieURheU9mTW9udGgiLCJieURheU9mV2VlayIsImN1cnJlbnREYXkiLCJuZXh0TW9udGgiLCJsZW5ndGhPZk1vbnRoIiwiZmlsdGVyZWRCeURheU9mTW9udGgiLCJudGhXZWVrZGF5T2ZNb250aCIsIlJldkJ5RGF5T2ZNb250aFJ1bGUiLCJCeURheU9mTW9udGhSdWxlTW9kdWxlIiwiYnlEYXlPZlllYXIiLCJnZXROdGhXZWVrZGF5T2ZZZWFyIiwiZ2V0UHJldmlvdXNXZWVrZGF5IiwiUmV2QnlEYXlPZldlZWtSdWxlIiwiYnlNb250aE9mWWVhciIsImV4cGFuZFllYXJseSIsImV4cGFuZE1vbnRobHkiLCJleHBhbmQiLCJnZXRQcmV2V2Vla2RheXNPZlllYXIiLCJnZXRQcmV2V2Vla2RheXNPZk1vbnRoIiwiQnlEYXlPZldlZWtSdWxlIiwiZ2V0TmV4dFdlZWtkYXlzT2ZZZWFyIiwiZ2V0TmV4dFdlZWtkYXlzT2ZNb250aCIsIkJ5RGF5T2ZXZWVrUnVsZU1vZHVsZSIsImludmFsaWRXZWVkYXkiLCJmaW5kIiwiUmV2QnlNb250aE9mWWVhclJ1bGUiLCJjdXJyZW50TW9udGgiLCJCeU1vbnRoT2ZZZWFyUnVsZSIsIkJ5TW9udGhPZlllYXJSdWxlTW9kdWxlIiwiSUNBTF9SVUxFUyIsIlN0YW5kYXJkRGF0ZUFkYXB0ZXIiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJzZW5kUG9zdFJlcXVlc3QiLCJzdWNjZXNzUmVzcG9uc2VNZXNzYWdlIiwiY2F0Y2hNZXNzYWdlIiwiaXNBdXRoZW50aWNhdGVkIiwic2hvdWxkU2hvd05vdGlmaWNhdGlvbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZW5kR2V0UmVxdWVzdCIsInNlbmREZWxldGVSZXF1ZXN0Iiwic2VuZFBvc3RSZXF1ZXN0V2l0aEZvcm1EYXRhIiwiZm9ybWRhdGEiLCJnZXROZXh0TWVldGluZyIsIm5leHRPbmVUaW1lTWVldGluZyIsIm1lZXRpbmdzIiwibWVldGluZyIsInJlY3VycmluZ01lZXRpbmciLCJuZXh0UmVjdXJyaW5nTWVldGluZyIsInJlY3VycmluZ1N0YXJ0RGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImF1dGhSZWR1Y2VyIiwic2V0TmFtZSIsInNldERlc2NyaXB0aW9uIiwic2V0U3ViamVjdCIsInByaXZhY3kiLCJzZXRQcml2YWN5Iiwic2V0Q291cnNlQ29kZSIsInNldElzQXNzb2NpYXRlZFdpdGhTY2hvb2wiLCJzZXRJc1R1dG9yR3JvdXAiLCJzZXRJc09ubGluZUdyb3VwIiwic2V0R3JvdXBDb2xvciIsIlJvdXRlcyIsInByaXZhY3lTZXR0aW5nIiwic2Nob29sIiwibmV3U3R1ZHlHcm91cCIsInNlbGVjdGVkSW5kZXgiLCJvd25lciIsIl9pZCIsInN1Ym1pdEpvaW4iLCJzdHVkeUdyb3VwSWQiLCJzdWJtaXRNZXNzYWdlU3R1ZHlHcm91cE93bmVyIiwicmVjZWl2ZXJJZCIsImJhY2tncm91bmRDb2xvciIsInNldElucHV0IiwiaW5wdXQyIiwic2V0SW5wdXQyIiwiRm9yZ290UGFzc3dvcmQiLCJWZXJpZmljYXRpb25FbWFpbENvbmZpcm1hdGlvbiIsIkFjY291bnRTZXR1cCIsIkpvaW4iLCJDcmVhdGUiLCJFZGl0IiwiQ3JlYXRlTWVldGluZyIsIlZpZXdQb3N0IiwiVmlld01lZXRpbmdzIiwiVmlld01lbWJlciIsIklucHV0IiwiQ29uZmlybWF0aW9uIiwic3VibWl0RWRpdFN0dWR5R3JvdXAiLCJ1cGRhdGVEYXRlRmllbGQiLCJ1cGRhdGVUaW1lRmllbGQiLCJ1cGRhdGVGcmVxdWVuY3lGaWVsZCIsInVwZGF0ZURldGFpbHNGaWVsZCIsInVwZGF0ZUxvY2F0aW9uRmllbGQiLCJ1cGRhdGVSb29tTnVtYmVyRmllbGQiLCJzdWJtaXRDcmVhdGVNZWV0aW5nIiwiaXNSZWN1cnJpbmdNZWV0aW5nIiwic2V0RGF0ZSIsInNldFRpbWUiLCJzZXRGcmVxdWVuY3kiLCJzZXREZXRhaWxzIiwic2V0TG9jYXRpb24iLCJzZXRSb29tTnVtYmVyIiwiZ2V0RGF5IiwiYXR0YWNobWVudCIsInVwZGF0ZVRpdGxlRmllbGQiLCJ1cGRhdGVCb2R5RmllbGQiLCJ1cGRhdGVDYXRlZ29yeUZpZWxkIiwidXBkYXRlQXR0YWNobWVudCIsInN1Ym1pdENyZWF0ZVBvc3QiLCJhY2NlcHQiLCJhbHQiLCJzZXRUaXRsZSIsInNldEJvZHkiLCJQb3N0VHlwZXMiLCJzZXRDYXRlZ29yeSIsInNldEF0dGFjaG1lbnQiLCJmb3JtRGF0YSIsImFwcGVuZCIsImdldFBvc3RUeXBlRGV0YWlscyIsIlF1ZXN0aW9uTWFyayIsIkNhbXBhaWduIiwiQ29tbWVudCIsIkV2ZW50Tm90ZSIsImNyZWF0b3IiLCJwcm9maWxlUGljdHVyZSIsIkdsb2JhbCIsInNoZWV0UmVmIiwicmVoeWRyYXRpbmciLCJzaGVldFJlZkN1cnJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJrZXlmcmFtZXMiLCJpbnNlcnRhYmxlIiwiZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyIsIl90IiwiX3QyIiwiX3QzIiwiX3Q0IiwiY2lyY3VsYXJSb3RhdGVLZXlmcmFtZSIsImNpcmN1bGFyRGFzaEtleWZyYW1lIiwiQ2lyY3VsYXJQcm9ncmVzc1Jvb3QiLCJDaXJjdWxhclByb2dyZXNzU1ZHIiwiQ2lyY3VsYXJQcm9ncmVzc0NpcmNsZSIsImRpc2FibGVTaHJpbmsiLCJjaXJjbGVEaXNhYmxlU2hyaW5rIiwic3Ryb2tlIiwidGhpY2tuZXNzIiwiY2lyY2xlU3R5bGUiLCJyb290U3R5bGUiLCJyb290UHJvcHMiLCJjaXJjdW1mZXJlbmNlIiwiUEkiLCJjeCIsImN5IiwiQm94IiwiZGVmYXVsdENsYXNzTmFtZSIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiQm94Um9vdCIsIl9leHRlbmRTeFByb3AiLCJpblN4Iiwic3lzdGVtUHJvcHMiLCJvdGhlclByb3BzIiwic3BsaXRQcm9wcyIsImZpbmFsU3giLCJleHRlbmRTeFByb3AiLCJjcmVhdGVCb3giLCJDbGFzc05hbWVHZW5lcmF0b3IiLCJvdmVyZmxvdyIsIm5leHRNZWV0aW5nIiwic2V0TmV4dE1lZXRpbmciLCJnZXRSZWN1cnJpbmdNZWV0aW5nRnJlcXVlbmN5SlNYIiwibWVldGluZ0lkIiwiY29uZmlybWVkIiwic2V0Q29tbWVudCIsInJlcG9ydFR5cGUiLCJwb3B1cFJlZHVjZXIiLCJzaG93VG9wIiwiaXNMb2FkaW5nIiwibm90aWZpY2F0aW9uUmVkdWNlciIsImxvYWRpbmciLCJwb3B1cFZpZXciLCJ2aWV3cyIsImlzU2hvd2luZyIsImNvbmZpZ3VyZVRpbWVvdXQiLCJub3RpZmljYXRpb25UeXBlcyIsInNldElzU2hvd2luZyIsImN1cnJlbnRQYWdlIiwiaXNMb2dnZWRJbiIsInNpZ25PdXRVc2VyIiwibWVudUlzU2hvd2luZyIsInNldE1lbnVJc1Nob3dpbmciLCJ0ZXh0RGVjb3JhdGlvbiIsInRvcEJhciIsInN1Ym1pdExvZ2luIiwidXBkYXRlRW1haWxGaWVsZCIsInVwZGF0ZVBhc3N3b3JkRmllbGQiLCJzZXRFbWFpbCIsInNldFBhc3N3b3JkIiwiYXV0aGVudGljYXRpb25Ub2tlbiIsImF1dGhlbnRpY2F0aW9uVG9rZW5FeHBpcmF0aW9uRGF0ZSIsInNldEhvbWVWaWV3IiwiVmlld3MiLCJzdWJtaXRBY2NvdW50Q3JlYXRpb24iLCJ1cGRhdGVDb25maXJtUGFzc3dvcmRGaWVsZCIsImxvZ2luRGlkRmFpbCIsIkJMQU5LIiwic2V0Q29uZmlybVBhc3N3b3JkIiwic3VibWl0QWNjb3VudFNldHVwIiwidXBkYXRlQXJlYUNvZGVGaWVsZCIsImlzMThPck92ZXIiLCJ1cGRhdGVJczE4T3JPdmVyIiwidXBkYXRlUHJvZmlsZVBpY3R1cmUiLCJ1c2VySXNWZXJpZmllZCIsInNldFVzZXJJc1ZlcmlmaWVkIiwic2V0QXJlYUNvZGUiLCJzZXRJczE4T3JPdmVyIiwic2V0UHJvZmlsZVBpY3R1cmUiLCJ2ZXJpZmljYXRpb25Ub2tlbiIsInZlcmlmeVVzZXIiLCJzdHVkeUdyb3VwcyIsImhvbWVWaWV3Iiwic3R1ZHlHcm91cHNSZWR1Y2VyIiwiZ2V0U3R1ZHlHcm91cHMiLCJ2ZXJpZnlFbWFpbCIsImdldEdyb3VwcyIsImlzVmVyaWZ5aW5nRW1haWwiLCJ2ZXJpZnlVc2VyRW1haWwiLCJzdHVkeUdyb3VwIiwiZ2V0U2xpZGVyVXRpbGl0eUNsYXNzIiwidXNlVmFsdWVMYWJlbENsYXNzZXMiLCJhcHBlbmRPd25lclN0YXRlIiwiZXhpc3RpbmdQcm9wcyIsImNsaXAiLCJ3aGl0ZVNwYWNlIiwiYXNjIiwiZmluZENsb3Nlc3QiLCJjdXJyZW50VmFsdWUiLCJfdmFsdWVzJHJlZHVjZSIsImNsb3Nlc3RJbmRleCIsImRpc3RhbmNlIiwidHJhY2tGaW5nZXIiLCJ0b3VjaElkIiwidG91Y2hFdmVudCIsInRvdWNoIiwidmFsdWVUb1BlcmNlbnQiLCJzZXRWYWx1ZUluZGV4IiwiZm9jdXNUaHVtYiIsInNsaWRlclJlZiIsImFjdGl2ZUluZGV4Iiwic2V0QWN0aXZlIiwiX3NsaWRlclJlZiRjdXJyZW50IiwiX2RvYyRhY3RpdmVFbGVtZW50IiwiX3NsaWRlclJlZiRjdXJyZW50MiIsImF4aXNQcm9wcyIsImhvcml6b250YWwiLCJwZXJjZW50IiwibGVhcCIsInJpZ2h0IiwidmVydGljYWwiLCJib3R0b20iLCJJZGVudGl0eSIsImNhY2hlZFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lIiwiZG9lc1N1cHBvcnRUb3VjaEFjdGlvbk5vbmUiLCJDU1MiLCJ1c2VTbGlkZXIiLCJhcmlhTGFiZWxsZWRieSIsImRpc2FibGVTd2FwIiwibWFya3MiLCJtYXJrc1Byb3AiLCJvbkNoYW5nZUNvbW1pdHRlZCIsIm9yaWVudGF0aW9uIiwic2NhbGUiLCJ0YWJJbmRleCIsInZhbHVlUHJvcCIsImlzUnRsIiwic2V0T3BlbiIsImRyYWdnaW5nIiwic2V0RHJhZ2dpbmciLCJtb3ZlQ291bnQiLCJ2YWx1ZURlcml2ZWQiLCJzZXRWYWx1ZVN0YXRlIiwidGh1bWJJbmRleCIsImNsb25lZEV2ZW50IiwibWFya3NWYWx1ZXMiLCJoYW5kbGVCbHVyVmlzaWJsZSIsImhhbmRsZUZvY3VzVmlzaWJsZSIsImZvY3VzVmlzaWJsZVJlZiIsInNldEZvY3VzVmlzaWJsZSIsImhhbmRsZUZvY3VzUmVmIiwiaGFuZGxlUmVmIiwiY3JlYXRlSGFuZGxlSGlkZGVuSW5wdXRGb2N1cyIsIm90aGVySGFuZGxlcnMiLCJfb3RoZXJIYW5kbGVycyRvbkZvY3UiLCJjcmVhdGVIYW5kbGVIaWRlbklucHV0Qmx1ciIsIl9vdGhlckhhbmRsZXJzJG9uQmx1ciIsInVzZUVuaGFuY2VkRWZmZWN0IiwiX2RvY3VtZW50JGFjdGl2ZUVsZW1lIiwiYmx1ciIsImNyZWF0ZUhhbmRsZUhpZGRlbklucHV0Q2hhbmdlIiwiX290aGVySGFuZGxlcnMkb25DaGFuIiwibWFya3NJbmRleCIsInZhbHVlQXNOdW1iZXIiLCJjdXJyZW50TWFya0luZGV4IiwicHJldmlvdXNWYWx1ZSIsInByZXZpb3VzSW5kZXgiLCJheGlzIiwiZ2V0RmluZ2VyTmV3VmFsdWUiLCJmaW5nZXIiLCJtb3ZlIiwidmFsdWVzMiIsInNsaWRlciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBlcmNlbnRUb1ZhbHVlIiwibmVhcmVzdCIsInRvRXhwb25lbnRpYWwiLCJtYXRpc3NhRGVjaW1hbFBhcnQiLCJkZWNpbWFsUGFydCIsImdldERlY2ltYWxQcmVjaXNpb24iLCJyb3VuZFZhbHVlVG9TdGVwIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlVG91Y2hFbmQiLCJzdG9wTGlzdGVuaW5nIiwiaGFuZGxlVG91Y2hTdGFydCIsImNyZWF0ZUhhbmRsZU1vdXNlRG93biIsIl9vdGhlckhhbmRsZXJzJG9uTW91cyIsIm9uTW91c2VEb3duIiwidHJhY2tPZmZzZXQiLCJ0cmFja0xlYXAiLCJjcmVhdGVIYW5kbGVNb3VzZU92ZXIiLCJfb3RoZXJIYW5kbGVycyRvbk1vdXMyIiwib25Nb3VzZU92ZXIiLCJjcmVhdGVIYW5kbGVNb3VzZUxlYXZlIiwiX290aGVySGFuZGxlcnMkb25Nb3VzMyIsIm9uTW91c2VMZWF2ZSIsImdldFJvb3RQcm9wcyIsIm93bkV2ZW50SGFuZGxlcnMiLCJtZXJnZWRFdmVudEhhbmRsZXJzIiwiZ2V0SGlkZGVuSW5wdXRQcm9wcyIsImdldFRodW1iUHJvcHMiLCJGb3J3YXJkIiwiU2xpZGVyVW5zdHlsZWQiLCJfY29tcG9uZW50cyRSYWlsIiwiX2NvbXBvbmVudHMkVHJhY2siLCJfY29tcG9uZW50cyRUaHVtYiIsIl9jb21wb25lbnRzJFZhbHVlTGFiZSIsIl9jb21wb25lbnRzJE1hcmsiLCJfY29tcG9uZW50cyRNYXJrTGFiZWwiLCJhcmlhTGFiZWwiLCJhcmlhVmFsdWV0ZXh0IiwiY2xhc3Nlc1Byb3AiLCJnZXRBcmlhTGFiZWwiLCJnZXRBcmlhVmFsdWVUZXh0IiwidmFsdWVMYWJlbERpc3BsYXkiLCJ2YWx1ZUxhYmVsRm9ybWF0IiwiY29tcG9uZW50c1Byb3BzIiwibWFya2VkIiwiUm9vdCIsIlJhaWwiLCJyYWlsUHJvcHMiLCJyYWlsIiwiVHJhY2siLCJ0cmFja1Byb3BzIiwidHJhY2tTdHlsZSIsIlRodW1iIiwidGh1bWJQcm9wcyIsInRodW1iIiwiVmFsdWVMYWJlbCIsInZhbHVlTGFiZWxQcm9wcyIsInZhbHVlTGFiZWwiLCJNYXJrIiwibWFya1Byb3BzIiwiTWFya0xhYmVsIiwibWFya0xhYmVsUHJvcHMiLCJtYXJrTGFiZWwiLCJoaWRkZW5JbnB1dFByb3BzIiwibWFya0FjdGl2ZSIsIm1hcmtMYWJlbEFjdGl2ZSIsIlZhbHVlTGFiZWxDb21wb25lbnQiLCJwb2ludGVyRXZlbnRzIiwiU2xvdCIsInNsaWRlckNsYXNzZXMiLCJTbGlkZXJSb290IiwidHJhY2tJbnZlcnRlZCIsInRyYWNrRmFsc2UiLCJib3hTaXppbmciLCJ0b3VjaEFjdGlvbiIsIldlYmtpdFRhcEhpZ2hsaWdodENvbG9yIiwibWFyZ2luQm90dG9tIiwibWFyZ2luUmlnaHQiLCJjb2xvckFkanVzdCIsIlNsaWRlclJhaWwiLCJTbGlkZXJUcmFjayIsIlNsaWRlclRodW1iIiwib3V0bGluZSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsImJveFNoYWRvdyIsIlNsaWRlclZhbHVlTGFiZWwiLCJ2YWx1ZUxhYmVsT3BlbiIsInRyYW5zZm9ybU9yaWdpbiIsIlNsaWRlck1hcmsiLCJTbGlkZXJNYXJrTGFiZWwiLCJfY29tcG9uZW50c1Byb3BzJHJvb3QiLCJfY29tcG9uZW50c1Byb3BzJHRodW0iLCJfY29tcG9uZW50c1Byb3BzJHRyYWMiLCJfY29tcG9uZW50c1Byb3BzJHZhbHUiLCJleHRlbmRVdGlsaXR5Q2xhc3NlcyIsInVwZGF0ZVRpbWVSYW5nZSIsIlJlYWN0Iiwic2V0VmFsdWVzIiwibmV3TnVtIiwiaG91cnMiLCJyaG91cnMiLCJtaW51dGVzIiwicm1pbnV0ZXMiLCJob3VyczIiLCJyaG91cnMyIiwibWludXRlczIiLCJybWludXRlczIiLCJBbU9yUG0xIiwiQW1PclBtMiIsInRpbWUyIiwiTm90Y2hlZE91dGxpbmVSb290IiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsIk5vdGNoZWRPdXRsaW5lTGVnZW5kIiwiZmxvYXQiLCJ2aXNpYmlsaXR5IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJub3RjaGVkIiwidXNlRm9ybUNvbnRyb2wiLCJmb3JtQ29udHJvbFN0YXRlIiwic3RhdGVzIiwibXVpRm9ybUNvbnRyb2wiLCJnZXRPdXRsaW5lZElucHV0VXRpbGl0eUNsYXNzIiwiZ2V0U3R5bGVWYWx1ZSIsImNvbXB1dGVkU3R5bGUiLCJtYXhSb3dzIiwibWluUm93cyIsImlucHV0UmVmIiwic2hhZG93UmVmIiwicmVuZGVycyIsInN5bmNIZWlnaHQiLCJnZXRDb21wdXRlZFN0eWxlIiwiaW5wdXRTaGFsbG93IiwicGxhY2Vob2xkZXIiLCJpbm5lckhlaWdodCIsInNjcm9sbEhlaWdodCIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0Iiwib3V0ZXJIZWlnaHRTdHlsZSIsInByZXZTdGF0ZSIsImhhbmRsZVJlc2l6ZSIsImNvbnRhaW5lcldpbmRvdyIsInJlc2l6ZU9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsInJvd3MiLCJHbG9iYWxTdHlsZXMiLCJnbG9iYWxTdHlsZXMiLCJoYXNWYWx1ZSIsImlzRmlsbGVkIiwiU1NSIiwiZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzIiwicm9vdE92ZXJyaWRlc1Jlc29sdmVyIiwiZm9ybUNvbnRyb2wiLCJzdGFydEFkb3JubWVudCIsImFkb3JuZWRTdGFydCIsImVuZEFkb3JubWVudCIsImFkb3JuZWRFbmQiLCJzaXplU21hbGwiLCJtdWx0aWxpbmUiLCJmdWxsV2lkdGgiLCJoaWRkZW5MYWJlbCIsImlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIiLCJpbnB1dFNpemVTbWFsbCIsImlucHV0TXVsdGlsaW5lIiwiaW5wdXRUeXBlU2VhcmNoIiwiaW5wdXRBZG9ybmVkU3RhcnQiLCJpbnB1dEFkb3JuZWRFbmQiLCJpbnB1dEhpZGRlbkxhYmVsIiwiSW5wdXRCYXNlUm9vdCIsInBhZGRpbmdUb3AiLCJJbnB1dEJhc2VDb21wb25lbnQiLCJwbGFjZWhvbGRlckhpZGRlbiIsInBsYWNlaG9sZGVyVmlzaWJsZSIsImZvbnQiLCJhbmltYXRpb25EdXJhdGlvbiIsIldlYmtpdEFwcGVhcmFuY2UiLCJXZWJraXRUZXh0RmlsbENvbG9yIiwicmVzaXplIiwiTW96QXBwZWFyYW5jZSIsImlucHV0R2xvYmFsU3R5bGVzIiwiSW5wdXRCYXNlIiwiYXJpYURlc2NyaWJlZGJ5IiwiYXV0b0NvbXBsZXRlIiwiZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyIsImlucHV0Q29tcG9uZW50IiwiaW5wdXRQcm9wc1Byb3AiLCJpbnB1dFJlZlByb3AiLCJvbktleURvd24iLCJvbktleVVwIiwicmVuZGVyU3VmZml4IiwiaGFuZGxlSW5wdXRSZWZXYXJuaW5nIiwiaGFuZGxlSW5wdXRQcm9wc1JlZlByb3AiLCJoYW5kbGVJbnB1dFJlZlByb3AiLCJoYW5kbGVJbnB1dFJlZiIsInNldEZvY3VzZWQiLCJmY3MiLCJvbkZpbGxlZCIsIm9uRW1wdHkiLCJjaGVja0RpcnR5IiwiSW5wdXRDb21wb25lbnQiLCJzZXRBZG9ybmVkU3RhcnQiLCJvbkFuaW1hdGlvblN0YXJ0IiwiT3V0bGluZWRJbnB1dFJvb3QiLCJub3RjaGVkT3V0bGluZSIsIk91dGxpbmVkSW5wdXRJbnB1dCIsIldlYmtpdEJveFNoYWRvdyIsImNhcmV0Q29sb3IiLCJPdXRsaW5lZElucHV0IiwiX1JlYWN0JEZyYWdtZW50IiwiY29tcG9zZWRDbGFzc2VzIiwiZmlsbGVkIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiaW4iLCJleGl0IiwiZW50ZXIiLCJUcmFuc2l0aW9uR3JvdXAiLCJoYW5kbGVFeGl0ZWQiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwiZW50ZXJLZXlmcmFtZSIsImV4aXRLZXlmcmFtZSIsInB1bHNhdGVLZXlmcmFtZSIsIlRvdWNoUmlwcGxlUm9vdCIsIlRvdWNoUmlwcGxlUmlwcGxlIiwicHVsc2F0ZSIsInJpcHBsZVgiLCJyaXBwbGVZIiwicmlwcGxlU2l6ZSIsImluUHJvcCIsImxlYXZpbmciLCJzZXRMZWF2aW5nIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlIiwicmlwcGxlVmlzaWJsZSIsInJpcHBsZVB1bHNhdGUiLCJyaXBwbGVTdHlsZXMiLCJjaGlsZENsYXNzTmFtZSIsImNoaWxkTGVhdmluZyIsImNoaWxkUHVsc2F0ZSIsInRpbWVvdXRJZCIsIlRvdWNoUmlwcGxlIiwiY2VudGVyIiwiY2VudGVyUHJvcCIsInJpcHBsZXMiLCJzZXRSaXBwbGVzIiwicmlwcGxlQ2FsbGJhY2siLCJpZ25vcmluZ01vdXNlRG93biIsInN0YXJ0VGltZXIiLCJzdGFydFRpbWVyQ29tbWl0Iiwic3RhcnRDb21taXQiLCJvbGRSaXBwbGVzIiwiZmFrZUVsZW1lbnQiLCJzcXJ0Iiwic2l6ZVgiLCJjbGllbnRXaWR0aCIsInNpemVZIiwiY2xpZW50SGVpZ2h0IiwiZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyIsIkJ1dHRvbkJhc2VSb290IiwidmVydGljYWxBbGlnbiIsImNlbnRlclJpcHBsZSIsImRpc2FibGVSaXBwbGUiLCJkaXNhYmxlVG91Y2hSaXBwbGUiLCJmb2N1c1JpcHBsZSIsIkxpbmtDb21wb25lbnQiLCJvbkNvbnRleHRNZW51Iiwib25EcmFnTGVhdmUiLCJvbkZvY3VzVmlzaWJsZSIsIm9uTW91c2VVcCIsIm9uVG91Y2hFbmQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hTdGFydCIsIlRvdWNoUmlwcGxlUHJvcHMiLCJidXR0b25SZWYiLCJyaXBwbGVSZWYiLCJ1c2VSaXBwbGVIYW5kbGVyIiwicmlwcGxlQWN0aW9uIiwiZXZlbnRDYWxsYmFjayIsInNraXBSaXBwbGVBY3Rpb24iLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVDb250ZXh0TWVudSIsImhhbmRsZURyYWdMZWF2ZSIsImhhbmRsZU1vdXNlVXAiLCJoYW5kbGVNb3VzZUxlYXZlIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwiaXNOb25OYXRpdmVCdXR0b24iLCJrZXlkb3duUmVmIiwiaGFuZGxlS2V5VXAiLCJDb21wb25lbnRQcm9wIiwiYnV0dG9uUHJvcHMiLCJoYW5kbGVPd25SZWYiLCJtb3VudGVkU3RhdGUiLCJzZXRNb3VudGVkU3RhdGUiLCJlbmFibGVUb3VjaFJpcHBsZSIsImZvY3VzVmlzaWJsZUNsYXNzTmFtZSIsImdldE1lbnVJdGVtVXRpbGl0eUNsYXNzIiwiTWVudUl0ZW1Sb290IiwiZGVuc2UiLCJkaXNhYmxlR3V0dGVycyIsImd1dHRlcnMiLCJwYWRkaW5nQm90dG9tIiwiYmFja2dyb3VuZENsaXAiLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0IiwiTWVudUl0ZW0iLCJ0YWJJbmRleFByb3AiLCJtZW51SXRlbVJlZiIsImdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMiLCJGb3JtQ29udHJvbFJvb3QiLCJmbGV4RGlyZWN0aW9uIiwidmlzdWFsbHlGb2N1c2VkIiwiaW5pdGlhbEFkb3JuZWRTdGFydCIsImlzTXVpRWxlbWVudCIsInNldEZpbGxlZCIsImluaXRpYWxGaWxsZWQiLCJmb2N1c2VkU3RhdGUiLCJyZWdpc3RlckVmZmVjdCIsImdldExpc3RVdGlsaXR5Q2xhc3MiLCJMaXN0Um9vdCIsImRpc2FibGVQYWRkaW5nIiwic3ViaGVhZGVyIiwibGlzdFN0eWxlIiwiTGlzdCIsImdldFNjcm9sbGJhclNpemUiLCJkb2N1bWVudFdpZHRoIiwiaW5uZXJXaWR0aCIsIm5leHRJdGVtIiwiZGlzYWJsZUxpc3RXcmFwIiwicHJldmlvdXNJdGVtIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInRleHRDcml0ZXJpYU1hdGNoZXMiLCJuZXh0Rm9jdXMiLCJ0ZXh0Q3JpdGVyaWEiLCJpbm5lclRleHQiLCJyZXBlYXRpbmciLCJtb3ZlRm9jdXMiLCJjdXJyZW50Rm9jdXMiLCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlIiwidHJhdmVyc2FsRnVuY3Rpb24iLCJ3cmFwcGVkT25jZSIsIm5leHRGb2N1c0Rpc2FibGVkIiwiTWVudUxpc3QiLCJhY3Rpb25zIiwiYXV0b0ZvY3VzSXRlbSIsImxpc3RSZWYiLCJ0ZXh0Q3JpdGVyaWFSZWYiLCJwcmV2aW91c0tleU1hdGNoZWQiLCJsYXN0VGltZSIsImFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyIiwiY29udGFpbmVyRWxlbWVudCIsIm5vRXhwbGljaXRXaWR0aCIsInNjcm9sbGJhclNpemUiLCJhY3RpdmVJdGVtSW5kZXgiLCJpdGVtcyIsIm5ld0NoaWxkUHJvcHMiLCJjcml0ZXJpYSIsImxvd2VyS2V5IiwiY3VyclRpbWUiLCJrZWVwRm9jdXNPbkN1cnJlbnQiLCJnZXRQYXBlclV0aWxpdHlDbGFzcyIsImdldE92ZXJsYXlBbHBoYSIsImVsZXZhdGlvbiIsImFscGhhVmFsdWUiLCJQYXBlclJvb3QiLCJzcXVhcmUiLCJyb3VuZGVkIiwiYmFja2dyb3VuZEltYWdlIiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsIlRyYW5zaXRpb24iLCJpbml0aWFsU3RhdHVzIiwiYXBwZWFyU3RhdHVzIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsIm5leHRDYWxsYmFjayIsInVwZGF0ZVN0YXR1cyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJub2RlUmVmIiwibWF5YmVOb2RlIiwibWF5YmVBcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsIm9uRW50ZXIiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwib25FbnRlcmVkIiwiX3RoaXMzIiwib25FeGl0Iiwib25FeGl0aW5nIiwic2V0TmV4dENhbGxiYWNrIiwiX3RoaXM0IiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwiX3JlZjMiLCJtYXliZU5leHRDYWxsYmFjayIsImNoaWxkUHJvcHMiLCJyZWZsb3ciLCJnZXRUcmFuc2l0aW9uUHJvcHMiLCJfc3R5bGUkdHJhbnNpdGlvbkR1cmEiLCJfc3R5bGUkdHJhbnNpdGlvblRpbWkiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJnZXRTY2FsZSIsImVudGVyaW5nIiwiZW50ZXJlZCIsIkdyb3ciLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwidGltZXIiLCJhdXRvVGltZW91dCIsImZvcmVpZ25SZWYiLCJub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrIiwibWF5YmVJc0FwcGVhcmluZyIsImhhbmRsZUVudGVyaW5nIiwiaGFuZGxlRW50ZXIiLCJpc0FwcGVhcmluZyIsImhhbmRsZUVudGVyZWQiLCJoYW5kbGVFeGl0aW5nIiwiaGFuZGxlRXhpdCIsIm11aVN1cHBvcnRBdXRvIiwiZGlzYWJsZVBvcnRhbCIsIm1vdW50Tm9kZSIsInNldE1vdW50Tm9kZSIsImdldENvbnRhaW5lciIsImFyaWFIaWRkZW4iLCJzaG93IiwiZ2V0UGFkZGluZ1JpZ2h0IiwiYXJpYUhpZGRlblNpYmxpbmdzIiwibW91bnRFbGVtZW50IiwiY3VycmVudEVsZW1lbnQiLCJlbGVtZW50c1RvRXhjbHVkZSIsImJsYWNrbGlzdFRhZ05hbWVzIiwiZmluZEluZGV4T2YiLCJpZHgiLCJjYW5kaWRhdGVzU2VsZWN0b3IiLCJkZWZhdWx0R2V0VGFiYmFibGUiLCJyZWd1bGFyVGFiTm9kZXMiLCJvcmRlcmVkVGFiTm9kZXMiLCJub2RlVGFiSW5kZXgiLCJ0YWJpbmRleEF0dHIiLCJnZXRUYWJJbmRleCIsImdldFJhZGlvIiwicm92aW5nIiwiaXNOb25UYWJiYWJsZVJhZGlvIiwiaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZSIsImRvY3VtZW50T3JkZXIiLCJkZWZhdWx0SXNFbmFibGVkIiwiZGlzYWJsZUF1dG9Gb2N1cyIsImRpc2FibGVFbmZvcmNlRm9jdXMiLCJkaXNhYmxlUmVzdG9yZUZvY3VzIiwiZ2V0VGFiYmFibGUiLCJpc0VuYWJsZWQiLCJpZ25vcmVOZXh0RW5mb3JjZUZvY3VzIiwic2VudGluZWxTdGFydCIsInNlbnRpbmVsRW5kIiwibm9kZVRvUmVzdG9yZSIsInJlYWN0Rm9jdXNFdmVudFRhcmdldCIsImFjdGl2YXRlZCIsInJvb3RSZWYiLCJsYXN0S2V5ZG93biIsImNvbnRhaW4iLCJyb290RWxlbWVudCIsImhhc0ZvY3VzIiwidGFiYmFibGUiLCJfbGFzdEtleWRvd24kY3VycmVudCIsIl9sYXN0S2V5ZG93biRjdXJyZW50MiIsImlzU2hpZnRUYWIiLCJmb2N1c05leHQiLCJmb2N1c1ByZXZpb3VzIiwibG9vcEZvY3VzIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaGFuZGxlRm9jdXNTZW50aW5lbCIsImNoaWxkcmVuUHJvcHNIYW5kbGVyIiwiZ2V0TW9kYWxVdGlsaXR5Q2xhc3MiLCJkZWZhdWx0TWFuYWdlciIsImNvbnRhaW5lcnMiLCJtb2RhbHMiLCJtb2RhbEluZGV4IiwibW9kYWxSZWYiLCJoaWRkZW5TaWJsaW5ncyIsImdldEhpZGRlblNpYmxpbmdzIiwibW91bnQiLCJjb250YWluZXJJbmRleCIsInJlc3RvcmUiLCJyZXN0b3JlU3R5bGUiLCJkaXNhYmxlU2Nyb2xsTG9jayIsImlzT3ZlcmZsb3dpbmciLCJlbCIsInBhcmVudEVsZW1lbnQiLCJzY3JvbGxDb250YWluZXIiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJyZW1vdmVQcm9wZXJ0eSIsImhhbmRsZUNvbnRhaW5lciIsIm5leHRUb3AiLCJpc1RvcE1vZGFsIiwiQmFja2Ryb3BDb21wb25lbnQiLCJCYWNrZHJvcFByb3BzIiwiY2xvc2VBZnRlclRyYW5zaXRpb24iLCJkaXNhYmxlRXNjYXBlS2V5RG93biIsImhpZGVCYWNrZHJvcCIsImtlZXBNb3VudGVkIiwibWFuYWdlciIsIm9uQmFja2Ryb3BDbGljayIsIm9uQ2xvc2UiLCJvblRyYW5zaXRpb25FbnRlciIsIm9uVHJhbnNpdGlvbkV4aXRlZCIsImV4aXRlZCIsInNldEV4aXRlZCIsIm1vdW50Tm9kZVJlZiIsImhhc1RyYW5zaXRpb24iLCJnZXRIYXNUcmFuc2l0aW9uIiwiZ2V0TW9kYWwiLCJoYW5kbGVNb3VudGVkIiwiaGFuZGxlT3BlbiIsInJlc29sdmVkQ29udGFpbmVyIiwiaGFuZGxlUG9ydGFsUmVmIiwiaGFuZGxlQ2xvc2UiLCJnZXRCYWNrZHJvcFV0aWxpdHlDbGFzcyIsImludmlzaWJsZSIsImRlZmF1bHRUaW1lb3V0IiwidHJhbnNpdGlvblByb3BzIiwid2Via2l0VHJhbnNpdGlvbiIsIkJhY2tkcm9wUm9vdCIsIk1vZGFsUm9vdCIsImhpZGRlbiIsIk1vZGFsQmFja2Ryb3AiLCJiYWNrZHJvcCIsImNvbW1vblByb3BzIiwiZ2V0UG9wb3ZlclV0aWxpdHlDbGFzcyIsImdldE9mZnNldFRvcCIsImdldE9mZnNldExlZnQiLCJnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSIsInJlc29sdmVBbmNob3JFbCIsImFuY2hvckVsIiwiUG9wb3ZlclJvb3QiLCJQb3BvdmVyUGFwZXIiLCJhbmNob3JPcmlnaW4iLCJhbmNob3JQb3NpdGlvbiIsImFuY2hvclJlZmVyZW5jZSIsImNvbnRhaW5lclByb3AiLCJtYXJnaW5UaHJlc2hvbGQiLCJQYXBlclByb3BzIiwidHJhbnNpdGlvbkR1cmF0aW9uUHJvcCIsIlRyYW5zaXRpb25Qcm9wcyIsInBhcGVyUmVmIiwiaGFuZGxlUGFwZXJSZWYiLCJnZXRBbmNob3JPZmZzZXQiLCJyZXNvbHZlZEFuY2hvckVsIiwiYW5jaG9yUmVjdCIsImdldFRyYW5zZm9ybU9yaWdpbiIsImVsZW1SZWN0IiwiZ2V0UG9zaXRpb25pbmdTdHlsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZWxlbVRyYW5zZm9ybU9yaWdpbiIsImhlaWdodFRocmVzaG9sZCIsIndpZHRoVGhyZXNob2xkIiwic2V0UG9zaXRpb25pbmdTdHlsZXMiLCJwb3NpdGlvbmluZyIsInVwZGF0ZVBvc2l0aW9uIiwiZ2V0TWVudVV0aWxpdHlDbGFzcyIsIlJUTF9PUklHSU4iLCJMVFJfT1JJR0lOIiwiTWVudVJvb3QiLCJNZW51UGFwZXIiLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsIk1lbnVNZW51TGlzdCIsImRpc2FibGVBdXRvRm9jdXNJdGVtIiwiTWVudUxpc3RQcm9wcyIsIlBvcG92ZXJDbGFzc2VzIiwibWVudUxpc3RBY3Rpb25zUmVmIiwiZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMiLCJuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMiLCJOYXRpdmVTZWxlY3RTZWxlY3QiLCJuYXRpdmVTZWxlY3RJY29uU3R5bGVzIiwiTmF0aXZlU2VsZWN0SWNvbiIsImljb25PcGVuIiwiSWNvbkNvbXBvbmVudCIsImdldFNlbGVjdFV0aWxpdHlDbGFzc2VzIiwiU2VsZWN0U2VsZWN0IiwidGV4dE92ZXJmbG93IiwiU2VsZWN0SWNvbiIsIlNlbGVjdE5hdGl2ZUlucHV0IiwibmF0aXZlSW5wdXQiLCJhcmVFcXVhbFZhbHVlcyIsIlNlbGVjdElucHV0IiwiYXV0b1dpZHRoIiwiZGVmYXVsdE9wZW4iLCJkaXNwbGF5RW1wdHkiLCJsYWJlbElkIiwiTWVudVByb3BzIiwib25PcGVuIiwib3BlblByb3AiLCJyZW5kZXJWYWx1ZSIsIlNlbGVjdERpc3BsYXlQcm9wcyIsIm9wZW5TdGF0ZSIsInNldE9wZW5TdGF0ZSIsImRpc3BsYXlSZWYiLCJkaXNwbGF5Tm9kZSIsInNldERpc3BsYXlOb2RlIiwiaXNPcGVuQ29udHJvbGxlZCIsIm1lbnVNaW5XaWR0aFN0YXRlIiwic2V0TWVudU1pbldpZHRoU3RhdGUiLCJoYW5kbGVEaXNwbGF5UmVmIiwiZ2V0RWxlbWVudEJ5SWQiLCJpc0NvbGxhcHNlZCIsImNoaWxkcmVuQXJyYXkiLCJoYW5kbGVJdGVtQ2xpY2siLCJpdGVtSW5kZXgiLCJkaXNwbGF5U2luZ2xlIiwiZGlzcGxheU11bHRpcGxlIiwiY29tcHV0ZURpc3BsYXkiLCJmb3VuZE1hdGNoIiwibWVudU1pbldpZHRoIiwiYnV0dG9uSWQiLCJnZXRJbnB1dFV0aWxpdHlDbGFzcyIsIklucHV0Um9vdCIsImRpc2FibGVVbmRlcmxpbmUiLCJ1bmRlcmxpbmUiLCJib3R0b21MaW5lQ29sb3IiLCJib3JkZXJCb3R0b21TdHlsZSIsIklucHV0SW5wdXQiLCJjb21wb25lbnRzUHJvcHNQcm9wIiwiaW5wdXRDb21wb25lbnRzUHJvcHMiLCJnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcyIsIkZpbGxlZElucHV0Um9vdCIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsIkZpbGxlZElucHV0SW5wdXQiLCJGaWxsZWRJbnB1dCIsImZpbGxlZElucHV0Q29tcG9uZW50c1Byb3BzIiwiX0lucHV0IiwiX0ZpbGxlZElucHV0IiwiU2VsZWN0IiwiQXJyb3dEcm9wRG93biIsIm5hdGl2ZSIsInZhcmlhbnRQcm9wcyIsIm91dGxpbmVkIiwiaW5wdXRDb21wb25lbnRSZWYiLCJnZXRDaGlwVXRpbGl0eUNsYXNzIiwiQ2hpcFJvb3QiLCJjbGlja2FibGUiLCJvbkRlbGV0ZSIsImF2YXRhciIsImRlbGV0ZUljb24iLCJkZWxldGFibGUiLCJkZWxldGVJY29uQ29sb3IiLCJDaGlwTGFiZWwiLCJpc0RlbGV0ZUtleWJvYXJkRXZlbnQiLCJrZXlib2FyZEV2ZW50IiwiYXZhdGFyUHJvcCIsImNsaWNrYWJsZVByb3AiLCJkZWxldGVJY29uUHJvcCIsImljb25Qcm9wIiwiY2hpcFJlZiIsImhhbmRsZURlbGV0ZUljb25DbGljayIsIm1vcmVQcm9wcyIsImN1c3RvbUNsYXNzZXMiLCJkZWxldGVJY29uU21hbGwiLCJJVEVNX0hFSUdIVCIsImdldFN0eWxlcyIsInBlcnNvbk5hbWUiLCJzZXRJdGVtcyIsImNob3Nlbkl0ZW0iLCJzZXRDaG9zZW5JdGVtIiwiZmxleFdyYXAiLCJzZWFyY2hUZXJtIiwibWVldGluZ0Zvcm1hdCIsInRpbWVSYW5nZSIsInVwZGF0ZVNlYXJjaFRlcm0iLCJkYXlzIiwibWVldGluZ0ZyZXF1ZW5jaWVzIiwidXBkYXRlU3ViamVjdCIsInVwZGF0ZU1lZXRpbmdGb3JtYXQiLCJ1cGRhdGVUeXBlIiwidXBkYXRlRGF5cyIsInVwZGF0ZU1lZXRpbmdGcmVxdWVuY2llcyIsInN1Ym1pdFNlYXJjaCIsIk1lZXRpbmdGb3JtYXRzIiwic2V0U2VhcmNoVGVybSIsInNldE1lZXRpbmdGb3JtYXQiLCJzZXRUeXBlIiwic2V0VGltZVJhbmdlIiwic2V0RGF5cyIsInNldE1lZXRpbmdGcmVxdWVuY2llcyIsInNob3dKb2luU3R1ZHlHcm91cFBvcHVwIiwibWVtYmVycyIsInN1Ym1pdERlbGV0ZSIsInN1Ym1pdExlYXZlIiwic2hvd0VkaXRTdHVkeUdyb3VwUG9wdXAiLCJmZWVkUmVmIiwicG9zdHMiLCJoYW5kbGVTZWxlY3RNZWV0aW5nIiwicmVjdXJyaW5nTWVldGluZ1NlbGVjdGVkIiwic2hvd0NyZWF0ZU1lZXRpbmdTdHVkeUdyb3VwUG9wdXAiLCJjcmVhdGVkQXQiLCJyZXNwb25zZXMiLCJzaG93Q3JlYXRlUG9zdFN0dWR5R3JvdXBQb3B1cCIsInNldEdyb3VwIiwiZ2V0U3R1ZHlHcm91cCIsInN1Ym1pdE5ld0VtYWlsIiwic3VibWl0TmV3UGFzc3dvcmQiLCJzdWJtaXREZWxldGVBY2NvdW50IiwieGRvbWFpbiIsInBpY2siLCJhdHRyIiwiTkFUSVZFX1NFVF9USU1FT1VUIiwiTkFUSVZFX0NMRUFSX1RJTUVPVVQiLCJpbnN0YWxsVGltZXJGdW5jdGlvbnMiLCJ1c2VOYXRpdmVUaW1lcnMiLCJzZXRUaW1lb3V0Rm4iLCJjbGVhclRpbWVvdXRGbiIsIlBBQ0tFVF9UWVBFUyIsIlBBQ0tFVF9UWVBFU19SRVZFUlNFIiwiRVJST1JfUEFDS0VUIiwid2l0aE5hdGl2ZUJsb2IiLCJCbG9iIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiZW5jb2RlQmxvYkFzQmFzZTY0IiwiZmlsZVJlYWRlciIsInN1cHBvcnRzQmluYXJ5IiwiY2hhcnMiLCJsb29rdXAiLCJVaW50OEFycmF5IiwiZGVjb2RlQmFzZTY0UGFja2V0IiwiYmluYXJ5VHlwZSIsImVuY29kZWQxIiwiZW5jb2RlZDIiLCJlbmNvZGVkMyIsImVuY29kZWQ0IiwiYnVmZmVyTGVuZ3RoIiwiYXJyYXlidWZmZXIiLCJieXRlcyIsIm1hcEJpbmFyeSIsImVuY29kZWRQYWNrZXQiLCJTRVBBUkFUT1IiLCJUcmFuc3BvcnQiLCJzb2NrZXQiLCJtc2ciLCJkb09wZW4iLCJjbG9zZSIsImRvQ2xvc2UiLCJwYWNrZXRzIiwib25EYXRhIiwicGFja2V0Iiwib25QYWNrZXQiLCJQb2xsaW5nIiwicG9sbGluZyIsInBvbGwiLCJwYXVzZSIsIm9uUGF1c2UiLCJ0b3RhbCIsImRvUG9sbCIsImVuY29kZWRQYXlsb2FkIiwiZW5jb2RlZFBhY2tldHMiLCJkZWNvZGVkUGFja2V0IiwiZGVjb2RlUGF5bG9hZCIsImVuY29kZVBheWxvYWQiLCJkb1dyaXRlIiwidGltZXN0YW1wUmVxdWVzdHMiLCJ0aW1lc3RhbXBQYXJhbSIsInNpZCIsImI2NCIsImVuY29kZWRRdWVyeSIsInBhcnNlcXMiLCJlbXB0eSIsImhhc1hIUjIiLCJSZXF1ZXN0IiwieHNjaGVtZSIsInhociIsImV4dHJhSGVhZGVycyIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInJlcXVlc3RUaW1lb3V0Iiwib25Mb2FkIiwicmVxdWVzdHNDb3VudCIsInJlcXVlc3RzIiwib25TdWNjZXNzIiwiY2xlYW51cCIsImZyb21FcnJvciIsInVubG9hZEhhbmRsZXIiLCJXZWJTb2NrZXQiLCJpc1JlYWN0TmF0aXZlIiwiV1MiLCJmb3JjZUJhc2U2NCIsImNoZWNrIiwicHJvdG9jb2xzIiwid3MiLCJhZGRFdmVudExpc3RlbmVycyIsIm9ub3BlbiIsImF1dG9VbnJlZiIsIl9zb2NrZXQiLCJ1bnJlZiIsIm9uY2xvc2UiLCJldiIsImxhc3RQYWNrZXQiLCJ0cmFuc3BvcnRzIiwid2Vic29ja2V0IiwiaXNTU0wiLCJyZXEiLCJwb2xsWGhyIiwiU29ja2V0IiwicGFyc2V1cmkiLCJ3cml0ZUJ1ZmZlciIsInByZXZCdWZmZXJMZW4iLCJhZ2VudCIsInVwZ3JhZGUiLCJyZW1lbWJlclVwZ3JhZGUiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInRocmVzaG9sZCIsInRyYW5zcG9ydE9wdGlvbnMiLCJjbG9zZU9uQmVmb3JldW5sb2FkIiwidXBncmFkZXMiLCJwaW5nSW50ZXJ2YWwiLCJwaW5nVGltZW91dCIsInBpbmdUaW1lb3V0VGltZXIiLCJ0cmFuc3BvcnQiLCJvZmZsaW5lRXZlbnRMaXN0ZW5lciIsImNyZWF0ZVRyYW5zcG9ydCIsIkVJTyIsInByaW9yV2Vic29ja2V0U3VjY2VzcyIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJwcm9iZSIsImZhaWxlZCIsIm9uVHJhbnNwb3J0T3BlbiIsInVwZ3JhZGluZyIsImZyZWV6ZVRyYW5zcG9ydCIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbnVwZ3JhZGUiLCJvbkhhbmRzaGFrZSIsInJlc2V0UGluZ1RpbWVvdXQiLCJzZW5kUGFja2V0IiwiZmlsdGVyVXBncmFkZXMiLCJjb21wcmVzcyIsImNsZWFudXBBbmRDbG9zZSIsIndhaXRGb3JVcGdyYWRlIiwiZmlsdGVyZWRVcGdyYWRlcyIsIndpdGhOYXRpdmVGaWxlIiwiRmlsZSIsImlzQmluYXJ5IiwiaGFzQmluYXJ5IiwiZGVjb25zdHJ1Y3RQYWNrZXQiLCJidWZmZXJzIiwicGFja2V0RGF0YSIsInBhY2siLCJfZGVjb25zdHJ1Y3RQYWNrZXQiLCJhdHRhY2htZW50cyIsIl9wbGFjZWhvbGRlciIsIm5ld0RhdGEiLCJyZWNvbnN0cnVjdFBhY2tldCIsIl9yZWNvbnN0cnVjdFBhY2tldCIsIlBhY2tldFR5cGUiLCJFbmNvZGVyIiwiRVZFTlQiLCJBQ0siLCJlbmNvZGVBc1N0cmluZyIsIkJJTkFSWV9FVkVOVCIsIkJJTkFSWV9BQ0siLCJlbmNvZGVBc0JpbmFyeSIsIm5zcCIsImRlY29uc3RydWN0aW9uIiwiRGVjb2RlciIsImRlY29kZVN0cmluZyIsInJlY29uc3RydWN0b3IiLCJCaW5hcnlSZWNvbnN0cnVjdG9yIiwidGFrZUJpbmFyeURhdGEiLCJidWYiLCJ0cnlQYXJzZSIsImlzUGF5bG9hZFZhbGlkIiwiQ09OTkVDVCIsIkRJU0NPTk5FQ1QiLCJDT05ORUNUX0VSUk9SIiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsInJlY29uUGFjayIsImJpbkRhdGEiLCJSRVNFUlZFRF9FVkVOVFMiLCJjb25uZWN0IiwiY29ubmVjdF9lcnJvciIsImRpc2Nvbm5lY3RpbmciLCJuZXdMaXN0ZW5lciIsImlvIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwicmVjZWl2ZUJ1ZmZlciIsInNlbmRCdWZmZXIiLCJpZHMiLCJhY2tzIiwiX2F1dG9Db25uZWN0Iiwic3ViRXZlbnRzIiwic3VicyIsIm9ucGFja2V0IiwiX3JlYWR5U3RhdGUiLCJhY2siLCJfcmVnaXN0ZXJBY2tDYWxsYmFjayIsImlzVHJhbnNwb3J0V3JpdGFibGUiLCJlbmdpbmUiLCJ2b2xhdGlsZSIsIl9wYWNrZXQiLCJvbmNvbm5lY3QiLCJvbmV2ZW50Iiwib25hY2siLCJvbmRpc2Nvbm5lY3QiLCJlbWl0RXZlbnQiLCJfYW55TGlzdGVuZXJzIiwiZW1pdEJ1ZmZlcmVkIiwic3ViRGVzdHJveSIsIm9uQW55IiwicHJlcGVuZEFueSIsIm9mZkFueSIsImxpc3RlbmVyc0FueSIsIk1hbmFnZXIiLCJfYSIsIm5zcHMiLCJyZWNvbm5lY3Rpb24iLCJyZWNvbm5lY3Rpb25BdHRlbXB0cyIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIl9wYXJzZXIiLCJkZWNvZGVyIiwiYXV0b0Nvbm5lY3QiLCJfcmVjb25uZWN0aW9uIiwiX3JlY29ubmVjdGlvbkF0dGVtcHRzIiwiX3JlY29ubmVjdGlvbkRlbGF5IiwiX3JhbmRvbWl6YXRpb25GYWN0b3IiLCJfcmVjb25uZWN0aW9uRGVsYXlNYXgiLCJfdGltZW91dCIsIm1heWJlUmVjb25uZWN0T25PcGVuIiwiX3JlY29ubmVjdGluZyIsInJlY29ubmVjdCIsInNraXBSZWNvbm5lY3QiLCJvcGVuU3ViRGVzdHJveSIsImVycm9yU3ViIiwib25waW5nIiwib25kYXRhIiwib25kZWNvZGVkIiwiX2Rlc3Ryb3kiLCJfY2xvc2UiLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJzYW1lTmFtZXNwYWNlIiwiZm9yY2VOZXciLCJtdWx0aXBsZXgiLCJjb252ZXJzYXRpb24iLCJtZXNzYWdlc1ZpZXdSZWYiLCJsb2dnZWRJblVzZXIiLCJyZWNlaXZpbmdVc2VyIiwicGFydGljaXBhbnRzIiwic2VuZGVySWQiLCJzZXRTb2NrZXQiLCJzZXRNZXNzYWdlIiwibWVzc2FnZXMiLCJzZXRNZXNzYWdlcyIsImxvYWRDb252ZXJzYXRpb24iLCJpbml0aWFsU29ja2V0IiwidGVtcE1lc3NhZ2VzIiwiZXJyb3JNZXNzYWdlIiwic2V0U2VsZWN0ZWRDb252ZXJzYXRpb24iLCJjb252ZXJzYXRpb25zIiwic2V0Q29udmVyc2F0aW9ucyIsInBvcHVsYXRlQ29udmVyc2F0aW9ucyIsImNoYXQiLCJvdGhlckNoYXQiLCJzZWxlY3RlZENvbnZlcnNhdGlvbiIsInNldEhhc05vdE1vdW50ZWQiLCJwb3B1cElzU2hvd2luZyIsIm5vdGlmaWNhdGlvbklzU2hvd2luZyIsInVwZGF0ZUF1dGhlbnRpY2F0aW9uVG9rZW4iLCJhY2NvdW50U2V0dXBWaWV3IiwiYWNjb3VudExvZ2luVmlldyIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsInN5bSIsIl9vYmplY3RTcHJlYWQyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiJCRvYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiY29tcG9zZSIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiY3VycmVudERhdGUiLCJqd3RFeHBpcmF0aW9uRGF0ZSIsImluaXRpYWxTdGF0ZSIsImFsbFJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiY29tYmluZVJlZHVjZXJzIiwic2V0SXRlbSIsInBlcnNpc3RpZW50U3RhdGUiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwibWlkZGxld2FyZXMiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwibWlkZGxld2FyZSIsImFwcGx5TWlkZGxld2FyZSIsIlJlYWN0RE9NIl0sInNvdXJjZVJvb3QiOiIifQ==